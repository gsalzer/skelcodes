{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.15;\r\n\r\ncontract TokenInterface {\r\n    mapping (address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n    uint256 public totalSupply;\r\n    function balanceOf(address _owner) constant returns (uint256 balance);\r\n    function transfer(address _to, uint256 _amount) returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _amount) returns (bool success);\r\n    function approve(address _spender, uint256 _amount) returns (bool success);\r\n    function allowance(\r\n        address _owner,\r\n        address _spender\r\n    ) constant returns (uint256 remaining);\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _amount);\r\n    event Approval(\r\n        address indexed _owner,\r\n        address indexed _spender,\r\n        uint256 _amount\r\n    );\r\n}\r\n\r\ncontract DynamicToken is TokenInterface {\r\n  bool public isClosed;\r\n  bool public isMaxSupplyLocked;\r\n  bool public isLockedOpen;\r\n  bool public isContractOwnerLocked;\r\n\r\n  uint256 public maxSupply;\r\n\r\n  address public upgradedContract;\r\n  address public contractOwner;\r\n  address[] public accounts;\r\n\r\n  string[] public proofIds;\r\n\r\n  mapping (address => bool) public accountExists;\r\n  mapping (string => bool) proofIdExists;\r\n\r\n  string public name;\r\n  string public symbol;\r\n  uint8 public constant decimals = 0;\r\n\r\n  event TransferFrom(address indexed _from, address indexed _to,  address indexed _spender, uint256 _amount);\r\n  event Burn(address indexed _burnFrom, uint256 _amount);\r\n  event Close(address indexed _closedBy);\r\n  event Upgrade(address indexed _upgradedContract);\r\n  event LockOpen(address indexed _by);\r\n  event LockContractOwner(address indexed _by);\r\n  event TransferContractOwnership(address indexed _by, address indexed _to);\r\n  event MaxSupply(address indexed _by, uint256 _newMaxSupply, bool _isMaxSupplyLocked);\r\n\r\n  function DynamicToken() {\r\n    contractOwner = msg.sender;     // contract owner is contract creator\r\n    maxSupply = 10**7;\r\n    totalSupply = 0;\r\n\r\n    isClosed = false;\r\n    isMaxSupplyLocked = false;\r\n    isLockedOpen = false;\r\n    isContractOwnerLocked = false;\r\n    name = \"Vevue Pre\";\r\n    symbol = \"VEVP\";\r\n  }\r\n\r\n  // restrict usage to only the owner\r\n  modifier onlyContractOwner {\r\n    if (msg.sender != contractOwner) revert();\r\n    _;\r\n  }\r\n\r\n  // check if the contract has been closed\r\n  modifier notClosed {\r\n    if (isClosed) revert();\r\n    _;\r\n  }\r\n\r\n  modifier notLockedOpen {\r\n    if (isLockedOpen) revert();\r\n    _;\r\n  }\r\n\r\n  // no ether should be transferred to this contract\r\n  modifier noEther() {if (msg.value > 0) revert(); _;}\r\n\r\n  // accessors\r\n\r\n  function getAccounts() noEther constant returns (address[] _accounts) {\r\n    return accounts;\r\n  }\r\n\r\n  function balanceOf(address _owner) noEther constant returns(uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n  function allowance(address _owner, address _spender) noEther constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  // TOKEN MUTATORS\r\n\r\n  // tokens are only issued in exchange for a unique proof of contribution\r\n  function issue(address _to, uint256 _amount, string _proofId) notClosed onlyContractOwner noEther returns (bool success) {\r\n    if (balances[_to] + _amount < balances[_to]) revert(); // Guard against overflow\r\n    if (totalSupply + _amount < totalSupply) revert();     // Guard against overflow  (this should never happen)\r\n\r\n    if (proofIdExists[_proofId]) return false;\r\n    if (totalSupply + _amount > maxSupply) return false;\r\n\r\n    balances[msg.sender] += _amount;\r\n    totalSupply += _amount;\r\n\r\n    transfer(_to, _amount);\r\n    _indexAccount(_to);\r\n    _indexProofId(_proofId);\r\n    return true;\r\n  }\r\n\r\n  function setMaxSupply(uint256 _maxSupply) notClosed onlyContractOwner noEther returns (bool success) {\r\n    if (_maxSupply < totalSupply) revert();\r\n    if (isMaxSupplyLocked) return false;\r\n\r\n    maxSupply = _maxSupply;\r\n    MaxSupply(msg.sender, _maxSupply, isMaxSupplyLocked);\r\n    return true;\r\n  }\r\n\r\n  // lock the maxSupply to its current value forever\r\n  function lockMaxSupply() notClosed onlyContractOwner noEther returns(bool success) {\r\n    isMaxSupplyLocked = true;\r\n    MaxSupply(msg.sender, maxSupply, isMaxSupplyLocked);\r\n    return true;\r\n  }\r\n\r\n  function transfer(address _to, uint256 _amount) notClosed noEther returns (bool success) {\r\n    return _transfer(msg.sender, _to, _amount);\r\n  }\r\n\r\n  function approve(address _spender, uint256 _amount) notClosed noEther returns (bool success) {\r\n    allowed[msg.sender][_spender] = _amount;\r\n    Approval(msg.sender, _spender, _amount);\r\n    return true;\r\n  }\r\n\r\n  function transferFrom(address _from, address _to, uint256 _amount) notClosed noEther returns (bool success) {\r\n    if (_amount > allowed[_from][msg.sender]) return false;\r\n\r\n    if (allowed[_from][msg.sender] - _amount > allowed[_from][msg.sender]) revert();  // Guard against underflow\r\n\r\n    if (_transfer(_from, _to, _amount)) {\r\n      allowed[_from][msg.sender] -= _amount;\r\n      TransferFrom(_from, _to, msg.sender, _amount);\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  function burn(uint256 _amount) notClosed noEther returns (bool success) {\r\n    if (_amount > balances[msg.sender]) return false;\r\n\r\n    if (_amount > totalSupply) revert();\r\n    if (balances[msg.sender] - _amount > balances[msg.sender]) revert();     // Guard against underflow\r\n    if (totalSupply - _amount > totalSupply) revert();                     // Guard against underflow\r\n\r\n    balances[msg.sender] -= _amount;\r\n    totalSupply -= _amount;\r\n    Burn(msg.sender, _amount);\r\n    return true;\r\n  }\r\n\r\n  // CONTRACT MUTATORS\r\n\r\n  // Lock the contract owner forever\r\n  function lockContractOwner() notClosed onlyContractOwner noEther returns(bool success) {\r\n    isContractOwnerLocked = true;\r\n    LockContractOwner(msg.sender);\r\n    return true;\r\n  }\r\n\r\n  function transferContractOwnership(address _newOwner) notClosed onlyContractOwner noEther returns (bool success) {\r\n    if(isContractOwnerLocked) revert();\r\n\r\n    contractOwner = _newOwner;\r\n    TransferContractOwnership(msg.sender, _newOwner);\r\n    return true;\r\n  }\r\n\r\n  // Block the contract from ever being upgraded, closed, or destroyed\r\n  function lockOpen() notClosed onlyContractOwner noEther returns (bool success) {\r\n    isLockedOpen = true;\r\n    LockOpen(msg.sender);\r\n    return true;\r\n  }\r\n\r\n  function upgrade(address _upgradedContract) notLockedOpen notClosed onlyContractOwner noEther returns (bool success) {\r\n    upgradedContract = _upgradedContract;\r\n    close();\r\n    Upgrade(_upgradedContract);\r\n    return true;\r\n  }\r\n\r\n  function close() notLockedOpen notClosed onlyContractOwner noEther returns (bool success) {\r\n    isClosed = true;\r\n    Close(msg.sender);\r\n    return true;\r\n  }\r\n\r\n  function destroyContract() notLockedOpen onlyContractOwner noEther {\r\n    selfdestruct(contractOwner);\r\n  }\r\n\r\n  // PRIVATE MUTATORS\r\n\r\n  function _transfer(address _from, address _to, uint256 _amount) notClosed private returns (bool success) {\r\n    if (_amount > balances[_from]) return false;\r\n\r\n    if (balances[_to] + _amount < balances[_to]) revert();      // Guard against overflow\r\n    if (balances[_from] - _amount > balances[_from]) revert();  // Guard against underflow\r\n\r\n    balances[_to] += _amount;\r\n    balances[_from] -= _amount;\r\n    _indexAccount(_to);\r\n    Transfer(_from, _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  function _indexAccount(address _account) notClosed private returns (bool success) {\r\n    if (accountExists[_account]) return;\r\n    accountExists[_account] = true;\r\n    accounts.push(_account);\r\n    return true;\r\n  }\r\n\r\n  function _indexProofId(string _proofId) notClosed private returns (bool success) {\r\n    if (proofIdExists[_proofId]) return;\r\n    proofIdExists[_proofId] = true;\r\n    proofIds.push(_proofId);\r\n    return true;\r\n  }\r\n\r\n  // revert() on malformed calls\r\n  function () {\r\n    revert();\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_upgradedContract\",\"type\":\"address\"}],\"name\":\"upgrade\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"destroyContract\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"lockContractOwner\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"close\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"upgradedContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isLockedOpen\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_maxSupply\",\"type\":\"uint256\"}],\"name\":\"setMaxSupply\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"accountExists\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAccounts\",\"outputs\":[{\"name\":\"_accounts\",\"type\":\"address[]\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferContractOwnership\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isMaxSupplyLocked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"lockOpen\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isClosed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proofIds\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isContractOwnerLocked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_proofId\",\"type\":\"string\"}],\"name\":\"issue\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"accounts\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"lockMaxSupply\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":false,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"TransferFrom\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_burnFrom\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_closedBy\",\"type\":\"address\"}],\"name\":\"Close\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_upgradedContract\",\"type\":\"address\"}],\"name\":\"Upgrade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_by\",\"type\":\"address\"}],\"name\":\"LockOpen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_by\",\"type\":\"address\"}],\"name\":\"LockContractOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_by\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"TransferContractOwnership\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_by\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_newMaxSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_isMaxSupplyLocked\",\"type\":\"bool\"}],\"name\":\"MaxSupply\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"DynamicToken","CompilerVersion":"v0.4.15+commit.bbb8e64f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://a30a36d99aec04e13fcc9b01444e77394bb9c4b82da6154da381ac7ab9d2d369"}]}