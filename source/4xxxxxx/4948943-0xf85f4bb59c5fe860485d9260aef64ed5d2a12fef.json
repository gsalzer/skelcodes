{"status":"1","message":"OK","result":[{"SourceCode":"// compiler: 0.4.19+commit.c4cbbb05.Emscripten.clang\r\npragma solidity ^0.4.19;\r\n\r\ncontract owned {\r\n  address public owner;\r\n  function owned() public { owner = msg.sender; }\r\n  function changeOwner( address newowner ) public onlyOwner {owner = newowner;}\r\n  function closedown() public onlyOwner { selfdestruct(owner); }\r\n  modifier onlyOwner {\r\n    if (msg.sender != owner) { revert(); }\r\n    _;\r\n  }\r\n}\r\n\r\ncontract Whitelist is owned {\r\n\r\n  address[] members_;\r\n\r\n  function Whitelist() public {}\r\n  function() public payable { revert(); }\r\n\r\n  function count() public constant returns (uint) {\r\n    return members_.length;\r\n  }\r\n\r\n  function memberAt( uint ix ) public constant returns (address) {\r\n    return members_[ix];\r\n  }\r\n\r\n  function setMembers( address[] mbrs ) onlyOwner public {\r\n    members_ = mbrs;\r\n  }\r\n\r\n  function add( address member ) onlyOwner public {\r\n    int ix = toIndex( member );\r\n    if (-1 == ix) members_.push( member );\r\n  }\r\n\r\n  function remove( address member ) onlyOwner public\r\n  {\r\n    int ix = toIndex( member );\r\n    require( int(-1) != ix );\r\n\r\n    // deletion leaves a gap - shuffle higher elements down one\r\n    for ( uint jx = uint(ix); jx < members_.length - 1; jx++)\r\n      members_[jx] = members_[jx+1];\r\n\r\n    delete members_[members_.length - 1];\r\n    members_.length--;\r\n  }\r\n\r\n  function toIndex( address who ) public constant returns (int)\r\n  {\r\n    for( uint ix = 0; ix < members_.length; ix++ )\r\n      if (members_[ix] == who) return int(ix);\r\n\r\n    return int(-1);\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"count\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"member\",\"type\":\"address\"}],\"name\":\"add\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"member\",\"type\":\"address\"}],\"name\":\"remove\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"mbrs\",\"type\":\"address[]\"}],\"name\":\"setMembers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"toIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"closedown\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newowner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"ix\",\"type\":\"uint256\"}],\"name\":\"memberAt\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"Whitelist","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://4a3343f023f9c5239eda93d58b4a9492a262c8a186679f077b5f5dafa6b2f905"}]}