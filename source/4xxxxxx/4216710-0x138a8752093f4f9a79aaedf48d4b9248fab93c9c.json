{"status":"1","message":"OK","result":[{"SourceCode":"library SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract IERC20Token {\r\n  function totalSupply() constant returns (uint256 totalSupply);\r\n  function balanceOf(address _owner) constant returns (uint256 balance) {}\r\n  function transfer(address _to, uint256 _value) returns (bool success) {}\r\n  function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {}\r\n  function approve(address _spender, uint256 _value) returns (bool success) {}\r\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {}\r\n\r\n  event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\ncontract ItokenRecipient {\r\n  function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData);\r\n}\r\ncontract IToken {\r\n  function totalSupply() constant returns (uint256 totalSupply);\r\n  function mintTokens(address _to, uint256 _amount) {}\r\n}\r\ncontract IMintableToken {\r\n  function mintTokens(address _to, uint256 _amount){}\r\n}\r\ncontract Owned {\r\n    address public owner;\r\n    address public newOwner;\r\n\r\n    function Owned() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        assert(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        require(_newOwner != owner);\r\n        newOwner = _newOwner;\r\n    }\r\n\r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner);\r\n        OwnerUpdate(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = 0x0;\r\n    }\r\n\r\n    event OwnerUpdate(address _prevOwner, address _newOwner);\r\n}\r\ncontract Lockable is Owned{\r\n\r\n  uint256 public lockedUntilBlock;\r\n\r\n  event ContractLocked(uint256 _untilBlock, string _reason);\r\n\r\n  modifier lockAffected {\r\n      require(block.number > lockedUntilBlock);\r\n      _;\r\n  }\r\n\r\n  function lockFromSelf(uint256 _untilBlock, string _reason) internal {\r\n    lockedUntilBlock = _untilBlock;\r\n    ContractLocked(_untilBlock, _reason);\r\n  }\r\n\r\n\r\n  function lockUntil(uint256 _untilBlock, string _reason) onlyOwner {\r\n    lockedUntilBlock = _untilBlock;\r\n    ContractLocked(_untilBlock, _reason);\r\n  }\r\n}\r\ncontract ReentrnacyHandlingContract{\r\n\r\n    bool locked;\r\n\r\n    modifier noReentrancy() {\r\n        require(!locked);\r\n        locked = true;\r\n        _;\r\n        locked = false;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract MusiconomiToken is IERC20Token, Owned, Lockable{\r\n\r\n  using SafeMath for uint256;\r\n\r\n  /* Public variables of the token */\r\n  string public standard = \"Musiconomi token v1.0\";\r\n  string public name = \"Musiconomi\";\r\n  string public symbol = \"MCI\";\r\n  uint8 public decimals = 18;\r\n\r\n  address public crowdsaleContractAddress;\r\n\r\n  /* Private variables of the token */\r\n  uint256 supply = 0;\r\n  mapping (address => uint256) balances;\r\n  mapping (address => mapping (address => uint256)) allowances;\r\n\r\n  /* Events */\r\n  event Mint(address indexed _to, uint256 _value);\r\n\r\n  /* Initializes contract */\r\n  function MusiconomiToken() { // TO-DO: set block lock\r\n    crowdsaleContractAddress = 0xB9e0FC2a1C9d567Af555E07E72f27E686f2c6872;\r\n    lockFromSelf(4342900, \"Lock before crowdsale starts\");\r\n  }\r\n\r\n  /* Returns total supply of issued tokens */\r\n  function totalSupply() constant returns (uint256) {\r\n    return supply;\r\n  }\r\n\r\n  /* Returns balance of address */\r\n  function balanceOf(address _owner) constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n  /* Transfers tokens from your address to other */\r\n  function transfer(address _to, uint256 _value) lockAffected returns (bool success) {\r\n    require(_to != 0x0 && _to != address(this));\r\n    balances[msg.sender] = balances[msg.sender].sub(_value); // Deduct senders balance\r\n    balances[_to] = balances[_to].add(_value);               // Add recivers blaance\r\n    Transfer(msg.sender, _to, _value);                       // Raise Transfer event\r\n    return true;\r\n  }\r\n\r\n  /* Approve other address to spend tokens on your account */\r\n  function approve(address _spender, uint256 _value) lockAffected returns (bool success) {\r\n    allowances[msg.sender][_spender] = _value;        // Set allowance\r\n    Approval(msg.sender, _spender, _value);           // Raise Approval event\r\n    return true;\r\n  }\r\n\r\n  /* Approve and then communicate the approved contract in a single tx */\r\n  function approveAndCall(address _spender, uint256 _value, bytes _extraData) lockAffected returns (bool success) {\r\n    ItokenRecipient spender = ItokenRecipient(_spender);            // Cast spender to tokenRecipient contract\r\n    approve(_spender, _value);                                      // Set approval to contract for _value\r\n    spender.receiveApproval(msg.sender, _value, this, _extraData);  // Raise method on _spender contract\r\n    return true;\r\n  }\r\n\r\n  /* A contract attempts to get the coins */\r\n  function transferFrom(address _from, address _to, uint256 _value) lockAffected returns (bool success) {\r\n    require(_to != 0x0 && _to != address(this));\r\n    balances[_from] = balances[_from].sub(_value);                              // Deduct senders balance\r\n    balances[_to] = balances[_to].add(_value);                                  // Add recipient blaance\r\n    allowances[_from][msg.sender] = allowances[_from][msg.sender].sub(_value);  // Deduct allowance for this address\r\n    Transfer(_from, _to, _value);                                               // Raise Transfer event\r\n    return true;\r\n  }\r\n\r\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n    return allowances[_owner][_spender];\r\n  }\r\n\r\n  function mintTokens(address _to, uint256 _amount) {\r\n    require(msg.sender == crowdsaleContractAddress);\r\n\r\n    supply = supply.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    Mint(_to, _amount);\r\n    Transfer(0x0, _to, _amount);\r\n  }\r\n\r\n  function salvageTokensFromContract(address _tokenAddress, address _to, uint _amount) onlyOwner{\r\n    IERC20Token(_tokenAddress).transfer(_to, _amount);\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"standard\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleContractAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"salvageTokensFromContract\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_untilBlock\",\"type\":\"uint256\"},{\"name\":\"_reason\",\"type\":\"string\"}],\"name\":\"lockUntil\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockedUntilBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mintTokens\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_untilBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_reason\",\"type\":\"string\"}],\"name\":\"ContractLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_prevOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"OwnerUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"MusiconomiToken","CompilerVersion":"v0.4.13+commit.fb4cb1a","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://58969bc6e1ee41cc26c8057cb3c080f35a7f23545d2bf91bee228dc074d7f7ea"}]}