{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n * The Xmas Token contract complies with the ERC20 standard (see https://github.com/ethereum/EIPs/issues/20).\r\n * Santa Claus doesn't kepp any shares and all tokens not being sold during the crowdsale (but the \r\n * reserved gift shares) are burned by the elves.\r\n * \r\n * Author: Christmas Elf\r\n * Audit: Rudolf the red nose Reindear\r\n */\r\n\r\npragma solidity ^0.4.15;\r\n\r\n/**\r\n * Defines functions that provide safe mathematical operations.\r\n */\r\nlibrary SafeMath {\r\n\tfunction mul(uint256 a, uint256 b) internal returns(uint256) {\r\n\t\tuint256 c = a * b;\r\n\t\tassert(a == 0 || c / a == b);\r\n\t\treturn c;\r\n\t}\r\n\t\r\n\tfunction div(uint256 a, uint256 b) internal returns(uint256) {\r\n\t\tuint256 c = a / b;\r\n\t\treturn c;\r\n\t}\r\n\r\n\tfunction sub(uint256 a, uint256 b) internal returns(uint256) {\r\n\t\tassert(b <= a);\r\n\t\treturn a - b;\r\n\t}\r\n\r\n\tfunction add(uint256 a, uint256 b) internal returns(uint256) {\r\n\t\tuint256 c = a + b;\r\n\t\tassert(c >= a && c >= b);\r\n\t\treturn c;\r\n\t}\r\n}\r\n\r\n/**\r\n * Implementation of Xmas Token contract.\r\n */\r\ncontract XmasToken {\r\n    \r\n    using SafeMath for uint256; \r\n\t\r\n\t// Xmas token basic data\r\n\tstring constant public standard = \"ERC20\";\r\n\tstring constant public symbol = \"xmas\";\r\n\tstring constant public name = \"XmasToken\";\r\n\tuint8 constant public decimals = 18;\r\n\t\r\n\t// Xmas token distribution\r\n\tuint256 constant public initialSupply = 4000000 * 1 ether;\r\n\tuint256 constant public tokensForIco = 3000000 * 1 ether;\r\n\tuint256 constant public tokensForBonus = 1000000 * 1 ether;\r\n\t\r\n\t/** \r\n\t * Starting with this time tokens may be transfered.\r\n\t */\r\n\tuint256 constant public startAirdropTime = 1514073600;\r\n\t\r\n\t/** \r\n\t * Starting with this time tokens may be transfered.\r\n\t */\r\n\tuint256 public startTransferTime;\r\n\t\r\n\t/**\r\n\t * Number of tokens sold in crowdsale\r\n\t */\r\n\tuint256 public tokensSold;\r\n\r\n\t/**\r\n\t * true if tokens have been burned\r\n\t */\r\n\tbool public burned;\r\n\r\n\tmapping(address => uint256) public balanceOf;\r\n\tmapping(address => mapping(address => uint256)) public allowance;\r\n\t\r\n\t// -------------------- Crowdsale parameters --------------------\r\n\t\r\n\t/**\r\n\t * the start date of the crowdsale \r\n\t */\r\n\tuint256 constant public start = 1510401600;\r\n\t\r\n\t/**\r\n\t * the end date of the crowdsale \r\n\t */\r\n\tuint256 constant public end = 1512863999;\r\n\r\n\t/**\r\n\t * the exchange rate: 1 eth = 1000 xmas tokens\r\n\t */\r\n\tuint256 constant public tokenExchangeRate = 1000;\r\n\t\r\n\t/**\r\n\t * how much has been raised by crowdale (in ETH) \r\n\t */\r\n\tuint256 public amountRaised;\r\n\r\n\t/**\r\n\t * indicates if the crowdsale has been closed already \r\n\t */\r\n\tbool public crowdsaleClosed = false;\r\n\r\n\t/**\r\n\t * tokens will be transfered from this address \r\n\t */\r\n\taddress public xmasFundWallet;\r\n\t\r\n\t/**\r\n\t * the wallet on which the eth funds will be stored \r\n\t */\r\n\taddress ethFundWallet;\r\n\t\r\n\t// -------------------- Events --------------------\r\n\t\r\n\t// public events on the blockchain that will notify listeners\r\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\r\n\tevent Approval(address indexed _owner, address indexed spender, uint256 value);\r\n\tevent FundTransfer(address backer, uint amount, bool isContribution, uint _amountRaised);\r\n\tevent Burn(uint256 amount);\r\n\r\n\t/** \r\n\t * Initializes contract with initial supply tokens to the creator of the contract \r\n\t */\r\n\tfunction XmasToken(address _ethFundWallet) {\r\n\t\tethFundWallet = _ethFundWallet;\r\n\t\txmasFundWallet = msg.sender;\r\n\t\tbalanceOf[xmasFundWallet] = initialSupply;\r\n\t\tstartTransferTime = end;\r\n\t}\r\n\t\t\r\n\t/**\r\n\t * Default function called whenever anyone sends funds to this contract.\r\n\t * Only callable if the crowdsale started and hasn't been closed already and the tokens for icos haven't been sold yet.\r\n\t * The current token exchange rate is looked up and the corresponding number of tokens is transfered to the receiver.\r\n\t * The sent value is directly forwarded to a safe wallet.\r\n\t * This method allows to purchase tokens in behalf of another address.\r\n\t */\r\n\tfunction() payable {\r\n\t\tuint256 amount = msg.value;\r\n\t\tuint256 numTokens = amount.mul(tokenExchangeRate); \r\n\t\trequire(numTokens >= 100 * 1 ether);\r\n\t\trequire(!crowdsaleClosed && now >= start && now <= end && tokensSold.add(numTokens) <= tokensForIco);\r\n\r\n\t\tethFundWallet.transfer(amount);\r\n\t\t\r\n\t\tbalanceOf[xmasFundWallet] = balanceOf[xmasFundWallet].sub(numTokens); \r\n\t\tbalanceOf[msg.sender] = balanceOf[msg.sender].add(numTokens);\r\n\r\n\t\tTransfer(xmasFundWallet, msg.sender, numTokens);\r\n\r\n\t\t// update status\r\n\t\tamountRaised = amountRaised.add(amount);\r\n\t\ttokensSold += numTokens;\r\n\r\n\t\tFundTransfer(msg.sender, amount, true, amountRaised);\r\n\t}\r\n\t\r\n\t/** \r\n\t * Sends the specified amount of tokens from msg.sender to a given address.\r\n\t * @param _to the address to transfer to.\r\n\t * @param _value the amount of tokens to be trasferred.\r\n\t * @return true if the trasnfer is successful, false otherwise.\r\n\t */\r\n\tfunction transfer(address _to, uint256 _value) returns(bool success) {\r\n\t\trequire(now >= startTransferTime); \r\n\r\n\t\tbalanceOf[msg.sender] = balanceOf[msg.sender].sub(_value); \r\n\t\tbalanceOf[_to] = balanceOf[_to].add(_value); \r\n\r\n\t\tTransfer(msg.sender, _to, _value); \r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/** \r\n\t * Allows another contract or person to spend the specified amount of tokens on behalf of msg.sender.\r\n\t * @param _spender the address which will spend the funds.\r\n\t * @param _value the amount of tokens to be spent.\r\n\t * @return true if the approval is successful, false otherwise.\r\n\t */\r\n\tfunction approve(address _spender, uint256 _value) returns(bool success) {\r\n\t\trequire((_value == 0) || (allowance[msg.sender][_spender] == 0));\r\n\r\n\t\tallowance[msg.sender][_spender] = _value;\r\n\r\n\t\tApproval(msg.sender, _spender, _value);\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/** \r\n\t * Transfers tokens from one address to another address.\r\n\t * This is only allowed if the token holder approves. \r\n\t * @param _from the address from which the given _value will be transfer.\r\n\t * @param _to the address to which the given _value will be transfered.\r\n\t * @param _value the amount of tokens which will be transfered from one address to another.\r\n\t * @return true if the transfer was successful, false otherwise. \r\n\t */\r\n\tfunction transferFrom(address _from, address _to, uint256 _value) returns(bool success) {\r\n\t\tif (now < startTransferTime) \r\n\t\t\trequire(_from == xmasFundWallet);\r\n\t\tvar _allowance = allowance[_from][msg.sender];\r\n\t\trequire(_value <= _allowance);\r\n\t\t\r\n\t\tbalanceOf[_from] = balanceOf[_from].sub(_value); \r\n\t\tbalanceOf[_to] = balanceOf[_to].add(_value); \r\n\t\tallowance[_from][msg.sender] = _allowance.sub(_value);\r\n\r\n\t\tTransfer(_from, _to, _value);\r\n\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\t/** \r\n\t * Burns the remaining tokens except the gift share.\r\n\t * To be called when ICO is closed. Anybody may burn the tokens after ICO ended, but only once.\r\n\t */\r\n\tfunction burn() internal {\r\n\t\trequire(now > startTransferTime);\r\n\t\trequire(burned == false);\r\n\t\t\t\r\n\t\tuint256 difference = balanceOf[xmasFundWallet].sub(tokensForBonus);\r\n\t\ttokensSold = tokensForIco.sub(difference);\r\n\t\tbalanceOf[xmasFundWallet] = tokensForBonus;\r\n\t\t\t\r\n\t\tburned = true;\r\n\r\n\t\tBurn(difference);\r\n\t}\r\n\r\n\t/**\r\n\t * Marks the crowdsale as closed.\r\n\t * Burns the unsold tokens, if any.\r\n\t */\r\n\tfunction markCrowdsaleEnding() {\r\n\t\trequire(now > end);\r\n\r\n\t\tburn(); \r\n\t\tcrowdsaleClosed = true;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Sends the bonus tokens to addresses from Santa's list gift.\r\n\t * @return true if the airdrop is successful, false otherwise.\r\n\t */\r\n\tfunction sendGifts(address[] santaGiftList) returns(bool success)  {\r\n\t\trequire(msg.sender == xmasFundWallet);\r\n\t\trequire(now >= startAirdropTime);\r\n\t\r\n\t\tfor(uint i = 0; i < santaGiftList.length; i++) {\r\n\t\t    uint256 tokensHold = balanceOf[santaGiftList[i]];\r\n\t\t\tif (tokensHold >= 100 * 1 ether) { \r\n\t\t\t\tuint256 bonus = tokensForBonus.div(1 ether);\r\n\t\t\t\tuint256 giftTokens = ((tokensHold.mul(bonus)).div(tokensSold)) * 1 ether;\r\n\t\t\t\ttransferFrom(xmasFundWallet, santaGiftList[i], giftTokens);\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\treturn true;\r\n\t}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenExchangeRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"xmasFundWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"standard\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensForBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"burned\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"amountRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"santaGiftList\",\"type\":\"address[]\"}],\"name\":\"sendGifts\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensForIco\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTransferTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startAirdropTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"start\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"markCrowdsaleEnding\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleClosed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"end\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_ethFundWallet\",\"type\":\"address\"}],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"backer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"isContribution\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"_amountRaised\",\"type\":\"uint256\"}],\"name\":\"FundTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"}]","ContractName":"XmasToken","CompilerVersion":"v0.4.15+commit.bbb8e64f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000002056774E9a7b84aCEa63F62b363A78676cBc3847","Library":"","SwarmSource":"bzzr://b817fe54bda005467e6a3a31fb0baae5abf4186f5b439961c5b7ce05cefb9f6f"}]}