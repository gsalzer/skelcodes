{"status":"1","message":"OK","result":[{"SourceCode":"// Copyright (c) 2017 Sweetbridge Inc.\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n//     http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n\r\npragma solidity ^0.4.17;\r\n\r\ncontract OwnedEvents {\r\n    event LogSetOwner (address newOwner);\r\n}\r\n\r\n\r\ncontract Owned is OwnedEvents {\r\n    address public owner;\r\n\r\n    function Owned() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function setOwner(address owner_) public onlyOwner {\r\n        owner = owner_;\r\n        LogSetOwner(owner);\r\n    }\r\n\r\n}\r\n\r\ninterface SecuredWithRolesI {\r\n    function hasRole(string roleName) public view returns (bool);\r\n    function senderHasRole(string roleName) public view returns (bool);\r\n    function contractHash() public view returns (bytes32);\r\n}\r\n\r\n\r\ncontract SecuredWithRoles is Owned {\r\n    RolesI public roles;\r\n    bytes32 public contractHash;\r\n    bool public stopped = false;\r\n\r\n    function SecuredWithRoles(string contractName_, address roles_) public {\r\n        contractHash = keccak256(contractName_);\r\n        roles = RolesI(roles_);\r\n    }\r\n\r\n    modifier stoppable() {\r\n        require(!stopped);\r\n        _;\r\n    }\r\n\r\n    modifier onlyRole(string role) {\r\n        require(senderHasRole(role));\r\n        _;\r\n    }\r\n\r\n    modifier roleOrOwner(string role) {\r\n        require(msg.sender == owner || senderHasRole(role));\r\n        _;\r\n    }\r\n\r\n    // returns true if the role has been defined for the contract\r\n    function hasRole(string roleName) public view returns (bool) {\r\n        return roles.knownRoleNames(contractHash, keccak256(roleName));\r\n    }\r\n\r\n    function senderHasRole(string roleName) public view returns (bool) {\r\n        return hasRole(roleName) && roles.roleList(contractHash, keccak256(roleName), msg.sender);\r\n    }\r\n\r\n    function stop() public roleOrOwner(\"stopper\") {\r\n        stopped = true;\r\n    }\r\n\r\n    function restart() public roleOrOwner(\"restarter\") {\r\n        stopped = false;\r\n    }\r\n\r\n    function setRolesContract(address roles_) public onlyOwner {\r\n        // it must not be possible to change the roles contract on the roles contract itself\r\n        require(this != address(roles));\r\n        roles = RolesI(roles_);\r\n    }\r\n\r\n}\r\n\r\n\r\ninterface RolesI {\r\n    function knownRoleNames(bytes32 contractHash, bytes32 nameHash) public view returns (bool);\r\n    function roleList(bytes32 contractHash, bytes32 nameHash, address member) public view returns (bool);\r\n\r\n    function addContractRole(bytes32 ctrct, string roleName) public;\r\n    function removeContractRole(bytes32 ctrct, string roleName) public;\r\n    function grantUserRole(bytes32 ctrct, string roleName, address user) public;\r\n    function revokeUserRole(bytes32 ctrct, string roleName, address user) public;\r\n}\r\n\r\n\r\ncontract RolesEvents {\r\n    event LogRoleAdded(bytes32 contractHash, string roleName);\r\n    event LogRoleRemoved(bytes32 contractHash, string roleName);\r\n    event LogRoleGranted(bytes32 contractHash, string roleName, address user);\r\n    event LogRoleRevoked(bytes32 contractHash, string roleName, address user);\r\n}\r\n\r\n\r\ncontract Roles is RolesEvents, SecuredWithRoles {\r\n    // mapping is contract -> role -> sender_address -> boolean\r\n    mapping(bytes32 => mapping (bytes32 => mapping (address => bool))) public roleList;\r\n    // the intention is\r\n    mapping (bytes32 => mapping (bytes32 => bool)) public knownRoleNames;\r\n\r\n    function Roles() SecuredWithRoles(\"RolesRepository\", this) public {}\r\n\r\n    function addContractRole(bytes32 ctrct, string roleName) public roleOrOwner(\"admin\") {\r\n        require(!knownRoleNames[ctrct][keccak256(roleName)]);\r\n        knownRoleNames[ctrct][keccak256(roleName)] = true;\r\n        LogRoleAdded(ctrct, roleName);\r\n    }\r\n\r\n    function removeContractRole(bytes32 ctrct, string roleName) public roleOrOwner(\"admin\") {\r\n        require(knownRoleNames[ctrct][keccak256(roleName)]);\r\n        delete knownRoleNames[ctrct][keccak256(roleName)];\r\n        LogRoleRemoved(ctrct, roleName);\r\n    }\r\n\r\n    function grantUserRole(bytes32 ctrct, string roleName, address user) public roleOrOwner(\"admin\") {\r\n        require(knownRoleNames[ctrct][keccak256(roleName)]);\r\n        roleList[ctrct][keccak256(roleName)][user] = true;\r\n        LogRoleGranted(ctrct, roleName, user);\r\n    }\r\n\r\n    function revokeUserRole(bytes32 ctrct, string roleName, address user) public roleOrOwner(\"admin\") {\r\n        delete roleList[ctrct][keccak256(roleName)][user];\r\n        LogRoleRevoked(ctrct, roleName, user);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"stop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"roleName\",\"type\":\"string\"}],\"name\":\"senderHasRole\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"restart\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ctrct\",\"type\":\"bytes32\"},{\"name\":\"roleName\",\"type\":\"string\"},{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"grantUserRole\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"knownRoleNames\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"roles\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ctrct\",\"type\":\"bytes32\"},{\"name\":\"roleName\",\"type\":\"string\"}],\"name\":\"addContractRole\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stopped\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"roleList\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractHash\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"roles_\",\"type\":\"address\"}],\"name\":\"setRolesContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ctrct\",\"type\":\"bytes32\"},{\"name\":\"roleName\",\"type\":\"string\"},{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"revokeUserRole\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"roleName\",\"type\":\"string\"}],\"name\":\"hasRole\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ctrct\",\"type\":\"bytes32\"},{\"name\":\"roleName\",\"type\":\"string\"}],\"name\":\"removeContractRole\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"LogSetOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contractHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"roleName\",\"type\":\"string\"}],\"name\":\"LogRoleAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contractHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"roleName\",\"type\":\"string\"}],\"name\":\"LogRoleRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contractHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"roleName\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"}],\"name\":\"LogRoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contractHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"roleName\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"}],\"name\":\"LogRoleRevoked\",\"type\":\"event\"}]","ContractName":"Roles","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://a65ba696d26e69edd717ff2f93700d84f210c8732eb7ef7d2548418e47d0180c"}]}