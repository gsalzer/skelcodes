{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\ncontract LifetimeLottery {\r\n    \r\n    uint internal constant MIN_SEND_VAL = 500000000000000000; //minimum amount (in wei) for getting registered on list\r\n\tuint internal constant JACKPOT_INC = 100000000000000000; //amount (in wei) which is added to the jackpot\r\n\tuint internal constant JACKPOT_CHANCE = 5; //the chance to hit the jackpot in percent\r\n\t\r\n\tuint internal nonce;\r\n\tuint internal random; //number which picks the winner from lotteryList\r\n\tuint internal jackpot; //current jackpot\r\n\tuint internal jackpotNumber; //number, which is used to decide if the jackpot hits\r\n    \r\n\taddress[] internal lotteryList; //all registered addresses\r\n    address internal lastWinner;\r\n\taddress internal lastJackpotWinner;\r\n\taddress internal deployer;\r\n    \r\n    mapping(address => bool) addressMapping; //for checking quickly, if already registered\r\n\tevent LotteryLog(address adrs, string message);\r\n\t\r\n    function LifetimeLottery() public {\r\n        deployer = msg.sender;\r\n        nonce = (uint(msg.sender) + block.timestamp) % 100;\r\n    }\r\n     \r\n    function () public payable {\r\n\t\tLotteryLog(msg.sender, \"Received new funds...\");\r\n        if(msg.value >= MIN_SEND_VAL) {\r\n            if(addressMapping[msg.sender] == false) { //--> cheaper access through map instead of a loop\r\n                addressMapping[msg.sender] = true;\r\n                lotteryList.push(msg.sender);\r\n                nonce++;\r\n                random = uint(keccak256(block.timestamp + block.number + uint(msg.sender) + nonce)) % lotteryList.length;\r\n                lastWinner = lotteryList[random];\r\n\t\t\t\tjackpotNumber = uint(keccak256(block.timestamp + block.number + random)) % 100;\r\n\t\t\t\tif(jackpotNumber < JACKPOT_CHANCE) {\r\n\t\t\t\t\tlastJackpotWinner = lastWinner;\r\n\t\t\t\t\tlastJackpotWinner.transfer(msg.value + jackpot);\r\n\t\t\t\t\tjackpot = 0;\r\n\t\t\t\t\tLotteryLog(lastJackpotWinner, \"Jackpot is hit!\");\r\n\t\t\t\t} else {\r\n\t\t\t\t\tjackpot += JACKPOT_INC;\r\n\t\t\t\t\tlastWinner.transfer(msg.value - JACKPOT_INC);\r\n\t\t\t\t\tLotteryLog(lastWinner, \"We have a Winner!\");\r\n\t\t\t\t}\r\n            } else {\r\n                msg.sender.transfer(msg.value);\r\n\t\t\t\tLotteryLog(msg.sender, \"Failed: already joined! Sending back received ether...\");\r\n            }\r\n        } else {\r\n            msg.sender.transfer(msg.value);\r\n\t\t\tLotteryLog(msg.sender, \"Failed: not enough Ether sent! Sending back received ether...\");\r\n        }\r\n    }\r\n\t\r\n\tfunction amountOfRegisters() public constant returns(uint) {\r\n\t\treturn lotteryList.length;\r\n\t}\r\n\t\r\n\tfunction currentJackpotInWei() public constant returns(uint) {\r\n\t\treturn jackpot;\r\n\t}\r\n    \r\n    function ourLastWinner() public constant returns(address) {\r\n        return lastWinner;\r\n    }\r\n\t\r\n\tfunction ourLastJackpotWinner() public constant returns(address) {\r\n\t\treturn lastJackpotWinner;\r\n\t}\r\n\t\r\n\tmodifier isDeployer {\r\n\t\trequire(msg.sender == deployer);\r\n\t\t_;\r\n\t}\r\n\t\r\n\tfunction withdraw() public isDeployer { //backdoor in case of errors\r\n        deployer.transfer(this.balance - jackpot); //jackpot is untouchable\r\n    }\r\n\t\r\n\tfunction die() public isDeployer {\r\n\t\tselfdestruct(deployer); //killing contract\r\n\t}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"ourLastJackpotWinner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"die\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentJackpotInWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"amountOfRegisters\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ourLastWinner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"adrs\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"message\",\"type\":\"string\"}],\"name\":\"LotteryLog\",\"type\":\"event\"}]","ContractName":"LifetimeLottery","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://d2036ad00c2c753b94932226738fae976f40284df4224bf27f0c04be2518091c"}]}