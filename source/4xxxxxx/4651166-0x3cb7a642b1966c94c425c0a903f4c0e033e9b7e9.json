{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    function Ownable() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) onlyOwner public {\r\n        require(newOwner != address(0));\r\n        OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\ncontract TempusToken {\r\n\r\n    function mint(address receiver, uint256 amount) public returns (bool success);\r\n\r\n}\r\n\r\ncontract TempusPreIco is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    // start and end timestamps where investments are allowed (both inclusive)\r\n    uint public startTime = 1512118800; //1 December 2017 09:00:00 GMT\r\n    uint public endTime = 1517562000; //2 February 2018 09:00:00 GMT\r\n\r\n    //token price\r\n    uint public price = 0.005 ether / 1000;\r\n\r\n    //max tokens could be sold during preico\r\n    uint public hardCap = 860000000;\r\n    uint public tokensSold = 0;\r\n\r\n    bool public paused = false;\r\n\r\n    address withdrawAddress1;\r\n    address withdrawAddress2;\r\n\r\n    TempusToken token;\r\n\r\n    mapping(address => bool) public sellers;\r\n\r\n    modifier onlySellers() {\r\n        require(sellers[msg.sender]);\r\n        _;\r\n    }\r\n\r\n    function TempusPreIco (address tokenAddress, address _withdrawAddress1,\r\n    address _withdrawAddress2) public {\r\n        token = TempusToken(tokenAddress);\r\n        withdrawAddress1 = _withdrawAddress1;\r\n        withdrawAddress2 = _withdrawAddress2;\r\n    }\r\n\r\n    /**\r\n    * @dev Function that indicates whether pre ico is active or not\r\n    */\r\n    function isActive() public view returns (bool active) {\r\n        bool withinPeriod = now >= startTime && now <= endTime;\r\n        bool capIsNotMet = tokensSold < hardCap;\r\n        return capIsNotMet && withinPeriod && !paused;\r\n    }\r\n\r\n    function() external payable {\r\n        buyFor(msg.sender);\r\n    }\r\n\r\n    /**\r\n    * @dev Low-level purchase function. Purchases tokens for specified address\r\n    * @param beneficiary Address that will get tokens\r\n    */\r\n    function buyFor(address beneficiary) public payable {\r\n        require(msg.value != 0);\r\n        uint amount = msg.value;\r\n        uint tokenAmount = amount.div(price);\r\n        makePurchase(beneficiary, tokenAmount);\r\n    }\r\n\r\n    /**\r\n    * @dev Function that is called by our robot to allow users\r\n    * to buy tonkens for various cryptos.\r\n    * @param beneficiary An address that will get tokens\r\n    * @param amount Amount of tokens that address will get\r\n    */\r\n    function externalPurchase(address beneficiary, uint amount) external onlySellers {\r\n        makePurchase(beneficiary, amount);\r\n    }\r\n\r\n    function makePurchase(address beneficiary, uint amount) private {\r\n        require(beneficiary != 0x0);\r\n        require(isActive());\r\n        uint minimumTokens = 20000;\r\n        if(tokensSold < hardCap.sub(minimumTokens)) {\r\n            require(amount >= minimumTokens);\r\n        }\r\n        require(amount.add(tokensSold) <= hardCap);\r\n        tokensSold = tokensSold.add(amount);\r\n        token.mint(beneficiary, amount);\r\n    }\r\n\r\n    function setPaused(bool isPaused) external onlyOwner {\r\n        paused = isPaused;\r\n    }\r\n\r\n    /**\r\n    * @dev Sets address of seller robot\r\n    * @param seller Address of seller robot to set\r\n    * @param isSeller Parameter whether set as seller or not\r\n    */\r\n    function setAsSeller(address seller, bool isSeller) external onlyOwner {\r\n        sellers[seller] = isSeller;\r\n    }\r\n\r\n    /**\r\n    * @dev Set start time of Pre ICO\r\n    * @param _startTime Start of Pre ICO (unix time)\r\n    */\r\n    function setStartTime(uint _startTime) external onlyOwner {\r\n        startTime = _startTime;\r\n    }\r\n\r\n    /**\r\n    * @dev Sets end time of Pre ICO\r\n    * @param _endTime End time of Pre ICO (unit time)\r\n    */\r\n    function setEndTime(uint _endTime) external onlyOwner {\r\n        endTime = _endTime;\r\n    }\r\n\r\n    /**\r\n    * @dev Function to get ether from contract\r\n    * @param amount Amount in wei to withdraw\r\n    */\r\n    function withdrawEther(uint amount) external onlyOwner {\r\n        withdrawAddress1.transfer(amount / 2);\r\n        withdrawAddress2.transfer(amount / 2);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"seller\",\"type\":\"address\"},{\"name\":\"isSeller\",\"type\":\"bool\"}],\"name\":\"setAsSeller\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"isPaused\",\"type\":\"bool\"}],\"name\":\"setPaused\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isActive\",\"outputs\":[{\"name\":\"active\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"externalPurchase\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_startTime\",\"type\":\"uint256\"}],\"name\":\"setStartTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"sellers\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"buyFor\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_endTime\",\"type\":\"uint256\"}],\"name\":\"setEndTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hardCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"_withdrawAddress1\",\"type\":\"address\"},{\"name\":\"_withdrawAddress2\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"TempusPreIco","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000003544af5d53a29d2a8ac1898ad8c8ea18a71cf12f000000000000000000000000c803e35384b7e09587c96317865c0f460ba3dc4d0000000000000000000000007b3818132a92d66b00e51340ca9e213627ecfc34","Library":"","SwarmSource":"bzzr://d89cd2c65d5a7c72c543a5522cbb7eb3779bd1fe0194c7d429fdb5680ccce5b0"}]}