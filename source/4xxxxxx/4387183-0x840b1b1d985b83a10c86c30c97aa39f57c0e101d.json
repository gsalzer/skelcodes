{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\ncontract ERC20Interface {\r\n    uint256 public totalSupply;\r\n    function balanceOf(address who) public constant returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract Yum is ERC20Interface {\r\n    uint256 public constant INITIAL_SUPPLY = 3000000 * (10 ** uint256(decimals));\r\n    string public constant symbol = \"YUM\";\r\n    string public constant name = \"YUM Token\";\r\n    uint8 public constant decimals = 18;\r\n    uint256 public constant totalSupply = INITIAL_SUPPLY;\r\n    \r\n    // Owner is the address controlled by FilletX.\r\n    address constant owner = 0x045da370c3c0A1A55501F3B78Becc78a084CC488;\r\n\r\n    // Account represents a user account.\r\n    struct Account {\r\n        // Balance is the user balance. \r\n        uint256 balance;\r\n        // Addr is the address of the account.\r\n        address addr;\r\n        // Enabled is true if the user is able to transfer funds.\r\n        bool enabled;\r\n    }\r\n\r\n    // Accounts holds user accounts.\r\n    mapping(address => Account) accounts;\r\n    \r\n    // Constructor.\r\n    function Yum() public {\r\n        accounts[owner] = Account({\r\n          addr: owner,\r\n          balance: INITIAL_SUPPLY,\r\n          enabled: true\r\n        });\r\n    }\r\n\r\n    // Get balace of an account.\r\n    function balanceOf(address _owner) public constant returns (uint balance) {\r\n        return accounts[_owner].balance;\r\n    }\r\n    \r\n    // Set enabled status of the account.\r\n    function setEnabled(address _addr, bool _enabled) public {\r\n        assert(msg.sender == owner);\r\n        if (accounts[_addr].enabled != _enabled) {\r\n            accounts[_addr].enabled = _enabled;\r\n        }\r\n    }\r\n    \r\n    // Transfer funds.\r\n    function transfer(address _to, uint256 _amount) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_amount <= accounts[msg.sender].balance);\r\n        // Enable the receiver if the sender is the exchange.\r\n        if (msg.sender == owner && !accounts[_to].enabled) {\r\n            accounts[_to].enabled = true;\r\n        }\r\n        if (\r\n            // Check that the sender's account is enabled.\r\n            accounts[msg.sender].enabled\r\n            // Check that the receiver's account is enabled.\r\n            && accounts[_to].enabled\r\n            // Check that the sender has sufficient balance.\r\n            && accounts[msg.sender].balance >= _amount\r\n            // Check that the amount is valid.\r\n            && _amount > 0\r\n            // Check for overflow.\r\n            && accounts[_to].balance + _amount > accounts[_to].balance) {\r\n                // Credit the sender.\r\n                accounts[msg.sender].balance -= _amount;\r\n                // Debit the receiver.\r\n                accounts[_to].balance += _amount;\r\n                Transfer(msg.sender, _to, _amount);\r\n                return true;\r\n        }\r\n        return false;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setEnabled\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INITIAL_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"Yum","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://c05072336e87eaa332d11bb7e03f8bf109547285af1f0c2a3f8eed1ff5dab74e"}]}