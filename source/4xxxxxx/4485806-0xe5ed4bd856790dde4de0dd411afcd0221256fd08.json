{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.10;\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n//SkrillaToken interface containing functions used by the syndicate contract.\r\ncontract SkrillaTokenInterface {\r\n    function transfer(address _to, uint256 _value) public returns (bool);\r\n\r\n    function buyTokens() payable public;\r\n\r\n    function getCurrentPrice(address _buyer) public constant returns (uint256);\r\n\r\n    function tokenSaleBalanceOf(address _owner) public constant returns (uint256 balance);\r\n\r\n    function withdraw() public returns (bool);\r\n}\r\n\r\ncontract TokenSyndicate {\r\n    \r\n    SkrillaTokenInterface private tokenContract;\r\n    /*\r\n    * The address to call to purchase tokens.\r\n    */\r\n    address public tokenContractAddress;\r\n    uint256 public tokenExchangeRate;\r\n \r\n    /**\r\n    * Timestamp after which a purchaser can get a refund of their investment. As long as the tokens have not been purchased.\r\n    */\r\n    uint256 public refundStart;\r\n    /**\r\n    * The owner can set refundEnabled to allow purchasers to refund their funds before refundStart.\r\n    */\r\n    bool public refundsEnabled;\r\n    bool public tokensPurchased;\r\n    /**\r\n    * Has the withdraw function been called on the token contract.\r\n    * This makes the syndicate's tokens available for distribution.\r\n    */\r\n    bool public syndicateTokensWithdrawn;\r\n\r\n    /**\r\n    * The amount of wei collected by the syndicate.\r\n    */\r\n    uint256 public totalPresale;\r\n    address public owner;\r\n\r\n    mapping(address => uint256) public presaleBalances;\r\n\r\n    event LogInvest(address indexed _to,  uint256 presale);\r\n    event LogRefund(address indexed _to, uint256 presale);\r\n    event LogTokenPurchase(uint256 eth, uint256 tokens);\r\n    event LogWithdrawTokens(address indexed _to, uint256 tokens);\r\n    \r\n    modifier onlyOwner() { \r\n        assert(msg.sender == owner);  _; \r\n    }\r\n\r\n    modifier onlyWhenTokensNotPurchased() { \r\n        assert(!tokensPurchased);  _; \r\n    }\r\n    modifier onlyWhenTokensPurchased() { \r\n        assert(tokensPurchased); _; \r\n    }\r\n    modifier onlyWhenSyndicateTokensWithdrawn() {\r\n        assert(syndicateTokensWithdrawn); _; \r\n    }\r\n    modifier whenRefundIsPermitted() {\r\n        require(now >= refundStart || refundsEnabled);\r\n        _;\r\n    }\r\n    modifier onlyWhenRefundsNotEnabled() {\r\n        require(!refundsEnabled);\r\n        _;\r\n    }\r\n    function TokenSyndicate(address _tokenContractAddress,\r\n                            address _owner,\r\n                            uint256 _refundStart) {\r\n        tokenContractAddress = _tokenContractAddress;\r\n        owner = _owner;\r\n\r\n        assert(tokenContractAddress != address(0));   // the token contract may not be at the zero address.\r\n        assert(owner != address(0));   // the token contract may not be at the zero address.\r\n\r\n        tokenContract = SkrillaTokenInterface(_tokenContractAddress);\r\n        refundStart = _refundStart;\r\n\r\n        totalPresale = 0;\r\n        \r\n        tokensPurchased = false;\r\n        syndicateTokensWithdrawn = false;\r\n        refundsEnabled = false;\r\n    }\r\n\r\n    // Fallback function can be used to invest in syndicate\r\n    function() external payable {\r\n        invest();\r\n    }\r\n    /*\r\n        Invest in this contract in order to have tokens purchased on your behalf when the buyTokens() contract\r\n        is called without a `throw`.\r\n    */\r\n    function invest() payable public onlyWhenTokensNotPurchased {\r\n        assert(msg.value > 0);\r\n\r\n        presaleBalances[msg.sender] = SafeMath.add(presaleBalances[msg.sender], msg.value);\r\n        totalPresale = SafeMath.add(totalPresale, msg.value);        \r\n        LogInvest(msg.sender, msg.value);       // create an event\r\n    }\r\n\r\n    /*\r\n        Get the presaleBalance (ETH) for an address.\r\n    */\r\n    function balanceOf(address _purchaser) external constant returns (uint256 presaleBalance) {\r\n        return presaleBalances[_purchaser];\r\n    }\r\n\r\n    /**\r\n    * An 'escape hatch' function to allow purchasers to get a refund of their eth before refundStart.\r\n    */\r\n    function enableRefunds() external onlyWhenTokensNotPurchased onlyOwner {\r\n        refundsEnabled = true;\r\n    }\r\n    /*\r\n       Attempt to purchase the tokens from the token contract.\r\n       This must be done before the sale ends\r\n\r\n    */\r\n    function buyTokens() external onlyWhenRefundsNotEnabled onlyWhenTokensNotPurchased onlyOwner {\r\n        require(this.balance >= totalPresale);\r\n\r\n        tokenContract.buyTokens.value(this.balance)();\r\n        //Get the exchange rate the contract will got for the purchase. Used to distribute tokens\r\n        //The number of token subunits per eth\r\n        tokenExchangeRate = tokenContract.getCurrentPrice(this);\r\n        \r\n        tokensPurchased = true;\r\n\r\n        LogTokenPurchase(totalPresale, tokenContract.tokenSaleBalanceOf(this));\r\n    }\r\n\r\n    /*\r\n        Call 'withdraw' on the skrilla contract as this contract. So that the tokens are available for distribution with the 'transfer' function.\r\n        This can only be called 14 days after sale close.\r\n    */\r\n    function withdrawSyndicateTokens() external onlyWhenTokensPurchased onlyOwner {\r\n        assert(tokenContract.withdraw());\r\n        syndicateTokensWithdrawn = true;\r\n    }\r\n\r\n    /*\r\n        Transfer an accounts token entitlement to itself.\r\n        This can only be called if the tokens have been purchased by the contract and have been withdrawn by the contract.\r\n    */\r\n\r\n    function withdrawTokens() external onlyWhenSyndicateTokensWithdrawn {\r\n        uint256 tokens = SafeMath.div(SafeMath.mul(presaleBalances[msg.sender], tokenExchangeRate), 1 ether);\r\n        assert(tokens > 0);\r\n\r\n        totalPresale = SafeMath.sub(totalPresale, presaleBalances[msg.sender]);\r\n        presaleBalances[msg.sender] = 0;\r\n\r\n        /*\r\n           Attempt to transfer tokens to msg.sender.\r\n           Note: we are relying on the token contract to return a success bool (true for success). If this\r\n           bool is not implemented as expected it may be possible for an account to withdraw more tokens than\r\n           it is entitled to.\r\n        */\r\n        assert(tokenContract.transfer( msg.sender, tokens));\r\n        LogWithdrawTokens(msg.sender, tokens);\r\n    }\r\n\r\n    /*\r\n        Refund an accounts investment.\r\n        This is only possible if tokens have not been purchased.\r\n    */\r\n    function refund() external whenRefundIsPermitted onlyWhenTokensNotPurchased {\r\n        uint256 totalValue = presaleBalances[msg.sender];\r\n        assert(totalValue > 0);\r\n\r\n        presaleBalances[msg.sender] = 0;\r\n        totalPresale = SafeMath.sub(totalPresale, totalValue);\r\n        \r\n        msg.sender.transfer(totalValue);\r\n        LogRefund(msg.sender, totalValue);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"tokenExchangeRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawSyndicateTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"refundsEnabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalPresale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_purchaser\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"presaleBalance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenContractAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"enableRefunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"presaleBalances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"syndicateTokensWithdrawn\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"refundStart\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensPurchased\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"invest\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tokenContractAddress\",\"type\":\"address\"},{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_refundStart\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"presale\",\"type\":\"uint256\"}],\"name\":\"LogInvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"presale\",\"type\":\"uint256\"}],\"name\":\"LogRefund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"eth\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"LogTokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"LogWithdrawTokens\",\"type\":\"event\"}]","ContractName":"TokenSyndicate","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000004c382f8e09615ac86e08ce58266cc227e7d4d913000000000000000000000000520e11fa3bde439d93325a70a6f27162873f823b000000000000000000000000000000000000000000000000000000005a134250","Library":"","SwarmSource":"bzzr://1bdbf06cea64f164c09aac58e3be91c9225840244c7e97aec68635a97ea5ac5a"}]}