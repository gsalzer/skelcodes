{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.16;\r\n\r\n/**\r\n\r\n * Math operations with safety checks\r\n\r\n */\r\n\r\ncontract BaseSafeMath {\r\n\r\n\r\n    /*\r\n\r\n    standard uint256 functions\r\n\r\n     */\r\n\r\n\r\n\r\n    function add(uint256 a, uint256 b) internal pure\r\n\r\n    returns (uint256) {\r\n\r\n        uint256 c = a + b;\r\n\r\n        assert(c >= a);\r\n\r\n        return c;\r\n\r\n    }\r\n\r\n\r\n    function sub(uint256 a, uint256 b) internal pure\r\n\r\n    returns (uint256) {\r\n\r\n        assert(b <= a);\r\n\r\n        return a - b;\r\n\r\n    }\r\n\r\n\r\n    function mul(uint256 a, uint256 b) internal pure\r\n\r\n    returns (uint256) {\r\n\r\n        uint256 c = a * b;\r\n\r\n        assert(a == 0 || c / a == b);\r\n\r\n        return c;\r\n\r\n    }\r\n\r\n\r\n    function div(uint256 a, uint256 b) internal pure\r\n\r\n    returns (uint256) {\r\n\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n\r\n    }\r\n\r\n\r\n    function min(uint256 x, uint256 y) internal pure\r\n\r\n    returns (uint256 z) {\r\n\r\n        return x <= y ? x : y;\r\n\r\n    }\r\n\r\n\r\n    function max(uint256 x, uint256 y) internal pure\r\n\r\n    returns (uint256 z) {\r\n\r\n        return x >= y ? x : y;\r\n\r\n    }\r\n\r\n\r\n\r\n    /*\r\n\r\n    uint128 functions\r\n\r\n     */\r\n\r\n\r\n\r\n    function madd(uint128 a, uint128 b) internal pure\r\n\r\n    returns (uint128) {\r\n\r\n        uint128 c = a + b;\r\n\r\n        assert(c >= a);\r\n\r\n        return c;\r\n\r\n    }\r\n\r\n\r\n    function msub(uint128 a, uint128 b) internal pure\r\n\r\n    returns (uint128) {\r\n\r\n        assert(b <= a);\r\n\r\n        return a - b;\r\n\r\n    }\r\n\r\n\r\n    function mmul(uint128 a, uint128 b) internal pure\r\n\r\n    returns (uint128) {\r\n\r\n        uint128 c = a * b;\r\n\r\n        assert(a == 0 || c / a == b);\r\n\r\n        return c;\r\n\r\n    }\r\n\r\n\r\n    function mdiv(uint128 a, uint128 b) internal pure\r\n\r\n    returns (uint128) {\r\n\r\n        uint128 c = a / b;\r\n\r\n        return c;\r\n\r\n    }\r\n\r\n\r\n    function mmin(uint128 x, uint128 y) internal pure\r\n\r\n    returns (uint128 z) {\r\n\r\n        return x <= y ? x : y;\r\n\r\n    }\r\n\r\n\r\n    function mmax(uint128 x, uint128 y) internal pure\r\n\r\n    returns (uint128 z) {\r\n\r\n        return x >= y ? x : y;\r\n\r\n    }\r\n\r\n\r\n\r\n    /*\r\n\r\n    uint64 functions\r\n\r\n     */\r\n\r\n\r\n\r\n    function miadd(uint64 a, uint64 b) internal pure\r\n\r\n    returns (uint64) {\r\n\r\n        uint64 c = a + b;\r\n\r\n        assert(c >= a);\r\n\r\n        return c;\r\n\r\n    }\r\n\r\n\r\n    function misub(uint64 a, uint64 b) internal pure\r\n\r\n    returns (uint64) {\r\n\r\n        assert(b <= a);\r\n\r\n        return a - b;\r\n\r\n    }\r\n\r\n\r\n    function mimul(uint64 a, uint64 b) internal pure\r\n\r\n    returns (uint64) {\r\n\r\n        uint64 c = a * b;\r\n\r\n        assert(a == 0 || c / a == b);\r\n\r\n        return c;\r\n\r\n    }\r\n\r\n\r\n    function midiv(uint64 a, uint64 b) internal pure\r\n\r\n    returns (uint64) {\r\n\r\n        uint64 c = a / b;\r\n\r\n        return c;\r\n\r\n    }\r\n\r\n\r\n    function mimin(uint64 x, uint64 y) internal pure\r\n\r\n    returns (uint64 z) {\r\n\r\n        return x <= y ? x : y;\r\n\r\n    }\r\n\r\n\r\n    function mimax(uint64 x, uint64 y) internal pure\r\n\r\n    returns (uint64 z) {\r\n\r\n        return x >= y ? x : y;\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n// Abstract contract for the full ERC 20 Token standard\r\n\r\n// https://github.com/ethereum/EIPs/issues/20\r\n\r\n\r\n\r\ncontract BaseERC20 {\r\n\r\n    // Public variables of the token\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals;\r\n    // 18 decimals is the strongly suggested default, avoid changing it\r\n    uint256 public totalSupply;\r\n\r\n    // This creates an array with all balances\r\n    mapping(address => uint256) public balanceOf;\r\n    mapping(address => mapping(address => uint256)) public allowance;\r\n\r\n    // This generates a public event on the blockchain that will notify clients\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    // This notifies clients about the amount burnt\r\n    event Burn(address indexed from, uint256 value);\r\n\r\n    /**\r\n     * Internal transfer, only can be called by this contract\r\n     */\r\n    function _transfer(address _from, address _to, uint _value) internal;\r\n\r\n    /**\r\n     * Transfer tokens\r\n     *\r\n     * Send `_value` tokens to `_to` from your account\r\n     *\r\n     * @param _to The address of the recipient\r\n     * @param _value the amount to send\r\n     */\r\n    function transfer(address _to, uint256 _value) public;\r\n\r\n    /**\r\n     * Transfer tokens from other address\r\n     *\r\n     * Send `_value` tokens to `_to` on behalf of `_from`\r\n     *\r\n     * @param _from The address of the sender\r\n     * @param _to The address of the recipient\r\n     * @param _value the amount to send\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n\r\n    /**\r\n     * Set allowance for other address\r\n     *\r\n     * Allows `_spender` to spend no more than `_value` tokens on your behalf\r\n     *\r\n     * @param _spender The address authorized to spend\r\n     * @param _value the max amount they can spend\r\n     */\r\n    function approve(address _spender, uint256 _value) public returns (bool success);\r\n\r\n    /**\r\n     * Set allowance for other address and notify\r\n     *\r\n     * Allows `_spender` to spend no more than `_value` tokens on your behalf, and then ping the contract about it\r\n     *\r\n     * @param _spender The address authorized to spend\r\n     * @param _value the max amount they can spend\r\n     * @param _extraData some extra information to send to the approved contract\r\n     */\r\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success);\r\n\r\n    /**\r\n     * Destroy tokens\r\n     *\r\n     * Remove `_value` tokens from the system irreversibly\r\n     *\r\n     * @param _value the amount of money to burn\r\n     */\r\n    function burn(uint256 _value) public returns (bool success);\r\n\r\n    /**\r\n     * Destroy tokens from other account\r\n     *\r\n     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\r\n     *\r\n     * @param _from the address of the sender\r\n     * @param _value the amount of money to burn\r\n     */\r\n    function burnFrom(address _from, uint256 _value) public returns (bool success);\r\n\r\n}\r\n\r\n\r\n/**\r\n\r\n * @title Standard ERC20 token\r\n\r\n *\r\n\r\n * @dev Implementation of the basic standard token.\r\n\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n\r\n */\r\n\r\ninterface tokenRecipient {function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public;}\r\n\r\n\r\ncontract LockUtils {\r\n\r\n    function getLockWFee(address account, uint8 decimals, uint256 createTime, address developer) internal view returns (uint256) {\r\n        uint256 tempLockWFee = 0;\r\n        if (account == developer) {\r\n            if (now < (createTime + 10 minutes)) {\r\n                tempLockWFee = 1500000000 * 10 ** uint256(decimals);\r\n            } else if (now < (createTime + 20 minutes)) {\r\n                tempLockWFee = 1125000000 * 10 ** uint256(decimals);\r\n            } else if (now < (createTime + 30 minutes)) {\r\n                tempLockWFee = 750000000 * 10 ** uint256(decimals);\r\n            } else if (now < (createTime + 40 minutes)) {\r\n                tempLockWFee = 375000000 * 10 ** uint256(decimals);\r\n            }\r\n            //            if (now < createTime + 2 years) {\r\n            //                tempLockWFee = 1500000000 * 10 ** uint256(decimals);\r\n            //            } else if (now < createTime + 2 years + 6 * 30 days) {\r\n            //                tempLockWFee = 1125000000 * 10 ** uint256(decimals);\r\n            //            } else if (now < createTime + 3 years) {\r\n            //                tempLockWFee = 750000000 * 10 ** uint256(decimals);\r\n            //            } else if (now < createTime + 3 years + 6 * 30 days) {\r\n            //                tempLockWFee = 375000000 * 10 ** uint256(decimals);\r\n            //            }\r\n        }\r\n        return tempLockWFee;\r\n    }\r\n\r\n}\r\n\r\ncontract WFee is BaseERC20, BaseSafeMath, LockUtils {\r\n    string public name = \"WFee\";\r\n    string public symbol = \"WFEE\";\r\n    uint8 public decimals = 18;// 精度为18\r\n    uint256 public totalSupply;// 100亿 构造方法初始化\r\n    uint256 createTime;// 创建时间\r\n    mapping(address => uint256) public balanceOf;\r\n    mapping(address => mapping(address => uint256)) public allowance;\r\n    address developer;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Burn(address indexed from, uint256 value);\r\n\r\n    function WFee() public {\r\n        totalSupply = 10000000000 * 10 ** uint256(decimals);\r\n        balanceOf[msg.sender] = totalSupply;\r\n        developer = msg.sender;\r\n        createTime = now;\r\n    }\r\n\r\n    function _transfer(address _from, address _to, uint _value) internal {\r\n        // Prevent transfer to 0x0 address. Use burn() instead\r\n        require(_to != 0x0);\r\n        // Check if the sender has enough\r\n        // 转账必由之路，锁定的钱不可动\r\n        require((balanceOf[_from] - getLockWFee(_from, decimals, createTime, developer)) >= _value);\r\n        // require(balanceOf[_from] >= _value);\r\n        // Check for overflows\r\n        require((balanceOf[_to] + _value) > balanceOf[_to]);\r\n        // Save this for an assertion in the future\r\n        uint previousBalances = balanceOf[_from] + balanceOf[_to];\r\n        // Subtract from the sender\r\n        balanceOf[_from] -= _value;\r\n        // Add the same to the recipient\r\n        balanceOf[_to] += _value;\r\n        Transfer(_from, _to, _value);\r\n        // Asserts are used to use static analysis to find bugs in your code. They should never fail\r\n        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public {\r\n        _transfer(msg.sender, _to, _value);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        require(_value <= allowance[_from][msg.sender]);\r\n        // Check allowance\r\n        allowance[_from][msg.sender] -= _value;\r\n        _transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public\r\n    returns (bool success) {\r\n        allowance[msg.sender][_spender] = _value;\r\n        return true;\r\n    }\r\n\r\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\r\n    public\r\n    returns (bool success) {\r\n        tokenRecipient spender = tokenRecipient(_spender);\r\n        if (approve(_spender, _value)) {\r\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\r\n            return true;\r\n        }\r\n    }\r\n\r\n    function burn(uint256 _value) public returns (bool success) {\r\n        require(balanceOf[msg.sender] >= _value);\r\n        // Check if the sender has enough\r\n        balanceOf[msg.sender] -= _value;\r\n        // Subtract from the sender\r\n        totalSupply -= _value;\r\n        // Updates totalSupply\r\n        Burn(msg.sender, _value);\r\n        return true;\r\n    }\r\n\r\n    function burnFrom(address _from, uint256 _value) public returns (bool success) {\r\n        require(balanceOf[_from] >= _value);\r\n        // Check if the targeted balance is enough\r\n        require(_value <= allowance[_from][msg.sender]);\r\n        // Check allowance\r\n        balanceOf[_from] -= _value;\r\n        // Subtract from the targeted balance\r\n        allowance[_from][msg.sender] -= _value;\r\n        // Subtract from the sender's allowance\r\n        totalSupply -= _value;\r\n        // Update totalSupply\r\n        Burn(_from, _value);\r\n        return true;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"}]","ContractName":"WFee","CompilerVersion":"v0.4.20-nightly.2018.1.26+commit.bbad48bb","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://573258f0aa94948db32ff2397628da397a2f8daabb8d93f3f41761fd49093aeb"}]}