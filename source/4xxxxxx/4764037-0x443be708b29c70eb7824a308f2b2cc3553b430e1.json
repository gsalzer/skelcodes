{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n/*\r\n  ASTRCoin ICO - Airdrop code\r\n */\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {  //was constant\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\ncontract ERC20 { \r\n    function transfer(address receiver, uint amount) public ;\r\n    function transferFrom(address sender, address receiver, uint amount) public returns(bool success); // do token.approve on the ICO contract\r\n    function balanceOf(address _owner) constant public returns (uint256 balance);\r\n}\r\n\r\n/**\r\n * Airdrop for ASTRCoin\r\n */\r\ncontract ASTRDrop is Ownable {\r\n  ERC20 public token;  // using the ASTRCoin token - will set an address\r\n  address public ownerAddress;  // deploy owner\r\n  uint8 internal decimals             = 4; // 4 decimal places should be enough in general\r\n  uint256 internal decimalsConversion = 10 ** uint256(decimals);\r\n  uint public   AIRDROP_AMOUNT        = 10 * decimalsConversion;\r\n\r\n  function multisend(address[] dests) onlyOwner public returns (uint256) {\r\n\r\n    ownerAddress    = ERC20(0x3EFAe2e152F62F5cc12cc0794b816d22d416a721); // \r\n    token           = ERC20(0x80E7a4d750aDe616Da896C49049B7EdE9e04C191); //  \r\n\r\n      uint256 i = 0;\r\n      while (i < dests.length) { // probably want to keep this to only 20 or 30 addresses at a time\r\n        token.transferFrom(ownerAddress, dests[i], AIRDROP_AMOUNT);\r\n         i += 1;\r\n      }\r\n      return(i);\r\n    }\r\n\r\n  // Change the airdrop rate\r\n  function setAirdropAmount(uint256 _astrAirdrop) onlyOwner public {\r\n    if( _astrAirdrop > 0 ) {\r\n        AIRDROP_AMOUNT = _astrAirdrop * decimalsConversion;\r\n    }\r\n  }\r\n\r\n\r\n  // reset the rate to the default\r\n  function resetAirdropAmount() onlyOwner public {\r\n     AIRDROP_AMOUNT = 10 * decimalsConversion;\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"AIRDROP_AMOUNT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"dests\",\"type\":\"address[]\"}],\"name\":\"multisend\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_astrAirdrop\",\"type\":\"uint256\"}],\"name\":\"setAirdropAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"resetAirdropAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"ASTRDrop","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://892031b939d6f246142b41d4ea2d4432b05967bb0b37023b37d3e3c3b7bc9e0a"}]}