{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.14;\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n}\r\n\r\ncontract PariMutuel is Ownable {\r\n  using SafeMath for uint256;\r\n\r\n  enum Outcome { Mayweather, McGregor }\r\n  enum State { PreEvent, DuringEvent, PostEvent, Refunding }\r\n\r\n  event BetPlaced(address indexed bettor, uint256 amount, Outcome outcome);\r\n  event StateChanged(State _state);\r\n  event WinningOutcomeDeclared(Outcome outcome);\r\n  event Withdrawal(address indexed bettor, uint256 amount);\r\n\r\n  uint256 public constant percentRake = 2;\r\n  uint256 public constant minBetAmount = 0.01 ether;\r\n  uint8 public constant numberOfOutcomes = 2; // need this until Solidity allows Outcome.length\r\n\r\n  Outcome public winningOutcome;\r\n  State public state;\r\n\r\n  mapping(uint8 => mapping(address => uint256)) balancesForOutcome;\r\n  mapping(uint8 => uint256) public totalForOutcome;\r\n\r\n  bool public hasWithdrawnRake;\r\n  mapping(address => bool) refunded;\r\n\r\n  function PariMutuel() {\r\n    state = State.PreEvent;\r\n  }\r\n\r\n  modifier requireState(State _state) {\r\n    require(state == _state);\r\n    _;\r\n  }\r\n\r\n  function bet(Outcome outcome) external payable requireState(State.PreEvent) {\r\n    require(msg.value >= minBetAmount);\r\n    balancesForOutcome[uint8(outcome)][msg.sender] = balancesForOutcome[uint8(outcome)][msg.sender].add(msg.value);\r\n    totalForOutcome[uint8(outcome)] = totalForOutcome[uint8(outcome)].add(msg.value);\r\n    BetPlaced(msg.sender, msg.value, outcome);\r\n  }\r\n\r\n  function totalWagered() public constant returns (uint256) {\r\n    uint256 total = 0;\r\n    for (uint8 i = 0; i < numberOfOutcomes; i++) {\r\n      total = total.add(totalForOutcome[i]);\r\n    }\r\n    return total;\r\n  }\r\n\r\n  function totalRake() public constant returns (uint256) {\r\n    return totalWagered().mul(percentRake) / 100;\r\n  }\r\n\r\n  function totalPrizePool() public constant returns (uint256) {\r\n    return totalWagered().sub(totalRake());\r\n  }\r\n\r\n  function totalWageredForAddress(address _address) public constant returns (uint256) {\r\n    uint256 total = 0;\r\n    for (uint8 i = 0; i < numberOfOutcomes; i++) {\r\n      total = total.add(balancesForOutcome[i][_address]);\r\n    }\r\n    return total;\r\n  }\r\n\r\n  // THERE MIGHT BE ROUNDING ERRORS\r\n  // BUT THIS IS JUST FOR DISPLAY ANYWAYS\r\n  // e.g. totalPrizePool = 2.97, risk = 2.5\r\n  // we return 1.18 when really it should be 1.19\r\n  function decimalOddsForOutcome(Outcome outcome) external constant returns (uint256 integer, uint256 fractional) {\r\n    uint256 toWin = totalPrizePool();\r\n    uint256 risk = totalForOutcome[uint8(outcome)];\r\n    uint256 remainder = toWin % risk;\r\n    return (toWin / risk, (remainder * 100) / risk);\r\n  }\r\n\r\n  function payoutForWagerAndOutcome(uint256 wager, Outcome outcome) public constant returns (uint256) {\r\n    return totalPrizePool().mul(wager) / totalForOutcome[uint8(outcome)];\r\n  }\r\n\r\n  function startEvent() external onlyOwner requireState(State.PreEvent) {\r\n    state = State.DuringEvent;\r\n    StateChanged(state);\r\n  }\r\n\r\n  function declareWinningOutcome(Outcome outcome) external onlyOwner requireState(State.DuringEvent) {\r\n    state = State.PostEvent;\r\n    StateChanged(state);\r\n    winningOutcome = outcome;\r\n    WinningOutcomeDeclared(outcome);\r\n  }\r\n\r\n  // if there's a draw or a bug in the contract\r\n  function refundEverybody() external onlyOwner {\r\n    state = State.Refunding;\r\n    StateChanged(state);\r\n  }\r\n\r\n  function getRefunded() external requireState(State.Refunding) {\r\n    require(!refunded[msg.sender]);\r\n    refunded[msg.sender] = true;\r\n    msg.sender.transfer(totalWageredForAddress(msg.sender));\r\n  }\r\n\r\n  function withdrawRake() external onlyOwner requireState(State.PostEvent) {\r\n    require(!hasWithdrawnRake);\r\n    hasWithdrawnRake = true;\r\n    owner.transfer(totalRake());\r\n  }\r\n\r\n  function withdrawWinnings() external requireState(State.PostEvent) {\r\n    uint256 wager = balancesForOutcome[uint8(winningOutcome)][msg.sender];\r\n    require(wager > 0);\r\n    uint256 winnings = payoutForWagerAndOutcome(wager, winningOutcome);\r\n    balancesForOutcome[uint8(winningOutcome)][msg.sender] = 0;\r\n    msg.sender.transfer(winnings);\r\n    Withdrawal(msg.sender, winnings);\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"percentRake\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawRake\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"wager\",\"type\":\"uint256\"},{\"name\":\"outcome\",\"type\":\"uint8\"}],\"name\":\"payoutForWagerAndOutcome\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalPrizePool\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numberOfOutcomes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalWagered\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"winningOutcome\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refundEverybody\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getRefunded\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"totalWageredForAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawWinnings\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasWithdrawnRake\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"outcome\",\"type\":\"uint8\"}],\"name\":\"bet\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"outcome\",\"type\":\"uint8\"}],\"name\":\"decimalOddsForOutcome\",\"outputs\":[{\"name\":\"integer\",\"type\":\"uint256\"},{\"name\":\"fractional\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"totalForOutcome\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalRake\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startEvent\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"outcome\",\"type\":\"uint8\"}],\"name\":\"declareWinningOutcome\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minBetAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"bettor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"outcome\",\"type\":\"uint8\"}],\"name\":\"BetPlaced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_state\",\"type\":\"uint8\"}],\"name\":\"StateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"outcome\",\"type\":\"uint8\"}],\"name\":\"WinningOutcomeDeclared\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"bettor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"}]","ContractName":"PariMutuel","CompilerVersion":"v0.4.14+commit.c2215d46","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://c90aa40db804b648314b588a02191ea67fe49fe4f0c1ae2bd03c671e3280299b"}]}