{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\ncontract owned {\r\n    address public owner;\r\n\r\n    function owned() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) onlyOwner public {\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public; }\r\n\r\ncontract TokenERC20 {\r\n    // Public variables of the token\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals;\r\n    // 18 decimals is the strongly suggested default, avoid changing it\r\n    uint256 public totalSupply;\r\n\r\n    // This creates an array with all balances\r\n    mapping (address => uint256) public balanceOf;\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n\r\n    // This generates a public event on the blockchain that will notify clients\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    // This notifies clients about the amount burnt\r\n    event Burn(address indexed from, uint256 value);\r\n\r\n    /**\r\n     * Constrctor function\r\n     *\r\n     * Initializes contract with initial supply tokens to the creator of the contract\r\n     */\r\n    function TokenERC20(\r\n        uint256 initialSupply,\r\n        string tokenName,\r\n        string tokenSymbol,\r\n        uint8 decimalPalces\r\n    ) public {\r\n        totalSupply = initialSupply * 10 ** uint256(decimalPalces);  // Update total supply with the decimal amount\r\n        balanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens\r\n        name = tokenName;                                   // Set the name for display purposes\r\n        symbol = tokenSymbol;                               // Set the symbol for display purposes\r\n        decimals = decimalPalces;\r\n    }\r\n\r\n    /**\r\n     * Internal transfer, only can be called by this contract\r\n     */\r\n    function _transfer(address _from, address _to, uint _value) internal {\r\n        // Prevent transfer to 0x0 address. Use burn() instead\r\n        require(_to != 0x0);        \r\n        require(balanceOf[_from] >= _value);        \r\n        require(balanceOf[_to] + _value > balanceOf[_to]);        \r\n        uint previousBalances = balanceOf[_from] + balanceOf[_to];        \r\n        balanceOf[_from] -= _value;        \r\n        balanceOf[_to] += _value;\r\n        Transfer(_from, _to, _value);\r\n        // Asserts are used to use static analysis to find bugs in your code. They should never fail\r\n        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\r\n    }\r\n\r\n    /**\r\n     * Transfer tokens\r\n     * Send `_value` tokens to `_to` from your account     \r\n     * @param _to The address of the recipient\r\n     * @param _value the amount to send\r\n     */\r\n    function transfer(address _to, uint256 _value) public {\r\n        _transfer(msg.sender, _to, _value);\r\n    }\r\n\r\n    /**\r\n     * Transfer tokens from other address\r\n     * Send `_value` tokens to `_to` in behalf of `_from`\r\n     * @param _from The address of the sender\r\n     * @param _to The address of the recipient\r\n     * @param _value the amount to send\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        require(_value <= allowance[_from][msg.sender]);     // Check allowance\r\n        allowance[_from][msg.sender] -= _value;\r\n        _transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Set allowance for other address\r\n     * Allows `_spender` to spend no more than `_value` tokens in your behalf\r\n     * @param _spender The address authorized to spend\r\n     * @param _value the max amount they can spend\r\n     */\r\n    function approve(address _spender, uint256 _value) public\r\n        returns (bool success) {\r\n        allowance[msg.sender][_spender] = _value;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Set allowance for other address and notify\r\n     * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\r\n     * @param _spender The address authorized to spend\r\n     * @param _value the max amount they can spend\r\n     * @param _extraData some extra information to send to the approved contract\r\n     */\r\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success)\r\n    {\r\n        tokenRecipient spender = tokenRecipient(_spender);\r\n        if (approve(_spender, _value)) {\r\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\r\n            return true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Destroy tokens\r\n     * Remove `_value` tokens from the system irreversibly\r\n     * @param _value the amount of money to burn\r\n     */\r\n    function burn(uint256 _value) public returns (bool success) {\r\n        require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\r\n        balanceOf[msg.sender] -= _value;            // Subtract from the sender\r\n        totalSupply -= _value;                      // Updates totalSupply\r\n        Burn(msg.sender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Destroy tokens from other account\r\n     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\r\n     * @param _from the address of the sender\r\n     * @param _value the amount of money to burn\r\n     */\r\n    function burnFrom(address _from, uint256 _value) public returns (bool success) {\r\n        require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\r\n        require(_value <= allowance[_from][msg.sender]);    // Check allowance\r\n        balanceOf[_from] -= _value;                         // Subtract from the targeted balance\r\n        allowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance\r\n        totalSupply -= _value;                              // Update totalSupply\r\n        Burn(_from, _value);\r\n        return true;\r\n    }\r\n}\r\n\r\n/******************************************/\r\n/*     UTILITY FUNCTIONS STARTS HERE      */\r\n/******************************************/\r\n\r\ncontract utility\r\n{\r\n    event check1(uint256 val1);\r\n    function calculateEthers(uint numberOfTokens, uint price, uint _decimalValue) constant internal returns(uint ethers)\r\n    {\r\n        ethers = numberOfTokens*price;\r\n        ethers = ethers / 10**_decimalValue;\r\n        check1(ethers);\r\n        return (ethers);\r\n    }\r\n    \r\n    function calculateTokens(uint _amount, uint _rate, uint _decimalValue) constant internal returns(uint tokens, uint excessEthers) \r\n    {\r\n        tokens = _amount*10**_decimalValue;\r\n        tokens = tokens/_rate;\r\n        excessEthers = _amount-((tokens*_rate)/10**_decimalValue);\r\n        return (tokens, excessEthers);\r\n    } \r\n    \r\n   \r\n    function decimalAdjustment(uint _amount, uint _decimalPlaces) constant internal returns(uint adjustedValue)\r\n    {\r\n        uint diff = 18-_decimalPlaces;\r\n        uint adjust = 1*10**diff;\r\n       \r\n        adjustedValue = _amount/adjust;\r\n       \r\n        return adjustedValue;       \r\n    }\r\n   \r\n    // function ceil(uint a, uint m) constant returns (uint ) {\r\n    //     return ((a + m - 1) / m) * m;\r\n    // }\r\n}\r\n\r\n/******************************************/\r\n/*       ADVANCED TOKEN STARTS HERE       */\r\n/******************************************/\r\n\r\ncontract TokenNWTC is owned, TokenERC20, utility {\r\n    \r\n    event check(uint256 val1);\r\n    \r\n    uint256 public sellPrice;\r\n    uint256 public buyPrice;\r\n    address[] frzAcc;\r\n    address[] users;\r\n    address[] frzAcc1;\r\n    address[] users1;\r\n    uint256 sellTokenAmount;\r\n\r\n    bool emergencyFreeze;       // If this variable is true then all account will be frozen and can not transfer/recieve tokens.\r\n\r\n    mapping (address => bool) public frozenAccount;\r\n    mapping (uint => address) public tokenUsers;\r\n\r\n    /* This generates a public event on the blockchain that will notify clients */\r\n    event FrozenFunds(address target, bool frozen);\r\n\r\n    /* Initializes contract with initial supply tokens to the creator of the contract */\r\n    function TokenNWTC(\r\n        uint256 initialSupply,\r\n        string tokenName,\r\n        string tokenSymbol,\r\n        uint8 decimalPalces\r\n    ) TokenERC20(initialSupply, tokenName, tokenSymbol, decimalPalces) public {}\r\n\r\n    /* Internal transfer, only can be called by this contract */\r\n    function _transfer(address _from, address _to, uint _value) internal {\r\n        require (_to != 0x0);                               // Prevent transfer to 0x0 address. Use burn() instead\r\n        require (balanceOf[_from] >= _value);                // Check if the sender has enough\r\n        require (balanceOf[_to] + _value > balanceOf[_to]); // Check for overflows\r\n        require(!frozenAccount[_from]);                     // Check if sender is frozen\r\n        require(!frozenAccount[_to]);                       // Check if recipient is frozen\r\n        require(!emergencyFreeze);                          // Check if emergencyFreeze enable  // by JD.\r\n        balanceOf[_from] -= _value;                         // Subtract from the sender\r\n        balanceOf[_to] += _value;                           // Add the same to the recipient\r\n        Transfer(_from, _to, _value);\r\n        sellTokenAmount += _value;\r\n        \r\n        if (users.length>0){\r\n                uint count=0;\r\n            for (uint a=0;a<users.length;a++)\r\n            {\r\n            if (users[a]==_to){\r\n            count=count+1;\r\n            }\r\n            }\r\n            if (count==0){\r\n                users.push(_to);\r\n            }\r\n                 \r\n        }\r\n        else{\r\n            users.push(_to);\r\n        }\r\n    }\r\n    \r\n\r\n    // @notice Create `mintedAmount` tokens and send it to `target`\r\n    // @param target Address to receive the tokens\r\n    // @param mintedAmount the amount of tokens it will receive\r\n    // amount should be in form of decimal specified in this contract.\r\n    function mintToken(address target, uint256 mintedAmount) onlyOwner public {\r\n        //require(target!=0x0);\r\n        balanceOf[target] += mintedAmount;\r\n        totalSupply += mintedAmount;\r\n        Transfer(0, this, mintedAmount);\r\n        Transfer(this, target, mintedAmount);\r\n        sellTokenAmount += mintedAmount;\r\n        \r\n         if (users.length>0){\r\n                uint count1=0;\r\n            for (uint a=0;a<users.length;a++)\r\n            {\r\n            if (users[a]==target){\r\n            count1=count1+1;\r\n            }\r\n            }\r\n            if (count1==0){\r\n                users.push(target);\r\n            }\r\n                 \r\n        }\r\n        else{\r\n            users.push(target);\r\n        }\r\n    }\r\n\r\n    /// @notice `freeze? Prevent | Allow` `target` from sending & receiving tokens\r\n    /// @param target Address to be frozen\r\n    /// @param freeze either to freeze it or not\r\n    function freezeAccount(address target, bool freeze) onlyOwner public {\r\n        //require(target!=0x0);\r\n        frozenAccount[target] = freeze;\r\n        FrozenFunds(target, freeze);\r\n        if (frzAcc.length>0){\r\n                uint count=0;\r\n            for (uint a=0;a<frzAcc.length;a++)\r\n            {\r\n            if (frzAcc[a]==target){\r\n            count=count+1;\r\n            }\r\n            }\r\n            if (count==0){\r\n                frzAcc.push(target);\r\n            }\r\n        }\r\n        else{\r\n            frzAcc.push(target);\r\n        }\r\n    }\r\n\r\n    function freezeAllAccountInEmergency(bool freezeAll) onlyOwner public\r\n    {\r\n        emergencyFreeze = freezeAll;    \r\n    }\r\n\r\n    /// notice Allow users to buy tokens for `newBuyPrice` eth and sell tokens for `newSellPrice` eth\r\n    /// @param newSellPrice Price the users can sell to the contract\r\n    /// @param newBuyPrice Price users can buy from the contract\r\n    function setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner public {\r\n        require(newSellPrice!=0 || sellPrice!=0);\r\n        require(newBuyPrice!=0 || buyPrice!=0); \r\n        if(newSellPrice!=0)\r\n        {\r\n            sellPrice = newSellPrice;\r\n        }\r\n        if(newBuyPrice!=0)\r\n        {\r\n            buyPrice = newBuyPrice;\r\n        }\r\n    }\r\n\r\n    /// @notice Buy tokens from contract by sending ether\r\n    function buy() payable public {\r\n        require(msg.value!=0);\r\n        require(buyPrice!=0);\r\n        uint exceededEthers;\r\n        uint amount = msg.value;                                // msg.value will be in wei.   \r\n        (amount, exceededEthers) = calculateTokens(amount, buyPrice, decimals);\r\n        require(amount!=0);\r\n        _transfer(this, msg.sender, amount);              // makes the transfers.\r\n        msg.sender.transfer(exceededEthers);// sends exceeded ether to the seller.\r\n        \r\n       // addUsers(msg.sender);\r\n        \r\n        if (users.length>0){\r\n                uint count=0;\r\n            for (uint a=0;a<users.length;a++)\r\n            {\r\n            if (users[a]==msg.sender){\r\n            count=count+1;\r\n            }\r\n            }\r\n            if (count==0){\r\n                users.push(msg.sender);\r\n            }\r\n                 \r\n        }\r\n        else{\r\n            users.push(msg.sender);\r\n        }\r\n        \r\n        \r\n    }\r\n\r\n    // @notice Sell `amount` tokens to contract\r\n    // @param amount amount of tokens to be sold\r\n    // amount should be in form of decimal specified in this contract. \r\n    function sell(uint256 amount) public {\r\n        require(amount!=0);\r\n        require(sellPrice!=0);\r\n        uint etherAmount;\r\n        etherAmount = calculateEthers(amount, sellPrice, decimals);\r\n        require(this.balance >= etherAmount);           // checks if the contract has enough ether to buy\r\n        _transfer(msg.sender, this, amount);     // makes the transfers\r\n        check(etherAmount);\r\n        msg.sender.transfer(etherAmount);               // sends ether to the seller. It's important to do this last to avoid recursion attacks\r\n    }\r\n\r\n\r\n    function readAllUsers()constant returns(address[]){\r\n\t      \r\n\t      \r\n\t          for (uint k=0;k<users.length;k++){\r\n\t              if (balanceOf[users[k]]>0){\r\n\t                  users1.push(users[k]);\r\n\t              }\r\n\t          }\r\n\t      \r\n       return users1;\r\n   }\r\n   \r\n   function readAllFrzAcc()constant returns(address[]){\r\n       for (uint k=0;k<frzAcc.length;k++){\r\n\t              if (frozenAccount[frzAcc[k]] == true){\r\n\t                  frzAcc1.push(frzAcc[k]);\r\n\t              }\r\n\t          }\r\n       return frzAcc1;\r\n   }\r\n   \r\n   function readSellTokenAmount()constant returns(uint256){\r\n       return sellTokenAmount;\r\n   }\r\n   \r\n   \r\n//   function addUsers(address add) internal{\r\n//       uint totalUsers = totalUsers+1;\r\n//       tokenUsers[totalUsers] = add;\r\n//   }\r\n   \r\n//     function transfer1(address _to, uint256 _value){\r\n\r\n// \t\t// if(frozenAccount[msg.sender]) throw;\r\n// \t\t                     // Check if sender is frozen\r\n//         require(!frozenAccount[_to]);                       // Check if recipient is frozen\r\n//         require(!emergencyFreeze); \r\n// \t\trequire(!frozenAccount[msg.sender]);\r\n// \t\t// if(balanceOf[msg.sender] < _value) throw;\r\n// \t\trequire(balanceOf[msg.sender] >= _value);\r\n// \t\t// if(balanceOf[_to] + _value < balanceOf[_to]) throw;\r\n// \t\trequire(balanceOf[_to] + _value >= balanceOf[_to]);\r\n// \t\t//if(admin)\r\n\r\n// \t\tbalanceOf[msg.sender] -= _value;\r\n// \t\tbalanceOf[_to] += _value;\r\n// \t\tTransfer(msg.sender, _to, _value);\r\n// \t}\r\n\r\n// \tfunction transferFrom1(address _from, address _to, uint256 _value) returns (bool success){\r\n// \t\t// if(frozenAccount[_from]) throw;\r\n// \t\trequire(!frozenAccount[_from]);\r\n// \t\t// if(balanceOf[_from] < _value) throw;\r\n// \t\trequire(balanceOf[_from] >= _value);\r\n// \t\t// if(balanceOf[_to] + _value < balanceOf[_to]) throw;\r\n// \t\trequire(balanceOf[_to] + _value >= balanceOf[_to]);\r\n// \t\t// if(_value > allowance[_from][msg.sender]) throw;\r\n// \t\trequire(_value <= allowance[_from][msg.sender]);\r\n// \t\tbalanceOf[_from] -= _value;\r\n// \t\tbalanceOf[_to] += _value;\r\n// \t\tallowance[_from][msg.sender] -= _value;\r\n// \t\tTransfer(_from, _to, _value);\r\n// \t\treturn true;\r\n\r\n// \t}\r\n\r\n    /**\r\n     * Set allowance for other address\r\n     * Allows `_spender` to spend no more than `_value` tokens in your behalf\r\n     * @param _spender The address authorized to spend\r\n     * @param _value the max amount they can spend\r\n     */\r\n    function approve(address _spender, uint256 _value) public\r\n        returns (bool success) {\r\n        allowance[msg.sender][_spender] = _value;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Set allowance for other address and notify\r\n     * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\r\n     * @param _spender The address authorized to spend\r\n     * @param _value the max amount they can spend\r\n     * @param _extraData some extra information to send to the approved contract\r\n     */\r\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success)\r\n    {\r\n        tokenRecipient spender = tokenRecipient(_spender);\r\n        if (approve(_spender, _value)) {\r\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\r\n            return true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Destroy tokens\r\n     * Remove `_value` tokens from the system irreversibly\r\n     * @param _value the amount of money to burn\r\n     */\r\n    function burn(uint256 _value) public returns (bool success) {\r\n        require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\r\n        balanceOf[msg.sender] -= _value;            // Subtract from the sender\r\n        totalSupply -= _value;                      // Updates totalSupply\r\n        Burn(msg.sender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Destroy tokens from other account\r\n     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\r\n     * @param _from the address of the sender\r\n     * @param _value the amount of money to burn\r\n     */\r\n    function burnFrom(address _from, uint256 _value) public returns (bool success) {\r\n        require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\r\n        require(_value <= allowance[_from][msg.sender]);    // Check allowance\r\n        balanceOf[_from] -= _value;                         // Subtract from the targeted balance\r\n        allowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance\r\n        totalSupply -= _value;                              // Update totalSupply\r\n        Burn(_from, _value);\r\n        return true;\r\n    }\r\n    \r\n    //======================================================\r\n    function getTokenName() constant public returns (string)\r\n    {\r\n        return name;\r\n    }\r\n    \r\n    //========================================================\r\n    function getTokenSymbol() constant public returns (string)\r\n    {\r\n        return symbol;\r\n    }\r\n\r\n    //===========================================================\r\n    function getSpecifiedDecimal() constant public returns (uint)\r\n    {\r\n        return decimals;\r\n    }\r\n\r\n    //======================================================\r\n    function getTotalSupply() constant public returns (uint)\r\n    {\r\n        return totalSupply;\r\n    }\r\n    \r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"newSellPrice\",\"type\":\"uint256\"},{\"name\":\"newBuyPrice\",\"type\":\"uint256\"}],\"name\":\"setPrices\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"readAllUsers\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSpecifiedDecimal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"readAllFrzAcc\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"mintedAmount\",\"type\":\"uint256\"}],\"name\":\"mintToken\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenUsers\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTokenName\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"readSellTokenAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"freezeAll\",\"type\":\"bool\"}],\"name\":\"freezeAllAccountInEmergency\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"freeze\",\"type\":\"bool\"}],\"name\":\"freezeAccount\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTokenSymbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"initialSupply\",\"type\":\"uint256\"},{\"name\":\"tokenName\",\"type\":\"string\"},{\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"name\":\"decimalPalces\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"val1\",\"type\":\"uint256\"}],\"name\":\"check\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"FrozenFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"val1\",\"type\":\"uint256\"}],\"name\":\"check1\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"}]","ContractName":"TokenNWTC","CompilerVersion":"v0.4.11+commit.68ef5810","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000011e1a300000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000007576569436f696e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000045745495300000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://c583b895a5f18325f6b2befbe68aac416cb04f9708f01b9fe28bddf7ae391ed5"}]}