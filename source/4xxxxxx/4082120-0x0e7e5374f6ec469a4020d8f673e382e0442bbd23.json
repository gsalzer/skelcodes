{"status":"1","message":"OK","result":[{"SourceCode":"// BK Ok - Recent version\r\npragma solidity ^0.4.11;\r\n\r\n// ----------------------------------------------------------------------------\r\n// Dao.Casino Crowdsale Token Contract\r\n//\r\n// Enjoy. (c) BokkyPooBah / Bok Consulting Pty Ltd for Dao.Casino 2017\r\n// The MIT Licence.\r\n// ----------------------------------------------------------------------------\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// Safe maths, borrowed from OpenZeppelin\r\n// ----------------------------------------------------------------------------\r\nlibrary SafeMath {\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Add a number to another number, checking for overflows\r\n    // ------------------------------------------------------------------------\r\n    // BK Ok - Overflow protected\r\n    function add(uint a, uint b) internal returns (uint) {\r\n        uint c = a + b;\r\n        assert(c >= a && c >= b);\r\n        return c;\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Subtract a number from another number, checking for underflows\r\n    // ------------------------------------------------------------------------\r\n    // BK Ok - Underflow protected\r\n    function sub(uint a, uint b) internal returns (uint) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// Owned contract\r\n// ----------------------------------------------------------------------------\r\ncontract Owned {\r\n    // BK Next 3 lines Ok\r\n    address public owner;\r\n    address public newOwner;\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    // BK Ok - Constructor assigns `owner` variable\r\n    function Owned() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    // BK Ok - Only owner can execute function\r\n    modifier onlyOwner {\r\n        // BK Ok - Could be replaced with `require(msg.sender == owner);`\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    // BK Ok - Propose ownership transfer\r\n    function transferOwnership(address _newOwner) onlyOwner {\r\n        newOwner = _newOwner;\r\n    }\r\n \r\n    // BK Ok - Accept ownership transfer\r\n    function acceptOwnership() {\r\n        if (msg.sender == newOwner) {\r\n            OwnershipTransferred(owner, newOwner);\r\n            owner = newOwner;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// ERC20 Token, with the addition of symbol, name and decimals\r\n// https://github.com/ethereum/EIPs/issues/20\r\n// ----------------------------------------------------------------------------\r\ncontract ERC20Token is Owned {\r\n    // BK Ok - For overflow and underflow protection\r\n    using SafeMath for uint;\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Total Supply\r\n    // ------------------------------------------------------------------------\r\n    // BK Ok\r\n    uint256 _totalSupply = 0;\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Balances for each account\r\n    // ------------------------------------------------------------------------\r\n    // BK Ok\r\n    mapping(address => uint256) balances;\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Owner of account approves the transfer of an amount to another account\r\n    // ------------------------------------------------------------------------\r\n    // BK Ok\r\n    mapping(address => mapping (address => uint256)) allowed;\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Get the total token supply\r\n    // ------------------------------------------------------------------------\r\n    // BK Ok\r\n    function totalSupply() constant returns (uint256 totalSupply) {\r\n        totalSupply = _totalSupply;\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Get the account balance of another account with address _owner\r\n    // ------------------------------------------------------------------------\r\n    // BK Ok\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Transfer the balance from owner's account to another account\r\n    // ------------------------------------------------------------------------\r\n    // BK NOTE - This function will return true/false instead of throwing an\r\n    //           error, as the conditions protect against overflows and \r\n    //           underflows\r\n    // BK NOTE - This function does not protect against the short address\r\n    //           bug, but the short address bug is more the responsibility\r\n    //           of automated processes checking the data sent to this function\r\n    function transfer(address _to, uint256 _amount) returns (bool success) {\r\n        // BK Ok - Account has sufficient balance to transfer\r\n        if (balances[msg.sender] >= _amount                // User has balance\r\n            // BK Ok - Non-zero amount\r\n            && _amount > 0                                 // Non-zero transfer\r\n            // BK Ok - Overflow protection\r\n            && balances[_to] + _amount > balances[_to]     // Overflow check\r\n        ) {\r\n            // BK Ok\r\n            balances[msg.sender] = balances[msg.sender].sub(_amount);\r\n            // BK Ok\r\n            balances[_to] = balances[_to].add(_amount);\r\n            // BK Ok - Logging\r\n            Transfer(msg.sender, _to, _amount);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Allow _spender to withdraw from your account, multiple times, up to the\r\n    // _value amount. If this function is called again it overwrites the\r\n    // current allowance with _value.\r\n    // ------------------------------------------------------------------------\r\n    // BK NOTE - This simpler method of `approve(...)` together with \r\n    //           `transferFrom(...)` can be used in the double spending attack, \r\n    //           but the risk is low, and can be mitigated by the user setting \r\n    //           the approval limit to 0 before changing the limit \r\n    function approve(\r\n        address _spender,\r\n        uint256 _amount\r\n    ) returns (bool success) {\r\n        // BK Ok\r\n        allowed[msg.sender][_spender] = _amount;\r\n        Approval(msg.sender, _spender, _amount);\r\n        return true;\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Spender of tokens transfer an amount of tokens from the token owner's\r\n    // balance to the spender's account. The owner of the tokens must already\r\n    // have approve(...)-d this transfer\r\n    // ------------------------------------------------------------------------\r\n    // BK NOTE - This function will return true/false instead of throwing an\r\n    //           error, as the conditions protect against overflows and \r\n    //           underflows\r\n    // BK NOTE - This simpler method of `transferFrom(...)` together with \r\n    //           `approve(...)` can be used in the double spending attack, \r\n    //           but the risk is low, and can be mitigated by the user setting \r\n    //           the approval limit to 0 before changing the limit \r\n    // BK NOTE - This function does not protect against the short address\r\n    //           bug, but the short address bug is more the responsibility\r\n    //           of automated processes checking the data sent to this function\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _amount\r\n    ) returns (bool success) {\r\n        // BK Ok - Account has sufficient balance to transfer\r\n        if (balances[_from] >= _amount                  // From a/c has balance\r\n            // BK Ok - Account is authorised to spend at least this amount\r\n            && allowed[_from][msg.sender] >= _amount    // Transfer approved\r\n            // BK Ok - Non-zero amount\r\n            && _amount > 0                              // Non-zero transfer\r\n            // BK Ok - Overflow protection\r\n            && balances[_to] + _amount > balances[_to]  // Overflow check\r\n        ) {\r\n            // BK Ok\r\n            balances[_from] = balances[_from].sub(_amount);\r\n            // BK Ok\r\n            allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\r\n            // BK Ok\r\n            balances[_to] = balances[_to].add(_amount);\r\n            // BK Ok\r\n            Transfer(_from, _to, _amount);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Returns the amount of tokens approved by the owner that can be\r\n    // transferred to the spender's account\r\n    // ------------------------------------------------------------------------\r\n    // BK Ok\r\n    function allowance(\r\n        address _owner, \r\n        address _spender\r\n    ) constant returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    // BK Ok\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    // BK Ok\r\n    event Approval(address indexed _owner, address indexed _spender,\r\n        uint256 _value);\r\n}\r\n\r\n\r\ncontract ArenaplayToken is ERC20Token {\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Token information\r\n    // ------------------------------------------------------------------------\r\n    // BK Next 3 lines Ok. Using uint8 for decimals instead of uint256\r\n    string public constant symbol = \"APY\";\r\n    string public constant name = \"Arenaplay.io\";\r\n    uint8 public constant decimals = 18;\r\n\r\n    // > new Date(\"2017-06-29T13:00:00\").getTime()/1000\r\n    // 1498741200\r\n    // Do not use `now` here\r\n    // BK NOTE - This contract uses the date/time instead of blocks to determine\r\n    //           the start, end and BET/ETH scale. The use of date/time in \r\n    //           these contracts can be used by miners to skew the block time.\r\n    //           This is not a significant risk in a crowdfunding contract.\r\n    uint256 public constant STARTDATE = 1501173471;\r\n    // BK Ok\r\n    uint256 public constant ENDDATE = STARTDATE + 39 days;\r\n\r\n    // Cap USD 25mil @ 296.1470 ETH/USD\r\n    // BK NOTE - The following constant will need to be updated with the correct\r\n    //           ETH/USD exchange rate. The aim for Dao.Casino is to raise\r\n    //           USD 25 million, INCLUDING the precommitments. This cap will\r\n    //           have to take into account the ETH equivalent amount of the\r\n    //           precommitment \r\n    uint256 public constant CAP = 44432 ether;\r\n\r\n    // Cannot have a constant address here - Solidity bug\r\n    // https://github.com/ethereum/solidity/issues/2441\r\n    // BK Ok\r\n    address public multisig = 0x0e43311768025D0773F62fBF4a6cd083C508d979;\r\n\r\n    // BK Ok - To compare against the `CAP` variable\r\n    uint256 public totalEthers;\r\n\r\n    // BK Ok - Constructor\r\n    function ArenplayToken() {\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n \r\n    // ------------------------------------------------------------------------\r\n    // BK Ok - Calculate the BET/ETH at this point in time\r\n    function buyPrice() constant returns (uint256) {\r\n        return buyPriceAt(now);\r\n    }\r\n\r\n    // BK Ok - Calculate BET/ETH at any point in time. Can be used in EtherScan\r\n    //         to determine past, current or future BET/ETH rate \r\n    // BK NOTE - Scale is continuous\r\n    function buyPriceAt(uint256 at) constant returns (uint256) {\r\n        if (at < STARTDATE) {\r\n            return 0;\r\n        } else if (at < (STARTDATE + 9 days)) {\r\n            return 2700;\r\n        } else if (at < (STARTDATE + 18 days)) {\r\n            return 2400;\r\n        } else if (at < (STARTDATE + 27 days)) {\r\n            return 2050;\r\n        } else if (at <= ENDDATE) {\r\n            return 1500;\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Buy tokens from the contract\r\n    // ------------------------------------------------------------------------\r\n    // BK Ok - Account can send tokens directly to this contract's address\r\n    function () payable {\r\n        proxyPayment(msg.sender);\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Exchanges can buy on behalf of participant\r\n    // ------------------------------------------------------------------------\r\n    // BK Ok\r\n    function proxyPayment(address participant) payable {\r\n        // No contributions before the start of the crowdsale\r\n        // BK Ok\r\n        require(now >= STARTDATE);\r\n        // No contributions after the end of the crowdsale\r\n        // BK Ok\r\n        require(now <= ENDDATE);\r\n        // No 0 contributions\r\n        // BK Ok\r\n        require(msg.value > 0);\r\n\r\n        // Add ETH raised to total\r\n        // BK Ok - Overflow protected\r\n        totalEthers = totalEthers.add(msg.value);\r\n        // Cannot exceed cap\r\n        // BK Ok\r\n        require(totalEthers <= CAP);\r\n\r\n        // What is the BET to ETH rate\r\n        // BK Ok\r\n        uint256 _buyPrice = buyPrice();\r\n\r\n        // Calculate #BET - this is safe as _buyPrice is known\r\n        // and msg.value is restricted to valid values\r\n        // BK Ok\r\n        uint tokens = msg.value * _buyPrice;\r\n\r\n        // Check tokens > 0\r\n        // BK Ok\r\n        require(tokens > 0);\r\n        // Compute tokens for foundation 30%\r\n        // Number of tokens restricted so maths is safe\r\n        // BK Ok\r\n        uint multisigTokens = tokens * 2 / 7;\r\n\r\n        // Add to total supply\r\n        // BK Ok\r\n        _totalSupply = _totalSupply.add(tokens);\r\n        // BK Ok\r\n        _totalSupply = _totalSupply.add(multisigTokens);\r\n\r\n        // Add to balances\r\n        // BK Ok\r\n        balances[participant] = balances[participant].add(tokens);\r\n        // BK Ok\r\n        balances[multisig] = balances[multisig].add(multisigTokens);\r\n\r\n        // Log events\r\n        // BK Next 4 lines Ok\r\n        TokensBought(participant, msg.value, totalEthers, tokens,\r\n            multisigTokens, _totalSupply, _buyPrice);\r\n        Transfer(0x0, participant, tokens);\r\n        Transfer(0x0, multisig, multisigTokens);\r\n\r\n        // Move the funds to a safe wallet\r\n        // https://github.com/ConsenSys/smart-contract-best-practices#be-aware-of-the-tradeoffs-between-send-transfer-and-callvalue\r\n        multisig.transfer(msg.value);\r\n    }\r\n    // BK Ok\r\n    event TokensBought(address indexed buyer, uint256 ethers, \r\n        uint256 newEtherBalance, uint256 tokens, uint256 multisigTokens, \r\n        uint256 newTotalSupply, uint256 buyPrice);\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Owner to add precommitment funding token balance before the crowdsale\r\n    // commences\r\n    // ------------------------------------------------------------------------\r\n    // BK NOTE - Owner can only execute this before the crowdsale starts\r\n    // BK NOTE - Owner must add amount * 3 / 7 for the foundation for each\r\n    //           precommitment amount\r\n    // BK NOTE - The CAP must take into account the equivalent ETH raised\r\n    //           for the precommitment amounts\r\n    function addPrecommitment(address participant, uint balance) onlyOwner {\r\n        // BK Ok\r\n        require(now < STARTDATE);\r\n        // BK Ok\r\n        require(balance > 0);\r\n        // BK Ok\r\n        balances[participant] = balances[participant].add(balance);\r\n        // BK Ok\r\n        _totalSupply = _totalSupply.add(balance);\r\n        // BK Ok\r\n        Transfer(0x0, participant, balance);\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Transfer the balance from owner's account to another account, with a\r\n    // check that the crowdsale is finalised\r\n    // ------------------------------------------------------------------------\r\n    // BK Ok\r\n    function transfer(address _to, uint _amount) returns (bool success) {\r\n        // Cannot transfer before crowdsale ends or cap reached\r\n        // BK Ok\r\n        require(now > ENDDATE || totalEthers == CAP);\r\n        // Standard transfer\r\n        // BK Ok\r\n        return super.transfer(_to, _amount);\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Spender of tokens transfer an amount of tokens from the token owner's\r\n    // balance to another account, with a check that the crowdsale is\r\n    // finalised\r\n    // ------------------------------------------------------------------------\r\n    // BK Ok\r\n    function transferFrom(address _from, address _to, uint _amount) \r\n        returns (bool success)\r\n    {\r\n        // Cannot transfer before crowdsale ends or cap reached\r\n        // BK Ok\r\n        require(now > ENDDATE || totalEthers == CAP);\r\n        // Standard transferFrom\r\n        // BK Ok\r\n        return super.transferFrom(_from, _to, _amount);\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Owner can transfer out any accidentally sent ERC20 tokens\r\n    // ------------------------------------------------------------------------\r\n    // BK Ok - Only owner\r\n    function transferAnyERC20Token(address tokenAddress, uint amount)\r\n      onlyOwner returns (bool success) \r\n    {\r\n        // BK Ok\r\n        return ERC20Token(tokenAddress).transfer(owner, amount);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalEthers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ENDDATE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"participant\",\"type\":\"address\"},{\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"addPrecommitment\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"at\",\"type\":\"uint256\"}],\"name\":\"buyPriceAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"ArenplayToken\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"multisig\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"STARTDATE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferAnyERC20Token\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"participant\",\"type\":\"address\"}],\"name\":\"proxyPayment\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ethers\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newEtherBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"multisigTokens\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newTotalSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"buyPrice\",\"type\":\"uint256\"}],\"name\":\"TokensBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"ArenaplayToken","CompilerVersion":"v0.4.13+commit.fb4cb1a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://3ede5d27344a930daef48551b3e148bd36df58a1f811e3a2fc69b9da976c9848"}]}