{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.16;\r\n\r\n//SafeMath - Math operations with safety checks that throw on error\r\n    \r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ninterface token { \r\n    function transfer(address receiver, uint amount); \r\n}\r\n\r\ncontract ECT2Crowdsale2 {\r\n  \r\n  using SafeMath for uint256;\r\n\r\n  address public wallet;\r\n  address addressOfTokenUsedAsReward;\r\n  token tokenReward;\r\n  uint256 public startTime;\r\n  uint256 public endTime;\r\n  uint public fundingGoal;\r\n  uint public minimumFundingGoal;\r\n  uint256 public price;\r\n  uint256 public weiRaised;\r\n  uint256 public stage1Bounty;\r\n  uint256 public stage2Bounty;\r\n  uint256 public stage3Bounty;\r\n  uint256 public stage4Bounty;\r\n \r\n  mapping(address => uint256) public balanceOf;\r\n  bool fundingGoalReached = false;\r\n  bool crowdsaleClosed = false;\r\n \r\n  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n  event FundTransfer(address backer, uint amount, bool isContribution);\r\n  event GoalReached(address recipient, uint totalAmountRaised);\r\n  \r\n  modifier isMinimum() {\r\n         if(msg.value < 1000000000000000) return;\r\n        _;\r\n    }\r\n    \r\n  modifier afterDeadline() { \r\n      if (now <= endTime) return;\r\n      _;\r\n  }    \r\n\r\n  function ECT2Crowdsale2(\r\n  ) {\r\n    wallet = 0x55BeA1A0335A8Ea56572b8E66f17196290Ca6467;\r\n    addressOfTokenUsedAsReward = 0x3a799eD72BceF6fc98AeE750C5ACC352CDBA5f6c;\r\n    price = 100 * 1 finney;\r\n    fundingGoal = 50 * 1 finney;\r\n    minimumFundingGoal = 10 * 1 finney;\r\n    tokenReward = token(addressOfTokenUsedAsReward);\r\n    startTime = 1511355600; //13:00 UTC\r\n    stage1Bounty = 1511356800; //13:20 UTC 50%\r\n    stage2Bounty = 1511358000; //13:40 UTC 40%\r\n    stage3Bounty = 1511359200; //14:00 UTC 25%\r\n    stage4Bounty = 1511360100; //14:15UTC 10%\r\n    endTime = 1511361000; //14:30 UTC 0%\r\n  }\r\n\r\n  // fallback function can be used to buy tokens\r\n  function () payable isMinimum{\r\n    buyTokens(msg.sender);\r\n  }\r\n\r\n  // low level token purchase function\r\n  function buyTokens(address beneficiary) payable {\r\n    require(beneficiary != 0x0);\r\n    require(validPurchase());\r\n\r\n    uint256 weiAmount = msg.value;\r\n\r\n    // calculate token amount to be sent\r\n    uint256 tokens = (weiAmount) * price;\r\n    \r\n    if(now < stage1Bounty){\r\n      tokens += (tokens * 50) / 100;\r\n    }else if(now < stage2Bounty){\r\n      tokens += (tokens * 40) / 100;\r\n    }else if(now < stage3Bounty){\r\n      tokens += (tokens * 25) / 100;\r\n    }else if(now < stage4Bounty){\r\n      tokens += (tokens * 10) / 100;  \r\n    }\r\n    // update state\r\n    balanceOf[msg.sender] += weiAmount;\r\n    weiRaised = weiRaised.add(weiAmount);\r\n    tokenReward.transfer(beneficiary, tokens);\r\n    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\r\n  }\r\n  \r\n  \r\n  //withdrawal or refund for investor and beneficiary\r\n  function safeWithdrawal() afterDeadline {\r\n        if (weiRaised < fundingGoal && weiRaised < minimumFundingGoal) {\r\n            uint amount = balanceOf[msg.sender];\r\n            balanceOf[msg.sender] = 0;\r\n            if (amount > 0) {\r\n                if (msg.sender.send(amount)) {\r\n                    FundTransfer(msg.sender, amount, false);\r\n                    /*tokenReward.burnFrom(msg.sender, price * amount);*/\r\n                } else {\r\n                    balanceOf[msg.sender] = amount;\r\n                }\r\n            }\r\n        }\r\n\r\n        if ((weiRaised >= fundingGoal || weiRaised >= minimumFundingGoal) && wallet == msg.sender) {\r\n            if (wallet.send(weiRaised)) {\r\n                FundTransfer(wallet, weiRaised, false);\r\n                GoalReached(wallet, weiRaised);\r\n            } else {\r\n                //If we fail to send the funds to beneficiary, unlock funders balance\r\n                fundingGoalReached = false;\r\n            }\r\n        }\r\n    }\r\n    \r\n    // withdrawEth when minimum cap is reached\r\n  function withdrawEth() private{\r\n        require(this.balance != 0);\r\n        require(weiRaised >= minimumFundingGoal);\r\n\r\n        pendingEthWithdrawal = this.balance;\r\n  }\r\n    uint pendingEthWithdrawal;\r\n\r\n  // @return true if the transaction can buy tokens\r\n  function validPurchase() internal constant returns (bool) {\r\n    bool withinPeriod = now >= startTime && now <= endTime;\r\n    bool nonZeroPurchase = msg.value != 0;\r\n    return withinPeriod && nonZeroPurchase;\r\n  }\r\n\r\n  // @return true if crowdsale event has ended\r\n  function hasEnded() public constant returns (bool) {\r\n    return now > endTime;\r\n  }\r\n \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"minimumFundingGoal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundingGoal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stage4Bounty\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stage3Bounty\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stage2Bounty\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stage1Bounty\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"safeWithdrawal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"backer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"isContribution\",\"type\":\"bool\"}],\"name\":\"FundTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"totalAmountRaised\",\"type\":\"uint256\"}],\"name\":\"GoalReached\",\"type\":\"event\"}]","ContractName":"ECT2Crowdsale2","CompilerVersion":"v0.4.16+commit.d7661dd9","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://48cb5334f01ebfa2b3cb5ce7a4db7d1d434383aedede501bb055d19df18f26d6"}]}