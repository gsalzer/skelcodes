{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.15;\r\n\r\ncontract IToken { \r\n    function issue(address _recipient, uint256 _value) returns (bool);\r\n    function totalSupply() constant returns (uint256);\r\n    function unlock() returns (bool);\r\n}\r\n\r\ncontract CoinoorCrowdsale {\r\n\r\n    // Crowdsale details\r\n    address public beneficiary; // Company address multisig (100% eth + 4.9 mln tokens)\r\n    address public creator; // Creator (.25 mln tokens)\r\n    address public marketing; // Marketing team (2.5 mln tokens)\r\n    address public bounty; // Bounty (100k tokens)\r\n    address public confirmedBy; // Address that confirmed beneficiary\r\n    uint256 public maxSupply = 65000000 * 10**8; // 65 mln tokens\r\n    uint256 public minAcceptedAmount = 40 finney; // 1/25 ether\r\n\r\n    // Eth to CNR rate\r\n    uint256 public ratePreICO = 450; // 50% bonus\r\n    uint256 public rateWaiting = 0;\r\n    uint256 public rateAngelDay = 420; // 40% bonus\r\n    uint256 public rateFirstWeek = 390; // 30% bonus\r\n    uint256 public rateSecondWeek = 375; // 25% bonus\r\n    uint256 public rateThirdWeek = 360; // 20% bonus\r\n    uint256 public rateLastWeek = 330; // 10% bonus\r\n\r\n    uint256 public ratePreICOEnd = 10 days;\r\n    uint256 public rateWaitingEnd = 20 days;\r\n    uint256 public rateAngelDayEnd = 21 days;\r\n    uint256 public rateFirstWeekEnd = 28 days;\r\n    uint256 public rateSecondWeekEnd = 35 days;\r\n    uint256 public rateThirdWeekEnd = 42 days;\r\n    uint256 public rateLastWeekEnd = 49 days;\r\n\r\n    enum Stages {\r\n        Deploying,\r\n        InProgress,\r\n        Ended\r\n    }\r\n\r\n    Stages public stage = Stages.Deploying;\r\n\r\n    // Crowdsale state\r\n    uint256 public start;\r\n    uint256 public end;\r\n    uint256 public raised;\r\n\r\n    // Token\r\n    IToken public token;\r\n\r\n\r\n    /**\r\n     * Throw if at stage other than current stage\r\n     * \r\n     * @param _stage expected stage to test for\r\n     */\r\n    modifier atStage(Stages _stage) {\r\n        require(stage == _stage);\r\n\r\n        _;\r\n    }\r\n    \r\n\r\n    /**\r\n     * Throw if sender is not beneficiary\r\n     */\r\n    modifier onlyBeneficiary() {\r\n        require(beneficiary == msg.sender);\r\n\r\n        _;\r\n    }\r\n\r\n\r\n    /**\r\n     * Construct\r\n     *\r\n     * @param _tokenAddress The address of the token contact\r\n     * @param _beneficiary The address of the beneficiary\r\n     * @param _creator The address of the tech team\r\n     * @param _marketing The address of the marketing team\r\n     * @param _bounty The address of the bounty wallet\r\n     * @param _start The timestamp of the start date\r\n     */\r\n    function CoinoorCrowdsale(address _tokenAddress, address _beneficiary, address _creator, address _marketing, address _bounty, uint256 _start) {\r\n        token = IToken(_tokenAddress);\r\n        beneficiary = _beneficiary;\r\n        creator = _creator;\r\n        marketing = _marketing;\r\n        bounty = _bounty;\r\n        start = _start;\r\n        end = start + rateLastWeekEnd;\r\n    }\r\n\r\n\r\n    /**\r\n     * Deploy and start the crowdsale\r\n     */\r\n    function init() atStage(Stages.Deploying) {\r\n        stage = Stages.InProgress;\r\n\r\n        // Create tokens\r\n        if (!token.issue(beneficiary, 4900000 * 10**8)) {\r\n            stage = Stages.Deploying;\r\n            revert();\r\n        }\r\n\r\n        if (!token.issue(creator, 2500000 * 10**8)) {\r\n            stage = Stages.Deploying;\r\n            revert();\r\n        }\r\n\r\n        if (!token.issue(marketing, 2500000 * 10**8)) {\r\n            stage = Stages.Deploying;\r\n            revert();\r\n        }\r\n\r\n        if (!token.issue(bounty, 100000 * 10**8)) {\r\n            stage = Stages.Deploying;\r\n            revert();\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * For testing purposes\r\n     *\r\n     * @return The beneficiary address\r\n     */\r\n    function confirmBeneficiary() onlyBeneficiary {\r\n        confirmedBy = msg.sender;\r\n    }\r\n\r\n\r\n    /**\r\n     * Convert `_wei` to an amount in tokens using \r\n     * the current rate\r\n     *\r\n     * @param _wei amount of wei to convert\r\n     * @return The amount in tokens\r\n     */\r\n    function toTokens(uint256 _wei) returns (uint256 amount) {\r\n        uint256 rate = 0;\r\n        if (stage != Stages.Ended && now >= start && now <= end) {\r\n\r\n            // Check for preico\r\n            if (now <= start + ratePreICOEnd) {\r\n                rate = ratePreICO;\r\n            }\r\n\r\n            // Check for waiting period\r\n            else if (now <= start + rateWaitingEnd) {\r\n                rate = rateWaiting;\r\n            }\r\n\r\n            // Check for angelday\r\n            else if (now <= start + rateAngelDayEnd) {\r\n                rate = rateAngelDay;\r\n            }\r\n\r\n            // Check first week\r\n            else if (now <= start + rateFirstWeekEnd) {\r\n                rate = rateFirstWeek;\r\n            }\r\n\r\n            // Check second week\r\n            else if (now <= start + rateSecondWeekEnd) {\r\n                rate = rateSecondWeek;\r\n            }\r\n\r\n            // Check third week\r\n            else if (now <= start + rateThirdWeekEnd) {\r\n                rate = rateThirdWeek;\r\n            }\r\n\r\n            // Check last week\r\n            else if (now <= start + rateLastWeekEnd) {\r\n                rate = rateLastWeek;\r\n            }\r\n        }\r\n\r\n        return _wei * rate * 10**8 / 1 ether; // 10**8 for 8 decimals\r\n    }\r\n\r\n\r\n    /**\r\n     * Function to end the crowdsale by setting \r\n     * the stage to Ended\r\n     */\r\n    function endCrowdsale() atStage(Stages.InProgress) {\r\n        require(now > end);\r\n\r\n        stage = Stages.Ended;\r\n        if (!token.unlock()) {\r\n            stage = Stages.InProgress;\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * Transfer appropriate percentage of raised amount \r\n     * to the company address\r\n     */\r\n    function withdraw() onlyBeneficiary atStage(Stages.Ended) {\r\n        beneficiary.transfer(this.balance);\r\n    }\r\n\r\n    \r\n    /**\r\n     * Receives Eth and issue tokens to the sender\r\n     */\r\n    function () payable atStage(Stages.InProgress) {\r\n\r\n        // Crowdsale not started yet\r\n        require(now >= start);\r\n\r\n        // Crowdsale expired\r\n        require(now <= end);\r\n\r\n        // Enforce min amount\r\n        require(msg.value >= minAcceptedAmount);\r\n \r\n        address sender = msg.sender;\r\n        uint256 received = msg.value;\r\n        uint256 valueInTokens = toTokens(received);\r\n\r\n        // Period between pre-ico and ico\r\n        require(valueInTokens > 0);\r\n\r\n        // Track\r\n        raised += received;\r\n\r\n        // Check max supply\r\n        if (token.totalSupply() + valueInTokens >= maxSupply) {\r\n            stage = Stages.Ended;\r\n        }\r\n\r\n        // Create tokens\r\n        if (!token.issue(sender, valueInTokens)) {\r\n            revert();\r\n        }\r\n\r\n        // 100% eth\r\n        if (!beneficiary.send(received)) {\r\n            revert();\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rateAngelDayEnd\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"endCrowdsale\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rateFirstWeekEnd\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"marketing\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rateAngelDay\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rateLastWeekEnd\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rateSecondWeekEnd\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rateThirdWeekEnd\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wei\",\"type\":\"uint256\"}],\"name\":\"toTokens\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ratePreICO\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rateWaitingEnd\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bounty\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rateSecondWeek\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"confirmBeneficiary\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ratePreICOEnd\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rateThirdWeek\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rateFirstWeek\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rateLastWeek\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"start\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rateWaiting\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"confirmedBy\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"init\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"end\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"raised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minAcceptedAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_creator\",\"type\":\"address\"},{\"name\":\"_marketing\",\"type\":\"address\"},{\"name\":\"_bounty\",\"type\":\"address\"},{\"name\":\"_start\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"}]","ContractName":"CoinoorCrowdsale","CompilerVersion":"v0.4.15+commit.bbb8e64f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000e200e7660a88fdc4fc831255411bf5f8b9c08ba4000000000000000000000000f0e8d368b3f6f5afdac0ed901683716ccd46d1df000000000000000000000000dfb408a07e6d07998de0b22709cbf4ad5b56038e00000000000000000000000027f8c6fee6252529abb67f2ddce6ceb56ec31139000000000000000000000000302cd6d41866ec03edf421a0cd4f4cbdfb0b67b00000000000000000000000000000000000000000000000000000000059c72dc0","Library":"","SwarmSource":"bzzr://dfc4e30779eb7e39dacc7ca705d87fc6329f3df8b0e74ceebdb707633aeffd66"}]}