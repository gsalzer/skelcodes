{"status":"1","message":"OK","result":[{"SourceCode":"//--------------------------------------------------------------//\r\n//---------------------BLOCKLANCER TOKEN -----------------------//\r\n//--------------------------------------------------------------//\r\n\r\npragma solidity ^0.4.8;\r\n\r\n/// Migration Agent\r\n/// allows us to migrate to a new contract should it be needed\r\n/// makes blocklancer future proof\r\ncontract MigrationAgent {\r\n    function migrateFrom(address _from, uint256 _value);\r\n}\r\n\r\ncontract ERC20Interface {\r\n     // Get the total token supply\r\n     function totalSupply() constant returns (uint256 totalSupply);\r\n  \r\n     // Get the account balance of another account with address _owner\r\n     function balanceOf(address _owner) constant returns (uint256 balance);\r\n  \r\n     // Send _value amount of tokens to address _to\r\n     function transfer(address _to, uint256 _value) returns (bool success);\r\n  \r\n     // Send _value amount of tokens from address _from to address _to\r\n     function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\r\n  \r\n     // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\r\n     // If this function is called again it overwrites the current allowance with _value.\r\n     // this function is required for some DEX functionality\r\n     function approve(address _spender, uint256 _value) returns (bool success);\r\n  \r\n     // Returns the amount which _spender is still allowed to withdraw from _owner\r\n     function allowance(address _owner, address _spender) constant returns (uint256 remaining);\r\n  \r\n     // Triggered when tokens are transferred.\r\n     event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n  \r\n     // Triggered whenever approve(address _spender, uint256 _value) is called.\r\n     event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\n/// Blocklancer Token (LNC) - crowdfunding code for Blocklancer Project\r\ncontract BlocklancerToken is ERC20Interface {\r\n    string public constant name = \"Lancer Token\";\r\n    string public constant symbol = \"LNC\";\r\n    uint8 public constant decimals = 18;  // 18 decimal places, the same as ETH.\r\n    \r\n    mapping(address => mapping (address => uint256)) allowed;\r\n\r\n    uint public fundingStart;\r\n\r\n    // The flag indicates if the LNC contract is in Funding state.\r\n    bool public funding = true;\r\n    bool allowTransfer=false;\r\n\r\n    // Receives ETH and its own LNC endowment.\r\n    address public master;\r\n\r\n    // The current total token supply.\r\n    uint256 totalTokens;\r\n    \r\n    uint exchangeRate=20000;\r\n\tuint EarlyInvestorExchangeRate=25000;\r\n\t\r\n\tbool startRefund=false;\r\n\r\n    mapping (address => uint256) balances;\r\n    mapping (address => bool) initialInvestor;\r\n    mapping (address => uint) lastTransferred;\r\n    \r\n    //needed to refund everyone should the ICO fail\r\n    // needed because the price per LNC isn't linear\r\n    mapping (address => uint256) balancesEther;\r\n\r\n    //address of the contract that manages the migration\r\n    //can only be changed by the creator\r\n    address public migrationAgent;\r\n    \r\n    //total amount of token migrated\r\n    //allows everyone to see the progress of the migration\r\n    uint256 public totalMigrated;\r\n\r\n    event Migrate(address indexed _from, address indexed _to, uint256 _value);\r\n    event Refund(address indexed _from, uint256 _value);\r\n    \r\n    //total amount of participants in the ICO\r\n    uint totalParticipants;\r\n\r\n    function BlocklancerToken() {\r\n        master = msg.sender;\r\n        fundingStart = 1501977600;\r\n        initialInvestor[0x32be343b94f860124dc4fee278fdcbd38c102d88]=true;initialInvestor[0x3106fe2245b376888d684bdcd83dfa9641a869ff]=true;initialInvestor[0x7f7c64c7b7f5a611e739b4da26659bf741414917]=true;initialInvestor[0x4b3b8e0c2c221e916a48e2e5f3718ae2bce51894]=true;initialInvestor[0x507c8fea802a0772eb5e001a8fba38f36fb9b66b]=true;initialInvestor[0x3c35b66dbaf1bc716f41759c7513a7af2f727ce0]=true;initialInvestor[0x7da3ff5dc152352dcffaf08d528e78f1efd4e9d1]=true;initialInvestor[0x404b688a1d9eb850be2527c5dd341561cfa84e11]=true;initialInvestor[0x80ad7165f29f97896a0b5758193879de34fd9712]=true;initialInvestor[0xd70837a61a322f69ba3742111216a7b97d61d3a7]=true;initialInvestor[0x5eefc4f295045ea11827f515c10d50829580cd31]=true;initialInvestor[0xc8c154d54e8d66073b23361cc74cf5d13efc4dc9]=true;initialInvestor[0x00b279438dff4bb6f37038b12704e31967955cb0]=true;initialInvestor[0xfff78f0db7995c7f2299d127d332aef95bc3e7b7]=true;initialInvestor[0xae631a37ad50bf03e8028d0ae8ba041c70ac4c70]=true;initialInvestor[0x4effca51ba840ae9563f5ac1aa794d1e5d3a3806]=true;initialInvestor[0x315a233620b8536d37a92d588aaf5eb050b50d84]=true;initialInvestor[0x1ebf9e3470f303f6a6ac43347e41877b0a5aaa39]=true;initialInvestor[0xbf022480bda3f6c839cd443397761d5e83f3c02b]=true;initialInvestor[0xe727ea5340256a5236287ee3074eea34d8483457]=true;initialInvestor[0x45ecfeea42fc525c0b29313d3de9089488ef71dc]=true;initialInvestor[0xe59e4aac45862796cb52434967cf72ea46474ff3]=true;initialInvestor[0x7c367c14a322404f9e332b68d7d661b46a5c93ea]=true;initialInvestor[0x08bea4ccc9c45e506d5bc5e638acaa13fa3e801c]=true;initialInvestor[0x5dfb4a015eb0c3477a99ba88b2ac60459c879674]=true;initialInvestor[0x771a2137708ca7e07e7b7c55e5ea666e88d7c0c8]=true;initialInvestor[0xcc8ab06eb5a14855fc8b90abcb6be2f34ee5cea1]=true;initialInvestor[0x0764d446d0701a9b52382f8984b9d270d266e02c]=true;initialInvestor[0x2d90b415a38e2e19cdd02ff3ad81a97af7cbf672]=true;initialInvestor[0x0d4266de516944a49c8109a4397d1fcf06fb7ed0]=true;initialInvestor[0x7a5159617df20008b4dbe06d645a1b0305406794]=true;initialInvestor[0xaf9e23965c09ebf5d313c669020b0e1757cbb92c]=true;initialInvestor[0x33d94224754c122baa1ebaf455d16a9c82f69c98]=true;initialInvestor[0x267be1c1d684f78cb4f6a176c4911b741e4ffdc0]=true;initialInvestor[0xf6ac7c81ca099e34421b7eff7c9e80c8f56b74ae]=true;initialInvestor[0xd85faf59e73225ef386b46a1b17c493019b23e1e]=true;initialInvestor[0x3833f8dbdbd6bdcb6a883ff209b869148965b364]=true;initialInvestor[0x7ed1e469fcb3ee19c0366d829e291451be638e59]=true;initialInvestor[0x6c1ddafafd55a53f80cb7f4c8c8f9a9f13f61d70]=true;initialInvestor[0x94ef531595ffe510f8dc92e0e07a987f57784338]=true;initialInvestor[0xcc54e4e2f425cc4e207344f9e0619c1e40f42f26]=true;initialInvestor[0x70ee7bfc1aeac50349c29475a11ed4c57961b387]=true;initialInvestor[0x89be0bd8b6007101c7da7170a6461580994221d0]=true;initialInvestor[0xa7802ba51ba87556263d84cfc235759b214ccf35]=true;initialInvestor[0xb6a34bd460f02241e80e031023ec20ce6fc310ae]=true;initialInvestor[0x07004b458b56fb152c06ad81fe1be30c8a8b2ea1]=true;initialInvestor[0xb6da110659ef762a381cf2d6f601eb19b5f5d51e]=true;initialInvestor[0x20abf65634219512c6c98a64614c43220ca2085b]=true;initialInvestor[0x3afd1483693fe606c0e58f580bd08ae9aba092fd]=true;initialInvestor[0x61e120b9ca6559961982d9bd1b1dbea7485b84d1]=true;initialInvestor[0x481525718f1536ca2d739aa7e68b94b5e1d5d2c2]=true;initialInvestor[0x8e129a434cde6f52838fad2d30d8b08f744abf48]=true;initialInvestor[0x13df035952316f5fb663c262064ee39e44aa6b43]=true;initialInvestor[0x03c6c82a1d6d13b2f92ed63a10b1b791ffaa1e02]=true;initialInvestor[0xb079a72c627d0a34b880aee0504b901cbce64568]=true;initialInvestor[0xbf27721ca05c983c902df12492620ab2a8b9db91]=true;initialInvestor[0x4ced2b7d27ac74b0ecb2440d9857ba6c6407149f]=true;initialInvestor[0x330c63a5b737b5542be108a74b3fef6272619585]=true;initialInvestor[0x266dccd07a275a6e72b6bc549f7c2ce9e082f13f]=true;initialInvestor[0xf4280bf77a043568e40da2b8068b11243082c944]=true;initialInvestor[0x67d2f0e2d642a87300781df25c45b00bccaf6983]=true;initialInvestor[0x9f658a6628864e94f9a1c53ba519f0ae37a8b4a5]=true;initialInvestor[0x498d256ee53d4d05269cfa1a80c3214e525076ca]=true;initialInvestor[0xa1beac79dda14bce1ee698fdee47e2f7f2fd1f0d]=true;initialInvestor[0xfeb063bd508b82043d6b4d5c51e1e42b44f39b33]=true;initialInvestor[0xfeb7a283e1dbf2d5d8e9ba64ab5e607a41213561]=true;initialInvestor[0xabedb3d632fddccd4e95957be4ee0daffbe6acdd]=true;initialInvestor[0x4d8a7cb44d317113c82f25a0174a637a8f012ebb]=true;initialInvestor[0xe922c94161d45bdd31433b3c7b912ad214d399ce]=true;initialInvestor[0x11f9ad6eb7e9e98349b8397c836c0e3e88455b0a]=true;initialInvestor[0xfc28b52160639167fa59f30232bd8d43fab681e6]=true;initialInvestor[0xaf8a6c54fc8fa59cfcbc631e56b3d5b22fa42b75]=true;initialInvestor[0xd3c0ebb99a5616f3647f16c2efb40b133b5b1e1c]=true;initialInvestor[0x877341abeac8f44ac69ba7c99b1d5d31ce7a11d7]=true;initialInvestor[0xb22f376f70f34c906a88a91f6999a0bd1a0f3c3d]=true;initialInvestor[0x2c99db3838d6af157c8d671291d560a013c6c01e]=true;initialInvestor[0xd0f38af6984f3f847f7f2fcd6ea27aa878257059]=true;initialInvestor[0x2a5da89176d5316782d7f1c9db74d209679ad9ce]=true;initialInvestor[0xc88eea647a570738e69ad3dd8975577df720318d]=true;initialInvestor[0xb32b18dfea9072047a368ec056a464b73618345a]=true;initialInvestor[0x945b9a00bffb201a5602ee661f2a4cc6e5285ca6]=true;initialInvestor[0x86957ac9a15f114c08296523569511c22e471266]=true;initialInvestor[0x007bfe6994536ec9e89505c7de8e9eb748d3cb27]=true;initialInvestor[0x6ad0f0f578115b6fafa73df45e9f1e9056b84459]=true;initialInvestor[0x621663b4b6580b70b74afaf989c707d533bbec91]=true;initialInvestor[0xdc86c0632e88de345fc2ac01608c63f2ed99605a]=true;initialInvestor[0x3d83bb077b2557ef5f361bf1a9e68d093d919b28]=true;initialInvestor[0x56307b37377f75f397d4936cf507baf0f4943ea5]=true;initialInvestor[0x555cbe849bf5e01db195a81ecec1e65329fff643]=true;initialInvestor[0x7398a2edb928a2e179f62bfb795f292254f6850e]=true;initialInvestor[0x30382b132f30c175bee2858353f3a2dd0d074c3a]=true;initialInvestor[0x5baeac0a0417a05733884852aa068b706967e790]=true;initialInvestor[0xcb12b8a675e652296a8134e70f128521e633b327]=true;initialInvestor[0xaa8c03e04b121511858d88be7a1b2f5a2d70f6ac]=true;initialInvestor[0x77529c0ea5381262db964da3d5f6e2cc92e9b48b]=true;initialInvestor[0x59e5fe8a9637702c6d597c5f1c4ebe3fba747371]=true;initialInvestor[0x296fe436ecc0ea6b7a195ded26451e77e1335108]=true;initialInvestor[0x41bacae05437a3fe126933e57002ae3f129aa079]=true;initialInvestor[0x6cd5b9b60d2bcf81af8e6ef5d750dc9a8f18bf45]=true;\r\n    }\r\n    \r\n    //returns the total amount of participants in the ICO\r\n    function getAmountofTotalParticipants() constant returns (uint){\r\n        return totalParticipants;\r\n    }\r\n\r\n    /// allows to transfer token to another address\r\n    function transfer(address _to, uint256 _value) returns (bool success) {\r\n        // Don't allow in funding state\r\n        if(funding) throw;\r\n        if(!allowTransfer)throw;\r\n\r\n        var senderBalance = balances[msg.sender];\r\n        //only allow if the balance of the sender is more than he want's to send\r\n        if (senderBalance >= _value && _value > 0) {\r\n            //reduce the sender balance by the amount he sends\r\n            senderBalance -= _value;\r\n            balances[msg.sender] = senderBalance;\r\n            \r\n            //increase the balance of the receiver by the amount we reduced the balance of the sender\r\n            balances[_to] += _value;\r\n            \r\n            //saves the last time someone sent LNc from this address\r\n            //is needed for our Token Holder Tribunal\r\n            //this ensures that everyone can only vote one time\r\n            //otherwise it would be possible to send the LNC around and everyone votes again and again\r\n            lastTransferred[msg.sender]=block.timestamp;\r\n            Transfer(msg.sender, _to, _value);\r\n            return true;\r\n        }\r\n        //transfer failed\r\n        return false;\r\n    }\r\n\r\n    //returns the total amount of LNC in circulation\r\n    //get displayed on the website whilst the crowd funding\r\n    function totalSupply() constant returns (uint256 totalSupply) {\r\n        return totalTokens;\r\n    }\r\n    \r\n    //retruns the balance of the owner address\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n    \r\n    //returns the amount anyone pledged into this contract\r\n    function EtherBalanceOf(address _owner) constant returns (uint256) {\r\n        return balancesEther[_owner];\r\n    }\r\n    \r\n    //returns the amount anyone pledged into this contract\r\n    function isInitialInvestor(address _owner) constant returns (bool) {\r\n        return initialInvestor[_owner];\r\n    }\r\n    \r\n    //time left before the crodsale begins\r\n    function TimeLeftBeforeCrowdsale() external constant returns (uint256) {\r\n        if(fundingStart>block.timestamp)\r\n            return fundingStart-block.timestamp;\r\n        else\r\n            return 0;\r\n    }\r\n\r\n    // allows us to migrate to anew contract\r\n    function migrate(uint256 _value) external {\r\n        // can only be called if the funding ended\r\n        if(funding) throw;\r\n        \r\n        //the migration agent address needs to be set\r\n        if(migrationAgent == 0) throw;\r\n\r\n        // must migrate more than nothing\r\n        if(_value == 0) throw;\r\n        \r\n        //if the value is higher than the sender owns abort\r\n        if(_value > balances[msg.sender]) throw;\r\n\r\n        //reduce the balance of the owner\r\n        balances[msg.sender] -= _value;\r\n        \r\n        //reduce the token left in the old contract\r\n        totalTokens -= _value;\r\n        totalMigrated += _value;\r\n        \r\n        //call the migration agent to complete the migration\r\n        //credits the same amount of LNC in the new contract\r\n        MigrationAgent(migrationAgent).migrateFrom(msg.sender, _value);\r\n        Migrate(msg.sender, migrationAgent, _value);\r\n    }\r\n\r\n    //sets the address of the migration agent\r\n    function setMigrationAgent(address _agent) external {\r\n        //not possible in funding mode\r\n        if(funding) throw;\r\n        \r\n        //only allow to set this once\r\n        if(migrationAgent != 0) throw;\r\n        \r\n        //anly the owner can call this function\r\n        if(msg.sender != master) throw;\r\n        \r\n        //set the migration agent\r\n        migrationAgent = _agent;\r\n    }\r\n    \r\n    function setExchangeRate(uint _exchangeRate){\r\n        if(msg.sender!=master)throw;\r\n        exchangeRate=_exchangeRate;\r\n    }\r\n    \r\n    function setICORunning(bool r){\r\n        if(msg.sender!=master)throw;\r\n        funding=r;\r\n    }\r\n    \r\n    function setTransfer(bool r){\r\n        if(msg.sender!=master)throw;\r\n        allowTransfer=r;\r\n    }\r\n\t\r\n\tfunction addInitialInvestor(address invest){\r\n\t\tif(msg.sender!=master)throw;\r\n\t\tinitialInvestor[invest]=true;\r\n\t}\r\n\t\r\n\tfunction addToken(address invest,uint256 value){\r\n\t\tif(msg.sender!=master)throw;\r\n\t\tbalances[invest]+=value;\r\n\t\ttotalTokens+=value;\r\n\t}\r\n\t\r\n\tfunction setEarlyInvestorExchangeRate(uint invest){\r\n\t\tif(msg.sender!=master)throw;\r\n\t\tEarlyInvestorExchangeRate=invest;\r\n\t}\r\n\t\r\n\tfunction setStartDate(uint time){\r\n\t\tif(msg.sender!=master)throw;\r\n\t\tfundingStart=time;\r\n\t}\r\n\t\r\n\tfunction setStartRefund(bool s){\r\n\t\tif(msg.sender!=master)throw;\r\n\t\tstartRefund=s;\r\n\t}\r\n    \r\n    //return the current exchange rate -> LNC per Ether\r\n    function getExchangeRate(address investorAddress) constant returns(uint){\r\n\t\tif(initialInvestor[investorAddress])\r\n\t\t\treturn EarlyInvestorExchangeRate;\r\n\t\telse\r\n\t\t\treturn exchangeRate;\r\n    }\r\n    \r\n    //returns if the crowd sale is still open\r\n    function ICOopen() constant returns(bool){\r\n        if(!funding) return false;\r\n        else if(block.timestamp < fundingStart) return false;\r\n        else return true;\r\n    }\r\n\r\n    //when someone send ether to this contract\r\n    function() payable external {\r\n        //not possible if the funding has ended\r\n        if(!funding) throw;\r\n        \r\n        //not possible before the funding started\r\n        if(block.timestamp < fundingStart) throw;\r\n\r\n        // Do not allow creating 0 or more than the cap tokens.\r\n        if(msg.value == 0) throw;\r\n\r\n        //calculate the amount of LNC the sender receives\r\n        var numTokens = msg.value * getExchangeRate(msg.sender);\r\n        totalTokens += numTokens;\r\n\r\n        // increase the amount of token the sender holds\r\n        balances[msg.sender] += numTokens;\r\n        \r\n        //increase the amount of ether the sender pledged into the contract\r\n        balancesEther[msg.sender] += msg.value;\r\n        \r\n        //icrease the amount of people that sent ether to this contract\r\n        totalParticipants+=1;\r\n\r\n        // Log token creation\r\n        Transfer(0, msg.sender, numTokens);\r\n    }\r\n\r\n    //called after the crodsale ended\r\n    //needed to allow everyone to send their LNC around\r\n    function finalize(uint percentOfTotal) external {\r\n        if(msg.sender!=master)throw;\r\n        if(funding)throw;\r\n\r\n        // allows to tranfer token to another address\r\n        // disables buying LNC\r\n        funding = false;\r\n\r\n        //send 12% of the token to the devs\r\n        //10 % for the devs\r\n        //2 % for the bounty participants\r\n        uint256 additionalTokens = totalTokens * percentOfTotal / (100 - percentOfTotal);\r\n        totalTokens += additionalTokens;\r\n        balances[master] += additionalTokens;\r\n        Transfer(0, master, additionalTokens);\r\n\r\n        // Transfer ETH to the Blocklancer address.\r\n        if (!master.send(this.balance)) throw;\r\n    }\r\n\t\r\n\t//everyone needs to call this function should the minimum cap not be reached\r\n    //refunds the sender\r\n    function refund() external {\r\n        if(!startRefund) throw;\r\n\r\n        var gntValue = balances[msg.sender];\r\n        var ethValue = balancesEther[msg.sender];\r\n        if (gntValue == 0) throw;\r\n        \r\n        //set the amount of token the sender has to 0\r\n        balances[msg.sender] = 0;\r\n        \r\n        //set the amount of ether the sender owns to 0\r\n        balancesEther[msg.sender] = 0;\r\n        totalTokens -= gntValue;\r\n\r\n        Refund(msg.sender, ethValue);\r\n        if (!msg.sender.send(ethValue)) throw;\r\n    }\r\n\t\r\n    // Send _value amount of tokens from address _from to address _to\r\n    // The transferFrom method is used for a withdraw workflow, allowing contracts to send\r\n     // tokens on your behalf, for example to \"deposit\" to a contract address and/or to charge\r\n     // fees in sub-currencies; the command should fail unless the _from account has\r\n     // deliberately authorized the sender of the message via some mechanism; we propose\r\n     // these standardized APIs for approval:\r\n     function transferFrom(address _from,address _to,uint256 _amount) returns (bool success) {\r\n         if(funding) throw;\r\n         if(!allowTransfer)throw;\r\n         if (balances[_from] >= _amount\r\n             && allowed[_from][msg.sender] >= _amount\r\n             && _amount > 0\r\n             && balances[_to] + _amount > balances[_to]) {\r\n             balances[_from] -= _amount;\r\n             allowed[_from][msg.sender] -= _amount;\r\n             balances[_to] += _amount;\r\n             Transfer(_from, _to, _amount);\r\n             return true;\r\n         } else {\r\n             return false;\r\n         }\r\n     }\r\n  \r\n     // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\r\n     // If this function is called again it overwrites the current allowance with _value.\r\n     function approve(address _spender, uint256 _amount) returns (bool success) {\r\n         if(funding) throw;\r\n         if(!allowTransfer)throw;\r\n         allowed[msg.sender][_spender] = _amount;\r\n         Approval(msg.sender, _spender, _amount);\r\n         return true;\r\n     }\r\n  \r\n     function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n         return allowed[_owner][_spender];\r\n     }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"ICOopen\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"percentOfTotal\",\"type\":\"uint256\"}],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"s\",\"type\":\"bool\"}],\"name\":\"setStartRefund\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"EtherBalanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"invest\",\"type\":\"address\"}],\"name\":\"addInitialInvestor\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"migrate\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"invest\",\"type\":\"uint256\"}],\"name\":\"setEarlyInvestorExchangeRate\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refund\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_agent\",\"type\":\"address\"}],\"name\":\"setMigrationAgent\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"setStartDate\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"migrationAgent\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TimeLeftBeforeCrowdsale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalMigrated\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"r\",\"type\":\"bool\"}],\"name\":\"setTransfer\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"invest\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"addToken\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundingStart\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"isInitialInvestor\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"funding\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"r\",\"type\":\"bool\"}],\"name\":\"setICORunning\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_exchangeRate\",\"type\":\"uint256\"}],\"name\":\"setExchangeRate\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAmountofTotalParticipants\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"master\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"investorAddress\",\"type\":\"address\"}],\"name\":\"getExchangeRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Migrate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Refund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"BlocklancerToken","CompilerVersion":"v0.4.8+commit.60cc1668","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://5440c86b02d0f3cc5472911a43e4a27f8b4dc87146601778427a07e0ed0c7665"}]}