{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.17;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    /**\r\n    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n    * account.\r\n    */\r\n    function Ownable() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n    * @dev Throws if called by any account other than the owner.\r\n    */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n    * @param newOwner The address to transfer ownership to.\r\n    */\r\n    function transferOwnership(address newOwner) onlyOwner {\r\n        if (newOwner != address(0)) {\r\n            owner = newOwner;\r\n        }\r\n    }\r\n\r\n}\r\n\r\ncontract Fund is Ownable  {\r\n    using SafeMath for uint256;\r\n    \r\n    string public name = \"Slot Token\";\r\n    uint8 public decimals = 0;\r\n    string public symbol = \"SLOT\";\r\n    string public version = \"0.7\";\r\n    \r\n    uint8 constant TOKENS = 0;\r\n    uint8 constant BALANCE = 1;\r\n    \r\n    uint256 totalWithdrawn;     // of Ether\r\n    uint256 public totalSupply; // of Tokens\r\n    \r\n    mapping(address => uint256[2][]) balances;\r\n    mapping(address => uint256) withdrawals;\r\n    \r\n    event Withdrawn(\r\n            address indexed investor, \r\n            address indexed beneficiary, \r\n            uint256 weiAmount);\r\n    event Mint(\r\n            address indexed to, \r\n            uint256 amount);\r\n    event MintFinished();\r\n    event Transfer(\r\n            address indexed from, \r\n            address indexed to, \r\n            uint256 value);\r\n    event Approval(\r\n            address indexed owner, \r\n            address indexed spender, \r\n            uint256 value);\r\n            \r\n    mapping (address => mapping (address => uint256)) allowed;\r\n\r\n    bool public mintingFinished = false;\r\n\r\n    modifier canMint() {\r\n        require(!mintingFinished);\r\n        _;\r\n    }\r\n    \r\n    function Fund() payable {}\r\n    function() payable {}\r\n    \r\n    function getEtherBalance(address _owner) constant public returns (uint256 _balance) {\r\n        uint256[2][] memory snapshots = balances[_owner];\r\n        \r\n        if (snapshots.length == 0) { return 0; } // no data\r\n\r\n        uint256 balance = 0;\r\n        uint256 previousSnapTotalStake = 0;\r\n        \r\n        // add up all snapshots\r\n        for (uint256 i = 0 ; i < snapshots.length ; i++) {\r\n            // each snapshot has amount of tokens and totalBalance at the time except last, which should be calculated with current stake\r\n            \r\n            if (i == snapshots.length-1) {\r\n                // add current data\r\n                uint256 currentTokens = snapshots[i][TOKENS];\r\n                uint256 b = currentTokens.mul( getTotalStake().sub(previousSnapTotalStake) ).div(totalSupply);\r\n                balance = balance.add(b);\r\n        \r\n                // reduce withdrawals\r\n                return balance.sub(withdrawals[_owner]);\r\n            }\r\n            \r\n            uint256 snapTotalStake = snapshots[i][BALANCE];\r\n            // if it's the first element, nothing is substracted from snapshot's total stake, hence previous stake will be 0\r\n            uint256 spanBalance = snapshots[i][TOKENS].mul(snapTotalStake.sub(previousSnapTotalStake)).div(totalSupply);\r\n            balance = balance.add(spanBalance);\r\n            \r\n            previousSnapTotalStake = previousSnapTotalStake.add(snapTotalStake); // for the next loop and next code, needs to be += \r\n        }\r\n    }\r\n\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {\r\n        uint256[2][] memory snapshots = balances[_owner];\r\n        if (snapshots.length == 0) { return 0; }\r\n        \r\n        return snapshots[snapshots.length-1][TOKENS];\r\n    }\r\n    \r\n    function getTotalStake() constant public returns (uint256 _totalStake) {\r\n        // the total size of the pie, unaffected by withdrawals\r\n        return this.balance + totalWithdrawn;\r\n    }\r\n    \r\n    function withdrawBalance(address _to, uint256 _value) public {\r\n        require(getEtherBalance(msg.sender) >= _value);\r\n        \r\n        withdrawals[msg.sender] = withdrawals[msg.sender].add(_value);\r\n        totalWithdrawn = totalWithdrawn.add(_value);\r\n        \r\n        _to.transfer(_value);\r\n        Withdrawn(msg.sender, _to, _value);\r\n    }\r\n    \r\n    function transfer(address _to, uint256 _value) returns (bool) {\r\n        return transferFromPrivate(msg.sender, _to, _value);\r\n    }\r\n    \r\n    function transferFromPrivate(address _from, address _to, uint256 _value) private returns (bool) {\r\n        require(balanceOf(msg.sender) >= _value);\r\n        \r\n        uint256 fromTokens = balanceOf(msg.sender);\r\n        pushSnapshot(msg.sender, fromTokens-_value);\r\n        \r\n        uint256 toTokens = balanceOf(_to);\r\n        pushSnapshot(_to, toTokens+_value);\r\n        \r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n    \r\n    function pushSnapshot(address _beneficiary, uint256 _amount) private {\r\n        balances[_beneficiary].push([_amount, 0]);\r\n        \r\n        if (balances[_beneficiary].length > 1) {\r\n            // update previous snapshot balance\r\n            uint256 lastIndex = balances[msg.sender].length-1;\r\n            balances[_beneficiary][lastIndex-1][BALANCE] = getTotalStake();\r\n        }\r\n    }\r\n\r\n    function mint(address _to, uint256 _amount) public onlyOwner canMint returns (bool) {\r\n        pushSnapshot(_to, _amount.add(balanceOf(_to)));\r\n        totalSupply = totalSupply.add(_amount);\r\n        Mint(_to, _amount);\r\n        Transfer(0x0, _to, _amount); // so it is displayed properly on EtherScan\r\n        return true;\r\n    }\r\n    \r\n\r\n    function finishMinting() onlyOwner returns (bool) {\r\n        mintingFinished = true;\r\n        MintFinished();\r\n        return true;\r\n    }\r\n    \r\n    \r\n    function approve(address _spender, uint256 _value) returns (bool) {\r\n\r\n        // To change the approve amount you first have to reduce the addresses`\r\n        //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n        //  already 0 to mitigate the race condition described here:\r\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n        require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n    \r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\r\n        uint256 _allowance = allowed[_from][msg.sender];\r\n\r\n        transferFromPrivate(_from, _to, _value);\r\n        \r\n        allowed[_from][msg.sender] = _allowance.sub(_value);\r\n        return true;\r\n    }\r\n    \r\n}\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n  /**\r\n   * @dev modifier to allow actions only when the contract IS paused\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev modifier to allow actions only when the contract IS NOT paused\r\n   */\r\n  modifier whenPaused {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused returns (bool) {\r\n    paused = true;\r\n    Pause();\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused returns (bool) {\r\n    paused = false;\r\n    Unpause();\r\n    return true;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n* @title SlotCrowdsale\r\n*/\r\ncontract SlotCrowdsale is Ownable, Pausable {\r\n    using SafeMath for uint256;\r\n\r\n    Fund public fund;\r\n\r\n    uint256 constant ETHER_CAP   = 4715 ether;   // ether\r\n    uint256 constant TOKEN_CAP   = 10000000;     // tokens\r\n    uint256 constant PRICE       = 1 ether;      // ether\r\n    uint256 constant BOUNTY      = 250000;       // tokens\r\n    uint256 constant OWNERS_STAKE = 3750000;     // tokens\r\n    uint256 constant OWNERS_LOCK = 200000;       // blocks\r\n    address public bountyWallet;\r\n    address public ownersWallet;\r\n    uint256 public lockBegunAtBlock;\r\n    \r\n    bool public bountyDistributed = false;\r\n    bool public ownershipDistributed = false;\r\n    \r\n    uint256[10] outcomes = [1000000,    // 0\r\n                             250000,    // 1\r\n                             100000,    // 2 \r\n                              20000,    // 3\r\n                              10000,    // 4\r\n                               4000,    // 5\r\n                               2000,    // 6\r\n                               1250,    // 7\r\n                               1000,    // 8\r\n                                500];   // 9\r\n                               \r\n                            //   0  1   2   3    4    5    6     7     8     9  \r\n    uint16[10] chances =        [1, 4, 10, 50, 100, 250, 500,  800, 1000, 2000];\r\n    uint16[10] addedUpChances = [1, 5, 15, 65, 165, 415, 915, 1715, 2715, 4715];\r\n    \r\n    event OwnershipDistributed();\r\n    event BountyDistributed();\r\n\r\n    function SlotCrowdsale() payable {\r\n        // fund = Fund(_fundAddress); // still need to change ownership\r\n        fund = new Fund();\r\n        bountyWallet = 0x00deF93928A3aAD581F39049a3BbCaaB9BbE36C8;\r\n        ownersWallet = 0x0001619153d8FE15B3FA70605859265cb0033c1a;\r\n    }\r\n\r\n    function() payable {\r\n        // fallback function to buy tickets\r\n        buyTokenFor(msg.sender);\r\n    }\r\n    \r\n    function correctedIndex(uint8 _index) constant private returns (uint8 _newIndex) {\r\n        require(_index < chances.length);\r\n        // if the chance is 0, return the next index\r\n        \r\n        if (chances[_index] != 0) {\r\n            return _index;\r\n        } else {\r\n            return correctedIndex(uint8((_index + 1) % chances.length));\r\n        }\r\n    }\r\n    \r\n    function getRateIndex(uint256 _randomNumber) constant private returns (uint8 _rateIndex) {\r\n        for (uint8 i = 0 ; i < uint8(chances.length) ; i++) {\r\n            if (_randomNumber < addedUpChances[i]) { \r\n                return correctedIndex(i); \r\n            }\r\n        }\r\n    }\r\n\r\n    function buyTokenFor(address _beneficiary) whenNotPaused() payable {\r\n        require(_beneficiary != 0x0);\r\n        require(msg.value >= PRICE);\r\n        \r\n        uint256 change = msg.value%PRICE;\r\n        uint256 numberOfTokens = msg.value.sub(change).div(PRICE);\r\n        \r\n        mintTokens(_beneficiary, numberOfTokens);\r\n        \r\n        // Return change to msg.sender\r\n        msg.sender.transfer(change);\r\n    }\r\n    \r\n    function mintTokens(address _beneficiary, uint256 _numberOfTokens) private {\r\n        uint16 totalChances = addedUpChances[9];\r\n\r\n        for (uint16 i=1 ; i <= _numberOfTokens; i++) {\r\n            \r\n            uint256 randomNumber = uint256(keccak256(block.blockhash(block.number-1)))%totalChances;\r\n            uint8 rateIndex = getRateIndex(randomNumber);\r\n            \r\n            // rate shouldn't be 0 because of correctedIndex function\r\n            assert(chances[rateIndex] != 0);\r\n            chances[rateIndex]--;\r\n            \r\n            uint256 amount = outcomes[rateIndex];\r\n            fund.mint(_beneficiary, amount);\r\n        }\r\n    }\r\n    \r\n    function crowdsaleEnded() constant private returns (bool ended) {\r\n        if (fund.totalSupply() >= TOKEN_CAP) { \r\n            return true;\r\n        } else {\r\n            return false; \r\n        }\r\n    }\r\n    \r\n    function lockEnded() constant private returns (bool ended) {\r\n        if (block.number.sub(lockBegunAtBlock) > OWNERS_LOCK) {\r\n            return true; \r\n        } else {\r\n            return false;\r\n        }\r\n        \r\n    }\r\n    \r\n    /* public onlyOwner */\r\n    \r\n    function distributeBounty() public onlyOwner {\r\n        require(!bountyDistributed);\r\n        require(crowdsaleEnded());\r\n        \r\n        bountyDistributed = true;\r\n        bountyWallet.transfer(BOUNTY);\r\n        lockBegunAtBlock = block.number;\r\n        BountyDistributed();\r\n    }\r\n    \r\n    function distributeOwnership() public onlyOwner {\r\n        require(!ownershipDistributed);\r\n        require(crowdsaleEnded());\r\n        require(lockEnded());\r\n        \r\n        ownershipDistributed = true;\r\n        ownersWallet.transfer(OWNERS_STAKE);\r\n        \r\n        OwnershipDistributed();\r\n    }\r\n    \r\n    function changeOwnersWallet(address _newWallet) public onlyOwner {\r\n        require(_newWallet != 0x0);\r\n        ownersWallet = _newWallet;\r\n    }\r\n    \r\n    function changeBountyWallet(address _newWallet) public onlyOwner {\r\n        require(_newWallet != 0x0);\r\n        bountyWallet = _newWallet;\r\n    }\r\n    \r\n    function changeFundOwner(address _newOwner) {\r\n        require(_newOwner != 0x0);\r\n        fund.transferOwnership(_newOwner);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"distributeOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockBegunAtBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownersWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokenFor\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeFundOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newWallet\",\"type\":\"address\"}],\"name\":\"changeBountyWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newWallet\",\"type\":\"address\"}],\"name\":\"changeOwnersWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fund\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownershipDistributed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"distributeBounty\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bountyWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bountyDistributed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"OwnershipDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"BountyDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"}]","ContractName":"SlotCrowdsale","CompilerVersion":"v0.4.17+commit.bdeb9e52","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://b623835690c3016c6fe0cac6b06041332e7447fd2c99467f22b996160fb69aca"}]}