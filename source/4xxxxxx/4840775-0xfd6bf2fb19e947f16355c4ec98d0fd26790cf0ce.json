{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n// File: contracts/zeppelin-solidity/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: contracts/zeppelin-solidity/token/ERC20Basic.sol\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public constant returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// File: contracts/zeppelin-solidity/token/BasicToken.sol\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/zeppelin-solidity/token/ERC20.sol\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/zeppelin-solidity/token/StandardToken.sol\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n\r\n    uint256 _allowance = allowed[_from][msg.sender];\r\n\r\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n    // require (_value <= _allowance);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   */\r\n  function increaseApproval (address _spender, uint _addedValue) public\r\n    returns (bool success) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  function decreaseApproval (address _spender, uint _subtractedValue) public\r\n    returns (bool success) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/zeppelin-solidity/token/BurnableToken.sol\r\n\r\n/**\r\n * @title Burnable Token\r\n * @dev Token that can be irreversibly burned (destroyed).\r\n */\r\ncontract BurnableToken is StandardToken {\r\n\r\n    event Burn(address indexed burner, uint256 value);\r\n\r\n    /**\r\n     * @dev Burns a specific amount of tokens.\r\n     * @param _value The amount of token to be burned.\r\n     */\r\n    function burn(uint256 _value) public {\r\n        require(_value > 0);\r\n\r\n        address burner = msg.sender;\r\n        balances[burner] = balances[burner].sub(_value);\r\n        totalSupply = totalSupply.sub(_value);\r\n        Burn(burner, _value);\r\n    }\r\n}\r\n\r\n// File: contracts/zeppelin-solidity/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/zeppelin-solidity/token/MintableToken.sol\r\n\r\n/**\r\n * @title Mintable token\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\r\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n */\r\n\r\ncontract MintableToken is StandardToken, Ownable {\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n  mapping (address => bool) internal userAddr;\r\n\r\n  /**\r\n  *\r\n  * Add adresses that can run an airdrop \r\n  *\r\n  */\r\n  function whitelistAddressArray (address[] users) onlyOwner public {\r\n      for (uint i = 0; i < users.length; i++) {\r\n          userAddr[users[i]] = true;\r\n      }\r\n  }\r\n\r\n  /**\r\n  *\r\n  * only whitelisted address can airdrop  \r\n  *\r\n  */\r\n\r\n  modifier canAirDrop() {\r\n    require(userAddr[msg.sender]);\r\n    _;\r\n  }\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   *\r\n   */\r\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\r\n    totalSupply = totalSupply.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n\r\n    Mint(_to, _amount);\r\n    Transfer(0x0, _to, _amount);\r\n    return true;\r\n  }\r\n  /**\r\n  *\r\n  * Run air drop, only from whitelisted adresses ( can run multiple pending transactions at a time )\r\n  * the granularity is 50 adresses at a time for the same amount, saving a good amount of gaz \r\n  *\r\n  */\r\n\r\n  function airdrop(address[] _to, uint256[] _amountList, uint8 loop) canAirDrop canMint public {\r\n      address adr;\r\n      uint256 _amount;\r\n      uint8 linc = 0;\r\n      for( uint i = 0; i < loop*50; i=i+50 ) {\r\n          adr = _to[i];\r\n          _amount = _amountList[linc++];\r\n          totalSupply = totalSupply.add(_amount*50);\r\n\r\n          balances[adr] = balances[adr].add(_amount);\r\n          Transfer(0x0, adr, _amount);\r\n          adr = _to[i+1];\r\n          balances[adr] = balances[adr].add(_amount);\r\n          Transfer(0x0, adr, _amount);\r\n          adr = _to[i+2];\r\n          balances[adr] = balances[adr].add(_amount);\r\n          Transfer(0x0, adr, _amount);\r\n          adr = _to[i+3];\r\n          balances[adr] = balances[adr].add(_amount);\r\n          Transfer(0x0, adr, _amount);\r\n          adr = _to[i+4];\r\n          balances[adr] = balances[adr].add(_amount);\r\n          Transfer(0x0, adr, _amount);\r\n          adr = _to[i+5];\r\n          balances[adr] = balances[adr].add(_amount);\r\n          Transfer(0x0, adr, _amount);\r\n          adr = _to[i+6];\r\n          balances[adr] = balances[adr].add(_amount);\r\n          Transfer(0x0, adr, _amount);\r\n          adr = _to[i+7];\r\n          balances[adr] = balances[adr].add(_amount);\r\n          Transfer(0x0, adr, _amount);\r\n          adr = _to[i+8];\r\n          balances[adr] = balances[adr].add(_amount);\r\n          Transfer(0x0, adr, _amount);\r\n          adr = _to[i+9];\r\n          balances[adr] = balances[adr].add(_amount);\r\n          Transfer(0x0, adr, _amount);\r\n          adr = _to[i+10];\r\n          balances[adr] = balances[adr].add(_amount);\r\n          Transfer(0x0, adr, _amount);\r\n          adr = _to[i+11];\r\n          balances[adr] = balances[adr].add(_amount);\r\n          Transfer(0x0, adr, _amount);\r\n          adr = _to[i+12];\r\n          balances[adr] = balances[adr].add(_amount);\r\n          Transfer(0x0, adr, _amount);\r\n          adr = _to[i+13];\r\n          balances[adr] = balances[adr].add(_amount);\r\n          Transfer(0x0, adr, _amount);\r\n          adr = _to[i+14];\r\n          balances[adr] = balances[adr].add(_amount);\r\n          Transfer(0x0, adr, _amount);\r\n          adr = _to[i+15];\r\n          balances[adr] = balances[adr].add(_amount);\r\n          Transfer(0x0, adr, _amount);\r\n          adr = _to[i+16];\r\n          balances[adr] = balances[adr].add(_amount);\r\n          Transfer(0x0, adr, _amount);\r\n          adr = _to[i+17];\r\n          balances[adr] = balances[adr].add(_amount);\r\n          Transfer(0x0, adr, _amount);\r\n          adr = _to[i+18];\r\n          balances[adr] = balances[adr].add(_amount);\r\n          Transfer(0x0, adr, _amount);\r\n          adr = _to[i+19];\r\n          balances[adr] = balances[adr].add(_amount);\r\n          Transfer(0x0, adr, _amount);\r\n          adr = _to[i+20];\r\n          balances[adr] = balances[adr].add(_amount);\r\n          Transfer(0x0, adr, _amount);\r\n          adr = _to[i+21];\r\n          balances[adr] = balances[adr].add(_amount);\r\n          Transfer(0x0, adr, _amount);\r\n          adr = _to[i+22];\r\n          balances[adr] = balances[adr].add(_amount);\r\n          Transfer(0x0, adr, _amount);\r\n          adr = _to[i+23];\r\n          balances[adr] = balances[adr].add(_amount);\r\n          Transfer(0x0, adr, _amount);\r\n          adr = _to[i+24];\r\n          balances[adr] = balances[adr].add(_amount);\r\n          Transfer(0x0, adr, _amount);\r\n          adr = _to[i+25];\r\n          balances[adr] = balances[adr].add(_amount);\r\n          Transfer(0x0, adr, _amount);\r\n          adr = _to[i+26];\r\n          balances[adr] = balances[adr].add(_amount);\r\n          Transfer(0x0, adr, _amount);\r\n          adr = _to[i+27];\r\n          balances[adr] = balances[adr].add(_amount);\r\n          Transfer(0x0, adr, _amount);\r\n          adr = _to[i+28];\r\n          balances[adr] = balances[adr].add(_amount);\r\n          Transfer(0x0, adr, _amount);\r\n          adr = _to[i+29];\r\n          balances[adr] = balances[adr].add(_amount);\r\n          Transfer(0x0, adr, _amount);\r\n          adr = _to[i+30];\r\n          balances[adr] = balances[adr].add(_amount);\r\n          Transfer(0x0, adr, _amount);\r\n          adr = _to[i+31];\r\n          balances[adr] = balances[adr].add(_amount);\r\n          Transfer(0x0, adr, _amount);\r\n          adr = _to[i+32];\r\n          balances[adr] = balances[adr].add(_amount);\r\n          Transfer(0x0, adr, _amount);\r\n          adr = _to[i+33];\r\n          balances[adr] = balances[adr].add(_amount);\r\n          Transfer(0x0, adr, _amount);\r\n          adr = _to[i+34];\r\n          balances[adr] = balances[adr].add(_amount);\r\n          Transfer(0x0, adr, _amount);\r\n          adr = _to[i+35];\r\n          balances[adr] = balances[adr].add(_amount);\r\n          Transfer(0x0, adr, _amount);\r\n          adr = _to[i+36];\r\n          balances[adr] = balances[adr].add(_amount);\r\n          Transfer(0x0, adr, _amount);\r\n          adr = _to[i+37];\r\n          balances[adr] = balances[adr].add(_amount);\r\n          Transfer(0x0, adr, _amount);\r\n          adr = _to[i+38];\r\n          balances[adr] = balances[adr].add(_amount);\r\n          Transfer(0x0, adr, _amount);\r\n          adr = _to[i+39];\r\n          balances[adr] = balances[adr].add(_amount);\r\n          Transfer(0x0, adr, _amount);\r\n          adr = _to[i+40];\r\n          balances[adr] = balances[adr].add(_amount);\r\n          Transfer(0x0, adr, _amount);\r\n          adr = _to[i+41];\r\n          balances[adr] = balances[adr].add(_amount);\r\n          Transfer(0x0, adr, _amount);\r\n          adr = _to[i+42];\r\n          balances[adr] = balances[adr].add(_amount);\r\n          Transfer(0x0, adr, _amount);\r\n          adr = _to[i+43];\r\n          balances[adr] = balances[adr].add(_amount);\r\n          Transfer(0x0, adr, _amount);\r\n          adr = _to[i+44];\r\n          balances[adr] = balances[adr].add(_amount);\r\n          Transfer(0x0, adr, _amount);\r\n          adr = _to[i+45];\r\n          balances[adr] = balances[adr].add(_amount);\r\n          Transfer(0x0, adr, _amount);\r\n          adr = _to[i+46];\r\n          balances[adr] = balances[adr].add(_amount);\r\n          Transfer(0x0, adr, _amount);\r\n          adr = _to[i+47];\r\n          balances[adr] = balances[adr].add(_amount);\r\n          Transfer(0x0, adr, _amount);\r\n          adr = _to[i+48];\r\n          balances[adr] = balances[adr].add(_amount);\r\n          Transfer(0x0, adr, _amount);\r\n          adr = _to[i+49];\r\n          balances[adr] = balances[adr].add(_amount);\r\n          Transfer(0x0, adr, _amount);\r\n      }\r\n    }\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() onlyOwner public returns (bool) {\r\n    mintingFinished = true;\r\n    MintFinished();\r\n    return true;\r\n  }\r\n}\r\n\r\n// File: contracts/kdoTokenIcoListMe.sol\r\n\r\ncontract kdoTokenIcoListMe is MintableToken,BurnableToken {\r\n    string public constant name = \"A ? from ico-list.me/kdo\";\r\n    string public constant symbol = \"KDO ?\";\r\n    uint8 public decimals = 3;\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"users\",\"type\":\"address[]\"}],\"name\":\"whitelistAddressArray\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address[]\"},{\"name\":\"_amountList\",\"type\":\"uint256[]\"},{\"name\":\"loop\",\"type\":\"uint8\"}],\"name\":\"airdrop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"kdoTokenIcoListMe","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://e8526afbbf713da29629f6b9664416a0989372bc4261db45d72b0d8016685021"}]}