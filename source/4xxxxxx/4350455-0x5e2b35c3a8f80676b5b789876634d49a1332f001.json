{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\n\r\ncontract Owner {\r\n    address public owner;\r\n\r\n    function Owner() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier  onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function  transferOwnership(address newOwner) onlyOwner {\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\ncontract TokenRecipient { \r\n    function receiveApproval(\r\n        address _from, \r\n        uint256 _value, \r\n        address _token, \r\n        bytes _extraData); \r\n}\r\n\r\n\r\ncontract Token {\r\n    string public standard = \"Token 0.1\";\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals;\r\n    uint256 public totalSupply;\r\n\r\n    mapping (address => uint256) public balanceOf;\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n    function Token (\r\n        uint256 initialSupply,\r\n        string tokenName,\r\n        uint8 decimalUnits,\r\n        string tokenSymbol\r\n    ) {\r\n        balanceOf[msg.sender] = initialSupply;              // Give the creator all initial tokens\r\n        totalSupply = initialSupply;                        // Update total supply\r\n        name = tokenName;                                   // Set the name for display purposes\r\n        symbol = tokenSymbol;                               // Set the symbol for display purposes\r\n        decimals = decimalUnits;                            // Amount of decimals for display purposes\r\n    }\r\n    \r\n    function transfer(address _to, uint256 _value) returns (bool success) {\r\n        if (balanceOf[msg.sender] < _value) {\r\n            revert();           // Check if the sender has enough\r\n        }\r\n        if (balanceOf[_to] + _value < balanceOf[_to]) {\r\n            revert(); // Check for overflows\r\n        }\r\n\r\n        balanceOf[msg.sender] -= _value;\r\n        balanceOf[_to] += _value;\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n    \r\n    function approve(address _spender, uint256 _value) returns (bool success) {\r\n        require(balanceOf[msg.sender] >= _value);\r\n\r\n        allowance[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\r\n    returns (bool success) \r\n    {    \r\n        TokenRecipient spender = TokenRecipient(_spender);\r\n        if (approve(_spender, _value)) {\r\n            spender.receiveApproval(\r\n                msg.sender,\r\n                _value,\r\n                this,\r\n                _extraData\r\n            );\r\n            return true;\r\n        }\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\r\n        if (balanceOf[_from] < _value) {\r\n            revert();                                        // Check if the sender has enough\r\n        }                 \r\n        if (balanceOf[_to] + _value < balanceOf[_to]) {\r\n            revert();  // Check for overflows\r\n        }\r\n        if (_value > allowance[_from][msg.sender]) {\r\n            revert();   // Check allowance\r\n        }\r\n\r\n        balanceOf[_from] -= _value;\r\n        balanceOf[_to] += _value;\r\n        allowance[_from][msg.sender] -= _value;\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n}\r\n\r\n\r\n//Business Service Token\r\ncontract ContentAdNetworkToken is Token, Owner {\r\n    uint256 public constant INITIAL_SUPPLY = 10 * 10000 * 10000 * 1 ether; // 1e9 * 1e18\r\n    string public constant NAME = \"Content and Ad Network\"; //名称\r\n    string public constant SYMBOL = \"CAN\"; // 简称\r\n    // string public constant STANDARD = \"Token 1.0\";\r\n    uint8 public constant DECIMALS = 18;\r\n    uint256 public constant BUY = 0; // 用于自动买卖\r\n    uint256 constant RATE = 1 szabo;\r\n    bool private couldTrade = false;\r\n\r\n    // string public standard = STANDARD;\r\n    // string public name;\r\n    // string public symbol;\r\n    // uint public decimals;\r\n\r\n    uint256 public sellPrice;\r\n    uint256 public buyPrice;\r\n    uint minBalanceForAccounts;\r\n\r\n    mapping (address => uint256) public balanceOf;\r\n    mapping (address => bool) frozenAccount;\r\n\r\n    event FrozenFunds(address indexed _target, bool _frozen);\r\n\r\n    function ContentAdNetworkToken() Token(INITIAL_SUPPLY, NAME, DECIMALS, SYMBOL) {\r\n        balanceOf[msg.sender] = totalSupply;\r\n        buyPrice = 100000000;\r\n        sellPrice = 100000000;\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) returns (bool success) {\r\n        if (balanceOf[msg.sender] < _value) {\r\n            revert();           // Check if the sender has enough\r\n        }\r\n        if (balanceOf[_to] + _value < balanceOf[_to]) {\r\n            revert(); // Check for overflows\r\n        }\r\n        if (frozenAccount[msg.sender]) {\r\n            revert();                // Check if frozen\r\n        }\r\n\r\n        balanceOf[msg.sender] -= _value;\r\n        balanceOf[_to] += _value;\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\r\n        if (frozenAccount[_from]) {\r\n            revert();                        // Check if frozen       \r\n        }     \r\n        if (balanceOf[_from] < _value) {\r\n            revert();                 // Check if the sender has enough\r\n        }\r\n        if (balanceOf[_to] + _value < balanceOf[_to]) {\r\n            revert();  // Check for overflows\r\n        }\r\n        if (_value > allowance[_from][msg.sender]) {\r\n            revert();   // Check allowance\r\n        }\r\n\r\n        balanceOf[_from] -= _value;\r\n        balanceOf[_to] += _value;\r\n        allowance[_from][msg.sender] -= _value;\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function freezeAccount(address _target, bool freeze) onlyOwner {\r\n        frozenAccount[_target] = freeze;\r\n        FrozenFunds(_target, freeze);\r\n    }\r\n\r\n    function setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner {\r\n        sellPrice = newSellPrice;\r\n        buyPrice = newBuyPrice;\r\n    }\r\n\r\n    function buy() payable returns (uint amount) {\r\n        require(couldTrade);\r\n        amount = msg.value * RATE / buyPrice;\r\n        require(balanceOf[this] >= amount);\r\n        require(balanceOf[msg.sender] + amount >= amount);\r\n        balanceOf[this] -= amount;\r\n        balanceOf[msg.sender] += amount;\r\n        Transfer(this, msg.sender, amount);\r\n        return amount;\r\n    }\r\n\r\n    function sell(uint256 amountInWeiDecimalIs18) returns (uint256 revenue) {\r\n        require(couldTrade);\r\n        uint256 amount = amountInWeiDecimalIs18;\r\n        require(balanceOf[msg.sender] >= amount);\r\n        require(!frozenAccount[msg.sender]);\r\n\r\n        revenue = amount * sellPrice / RATE;\r\n        balanceOf[this] += amount;\r\n        balanceOf[msg.sender] -= amount;\r\n        require(msg.sender.send(revenue));\r\n        Transfer(msg.sender, this, amount);\r\n        return revenue;\r\n    }\r\n\r\n    function withdraw(uint256 amount) onlyOwner returns (bool success) {\r\n        require(msg.sender.send(amount));\r\n        return true;\r\n    }\r\n\r\n    function setCouldTrade(uint256 amountInWeiDecimalIs18) onlyOwner returns (bool success) {\r\n        couldTrade = true;\r\n        require(balanceOf[msg.sender] >= amountInWeiDecimalIs18);\r\n        require(balanceOf[this] + amountInWeiDecimalIs18 >= amountInWeiDecimalIs18);\r\n        balanceOf[msg.sender] -= amountInWeiDecimalIs18;\r\n        balanceOf[this] += amountInWeiDecimalIs18;\r\n        Transfer(msg.sender, this, amountInWeiDecimalIs18);\r\n        return true;\r\n    }\r\n\r\n    function stopTrade() onlyOwner returns (bool success) {\r\n        couldTrade = false;\r\n        uint256 _remain = balanceOf[this];\r\n        require(balanceOf[msg.sender] + _remain >= _remain);\r\n        balanceOf[msg.sender] += _remain;\r\n        balanceOf[this] -= _remain;\r\n        Transfer(this, msg.sender, _remain);\r\n        return true;\r\n    }\r\n\r\n    function () {\r\n        revert();\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"BUY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newSellPrice\",\"type\":\"uint256\"},{\"name\":\"newBuyPrice\",\"type\":\"uint256\"}],\"name\":\"setPrices\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DECIMALS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INITIAL_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"standard\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amountInWeiDecimalIs18\",\"type\":\"uint256\"}],\"name\":\"setCouldTrade\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stopTrade\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buy\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amountInWeiDecimalIs18\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[{\"name\":\"revenue\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"},{\"name\":\"freeze\",\"type\":\"bool\"}],\"name\":\"freezeAccount\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SYMBOL\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":false,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_frozen\",\"type\":\"bool\"}],\"name\":\"FrozenFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"ContentAdNetworkToken","CompilerVersion":"v0.4.15+commit.bbb8e64f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://eb97f44fbfc3f59c2850a0bab691491568ae55d7d21b567ed5a92ff30ed666e5"}]}