{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\ncontract BLO{\r\n    using SafeMath for uint256;\r\n\r\n    uint256 constant MAX_UINT256 = 2**256 - 1;\r\n    uint256 _initialAmount = 0;\r\n    address  public contract_owner;\r\n    uint256 public exchangeRate = 7000;                    // exchangeRate for public sale, token per ETH\r\n    bool public icoOpen = false;                           // whether ICO is open and accept public investment\r\n\r\n    uint256 public publicToken = 110000000;                // 45% of total, for public sale\r\n    uint256 public bountyToken = 12070000;                 // bounty use\r\n    uint256 public airdropToken = 50430000 + 2500000;      // 20% + 1% of total, airdrop use including bonus\r\n    uint256 public reserveMember = 6450000;                // Reserve for new members and future M&D\r\n    uint256 public reservedFounder = 12000000;             // Future Founder & Advisor\r\n\r\n    mapping (address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n\r\n    // lock struct for member\r\n    struct lock {\r\n        uint256 amount;\r\n        uint256 duration;    \r\n    }    \r\n    // lock struct for founder\r\n    struct founderLock {\r\n        uint256 amount;\r\n        uint256 startTime;\r\n        uint remainRound;\r\n        uint totalRound;\r\n        uint256 period;\r\n    }\r\n    \r\n    mapping (address => lock) public lockance;\r\n    mapping (address => founderLock) public founderLockance;\r\n    \r\n\r\n    \r\n    // uint256 totalSupply;\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value); \r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n    event Unlock(address _sender, uint256 _amount);\r\n    event FounderUnlock(address _sender, uint256 _amount);\r\n    \r\n    \r\n    \r\n    \r\n    /*\r\n    NOTE:\r\n    The following variables are OPTIONAL vanities. One does not have to include them.\r\n    */\r\n    string public name = \"PABLOCoin\";                   //fancy name: eg Simon Bucks\r\n    uint8 public decimals = 0;                //How many decimals to show.\r\n    string public symbol = \"BLO\";                 //An identifier: eg SBX\r\n\r\n    /**\r\n      * @dev Fix for the ERC20 short address attack.\r\n      */\r\n      modifier onlyPayloadSize(uint size) {\r\n          require(msg.data.length >= size + 4);\r\n          _;\r\n      }\r\n      modifier  onlyOwner() { \r\n          require(msg.sender == contract_owner); \r\n          _; \r\n      }\r\n      modifier inIco() { \r\n          require(icoOpen==true); \r\n          _; \r\n      }\r\n      \r\n      \r\n\r\n    function BLO() public {\r\n        // set sender as contract_owner\r\n        contract_owner = msg.sender;\r\n\r\n        // token distribution, 56550000 in this part\r\n        address Wayne = 0x1A33cDA3cF3d9b7318B105171115F799ac3e986D;\r\n        address Sophie = 0xd4AFd732Da602Fc44e99B4c3285B46D9369F2Beb;\r\n        address Calvin = 0xa34cB9F691B939b7C137CaC3C11907c9bE5F7Ae9;\r\n        address Marsh = 0x042bD518576C7fEDF26870D7C65f9ff2597c9935;\r\n        address Chris = 0x050992436F5048F5C5B48Db0e8593DE48521b35A;\r\n        address Josh = 0x11ae09350b18ea810bc7fd6892612a63c641d641;\r\n        address LM = 0x8Dd1cDD513b05D07726a6F8C75b57602991a9c34;\r\n        address TJ = 0xdd36FBf1C0A63759892FeAE493f4AaB9dc23cE54;\r\n        address Chuck1 = 0xb5d93E0cE63E7B7cE8fD5A89e8a7E217721Ad5Fa;\r\n        address Chuck2 = 0xE76c0618Dd52403ad1907D3BCbF930226bFEa46B;\r\n        address Tom1 = 0x52103e8bbDfcFB49d978CE8F4a0b862e0F14dC7E;\r\n        address Tom2 = 0xeF2f04dbd3E3aD126979646383c94Fd29E29de9F;\r\n\r\n        balances[msg.sender] += 1000000/2;\r\n        transfer(Wayne, 1000000/2);\r\n        setLock(Wayne, 1000000/2, 60 days);\r\n        _initialAmount += 1000000;\r\n\r\n        balances[msg.sender] += 1000000/2;\r\n        transfer(Sophie, 1000000/2);\r\n        setLock(Sophie, 1000000/2, 60 days);\r\n        _initialAmount += 1000000;\r\n\r\n        balances[msg.sender] += 1000000/2;\r\n        transfer(Calvin, 1000000/2);\r\n        setLock(Calvin, 1000000/2, 60 days);\r\n        _initialAmount += 1000000;\r\n\r\n        balances[msg.sender] += 2600000/2;\r\n        transfer(Marsh, 2600000/2);\r\n        setLock(Marsh, 2600000/2, 60 days);\r\n        _initialAmount += 2600000;\r\n\r\n        balances[msg.sender] += 50000/2;\r\n        transfer(Chris, 50000/2);\r\n        setLock(Chris, 50000/2, 60 days);\r\n        _initialAmount += 50000;\r\n\r\n        balances[msg.sender] += 1000000/2;\r\n        transfer(Josh, 1000000/2);\r\n        setLock(Josh, 1000000/2, 60 days);\r\n        _initialAmount += 1000000;\r\n\r\n        balances[msg.sender] += 5100000/2;\r\n        transfer(LM, 5100000/2);\r\n        setLock(LM, 5100000/2, 60 days);\r\n        _initialAmount += 5100000;\r\n\r\n        balances[msg.sender] += 1800000/2;\r\n        transfer(TJ, 1800000/2);\r\n        setLock(TJ, 1800000/2, 60 days);\r\n        _initialAmount += 1800000;\r\n\r\n        balances[msg.sender] += 9000000;\r\n        transfer(Chuck1, 9000000);\r\n        setFounderLock(Chuck2, 12500000, 6, 180 days);\r\n        _initialAmount += 12500000 + 9000000;\r\n\r\n        balances[msg.sender] += 9000000;\r\n        transfer(Tom1, 9000000);\r\n        setFounderLock(Tom2, 12500000, 6, 180 days);\r\n        _initialAmount += 12500000 + 9000000;\r\n    }\r\n    function totalSupply() constant returns (uint256 _totalSupply){\r\n        _totalSupply = _initialAmount;\r\n      }\r\n    function transfer(address _to, uint256 _value) public returns (bool success) {\r\n        //Default assumes totalSupply can't be over max (2^256 - 1).\r\n        //If your token leaves out totalSupply and can issue more tokens as time goes on, you need to check if it doesn't wrap.\r\n        //Replace the if with this one instead.\r\n        //require(balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]);\r\n        require(balances[msg.sender] >= _value);\r\n        balances[msg.sender] -= _value;\r\n        balances[_to] += _value;\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n        }\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        //same as above. Replace this line with the following if you want to protect against wrapping uints.\r\n        //require(balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]);\r\n        uint256 allowance = allowed[_from][msg.sender];\r\n        require(balances[_from] >= _value && allowance >= _value);\r\n        balances[_to] += _value;\r\n        balances[_from] -= _value;\r\n        if (allowance < MAX_UINT256) {\r\n            allowed[_from][msg.sender] -= _value;\r\n        }\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n        }\r\n\r\n    function balanceOf(address _owner) view public returns (uint256 balance) {\r\n        return balances[_owner];\r\n        }\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n        }\r\n\r\n    function allowance(address _owner, address _spender)\r\n    view public returns (uint256 remaining) {\r\n      return allowed[_owner][_spender];\r\n        }\r\n\r\n    function multisend(address[] addrs,  uint256 _value)\r\n    {\r\n        uint length = addrs.length;\r\n        require(_value * length <= balances[msg.sender]);\r\n        uint i = 0;\r\n        while (i < length) {\r\n           transfer(addrs[i], _value);\r\n           i ++;\r\n        }\r\n        \r\n      }\r\n    function multAirdrop(address[] addrs,  uint256 _value) onlyOwner\r\n    {\r\n        uint length = addrs.length;\r\n        uint256 totalToken = _value * length;\r\n        require(totalToken <= airdropToken);\r\n        balances[contract_owner] += totalToken;\r\n        uint i = 0;\r\n        while (i < length) {\r\n           transfer(addrs[i], _value);\r\n           i ++;\r\n        }\r\n        _initialAmount += totalToken;\r\n        airdropToken -= totalToken;\r\n        \r\n      }\r\n    // lock token in specified address for some time\r\n    // _address: locked address\r\n    // _value: locked token\r\n    // _time: when it could be unlocked\r\n    function setLock(address _address, uint256 _value, uint256 _time) internal onlyOwner {\r\n        lockance[_address].amount = _value;\r\n        lockance[_address].duration = now + _time;\r\n      }\r\n    \r\n    // lock token of founder for periodically release\r\n    // _address: founder address; \r\n    // _value: totoal locked token; \r\n    // _round: rounds founder could withdraw; \r\n    // _period: interval time between two rounds\r\n    function setFounderLock(address _address, uint256 _value, uint _round, uint256 _period)  internal onlyOwner{\r\n        founderLockance[_address].amount = _value.div(_round);\r\n        founderLockance[_address].startTime = now;\r\n        founderLockance[_address].remainRound = _round;\r\n        founderLockance[_address].totalRound = _round;\r\n        founderLockance[_address].period = _period;\r\n    }\r\n    \r\n    // allow locked token to be obtained for member\r\n    function unlock () {\r\n        require(now >= lockance[msg.sender].duration);\r\n        uint256 _amount = lockance[msg.sender].amount;\r\n        balances[msg.sender] += lockance[msg.sender].amount;\r\n        lockance[msg.sender].amount = 0;\r\n        Unlock(msg.sender, _amount);\r\n    }\r\n    // allow locked token to be obtained for founder \r\n    function unlockFounder (uint _round) {\r\n        require(now >= founderLockance[msg.sender].startTime + _round * founderLockance[msg.sender].period);\r\n        require(founderLockance[msg.sender].remainRound > 0);\r\n        require(founderLockance[msg.sender].totalRound - founderLockance[msg.sender].remainRound < _round);\r\n        uint256 _amount = founderLockance[msg.sender].amount;\r\n        balances[msg.sender] += _amount;\r\n        founderLockance[msg.sender].remainRound --;\r\n        FounderUnlock(msg.sender, _amount);\r\n    }\r\n    \r\n    // starts ICO\r\n    function openIco () onlyOwner{\r\n        icoOpen = true;\r\n      }\r\n    // ends ICO \r\n    function closeIco () onlyOwner inIco{\r\n        icoOpen = false;\r\n      }\r\n\r\n    // transfer all unsold token to bounty balance;\r\n    function weAreClosed () onlyOwner{\r\n        bountyToken += publicToken;\r\n        publicToken = 0;\r\n    }\r\n    // change rate of public sale\r\n    function changeRate (uint256 _rate) onlyOwner{\r\n        require(_rate >= 5000 && _rate <= 8000);    //in case of mistypo :)\r\n        exchangeRate = _rate;\r\n    }\r\n    \r\n    \r\n    // add a new member and give him/her some token\r\n    function addMember (address _member, uint256 _value) onlyOwner{\r\n        require(_value <= reserveMember);\r\n        reserveMember -= _value;\r\n        balances[contract_owner] += _value;\r\n        transfer(_member, _value);\r\n        _initialAmount += _value;\r\n    }\r\n    // add a new founder/advisor and give him/her some token\r\n    function addFounder (address _founder, uint256 _value) onlyOwner{\r\n        require(_value <= reservedFounder);\r\n        reservedFounder -= _value;\r\n        balances[contract_owner] += _value;\r\n        transfer(_founder, _value);\r\n        _initialAmount += _value;\r\n    }\r\n    // obtain bounty token \r\n    function obtainBounty (address _receiver, uint256 _value) onlyOwner{\r\n        require(_value <= bountyToken);\r\n        balances[_receiver] += _value;\r\n        _initialAmount += _value;\r\n        bountyToken -= _value;\r\n    }\r\n    \r\n    \r\n    //  withdraw ETH from contract\r\n    function withdraw() onlyOwner{\r\n        contract_owner.transfer(this.balance);\r\n      }\r\n    // fallback function for receive ETH during ICO\r\n    function () payable inIco{\r\n        uint256 tokenChange = (msg.value * exchangeRate).div(10**18);\r\n        require(tokenChange <= publicToken);\r\n        balances[msg.sender] += tokenChange;\r\n        _initialAmount += tokenChange;\r\n        publicToken = publicToken.sub(tokenChange);\r\n      }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockance\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"duration\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reservedFounder\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"_totalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"founderLockance\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"startTime\",\"type\":\"uint256\"},{\"name\":\"remainRound\",\"type\":\"uint256\"},{\"name\":\"totalRound\",\"type\":\"uint256\"},{\"name\":\"period\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bountyToken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addrs\",\"type\":\"address[]\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"multisend\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reserveMember\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contract_owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"exchangeRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"closeIco\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"airdropToken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"publicToken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"changeRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"openIco\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_founder\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"addFounder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoOpen\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"weAreClosed\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_member\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"addMember\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unlock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_round\",\"type\":\"uint256\"}],\"name\":\"unlockFounder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addrs\",\"type\":\"address[]\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"multAirdrop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_receiver\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"obtainBounty\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Unlock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"FounderUnlock\",\"type\":\"event\"}]","ContractName":"BLO","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://29db6166b5b59e9f45a05f927608ff8dc1ccda69456ff06fcc750bd76be69f4d"}]}