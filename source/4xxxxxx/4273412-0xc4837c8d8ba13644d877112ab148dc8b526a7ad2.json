{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract ERC20Constant {\r\n    function balanceOf( address who ) constant returns (uint value);\r\n}\r\ncontract ERC20Stateful {\r\n    function transfer( address to, uint value) returns (bool ok);\r\n}\r\ncontract ERC20Events {\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n}\r\ncontract ERC20 is ERC20Constant, ERC20Stateful, ERC20Events {}\r\n\r\ncontract Owned {\r\n    address public owner;\r\n\r\n    function Owned() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) onlyOwner {\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract WhitelistSale is Owned {\r\n\r\n    ERC20 public manaToken;\r\n\r\n    // Amount of MANA received per ETH\r\n    uint256 public manaPerEth;\r\n\r\n    // Sales start at this timestamp\r\n    uint256 public initialTimestamp;\r\n\r\n    // The sale goes on through 6 days. Each day, users are allowed to buy up to a certain amount of MANA.\r\n\r\n    // This mapping stores the addresses for whitelisted users\r\n    mapping(address => bool) public whitelisted;\r\n\r\n    // Used to calculate the current limit\r\n    mapping(address => uint256) public bought;\r\n\r\n    // The initial values allowed per day are copied from this array\r\n    uint256[6] public limitPerDay;\r\n\r\n    // Forwarding address\r\n    address public receiver;\r\n\r\n    // The sale does not continue if this flag is set to true -- in case of emergency \r\n    bool public handbreak;\r\n\r\n    event LogWithdrawal(uint256 _value);\r\n    event LogBought(uint orderInMana);\r\n    event LogUserAdded(address user);\r\n    event LogUserRemoved(address user);\r\n    event LogUpdatedLimitPerDay(uint8 _day, uint256 amount);\r\n    event LogUpdatedInitialTimestamp(uint256 _initialTimestamp);\r\n\r\n    function WhitelistSale (\r\n        ERC20 _manaToken,\r\n        uint256 _initialTimestamp,\r\n        address _receiver\r\n    )\r\n        Owned()\r\n    {\r\n        manaToken        = _manaToken;\r\n        initialTimestamp = _initialTimestamp;\r\n        receiver         = _receiver;\r\n\r\n        manaPerEth       = 11954;\r\n        limitPerDay[0]   = 3.3 ether;\r\n        limitPerDay[1]   = 10 ether   + limitPerDay[0];\r\n        limitPerDay[2]   = 30 ether   + limitPerDay[1];\r\n        limitPerDay[3]   = 90 ether   + limitPerDay[2];\r\n        limitPerDay[4]   = 450 ether  + limitPerDay[3];\r\n        limitPerDay[5]   = 1500 ether + limitPerDay[4];\r\n\r\n        handbreak        = false;\r\n    }\r\n\r\n    // Pause the sale\r\n    function activateHandbreak() onlyOwner {\r\n        handbreak = true;\r\n    }\r\n\r\n    // Withdraw Mana (only owner)\r\n    function withdrawMana(uint256 _value) onlyOwner returns (bool ok) {\r\n        return withdrawToken(manaToken, _value);\r\n    }\r\n\r\n    // Withdraw any ERC20 token (just in case)\r\n    function withdrawToken(address _token, uint256 _value) onlyOwner returns (bool ok) {\r\n        return ERC20(_token).transfer(owner,_value);\r\n        LogWithdrawal(_value);\r\n    }\r\n\r\n    // Withdraw proceeds\r\n    function withdraw(uint256 _value) onlyOwner {\r\n        require(this.balance >= _value);\r\n        owner.transfer(_value);\r\n        LogWithdrawal(_value);\r\n    }\r\n\r\n    // Change address where funds are received\r\n    function changeReceiver(address _receiver) onlyOwner {\r\n        require(_receiver != 0);\r\n        receiver = _receiver;\r\n    }\r\n\r\n    // Calculate which day into the sale are we.\r\n    function getDay() public returns (uint256) {\r\n        return SafeMath.sub(block.timestamp, initialTimestamp) / 1 days;\r\n    }\r\n\r\n    modifier onlyIfActive {\r\n        require(!handbreak);\r\n        require(getDay() >= 0);\r\n        require(getDay() < 6);\r\n        _;\r\n    }\r\n\r\n    function buy(address beneficiary) payable onlyIfActive {\r\n        require(beneficiary != 0);\r\n        require(whitelisted[msg.sender]);\r\n\r\n        uint day = getDay();\r\n        uint256 allowedForSender = limitPerDay[day] - bought[msg.sender];\r\n\r\n        if (msg.value > allowedForSender) revert();\r\n\r\n        uint256 balanceInMana = manaToken.balanceOf(address(this));\r\n\r\n        uint orderInMana = msg.value * manaPerEth;\r\n        if (orderInMana > balanceInMana) revert();\r\n\r\n        bought[msg.sender] = SafeMath.add(bought[msg.sender], msg.value);\r\n        receiver.transfer(msg.value);\r\n        manaToken.transfer(beneficiary, orderInMana);\r\n\r\n        LogBought(orderInMana);\r\n    }\r\n\r\n    // Add a user to the whitelist\r\n    function addUser(address user) onlyOwner {\r\n        whitelisted[user] = true;\r\n        LogUserAdded(user);\r\n    }\r\n\r\n    // Remove an user from the whitelist\r\n    function removeUser(address user) onlyOwner {\r\n        whitelisted[user] = false;\r\n        LogUserRemoved(user);\r\n    }\r\n\r\n    // Batch add users\r\n    function addManyUsers(address[] users) onlyOwner {\r\n        require(users.length < 10000);\r\n        for (uint index = 0; index < users.length; index++) {\r\n             whitelisted[users[index]] = true;\r\n             LogUserAdded(users[index]);\r\n        }\r\n    }\r\n\r\n    function() payable {\r\n        buy(msg.sender);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"activateHandbreak\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getDay\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"handbreak\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"addUser\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"changeReceiver\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"bought\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"withdrawMana\",\"outputs\":[{\"name\":\"ok\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"manaToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"limitPerDay\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"removeUser\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[{\"name\":\"ok\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelisted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"manaPerEth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"users\",\"type\":\"address[]\"}],\"name\":\"addManyUsers\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"receiver\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_manaToken\",\"type\":\"address\"},{\"name\":\"_initialTimestamp\",\"type\":\"uint256\"},{\"name\":\"_receiver\",\"type\":\"address\"}],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"LogWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"orderInMana\",\"type\":\"uint256\"}],\"name\":\"LogBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"}],\"name\":\"LogUserAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"}],\"name\":\"LogUserRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_day\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogUpdatedLimitPerDay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_initialTimestamp\",\"type\":\"uint256\"}],\"name\":\"LogUpdatedInitialTimestamp\",\"type\":\"event\"}]","ContractName":"WhitelistSale","CompilerVersion":"v0.4.15+commit.bbb8e64f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000f5d2fb29fb7d3cfee444a200298f468908cc9420000000000000000000000000000000000000000000000000000000059bbced0000000000000000000000000fe95e04a628087fcdd5f278e61f148b47471af4a","Library":"","SwarmSource":"bzzr://7a60570a0f3e08ec148fe36a875c184f7195f8835768ee7402f76f8b2f2114fe"}]}