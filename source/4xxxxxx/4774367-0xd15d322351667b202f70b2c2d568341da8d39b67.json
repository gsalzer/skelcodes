{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {  //was constant\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n/************************************************************************************************\r\n * \r\n *************************************************************************************************/\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\ncontract ERC20 { \r\n    function transfer(address receiver, uint amount) public ;\r\n    function transferFrom(address sender, address receiver, uint amount) public returns(bool success); // do token.approve on the ICO contract\r\n    function balanceOf(address _owner) constant public returns (uint256 balance);\r\n}\r\n\r\n/************************************************************************************************\r\n * \r\n *************************************************************************************************/\r\n\r\ncontract ASTRICOSale is Ownable {\r\n  ERC20 public token;  // using the ASTRCoin token - will set an address\r\n\r\n  // start and end of the sale - 4 weeks\r\n  uint256 public startTime;\r\n  uint256 public endTime;\r\n\r\n  // where funds are collected \r\n\r\n  address public wallet;  // beneficiary\r\n  address public ownerAddress;  // deploy owner\r\n\r\n  // amount of raised money in wei\r\n  uint256 public weiRaised;\r\n  \r\n  uint8 internal decimals             = 4; // 4 decimal places should be enough in general\r\n  uint256 internal decimalsConversion = 10 ** uint256(decimals);\r\n  uint256 internal ALLOC_CROWDSALE    = 90000000 * decimalsConversion; // (10 ** uint256(decimals)); // 90 mill in ICO\r\n\r\n  // 90MIL      90000000\r\n  // 10MIL      10000000\r\n  // 90MIL 4DCP 900000000000\r\n\r\n  uint internal BASIC_RATE        = 631 * decimalsConversion; // based on the price of ether at 755 USD\r\n  uint public   PRICE_VARIABLE    = 0 * decimalsConversion;\r\n\r\n  //TIME LIMITS\r\n\r\n  uint256 public astrSold            = 0;\r\n\r\n  bool public halted;\r\n  bool public crowdsaleClosed;\r\n\r\n  // simple event to track purchases\r\n  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n\r\n  modifier isNotHalted() {     require(!halted);    _;  }\r\n  modifier afterDeadline() { if (now >= endTime) _; }\r\n\r\n\r\n  /**\r\n    * Constructor for ASTRICOSale\r\n    *\r\n    * 1513908673\r\n    *  Friday, December 22, 2017 10:11:13 AM GMT+08:00\r\n    *\r\n    * 1517414400\r\n    * Thursday, February 1, 2018 12:00:00 AM GMT+08:00\r\n    *\r\n    * 90000000000\r\n  */\r\n  // function ASTRCoinCrowdSale(address _token, uint256 _startTime, address _ethWallet) public  {\r\n    function ASTRICOSale() public  {\r\n\r\n    // require(_startTime >= now);\r\n    // require(_ethWallet != 0x0);   \r\n\r\n    crowdsaleClosed = false;\r\n    halted          = false;\r\n    startTime       = 1513908673; // Friday, December 22, 2017 10:11:13 AM GMT+08:00\r\n    endTime         = 1517414400; // Thursday, February 1, 2018 12:00:00 AM GMT+08:00\r\n    wallet          = ERC20(0x3baDA155408AB1C9898FDF28e545b51f2f9a65CC); // This wallet needs to give permission for the ICO to transfer Tokens \r\n    ownerAddress    = ERC20(0x3EFAe2e152F62F5cc12cc0794b816d22d416a721);  // This is bad in theory but does fix the 2300 gas problem \r\n    token           = ERC20(0x80E7a4d750aDe616Da896C49049B7EdE9e04C191); // Ropsten we have pregenerated thiss\r\n  }\r\n\r\n        // fallback function can be used to buy tokens\r\n  function () public payable {\r\n    require(msg.sender                 != 0x0);\r\n    require(validPurchase());\r\n    require(!halted); // useful to test if we have paused it\r\n    uint256 weiAmount                  = msg.value; // money sent in wei\r\n    uint256 tokens                     = SafeMath.div(SafeMath.mul(weiAmount, getCurrentRate()), 1 ether);\r\n    require(ALLOC_CROWDSALE - astrSold >= tokens);\r\n    weiRaised                          += weiAmount;\r\n    astrSold                           += tokens;\r\n    token.transferFrom(ownerAddress, msg.sender, tokens);\r\n    wallet.transfer(msg.value); // transfer straight away wallet\r\n  }\r\n\r\n\r\n  function validPurchase() internal constant returns (bool) {\r\n    bool withinPeriod = now >= startTime && now <= endTime;\r\n    bool nonZeroPurchase = (msg.value != 0);\r\n    bool astrAvailable = (ALLOC_CROWDSALE - astrSold) > 0; \r\n    return withinPeriod && nonZeroPurchase && astrAvailable && ! crowdsaleClosed;\r\n  }\r\n\r\n  function getCurrentRate() internal constant returns (uint256) {  \r\n    if( PRICE_VARIABLE > 0 ) {\r\n      return PRICE_VARIABLE; // we can manually set prices if we want\r\n    }\r\n\r\n    return BASIC_RATE;\r\n  }\r\n\r\n\r\n  // this closes it when we want to close - rather than waiting \r\n  function setNewRate(uint256 _coinsPerEther) onlyOwner public {\r\n    if( _coinsPerEther > 0 ) {\r\n        PRICE_VARIABLE = _coinsPerEther * decimalsConversion;\r\n    }\r\n  }\r\n    // this closes it when we want to close - rather than waiting \r\n  function setFixedRate() onlyOwner public {\r\n     PRICE_VARIABLE = 0 * decimalsConversion;\r\n  }\r\n\r\n\r\n  // this closes it when we want to close - rather than waiting - this is bad\r\n  function closeSaleAnyway() onlyOwner public {\r\n      // wallet.transfer(weiRaised);\r\n      crowdsaleClosed = true;\r\n    }\r\n\r\n    // this closes it when we want to close - rather than waiting \r\n  function safeCloseSale()  onlyOwner afterDeadline public {\r\n    // wallet.transfer(weiRaised);\r\n    crowdsaleClosed = true;\r\n  }\r\n\r\n  function pause() onlyOwner public {\r\n    halted = true;\r\n  }\r\n\r\n\r\n  function unpause() onlyOwner public {\r\n    halted = false;\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_coinsPerEther\",\"type\":\"uint256\"}],\"name\":\"setNewRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"safeCloseSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRICE_VARIABLE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"halted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"astrSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleClosed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"closeSaleAnyway\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setFixedRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"ASTRICOSale","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://50d65b76e5469384be815592341deab613ad3e861b9cbade9229df60d707251e"}]}