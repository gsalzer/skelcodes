{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.16; //YourMomTokenCrowdsale\r\n\r\ninterface token {\r\n\tfunction transferFrom(address _holder, address _receiver, uint amount) public returns (bool success);\r\n\tfunction allowance(address _owner, address _spender) public returns (uint256 remaining);\r\n\tfunction balanceOf(address _owner) public returns (uint256 balance);\r\n}\r\n\r\n\r\ncontract owned {\t// Defines contract Owner\r\n\taddress public owner;\r\n\r\n\t// Events\r\n\tevent TransferOwnership (address indexed _owner, address indexed _newOwner);\t// Notifies about the ownership transfer\r\n\r\n\t// Constrctor function\r\n\tfunction owned() public {\r\n\t\towner = msg.sender;\r\n\t}\r\n\r\n\tfunction transferOwnership(address newOwner) onlyOwner public {\r\n\t\tTransferOwnership (owner, newOwner);\r\n\t\towner = newOwner;\r\n\t}\r\n\t\r\n\t// Modifiers\r\n\tmodifier onlyOwner {\r\n\t\trequire(msg.sender == owner);\r\n\t\t_;\r\n\t}\r\n}\r\n\r\n\r\ncontract YourMomTokenCrowdsale is owned {\r\n\ttoken public tokenReward;\r\n\tstring public name;\r\n\taddress public beneficiary;\r\n\taddress public tokenHolder;\r\n\tuint256 public crowdsaleStartTime;\r\n\tuint256 public deadline;\r\n\tuint256 public tokensIssued;\r\n\tuint256 public amountRaised;\r\n\tmapping(address => uint256) private balanceOf;\r\n\tmapping(address => uint256) private etherBalanceOf;\r\n\tuint256 private reclaimForgottenEtherDeadline;\r\n\tuint256 private currentContractAllowance;\r\n\tuint256 private initialContractAllowance;\r\n\tuint256 private originalTokenReward;\r\n\tuint256 private _etherAmount;\r\n\tuint256 private price;\r\n\tuint8 private errorCount = 0;\r\n\tbool public purchasingAllowed = false;\r\n\tbool public failSafeMode = false;\r\n\tbool private afterFirstWithdrawal = false;\r\n\tbool private allowanceSetted = false;\r\n\r\n\t// Events\r\n\tevent TokenPurchase(address indexed taker, uint amount, uint tokensBought);\r\n\tevent FundWithdrawal(address indexed to, uint amount, bool isBeneficiary);\r\n\tevent PurchasingAllowed(bool enabled);\r\n\tevent ExecutionError(string reason);\r\n\tevent FailSafeActivated(bool enabled);\r\n\r\n\t//Constrctor function\r\n\tfunction YourMomTokenCrowdsale(string contractName, address ifSuccessfulSendTo, uint durationInDays, uint howManyTokensAnEtherCanBuy, address addressOfTokenUsedAsReward, address adressOfTokenHolder, uint crowdsaleStartTimeTimestamp, uint ifInFailSafeTimeInDaysAfterDeadlineToReclaimForgottenEther) public {\r\n\t\tname = contractName;\t\t\t\t\t\t\t\t\t// Set the name for display purposes\r\n\t\tcrowdsaleStartTime = crowdsaleStartTimeTimestamp;\r\n\t\tdeadline = crowdsaleStartTime + durationInDays * 1 days;\r\n\t\toriginalTokenReward = howManyTokensAnEtherCanBuy;\t\t//Assuming Token has 18 decimal units\r\n\t\ttokenReward = token(addressOfTokenUsedAsReward);\r\n\t\ttokenHolder = adressOfTokenHolder;\r\n\t\tbeneficiary = ifSuccessfulSendTo;\r\n\t\treclaimForgottenEtherDeadline = deadline + ifInFailSafeTimeInDaysAfterDeadlineToReclaimForgottenEther * 1 days;\r\n\t}\r\n\r\n\t//Fallback function\r\n\tfunction () payable public {\r\n\t\trequire(!failSafeMode);\r\n\t\trequire(purchasingAllowed);\r\n\t\trequire(now >= crowdsaleStartTime);\r\n\t\trequire(msg.value != 0);\r\n\t\trequire(amountRaised + msg.value > amountRaised);\t//Check for overflow\r\n\t\tprice = _currentTokenRewardCalculator();\r\n\t\trequire(tokenReward.transferFrom(tokenHolder, msg.sender, msg.value * price));\t//Transfer tokens from tokenHolder to msg.sender\r\n\t\tamountRaised += msg.value;\t\t\t\t\t//Updates amount raised\r\n\t\ttokensIssued += msg.value * price;\t\t\t//Updates token selled (required for audit)\r\n\t\tetherBalanceOf[msg.sender] += msg.value; \t//Updates msg.sender ether contribution amount\r\n\t\tbalanceOf[msg.sender] += msg.value * price;\t//Updates the amount of tokens msg.sender has received\r\n\t\tcurrentContractAllowance = tokenReward.allowance(beneficiary, this);\t\t//Updates contract allowance\r\n\t\tif (!afterFirstWithdrawal && ((tokensIssued != initialContractAllowance - currentContractAllowance) ||  (amountRaised != this.balance))) { _activateFailSafe(); }\t//Check tokens issued and ether received, activates fail-safe in mismatch\r\n\t\tTokenPurchase(msg.sender, msg.value, msg.value * price);\t//Event to inform about the purchase\r\n\t\tif (afterFirstWithdrawal) {\t//If after first withdrawal, the ether will be sent immediately to the beneficiary\r\n\t\t\tif(beneficiary.send(msg.value)) { FundWithdrawal(beneficiary, msg.value, true); } //If fails, return false and the ether will remain in the contract\r\n\t\t}\r\n\t}\r\n\r\n\tfunction enablePurchase() onlyOwner() public {\r\n\t\trequire(!failSafeMode);\t\t//Can't enable purchase after Fail-Safe activates\r\n\t\trequire(!purchasingAllowed);//Require purchasingAllowed = false\r\n\t\tpurchasingAllowed = true;\t//Contract must be deployed with purchasingAllowed = false\r\n\t\tPurchasingAllowed(true);\r\n\t\tif (!allowanceSetted) {\t\t//Set the initial and current contract allowance\r\n\t\t\trequire(tokenReward.allowance(beneficiary, this) > 0);\t//Changing allowance before the first withdrawal activates Fail-Safe\r\n\t\t\tinitialContractAllowance = tokenReward.allowance(beneficiary, this);\r\n\t\t\tcurrentContractAllowance = initialContractAllowance;\r\n\t\t\tallowanceSetted = true;\r\n\t\t}\r\n\t}\r\n\r\n\tfunction disablePurchase() onlyOwner() public {\r\n\t\trequire(purchasingAllowed);\t//Require purchasingAllowed = true\r\n\t\tpurchasingAllowed = false;\r\n\t\tPurchasingAllowed(false);\r\n\t}\r\n\r\n\tfunction Withdrawal() public returns (bool sucess) {\r\n\t\tif (!failSafeMode) {\t//If NOT in Fail-Safe\r\n\t\t\trequire((now >= deadline) || (100*currentContractAllowance/initialContractAllowance <= 5));\t//Require after deadline or 95% of the tokens sold\r\n\t\t\trequire(msg.sender == beneficiary);\t//Only the beneficiary can withdrawal if NOT in Fail-Safe\r\n\t\t\tif (!afterFirstWithdrawal) {\r\n\t\t\t\tif (beneficiary.send(amountRaised)) {\r\n\t\t\t\t\tafterFirstWithdrawal = true;\r\n\t\t\t\t\tFundWithdrawal(beneficiary, amountRaised, true);\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t} else {\t//Executed if amountRaised's withdrawal fails\r\n\t\t\t\t\terrorCount += 1;\r\n\t\t\t\t\tif (errorCount >= 3) {\t//If amountRaised's withdrawal fail 3 times, activates Fail-Safe\r\n\t\t\t\t\t\t_activateFailSafe();\r\n\t\t\t\t\t\treturn false;\t//'return false' cause it's an error function\r\n\t\t\t\t\t} else { return false; }\t//If errorCount < 3\r\n\t\t\t\t}\r\n\t\t\t} else {\t//If 'afterFirstWithdrawal == true' transfer current contract balance to beneficiary\r\n\t\t\t\t_etherAmount = this.balance;\r\n\t\t\t\tbeneficiary.transfer(_etherAmount);\r\n\t\t\t\tFundWithdrawal(beneficiary, _etherAmount, true);\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t} else {\t//If in Fail-Safe mode\r\n\t\t\tif((now > reclaimForgottenEtherDeadline) && (msg.sender == beneficiary)) {\t//Reclaim forgotten ethers sub-function\r\n\t\t\t\t_etherAmount = this.balance;\r\n\t\t\t\tbeneficiary.transfer(_etherAmount);\t//Send ALL contract's ether to beneficiary, throws on failure\r\n\t\t\t\tFundWithdrawal(beneficiary, _etherAmount, true);\r\n\t\t\t\treturn true;\r\n\t\t\t} else {\t//If the conditions to the 'reclaim forgotten ether' sub-function is not met\r\n\t\t\t\trequire(balanceOf[msg.sender] > 0);\r\n\t\t\t\trequire(etherBalanceOf[msg.sender] > 0);\r\n\t\t\t\trequire(this.balance > 0 );\t//Can't return ether if there is no ether on the contract\r\n\t\t\t\trequire(tokenReward.balanceOf(msg.sender) >= balanceOf[msg.sender]);\t//Check if msg.sender has the tokens he bought\r\n\t\t\t\trequire(tokenReward.allowance(msg.sender, this) >= balanceOf[msg.sender]);\t//Check if the contract is authorized to return the tokens\r\n\t\t\t\trequire(tokenReward.transferFrom(msg.sender, tokenHolder, balanceOf[msg.sender])); \t//Tranfer the tokens back to the beneficiary\r\n\t\t\t\tif(this.balance >= etherBalanceOf[msg.sender]) {\t//If the contract has not enough either, it will send all it can\r\n\t\t\t\t\t_etherAmount = etherBalanceOf[msg.sender];\r\n\t\t\t\t} else { _etherAmount = this.balance; }\t\t\t\t//Which is all the contract's balance\r\n\t\t\t\tbalanceOf[msg.sender] = 0;\t\t\t// Mitigates Re-Entrancy call\r\n\t\t\t\tetherBalanceOf[msg.sender] = 0;\t\t// Mitigates Re-Entrancy call\r\n\t\t\t\tmsg.sender.transfer(_etherAmount);\t//.transfer throws on failure, witch will revert even the variable changes\r\n\t\t\t\tFundWithdrawal(msg.sender, _etherAmount, false);\t//Call the event to inform the withdrawal\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tfunction _currentTokenRewardCalculator() internal view returns (uint256) {\t//Increases the reward according to the discount\r\n\t\tif (now <= crowdsaleStartTime + 6 hours) { return originalTokenReward + (originalTokenReward * 70 / 100); }\r\n\t\tif (now <= crowdsaleStartTime + 12 hours) { return originalTokenReward + (originalTokenReward * 60 / 100); }\r\n\t\tif (now <= crowdsaleStartTime + 48 hours) { return originalTokenReward + (originalTokenReward * 50 / 100); }\r\n\t\tif (now <= crowdsaleStartTime + 7 days) { return originalTokenReward + (originalTokenReward * 30 / 100); }\r\n\t\tif (now <= crowdsaleStartTime + 14 days) { return originalTokenReward + (originalTokenReward * 10 / 100); }\r\n\t\tif (now > crowdsaleStartTime + 14 days) { return originalTokenReward; }\r\n\t}\r\n\r\n\tfunction _activateFailSafe() internal returns (bool) {\r\n\t\tif(afterFirstWithdrawal) { return false; }\t//Fail-Safe can NOT be activated after First Withdrawal\r\n\t\tif(failSafeMode) { return false; }\t\t\t//Fail-Safe can NOT be activated twice (right?)\r\n\t\tcurrentContractAllowance = 0;\r\n\t\tpurchasingAllowed = false;\r\n\t\tfailSafeMode = true;\r\n\t\tExecutionError(\"Critical error\");\r\n\t\tFailSafeActivated(true);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t// Call Functions\r\n\tfunction name() public constant returns (string) { return name; }\r\n\tfunction tokenBalanceOf(address _owner) public constant returns (uint256 tokensBoughtAtCrowdsale) { return balanceOf[_owner]; }\r\n\tfunction etherContributionOf(address _owner) public constant returns (uint256 amountContributedAtTheCrowdsaleInWei) { return etherBalanceOf[_owner]; }\r\n\tfunction currentPrice() public constant returns (uint256 currentTokenRewardPer1EtherContributed) { return (_currentTokenRewardCalculator()); }\r\n\tfunction discount() public constant returns (uint256 currentDiscount) { return ((100*_currentTokenRewardCalculator()/originalTokenReward) - 100); }\r\n\tfunction remainingTokens() public constant returns (uint256 tokensStillOnSale) { return currentContractAllowance; }\r\n\tfunction crowdsaleStarted() public constant returns (bool isCrowdsaleStarted) { if (now >= crowdsaleStartTime) { return true; } else { return false; } }\r\n\tfunction reclaimEtherDeadline() public constant returns (uint256 deadlineToReclaimEtherIfFailSafeWasActivated) { return reclaimForgottenEtherDeadline; }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"deadline\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenHolder\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"discount\",\"outputs\":[{\"name\":\"currentDiscount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenReward\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"Withdrawal\",\"outputs\":[{\"name\":\"sucess\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"amountRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensIssued\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"enablePurchase\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleStarted\",\"outputs\":[{\"name\":\"isCrowdsaleStarted\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentPrice\",\"outputs\":[{\"name\":\"currentTokenRewardPer1EtherContributed\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reclaimEtherDeadline\",\"outputs\":[{\"name\":\"deadlineToReclaimEtherIfFailSafeWasActivated\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"disablePurchase\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"remainingTokens\",\"outputs\":[{\"name\":\"tokensStillOnSale\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"purchasingAllowed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"etherContributionOf\",\"outputs\":[{\"name\":\"amountContributedAtTheCrowdsaleInWei\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"tokenBalanceOf\",\"outputs\":[{\"name\":\"tokensBoughtAtCrowdsale\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"failSafeMode\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"contractName\",\"type\":\"string\"},{\"name\":\"ifSuccessfulSendTo\",\"type\":\"address\"},{\"name\":\"durationInDays\",\"type\":\"uint256\"},{\"name\":\"howManyTokensAnEtherCanBuy\",\"type\":\"uint256\"},{\"name\":\"addressOfTokenUsedAsReward\",\"type\":\"address\"},{\"name\":\"adressOfTokenHolder\",\"type\":\"address\"},{\"name\":\"crowdsaleStartTimeTimestamp\",\"type\":\"uint256\"},{\"name\":\"ifInFailSafeTimeInDaysAfterDeadlineToReclaimForgottenEther\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"taker\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokensBought\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"isBeneficiary\",\"type\":\"bool\"}],\"name\":\"FundWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"PurchasingAllowed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"ExecutionError\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"FailSafeActivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"TransferOwnership\",\"type\":\"event\"}]","ContractName":"YourMomTokenCrowdsale","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000100000000000000000000000000c14cde3d8148f831ff74654dc492cc5480bf340c000000000000000000000000000000000000000000000000000000000000003c00000000000000000000000000000000000000000000000000000000000003e8000000000000000000000000eeab9b54cbf17ce0bb5b618f3bd3a20ca3cf5331000000000000000000000000c14cde3d8148f831ff74654dc492cc5480bf340c000000000000000000000000000000000000000000000000000000005a5f3ac0000000000000000000000000000000000000000000000000000000000000003c0000000000000000000000000000000000000000000000000000000000000016596f75724d6f6d546f6b656e2043726f776473616c6500000000000000000000","Library":"","SwarmSource":"bzzr://63ac2624ee8ce99d00938d362b225a3ea06d7745577875cd6f6f787762b74524"}]}