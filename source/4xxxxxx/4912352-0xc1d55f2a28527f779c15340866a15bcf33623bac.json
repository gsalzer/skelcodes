{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public constant returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address internal owner;\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n}\r\n/**\r\n * @title BenebitICO\r\n * @author Hamza Yasin || Junaid Mushtaq\r\n * @dev BenibitCrowdsale is a base contract for managing a token crowdsale.\r\n * Crowdsales have a start and end timestamps, where investors can make\r\n * token purchases and the crowdsale will assign them BNE tokens based\r\n * on a BNE token per ETH rate. Funds collected are forwarded to a wallet\r\n * as they arrive.\r\n */\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n  mapping(address => uint256) balances;\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n}\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n  mapping (address => mapping (address => uint256)) allowed;\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    uint256 _allowance = allowed[_from][msg.sender];\r\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n    // require (_value <= _allowance);\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n  /**\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   */\r\n  function increaseApproval (address _spender, uint _addedValue)\r\n    returns (bool success) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n  function decreaseApproval (address _spender, uint _subtractedValue)\r\n    returns (bool success) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n}\r\n/**\r\n * @title Mintable token\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\r\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n */\r\ncontract MintableToken is StandardToken, Ownable {\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n  bool public mintingFinished = false;\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\r\n    //totalSupply = totalSupply.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    Mint(_to, _amount);\r\n    Transfer(msg.sender, _to, _amount);\r\n    return true;\r\n  }\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() onlyOwner public returns (bool) {\r\n    mintingFinished = true;\r\n    MintFinished();\r\n    return true;\r\n  }\r\n  function burnTokens(uint256 _unsoldTokens) onlyOwner public returns (bool) {\r\n    totalSupply = SafeMath.sub(totalSupply, _unsoldTokens);\r\n  }\r\n}\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n/**\r\n * @title Benebit Crowdsale\r\n * @author Junaid Mushtaq || Hamza Yasin\r\n * @dev Crowdsale is a base contract for managing a token crowdsale.\r\n * Crowdsales have a start and end timestamps, where investors can make\r\n * token purchases and the crowdsale will assign them tokens based\r\n * on a token per ETH rate. Funds collected are forwarded to a wallet\r\n * as they arrive.\r\n */\r\ncontract Crowdsale is Ownable {\r\n  using SafeMath for uint256;\r\n  // The token being sold\r\n  MintableToken private token;\r\n  // start and end timestamps where investments are allowed (both inclusive)\r\n  uint256 public preStartTime;\r\n  uint256 public preEndTime;\r\n  uint256 public ICOstartTime;\r\n  uint256 public ICOEndTime;\r\n  \r\n  // Bonuses will be calculated here of ICO and Pre-ICO (both inclusive)\r\n  uint256 private preICOBonus;\r\n  uint256 private firstWeekBonus;\r\n  uint256 private secondWeekBonus;\r\n  uint256 private thirdWeekBonus;\r\n  uint256 private forthWeekBonus;\r\n  \r\n  \r\n  // wallet address where funds will be saved\r\n  address internal wallet;\r\n  \r\n  // base-rate of a particular Benebit token\r\n  uint256 public rate;\r\n  // amount of raised money in wei\r\n  uint256 internal weiRaised;\r\n  // Weeks in UTC\r\n  uint256 weekOne;\r\n  uint256 weekTwo;\r\n  uint256 weekThree;\r\n  uint256 weekForth;\r\n  \r\n  // total supply of token \r\n  uint256 private totalSupply = 300000000 * (10**18);\r\n  // public supply of token \r\n  uint256 private publicSupply = SafeMath.mul(SafeMath.div(totalSupply,100),75);\r\n  // rewards supply of token \r\n  uint256 private rewardsSupply = SafeMath.mul(SafeMath.div(totalSupply,100),15);\r\n  // team supply of token \r\n  uint256 private teamSupply = SafeMath.mul(SafeMath.div(totalSupply,100),5);\r\n  // advisor supply of token \r\n  uint256 private advisorSupply = SafeMath.mul(SafeMath.div(totalSupply,100),3);\r\n  // bounty supply of token \r\n  uint256 private bountySupply = SafeMath.mul(SafeMath.div(totalSupply,100),2);\r\n  // preICO supply of token \r\n  uint256 private preicoSupply = SafeMath.mul(SafeMath.div(publicSupply,100),15);\r\n  // ICO supply of token \r\n  uint256 private icoSupply = SafeMath.mul(SafeMath.div(publicSupply,100),85);\r\n  // Remaining Public Supply of token \r\n  uint256 private remainingPublicSupply = publicSupply;\r\n  // Remaining Reward Supply of token \r\n  uint256 private remainingRewardsSupply = rewardsSupply;\r\n  // Remaining Bounty Supply of token \r\n  uint256 private remainingBountySupply = bountySupply;\r\n  // Remaining Advisor Supply of token \r\n  uint256 private remainingAdvisorSupply = advisorSupply;\r\n  // Remaining Team Supply of token \r\n  uint256 private remainingTeamSupply = teamSupply;\r\n  // Time lock or vested period of token for team allocated token\r\n  uint256 private teamTimeLock;\r\n  // Time lock or vested period of token for Advisor allocated token\r\n  uint256 private advisorTimeLock;\r\n  /**\r\n   *  @bool checkBurnTokens\r\n   *  @bool upgradeICOSupply\r\n   *  @bool grantTeamSupply\r\n   *  @bool grantAdvisorSupply     \r\n  */\r\n  bool private checkBurnTokens;\r\n  bool private upgradeICOSupply;\r\n  bool private grantTeamSupply;\r\n  bool private grantAdvisorSupply;\r\n  /**\r\n   * event for token purchase logging\r\n   * @param purchaser who paid for the tokens\r\n   * @param beneficiary who got the tokens\r\n   * @param value weis paid for purchase\r\n   * @param amount amount of tokens purchased\r\n   */\r\n  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n  // Benebit Crowdsale constructor\r\n  function Crowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet) {\r\n    require(_startTime >= now);\r\n    require(_endTime >= _startTime);\r\n    require(_rate > 0);\r\n    require(_wallet != 0x0);\r\n    // Benebit token creation \r\n    token = createTokenContract();\r\n    // Pre-ICO start Time\r\n    preStartTime = _startTime;\r\n    \r\n    // Pre-ICO end time\r\n     preEndTime = 1519045200;\r\n    // // ICO start Time\r\n     ICOstartTime = 1519304400;\r\n    // ICO end Time\r\n    ICOEndTime = _endTime;\r\n    // Base Rate of BNE Token\r\n    rate = _rate;\r\n    // Multi-sig wallet where funds will be saved\r\n    wallet = _wallet;\r\n    /** Calculations of Bonuses in ICO or Pre-ICO */\r\n    preICOBonus = SafeMath.div(SafeMath.mul(rate,30),100);\r\n    firstWeekBonus = SafeMath.div(SafeMath.mul(rate,20),100);\r\n    secondWeekBonus = SafeMath.div(SafeMath.mul(rate,15),100);\r\n    thirdWeekBonus = SafeMath.div(SafeMath.mul(rate,10),100);\r\n    forthWeekBonus = SafeMath.div(SafeMath.mul(rate,5),100);\r\n    /** ICO bonuses week calculations */\r\n    weekOne = SafeMath.add(ICOstartTime, 604800);\r\n    weekTwo = SafeMath.add(weekOne, 604800);\r\n    weekThree = SafeMath.add(weekTwo, 604800);\r\n    weekForth = SafeMath.add(weekThree, 604800);\r\n    /** Vested Period calculations for team and advisors*/\r\n    teamTimeLock = SafeMath.add(ICOEndTime, 31536000);\r\n    advisorTimeLock = SafeMath.add(ICOEndTime, 5356800);\r\n    \r\n    checkBurnTokens = false;\r\n    upgradeICOSupply = false;\r\n    grantAdvisorSupply = false;\r\n    grantTeamSupply = false;\r\n  }\r\n  // creates the token to be sold.\r\n  // override this method to have crowdsale of a specific mintable token.\r\n  function createTokenContract() internal returns (MintableToken) {\r\n    return new MintableToken();\r\n  }\r\n  \r\n  // fallback function can be used to buy tokens\r\n  function () payable {\r\n    buyTokens(msg.sender);\r\n    \r\n  }\r\n  // High level token purchase function\r\n  function buyTokens(address beneficiary) public payable {\r\n    require(beneficiary != 0x0);\r\n    require(validPurchase());\r\n    uint256 weiAmount = msg.value;\r\n    // minimum investment should be 0.05 ETH\r\n    require(weiAmount >= (0.05 * 1 ether));\r\n    \r\n    uint256 accessTime = now;\r\n    uint256 tokens = 0;\r\n  // calculating the ICO and Pre-ICO bonuses on the basis of timing\r\n    if ((accessTime >= preStartTime) && (accessTime < preEndTime)) {\r\n        require(preicoSupply > 0);\r\n        tokens = SafeMath.add(tokens, weiAmount.mul(preICOBonus));\r\n        tokens = SafeMath.add(tokens, weiAmount.mul(rate));\r\n        \r\n        require(preicoSupply >= tokens);\r\n        \r\n        preicoSupply = preicoSupply.sub(tokens);        \r\n        remainingPublicSupply = remainingPublicSupply.sub(tokens);\r\n    } else if ((accessTime >= ICOstartTime) && (accessTime <= ICOEndTime)) {\r\n        if (!upgradeICOSupply) {\r\n          icoSupply = SafeMath.add(icoSupply,preicoSupply);\r\n          upgradeICOSupply = true;\r\n        }\r\n        if ( accessTime <= weekOne ) {\r\n          tokens = SafeMath.add(tokens, weiAmount.mul(firstWeekBonus));\r\n        } else if (accessTime <= weekTwo) {\r\n          tokens = SafeMath.add(tokens, weiAmount.mul(secondWeekBonus));\r\n        } else if ( accessTime < weekThree ) {\r\n          tokens = SafeMath.add(tokens, weiAmount.mul(thirdWeekBonus));\r\n        } else if ( accessTime < weekForth ) {\r\n          tokens = SafeMath.add(tokens, weiAmount.mul(forthWeekBonus));\r\n        }\r\n        \r\n        tokens = SafeMath.add(tokens, weiAmount.mul(rate));\r\n        icoSupply = icoSupply.sub(tokens);        \r\n        remainingPublicSupply = remainingPublicSupply.sub(tokens);\r\n    } else if ((accessTime > preEndTime) && (accessTime < ICOstartTime)){\r\n      revert();\r\n    } else {\r\n      revert();\r\n    }\r\n    // update state\r\n    weiRaised = weiRaised.add(weiAmount);\r\n    // tokens are minting here\r\n    token.mint(beneficiary, tokens);\r\n    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\r\n    // funds are forwarding\r\n    forwardFunds();\r\n  }\r\n  // send ether to the fund collection wallet\r\n  // override to create custom fund forwarding mechanisms\r\n  function forwardFunds() internal {\r\n    wallet.transfer(msg.value);\r\n  }\r\n  // @return true if the transaction can buy tokens\r\n  function validPurchase() internal constant returns (bool) {\r\n    bool withinPeriod = now >= preStartTime && now <= ICOEndTime;\r\n    bool nonZeroPurchase = msg.value != 0;\r\n    return withinPeriod && nonZeroPurchase;\r\n  }\r\n  // @return true if crowdsale event has ended\r\n  function hasEnded() public constant returns (bool) {\r\n      return now > ICOEndTime;\r\n  }\r\n  // @return true if burnToken function has ended\r\n  function burnToken() onlyOwner public returns (bool) {\r\n    require(hasEnded());\r\n    require(!checkBurnTokens);\r\n    checkBurnTokens = true;\r\n    token.burnTokens(remainingPublicSupply);\r\n    totalSupply = SafeMath.sub(totalSupply, remainingPublicSupply);\r\n    remainingPublicSupply = 0;\r\n    return true;\r\n  }\r\n  /** \r\n     * @return true if bountyFunds function has ended\r\n     * @param beneficiary address where owner wants to transfer tokens\r\n     * @param valueToken value of token\r\n  */\r\n  function bountyFunds(address beneficiary, uint256 valueToken) onlyOwner public { \r\n    valueToken = SafeMath.mul(valueToken, 1 ether);\r\n    require(remainingBountySupply >= valueToken);\r\n    remainingBountySupply = SafeMath.sub(remainingBountySupply,valueToken);\r\n    token.mint(beneficiary, valueToken);\r\n  }\r\n  /** \r\n     * @return true if rewardsFunds function has ended\r\n     * @param beneficiary address where owner wants to transfer tokens\r\n     * @param valueToken value of token\r\n  */\r\n  function rewardsFunds(address beneficiary, uint256 valueToken) onlyOwner public { \r\n    valueToken = SafeMath.mul(valueToken, 1 ether);\r\n    require(remainingRewardsSupply >= valueToken);\r\n    remainingRewardsSupply = SafeMath.sub(remainingRewardsSupply,valueToken);\r\n    token.mint(beneficiary, valueToken);\r\n  } \r\n  /**\r\n      @return true if grantAdvisorToken function has ended  \r\n  */\r\n  function grantAdvisorToken() onlyOwner public {\r\n    require(!grantAdvisorSupply);\r\n    require(now > advisorTimeLock);\r\n    uint256 valueToken = SafeMath.div(remainingAdvisorSupply,3);\r\n    require(remainingAdvisorSupply >= valueToken);\r\n    grantAdvisorSupply = true;\r\n    token.mint(0xAA855f6D87d5D443eDa49aA034fA99D9EeeA0337, valueToken);\r\n    token.mint(0x4B2e3E1BBEb117b781e71A10376A969860FBcEB3, valueToken);\r\n    token.mint(0xbb3b3799D1b31189b491C26B1D7c17307fb87F5d, valueToken);\r\n    remainingAdvisorSupply = 0;\r\n  }\r\n  /**\r\n      @return true if grantTeamToken function has ended  \r\n  */\r\n    function grantTeamToken() onlyOwner public {\r\n    require(!grantTeamSupply);\r\n    require(now > teamTimeLock);\r\n    uint256 valueToken = SafeMath.div(remainingTeamSupply, 5);\r\n    require(remainingTeamSupply >= valueToken);\r\n    grantTeamSupply = true;\r\n    token.mint(0xBEB9e4057f953AaBdF14Dc4018056888C67E40b0, valueToken);\r\n    token.mint(0x70fcd07629eB9b406223168AEB8De06E2564F558, valueToken);\r\n    token.mint(0x0e562f12239C660627bE186de6535c05983579E9, valueToken);\r\n    token.mint(0x42e045f4D119212AC1CF5820488E69AA9164DC70, valueToken);\r\n    token.mint(0x2f53678a33C0fEE8f30fc5cfaC4E5E140397b40D, valueToken);\r\n    remainingTeamSupply = 0;\r\n    \r\n  }\r\n/** \r\n   * Function transferToken works to transfer tokens to the specified address on the\r\n     call of owner within the crowdsale timestamp.\r\n   * @param beneficiary address where owner wants to transfer tokens\r\n   * @param tokens value of token\r\n */\r\n  function transferToken(address beneficiary, uint256 tokens) onlyOwner public {\r\n   \r\n    require ((now >= preStartTime) && (now <= ICOEndTime));\r\n    tokens = SafeMath.mul(tokens,1 ether);\r\n    require(remainingPublicSupply >= tokens);\r\n    remainingPublicSupply = SafeMath.sub(remainingPublicSupply, tokens);\r\n    token.mint(beneficiary, tokens);\r\n  }\r\n  function getTokenAddress() onlyOwner public returns (address) {\r\n    return token;\r\n  }\r\n  function getPublicSupply() onlyOwner public returns (uint256) {\r\n    return remainingPublicSupply;\r\n  }\r\n}\r\n/**\r\n * @title CappedCrowdsale\r\n * @dev Extension of Crowdsale with a max amount of funds raised\r\n */\r\ncontract CappedCrowdsale is Crowdsale {\r\n  using SafeMath for uint256;\r\n  uint256 public cap;\r\n  function CappedCrowdsale(uint256 _cap) {\r\n    require(_cap > 0);\r\n    cap = _cap;\r\n  }\r\n  // overriding Crowdsale#validPurchase to add extra cap logic\r\n  // @return true if investors can buy at the moment\r\n  function validPurchase() internal constant returns (bool) {\r\n    bool withinCap = weiRaised.add(msg.value) <= cap;\r\n    return super.validPurchase() && withinCap;\r\n  }\r\n  // overriding Crowdsale#hasEnded to add cap logic\r\n  // @return true if crowdsale event has ended\r\n  function hasEnded() public constant returns (bool) {\r\n    bool capReached = weiRaised >= cap;\r\n    return super.hasEnded() || capReached;\r\n  }\r\n}\r\n/**\r\n * @title FinalizableCrowdsale\r\n * @dev Extension of Crowdsale where an owner can do extra work\r\n * after finishing.\r\n */\r\ncontract FinalizableCrowdsale is Crowdsale {\r\n  using SafeMath for uint256;\r\n  bool isFinalized = false;\r\n  event Finalized();\r\n  /**\r\n   * @dev Must be called after crowdsale ends, to do some extra finalization\r\n   * work. Calls the contract's finalization function.\r\n   */\r\n  function finalize() onlyOwner public {\r\n    require(!isFinalized);\r\n    require(hasEnded());\r\n    finalization();\r\n    Finalized();\r\n    isFinalized = true;\r\n  }\r\n  /**\r\n   * @dev Can be overridden to add finalization logic. The overriding function\r\n   * should call super.finalization() to ensure the chain of finalization is\r\n   * executed entirely.\r\n   */\r\n  function finalization() internal {\r\n  }\r\n}\r\n/**\r\n * @title RefundVault\r\n * @dev This contract is used for storing funds while a crowdsale\r\n * is in progress. Supports refunding the money if crowdsale fails,\r\n * and forwarding it if crowdsale is successful.\r\n */\r\ncontract RefundVault is Ownable {\r\n  using SafeMath for uint256;\r\n  enum State { Active, Refunding, Closed }\r\n  mapping (address => uint256) public deposited;\r\n  address public wallet;\r\n  State public state;\r\n  event Closed();\r\n  event RefundsEnabled();\r\n  event Refunded(address indexed beneficiary, uint256 weiAmount);\r\n  function RefundVault(address _wallet) {\r\n    require(_wallet != 0x0);\r\n    wallet = _wallet;\r\n    state = State.Active;\r\n  }\r\n  function deposit(address investor) onlyOwner public payable {\r\n    require(state == State.Active);\r\n    deposited[investor] = deposited[investor].add(msg.value);\r\n  }\r\n  function close() onlyOwner public {\r\n    require(state == State.Active);\r\n    state = State.Closed;\r\n    Closed();\r\n    wallet.transfer(this.balance);\r\n  }\r\n  function enableRefunds() onlyOwner public {\r\n    require(state == State.Active);\r\n    state = State.Refunding;\r\n    RefundsEnabled();\r\n  }\r\n  function refund(address investor) public {\r\n    require(state == State.Refunding);\r\n    uint256 depositedValue = deposited[investor];\r\n    deposited[investor] = 0;\r\n    investor.transfer(depositedValue);\r\n    Refunded(investor, depositedValue);\r\n  }\r\n}\r\n/**\r\n * @title RefundableCrowdsale\r\n * @dev Extension of Crowdsale contract that adds a funding goal, and\r\n * the possibility of users getting a refund if goal is not met.\r\n * Uses a RefundVault as the crowdsale's vault.\r\n */\r\ncontract RefundableCrowdsale is FinalizableCrowdsale {\r\n  using SafeMath for uint256;\r\n  // minimum amount of funds to be raised in weis\r\n  uint256 public goal;\r\n  bool private _goalReached = false;\r\n  // refund vault used to hold funds while crowdsale is running\r\n  RefundVault private vault;\r\n  function RefundableCrowdsale(uint256 _goal) {\r\n    require(_goal > 0);\r\n    vault = new RefundVault(wallet);\r\n    goal = _goal;\r\n  }\r\n  // We're overriding the fund forwarding from Crowdsale.\r\n  // In addition to sending the funds, we want to call\r\n  // the RefundVault deposit function\r\n  function forwardFunds() internal {\r\n    vault.deposit.value(msg.value)(msg.sender);\r\n  }\r\n  // if crowdsale is unsuccessful, investors can claim refunds here\r\n  function claimRefund() public {\r\n    require(isFinalized);\r\n    require(!goalReached());\r\n    vault.refund(msg.sender);\r\n  }\r\n  // vault finalization task, called when owner calls finalize()\r\n  function finalization() internal {\r\n    if (goalReached()) {\r\n      vault.close();\r\n    } else {\r\n      vault.enableRefunds();\r\n    }\r\n    super.finalization();\r\n  }\r\n  function goalReached() public constant returns (bool) {\r\n    if (weiRaised >= goal) {\r\n      _goalReached = true;\r\n      return true;\r\n    } else if (_goalReached) {\r\n      return true;\r\n    } \r\n    else {\r\n      return false;\r\n    }\r\n  }\r\n  function updateGoalCheck() onlyOwner public {\r\n    _goalReached = true;\r\n  }\r\n  function getVaultAddress() onlyOwner public returns (address) {\r\n    return vault;\r\n  }\r\n}\r\n/**\r\n * @title BenebitToken\r\n * @author Hamza Yasin || Junaid Mushtaq\r\n */\r\ncontract BenebitToken is MintableToken {\r\n  string public constant name = \"BenebitToken\";\r\n  string public constant symbol = \"BNE\";\r\n  uint256 public constant decimals = 18;\r\n  uint256 public constant _totalSupply = 300000000 * 1 ether;\r\n  \r\n/** Constructor BenebitToken */\r\n  function BenebitToken() {\r\n    totalSupply = _totalSupply;\r\n  }\r\n}\r\ncontract BenebitICO is Crowdsale, CappedCrowdsale, RefundableCrowdsale {\r\n    uint256 _startTime = 1516626000;\r\n    uint256 _endTime = 1523365200; \r\n    uint256 _rate = 5800;\r\n    uint256 _goal = 5000 * 1 ether;\r\n    uint256 _cap = 22500 * 1 ether;\r\n    address _wallet  = 0x88BfBd2B464C15b245A9f7a563D207bd8A161054;   \r\n    /** Constructor BenebitICO */\r\n    function BenebitICO() \r\n    CappedCrowdsale(_cap)\r\n    FinalizableCrowdsale()\r\n    RefundableCrowdsale(_goal)\r\n    Crowdsale(_startTime,_endTime,_rate,_wallet) \r\n    {\r\n        \r\n    }\r\n    /** BenebitToken Contract is generating from here */\r\n    function createTokenContract() internal returns (MintableToken) {\r\n        return new BenebitToken();\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getTokenAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"updateGoalCheck\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"grantAdvisorToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"goal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"},{\"name\":\"valueToken\",\"type\":\"uint256\"}],\"name\":\"bountyFunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getVaultAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getPublicSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"goalReached\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"},{\"name\":\"valueToken\",\"type\":\"uint256\"}],\"name\":\"rewardsFunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preEndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ICOEndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"grantTeamToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimRefund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ICOstartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"burnToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Finalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"BenebitICO","CompilerVersion":"v0.4.17+commit.bdeb9e52","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://a452bc3275e59c7b97d895276820c7ad2fc2d5d56505e45c9369dd705fac2b61"}]}