{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title Claimable\r\n * @dev Extension for the Ownable contract, where the ownership needs to be claimed.\r\n * This allows the new owner to accept the transfer.\r\n */\r\ncontract Claimable is Ownable {\r\n  address public pendingOwner;\r\n\r\n  /**\r\n   * @dev Modifier throws if called by any account other than the pendingOwner.\r\n   */\r\n  modifier onlyPendingOwner() {\r\n    require(msg.sender == pendingOwner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to set the pendingOwner address.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    pendingOwner = newOwner;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the pendingOwner address to finalize the transfer.\r\n   */\r\n  function claimOwnership() onlyPendingOwner public {\r\n    OwnershipTransferred(owner, pendingOwner);\r\n    owner = pendingOwner;\r\n    pendingOwner = address(0);\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    Unpause();\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\r\n    assert(token.transfer(to, value));\r\n  }\r\n\r\n  function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\r\n    assert(token.transferFrom(from, to, value));\r\n  }\r\n\r\n  function safeApprove(ERC20 token, address spender, uint256 value) internal {\r\n    assert(token.approve(spender, value));\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title Contracts that should be able to recover tokens\r\n * @author SylTi\r\n * @dev This allow a contract to recover any ERC20 token received in a contract by transferring the balance to the contract owner.\r\n * This will prevent any accidental loss of tokens.\r\n */\r\ncontract CanReclaimToken is Ownable {\r\n  using SafeERC20 for ERC20Basic;\r\n\r\n  /**\r\n   * @dev Reclaim all ERC20Basic compatible tokens\r\n   * @param token ERC20Basic The address of the token contract\r\n   */\r\n  function reclaimToken(ERC20Basic token) external onlyOwner {\r\n    uint256 balance = token.balanceOf(this);\r\n    token.safeTransfer(owner, balance);\r\n  }\r\n\r\n}\r\n\r\n\r\n/// @title Interface for contracts conforming to ERC-721: Deed Standard\r\n/// @author William Entriken (https://phor.net), et al.\r\n/// @dev Specification at https://github.com/ethereum/EIPs/pull/841 (DRAFT)\r\ninterface ERC721 {\r\n\r\n    // COMPLIANCE WITH ERC-165 (DRAFT) /////////////////////////////////////////\r\n\r\n    /// @dev ERC-165 (draft) interface signature for itself\r\n    // bytes4 internal constant INTERFACE_SIGNATURE_ERC165 = // 0x01ffc9a7\r\n    //     bytes4(keccak256('supportsInterface(bytes4)'));\r\n\r\n    /// @dev ERC-165 (draft) interface signature for ERC721\r\n    // bytes4 internal constant INTERFACE_SIGNATURE_ERC721 = // 0xda671b9b\r\n    //     bytes4(keccak256('ownerOf(uint256)')) ^\r\n    //     bytes4(keccak256('countOfDeeds()')) ^\r\n    //     bytes4(keccak256('countOfDeedsByOwner(address)')) ^\r\n    //     bytes4(keccak256('deedOfOwnerByIndex(address,uint256)')) ^\r\n    //     bytes4(keccak256('approve(address,uint256)')) ^\r\n    //     bytes4(keccak256('takeOwnership(uint256)'));\r\n\r\n    /// @notice Query a contract to see if it supports a certain interface\r\n    /// @dev Returns `true` the interface is supported and `false` otherwise,\r\n    ///  returns `true` for INTERFACE_SIGNATURE_ERC165 and\r\n    ///  INTERFACE_SIGNATURE_ERC721, see ERC-165 for other interface signatures.\r\n    function supportsInterface(bytes4 _interfaceID) external pure returns (bool);\r\n\r\n    // PUBLIC QUERY FUNCTIONS //////////////////////////////////////////////////\r\n\r\n    /// @notice Find the owner of a deed\r\n    /// @param _deedId The identifier for a deed we are inspecting\r\n    /// @dev Deeds assigned to zero address are considered destroyed, and\r\n    ///  queries about them do throw.\r\n    /// @return The non-zero address of the owner of deed `_deedId`, or `throw`\r\n    ///  if deed `_deedId` is not tracked by this contract\r\n    function ownerOf(uint256 _deedId) external view returns (address _owner);\r\n\r\n    /// @notice Count deeds tracked by this contract\r\n    /// @return A count of the deeds tracked by this contract, where each one of\r\n    ///  them has an assigned and queryable owner\r\n    function countOfDeeds() public view returns (uint256 _count);\r\n\r\n    /// @notice Count all deeds assigned to an owner\r\n    /// @dev Throws if `_owner` is the zero address, representing destroyed deeds.\r\n    /// @param _owner An address where we are interested in deeds owned by them\r\n    /// @return The number of deeds owned by `_owner`, possibly zero\r\n    function countOfDeedsByOwner(address _owner) public view returns (uint256 _count);\r\n\r\n    /// @notice Enumerate deeds assigned to an owner\r\n    /// @dev Throws if `_index` >= `countOfDeedsByOwner(_owner)` or if\r\n    ///  `_owner` is the zero address, representing destroyed deeds.\r\n    /// @param _owner An address where we are interested in deeds owned by them\r\n    /// @param _index A counter between zero and `countOfDeedsByOwner(_owner)`,\r\n    ///  inclusive\r\n    /// @return The identifier for the `_index`th deed assigned to `_owner`,\r\n    ///   (sort order not specified)\r\n    function deedOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256 _deedId);\r\n\r\n    // TRANSFER MECHANISM //////////////////////////////////////////////////////\r\n\r\n    /// @dev This event emits when ownership of any deed changes by any\r\n    ///  mechanism. This event emits when deeds are created (`from` == 0) and\r\n    ///  destroyed (`to` == 0). Exception: during contract creation, any\r\n    ///  transfers may occur without emitting `Transfer`.\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed deedId);\r\n\r\n    /// @dev This event emits on any successful call to\r\n    ///  `approve(address _spender, uint256 _deedId)`. Exception: does not emit\r\n    ///  if an owner revokes approval (`_to` == 0x0) on a deed with no existing\r\n    ///  approval.\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed deedId);\r\n\r\n    /// @notice Approve a new owner to take your deed, or revoke approval by\r\n    ///  setting the zero address. You may `approve` any number of times while\r\n    ///  the deed is assigned to you, only the most recent approval matters.\r\n    /// @dev Throws if `msg.sender` does not own deed `_deedId` or if `_to` ==\r\n    ///  `msg.sender`.\r\n    /// @param _deedId The deed you are granting ownership of\r\n    function approve(address _to, uint256 _deedId) external;\r\n\r\n    /// @notice Become owner of a deed for which you are currently approved\r\n    /// @dev Throws if `msg.sender` is not approved to become the owner of\r\n    ///  `deedId` or if `msg.sender` currently owns `_deedId`.\r\n    /// @param _deedId The deed that is being transferred\r\n    function takeOwnership(uint256 _deedId) external;\r\n    \r\n    // SPEC EXTENSIONS /////////////////////////////////////////////////////////\r\n    \r\n    /// @notice Transfer a deed to a new owner.\r\n    /// @dev Throws if `msg.sender` does not own deed `_deedId` or if\r\n    ///  `_to` == 0x0.\r\n    /// @param _to The address of the new owner.\r\n    /// @param _deedId The deed you are transferring.\r\n    function transfer(address _to, uint256 _deedId) external;\r\n}\r\n\r\n\r\n/// @title Metadata extension to ERC-721 interface\r\n/// @author William Entriken (https://phor.net)\r\n/// @dev Specification at https://github.com/ethereum/EIPs/pull/841 (DRAFT)\r\ninterface ERC721Metadata {\r\n\r\n    /// @dev ERC-165 (draft) interface signature for ERC721\r\n    // bytes4 internal constant INTERFACE_SIGNATURE_ERC721Metadata = // 0x2a786f11\r\n    //     bytes4(keccak256('name()')) ^\r\n    //     bytes4(keccak256('symbol()')) ^\r\n    //     bytes4(keccak256('deedUri(uint256)'));\r\n\r\n    /// @notice A descriptive name for a collection of deeds managed by this\r\n    ///  contract\r\n    /// @dev Wallets and exchanges MAY display this to the end user.\r\n    function name() public pure returns (string _deedName);\r\n\r\n    /// @notice An abbreviated name for deeds managed by this contract\r\n    /// @dev Wallets and exchanges MAY display this to the end user.\r\n    function symbol() public pure returns (string _deedSymbol);\r\n\r\n    /// @notice A distinct URI (RFC 3986) for a given token.\r\n    /// @dev If:\r\n    ///  * The URI is a URL\r\n    ///  * The URL is accessible\r\n    ///  * The URL points to a valid JSON file format (ECMA-404 2nd ed.)\r\n    ///  * The JSON base element is an object\r\n    ///  then these names of the base element SHALL have special meaning:\r\n    ///  * \"name\": A string identifying the item to which `_deedId` grants\r\n    ///    ownership\r\n    ///  * \"description\": A string detailing the item to which `_deedId` grants\r\n    ///    ownership\r\n    ///  * \"image\": A URI pointing to a file of image/* mime type representing\r\n    ///    the item to which `_deedId` grants ownership\r\n    ///  Wallets and exchanges MAY display this to the end user.\r\n    ///  Consider making any images at a width between 320 and 1080 pixels and\r\n    ///  aspect ratio between 1.91:1 and 4:5 inclusive.\r\n    function deedUri(uint256 _deedId) external pure returns (string _uri);\r\n}\r\n\r\n\r\n/// @dev Implements access control to the DWorld contract.\r\ncontract DWorldAccessControl is Claimable, Pausable, CanReclaimToken {\r\n    address public cfoAddress;\r\n\r\n    function DWorldAccessControl() public {\r\n        // The creator of the contract is the initial CFO.\r\n        cfoAddress = msg.sender;\r\n    }\r\n    \r\n    /// @dev Access modifier for CFO-only functionality.\r\n    modifier onlyCFO() {\r\n        require(msg.sender == cfoAddress);\r\n        _;\r\n    }\r\n\r\n    /// @dev Assigns a new address to act as the CFO. Only available to the current contract owner.\r\n    /// @param _newCFO The address of the new CFO.\r\n    function setCFO(address _newCFO) external onlyOwner {\r\n        require(_newCFO != address(0));\r\n\r\n        cfoAddress = _newCFO;\r\n    }\r\n}\r\n\r\n\r\n/// @dev Defines base data structures for DWorld.\r\ncontract DWorldBase is DWorldAccessControl {\r\n    using SafeMath for uint256;\r\n    \r\n    /// @dev All minted plots (array of plot identifiers). There are\r\n    /// 2^16 * 2^16 possible plots (covering the entire world), thus\r\n    /// 32 bits are required. This fits in a uint32. Storing\r\n    /// the identifiers as uint32 instead of uint256 makes storage\r\n    /// cheaper. (The impact of this in mappings is less noticeable,\r\n    /// and using uint32 in the mappings below actually *increases*\r\n    /// gas cost for minting).\r\n    uint32[] public plots;\r\n    \r\n    mapping (uint256 => address) identifierToOwner;\r\n    mapping (uint256 => address) identifierToApproved;\r\n    mapping (address => uint256) ownershipDeedCount;\r\n    \r\n    /// @dev Event fired when a plot's data are changed. The plot\r\n    /// data are not stored in the contract directly, instead the\r\n    /// data are logged to the block. This gives significant\r\n    /// reductions in gas requirements (~75k for minting with data\r\n    /// instead of ~180k). However, it also means plot data are\r\n    /// not available from *within* other contracts.\r\n    event SetData(uint256 indexed deedId, string name, string description, string imageUrl, string infoUrl);\r\n    \r\n    /// @notice Get all minted plots.\r\n    function getAllPlots() external view returns(uint32[]) {\r\n        return plots;\r\n    }\r\n    \r\n    /// @dev Represent a 2D coordinate as a single uint.\r\n    /// @param x The x-coordinate.\r\n    /// @param y The y-coordinate.\r\n    function coordinateToIdentifier(uint256 x, uint256 y) public pure returns(uint256) {\r\n        require(validCoordinate(x, y));\r\n        \r\n        return (y << 16) + x;\r\n    }\r\n    \r\n    /// @dev Turn a single uint representation of a coordinate into its x and y parts.\r\n    /// @param identifier The uint representation of a coordinate.\r\n    function identifierToCoordinate(uint256 identifier) public pure returns(uint256 x, uint256 y) {\r\n        require(validIdentifier(identifier));\r\n    \r\n        y = identifier >> 16;\r\n        x = identifier - (y << 16);\r\n    }\r\n    \r\n    /// @dev Test whether the coordinate is valid.\r\n    /// @param x The x-part of the coordinate to test.\r\n    /// @param y The y-part of the coordinate to test.\r\n    function validCoordinate(uint256 x, uint256 y) public pure returns(bool) {\r\n        return x < 65536 && y < 65536; // 2^16\r\n    }\r\n    \r\n    /// @dev Test whether an identifier is valid.\r\n    /// @param identifier The identifier to test.\r\n    function validIdentifier(uint256 identifier) public pure returns(bool) {\r\n        return identifier < 4294967296; // 2^16 * 2^16\r\n    }\r\n    \r\n    /// @dev Set a plot's data.\r\n    /// @param identifier The identifier of the plot to set data for.\r\n    function _setPlotData(uint256 identifier, string name, string description, string imageUrl, string infoUrl) internal {\r\n        SetData(identifier, name, description, imageUrl, infoUrl);\r\n    }\r\n}\r\n\r\n\r\n/// @dev Holds deed functionality such as approving and transferring. Implements ERC721.\r\ncontract DWorldDeed is DWorldBase, ERC721, ERC721Metadata {\r\n    \r\n    /// @notice Name of the collection of deeds (non-fungible token), as defined in ERC721Metadata.\r\n    function name() public pure returns (string _deedName) {\r\n        _deedName = \"DWorld Plots\";\r\n    }\r\n    \r\n    /// @notice Symbol of the collection of deeds (non-fungible token), as defined in ERC721Metadata.\r\n    function symbol() public pure returns (string _deedSymbol) {\r\n        _deedSymbol = \"DWP\";\r\n    }\r\n    \r\n    /// @dev ERC-165 (draft) interface signature for itself\r\n    bytes4 internal constant INTERFACE_SIGNATURE_ERC165 = // 0x01ffc9a7\r\n        bytes4(keccak256('supportsInterface(bytes4)'));\r\n\r\n    /// @dev ERC-165 (draft) interface signature for ERC721\r\n    bytes4 internal constant INTERFACE_SIGNATURE_ERC721 = // 0xda671b9b\r\n        bytes4(keccak256('ownerOf(uint256)')) ^\r\n        bytes4(keccak256('countOfDeeds()')) ^\r\n        bytes4(keccak256('countOfDeedsByOwner(address)')) ^\r\n        bytes4(keccak256('deedOfOwnerByIndex(address,uint256)')) ^\r\n        bytes4(keccak256('approve(address,uint256)')) ^\r\n        bytes4(keccak256('takeOwnership(uint256)'));\r\n        \r\n    /// @dev ERC-165 (draft) interface signature for ERC721\r\n    bytes4 internal constant INTERFACE_SIGNATURE_ERC721Metadata = // 0x2a786f11\r\n        bytes4(keccak256('name()')) ^\r\n        bytes4(keccak256('symbol()')) ^\r\n        bytes4(keccak256('deedUri(uint256)'));\r\n    \r\n    /// @notice Introspection interface as per ERC-165 (https://github.com/ethereum/EIPs/issues/165).\r\n    /// Returns true for any standardized interfaces implemented by this contract.\r\n    /// (ERC-165 and ERC-721.)\r\n    function supportsInterface(bytes4 _interfaceID) external pure returns (bool) {\r\n        return (\r\n            (_interfaceID == INTERFACE_SIGNATURE_ERC165)\r\n            || (_interfaceID == INTERFACE_SIGNATURE_ERC721)\r\n            || (_interfaceID == INTERFACE_SIGNATURE_ERC721Metadata)\r\n        );\r\n    }\r\n    \r\n    /// @dev Checks if a given address owns a particular plot.\r\n    /// @param _owner The address of the owner to check for.\r\n    /// @param _deedId The plot identifier to check for.\r\n    function _owns(address _owner, uint256 _deedId) internal view returns (bool) {\r\n        return identifierToOwner[_deedId] == _owner;\r\n    }\r\n    \r\n    /// @dev Approve a given address to take ownership of a deed.\r\n    /// @param _from The address approving taking ownership.\r\n    /// @param _to The address to approve taking ownership.\r\n    /// @param _deedId The identifier of the deed to give approval for.\r\n    function _approve(address _from, address _to, uint256 _deedId) internal {\r\n        identifierToApproved[_deedId] = _to;\r\n        \r\n        // Emit event.\r\n        Approval(_from, _to, _deedId);\r\n    }\r\n    \r\n    /// @dev Checks if a given address has approval to take ownership of a deed.\r\n    /// @param _claimant The address of the claimant to check for.\r\n    /// @param _deedId The identifier of the deed to check for.\r\n    function _approvedFor(address _claimant, uint256 _deedId) internal view returns (bool) {\r\n        return identifierToApproved[_deedId] == _claimant;\r\n    }\r\n    \r\n    /// @dev Assigns ownership of a specific deed to an address.\r\n    /// @param _from The address to transfer the deed from.\r\n    /// @param _to The address to transfer the deed to.\r\n    /// @param _deedId The identifier of the deed to transfer.\r\n    function _transfer(address _from, address _to, uint256 _deedId) internal {\r\n        // The number of plots is capped at 2^16 * 2^16, so this cannot\r\n        // be overflowed.\r\n        ownershipDeedCount[_to]++;\r\n        \r\n        // Transfer ownership.\r\n        identifierToOwner[_deedId] = _to;\r\n        \r\n        // When a new deed is minted, the _from address is 0x0, but we\r\n        // do not track deed ownership of 0x0.\r\n        if (_from != address(0)) {\r\n            ownershipDeedCount[_from]--;\r\n            \r\n            // Clear taking ownership approval.\r\n            delete identifierToApproved[_deedId];\r\n        }\r\n        \r\n        // Emit the transfer event.\r\n        Transfer(_from, _to, _deedId);\r\n    }\r\n    \r\n    // ERC 721 implementation\r\n    \r\n    /// @notice Returns the total number of deeds currently in existence.\r\n    /// @dev Required for ERC-721 compliance.\r\n    function countOfDeeds() public view returns (uint256) {\r\n        return plots.length;\r\n    }\r\n    \r\n    /// @notice Returns the number of deeds owned by a specific address.\r\n    /// @param _owner The owner address to check.\r\n    /// @dev Required for ERC-721 compliance\r\n    function countOfDeedsByOwner(address _owner) public view returns (uint256) {\r\n        return ownershipDeedCount[_owner];\r\n    }\r\n    \r\n    /// @notice Returns the address currently assigned ownership of a given deed.\r\n    /// @dev Required for ERC-721 compliance.\r\n    function ownerOf(uint256 _deedId) external view returns (address _owner) {\r\n        _owner = identifierToOwner[_deedId];\r\n\r\n        require(_owner != address(0));\r\n    }\r\n    \r\n    /// @notice Approve a given address to take ownership of a deed.\r\n    /// @param _to The address to approve taking owernship.\r\n    /// @param _deedId The identifier of the deed to give approval for.\r\n    /// @dev Required for ERC-721 compliance.\r\n    function approve(address _to, uint256 _deedId) external whenNotPaused {\r\n        uint256[] memory _deedIds = new uint256[](1);\r\n        _deedIds[0] = _deedId;\r\n        \r\n        approveMultiple(_to, _deedIds);\r\n    }\r\n    \r\n    /// @notice Approve a given address to take ownership of multiple deeds.\r\n    /// @param _to The address to approve taking ownership.\r\n    /// @param _deedIds The identifiers of the deeds to give approval for.\r\n    function approveMultiple(address _to, uint256[] _deedIds) public whenNotPaused {\r\n        // Ensure the sender is not approving themselves.\r\n        require(msg.sender != _to);\r\n    \r\n        for (uint256 i = 0; i < _deedIds.length; i++) {\r\n            uint256 _deedId = _deedIds[i];\r\n            \r\n            // Require the sender is the owner of the deed.\r\n            require(_owns(msg.sender, _deedId));\r\n            \r\n            // Perform the approval.\r\n            _approve(msg.sender, _to, _deedId);\r\n        }\r\n    }\r\n    \r\n    /// @notice Transfer a deed to another address. If transferring to a smart\r\n    /// contract be VERY CAREFUL to ensure that it is aware of ERC-721, or your\r\n    /// deed may be lost forever.\r\n    /// @param _to The address of the recipient, can be a user or contract.\r\n    /// @param _deedId The identifier of the deed to transfer.\r\n    /// @dev Required for ERC-721 compliance.\r\n    function transfer(address _to, uint256 _deedId) external whenNotPaused {\r\n        uint256[] memory _deedIds = new uint256[](1);\r\n        _deedIds[0] = _deedId;\r\n        \r\n        transferMultiple(_to, _deedIds);\r\n    }\r\n    \r\n    /// @notice Transfers multiple deeds to another address. If transferring to\r\n    /// a smart contract be VERY CAREFUL to ensure that it is aware of ERC-721,\r\n    /// or your deeds may be lost forever.\r\n    /// @param _to The address of the recipient, can be a user or contract.\r\n    /// @param _deedIds The identifiers of the deeds to transfer.\r\n    function transferMultiple(address _to, uint256[] _deedIds) public whenNotPaused {\r\n        // Safety check to prevent against an unexpected 0x0 default.\r\n        require(_to != address(0));\r\n        \r\n        // Disallow transfers to this contract to prevent accidental misuse.\r\n        require(_to != address(this));\r\n    \r\n        for (uint256 i = 0; i < _deedIds.length; i++) {\r\n            uint256 _deedId = _deedIds[i];\r\n            \r\n            // One can only transfer their own plots.\r\n            require(_owns(msg.sender, _deedId));\r\n\r\n            // Transfer ownership\r\n            _transfer(msg.sender, _to, _deedId);\r\n        }\r\n    }\r\n    \r\n    /// @notice Transfer a deed owned by another address, for which the calling\r\n    /// address has previously been granted transfer approval by the owner.\r\n    /// @param _deedId The identifier of the deed to be transferred.\r\n    /// @dev Required for ERC-721 compliance.\r\n    function takeOwnership(uint256 _deedId) external whenNotPaused {\r\n        uint256[] memory _deedIds = new uint256[](1);\r\n        _deedIds[0] = _deedId;\r\n        \r\n        takeOwnershipMultiple(_deedIds);\r\n    }\r\n    \r\n    /// @notice Transfer multiple deeds owned by another address, for which the\r\n    /// calling address has previously been granted transfer approval by the owner.\r\n    /// @param _deedIds The identifier of the deed to be transferred.\r\n    function takeOwnershipMultiple(uint256[] _deedIds) public whenNotPaused {\r\n        for (uint256 i = 0; i < _deedIds.length; i++) {\r\n            uint256 _deedId = _deedIds[i];\r\n            address _from = identifierToOwner[_deedId];\r\n            \r\n            // Check for transfer approval\r\n            require(_approvedFor(msg.sender, _deedId));\r\n\r\n            // Reassign ownership (also clears pending approvals and emits Transfer event).\r\n            _transfer(_from, msg.sender, _deedId);\r\n        }\r\n    }\r\n    \r\n    /// @notice Returns a list of all deed identifiers assigned to an address.\r\n    /// @param _owner The owner whose deeds we are interested in.\r\n    /// @dev This method MUST NEVER be called by smart contract code. It's very\r\n    /// expensive and is not supported in contract-to-contract calls as it returns\r\n    /// a dynamic array (only supported for web3 calls).\r\n    function deedsOfOwner(address _owner) external view returns(uint256[]) {\r\n        uint256 deedCount = countOfDeedsByOwner(_owner);\r\n\r\n        if (deedCount == 0) {\r\n            // Return an empty array.\r\n            return new uint256[](0);\r\n        } else {\r\n            uint256[] memory result = new uint256[](deedCount);\r\n            uint256 totalDeeds = countOfDeeds();\r\n            uint256 resultIndex = 0;\r\n            \r\n            for (uint256 deedNumber = 0; deedNumber < totalDeeds; deedNumber++) {\r\n                uint256 identifier = plots[deedNumber];\r\n                if (identifierToOwner[identifier] == _owner) {\r\n                    result[resultIndex] = identifier;\r\n                    resultIndex++;\r\n                }\r\n            }\r\n\r\n            return result;\r\n        }\r\n    }\r\n    \r\n    /// @notice Returns a deed identifier of the owner at the given index.\r\n    /// @param _owner The address of the owner we want to get a deed for.\r\n    /// @param _index The index of the deed we want.\r\n    function deedOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256) {\r\n        // The index should be valid.\r\n        require(_index < countOfDeedsByOwner(_owner));\r\n\r\n        // Loop through all plots, accounting the number of plots of the owner we've seen.\r\n        uint256 seen = 0;\r\n        uint256 totalDeeds = countOfDeeds();\r\n        \r\n        for (uint256 deedNumber = 0; deedNumber < totalDeeds; deedNumber++) {\r\n            uint256 identifier = plots[deedNumber];\r\n            if (identifierToOwner[identifier] == _owner) {\r\n                if (seen == _index) {\r\n                    return identifier;\r\n                }\r\n                \r\n                seen++;\r\n            }\r\n        }\r\n    }\r\n    \r\n    /// @notice Returns an (off-chain) metadata url for the given deed.\r\n    /// @param _deedId The identifier of the deed to get the metadata\r\n    /// url for.\r\n    /// @dev Implementation of optional ERC-721 functionality.\r\n    function deedUri(uint256 _deedId) external pure returns (string uri) {\r\n        require(validIdentifier(_deedId));\r\n    \r\n        var (x, y) = identifierToCoordinate(_deedId);\r\n    \r\n        // Maximum coordinate length in decimals is 5 (65535)\r\n        uri = \"https://dworld.io/plot/xxxxx/xxxxx\";\r\n        bytes memory _uri = bytes(uri);\r\n        \r\n        for (uint256 i = 0; i < 5; i++) {\r\n            _uri[27 - i] = byte(48 + (x / 10 ** i) % 10);\r\n            _uri[33 - i] = byte(48 + (y / 10 ** i) % 10);\r\n        }\r\n    }\r\n}\r\n\r\n\r\n/// @dev Implements renting functionality.\r\ncontract DWorldRenting is DWorldDeed {\r\n    event Rent(address indexed renter, uint256 indexed deedId, uint256 rentPeriodEndTimestamp, uint256 rentPeriod);\r\n    mapping (uint256 => address) identifierToRenter;\r\n    mapping (uint256 => uint256) identifierToRentPeriodEndTimestamp;\r\n\r\n    /// @dev Checks if a given address rents a particular plot.\r\n    /// @param _renter The address of the renter to check for.\r\n    /// @param _deedId The plot identifier to check for.\r\n    function _rents(address _renter, uint256 _deedId) internal view returns (bool) {\r\n        return identifierToRenter[_deedId] == _renter && identifierToRentPeriodEndTimestamp[_deedId] >= now;\r\n    }\r\n    \r\n    /// @dev Rent out a deed to an address.\r\n    /// @param _to The address to rent the deed out to.\r\n    /// @param _rentPeriod The rent period in seconds.\r\n    /// @param _deedId The identifier of the deed to rent out.\r\n    function _rentOut(address _to, uint256 _rentPeriod, uint256 _deedId) internal {\r\n        // Set the renter and rent period end timestamp\r\n        uint256 rentPeriodEndTimestamp = now.add(_rentPeriod);\r\n        identifierToRenter[_deedId] = _to;\r\n        identifierToRentPeriodEndTimestamp[_deedId] = rentPeriodEndTimestamp;\r\n        \r\n        Rent(_to, _deedId, rentPeriodEndTimestamp, _rentPeriod);\r\n    }\r\n    \r\n    /// @notice Rents a plot out to another address.\r\n    /// @param _to The address of the renter, can be a user or contract.\r\n    /// @param _rentPeriod The rent time period in seconds.\r\n    /// @param _deedId The identifier of the plot to rent out.\r\n    function rentOut(address _to, uint256 _rentPeriod, uint256 _deedId) external whenNotPaused {\r\n        uint256[] memory _deedIds = new uint256[](1);\r\n        _deedIds[0] = _deedId;\r\n        \r\n        rentOutMultiple(_to, _rentPeriod, _deedIds);\r\n    }\r\n    \r\n    /// @notice Rents multiple plots out to another address.\r\n    /// @param _to The address of the renter, can be a user or contract.\r\n    /// @param _rentPeriod The rent time period in seconds.\r\n    /// @param _deedIds The identifiers of the plots to rent out.\r\n    function rentOutMultiple(address _to, uint256 _rentPeriod, uint256[] _deedIds) public whenNotPaused {\r\n        // Safety check to prevent against an unexpected 0x0 default.\r\n        require(_to != address(0));\r\n        \r\n        // Disallow transfers to this contract to prevent accidental misuse.\r\n        require(_to != address(this));\r\n        \r\n        for (uint256 i = 0; i < _deedIds.length; i++) {\r\n            uint256 _deedId = _deedIds[i];\r\n            \r\n            require(validIdentifier(_deedId));\r\n        \r\n            // There should not be an active renter.\r\n            require(identifierToRentPeriodEndTimestamp[_deedId] < now);\r\n            \r\n            // One can only rent out their own plots.\r\n            require(_owns(msg.sender, _deedId));\r\n            \r\n            _rentOut(_to, _rentPeriod, _deedId);\r\n        }\r\n    }\r\n    \r\n    /// @notice Returns the address of the currently assigned renter and\r\n    /// end time of the rent period of a given plot.\r\n    /// @param _deedId The identifier of the deed to get the renter and \r\n    /// rent period for.\r\n    function renterOf(uint256 _deedId) external view returns (address _renter, uint256 _rentPeriodEndTimestamp) {\r\n        require(validIdentifier(_deedId));\r\n    \r\n        if (identifierToRentPeriodEndTimestamp[_deedId] < now) {\r\n            // There is no active renter\r\n            _renter = address(0);\r\n            _rentPeriodEndTimestamp = 0;\r\n        } else {\r\n            _renter = identifierToRenter[_deedId];\r\n            _rentPeriodEndTimestamp = identifierToRentPeriodEndTimestamp[_deedId];\r\n        }\r\n    }\r\n}\r\n\r\n\r\n/// @title The internal clock auction functionality.\r\n/// Inspired by CryptoKitties' clock auction\r\ncontract ClockAuctionBase {\r\n\r\n    // Address of the ERC721 contract this auction is linked to.\r\n    ERC721 public deedContract;\r\n\r\n    // Fee per successful auction in 1/1000th of a percentage.\r\n    uint256 public fee;\r\n    \r\n    // Total amount of ether yet to be paid to auction beneficiaries.\r\n    uint256 public outstandingEther = 0 ether;\r\n    \r\n    // Amount of ether yet to be paid per beneficiary.\r\n    mapping (address => uint256) public addressToEtherOwed;\r\n    \r\n    /// @dev Represents a deed auction.\r\n    /// Care has been taken to ensure the auction fits in\r\n    /// two 256-bit words.\r\n    struct Auction {\r\n        address seller;\r\n        uint128 startPrice;\r\n        uint128 endPrice;\r\n        uint64 duration;\r\n        uint64 startedAt;\r\n    }\r\n\r\n    mapping (uint256 => Auction) identifierToAuction;\r\n    \r\n    // Events\r\n    event AuctionCreated(address indexed seller, uint256 indexed deedId, uint256 startPrice, uint256 endPrice, uint256 duration);\r\n    event AuctionSuccessful(address indexed buyer, uint256 indexed deedId, uint256 totalPrice);\r\n    event AuctionCancelled(uint256 indexed deedId);\r\n    \r\n    /// @dev Modifier to check whether the value can be stored in a 64 bit uint.\r\n    modifier fitsIn64Bits(uint256 _value) {\r\n        require (_value == uint256(uint64(_value)));\r\n        _;\r\n    }\r\n    \r\n    /// @dev Modifier to check whether the value can be stored in a 128 bit uint.\r\n    modifier fitsIn128Bits(uint256 _value) {\r\n        require (_value == uint256(uint128(_value)));\r\n        _;\r\n    }\r\n    \r\n    function ClockAuctionBase(address _deedContractAddress, uint256 _fee) public {\r\n        deedContract = ERC721(_deedContractAddress);\r\n        \r\n        // Contract must indicate support for ERC721 through its interface signature.\r\n        require(deedContract.supportsInterface(0xda671b9b));\r\n        \r\n        // Fee must be between 0 and 100%.\r\n        require(0 <= _fee && _fee <= 100000);\r\n        fee = _fee;\r\n    }\r\n    \r\n    /// @dev Checks whether the given auction is active.\r\n    /// @param auction The auction to check for activity.\r\n    function _activeAuction(Auction storage auction) internal view returns (bool) {\r\n        return auction.startedAt > 0;\r\n    }\r\n    \r\n    /// @dev Put the deed into escrow, thereby taking ownership of it.\r\n    /// @param _deedId The identifier of the deed to place into escrow.\r\n    function _escrow(uint256 _deedId) internal {\r\n        // Throws if the transfer fails\r\n        deedContract.takeOwnership(_deedId);\r\n    }\r\n    \r\n    /// @dev Create the auction.\r\n    /// @param _deedId The identifier of the deed to create the auction for.\r\n    /// @param auction The auction to create.\r\n    function _createAuction(uint256 _deedId, Auction auction) internal {\r\n        // Add the auction to the auction mapping.\r\n        identifierToAuction[_deedId] = auction;\r\n        \r\n        // Trigger auction created event.\r\n        AuctionCreated(auction.seller, _deedId, auction.startPrice, auction.endPrice, auction.duration);\r\n    }\r\n    \r\n    /// @dev Bid on an auction.\r\n    /// @param _buyer The address of the buyer.\r\n    /// @param _value The value sent by the sender (in ether).\r\n    /// @param _deedId The identifier of the deed to bid on.\r\n    function _bid(address _buyer, uint256 _value, uint256 _deedId) internal {\r\n        Auction storage auction = identifierToAuction[_deedId];\r\n        \r\n        // The auction must be active.\r\n        require(_activeAuction(auction));\r\n        \r\n        // Calculate the auction's current price.\r\n        uint256 price = _currentPrice(auction);\r\n        \r\n        // Make sure enough funds were sent.\r\n        require(_value >= price);\r\n        \r\n        address seller = auction.seller;\r\n    \r\n        if (price > 0) {\r\n            uint256 totalFee = _calculateFee(price);\r\n            uint256 proceeds = price - totalFee;\r\n            \r\n            // Assign the proceeds to the seller.\r\n            // We do not send the proceeds directly, as to prevent\r\n            // malicious sellers from denying auctions (and burning\r\n            // the buyer's gas).\r\n            _assignProceeds(seller, proceeds);\r\n        }\r\n        \r\n        AuctionSuccessful(_buyer, _deedId, price);\r\n        \r\n        // The bid was won!\r\n        _winBid(seller, _buyer, _deedId, price);\r\n        \r\n        // Remove the auction (we do this at the end, as\r\n        // winBid might require some additional information\r\n        // that will be removed when _removeAuction is\r\n        // called. As we do not transfer funds here, we do\r\n        // not have to worry about re-entry attacks.\r\n        _removeAuction(_deedId);\r\n    }\r\n\r\n    /// @dev Perform the bid win logic (in this case: transfer the deed).\r\n    /// @param _seller The address of the seller.\r\n    /// @param _winner The address of the winner.\r\n    /// @param _deedId The identifier of the deed.\r\n    /// @param _price The price the auction was bought at.\r\n    function _winBid(address _seller, address _winner, uint256 _deedId, uint256 _price) internal {\r\n        _transfer(_winner, _deedId);\r\n    }\r\n    \r\n    /// @dev Cancel an auction.\r\n    /// @param _deedId The identifier of the deed for which the auction should be cancelled.\r\n    /// @param auction The auction to cancel.\r\n    function _cancelAuction(uint256 _deedId, Auction auction) internal {\r\n        // Remove the auction\r\n        _removeAuction(_deedId);\r\n        \r\n        // Transfer the deed back to the seller\r\n        _transfer(auction.seller, _deedId);\r\n        \r\n        // Trigger auction cancelled event.\r\n        AuctionCancelled(_deedId);\r\n    }\r\n    \r\n    /// @dev Remove an auction.\r\n    /// @param _deedId The identifier of the deed for which the auction should be removed.\r\n    function _removeAuction(uint256 _deedId) internal {\r\n        delete identifierToAuction[_deedId];\r\n    }\r\n    \r\n    /// @dev Transfer a deed owned by this contract to another address.\r\n    /// @param _to The address to transfer the deed to.\r\n    /// @param _deedId The identifier of the deed.\r\n    function _transfer(address _to, uint256 _deedId) internal {\r\n        // Throws if the transfer fails\r\n        deedContract.transfer(_to, _deedId);\r\n    }\r\n    \r\n    /// @dev Assign proceeds to an address.\r\n    /// @param _to The address to assign proceeds to.\r\n    /// @param _value The proceeds to assign.\r\n    function _assignProceeds(address _to, uint256 _value) internal {\r\n        outstandingEther += _value;\r\n        addressToEtherOwed[_to] += _value;\r\n    }\r\n    \r\n    /// @dev Calculate the current price of an auction.\r\n    function _currentPrice(Auction storage _auction) internal view returns (uint256) {\r\n        require(now >= _auction.startedAt);\r\n        \r\n        uint256 secondsPassed = now - _auction.startedAt;\r\n        \r\n        if (secondsPassed >= _auction.duration) {\r\n            return _auction.endPrice;\r\n        } else {\r\n            // Negative if the end price is higher than the start price!\r\n            int256 totalPriceChange = int256(_auction.endPrice) - int256(_auction.startPrice);\r\n            \r\n            // Calculate the current price based on the total change over the entire\r\n            // auction duration, and the amount of time passed since the start of the\r\n            // auction.\r\n            int256 currentPriceChange = totalPriceChange * int256(secondsPassed) / int256(_auction.duration);\r\n            \r\n            // Calculate the final price. Note this once again\r\n            // is representable by a uint256, as the price can\r\n            // never be negative.\r\n            int256 price = int256(_auction.startPrice) + currentPriceChange;\r\n            \r\n            // This never throws.\r\n            assert(price >= 0);\r\n            \r\n            return uint256(price);\r\n        }\r\n    }\r\n    \r\n    /// @dev Calculate the fee for a given price.\r\n    /// @param _price The price to calculate the fee for.\r\n    function _calculateFee(uint256 _price) internal view returns (uint256) {\r\n        // _price is guaranteed to fit in a uint128 due to the createAuction entry\r\n        // modifiers, so this cannot overflow.\r\n        return _price * fee / 100000;\r\n    }\r\n}\r\n\r\n\r\ncontract ClockAuction is ClockAuctionBase, Pausable {\r\n    function ClockAuction(address _deedContractAddress, uint256 _fee) \r\n        ClockAuctionBase(_deedContractAddress, _fee)\r\n        public\r\n    {}\r\n    \r\n    /// @notice Update the auction fee.\r\n    /// @param _fee The new fee.\r\n    function setFee(uint256 _fee) external onlyOwner {\r\n        require(0 <= _fee && _fee <= 100000);\r\n    \r\n        fee = _fee;\r\n    }\r\n    \r\n    /// @notice Get the auction for the given deed.\r\n    /// @param _deedId The identifier of the deed to get the auction for.\r\n    /// @dev Throws if there is no auction for the given deed.\r\n    function getAuction(uint256 _deedId) external view returns (\r\n            address seller,\r\n            uint256 startPrice,\r\n            uint256 endPrice,\r\n            uint256 duration,\r\n            uint256 startedAt\r\n        )\r\n    {\r\n        Auction storage auction = identifierToAuction[_deedId];\r\n        \r\n        // The auction must be active\r\n        require(_activeAuction(auction));\r\n        \r\n        return (\r\n            auction.seller,\r\n            auction.startPrice,\r\n            auction.endPrice,\r\n            auction.duration,\r\n            auction.startedAt\r\n        );\r\n    }\r\n\r\n    /// @notice Create an auction for a given deed.\r\n    /// Must previously have been given approval to take ownership of the deed.\r\n    /// @param _deedId The identifier of the deed to create an auction for.\r\n    /// @param _startPrice The starting price of the auction.\r\n    /// @param _endPrice The ending price of the auction.\r\n    /// @param _duration The duration in seconds of the dynamic pricing part of the auction.\r\n    function createAuction(uint256 _deedId, uint256 _startPrice, uint256 _endPrice, uint256 _duration)\r\n        public\r\n        fitsIn128Bits(_startPrice)\r\n        fitsIn128Bits(_endPrice)\r\n        fitsIn64Bits(_duration)\r\n        whenNotPaused\r\n    {\r\n        // Get the owner of the deed to be auctioned\r\n        address deedOwner = deedContract.ownerOf(_deedId);\r\n    \r\n        // Caller must either be the deed contract or the owner of the deed\r\n        // to prevent abuse.\r\n        require(\r\n            msg.sender == address(deedContract) ||\r\n            msg.sender == deedOwner\r\n        );\r\n    \r\n        // The duration of the auction must be at least 60 seconds.\r\n        require(_duration >= 60);\r\n    \r\n        // Throws if placing the deed in escrow fails (the contract requires\r\n        // transfer approval prior to creating the auction).\r\n        _escrow(_deedId);\r\n        \r\n        // Auction struct\r\n        Auction memory auction = Auction(\r\n            deedOwner,\r\n            uint128(_startPrice),\r\n            uint128(_endPrice),\r\n            uint64(_duration),\r\n            uint64(now)\r\n        );\r\n        \r\n        _createAuction(_deedId, auction);\r\n    }\r\n    \r\n    /// @notice Cancel an auction\r\n    /// @param _deedId The identifier of the deed to cancel the auction for.\r\n    function cancelAuction(uint256 _deedId) external whenNotPaused {\r\n        Auction storage auction = identifierToAuction[_deedId];\r\n        \r\n        // The auction must be active.\r\n        require(_activeAuction(auction));\r\n        \r\n        // The auction can only be cancelled by the seller\r\n        require(msg.sender == auction.seller);\r\n        \r\n        _cancelAuction(_deedId, auction);\r\n    }\r\n    \r\n    /// @notice Bid on an auction.\r\n    /// @param _deedId The identifier of the deed to bid on.\r\n    function bid(uint256 _deedId) external payable whenNotPaused {\r\n        // Throws if the bid does not succeed.\r\n        _bid(msg.sender, msg.value, _deedId);\r\n    }\r\n    \r\n    /// @dev Returns the current price of an auction.\r\n    /// @param _deedId The identifier of the deed to get the currency price for.\r\n    function getCurrentPrice(uint256 _deedId) external view returns (uint256) {\r\n        Auction storage auction = identifierToAuction[_deedId];\r\n        \r\n        // The auction must be active.\r\n        require(_activeAuction(auction));\r\n        \r\n        return _currentPrice(auction);\r\n    }\r\n    \r\n    /// @notice Withdraw ether owed to a beneficiary.\r\n    /// @param beneficiary The address to withdraw the auction balance for.\r\n    function withdrawAuctionBalance(address beneficiary) external {\r\n        // The sender must either be the beneficiary or the core deed contract.\r\n        require(\r\n            msg.sender == beneficiary ||\r\n            msg.sender == address(deedContract)\r\n        );\r\n        \r\n        uint256 etherOwed = addressToEtherOwed[beneficiary];\r\n        \r\n        // Ensure ether is owed to the beneficiary.\r\n        require(etherOwed > 0);\r\n         \r\n        // Set ether owed to 0   \r\n        delete addressToEtherOwed[beneficiary];\r\n        \r\n        // Subtract from total outstanding balance. etherOwed is guaranteed\r\n        // to be less than or equal to outstandingEther, so this cannot\r\n        // underflow.\r\n        outstandingEther -= etherOwed;\r\n        \r\n        // Transfer ether owed to the beneficiary (not susceptible to re-entry\r\n        // attack, as the ether owed is set to 0 before the transfer takes place).\r\n        beneficiary.transfer(etherOwed);\r\n    }\r\n    \r\n    /// @notice Withdraw (unowed) contract balance.\r\n    function withdrawFreeBalance() external {\r\n        // Calculate the free (unowed) balance. This never underflows, as\r\n        // outstandingEther is guaranteed to be less than or equal to the\r\n        // contract balance.\r\n        uint256 freeBalance = this.balance - outstandingEther;\r\n        \r\n        address deedContractAddress = address(deedContract);\r\n\r\n        require(\r\n            msg.sender == owner ||\r\n            msg.sender == deedContractAddress\r\n        );\r\n        \r\n        deedContractAddress.transfer(freeBalance);\r\n    }\r\n}\r\n\r\n\r\ncontract SaleAuction is ClockAuction {\r\n    function SaleAuction(address _deedContractAddress, uint256 _fee) ClockAuction(_deedContractAddress, _fee) public {}\r\n    \r\n    /// @dev Allows other contracts to check whether this is the expected contract.\r\n    bool public isSaleAuction = true;\r\n}\r\n\r\n\r\ncontract RentAuction is ClockAuction {\r\n    function RentAuction(address _deedContractAddress, uint256 _fee) ClockAuction(_deedContractAddress, _fee) public {}\r\n    \r\n    /// @dev Allows other contracts to check whether this is the expected contract.\r\n    bool public isRentAuction = true;\r\n    \r\n    mapping (uint256 => uint256) public identifierToRentPeriod;\r\n    \r\n    /// @notice Create an auction for a given deed. Be careful when calling\r\n    /// createAuction for a RentAuction, that this overloaded function (including\r\n    /// the _rentPeriod parameter) is used. Otherwise the rent period defaults to\r\n    /// a week.\r\n    /// Must previously have been given approval to take ownership of the deed.\r\n    /// @param _deedId The identifier of the deed to create an auction for.\r\n    /// @param _startPrice The starting price of the auction.\r\n    /// @param _endPrice The ending price of the auction.\r\n    /// @param _duration The duration in seconds of the dynamic pricing part of the auction.\r\n    /// @param _rentPeriod The rent period in seconds being auctioned.\r\n    function createAuction(\r\n        uint256 _deedId,\r\n        uint256 _startPrice,\r\n        uint256 _endPrice,\r\n        uint256 _duration,\r\n        uint256 _rentPeriod\r\n    )\r\n        external\r\n    {\r\n        // Require the rent period to be at least one hour.\r\n        require(_rentPeriod >= 3600);\r\n        \r\n        // Require there to be no active renter.\r\n        DWorldRenting dWorldRentingContract = DWorldRenting(deedContract);\r\n        var (renter,) = dWorldRentingContract.renterOf(_deedId);\r\n        require(renter == address(0));\r\n    \r\n        // Set the rent period.\r\n        identifierToRentPeriod[_deedId] = _rentPeriod;\r\n    \r\n        // Throws (reverts) if creating the auction fails.\r\n        createAuction(_deedId, _startPrice, _endPrice, _duration);\r\n    }\r\n    \r\n    /// @dev Perform the bid win logic (in this case: give renter status to the winner).\r\n    /// @param _seller The address of the seller.\r\n    /// @param _winner The address of the winner.\r\n    /// @param _deedId The identifier of the deed.\r\n    /// @param _price The price the auction was bought at.\r\n    function _winBid(address _seller, address _winner, uint256 _deedId, uint256 _price) internal {\r\n        DWorldRenting dWorldRentingContract = DWorldRenting(deedContract);\r\n    \r\n        uint256 rentPeriod = identifierToRentPeriod[_deedId];\r\n        if (rentPeriod == 0) {\r\n            rentPeriod = 604800; // 1 week by default\r\n        }\r\n    \r\n        // Rent the deed out to the winner.\r\n        dWorldRentingContract.rentOut(_winner, identifierToRentPeriod[_deedId], _deedId);\r\n        \r\n        // Transfer the deed back to the seller.\r\n        _transfer(_seller, _deedId);\r\n    }\r\n    \r\n    /// @dev Remove an auction.\r\n    /// @param _deedId The identifier of the deed for which the auction should be removed.\r\n    function _removeAuction(uint256 _deedId) internal {\r\n        delete identifierToAuction[_deedId];\r\n        delete identifierToRentPeriod[_deedId];\r\n    }\r\n}\r\n\r\n\r\n/// @dev Holds functionality for minting new plot deeds.\r\ncontract DWorldMinting is DWorldRenting {\r\n    uint256 public unclaimedPlotPrice = 0.0025 ether;\r\n    mapping (address => uint256) freeClaimAllowance;\r\n    \r\n    /// @notice Sets the new price for unclaimed plots.\r\n    /// @param _unclaimedPlotPrice The new price for unclaimed plots.\r\n    function setUnclaimedPlotPrice(uint256 _unclaimedPlotPrice) external onlyCFO {\r\n        unclaimedPlotPrice = _unclaimedPlotPrice;\r\n    }\r\n    \r\n    /// @notice Set the free claim allowance for an address.\r\n    /// @param addr The address to set the free claim allowance for.\r\n    /// @param allowance The free claim allowance to set.\r\n    function setFreeClaimAllowance(address addr, uint256 allowance) external onlyCFO {\r\n        freeClaimAllowance[addr] = allowance;\r\n    }\r\n    \r\n    /// @notice Get the free claim allowance of an address.\r\n    /// @param addr The address to get the free claim allowance of.\r\n    function freeClaimAllowanceOf(address addr) external view returns (uint256) {\r\n        return freeClaimAllowance[addr];\r\n    }\r\n       \r\n    /// @notice Buy an unclaimed plot.\r\n    /// @param _deedId The unclaimed plot to buy.\r\n    function claimPlot(uint256 _deedId) external payable whenNotPaused {\r\n        claimPlotWithData(_deedId, \"\", \"\", \"\", \"\");\r\n    }\r\n       \r\n    /// @notice Buy an unclaimed plot.\r\n    /// @param _deedId The unclaimed plot to buy.\r\n    /// @param name The name to give the plot.\r\n    /// @param description The description to add to the plot.\r\n    /// @param imageUrl The image url for the plot.\r\n    /// @param infoUrl The info url for the plot.\r\n    function claimPlotWithData(uint256 _deedId, string name, string description, string imageUrl, string infoUrl) public payable whenNotPaused {\r\n        uint256[] memory _deedIds = new uint256[](1);\r\n        _deedIds[0] = _deedId;\r\n        \r\n        claimPlotMultipleWithData(_deedIds, name, description, imageUrl, infoUrl);\r\n    }\r\n    \r\n    /// @notice Buy unclaimed plots.\r\n    /// @param _deedIds The unclaimed plots to buy.\r\n    function claimPlotMultiple(uint256[] _deedIds) external payable whenNotPaused {\r\n        claimPlotMultipleWithData(_deedIds, \"\", \"\", \"\", \"\");\r\n    }\r\n    \r\n    /// @notice Buy unclaimed plots.\r\n    /// @param _deedIds The unclaimed plots to buy.\r\n    /// @param name The name to give the plots.\r\n    /// @param description The description to add to the plots.\r\n    /// @param imageUrl The image url for the plots.\r\n    /// @param infoUrl The info url for the plots.\r\n    function claimPlotMultipleWithData(uint256[] _deedIds, string name, string description, string imageUrl, string infoUrl) public payable whenNotPaused {\r\n        uint256 buyAmount = _deedIds.length;\r\n        uint256 etherRequired;\r\n        if (freeClaimAllowance[msg.sender] > 0) {\r\n            // The sender has a free claim allowance.\r\n            if (freeClaimAllowance[msg.sender] > buyAmount) {\r\n                // Subtract from allowance.\r\n                freeClaimAllowance[msg.sender] -= buyAmount;\r\n                \r\n                // No ether is required.\r\n                etherRequired = 0;\r\n            } else {\r\n                uint256 freeAmount = freeClaimAllowance[msg.sender];\r\n                \r\n                // The full allowance has been used.\r\n                delete freeClaimAllowance[msg.sender];\r\n                \r\n                // The subtraction cannot underflow, as freeAmount <= buyAmount.\r\n                etherRequired = unclaimedPlotPrice.mul(buyAmount - freeAmount);\r\n            }\r\n        } else {\r\n            // The sender does not have a free claim allowance.\r\n            etherRequired = unclaimedPlotPrice.mul(buyAmount);\r\n        }\r\n        \r\n        // Ensure enough ether is supplied.\r\n        require(msg.value >= etherRequired);\r\n        \r\n        uint256 offset = plots.length;\r\n        \r\n        // Allocate additional memory for the plots array\r\n        // (this is more efficient than .push-ing each individual\r\n        // plot, as that requires multiple dynamic allocations).\r\n        plots.length = plots.length.add(_deedIds.length);\r\n        \r\n        for (uint256 i = 0; i < _deedIds.length; i++) { \r\n            uint256 _deedId = _deedIds[i];\r\n            require(validIdentifier(_deedId));\r\n            \r\n            // The plot must be unowned (a plot deed cannot be transferred to\r\n            // 0x0, so once a plot is claimed it will always be owned by a\r\n            // non-zero address).\r\n            require(identifierToOwner[_deedId] == address(0));\r\n            \r\n            // Create the plot\r\n            plots[offset + i] = uint32(_deedId);\r\n            \r\n            // Transfer the new plot to the sender.\r\n            _transfer(address(0), msg.sender, _deedId);\r\n            \r\n            // Set the plot data.\r\n            _setPlotData(_deedId, name, description, imageUrl, infoUrl);\r\n        }\r\n        \r\n        // Calculate the excess ether sent\r\n        // msg.value is greater than or equal to etherRequired,\r\n        // so this cannot underflow.\r\n        uint256 excess = msg.value - etherRequired;\r\n        \r\n        if (excess > 0) {\r\n            // Refund any excess ether (not susceptible to re-entry attack, as\r\n            // the owner is assigned before the transfer takes place).\r\n            msg.sender.transfer(excess);\r\n        }\r\n    }\r\n}\r\n\r\n\r\n/// @dev Implements DWorld auction functionality.\r\ncontract DWorldAuction is DWorldMinting {\r\n    SaleAuction public saleAuctionContract;\r\n    RentAuction public rentAuctionContract;\r\n    \r\n    /// @notice set the contract address of the sale auction.\r\n    /// @param _address The address of the sale auction.\r\n    function setSaleAuctionContractAddress(address _address) external onlyOwner {\r\n        SaleAuction _contract = SaleAuction(_address);\r\n    \r\n        require(_contract.isSaleAuction());\r\n        \r\n        saleAuctionContract = _contract;\r\n    }\r\n    \r\n    /// @notice Set the contract address of the rent auction.\r\n    /// @param _address The address of the rent auction.\r\n    function setRentAuctionContractAddress(address _address) external onlyOwner {\r\n        RentAuction _contract = RentAuction(_address);\r\n    \r\n        require(_contract.isRentAuction());\r\n        \r\n        rentAuctionContract = _contract;\r\n    }\r\n    \r\n    /// @notice Create a sale auction.\r\n    /// @param _deedId The identifier of the deed to create a sale auction for.\r\n    /// @param _startPrice The starting price of the sale auction.\r\n    /// @param _endPrice The ending price of the sale auction.\r\n    /// @param _duration The duration in seconds of the dynamic pricing part of the sale auction.\r\n    function createSaleAuction(uint256 _deedId, uint256 _startPrice, uint256 _endPrice, uint256 _duration)\r\n        external\r\n        whenNotPaused\r\n    {\r\n        require(_owns(msg.sender, _deedId));\r\n        \r\n        // Prevent creating a sale auction if no sale auction contract is configured.\r\n        require(address(saleAuctionContract) != address(0));\r\n    \r\n        // Approve the deed for transferring to the sale auction.\r\n        _approve(msg.sender, address(saleAuctionContract), _deedId);\r\n    \r\n        // Auction contract checks input values (throws if invalid) and places the deed into escrow.\r\n        saleAuctionContract.createAuction(_deedId, _startPrice, _endPrice, _duration);\r\n    }\r\n    \r\n    /// @notice Create a rent auction.\r\n    /// @param _deedId The identifier of the deed to create a rent auction for.\r\n    /// @param _startPrice The starting price of the rent auction.\r\n    /// @param _endPrice The ending price of the rent auction.\r\n    /// @param _duration The duration in seconds of the dynamic pricing part of the rent auction.\r\n    /// @param _rentPeriod The rent period in seconds being auctioned.\r\n    function createRentAuction(uint256 _deedId, uint256 _startPrice, uint256 _endPrice, uint256 _duration, uint256 _rentPeriod)\r\n        external\r\n        whenNotPaused\r\n    {\r\n        require(_owns(msg.sender, _deedId));\r\n        \r\n        // Prevent creating a rent auction if no rent auction contract is configured.\r\n        require(address(rentAuctionContract) != address(0));\r\n        \r\n        // Approve the deed for transferring to the rent auction.\r\n        _approve(msg.sender, address(rentAuctionContract), _deedId);\r\n        \r\n        // Throws if the auction is invalid (e.g. deed is already rented out),\r\n        // and places the deed into escrow.\r\n        rentAuctionContract.createAuction(_deedId, _startPrice, _endPrice, _duration, _rentPeriod);\r\n    }\r\n    \r\n    /// @notice Allow the CFO to capture the free balance available\r\n    /// in the auction contracts.\r\n    function withdrawFreeAuctionBalances() external onlyCFO {\r\n        saleAuctionContract.withdrawFreeBalance();\r\n        rentAuctionContract.withdrawFreeBalance();\r\n    }\r\n    \r\n    /// @notice Allow withdrawing balances from the auction contracts\r\n    /// in a single step.\r\n    function withdrawAuctionBalances() external {\r\n        // Withdraw from the sale contract if the sender is owed Ether.\r\n        if (saleAuctionContract.addressToEtherOwed(msg.sender) > 0) {\r\n            saleAuctionContract.withdrawAuctionBalance(msg.sender);\r\n        }\r\n        \r\n        // Withdraw from the rent contract if the sender is owed Ether.\r\n        if (rentAuctionContract.addressToEtherOwed(msg.sender) > 0) {\r\n            rentAuctionContract.withdrawAuctionBalance(msg.sender);\r\n        }\r\n    }\r\n    \r\n    /// @dev This contract is only payable by the auction contracts.\r\n    function() public payable {\r\n        require(\r\n            msg.sender == address(saleAuctionContract) ||\r\n            msg.sender == address(rentAuctionContract)\r\n        );\r\n    }\r\n}\r\n\r\n\r\n/// @dev Implements highest-level DWorld functionality.\r\ncontract DWorldCore is DWorldAuction {\r\n    /// If this contract is broken, this will be used to publish the address at which an upgraded contract can be found\r\n    address public upgradedContractAddress;\r\n    event ContractUpgrade(address upgradedContractAddress);\r\n\r\n    /// @notice Only to be used when this contract is significantly broken,\r\n    /// and an upgrade is required.\r\n    function setUpgradedContractAddress(address _upgradedContractAddress) external onlyOwner whenPaused {\r\n        upgradedContractAddress = _upgradedContractAddress;\r\n        ContractUpgrade(_upgradedContractAddress);\r\n    }\r\n\r\n    /// @notice Set the data associated with a plot.\r\n    function setPlotData(uint256 _deedId, string name, string description, string imageUrl, string infoUrl)\r\n        public\r\n        whenNotPaused\r\n    {\r\n        // The sender requesting the data update should be\r\n        // the owner (without an active renter) or should\r\n        // be the active renter.\r\n        require(_owns(msg.sender, _deedId) && identifierToRentPeriodEndTimestamp[_deedId] < now || _rents(msg.sender, _deedId));\r\n    \r\n        // Set the data\r\n        _setPlotData(_deedId, name, description, imageUrl, infoUrl);\r\n    }\r\n    \r\n    /// @notice Set the data associated with multiple plots.\r\n    function setPlotDataMultiple(uint256[] _deedIds, string name, string description, string imageUrl, string infoUrl)\r\n        external\r\n        whenNotPaused\r\n    {\r\n        for (uint256 i = 0; i < _deedIds.length; i++) {\r\n            uint256 _deedId = _deedIds[i];\r\n        \r\n            setPlotData(_deedId, name, description, imageUrl, infoUrl);\r\n        }\r\n    }\r\n    \r\n    /// @notice Allow the CFO to withdraw balance available to this contract.\r\n    function withdrawBalance() external onlyCFO {\r\n        cfoAddress.transfer(this.balance);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleAuctionContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cfoAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"_deedName\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_deedId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"upgradedContractAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"identifier\",\"type\":\"uint256\"}],\"name\":\"validIdentifier\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_deedIds\",\"type\":\"uint256[]\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"description\",\"type\":\"string\"},{\"name\":\"imageUrl\",\"type\":\"string\"},{\"name\":\"infoUrl\",\"type\":\"string\"}],\"name\":\"setPlotDataMultiple\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"reclaimToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_deedIds\",\"type\":\"uint256[]\"}],\"name\":\"transferMultiple\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_deedIds\",\"type\":\"uint256[]\"}],\"name\":\"approveMultiple\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawFreeAuctionBalances\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_unclaimedPlotPrice\",\"type\":\"uint256\"}],\"name\":\"setUnclaimedPlotPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"x\",\"type\":\"uint256\"},{\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"coordinateToIdentifier\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_deedId\",\"type\":\"uint256\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"description\",\"type\":\"string\"},{\"name\":\"imageUrl\",\"type\":\"string\"},{\"name\":\"infoUrl\",\"type\":\"string\"}],\"name\":\"claimPlotWithData\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"deedsOfOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_deedId\",\"type\":\"uint256\"},{\"name\":\"_startPrice\",\"type\":\"uint256\"},{\"name\":\"_endPrice\",\"type\":\"uint256\"},{\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"createSaleAuction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_deedId\",\"type\":\"uint256\"}],\"name\":\"renterOf\",\"outputs\":[{\"name\":\"_renter\",\"type\":\"address\"},{\"name\":\"_rentPeriodEndTimestamp\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_deedIds\",\"type\":\"uint256[]\"}],\"name\":\"claimPlotMultiple\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"allowance\",\"type\":\"uint256\"}],\"name\":\"setFreeClaimAllowance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCFO\",\"type\":\"address\"}],\"name\":\"setCFO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rentAuctionContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"deedOfOwnerByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_deedId\",\"type\":\"uint256\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"description\",\"type\":\"string\"},{\"name\":\"imageUrl\",\"type\":\"string\"},{\"name\":\"infoUrl\",\"type\":\"string\"}],\"name\":\"setPlotData\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_deedId\",\"type\":\"uint256\"}],\"name\":\"claimPlot\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"plots\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_deedId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"unclaimedPlotPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"identifier\",\"type\":\"uint256\"}],\"name\":\"identifierToCoordinate\",\"outputs\":[{\"name\":\"x\",\"type\":\"uint256\"},{\"name\":\"y\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawAuctionBalances\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAllPlots\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"countOfDeedsByOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"_deedSymbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"x\",\"type\":\"uint256\"},{\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"validCoordinate\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_deedId\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_rentPeriod\",\"type\":\"uint256\"},{\"name\":\"_deedId\",\"type\":\"uint256\"}],\"name\":\"rentOut\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_deedId\",\"type\":\"uint256\"}],\"name\":\"takeOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_deedId\",\"type\":\"uint256\"}],\"name\":\"deedUri\",\"outputs\":[{\"name\":\"uri\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"countOfDeeds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setRentAuctionContractAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_upgradedContractAddress\",\"type\":\"address\"}],\"name\":\"setUpgradedContractAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_rentPeriod\",\"type\":\"uint256\"},{\"name\":\"_deedIds\",\"type\":\"uint256[]\"}],\"name\":\"rentOutMultiple\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"freeClaimAllowanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_deedId\",\"type\":\"uint256\"},{\"name\":\"_startPrice\",\"type\":\"uint256\"},{\"name\":\"_endPrice\",\"type\":\"uint256\"},{\"name\":\"_duration\",\"type\":\"uint256\"},{\"name\":\"_rentPeriod\",\"type\":\"uint256\"}],\"name\":\"createRentAuction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setSaleAuctionContractAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_deedIds\",\"type\":\"uint256[]\"}],\"name\":\"takeOwnershipMultiple\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_deedIds\",\"type\":\"uint256[]\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"description\",\"type\":\"string\"},{\"name\":\"imageUrl\",\"type\":\"string\"},{\"name\":\"infoUrl\",\"type\":\"string\"}],\"name\":\"claimPlotMultipleWithData\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"upgradedContractAddress\",\"type\":\"address\"}],\"name\":\"ContractUpgrade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"renter\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"deedId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"rentPeriodEndTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"rentPeriod\",\"type\":\"uint256\"}],\"name\":\"Rent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"deedId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"deedId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"deedId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"description\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"imageUrl\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"infoUrl\",\"type\":\"string\"}],\"name\":\"SetData\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"DWorldCore","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://80cd2619ba5a77250eb66af759f9408e8fa204971b8096f7fa91dfc6b0b60ab7"}]}