{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.15;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public constant returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   */\r\n  function increaseApproval (address _spender, uint _addedValue) public returns (bool success) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  function decreaseApproval (address _spender, uint _subtractedValue) public returns (bool success) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Mintable token\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\r\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n */\r\ncontract MintableToken is StandardToken, Ownable{\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished(); \r\n  uint256 public tokensMinted = 0; \r\n  bool public mintingFinished = false;\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\r\n    /** Modified to handle multiple capped crowdsales */\r\n    _amount = _amount * 1 ether;\r\n    require(tokensMinted.add(_amount)<=totalSupply); \r\n    tokensMinted = tokensMinted.add(_amount);\r\n    //Zappelin Standard code \r\n    balances[_to] = balances[_to].add(_amount);\r\n    Mint(_to, _amount);\r\n    Transfer(0x0, _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() onlyOwner public returns (bool) {\r\n    mintingFinished = true;\r\n    MintFinished();\r\n    return true;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title Wand token\r\n * @dev Customized mintable ERC20 Token  \r\n * @dev Token to support multiple Capped CrowdSales. i.e. every crowdsale with capped token limit and also\r\n        we will be able to increase total token supply based on requirements\r\n */\r\ncontract WandToken is Ownable, MintableToken { \r\n  //Event for Presale transfers\r\n  event TokenPreSaleTransfer(address indexed purchaser, address indexed beneficiary, uint256 amount);\r\n  \r\n  // Token details\r\n  string public constant name = \"Wand Token\";\r\n  string public constant symbol = \"WAND\";\r\n\r\n  // 18 decimal places, the same as ETH.\r\n  uint8 public constant decimals = 18;\r\n\r\n  /**\r\n    @dev Constructor. Sets the initial supplies and transfer advisor/founders/presale tokens to the given account\r\n    @param _owner The address the account nto which presale tokens + Advisors/founders tokens transferred\r\n   */\r\n  function WandToken(address _owner) {\r\n      //Total of 75M tokens\r\n      totalSupply = 75 * 10**24;  \r\n\r\n      // 17M tokens for Funders+advisors, 3.4M for PreSales\r\n      tokensMinted = tokensMinted.add(20400000 * (1 ether));\r\n      balances[_owner] = 20400000 * 1 ether;\r\n  }   \r\n\r\n  /**\r\n    @dev function to handle presale trasnfers manually. Only owner can execute the contract\r\n    @param _accounts buyers accounts that will receive the presale tokens\r\n    @param _tokens   Amount of the tokens to be transferred to each account in _accounts list \r\n    @return A boolean that indicates if the operation is successful.\r\n   */\r\n  function batchTransfers(address[] _accounts, uint256[] _tokens) onlyOwner public returns (bool) {\r\n    require(_accounts.length > 0);\r\n    require(_accounts.length == _tokens.length); \r\n    for (uint i = 0; i < _accounts.length; i++) {\r\n      require(_accounts[i] != 0x0);\r\n      require(_tokens[i] > 0); \r\n      transfer(_accounts[i], _tokens[i] * 1 ether);\r\n      TokenPreSaleTransfer(msg.sender, _accounts[i], _tokens[i]); \r\n    }\r\n    return true;   \r\n  }\r\n  \r\n  /**\r\n    @dev function to raise the total supply. Method can be executed only by its owner\r\n    @param _supply delta number of tokens to be added to total supply \r\n    @return A boolean that indicates if the operation is successful.\r\n   */\r\n  function raiseInitialSupply(uint256 _supply) onlyOwner public returns (bool) {\r\n      totalSupply = totalSupply.add(_supply * 1 ether);\r\n      return true;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Wandx CrowSale/ICO contract \r\n * @dev It allows multiple Capped CrowdSales. i.e. every crowdsale with capped token limit. \r\n * @dev exposes 2 more proxy methods from token contract which can be executed only by this contract owner\r\n */\r\ncontract WandCrowdsale is Ownable\r\n{ \r\n    using SafeMath for uint256; \r\n     \r\n    // The token being sold\r\n    WandToken public token;  \r\n    // the account tp which all incoming ether will be transferred\r\n    address public wallet;\r\n    // Flag to track the crowdsale status (Active/InActive)\r\n    bool public crowdSaleOn = false;  \r\n\r\n    // Current crowsale sate variables\r\n    uint256 public cap = 0;  // Max allowed tokens to avaialble\r\n    uint256 public startTime; // Crowdsale start time\r\n    uint256 public endTime;  // Crowdsale end time\r\n    uint256 public weiRaised = 0;  // Total amount ether/wei collected\r\n    uint256 public tokensMinted = 0; // Total number of tokens minted/sold so far in this crowdsale\r\n    uint256[] public discountedRates ; // Discount per slot\r\n    uint256[] public crowsaleSlots ; // List of slots\r\n    \r\n    // Event to be registered when a successful token purchase happens\r\n    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n    \r\n    /** Modifiers to verify the status of the crowdsale*/\r\n    modifier activeCrowdSale() {\r\n        require(crowdSaleOn);\r\n        _;\r\n    } \r\n    modifier inactiveCrowdSale() {\r\n        require(!crowdSaleOn);\r\n        _;\r\n    } \r\n    \r\n    /**\r\n        @dev constructor. Intializes the wallets and tokens to be traded using this contract\r\n     */\r\n    function WandCrowdsale() { \r\n        wallet = msg.sender;  \r\n        token = new WandToken(msg.sender);\r\n    }\r\n    \r\n    /**\r\n      @dev proxy method for Wand Tokens batch transfers method, so that contract owner can call token methods\r\n      @param _accounts buyers accounts that will receive the presale tokens\r\n      @param _tokens   Amount of the tokens to be transferred to each account in _accounts list \r\n      @return A boolean that indicates if the operation is successful. \r\n     */\r\n    function batchTransfers(address[] _accounts, uint256[] _tokens) onlyOwner public returns (bool) {\r\n        require(_accounts.length > 0);\r\n        require(_accounts.length == _tokens.length); \r\n        token.batchTransfers(_accounts,_tokens);\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n      @dev proxy method for Wand Tokens raiseInitialSupply method, so that contract owner can call token methods\r\n      @param _supply delta number of tokens to be added to total supply \r\n      @return A boolean that indicates if the operation is successful.\r\n     */\r\n    function raiseInitialSupply(uint256 _supply) onlyOwner public returns (bool) {\r\n        require(_supply > 0);\r\n        token.raiseInitialSupply(_supply);\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n      @dev function to start the crowdsale with predefined timeslots and discounts. it will be called once for every crowdsale session and \r\n           it can be called only its owner\r\n      @param _startTime at which crowdsale begins\r\n      @param _endTime at which crowdsale stops\r\n      @param _cap is number of tokens available during the crowdsale\r\n      @param _crowsaleSlots array of time slots\r\n      @param _discountedRates array of discounts \r\n      @return A boolean that indicates if the operation is successful\r\n     */\r\n    function startCrowdsale(uint256 _startTime, uint256 _endTime,  uint256 _cap, uint256[] _crowsaleSlots, uint256[] _discountedRates) inactiveCrowdSale onlyOwner public returns (bool) {  \r\n        require(_cap > 0);   \r\n        require(_crowsaleSlots.length > 0); \r\n        require(_crowsaleSlots.length == _discountedRates.length);\r\n        require(_startTime >= uint256(now));  \r\n        require( _endTime > _startTime); \r\n        \r\n        //sets the contract state for this crowdsale\r\n        cap = _cap * 1 ether;  //Normalized the cap to operate at wei units level\r\n        startTime = _startTime;\r\n        endTime = _endTime;    \r\n        crowdSaleOn = true;\r\n        weiRaised = 0;\r\n        tokensMinted = 0;\r\n        discountedRates = _discountedRates;\r\n        crowsaleSlots = _crowsaleSlots;\r\n        return true;\r\n    }  \r\n\r\n    /**\r\n      @dev function to stop crowdsale session.it will be called once for every crowdsale session and it can be called only its owner\r\n      @return A boolean that indicates if the operation is successful\r\n     */\r\n    function endCrowdsale() activeCrowdSale onlyOwner public returns (bool) {\r\n        endTime = now;  \r\n        if(tokensMinted < cap){\r\n            uint256 leftoverTokens = cap.sub(tokensMinted);\r\n            require(tokensMinted.add(leftoverTokens) <= cap);\r\n            tokensMinted = tokensMinted.add(leftoverTokens);\r\n            token.mint(owner, leftoverTokens.div(1 ether)); \r\n        }\r\n        crowdSaleOn = false;\r\n        return true;\r\n    }   \r\n    \r\n    /**\r\n      @dev function to calculate and return the discounted token rate based on the current timeslot\r\n      @return _discountedRate for the current timeslot\r\n     */\r\n    function findDiscount() constant private returns (uint256 _discountedRate) {\r\n        uint256 elapsedTime = now.sub(startTime);\r\n        for(uint i=0; i<crowsaleSlots.length; i++){\r\n            if(elapsedTime >= crowsaleSlots[i]) {\r\n                elapsedTime = elapsedTime.sub(crowsaleSlots[i]);\r\n            }\r\n            else {\r\n                _discountedRate = discountedRates[i];\r\n                break;\r\n            }\r\n        } \r\n    }\r\n    \r\n    /**\r\n      @dev  fallback function can be used to buy tokens\r\n      */\r\n    function () payable {\r\n        buyTokens(msg.sender);\r\n    }\r\n  \r\n    /**\r\n      @dev  low level token purchase function\r\n      */\r\n    function buyTokens(address beneficiary) activeCrowdSale public payable {\r\n        require(beneficiary != 0x0); \r\n        require(now >= startTime);\r\n        require(now <= endTime);\r\n        require(msg.value != 0);   \r\n        \r\n        // amount ether sent to the contract.. normalized to wei\r\n        uint256 weiAmount = msg.value; \r\n        weiRaised = weiRaised.add(weiAmount); \r\n        \r\n        // apply the discount based on timeslot and get the token rate (X tokens per 1 ether)\r\n        var currentRate = findDiscount();\r\n        // Find out Token value in wei ( Y wei per 1 Token)\r\n        uint256 rate = uint256(1 * 1 ether).div(currentRate); \r\n        require(rate > 0);\r\n        // Find out the number of tokens for given wei and normalize to ether so that tokens can be minted\r\n        // by token contract\r\n        uint256 numTokens = weiAmount.div(rate); \r\n        require(numTokens > 0); \r\n        require(tokensMinted.add(numTokens.mul(1 ether)) <= cap);\r\n        tokensMinted = tokensMinted.add(numTokens.mul(1 ether));\r\n        \r\n        // Mint the tokens and trasfer to the buyer\r\n        token.mint(beneficiary, numTokens);\r\n        TokenPurchase(msg.sender, beneficiary, weiAmount, numTokens); \r\n        // Transfer the ether to Wallet and close the purchase\r\n        wallet.transfer(weiAmount);\r\n    } \r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"endCrowdsale\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_startTime\",\"type\":\"uint256\"},{\"name\":\"_endTime\",\"type\":\"uint256\"},{\"name\":\"_cap\",\"type\":\"uint256\"},{\"name\":\"_crowsaleSlots\",\"type\":\"uint256[]\"},{\"name\":\"_discountedRates\",\"type\":\"uint256[]\"}],\"name\":\"startCrowdsale\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdSaleOn\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_accounts\",\"type\":\"address[]\"},{\"name\":\"_tokens\",\"type\":\"uint256[]\"}],\"name\":\"batchTransfers\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"discountedRates\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"crowsaleSlots\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensMinted\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_supply\",\"type\":\"uint256\"}],\"name\":\"raiseInitialSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"WandCrowdsale","CompilerVersion":"v0.4.15+commit.bbb8e64f","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://ea0c1114977072564400b764a078409650168eb8058f7435b5950c29bc1682bb"}]}