{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n// FundersToken MultiSig Wallet Contract v1.0.0\r\n// 2017/11/18\r\n\r\ncontract FsTkCMultiSigWallet {\r\n    // deployer = wallet deployer\r\n    address public deployer = address(0);\r\n\r\n    // initialized\r\n    bool public initialized = false;\r\n\r\n    // committeesMap               = committees' addresses -> indices\r\n    // committeesArray             = index -> committee's address\r\n    // committeesArrayIndexCounter = counter for committeesArray\r\n    // committeesNumber            = number of committees\r\n    // committeesArray [ committeesMap [ testAddress ] ] == 0x0 ? NotCommittee : IsCommittee\r\n    mapping (address => uint256) public committeesMap;\r\n    address[] public committeesArray;\r\n    uint256 public committeesArrayIndexCounter = 0;\r\n    uint256 public committeesNumber = 0;\r\n\r\n    // committeeJoinVotes  = votes for joining a committee\r\n    // committeeKickVotes  = votes for kicking a committee\r\n    // committeeJoinVoters = newCommittee    -> voter -> voted\r\n    // committeeKickVoters = kickedCommittee -> voter -> voted\r\n    mapping (address => uint256) public committeeJoinVotes;\r\n    mapping (address => uint256) public committeeKickVotes;\r\n    mapping (address => mapping (address => bool)) public committeeJoinVoters;\r\n    mapping (address => mapping (address => bool)) public committeeKickVoters;\r\n\r\n    // txCounter = this multigis wallet's tx counter\r\n    uint256 public txCounter = 0;\r\n\r\n    // txTaskMap = tx's index to the task\r\n    mapping (uint256 => Task) public txTaskMap;\r\n\r\n    // tokenTransferFunctionIdentifierMap = sha3(ercVersion) to function identifier\r\n    mapping (bytes32 => bytes4) public tokenTransferFunctionIdentifierMap;\r\n\r\n    // tx task structure\r\n    struct Task {\r\n        uint256 taskType;\r\n        address receiver;\r\n        uint256 value;\r\n        address tokenContractAddress;\r\n        bytes4  functionIdentifier;\r\n        uint256 acceptedCounter;\r\n        mapping (address => bool) acceptedCommitteesMap;\r\n        bool    completed;\r\n    }\r\n\r\n    function FsTkCMultiSigWallet () public {\r\n        deployer = msg.sender;\r\n\r\n        // add void address at array[0]\r\n        // and 0x0 is not a committee\r\n        addCommitteeToMapAndArray(address(0));\r\n        committeesNumber--;\r\n\r\n        // add deployer at array[1]\r\n        addCommitteeToMapAndArray(deployer);\r\n\r\n        // set default erc20 token function identifier\r\n        setTokenTransferIdentifier(\"erc20\", 0xa9059cbb);\r\n\r\n        initialized = true;\r\n    }\r\n\r\n    event AddCommitteeToMapAndArrayEvent (address newCommittee);\r\n    function addCommitteeToMapAndArray (address _newCommittee) onlyCommitteesAfterInitialization private {\r\n        committeesMap[_newCommittee] = committeesArrayIndexCounter;\r\n        committeesArray.push(_newCommittee);\r\n        committeesArrayIndexCounter++;\r\n\r\n        committeesNumber++;\r\n\r\n        committeeJoinVotes[_newCommittee] = 0;\r\n        for (uint i = 0; i < committeesArrayIndexCounter; i++) {\r\n            if (committeesArray[i] != address(0)) {\r\n                committeeJoinVoters[_newCommittee][committeesArray[i]] = false;\r\n            }\r\n        }\r\n\r\n        AddCommitteeToMapAndArrayEvent(_newCommittee);\r\n    }\r\n\r\n    event KickCommitteeFromMapAndArrayEvent (address kickedCommittee);\r\n    function kickCommitteeFromMapAndArray (address _kickedCommittee) onlyCommitteesAfterInitialization private {\r\n        // 0x0 cannot be kicked\r\n        require(_kickedCommittee != address(0));\r\n\r\n        committeesArray[committeesMap[_kickedCommittee]] = address(0);\r\n        committeesMap[_kickedCommittee] = 0;\r\n\r\n        committeesNumber--;\r\n\r\n        committeeKickVotes[_kickedCommittee] = 0;\r\n        for (uint i = 0; i < committeesArrayIndexCounter; i++) {\r\n            if (committeesArray[i] != address(0)) {\r\n                committeeKickVoters[_kickedCommittee][committeesArray[i]] = false;\r\n            }\r\n        }\r\n\r\n        KickCommitteeFromMapAndArrayEvent(_kickedCommittee);\r\n    }\r\n\r\n    event AddCommitteeVoteEvent (address committee, address newCommittee);\r\n    function addCommitteeVote (address _newCommittee) onlyCommitteesAfterInitialization public returns (bool) {\r\n        // the _newCommittee should not be in the map and array\r\n        require(isNotCommittee(_newCommittee));\r\n        require(committeeJoinVoters[_newCommittee][msg.sender] == false);\r\n\r\n        committeeJoinVoters[_newCommittee][msg.sender] = true;\r\n\r\n        if (committeeJoinVotes[_newCommittee] == 0) {\r\n            committeeJoinVotes[_newCommittee] = 1;\r\n        } else {\r\n            committeeJoinVotes[_newCommittee]++;\r\n        }\r\n\r\n        if (committeeJoinVotes[_newCommittee] == getCommitteesNumber()) {\r\n            addCommitteeToMapAndArray(_newCommittee);\r\n        }\r\n\r\n        AddCommitteeVoteEvent(msg.sender, _newCommittee);\r\n\r\n        return true;\r\n    }\r\n\r\n    event KickCommitteeVoteEvent (address committee, address kickedCommittee);\r\n    function kickCommitteeVote (address _kickedCommittee) onlyCommitteesAfterInitialization public returns (bool) {\r\n        // the _kickedCommittee should be in the map and array\r\n        require(isCommittee(_kickedCommittee));\r\n        require(committeeKickVoters[_kickedCommittee][msg.sender] == false);\r\n\r\n        committeeKickVoters[_kickedCommittee][msg.sender] = true;\r\n\r\n        if (committeeKickVotes[_kickedCommittee] == 0) {\r\n            committeeKickVotes[_kickedCommittee] = 1;\r\n        } else {\r\n            committeeKickVotes[_kickedCommittee]++;\r\n        }\r\n\r\n        // except for _kickedCommittee\r\n        if (committeeKickVotes[_kickedCommittee] == getCommitteesNumber() - 1) {\r\n            kickCommitteeFromMapAndArray(_kickedCommittee);\r\n        }\r\n\r\n        KickCommitteeVoteEvent(msg.sender, _kickedCommittee);\r\n\r\n        return true;\r\n    }\r\n\r\n    function getCommitteesNumber () view public returns (uint256) {\r\n        return committeesNumber;\r\n    }\r\n\r\n    function isCommittee (address _testAddress) view public returns (bool) {\r\n        return committeesArray[committeesMap[_testAddress]] != address(0);\r\n    }\r\n\r\n    function isNotCommittee (address _testAddress) view public returns (bool) {\r\n        return committeesArray[committeesMap[_testAddress]] == address(0);\r\n    }\r\n\r\n    // task type 1\r\n    event TransferERCXTokenInitiationEvent (uint256 txNumber, address initiator, string ercVersion, address tokenContractAddress, address to, uint256 tokenValue);\r\n    function transferERCXTokenInitiation (string _ercVersion, address _tokenContractAddress, address _to, uint256 _tokenValue) onlyCommitteesAfterInitialization public returns (bool) {\r\n        var tmpIdentifier = tokenTransferFunctionIdentifierMap[keccak256(_ercVersion)];\r\n\r\n        require(tmpIdentifier != bytes4(0));\r\n\r\n        txTaskMap[txCounter] = Task({\r\n            taskType: 1,\r\n            receiver: _to,\r\n            value: _tokenValue,\r\n            tokenContractAddress: _tokenContractAddress,\r\n            functionIdentifier: tmpIdentifier,\r\n            acceptedCounter: 0,\r\n            completed: false\r\n        });\r\n\r\n        TransferERCXTokenInitiationEvent(txCounter, msg.sender, _ercVersion, _tokenContractAddress, _to, _tokenValue);\r\n\r\n        acceptTxTask(txCounter);\r\n\r\n        txCounter++;\r\n\r\n        return true;\r\n    }\r\n\r\n    // task type 2\r\n    event TransferEtherInitiationEvent (uint256 txNumber, address initiator, address to, uint256 weiValue);\r\n    function transferEtherInitiation (address _to, uint256 _weiValue) onlyCommitteesAfterInitialization public returns (bool) {\r\n        require(_weiValue <= this.balance);\r\n\r\n        txTaskMap[txCounter] = Task({\r\n            taskType: 2,\r\n            receiver: _to,\r\n            value: _weiValue,\r\n            tokenContractAddress: address(0),\r\n            functionIdentifier: bytes4(0),\r\n            acceptedCounter: 0,\r\n            completed: false\r\n        });\r\n\r\n        TransferEtherInitiationEvent(txCounter, msg.sender, _to, _weiValue);\r\n\r\n        acceptTxTask(txCounter);\r\n\r\n        txCounter++;\r\n\r\n        return true;\r\n    }\r\n\r\n    event AcceptTxTaskEvent (address committee, uint256 txNumber);\r\n    event TaskCompletedEvent (uint256 txNumber);\r\n    function acceptTxTask (uint256 _txNumber) onlyCommitteesAfterInitialization public returns (bool) {\r\n        require(txTaskMap[_txNumber].taskType != 0);\r\n        require(txTaskMap[_txNumber].completed == false);\r\n        require(txTaskMap[_txNumber].acceptedCommitteesMap[msg.sender] == false);\r\n\r\n        AcceptTxTaskEvent(msg.sender, _txNumber);\r\n\r\n        txTaskMap[_txNumber].acceptedCounter++;\r\n        txTaskMap[_txNumber].acceptedCommitteesMap[msg.sender] = true;\r\n\r\n        var theTask = txTaskMap[_txNumber];\r\n\r\n        if (theTask.acceptedCounter == getCommitteesNumber()) {\r\n            if (theTask.taskType == 1) {\r\n                txTaskMap[_txNumber].completed = true;\r\n\r\n                if (!theTask.tokenContractAddress.call(theTask.functionIdentifier, theTask.receiver, theTask.value)) {\r\n                    revert();\r\n                }\r\n\r\n                TaskCompletedEvent(_txNumber);\r\n            }\r\n\r\n            if (theTask.taskType == 2) {\r\n                txTaskMap[_txNumber].completed = true;\r\n\r\n                theTask.receiver.transfer(theTask.value);\r\n\r\n                TaskCompletedEvent(_txNumber);\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    // _ercVersion is like:\r\n    // erc20\r\n    // erc223\r\n    function setTokenTransferIdentifier (string _ercVersion, bytes4 _functionIdentifier) onlyDeployer public returns (bool) {\r\n        tokenTransferFunctionIdentifierMap[keccak256(_ercVersion)] = _functionIdentifier;\r\n        return true;\r\n    }\r\n\r\n    function getFunctionIdentifier (string _functionRawString) pure public returns (bytes4) {\r\n        return bytes4(keccak256(_functionRawString));\r\n    }\r\n\r\n    function getStringHash (string _input) pure public returns (bytes32) {\r\n        return keccak256(_input);\r\n    }\r\n\r\n    modifier onlyCommitteesAfterInitialization {\r\n        if (initialized == false) {\r\n            _;\r\n        } else {\r\n            require(isCommittee(msg.sender));\r\n            _;\r\n        }\r\n    }\r\n\r\n    modifier onlyDeployer {\r\n        require(msg.sender == deployer);\r\n        _;\r\n    }\r\n\r\n    function () payable public {}\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_testAddress\",\"type\":\"address\"}],\"name\":\"isNotCommittee\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"committeesArrayIndexCounter\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCommitteesNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"committeeKickVotes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"txTaskMap\",\"outputs\":[{\"name\":\"taskType\",\"type\":\"uint256\"},{\"name\":\"receiver\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"tokenContractAddress\",\"type\":\"address\"},{\"name\":\"functionIdentifier\",\"type\":\"bytes4\"},{\"name\":\"acceptedCounter\",\"type\":\"uint256\"},{\"name\":\"completed\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCommittee\",\"type\":\"address\"}],\"name\":\"addCommitteeVote\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ercVersion\",\"type\":\"string\"},{\"name\":\"_functionIdentifier\",\"type\":\"bytes4\"}],\"name\":\"setTokenTransferIdentifier\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"committeesNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"txCounter\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_weiValue\",\"type\":\"uint256\"}],\"name\":\"transferEtherInitiation\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"tokenTransferFunctionIdentifierMap\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_testAddress\",\"type\":\"address\"}],\"name\":\"isCommittee\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"committeesArray\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"committeeKickVoters\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"committeeJoinVoters\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_txNumber\",\"type\":\"uint256\"}],\"name\":\"acceptTxTask\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"committeesMap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_input\",\"type\":\"string\"}],\"name\":\"getStringHash\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_kickedCommittee\",\"type\":\"address\"}],\"name\":\"kickCommitteeVote\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_functionRawString\",\"type\":\"string\"}],\"name\":\"getFunctionIdentifier\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"deployer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"committeeJoinVotes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ercVersion\",\"type\":\"string\"},{\"name\":\"_tokenContractAddress\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenValue\",\"type\":\"uint256\"}],\"name\":\"transferERCXTokenInitiation\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newCommittee\",\"type\":\"address\"}],\"name\":\"AddCommitteeToMapAndArrayEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"kickedCommittee\",\"type\":\"address\"}],\"name\":\"KickCommitteeFromMapAndArrayEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"committee\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newCommittee\",\"type\":\"address\"}],\"name\":\"AddCommitteeVoteEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"committee\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"kickedCommittee\",\"type\":\"address\"}],\"name\":\"KickCommitteeVoteEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"txNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"initiator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ercVersion\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"tokenContractAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenValue\",\"type\":\"uint256\"}],\"name\":\"TransferERCXTokenInitiationEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"txNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"initiator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"weiValue\",\"type\":\"uint256\"}],\"name\":\"TransferEtherInitiationEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"committee\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"txNumber\",\"type\":\"uint256\"}],\"name\":\"AcceptTxTaskEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"txNumber\",\"type\":\"uint256\"}],\"name\":\"TaskCompletedEvent\",\"type\":\"event\"}]","ContractName":"FsTkCMultiSigWallet","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://0a8cfa4ddbc2f0130fdffdd2170f11ae8c4e0ec2681e76c5199611fb657af88b"}]}