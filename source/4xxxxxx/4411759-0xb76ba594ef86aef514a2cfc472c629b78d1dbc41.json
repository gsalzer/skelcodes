{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.16;\r\n\r\ninterface token {\r\n  function transfer(address receiver, uint amount);\r\n  function balanceOf(address _owner) constant returns (uint256 balance);\r\n  function burn(uint256 _value) public returns (bool success);\r\n}\r\n\r\ncontract WHAPRESALEICO {\r\n  address public beneficiary = 0x3aDbBe8DDe40A949dF54F2F5700b9D2Eb2cF1Bbb;\r\n  uint public fundingGoal;\r\n  uint public tokensForOneEth = 7000;\r\n  uint public amountRaised;\r\n  uint public icoEndTime;\r\n  uint public bonusEndTime;\r\n  uint public bonusPercentage = 20;\r\n  token public tokenReward;\r\n  uint256 public unsoldTokens;\r\n  bool public fundingGoalReached = false;\r\n  bool public preIcoOpen = false;\r\n  mapping(address => uint256) public balanceOf;\r\n\r\n  event GoalReached(address _beneficiary, uint _amountRaised);\r\n  event FundTransfer(address backer, uint amount, bool isContribution);\r\n\r\n    /**\r\n     * Constrctor function\r\n     *\r\n     * Setup the owner\r\n     */\r\n     function WHAPRESALEICO() {\r\n      fundingGoal = 1400 * 1 ether;\r\n      bonusEndTime = now + 1910 * 1 minutes;\r\n      icoEndTime = now + 12770 * 1 minutes;\r\n      tokenReward = token(0x3d8945DcfC11627a6a762F203bE3B1B14Db36C4C);\r\n    }\r\n\r\n    function safeMul(uint a, uint b) internal returns (uint) {\r\n      uint c = a * b;\r\n      assert(a == 0 || c / a == b);\r\n      return c;\r\n    }\r\n\r\n    function safeDiv(uint a, uint b) internal returns (uint) {\r\n      assert(b > 0);\r\n      uint c = a / b;\r\n      assert(a == b * c + a % b);\r\n      return c;\r\n    }\r\n    \r\n    function safeSub(uint a, uint b) internal returns (uint) {\r\n      assert(b <= a);\r\n      return a - b;\r\n    }\r\n\r\n    function safeAdd(uint a, uint b) internal returns (uint) {\r\n      uint c = a + b;\r\n      assert(c >= a);\r\n      return c;\r\n    }\r\n\r\n    function () payable {\r\n      require(now<icoEndTime); \r\n      require(preIcoOpen); \r\n      require(msg.value > 0);\r\n\r\n      uint amount = msg.value;\r\n      balanceOf[msg.sender] += amount;\r\n      amountRaised += amount;\r\n      if (now >= bonusEndTime) {\r\n        uint tokens = safeMul(msg.value, tokensForOneEth);\r\n      } else \r\n      {\r\n        uint tokenswobonus = safeMul(msg.value, tokensForOneEth);\r\n        uint bonusamount = safeMul(safeDiv(tokenswobonus,100), bonusPercentage);\r\n        tokens = safeAdd(tokenswobonus,bonusamount);\r\n      }\r\n\r\n      tokenReward.transfer(msg.sender, tokens);\r\n      FundTransfer(msg.sender, amount, true);\r\n      unsoldTokens = tokenReward.balanceOf(address(this));\r\n    }\r\n\r\n    modifier aftericoEndTime() { if (now >= icoEndTime) _; }\r\n\r\n\r\n    function checkGoalReached() aftericoEndTime {\r\n      if (amountRaised >= fundingGoal){\r\n        fundingGoalReached = true;\r\n        GoalReached(beneficiary, amountRaised);\r\n      }\r\n      preIcoOpen = false;\r\n    }\r\n\r\n    function pausePreIco() {\r\n      require(preIcoOpen); \r\n      require(beneficiary == msg.sender);\r\n      preIcoOpen = false;\r\n    }\r\n\r\n    function reStartPreIco() {\r\n      require(!preIcoOpen); \r\n      require(beneficiary == msg.sender);\r\n      preIcoOpen = true;\r\n    }\r\n\r\n    function changeBonusPercentage(uint newBonusPercentage) {\r\n     require(beneficiary == msg.sender);\r\n     require(newBonusPercentage > 0);\r\n     require(newBonusPercentage <= 50);\r\n     bonusPercentage = newBonusPercentage;\r\n   }\r\n\r\n   function prolongPreIco(uint addMinutes) {\r\n     require(beneficiary == msg.sender);\r\n     icoEndTime = icoEndTime + addMinutes * 1 minutes;   \r\n   }\r\n\r\n   function shortenPreIco(uint removeMinutes) {\r\n     require(beneficiary == msg.sender);\r\n     require((icoEndTime - removeMinutes * 1 minutes)>now);\r\n     require((icoEndTime - removeMinutes * 1 minutes)>bonusEndTime);\r\n     icoEndTime = icoEndTime - removeMinutes * 1 minutes;   \r\n   }\r\n\r\n   function prolongBonusPreIco(uint addMinutes) {\r\n    require(beneficiary == msg.sender);\r\n    require((bonusEndTime + addMinutes * 1 minutes) <= icoEndTime);\r\n    bonusEndTime = bonusEndTime + addMinutes * 1 minutes;\r\n  }\r\n  function shortenBonusPreIco(uint removeMinutes) {\r\n    require(beneficiary == msg.sender);\r\n    require((icoEndTime - removeMinutes * 1 minutes)>now);\r\n    require((bonusEndTime - removeMinutes * 1 minutes) <= icoEndTime);\r\n    bonusEndTime = bonusEndTime - removeMinutes * 1 minutes;\r\n  }\r\n\r\n  function burnAllLeftTokens() aftericoEndTime {\r\n    require(beneficiary == msg.sender);\r\n    unsoldTokens = tokenReward.balanceOf(address(this));\r\n    tokenReward.burn(unsoldTokens);\r\n  }\r\n\r\n  function updateUnsoldTokens() {\r\n    unsoldTokens = tokenReward.balanceOf(address(this));\r\n  }\r\n\r\n  function Withdrawal() {\r\n    require(beneficiary == msg.sender);\r\n    if (beneficiary.send(amountRaised)) {\r\n      FundTransfer(beneficiary, amountRaised, false);\r\n    }\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"checkGoalReached\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addMinutes\",\"type\":\"uint256\"}],\"name\":\"prolongPreIco\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"removeMinutes\",\"type\":\"uint256\"}],\"name\":\"shortenPreIco\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pausePreIco\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensForOneEth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"reStartPreIco\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"updateUnsoldTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenReward\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"Withdrawal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundingGoal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"amountRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoEndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusPercentage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preIcoOpen\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newBonusPercentage\",\"type\":\"uint256\"}],\"name\":\"changeBonusPercentage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addMinutes\",\"type\":\"uint256\"}],\"name\":\"prolongBonusPreIco\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"unsoldTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"burnAllLeftTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundingGoalReached\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusEndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"removeMinutes\",\"type\":\"uint256\"}],\"name\":\"shortenBonusPreIco\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amountRaised\",\"type\":\"uint256\"}],\"name\":\"GoalReached\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"backer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"isContribution\",\"type\":\"bool\"}],\"name\":\"FundTransfer\",\"type\":\"event\"}]","ContractName":"WHAPRESALEICO","CompilerVersion":"v0.4.16+commit.d7661dd9","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://13d0315a4694994aa33e3809618c04cad35095bd725784747be6a1086f92ece7"}]}