{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.16;\r\n\r\n// copyright contact@Etheremon.com\r\n\r\ncontract SafeMath {\r\n\r\n    /* function assert(bool assertion) internal { */\r\n    /*   if (!assertion) { */\r\n    /*     throw; */\r\n    /*   } */\r\n    /* }      // assert no longer needed once solidity is on 0.4.10 */\r\n\r\n    function safeAdd(uint256 x, uint256 y) pure internal returns(uint256) {\r\n      uint256 z = x + y;\r\n      assert((z >= x) && (z >= y));\r\n      return z;\r\n    }\r\n\r\n    function safeSubtract(uint256 x, uint256 y) pure internal returns(uint256) {\r\n      assert(x >= y);\r\n      uint256 z = x - y;\r\n      return z;\r\n    }\r\n\r\n    function safeMult(uint256 x, uint256 y) pure internal returns(uint256) {\r\n      uint256 z = x * y;\r\n      assert((x == 0)||(z/x == y));\r\n      return z;\r\n    }\r\n\r\n}\r\n\r\ncontract BasicAccessControl {\r\n    address public owner;\r\n    address[] public moderators;\r\n\r\n    function BasicAccessControl() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    modifier onlyModerators() {\r\n        if (msg.sender != owner) {\r\n            bool found = false;\r\n            for (uint index = 0; index < moderators.length; index++) {\r\n                if (moderators[index] == msg.sender) {\r\n                    found = true;\r\n                    break;\r\n                }\r\n            }\r\n            require(found);\r\n        }\r\n        _;\r\n    }\r\n\r\n    function ChangeOwner(address _newOwner) onlyOwner public {\r\n        if (_newOwner != address(0)) {\r\n            owner = _newOwner;\r\n        }\r\n    }\r\n\r\n    function Kill() onlyOwner public {\r\n        selfdestruct(owner);\r\n    }\r\n\r\n    function AddModerator(address _newModerator) onlyOwner public {\r\n        if (_newModerator != address(0)) {\r\n            for (uint index = 0; index < moderators.length; index++) {\r\n                if (moderators[index] == _newModerator) {\r\n                    return;\r\n                }\r\n            }\r\n            moderators.push(_newModerator);\r\n        }\r\n    }\r\n    \r\n    function RemoveModerator(address _oldModerator) onlyOwner public {\r\n        uint foundIndex = 0;\r\n        for (; foundIndex < moderators.length; foundIndex++) {\r\n            if (moderators[foundIndex] == _oldModerator) {\r\n                break;\r\n            }\r\n        }\r\n        if (foundIndex < moderators.length) {\r\n            moderators[foundIndex] = moderators[moderators.length-1];\r\n            delete moderators[moderators.length-1];\r\n            moderators.length--;\r\n        }\r\n    }\r\n}\r\n\r\n\r\ncontract EtheremonEnum {\r\n\r\n    enum ResultCode {\r\n        SUCCESS,\r\n        ERROR_CLASS_NOT_FOUND,\r\n        ERROR_LOW_BALANCE,\r\n        ERROR_SEND_FAIL,\r\n        ERROR_NOT_TRAINER,\r\n        ERROR_NOT_ENOUGH_MONEY,\r\n        ERROR_INVALID_AMOUNT\r\n    }\r\n    \r\n    enum ArrayType {\r\n        CLASS_TYPE,\r\n        STAT_STEP,\r\n        STAT_START,\r\n        STAT_BASE,\r\n        OBJ_SKILL\r\n    }\r\n}\r\n\r\ncontract EtheremonDataBase is EtheremonEnum, BasicAccessControl, SafeMath {\r\n    \r\n    uint64 public totalMonster;\r\n    uint32 public totalClass;\r\n    \r\n    // write\r\n    function addElementToArrayType(ArrayType _type, uint64 _id, uint8 _value) onlyModerators public returns(uint);\r\n    function removeElementOfArrayType(ArrayType _type, uint64 _id, uint8 _value) onlyModerators public returns(uint);\r\n    function setMonsterClass(uint32 _classId, uint256 _price, uint256 _returnPrice, bool _catchable) onlyModerators public returns(uint32);\r\n    function addMonsterObj(uint32 _classId, address _trainer, string _name) onlyModerators public returns(uint64);\r\n    function setMonsterObj(uint64 _objId, string _name, uint32 _exp, uint32 _createIndex, uint32 _lastClaimIndex) onlyModerators public;\r\n    function increaseMonsterExp(uint64 _objId, uint32 amount) onlyModerators public;\r\n    function decreaseMonsterExp(uint64 _objId, uint32 amount) onlyModerators public;\r\n    function removeMonsterIdMapping(address _trainer, uint64 _monsterId) onlyModerators public;\r\n    function addMonsterIdMapping(address _trainer, uint64 _monsterId) onlyModerators public;\r\n    function clearMonsterReturnBalance(uint64 _monsterId) onlyModerators public returns(uint256 amount);\r\n    function collectAllReturnBalance(address _trainer) onlyModerators public returns(uint256 amount);\r\n    function transferMonster(address _from, address _to, uint64 _monsterId) onlyModerators public returns(ResultCode);\r\n    function addExtraBalance(address _trainer, uint256 _amount) onlyModerators public returns(uint256);\r\n    function deductExtraBalance(address _trainer, uint256 _amount) onlyModerators public returns(uint256);\r\n    function setExtraBalance(address _trainer, uint256 _amount) onlyModerators public;\r\n    \r\n    // read\r\n    function getSizeArrayType(ArrayType _type, uint64 _id) constant public returns(uint);\r\n    function getElementInArrayType(ArrayType _type, uint64 _id, uint _index) constant public returns(uint8);\r\n    function getMonsterClass(uint32 _classId) constant public returns(uint32 classId, uint256 price, uint256 returnPrice, uint32 total, bool catchable);\r\n    function getMonsterObj(uint64 _objId) constant public returns(uint64 objId, uint32 classId, address trainer, uint32 exp, uint32 createIndex, uint32 lastClaimIndex, uint createTime);\r\n    function getMonsterName(uint64 _objId) constant public returns(string name);\r\n    function getExtraBalance(address _trainer) constant public returns(uint256);\r\n    function getMonsterDexSize(address _trainer) constant public returns(uint);\r\n    function getMonsterObjId(address _trainer, uint index) constant public returns(uint64);\r\n    function getExpectedBalance(address _trainer) constant public returns(uint256);\r\n    function getMonsterReturn(uint64 _objId) constant public returns(uint256 current, uint256 total);\r\n}\r\n\r\ncontract EtheremonProcessor is EtheremonEnum, BasicAccessControl, SafeMath {\r\n    \r\n    uint8 public STAT_COUNT = 6;\r\n    uint8 public STAT_MAX = 32;\r\n    \r\n    struct MonsterClassAcc {\r\n        uint32 classId;\r\n        uint256 price;\r\n        uint256 returnPrice;\r\n        uint32 total;\r\n        bool catchable;\r\n    }\r\n\r\n    struct MonsterObjAcc {\r\n        uint64 monsterId;\r\n        uint32 classId;\r\n        address trainer;\r\n        string name;\r\n        uint32 exp;\r\n        uint32 createIndex;\r\n        uint32 lastClaimIndex;\r\n        uint createTime;\r\n    }\r\n    \r\n    // data contract\r\n    address public dataContract;\r\n    \r\n    function EtheremonProcessor(address _dataContract) public {\r\n        dataContract = _dataContract;\r\n    }\r\n\r\n    // internal\r\n    modifier requireDataContract {\r\n        require(dataContract != 0x0);\r\n        _;\r\n    }\r\n    \r\n\r\n    // event\r\n    event EventCatchMonster(address indexed trainer, ResultCode result, uint64 objId);\r\n    event EventCashOut(address indexed trainer, ResultCode result, uint256 amount);\r\n    event EventWithdrawEther(address indexed sendTo, ResultCode result, uint256 amount);\r\n \r\n     // admin\r\n    function withdrawEther(address _sendTo, uint _amount) onlyOwner public returns(ResultCode) {\r\n        if (_amount > this.balance) {\r\n            EventWithdrawEther(_sendTo, ResultCode.ERROR_INVALID_AMOUNT, 0);\r\n            return ResultCode.ERROR_INVALID_AMOUNT;\r\n        }\r\n        \r\n        _sendTo.transfer(_amount);\r\n        EventWithdrawEther(_sendTo, ResultCode.SUCCESS, _amount);\r\n        return ResultCode.SUCCESS;\r\n    }\r\n    \r\n    function setDataContract(address _dataContract) onlyModerators public {\r\n        dataContract = _dataContract;\r\n    }\r\n    \r\n    function addMonsterClassBasic(uint32 _classId, uint8 _type, uint256 _price, uint256 _returnPrice,\r\n        uint8 _ss1, uint8 _ss2, uint8 _ss3, uint8 _ss4, uint8 _ss5, uint8 _ss6) onlyModerators public {\r\n            \r\n        EtheremonDataBase data = EtheremonDataBase(dataContract);\r\n        data.setMonsterClass(_classId, _price, _returnPrice, true);\r\n        data.addElementToArrayType(ArrayType.CLASS_TYPE, uint64(_classId), _type);\r\n        \r\n        // add stat step\r\n        data.addElementToArrayType(ArrayType.STAT_START, uint64(_classId), _ss1);\r\n        data.addElementToArrayType(ArrayType.STAT_START, uint64(_classId), _ss2);\r\n        data.addElementToArrayType(ArrayType.STAT_START, uint64(_classId), _ss3);\r\n        data.addElementToArrayType(ArrayType.STAT_START, uint64(_classId), _ss4);\r\n        data.addElementToArrayType(ArrayType.STAT_START, uint64(_classId), _ss5);\r\n        data.addElementToArrayType(ArrayType.STAT_START, uint64(_classId), _ss6);\r\n        \r\n    }\r\n    \r\n    function addMonsterClassExtend(uint32 _classId, uint8 _type2, uint8 _type3, \r\n        uint8 _st1, uint8 _st2, uint8 _st3, uint8 _st4, uint8 _st5, uint8 _st6 ) onlyModerators public {\r\n        \r\n        EtheremonDataBase data = EtheremonDataBase(dataContract);\r\n        if (_type2 > 0) {\r\n            data.addElementToArrayType(ArrayType.CLASS_TYPE, uint64(_classId), _type2);\r\n        }\r\n        if (_type3 > 0) {\r\n            data.addElementToArrayType(ArrayType.CLASS_TYPE, uint64(_classId), _type3);\r\n        }\r\n        \r\n        // add stat base\r\n        data.addElementToArrayType(ArrayType.STAT_STEP, uint64(_classId), _st1);\r\n        data.addElementToArrayType(ArrayType.STAT_STEP, uint64(_classId), _st2);\r\n        data.addElementToArrayType(ArrayType.STAT_STEP, uint64(_classId), _st3);\r\n        data.addElementToArrayType(ArrayType.STAT_STEP, uint64(_classId), _st4);\r\n        data.addElementToArrayType(ArrayType.STAT_STEP, uint64(_classId), _st5);\r\n        data.addElementToArrayType(ArrayType.STAT_STEP, uint64(_classId), _st6);\r\n        \r\n    }\r\n    \r\n    // helper\r\n    function getRandom(uint8 maxRan, uint8 index) constant public returns(uint8) {\r\n        uint256 genNum = uint256(block.blockhash(block.number-1));\r\n        for (uint8 i = 0; i < index && i < 6; i ++) {\r\n            genNum /= 256;\r\n        }\r\n        return uint8(genNum % maxRan);\r\n    }\r\n    \r\n    function () payable public {\r\n        EtheremonDataBase data = EtheremonDataBase(dataContract);\r\n        data.addExtraBalance(msg.sender, msg.value);\r\n    }\r\n    \r\n    // public\r\n    \r\n    function catchMonster(uint32 _classId, string _name) requireDataContract public payable returns(ResultCode) {\r\n        EtheremonDataBase data = EtheremonDataBase(dataContract);\r\n        MonsterClassAcc memory class;\r\n        (class.classId, class.price, class.returnPrice, class.total, class.catchable) = data.getMonsterClass(_classId);\r\n        \r\n        if (class.classId == 0 || class.catchable == false) {\r\n            EventCatchMonster(msg.sender, ResultCode.ERROR_CLASS_NOT_FOUND, 0);\r\n            return ResultCode.ERROR_CLASS_NOT_FOUND;\r\n        }\r\n        \r\n        uint256 totalBalance = safeAdd(msg.value, data.getExtraBalance(msg.sender));\r\n        uint256 payPrice = class.price;\r\n        if (payPrice > totalBalance) {\r\n            data.addExtraBalance(msg.sender, msg.value);\r\n            EventCatchMonster(msg.sender, ResultCode.ERROR_LOW_BALANCE, 0);\r\n            return ResultCode.ERROR_LOW_BALANCE;\r\n        }\r\n        \r\n        // deduct the balance\r\n        data.setExtraBalance(msg.sender, safeSubtract(totalBalance, payPrice));\r\n        \r\n        // add monster\r\n        uint64 objId = data.addMonsterObj(_classId, msg.sender, _name);\r\n        // generate base stat\r\n        for (uint i=0; i < STAT_COUNT; i+= 1) {\r\n            uint8 value = getRandom(STAT_MAX, uint8(i)) + data.getElementInArrayType(ArrayType.STAT_START, uint64(_classId), i);\r\n            data.addElementToArrayType(ArrayType.STAT_BASE, objId, value);\r\n        }\r\n\r\n        // calculate the price\r\n        uint256 distributedPrice = safeMult(class.returnPrice, class.total + 2);\r\n        if (payPrice < distributedPrice) {\r\n            payPrice = distributedPrice;\r\n            // update price\r\n            data.setMonsterClass(_classId, distributedPrice, class.returnPrice, true);\r\n        }\r\n        \r\n        EventCatchMonster(msg.sender, ResultCode.SUCCESS, objId);\r\n        return ResultCode.SUCCESS;\r\n    }\r\n    \r\n    function cashOut(uint256 _amount) requireDataContract public returns(ResultCode) {\r\n        EtheremonDataBase data = EtheremonDataBase(dataContract);\r\n        \r\n        uint256 totalAmount = data.collectAllReturnBalance(msg.sender);\r\n        // default to cash out all\r\n        if (_amount == 0) {\r\n            _amount = totalAmount;\r\n        }\r\n        if (_amount > totalAmount) {\r\n            EventCashOut(msg.sender, ResultCode.ERROR_LOW_BALANCE, 0);\r\n            return ResultCode.ERROR_LOW_BALANCE;\r\n        }\r\n        \r\n        // check contract has enough money\r\n        if (this.balance < _amount) {\r\n            EventCashOut(msg.sender, ResultCode.ERROR_NOT_ENOUGH_MONEY, 0);\r\n            return ResultCode.ERROR_NOT_ENOUGH_MONEY;\r\n        }\r\n        \r\n        if (_amount > 0) {\r\n            data.deductExtraBalance(msg.sender, _amount);\r\n            if (!msg.sender.send(_amount)) {\r\n                data.addExtraBalance(msg.sender, _amount);\r\n                EventCashOut(msg.sender, ResultCode.ERROR_SEND_FAIL, 0);\r\n                return ResultCode.ERROR_SEND_FAIL;\r\n            }\r\n        }\r\n        \r\n        EventCashOut(msg.sender, ResultCode.SUCCESS, _amount);\r\n        return ResultCode.SUCCESS;\r\n    }\r\n    \r\n    function getTrainerBalance(address _trainer) constant public returns(uint256) {\r\n        EtheremonDataBase data = EtheremonDataBase(dataContract);\r\n        return data.getExpectedBalance(_trainer);\r\n    }\r\n    \r\n    function getMonsterClassBasic(uint32 _classId) constant public returns(uint256, uint256, uint256, bool) {\r\n        EtheremonDataBase data = EtheremonDataBase(dataContract);\r\n        MonsterClassAcc memory class;\r\n        (class.classId, class.price, class.returnPrice, class.total, class.catchable) = data.getMonsterClass(_classId);\r\n        return (class.price, class.returnPrice, class.total, class.catchable);\r\n    }\r\n\r\n    function getLevel(uint32 exp) pure internal returns (uint8) {\r\n        uint8 level = 1;\r\n        uint8 requirement = 100;\r\n        while(level < 100 && exp > requirement) {\r\n            exp -= requirement;\r\n            level += 1;\r\n            requirement = requirement * 12 / 10 + 5;\r\n        }\r\n        return level;\r\n    }\r\n\r\n    function getMonsterLevel(uint64 _objId) constant public returns(uint8) {\r\n        EtheremonDataBase data = EtheremonDataBase(dataContract);\r\n        MonsterObjAcc memory obj;\r\n        uint32 _ = 0;\r\n        (obj.monsterId, obj.classId, obj.trainer, obj.exp, _, _, obj.createTime) = data.getMonsterObj(_objId);\r\n     \r\n        return getLevel(obj.exp);\r\n    }\r\n    \r\n    function getMonsterCP(uint64 _objId) constant public returns(uint64) {\r\n        EtheremonDataBase data = EtheremonDataBase(dataContract);\r\n        MonsterObjAcc memory obj;\r\n        uint32 _ = 0;\r\n        (obj.monsterId, obj.classId, obj.trainer, obj.exp, _, _, obj.createTime) = data.getMonsterObj(_objId);\r\n     \r\n        uint baseSize = data.getSizeArrayType(ArrayType.STAT_BASE, obj.monsterId);\r\n        if (baseSize == 0)\r\n            return 0;\r\n        \r\n        uint256 total = 0;\r\n        for(uint i=0; i < baseSize; i+=1) {\r\n            total += data.getElementInArrayType(ArrayType.STAT_BASE, obj.monsterId, i);\r\n            total += safeMult(data.getElementInArrayType(ArrayType.STAT_STEP, uint64(obj.classId), i), getLevel(obj.exp));\r\n        }\r\n        \r\n        return uint64(total/baseSize);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_dataContract\",\"type\":\"address\"}],\"name\":\"setDataContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_objId\",\"type\":\"uint64\"}],\"name\":\"getMonsterCP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dataContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_classId\",\"type\":\"uint32\"},{\"name\":\"_type\",\"type\":\"uint8\"},{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"_returnPrice\",\"type\":\"uint256\"},{\"name\":\"_ss1\",\"type\":\"uint8\"},{\"name\":\"_ss2\",\"type\":\"uint8\"},{\"name\":\"_ss3\",\"type\":\"uint8\"},{\"name\":\"_ss4\",\"type\":\"uint8\"},{\"name\":\"_ss5\",\"type\":\"uint8\"},{\"name\":\"_ss6\",\"type\":\"uint8\"}],\"name\":\"addMonsterClassBasic\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"STAT_MAX\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sendTo\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawEther\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"cashOut\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_classId\",\"type\":\"uint32\"},{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"catchMonster\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newModerator\",\"type\":\"address\"}],\"name\":\"AddModerator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_classId\",\"type\":\"uint32\"}],\"name\":\"getMonsterClassBasic\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_oldModerator\",\"type\":\"address\"}],\"name\":\"RemoveModerator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"moderators\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"Kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_classId\",\"type\":\"uint32\"},{\"name\":\"_type2\",\"type\":\"uint8\"},{\"name\":\"_type3\",\"type\":\"uint8\"},{\"name\":\"_st1\",\"type\":\"uint8\"},{\"name\":\"_st2\",\"type\":\"uint8\"},{\"name\":\"_st3\",\"type\":\"uint8\"},{\"name\":\"_st4\",\"type\":\"uint8\"},{\"name\":\"_st5\",\"type\":\"uint8\"},{\"name\":\"_st6\",\"type\":\"uint8\"}],\"name\":\"addMonsterClassExtend\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_objId\",\"type\":\"uint64\"}],\"name\":\"getMonsterLevel\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"STAT_COUNT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"maxRan\",\"type\":\"uint8\"},{\"name\":\"index\",\"type\":\"uint8\"}],\"name\":\"getRandom\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"ChangeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_trainer\",\"type\":\"address\"}],\"name\":\"getTrainerBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_dataContract\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"trainer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"result\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"objId\",\"type\":\"uint64\"}],\"name\":\"EventCatchMonster\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"trainer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"result\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EventCashOut\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sendTo\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"result\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EventWithdrawEther\",\"type\":\"event\"}]","ContractName":"EtheremonProcessor","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000be6ca916f280572012abd4ad4292a28386a1ff23","Library":"","SwarmSource":"bzzr://3250fe1f04ac761a4a23a6d3147ee789288a2c8b81b88b3fd1261c0c35c836a0"}]}