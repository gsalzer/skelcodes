{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\nlibrary SafeMath {\r\n  function mul(uint a, uint b) internal pure returns (uint) {\r\n    uint c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint a, uint b) internal pure returns (uint) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint a, uint b) internal pure returns (uint) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint a, uint b) internal pure returns (uint) {\r\n    uint c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\ncontract Ownable {\r\n  address public owner;\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) constant public returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) tokenBalances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(tokenBalances[msg.sender]>=_value);\r\n    tokenBalances[msg.sender] = tokenBalances[msg.sender].sub(_value);\r\n    tokenBalances[_to] = tokenBalances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) constant public returns (uint256 balance) {\r\n    return tokenBalances[_owner];\r\n  }\r\n\r\n}\r\ncontract ERP is BasicToken,Ownable {\r\n\r\n   using SafeMath for uint256;\r\n   \r\n   string public constant name = \"ERP\";\r\n   string public constant symbol = \"ERP\";\r\n   uint256 public constant decimals = 18;  \r\n   address public ethStore = 0xDcbFE8d41D4559b3EAD3179fa7Bb3ad77EaDa564;\r\n   uint256 public REMAINING_SUPPLY = 100000000000  * (10 ** uint256(decimals));\r\n   event Debug(string message, address addr, uint256 number);\r\n   event Message(string message);\r\n    string buyMessage;\r\n  \r\n  address wallet;\r\n   /**\r\n   * @dev Contructor that gives msg.sender all of existing tokens.\r\n   */\r\n    function ERP(address _wallet) public {\r\n        owner = msg.sender;\r\n        totalSupply = REMAINING_SUPPLY;\r\n        wallet = _wallet;\r\n        tokenBalances[wallet] = totalSupply;   //Since we divided the token into 10^18 parts\r\n    }\r\n    \r\n     function mint(address from, address to, uint256 tokenAmount) public onlyOwner {\r\n      require(tokenBalances[from] >= tokenAmount);               // checks if it has enough to sell\r\n      tokenBalances[to] = tokenBalances[to].add(tokenAmount);                  // adds the amount to buyer's balance\r\n      tokenBalances[from] = tokenBalances[from].sub(tokenAmount);                        // subtracts amount from seller's balance\r\n      REMAINING_SUPPLY = tokenBalances[wallet];\r\n      Transfer(from, to, tokenAmount); \r\n    }\r\n    \r\n    function getTokenBalance(address user) public view returns (uint256 balance) {\r\n        balance = tokenBalances[user]; // show token balance in full tokens not part\r\n        return balance;\r\n    }\r\n}\r\ncontract ERPTokenTransaction {\r\n    using SafeMath for uint256;\r\n    struct Transaction {\r\n        //uint entityId;\r\n        address entityId;\r\n        uint transactionId;\r\n        uint transactionType;       //0 for debit, 1 for credit\r\n        uint amount;\r\n        string transactionDate;\r\n        uint256 transactionTimeStamp;\r\n        string currency;\r\n        string accountingPeriod;\r\n    }\r\n    \r\n    struct AccountChart {\r\n        //uint entityId;\r\n        address entityId;\r\n        uint accountsPayable;\r\n        uint accountsReceivable;\r\n        uint sales;\r\n        uint isEntityInitialized;\r\n    }\r\n    \r\n    address[] entities;\r\n    uint[] allTransactionIdsList;\r\n    \r\n    uint[] allTransactionIdsAgainstAnEntityList;\r\n    mapping(address=>uint[])  entityTransactionsIds;\r\n    mapping(address=>Transaction[])  entityTransactions;\r\n    mapping(address=>AccountChart)  entityAccountChart;\r\n    mapping(address=>bool) freezedTokens;\r\n    address wallet;\r\n    ERP public token;   \r\n    uint256 transactionIdSequence = 0;\r\n    // how many token units a buyer gets per wei\r\n    uint256 public ratePerWei = 100;\r\n    uint256 public perTransactionRate = 1 * 10 ** 14;   //0.0001 tokens\r\n    \r\n    /**\r\n   * event for token purchase logging\r\n   * @param purchaser who paid for the tokens\r\n   * @param beneficiary who got the tokens\r\n   * @param value weis paid for purchase\r\n   * @param amount amount of tokens purchased\r\n   */\r\n  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n  event EmitAccountChartDetails (address entityId, uint accountsPayable,uint accountsReceivable,uint sales);\r\n  event EmitTransactionDetails (address entityId, uint transactionId, uint transactionType,uint amount,string transactionDate,string currency, string accountingPeriod);\r\n  event EmitTransactionIds (uint[] ids);\r\n  event EmitEntityIds (address[] ids);\r\n    //Objects for use within program\r\n\r\n    Transaction transObj;\r\n    AccountChart AccountChartObj;\r\n    \r\n    function ERPTokenTransaction(address _wallet) public {\r\n        wallet = _wallet;\r\n        token = createTokenContract(wallet);\r\n        \r\n        //add owner entity \r\n         entities.push(0);\r\n        //initialize account chart \r\n        AccountChartObj = AccountChart({\r\n            entityId : wallet,\r\n            accountsPayable: 0,\r\n            accountsReceivable: 0,\r\n            sales:0,\r\n            isEntityInitialized:1 \r\n        });\r\n        entityAccountChart[wallet] = AccountChartObj;\r\n    }\r\n    \r\n    function createTokenContract(address wall) internal returns (ERP) {\r\n    return new ERP(wall);\r\n   }\r\n    \r\n    // fallback function can be used to buy tokens\r\n    function () public payable {\r\n     buyTokens(msg.sender);\r\n    }\r\n    \r\n    // low level token purchase function\r\n   // Minimum purchase can be of 1 ETH\r\n  \r\n   function buyTokens(address beneficiary) public payable {\r\n    require(beneficiary != 0x0);\r\n\r\n    uint256 weiAmount = msg.value;\r\n\r\n    // calculate token amount to be given\r\n    uint256 tokens = weiAmount.mul(ratePerWei);\r\n   \r\n    token.mint(wallet, beneficiary, tokens); \r\n    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\r\n    forwardFunds();\r\n  }\r\n   // send ether to the fund collection wallet\r\n  // override to create custom fund forwarding mechanisms\r\n  function forwardFunds() internal {\r\n    wallet.transfer(msg.value);\r\n  }\r\n    //Add transaction against entity\r\n    function AddTransactionAgainstExistingEntity(address entId,uint transType,uint amt,string curr, string accPr) public \r\n    {\r\n        require (entityAccountChart[entId].isEntityInitialized == 1);\r\n        transactionIdSequence = transactionIdSequence + 1;\r\n         transObj = Transaction({\r\n            entityId : entId,\r\n            transactionId : transactionIdSequence,\r\n            transactionType: transType,\r\n            amount: amt,\r\n            transactionDate : \"NA\",\r\n            transactionTimeStamp: now,\r\n            currency : curr,\r\n            accountingPeriod : accPr\r\n          });\r\n          \r\n          entityTransactions[entId].push(transObj);\r\n          allTransactionIdsList.push(transactionIdSequence);\r\n          entityTransactionsIds[entId].push(transactionIdSequence);\r\n          MakeTokenCreditAndDebitEntry(msg.sender);\r\n    }\r\n    function MakeTokenCreditAndDebitEntry(address entId) internal {\r\n    \r\n          transactionIdSequence = transactionIdSequence + 1;\r\n         //debit entry\r\n         transObj = Transaction({\r\n            entityId : wallet,   //owner entity\r\n            transactionId : transactionIdSequence,\r\n            transactionType: 0, //debit type\r\n            amount: perTransactionRate,\r\n            transactionDate : \"NA\",\r\n            transactionTimeStamp: now,\r\n            currency : \"ERP\",\r\n            accountingPeriod : \"\"\r\n          });\r\n          entityTransactions[entId].push(transObj);\r\n          allTransactionIdsList.push(transactionIdSequence);\r\n          entityTransactionsIds[entId].push(transactionIdSequence);\r\n          \r\n          \r\n          transactionIdSequence = transactionIdSequence + 1;\r\n         //credit entry\r\n         transObj = Transaction({\r\n            entityId : entId,\r\n            transactionId : transactionIdSequence,\r\n            transactionType: 1,     //credit\r\n            amount: perTransactionRate,\r\n            transactionDate : \"NA\",\r\n            transactionTimeStamp: now,\r\n            currency : \"ERP\",\r\n            accountingPeriod : \"\"\r\n          });\r\n          \r\n          entityTransactions[entId].push(transObj);\r\n          allTransactionIdsList.push(transactionIdSequence);\r\n          entityTransactionsIds[entId].push(transactionIdSequence);\r\n    }\r\n    //add accout chart against entity\r\n    function updateAccountChartAgainstExistingEntity(address entId, uint accPayable, uint accReceivable,uint sale) public\r\n    {\r\n        require(token.getTokenBalance(msg.sender)>=perTransactionRate);\r\n        require(freezedTokens[entId] == false);\r\n        require (entityAccountChart[entId].isEntityInitialized == 1);\r\n        token.mint(msg.sender, wallet, perTransactionRate);\r\n        require(freezedTokens[entId] == false);\r\n    \r\n       \r\n        AccountChartObj = AccountChart({\r\n            entityId : entId,\r\n            accountsPayable: accPayable,\r\n            accountsReceivable: accReceivable,\r\n            sales:sale,\r\n            isEntityInitialized:1\r\n        });\r\n        \r\n        entityAccountChart[entId] = AccountChartObj;\r\n        \r\n         MakeTokenCreditAndDebitEntry(msg.sender);\r\n    }\r\n    function addEntity(address entId) public\r\n    {\r\n        require(token.getTokenBalance(msg.sender)>=perTransactionRate);\r\n        require(freezedTokens[entId] == false);\r\n        require (entityAccountChart[entId].isEntityInitialized == 0);\r\n        token.mint(msg.sender, wallet, perTransactionRate);\r\n       \r\n        entities.push(entId);\r\n        //initialize account chart \r\n        AccountChartObj = AccountChart({\r\n            entityId : entId,\r\n            accountsPayable: 0,\r\n            accountsReceivable: 0,\r\n            sales:0,\r\n            isEntityInitialized:1 \r\n        });\r\n        entityAccountChart[entId] = AccountChartObj;\r\n        MakeTokenCreditAndDebitEntry(msg.sender);\r\n    }\r\n    \r\n    function getAllEntityIds() public returns (address[] entityList) \r\n    {\r\n        require(token.getTokenBalance(msg.sender)>=perTransactionRate);\r\n        token.mint(msg.sender, wallet, perTransactionRate);\r\n        require(freezedTokens[msg.sender] == false);\r\n        MakeTokenCreditAndDebitEntry(msg.sender);\r\n        EmitEntityIds(entities);\r\n        return entities;\r\n    }\r\n    \r\n    function getAllTransactionIdsByEntityId(address entId) public returns (uint[] transactionIds)\r\n    {\r\n        require(token.getTokenBalance(msg.sender)>=perTransactionRate);\r\n        require(freezedTokens[entId] == false);\r\n        token.mint(msg.sender, wallet, perTransactionRate);\r\n        MakeTokenCreditAndDebitEntry(msg.sender);\r\n        EmitTransactionIds(entityTransactionsIds[entId]);\r\n        return entityTransactionsIds[entId];\r\n    }\r\n    \r\n    function getAllTransactionIds() public returns (uint[] transactionIds)\r\n    {\r\n        require(token.getTokenBalance(msg.sender)>=perTransactionRate);\r\n        require(freezedTokens[msg.sender] == false);\r\n        token.mint(msg.sender,wallet,perTransactionRate);\r\n        MakeTokenCreditAndDebitEntry(msg.sender);\r\n        EmitTransactionIds(allTransactionIdsList);\r\n        return allTransactionIdsList;\r\n    }\r\n    \r\n    function getTransactionByTransactionId(uint transId) public \r\n    {\r\n        require(token.getTokenBalance(msg.sender)>=perTransactionRate);\r\n        require(freezedTokens[msg.sender] == false);\r\n        token.mint(msg.sender, wallet, perTransactionRate);\r\n        MakeTokenCreditAndDebitEntry(msg.sender);\r\n        for(uint i=0; i<entities.length;i++)\r\n        {\r\n            //loop through all the enitities , gets each entity by entity[i]\r\n            Transaction[] storage transactionsListByEntityId = entityTransactions[entities[i]];\r\n            for (uint j=0;j<transactionsListByEntityId.length;j++)\r\n            {\r\n                //loop through all the transactions list against each entity\r\n                // checks if transaction id is matched returns the transaction object\r\n                if(transactionsListByEntityId[j].transactionId==transId)\r\n                {\r\n                    EmitTransactionDetails (transactionsListByEntityId[j].entityId,transactionsListByEntityId[j].transactionId,\r\n                            transactionsListByEntityId[j].transactionType,transactionsListByEntityId[j].amount,\r\n                            transactionsListByEntityId[j].transactionDate,transactionsListByEntityId[j].currency,\r\n                            transactionsListByEntityId[j].accountingPeriod);\r\n                }\r\n               \r\n            }\r\n        }\r\n        EmitTransactionDetails (0,0,0,0,\"NA\",\"NA\",\"NA\");\r\n    }\r\n    \r\n    function getTransactionByTransactionAndEntityId(address entId, uint transId) public \r\n    {\r\n        require(token.getTokenBalance(msg.sender)>=perTransactionRate);\r\n        require(freezedTokens[msg.sender] == false);\r\n        token.mint(msg.sender, wallet, perTransactionRate);\r\n        MakeTokenCreditAndDebitEntry(msg.sender);\r\n        // gets each entity by entity[entId]\r\n        Transaction[] storage transactionsListByEntityId = entityTransactions[entId];\r\n        for (uint j=0;j<transactionsListByEntityId.length;j++)\r\n        {\r\n            //loop through all the transactions list against each entity\r\n            // checks if transaction id is matched returns the transaction object\r\n            if(transactionsListByEntityId[j].transactionId==transId)\r\n            {\r\n                EmitTransactionDetails (transactionsListByEntityId[j].entityId,transactionsListByEntityId[j].transactionId,\r\n                            transactionsListByEntityId[j].transactionType,transactionsListByEntityId[j].amount,\r\n                            transactionsListByEntityId[j].transactionDate,transactionsListByEntityId[j].currency,\r\n                            transactionsListByEntityId[j].accountingPeriod);\r\n            }\r\n        }\r\n        EmitTransactionDetails (0,0,0,0,\"NA\",\"NA\",\"NA\");\r\n    }\r\n    \r\n    function getAccountChartDetailsByEntityId(address entId) public\r\n    {\r\n        require(token.getTokenBalance(msg.sender)>=perTransactionRate);\r\n        require(freezedTokens[msg.sender] == false);\r\n        token.mint(msg.sender, wallet, perTransactionRate);\r\n        MakeTokenCreditAndDebitEntry(msg.sender);\r\n        EmitAccountChartDetails (entityAccountChart[entId].entityId,entityAccountChart[entId].accountsPayable,\r\n                entityAccountChart[entId].accountsReceivable,entityAccountChart[entId].sales);\r\n    }\r\n     function showMyTokenBalance() public constant returns (uint256 tokenBalance) {\r\n        tokenBalance = token.getTokenBalance(msg.sender);\r\n        return tokenBalance;\r\n    }\r\n    \r\n     function freezeTokensOfOneUser(address entityId) public {\r\n        require(msg.sender == wallet);\r\n        freezedTokens[entityId] = true;\r\n    }\r\n    \r\n    function UnfreezeTokensOfOneUser(address entityId) public {\r\n        require(msg.sender == wallet);\r\n        freezedTokens[entityId] = false;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"entityId\",\"type\":\"address\"}],\"name\":\"freezeTokensOfOneUser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"entityId\",\"type\":\"address\"}],\"name\":\"UnfreezeTokensOfOneUser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"entId\",\"type\":\"address\"}],\"name\":\"getAllTransactionIdsByEntityId\",\"outputs\":[{\"name\":\"transactionIds\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getAllTransactionIds\",\"outputs\":[{\"name\":\"transactionIds\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"entId\",\"type\":\"address\"},{\"name\":\"transType\",\"type\":\"uint256\"},{\"name\":\"amt\",\"type\":\"uint256\"},{\"name\":\"curr\",\"type\":\"string\"},{\"name\":\"accPr\",\"type\":\"string\"}],\"name\":\"AddTransactionAgainstExistingEntity\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getAllEntityIds\",\"outputs\":[{\"name\":\"entityList\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"entId\",\"type\":\"address\"},{\"name\":\"transId\",\"type\":\"uint256\"}],\"name\":\"getTransactionByTransactionAndEntityId\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"transId\",\"type\":\"uint256\"}],\"name\":\"getTransactionByTransactionId\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ratePerWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"showMyTokenBalance\",\"outputs\":[{\"name\":\"tokenBalance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"perTransactionRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"entId\",\"type\":\"address\"}],\"name\":\"addEntity\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"entId\",\"type\":\"address\"}],\"name\":\"getAccountChartDetailsByEntityId\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"entId\",\"type\":\"address\"},{\"name\":\"accPayable\",\"type\":\"uint256\"},{\"name\":\"accReceivable\",\"type\":\"uint256\"},{\"name\":\"sale\",\"type\":\"uint256\"}],\"name\":\"updateAccountChartAgainstExistingEntity\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"entityId\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"accountsPayable\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"accountsReceivable\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"sales\",\"type\":\"uint256\"}],\"name\":\"EmitAccountChartDetails\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"entityId\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"transactionId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"transactionType\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"transactionDate\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"currency\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"accountingPeriod\",\"type\":\"string\"}],\"name\":\"EmitTransactionDetails\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"EmitTransactionIds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ids\",\"type\":\"address[]\"}],\"name\":\"EmitEntityIds\",\"type\":\"event\"}]","ContractName":"ERPTokenTransaction","CompilerVersion":"v0.4.20-nightly.2018.1.11+commit.c20b6da","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000dcbfe8d41d4559b3ead3179fa7bb3ad77eada564","Library":"","SwarmSource":"bzzr://7ffba18db4ca66e7fec46017a100582763d11f8aea91b97629be75cc62c97c64"}]}