{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.15;\r\n\r\n// ERC Token Standard #20 Interface\r\n// https://github.com/ethereum/EIPs/issues/20\r\ncontract ERC20Interface\r\n{\r\n    function totalSupply() public constant returns (uint256);\r\n    function balanceOf(address owner) public constant returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n    function allowance(address owner, address spender) public constant returns (uint256);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// Additional desired wallet functionality\r\ncontract ERC20Burnable is ERC20Interface\r\n{\r\n    function burn(uint256 value) returns (bool);\r\n\r\n    event Burn(address indexed owner, uint256 value);\r\n}\r\n\r\n// Wallet implementation\r\ncontract VRTtoken is ERC20Burnable\r\n{\r\n    // Public data\r\n    string public constant name = \"VRT token\";\r\n    string public constant symbol = \"VRT\";\r\n    uint256 public constant decimals = 9; \r\n    address public owner;  \r\n\r\n    // Internal data\r\n    uint256 private constant initialSupply = 100000000; // 100,000,000\r\n    uint256 private currentSupply;\r\n    mapping(address => uint256) private balances;\r\n    mapping(address => mapping (address => uint256)) private allowed;\r\n\r\n    function VRTtoken()\r\n    {\r\n        // Increase initial supply by appropriate factor to allow\r\n        // for the desired number of decimals\r\n        currentSupply = initialSupply * (10 ** uint(decimals));\r\n\r\n        owner = msg.sender;\r\n        balances[owner] = currentSupply - 478433206500000;\r\n        balances[0xa878177D38B932D9E5C5DD5D6DF27759b07dC9E0] = 6000000000000;\r\n        balances[0x5af0ddFa8DFb5F29b5D41bFf41A8ef109c3F7072] = 236250000000;\r\n        balances[0x3082F7AFB5eC42a3E3e8a0524e443A561ff479A4] = 6817500000;\r\n        balances[0x41f464D2341E8Aa1EDF74E9aedD9B551E340dEC9] = 307500000000;\r\n        balances[0xc5DE97dE45cf59eaA97d89c68FaC549167B85D28] = 37500000000;\r\n        balances[0x687Eab8387faFca0E894c7890571cb8885d06252] = 75000000000;\r\n        balances[0xDB82638bA86A925BC56f0150Fa426642C3b69574] = 2250000000000;\r\n        balances[0xB24673108d0e63238ad9b7cb16C26B65Ab0901ad] = 150000000000;\r\n        balances[0xC50653E116b10f487b588eBCd5c1E4FfA49DD50e] = 3750000000000;\r\n        balances[0xC0b6eBF6485fF134453e537139cAB5a340125287] = 3750000000000;\r\n        balances[0xb8c180DD09E611ac253AB321650B8b5393D6A00C] = 1500000000000;\r\n        balances[0x5EE6ffb12ba911D7e1299e8F7e31924B3e52564b] = 3000000000000;\r\n        balances[0xFb8d70B3347f8BdAe3b9e7EAf7d623F721A91fCe] = 155921947000000;\r\n        balances[0xd2993BdE19Aa51FbEb8AfBE336D1E21b1b1FA074] = 178257000000000;\r\n        balances[0x4C84ED7adA883539F54c768932e9BBa8a9F1e784] = 117324947000000;\r\n        balances[0xFb8d70B3347f8BdAe3b9e7EAf7d623F721A91fCe] = 5866245000000;\r\n        Transfer(owner, 0xa878177D38B932D9E5C5DD5D6DF27759b07dC9E0, 6000000000000);\r\n        Transfer(owner, 0x5af0ddFa8DFb5F29b5D41bFf41A8ef109c3F7072, 236250000000);\r\n        Transfer(owner, 0x3082F7AFB5eC42a3E3e8a0524e443A561ff479A4, 6817500000);\r\n        Transfer(owner, 0x41f464D2341E8Aa1EDF74E9aedD9B551E340dEC9, 307500000000);\r\n        Transfer(owner, 0xc5DE97dE45cf59eaA97d89c68FaC549167B85D28, 37500000000);\r\n        Transfer(owner, 0x687Eab8387faFca0E894c7890571cb8885d06252, 75000000000);\r\n        Transfer(owner, 0xDB82638bA86A925BC56f0150Fa426642C3b69574, 2250000000000);\r\n        Transfer(owner, 0xB24673108d0e63238ad9b7cb16C26B65Ab0901ad, 150000000000);\r\n        Transfer(owner, 0xC50653E116b10f487b588eBCd5c1E4FfA49DD50e, 3750000000000);\r\n        Transfer(owner, 0xC0b6eBF6485fF134453e537139cAB5a340125287, 3750000000000);\r\n        Transfer(owner, 0xb8c180DD09E611ac253AB321650B8b5393D6A00C, 1500000000000);\r\n        Transfer(owner, 0x5EE6ffb12ba911D7e1299e8F7e31924B3e52564b, 3000000000000);\r\n        Transfer(owner, 0xFb8d70B3347f8BdAe3b9e7EAf7d623F721A91fCe, 155921947000000);\r\n        Transfer(owner, 0xd2993BdE19Aa51FbEb8AfBE336D1E21b1b1FA074, 178257000000000);\r\n        Transfer(owner, 0x4C84ED7adA883539F54c768932e9BBa8a9F1e784, 117324947000000);\r\n        Transfer(owner, 0xFb8d70B3347f8BdAe3b9e7EAf7d623F721A91fCe, 5866245000000);\r\n    }\r\n\r\n    function totalSupply() public constant \r\n        returns (uint256)\r\n    {\r\n        return currentSupply;\r\n    }\r\n\r\n    function balanceOf(address tokenOwner) public constant \r\n        returns (uint256)\r\n    {\r\n        return balances[tokenOwner];\r\n    }\r\n  \r\n    function transfer(address to, uint256 amount) public \r\n        returns (bool)\r\n    {\r\n        if (balances[msg.sender] >= amount && // Sender has enough?\r\n            balances[to] + amount > balances[to]) // Transfer won't cause overflow?\r\n        {\r\n            balances[msg.sender] -= amount;\r\n            balances[to] += amount;\r\n            Transfer(msg.sender, to, amount);\r\n            return true;\r\n        } \r\n        else // Invalid transfer\r\n        {\r\n            return false;\r\n        }\r\n    }\r\n  \r\n    function transferFrom(address from, address to, uint256 amount) public \r\n        returns (bool)\r\n    {\r\n        if (balances[from] >= amount && // Account has enough?\r\n            allowed[from][msg.sender] >= amount && // Sender can act for account for this amount?\r\n            balances[to] + amount > balances[to]) // Transfer won't cause overflow?\r\n        {\r\n            balances[from] -= amount;\r\n            allowed[from][msg.sender] -= amount;\r\n            balances[to] += amount;\r\n            Transfer(from, to, amount);\r\n            return true;\r\n        }\r\n        else // Invalid transfer\r\n        {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public \r\n        returns (bool)\r\n    {\r\n        allowed[msg.sender][spender] = amount;\r\n        Approval(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address tokenOwner, address spender) public constant \r\n        returns (uint256)\r\n    {\r\n        return allowed[tokenOwner][spender];\r\n    }\r\n\r\n    function burn(uint256 amount) public \r\n        returns (bool)\r\n    {\r\n        require(msg.sender == owner); // Only the owner can burn\r\n\r\n        if (balances[msg.sender] >= amount) // Account has enough?\r\n        {\r\n            balances[msg.sender] -= amount;\r\n            currentSupply -= amount;\r\n            Burn(msg.sender, amount);\r\n            return true;\r\n        }\r\n        else // Not enough to burn\r\n        {\r\n            return false;\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"VRTtoken","CompilerVersion":"v0.4.15+commit.bbb8e64f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://b7ce9644caa48e5381986e33062cf94d041086263221c050246f64402af4180b"}]}