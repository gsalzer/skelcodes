{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner {\r\n    if (newOwner != address(0)) {\r\n      owner = newOwner;\r\n    }\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Distributable\r\n * @dev The Distribution contract has multi dealer address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Distributable is Ownable {\r\n  mapping(address => bool) public dealership;\r\n  event Trust(address dealer);\r\n  event Distrust(address dealer);\r\n\r\n  modifier onlyDealers() {\r\n    require(dealership[msg.sender]);\r\n    _;\r\n  }\r\n\r\n  function trust(address newDealer) onlyOwner {\r\n    require(newDealer != address(0));\r\n    require(!dealership[newDealer]);\r\n    dealership[newDealer] = true;\r\n    Trust(newDealer);\r\n  }\r\n\r\n  function distrust(address dealer) onlyOwner {\r\n    require(dealership[dealer]);\r\n    dealership[dealer] = false;\r\n    Distrust(dealer);\r\n  }\r\n\r\n}\r\n\r\n\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev modifier to allow actions only when the contract IS paused\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev modifier to allow actions only when the contract IS NOT paused\r\n   */\r\n  modifier whenPaused {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused returns (bool) {\r\n    paused = true;\r\n    Pause();\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused returns (bool) {\r\n    paused = false;\r\n    Unpause();\r\n    return true;\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) constant returns (uint256);\r\n  function transfer(address to, uint256 value) returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) returns (bool) {\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) returns (bool);\r\n  function approve(address spender, uint256 value) returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amout of tokens to be transfered\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\r\n    var _allowance = allowed[_from][msg.sender];\r\n\r\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n    // require (_value <= _allowance);\r\n\r\n    balances[_to] = balances[_to].add(_value);\r\n    balances[_from] = balances[_from].sub(_value);\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) returns (bool) {\r\n\r\n    // To change the approve amount you first have to reduce the addresses`\r\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n    //  already 0 to mitigate the race condition described here:\r\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifing the amount of tokens still avaible for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n}\r\n\r\n\r\ncontract DistributionToken is StandardToken, Distributable {\r\n  event Mint(address indexed dealer, address indexed to, uint256 value);\r\n  event Burn(address indexed dealer, address indexed from, uint256 value);\r\n\r\n   /**\r\n   * @dev to mint tokens\r\n   * @param _to The address that will recieve the minted tokens.\r\n   * @param _value The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(address _to, uint256 _value) onlyDealers returns (bool) {\r\n    totalSupply = totalSupply.add(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Mint(msg.sender, _to, _value);\r\n    Transfer(address(0), _to, _value);\r\n    return true;\r\n  }\r\n\r\n\r\n  function burn(address _from, uint256 _value) onlyDealers returns (bool) {\r\n    totalSupply = totalSupply.sub(_value);\r\n    balances[_from] = balances[_from].sub(_value);\r\n    Burn(msg.sender, _from, _value);\r\n    Transfer(_from, address(0), _value);\r\n    return true;\r\n  }\r\n}\r\n\r\n\r\ncontract EverFountainBeanSale is Ownable, Pausable, Distributable {\r\n  using SafeMath for uint256;\r\n  event Sale(address indexed customer, uint256 value, uint256 amount, uint256 consume, string order, uint256 reward);\r\n  struct FlexibleReward {\r\n    uint256 percentage;\r\n    uint256 limit;\r\n  }\r\n\r\n  uint256 public totalSales;\r\n  uint256 public totalReward;\r\n  uint256 public totalConsume;\r\n  FlexibleReward[] public flexibleRewardLevel;\r\n  uint256 flexibleRewardIndex = 0;\r\n\r\n  // address where funds are collected\r\n  address public wallet;\r\n\r\n  // how many token units a buyer gets per wei\r\n  uint256 public rate;\r\n\r\n  uint256 public weiRaised;\r\n\r\n  DistributionToken public token;\r\n\r\n  function EverFountainBeanSale(DistributionToken _token, uint256 _rate, address _wallet){\r\n    require(_token != address(0));\r\n    require(_rate > 0);\r\n    require(_wallet != address(0));\r\n    token = _token;\r\n    wallet = _wallet;\r\n    rate = _rate;\r\n\r\n    flexibleRewardLevel.push(FlexibleReward({ limit:1000000, percentage:15}));\r\n    flexibleRewardLevel.push(FlexibleReward({ limit:3000000, percentage:13}));\r\n    flexibleRewardLevel.push(FlexibleReward({ limit:6000000, percentage:11}));\r\n    flexibleRewardLevel.push(FlexibleReward({ limit:10000000, percentage:9}));\r\n    flexibleRewardLevel.push(FlexibleReward({ limit:15000000, percentage:7}));\r\n    flexibleRewardLevel.push(FlexibleReward({ limit:21000000, percentage:5}));\r\n    flexibleRewardLevel.push(FlexibleReward({ limit:0, percentage:0}));\r\n    trust(msg.sender);\r\n  }\r\n\r\n  function balanceOf(address _owner) constant returns (uint256 balance) {\r\n    return token.balanceOf(_owner);\r\n  }\r\n\r\n  function calcFlexibleReward(uint256 amount) constant returns (uint256 reward){\r\n    FlexibleReward memory level = flexibleRewardLevel[flexibleRewardIndex];\r\n    if (level.limit == 0) {\r\n      return 0;\r\n    }\r\n    FlexibleReward memory nextLevel = flexibleRewardLevel[flexibleRewardIndex + 1];\r\n    uint256 futureTotalSales = totalSales.add(amount);\r\n    uint256 benefit;\r\n    if (nextLevel.limit == 0) {\r\n      if (level.limit >= futureTotalSales) {\r\n        return amount.mul(level.percentage).div(100);\r\n      }\r\n      benefit = level.limit.sub(totalSales);\r\n      return benefit.mul(level.percentage).div(100);\r\n    }\r\n\r\n    require(nextLevel.limit > futureTotalSales);\r\n\r\n    if (level.limit >= futureTotalSales) {\r\n      return amount.mul(level.percentage).div(100);\r\n    }\r\n\r\n    benefit = level.limit.sub(totalSales);\r\n    uint256 nextBenefit = amount.sub(benefit);\r\n    return benefit.mul(level.percentage).div(100).add(nextBenefit.mul(nextLevel.percentage).div(100));\r\n\r\n  }\r\n\r\n  function calcFixedReward(uint256 amount) constant returns (uint256 reward){\r\n    uint256 less6000Reward = 0;\r\n    uint256 less24000Percentage = 5;\r\n    uint256 mostPercentage = 15;\r\n\r\n    if (amount < 6000) {\r\n      return less6000Reward;\r\n    }\r\n\r\n    if (amount < 24000) {\r\n      return amount.mul(less24000Percentage).div(100);\r\n    }\r\n\r\n    return amount.mul(mostPercentage).div(100);\r\n  }\r\n\r\n  function calcReward(uint256 amount) constant returns (uint256 reward){\r\n    return calcFixedReward(amount).add(calcFlexibleReward(amount));\r\n  }\r\n\r\n  function flexibleReward() constant returns (uint256 percentage, uint limit){\r\n    FlexibleReward memory level = flexibleRewardLevel[flexibleRewardIndex];\r\n    return (level.percentage, level.limit);\r\n  }\r\n\r\n  function nextFlexibleReward() constant returns (uint256 percentage, uint limit){\r\n    FlexibleReward memory nextLevel = flexibleRewardLevel[flexibleRewardIndex+1];\r\n    return (nextLevel.percentage, nextLevel.limit);\r\n  }\r\n\r\n  function setRate(uint256 _rate) onlyDealers returns(bool) {\r\n    require(_rate > 0);\r\n    rate = _rate;\r\n    return true;\r\n  }\r\n\r\n  function destroy() onlyOwner {\r\n    selfdestruct(owner);\r\n  }\r\n\r\n  function changeWallet(address _wallet) onlyOwner returns(bool) {\r\n    require(_wallet != address(0));\r\n    wallet = _wallet;\r\n    return true;\r\n  }\r\n\r\n  function trade(uint256 amount, uint256 consume, string order) payable whenNotPaused returns(bool){\r\n    require(bytes(order).length > 0);\r\n    uint256 balance;\r\n    if (msg.value == 0) {\r\n      //only consume\r\n      require(consume > 0);\r\n      require(amount == 0);\r\n      balance = token.balanceOf(msg.sender);\r\n      require(balance >= consume);\r\n      totalConsume = totalConsume.add(consume);\r\n      token.burn(msg.sender, consume);\r\n      Sale(msg.sender, msg.value, amount, consume, order, 0);\r\n      return true;\r\n    }\r\n\r\n    require(amount > 0);\r\n    uint256 sales = msg.value.div(rate);\r\n    require(sales == amount);\r\n    totalSales = totalSales.add(sales);\r\n    uint256 reward = calcReward(sales);\r\n    totalReward = totalReward.add(reward);\r\n    FlexibleReward memory level = flexibleRewardLevel[flexibleRewardIndex];\r\n    if (level.limit>0 && totalSales >= level.limit) {\r\n      flexibleRewardIndex = flexibleRewardIndex + 1;\r\n    }\r\n    uint256 gain = sales.add(reward);\r\n\r\n    if (consume == 0) {\r\n      //only sale token\r\n      token.mint(msg.sender, gain);\r\n\r\n      weiRaised = weiRaised.add(msg.value);\r\n      wallet.transfer(msg.value);\r\n\r\n      Sale(msg.sender, msg.value, amount, consume, order, reward);\r\n      return true;\r\n    }\r\n\r\n    balance = token.balanceOf(msg.sender);\r\n    uint256 futureBalance = balance.add(gain);\r\n    require(futureBalance >= consume);\r\n\r\n    totalConsume = totalConsume.add(consume);\r\n    token.mint(msg.sender, gain);\r\n    token.burn(msg.sender, consume);\r\n\r\n    weiRaised = weiRaised.add(msg.value);\r\n    wallet.transfer(msg.value);\r\n\r\n    Sale(msg.sender, msg.value, amount, consume, order, reward);\r\n    return true;\r\n  }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"consume\",\"type\":\"uint256\"},{\"name\":\"order\",\"type\":\"string\"}],\"name\":\"trade\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"dealership\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"setRate\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newDealer\",\"type\":\"address\"}],\"name\":\"trust\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"calcReward\",\"outputs\":[{\"name\":\"reward\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSales\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalReward\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"flexibleRewardLevel\",\"outputs\":[{\"name\":\"percentage\",\"type\":\"uint256\"},{\"name\":\"limit\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"destroy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextFlexibleReward\",\"outputs\":[{\"name\":\"percentage\",\"type\":\"uint256\"},{\"name\":\"limit\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"changeWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"flexibleReward\",\"outputs\":[{\"name\":\"percentage\",\"type\":\"uint256\"},{\"name\":\"limit\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"calcFlexibleReward\",\"outputs\":[{\"name\":\"reward\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"calcFixedReward\",\"outputs\":[{\"name\":\"reward\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"dealer\",\"type\":\"address\"}],\"name\":\"distrust\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalConsume\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_rate\",\"type\":\"uint256\"},{\"name\":\"_wallet\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"consume\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"order\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"Sale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"dealer\",\"type\":\"address\"}],\"name\":\"Trust\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"dealer\",\"type\":\"address\"}],\"name\":\"Distrust\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"}]","ContractName":"EverFountainBeanSale","CompilerVersion":"v0.4.16+commit.d7661dd9","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000073fb696745590296b0f3a1fba99fc27bead5717d000000000000000000000000000000000000000000000000000045f60caccec40000000000000000000000002d1c30ce6d3f84645384b3e532843bd450bd9465","Library":"","SwarmSource":"bzzr://920f8b0c9056aed81a7ad2911e5c1fb3254e6a5d64a8b5b3eee866e4722ff04d"}]}