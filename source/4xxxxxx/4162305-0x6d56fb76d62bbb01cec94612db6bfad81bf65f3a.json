{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity^0.4.13;\r\n\r\n/**\r\n * Math operations with safety checks\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint a, uint b) internal returns (uint) {\r\n    uint c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint a, uint b) internal returns (uint) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint a, uint b) internal returns (uint) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint a, uint b) internal returns (uint) {\r\n    uint c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n\r\n  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n    return a < b ? a : b;\r\n  }\r\n\r\n  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    return a < b ? a : b;\r\n  }\r\n\r\n  function assert(bool assertion) internal {\r\n    if (!assertion) {\r\n      throw;\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20Basic {\r\n  uint public totalSupply;\r\n  function balanceOf(address who) constant returns (uint);\r\n  function transfer(address to, uint value);\r\n  event Transfer(address indexed from, address indexed to, uint value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) constant returns (uint);\r\n  function transferFrom(address from, address to, uint value);\r\n  function approve(address spender, uint value);\r\n  event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances. \r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint;\r\n\r\n  mapping(address => uint) balances;\r\n\r\n  /**\r\n   * @dev Fix for the ERC20 short address attack.\r\n   */\r\n  modifier onlyPayloadSize(uint size) {\r\n     if(msg.data.length < size + 4) {\r\n       throw;\r\n     }\r\n     _;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint _value) onlyPayloadSize(2 * 32) {\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of. \r\n  * @return An uint representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) constant returns (uint balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is BasicToken, ERC20 {\r\n\r\n  mapping (address => mapping (address => uint)) allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint the amout of tokens to be transfered\r\n   */\r\n  function transferFrom(address _from, address _to, uint _value) onlyPayloadSize(3 * 32) {\r\n    var _allowance = allowed[_from][msg.sender];\r\n\r\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n    // if (_value > _allowance) throw;\r\n\r\n    balances[_to] = balances[_to].add(_value);\r\n    balances[_from] = balances[_from].sub(_value);\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    Transfer(_from, _to, _value);\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on beahlf of msg.sender.\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint _value) {\r\n\r\n    // To change the approve amount you first have to reduce the addresses`\r\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n    //  already 0 to mitigate the race condition described here:\r\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    if ((_value != 0) && (allowed[msg.sender][_spender] != 0)) throw;\r\n\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens than an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint specifing the amount of tokens still avaible for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) constant returns (uint remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n}\r\n\r\n\r\ncontract SFTToken is StandardToken {\r\n\tusing SafeMath for uint256;\r\n\r\n\tstring public constant name = \"SFT Token\";\r\n\tstring public constant symbol = \"SFT\";\r\n\tuint256 public constant decimals = 18; \r\n\tstring public version = \"1.0\";\r\n\t\r\n\taddress public executor;\r\n\taddress public devETHDestination;\r\n\taddress public devSFTDestination;\r\n\t\r\n\tbool public saleHasEnded;\r\n\tbool public minCapReached;\r\n\tbool public allowRefund;\r\n\r\n\tmapping (address => uint256) public ETHContributed;\r\n\r\n\tuint256 public totalETHRaised;\r\n\r\n\tuint256 public saleStartBlock;\r\n\tuint256 public saleEndBlock;\r\n\r\n        uint256 public saleFirstEarlyBirdEndBlock;\r\n\tuint256 public saleSecondEarlyBirdEndBlock;\r\n\r\n\tuint256 public constant DEV_PORTION = 45;\r\n\tuint256 public constant SECURITY_ETHER_CAP = 20000 ether;\r\n\r\n        uint256 public constant SFT_PER_ETH_FIRST_EARLY_BIRD_RATE = 550;\r\n\tuint256 public constant SFT_PER_ETH_SECOND_EARLY_BIRD_RATE = 525;\r\n\tuint256 public constant SFT_PER_ETH_BASE_RATE = 500; \r\n\t\r\n\tfunction SFTToken() {\r\n\t        executor = msg.sender;\r\n\r\n\t\tsaleHasEnded = false;\r\n                minCapReached = false;\r\n\t\tallowRefund = false;\r\n\r\n\t\tdevETHDestination = 0x8C5CbE9B28618Dd2d7e6A4110FB52DFa378a0196;\r\n\t\tdevSFTDestination = 0x8C5CbE9B28618Dd2d7e6A4110FB52DFa378a0196;\r\n\r\n\t\ttotalETHRaised = 0;\r\n\t\ttotalSupply = 0;\r\n\r\n\t\tsaleStartBlock = 4166530;\r\n\t\tsaleEndBlock = 4291810;\r\n\r\n                saleFirstEarlyBirdEndBlock = 4194610;\r\n                saleSecondEarlyBirdEndBlock = 4227010 ;\r\n\r\n\t}\r\n\t\r\n\tfunction createTokens() payable external {\r\n\t\tif (saleHasEnded) throw;\r\n\t\tif (block.number < saleStartBlock) throw;\r\n\t\tif (block.number > saleEndBlock) throw;\r\n\t\tuint256 newEtherBalance = totalETHRaised.add(msg.value);\r\n\t\tif (newEtherBalance > SECURITY_ETHER_CAP) throw; \r\n\t\tif (0 == msg.value) throw;\r\n\t\t\r\n\t\tuint256 curTokenRate = SFT_PER_ETH_BASE_RATE;\r\n\r\n                if (block.number < saleFirstEarlyBirdEndBlock) {\r\n\t          curTokenRate = SFT_PER_ETH_FIRST_EARLY_BIRD_RATE;\r\n\t\t}\r\n\t\telse if (block.number < saleSecondEarlyBirdEndBlock) {\r\n\t\t  curTokenRate = SFT_PER_ETH_SECOND_EARLY_BIRD_RATE;\r\n\t\t}\r\n\r\n\t\tuint256 amountOfETH = msg.value.mul(curTokenRate);\r\n\r\n\t\tuint256 totalSupplySafe = totalSupply.add(amountOfETH);\r\n\t\tuint256 balanceSafe = balances[msg.sender].add(amountOfETH);\r\n\t\tuint256 contributedSafe = ETHContributed[msg.sender].add(msg.value);\r\n\r\n\t\ttotalSupply = totalSupplySafe;\r\n\t\tbalances[msg.sender] = balanceSafe;\r\n\r\n\t\ttotalETHRaised = newEtherBalance;\r\n\t\tETHContributed[msg.sender] = contributedSafe;\r\n\r\n\t}\r\n\t\r\n\tfunction endSale() {\r\n\t\tif (saleHasEnded) throw;\r\n\t\tif (!minCapReached) throw;\r\n\t\tif (msg.sender != executor) throw;\r\n\r\n                uint256 additionalSFT = (totalSupply.mul(DEV_PORTION)).div(100 - DEV_PORTION);\r\n\t\tuint256 totalSupplySafe = totalSupply.add(additionalSFT);\r\n\t\tuint256 devShare = additionalSFT;\r\n\r\n\t\ttotalSupply = totalSupplySafe;\r\n\t\tbalances[devSFTDestination] = devShare;\r\n\r\n\t        saleHasEnded = true;\r\n\r\n\t\tif (this.balance > 0) {\r\n\t\t\tif (!devETHDestination.call.value(this.balance)()) throw;\r\n\t\t}\r\n\t}\r\n\r\n      \tfunction withdrawFunds() {\r\n\t\tif (0 == this.balance) throw;\r\n\t\tif (!minCapReached) throw;\r\n\t\tif (!devETHDestination.call.value(this.balance)()) throw;\r\n\t}\r\n\r\n        function triggerMinCap() {\r\n\t\tif (msg.sender != executor) throw;\r\n\t\tminCapReached = true;\r\n\t}\r\n\r\n\tfunction triggerRefund() {\r\n\t\t// No refunds if the sale was successful\r\n\t\tif (saleHasEnded) throw;\r\n\t\t// No refunds if minimum cap is hit\r\n\t\tif (minCapReached) throw;\r\n\t\t// No refunds if the sale is still progressing\r\n\t\tif (block.number < saleEndBlock) throw;\r\n\t\tif (msg.sender != executor) throw;\r\n\r\n\t\tallowRefund = true;\r\n\t}\r\n\r\n\tfunction refund() external {\r\n\t\t// No refunds until it is approved\r\n\t\tif (!allowRefund) throw;\r\n\t\t// Nothing to refund\r\n\t\tif (0 == ETHContributed[msg.sender]) throw;\r\n\r\n\t\t// Do the refund.\r\n\t\tuint256 etherAmount = ETHContributed[msg.sender];\r\n\t\tETHContributed[msg.sender] = 0;\r\n\r\n\t\tif (!msg.sender.send(etherAmount)) throw;\r\n\t}\r\n\t\r\n\tfunction changeDeveloperETHDestinationAddress(address _newAddress) {\r\n\t\tif (msg.sender != executor) throw;\r\n\t\tdevETHDestination = _newAddress;\r\n\t}\r\n\t\r\n\tfunction changeDeveloperSFTDestinationAddress(address _newAddress) {\r\n\t\tif (msg.sender != executor) throw;\r\n\t\tdevSFTDestination = _newAddress;\r\n\t}\r\n\t\r\n\tfunction transfer(address _to, uint _value) {\r\n\t\tsuper.transfer(_to, _value);\r\n\t}\r\n\t\r\n\tfunction transferFrom(address _from, address _to, uint _value) {\r\n\t\tsuper.transferFrom(_from, _to, _value);\r\n\t}\r\n\r\n        function() payable{\r\n          this.createTokens();\r\n        }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DEV_PORTION\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleStartBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawFunds\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"triggerRefund\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"devSFTDestination\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalETHRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"endSale\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleEndBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"devETHDestination\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"changeDeveloperSFTDestinationAddress\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refund\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SFT_PER_ETH_FIRST_EARLY_BIRD_RATE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SFT_PER_ETH_BASE_RATE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleHasEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SFT_PER_ETH_SECOND_EARLY_BIRD_RATE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minCapReached\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleFirstEarlyBirdEndBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleSecondEarlyBirdEndBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"createTokens\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"changeDeveloperETHDestinationAddress\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"triggerMinCap\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"executor\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SECURITY_ETHER_CAP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"ETHContributed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allowRefund\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"SFTToken","CompilerVersion":"v0.4.13+commit.fb4cb1a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://82d28ade67a47a084f3379994ba07be02e733d2c131bdf73b274899af4895685"}]}