{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.15;\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    Unpause();\r\n  }\r\n}\r\n\r\ncontract GJCICO is Pausable{\r\n  using SafeMath for uint256;\r\n\r\n  //Gas/GWei\r\n  uint constant public minContribAmount = 0.01 ether;\r\n\r\n  // The token being sold\r\n  GJCToken public token;\r\n  uint256 constant public tokenDecimals = 18;\r\n\r\n  // The vesting contract\r\n  TokenVesting public vesting;\r\n  uint256 constant public VESTING_TIMES = 4;\r\n  uint256 constant public DURATION_PER_VESTING = 52 weeks;\r\n\r\n  // start and end timestamps where investments are allowed (both inclusive)\r\n  uint256 public startTime;\r\n  uint256 public endTime;\r\n\r\n  // need to be enabled to allow investor to participate in the ico\r\n  bool public icoEnabled;\r\n\r\n  // address where funds are collected\r\n  address public multisignWallet;\r\n\r\n  // amount of raised money in wei\r\n  uint256 public weiRaised;\r\n\r\n  // totalSupply\r\n  uint256 constant public totalSupply = 100000000 * (10 ** tokenDecimals);\r\n  //pre sale cap\r\n  uint256 constant public preSaleCap = 10000000 * (10 ** tokenDecimals);\r\n  //sale cap\r\n  uint256 constant public initialICOCap = 60000000 * (10 ** tokenDecimals);\r\n  //founder share\r\n  uint256 constant public tokensForFounder = 10000000 * (10 ** tokenDecimals);\r\n  //dev team share\r\n  uint256 constant public tokensForDevteam = 10000000 * (10 ** tokenDecimals);\r\n  //Partners share\r\n  uint256 constant public tokensForPartners = 5000000 * (10 ** tokenDecimals);\r\n  //Charity share\r\n  uint256 constant public tokensForCharity = 3000000 * (10 ** tokenDecimals);\r\n  //Bounty share\r\n  uint256 constant public tokensForBounty = 2000000 * (10 ** tokenDecimals);\r\n    \r\n  //Sold presale tokens\r\n  uint256 public soldPreSaleTokens; \r\n  uint256 public sentPreSaleTokens;\r\n\r\n  //ICO tokens\r\n  //Is calcluated as: initialICOCap + preSaleCap - soldPreSaleTokens\r\n  uint256 public icoCap; \r\n  uint256 public icoSoldTokens; \r\n  bool public icoEnded = false;\r\n\r\n  //Sale rates\r\n  uint256 constant public RATE_FOR_WEEK1 = 525;\r\n  uint256 constant public RATE_FOR_WEEK2 = 455;\r\n  uint256 constant public RATE_FOR_WEEK3 = 420;\r\n  uint256 constant public RATE_NO_DISCOUNT = 350;\r\n\r\n\r\n  /**\r\n   * event for token purchase logging\r\n   * @param purchaser who paid for the tokens\r\n   * @param beneficiary who got the tokens\r\n   * @param value weis paid for purchase\r\n   * @param amount amount of tokens purchased\r\n   */ \r\n  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n\r\n\r\n  function GJCICO(address _multisignWallet) {\r\n    require(_multisignWallet != address(0));\r\n    token = createTokenContract();\r\n    //send all dao tokens to multiwallet\r\n    uint256 tokensToDao = tokensForDevteam.add(tokensForPartners).add(tokensForBounty).add(tokensForCharity);\r\n    multisignWallet = _multisignWallet;\r\n    token.transfer(multisignWallet, tokensToDao);\r\n  }\r\n\r\n  function createVestingForFounder(address founderAddress) external onlyOwner(){\r\n    require(founderAddress != address(0));\r\n    //create only once\r\n    require(address(vesting) == address(0));\r\n    vesting = createTokenVestingContract(address(token));\r\n    // create vesting schema for founders from now, total token amount is divided in 4 periods of 12 months each\r\n    vesting.createVestingByDurationAndSplits(founderAddress, tokensForFounder, now, DURATION_PER_VESTING, VESTING_TIMES);\r\n    //send tokens to vesting contracts\r\n    token.transfer(address(vesting), tokensForFounder);\r\n  }\r\n\r\n  //\r\n  // Token related operations\r\n  //\r\n\r\n  // creates the token to be sold. \r\n  \r\n  function createTokenContract() internal returns (GJCToken) {\r\n    return new GJCToken();\r\n  }\r\n\r\n  // creates the token to be sold.\r\n  // override this method to have crowdsale of a specific mintable token.\r\n  function createTokenVestingContract(address tokenAddress) internal returns (TokenVesting) {\r\n    require(address(token) != address(0));\r\n    return new TokenVesting(tokenAddress);\r\n  }\r\n\r\n\r\n  // enable token tranferability\r\n  function enableTokenTransferability() external onlyOwner {\r\n    require(token != address(0));\r\n    token.unpause(); \r\n  }\r\n\r\n  // disable token tranferability\r\n  function disableTokenTransferability() external onlyOwner {\r\n    require(token != address(0));\r\n    token.pause(); \r\n  }\r\n\r\n\r\n  //\r\n  // Presale related operations\r\n  //\r\n\r\n  // set total pre sale sold token\r\n  // can not be changed once the ico is enabled\r\n  // Ico cap is determined by SaleCap + PreSaleCap - soldPreSaleTokens \r\n  function setSoldPreSaleTokens(uint256 _soldPreSaleTokens) external onlyOwner{\r\n    require(!icoEnabled);\r\n    require(_soldPreSaleTokens <= preSaleCap);\r\n    soldPreSaleTokens = _soldPreSaleTokens;\r\n  }\r\n\r\n  // transfer pre sale tokend to investors\r\n  // soldPreSaleTokens need to be set beforehand, and bigger than 0\r\n  // the total amount to tranfered need to be less or equal to soldPreSaleTokens \r\n  function transferPreSaleTokens(uint256 tokens, address beneficiary) external onlyOwner {\r\n    require(beneficiary != address(0));\r\n    require(soldPreSaleTokens > 0);\r\n    uint256 newSentPreSaleTokens = sentPreSaleTokens.add(tokens);\r\n    require(newSentPreSaleTokens <= soldPreSaleTokens);\r\n    sentPreSaleTokens = newSentPreSaleTokens;\r\n    token.transfer(beneficiary, tokens);\r\n  }\r\n\r\n\r\n  //\r\n  // ICO related operations\r\n  //\r\n\r\n  // set multisign wallet\r\n  function setMultisignWallet(address _multisignWallet) external onlyOwner{\r\n    // need to be set before the ico start\r\n    require(!icoEnabled || now < startTime);\r\n    require(_multisignWallet != address(0));\r\n    multisignWallet = _multisignWallet;\r\n  }\r\n\r\n  // delegate vesting contract owner\r\n  function delegateVestingContractOwner(address newOwner) external onlyOwner{\r\n    vesting.transferOwnership(newOwner);\r\n  }\r\n\r\n  // set contribution dates\r\n  function setContributionDates(uint256 _startTime, uint256 _endTime) external onlyOwner{\r\n    require(!icoEnabled);\r\n    require(_startTime >= now);\r\n    require(_endTime >= _startTime);\r\n    startTime = _startTime;\r\n    endTime = _endTime;\r\n  }\r\n\r\n  // enable ICO, need to be true to actually start ico\r\n  // multisign wallet need to be set, because once ico started, invested funds is transfered to this address\r\n  // once ico is enabled, following parameters can not be changed anymore:\r\n  // startTime, endTime, soldPreSaleTokens\r\n  function enableICO() external onlyOwner{\r\n    require(startTime >= now);\r\n\r\n    require(multisignWallet != address(0));\r\n    icoEnabled = true;\r\n    icoCap = initialICOCap.add(preSaleCap).sub(soldPreSaleTokens);\r\n  }\r\n\r\n\r\n  // fallback function can be used to buy tokens\r\n  function () payable whenNotPaused {\r\n    buyTokens(msg.sender);\r\n  }\r\n\r\n  // low level token purchase function\r\n  function buyTokens(address beneficiary) public payable whenNotPaused {\r\n    require(beneficiary != address(0));\r\n    require(validPurchase());\r\n\r\n    uint256 weiAmount = msg.value;\r\n    uint256 returnWeiAmount;\r\n\r\n    // calculate token amount to be created\r\n    uint rate = getRate();\r\n    assert(rate > 0);\r\n    uint256 tokens = weiAmount.mul(rate);\r\n\r\n    uint256 newIcoSoldTokens = icoSoldTokens.add(tokens);\r\n\r\n    if (newIcoSoldTokens > icoCap) {\r\n        newIcoSoldTokens = icoCap;\r\n        tokens = icoCap.sub(icoSoldTokens);\r\n        uint256 newWeiAmount = tokens.div(rate);\r\n        returnWeiAmount = weiAmount.sub(newWeiAmount);\r\n        weiAmount = newWeiAmount;\r\n    }\r\n\r\n    // update state\r\n    weiRaised = weiRaised.add(weiAmount);\r\n\r\n    token.transfer(beneficiary, tokens);\r\n    icoSoldTokens = newIcoSoldTokens;\r\n    if (returnWeiAmount > 0){\r\n        msg.sender.transfer(returnWeiAmount);\r\n    }\r\n\r\n    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\r\n\r\n    forwardFunds();\r\n  }\r\n\r\n  // send ether to the fund collection wallet\r\n  \r\n  function forwardFunds() internal {\r\n    multisignWallet.transfer(this.balance);\r\n  }\r\n\r\n  // unsold ico tokens transfer automatically in endIco\r\n  // function transferUnsoldIcoTokens() onlyOwner {\r\n  // require(hasEnded());\r\n  // require(icoSoldTokens < icoCap);\r\n  // uint256 unsoldTokens = icoCap.sub(icoSoldTokens);\r\n  // token.transfer(multisignWallet, unsoldTokens);\r\n  //}\r\n\r\n  // @return true if the transaction can buy tokens\r\n  function validPurchase() internal constant returns (bool) {\r\n    bool withinPeriod = now >= startTime && now <= endTime;\r\n    bool nonMinimumPurchase = msg.value >= minContribAmount;\r\n    bool icoTokensAvailable = icoSoldTokens < icoCap;\r\n    return !icoEnded && icoEnabled && withinPeriod && nonMinimumPurchase && icoTokensAvailable;\r\n  }\r\n\r\n  // end ico by owner, not really needed in normal situation\r\n  function endIco() external onlyOwner {\r\n    require(!icoEnded);\r\n    icoEnded = true;\r\n    // send unsold tokens to multi-sign wallet\r\n    uint256 unsoldTokens = icoCap.sub(icoSoldTokens);\r\n    token.transfer(multisignWallet, unsoldTokens);\r\n  }\r\n\r\n  // @return true if crowdsale event has ended\r\n  function hasEnded() public constant returns (bool) {\r\n    return (icoEnded || icoSoldTokens >= icoCap || now > endTime);\r\n  }\r\n\r\n\r\n  function getRate() public constant returns(uint){\r\n    require(now >= startTime);\r\n    if (now < startTime.add(1 weeks)){\r\n      // week 1\r\n      return RATE_FOR_WEEK1;\r\n    }else if (now < startTime.add(2 weeks)){\r\n      // week 2\r\n      return RATE_FOR_WEEK2;\r\n    }else if (now < startTime.add(3 weeks)){\r\n      // week 3\r\n      return RATE_FOR_WEEK3;\r\n    }else if (now < endTime){\r\n      // no discount\r\n      return RATE_NO_DISCOUNT;\r\n    }\r\n    return 0;\r\n  }\r\n\r\n  // drain all eth for owner in an emergency situation\r\n  function drain() external onlyOwner {\r\n    owner.transfer(this.balance);\r\n  }\r\n}\r\n\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public constant returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeERC20 {\r\n  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\r\n    assert(token.transfer(to, value));\r\n  }\r\n\r\n  function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\r\n    assert(token.transferFrom(from, to, value));\r\n  }\r\n\r\n  function safeApprove(ERC20 token, address spender, uint256 value) internal {\r\n    assert(token.approve(spender, value));\r\n  }\r\n}\r\n\r\ncontract TokenVesting is Ownable {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for ERC20Basic;\r\n\r\n    ERC20Basic token;\r\n    // vesting\r\n    mapping (address => uint256) totalVestedAmount;\r\n\r\n    struct Vesting {\r\n        uint256 amount;\r\n        uint256 vestingDate;\r\n    }\r\n\r\n    address[] accountKeys;\r\n    mapping (address => Vesting[]) public vestingAccounts;\r\n\r\n    // events\r\n    event Vest(address indexed beneficiary, uint256 amount);\r\n    event VestingCreated(address indexed beneficiary, uint256 amount, uint256 vestingDate);\r\n\r\n    // modifiers here\r\n    modifier tokenSet() {\r\n        require(address(token) != address(0));\r\n        _;\r\n    }\r\n\r\n    // vesting constructor\r\n    function TokenVesting(address token_address){\r\n       require(token_address != address(0));\r\n       token = ERC20Basic(token_address);\r\n    }\r\n\r\n    // set vesting token address\r\n    function setVestingToken(address token_address) external onlyOwner {\r\n        require(token_address != address(0));\r\n        token = ERC20Basic(token_address);\r\n    }\r\n\r\n    // create vesting by introducing beneficiary addres, total token amount, start date, duration for each vest period and number of periods\r\n    function createVestingByDurationAndSplits(address user, uint256 total_amount, uint256 startDate, uint256 durationPerVesting, uint256 times) public onlyOwner tokenSet {\r\n        require(user != address(0));\r\n        require(startDate >= now);\r\n        require(times > 0);\r\n        require(durationPerVesting > 0);\r\n        uint256 vestingDate = startDate;\r\n        uint256 i;\r\n        uint256 amount = total_amount.div(times);\r\n        for (i = 0; i < times; i++) {\r\n            vestingDate = vestingDate.add(durationPerVesting);\r\n            if (vestingAccounts[user].length == 0){\r\n                accountKeys.push(user);\r\n            }\r\n            vestingAccounts[user].push(Vesting(amount, vestingDate));\r\n            VestingCreated(user, amount, vestingDate);\r\n        }\r\n    }\r\n\r\n    // get current user total granted token amount\r\n    function getVestingAmountByNow(address user) constant returns (uint256){\r\n        uint256 amount;\r\n        uint256 i;\r\n        for (i = 0; i < vestingAccounts[user].length; i++) {\r\n            if (vestingAccounts[user][i].vestingDate < now) {\r\n                amount = amount.add(vestingAccounts[user][i].amount);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    // get user available vesting amount, total amount - received amount\r\n    function getAvailableVestingAmount(address user) constant returns (uint256){\r\n        uint256 amount;\r\n        amount = getVestingAmountByNow(user);\r\n        amount = amount.sub(totalVestedAmount[user]);\r\n        return amount;\r\n    }\r\n\r\n    // get list of vesting users address\r\n    function getAccountKeys(uint256 page) external constant returns (address[10]){\r\n        address[10] memory accountList;\r\n        uint256 i;\r\n        for (i=0 + page * 10; i<10; i++){\r\n            if (i < accountKeys.length){\r\n                accountList[i - page * 10] = accountKeys[i];\r\n            }\r\n        }\r\n        return accountList;\r\n    }\r\n\r\n    // vest\r\n    function vest() external tokenSet {\r\n        uint256 availableAmount = getAvailableVestingAmount(msg.sender);\r\n        require(availableAmount > 0);\r\n        totalVestedAmount[msg.sender] = totalVestedAmount[msg.sender].add(availableAmount);\r\n        token.transfer(msg.sender, availableAmount);\r\n        Vest(msg.sender, availableAmount);\r\n    }\r\n\r\n    // drain all eth and tokens to owner in an emergency situation\r\n    function drain() external onlyOwner {\r\n        owner.transfer(this.balance);\r\n        token.transfer(owner, this.balance);\r\n    }\r\n}\r\n\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   */\r\n  function increaseApproval (address _spender, uint _addedValue) public returns (bool success) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  function decreaseApproval (address _spender, uint _subtractedValue) public returns (bool success) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\ncontract PausableToken is StandardToken, Pausable {\r\n  /**\r\n   * @dev modifier to allow actions only when the contract is not paused or\r\n   * the sender is the owner of the contract\r\n   */\r\n  modifier whenNotPausedOrOwner() {\r\n    require(msg.sender == owner || !paused);\r\n    _;\r\n  }\r\n\r\n  function transfer(address _to, uint256 _value) public whenNotPausedOrOwner returns (bool) {\r\n    return super.transfer(_to, _value);\r\n  }\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value) public whenNotPausedOrOwner returns (bool) {\r\n    return super.transferFrom(_from, _to, _value);\r\n  }\r\n\r\n  function approve(address _spender, uint256 _value) public whenNotPausedOrOwner returns (bool) {\r\n    return super.approve(_spender, _value);\r\n  }\r\n\r\n  function increaseApproval(address _spender, uint _addedValue) public whenNotPausedOrOwner returns (bool success) {\r\n    return super.increaseApproval(_spender, _addedValue);\r\n  }\r\n\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPausedOrOwner returns (bool success) {\r\n    return super.decreaseApproval(_spender, _subtractedValue);\r\n  }\r\n}\r\n\r\ncontract GJCToken is PausableToken {\r\n  string constant public name = \"GJC\";\r\n  string constant public symbol = \"GJC\";\r\n  uint256 constant public decimals = 18;\r\n  uint256 constant TOKEN_UNIT = 10 ** uint256(decimals);\r\n  uint256 constant INITIAL_SUPPLY = 100000000 * TOKEN_UNIT;\r\n\r\n  function GJCToken() {\r\n    // Set untransferable by default to the token\r\n    paused = true;\r\n    // asign all tokens to the contract creator\r\n    totalSupply = INITIAL_SUPPLY;\r\n    Transfer(0x0, msg.sender, INITIAL_SUPPLY);\r\n    balances[msg.sender] = INITIAL_SUPPLY;\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"RATE_FOR_WEEK1\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"soldPreSaleTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"VESTING_TIMES\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_multisignWallet\",\"type\":\"address\"}],\"name\":\"setMultisignWallet\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RATE_FOR_WEEK3\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenDecimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokens\",\"type\":\"uint256\"},{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"transferPreSaleTokens\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoSoldTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensForCharity\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preSaleCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vesting\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"founderAddress\",\"type\":\"address\"}],\"name\":\"createVestingForFounder\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minContribAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_soldPreSaleTokens\",\"type\":\"uint256\"}],\"name\":\"setSoldPreSaleTokens\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sentPreSaleTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensForBounty\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensForPartners\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"multisignWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"disableTokenTransferability\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DURATION_PER_VESTING\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"drain\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialICOCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RATE_NO_DISCOUNT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RATE_FOR_WEEK2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"enableICO\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoEnabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"endIco\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"enableTokenTransferability\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensForDevteam\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensForFounder\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"delegateVestingContractOwner\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_startTime\",\"type\":\"uint256\"},{\"name\":\"_endTime\",\"type\":\"uint256\"}],\"name\":\"setContributionDates\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_multisignWallet\",\"type\":\"address\"}],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"GJCICO","CompilerVersion":"v0.4.15+commit.bbb8e64f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000d2462e781952f3782e68bef0287eb78271ed1062","Library":"","SwarmSource":"bzzr://1a09381eb41bddb7e644dd866784ad8b1c6a20401600c606c72b12d010db63a7"}]}