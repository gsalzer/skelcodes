{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\ncontract ERC20 \r\n{\r\n    function totalSupply() constant returns (uint);\r\n    function balanceOf(address who) constant returns (uint);\r\n    function allowance(address owner, address spender) constant returns (uint);\r\n    function transfer(address to, uint value) returns (bool ok);\r\n    function transferFrom(address from, address to, uint value) returns (bool ok);\r\n    function approve(address spender, uint value) returns (bool ok);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\n\r\ncontract workForce\r\n{\r\n    modifier onlyOwner()\r\n    {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    modifier onlyEmployee()\r\n    {\r\n        require(workcrew[ employeeAddressIndex[msg.sender] ].yearlySalaryUSD > 0);\r\n         _;\r\n    }\r\n\r\n    /* Oracle address and owner address are the same */\r\n    modifier onlyOracle()\r\n    {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    struct Employee\r\n    {\r\n        uint employeeId;\r\n        string employeeName;\r\n        address employeeAddress;\r\n        uint[3] usdEthAntTokenDistribution;\r\n        uint yearlySalaryUSD;\r\n        uint startDate;\r\n        uint lastPayday;\r\n        uint lastTokenConfigDay;\r\n    }\r\n\r\n    \r\n    /* Using a dynamic array because can't iterate mappings, or use push,length,delete cmds? */\r\n    Employee[] workcrew;\r\n    uint employeeIndex;\r\n    mapping( uint => uint ) employeeIdIndex;\r\n    mapping( string => uint ) employeeNameIndex;\r\n    mapping( address => uint ) employeeAddressIndex;\r\n    \r\n    mapping( address => uint ) public exchangeRates;\r\n    address owner;\r\n    uint creationDate;\r\n\r\n    /* ANT token is Catnip */\r\n    address antAddr = 0x529ae9b61c174a3e005eda67eb755342558a1c3f;\r\n    /* USD token is Space Dollars */\r\n    address usdAddr = 0x41f1dcb0d41bf1e143461faf42c577a9219da415;\r\n\r\n    ERC20 antToken = ERC20(antAddr);\r\n    ERC20 usdToken = ERC20(usdAddr);\r\n    /* set to 1 Ether equals 275.00 USD */\r\n    uint oneUsdToEtherRate;\r\n\r\n\r\n    /* Constructor sets 1USD to equal 3.2 Finney or 2 Catnip */\r\n    function workForce() public\r\n    {\r\n        owner = msg.sender;\r\n        creationDate = now;\r\n        employeeIndex = 1000;\r\n\r\n        exchangeRates[antAddr] = 2;\r\n        oneUsdToEtherRate = 3200000000000000;\r\n    }\r\n\r\n    function indexTheWorkcrew() private\r\n    {\r\n        for( uint x = 0; x < workcrew.length; x++ )\r\n        {\r\n            employeeIdIndex[ workcrew[x].employeeId ] = x;\r\n            employeeNameIndex[ workcrew[x].employeeName ] = x;\r\n            employeeAddressIndex[ workcrew[x].employeeAddress ] = x;\r\n        }\r\n    }\r\n\r\n    function incompletePercent(uint[3] _distribution) internal returns (bool)\r\n    {\r\n        uint sum;\r\n        for( uint x = 0; x < 3; x++ ){ sum += _distribution[x]; }\r\n        if( sum != 100 ){ return true; }\r\n        else{ return false; }\r\n    }\r\n\r\n    function addEmployee(address _employeeAddress, string _employeeName, uint[3] _tokenDistribution, uint _initialUSDYearlySalary) onlyOwner\r\n    {\r\n        if( incompletePercent( _tokenDistribution)){ revert; }\r\n        employeeIndex++;\r\n        Employee memory newEmployee;\r\n        newEmployee.employeeId = employeeIndex;\r\n        newEmployee.employeeName = _employeeName;\r\n        newEmployee.employeeAddress = _employeeAddress;\r\n        newEmployee.usdEthAntTokenDistribution = _tokenDistribution;\r\n        newEmployee.yearlySalaryUSD = _initialUSDYearlySalary;\r\n        newEmployee.startDate = now;\r\n        newEmployee.lastPayday = now;\r\n        newEmployee.lastTokenConfigDay = now;\r\n        workcrew.push(newEmployee);\r\n        indexTheWorkcrew();\r\n    }\r\n\r\n    function setEmployeeSalary(uint _employeeID, uint _yearlyUSDSalary) onlyOwner\r\n    {\r\n        workcrew[ employeeIdIndex[_employeeID] ].yearlySalaryUSD = _yearlyUSDSalary;\r\n    }\r\n\r\n    function removeEmployee(uint _employeeID) onlyOwner\r\n    {\r\n        delete workcrew[ employeeIdIndex[_employeeID] ];\r\n        indexTheWorkcrew();\r\n    }\r\n\r\n    function addFunds() payable onlyOwner returns (uint) \r\n    {\r\n        return this.balance;\r\n    }\r\n\r\n    function getTokenBalance() constant returns (uint, uint)\r\n    {\r\n        return ( usdToken.balanceOf(address(this)), antToken.balanceOf(address(this)) );\r\n    }\r\n\r\n    function scapeHatch() onlyOwner\r\n    {\r\n        selfdestructTokens();\r\n        delete workcrew;\r\n        selfdestruct(owner);\r\n    }\r\n\r\n    function selfdestructTokens() private\r\n    {\r\n        antToken.transfer( owner,(antToken.balanceOf(address(this))));\r\n        usdToken.transfer( owner, (usdToken.balanceOf(address(this))));\r\n    }\r\n\r\n    function getEmployeeCount() constant onlyOwner returns (uint)\r\n    {\r\n        return workcrew.length;\r\n    }\r\n\r\n    function getEmployeeInfoById(uint _employeeId) constant onlyOwner returns (uint, string, uint, address, uint)\r\n    {\r\n        uint x = employeeIdIndex[_employeeId];\r\n        return (workcrew[x].employeeId, workcrew[x].employeeName, workcrew[x].startDate,\r\n                workcrew[x].employeeAddress, workcrew[x].yearlySalaryUSD );\r\n    }\r\n    \r\n    function getEmployeeInfoByName(string _employeeName) constant onlyOwner returns (uint, string, uint, address, uint)\r\n    {\r\n        uint x = employeeNameIndex[_employeeName];\r\n        return (workcrew[x].employeeId, workcrew[x].employeeName, workcrew[x].startDate,\r\n                workcrew[x].employeeAddress, workcrew[x].yearlySalaryUSD );\r\n    }\r\n\r\n    function calculatePayrollBurnrate() constant onlyOwner returns (uint)\r\n    {\r\n        uint monthlyPayout;\r\n        for( uint x = 0; x < workcrew.length; x++ )\r\n        {\r\n            monthlyPayout += workcrew[x].yearlySalaryUSD / 12;\r\n        }\r\n        return monthlyPayout;\r\n    }\r\n\r\n    function calculatePayrollRunway() constant onlyOwner returns (uint)\r\n    {\r\n        uint dailyPayout = calculatePayrollBurnrate() / 30;\r\n        \r\n        uint UsdBalance = usdToken.balanceOf(address(this));\r\n        UsdBalance += this.balance / oneUsdToEtherRate;\r\n        UsdBalance += antToken.balanceOf(address(this)) / exchangeRates[antAddr];\r\n        \r\n        uint daysRemaining = UsdBalance / dailyPayout;\r\n        return daysRemaining;\r\n    }\r\n\r\n    function setPercentTokenAllocation(uint _usdTokens, uint _ethTokens, uint _antTokens) onlyEmployee\r\n    {\r\n        if( _usdTokens + _ethTokens + _antTokens != 100 ){revert;}\r\n        \r\n        uint x = employeeAddressIndex[msg.sender];\r\n\r\n        /* change from 1 hours to 24 weeks */\r\n        if( now < workcrew[x].lastTokenConfigDay + 1 hours ){revert;}\r\n        workcrew[x].lastTokenConfigDay = now;\r\n        workcrew[x].usdEthAntTokenDistribution[0] = _usdTokens;\r\n        workcrew[x].usdEthAntTokenDistribution[1] = _ethTokens;\r\n        workcrew[x].usdEthAntTokenDistribution[2] = _antTokens;\r\n    }\r\n\r\n    function payday(uint _employeeId) public onlyEmployee\r\n    {\r\n        uint x = employeeIdIndex[_employeeId];\r\n\r\n        /* Change to 4 weeks for monthly pay period */\r\n        if( now < workcrew[x].lastPayday + 5 minutes ){ revert; }\r\n        if( msg.sender != workcrew[x].employeeAddress ){ revert; }\r\n        workcrew[x].lastPayday = now;\r\n\r\n        /* 7680 is for 5min pay periods. Change to 12 for monthly pay period */\r\n        uint paycheck = workcrew[x].yearlySalaryUSD / 7680;\r\n        uint usdTransferAmount = paycheck * workcrew[x].usdEthAntTokenDistribution[0] / 100;\r\n        uint ethTransferAmount = paycheck * workcrew[x].usdEthAntTokenDistribution[1] / 100;\r\n        uint antTransferAmount = paycheck * workcrew[x].usdEthAntTokenDistribution[2] / 100;\r\n        \r\n        ethTransferAmount = ethTransferAmount * oneUsdToEtherRate;\r\n        msg.sender.transfer(ethTransferAmount);\r\n        antTransferAmount = antTransferAmount * exchangeRates[antAddr];\r\n        antToken.transfer( workcrew[x].employeeAddress, antTransferAmount );\r\n        usdToken.transfer( workcrew[x].employeeAddress, usdTransferAmount );\r\n    }\r\n    \r\n    /* setting 1 USD equals X amount of tokens */\r\n    function setTokenExchangeRate(address _token, uint _tokenValue) onlyOracle\r\n    {\r\n        exchangeRates[_token] = _tokenValue;\r\n    }\r\n\r\n    /* setting 1 USD equals X amount of wei */\r\n    function setUsdToEtherExchangeRate(uint _weiValue) onlyOracle\r\n    {\r\n        oneUsdToEtherRate = _weiValue;\r\n    }\r\n\r\n    function UsdToEtherConvert(uint _UsdAmount) constant returns (uint)\r\n    {\r\n        uint etherVal = _UsdAmount * oneUsdToEtherRate;\r\n        return etherVal;\r\n    }\r\n\r\n    function UsdToTokenConvert(address _token, uint _UsdAmount) constant returns (uint)\r\n    {\r\n        uint tokenAmount = _UsdAmount * exchangeRates[_token];\r\n        return tokenAmount;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_employeeName\",\"type\":\"string\"}],\"name\":\"getEmployeeInfoByName\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_employeeID\",\"type\":\"uint256\"},{\"name\":\"_yearlyUSDSalary\",\"type\":\"uint256\"}],\"name\":\"setEmployeeSalary\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"scapeHatch\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_employeeID\",\"type\":\"uint256\"}],\"name\":\"removeEmployee\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"calculatePayrollBurnrate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_tokenValue\",\"type\":\"uint256\"}],\"name\":\"setTokenExchangeRate\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_employeeId\",\"type\":\"uint256\"}],\"name\":\"payday\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"calculatePayrollRunway\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTokenBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"exchangeRates\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_usdTokens\",\"type\":\"uint256\"},{\"name\":\"_ethTokens\",\"type\":\"uint256\"},{\"name\":\"_antTokens\",\"type\":\"uint256\"}],\"name\":\"setPercentTokenAllocation\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_UsdAmount\",\"type\":\"uint256\"}],\"name\":\"UsdToTokenConvert\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"addFunds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getEmployeeCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_weiValue\",\"type\":\"uint256\"}],\"name\":\"setUsdToEtherExchangeRate\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_employeeAddress\",\"type\":\"address\"},{\"name\":\"_employeeName\",\"type\":\"string\"},{\"name\":\"_tokenDistribution\",\"type\":\"uint256[3]\"},{\"name\":\"_initialUSDYearlySalary\",\"type\":\"uint256\"}],\"name\":\"addEmployee\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_UsdAmount\",\"type\":\"uint256\"}],\"name\":\"UsdToEtherConvert\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_employeeId\",\"type\":\"uint256\"}],\"name\":\"getEmployeeInfoById\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"}]","ContractName":"workForce","CompilerVersion":"v0.4.13+commit.fb4cb1a","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://6009f1dc8f90024e96ee69429f6f67b20a6eed8b63104d044a149e790ec1dab8"}]}