{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13;\r\n\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public constant returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\ncontract MartinLarbaoui2 is Ownable  {\r\n    using SafeMath for uint256;\r\n\r\n    \r\n\r\n    \r\n    /*Variables about the token contract */    \r\n    Peculium public pecul; // The Peculium token\r\n    bool public initPecul; // boolean to know if the Peculium token address has been init\r\n    \r\n    event InitializedToken(address contractToken);\r\n    \r\n    /*Variables about the client manager */\r\n    address public clientmanager ; // address of the client manager \r\n    uint256 public clientmanagerShare; // nb token for the clientmanager\r\n    bool public First_pay_clientmanager; // boolean to test if the first pay has been send to the clientmanager\r\n    uint256 public first_pay; // pourcent of the first pay rate\r\n    uint256 public montly_pay; // pourcent of the montly pay rate\r\n    bool public clientInit; // boolean to know if the client address has been init\r\n    uint256 public payday; // Day when the client manager is paid\r\n    uint256 public nbMonthsPay; // The montly pay is sent for 6 months\r\n\r\n    event InitializedManager(address ManagerAdd);\r\n    event FirstPaySend(uint256 first,address receiver);\r\n    event MonthlyPaySend(uint256 monthPay,address receiverMonthly);\r\n    \r\n    \r\n    //Constructor\r\n    function Larbaoui() {\r\n        \r\n        clientmanagerShare = SafeMath.mul(7000000,(10**8)); // we allocate 72 million token to the client manager (maybe to change)\r\n        \r\n        first_pay = SafeMath.div(SafeMath.mul(40,clientmanagerShare),100); // first pay is 40%\r\n        montly_pay = SafeMath.div(SafeMath.mul(10,clientmanagerShare),100); // other pay are 10%\r\n        nbMonthsPay = 0;\r\n        \r\n        First_pay_clientmanager=true;\r\n        initPecul = false;\r\n        clientInit==false;\r\n        \r\n\r\n    }\r\n    \r\n    \r\n    /***  Functions of the contract ***/\r\n    \r\n    function InitPeculiumAdress(address peculAdress) onlyOwner \r\n    { // We init the address of the token\r\n    \r\n        pecul = Peculium(peculAdress);\r\n        payday = now;\r\n        initPecul = true;\r\n        InitializedToken(peculAdress);\r\n    \r\n    }\r\n    \r\n    function change_client_manager (address public_key) onlyOwner \r\n    { // to change the client manager address\r\n    \r\n        clientmanager = public_key;\r\n        clientInit=true;\r\n        InitializedManager(public_key);\r\n    \r\n    }\r\n    \r\n    function transferManager() onlyOwner Initialize clientManagerInit \r\n    { // Transfer pecul for the client manager\r\n        \r\n        require(now > payday);\r\n    \r\n        if(First_pay_clientmanager==false && nbMonthsPay < 6)\r\n        {\r\n\r\n            pecul.transfer(clientmanager,montly_pay);\r\n            payday = payday.add( 31 days);\r\n            nbMonthsPay=nbMonthsPay.add(1);\r\n            MonthlyPaySend(montly_pay,clientmanager);\r\n        \r\n        }\r\n        \r\n        if(First_pay_clientmanager==true)\r\n        {\r\n\r\n            pecul.transfer(clientmanager,first_pay);\r\n            payday = payday.add( 31 days);\r\n            First_pay_clientmanager=false;\r\n            FirstPaySend(first_pay,clientmanager);\r\n        \r\n        }\r\n\r\n\r\n        \r\n    }\r\n        /***  Modifiers of the contract ***/\r\n    \r\n    modifier Initialize { // We need to initialize first the token contract\r\n        require (initPecul==true);\r\n        _;\r\n        }\r\n        modifier clientManagerInit { // We need to initialize first the address of the clientManager\r\n        require (clientInit==true);\r\n        _;\r\n        } \r\n\r\n}\r\n\r\nlibrary SafeERC20 {\r\n  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\r\n    assert(token.transfer(to, value));\r\n  }\r\n\r\n  function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\r\n    assert(token.transferFrom(from, to, value));\r\n  }\r\n\r\n  function safeApprove(ERC20 token, address spender, uint256 value) internal {\r\n    assert(token.approve(spender, value));\r\n  }\r\n}\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool)  {\r\n    require(_to != address(0));\r\n\r\n    uint256 _allowance = allowed[_from][msg.sender];\r\n\r\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n    // require (_value <= _allowance);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   */\r\n  function increaseApproval (address _spender, uint _addedValue) public returns (bool success) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  function decreaseApproval (address _spender, uint _subtractedValue) public returns (bool success) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\ncontract BurnableToken is StandardToken {\r\n\r\n    event Burn(address indexed burner, uint256 value);\r\n\r\n    /**\r\n     * @dev Burns a specific amount of tokens.\r\n     * @param _value The amount of token to be burned.\r\n     */\r\n    function burn(uint256 _value) public {\r\n        require(_value > 0);\r\n        require(_value <= balances[msg.sender]);\r\n        // no need to require value <= totalSupply, since that would imply the\r\n        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\r\n\r\n        address burner = msg.sender;\r\n        balances[burner] = balances[burner].sub(_value);\r\n        totalSupply = totalSupply.sub(_value);\r\n        Burn(burner, _value);\r\n    }\r\n}\r\n\r\ncontract Peculium is BurnableToken,Ownable { // Our token is a standard ERC20 Token with burnable and ownable aptitude\r\n\r\n    using SafeMath for uint256; // We use safemath to do basic math operation (+,-,*,/)\r\n    using SafeERC20 for ERC20Basic; \r\n\r\n        /* Public variables of the token for ERC20 compliance */\r\n    string public name = \"Peculium\"; //token name \r\n        string public symbol = \"PCL\"; // token symbol\r\n        uint256 public decimals = 8; // token number of decimal\r\n        \r\n        /* Public variables specific for Peculium */\r\n        uint256 public constant MAX_SUPPLY_NBTOKEN   = 20000000000*10**8; // The max cap is 20 Billion Peculium\r\n\r\n    uint256 public dateStartContract; // The date of the deployment of the token\r\n    mapping(address => bool) public balancesCanSell; // The boolean variable, to frost the tokens\r\n    uint256 public dateDefrost; // The date when the owners of token can defrost their tokens\r\n\r\n\r\n        /* Event for the freeze of account */\r\n     event FrozenFunds(address target, bool frozen);          \r\n         event Defroze(address msgAdd, bool freeze);\r\n    \r\n\r\n\r\n   \r\n    //Constructor\r\n    function Peculium() {\r\n        totalSupply = MAX_SUPPLY_NBTOKEN;\r\n        balances[owner] = totalSupply; // At the beginning, the owner has all the tokens. \r\n        balancesCanSell[owner] = true; // The owner need to sell token for the private sale and for the preICO, ICO.\r\n        \r\n        dateStartContract=now;\r\n        dateDefrost = dateStartContract + 85 days; // everybody can defrost his own token after the 25 january 2018 (85 days after 1 November)\r\n\r\n    }\r\n\r\n    /*** Public Functions of the contract ***/    \r\n    \r\n    function defrostToken() public \r\n    { // Function to defrost your own token, after the date of the defrost\r\n    \r\n        require(now>dateDefrost);\r\n        balancesCanSell[msg.sender]=true;\r\n        Defroze(msg.sender,true);\r\n    }\r\n                \r\n    function transfer(address _to, uint256 _value) public returns (bool) \r\n    { // We overright the transfer function to allow freeze possibility\r\n    \r\n        require(balancesCanSell[msg.sender]);\r\n        return BasicToken.transfer(_to,_value);\r\n    \r\n    }\r\n    \r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) \r\n    { // We overright the transferFrom function to allow freeze possibility (need to allow before)\r\n    \r\n        require(balancesCanSell[msg.sender]);    \r\n        return StandardToken.transferFrom(_from,_to,_value);\r\n    \r\n    }\r\n\r\n    /***  Owner Functions of the contract ***/    \r\n\r\n       function freezeAccount(address target, bool canSell) onlyOwner \r\n       {\r\n        \r\n            balancesCanSell[target] = canSell;\r\n            FrozenFunds(target, canSell);\r\n        \r\n        }\r\n\r\n\r\n    /*** Others Functions of the contract ***/    \r\n    \r\n    /* Approves and then calls the receiving contract */\r\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData) returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n\r\n        require(_spender.call(bytes4(bytes32(sha3(\"receiveApproval(address,uint256,address,bytes)\"))), msg.sender, _value, this, _extraData));\r\n            return true;\r\n    }\r\n\r\n      function getBlockTimestamp() constant returns (uint256)\r\n      {\r\n        \r\n            return now;\r\n      \r\n      }\r\n\r\n      function getOwnerInfos() constant returns (address ownerAddr, uint256 ownerBalance)  \r\n      { // Return info about the public address and balance of the account of the owner of the contract\r\n        \r\n            ownerAddr = owner;\r\n        ownerBalance = balanceOf(ownerAddr);\r\n      \r\n      }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"first_pay\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"public_key\",\"type\":\"address\"}],\"name\":\"change_client_manager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"First_pay_clientmanager\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"transferManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"clientmanagerShare\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"clientmanager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"payday\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pecul\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"clientInit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initPecul\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nbMonthsPay\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"peculAdress\",\"type\":\"address\"}],\"name\":\"InitPeculiumAdress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"montly_pay\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"Larbaoui\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contractToken\",\"type\":\"address\"}],\"name\":\"InitializedToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ManagerAdd\",\"type\":\"address\"}],\"name\":\"InitializedManager\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"first\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"FirstPaySend\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"monthPay\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"receiverMonthly\",\"type\":\"address\"}],\"name\":\"MonthlyPaySend\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"MartinLarbaoui2","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://84b3a5d63da23850d8ecdbaf380f040a5909a49b5576fc012c0315f19bf96b42"}]}