{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.10;\r\n\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public constant returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) allowed;\r\n\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n\r\n    uint256 _allowance = allowed[_from][msg.sender];\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  function increaseApproval (address _spender, uint _addedValue)\r\n    returns (bool success) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  function decreaseApproval (address _spender, uint _subtractedValue)\r\n    returns (bool success) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\ncontract CccTokenIco is StandardToken {\r\n    using SafeMath for uint256;\r\n    string public name = \"Crypto Credit Card Token\";\r\n    string public symbol = \"CCCR\";\r\n    uint8 public constant decimals = 6;\r\n    \r\n    uint256 public cntMembers = 0;\r\n    uint256 public totalSupply;\r\n    uint256 public totalRaised;\r\n\r\n    uint256 public startTimestamp;\r\n    uint256 public durationSeconds = uint256(86400 * 7 * 11);\r\n\r\n    uint256 public minCap;\r\n    uint256 public maxCap;\r\n    \r\n    uint256 public avgRate = uint256(uint256(10)**(18-decimals)).div(460);\r\n\r\n    address public stuff = 0x0CcCb9bAAdD61F9e0ab25bD782765013817821bD;\r\n    address public teama = 0xfc6851324e2901b3ea6170a90Cc43BFe667D617A;\r\n    address public teamb = 0x21f0F5E81BEF4dc696C6BF0196c60a1aC797f953;\r\n    address public teamc = 0xE8726942a46E6C6B3C1F061c14a15c0053A97B6b;\r\n    address public founder = 0xbb2efFab932a4c2f77Fc1617C1a563738D71B0a7;//0x194EAc9301b15629c54C02c45bBbCB9134F914b2;\r\n    address public baseowner;\r\n\r\n    event LogTransfer(address sender, address to, uint amount);\r\n    event Clearing(address to, uint256 amount);\r\n\r\n    function CccTokenIco(\r\n    ) \r\n    {\r\n        cntMembers = 0;\r\n        startTimestamp = now - 11 days;\r\n        baseowner = msg.sender;\r\n        minCap = 3000000 * (uint256(10) ** decimals); \r\n        maxCap = 200000000 * (uint256(10) ** decimals);\r\n        totalSupply = maxCap;\r\n        balances[baseowner] = totalSupply;\r\n        Transfer(0x0, baseowner, totalSupply);\r\n    }\r\n\r\n    function bva(address partner, uint256 value, uint256 rate, address adviser) isIcoOpen payable public \r\n    {\r\n      uint256 tokenAmount = calculateTokenAmount(value);\r\n      if(msg.value != 0)\r\n      {\r\n        tokenAmount = calculateTokenCount(msg.value,avgRate);\r\n      }else\r\n      {\r\n        require(msg.sender == stuff);\r\n        avgRate = avgRate.add(rate).div(2);\r\n      }\r\n      if(msg.value != 0)\r\n      {\r\n        Clearing(teama, msg.value.mul(7).div(100));\r\n        teama.transfer(msg.value.mul(7).div(100));\r\n        Clearing(teamb, msg.value.mul(12).div(1000));\r\n        teamb.transfer(msg.value.mul(12).div(1000));\r\n        Clearing(teamc, msg.value.mul(9).div(1000));\r\n        teamc.transfer(msg.value.mul(9).div(1000));\r\n        Clearing(stuff, msg.value.mul(9).div(1000));\r\n        stuff.transfer(msg.value.mul(9).div(1000));\r\n        Clearing(founder, msg.value.mul(70).div(100));\r\n        founder.transfer(msg.value.mul(70).div(100));\r\n        if(partner != adviser)\r\n        {\r\n          Clearing(adviser, msg.value.mul(20).div(100));\r\n          adviser.transfer(msg.value.mul(20).div(100));\r\n        } \r\n      }\r\n      totalRaised = totalRaised.add(tokenAmount);\r\n      balances[baseowner] = balances[baseowner].sub(tokenAmount);\r\n      balances[partner] = balances[partner].add(tokenAmount);\r\n      Transfer(baseowner, partner, tokenAmount);\r\n      cntMembers = cntMembers.add(1);\r\n    }\r\n    \r\n    function() isIcoOpen payable public\r\n    {\r\n      if(msg.value != 0)\r\n      {\r\n        uint256 tokenAmount = calculateTokenCount(msg.value,avgRate);\r\n        Clearing(teama, msg.value.mul(7).div(100));\r\n        teama.transfer(msg.value.mul(7).div(100));\r\n        Clearing(teamb, msg.value.mul(12).div(1000));\r\n        teamb.transfer(msg.value.mul(12).div(1000));\r\n        Clearing(teamc, msg.value.mul(9).div(1000));\r\n        teamc.transfer(msg.value.mul(9).div(1000));\r\n        Clearing(stuff, msg.value.mul(9).div(1000));\r\n        stuff.transfer(msg.value.mul(9).div(1000));\r\n        Clearing(founder, msg.value.mul(70).div(100));\r\n        founder.transfer(msg.value.mul(70).div(100));\r\n        totalRaised = totalRaised.add(tokenAmount);\r\n        balances[baseowner] = balances[baseowner].sub(tokenAmount);\r\n        balances[msg.sender] = balances[msg.sender].add(tokenAmount);\r\n        Transfer(baseowner, msg.sender, tokenAmount);\r\n        cntMembers = cntMembers.add(1);\r\n      }\r\n    }\r\n\r\n    function calculateTokenAmount(uint256 count) constant returns(uint256) \r\n    {\r\n        uint256 icoDeflator = getIcoDeflator();\r\n        return count.mul(icoDeflator).div(100);\r\n    }\r\n\r\n    function calculateTokenCount(uint256 weiAmount, uint256 rate) constant returns(uint256) \r\n    {\r\n        if(rate==0)revert();\r\n        uint256 icoDeflator = getIcoDeflator();\r\n        return weiAmount.div(rate).mul(icoDeflator).div(100);\r\n    }\r\n\r\n    function getIcoDeflator() constant returns (uint256)\r\n    {\r\n        if (now <= startTimestamp + 15 days) \r\n        {\r\n            return 138;\r\n        }else if (now <= startTimestamp + 29 days) \r\n        {\r\n            return 123;\r\n        }else if (now <= startTimestamp + 43 days) \r\n        {\r\n            return 115;\r\n        }else \r\n        {\r\n            return 109;\r\n        }\r\n    }\r\n\r\n    function finalize(uint256 weiAmount) isIcoFinished isStuff payable public\r\n    {\r\n      if(msg.sender == founder)\r\n      {\r\n        founder.transfer(weiAmount);\r\n      }\r\n    }\r\n\r\n    function transfer(address _to, uint _value) isIcoFinished returns (bool) \r\n    {\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint _value) isIcoFinished returns (bool) \r\n    {\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n    modifier isStuff() \r\n    {\r\n        require(msg.sender == stuff || msg.sender == founder);\r\n        _;\r\n    }\r\n\r\n    modifier isIcoOpen() \r\n    {\r\n        require(now >= startTimestamp);//15.11-29.11 pre ICO\r\n        require(now <= startTimestamp + 14 days || now >= startTimestamp + 19 days);//gap 29.11-04.12\r\n        require(now <= (startTimestamp + durationSeconds) || totalRaised < minCap);//04.12-02.02 ICO\r\n        require(totalRaised <= maxCap);\r\n        _;\r\n    }\r\n\r\n    modifier isIcoFinished() \r\n    {\r\n        require(now >= startTimestamp);\r\n        require(totalRaised >= maxCap || (now >= (startTimestamp + durationSeconds) && totalRaised >= minCap));\r\n        _;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"weiAmount\",\"type\":\"uint256\"}],\"name\":\"finalize\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"founder\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getIcoDeflator\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"partner\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"rate\",\"type\":\"uint256\"},{\"name\":\"adviser\",\"type\":\"address\"}],\"name\":\"bva\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"avgRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamb\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"durationSeconds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stuff\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teama\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"calculateTokenAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"baseowner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cntMembers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamc\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"weiAmount\",\"type\":\"uint256\"},{\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"calculateTokenCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Clearing\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"CccTokenIco","CompilerVersion":"v0.4.15+commit.bbb8e64f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://ae48d323f054420d46f1b0475ad5f01e496c6d40d395f87d5fc2037104d90c30"}]}