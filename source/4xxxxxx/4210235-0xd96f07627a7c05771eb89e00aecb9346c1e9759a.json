{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.15;\r\n\r\n/**\r\n * Basic interface for contracts, following ERC20 standard\r\n */\r\ncontract ERC20Token {\r\n    \r\n\r\n    /**\r\n     * Triggered when tokens are transferred.\r\n     * @param from - address tokens were transfered from\r\n     * @param to - address tokens were transfered to\r\n     * @param value - amount of tokens transfered\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * Triggered whenever allowance status changes\r\n     * @param owner - tokens owner, allowance changed for\r\n     * @param spender - tokens spender, allowance changed for\r\n     * @param value - new allowance value (overwriting the old value)\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * Returns total supply of tokens ever emitted\r\n     * @return totalSupply - total supply of tokens ever emitted\r\n     */\r\n    function totalSupply() constant returns (uint256 totalSupply);\r\n\r\n    /**\r\n     * Returns `owner` balance of tokens\r\n     * @param owner address to request balance for\r\n     * @return balance - token balance of `owner`\r\n     */\r\n    function balanceOf(address owner) constant returns (uint256 balance);\r\n\r\n    /**\r\n     * Transfers `amount` of tokens to `to` address\r\n     * @param  to - address to transfer to\r\n     * @param  value - amount of tokens to transfer\r\n     * @return success - `true` if the transfer was succesful, `false` otherwise\r\n     */\r\n    function transfer(address to, uint256 value) returns (bool success);\r\n\r\n    /**\r\n     * Transfers `value` tokens from `from` address to `to`\r\n     * the sender needs to have allowance for this operation\r\n     * @param  from - address to take tokens from\r\n     * @param  to - address to send tokens to\r\n     * @param  value - amount of tokens to send\r\n     * @return success - `true` if the transfer was succesful, `false` otherwise\r\n     */\r\n    function transferFrom(address from, address to, uint256 value) returns (bool success);\r\n\r\n    /**\r\n     * Allow spender to withdraw from your account, multiple times, up to the value amount.\r\n     * If this function is called again it overwrites the current allowance with `value`.\r\n     * this function is required for some DEX functionality\r\n     * @param spender - address to give allowance to\r\n     * @param value - the maximum amount of tokens allowed for spending\r\n     * @return success - `true` if the allowance was given, `false` otherwise\r\n     */\r\n    function approve(address spender, uint256 value) returns (bool success);\r\n\r\n    /**\r\n     * Returns the amount which `spender` is still allowed to withdraw from `owner`\r\n     * @param  owner - tokens owner\r\n     * @param  spender - addres to request allowance for\r\n     * @return remaining - remaining allowance (token count)\r\n     */\r\n    function allowance(address owner, address spender) constant returns (uint256 remaining);\r\n}\r\n\r\npragma solidity 0.4.15;\r\n\r\n/**\r\n * @title Blind Croupier Token\r\n * WIN fixed supply Token, used for Blind Croupier TokenDistribution\r\n */\r\n contract WIN is ERC20Token {\r\n    \r\n\r\n    string public constant symbol = \"WIN\";\r\n    string public constant name = \"WIN\";\r\n\r\n    uint8 public constant decimals = 7;\r\n    uint256 constant TOKEN = 10**7;\r\n    uint256 constant MILLION = 10**6;\r\n    uint256 public totalTokenSupply = 500 * MILLION * TOKEN;\r\n\r\n    /** balances of each accounts */\r\n    mapping(address => uint256) balances;\r\n\r\n    /** amount of tokens approved for transfer */\r\n    mapping(address => mapping (address => uint256)) allowed;\r\n\r\n    /** Triggered when `owner` destroys `amount` tokens */\r\n    event Destroyed(address indexed owner, uint256 amount);\r\n\r\n    /**\r\n     * Constucts the token, and supplies the creator with `totalTokenSupply` tokens\r\n     */\r\n    function WIN ()   { \r\n        balances[msg.sender] = totalTokenSupply;\r\n    }\r\n\r\n    /**\r\n     * Returns total supply of tokens ever emitted\r\n     * @return result - total supply of tokens ever emitted\r\n     */\r\n    function totalSupply ()  constant  returns (uint256 result) { \r\n        result = totalTokenSupply;\r\n    }\r\n\r\n    /**\r\n    * Returns `owner` balance of tokens\r\n    * @param owner address to request balance for\r\n    * @return balance - token balance of `owner`\r\n    */\r\n    function balanceOf (address owner)  constant  returns (uint256 balance) { \r\n        return balances[owner];\r\n    }\r\n\r\n    /**\r\n     * Transfers `amount` of tokens to `to` address\r\n     * @param  to - address to transfer to\r\n     * @param  amount - amount of tokens to transfer\r\n     * @return success - `true` if the transfer was succesful, `false` otherwise\r\n     */\r\n    function transfer (address to, uint256 amount)   returns (bool success) { \r\n        if(balances[msg.sender] < amount)\r\n            return false;\r\n\r\n        if(amount <= 0)\r\n            return false;\r\n\r\n        if(balances[to] + amount <= balances[to])\r\n            return false;\r\n\r\n        balances[msg.sender] -= amount;\r\n        balances[to] += amount;\r\n        Transfer(msg.sender, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Transfers `amount` tokens from `from` address to `to`\r\n     * the sender needs to have allowance for this operation\r\n     * @param  from - address to take tokens from\r\n     * @param  to - address to send tokens to\r\n     * @param  amount - amount of tokens to send\r\n     * @return success - `true` if the transfer was succesful, `false` otherwise\r\n     */\r\n    function transferFrom (address from, address to, uint256 amount)   returns (bool success) { \r\n        if (balances[from] < amount)\r\n            return false;\r\n\r\n        if(allowed[from][msg.sender] < amount)\r\n            return false;\r\n\r\n        if(amount == 0)\r\n            return false;\r\n\r\n        if(balances[to] + amount <= balances[to])\r\n            return false;\r\n\r\n        balances[from] -= amount;\r\n        allowed[from][msg.sender] -= amount;\r\n        balances[to] += amount;\r\n        Transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Allow spender to withdraw from your account, multiple times, up to the amount amount.\r\n     * If this function is called again it overwrites the current allowance with `amount`.\r\n     * this function is required for some DEX functionality\r\n     * @param spender - address to give allowance to\r\n     * @param amount - the maximum amount of tokens allowed for spending\r\n     * @return success - `true` if the allowance was given, `false` otherwise\r\n     */\r\n    function approve (address spender, uint256 amount)   returns (bool success) { \r\n       allowed[msg.sender][spender] = amount;\r\n       Approval(msg.sender, spender, amount);\r\n       return true;\r\n   }\r\n\r\n    /**\r\n     * Returns the amount which `spender` is still allowed to withdraw from `owner`\r\n     * @param  owner - tokens owner\r\n     * @param  spender - addres to request allowance for\r\n     * @return remaining - remaining allowance (token count)\r\n     */\r\n    function allowance (address owner, address spender)  constant  returns (uint256 remaining) { \r\n        return allowed[owner][spender];\r\n    }\r\n\r\n     /**\r\n      * Destroys `amount` of tokens permanently, they cannot be restored\r\n      * @return success - `true` if `amount` of tokens were destroyed, `false` otherwise\r\n      */\r\n    function destroy (uint256 amount)   returns (bool success) { \r\n        if(amount == 0) return false;\r\n        if(balances[msg.sender] < amount) return false;\r\n        balances[msg.sender] -= amount;\r\n        totalTokenSupply -= amount;\r\n        Destroyed(msg.sender, amount);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"result\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalTokenSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"destroy\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Destroyed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"WIN","CompilerVersion":"v0.4.15+commit.bbb8e64f","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://5cd1f638cbc2d76da559513ed71ba5cb21031f2db64adc3007e5e03e6b915db7"}]}