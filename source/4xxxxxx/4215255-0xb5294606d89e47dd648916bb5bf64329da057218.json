{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13;\r\n\r\n\r\n/**\r\n * Base contract for work orders on the Provide platform.\r\n */\r\ncontract ProvideWorkOrder {\r\n  using SafeMath for uint;\r\n\r\n  /** Status of the work order contract. **/\r\n  enum Status { Pending, InProgress, Completed, Paid }\r\n\r\n  /** Provide platform robot. */\r\n  address public prvd;\r\n\r\n  /** Provide platform wallet where payment amounts owed to providers are escrowed. */\r\n  address public paymentEscrow;\r\n\r\n  /** Peer requesting and purchasing service. */\r\n  address public peer;\r\n\r\n  /** Peer providing service; compensated in PRVD tokens. */\r\n  address public provider;\r\n\r\n  /** Provide platform work order identifier (UUIDv4). */\r\n  uint128 public identifier;\r\n\r\n  /** Current status of the work order contract. **/\r\n  Status public status;\r\n\r\n  /** Total amount of Provide (PRVD) tokens payable to provider, expressed in wei. */\r\n  uint256 public amount;\r\n\r\n  /** Encoded transaction details. */\r\n  string public details;\r\n\r\n  /** Emitted when the work order has been started. */\r\n  event WorkOrderStarted(uint128 _identifier);\r\n\r\n  /** Emitted when the work order has been completed. */\r\n  event WorkOrderCompleted(uint128 _identifier, uint256 _amount, string _details);\r\n\r\n  /** Emitted when the transaction has been completed. */\r\n  event TransactionCompleted(uint128 _identifier, uint256 _paymentAmount, uint256 feeAmount, string _details);\r\n\r\n  /**\r\n   * @param _prvd Provide platform robot contract address\r\n   * @param _paymentEscrow Provide platform wallet where payment amounts owed to providers are escrowed\r\n   * @param _peer Address of party purchasing services\r\n   * @param _identifier Provide platform work order identifier (UUIDv4)\r\n   */\r\n  function ProvideWorkOrder(\r\n    address _prvd,\r\n    address _paymentEscrow,\r\n    address _peer,\r\n    uint128 _identifier\r\n  ) {\r\n    if (_prvd == 0x0) revert();\r\n    if (_paymentEscrow == 0x0) revert();\r\n    if (_peer == 0x0) revert();\r\n\r\n    prvd = _prvd;\r\n    paymentEscrow = _paymentEscrow;\r\n    peer = _peer;\r\n    identifier = _identifier;\r\n\r\n    status = Status.Pending;\r\n  }\r\n\r\n  /**\r\n   * Set the address of the party providing service and start the work order.\r\n   * @param _provider Address of the party providing service\r\n   */\r\n  function start(address _provider) public onlyPrvd onlyPending {\r\n    if (provider != 0x0) revert();\r\n    provider = _provider;\r\n    status = Status.InProgress;\r\n    WorkOrderStarted(identifier);\r\n  }\r\n\r\n  /**\r\n   * Complete the work order.\r\n   * @param _amount Total amount of Provide (PRVD) tokens payable to provider, expressed in wei\r\n   * @param _details Encoded transaction details\r\n   */\r\n  function complete(uint256 _amount, string _details) public onlyProvider onlyInProgress {\r\n    amount = _amount;\r\n    details = _details;\r\n    status = Status.Completed;\r\n    WorkOrderCompleted(identifier, amount, details);\r\n  }\r\n\r\n  /**\r\n   * Complete the transaction by remitting the exact amount of PRVD tokens due.\r\n   * The service provider's payment is escrowed in the payment escrow wallet\r\n   * and the platform fee is remitted to Provide.\r\n   *\r\n   * Partial payments will be rejected.\r\n   */\r\n  function completeTransaction() public onlyPurchaser onlyCompleted payable {\r\n    if (msg.value != amount) revert();\r\n\r\n    uint paymentAmount = msg.value.mul(uint(95).div(100));\r\n    paymentEscrow.transfer(paymentAmount);\r\n\r\n    uint feeAmount = msg.value.sub(paymentAmount);\r\n    prvd.transfer(feeAmount);\r\n\r\n    status = Status.Paid;\r\n    TransactionCompleted(identifier, paymentAmount, feeAmount, details);\r\n  }\r\n\r\n  /**\r\n   * Only allow the Provide platform robot to execute a contract function.\r\n   */\r\n  modifier onlyPrvd() {\r\n    if (msg.sender != prvd) revert();\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * Only allow the peer purchasing services to execute a contract function.\r\n   */\r\n  modifier onlyPurchaser() {\r\n    if (msg.sender != peer) revert();\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * Only allow the service provider to execute a contract function.\r\n   */\r\n  modifier onlyProvider() {\r\n    if (msg.sender != provider) revert();\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * Only allow execution of a contract function if the work order is pending.\r\n   */\r\n  modifier onlyPending() {\r\n    if (uint(status) != uint(Status.Pending)) revert();\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * Only allow execution of a contract function if the work order is started.\r\n   */\r\n  modifier onlyInProgress() {\r\n    if (uint(status) != uint(Status.InProgress)) revert();\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * Only allow execution of a contract function if the work order is complete.\r\n   */\r\n  modifier onlyCompleted() {\r\n    if (uint(status) != uint(Status.Completed)) revert();\r\n    _;\r\n  }\r\n}\r\n\r\n/**\r\n * Math operations with safety checks\r\n */\r\nlibrary SafeMath {\r\n\r\n  function mul(uint a, uint b) internal returns (uint) {\r\n    uint c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint a, uint b) internal returns (uint) {\r\n    return a / b;\r\n  }\r\n\r\n  function sub(uint a, uint b) internal returns (uint) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint a, uint b) internal returns (uint) {\r\n    uint c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n\r\n  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n    return a < b ? a : b;\r\n  }\r\n\r\n  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    return a < b ? a : b;\r\n  }\r\n\r\n  function assertTrue(bool val) internal {\r\n    assert(val);\r\n  }\r\n\r\n  function assertFalse(bool val) internal {\r\n    assert(!val);\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"provider\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"peer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"status\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_details\",\"type\":\"string\"}],\"name\":\"complete\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"prvd\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"details\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"identifier\",\"outputs\":[{\"name\":\"\",\"type\":\"uint128\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paymentEscrow\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"amount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"completeTransaction\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_provider\",\"type\":\"address\"}],\"name\":\"start\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_prvd\",\"type\":\"address\"},{\"name\":\"_paymentEscrow\",\"type\":\"address\"},{\"name\":\"_peer\",\"type\":\"address\"},{\"name\":\"_identifier\",\"type\":\"uint128\"}],\"payable\":false,\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_identifier\",\"type\":\"uint128\"}],\"name\":\"WorkOrderStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_identifier\",\"type\":\"uint128\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_details\",\"type\":\"string\"}],\"name\":\"WorkOrderCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_identifier\",\"type\":\"uint128\"},{\"indexed\":false,\"name\":\"_paymentAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"feeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_details\",\"type\":\"string\"}],\"name\":\"TransactionCompleted\",\"type\":\"event\"}]","ContractName":"ProvideWorkOrder","CompilerVersion":"v0.4.13+commit.fb4cb1a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000104702c0c9e324220664899dde21d7c7d5446ae8000000000000000000000000a5edde06b37b2ae66336106364458f8bc1aea3ad0000000000000000000000001bf83bed14da0ddbf9682d23b0ac4554c6de97710000000000000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://8574aa301689bdc00d7fe6f7f1d0ba87dd6ebd3f8967180350a8cdc37555eaf0"}]}