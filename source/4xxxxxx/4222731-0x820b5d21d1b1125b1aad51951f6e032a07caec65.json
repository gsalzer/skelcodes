{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13;\r\n\r\n/*\r\n\r\nMonetha Buyer\r\n========================\r\n\r\nBuys Monetha tokens from the crowdsale on your behalf.\r\nAuthor: /u/Cintix\r\n\r\n*/\r\n\r\n// ERC20 Interface: https://github.com/ethereum/EIPs/issues/20\r\ncontract ERC20 {\r\n  function transfer(address _to, uint256 _value) returns (bool success);\r\n  function balanceOf(address _owner) constant returns (uint256 balance);\r\n}\r\n\r\ncontract MonethaBuyer {\r\n  // Store the amount of ETH deposited by each account.\r\n  mapping (address => uint256) public balances;\r\n  // Bounty for executing buy.\r\n  uint256 public buy_bounty;\r\n  // Bounty for executing withdrawals.\r\n  uint256 public withdraw_bounty;\r\n  // Track whether the contract has bought the tokens yet.\r\n  bool public bought_tokens;\r\n  // Record ETH value of tokens currently held by contract.\r\n  uint256 public contract_eth_value;\r\n  // Emergency kill switch in case a critical bug is found.\r\n  bool public kill_switch;\r\n  \r\n  // SHA3 hash of kill switch password.\r\n  bytes32 password_hash = 0x8223cba4d8b54dc1e03c41c059667f6adb1a642a0a07bef5a9d11c18c4f14612;\r\n  // Earliest time contract is allowed to buy into the crowdsale.\r\n  uint256 public earliest_buy_time = 1504188000;\r\n  // Maximum amount of user ETH contract will accept.  Reduces risk of hard cap related failure.\r\n  uint256 public eth_cap = 30000 ether;\r\n  // The developer address.\r\n  address public developer = 0x000Fb8369677b3065dE5821a86Bc9551d5e5EAb9;\r\n  // The crowdsale address.  Settable by the developer.\r\n  address public sale;\r\n  // The token address.  Settable by the developer.\r\n  ERC20 public token;\r\n  \r\n  // Allows the developer to set the crowdsale and token addresses.\r\n  function set_addresses(address _sale, address _token) {\r\n    // Only allow the developer to set the sale and token addresses.\r\n    require(msg.sender == developer);\r\n    // Only allow setting the addresses once.\r\n    require(sale == 0x0);\r\n    // Set the crowdsale and token addresses.\r\n    sale = _sale;\r\n    token = ERC20(_token);\r\n  }\r\n  \r\n  // Allows the developer or anyone with the password to shut down everything except withdrawals in emergencies.\r\n  function activate_kill_switch(string password) {\r\n    // Only activate the kill switch if the sender is the developer or the password is correct.\r\n    require(msg.sender == developer || sha3(password) == password_hash);\r\n    // Store the claimed bounty in a temporary variable.\r\n    uint256 claimed_bounty = buy_bounty;\r\n    // Update bounty prior to sending to prevent recursive call.\r\n    buy_bounty = 0;\r\n    // Irreversibly activate the kill switch.\r\n    kill_switch = true;\r\n    // Send the caller their bounty for activating the kill switch.\r\n    msg.sender.transfer(claimed_bounty);\r\n  }\r\n  \r\n  // Withdraws all ETH deposited or tokens purchased by the given user and rewards the caller.\r\n  function withdraw(address user){\r\n    // Only allow withdrawals after the contract has had a chance to buy in.\r\n    require(bought_tokens || now > earliest_buy_time + 1 hours);\r\n    // Short circuit to save gas if the user doesn't have a balance.\r\n    if (balances[user] == 0) return;\r\n    // If the contract failed to buy into the sale, withdraw the user's ETH.\r\n    if (!bought_tokens) {\r\n      // Store the user's balance prior to withdrawal in a temporary variable.\r\n      uint256 eth_to_withdraw = balances[user];\r\n      // Update the user's balance prior to sending ETH to prevent recursive call.\r\n      balances[user] = 0;\r\n      // Return the user's funds.  Throws on failure to prevent loss of funds.\r\n      user.transfer(eth_to_withdraw);\r\n    }\r\n    // Withdraw the user's tokens if the contract has purchased them.\r\n    else {\r\n      // Retrieve current token balance of contract.\r\n      uint256 contract_token_balance = token.balanceOf(address(this));\r\n      // Disallow token withdrawals if there are no tokens to withdraw.\r\n      require(contract_token_balance != 0);\r\n      // Store the user's token balance in a temporary variable.\r\n      uint256 tokens_to_withdraw = (balances[user] * contract_token_balance) / contract_eth_value;\r\n      // Update the value of tokens currently held by the contract.\r\n      contract_eth_value -= balances[user];\r\n      // Update the user's balance prior to sending to prevent recursive call.\r\n      balances[user] = 0;\r\n      // 1% fee if contract successfully bought tokens.\r\n      uint256 fee = tokens_to_withdraw / 100;\r\n      // Send the fee to the developer.\r\n      require(token.transfer(developer, fee));\r\n      // Send the funds.  Throws on failure to prevent loss of funds.\r\n      require(token.transfer(user, tokens_to_withdraw - fee));\r\n    }\r\n    // Each withdraw call earns 1% of the current withdraw bounty.\r\n    uint256 claimed_bounty = withdraw_bounty / 100;\r\n    // Update the withdraw bounty prior to sending to prevent recursive call.\r\n    withdraw_bounty -= claimed_bounty;\r\n    // Send the caller their bounty for withdrawing on the user's behalf.\r\n    msg.sender.transfer(claimed_bounty);\r\n  }\r\n  \r\n  // Allows developer to add ETH to the buy execution bounty.\r\n  function add_to_buy_bounty() payable {\r\n    // Only allow the developer to contribute to the buy execution bounty.\r\n    require(msg.sender == developer);\r\n    // Update bounty to include received amount.\r\n    buy_bounty += msg.value;\r\n  }\r\n  \r\n  // Allows developer to add ETH to the withdraw execution bounty.\r\n  function add_to_withdraw_bounty() payable {\r\n    // Only allow the developer to contribute to the buy execution bounty.\r\n    require(msg.sender == developer);\r\n    // Update bounty to include received amount.\r\n    withdraw_bounty += msg.value;\r\n  }\r\n  \r\n  // Buys tokens in the crowdsale and rewards the caller, callable by anyone.\r\n  function claim_bounty(){\r\n    // Short circuit to save gas if the contract has already bought tokens.\r\n    if (bought_tokens) return;\r\n    // Short circuit to save gas if the earliest buy time hasn't been reached.\r\n    if (now < earliest_buy_time) return;\r\n    // Short circuit to save gas if kill switch is active.\r\n    if (kill_switch) return;\r\n    // Disallow buying in if the developer hasn't set the sale address yet.\r\n    require(sale != 0x0);\r\n    // Record that the contract has bought the tokens.\r\n    bought_tokens = true;\r\n    // Store the claimed bounty in a temporary variable.\r\n    uint256 claimed_bounty = buy_bounty;\r\n    // Update bounty prior to sending to prevent recursive call.\r\n    buy_bounty = 0;\r\n    // Record the amount of ETH sent as the contract's current value.\r\n    contract_eth_value = this.balance - (claimed_bounty + withdraw_bounty);\r\n    // Transfer all the funds (less the bounties) to the crowdsale address\r\n    // to buy tokens.  Throws if the crowdsale hasn't started yet or has\r\n    // already completed, preventing loss of funds.\r\n    require(sale.call.value(contract_eth_value)());\r\n    // Send the caller their bounty for buying tokens for the contract.\r\n    msg.sender.transfer(claimed_bounty);\r\n  }\r\n  \r\n  // Default function.  Called when a user sends ETH to the contract.\r\n  function () payable {\r\n    // Disallow deposits if kill switch is active.\r\n    require(!kill_switch);\r\n    // Only allow deposits if the contract hasn't already purchased the tokens.\r\n    require(!bought_tokens);\r\n    // Only allow deposits that won't exceed the contract's ETH cap.\r\n    require(this.balance < eth_cap);\r\n    // Update records of deposited ETH to include the received amount.\r\n    balances[msg.sender] += msg.value;\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"claim_bounty\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buy_bounty\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"add_to_withdraw_bounty\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sale\",\"type\":\"address\"},{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"set_addresses\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bought_tokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sale\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"add_to_buy_bounty\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kill_switch\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"withdraw_bounty\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contract_eth_value\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"developer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"password\",\"type\":\"string\"}],\"name\":\"activate_kill_switch\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"eth_cap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"earliest_buy_time\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"payable\":true,\"type\":\"fallback\"}]","ContractName":"MonethaBuyer","CompilerVersion":"v0.4.15+commit.bbb8e64f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://4881be81621bd72e48a940a3e7ae4959a00f3ef113f4fdf328759b3a77ce38b0"}]}