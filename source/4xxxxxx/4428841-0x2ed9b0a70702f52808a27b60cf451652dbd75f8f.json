{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n\r\n /// @title Ownable contract - base contract with an owner\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    if (newOwner != address(0)) {\r\n      owner = newOwner;\r\n    }\r\n  }\r\n}\r\n\r\n\r\n /// @title ERC20 interface see https://github.com/ethereum/EIPs/issues/20\r\ncontract ERC20 {\r\n  uint public totalSupply;\r\n  function balanceOf(address who) public constant returns (uint);\r\n  function allowance(address owner, address spender) public constant returns (uint);\r\n  function transfer(address to, uint value) public returns (bool ok);\r\n  function transferFrom(address from, address to, uint value) public returns (bool ok);\r\n  function approve(address spender, uint value) public returns (bool ok);\r\n  function decimals() public constant returns (uint);\r\n  event Transfer(address indexed from, address indexed to, uint value);\r\n  event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\n\r\n/*\r\nThe SilentNotary Smart-Contract is specifically developed and designed to provide users \r\nthe opportunity to fix any fact of evidence in a variety of many digital forms, including \r\nbut not limited: photo, video, sound recording, chat, multi-user chat by uploading hash of \r\nthe Userâ€™s data to the Ethereum blockchain.\r\n*/\r\n/// @title SilentNotary contract - store SHA-384 file hash in blockchain\r\ncontract SilentNotary is Ownable {\r\n\tuint public price;\r\n\tERC20 public token;\r\n\r\n\tstruct Entry {\r\n\t\tuint blockNumber;\r\n\t\tuint timestamp;\r\n\t}\r\n\r\n\tmapping (bytes32 => Entry) public entryStorage;\r\n\r\n\tevent EntryAdded(bytes32 hash, uint blockNumber, uint timestamp);\r\n\tevent EntryExistAlready(bytes32 hash, uint timestamp);\r\n\r\n\t/// Fallback method\r\n\tfunction () public {\r\n\t  \t// If ether is sent to this address, send it back\r\n\t  \trevert();\r\n\t}\r\n\r\n\t/// @dev Set price in SNTR tokens for storing\r\n\t/// @param _price price in SNTR tokens\r\n\tfunction setRegistrationPrice(uint _price) public onlyOwner {\r\n\t\tprice = _price;\r\n\t}\r\n\r\n\t/// @dev Set SNTR token address\r\n\t/// @param _token Address SNTR tokens contract\r\n\t\tfunction setTokenAddress(address _token) public onlyOwner {\r\n\t\t    token = ERC20(_token);\r\n\t}\r\n\r\n\t/// @dev Register file hash in contract, web3 integration\r\n\t/// @param hash SHA-256 file hash\r\n\tfunction makeRegistration(bytes32 hash) onlyOwner public {\r\n\t\t\tmakeRegistrationInternal(hash);\r\n\t}\r\n\r\n\t/// @dev Payable registration in SNTR tokens\r\n\t/// @param hash SHA-256 file hash\r\n\tfunction makePayableRegistration(bytes32 hash) public {\r\n\t\taddress sender = msg.sender;\r\n\t    uint allowed = token.allowance(sender, owner);\r\n\t    assert(allowed >= price);\r\n\r\n\t    if(!token.transferFrom(sender, owner, price))\r\n          revert();\r\n\t\t\tmakeRegistrationInternal(hash);\r\n\t}\r\n\r\n\t/// @dev Internal registation method\r\n\t/// @param hash SHA-256 file hash\r\n\tfunction makeRegistrationInternal(bytes32 hash) internal {\r\n\t\t\tuint timestamp = now;\r\n\t    // Checks documents isn't already registered\r\n\t    if (exist(hash)) {\r\n\t        EntryExistAlready(hash, timestamp);\r\n\t        revert();\r\n\t    }\r\n\t    // Registers the proof with the timestamp of the block\r\n\t    entryStorage[hash] = Entry(block.number, timestamp);\r\n\t    // Triggers a EntryAdded event\r\n\t    EntryAdded(hash, block.number, timestamp);\r\n\t}\r\n\r\n\t/// @dev Check hash existance\r\n\t/// @param hash SHA-256 file hash\r\n\t/// @return Returns true if hash exist\r\n\tfunction exist(bytes32 hash) internal constant returns (bool) {\r\n\t    return entryStorage[hash].blockNumber != 0;\r\n\t}\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"setTokenAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"makeRegistration\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"entryStorage\",\"outputs\":[{\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"name\":\"timestamp\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"makePayableRegistration\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setRegistrationPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"hash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"EntryAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"hash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"EntryExistAlready\",\"type\":\"event\"}]","ContractName":"SilentNotary","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://ac9c351a596bef8e29ea34b49a2f3b43fb66e11d591bab8aa2e76ce1a137de92"}]}