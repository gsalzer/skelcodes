{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.16;\r\n/** @title Ether to the Moon */\r\ncontract EtherToTheMoon {\r\n // Publically visible who is the owner of this contract. Also,\r\n // this adds get functions for this variable automatically.\r\n address public owner;\r\n uint public totalContribution;\r\n\r\n /// Runs only once when the contract is deployed.\r\n function EtherToTheMoon() public{\r\n   owner = msg.sender;\r\n }\r\n modifier onlyOwner() {\r\n   require(msg.sender == owner);\r\n   _;\r\n }\r\n struct richData {\r\n   uint amount;\r\n   bytes32 message;\r\n   address sender;\r\n }\r\n /* DATABASES */\r\n // We are creating a publically accessible database for all\r\n // the bids that we will recieve. We are mapping address of\r\n // each sender to the value inside it.\r\n mapping(address => uint) public users;\r\n richData[10] public richDatabase; // [0] = Richest & [9] = Poorest\r\n\r\n // Function to be called when anyone sends us money. We take the money\r\n // in wei and add it to his total bid.\r\n function takeMyMoney(bytes32 message) public payable returns (bool){\r\n   // Add value to his total amount.\r\n   users[msg.sender] += msg.value;\r\n   totalContribution += msg.value;\r\n   if(users[msg.sender] >= users[richDatabase[9].sender] ){\r\n     richData[] memory arr = new richData[](10);\r\n     bool updated = false;\r\n     uint j = 0;\r\n     for (uint i = 0; i < 10; i++) {\r\n       if(j == 10) break;\r\n       if(!updated && users[msg.sender] > richDatabase[i].amount) {\r\n         richData memory newData;\r\n         newData.amount = users[msg.sender];\r\n         newData.message = message;\r\n         newData.sender = msg.sender;\r\n         arr[j] = newData;\r\n         j++;\r\n         if(richDatabase[i].sender != msg.sender) {\r\n          arr[j] = richDatabase[i];\r\n          j++;\r\n         }\r\n         updated = true;\r\n       } else if(richDatabase[i].sender != msg.sender){\r\n         arr[j] = richDatabase[i];\r\n         j++;\r\n       }\r\n     }\r\n     for(i = 0; i < 10; i++) {\r\n         richDatabase[i] = arr[i];\r\n       }\r\n   }\r\n   return updated;\r\n }\r\n function buyerHistory() public constant returns (address[], uint[], bytes32[]){\r\n\r\n     uint length;\r\n     length = 10;\r\n     address[] memory senders = new address[](length);\r\n     uint[] memory amounts = new uint[](length);\r\n     bytes32[] memory statuses = new bytes32[](length);\r\n\r\n     for (uint i = 0; i < length; i++)\r\n     {\r\n         senders[i] = (richDatabase[i].sender);\r\n         amounts[i] = (richDatabase[i].amount);\r\n         statuses[i] = (richDatabase[i].message);\r\n     }\r\n     return (senders, amounts, statuses);\r\n }\r\n function withdraw(address _to, uint _amount) onlyOwner external payable{\r\n     require(_amount <= totalContribution);\r\n     totalContribution -= _amount;\r\n     _to.transfer(_amount);\r\n }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"totalContribution\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"richDatabase\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"message\",\"type\":\"bytes32\"},{\"name\":\"sender\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyerHistory\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"},{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"bytes32[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"message\",\"type\":\"bytes32\"}],\"name\":\"takeMyMoney\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"EtherToTheMoon","CompilerVersion":"v0.4.16+commit.d7661dd9","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://c9b28312d8fcd823d714f967b9a73188ac53c08f33c0c0464e1b20da967e12d3"}]}