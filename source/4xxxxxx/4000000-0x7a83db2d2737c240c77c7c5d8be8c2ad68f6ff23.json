{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\n// ----------------------------------------------------------------------------\r\n// The Useless Reserve Bank Token Contract\r\n//\r\n// - If you need welfare support, claim your free URB token entitlements from\r\n//   the gubberment.\r\n//\r\n//   Call the default function `()` to claim 1,000 URBs by sending a 0 value\r\n//   transaction to this contract address.\r\n//\r\n//   NOTE that any ethers sent with this call will fill the coffers of this\r\n//   gubberment's token contract.\r\n//\r\n// - If you consider yourself to be in the top 1%, make a donation for world\r\n//   peace.\r\n//\r\n//   Call `philanthropise({message})` and 100,000 URBs will be sent to\r\n//   your account for each ether you donate. Fractions of ethers are always\r\n//   accepted.\r\n//\r\n//   Your message and donation amount will be etched into the blockchain\r\n//   forever, to recognise your generousity. Thank you.\r\n//\r\n//   As you are making this world a better place, your philanthropic donation\r\n//   is eligible for a special discounted 20% tax rate. Your taxes will be\r\n//   shared equally among the current gubberment treasury officials.\r\n//   Thank you.\r\n//\r\n// - If you have fallen into hard times and have accumulated some URB tokens,\r\n//   you can convert your URBs into ethers.\r\n//\r\n//   Liquidate your URBs by calling `liquidate(amountOfTokens)`, where\r\n//   1 URB is specified as 1,000,000,000,000,000,000 (18 decimal places).\r\n//   You will receive 1 ether for each 30,000 URBs you liquidate.\r\n//\r\n//   NOTE that this treasury contract can only dish out ethers in exchange\r\n//   for URB tokens **IF** there are sufficient ethers in this contract.\r\n//   Only 25% of the ether balance of this contract can be claimed at any\r\n//   one time.\r\n//\r\n// - Any gifts of ERC20 tokens send to this contract will be solemnly accepted\r\n//   by the gubberment. The treasury will at it's discretion disburst these \r\n//   gifts to friendly officials. Thank you.\r\n//\r\n// Token Contract:\r\n// - Symbol: URB\r\n// - Name: Useless Reserve Bank\r\n// - Decimals: 18\r\n// - Contract address; 0x7a83db2d2737c240c77c7c5d8be8c2ad68f6ff23\r\n// - Block: 4,000,000\r\n//\r\n// Usage:\r\n// - Watch this contract at address:\r\n//     0x7A83dB2d2737C240C77C7C5D8be8c2aD68f6FF23\r\n//   with the application binary interface published at:\r\n//     https://etherscan.io/address/0x7a83db2d2737c240c77c7c5d8be8c2ad68f6ff23#code\r\n//   to execute this token contract functions in Ethereum Wallet / Mist or\r\n//   MyEtherWallet.\r\n//\r\n// User Functions:\r\n// - default send function ()\r\n//   Users can send 0 or more ethers to this contract address and receive back\r\n//   1000 URBs\r\n//\r\n// - philanthropise(name)\r\n//   Rich users can send a non-zero ether amount, calling this function with\r\n//   a name or dedication message. 100,000 URBs will be minted for each\r\n//   1 ETH sent. Fractions of an ether can be sent.\r\n//   Remember that your goodwill karma is related to the size of your donation.\r\n//\r\n// - liquidate(amountOfTokens)\r\n//   URB token holders can liquidate part or all of their tokens and receive\r\n//   back 1 ether for every 30,000 URBs liquidated, ONLY if the ethers to be\r\n//   received is less than 25% of the outstanding ETH balance of this contract\r\n//\r\n// - bribe()\r\n//   Send ethers directly to the gubberment treasury officials. Your ethers\r\n//   will be distributed equally among the current treasury offcials.\r\n//\r\n// Info Functions:\r\n// - currentEtherBalance()\r\n//   Returns the current ether balance of this contract.\r\n//\r\n// - currentTokenBalance()\r\n//   Returns the total supply of URB tokens, where 1 URB is represented as\r\n//   1,000,000,000,000,000,000 (18 decimal places).\r\n//\r\n// - numberOfTreasuryOfficials()\r\n//   Returns the number of officials on the payroll of the gubberment\r\n//   treasury.\r\n//\r\n// Gubberment Functions:\r\n// - pilfer(amount)\r\n//   Gubberment officials can pilfer any ethers in this contract when necessary.\r\n//\r\n// - acceptGiftTokens(tokenAddress)\r\n//   The gubberment can accept any ERC20-compliant gift tokens send to this\r\n//   contract.\r\n//\r\n// - replaceOfficials([accounts])\r\n//   The gubberment can sack and replace all it's treasury officials in one go.\r\n//\r\n// Standard ERC20 Functions:\r\n// - balanceOf(account)\r\n// - totalSupply\r\n// - transfer(to, amount)\r\n// - approve(spender, amount)\r\n// - transferFrom(owner, spender, amount)\r\n//\r\n// Yes, I made it into block 4,000,000 .\r\n//\r\n// Remember to make love and peace, not war!\r\n//\r\n// (c) The Gubberment 2017. The MIT Licence.\r\n// ----------------------------------------------------------------------------\r\n\r\ncontract Gubberment {\r\n    address public gubberment;\r\n    address public newGubberment;\r\n    event GubbermentOverthrown(address indexed _from, address indexed _to);\r\n\r\n    function Gubberment() {\r\n        gubberment = msg.sender;\r\n    }\r\n\r\n    modifier onlyGubberment {\r\n        if (msg.sender != gubberment) throw;\r\n        _;\r\n    }\r\n\r\n    function coupDetat(address _newGubberment) onlyGubberment {\r\n        newGubberment = _newGubberment;\r\n    }\r\n \r\n    function gubbermentOverthrown() {\r\n        if (msg.sender == newGubberment) {\r\n            GubbermentOverthrown(gubberment, newGubberment);\r\n            gubberment = newGubberment;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// ERC Token Standard #20 - https://github.com/ethereum/EIPs/issues/20\r\ncontract ERC20Token {\r\n    // ------------------------------------------------------------------------\r\n    // Balances for each account\r\n    // ------------------------------------------------------------------------\r\n    mapping(address => uint) balances;\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Owner of account approves the transfer of an amount to another account\r\n    // ------------------------------------------------------------------------\r\n    mapping(address => mapping (address => uint)) allowed;\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Total token supply\r\n    // ------------------------------------------------------------------------\r\n    uint public totalSupply;\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Get the account balance of another account with address _owner\r\n    // ------------------------------------------------------------------------\r\n    function balanceOf(address _owner) constant returns (uint balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Transfer the balance from owner's account to another account\r\n    // ------------------------------------------------------------------------\r\n    function transfer(address _to, uint _amount) returns (bool success) {\r\n        if (balances[msg.sender] >= _amount\r\n            && _amount > 0\r\n            && balances[_to] + _amount > balances[_to]) {\r\n            balances[msg.sender] -= _amount;\r\n            balances[_to] += _amount;\r\n            Transfer(msg.sender, _to, _amount);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Allow _spender to withdraw from your account, multiple times, up to the\r\n    // _value amount. If this function is called again it overwrites the\r\n    // current allowance with _value.\r\n    // ------------------------------------------------------------------------\r\n    function approve(\r\n        address _spender,\r\n        uint _amount\r\n    ) returns (bool success) {\r\n        allowed[msg.sender][_spender] = _amount;\r\n        Approval(msg.sender, _spender, _amount);\r\n        return true;\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Spender of tokens transfer an amount of tokens from the token owner's\r\n    // balance to the spender's account. The owner of the tokens must already\r\n    // have approve(...)-d this transfer\r\n    // ------------------------------------------------------------------------\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint _amount\r\n    ) returns (bool success) {\r\n        if (balances[_from] >= _amount\r\n            && allowed[_from][msg.sender] >= _amount\r\n            && _amount > 0\r\n            && balances[_to] + _amount > balances[_to]) {\r\n            balances[_from] -= _amount;\r\n            allowed[_from][msg.sender] -= _amount;\r\n            balances[_to] += _amount;\r\n            Transfer(_from, _to, _amount);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Returns the amount of tokens approved by the owner that can be\r\n    // transferred to the spender's account\r\n    // ------------------------------------------------------------------------\r\n    function allowance(\r\n        address _owner, \r\n        address _spender\r\n    ) constant returns (uint remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint _value);\r\n    event Approval(address indexed _owner, address indexed _spender,\r\n        uint _value);\r\n}\r\n\r\n\r\ncontract UselessReserveBank is ERC20Token, Gubberment {\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Token information\r\n    // ------------------------------------------------------------------------\r\n    string public constant symbol = \"URB\";\r\n    string public constant name = \"Useless Reserve Bank\";\r\n    uint8 public constant decimals = 18;\r\n    \r\n    uint public constant WELFARE_HANDOUT = 1000;\r\n    uint public constant ONEPERCENT_TOKENS_PER_ETH = 100000;\r\n    uint public constant LIQUIDATION_TOKENS_PER_ETH = 30000;\r\n\r\n    address[] public treasuryOfficials;\r\n    uint public constant TAXRATE = 20;\r\n    uint public constant LIQUIDATION_RESERVE_RATIO = 75;\r\n\r\n    uint public totalTaxed;\r\n    uint public totalBribery;\r\n    uint public totalPilfered;\r\n\r\n    uint public constant SENDING_BLOCK = 3999998; \r\n\r\n    function UselessReserveBank() {\r\n        treasuryOfficials.push(0xDe18789c4d65DC8ecE671A4145F32F1590c4D802);\r\n        treasuryOfficials.push(0x8899822D031891371afC369767511164Ef21e55c);\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Just give the welfare handouts\r\n    // ------------------------------------------------------------------------\r\n    function () payable {\r\n        uint tokens = WELFARE_HANDOUT * 1 ether;\r\n        totalSupply += tokens;\r\n        balances[msg.sender] += tokens;\r\n        WelfareHandout(msg.sender, tokens, totalSupply, msg.value, \r\n            this.balance);\r\n        Transfer(0x0, msg.sender, tokens);\r\n    }\r\n    event WelfareHandout(address indexed recipient, uint tokens, \r\n        uint newTotalSupply, uint ethers, uint newEtherBalance);\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // If you consider yourself rich, donate for world peace\r\n    // ------------------------------------------------------------------------\r\n    function philanthropise(string name) payable {\r\n        // Sending something real?\r\n        require(msg.value > 0);\r\n\r\n        // Calculate the number of tokens\r\n        uint tokens = msg.value * ONEPERCENT_TOKENS_PER_ETH;\r\n\r\n        // Assign tokens to account and inflate total supply\r\n        balances[msg.sender] += tokens;\r\n        totalSupply += tokens;\r\n\r\n        // Calculate and forward taxes to the treasury\r\n        uint taxAmount = msg.value * TAXRATE / 100;\r\n        if (taxAmount > 0) {\r\n            totalTaxed += taxAmount;\r\n            uint taxPerOfficial = taxAmount / treasuryOfficials.length;\r\n            for (uint i = 0; i < treasuryOfficials.length; i++) {\r\n                treasuryOfficials[i].transfer(taxPerOfficial);\r\n            }\r\n        }\r\n\r\n        Philanthropy(msg.sender, name, tokens, totalSupply, msg.value, \r\n            this.balance, totalTaxed);\r\n        Transfer(0x0, msg.sender, tokens);\r\n    }\r\n    event Philanthropy(address indexed buyer, string name, uint tokens, \r\n        uint newTotalSupply, uint ethers, uint newEtherBalance,\r\n        uint totalTaxed);\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Liquidate your tokens for ETH, if this contract has sufficient ETH\r\n    // ------------------------------------------------------------------------\r\n    function liquidate(uint amountOfTokens) {\r\n        // Account must have sufficient tokens\r\n        require(amountOfTokens <= balances[msg.sender]);\r\n\r\n        // Burn tokens\r\n        balances[msg.sender] -= amountOfTokens;\r\n        totalSupply -= amountOfTokens;\r\n\r\n        // Calculate ETH to exchange\r\n        uint ethersToSend = amountOfTokens / LIQUIDATION_TOKENS_PER_ETH;\r\n\r\n        // Is there sufficient ETH to support this liquidation?\r\n        require(ethersToSend > 0 && \r\n            ethersToSend <= (this.balance * (100 - LIQUIDATION_RESERVE_RATIO) / 100));\r\n\r\n        // Log message\r\n        Liquidate(msg.sender, amountOfTokens, totalSupply, \r\n            ethersToSend, this.balance - ethersToSend);\r\n        Transfer(msg.sender, 0x0, amountOfTokens);\r\n\r\n        // Send ETH\r\n        msg.sender.transfer(ethersToSend);\r\n    }\r\n    event Liquidate(address indexed seller, \r\n        uint tokens, uint newTotalSupply, \r\n        uint ethers, uint newEtherBalance);\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Gubberment officials will accept 100% of bribes\r\n    // ------------------------------------------------------------------------\r\n    function bribe() payable {\r\n        // Briber must be offering something real\r\n        require(msg.value > 0);\r\n\r\n        // Do we really need to keep track of the total bribes?\r\n        totalBribery += msg.value;\r\n        Bribed(msg.value, totalBribery);\r\n\r\n        uint bribePerOfficial = msg.value / treasuryOfficials.length;\r\n        for (uint i = 0; i < treasuryOfficials.length; i++) {\r\n            treasuryOfficials[i].transfer(bribePerOfficial);\r\n        }\r\n    }\r\n    event Bribed(uint amount, uint newTotalBribery);\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Gubberment officials can pilfer out of necessity\r\n    // ------------------------------------------------------------------------\r\n    function pilfer(uint amount) onlyGubberment {\r\n        // Cannot pilfer more than the contract balance\r\n        require(amount > this.balance);\r\n\r\n        // Do we really need to keep track of the total pilfered amounts?\r\n        totalPilfered += amount;\r\n        Pilfered(amount, totalPilfered, this.balance - amount);\r\n\r\n        uint amountPerOfficial = amount / treasuryOfficials.length;\r\n        for (uint i = 0; i < treasuryOfficials.length; i++) {\r\n            treasuryOfficials[i].transfer(amountPerOfficial);\r\n        }\r\n    }\r\n    event Pilfered(uint amount, uint totalPilfered, \r\n        uint newEtherBalance);\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Accept any ERC20 gifts\r\n    // ------------------------------------------------------------------------\r\n    function acceptGiftTokens(address tokenAddress) \r\n      onlyGubberment returns (bool success) \r\n    {\r\n        ERC20Token token = ERC20Token(tokenAddress);\r\n        uint amount = token.balanceOf(this);\r\n        return token.transfer(gubberment, amount);\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Change gubberment officials\r\n    // ------------------------------------------------------------------------\r\n    function replaceOfficials(address[] newOfficials) onlyGubberment {\r\n        treasuryOfficials = newOfficials;\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Information function\r\n    // ------------------------------------------------------------------------\r\n    function currentEtherBalance() constant returns (uint) {\r\n        return this.balance;\r\n    }\r\n\r\n    function currentTokenBalance() constant returns (uint) {\r\n        return totalSupply;\r\n    }\r\n\r\n    function numberOfTreasuryOfficials() constant returns (uint) {\r\n        return treasuryOfficials.length;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"WELFARE_HANDOUT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"pilfer\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentTokenBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ONEPERCENT_TOKENS_PER_ETH\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalPilfered\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"bribe\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalTaxed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amountOfTokens\",\"type\":\"uint256\"}],\"name\":\"liquidate\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOfficials\",\"type\":\"address[]\"}],\"name\":\"replaceOfficials\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalBribery\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gubberment\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"treasuryOfficials\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newGubberment\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"name\",\"type\":\"string\"}],\"name\":\"philanthropise\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"gubbermentOverthrown\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"LIQUIDATION_RESERVE_RATIO\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TAXRATE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"LIQUIDATION_TOKENS_PER_ETH\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentEtherBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SENDING_BLOCK\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numberOfTreasuryOfficials\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newGubberment\",\"type\":\"address\"}],\"name\":\"coupDetat\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"acceptGiftTokens\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newTotalSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ethers\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newEtherBalance\",\"type\":\"uint256\"}],\"name\":\"WelfareHandout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newTotalSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ethers\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newEtherBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"totalTaxed\",\"type\":\"uint256\"}],\"name\":\"Philanthropy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newTotalSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ethers\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newEtherBalance\",\"type\":\"uint256\"}],\"name\":\"Liquidate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newTotalBribery\",\"type\":\"uint256\"}],\"name\":\"Bribed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"totalPilfered\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newEtherBalance\",\"type\":\"uint256\"}],\"name\":\"Pilfered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"GubbermentOverthrown\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"UselessReserveBank","CompilerVersion":"v0.4.11+commit.68ef5810","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://abc06557f205446094e124ffb50645d354fb4bd8c5fb4a8c9c977b9ab0659c02"}]}