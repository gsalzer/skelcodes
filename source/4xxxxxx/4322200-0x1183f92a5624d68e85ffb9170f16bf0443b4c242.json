{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.15;\r\n\r\ncontract ERC20 {\r\n  uint public totalSupply;\r\n  function balanceOf(address who) constant returns (uint);\r\n  function allowance(address owner, address spender) constant returns (uint);\r\n\r\n  function transfer(address to, uint value) returns (bool ok);\r\n  function transferFrom(address from, address to, uint value) returns (bool ok);\r\n  function approve(address spender, uint value) returns (bool ok);\r\n  event Transfer(address indexed from, address indexed to, uint value);\r\n  event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\n/**\r\n * Math operations with safety checks\r\n */\r\ncontract SafeMath {\r\n  function safeMul(uint a, uint b) internal returns (uint) {\r\n    uint c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function safeDiv(uint a, uint b) internal returns (uint) {\r\n    assert(b > 0);\r\n    uint c = a / b;\r\n    assert(a == b * c + a % b);\r\n    return c;\r\n  }\r\n\r\n  function safeSub(uint a, uint b) internal returns (uint) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function safeAdd(uint a, uint b) internal returns (uint) {\r\n    uint c = a + b;\r\n    assert(c>=a && c>=b);\r\n    return c;\r\n  }\r\n\r\n  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n    return a < b ? a : b;\r\n  }\r\n\r\n  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    return a < b ? a : b;\r\n  }\r\n\r\n}\r\n\r\ncontract StandardToken is ERC20, SafeMath {\r\n\r\n  /* Token supply got increased and a new owner received these tokens */\r\n  event Minted(address receiver, uint amount);\r\n\r\n  /* Actual balances of token holders */\r\n  mapping(address => uint) balances;\r\n\r\n  /* approve() allowances */\r\n  mapping (address => mapping (address => uint)) allowed;\r\n\r\n  /* Interface declaration */\r\n  function isToken() public constant returns (bool weAre) {\r\n    return true;\r\n  }\r\n\r\n  function transfer(address _to, uint _value) returns (bool success) {\r\n    balances[msg.sender] = safeSub(balances[msg.sender], _value);\r\n    balances[_to] = safeAdd(balances[_to], _value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  function transferFrom(address _from, address _to, uint _value) returns (bool success) {\r\n    uint _allowance = allowed[_from][msg.sender];\r\n\r\n    balances[_to] = safeAdd(balances[_to], _value);\r\n    balances[_from] = safeSub(balances[_from], _value);\r\n    allowed[_from][msg.sender] = safeSub(_allowance, _value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  function balanceOf(address _owner) constant returns (uint balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n  function approve(address _spender, uint _value) returns (bool success) {\r\n\r\n    // To change the approve amount you first have to reduce the addresses`\r\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n    //  already 0 to mitigate the race condition described here:\r\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  function allowance(address _owner, address _spender) constant returns (uint remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n}\r\n\r\ncontract QVT is StandardToken {\r\n\r\n    string public name = \"QVT\";\r\n    string public symbol = \"QVT\";\r\n    uint public decimals = 18;\r\n    uint public multiplier = 1000000000000000000; // two decimals to the left\r\n\r\n    /**\r\n     * Boolean contract states\r\n     */\r\n    bool public halted = false; //the founder address can set this to true to halt the crowdsale due to emergency\r\n    bool public freeze = true; //Freeze state\r\n\r\n    uint public roundCount = 1; //Round state\r\n    bool public isDayFirst = false; //Pre-ico state\r\n    bool public isDaySecond = false; //Pre-ico state\r\n    bool public isDayThird = false; //Pre-ico state\r\n    bool public isPreSale = false; // Pre-sale bonus\r\n\r\n    /**\r\n     * Initial founder address (set in constructor)\r\n     * All deposited ETH will be forwarded to this address.\r\n     * Address is a multisig wallet.\r\n     */\r\n    address public founder = 0x0;\r\n    address public owner = 0x0;\r\n\r\n    /**\r\n     * Token count\r\n     */\r\n    uint public totalTokens = 21600000;\r\n    uint public team = 3420000;\r\n    uint public bounty = 180000 * multiplier; // Bounty count\r\n    uint public preIcoSold = 0;\r\n\r\n    /**\r\n     * Ico and pre-ico cap\r\n     */\r\n    uint public icoCap = 18000000; // Max amount raised during crowdsale 18000 ether\r\n\r\n    /**\r\n     * Statistic values\r\n     */\r\n    uint public presaleTokenSupply = 0; // This will keep track of the token supply created during the crowdsale\r\n    uint public presaleEtherRaised = 0; // This will keep track of the Ether raised during the crowdsale\r\n\r\n    event Buy(address indexed sender, uint eth, uint fbt);\r\n\r\n    /* This generates a public event on the blockchain that will notify clients */\r\n    event TokensSent(address indexed to, uint256 value);\r\n    event ContributionReceived(address indexed to, uint256 value);\r\n    event Burn(address indexed from, uint256 value);\r\n\r\n    function QVT(address _founder) payable {\r\n        owner = msg.sender;\r\n        founder = _founder;\r\n\r\n        team = safeMul(team, multiplier);\r\n\r\n        // Total supply is 18000000\r\n        totalSupply = safeMul(totalTokens, multiplier);\r\n        balances[owner] = safeSub(totalSupply, team);\r\n\r\n        // Move team token pool to founder balance\r\n        balances[founder] = team;\r\n\r\n        TokensSent(founder, team);\r\n        Transfer(owner, founder, team);\r\n    }\r\n\r\n    /**\r\n     * 1 QVT = 1 FINNEY\r\n     * Rrice is 1000 Qvolta for 1 ETH\r\n     */\r\n    function price() constant returns (uint){\r\n        return 1 finney;\r\n    }\r\n\r\n    /**\r\n      * The basic entry point to participate the crowdsale process.\r\n      *\r\n      * Pay for funding, get invested tokens back in the sender address.\r\n      */\r\n    function buy() public payable returns(bool) {\r\n        processBuy(msg.sender, msg.value);\r\n\r\n        return true;\r\n    }\r\n\r\n    function processBuy(address _to, uint256 _value) internal returns(bool) {\r\n        // Buy allowed if contract is not on halt\r\n        require(!halted);\r\n        // Amount of wei should be more that 0\r\n        require(_value>0);\r\n\r\n        // Count expected tokens price\r\n        uint tokens = _value / price();\r\n\r\n        // Total tokens should be more than user want's to buy\r\n        require(balances[owner]>safeMul(tokens, multiplier));\r\n\r\n        // Gave pre-sale bonus\r\n        if (isPreSale) {\r\n            tokens = tokens + (tokens / 2);\r\n        }\r\n\r\n        // Gave +30% of tokents on first day\r\n        if (isDayFirst) {\r\n            tokens = tokens + safeMul(safeDiv(tokens, 10), 3);\r\n        }\r\n\r\n        // Gave +20% of tokents on second day\r\n        if (isDaySecond) {\r\n            tokens = tokens + safeDiv(tokens, 5);\r\n        }\r\n\r\n        // Gave +10% of tokents on third day\r\n        if (isDayThird) {\r\n            tokens = tokens + safeDiv(tokens, 10);\r\n        }\r\n\r\n        // Check that required tokens count are less than tokens already sold on ico sub pre-ico\r\n        require(safeAdd(presaleTokenSupply, tokens) < icoCap);\r\n\r\n        // Send wei to founder address\r\n        founder.transfer(_value);\r\n\r\n        // Add tokens to user balance and remove from totalSupply\r\n        balances[_to] = safeAdd(balances[_to], safeMul(tokens, multiplier));\r\n        // Remove sold tokens from total supply count\r\n        balances[owner] = safeSub(balances[owner], safeMul(tokens, multiplier));\r\n\r\n        presaleTokenSupply = safeAdd(presaleTokenSupply, tokens);\r\n        presaleEtherRaised = safeAdd(presaleEtherRaised, _value);\r\n\r\n        // /* Emit log events */\r\n        Buy(_to, _value, safeMul(tokens, multiplier));\r\n        TokensSent(_to, safeMul(tokens, multiplier));\r\n        ContributionReceived(_to, _value);\r\n        Transfer(owner, _to, safeMul(tokens, multiplier));\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Emit log events\r\n     */\r\n    function sendEvents(address to, uint256 value, uint tokens) internal {\r\n        // Send buy Qvolta token action\r\n        Buy(to, value, safeMul(tokens, multiplier));\r\n        TokensSent(to, safeMul(tokens, multiplier));\r\n        ContributionReceived(to, value);\r\n        Transfer(owner, to, safeMul(tokens, multiplier));\r\n    }\r\n\r\n    /**\r\n     * Run mass transfers with pre-ico *2 bonus\r\n     */\r\n    function proceedPreIcoTransactions(address[] toArray, uint[] valueArray) onlyOwner() {\r\n        uint tokens = 0;\r\n        address to = 0x0;\r\n        uint value = 0;\r\n\r\n        for (uint i = 0; i < toArray.length; i++) {\r\n            to = toArray[i];\r\n            value = valueArray[i];\r\n            tokens = value / price();\r\n            tokens = tokens + tokens;\r\n            balances[to] = safeAdd(balances[to], safeMul(tokens, multiplier));\r\n            balances[owner] = safeSub(balances[owner], safeMul(tokens, multiplier));\r\n            preIcoSold = safeAdd(preIcoSold, tokens);\r\n            sendEvents(to, value, tokens);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Emergency Stop ICO.\r\n     */\r\n    function halt() onlyOwner() {\r\n        halted = true;\r\n    }\r\n\r\n    function unHalt() onlyOwner() {\r\n        halted = false;\r\n    }\r\n\r\n    /**\r\n     * Transfer team tokens to target address\r\n     */\r\n    function sendBounty(address _to, uint256 _value) onlyOwner() {\r\n        require(bounty > _value);\r\n\r\n        bounty = safeSub(bounty, _value);\r\n        balances[_to] = safeAdd(balances[_to], safeMul(_value, multiplier));\r\n        // /* Emit log events */\r\n        TokensSent(_to, safeMul(_value, multiplier));\r\n        Transfer(owner, _to, safeMul(_value, multiplier));\r\n    }\r\n\r\n    /**\r\n     * Transfer bounty to target address from bounty pool\r\n     */\r\n    function sendSupplyTokens(address _to, uint256 _value) onlyOwner() {\r\n        balances[owner] = safeSub(balances[owner], safeMul(_value, multiplier));\r\n        balances[_to] = safeAdd(balances[_to], safeMul(_value, multiplier));\r\n\r\n        // /* Emit log events */\r\n        TokensSent(_to, safeMul(_value, multiplier));\r\n        Transfer(owner, _to, safeMul(_value, multiplier));\r\n    }\r\n\r\n    /**\r\n     * ERC 20 Standard Token interface transfer function\r\n     *\r\n     * Prevent transfers until halt period is over.\r\n     */\r\n    function transfer(address _to, uint256 _value) isAvailable() returns (bool success) {\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n    /**\r\n     * ERC 20 Standard Token interface transfer function\r\n     *\r\n     * Prevent transfers until halt period is over.\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) isAvailable() returns (bool success) {\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n    /**\r\n     * Burn all tokens from a balance.\r\n     */\r\n    function burnRemainingTokens() isAvailable() onlyOwner() {\r\n        Burn(owner, balances[owner]);\r\n        balances[owner] = 0;\r\n    }\r\n\r\n    /**\r\n     * Set day first bonus\r\n     */\r\n    function setDayFirst() onlyOwner() {\r\n        isDayFirst = true;\r\n        isDaySecond = false;\r\n        isDayThird = false;\r\n    }\r\n\r\n    /**\r\n     * Set day second bonus\r\n     */\r\n    function setDaySecond() onlyOwner() {\r\n        isDayFirst = false;\r\n        isDaySecond = true;\r\n        isDayThird = false;\r\n    }\r\n\r\n    /**\r\n     * Set day first bonus\r\n     */\r\n    function setDayThird() onlyOwner() {\r\n        isDayFirst = false;\r\n        isDaySecond = false;\r\n        isDayThird = true;\r\n    }\r\n\r\n    /**\r\n     * Set day first bonus\r\n     */\r\n    function setBonusOff() onlyOwner() {\r\n        isDayFirst = false;\r\n        isDaySecond = false;\r\n        isDayThird = false;\r\n    }\r\n\r\n   /**\r\n    * Set pre-sale bonus\r\n    */\r\n   function setPreSaleOn() onlyOwner() {\r\n       isPreSale = true;\r\n   }\r\n\r\n   /**\r\n    * Set pre-sale bonus off\r\n    */\r\n   function setPreSaleOff() onlyOwner() {\r\n       isPreSale = false;\r\n   }\r\n\r\n    /**\r\n     * Start new investment round\r\n     */\r\n    function startNewRound() onlyOwner() {\r\n        require(roundCount < 5);\r\n        roundCount = roundCount + 1;\r\n\r\n        balances[owner] = safeAdd(balances[owner], safeMul(icoCap, multiplier));\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    modifier isAvailable() {\r\n        require(!halted && !freeze);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * Just being sent some cash? Let's buy tokens\r\n     */\r\n    function() payable {\r\n        buy();\r\n    }\r\n\r\n    /**\r\n     * Freeze and unfreeze ICO.\r\n     */\r\n    function freeze() onlyOwner() {\r\n         freeze = true;\r\n    }\r\n\r\n     function unFreeze() onlyOwner() {\r\n         freeze = false;\r\n     }\r\n\r\n    /**\r\n     * Replaces an owner\r\n     */\r\n    function changeOwner(address _to) onlyOwner() {\r\n        balances[_to] = balances[owner];\r\n        balances[owner] = 0;\r\n        owner = _to;\r\n    }\r\n\r\n    /**\r\n     * Replaces a founder, transfer team pool to new founder balance\r\n     */\r\n    function changeFounder(address _to) onlyOwner() {\r\n        balances[_to] = balances[founder];\r\n        balances[founder] = 0;\r\n        founder = _to;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"roundCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"multiplier\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"toArray\",\"type\":\"address[]\"},{\"name\":\"valueArray\",\"type\":\"uint256[]\"}],\"name\":\"proceedPreIcoTransactions\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"sendBounty\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setPreSaleOff\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presaleEtherRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isPreSale\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"founder\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"halt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"freeze\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"sendSupplyTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setDayFirst\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unHalt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preIcoSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unFreeze\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"burnRemainingTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"team\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setDaySecond\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"changeFounder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bounty\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setPreSaleOn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buy\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isDayFirst\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"halted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startNewRound\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presaleTokenSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isDaySecond\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setDayThird\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isDayThird\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isToken\",\"outputs\":[{\"name\":\"weAre\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setBonusOff\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_founder\",\"type\":\"address\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"eth\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"fbt\",\"type\":\"uint256\"}],\"name\":\"Buy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TokensSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"ContributionReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Minted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"QVT","CompilerVersion":"v0.4.16+commit.d7661dd9","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000008a7a7d59facd65b80b0d2bb4f5ca815ed29b0e88","Library":"","SwarmSource":"bzzr://e90ef1b9ecc4352ed534ba2ba734ddcaa5f908ce0e96a60505d611b5453b950b"}]}