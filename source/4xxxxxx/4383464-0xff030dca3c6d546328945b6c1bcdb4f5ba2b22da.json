{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13;\r\n\r\n/**\r\n * Contract \"Math\"\r\n * Purpose: Math operations with safety checks\r\n */\r\nlibrary Math {\r\n\r\n    /**\r\n    * Multiplication with safety check\r\n    */\r\n    function Mul(uint a, uint b) constant internal returns (uint) {\r\n      uint c = a * b;\r\n      //check result should not be other wise until a=0\r\n      assert(a == 0 || c / a == b);\r\n      return c;\r\n    }\r\n\r\n    /**\r\n    * Division with safety check\r\n    */\r\n    function Div(uint a, uint b) constant internal returns (uint) {\r\n      //overflow check; b must not be 0\r\n      assert(b > 0);\r\n      uint c = a / b;\r\n      assert(a == b * c + a % b);\r\n      return c;\r\n    }\r\n\r\n    /**\r\n    * Subtraction with safety check\r\n    */\r\n    function Sub(uint a, uint b) constant internal returns (uint) {\r\n      //b must be greater that a as we need to store value in unsigned integer\r\n      assert(b <= a);\r\n      return a - b;\r\n    }\r\n\r\n    /**\r\n    * Addition with safety check\r\n    */\r\n    function Add(uint a, uint b) constant internal returns (uint) {\r\n      uint c = a + b;\r\n      //result must be greater as a or b can not be negative\r\n      assert(c>=a && c>=b);\r\n      return c;\r\n    }\r\n}\r\n\r\n/**\r\n * Contract \"ERC20Basic\"\r\n * Purpose: Defining ERC20 standard with basic functionality like - CheckBalance and Transfer including Transfer event\r\n */\r\ncontract ERC20Basic {\r\n  \r\n  //Give realtime totalSupply of EXH token\r\n  uint public totalSupply;\r\n\r\n  //Get EXH token balance for provided address in lowest denomination\r\n  function balanceOf(address who) constant public returns (uint);\r\n\r\n  //Transfer EXH token to provided address\r\n  function transfer(address _to, uint _value) public returns(bool ok);\r\n\r\n  //Emit Transfer event outside of blockchain for every EXH token transfers\r\n  event Transfer(address indexed _from, address indexed _to, uint _value);\r\n}\r\n\r\n/**\r\n * Contract \"ERC20\"\r\n * Purpose: Defining ERC20 standard with more advanced functionality like - Authorize spender to transfer EXH token\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n\r\n  //Get EXH token amount that spender can spend from provided owner's account \r\n  function allowance(address owner, address spender) public constant returns (uint);\r\n\r\n  //Transfer initiated by spender \r\n  function transferFrom(address _from, address _to, uint _value) public returns(bool ok);\r\n\r\n  //Add spender to authrize for spending specified amount of EXH Token\r\n  function approve(address _spender, uint _value) public returns(bool ok);\r\n\r\n  //Emit event for any approval provided to spender\r\n  event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\n\r\n/**\r\n * Contract \"Ownable\"\r\n * Purpose: Defines Owner for contract and provide functionality to transfer ownership to another account\r\n */\r\ncontract Ownable {\r\n\r\n  //owner variable to store contract owner account\r\n  address public owner;\r\n\r\n  //Constructor for the contract to store owner's account on deployement\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n  \r\n  //modifier to check transaction initiator is only owner\r\n  modifier onlyOwner() {\r\n    if (msg.sender == owner)\r\n      _;\r\n  }\r\n\r\n  //ownership can be transferred to provided newOwner. Function can only be initiated by contract owner's account\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    if (newOwner != address(0)) \r\n        owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * Contract \"Pausable\"\r\n * Purpose: Contract to provide functionality to pause and resume Sale in case of emergency\r\n */\r\ncontract Pausable is Ownable {\r\n\r\n  //flag to indicate whether Sale is paused or not\r\n  bool public stopped;\r\n\r\n  //Emit event when any change happens in crowdsale state\r\n  event StateChanged(bool changed);\r\n\r\n  //modifier to continue with transaction only when Sale is not paused\r\n  modifier stopInEmergency {\r\n    require(!stopped);\r\n    _;\r\n  }\r\n\r\n  //modifier to continue with transaction only when Sale is paused\r\n  modifier onlyInEmergency {\r\n    require(stopped);\r\n    _;\r\n  }\r\n\r\n  // called by the owner on emergency, pause Sale\r\n  function emergencyStop() external onlyOwner  {\r\n    stopped = true;\r\n    //Emit event when crowdsale state changes\r\n    StateChanged(true);\r\n  }\r\n\r\n  // called by the owner on end of emergency, resumes Sale\r\n  function release() external onlyOwner onlyInEmergency {\r\n    stopped = false;\r\n    //Emit event when crowdsale state changes\r\n    StateChanged(true);\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * Contract \"EXH\"\r\n * Purpose: Create EXH token\r\n */\r\ncontract EXH is ERC20, Ownable {\r\n\r\n  using Math for uint;\r\n\r\n  /* Public variables of the token */\r\n  //To store name for token\r\n  string public name;\r\n\r\n  //To store symbol for token       \r\n  string public symbol;\r\n\r\n  //To store decimal places for token\r\n  uint8 public decimals;    \r\n\r\n  //To store decimal version for token\r\n  string public version = 'v1.0'; \r\n\r\n  //To store current supply of EXH Token\r\n  uint public totalSupply;\r\n\r\n  //flag to indicate whether transfer of EXH Token is allowed or not\r\n  bool public locked;\r\n\r\n  //map to store EXH Token balance corresponding to address\r\n  mapping(address => uint) balances;\r\n\r\n  //To store spender with allowed amount of EXH Token to spend corresponding to EXH Token holder's account\r\n  mapping (address => mapping (address => uint)) allowed;\r\n\r\n  //To handle ERC20 short address attack  \r\n  modifier onlyPayloadSize(uint size) {\r\n     require(msg.data.length >= size + 4);\r\n     _;\r\n  }\r\n  \r\n  // Lock transfer during Sale\r\n  modifier onlyUnlocked() {\r\n    require(!locked || msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  //Contructor to define EXH Token token properties\r\n  function EXH() public {\r\n\r\n    // lock the transfer function during Sale\r\n    locked = true;\r\n\r\n    //initial token supply is 0\r\n    totalSupply = 0;\r\n\r\n    //Name for token set to EXH Token\r\n    name = 'EXH Token';\r\n\r\n    // Symbol for token set to 'EXH'\r\n    symbol = 'EXH';\r\n \r\n    decimals = 18;\r\n  }\r\n \r\n  //Implementation for transferring EXH Token to provided address \r\n  function transfer(address _to, uint _value) onlyPayloadSize(2 * 32) public onlyUnlocked returns (bool){\r\n\r\n    //Check provided EXH Token should not be 0\r\n    if (_value > 0 && !(_to == address(0))) {\r\n      //deduct EXH Token amount from transaction initiator\r\n      balances[msg.sender] = balances[msg.sender].Sub(_value);\r\n      //Add EXH Token to balace of target account\r\n      balances[_to] = balances[_to].Add(_value);\r\n      //Emit event for transferring EXH Token\r\n      Transfer(msg.sender, _to, _value);\r\n      return true;\r\n    }\r\n    else{\r\n      return false;\r\n    }\r\n  }\r\n\r\n  //Transfer initiated by spender \r\n  function transferFrom(address _from, address _to, uint _value) onlyPayloadSize(3 * 32) public onlyUnlocked returns (bool) {\r\n\r\n    //Check provided EXH Token should not be 0\r\n    if (_value > 0 && (_to != address(0) && _from != address(0))) {\r\n      //Get amount of EXH Token for which spender is authorized\r\n      var _allowance = allowed[_from][msg.sender];\r\n      //Add amount of EXH Token in trarget account's balance\r\n      balances[_to] = balances[_to].Add( _value);\r\n      //Deduct EXH Token amount from _from account\r\n      balances[_from] = balances[_from].Sub( _value);\r\n      //Deduct Authorized amount for spender\r\n      allowed[_from][msg.sender] = _allowance.Sub( _value);\r\n      //Emit event for Transfer\r\n      Transfer(_from, _to, _value);\r\n      return true;\r\n    }else{\r\n      return false;\r\n    }\r\n  }\r\n\r\n  //Get EXH Token balance for provided address\r\n  function balanceOf(address _owner) public constant returns (uint balance) {\r\n    return balances[_owner];\r\n  }\r\n  \r\n  //Add spender to authorize for spending specified amount of EXH Token \r\n  function approve(address _spender, uint _value) public returns (bool) {\r\n    require(_spender != address(0));\r\n    allowed[msg.sender][_spender] = _value;\r\n    //Emit event for approval provided to spender\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  //Get EXH Token amount that spender can spend from provided owner's account \r\n  function allowance(address _owner, address _spender) public constant returns (uint remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n  \r\n}\r\n\r\n/**\r\n * Contract \"Crowdsale\"\r\n * Purpose: Contract for crowdsale of EXH Token\r\n */\r\ncontract Crowdsale is EXH, Pausable {\r\n\r\n  using Math for uint;\r\n  \r\n  /* Public variables for Sale */\r\n\r\n  // Sale start block\r\n  uint public startBlock;   \r\n\r\n  // Sale end block  \r\n  uint public endBlock;  \r\n\r\n  // To store maximum number of EXH Token to sell\r\n  uint public maxCap;   \r\n\r\n  // To store maximum number of EXH Token to sell in PreSale\r\n  uint public maxCapPreSale;   \r\n\r\n  // To store total number of ETH received\r\n  uint public ETHReceived;    \r\n\r\n  // Number of tokens that can be purchased with 1 Ether\r\n  uint public PRICE;   \r\n\r\n  // To indicate Sale status; crowdsaleStatus=0 => crowdsale not started; crowdsaleStatus=1=> crowdsale started; crowdsaleStatus=2=> crowdsale finished\r\n  uint public crowdsaleStatus; \r\n\r\n  // To store crowdSale type; crowdSaleType=0 => PreSale; crowdSaleType=1 => CrowdSale\r\n  uint public crowdSaleType; \r\n\r\n  //Total Supply in PreSale\r\n  uint public totalSupplyPreSale; \r\n\r\n  //No of days for which presale will be open\r\n  uint public durationPreSale;\r\n\r\n  //Value of 1 ether, ie, 1 followed by 18 zero\r\n  uint valueOneEther = 1e18;\r\n\r\n  //No of days for which the complete crowdsale will run- presale  + crowdsale\r\n  uint public durationCrowdSale;\r\n\r\n  //Store total number of investors\r\n  uint public countTotalInvestors;\r\n\r\n  //Number of investors who have received refund\r\n  uint public countInvestorsRefunded;\r\n  \r\n  //Set status of refund\r\n  uint public refundStatus;\r\n\r\n //maxCAp for mint and transfer\r\n  uint public maxCapMintTransfer ;\r\n\r\n  //total supply for mint and transfer\r\n  uint public totalSupplyMintTransfer;\r\n\r\n  //total tokens sold in crowdsale\r\n  uint public totalSupplyCrowdsale;\r\n\r\n  //Stores total investros in crowdsale\r\n  uint256 public countTotalInvestorsInCrowdsale;\r\n\r\n  uint256 public countInvestorsRefundedInCrowdsale;\r\n\r\n  //Structure for investors; holds received wei amount and EXH Token sent\r\n  struct Investor {\r\n    //wei received during PreSale\r\n    uint weiReceivedCrowdsaleType0;\r\n    //wei received during CrowdSale\r\n    uint weiReceivedCrowdsaleType1;\r\n    //Tokens sent during PreSale\r\n    uint exhSentCrowdsaleType0;\r\n    //Tokens sent during CrowdSale\r\n    uint exhSentCrowdsaleType1;\r\n    //Uniquely identify an investor(used for iterating)\r\n    uint investorID;\r\n  }\r\n\r\n  //investors indexed by their ETH address\r\n  mapping(address => Investor) public investors;\r\n  //investors indexed by their IDs\r\n  mapping (uint => address) public investorList;\r\n\r\n  \r\n  //Emit event on receiving ETH\r\n  event ReceivedETH(address addr, uint value);\r\n\r\n  //Emit event on transferring EXH Token to user when payment is received in traditional ways or B type EXH Token converted to A type EXH Token\r\n  event MintAndTransferEXH(address addr, uint value, bytes32 comment);\r\n\r\n  //constructor to initialize contract variables\r\n  function Crowdsale() public {\r\n\r\n    //Will be set in function start; Makes sure Sale will be started only when start() function is called\r\n    startBlock = 0;   \r\n    //Will be set in function start; Makes sure Sale will be started only when start() function is called        \r\n    endBlock = 0;    \r\n    //Max number of EXH Token to sell in CrowdSale[Includes the tokens sold in presale](33M)\r\n    maxCap = 31750000e18;\r\n    //Max number of EXH Token to sell in Presale(0.5M)\r\n    maxCapPreSale = 500000e18;\r\n    //1250000 Tokens avalable for Mint and Transfer\r\n    maxCapMintTransfer = 1250000e18;\r\n    // EXH Token per ether\r\n    PRICE = 10; \r\n    //Indicates Sale status; Sale is not started yet\r\n    crowdsaleStatus = 0;    \r\n    //At time of deployment crowdSale type is set to Presale\r\n    crowdSaleType = 0;\r\n    // Number of days after which sale will start since the starting of presale, a single value to replace the hardcoded\r\n    durationPreSale = 8 days + 1 hours;\r\n    // Number of days for which complete crowdsale will run, ie, presale and crowdsale period\r\n    durationCrowdSale = 28 days;\r\n    // Investor count is 0 initially\r\n    countTotalInvestors = 0;\r\n    //Initially no investor has been refunded\r\n    countInvestorsRefunded = 0;\r\n    //Refund eligible or not\r\n    refundStatus = 0;\r\n\r\n    countTotalInvestorsInCrowdsale = 0;\r\n    countInvestorsRefundedInCrowdsale = 0;\r\n    \r\n  }\r\n\r\n  //Modifier to make sure transaction is happening during Sale\r\n  modifier respectTimeFrame() {\r\n    assert(!((now < startBlock) || (now > endBlock )));\r\n    _;\r\n  }\r\n\r\n  /*\r\n  * To start Sale from Presale\r\n  */\r\n  function start() public onlyOwner {\r\n    //Set block number to current block number\r\n    assert(startBlock == 0);\r\n    startBlock = now;            \r\n    //Set end block number\r\n    endBlock = now.Add(durationCrowdSale.Add(durationPreSale));\r\n    //Sale presale is started\r\n    crowdsaleStatus = 1;\r\n    //Emit event when crowdsale state changes\r\n    StateChanged(true);  \r\n  }\r\n\r\n  /*\r\n  * To start Crowdsale\r\n  */\r\n  function startSale() public onlyOwner\r\n  {\r\n    if(now > startBlock.Add(durationPreSale) && now <= endBlock){\r\n        crowdsaleStatus = 1;\r\n        crowdSaleType = 1;\r\n        if(crowdSaleType != 1)\r\n        {\r\n          totalSupplyCrowdsale = totalSupplyPreSale;\r\n        }\r\n        //Emit event when crowdsale state changes\r\n        StateChanged(true); \r\n    }\r\n    else\r\n      revert();\r\n  }\r\n\r\n  /*\r\n  * To extend duration of Crowdsale\r\n  */\r\n  function updateDuration(uint time) public onlyOwner\r\n  {\r\n      require(time != 0);\r\n      assert(startBlock != 0);\r\n      assert(crowdSaleType == 1 && crowdsaleStatus != 2);\r\n      durationCrowdSale = durationCrowdSale.Add(time);\r\n      endBlock = endBlock.Add(time);\r\n      //Emit event when crowdsale state changes\r\n      StateChanged(true);\r\n  }\r\n\r\n  /*\r\n  * To set price for EXH Token\r\n  */\r\n  function setPrice(uint price) public onlyOwner\r\n  {\r\n      require( price != 0);\r\n      PRICE = price;\r\n      //Emit event when crowdsale state changes\r\n      StateChanged(true);\r\n  }\r\n  \r\n  /*\r\n  * To enable transfers of EXH Token after completion of Sale\r\n  */\r\n  function unlock() public onlyOwner\r\n  {\r\n    locked = false;\r\n    //Emit event when crowdsale state changes\r\n    StateChanged(true);\r\n  }\r\n  \r\n  //fallback function i.e. payable; initiates when any address transfers Eth to Contract address\r\n  function () public payable {\r\n  //call createToken function with account who transferred Eth to contract address\r\n    createTokens(msg.sender);\r\n  }\r\n\r\n  /*\r\n  * To create EXH Token and assign to transaction initiator\r\n  */\r\n  function createTokens(address beneficiary) internal stopInEmergency  respectTimeFrame {\r\n    //Make sure Sale is running\r\n    assert(crowdsaleStatus == 1); \r\n    //Don't accept fund to purchase less than 1 EXH Token   \r\n    require(msg.value >= 1 ether/getPrice());   \r\n    //Make sure sent Eth is not 0           \r\n    require(msg.value != 0);\r\n    //Calculate EXH Token to send\r\n    uint exhToSend = msg.value.Mul(getPrice());\r\n\r\n    //Make entry in Investor indexed with address\r\n    Investor storage investorStruct = investors[beneficiary];\r\n\r\n    // For Presale\r\n    if(crowdSaleType == 0){\r\n      require(exhToSend.Add(totalSupplyPreSale) <= maxCapPreSale);\r\n      totalSupplyPreSale = totalSupplyPreSale.Add(exhToSend);\r\n      if((maxCapPreSale.Sub(totalSupplyPreSale) < valueOneEther)||(now > (startBlock.Add(7 days + 1 hours)))){\r\n        crowdsaleStatus = 2;\r\n      }        \r\n      investorStruct.weiReceivedCrowdsaleType0 = investorStruct.weiReceivedCrowdsaleType0.Add(msg.value);\r\n      investorStruct.exhSentCrowdsaleType0 = investorStruct.exhSentCrowdsaleType0.Add(exhToSend);\r\n    }\r\n\r\n    // For CrowdSale\r\n    else if (crowdSaleType == 1){\r\n      if (exhToSend.Add(totalSupply) > maxCap ) {\r\n        revert();\r\n      }\r\n      totalSupplyCrowdsale = totalSupplyCrowdsale.Add(exhToSend);\r\n      if(maxCap.Sub(totalSupplyCrowdsale) < valueOneEther)\r\n      {\r\n        crowdsaleStatus = 2;\r\n      }\r\n      if(investorStruct.investorID == 0 || investorStruct.weiReceivedCrowdsaleType1 == 0){\r\n        countTotalInvestorsInCrowdsale++;\r\n      }\r\n      investorStruct.weiReceivedCrowdsaleType1 = investorStruct.weiReceivedCrowdsaleType1.Add(msg.value);\r\n      investorStruct.exhSentCrowdsaleType1 = investorStruct.exhSentCrowdsaleType1.Add(exhToSend);\r\n    }\r\n\r\n    //If it is a new investor, then create a new id\r\n    if(investorStruct.investorID == 0){\r\n        countTotalInvestors++;\r\n        investorStruct.investorID = countTotalInvestors;\r\n        investorList[countTotalInvestors] = beneficiary;\r\n    }\r\n\r\n    //update total supply of EXH Token\r\n    totalSupply = totalSupply.Add(exhToSend);\r\n    // Update the total wei collected during Sale\r\n    ETHReceived = ETHReceived.Add(msg.value);  \r\n    //Update EXH Token balance for transaction initiator\r\n    balances[beneficiary] = balances[beneficiary].Add(exhToSend);\r\n    //Emit event for contribution\r\n    ReceivedETH(beneficiary,ETHReceived); \r\n    //ETHReceived during Sale will remain with contract\r\n    GetEXHFundAccount().transfer(msg.value);\r\n    //Emit event when crowdsale state changes\r\n    StateChanged(true);\r\n  }\r\n\r\n  /*\r\n  * To enable vesting of B type EXH Token\r\n  */\r\n  function MintAndTransferToken(address beneficiary,uint exhToCredit,bytes32 comment) external onlyOwner {\r\n    //Available after the crowdsale is started\r\n    assert(startBlock != 0);\r\n    //Check whether tokens are available or not\r\n    assert(totalSupplyMintTransfer <= maxCapMintTransfer);\r\n    //Check whether the amount of token are available to transfer\r\n    require(totalSupplyMintTransfer.Add(exhToCredit) <= maxCapMintTransfer);\r\n    //Update EXH Token balance for beneficiary\r\n    balances[beneficiary] = balances[beneficiary].Add(exhToCredit);\r\n    //Update total supply for EXH Token\r\n    totalSupply = totalSupply.Add(exhToCredit);\r\n    //update total supply for EXH token in mint and transfer\r\n    totalSupplyMintTransfer = totalSupplyMintTransfer.Add(exhToCredit);\r\n    // send event for transferring EXH Token on offline payment\r\n    MintAndTransferEXH(beneficiary, exhToCredit,comment);\r\n    //Emit event when crowdsale state changes\r\n    StateChanged(true);  \r\n  }\r\n\r\n  /*\r\n  * To get price for EXH Token\r\n  */\r\n  function getPrice() public constant returns (uint result) {\r\n      if (crowdSaleType == 0) {\r\n            return (PRICE.Mul(100)).Div(70);\r\n      }\r\n      if (crowdSaleType == 1) {\r\n          uint crowdsalePriceBracket = 1 weeks;\r\n          uint startCrowdsale = startBlock.Add(durationPreSale);\r\n            if (now > startCrowdsale && now <= startCrowdsale.Add(crowdsalePriceBracket)) {\r\n                return ((PRICE.Mul(100)).Div(80));\r\n            }else if (now > startCrowdsale.Add(crowdsalePriceBracket) && now <= (startCrowdsale.Add(crowdsalePriceBracket.Mul(2)))) {\r\n                return (PRICE.Mul(100)).Div(85);\r\n            }else if (now > (startCrowdsale.Add(crowdsalePriceBracket.Mul(2))) && now <= (startCrowdsale.Add(crowdsalePriceBracket.Mul(3)))) {\r\n                return (PRICE.Mul(100)).Div(90);\r\n            }else if (now > (startCrowdsale.Add(crowdsalePriceBracket.Mul(3))) && now <= (startCrowdsale.Add(crowdsalePriceBracket.Mul(4)))) {\r\n                return (PRICE.Mul(100)).Div(95);\r\n            }\r\n      }\r\n      return PRICE;\r\n  }\r\n\r\n  function GetEXHFundAccount() internal returns (address) {\r\n    uint remainder = block.number%10;\r\n    if(remainder==0){\r\n      return 0xda141e704601f8C8E343C5cA246355c812238D91;\r\n    } else if(remainder==1){\r\n      return 0x2381963906C434dD4639489Bec9A2bB55D83cC14;\r\n    } else if(remainder==2){\r\n      return 0x537C7119452A7814ABD1C4ED71F6eCD25225C0F6;\r\n    } else if(remainder==3){\r\n      return 0x1F04880fFdFff05d36307f69EAAc8645B98449E2;\r\n    } else if(remainder==4){\r\n      return 0xd72B82b69FEe29d81f5e2DA66aB91014aDaE0AA0;\r\n    } else if(remainder==5){\r\n      return 0xf63bef6B67064053191dc4bC6F1D06592C07925f;\r\n    } else if(remainder==6){\r\n      return 0x7381F9C5d35E895e80aDeC1e1A3541860F876600;\r\n    } else if(remainder==7){\r\n      return 0x370301AE4659D2975be9F976011c787EC59e0645;\r\n    } else if(remainder==8){\r\n      return 0x2C041b6A7fF277966cB0b4cb966aaB8Fc1178ac5;\r\n    }else {\r\n      return 0x8A401290A39Dc8D046e42BABaf5a818e29ae4fda;\r\n    }\r\n  }\r\n\r\n  /*\r\n  * Finalize the crowdsale\r\n  */\r\n  function finalize() public onlyOwner {\r\n    //Make sure Sale is running\r\n    assert(crowdsaleStatus==1 && crowdSaleType==1);\r\n    // cannot finalise before end or until maxcap is reached\r\n      assert(!((totalSupplyCrowdsale < maxCap && now < endBlock) && (maxCap.Sub(totalSupplyCrowdsale) >= valueOneEther)));  \r\n      //Indicates Sale is ended\r\n      \r\n      //Checks if the fundraising goal is reached in crowdsale or not\r\n      if (totalSupply < 5300000e18)\r\n        refundStatus = 2;\r\n      else\r\n        refundStatus = 1;\r\n      \r\n    //crowdsale is ended\r\n    crowdsaleStatus = 2;\r\n    //Emit event when crowdsale state changes\r\n    StateChanged(true);\r\n  }\r\n\r\n  /*\r\n  * Refund the investors in case target of crowdsale not achieved\r\n  */\r\n  function refund() public onlyOwner {\r\n      assert(refundStatus == 2);\r\n      uint batchSize = countInvestorsRefunded.Add(50) < countTotalInvestors ? countInvestorsRefunded.Add(50): countTotalInvestors;\r\n      for(uint i=countInvestorsRefunded.Add(1); i <= batchSize; i++){\r\n          address investorAddress = investorList[i];\r\n          Investor storage investorStruct = investors[investorAddress];\r\n          //If purchase has been made during CrowdSale\r\n          if(investorStruct.exhSentCrowdsaleType1 > 0 && investorStruct.exhSentCrowdsaleType1 <= balances[investorAddress]){\r\n              //return everything\r\n              investorAddress.transfer(investorStruct.weiReceivedCrowdsaleType1);\r\n              //Reduce ETHReceived\r\n              ETHReceived = ETHReceived.Sub(investorStruct.weiReceivedCrowdsaleType1);\r\n              //Update totalSupply\r\n              totalSupply = totalSupply.Sub(investorStruct.exhSentCrowdsaleType1);\r\n              // reduce balances\r\n              balances[investorAddress] = balances[investorAddress].Sub(investorStruct.exhSentCrowdsaleType1);\r\n              //set everything to zero after transfer successful\r\n              investorStruct.weiReceivedCrowdsaleType1 = 0;\r\n              investorStruct.exhSentCrowdsaleType1 = 0;\r\n              countInvestorsRefundedInCrowdsale = countInvestorsRefundedInCrowdsale.Add(1);\r\n          }\r\n      }\r\n      //Update the number of investors that have recieved refund\r\n      countInvestorsRefunded = batchSize;\r\n      StateChanged(true);\r\n  }\r\n\r\n  /*\r\n   * Failsafe drain\r\n   */\r\n  function drain() public onlyOwner {\r\n    GetEXHFundAccount().transfer(this.balance);\r\n  }\r\n\r\n  /*\r\n  * Function to add Ether in the contract \r\n  */\r\n  function fundContractForRefund() payable{\r\n    // StateChanged(true);\r\n  }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"investorList\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"countInvestorsRefundedInCrowdsale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"updateDuration\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupplyCrowdsale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"countInvestorsRefunded\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"countTotalInvestors\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxCapPreSale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ETHReceived\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refund\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"fundContractForRefund\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"emergencyStop\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"investors\",\"outputs\":[{\"name\":\"weiReceivedCrowdsaleType0\",\"type\":\"uint256\"},{\"name\":\"weiReceivedCrowdsaleType1\",\"type\":\"uint256\"},{\"name\":\"exhSentCrowdsaleType0\",\"type\":\"uint256\"},{\"name\":\"exhSentCrowdsaleType1\",\"type\":\"uint256\"},{\"name\":\"investorID\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stopped\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"release\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRICE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"drain\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPrice\",\"outputs\":[{\"name\":\"result\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupplyPreSale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"refundStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unlock\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startSale\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"start\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdSaleType\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxCapMintTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"locked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupplyMintTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"durationPreSale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"},{\"name\":\"exhToCredit\",\"type\":\"uint256\"},{\"name\":\"comment\",\"type\":\"bytes32\"}],\"name\":\"MintAndTransferToken\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"durationCrowdSale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"countTotalInvestorsInCrowdsale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"ReceivedETH\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"comment\",\"type\":\"bytes32\"}],\"name\":\"MintAndTransferEXH\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"changed\",\"type\":\"bool\"}],\"name\":\"StateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"Crowdsale","CompilerVersion":"v0.4.13+commit.fb4cb1a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://d41156105a4e6c9365331e84469578be70e6175bf43561787bb9fe4799c6781b"}]}