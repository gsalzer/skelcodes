{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\ncontract Controller {\r\n\r\n\r\n  // list of admins, council at first spot\r\n  address[] public admins;\r\n\r\n  function Governable() {\r\n    admins.length = 1;\r\n    admins[0] = msg.sender;\r\n  }\r\n\r\n  modifier onlyAdmins() {\r\n    bool isAdmin = false;\r\n    for (uint256 i = 0; i < admins.length; i++) {\r\n      if (msg.sender == admins[i]) {\r\n        isAdmin = true;\r\n      }\r\n    }\r\n    require(isAdmin == true);\r\n    _;\r\n  }\r\n\r\n  function addAdmin(address _admin) public onlyAdmins {\r\n    for (uint256 i = 0; i < admins.length; i++) {\r\n      require(_admin != admins[i]);\r\n    }\r\n    require(admins.length < 10);\r\n    admins[admins.length++] = _admin;\r\n  }\r\n\r\n  function removeAdmin(address _admin) public onlyAdmins {\r\n    uint256 pos = admins.length;\r\n    for (uint256 i = 0; i < admins.length; i++) {\r\n      if (_admin == admins[i]) {\r\n        pos = i;\r\n      }\r\n    }\r\n    require(pos < admins.length);\r\n    // if not last element, switch with last\r\n    if (pos < admins.length - 1) {\r\n      admins[pos] = admins[admins.length - 1];\r\n    }\r\n    // then cut off the tail\r\n    admins.length--;\r\n  }\r\n\r\n  // State Variables\r\n  bool public paused;\r\n  function nutzAddr() constant returns (address);\r\n  function powerAddr() constant returns (address);\r\n  \r\n  function moveCeiling(uint256 _newPurchasePrice);\r\n  function moveFloor(uint256 _newPurchasePrice);\r\n\r\n  // Nutz functions\r\n  function babzBalanceOf(address _owner) constant returns (uint256);\r\n  function activeSupply() constant returns (uint256);\r\n  function burnPool() constant returns (uint256);\r\n  function powerPool() constant returns (uint256);\r\n  function totalSupply() constant returns (uint256);\r\n  function allowance(address _owner, address _spender) constant returns (uint256);\r\n\r\n  function approve(address _owner, address _spender, uint256 _amountBabz) public;\r\n  function transfer(address _from, address _to, uint256 _amountBabz, bytes _data) public;\r\n  function transferFrom(address _sender, address _from, address _to, uint256 _amountBabz, bytes _data) public;\r\n\r\n  // Market functions\r\n  function floor() constant returns (uint256);\r\n  function ceiling() constant returns (uint256);\r\n\r\n  function purchase(address _sender, uint256 _value, uint256 _price) public returns (uint256);\r\n  function sell(address _from, uint256 _price, uint256 _amountBabz);\r\n\r\n  // Power functions\r\n  function powerBalanceOf(address _owner) constant returns (uint256);\r\n  function outstandingPower() constant returns (uint256);\r\n  function authorizedPower() constant returns (uint256);\r\n  function powerTotalSupply() constant returns (uint256);\r\n\r\n  function powerUp(address _sender, address _from, uint256 _amountBabz) public;\r\n  function downTick(address _owner, uint256 _now) public;\r\n  function createDownRequest(address _owner, uint256 _amountPower) public;\r\n  function downs(address _owner) constant public returns(uint256, uint256, uint256);\r\n  function downtime() constant returns (uint256);\r\n\r\n  // this is called when NTZ are deposited into the burn pool\r\n  function dilutePower(uint256 _amountBabz, uint256 _amountPower);\r\n    function setMaxPower(uint256 _maxPower);\r\n    \r\n\r\n  // withdraw excessive reserve - i.e. milestones\r\n  function allocateEther(uint256 _amountWei, address _beneficiary);\r\n\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n/*\r\n * ERC20Basic\r\n * Simpler version of ERC20 interface\r\n * see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() constant returns (uint256);\r\n  function balanceOf(address _owner) constant returns (uint256);\r\n  function transfer(address _to, uint256 _value) returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint value);\r\n}\r\n\r\n\r\ncontract ERC223Basic is ERC20Basic {\r\n    function transfer(address to, uint value, bytes data) returns (bool);\r\n}\r\n\r\n/*\r\n * ERC20 interface\r\n * see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC223Basic {\r\n  // active supply of tokens\r\n  function activeSupply() constant returns (uint256);\r\n  function allowance(address _owner, address _spender) constant returns (uint256);\r\n  function transferFrom(address _from, address _to, uint _value) returns (bool);\r\n  function approve(address _spender, uint256 _value);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n\r\ncontract PowerEvent {\r\n  using SafeMath for uint;\r\n\r\n  // states\r\n  //   - waiting, initial state\r\n  //   - collecting, after waiting, before collection stopped\r\n  //   - failed, after collecting, if softcap missed\r\n  //   - closed, after collecting, if softcap reached\r\n  //   - complete, after closed or failed, when job done\r\n  enum EventState { Waiting, Collecting, Closed, Failed, Complete }\r\n  EventState public state;\r\n  uint256 public RATE_FACTOR = 1000000;\r\n\r\n  // Terms\r\n  uint256 public startTime;\r\n  uint256 public minDuration;\r\n  uint256 public maxDuration;\r\n  uint256 public softCap;\r\n  uint256 public hardCap;\r\n  uint256 public discountRate; // if rate 30%, this will be 300,000\r\n  uint256 public amountPower;\r\n  address[] public milestoneRecipients;\r\n  uint256[] public milestoneShares;\r\n\r\n  // Params\r\n  address public controllerAddr;\r\n  address public powerAddr;\r\n  address public nutzAddr;\r\n  uint256 public initialReserve;\r\n  uint256 public initialSupply;\r\n\r\n  function PowerEvent(address _controllerAddr, uint256 _startTime, uint256 _minDuration, uint256 _maxDuration, uint256 _softCap, uint256 _hardCap, uint256 _discount, uint256 _amountPower, address[] _milestoneRecipients, uint256[] _milestoneShares)\r\n  areValidMileStones(_milestoneRecipients, _milestoneShares) {\r\n    require(_minDuration <= _maxDuration);\r\n    require(_softCap <= _hardCap);\r\n    controllerAddr = _controllerAddr;\r\n    startTime = _startTime;\r\n    minDuration = _minDuration;\r\n    maxDuration = _maxDuration;\r\n    softCap = _softCap;\r\n    hardCap = _hardCap;\r\n    discountRate = _discount;\r\n    amountPower = _amountPower;\r\n    state = EventState.Waiting;\r\n    milestoneRecipients = _milestoneRecipients;\r\n    milestoneShares = _milestoneShares;\r\n  }\r\n\r\n  modifier isState(EventState _state) {\r\n    require(state == _state);\r\n    _;\r\n  }\r\n\r\n  modifier areValidMileStones(address[] _milestoneRecipients, uint256[] _milestoneShares) {\r\n    require(checkMilestones(_milestoneRecipients, _milestoneShares));\r\n    _;\r\n  }\r\n\r\n  function checkMilestones(address[] _milestoneRecipients, uint256[] _milestoneShares) internal returns (bool) {\r\n    require(_milestoneRecipients.length == _milestoneShares.length && _milestoneShares.length <= 4);\r\n    uint256 totalPercentage;\r\n    for(uint8 i = 0; i < _milestoneShares.length; i++) {\r\n      require(_milestoneShares[i] >= 0 && _milestoneShares[i] <= 1000000);\r\n      totalPercentage = totalPercentage.add(_milestoneShares[i]);\r\n    }\r\n    require(totalPercentage >= 0 && totalPercentage <= 1000000);\r\n    return true;\r\n  }\r\n\r\n  function tick() public {\r\n    if (state == EventState.Waiting) {\r\n      startCollection();\r\n    } else if (state == EventState.Collecting) {\r\n      stopCollection();\r\n    } else if (state == EventState.Failed) {\r\n      completeFailed();\r\n    } else if (state == EventState.Closed) {\r\n      completeClosed();\r\n    } else {\r\n      throw;\r\n    }\r\n  }\r\n\r\n  function startCollection() isState(EventState.Waiting) {\r\n    // check time\r\n    require(now > startTime);\r\n    // assert(now < startTime.add(minDuration));\r\n    // read initial values\r\n    var contr = Controller(controllerAddr);\r\n    powerAddr = contr.powerAddr();\r\n    nutzAddr = contr.nutzAddr();\r\n    initialSupply = contr.activeSupply().add(contr.powerPool()).add(contr.burnPool());\r\n    initialReserve = nutzAddr.balance;\r\n    uint256 ceiling = contr.ceiling();\r\n    // move ceiling\r\n    uint256 newCeiling = ceiling.mul(discountRate).div(RATE_FACTOR);\r\n    contr.moveCeiling(newCeiling);\r\n    // set state\r\n    state = EventState.Collecting;\r\n  }\r\n\r\n  function stopCollection() isState(EventState.Collecting) {\r\n    uint256 collected = nutzAddr.balance.sub(initialReserve);\r\n    if (now > startTime.add(maxDuration)) {\r\n      if (collected >= softCap) {\r\n        // softCap reached, close\r\n        state = EventState.Closed;\r\n        return;\r\n      } else {\r\n        // softCap missed, fail\r\n        state = EventState.Failed;\r\n        return;\r\n      }\r\n    } else if (now > startTime.add(minDuration)) {\r\n      if (collected >= hardCap) {\r\n        // hardCap reached, close\r\n        state = EventState.Closed;\r\n        return;\r\n      } else {\r\n        // keep going\r\n        revert();\r\n      }\r\n    }\r\n    // keep going\r\n    revert();\r\n  }\r\n\r\n  function completeFailed() isState(EventState.Failed) {\r\n    var contr = Controller(controllerAddr);\r\n    // move floor (set ceiling or max floor)\r\n    uint256 ceiling = contr.ceiling();\r\n    contr.moveFloor(ceiling);\r\n    // remove access\r\n    contr.removeAdmin(address(this));\r\n    // set state\r\n    state = EventState.Complete;\r\n  }\r\n\r\n  function completeClosed() isState(EventState.Closed) {\r\n    var contr = Controller(controllerAddr);\r\n    // move ceiling\r\n    uint256 ceiling = contr.ceiling();\r\n    uint256 newCeiling = ceiling.mul(RATE_FACTOR).div(discountRate);\r\n    contr.moveCeiling(newCeiling);\r\n    // dilute power\r\n    uint256 totalSupply = contr.activeSupply().add(contr.powerPool()).add(contr.burnPool());\r\n    uint256 newSupply = totalSupply.sub(initialSupply);\r\n    contr.dilutePower(newSupply, amountPower);\r\n    // set max power\r\n    var PowerContract = ERC20(powerAddr);\r\n    uint256 authorizedPower = PowerContract.totalSupply();\r\n    contr.setMaxPower(authorizedPower);\r\n    // pay out milestone\r\n    uint256 collected = nutzAddr.balance.sub(initialReserve);\r\n    for (uint256 i = 0; i < milestoneRecipients.length; i++) {\r\n      uint256 payoutAmount = collected.mul(milestoneShares[i]).div(RATE_FACTOR);\r\n      contr.allocateEther(payoutAmount, milestoneRecipients[i]);\r\n    }\r\n    // remove access\r\n    contr.removeAdmin(address(this));\r\n    // set state\r\n    state = EventState.Complete;\r\n  }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"startCollection\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"milestoneShares\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nutzAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"tick\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"powerAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"milestoneRecipients\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minDuration\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"completeClosed\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxDuration\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RATE_FACTOR\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"amountPower\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stopCollection\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"softCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"discountRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialReserve\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"completeFailed\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"controllerAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hardCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_controllerAddr\",\"type\":\"address\"},{\"name\":\"_startTime\",\"type\":\"uint256\"},{\"name\":\"_minDuration\",\"type\":\"uint256\"},{\"name\":\"_maxDuration\",\"type\":\"uint256\"},{\"name\":\"_softCap\",\"type\":\"uint256\"},{\"name\":\"_hardCap\",\"type\":\"uint256\"},{\"name\":\"_discount\",\"type\":\"uint256\"},{\"name\":\"_amountPower\",\"type\":\"uint256\"},{\"name\":\"_milestoneRecipients\",\"type\":\"address[]\"},{\"name\":\"_milestoneShares\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"PowerEvent","CompilerVersion":"v0.4.16+commit.d7661dd9","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000faac705fb942836070fd11c6fb1bd784e9ce48a50000000000000000000000000000000000000000000000000000000059c3b320000000000000000000000000000000000000000000000000000000000003f48000000000000000000000000000000000000000000000000000000000002791af00000000000000000000000000000000000000000000010f0cf064dd5920000000000000000000000000000000000000000000000000065a4da25d3016c00000000000000000000000000000000000000000000000000000000000000016e3600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000001e00000000000000000000000000000000000000000000000000000000000000004000000000000000000000000c5cdcd5470aef35fc33bddff3f8ecec027f95b1d00000000000000000000000067be75fedee88a84cbdcf5c87616bb1bb746c57e000000000000000000000000c1fa672d02543c9f7608542b4c2ee30b3957fc75000000000000000000000000f02c49cb05daef756e91d5d8190dc03881f0f8ed00000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000030d400000000000000000000000000000000000000000000000000000000000003a980000000000000000000000000000000000000000000000000000000000003a980000000000000000000000000000000000000000000000000000000000003a98","Library":"","SwarmSource":"bzzr://e9b755a0153cbe4be40436926dc2ed6fba70dabfc52a30f37e81843f065d34cb"}]}