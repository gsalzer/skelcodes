{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.16;\r\n\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) constant returns (uint256);\r\n  function transfer(address to, uint256 value) returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) returns (bool);\r\n  function approve(address spender, uint256 value) returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) returns (bool) {\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amout of tokens to be transfered\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\r\n    var _allowance = allowed[_from][msg.sender];\r\n\r\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n    // require (_value <= _allowance);\r\n\r\n    balances[_to] = balances[_to].add(_value);\r\n    balances[_from] = balances[_from].sub(_value);\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) returns (bool) {\r\n\r\n    // To change the approve amount you first have to reduce the addresses`\r\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n    //  already 0 to mitigate the race condition described here:\r\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifing the amount of tokens still avaible for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner {\r\n    if (newOwner != address(0)) {\r\n      owner = newOwner;\r\n    }\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev modifier to allow actions only when the contract IS paused\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev modifier to allow actions only when the contract IS NOT paused\r\n   */\r\n  modifier whenPaused {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused returns (bool) {\r\n    paused = true;\r\n    Pause();\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused returns (bool) {\r\n    paused = false;\r\n    Unpause();\r\n    return true;\r\n  }\r\n}\r\n\r\n\r\ncontract Hgt is StandardToken, Pausable {\r\n\r\n    string public name = \"HelloGold Token\";\r\n    string public symbol = \"HGT\";\r\n    uint256 public decimals = 18;\r\n\r\n}\r\n\r\ncontract Hgs {\r\n    struct CsAction {\r\n      bool        passedKYC;\r\n      bool        blocked;\r\n    }\r\n\r\n\r\n    /* This creates an array with all balances */\r\n    mapping (address => CsAction) public permissions;\r\n    mapping (address => uint256)  public deposits;\r\n}\r\n\r\ncontract HelloGoldRound1Point5 is Ownable {\r\n\r\n    using SafeMath for uint256;\r\n    bool    public  started;\r\n    uint256 public  startTime = 1505995200; // September 21, 2017 8:00:00 PM GMT+08:00\r\n    uint256 public  endTime = 1507204800;  // October 5, 2017 8:00:00 PM GMT+08:00\r\n    uint256 public  weiRaised;\r\n    uint256 public  lastSaleInHGT = 170000000 * 10 ** 8 ;\r\n    uint256 public  hgtSold;\r\n    uint256 public  r15Backers;\r\n\r\n    uint256 public  rate = 12489 * 10 ** 8;\r\n    Hgs     public  hgs = Hgs(0x574FB6d9d090042A04D0D12a4E87217f8303A5ca);\r\n    Hgt     public  hgt = Hgt(0xba2184520A1cC49a6159c57e61E1844E085615B6);\r\n    address public  multisig = 0xC03281aF336e2C25B41FF893A0e6cE1a932B23AF; // who gets the ether\r\n    address public  reserves = 0xC03281aF336e2C25B41FF893A0e6cE1a932B23AF; // who has the HGT pool\r\n\r\n//////   //    /////     BIG BLOODY REMINDER   The code below is for testing purposes\r\n//   //  //   //   //    BIG BLOODY REMINDER   If you are not the developer of this code\r\n/////    //   //         BIG BLOODY REMINDER   And you can see this, SHOUT coz it should \r\n//  ///  //   //  ///    BIG BLOODY REMINDER   Not be here in production and all hell will\r\n//  ///  //   //   //    BIG BLOODY REMINDER   Break loose, the gates of hell will open and\r\n//////   //    //////    BIG BLOODY REMINDER   Winged monstors and daemons will roam free  \r\n\r\n    // bool testing = true;\r\n\r\n    // function testingOnly() {\r\n    //     if (!testing)\r\n    //         return;\r\n    //     hgs = Hgs(0x5aB936795ECEeF9D34198d3AAEe1bA32b8f34B6b);\r\n    //     hgt = Hgt(0x38738A39d1EbdA813237C34122677a5925454ec8);\r\n    //     multisig = 0x3D1F6Cd19d58767E3680c4D60D0b3355331F7b46;\r\n    //     reserves = 0x1bdc4085d0222F459B92fa23FfA570f493e6E763;\r\n    // }\r\n\r\n\r\n//////   //    /////     BIG BLOODY REMINDER   The code above is for testing purposes\r\n//   //  //   //   //    BIG BLOODY REMINDER   If you are not the developer of this code\r\n/////    //   //         BIG BLOODY REMINDER   And you can see this, SHOUT coz it should \r\n//  ///  //   //  ///    BIG BLOODY REMINDER   Not be here in production and all hell will\r\n//  ///  //   //   //    BIG BLOODY REMINDER   Break loose, the gates of hell will open and\r\n//////   //    //////    BIG BLOODY REMINDER   Winged monstors and daemons will roam free  \r\n\r\n\r\n\r\n\r\n    mapping (address => uint256) public deposits;\r\n    mapping (address => bool) public upgraded;\r\n    mapping (address => uint256) public upgradeHGT;\r\n\r\n    modifier validPurchase() {\r\n        bool passedKYC;\r\n        bool blocked;\r\n        require (msg.value >= 1 finney);\r\n        require (started || (now > startTime));\r\n        require (now <= endTime);\r\n        require (hgtSold < lastSaleInHGT);\r\n        (passedKYC,blocked) = hgs.permissions(msg.sender); \r\n        require (passedKYC);\r\n        require (!blocked);\r\n\r\n\r\n        _;\r\n    }\r\n\r\n \r\n    function HelloGoldRound1Point5() {\r\n        // handle the guy who had three proxy accounts\r\n        deposits[0xA3f59EbC3bf8Fa664Ce12e2f841Fe6556289F053] = 30 ether; // so sum balance = 40 ether\r\n        upgraded[0xA3f59EbC3bf8Fa664Ce12e2f841Fe6556289F053] = true;\r\n        upgraded[0x00f07DA332aa7751F9170430F6e4b354568c5B40] = true;\r\n        upgraded[0x938CdFb9B756A5b6c8f3fBA535EC17700edD4c15] = true;\r\n        upgraded[0xa6a777ed720746FBE7b6b908584CD3D533d307D3] = true;\r\n\r\n        // testingOnly(); // removing this allows me to keep the BIG COMMENTS to see if Robin ever hears about it :-p\r\n    }\r\n\r\n    function reCap(uint256 newCap) onlyOwner {\r\n        lastSaleInHGT = newCap;\r\n    }\r\n\r\n    function startAndSetStopTime(uint256 period) onlyOwner {\r\n        started = true;\r\n        if (period == 0)\r\n            endTime = now + 2 weeks;\r\n        else\r\n            endTime = now + period;\r\n    }\r\n\r\n    // Need to check cases\r\n    //  1   already upgraded\r\n    //  2   first deposit (no R1)\r\n    //  3   R1 < 10, first R1.5 takes over 10 ether\r\n    //  4   R1 <= 10, second R1.5 takes over 10 ether\r\n    function upgradeOnePointZeroBalances() internal {\r\n    // 1\r\n        if (upgraded[msg.sender]) {\r\n            log0(\"account already upgraded\");\r\n            return;\r\n        }\r\n    // 2\r\n        uint256 deposited = hgs.deposits(msg.sender);\r\n        if (deposited == 0)\r\n            return;\r\n    // 3\r\n        deposited = deposited.add(deposits[msg.sender]);\r\n        if (deposited.add(msg.value) < 10 ether)\r\n            return;\r\n    // 4\r\n        uint256 hgtBalance = hgt.balanceOf(msg.sender);\r\n        uint256 upgradedAmount = deposited.mul(rate).div(1 ether);\r\n        if (hgtBalance < upgradedAmount) {\r\n            uint256 diff = upgradedAmount.sub(hgtBalance);\r\n            hgt.transferFrom(reserves,msg.sender,diff);\r\n            hgtSold = hgtSold.add(diff);\r\n            upgradeHGT[msg.sender] = upgradeHGT[msg.sender].add(diff);\r\n            log0(\"upgraded R1 to 20%\");\r\n        }\r\n        upgraded[msg.sender] = true;\r\n    }\r\n\r\n    function () payable validPurchase {\r\n        if (deposits[msg.sender] == 0)\r\n            r15Backers++;\r\n        upgradeOnePointZeroBalances();\r\n        deposits[msg.sender] = deposits[msg.sender].add(msg.value);\r\n        \r\n        buyTokens(msg.sender,msg.value);\r\n    }\r\n\r\n    function buyTokens(address recipient, uint256 valueInWei) internal {\r\n        uint256 numberOfTokens = valueInWei.mul(rate).div(1 ether);\r\n        weiRaised = weiRaised.add(valueInWei);\r\n        require(hgt.transferFrom(reserves,recipient,numberOfTokens));\r\n        hgtSold = hgtSold.add(numberOfTokens);\r\n        multisig.transfer(msg.value);\r\n    }\r\n\r\n    function emergencyERC20Drain( ERC20 token, uint amount ) onlyOwner {\r\n        token.transfer(owner, amount);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"newCap\",\"type\":\"uint256\"}],\"name\":\"reCap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"r15Backers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"started\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"multisig\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reserves\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hgs\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastSaleInHGT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"upgradeHGT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hgt\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hgtSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"emergencyERC20Drain\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"upgraded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"deposits\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"period\",\"type\":\"uint256\"}],\"name\":\"startAndSetStopTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"HelloGoldRound1Point5","CompilerVersion":"v0.4.16+commit.d7661dd9","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://c403bd76c48e7fc147c751b64ad586952032c3944c5281f33084f029bc9ddc28"}]}