{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n// File: node_modules/zeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: node_modules/zeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n// File: node_modules/zeppelin-solidity/contracts/token/ERC20Basic.sol\r\n\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// File: node_modules/zeppelin-solidity/contracts/token/BasicToken.sol\r\n\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n// File: node_modules/zeppelin-solidity/contracts/token/ERC20.sol\r\n\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: node_modules/zeppelin-solidity/contracts/token/StandardToken.sol\r\n\r\ncontract StandardToken is ERC20, BasicToken {\r\n  event ChangeBalance (address from, uint256 fromBalance, address to, uint256 toBalance, uint256 seq);\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n  uint256 internal seq = 0;\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    ChangeBalance (_from, balances[_from], _to, balances[_to], ++seq);\r\n    return true;\r\n  }\r\n\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n// File: node_modules/zeppelin-solidity/contracts/token/MintableToken.sol\r\n\r\ncontract MintableToken is StandardToken, Ownable {\r\n  event Mint(address indexed to, uint256 amount);\r\n\r\n  function mint(address _to, uint256 _amount) onlyOwner public returns (bool) {\r\n    totalSupply = totalSupply.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    Mint(_to, _amount);\r\n    Transfer(address(0), _to, _amount);\r\n    ChangeBalance (address(0), 0, _to, balances[_to], ++seq);\r\n    return true; \r\n  }\r\n}\r\n\r\n// File: node_modules/zeppelin-solidity/contracts/crowdsale/Crowdsale.sol\r\n\r\ncontract Crowdsale {\r\n  using SafeMath for uint256;\r\n\r\n  // The token being sold\r\n  MintableToken public token;\r\n\r\n  // start and end timestamps where investments are allowed (both inclusive)\r\n  uint256 public startTime;\r\n  uint256 public endTime;\r\n\r\n  // ICO Phases\r\n  uint256[] starts;\r\n  uint256[] ends;\r\n  uint256[] rates;\r\n\r\n  // Purchase counter\r\n  uint256 internal seq;\r\n\r\n  // address where funds are collected\r\n  address public wallet;\r\n\r\n  // how many token units a buyer gets per wei\r\n  uint256 public rate;\r\n\r\n  // amount of raised money in wei\r\n  uint256 public weiRaised;\r\n\r\n  uint256 public cap;\r\n\r\n  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount, uint256 seq);\r\n  \r\n  function Crowdsale(uint256[] _startTime, uint256[] _endTime, uint256[] _rates, address _wallet, uint256 _cap) public {\r\n    // require(_startTime >= now);\r\n\r\n    for (uint8 i = 0; i < starts.length; i ++) {\r\n      require(_endTime[i] >= _startTime[i]);\r\n      require(_rates[i] > 0);\r\n      require(_wallet != address(0));\r\n    }\r\n\r\n    cap = _cap;\r\n    starts = _startTime;\r\n    ends = _endTime;\r\n    rates = _rates;\r\n\r\n    // token = createTokenContract();\r\n    \r\n    \r\n    startTime = _startTime[0];\r\n    endTime = _endTime[_endTime.length - 1];\r\n    rate = _rates[0];\r\n    wallet = _wallet;\r\n  }\r\n\r\n  function createTokenContract() internal returns (MintableToken) {\r\n    return new MintableToken();\r\n  }\r\n\r\n\r\n  function () external payable {\r\n    //minimum is 1 Ether\r\n    require (msg.value >= 1000000000000000000);\r\n    buyTokens(msg.sender);\r\n  }\r\n\r\n  function buyTokens(address beneficiary) public payable {\r\n    require(beneficiary != address(0));\r\n    require(validPurchase());\r\n\r\n    uint256 weiAmount = msg.value;\r\n    uint256 arrayLength = starts.length;\r\n\r\n\r\n    // calculate token amount to be created\r\n    for (uint8 i = 0; i < arrayLength; i ++) {\r\n      if (now >= starts[i] && now <= ends[i]) {\r\n        rate = rates[i];\r\n        break;\r\n      }\r\n    }    \r\n    uint256 tokens = weiAmount.mul(rate);\r\n    require (checkCap(tokens));\r\n\r\n    // update state\r\n    weiRaised = weiRaised.add(weiAmount);\r\n\r\n    token.mint(beneficiary, tokens);\r\n    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens, ++seq);\r\n\r\n    forwardFunds();\r\n  }\r\n\r\n  function forwardFunds() internal {\r\n    wallet.transfer(msg.value);\r\n  }\r\n\r\n  function validPurchase() internal view returns (bool) {\r\n    bool withinPeriod = now >= startTime && now <= endTime;\r\n    bool nonZeroPurchase = msg.value != 0;\r\n    \r\n    return withinPeriod && nonZeroPurchase;\r\n  }\r\n\r\n  function hasEnded() public view returns (bool) {\r\n    uint256 tokenSupply = token.totalSupply();\r\n    bool capReached = tokenSupply >= cap;\r\n    bool overTime = now > endTime;\r\n    return capReached && overTime; //now > endTime;\r\n  }\r\n\r\n  function checkCap(uint256 tokens) internal view returns (bool) {\r\n    uint256 issuedTokens = token.totalSupply();\r\n    return (issuedTokens.add(tokens) <= cap);\r\n  }\r\n}\r\n\r\n// File: node_modules/zeppelin-solidity/contracts/crowdsale/FinalizableCrowdsale.sol\r\n\r\ncontract FinalizableCrowdsale is Crowdsale, Ownable {\r\n  using SafeMath for uint256;\r\n\r\n  bool public isFinalized = false;\r\n\r\n  event Finalized();\r\n\r\n  function finalize() onlyOwner public {\r\n    require(!isFinalized);\r\n    require(hasEnded());\r\n\r\n    Finalized();\r\n\r\n    isFinalized = true;\r\n  }\r\n}\r\n\r\n// File: contracts/OMXToken.sol\r\n\r\ncontract OMXToken is MintableToken {\r\n    string public constant name = \"OMEX\";\r\n    string public constant symbol = \"OMX\";\r\n    uint8 public constant decimals = 18;\r\n\r\n    function OMXToken () public MintableToken () {\r\n    }\r\n\r\n\r\n}\r\n\r\n// File: contracts/OMXCrowdsale.sol\r\n\r\ncontract OMXCrowdsale is FinalizableCrowdsale {\r\n    uint256[] start = [1514646000, 1515942000, 1516806000];\r\n    uint256[] end = [1515941999, 1516805999, 1517669999];\r\n    uint256[] rate = [1400, 1200, 1000];\r\n    address companyWallet;\r\n    address tokenAddress;\r\n\r\n    uint256 salesCap    = 300000000000000000000000000;\r\n    uint256 cap         = 500000000000000000000000000;\r\n\r\n  function OMXCrowdsale(address _wallet, address _token) public \r\n      FinalizableCrowdsale() Crowdsale(start, end, rate, _wallet, salesCap)\r\n  {\r\n      companyWallet = _wallet;\r\n      tokenAddress = _token;\r\n      token = createTokenContract();\r\n  }\r\n\r\n  function createTokenContract() internal returns (MintableToken) {\r\n      OMXToken omxInstance;\r\n      omxInstance = OMXToken (address(tokenAddress));\r\n      return omxInstance;\r\n  }\r\n\r\n  function finalize() onlyOwner public {\r\n      // mint company share of tokens\r\n      token.mint(companyWallet, cap - token.totalSupply());\r\n      super.finalize();\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isFinalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_token\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Finalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"seq\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"}]","ContractName":"OMXCrowdsale","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000870937de155e31b7d2933db089988addc301ea55000000000000000000000000d4db3f972d1e5f03ad2011cef04f1194fc271507","Library":"","SwarmSource":"bzzr://67c7383bd814c93211ce3d8453545b8bf2e3724d75945624de6227854f32517a"}]}