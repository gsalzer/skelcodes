{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.15;\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Ownable {\r\n\r\n    //Variables\r\n    address public owner;\r\n\r\n    address public newOwner;\r\n\r\n    //    Modifiers\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    function Ownable() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param _newOwner The address to transfer ownership to.\r\n     */\r\n\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        require(_newOwner != address(0));\r\n        newOwner = _newOwner;\r\n    }\r\n\r\n    function acceptOwnership() public {\r\n        if (msg.sender == newOwner) {\r\n            owner = newOwner;\r\n        }\r\n    }\r\n}\r\n\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public constant returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract BasicToken is ERC20Basic {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) balances;\r\n\r\n    /**\r\n    * @dev transfer token for a specified address\r\n    * @param _to The address to transfer to.\r\n    * @param _value The amount to be transferred.\r\n    */\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[msg.sender]);\r\n\r\n        // SafeMath.sub will throw if there is not enough balance.\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the balance of the specified address.\r\n    * @param _owner The address to query the the balance of.\r\n    * @return An uint256 representing the amount owned by the passed address.\r\n    */\r\n    function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   */\r\n  function increaseApproval (address _spender, uint _addedValue) public returns (bool success) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  function decreaseApproval (address _spender, uint _subtractedValue) public returns (bool success) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\ncontract MintableToken is StandardToken, Ownable {\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\r\n    totalSupply = totalSupply.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    Mint(_to, _amount);\r\n    Transfer(0x0, _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() onlyOwner public returns (bool) {\r\n    mintingFinished = true;\r\n    MintFinished();\r\n    return true;\r\n  }\r\n}\r\n\r\ncontract LamdenTau is MintableToken {\r\n    string public constant name = \"Lamden Tau\";\r\n    string public constant symbol = \"TAU\";\r\n    uint8 public constant decimals = 18;\r\n}\r\n\r\ncontract Bounty is Ownable {\r\n\r\n   LamdenTau public lamdenTau;\r\n\r\n   function Bounty(address _tokenContractAddress) public {\r\n      require(_tokenContractAddress != address(0));\r\n      lamdenTau = LamdenTau(_tokenContractAddress);\r\n      \r\n      \r\n   }\r\n\r\n   function returnTokens() onlyOwner {\r\n      uint256 balance = lamdenTau.balanceOf(this);\r\n      lamdenTau.transfer(msg.sender, balance);\r\n   }\r\n\r\n   function issueTokens() onlyOwner  {\r\n      \r\n    lamdenTau.transfer(0xbdf1fd9bbbade4c0edde1766a0392a9e2c3317f4, 213686000000000000000);\r\n    lamdenTau.transfer(0xbdf1fd9bbbade4c0edde1766a0392a9e2c3317f4, 1282116000000000000000);\r\n    lamdenTau.transfer(0x7ba1eeed6a6cfc0c8c93e8dee83cc58fb29bd12a, 191783185000000000000);\r\n    lamdenTau.transfer(0x93dab77cacf2200c9ece7f3ccb6fa2b6825739eb, 534215000000000000000);\r\n    lamdenTau.transfer(0x5cebe210ea76707d5dbb2b0a08e460a9fc8af69e, 233772484000000000000);\r\n    lamdenTau.transfer(0x1a6417dcd02a28067b080a1fda6afbf7781d3f27, 2136860000000000000000);\r\n    lamdenTau.transfer(0x75efb61b68ff43cf4abbe19081b405b0acf63401, 2136860000000000000000);\r\n    lamdenTau.transfer(0x75efb61b68ff43cf4abbe19081b405b0acf63401, 19231740000000000000000);\r\n    lamdenTau.transfer(0xac939e56240eaed32e689383e8f612d769188f28, 4166877000000000000000);\r\n    lamdenTau.transfer(0xe053ccdc6259013090b4f130c7f151d6aefa94ac, 38463480000000000000);\r\n    lamdenTau.transfer(0x46513810d83ade895fbff24f96a7ac802ac27452, 5342150000000000000000);\r\n    lamdenTau.transfer(0x9753364f389886be47a383961e4228ced21166f3, 192317400000000000000);\r\n    lamdenTau.transfer(0x9753364f389886be47a383961e4228ced21166f3, 854744000000000000000);\r\n    lamdenTau.transfer(0xb1c3d4359243df5a4bc4d61444e0cbdfdd7f0c97, 71221543800000000000);\r\n    lamdenTau.transfer(0x8360aa193997c7b46252bdb4216002512dec8601, 10684300000000000000000);\r\n    lamdenTau.transfer(0x4beadbdd8e23735297177cc162ecae2982811a24, 106843000000000000000);\r\n    lamdenTau.transfer(0x83bd16e22c493c45c2552ceb1b41e023d80fc4ce, 4273720000000000000000);\r\n    lamdenTau.transfer(0x7003b48d6d01c3208976822b06c6b47686b51fc4, 2110220877547200000000);\r\n    lamdenTau.transfer(0x810cb7f0f94c34f92957cd8227f77c9cb425716a, 1068430000000000000000);\r\n    lamdenTau.transfer(0x51cb5b090cf634057b4a1c9ca494a7f61e683795, 2136860000000000000000);\r\n    lamdenTau.transfer(0x3940969af743db00da2cd85d08eda127f029ec87, 363266200000000000000);\r\n    lamdenTau.transfer(0x46513810d83ade895fbff24f96a7ac802ac27452, 10684300000000000000000);\r\n    lamdenTau.transfer(0x398e5eff8d5172f8ce8786f1f547c6d70114a609, 1068430000000000000000);\r\n    lamdenTau.transfer(0x442a43435cc452f07ebe43e3039ccb1514c08e51, 32052900000000000000000);\r\n    lamdenTau.transfer(0x0f46876e37343d1993220e4ca82f17639dbe569c, 76926960000000000000);\r\n    lamdenTau.transfer(0x8c64f8f0d34c10cb9023c91dbc5ded01d9239f98, 213686000000000000000);\r\n    lamdenTau.transfer(0xa0624a8c050c73d2a763311da5dc229251f27b6b, 427372000000000000000);\r\n    lamdenTau.transfer(0x6a3305040697f2fa8f47312d2c3c80ef1d7b1710, 2136860000000000000000);\r\n    lamdenTau.transfer(0xd67023a6ae7c03d260b7bdfb2035f1c6b54305ca, 1068430000000000000000);\r\n    lamdenTau.transfer(0xfbb1b73c4f0bda4f67dca266ce6ef42f520fbb98, 117527300000000000000);\r\n    lamdenTau.transfer(0x6036a42ab4584dc010dd8e1e02cf8b0ef63ce77d, 598320800000000000000);\r\n    lamdenTau.transfer(0x96ee32879d6c01276bb5a9a99138a306e919024e, 2154014910807980000000);\r\n    lamdenTau.transfer(0x41bbeb2d546fb35f3f147c0a2d358ae03b395b2f, 2564232000000000000000);\r\n    lamdenTau.transfer(0x9b5dc8a61f6bead57cde08794acac9943a07b503, 68379520000000000000000);\r\n    lamdenTau.transfer(0x1a6417dcd02a28067b080a1fda6afbf7781d3f27, 2564232000000000000000);\r\n    lamdenTau.transfer(0xa0624a8c050c73d2a763311da5dc229251f27b6b, 1495802000000000000000);\r\n    lamdenTau.transfer(0x9b5dc8a61f6bead57cde08794acac9943a07b503, 42737200000000000000000);\r\n    lamdenTau.transfer(0xc8f25d07bd68c68af12c388091e736906d2c629d, 2136860000000000000000);\r\n    lamdenTau.transfer(0xc8f25d07bd68c68af12c388091e736906d2c629d, 211549140000000000000000);\r\n    lamdenTau.transfer(0x19d2bb5598c1af4c97a8931fe551ec2f6b6b8feb, 14188750400000000000000);\r\n    lamdenTau.transfer(0x86f73052c4f0ec4247d63d8711b471ceffd390ef, 4273720000000000000000);\r\n    lamdenTau.transfer(0x33fadbf5576d5723a5ad355bfb682a8d4174c449, 812006800000000000000);\r\n    lamdenTau.transfer(0xf538536182470f8d99b05a8ce2f61f08b2864d5e, 4273720000000000000000);\r\n    lamdenTau.transfer(0x2e6b290a4e4f051ba7b04fefd2eb5843393127bc, 341897600000000000000);\r\n    lamdenTau.transfer(0x2e6b290a4e4f051ba7b04fefd2eb5843393127bc, 106843000000000000000);\r\n    lamdenTau.transfer(0xd4470f081a5ecc6b6258c3427ef5d1110d38e7c9, 1068430000000000000000);\r\n    lamdenTau.transfer(0xf538536182470f8d99b05a8ce2f61f08b2864d5e, 2136860000000000000000);\r\n    lamdenTau.transfer(0x913d74033d61de00c388e4d30ba5ac016b104f56, 42737200000000000000000);\r\n    lamdenTau.transfer(0xb6c1a067fad5ce38684c493c68db34315762620a, 2991604000000000000000);\r\n    lamdenTau.transfer(0xc12df0d52167007f94d06fe1e87547e5137fe094, 26283378000000000000000);\r\n        \r\n      uint256 balance = lamdenTau.balanceOf(this);\r\n      lamdenTau.transfer(msg.sender, balance);\r\n   }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"lamdenTau\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"issueTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"returnTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tokenContractAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"Bounty","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000c27a2f05fa577a83ba0fdb4c38443c0718356501","Library":"","SwarmSource":"bzzr://70013ccf275af139314efbfe3bcc97b2297d57784458f3590f895ce9133f90ff"}]}