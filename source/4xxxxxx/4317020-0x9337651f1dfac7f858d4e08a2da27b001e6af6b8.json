{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Ownable {\r\n\r\n  address public owner;\r\n  function Ownable() { owner = msg.sender; }\r\n\r\n  modifier onlyOwner {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  function transferOwnership(address newOwner) onlyOwner {owner = newOwner;}\r\n}\r\n\r\ncontract ERC20Interface {\r\n\r\n  function totalSupply() constant returns (uint256 totalSupply);\r\n\r\n  function balanceOf(address _owner) constant returns (uint256 balance);\r\n\r\n  function transfer(address _to, uint256 _value) returns (bool success);\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\r\n\r\n  function approve(address _spender, uint256 _value) returns (bool success);\r\n\r\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining);\r\n\r\n  event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n\r\n  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n }\r\n\r\ncontract GMPToken is Ownable, ERC20Interface {\r\n\r\n  /* Public variables of the token */\r\n  string public name;\r\n  string public symbol;\r\n  uint8 public decimals;\r\n  uint256 public totalSupply;\r\n\r\n  /* This creates an array with all balances */\r\n  mapping (address => uint256) public balances;\r\n  mapping (address => mapping (address => uint256)) public allowed;\r\n\r\n  /* Constuctor: Initializes contract with initial supply tokens to the creator of the contract */\r\n  function GMPToken(\r\n        uint256 initialSupply,\r\n        string tokenName,\r\n        uint8 decimalUnits,\r\n        string tokenSymbol\r\n      ) {\r\n      balances[msg.sender] = initialSupply;              // Give the creator all initial tokens\r\n      totalSupply = initialSupply;                        // Update total supply\r\n      name = tokenName;                                   // Set the name for display purposes\r\n      symbol = tokenSymbol;                               // Set the symbol for display purposes\r\n      decimals = decimalUnits;                            // Amount of decimals for display purposes\r\n  }\r\n\r\n  /* Implementation of ERC20Interface */\r\n\r\n  function totalSupply() constant returns (uint256 totalSupply) { return totalSupply; }\r\n\r\n  function balanceOf(address _owner) constant returns (uint256 balance) { return balances[_owner]; }\r\n\r\n  /* Internal transfer, only can be called by this contract */\r\n  function _transfer(address _from, address _to, uint _amount) internal {\r\n      require (_to != 0x0);                               // Prevent transfer to 0x0 address. Use burn() instead\r\n      require (balances[_from] > _amount);                // Check if the sender has enough\r\n      require (balances[_to] + _amount > balances[_to]); // Check for overflows\r\n      balances[_from] -= _amount;                         // Subtract from the sender\r\n      balances[_to] += _amount;                            // Add the same to the recipient\r\n      Transfer(_from, _to, _amount);\r\n\r\n  }\r\n\r\n  function transfer(address _to, uint256 _amount) returns (bool success) {\r\n    _transfer(msg.sender, _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\r\n    require (_value < allowed[_from][msg.sender]);     // Check allowance\r\n    allowed[_from][msg.sender] -= _value;\r\n    _transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  function approve(address _spender, uint256 _amount) returns (bool success) {\r\n    allowed[msg.sender][_spender] = _amount;\r\n    Approval(msg.sender, _spender, _amount);\r\n    return true;\r\n  }\r\n\r\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  function mintToken(uint256 mintedAmount) onlyOwner {\r\n      balances[Ownable.owner] += mintedAmount;\r\n      totalSupply += mintedAmount;\r\n      Transfer(0, Ownable.owner, mintedAmount);\r\n  }\r\n\r\n}\r\n\r\n\r\ncontract Crowdsale is Ownable {\r\n\r\n  using SafeMath for uint256;\r\n\r\n  // The token being sold\r\n  GMPToken public token;\r\n\r\n  // Flag setting that investments are allowed (both inclusive)\r\n  bool public saleIsActive;\r\n\r\n  // address where funds are collected\r\n  address public wallet;\r\n\r\n  // Price for 1 token in wei. i.e. 562218890554723\r\n  uint256 public rate;\r\n\r\n  // amount of raised money in wei\r\n  uint256 public weiRaised;\r\n\r\n  /**\r\n   * event for token purchase logging\r\n   * @param purchaser who paid for the tokens\r\n   * @param beneficiary who got the tokens\r\n   * @param value weis paid for purchase\r\n   * @param amount amount of tokens purchased\r\n   */\r\n  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n\r\n\r\n  /* -----------   A D M I N        F U N C T I O N S    ----------- */\r\n\r\n  function Crowdsale(uint256 initialRate, address targetWallet, uint256 initialSupply, string tokenName, uint8 decimalUnits, string tokenSymbol) {\r\n\r\n    //Checks\r\n    require(initialRate > 0);\r\n    require(targetWallet != 0x0);\r\n\r\n    //Init\r\n    token = new GMPToken(initialSupply, tokenName, decimalUnits, tokenSymbol);\r\n    rate = initialRate;\r\n    wallet = targetWallet;\r\n    saleIsActive = true;\r\n\r\n  }\r\n\r\n  function close() onlyOwner {\r\n    selfdestruct(owner);\r\n  }\r\n\r\n  //Transfer token to\r\n  function transferToAddress(address targetWallet, uint256 tokenAmount) onlyOwner {\r\n    token.transfer(targetWallet, tokenAmount);\r\n  }\r\n\r\n\r\n  //Setters\r\n  function enableSale() onlyOwner {\r\n    saleIsActive = true;\r\n  }\r\n\r\n  function disableSale() onlyOwner {\r\n    saleIsActive = false;\r\n  }\r\n\r\n  function setRate(uint256 newRate)  onlyOwner {\r\n    rate = newRate;\r\n  }\r\n\r\n  //Mint new tokens\r\n  function mintToken(uint256 mintedAmount) onlyOwner {\r\n    token.mintToken(mintedAmount);\r\n  }\r\n\r\n\r\n\r\n  /* -----------   P U B L I C      C A L L B A C K       F U N C T I O N     ----------- */\r\n\r\n  function () payable {\r\n\r\n    require(msg.sender != 0x0);\r\n    require(saleIsActive);\r\n    require(msg.value > rate);\r\n\r\n    uint256 weiAmount = msg.value;\r\n\r\n    //Update total wei counter\r\n    weiRaised = weiRaised.add(weiAmount);\r\n\r\n    //Calc number of tokents\r\n    uint256 tokenAmount = weiAmount.div(rate);\r\n\r\n    //Forward wei to wallet account\r\n    wallet.transfer(msg.value);\r\n\r\n    //Transfer token to sender\r\n    token.transfer(msg.sender, tokenAmount);\r\n    TokenPurchase(msg.sender, wallet, weiAmount, tokenAmount);\r\n\r\n  }\r\n\r\n\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"disableSale\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newRate\",\"type\":\"uint256\"}],\"name\":\"setRate\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"close\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"targetWallet\",\"type\":\"address\"},{\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"transferToAddress\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"mintedAmount\",\"type\":\"uint256\"}],\"name\":\"mintToken\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"enableSale\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleIsActive\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"initialRate\",\"type\":\"uint256\"},{\"name\":\"targetWallet\",\"type\":\"address\"},{\"name\":\"initialSupply\",\"type\":\"uint256\"},{\"name\":\"tokenName\",\"type\":\"string\"},{\"name\":\"decimalUnits\",\"type\":\"uint8\"},{\"name\":\"tokenSymbol\",\"type\":\"string\"}],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"}]","ContractName":"Crowdsale","CompilerVersion":"v0.4.13+commit.fb4cb1a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000001d7e48dcfecb200000000000000000000000013dfc5f7000f828eeb976393eae043ace7622cd90000000000000000000000000000000000000000000000000000000001c9c38000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000009474d5020546f6b656e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003474d500000000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://f9430c6063e19502c93158147274d54065a1c5305df5d8c3c8ec79e5c64a1f80"}]}