{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.15;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner {\r\n   require(newOwner != address(0));\r\n   owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev modifier to allow actions only when the contract IS paused\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev modifier to allow actions only when the contract IS NOT paused\r\n   */\r\n  modifier whenPaused {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused returns (bool) {\r\n    paused = true;\r\n    Pause();\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused returns (bool) {\r\n    paused = false;\r\n    Unpause();\r\n    return true;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) constant returns (uint256);\r\n  function transfer(address to, uint256 value) returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) returns (bool) {\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) returns (bool);\r\n  function approve(address spender, uint256 value) returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amout of tokens to be transfered\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\r\n    uint256 _allowance = allowed[_from][msg.sender];\r\n\r\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n    // require (_value <= _allowance);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) returns (bool) {\r\n\r\n    // To change the approve amount you first have to reduce the addresses`\r\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n    //  already 0 to mitigate the race condition described here:\r\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifing the amount of tokens still avaible for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * Pausable token\r\n *\r\n * Simple ERC20 Token example, with pausable token creation\r\n **/\r\ncontract PausableToken is StandardToken, Pausable {\r\n\r\n  function transfer(address _to, uint _value) whenNotPaused returns (bool) {\r\n    return super.transfer(_to, _value);\r\n  }\r\n\r\n  function transferFrom(address _from, address _to, uint _value) whenNotPaused returns (bool) {\r\n    return super.transferFrom(_from, _to, _value);\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title RefundVault\r\n * @dev This contract is used for storing funds while a crowdsale\r\n * is in progress. Supports refunding the money if crowdsale fails,\r\n * and forwarding it if crowdsale is successful.\r\n */\r\ncontract RefundVault is Ownable {\r\n  using SafeMath for uint256;\r\n\r\n  enum State { Active, Refunding, Closed }\r\n\r\n  mapping (address => uint256) public deposited;\r\n  address public wallet;\r\n  State public state;\r\n\r\n  event Closed();\r\n  event RefundsEnabled();\r\n  event Refunded(address indexed beneficiary, uint256 weiAmount);\r\n\r\n  function RefundVault(address _wallet) {\r\n    require(_wallet != 0x0);\r\n    wallet = _wallet;\r\n    state = State.Active;\r\n  }\r\n\r\n  function deposit(address investor) onlyOwner payable {\r\n    require(state == State.Active);\r\n    deposited[investor] = deposited[investor].add(msg.value);\r\n  }\r\n\r\n  function close() onlyOwner {\r\n    require(state == State.Active);\r\n    state = State.Closed;\r\n    Closed();\r\n    wallet.transfer(this.balance);\r\n  }\r\n\r\n  function enableRefunds() onlyOwner {\r\n    require(state == State.Active);\r\n    state = State.Refunding;\r\n    RefundsEnabled();\r\n  }\r\n\r\n  function refund(address investor) {\r\n    require(state == State.Refunding);\r\n    uint256 depositedValue = deposited[investor];\r\n    deposited[investor] = 0;\r\n    investor.transfer(depositedValue);\r\n    Refunded(investor, depositedValue);\r\n  }\r\n}\r\n\r\n// @title The PallyCoin\r\n/// @author Manoj Patidar\r\ncontract PallyCoin is PausableToken {\r\n   using SafeMath for uint256;\r\n\r\n   string public constant name = 'PallyCoin';\r\n\r\n   string public constant symbol = 'PAL';\r\n\r\n   uint8 public constant decimals = 18;\r\n\r\n   uint256 public  totalSupply = 100e24; // 100M tokens with 18 decimals\r\n\r\n   bool public remainingTokenBurnt = false;\r\n\r\n   // The tokens already used for the presale buyers\r\n   uint256 public tokensDistributedPresale = 0;\r\n\r\n   // The tokens already used for the ICO buyers\r\n   uint256 public tokensDistributedCrowdsale = 0;\r\n\r\n   // The address of the crowdsale\r\n   address public crowdsale;\r\n\r\n   // The initial supply used for platform and development as specified in the whitepaper\r\n   uint256 public initialSupply = 40e24;\r\n\r\n   // The maximum amount of tokens for the presale investors\r\n   uint256 public limitPresale = 10e24;\r\n\r\n   // The maximum amount of tokens sold in the crowdsale\r\n   uint256 public limitCrowdsale = 50e24;\r\n\r\n   /// @notice Only allows the execution of the function if it's comming from crowdsale\r\n   modifier onlyCrowdsale() {\r\n      require(msg.sender == crowdsale);\r\n      _;\r\n   }\r\n\r\n   // When someone refunds tokens\r\n   event RefundedTokens(address indexed user, uint256 tokens);\r\n\r\n   /// @notice Constructor used to set the platform & development tokens. This is\r\n   /// The 20% + 20% of the 100 M tokens used for platform and development team.\r\n   /// The owner, msg.sender, is able to do allowance for other contracts. Remember\r\n   /// to use `transferFrom()` if you're allowed\r\n   function PallyCoin() {\r\n      balances[msg.sender] = initialSupply; // 40M tokens wei\r\n   }\r\n\r\n   /// @notice Function to set the crowdsale smart contract's address only by the owner of this token\r\n   /// @param _crowdsale The address that will be used\r\n   function setCrowdsaleAddress(address _crowdsale) external onlyOwner whenNotPaused {\r\n      require(_crowdsale != address(0));\r\n\r\n      crowdsale = _crowdsale;\r\n   }\r\n\r\n   /// @notice Distributes the presale tokens. Only the owner can do this\r\n   /// @param _buyer The address of the buyer\r\n   /// @param tokens The amount of tokens corresponding to that buyer\r\n   function distributePresaleTokens(address _buyer, uint tokens) external onlyOwner whenNotPaused {\r\n      require(_buyer != address(0));\r\n      require(tokens > 0 && tokens <= limitPresale);\r\n\r\n      // Check that the limit of 10M presale tokens hasn't been met yet\r\n      require(tokensDistributedPresale < limitPresale);\r\n      require(tokensDistributedPresale.add(tokens) < limitPresale);\r\n\r\n      tokensDistributedPresale = tokensDistributedPresale.add(tokens);\r\n      balances[_buyer] = balances[_buyer].add(tokens);\r\n   }\r\n\r\n   /// @notice Distributes the ICO tokens. Only the crowdsale address can execute this\r\n   /// @param _buyer The buyer address\r\n   /// @param tokens The amount of tokens to send to that address\r\n   function distributeICOTokens(address _buyer, uint tokens) external onlyCrowdsale whenNotPaused {\r\n      require(_buyer != address(0));\r\n      require(tokens > 0);\r\n\r\n      // Check that the limit of 50M ICO tokens hasn't been met yet\r\n      require(tokensDistributedCrowdsale < limitCrowdsale);\r\n      require(tokensDistributedCrowdsale.add(tokens) <= limitCrowdsale);\r\n\r\n      tokensDistributedCrowdsale = tokensDistributedCrowdsale.add(tokens);\r\n      balances[_buyer] = balances[_buyer].add(tokens);\r\n   }\r\n\r\n   /// @notice Deletes the amount of tokens refunded from that buyer balance\r\n   /// @param _buyer The buyer that wants the refund\r\n   /// @param tokens The tokens to return\r\n   function refundTokens(address _buyer, uint256 tokens) external onlyCrowdsale whenNotPaused {\r\n      require(_buyer != address(0));\r\n      require(tokens > 0);\r\n      require(balances[_buyer] >= tokens);\r\n\r\n      balances[_buyer] = balances[_buyer].sub(tokens);\r\n      RefundedTokens(_buyer, tokens);\r\n   }\r\n\r\n   /// @notice Burn the amount of tokens remaining after ICO ends\r\n   function burnTokens() external onlyCrowdsale whenNotPaused {\r\n      \r\n      uint256 remainingICOToken = limitCrowdsale.sub(tokensDistributedCrowdsale);\r\n      if(remainingICOToken > 0 && !remainingTokenBurnt) {\r\n      remainingTokenBurnt = true;    \r\n      limitCrowdsale = limitCrowdsale.sub(remainingICOToken);  \r\n      totalSupply = totalSupply.sub(remainingICOToken);\r\n      }\r\n   }\r\n}\r\n/// 1. First you set the address of the wallet in the RefundVault contract that will store the deposit of ether\r\n// 2. If the goal is reached, the state of the vault will change and the ether will be sent to the address\r\n// 3. If the goal is not reached , the state of the vault will change to refunding and the users will be able to call claimRefund() to get their ether\r\n\r\n/// @title Crowdsale contract to carry out an ICO with the PallyCoin\r\n/// Crowdsales have a start and end timestamps, where investors can make\r\n/// token purchases and the crowdsale will assign them tokens based\r\n/// on a token per ETH rate. Funds collected are forwarded to a wallet\r\n/// as they arrive.\r\n/// @author Manoj Patidar <patidarmanoj@gmail.com>\r\ncontract Crowdsale is Pausable {\r\n   using SafeMath for uint256;\r\n\r\n   // The token being sold\r\n   PallyCoin public token;\r\n\r\n   // The vault that will store the ether until the goal is reached\r\n   RefundVault public vault;\r\n\r\n   // The block number of when the crowdsale starts\r\n   // 10/15/2017 @ 11:00am (UTC)\r\n   // 10/15/2017 @ 12:00pm (GMT + 1)\r\n   uint256 public startTime = 1511068829;\r\n\r\n   // The block number of when the crowdsale ends\r\n   // 11/13/2017 @ 11:00am (UTC)\r\n   // 11/13/2017 @ 12:00pm (GMT + 1)\r\n   uint256 public endTime = 1512021029;\r\n\r\n   // The wallet that holds the Wei raised on the crowdsale\r\n   address public wallet;\r\n\r\n   // The wallet that holds the Wei raised on the crowdsale after soft cap reached\r\n   address public walletB;\r\n\r\n   // The rate of tokens per ether. Only applied for the first tier, the first\r\n   // 12.5 million tokens sold\r\n   uint256 public rate;\r\n\r\n   // The rate of tokens per ether. Only applied for the second tier, at between\r\n   // 12.5 million tokens sold and 25 million tokens sold\r\n   uint256 public rateTier2;\r\n\r\n   // The rate of tokens per ether. Only applied for the third tier, at between\r\n   // 25 million tokens sold and 37.5 million tokens sold\r\n   uint256 public rateTier3;\r\n\r\n   // The rate of tokens per ether. Only applied for the fourth tier, at between\r\n   // 37.5 million tokens sold and 50 million tokens sold\r\n   uint256 public rateTier4;\r\n\r\n   // The maximum amount of wei for each tier\r\n   uint256 public limitTier1 = 12.5e24;\r\n   uint256 public limitTier2 = 25e24;\r\n   uint256 public limitTier3 = 37.5e24;\r\n\r\n   // The amount of wei raised\r\n   uint256 public weiRaised = 0;\r\n\r\n   // The amount of tokens raised\r\n   uint256 public tokensRaised = 0;\r\n\r\n   // You can only buy up to 50 M tokens during the ICO\r\n   uint256 public constant maxTokensRaised = 50e24;\r\n\r\n   // The minimum amount of Wei you must pay to participate in the crowdsale\r\n   uint256 public constant minPurchase = 10 finney; // 0.01 ether\r\n\r\n   // The max amount of Wei that you can pay to participate in the crowdsale\r\n   uint256 public constant maxPurchase = 2000 ether;\r\n\r\n   // Minimum amount of tokens to be raised. 7.5 million tokens which is the 15%\r\n   // of the total of 50 million tokens sold in the crowdsale\r\n   // 7.5e6 + 1e18\r\n   uint256 public constant minimumGoal = 5.33e24;\r\n\r\n   // If the crowdsale wasn't successful, this will be true and users will be able\r\n   // to claim the refund of their ether\r\n   bool public isRefunding = false;\r\n\r\n   // If the crowdsale has ended or not\r\n   bool public isEnded = false;\r\n\r\n   // The number of transactions\r\n   uint256 public numberOfTransactions;\r\n\r\n   // The gas price to buy tokens must be 50 gwei or below\r\n   uint256 public limitGasPrice = 50000000000 wei;\r\n\r\n   // How much each user paid for the crowdsale\r\n   mapping(address => uint256) public crowdsaleBalances;\r\n\r\n   // How many tokens each user got for the crowdsale\r\n   mapping(address => uint256) public tokensBought;\r\n\r\n   // To indicate who purchased what amount of tokens and who received what amount of wei\r\n   event TokenPurchase(address indexed buyer, uint256 value, uint256 amountOfTokens);\r\n\r\n   // Indicates if the crowdsale has ended\r\n   event Finalized();\r\n\r\n   // Only allow the execution of the function before the crowdsale starts\r\n   modifier beforeStarting() {\r\n      require(now < startTime);\r\n      _;\r\n   }\r\n\r\n   /// @notice Constructor of the crowsale to set up the main variables and create a token\r\n   /// @param _wallet The wallet address that stores the Wei raised\r\n   /// @param _walletB The wallet address that stores the Wei raised after soft cap reached\r\n   /// @param _tokenAddress The token used for the ICO\r\n   function Crowdsale(\r\n      address _wallet,\r\n      address _walletB,\r\n      address _tokenAddress,\r\n      uint256 _startTime,\r\n      uint256 _endTime\r\n   ) public {\r\n      require(_wallet != address(0));\r\n      require(_tokenAddress != address(0));\r\n      require(_walletB != address(0));\r\n\r\n      // If you send the start and end time on the constructor, the end must be larger\r\n      if(_startTime > 0 && _endTime > 0)\r\n         require(_startTime < _endTime);\r\n\r\n      wallet = _wallet;\r\n      walletB = _walletB;\r\n      token = PallyCoin(_tokenAddress);\r\n      vault = new RefundVault(_wallet);\r\n\r\n      if(_startTime > 0)\r\n         startTime = _startTime;\r\n\r\n      if(_endTime > 0)\r\n         endTime = _endTime;\r\n   }\r\n\r\n   /// @notice Fallback function to buy tokens\r\n   function () payable {\r\n      buyTokens();\r\n   }\r\n\r\n   /// @notice To buy tokens given an address\r\n   function buyTokens() public payable whenNotPaused {\r\n      require(validPurchase());\r\n\r\n      uint256 tokens = 0;\r\n      \r\n      uint256 amountPaid = calculateExcessBalance();\r\n\r\n      if(tokensRaised < limitTier1) {\r\n\r\n         // Tier 1\r\n         tokens = amountPaid.mul(rate);\r\n\r\n         // If the amount of tokens that you want to buy gets out of this tier\r\n         if(tokensRaised.add(tokens) > limitTier1)\r\n            tokens = calculateExcessTokens(amountPaid, limitTier1, 1, rate);\r\n      } else if(tokensRaised >= limitTier1 && tokensRaised < limitTier2) {\r\n\r\n         // Tier 2\r\n         tokens = amountPaid.mul(rateTier2);\r\n\r\n         // If the amount of tokens that you want to buy gets out of this tier\r\n         if(tokensRaised.add(tokens) > limitTier2)\r\n            tokens = calculateExcessTokens(amountPaid, limitTier2, 2, rateTier2);\r\n      } else if(tokensRaised >= limitTier2 && tokensRaised < limitTier3) {\r\n\r\n         // Tier 3\r\n         tokens = amountPaid.mul(rateTier3);\r\n\r\n         // If the amount of tokens that you want to buy gets out of this tier\r\n         if(tokensRaised.add(tokens) > limitTier3)\r\n            tokens = calculateExcessTokens(amountPaid, limitTier3, 3, rateTier3);\r\n      } else if(tokensRaised >= limitTier3) {\r\n\r\n         // Tier 4\r\n         tokens = amountPaid.mul(rateTier4);\r\n      }\r\n\r\n      weiRaised = weiRaised.add(amountPaid);\r\n      uint256 tokensRaisedBeforeThisTransaction = tokensRaised;\r\n      tokensRaised = tokensRaised.add(tokens);\r\n      token.distributeICOTokens(msg.sender, tokens);\r\n\r\n      // Keep a record of how many tokens everybody gets in case we need to do refunds\r\n      tokensBought[msg.sender] = tokensBought[msg.sender].add(tokens);\r\n      TokenPurchase(msg.sender, amountPaid, tokens);\r\n      numberOfTransactions = numberOfTransactions.add(1);\r\n\r\n      if(tokensRaisedBeforeThisTransaction > minimumGoal) {\r\n\r\n         walletB.transfer(amountPaid);\r\n\r\n      } else {\r\n         vault.deposit.value(amountPaid)(msg.sender);\r\n         if(goalReached()) {\r\n          vault.close();\r\n         }\r\n         \r\n      }\r\n\r\n      // If the minimum goal of the ICO has been reach, close the vault to send\r\n      // the ether to the wallet of the crowdsale\r\n      checkCompletedCrowdsale();\r\n   }\r\n\r\n   /// @notice Calculates how many ether will be used to generate the tokens in\r\n   /// case the buyer sends more than the maximum balance but has some balance left\r\n   /// and updates the balance of that buyer.\r\n   /// For instance if he's 500 balance and he sends 1000, it will return 500\r\n   /// and refund the other 500 ether\r\n   function calculateExcessBalance() internal whenNotPaused returns(uint256) {\r\n      uint256 amountPaid = msg.value;\r\n      uint256 differenceWei = 0;\r\n      uint256 exceedingBalance = 0;\r\n\r\n      // If we're in the last tier, check that the limit hasn't been reached\r\n      // and if so, refund the difference and return what will be used to\r\n      // buy the remaining tokens\r\n      if(tokensRaised >= limitTier3) {\r\n         uint256 addedTokens = tokensRaised.add(amountPaid.mul(rateTier4));\r\n\r\n         // If tokensRaised + what you paid converted to tokens is bigger than the max\r\n         if(addedTokens > maxTokensRaised) {\r\n\r\n            // Refund the difference\r\n            uint256 difference = addedTokens.sub(maxTokensRaised);\r\n            differenceWei = difference.div(rateTier4);\r\n            amountPaid = amountPaid.sub(differenceWei);\r\n         }\r\n      }\r\n\r\n      uint256 addedBalance = crowdsaleBalances[msg.sender].add(amountPaid);\r\n\r\n      // Checking that the individual limit of 1000 ETH per user is not reached\r\n      if(addedBalance <= maxPurchase) {\r\n         crowdsaleBalances[msg.sender] = crowdsaleBalances[msg.sender].add(amountPaid);\r\n      } else {\r\n\r\n         // Substracting 1000 ether in wei\r\n         exceedingBalance = addedBalance.sub(maxPurchase);\r\n         amountPaid = amountPaid.sub(exceedingBalance);\r\n\r\n         // Add that balance to the balances\r\n         crowdsaleBalances[msg.sender] = crowdsaleBalances[msg.sender].add(amountPaid);\r\n      }\r\n\r\n      // Make the transfers at the end of the function for security purposes\r\n      if(differenceWei > 0)\r\n         msg.sender.transfer(differenceWei);\r\n\r\n      if(exceedingBalance > 0) {\r\n\r\n         // Return the exceeding balance to the buyer\r\n         msg.sender.transfer(exceedingBalance);\r\n      }\r\n\r\n      return amountPaid;\r\n   }\r\n\r\n   /// @notice Set's the rate of tokens per ether for each tier. Use it after the\r\n   /// smart contract is deployed to set the price according to the ether price\r\n   /// at the start of the ICO\r\n   /// @param tier1 The amount of tokens you get in the tier one\r\n   /// @param tier2 The amount of tokens you get in the tier two\r\n   /// @param tier3 The amount of tokens you get in the tier three\r\n   /// @param tier4 The amount of tokens you get in the tier four\r\n   function setTierRates(uint256 tier1, uint256 tier2, uint256 tier3, uint256 tier4)\r\n      external onlyOwner whenNotPaused\r\n   {\r\n      require(tier1 > 0 && tier2 > 0 && tier3 > 0 && tier4 > 0);\r\n      require(tier1 > tier2 && tier2 > tier3 && tier3 > tier4);\r\n\r\n      rate = tier1;\r\n      rateTier2 = tier2;\r\n      rateTier3 = tier3;\r\n      rateTier4 = tier4;\r\n   }\r\n\r\n   /// @notice Allow to extend ICO end date\r\n   /// @param _endTime Endtime of ICO\r\n   function setEndDate(uint256 _endTime)\r\n      external onlyOwner whenNotPaused\r\n   {\r\n      require(now <= _endTime);\r\n      require(startTime < _endTime);\r\n      \r\n      endTime = _endTime;\r\n   }\r\n\r\n\r\n   /// @notice Check if the crowdsale has ended and enables refunds only in case the\r\n   /// goal hasn't been reached\r\n   function checkCompletedCrowdsale() public whenNotPaused {\r\n      if(!isEnded) {\r\n         if(hasEnded() && !goalReached()){\r\n            vault.enableRefunds();\r\n\r\n            isRefunding = true;\r\n            isEnded = true;\r\n            Finalized();\r\n         } else if(hasEnded()  && goalReached()) {\r\n            \r\n            \r\n            isEnded = true; \r\n\r\n\r\n            // Burn token only when minimum goal reached and maxGoal not reached. \r\n            if(tokensRaised < maxTokensRaised) {\r\n\r\n               token.burnTokens();\r\n\r\n            } \r\n\r\n            Finalized();\r\n         } \r\n         \r\n         \r\n      }\r\n   }\r\n\r\n   /// @notice If crowdsale is unsuccessful, investors can claim refunds here\r\n   function claimRefund() public whenNotPaused {\r\n     require(hasEnded() && !goalReached() && isRefunding);\r\n\r\n     vault.refund(msg.sender);\r\n     token.refundTokens(msg.sender, tokensBought[msg.sender]);\r\n   }\r\n\r\n   /// @notice Buys the tokens for the specified tier and for the next one\r\n   /// @param amount The amount of ether paid to buy the tokens\r\n   /// @param tokensThisTier The limit of tokens of that tier\r\n   /// @param tierSelected The tier selected\r\n   /// @param _rate The rate used for that `tierSelected`\r\n   /// @return uint The total amount of tokens bought combining the tier prices\r\n   function calculateExcessTokens(\r\n      uint256 amount,\r\n      uint256 tokensThisTier,\r\n      uint256 tierSelected,\r\n      uint256 _rate\r\n   ) public returns(uint256 totalTokens) {\r\n      require(amount > 0 && tokensThisTier > 0 && _rate > 0);\r\n      require(tierSelected >= 1 && tierSelected <= 4);\r\n\r\n      uint weiThisTier = tokensThisTier.sub(tokensRaised).div(_rate);\r\n      uint weiNextTier = amount.sub(weiThisTier);\r\n      uint tokensNextTier = 0;\r\n      bool returnTokens = false;\r\n\r\n      // If there's excessive wei for the last tier, refund those\r\n      if(tierSelected != 4)\r\n         tokensNextTier = calculateTokensTier(weiNextTier, tierSelected.add(1));\r\n      else\r\n         returnTokens = true;\r\n\r\n      totalTokens = tokensThisTier.sub(tokensRaised).add(tokensNextTier);\r\n\r\n      // Do the transfer at the end\r\n      if(returnTokens) msg.sender.transfer(weiNextTier);\r\n   }\r\n\r\n   /// @notice Buys the tokens given the price of the tier one and the wei paid\r\n   /// @param weiPaid The amount of wei paid that will be used to buy tokens\r\n   /// @param tierSelected The tier that you'll use for thir purchase\r\n   /// @return calculatedTokens Returns how many tokens you've bought for that wei paid\r\n   function calculateTokensTier(uint256 weiPaid, uint256 tierSelected)\r\n        internal constant returns(uint256 calculatedTokens)\r\n   {\r\n      require(weiPaid > 0);\r\n      require(tierSelected >= 1 && tierSelected <= 4);\r\n\r\n      if(tierSelected == 1)\r\n         calculatedTokens = weiPaid.mul(rate);\r\n      else if(tierSelected == 2)\r\n         calculatedTokens = weiPaid.mul(rateTier2);\r\n      else if(tierSelected == 3)\r\n         calculatedTokens = weiPaid.mul(rateTier3);\r\n      else\r\n         calculatedTokens = weiPaid.mul(rateTier4);\r\n   }\r\n\r\n\r\n   /// @notice Checks if a purchase is considered valid\r\n   /// @return bool If the purchase is valid or not\r\n   function validPurchase() internal constant returns(bool) {\r\n      bool withinPeriod = now >= startTime && now <= endTime;\r\n      bool nonZeroPurchase = msg.value > 0;\r\n      bool withinTokenLimit = tokensRaised < maxTokensRaised;\r\n      bool minimumPurchase = msg.value >= minPurchase;\r\n      bool hasBalanceAvailable = crowdsaleBalances[msg.sender] < maxPurchase;\r\n\r\n      // We want to limit the gas to avoid giving priority to the biggest paying contributors\r\n      //bool limitGas = tx.gasprice <= limitGasPrice;\r\n\r\n      return withinPeriod && nonZeroPurchase && withinTokenLimit && minimumPurchase && hasBalanceAvailable;\r\n   }\r\n\r\n   /// @notice To see if the minimum goal of tokens of the ICO has been reached\r\n   /// @return bool True if the tokens raised are bigger than the goal or false otherwise\r\n   function goalReached() public constant returns(bool) {\r\n      return tokensRaised >= minimumGoal;\r\n   }\r\n\r\n   /// @notice Public function to check if the crowdsale has ended or not\r\n   function hasEnded() public constant returns(bool) {\r\n      return now > endTime || tokensRaised >= maxTokensRaised;\r\n   }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"close\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"enableRefunds\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"deposited\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"investor\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"investor\",\"type\":\"address\"}],\"name\":\"refund\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"}],\"payable\":false,\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Closed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"RefundsEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"weiAmount\",\"type\":\"uint256\"}],\"name\":\"Refunded\",\"type\":\"event\"}]","ContractName":"RefundVault","CompilerVersion":"v0.4.15+commit.bbb8e64f","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000883b218736535bb394c23914b5c0735a053d0ccf","Library":"","SwarmSource":"bzzr://a652032571bc3bc72ab51bc306a98b2a5f58fb5770df05fa3de6a6aa99ca3869"}]}