{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.15;\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Ownable {\r\n\r\n    //Variables\r\n    address public owner;\r\n\r\n    address public newOwner;\r\n\r\n    //    Modifiers\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    function Ownable() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param _newOwner The address to transfer ownership to.\r\n     */\r\n\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        require(_newOwner != address(0));\r\n        newOwner = _newOwner;\r\n    }\r\n\r\n    function acceptOwnership() public {\r\n        if (msg.sender == newOwner) {\r\n            owner = newOwner;\r\n        }\r\n    }\r\n}\r\n\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public constant returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract BasicToken is ERC20Basic {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) balances;\r\n\r\n    /**\r\n    * @dev transfer token for a specified address\r\n    * @param _to The address to transfer to.\r\n    * @param _value The amount to be transferred.\r\n    */\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[msg.sender]);\r\n\r\n        // SafeMath.sub will throw if there is not enough balance.\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the balance of the specified address.\r\n    * @param _owner The address to query the the balance of.\r\n    * @return An uint256 representing the amount owned by the passed address.\r\n    */\r\n    function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   */\r\n  function increaseApproval (address _spender, uint _addedValue) public returns (bool success) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  function decreaseApproval (address _spender, uint _subtractedValue) public returns (bool success) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\ncontract MintableToken is StandardToken, Ownable {\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\r\n    totalSupply = totalSupply.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    Mint(_to, _amount);\r\n    Transfer(0x0, _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() onlyOwner public returns (bool) {\r\n    mintingFinished = true;\r\n    MintFinished();\r\n    return true;\r\n  }\r\n}\r\n\r\ncontract LamdenTau is MintableToken {\r\n    string public constant name = \"Lamden Tau\";\r\n    string public constant symbol = \"TAU\";\r\n    uint8 public constant decimals = 18;\r\n}\r\n\r\ncontract Bounty is Ownable {\r\n\r\n   LamdenTau public lamdenTau;\r\n\r\n   function Bounty(address _tokenContractAddress) public {\r\n      require(_tokenContractAddress != address(0));\r\n      lamdenTau = LamdenTau(_tokenContractAddress);\r\n      \r\n      \r\n   }\r\n\r\n   function returnTokens() onlyOwner {\r\n      uint256 balance = lamdenTau.balanceOf(this);\r\n      lamdenTau.transfer(msg.sender, balance);\r\n   }\r\n\r\n   function issueTokens() onlyOwner  {\r\n      \r\n    lamdenTau.transfer(0x80fe4e411d71c2267b02b16ecff212b055b69f72, 2015886372192000000000);\r\n    lamdenTau.transfer(0x5cf8dae9365111f003228c3c65dd5c7bf1bd8a7d, 21368600000000000000000);\r\n    lamdenTau.transfer(0x5cf8dae9365111f003228c3c65dd5c7bf1bd8a7d, 470109200000000000000);\r\n    lamdenTau.transfer(0x5ea1211bfc0a4c331bc2a1da6a6d54632d5b7988, 42737200000000000000000);\r\n    lamdenTau.transfer(0xb904e4f91d2f1783d0bcd3b0cdba196c97b52775, 14958020000000000000000);\r\n    lamdenTau.transfer(0x934f93b3bcf09514ac51510770623b535646853f, 1495802000000000000000);\r\n    lamdenTau.transfer(0xfee34f6a86da7a059c4a6b37eb7001e7fcd05bd0, 2136860000000000000000);\r\n    lamdenTau.transfer(0x580611612561cf54c8bac62944583b80f8a1ee02, 2136860000000000000000);\r\n    lamdenTau.transfer(0x3de0ab58f60befe899eab97936c8d8aa19ef4167, 427372000000000000000);\r\n    lamdenTau.transfer(0x3de0ab58f60befe899eab97936c8d8aa19ef4167, 106843000000000000000);\r\n    lamdenTau.transfer(0x3de0ab58f60befe899eab97936c8d8aa19ef4167, 40878131800000000000000);\r\n    lamdenTau.transfer(0xff604b976f328af07144b61e8d42f5d41bec64ba, 36326620000000000000000);\r\n    lamdenTau.transfer(0x0572a99f654cb6711a36596aba4f3caff5527654, 106707095704000000000000);\r\n    lamdenTau.transfer(0x555b0751e54d3c7babf7f4c8c1f24736e4ddf852, 491477800000000000000);\r\n    lamdenTau.transfer(0xc829065688c333aa424dc1a19ec1b1420f4cc80e, 8547440000000000000000);\r\n    lamdenTau.transfer(0xc829065688c333aa424dc1a19ec1b1420f4cc80e, 8547440000000000000000);\r\n    lamdenTau.transfer(0x465cbaf3325e4db504f636ab9ceb356b2ddaf235, 4060034000000000000000);\r\n    lamdenTau.transfer(0x8db673555a030bc6376f874ca71cda8e3963932b, 2742980339000000000000);\r\n    lamdenTau.transfer(0x7012eda9bfb50776e9a2464a94bbf01b76a9229d, 21368600000000000000000);\r\n    lamdenTau.transfer(0xad4df05875ac0b1bc6680eeacb71b3a1c8f6b4e1, 35226137100000000000000);\r\n    lamdenTau.transfer(0x28f2de29d0f202ddd8a617e6ba6974dc28df1036, 4273720000000000000000);\r\n    lamdenTau.transfer(0xf09d3b81dcec32c88b8abe377084085551a26db7, 21368600000000000000);\r\n    lamdenTau.transfer(0xf09d3b81dcec32c88b8abe377084085551a26db7, 21368600000000000000);\r\n    lamdenTau.transfer(0xf09d3b81dcec32c88b8abe377084085551a26db7, 213686000000000000000);\r\n    lamdenTau.transfer(0x17499875a7066c51e6eaa4b417be0559a0641589, 427372000000000000000);\r\n    lamdenTau.transfer(0x17499875a7066c51e6eaa4b417be0559a0641589, 427372000000000000000);\r\n    lamdenTau.transfer(0xc694bdc55690a1f40588085b24dd4fa43ab313df, 5342150000000000000000);\r\n    lamdenTau.transfer(0x9cf947c47fb8e83006233d6b5f1d7f0e8cedaacc, 21368600000000000000000);\r\n    lamdenTau.transfer(0x149190afde7092109f822bb4f27a67439e9369a1, 6410580000000000000000);\r\n    lamdenTau.transfer(0x72a64c655379e0fcb081fc191d9e6460653dd0c6, 21368600000000000000000);\r\n    lamdenTau.transfer(0xfb707e72f55719d190c1c96b0ae35fcf0e10cbb2, 21154914000000000000000);\r\n    lamdenTau.transfer(0xfb040c90ebbd24433e3bfe5f8130c706b0af5ca3, 64105800000000000000000);\r\n    lamdenTau.transfer(0x73130abcf3f0570459cf0d9e5c024730c67a525a, 23804620400000000000000);\r\n    lamdenTau.transfer(0x3d96f33fab5564b8e52f70b2d4b93c25d7db6e83, 2908044256338360000000);\r\n    lamdenTau.transfer(0x4988cf353f965b79f785fcdb3bce95c870f8b77d, 20402931597400000000000);\r\n    lamdenTau.transfer(0x27ef65cc19f2ac8b95c62688523cc02874584268, 106843000000000000000000);\r\n    lamdenTau.transfer(0x27ef65cc19f2ac8b95c62688523cc02874584268, 106843000000000000000000);\r\n    lamdenTau.transfer(0x4299ead0ce09511904eb42447b8829f23c9bc909, 53100971000000000000000);\r\n    lamdenTau.transfer(0x0c4162f4259b3912af4965273a3a85693fc48d67, 22009658000000000000000);\r\n    lamdenTau.transfer(0xc694bdc55690a1f40588085b24dd4fa43ab313df, 16026450000000000000000);\r\n    lamdenTau.transfer(0x1567a54b183db26b32f751bf836cbaf1022d61bc, 2136860000000000000000);\r\n    lamdenTau.transfer(0x3410e132ece7eb6b8218f492cdcdf3dda2f30c6a, 64105800000000000000000);\r\n    lamdenTau.transfer(0xbf47ac5bfdef5b32c2d255a33b421a99d4b2dc63, 192317400000000000000000);\r\n    lamdenTau.transfer(0xf9d0a651d4f23d9c3c3523f3d27a15a517e14b12, 64105800000000000000000);\r\n    lamdenTau.transfer(0x0943f033191619c64e7f92f85c9ecae3165d4bf6, 10684300000000000000000);\r\n    lamdenTau.transfer(0x0943f033191619c64e7f92f85c9ecae3165d4bf6, 21368600000000000000000);\r\n    lamdenTau.transfer(0x9beb089842e82f4d8ecf75cb5f36b461b452a93d, 2136860000000000000000);\r\n    lamdenTau.transfer(0x8b2d9cd05452f9778c1b2799ddd6fda4d21d19aa, 5342150000000000000000);\r\n    lamdenTau.transfer(0x3272786f65f2f460a1c031628905bcb5f6be7578, 523530700000000000000000);\r\n    lamdenTau.transfer(0x3272786f65f2f460a1c031628905bcb5f6be7578, 523530700000000000000000);\r\n\r\n      uint256 balance = lamdenTau.balanceOf(this);\r\n      lamdenTau.transfer(msg.sender, balance);\r\n   }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"lamdenTau\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"issueTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"returnTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tokenContractAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"Bounty","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000c27a2f05fa577a83ba0fdb4c38443c0718356501","Library":"","SwarmSource":"bzzr://416e667564b3d53104baa5bf87554fcc4a43b9aacfa0ef130a58fcd5df1cc227"}]}