{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.15;\r\n\r\n// File: contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n * Based on OpenZeppelin\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n * Based on OpenZeppelin\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/ownership/Claimable.sol\r\n\r\n/**\r\n * @title Claimable\r\n * @dev Extension for the Ownable contract, where the ownership needs to be claimed.\r\n * This allows the new owner to accept the transfer.\r\n * Based on OpenZeppelin\r\n */\r\ncontract Claimable is Ownable {\r\n    address public pendingOwner;\r\n\r\n    /**\r\n     * @dev Modifier throws if called by any account other than the pendingOwner.\r\n     */\r\n    modifier onlyPendingOwner() {\r\n        require(msg.sender == pendingOwner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to set the pendingOwner address.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) onlyOwner public {\r\n        pendingOwner = newOwner;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the pendingOwner address to finalize the transfer.\r\n     */\r\n    function claimOwnership() onlyPendingOwner public {\r\n        OwnershipTransferred(owner, pendingOwner);\r\n        owner = pendingOwner;\r\n        pendingOwner = address(0);\r\n    }\r\n}\r\n\r\n// File: contracts/token/ERC20Basic.sol\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n *\r\n * Based on OpenZeppelin\r\n */\r\ncontract ERC20Basic {\r\n    uint256 public totalSupply;\r\n    function balanceOf(address who) public constant returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// File: contracts/token/ERC20.sol\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n *\r\n * Based on OpenZeppelin\r\n */\r\n\r\ncontract ERC20 is ERC20Basic {\r\n    function allowance(address owner, address spender) public constant returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/token/ReleasableToken.sol\r\n\r\n/**\r\n * Define interface for releasing the token transfer after a successful crowdsale.\r\n *\r\n */\r\ncontract ReleasableToken is ERC20, Claimable {\r\n\r\n    /* The finalizer contract that allows unlift the transfer limits on this token */\r\n    address public releaseAgent;\r\n\r\n    /** A crowdsale contract can release us to the wild if ICO success. If false we are are in transfer lock up period.*/\r\n    bool public released = false;\r\n\r\n    /** Map of agents that are allowed to transfer tokens regardless of the lock down period. These are crowdsale contracts and possible the team multisig itself. */\r\n    mapping (address => bool) public transferAgents;\r\n\r\n    /**\r\n     * Limit token transfer until the crowdsale is over.\r\n     *\r\n     */\r\n    modifier canTransfer(address _sender) {\r\n        if(!released) {\r\n            assert(transferAgents[_sender]);\r\n        }\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * Set the contract that can call release and make the token transferable.\r\n     *\r\n     * Design choice. Allow reset the release agent to fix fat finger mistakes.\r\n     */\r\n    function setReleaseAgent(address addr) onlyOwner inReleaseState(false) public {\r\n        require(addr != 0x0);\r\n        // We don't do interface check here as we might want to a normal wallet address to act as a release agent\r\n        releaseAgent = addr;\r\n    }\r\n\r\n    /**\r\n     * Owner can allow a particular address (a crowdsale contract) to transfer tokens despite the lock up period.\r\n     */\r\n    function setTransferAgent(address addr, bool state) onlyOwner inReleaseState(false) public {\r\n        require(addr != 0x0);\r\n        transferAgents[addr] = state;\r\n    }\r\n\r\n    /**\r\n     * One way function to release the tokens to the wild.\r\n     *\r\n     * Can be called only from the release agent that is the final ICO contract. It is only called if the crowdsale has been success (first milestone reached).\r\n     */\r\n    function releaseTokenTransfer() public onlyReleaseAgent {\r\n        released = true;\r\n    }\r\n\r\n    /** The function can be called only before or after the tokens have been releasesd */\r\n    modifier inReleaseState(bool releaseState) {\r\n        require(releaseState == released);\r\n        _;\r\n    }\r\n\r\n    /** The function can be called only by a whitelisted release agent. */\r\n    modifier onlyReleaseAgent() {\r\n        require(msg.sender == releaseAgent);\r\n        _;\r\n    }\r\n\r\n    function transfer(address _to, uint _value) canTransfer(msg.sender) returns (bool success) {\r\n        // Call StandardToken.transfer()\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint _value) canTransfer(_from) returns (bool success) {\r\n        // Call StandardToken.transferForm()\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/crowdsale/FinalizeAgent.sol\r\n\r\n/**\r\n * @title Finalize Agent Abstract Contract\r\n * Finalize agent defines what happens at the end of successful crowdsale.\r\n */\r\ncontract FinalizeAgent {\r\n\r\n  function isFinalizeAgent() public constant returns(bool) {\r\n    return true;\r\n  }\r\n\r\n  function isSane() public constant returns (bool);\r\n\r\n  function finalizeCrowdsale();\r\n\r\n}\r\n\r\n// File: contracts/crowdsale/FinalizeCrowdsale.sol\r\n\r\ncontract FinalizeCrowdsale {\r\n    FinalizeAgent public finalizeAgent;\r\n}\r\n\r\n// File: contracts/crowdsale/AlgoryFinalizeAgent.sol\r\n\r\n/**\r\n * @title Algory Finalize Agent\r\n *\r\n * @dev based on TokenMarketNet\r\n *\r\n * Apache License, version 2.0 https://github.com/AlgoryProject/algory-ico/blob/master/LICENSE\r\n */\r\ncontract AlgoryFinalizeAgent is FinalizeAgent {\r\n\r\n    using SafeMath for uint;\r\n\r\n    ReleasableToken public token;\r\n    FinalizeCrowdsale public crowdsale;\r\n\r\n    function AlgoryFinalizeAgent(ReleasableToken _token, FinalizeCrowdsale _crowdsale) {\r\n        require(address(_token) != 0x0 && address(_crowdsale) != 0x0);\r\n        token = _token;\r\n        crowdsale = _crowdsale;\r\n    }\r\n\r\n    function isSane() public constant returns (bool) {\r\n        return token.releaseAgent() == address(this) && crowdsale.finalizeAgent() == address(this);\r\n    }\r\n\r\n    function finalizeCrowdsale() public {\r\n        require(msg.sender == address(crowdsale));\r\n\r\n        // Make token transferable\r\n        token.releaseTokenTransfer();\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"finalizeCrowdsale\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isFinalizeAgent\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isSane\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsale\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_crowdsale\",\"type\":\"address\"}],\"payable\":false,\"type\":\"constructor\"}]","ContractName":"AlgoryFinalizeAgent","CompilerVersion":"v0.4.15+commit.bbb8e64f","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000016b0a1a87ae8af5c792fabc429c4fe248834842b000000000000000000000000ee3e4e2467c0c5aa7b7d944881d51ccb36fefcca","Library":"","SwarmSource":"bzzr://77d5c04830bea16d8fc89a5f6de4cb94d286371a14e2a9562d9d3b27cbfb0f02"}]}