{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract OwnableExtended {\r\n  address public owner;\r\n  address public admin;\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function OwnableExtended() {\r\n    owner = msg.sender;\r\n    admin = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner or admin.\r\n   */\r\n  modifier onlyAdmin() {\r\n    require(msg.sender == owner || msg.sender == admin);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner {\r\n    if (newOwner != address(0)) {\r\n      owner = newOwner;\r\n    }\r\n  }\r\n\r\n  /**\r\n  * @dev Allows the current owner to change admin of the contract\r\n  * @param newAdmin The new admin address\r\n  */\r\n  function changeAdmin(address newAdmin) onlyOwner {\r\n    if (newAdmin != address(0)) {\r\n      admin = newAdmin;\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract iChampion {\r\n    uint256 public currentGameBlockNumber;\r\n\r\n    function buyTicket(address) returns (uint256, uint256) {}\r\n    function startGame() returns (bool) {}\r\n    function finishCurrentGame() returns (address) {}\r\n    function setGamePrize(uint256, uint256) {}\r\n}\r\n\r\ncontract Ottolotto is OwnableExtended {\r\n    using SafeMath for uint256;\r\n    using SafeMath for uint8;\r\n    \r\n    event StartedGame(uint256 indexed _game, uint256 _nextGame);\r\n    event GameProgress(uint256 indexed _game, uint256 _processed, uint256 _toProcess);\r\n    event Ticket(uint256 indexed _game, address indexed _address, bytes3 bet);\r\n    event Win(address indexed _address, uint256 indexed _game, uint256 _matches, uint256 _amount, uint256 _time);\r\n    event Jackpot(address indexed _address, uint256 indexed _game, uint256 _amount, uint256 _time);\r\n    event RaisedByPartner(address indexed _partner, uint256 _game, uint256 _amount, uint256 _time);\r\n    event ChampionGameStarted(uint256 indexed _game, uint256 _time);\r\n    event ChampionGameFinished(uint256 indexed _game, address indexed _winner, uint256 _amount, uint256 _time);\r\n\r\n    struct Winner {\r\n        address player;\r\n        bytes3  bet;\r\n        uint8   matches;\r\n    }\r\n    \r\n    struct Bet {\r\n        address player;\r\n        bytes3  bet;\r\n    }\r\n\r\n    struct TicketBet {\r\n        bytes3  bet;\r\n        bool    isPayed;\r\n    }\r\n\r\n    iChampion public champion;\r\n\r\n    mapping(address => mapping(uint256 => TicketBet[])) tickets;\r\n    mapping(uint256 => Bet[]) gameBets;\r\n    mapping(uint256 => Winner[]) winners;\r\n    mapping(uint256 => uint256) weiRaised;\r\n    mapping(uint256 => uint256) gameStartBlock;\r\n    mapping(uint256 => uint32[7]) gameStats;\r\n    mapping(uint256 => bool) gameCalculated;\r\n    mapping(uint256 => uint256) gameCalculationProgress;\r\n    mapping(uint8 => uint8) percents;\r\n    mapping(address => address) partner;\r\n    mapping(address => address[]) partners;\r\n\r\n    uint256[] public allGames;\r\n\r\n    uint256 public jackpot;\r\n    \r\n    uint256 public gameNext;\r\n    uint256 public gamePlayed;  \r\n    uint8   public gameDuration = 6;\r\n\r\n    bool public gamePlayedStatus = false;\r\n    \r\n    uint256 public ticketPrice = 0.001 ether;\r\n    uint256 public newPrice = 0 ether;\r\n    \r\n    function Ottolotto() {}\r\n    \r\n    function init(address _champion) onlyOwner {\r\n        require(gameNext == 0);\r\n        gameNext = block.number;\r\n        \r\n        percents[1] = 5;\r\n        percents[2] = 8;\r\n        percents[3] = 12;\r\n        percents[4] = 15;\r\n        percents[5] = 25;\r\n        percents[6] = 35;\r\n\r\n        champion = iChampion(_champion);\r\n    }\r\n\r\n    function getLastGames() constant returns (uint256[10] lastGames) {\r\n        uint256 j = 0;\r\n        for (uint256 i = allGames.length - 11; i < allGames.length; i++) {\r\n            lastGames[j] = allGames[i];\r\n            j++;\r\n        }\r\n\r\n        return lastGames;\r\n    }\r\n\r\n    function getGamePrize(uint256 _game)\r\n            constant returns (uint256) {\r\n        return weiRaised[_game];            \r\n    }\r\n    \r\n    function getGameStartBlock(uint256 _game) \r\n            constant returns (uint256) {\r\n        return gameStartBlock[_game];\r\n    }\r\n    \r\n    function getGameCalculationProgress(uint256 _game) \r\n            constant returns (uint256) {\r\n        return gameCalculationProgress[_game];\r\n    }\r\n\r\n    function getPlayersCount(uint256 _game)\r\n            constant returns (uint256) {\r\n        return gameBets[_game].length;\r\n    }\r\n\r\n    function getGameCalculatedStats(uint256 _game)\r\n            constant returns (uint32[7]) {\r\n        return gameStats[_game];\r\n    }\r\n\r\n    function getPartner(address _player) constant returns (address) {\r\n        return partner[_player];\r\n    }\r\n\r\n    function getPartners(address _player) \r\n            constant returns (address[]) {\r\n        return partners[_player];\r\n    }\r\n\r\n    function getBet(address _player, uint256 _game) \r\n        constant returns (bytes3[]) {\r\n        bytes3[] memory bets = new bytes3[](tickets[_player][_game].length);\r\n        for (uint32 i = 0; i < tickets[_player][_game].length; i++) {\r\n            bets[i] = tickets[_player][_game][i].bet;\r\n        }        \r\n        return bets;\r\n    }\r\n\r\n    function getWinners(uint256 _game) \r\n            constant returns (address[]) {\r\n        address[] memory _winners = new address[](winners[_game].length);\r\n        for (uint32 i = 0; i < winners[_game].length; i++) {\r\n            _winners[i] = winners[_game][i].player;\r\n        }\r\n        return _winners;\r\n    }\r\n\r\n    function betsArePayed(address _player, uint256 _game) constant returns (bool) {\r\n        uint256 startBlock = getGameStartBlock(_game);\r\n        for (uint16 i = 0; i < tickets[_player][_game].length; i++) {\r\n            if (tickets[_player][_game][i].isPayed == false) {\r\n                uint8 matches = getMatches(startBlock, tickets[_player][_game][i].bet);\r\n                if (matches > 0) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function getGameBlocks(uint256 _game) \r\n            constant returns(bytes32[]) {\r\n        uint256 startBlock = getGameStartBlock(_game);\r\n        bytes32[] memory blocks = new bytes32[](6);\r\n        uint8 num = 0;\r\n        for (startBlock; startBlock + num <= startBlock + gameDuration - 1; num++) {\r\n            blocks[num] = block.blockhash(startBlock + num);\r\n        }\r\n        \r\n        return blocks;\r\n    }\r\n    \r\n    function toBytes(uint8 n1, uint8 n2, uint8 n3, uint8 n4, uint8 n5, uint8 n6) \r\n            internal constant returns (bytes3) {\r\n        return bytes3(16**5*n1+16**4*n2+16**3*n3+16**2*n4+16**1*n5+n6);\r\n    }\r\n    \r\n    function modifyBet(bytes32 _bet, uint256 _step) \r\n            internal constant returns (bytes32) {\r\n        return _bet >> (232 + (_step * 4 - 4)) << 252 >> 252;\r\n    }\r\n\r\n    function modifyBlock(uint256 _blockNumber) \r\n            internal constant returns (bytes32) {\r\n        return block.blockhash(_blockNumber) << 252 >> 252;\r\n    }\r\n    \r\n    function equalNumber(bytes32 _bet, uint256 _game, uint256 _endBlock) \r\n            internal constant returns (bool) {\r\n        uint256 step = _endBlock - _game;\r\n        if (modifyBlock(_game) ^ modifyBet(_bet, step) == 0) {\r\n            return true;\r\n        }\r\n        \r\n        return false;\r\n    }\r\n    \r\n    function makeBet(uint8 n1, uint8 n2, uint8 n3, uint8 n4, uint8 n5, uint8 n6, address _partner) \r\n            payable returns (bool) {\r\n        require(msg.value == ticketPrice);\r\n                \r\n        bytes3 uBet = toBytes(n1, n2, n3, n4, n5, n6);\r\n        Bet memory pBet = Bet({player: msg.sender, bet: uBet});\r\n        TicketBet memory tBet = TicketBet({bet: uBet, isPayed: false});\r\n\r\n        tickets[msg.sender][gameNext].push(tBet);\r\n        gameBets[gameNext].push(pBet);\r\n        \r\n        weiRaised[gameNext] += ticketPrice;\r\n        \r\n        Ticket(gameNext, msg.sender, uBet);\r\n\r\n        champion.buyTicket(msg.sender);\r\n\r\n        if (_partner != 0x0 && partner[msg.sender] == 0x0) {\r\n            addPartner(_partner, msg.sender);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function startGame() onlyAdmin returns (bool) {\r\n        gamePlayed = gameNext;\r\n        gameNext = block.number;\r\n        gamePlayedStatus = true;\r\n\r\n        gameStartBlock[gamePlayed] = gameNext + gameDuration;\r\n\r\n\r\n        jackpot += weiRaised[gamePlayed].mul(percents[6]).div(100);\r\n        StartedGame(gamePlayed, gameNext);\r\n        \r\n        if (newPrice != 0) {\r\n            ticketPrice = newPrice;\r\n            newPrice = 0;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function getMatches(uint256 _game, bytes3 _bet) \r\n            constant returns (uint8) {\r\n        bytes32 bet = bytes32(_bet);\r\n        uint256 endBlock = _game + gameDuration;\r\n        uint8 matches = 0;\r\n        for (; endBlock > _game; _game++) {\r\n            if (equalNumber(bet, _game, endBlock)) {\r\n                matches++;\r\n                continue;\r\n            }\r\n            break;\r\n        }\r\n        \r\n        return matches;\r\n    }\r\n        \r\n    function getAllMatches(uint256 _game) \r\n            constant returns (uint256[]) {\r\n        uint256 startBlock = getGameStartBlock(_game);\r\n        uint256[] memory matches = new uint256[](7);\r\n        for (uint32 i = 0; i < gameBets[_game].length; i++) {\r\n            Bet memory bet = gameBets[_game][i];\r\n            uint8 matched = getMatches(startBlock, bet.bet);\r\n            if (matched == 0) {\r\n                continue;\r\n            }\r\n            (matched == 1) ? matches[1] += 1 : \r\n            (matched == 2) ? matches[2] += 1 : \r\n            (matched == 3) ? matches[3] += 1 : \r\n            (matched == 4) ? matches[4] += 1 :\r\n            (matched == 5) ? matches[5] += 1 :\r\n            (matched == 6) ? matches[6] += 1 : matches[6] += 0;\r\n        }\r\n        \r\n        return matches;\r\n    }\r\n\r\n    function gameIsOver(uint256 _game) \r\n            constant returns (bool) {\r\n        if (gameStartBlock[_game] == 0) {\r\n            return false;\r\n        }\r\n\r\n        return (gameStartBlock[_game] + gameDuration - 1) < block.number;   \r\n    }\r\n\r\n    function gameIsCalculated(uint256 _game)\r\n            constant returns (bool) {\r\n        return gameCalculated[_game];\r\n    }\r\n\r\n    function updateGameToCalculated(uint256 _game) internal {\r\n        allGames.push(_game);\r\n        gameCalculated[_game] = true;\r\n        gamePlayedStatus = false;\r\n    }\r\n\r\n    function processGame(uint256 _game, uint256 calculationStep) returns (bool) {\r\n        require(gamePlayedStatus == true);\r\n        require(gameIsOver(_game));\r\n\r\n        if (gameIsCalculated(_game)) {\r\n            return true;\r\n        }\r\n\r\n\r\n        if (gameCalculationProgress[_game] == gameBets[_game].length) {\r\n            updateGameToCalculated(_game);\r\n            return true;\r\n        } \r\n\r\n        uint256 steps = calculationStep;\r\n        if (gameCalculationProgress[_game] + steps > gameBets[_game].length) {\r\n            steps -= gameCalculationProgress[_game] + steps - gameBets[_game].length;\r\n        }\r\n    \r\n        uint32[] memory matches = new uint32[](7);\r\n        uint256 to = gameCalculationProgress[_game] + steps;\r\n        uint256 startBlock = getGameStartBlock(_game);\r\n        for (; gameCalculationProgress[_game] < to; gameCalculationProgress[_game]++) {\r\n            Bet memory bet = gameBets[_game][gameCalculationProgress[_game]];\r\n            uint8 matched = getMatches(startBlock, bet.bet);\r\n            if (matched == 0) {\r\n                continue;\r\n            }\r\n            (matched == 1) ? matches[1] += 1 : \r\n            (matched == 2) ? matches[2] += 1 : \r\n            (matched == 3) ? matches[3] += 1 : \r\n            (matched == 4) ? matches[4] += 1 :\r\n            (matched == 5) ? matches[5] += 1 :\r\n            (matched == 6) ? matches[6] += 1 : gameStats[_game][6];\r\n        }\r\n\r\n        for (uint8 i = 1; i <= 6; i++) {\r\n            gameStats[_game][i] += matches[i];\r\n        }\r\n\r\n        GameProgress(_game, gameCalculationProgress[_game], gameBets[_game].length);\r\n        if (gameCalculationProgress[_game] == gameBets[_game].length) {\r\n            updateGameToCalculated(_game);\r\n            distributeRaisedWeiToJackpot(_game);\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    function distributeRaisedWeiToJackpot(uint256 _game) internal {\r\n        for (uint8 i = 1; i <= 5; i ++) {\r\n            if (gameStats[_game][i] == 0) {\r\n                jackpot += weiRaised[_game].mul(percents[i]).div(100);\r\n            }\r\n        }\r\n    }\r\n\r\n    function changeTicketPrice(uint256 _newPrice) onlyAdmin {\r\n        newPrice = _newPrice * 1000000000000000000;\r\n    }\r\n\r\n    function distributeFunds(uint256 weiWin, uint256 _game, uint8 matched, address _player) \r\n            internal {\r\n        uint256 toOwner = weiWin.div(5);\r\n        uint256 toPartner = 0;\r\n\r\n        if (partner[_player] != 0x0) {\r\n            toPartner = toOwner.mul(5).div(100);\r\n            partner[_player].transfer(toPartner);\r\n            RaisedByPartner(_player, _game, toPartner, now);\r\n        }\r\n\r\n        _player.transfer(weiWin - toOwner);\r\n        owner.transfer(toOwner - toPartner);\r\n\r\n        Win(_player, _game, matched, weiWin, now);\r\n        if (matched == 6) {\r\n            Jackpot(_player, _game, weiWin, now);\r\n        }\r\n    }\r\n\r\n    function getPrize(address _player, uint256 _game, bytes3 _bet, uint16 _index) \r\n            returns (bool) {\r\n        TicketBet memory ticket = tickets[_player][_game][_index];\r\n\r\n        if (ticket.isPayed || ticket.bet != _bet) {\r\n            return false;\r\n        }\r\n        \r\n        uint256 startBlock = getGameStartBlock(_game);\r\n        uint8 matched = getMatches(startBlock, ticket.bet);\r\n        if (matched == 0) {\r\n            return false;\r\n        }\r\n\r\n        uint256 weiWin = 0;\r\n        if (matched != 6) {\r\n            uint256 weiByMatch = weiRaised[gamePlayed].mul(percents[matched]).div(100);\r\n            weiWin = weiByMatch.div(gameStats[_game][matched]);\r\n        } else {\r\n            weiWin = jackpot.div(gameStats[_game][matched]);\r\n            jackpot -= weiWin;\r\n        }\r\n        \r\n        distributeFunds(weiWin, _game, matched, _player);\r\n\r\n        ticket.isPayed = true;\r\n        tickets[_player][_game][_index] = ticket;\r\n\r\n        winners[gamePlayed].push(Winner({\r\n            player: _player,\r\n            bet: ticket.bet,\r\n            matches: matched\r\n        }));\r\n\r\n        return true;\r\n    }\r\n\r\n    function addPartner(address _partner, address _player) \r\n            internal returns (bool) {\r\n        if (partner[_player] != 0x0) {\r\n            return false;\r\n        }\r\n\r\n        partner[_player] = _partner;\r\n        partners[_partner].push(_player);\r\n\r\n        return true;\r\n    }\r\n\r\n    function startChampionGame() onlyAdmin {\r\n        champion.startGame();\r\n\r\n        uint256 currentGame = champion.currentGameBlockNumber();\r\n        ChampionGameStarted(currentGame, now);\r\n    }\r\n\r\n    function finishChampionGame() onlyAdmin {\r\n        uint256 currentGame = champion.currentGameBlockNumber();\r\n        \r\n        address winner = champion.finishCurrentGame();\r\n        require(winner != 0x0);\r\n\r\n        champion.setGamePrize(currentGame, jackpot);\r\n\r\n        winner.transfer(jackpot - jackpot.div(5));\r\n        owner.transfer(jackpot.div(5));\r\n\r\n        ChampionGameFinished(currentGame, winner, jackpot, now);\r\n\r\n        jackpot = 0;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"ticketPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_champion\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startChampionGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_game\",\"type\":\"uint256\"}],\"name\":\"getGameCalculationProgress\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"champion\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newPrice\",\"type\":\"uint256\"}],\"name\":\"changeTicketPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gamePlayedStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_game\",\"type\":\"uint256\"}],\"name\":\"getGameStartBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_game\",\"type\":\"uint256\"}],\"name\":\"gameIsCalculated\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_game\",\"type\":\"uint256\"}],\"name\":\"getWinners\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"jackpot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLastGames\",\"outputs\":[{\"name\":\"lastGames\",\"type\":\"uint256[10]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_game\",\"type\":\"uint256\"}],\"name\":\"getGameBlocks\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishChampionGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_player\",\"type\":\"address\"},{\"name\":\"_game\",\"type\":\"uint256\"}],\"name\":\"getBet\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes3[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_player\",\"type\":\"address\"},{\"name\":\"_game\",\"type\":\"uint256\"}],\"name\":\"betsArePayed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_game\",\"type\":\"uint256\"}],\"name\":\"gameIsOver\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"n1\",\"type\":\"uint8\"},{\"name\":\"n2\",\"type\":\"uint8\"},{\"name\":\"n3\",\"type\":\"uint8\"},{\"name\":\"n4\",\"type\":\"uint8\"},{\"name\":\"n5\",\"type\":\"uint8\"},{\"name\":\"n6\",\"type\":\"uint8\"},{\"name\":\"_partner\",\"type\":\"address\"}],\"name\":\"makeBet\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gameNext\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_player\",\"type\":\"address\"}],\"name\":\"getPartners\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allGames\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_player\",\"type\":\"address\"},{\"name\":\"_game\",\"type\":\"uint256\"},{\"name\":\"_bet\",\"type\":\"bytes3\"},{\"name\":\"_index\",\"type\":\"uint16\"}],\"name\":\"getPrize\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_game\",\"type\":\"uint256\"},{\"name\":\"_bet\",\"type\":\"bytes3\"}],\"name\":\"getMatches\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gamePlayed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_game\",\"type\":\"uint256\"},{\"name\":\"calculationStep\",\"type\":\"uint256\"}],\"name\":\"processGame\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_game\",\"type\":\"uint256\"}],\"name\":\"getGameCalculatedStats\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32[7]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_player\",\"type\":\"address\"}],\"name\":\"getPartner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startGame\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gameDuration\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_game\",\"type\":\"uint256\"}],\"name\":\"getGamePrize\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_game\",\"type\":\"uint256\"}],\"name\":\"getPlayersCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_game\",\"type\":\"uint256\"}],\"name\":\"getAllMatches\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_game\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_nextGame\",\"type\":\"uint256\"}],\"name\":\"StartedGame\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_game\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_processed\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_toProcess\",\"type\":\"uint256\"}],\"name\":\"GameProgress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_game\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"bet\",\"type\":\"bytes3\"}],\"name\":\"Ticket\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_game\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_matches\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"Win\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_game\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"Jackpot\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_partner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_game\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"RaisedByPartner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_game\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"ChampionGameStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_game\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_winner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"ChampionGameFinished\",\"type\":\"event\"}]","ContractName":"Ottolotto","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://4a182b0fb7b35d858fad6ef1870978102b8071735152845d4f1a34dac09e8532"}]}