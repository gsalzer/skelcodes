{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address owner;\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    function Ownable() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner == msg.sender);\r\n        _;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Secret Note\r\n */\r\ncontract SecretNote is Ownable {\r\n    struct UserInfo {\r\n        mapping(bytes32 => bytes32) notes;\r\n        bytes32[] noteKeys;\r\n        uint256 index; // 1-based\r\n    }\r\n\r\n    mapping(address => UserInfo) private registerUsers;\r\n    address[] private userIndex;\r\n\r\n    event SecretNoteUpdated(address indexed _sender, bytes32 indexed _noteKey, bool _success);\r\n\r\n    function SecretNote() public {\r\n    }\r\n\r\n    function userExisted(address _user) public constant returns (bool) {\r\n        if (userIndex.length == 0) {\r\n            return false;\r\n        }\r\n\r\n        return (userIndex[registerUsers[_user].index - 1] == _user);\r\n    }\r\n\r\n    function () public payable {\r\n    }\r\n\r\n    /**\r\n     * @dev for owner to withdraw ETH from donators if there is any.  :)\r\n     * @param _to The address where withdraw to\r\n     * @param _amount The amount of ETH to withdraw\r\n     */\r\n    function withdraw(address _to, uint _amount) public onlyOwner {\r\n        _to.transfer(_amount);\r\n    }\r\n\r\n    /**\r\n     * @dev For owner to check registered user count\r\n     */\r\n    function getUserCount() public view onlyOwner returns (uint256) {\r\n        return userIndex.length;\r\n    }\r\n\r\n    /**\r\n     * @dev For owner to check registered user address based on index\r\n     * @param _index Starting from 1\r\n     */\r\n    function getUserAddress(uint256 _index) public view onlyOwner returns (address) {\r\n        require(_index > 0);\r\n        return userIndex[_index - 1];\r\n    }\r\n\r\n    /**\r\n     * @dev For user to get their own secret note\r\n     * @param _noteKey The key identifier for particular note\r\n     */\r\n    function getNote(bytes32 _noteKey) public view returns (bytes32) {\r\n        return registerUsers[msg.sender].notes[_noteKey];\r\n    }\r\n\r\n    /**\r\n     * @dev For user to get their own secret note keys count\r\n     */\r\n    function getNoteKeysCount() public view returns (uint256) {\r\n        return registerUsers[msg.sender].noteKeys.length;\r\n    }\r\n\r\n    /**\r\n     * @dev For user to get their own secret note key by index\r\n     * @param _index The 0-based index for particular note\r\n     */\r\n    function getNoteKeyByIndex(uint256 _index) public view returns (bytes32) {\r\n        return registerUsers[msg.sender].noteKeys[_index];\r\n    }\r\n\r\n    /**\r\n     * @dev For user to update their own secret note\r\n     * @param _noteKey The key identifier for particular note\r\n     * @param _content The note path hash\r\n     */\r\n    function setNote(bytes32 _noteKey, bytes32 _content) public payable {\r\n        require(_noteKey != \"\");\r\n        require(_content != \"\");\r\n\r\n        var userAddr = msg.sender;\r\n        var user = registerUsers[userAddr];\r\n        if (user.notes[_noteKey] == \"\") {\r\n            user.noteKeys.push(_noteKey);\r\n        }\r\n        user.notes[_noteKey] = _content;\r\n\r\n        if (user.index == 0) {\r\n            userIndex.push(userAddr);\r\n            user.index = userIndex.length;\r\n        }\r\n        SecretNoteUpdated(userAddr, _noteKey, true);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroy one's account\r\n     */\r\n    function destroyAccount() public returns (bool) {\r\n        var userAddr = msg.sender;\r\n        require(userExisted(userAddr));\r\n\r\n        uint delIndex = registerUsers[userAddr].index;\r\n        address userToMove = userIndex[userIndex.length - 1];\r\n\r\n        if (userToMove == userAddr) {\r\n            delete(registerUsers[userAddr]);\r\n            userIndex.length = 0;\r\n            return true;\r\n        }\r\n\r\n        userIndex[delIndex - 1] = userToMove;\r\n        registerUsers[userToMove].index = delIndex;\r\n        userIndex.length--;\r\n        delete(registerUsers[userAddr]);\r\n        return true;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getNoteKeyByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getNoteKeysCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"userExisted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_noteKey\",\"type\":\"bytes32\"},{\"name\":\"_content\",\"type\":\"bytes32\"}],\"name\":\"setNote\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getUserAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_noteKey\",\"type\":\"bytes32\"}],\"name\":\"getNote\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getUserCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"destroyAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_noteKey\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_success\",\"type\":\"bool\"}],\"name\":\"SecretNoteUpdated\",\"type\":\"event\"}]","ContractName":"SecretNote","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://5120db4b5619575ecfb4dc8035e5a5832659d6668f0a3f32ab52d81a6d108671"}]}