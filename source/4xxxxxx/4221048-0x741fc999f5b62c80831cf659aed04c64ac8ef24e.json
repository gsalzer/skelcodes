{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *  Crowdsale for Monetha Tokens.\r\n *  Raised Ether will be stored safely at the wallet and returned to the ICO in case the funding goal is not reached,\r\n *  allowing the investors to withdraw their funds.\r\n *  Author: Julia Altenried\r\n *  Internal audit: Alex Bazhanau, Andrej Ruckij\r\n *  Audit: Blockchain & Smart Contract Security Group\r\n **/\r\n\r\npragma solidity ^0.4.15;\r\n\r\ncontract token {\r\n\tfunction transferFrom(address sender, address receiver, uint amount) returns(bool success) {}\r\n\r\n\tfunction burn() {}\r\n\t\r\n\tfunction setStart(uint newStart) {}\r\n}\r\n\r\ncontract SafeMath {\r\n\t//internals\r\n\r\n\tfunction safeMul(uint a, uint b) internal returns(uint) {\r\n\t\tuint c = a * b;\r\n\t\tassert(a == 0 || c / a == b);\r\n\t\treturn c;\r\n\t}\r\n\r\n\tfunction safeSub(uint a, uint b) internal returns(uint) {\r\n\t\tassert(b <= a);\r\n\t\treturn a - b;\r\n\t}\r\n\r\n\tfunction safeAdd(uint a, uint b) internal returns(uint) {\r\n\t\tuint c = a + b;\r\n\t\tassert(c >= a && c >= b);\r\n\t\treturn c;\r\n\t}\r\n\r\n}\r\n\r\n\r\ncontract Crowdsale is SafeMath {\r\n\t/* tokens will be transfered from this address */\r\n\taddress public tokenOwner;\r\n\t/* if the funding goal is not reached, investors may withdraw their funds */\r\n\tuint constant public fundingGoal = 672000000000;\r\n\t/* when the soft cap is reached, the price for monetha tokens will rise */\r\n\tuint constant public softCap = 6720000000000;\r\n\t/* the maximum amount of tokens to be sold */\r\n\tuint constant public maxGoal = 20120000000000;\r\n\t/* how much has been raised by crowdale (in ETH) */\r\n\tuint public amountRaised;\r\n\t/* the start date of the crowdsale */\r\n\tuint public start;\r\n\t/* the end date of the crowdsale*/\r\n\tuint public end;\r\n\t/* time after reaching the soft cap, while the crowdsale will be still available*/\r\n\tuint public timeAfterSoftCap;\r\n\t/* the number of tokens already sold */\r\n\tuint public tokensSold = 0;\r\n\t/* the rates before and after the soft cap is reached */\r\n\tuint constant public rateSoft = 24;\r\n\tuint constant public rateHard = 20;\r\n\r\n\tuint constant public rateCoefficient = 100000000000;\r\n\t/* the address of the token contract */\r\n\ttoken public tokenReward;\r\n\t/* the balances (in ETH) of all investors */\r\n\tmapping(address => uint) public balanceOf;\r\n\t/* indicates if the crowdsale has been closed already */\r\n\tbool public crowdsaleClosed = false;\r\n\t/* the wallet on which the funds will be stored */\r\n\taddress msWallet;\r\n\t/* notifying transfers and the success of the crowdsale*/\r\n\tevent GoalReached(address _tokenOwner, uint _amountRaised);\r\n\tevent FundTransfer(address backer, uint amount, bool isContribution, uint _amountRaised);\r\n\r\n\r\n\r\n\t/*  initialization, set the token address */\r\n\tfunction Crowdsale(\r\n\t\taddress _tokenAddr, \r\n\t\taddress _walletAddr, \r\n\t\taddress _tokenOwner, \r\n\t\tuint _start, \r\n\t\tuint _end,\r\n\t\tuint _timeAfterSoftCap) {\r\n\t\ttokenReward = token(_tokenAddr);\r\n\t\tmsWallet = _walletAddr;\r\n\t\ttokenOwner = _tokenOwner;\r\n\r\n\t\trequire(_start < _end);\r\n\t\tstart = _start;\r\n\t\tend = _end;\r\n\t\ttimeAfterSoftCap = _timeAfterSoftCap;\r\n\t}\r\n\r\n\t/* invest by sending ether to the contract. */\r\n\tfunction() payable {\r\n\t\tif (msg.sender != msWallet) //do not trigger investment if the wallet is returning the funds\r\n\t\t\tinvest(msg.sender);\r\n\t}\r\n\r\n\t/* make an investment\r\n\t *  only callable if the crowdsale started and hasn't been closed already and the maxGoal wasn't reached yet.\r\n\t *  the current token price is looked up and the corresponding number of tokens is transfered to the receiver.\r\n\t *  the sent value is directly forwarded to a safe wallet.\r\n\t *  this method allows to purchase tokens in behalf of another address.*/\r\n\tfunction invest(address _receiver) payable {\r\n\t\tuint amount = msg.value;\r\n\t\tvar (numTokens, reachedSoftCap) = getNumTokens(amount);\r\n\t\trequire(numTokens>0);\r\n\t\trequire(!crowdsaleClosed && now >= start && now <= end && safeAdd(tokensSold, numTokens) <= maxGoal);\r\n\t\tmsWallet.transfer(amount);\r\n\t\tbalanceOf[_receiver] = safeAdd(balanceOf[_receiver], amount);\r\n\t\tamountRaised = safeAdd(amountRaised, amount);\r\n\t\ttokensSold += numTokens;\r\n\t\tassert(tokenReward.transferFrom(tokenOwner, _receiver, numTokens));\r\n\t\tFundTransfer(_receiver, amount, true, amountRaised);\r\n\t\tif (reachedSoftCap) {\r\n\t\t\tuint newEnd = now + timeAfterSoftCap;\r\n\t\t\tif (newEnd < end) {\r\n\t\t\t\tend = newEnd;\r\n\t\t\t\ttokenReward.setStart(newEnd);\r\n\t\t\t} \r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction getNumTokens(uint _value) constant returns(uint numTokens, bool reachedSoftCap) {\r\n\t\tif (tokensSold < softCap) {\r\n\t\t\tnumTokens = safeMul(_value,rateSoft)/rateCoefficient;\r\n\t\t\tif (safeAdd(tokensSold,numTokens) < softCap) \r\n\t\t\t\treturn (numTokens, false);\r\n\t\t\telse if (safeAdd(tokensSold,numTokens) == softCap) \r\n\t\t\t\treturn (numTokens, true);\r\n\t\t\telse {\r\n\t\t\t\tnumTokens = safeSub(softCap, tokensSold);\r\n\t\t\t\tuint missing = safeSub(_value, safeMul(numTokens,rateCoefficient)/rateSoft);\r\n\t\t\t\treturn (safeAdd(numTokens, safeMul(missing,rateHard)/rateCoefficient), true);\r\n\t\t\t}\r\n\t\t} \r\n\t\telse \r\n\t\t\treturn (safeMul(_value,rateHard)/rateCoefficient, false);\r\n\t}\r\n\r\n\tmodifier afterDeadline() {\r\n\t\tif (now > end) \r\n\t\t\t_;\r\n\t}\r\n\r\n\t/* checks if the goal or time limit has been reached and ends the campaign */\r\n\tfunction checkGoalReached() afterDeadline {\r\n\t\trequire(msg.sender == tokenOwner);\r\n\r\n\t\tif (tokensSold >= fundingGoal) {\r\n\t\t\ttokenReward.burn(); //burn remaining tokens but the reserved ones\r\n\t\t\tGoalReached(tokenOwner, amountRaised);\r\n\t\t}\r\n\t\tcrowdsaleClosed = true;\r\n\t}\r\n\r\n\t/* allows the funders to withdraw their funds if the goal has not been reached.\r\n\t *  only works after funds have been returned from the wallet. */\r\n\tfunction safeWithdrawal() afterDeadline {\r\n\t\tuint amount = balanceOf[msg.sender];\r\n\t\tif (address(this).balance >= amount) {\r\n\t\t\tbalanceOf[msg.sender] = 0;\r\n\t\t\tif (amount > 0) {\r\n\t\t\t\tmsg.sender.transfer(amount);\r\n\t\t\t\tFundTransfer(msg.sender, amount, false, amountRaised);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"checkGoalReached\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"invest\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rateSoft\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"getNumTokens\",\"outputs\":[{\"name\":\"numTokens\",\"type\":\"uint256\"},{\"name\":\"reachedSoftCap\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"timeAfterSoftCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenReward\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundingGoal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"amountRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rateCoefficient\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"softCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"start\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rateHard\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleClosed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"end\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxGoal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"safeWithdrawal\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tokenAddr\",\"type\":\"address\"},{\"name\":\"_walletAddr\",\"type\":\"address\"},{\"name\":\"_tokenOwner\",\"type\":\"address\"},{\"name\":\"_start\",\"type\":\"uint256\"},{\"name\":\"_end\",\"type\":\"uint256\"},{\"name\":\"_timeAfterSoftCap\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_tokenOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amountRaised\",\"type\":\"uint256\"}],\"name\":\"GoalReached\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"backer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"isContribution\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"_amountRaised\",\"type\":\"uint256\"}],\"name\":\"FundTransfer\",\"type\":\"event\"}]","ContractName":"Crowdsale","CompilerVersion":"v0.4.15+commit.bbb8e64f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000af4dce16da2877f8c9e00544c93b62ac40631f1600000000000000000000000000832a758a781055ac19b5f9bf553db8bb9db32d0000000000000000000000000027bcc0275ed76e0b338a42e7e08dec36d256780000000000000000000000000000000000000000000000000000000059a816600000000000000000000000000000000000000000000000000000000059cfa3600000000000000000000000000000000000000000000000000000000000069780","Library":"","SwarmSource":"bzzr://ef210fce7808d9f7f0a1b41bbe1fe1455dea3b86b14181427389073f27751054"}]}