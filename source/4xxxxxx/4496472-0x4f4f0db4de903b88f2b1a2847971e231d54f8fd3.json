{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.16;\r\n\r\n/*\r\n\t@title GEEToken\r\n*/\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n\r\n\r\n    address owner;\r\n\r\n    event OwnershipTransferred(address indexed _previousOwner, address indexed _newOwner);\r\n\r\n    function Ownable() {\r\n        owner = msg.sender;\r\n        OwnershipTransferred (address(0), owner);\r\n    }\r\n\r\n    function transferOwnership(address _newOwner)\r\n        public\r\n        onlyOwner\r\n        notZeroAddress(_newOwner)\r\n    {\r\n        owner = _newOwner;\r\n        OwnershipTransferred(msg.sender, _newOwner);\r\n    }\r\n\r\n    //Only owner can call function\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    modifier notZeroAddress(address _address) {\r\n        require(_address != address(0));\r\n        _;\r\n    }\r\n\r\n}\r\n\r\n/*\r\n\tTrustable saves trusted addresses\r\n*/\r\ncontract Trustable is Ownable {\r\n\r\n\r\n    //Only trusted addresses are able to transfer tokens during the Crowdsale\r\n    mapping (address => bool) trusted;\r\n\r\n    event AddTrusted (address indexed _trustable);\r\n    event RemoveTrusted (address indexed _trustable);\r\n\r\n    function Trustable() {\r\n        trusted[msg.sender] = true;\r\n        AddTrusted(msg.sender);\r\n    }\r\n\r\n    //Add new trusted address\r\n    function addTrusted(address _address)\r\n        external\r\n        onlyOwner\r\n        notZeroAddress(_address)\r\n    {\r\n        trusted[_address] = true;\r\n        AddTrusted(_address);\r\n    }\r\n\r\n    //Remove address from a trusted list\r\n    function removeTrusted(address _address)\r\n        external\r\n        onlyOwner\r\n        notZeroAddress(_address)\r\n    {\r\n        trusted[_address] = false;\r\n        RemoveTrusted(_address);\r\n    }\r\n\r\n}\r\n\r\ncontract Pausable is Trustable {\r\n\r\n\r\n    //To check if Token is paused\r\n    bool public paused;\r\n    //Block number on pause\r\n    uint256 public pauseBlockNumber;\r\n    //Block number on resume\r\n    uint256 public resumeBlockNumber;\r\n\r\n    event Pause(uint256 _blockNumber);\r\n    event Unpause(uint256 _blockNumber);\r\n\r\n    function pause()\r\n        public\r\n        onlyOwner\r\n        whenNotPaused\r\n    {\r\n        paused = true;\r\n        pauseBlockNumber = block.number;\r\n        resumeBlockNumber = 0;\r\n        Pause(pauseBlockNumber);\r\n    }\r\n\r\n    function unpause()\r\n        public\r\n        onlyOwner\r\n        whenPaused\r\n    {\r\n        paused = false;\r\n        resumeBlockNumber = block.number;\r\n        pauseBlockNumber = 0;\r\n        Unpause(resumeBlockNumber);\r\n    }\r\n\r\n    modifier whenNotPaused {\r\n        require(!paused);\r\n        _;\r\n    }\r\n\r\n    modifier whenPaused {\r\n        require(paused);\r\n        _;\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    /*\r\n        @return sum of a and b\r\n    */\r\n    function ADD (uint256 a, uint256 b) internal returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n\r\n    /*\r\n        @return difference of a and b\r\n    */\r\n    function SUB (uint256 a, uint256 b) internal returns (uint256) {\r\n        assert(a >= b);\r\n        return a - b;\r\n    }\r\n    \r\n}\r\n\r\n/*\r\n\tERC20 Token Standart\r\n\thttps://github.com/ethereum/EIPs/issues/20\r\n\thttps://theethereum.wiki/w/index.php/ERC20_Token_Standard\r\n*/\r\n\r\ncontract ERC20 {\r\n\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n    function totalSupply() external constant returns (uint);\r\n\r\n    function balanceOf(address _owner) external constant returns (uint256);\r\n\r\n    function transfer(address _to, uint256 _value) external returns (bool);\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool);\r\n\r\n    function approve(address _spender, uint256 _value) external returns (bool);\r\n\r\n    function allowance(address _owner, address _spender) external constant returns (uint256);\r\n\r\n}\r\n\r\n/*\r\n\tContract determines token\r\n*/\r\ncontract Token is ERC20, Pausable {\r\n\r\n\r\n    using SafeMath for uint256;\r\n\r\n    //Total amount of Gee\r\n    uint256 _totalSupply = 100 * (10**6) * (10**8);\r\n\r\n    //end of crowdsale\r\n    uint256 public crowdsaleEndBlock = 4695000;\r\n    //max end of crowdsale\r\n    uint256 public constant MAX_END_BLOCK_NUMBER = 4890000;\r\n\r\n    //Balances for each account\r\n    mapping (address => uint256)  balances;\r\n    //Owner of the account approves the transfer of an amount to another account\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n\r\n    //Notifies users about the amount burnt\r\n    event Burn(address indexed _from, uint256 _value);\r\n    //Notifies users about end block change\r\n    event CrowdsaleEndChanged (uint256 _crowdsaleEnd, uint256 _newCrowdsaleEnd);\r\n\r\n    //return _totalSupply of the Token\r\n    function totalSupply() external constant returns (uint256 totalTokenSupply) {\r\n        totalTokenSupply = _totalSupply;\r\n    }\r\n\r\n    //What is the balance of a particular account?\r\n    function balanceOf(address _owner)\r\n        external\r\n        constant\r\n        returns (uint256 balance)\r\n    {\r\n        return balances[_owner];\r\n    }\r\n\r\n    //Transfer the balance from owner's account to another account\r\n    function transfer(address _to, uint256 _amount)\r\n        external\r\n        notZeroAddress(_to)\r\n        whenNotPaused\r\n        canTransferOnCrowdsale(msg.sender)\r\n        returns (bool success)\r\n    {\r\n        balances[msg.sender] = balances[msg.sender].SUB(_amount);\r\n        balances[_to] = balances[_to].ADD(_amount);\r\n        Transfer(msg.sender, _to, _amount);\r\n        return true;\r\n    }\r\n\r\n    // Send _value amount of tokens from address _from to address _to\r\n    // The transferFrom method is used for a withdraw workflow, allowing contracts to send\r\n    // tokens on your behalf, for example to \"deposit\" to a contract address and/or to charge\r\n    // fees in sub-currencies; the command should fail unless the _from account has\r\n    // deliberately authorized the sender of the message via some mechanism; we propose\r\n    // these standardized APIs for approval:\r\n    function transferFrom(address _from, address _to, uint256 _amount)\r\n        external\r\n        notZeroAddress(_to)\r\n        whenNotPaused\r\n        canTransferOnCrowdsale(msg.sender)\r\n        canTransferOnCrowdsale(_from)\r\n        returns (bool success)\r\n    {\r\n        //Require allowance to be not too big\r\n        require(allowed[_from][msg.sender] >= _amount);\r\n        balances[_from] = balances[_from].SUB(_amount);\r\n        balances[_to] = balances[_to].ADD(_amount);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].SUB(_amount);\r\n        Transfer(_from, _to, _amount);\r\n        return true;\r\n    }\r\n\r\n    // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\r\n    // If this function is called again it overwrites the current allowance with _value.\r\n    function approve(address _spender, uint256 _amount)\r\n        external\r\n        whenNotPaused\r\n        notZeroAddress(_spender)\r\n        returns (bool success)\r\n    {\r\n        allowed[msg.sender][_spender] = _amount;\r\n        Approval(msg.sender, _spender, _amount);\r\n        return true;\r\n    }\r\n\r\n    //Return how many tokens left that you can spend from\r\n    function allowance(address _owner, address _spender)\r\n        external\r\n        constant\r\n        returns (uint256 remaining)\r\n    {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    /**\r\n     * To increment allowed value is better to use this function to avoid 2 calls\r\n     * From MonolithDAO Token.sol\r\n     */\r\n\r\n    function increaseApproval(address _spender, uint256 _addedValue)\r\n        external\r\n        whenNotPaused\r\n        returns (bool success)\r\n    {\r\n        uint256 increased = allowed[msg.sender][_spender].ADD(_addedValue);\r\n        require(increased <= balances[msg.sender]);\r\n        //Cannot approve more coins then you have\r\n        allowed[msg.sender][_spender] = increased;\r\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n    function decreaseApproval(address _spender, uint256 _subtractedValue)\r\n        external\r\n        whenNotPaused\r\n        returns (bool success)\r\n    {\r\n        uint256 oldValue = allowed[msg.sender][_spender];\r\n        if (_subtractedValue > oldValue) {\r\n            allowed[msg.sender][_spender] = 0;\r\n        } else {\r\n            allowed[msg.sender][_spender] = oldValue.SUB(_subtractedValue);\r\n        }\r\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n    function burn(uint256 _value) external returns (bool success) {\r\n        require(trusted[msg.sender]);\r\n        //Subtract from the sender\r\n        balances[msg.sender] = balances[msg.sender].SUB(_value);\r\n        //Update _totalSupply\r\n        _totalSupply = _totalSupply.SUB(_value);\r\n        Burn(msg.sender, _value);\r\n        return true;\r\n    }\r\n\r\n    function updateCrowdsaleEndBlock (uint256 _crowdsaleEndBlock) external onlyOwner {\r\n\r\n        require(block.number <= crowdsaleEndBlock);                 //Crowdsale must be active\r\n        require(_crowdsaleEndBlock >= block.number);\r\n        require(_crowdsaleEndBlock <= MAX_END_BLOCK_NUMBER);        //Transfers can only be unlocked earlier\r\n\r\n        uint256 currentEndBlockNumber = crowdsaleEndBlock;\r\n        crowdsaleEndBlock = _crowdsaleEndBlock;\r\n        CrowdsaleEndChanged (currentEndBlockNumber, _crowdsaleEndBlock);\r\n    }\r\n\r\n    //Override transferOwnership()\r\n    function transferOwnership(address _newOwner) public afterCrowdsale {\r\n        super.transferOwnership(_newOwner);\r\n    }\r\n\r\n    //Override pause()\r\n    function pause() public afterCrowdsale {\r\n        super.pause();\r\n    }\r\n\r\n    modifier canTransferOnCrowdsale (address _address) {\r\n        if (block.number <= crowdsaleEndBlock) {\r\n            //Require the end of funding or msg.sender to be trusted\r\n            require(trusted[_address]);\r\n        }\r\n        _;\r\n    }\r\n\r\n    //Some functions should work only after the Crowdsale\r\n    modifier afterCrowdsale {\r\n        require(block.number > crowdsaleEndBlock);\r\n        _;\r\n    }\r\n\r\n}\r\n\r\n/*\r\n\tInspired by Civic and Golem\r\n\r\n*/\r\n\r\n/*\r\n\tInterface of migrate agent contract (the new token contract)\r\n*/\r\ncontract MigrateAgent {\r\n\r\n    function migrateFrom(address _tokenHolder, uint256 _amount) external returns (bool);\r\n\r\n}\r\n\r\ncontract MigratableToken is Token {\r\n\r\n    MigrateAgent public migrateAgent;\r\n\r\n    //Total migrated tokens\r\n    uint256 public totalMigrated;\r\n\r\n    /**\r\n     * Migrate states.\r\n     *\r\n     * - NotAllowed: The child contract has not reached a condition where the upgrade can bgun\r\n     * - WaitingForAgent: Token allows upgrade, but we don't have a new agent yet\r\n     * - ReadyToMigrate: The agent is set, but not a single token has been upgraded yet\r\n     * - Migrating: Upgrade agent is set and the balance holders can upgrade their tokens\r\n     *\r\n     */\r\n    enum MigrateState {Unknown, NotAllowed, WaitingForAgent, ReadyToMigrate, Migrating}\r\n    event Migrate (address indexed _from, address indexed _to, uint256 _value);\r\n    event MigrateAgentSet (address _agent);\r\n\r\n    function migrate(uint256 _value) external {\r\n        MigrateState state = getMigrateState();\r\n        //Migrating has started\r\n        require(state == MigrateState.ReadyToMigrate || state == MigrateState.Migrating);\r\n        //Migrates user balance\r\n        balances[msg.sender] = balances[msg.sender].SUB(_value);\r\n        //Migrates total supply\r\n        _totalSupply = _totalSupply.SUB(_value);\r\n        //Counts migrated tokens\r\n        totalMigrated = totalMigrated.ADD(_value);\r\n        //Upgrade agent reissues the tokens\r\n        migrateAgent.migrateFrom(msg.sender, _value);\r\n        Migrate(msg.sender, migrateAgent, _value);\r\n    }\r\n\r\n    /*\r\n        Set migrating agent and start migrating\r\n    */\r\n    function setMigrateAgent(MigrateAgent _agent)\r\n    external\r\n    onlyOwner\r\n    notZeroAddress(_agent)\r\n    afterCrowdsale\r\n    {\r\n        //cannot interrupt migrating\r\n        require(getMigrateState() != MigrateState.Migrating);\r\n        //set migrate agent\r\n        migrateAgent = _agent;\r\n        //Emit event\r\n        MigrateAgentSet(migrateAgent);\r\n    }\r\n\r\n    /*\r\n        Migrating status\r\n    */\r\n    function getMigrateState() public constant returns (MigrateState) {\r\n        if (block.number <= crowdsaleEndBlock) {\r\n            //Migration is not allowed on funding\r\n            return MigrateState.NotAllowed;\r\n        } else if (address(migrateAgent) == address(0)) {\r\n            //Migrating address is not set\r\n            return MigrateState.WaitingForAgent;\r\n        } else if (totalMigrated == 0) {\r\n            //Migrating hasn't started yet\r\n            return MigrateState.ReadyToMigrate;\r\n        } else {\r\n            //Migrating\r\n            return MigrateState.Migrating;\r\n        }\r\n\r\n    }\r\n\r\n}\r\n\r\n/*\r\n\tContract defines specific token\r\n*/\r\ncontract GEEToken is MigratableToken {\r\n\r\n    \r\n    //Name of the token\r\n    string public constant name = \"Geens Platform Token\";\r\n    //Symbol of the token\r\n    string public constant symbol = \"GEE\";\r\n    //Number of decimals of GEE\r\n    uint8 public constant decimals = 8;\r\n\r\n    //Team allocation\r\n    //Team wallet that will be unlocked after ICO\r\n    address public constant TEAM0 = 0x9B4df4ac63B6049DD013090d3F639Fd2EA5A02d3;\r\n    //Team wallet that will be unlocked after 0.5 year after ICO\r\n    address public constant TEAM1 = 0x4df9348239f6C1260Fc5d0611755cc1EF830Ff6c;\r\n    //Team wallet that will be unlocked after 1 year after ICO\r\n    address public constant TEAM2 = 0x4902A52F95d9D47531Bed079B5B028c7F89ad47b;\r\n    //0.5 year after ICO\r\n    uint256 public constant UNLOCK_TEAM_1 = 1528372800;\r\n    //1 year after ICO\r\n    uint256 public constant UNLOCK_TEAM_2 = 1544184000;\r\n    //1st team wallet balance\r\n    uint256 public team1Balance;\r\n    //2nd team wallet balance\r\n    uint256 public team2Balance;\r\n\r\n    //Community allocation\r\n    address public constant COMMUNITY = 0x265FC1d98f3C0D42e4273F542917525C3c3F925A;\r\n\r\n    //2.4%\r\n    uint256 private constant TEAM0_THOUSANDTH = 24;\r\n    //3.6%\r\n    uint256 private constant TEAM1_THOUSANDTH = 36;\r\n    //6%\r\n    uint256 private constant TEAM2_THOUSANDTH = 60;\r\n    //67%\r\n    uint256 private constant ICO_THOUSANDTH = 670;\r\n    //21%\r\n    uint256 private constant COMMUNITY_THOUSANDTH = 210;\r\n    //100%\r\n    uint256 private constant DENOMINATOR = 1000;\r\n\r\n    function GEEToken() {\r\n        //67% of _totalSupply\r\n        balances[msg.sender] = _totalSupply * ICO_THOUSANDTH / DENOMINATOR;\r\n        //2.4% of _totalSupply\r\n        balances[TEAM0] = _totalSupply * TEAM0_THOUSANDTH / DENOMINATOR;\r\n        //3.6% of _totalSupply\r\n        team1Balance = _totalSupply * TEAM1_THOUSANDTH / DENOMINATOR;\r\n        //6% of _totalSupply\r\n        team2Balance = _totalSupply * TEAM2_THOUSANDTH / DENOMINATOR;\r\n        //21% of _totalSupply\r\n        balances[COMMUNITY] =  _totalSupply * COMMUNITY_THOUSANDTH / DENOMINATOR;\r\n\r\n        Transfer (this, msg.sender, balances[msg.sender]);\r\n        Transfer (this, TEAM0, balances[TEAM0]);\r\n        Transfer (this, COMMUNITY, balances[COMMUNITY]);\r\n\r\n    }\r\n\r\n    //Check if team wallet is unlocked\r\n    function unlockTeamTokens(address _address) external onlyOwner {\r\n        if (_address == TEAM1) {\r\n            require(UNLOCK_TEAM_1 <= now);\r\n            require (team1Balance > 0);\r\n            balances[TEAM1] = team1Balance;\r\n            team1Balance = 0;\r\n            Transfer (this, TEAM1, balances[TEAM1]);\r\n        } else if (_address == TEAM2) {\r\n            require(UNLOCK_TEAM_2 <= now);\r\n            require (team2Balance > 0);\r\n            balances[TEAM2] = team2Balance;\r\n            team2Balance = 0;\r\n            Transfer (this, TEAM2, balances[TEAM2]);\r\n        }\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"migrateAgent\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"totalTokenSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"migrate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_agent\",\"type\":\"address\"}],\"name\":\"setMigrateAgent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"UNLOCK_TEAM_1\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"unlockTeamTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_END_BLOCK_NUMBER\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleEndBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TEAM1\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMigrateState\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalMigrated\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"team2Balance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"resumeBlockNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_crowdsaleEndBlock\",\"type\":\"uint256\"}],\"name\":\"updateCrowdsaleEndBlock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pauseBlockNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TEAM0\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addTrusted\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeTrusted\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"team1Balance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"COMMUNITY\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"UNLOCK_TEAM_2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TEAM2\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Migrate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_agent\",\"type\":\"address\"}],\"name\":\"MigrateAgentSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_crowdsaleEnd\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_newCrowdsaleEnd\",\"type\":\"uint256\"}],\"name\":\"CrowdsaleEndChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_trustable\",\"type\":\"address\"}],\"name\":\"AddTrusted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_trustable\",\"type\":\"address\"}],\"name\":\"RemoveTrusted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"GEEToken","CompilerVersion":"v0.4.16+commit.d7661dd9","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://1761c583d8613b08e3a5f30d3ee31a83c1eb558e9f16b22f8104e1455ab70cca"}]}