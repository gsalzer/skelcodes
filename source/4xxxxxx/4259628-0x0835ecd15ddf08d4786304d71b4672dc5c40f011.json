{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13;\r\n\r\n/**\r\n* @title PlusCoin Contract\r\n* @dev The main token contract\r\n*/\r\n\r\n\r\n\r\ncontract PlusCoin {\r\n    address public owner; // Token owner address\r\n    mapping (address => uint256) public balances; // balanceOf\r\n    // mapping (address => mapping (address => uint256)) public allowance;\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n\r\n    string public standard = 'PlusCoin 1.0';\r\n    string public constant name = \"PlusCoin\";\r\n    string public constant symbol = \"PLC\";\r\n    uint   public constant decimals = 18;\r\n    uint public totalSupply;\r\n    \r\n    uint public constant fpct_packet_size = 3300;\r\n    uint public ownerPrice = 40 * fpct_packet_size; //PRESALE_PRICE * 3 * fpct_packet_size;\r\n\r\n    State public current_state; // current token state\r\n    uint public soldAmount; // current sold amount (for current state)\r\n\r\n    uint public constant owner_MIN_LIMIT = 15000000 * fpct_packet_size * 1000000000000000000;\r\n\r\n    uint public constant TOKEN_PRESALE_LIMIT = 100000 * fpct_packet_size * 1000000000000000000;\r\n    uint public constant TOKEN_ICO1_LIMIT = 3000000 * fpct_packet_size * 1000000000000000000;\r\n    uint public constant TOKEN_ICO2_LIMIT = 3000000 * fpct_packet_size * 1000000000000000000;\r\n    uint public constant TOKEN_ICO3_LIMIT = 3000000 * fpct_packet_size * 1000000000000000000;\r\n\r\n    address public allowed_contract;\r\n\r\n\r\n    // States\r\n    enum State {\r\n        Created,\r\n        Presale,\r\n        ICO1,\r\n        ICO2,\r\n        ICO3,\r\n        Freedom,\r\n        Paused // only for first stages\r\n    }\r\n\r\n    //\r\n    // Events\r\n    // This generates a publics event on the blockchain that will notify clients\r\n    \r\n    event Sent(address from, address to, uint amount);\r\n    event Buy(address indexed sender, uint eth, uint fbt);\r\n    event Withdraw(address indexed sender, address to, uint eth);\r\n    event StateSwitch(State newState);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n    //\r\n    // Modifiers\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n\r\n    modifier onlyAllowedContract() {\r\n        require(msg.sender == allowed_contract);\r\n        _;\r\n    }\r\n\r\n\r\n    modifier onlyOwnerBeforeFree() {\r\n        if(current_state != State.Freedom) {\r\n            require(msg.sender == owner);   \r\n        }\r\n        _;\r\n    }\r\n\r\n\r\n    modifier inState(State _state) {\r\n        require(current_state == _state);\r\n        _;\r\n    }\r\n\r\n\r\n    //\r\n    // Functions\r\n    // \r\n\r\n    // Constructor\r\n    function PlusCoin() {\r\n        owner = msg.sender;\r\n        totalSupply = 25000000 * fpct_packet_size * 1000000000000000000;\r\n        balances[owner] = totalSupply;\r\n        current_state = State.Created;\r\n        soldAmount = 0;\r\n    }\r\n\r\n    // fallback function\r\n    function() payable {\r\n        require(current_state != State.Paused && current_state != State.Created && current_state != State.Freedom);\r\n        require(msg.value >= 1);\r\n        require(msg.sender != owner);\r\n        buyTokens(msg.sender);\r\n    }\r\n\r\n    /**\r\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n    * @param newOwner The address to transfer ownership to.\r\n    */\r\n    function transferOwnership(address newOwner) onlyOwner {\r\n      if (newOwner != address(0)) {\r\n        owner = newOwner;\r\n      }\r\n    }\r\n\r\n    function safeMul(uint a, uint b) internal returns (uint) {\r\n        uint c = a * b;\r\n        require(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function safeSub(uint a, uint b) internal returns (uint) {\r\n        require(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function safeAdd(uint a, uint b) internal returns (uint) {\r\n        uint c = a + b;\r\n        require(c>=a && c>=b);\r\n        return c;\r\n    }\r\n\r\n    // Buy entry point\r\n    function buy() public payable {\r\n        require(current_state != State.Paused && current_state != State.Created && current_state != State.Freedom);\r\n        require(msg.value >= 1);\r\n        require(msg.sender != owner);\r\n        buyTokens(msg.sender);\r\n    }\r\n\r\n    // Payable function for buy coins from token owner\r\n    function buyTokens(address _buyer) public payable\r\n    {\r\n        require(current_state != State.Paused && current_state != State.Created && current_state != State.Freedom);\r\n        require(msg.value >= 1);\r\n        require(_buyer != owner);\r\n        \r\n        uint256 wei_value = msg.value;\r\n\r\n        uint256 tokens = safeMul(wei_value, ownerPrice);\r\n        tokens = tokens;\r\n        \r\n        uint256 currentSoldAmount = safeAdd(tokens, soldAmount);\r\n\r\n        if(current_state == State.Presale) {\r\n            require(currentSoldAmount <= TOKEN_PRESALE_LIMIT);\r\n        }\r\n        if(current_state == State.ICO1) {\r\n            require(currentSoldAmount <= TOKEN_ICO1_LIMIT);\r\n        }\r\n        if(current_state == State.ICO2) {\r\n            require(currentSoldAmount <= TOKEN_ICO2_LIMIT);\r\n        }\r\n        if(current_state == State.ICO3) {\r\n            require(currentSoldAmount <= TOKEN_ICO3_LIMIT);\r\n        }\r\n\r\n        require( (balances[owner] - tokens) >= owner_MIN_LIMIT );\r\n        \r\n        balances[owner] = safeSub(balances[owner], tokens);\r\n        balances[_buyer] = safeAdd(balances[_buyer], tokens);\r\n        soldAmount = safeAdd(soldAmount, tokens);\r\n        \r\n        owner.transfer(this.balance);\r\n        \r\n        Buy(_buyer, msg.value, tokens);\r\n        \r\n    }\r\n\r\n\r\n    function setOwnerPrice(uint128 _newPrice) public\r\n        onlyOwner\r\n        returns (bool success)\r\n    {\r\n        ownerPrice = _newPrice;\r\n        return true;\r\n    }\r\n\r\n\r\n\tfunction setAllowedContract(address _contract_address) public\r\n        onlyOwner\r\n        returns (bool success)\r\n    {\r\n        allowed_contract = _contract_address;\r\n        return true;\r\n    }\r\n\r\n\r\n    // change state of token\r\n    function setTokenState(State _nextState) public\r\n        onlyOwner\r\n        returns (bool success)\r\n    {\r\n        bool canSwitchState\r\n            =  (current_state == State.Created && _nextState == State.Presale)\r\n            || (current_state == State.Presale && _nextState == State.ICO1)\r\n            || (current_state == State.ICO1 && _nextState == State.ICO2)\r\n            || (current_state == State.ICO2 && _nextState == State.ICO3)\r\n            || (current_state == State.ICO3 && _nextState == State.Freedom)\r\n            //pause (allowed only 'any state->pause' & 'pause->presale' transition)\r\n            // || (current_state == State.Presale && _nextState == State.Paused)\r\n            // || (current_state == State.Paused && _nextState == State.Presale)\r\n            || (current_state != State.Freedom && _nextState == State.Paused)\r\n            || (current_state == State.Paused);\r\n\r\n        require(canSwitchState);\r\n        \r\n        current_state = _nextState;\r\n\r\n        soldAmount = 0;\r\n        \r\n        StateSwitch(_nextState);\r\n\r\n        return true;\r\n    }\r\n\r\n\r\n    function remaining_for_sale() public constant returns (uint256 remaining_coins) {\r\n        uint256 coins = 0;\r\n\r\n        if (current_state == State.Presale) {\r\n            coins = TOKEN_PRESALE_LIMIT - soldAmount;\r\n        }\r\n        if (current_state == State.ICO1) {\r\n            coins = TOKEN_PRESALE_LIMIT - soldAmount;\r\n        }\r\n        if (current_state == State.ICO2) {\r\n            coins = TOKEN_PRESALE_LIMIT - soldAmount;\r\n        }\r\n        if (current_state == State.ICO3) {\r\n            coins = TOKEN_PRESALE_LIMIT - soldAmount;\r\n        }\r\n        if (current_state == State.Freedom) {\r\n            coins = balances[owner] - owner_MIN_LIMIT;\r\n        }\r\n\r\n        return coins;\r\n    }\r\n\r\n    function get_token_state() public constant returns (State) {\r\n        return current_state;\r\n    }\r\n\r\n\r\n    function withdrawEther(address _to) public \r\n        onlyOwner\r\n    {\r\n        _to.transfer(this.balance);\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * ERC 20 token functions\r\n     *\r\n     * https://github.com/ethereum/EIPs/issues/20\r\n     */\r\n    \r\n    function transfer(address _to, uint256 _value) \r\n        onlyOwnerBeforeFree\r\n        returns (bool success) \r\n    {\r\n        if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\r\n            balances[msg.sender] -= _value;\r\n            balances[_to] += _value;\r\n            Transfer(msg.sender, _to, _value);\r\n            return true;\r\n        } else { return false; }\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) \r\n        onlyOwnerBeforeFree\r\n        returns (bool success)\r\n    {\r\n        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\r\n            balances[_to] += _value;\r\n            balances[_from] -= _value;\r\n            allowed[_from][msg.sender] -= _value;\r\n            Transfer(_from, _to, _value);\r\n            return true;\r\n        } else { return false; }\r\n    }\r\n\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) \r\n        onlyOwnerBeforeFree\r\n        returns (bool success)\r\n    {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) \r\n        onlyOwnerBeforeFree\r\n        constant returns (uint256 remaining)\r\n    {\r\n      return allowed[_owner][_spender];\r\n    }\r\n\r\n    \r\n\r\n\r\n    ///suicide & send funds to owner\r\n    function destroy() { \r\n        if (msg.sender == owner) {\r\n          suicide(owner);\r\n        }\r\n    }\r\n\r\n    \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"remaining_for_sale\",\"outputs\":[{\"name\":\"remaining_coins\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nextState\",\"type\":\"uint8\"}],\"name\":\"setTokenState\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN_ICO1_LIMIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN_PRESALE_LIMIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"standard\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"current_state\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"destroy\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contract_address\",\"type\":\"address\"}],\"name\":\"setAllowedContract\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"get_token_state\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN_ICO2_LIMIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allowed_contract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdrawEther\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN_ICO3_LIMIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fpct_packet_size\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_buyer\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner_MIN_LIMIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"soldAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newPrice\",\"type\":\"uint128\"}],\"name\":\"setOwnerPrice\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Sent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"eth\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"fbt\",\"type\":\"uint256\"}],\"name\":\"Buy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newState\",\"type\":\"uint8\"}],\"name\":\"StateSwitch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"PlusCoin","CompilerVersion":"v0.4.15+commit.bbb8e64f","OptimizationUsed":"0","Runs":"1","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://06b880e9c239e81d75562771afcc4afd0a26b8ed00d6801ae4dcaacfd57a89a2"}]}