{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\ncontract AbstractStarbaseToken {\r\n    function isFundraiser(address fundraiserAddress) public returns (bool);\r\n    function company() public returns (address);\r\n    function allocateToCrowdsalePurchaser(address to, uint256 value) public returns (bool);\r\n    function allocateToMarketingSupporter(address to, uint256 value) public returns (bool);\r\n}\r\n\r\ncontract AbstractStarbaseCrowdsale {\r\n    function startDate() constant returns (uint256) {}\r\n    function endedAt() constant returns (uint256) {}\r\n    function isEnded() constant returns (bool);\r\n    function totalRaisedAmountInCny() constant returns (uint256);\r\n    function numOfPurchasedTokensOnCsBy(address purchaser) constant returns (uint256);\r\n    function numOfPurchasedTokensOnEpBy(address purchaser) constant returns (uint256);\r\n}\r\n\r\n/// @title EarlyPurchase contract - Keep track of purchased amount by Early Purchasers\r\n/// @author Starbase PTE. LTD. - <info@starbase.co>\r\ncontract StarbaseEarlyPurchase {\r\n    /*\r\n     *  Constants\r\n     */\r\n    string public constant PURCHASE_AMOUNT_UNIT = 'CNY';    // Chinese Yuan\r\n    string public constant PURCHASE_AMOUNT_RATE_REFERENCE = 'http://www.xe.com/currencytables/';\r\n    uint256 public constant PURCHASE_AMOUNT_CAP = 9000000;\r\n\r\n    /*\r\n     *  Types\r\n     */\r\n    struct EarlyPurchase {\r\n        address purchaser;\r\n        uint256 amount;        // CNY based amount\r\n        uint256 purchasedAt;   // timestamp\r\n    }\r\n\r\n    /*\r\n     *  External contracts\r\n     */\r\n    AbstractStarbaseCrowdsale public starbaseCrowdsale;\r\n\r\n    /*\r\n     *  Storage\r\n     */\r\n    address public owner;\r\n    EarlyPurchase[] public earlyPurchases;\r\n    uint256 public earlyPurchaseClosedAt;\r\n\r\n    /*\r\n     *  Modifiers\r\n     */\r\n    modifier noEther() {\r\n        require(msg.value == 0);\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    modifier onlyBeforeCrowdsale() {\r\n        assert(address(starbaseCrowdsale) == address(0) || starbaseCrowdsale.startDate() == 0);\r\n        _;\r\n    }\r\n\r\n    modifier onlyEarlyPurchaseTerm() {\r\n        assert(earlyPurchaseClosedAt <= 0);\r\n        _;\r\n    }\r\n\r\n    /*\r\n     *  Contract functions\r\n     */\r\n\r\n    /**\r\n     * @dev Returns early purchased amount by purchaser's address\r\n     * @param purchaser Purchaser address\r\n     */\r\n    function purchasedAmountBy(address purchaser)\r\n        external\r\n        constant\r\n        noEther\r\n        returns (uint256 amount)\r\n    {\r\n        for (uint256 i; i < earlyPurchases.length; i++) {\r\n            if (earlyPurchases[i].purchaser == purchaser) {\r\n                amount += earlyPurchases[i].amount;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns total amount of raised funds by Early Purchasers\r\n     */\r\n    function totalAmountOfEarlyPurchases()\r\n        constant\r\n        noEther\r\n        public\r\n        returns (uint256 totalAmount)\r\n    {\r\n        for (uint256 i; i < earlyPurchases.length; i++) {\r\n            totalAmount += earlyPurchases[i].amount;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns number of early purchases\r\n     */\r\n    function numberOfEarlyPurchases()\r\n        external\r\n        constant\r\n        noEther\r\n        returns (uint256)\r\n    {\r\n        return earlyPurchases.length;\r\n    }\r\n\r\n    /**\r\n     * @dev Append an early purchase log\r\n     * @param purchaser Purchaser address\r\n     * @param amount Purchase amount\r\n     * @param purchasedAt Timestamp of purchased date\r\n     */\r\n    function appendEarlyPurchase(address purchaser, uint256 amount, uint256 purchasedAt)\r\n        external\r\n        noEther\r\n        onlyOwner\r\n        onlyBeforeCrowdsale\r\n        onlyEarlyPurchaseTerm\r\n        returns (bool)\r\n    {\r\n        if (amount == 0 ||\r\n            totalAmountOfEarlyPurchases() + amount > PURCHASE_AMOUNT_CAP)\r\n        {\r\n            return false;\r\n        }\r\n\r\n        assert(purchasedAt != 0 || purchasedAt <= now);\r\n\r\n        earlyPurchases.push(EarlyPurchase(purchaser, amount, purchasedAt));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Close early purchase term\r\n     */\r\n    function closeEarlyPurchase()\r\n        external\r\n        noEther\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        earlyPurchaseClosedAt = now;\r\n    }\r\n\r\n    /**\r\n     * @dev Setup function sets external contract's address\r\n     * @param starbaseCrowdsaleAddress Token address\r\n     */\r\n    function setup(address starbaseCrowdsaleAddress)\r\n        external\r\n        noEther\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        if (address(starbaseCrowdsale) == 0) {\r\n            starbaseCrowdsale = AbstractStarbaseCrowdsale(starbaseCrowdsaleAddress);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @dev Contract constructor function\r\n     */\r\n    function StarbaseEarlyPurchase() noEther {\r\n        owner = msg.sender;\r\n    }\r\n}\r\n\r\n/// @title EarlyPurchaseAmendment contract - Amend early purchase records of the original contract\r\n/// @author Starbase PTE. LTD. - <support@starbase.co>\r\ncontract StarbaseEarlyPurchaseAmendment {\r\n    /*\r\n     *  Events\r\n     */\r\n    event EarlyPurchaseInvalidated(uint256 epIdx);\r\n    event EarlyPurchaseAmended(uint256 epIdx);\r\n\r\n    /*\r\n     *  External contracts\r\n     */\r\n    AbstractStarbaseCrowdsale public starbaseCrowdsale;\r\n    StarbaseEarlyPurchase public starbaseEarlyPurchase;\r\n\r\n    /*\r\n     *  Storage\r\n     */\r\n    address public owner;\r\n    uint256[] public invalidEarlyPurchaseIndexes;\r\n    uint256[] public amendedEarlyPurchaseIndexes;\r\n    mapping (uint256 => StarbaseEarlyPurchase.EarlyPurchase) public amendedEarlyPurchases;\r\n\r\n    /*\r\n     *  Modifiers\r\n     */\r\n    modifier noEther() {\r\n        require(msg.value == 0);\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    modifier onlyBeforeCrowdsale() {\r\n        assert(address(starbaseCrowdsale) == address(0) || starbaseCrowdsale.startDate() == 0);\r\n        _;\r\n    }\r\n\r\n    modifier onlyEarlyPurchasesLoaded() {\r\n        assert(address(starbaseEarlyPurchase) != address(0));\r\n        _;\r\n    }\r\n\r\n    /*\r\n     *  Functions below are compatible with starbaseEarlyPurchase contract\r\n     */\r\n\r\n    /**\r\n     * @dev Returns an early purchase record\r\n     * @param earlyPurchaseIndex Index number of an early purchase\r\n     */\r\n    function earlyPurchases(uint256 earlyPurchaseIndex)\r\n        external\r\n        constant\r\n        onlyEarlyPurchasesLoaded\r\n        returns (address purchaser, uint256 amount, uint256 purchasedAt)\r\n    {\r\n        return starbaseEarlyPurchase.earlyPurchases(earlyPurchaseIndex);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns early purchased amount by purchaser's address\r\n     * @param purchaser Purchaser address\r\n     */\r\n    function purchasedAmountBy(address purchaser)\r\n        external\r\n        constant\r\n        noEther\r\n        returns (uint256 amount)\r\n    {\r\n        StarbaseEarlyPurchase.EarlyPurchase[] memory normalizedEP =\r\n            normalizedEarlyPurchases();\r\n        for (uint256 i; i < normalizedEP.length; i++) {\r\n            if (normalizedEP[i].purchaser == purchaser) {\r\n                amount += normalizedEP[i].amount;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns total amount of raised funds by Early Purchasers\r\n     */\r\n    function totalAmountOfEarlyPurchases()\r\n        constant\r\n        noEther\r\n        public\r\n        returns (uint256 totalAmount)\r\n    {\r\n        StarbaseEarlyPurchase.EarlyPurchase[] memory normalizedEP =\r\n            normalizedEarlyPurchases();\r\n        for (uint256 i; i < normalizedEP.length; i++) {\r\n            totalAmount += normalizedEP[i].amount;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns number of early purchases\r\n     */\r\n    function numberOfEarlyPurchases()\r\n        external\r\n        constant\r\n        noEther\r\n        returns (uint256)\r\n    {\r\n        return normalizedEarlyPurchases().length;\r\n    }\r\n\r\n    /**\r\n     * @dev Sets up function sets external contract's address\r\n     * @param starbaseCrowdsaleAddress Token address\r\n     */\r\n    function setup(address starbaseCrowdsaleAddress)\r\n        external\r\n        noEther\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        if (address(starbaseCrowdsale) == 0) {\r\n            starbaseCrowdsale = AbstractStarbaseCrowdsale(starbaseCrowdsaleAddress);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /*\r\n     *  Contract functions unique to StarbaseEarlyPurchaseAmendment\r\n     */\r\n\r\n     /**\r\n      * @dev Invalidate early purchase\r\n      * @param earlyPurchaseIndex Index number of the purchase\r\n      */\r\n    function invalidateEarlyPurchase(uint256 earlyPurchaseIndex)\r\n        external\r\n        noEther\r\n        onlyOwner\r\n        onlyEarlyPurchasesLoaded\r\n        onlyBeforeCrowdsale\r\n        returns (bool)\r\n    {\r\n        assert(numberOfRawEarlyPurchases() > earlyPurchaseIndex); // Array Index Out of Bounds Exception\r\n\r\n        for (uint256 i; i < invalidEarlyPurchaseIndexes.length; i++) {\r\n            assert(invalidEarlyPurchaseIndexes[i] != earlyPurchaseIndex);\r\n        }\r\n\r\n        invalidEarlyPurchaseIndexes.push(earlyPurchaseIndex);\r\n        EarlyPurchaseInvalidated(earlyPurchaseIndex);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Checks whether early purchase is invalid\r\n     * @param earlyPurchaseIndex Index number of the purchase\r\n     */\r\n    function isInvalidEarlyPurchase(uint256 earlyPurchaseIndex)\r\n        constant\r\n        noEther\r\n        public\r\n        returns (bool)\r\n    {\r\n        assert(numberOfRawEarlyPurchases() > earlyPurchaseIndex); // Array Index Out of Bounds Exception\r\n\r\n\r\n        for (uint256 i; i < invalidEarlyPurchaseIndexes.length; i++) {\r\n            if (invalidEarlyPurchaseIndexes[i] == earlyPurchaseIndex) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @dev Amends a given early purchase with data\r\n     * @param earlyPurchaseIndex Index number of the purchase\r\n     * @param purchaser Purchaser's address\r\n     * @param amount Value of purchase\r\n     * @param purchasedAt Purchase timestamp\r\n     */\r\n    function amendEarlyPurchase(uint256 earlyPurchaseIndex, address purchaser, uint256 amount, uint256 purchasedAt)\r\n        external\r\n        noEther\r\n        onlyOwner\r\n        onlyEarlyPurchasesLoaded\r\n        onlyBeforeCrowdsale\r\n        returns (bool)\r\n    {\r\n        assert(purchasedAt != 0 || purchasedAt <= now);\r\n\r\n        assert(numberOfRawEarlyPurchases() > earlyPurchaseIndex);\r\n\r\n        assert(!isInvalidEarlyPurchase(earlyPurchaseIndex)); // Invalid early purchase cannot be amended\r\n\r\n        if (!isAmendedEarlyPurchase(earlyPurchaseIndex)) {\r\n            amendedEarlyPurchaseIndexes.push(earlyPurchaseIndex);\r\n        }\r\n\r\n        amendedEarlyPurchases[earlyPurchaseIndex] =\r\n            StarbaseEarlyPurchase.EarlyPurchase(purchaser, amount, purchasedAt);\r\n        EarlyPurchaseAmended(earlyPurchaseIndex);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Checks whether early purchase is amended\r\n     * @param earlyPurchaseIndex Index number of the purchase\r\n     */\r\n    function isAmendedEarlyPurchase(uint256 earlyPurchaseIndex)\r\n        constant\r\n        noEther\r\n        returns (bool)\r\n    {\r\n        assert(numberOfRawEarlyPurchases() > earlyPurchaseIndex); // Array Index Out of Bounds Exception\r\n\r\n        for (uint256 i; i < amendedEarlyPurchaseIndexes.length; i++) {\r\n            if (amendedEarlyPurchaseIndexes[i] == earlyPurchaseIndex) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @dev Loads early purchases data to StarbaseEarlyPurchaseAmendment contract\r\n     * @param starbaseEarlyPurchaseAddress Address from starbase early purchase\r\n     */\r\n    function loadStarbaseEarlyPurchases(address starbaseEarlyPurchaseAddress)\r\n        external\r\n        noEther\r\n        onlyOwner\r\n        onlyBeforeCrowdsale\r\n        returns (bool)\r\n    {\r\n        assert(starbaseEarlyPurchaseAddress != 0 ||\r\n            address(starbaseEarlyPurchase) == 0);\r\n\r\n        starbaseEarlyPurchase = StarbaseEarlyPurchase(starbaseEarlyPurchaseAddress);\r\n        assert(starbaseEarlyPurchase.earlyPurchaseClosedAt() != 0); // the early purchase must be closed\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Contract constructor function. It sets owner\r\n     */\r\n    function StarbaseEarlyPurchaseAmendment() noEther {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * Internal functions\r\n     */\r\n\r\n    /**\r\n     * @dev Normalizes early purchases data\r\n     */\r\n    function normalizedEarlyPurchases()\r\n        constant\r\n        internal\r\n        returns (StarbaseEarlyPurchase.EarlyPurchase[] normalizedEP)\r\n    {\r\n        uint256 rawEPCount = numberOfRawEarlyPurchases();\r\n        normalizedEP = new StarbaseEarlyPurchase.EarlyPurchase[](\r\n            rawEPCount - invalidEarlyPurchaseIndexes.length);\r\n\r\n        uint256 normalizedIdx;\r\n        for (uint256 i; i < rawEPCount; i++) {\r\n            if (isInvalidEarlyPurchase(i)) {\r\n                continue;   // invalid early purchase should be ignored\r\n            }\r\n\r\n            StarbaseEarlyPurchase.EarlyPurchase memory ep;\r\n            if (isAmendedEarlyPurchase(i)) {\r\n                ep = amendedEarlyPurchases[i];  // amended early purchase should take a priority\r\n            } else {\r\n                ep = getEarlyPurchase(i);\r\n            }\r\n\r\n            normalizedEP[normalizedIdx] = ep;\r\n            normalizedIdx++;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Fetches early purchases data\r\n     */\r\n    function getEarlyPurchase(uint256 earlyPurchaseIndex)\r\n        internal\r\n        constant\r\n        onlyEarlyPurchasesLoaded\r\n        returns (StarbaseEarlyPurchase.EarlyPurchase)\r\n    {\r\n        var (purchaser, amount, purchasedAt) =\r\n            starbaseEarlyPurchase.earlyPurchases(earlyPurchaseIndex);\r\n        return StarbaseEarlyPurchase.EarlyPurchase(purchaser, amount, purchasedAt);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns raw number of early purchases\r\n     */\r\n    function numberOfRawEarlyPurchases()\r\n        internal\r\n        constant\r\n        onlyEarlyPurchasesLoaded\r\n        returns (uint256)\r\n    {\r\n        return starbaseEarlyPurchase.numberOfEarlyPurchases();\r\n    }\r\n}\r\n\r\n//! Certifier contract.\r\n//! By Parity Technologies, 2017.\r\n//! Released under the Apache Licence 2.\r\n\r\ncontract Certifier {\r\n\tevent Confirmed(address indexed who);\r\n\tevent Revoked(address indexed who);\r\n\tfunction certified(address) public constant returns (bool);\r\n\tfunction get(address, string) public constant returns (bytes32);\r\n\tfunction getAddress(address, string) public constant returns (address);\r\n\tfunction getUint(address, string) public constant returns (uint);\r\n}\r\n\r\n/**\r\n * @title Crowdsale contract - Starbase crowdsale to create STAR.\r\n * @author Starbase PTE. LTD. - <info@starbase.co>\r\n */\r\ncontract StarbaseCrowdsale is Ownable {\r\n    using SafeMath for uint256;\r\n    /*\r\n     *  Events\r\n     */\r\n    event CrowdsaleEnded(uint256 endedAt);\r\n    event StarbasePurchasedWithEth(address purchaser, uint256 amount, uint256 rawAmount, uint256 cnyEthRate);\r\n    event CnyEthRateUpdated(uint256 cnyEthRate);\r\n    event CnyBtcRateUpdated(uint256 cnyBtcRate);\r\n    event QualifiedPartnerAddress(address qualifiedPartner);\r\n\r\n    /**\r\n     *  External contracts\r\n     */\r\n    AbstractStarbaseToken public starbaseToken;\r\n    StarbaseEarlyPurchaseAmendment public starbaseEpAmendment;\r\n    Certifier public picopsCertifier;\r\n\r\n    /**\r\n     *  Constants\r\n     */\r\n    uint256 constant public crowdsaleTokenAmount = 125000000e18;\r\n    uint256 constant public earlyPurchaseTokenAmount = 50000000e18;\r\n    uint256 constant public MIN_INVESTMENT = 1; // min is 1 Wei\r\n    uint256 constant public MAX_CAP = 67000000; // in CNY. approximately 10M USD. (includes raised amount from both EP and CS)\r\n    string public constant PURCHASE_AMOUNT_UNIT = 'CNY';  // Chinese Yuan\r\n\r\n    /**\r\n     * Types\r\n     */\r\n    struct CrowdsalePurchase {\r\n        address purchaser;\r\n        uint256 amount;        // CNY based amount with bonus\r\n        uint256 rawAmount;     // CNY based amount no bonus\r\n        uint256 purchasedAt;   // timestamp\r\n    }\r\n\r\n    struct QualifiedPartners {\r\n        uint256 amountCap;\r\n        uint256 amountRaised;\r\n        bool    bonaFide;\r\n        uint256 commissionFeePercentage; // example 5 will calculate the percentage as 5%\r\n    }\r\n\r\n    /*\r\n     *  Enums\r\n     */\r\n    enum BonusMilestones {\r\n        First,\r\n        Second,\r\n        Third,\r\n        Fourth,\r\n        Fifth\r\n    }\r\n\r\n    // Initialize bonusMilestones\r\n    BonusMilestones public bonusMilestones = BonusMilestones.First;\r\n\r\n    /**\r\n     *  Storage\r\n     */\r\n    uint public numOfDeliveredCrowdsalePurchases;  // index to keep the number of crowdsale purchases have already been processed by `withdrawPurchasedTokens`\r\n    uint public numOfDeliveredEarlyPurchases;  // index to keep the number of early purchases have already been processed by `withdrawPurchasedTokens`\r\n    uint256 public numOfLoadedEarlyPurchases; // index to keep the number of early purchases that have already been loaded by `loadEarlyPurchases`\r\n\r\n    // early purchase\r\n    address[] public earlyPurchasers;\r\n    mapping (address => uint256) public earlyPurchasedAmountBy; // early purchased amount in CNY per purchasers' address\r\n    bool public earlyPurchasesLoaded = false;  // returns whether all early purchases are loaded into this contract\r\n    uint256 public totalAmountOfEarlyPurchases; // including 20% bonus\r\n\r\n    // crowdsale\r\n    bool public presalePurchasesLoaded = false; // returns whether all presale purchases are loaded into this contract\r\n    uint256 public maxCrowdsaleCap;     // = 67M CNY - (total raised amount from EP)\r\n    uint256 public totalAmountOfCrowdsalePurchases; // in CNY, including bonuses\r\n    uint256 public totalAmountOfCrowdsalePurchasesWithoutBonus; // in CNY\r\n    mapping (address => QualifiedPartners) public qualifiedPartners;\r\n    uint256 public purchaseStartBlock;  // crowdsale purchases can be accepted from this block number\r\n    uint256 public startDate;\r\n    uint256 public endedAt;\r\n    CrowdsalePurchase[] public crowdsalePurchases;\r\n    mapping (address => uint256) public crowdsalePurchaseAmountBy; // crowdsale purchase amount in CNY per purchasers' address\r\n    uint256 public cnyBtcRate; // this rate won't be used from a smart contract function but external system\r\n    uint256 public cnyEthRate;\r\n\r\n    // bonus milestones\r\n    uint256 public firstBonusEnds;\r\n    uint256 public secondBonusEnds;\r\n    uint256 public thirdBonusEnds;\r\n    uint256 public fourthBonusEnds;\r\n\r\n    // after the crowdsale\r\n    mapping (address => uint256) public numOfPurchasedTokensOnCsBy;    // the number of tokens purchased on the crowdsale by a purchaser\r\n    mapping (address => uint256) public numOfPurchasedTokensOnEpBy;    // the number of tokens early purchased by a purchaser\r\n\r\n    /**\r\n     *  Modifiers\r\n     */\r\n    modifier minInvestment() {\r\n        // User has to send at least the ether value of one token.\r\n        assert(msg.value >= MIN_INVESTMENT);\r\n        _;\r\n    }\r\n\r\n    modifier whenNotStarted() {\r\n        assert(startDate == 0);\r\n        _;\r\n    }\r\n\r\n    modifier whenEnded() {\r\n        assert(isEnded());\r\n        _;\r\n    }\r\n\r\n    modifier hasBalance() {\r\n        assert(this.balance > 0);\r\n        _;\r\n    }\r\n    modifier rateIsSet(uint256 _rate) {\r\n        assert(_rate != 0);\r\n        _;\r\n    }\r\n\r\n    modifier whenNotEnded() {\r\n        assert(!isEnded());\r\n        _;\r\n    }\r\n\r\n    modifier tokensNotDelivered() {\r\n        assert(numOfDeliveredCrowdsalePurchases == 0);\r\n        assert(numOfDeliveredEarlyPurchases == 0);\r\n        _;\r\n    }\r\n\r\n    modifier onlyFundraiser() {\r\n        assert(address(starbaseToken) != 0);\r\n        assert(starbaseToken.isFundraiser(msg.sender));\r\n        _;\r\n    }\r\n\r\n    modifier onlyQualifiedPartner() {\r\n        assert(qualifiedPartners[msg.sender].bonaFide);\r\n        _;\r\n    }\r\n\r\n    modifier onlyQualifiedPartnerORPicopsCertified() {\r\n        assert(qualifiedPartners[msg.sender].bonaFide || picopsCertifier.certified(msg.sender));\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * Contract functions\r\n     */\r\n    /**\r\n     * @dev Contract constructor function sets owner address and\r\n     *      address of StarbaseEarlyPurchaseAmendment contract.\r\n     * @param starbaseEpAddr The address that holds the early purchasers Star tokens\r\n     * @param picopsCertifierAddr The address of the PICOPS certifier.\r\n     *                            See also https://picops.parity.io/#/details\r\n     */\r\n    function StarbaseCrowdsale(address starbaseEpAddr, address picopsCertifierAddr) {\r\n        require(starbaseEpAddr != 0 && picopsCertifierAddr != 0);\r\n        owner = msg.sender;\r\n        starbaseEpAmendment = StarbaseEarlyPurchaseAmendment(starbaseEpAddr);\r\n        picopsCertifier = Certifier(picopsCertifierAddr);\r\n    }\r\n\r\n    /**\r\n     * @dev Fallback accepts payment for Star tokens with Eth\r\n     */\r\n    function() payable {\r\n        redirectToPurchase();\r\n    }\r\n\r\n    /**\r\n     * External functions\r\n     */\r\n\r\n    /**\r\n     * @dev Setup function sets external contracts' addresses and set the max crowdsale cap\r\n     * @param starbaseTokenAddress Token address.\r\n     * @param _purchaseStartBlock Block number to start crowdsale\r\n     */\r\n    function setup(address starbaseTokenAddress, uint256 _purchaseStartBlock)\r\n        external\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        require(starbaseTokenAddress != address(0));\r\n        require(address(starbaseToken) == 0);\r\n        starbaseToken = AbstractStarbaseToken(starbaseTokenAddress);\r\n        purchaseStartBlock = _purchaseStartBlock;\r\n\r\n        // set the max cap of this crowdsale\r\n        maxCrowdsaleCap = MAX_CAP.sub(totalAmountOfEarlyPurchasesWithoutBonus());\r\n\r\n        assert(maxCrowdsaleCap > 0);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers raised funds to company's wallet address at any given time.\r\n     */\r\n    function withdrawForCompany()\r\n        external\r\n        onlyFundraiser\r\n        hasBalance\r\n    {\r\n        address company = starbaseToken.company();\r\n        require(company != address(0));\r\n        company.transfer(this.balance);\r\n    }\r\n\r\n    /**\r\n     * @dev Update start block Number for the crowdsale\r\n     */\r\n    function updatePurchaseStartBlock(uint256 _purchaseStartBlock)\r\n        external\r\n        whenNotStarted\r\n        onlyFundraiser\r\n        returns (bool)\r\n    {\r\n        purchaseStartBlock = _purchaseStartBlock;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Update the CNY/ETH rate to record purchases in CNY\r\n     */\r\n    function updateCnyEthRate(uint256 rate)\r\n        external\r\n        onlyFundraiser\r\n        returns (bool)\r\n    {\r\n        cnyEthRate = rate;\r\n        CnyEthRateUpdated(cnyEthRate);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Update the CNY/BTC rate to record purchases in CNY\r\n     */\r\n    function updateCnyBtcRate(uint256 rate)\r\n        external\r\n        onlyFundraiser\r\n        returns (bool)\r\n    {\r\n        cnyBtcRate = rate;\r\n        CnyBtcRateUpdated(cnyBtcRate);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Allow for the possibility for contract owner to start crowdsale\r\n     */\r\n    function ownerStartsCrowdsale(uint256 timestamp)\r\n        external\r\n        whenNotStarted\r\n        onlyOwner\r\n    {\r\n        assert(block.number >= purchaseStartBlock);   // this should be after the crowdsale start block\r\n        startCrowdsale(timestamp);\r\n    }\r\n\r\n    /**\r\n     * @dev Ends crowdsale\r\n     *      This may be executed by an owner if the raised funds did not reach the map cap\r\n     * @param timestamp Timestamp at the crowdsale ended\r\n     */\r\n    function endCrowdsale(uint256 timestamp)\r\n        external\r\n        onlyOwner\r\n    {\r\n        assert(timestamp > 0 && timestamp <= now);\r\n        assert(block.number >= purchaseStartBlock && endedAt == 0);   // cannot end before it starts and overwriting time is not permitted\r\n        endedAt = timestamp;\r\n        CrowdsaleEnded(endedAt);\r\n    }\r\n\r\n    /**\r\n     * @dev Ends crowdsale\r\n     *      This may be executed by purchaseWithEth when the raised funds reach the map cap\r\n     */\r\n    function endCrowdsale() internal {\r\n        assert(block.number >= purchaseStartBlock && endedAt == 0);\r\n        endedAt = now;\r\n        CrowdsaleEnded(endedAt);\r\n    }\r\n\r\n    /**\r\n     * @dev Deliver tokens to purchasers according to their purchase amount in CNY\r\n     */\r\n    function withdrawPurchasedTokens()\r\n        external\r\n        whenEnded\r\n        returns (bool)\r\n    {\r\n        assert(earlyPurchasesLoaded);\r\n        assert(address(starbaseToken) != 0);\r\n\r\n        /*\r\n         * “Value” refers to the contribution of the User:\r\n         *  {crowdsale_purchaser_token_amount} =\r\n         *  {crowdsale_token_amount} * {crowdsalePurchase_value} / {earlypurchase_value} + {crowdsale_value}.\r\n         *\r\n         * Example: If a User contributes during the Contribution Period 100 CNY (including applicable\r\n         * Bonus, if any) and the total amount early purchases amounts to 6’000’000 CNY\r\n         * and total amount raised during the Contribution Period is 30’000’000, then he will get\r\n         * 347.22 STAR = 125’000’000 STAR * 100 CNY / 30’000’000 CNY + 6’000’000 CNY.\r\n        */\r\n\r\n        if (crowdsalePurchaseAmountBy[msg.sender] > 0) {\r\n            uint256 crowdsalePurchaseValue = crowdsalePurchaseAmountBy[msg.sender];\r\n            crowdsalePurchaseAmountBy[msg.sender] = 0;\r\n\r\n            uint256 tokenCount =\r\n                SafeMath.mul(crowdsaleTokenAmount, crowdsalePurchaseValue) /\r\n                totalRaisedAmountInCny();\r\n\r\n            numOfPurchasedTokensOnCsBy[msg.sender] =\r\n                SafeMath.add(numOfPurchasedTokensOnCsBy[msg.sender], tokenCount);\r\n            assert(starbaseToken.allocateToCrowdsalePurchaser(msg.sender, tokenCount));\r\n            numOfDeliveredCrowdsalePurchases++;\r\n        }\r\n\r\n        /*\r\n         * “Value” refers to the contribution of the User:\r\n         * {earlypurchaser_token_amount} =\r\n         * {earlypurchaser_token_amount} * ({earlypurchase_value} / {total_earlypurchase_value})\r\n         *  + {crowdsale_token_amount} * ({earlypurchase_value} / {earlypurchase_value} + {crowdsale_value}).\r\n         *\r\n         * Example: If an Early Purchaser contributes 100 CNY (including Bonus of 20%) and the\r\n         * total amount of early purchases amounts to 6’000’000 CNY and the total amount raised\r\n         * during the Contribution Period is 30’000’000 CNY, then he will get 1180.55 STAR =\r\n         * 50’000’000 STAR * 100 CNY / 6’000’000 CNY + 125’000’000 STAR * 100 CNY /\r\n         * 30’000’000 CNY + 6’000’000 CNY\r\n         */\r\n\r\n        if (earlyPurchasedAmountBy[msg.sender] > 0) {  // skip if is not an early purchaser\r\n            uint256 earlyPurchaserPurchaseValue = earlyPurchasedAmountBy[msg.sender];\r\n            earlyPurchasedAmountBy[msg.sender] = 0;\r\n\r\n            uint256 epTokenCalculationFromEPTokenAmount = SafeMath.mul(earlyPurchaseTokenAmount, earlyPurchaserPurchaseValue) / totalAmountOfEarlyPurchases;\r\n\r\n            uint256 epTokenCalculationFromCrowdsaleTokenAmount = SafeMath.mul(crowdsaleTokenAmount, earlyPurchaserPurchaseValue) / totalRaisedAmountInCny();\r\n\r\n            uint256 epTokenCount = SafeMath.add(epTokenCalculationFromEPTokenAmount, epTokenCalculationFromCrowdsaleTokenAmount);\r\n\r\n            numOfPurchasedTokensOnEpBy[msg.sender] = SafeMath.add(numOfPurchasedTokensOnEpBy[msg.sender], epTokenCount);\r\n            assert(starbaseToken.allocateToCrowdsalePurchaser(msg.sender, epTokenCount));\r\n            numOfDeliveredEarlyPurchases++;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Load early purchases from the contract keeps track of them\r\n     */\r\n    function loadEarlyPurchases() external onlyOwner returns (bool) {\r\n        if (earlyPurchasesLoaded) {\r\n            return false;    // all EPs have already been loaded\r\n        }\r\n\r\n        uint256 numOfOrigEp = starbaseEpAmendment\r\n            .starbaseEarlyPurchase()\r\n            .numberOfEarlyPurchases();\r\n\r\n        for (uint256 i = numOfLoadedEarlyPurchases; i < numOfOrigEp && msg.gas > 200000; i++) {\r\n            if (starbaseEpAmendment.isInvalidEarlyPurchase(i)) {\r\n                numOfLoadedEarlyPurchases = SafeMath.add(numOfLoadedEarlyPurchases, 1);\r\n                continue;\r\n            }\r\n            var (purchaser, amount,) =\r\n                starbaseEpAmendment.isAmendedEarlyPurchase(i)\r\n                ? starbaseEpAmendment.amendedEarlyPurchases(i)\r\n                : starbaseEpAmendment.earlyPurchases(i);\r\n            if (amount > 0) {\r\n                if (earlyPurchasedAmountBy[purchaser] == 0) {\r\n                    earlyPurchasers.push(purchaser);\r\n                }\r\n                // each early purchaser receives 20% bonus\r\n                uint256 bonus = SafeMath.mul(amount, 20) / 100;\r\n                uint256 amountWithBonus = SafeMath.add(amount, bonus);\r\n\r\n                earlyPurchasedAmountBy[purchaser] = SafeMath.add(earlyPurchasedAmountBy[purchaser], amountWithBonus);\r\n                totalAmountOfEarlyPurchases = totalAmountOfEarlyPurchases.add(amountWithBonus);\r\n            }\r\n\r\n            numOfLoadedEarlyPurchases = SafeMath.add(numOfLoadedEarlyPurchases, 1);\r\n        }\r\n\r\n        assert(numOfLoadedEarlyPurchases <= numOfOrigEp);\r\n        if (numOfLoadedEarlyPurchases == numOfOrigEp) {\r\n            earlyPurchasesLoaded = true;    // enable the flag\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Load presale purchases from the contract keeps track of them\r\n     * @param starbaseCrowdsalePresale Starbase presale contract address\r\n     */\r\n    function loadPresalePurchases(address starbaseCrowdsalePresale)\r\n        external\r\n        onlyOwner\r\n        whenNotEnded\r\n    {\r\n        require(starbaseCrowdsalePresale != 0);\r\n        require(!presalePurchasesLoaded);\r\n        StarbaseCrowdsale presale = StarbaseCrowdsale(starbaseCrowdsalePresale);\r\n        for (uint i; i < presale.numOfPurchases(); i++) {\r\n            var (purchaser, amount, rawAmount, purchasedAt) =\r\n                presale.crowdsalePurchases(i);  // presale purchase\r\n            crowdsalePurchases.push(CrowdsalePurchase(purchaser, amount, rawAmount, purchasedAt));\r\n\r\n            // Increase the sums\r\n            crowdsalePurchaseAmountBy[purchaser] = SafeMath.add(crowdsalePurchaseAmountBy[purchaser], amount);\r\n            totalAmountOfCrowdsalePurchases = totalAmountOfCrowdsalePurchases.add(amount);\r\n            totalAmountOfCrowdsalePurchasesWithoutBonus = totalAmountOfCrowdsalePurchasesWithoutBonus.add(rawAmount);\r\n        }\r\n        presalePurchasesLoaded = true;\r\n    }\r\n\r\n    /**\r\n      * @dev Set qualified crowdsale partner i.e. Bitcoin Suisse address\r\n      * @param _qualifiedPartner Address of the qualified partner that can purchase during crowdsale\r\n      * @param _amountCap Ether value which partner is able to contribute\r\n      * @param _commissionFeePercentage Integer that represents the fee to pay qualified partner 5 is 5%\r\n      */\r\n    function setQualifiedPartner(address _qualifiedPartner, uint256 _amountCap, uint256 _commissionFeePercentage)\r\n        external\r\n        onlyOwner\r\n    {\r\n        assert(!qualifiedPartners[_qualifiedPartner].bonaFide);\r\n        qualifiedPartners[_qualifiedPartner].bonaFide = true;\r\n        qualifiedPartners[_qualifiedPartner].amountCap = _amountCap;\r\n        qualifiedPartners[_qualifiedPartner].commissionFeePercentage = _commissionFeePercentage;\r\n        QualifiedPartnerAddress(_qualifiedPartner);\r\n    }\r\n\r\n    /**\r\n     * @dev Remove address from qualified partners list.\r\n     * @param _qualifiedPartner Address to be removed from the list.\r\n     */\r\n    function unlistQualifiedPartner(address _qualifiedPartner) external onlyOwner {\r\n        assert(qualifiedPartners[_qualifiedPartner].bonaFide);\r\n        qualifiedPartners[_qualifiedPartner].bonaFide = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Update whitelisted address amount allowed to raise during the presale.\r\n     * @param _qualifiedPartner Qualified Partner address to be updated.\r\n     * @param _amountCap Amount that the address is able to raise during the presale.\r\n     */\r\n    function updateQualifiedPartnerCapAmount(address _qualifiedPartner, uint256 _amountCap) external onlyOwner {\r\n        assert(qualifiedPartners[_qualifiedPartner].bonaFide);\r\n        qualifiedPartners[_qualifiedPartner].amountCap = _amountCap;\r\n    }\r\n\r\n    /**\r\n     * Public functions\r\n     */\r\n\r\n    /**\r\n     * @dev Returns boolean for whether crowdsale has ended\r\n     */\r\n    function isEnded() constant public returns (bool) {\r\n        return (endedAt > 0 && endedAt <= now);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns number of purchases to date.\r\n     */\r\n    function numOfPurchases() constant public returns (uint256) {\r\n        return crowdsalePurchases.length;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns total raised amount in CNY (includes EP) and bonuses\r\n     */\r\n    function totalRaisedAmountInCny() constant public returns (uint256) {\r\n        return totalAmountOfEarlyPurchases.add(totalAmountOfCrowdsalePurchases);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns total amount of early purchases in CNY and bonuses\r\n     */\r\n    function totalAmountOfEarlyPurchasesWithBonus() constant public returns(uint256) {\r\n       return starbaseEpAmendment.totalAmountOfEarlyPurchases().mul(120).div(100);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns total amount of early purchases in CNY\r\n     */\r\n    function totalAmountOfEarlyPurchasesWithoutBonus() constant public returns(uint256) {\r\n       return starbaseEpAmendment.totalAmountOfEarlyPurchases();\r\n    }\r\n\r\n    /**\r\n     * @dev Allows qualified crowdsale partner to purchase Star Tokens\r\n     */\r\n    function purchaseAsQualifiedPartner()\r\n        payable\r\n        public\r\n        rateIsSet(cnyEthRate)\r\n        onlyQualifiedPartner\r\n        returns (bool)\r\n    {\r\n        require(msg.value > 0);\r\n        qualifiedPartners[msg.sender].amountRaised = SafeMath.add(msg.value, qualifiedPartners[msg.sender].amountRaised);\r\n\r\n        assert(qualifiedPartners[msg.sender].amountRaised <= qualifiedPartners[msg.sender].amountCap);\r\n\r\n        uint256 rawAmount = SafeMath.mul(msg.value, cnyEthRate) / 1e18;\r\n        recordPurchase(msg.sender, rawAmount, now);\r\n\r\n        if (qualifiedPartners[msg.sender].commissionFeePercentage > 0) {\r\n            sendQualifiedPartnerCommissionFee(msg.sender, msg.value);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows user to purchase STAR tokens with Ether\r\n     */\r\n    function purchaseWithEth()\r\n        payable\r\n        public\r\n        minInvestment\r\n        whenNotEnded\r\n        rateIsSet(cnyEthRate)\r\n        onlyQualifiedPartnerORPicopsCertified\r\n        returns (bool)\r\n    {\r\n        require(purchaseStartBlock > 0 && block.number >= purchaseStartBlock);\r\n\r\n        if (startDate == 0) {\r\n            startCrowdsale(block.timestamp);\r\n        }\r\n\r\n        uint256 rawAmount = SafeMath.mul(msg.value, cnyEthRate) / 1e18;\r\n        recordPurchase(msg.sender, rawAmount, now);\r\n\r\n        if (totalAmountOfCrowdsalePurchasesWithoutBonus >= maxCrowdsaleCap) {\r\n            endCrowdsale(); // ends this crowdsale automatically\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Internal functions\r\n     */\r\n\r\n    /**\r\n     * @dev Initializes Starbase crowdsale\r\n     */\r\n    function startCrowdsale(uint256 timestamp) internal {\r\n        startDate = timestamp;\r\n        uint256 presaleAmount = totalAmountOfCrowdsalePurchasesWithoutBonus;\r\n        if (maxCrowdsaleCap > presaleAmount) {\r\n            uint256 mainSaleCap = maxCrowdsaleCap.sub(presaleAmount);\r\n            uint256 twentyPercentOfCrowdsalePurchase = mainSaleCap.mul(20).div(100);\r\n\r\n            // set token bonus milestones in cny total crowdsale purchase\r\n            firstBonusEnds =  twentyPercentOfCrowdsalePurchase;\r\n            secondBonusEnds = firstBonusEnds.add(twentyPercentOfCrowdsalePurchase);\r\n            thirdBonusEnds =  secondBonusEnds.add(twentyPercentOfCrowdsalePurchase);\r\n            fourthBonusEnds = thirdBonusEnds.add(twentyPercentOfCrowdsalePurchase);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Abstract record of a purchase to Tokens\r\n     * @param purchaser Address of the buyer\r\n     * @param rawAmount Amount in CNY as per the CNY/ETH rate used\r\n     * @param timestamp Timestamp at the purchase made\r\n     */\r\n    function recordPurchase(\r\n        address purchaser,\r\n        uint256 rawAmount,\r\n        uint256 timestamp\r\n    )\r\n        internal\r\n        returns(uint256 amount)\r\n    {\r\n        amount = rawAmount; // amount to check reach of max cap. it does not care for bonus tokens here\r\n\r\n        // presale transfers which occurs before the crowdsale ignores the crowdsale hard cap\r\n        if (block.number >= purchaseStartBlock) {\r\n            require(totalAmountOfCrowdsalePurchasesWithoutBonus < maxCrowdsaleCap);   // check if the amount has already reached the cap\r\n\r\n            uint256 crowdsaleTotalAmountAfterPurchase =\r\n                SafeMath.add(totalAmountOfCrowdsalePurchasesWithoutBonus, amount);\r\n\r\n            // check whether purchase goes over the cap and send the difference back to the purchaser.\r\n            if (crowdsaleTotalAmountAfterPurchase > maxCrowdsaleCap) {\r\n              uint256 difference = SafeMath.sub(crowdsaleTotalAmountAfterPurchase, maxCrowdsaleCap);\r\n              uint256 ethValueToReturn = SafeMath.mul(difference, 1e18) / cnyEthRate;\r\n              purchaser.transfer(ethValueToReturn);\r\n              amount = SafeMath.sub(amount, difference);\r\n              rawAmount = amount;\r\n            }\r\n        }\r\n\r\n        amount = getBonusAmountCalculation(amount); // at this point amount bonus is calculated\r\n\r\n        CrowdsalePurchase memory purchase = CrowdsalePurchase(purchaser, amount, rawAmount, timestamp);\r\n        crowdsalePurchases.push(purchase);\r\n        StarbasePurchasedWithEth(msg.sender, amount, rawAmount, cnyEthRate);\r\n        crowdsalePurchaseAmountBy[purchaser] = SafeMath.add(crowdsalePurchaseAmountBy[purchaser], amount);\r\n        totalAmountOfCrowdsalePurchases = totalAmountOfCrowdsalePurchases.add(amount);\r\n        totalAmountOfCrowdsalePurchasesWithoutBonus = totalAmountOfCrowdsalePurchasesWithoutBonus.add(rawAmount);\r\n        return amount;\r\n    }\r\n\r\n    /**\r\n     * @dev Calculates amount with bonus for bonus milestones\r\n     */\r\n    function calculateBonus\r\n        (\r\n            BonusMilestones nextMilestone,\r\n            uint256 amount,\r\n            uint256 bonusRange,\r\n            uint256 bonusTier,\r\n            uint256 results\r\n        )\r\n        internal\r\n        returns (uint256 result, uint256 newAmount)\r\n    {\r\n        uint256 bonusCalc;\r\n\r\n        if (amount <= bonusRange) {\r\n            bonusCalc = amount.mul(bonusTier).div(100);\r\n\r\n            if (amount.add(totalAmountOfCrowdsalePurchasesWithoutBonus) >= bonusRange)\r\n                bonusMilestones = nextMilestone;\r\n\r\n            result = results.add(amount).add(bonusCalc);\r\n            newAmount = 0;\r\n\r\n        } else {\r\n            bonusCalc = bonusRange.mul(bonusTier).div(100);\r\n            bonusMilestones = nextMilestone;\r\n            result = results.add(bonusRange).add(bonusCalc);\r\n            newAmount = amount.sub(bonusRange);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Fetchs Bonus tier percentage per bonus milestones\r\n     */\r\n    function getBonusAmountCalculation(uint256 amount) internal returns (uint256) {\r\n        if (block.number < purchaseStartBlock) {\r\n            uint256 bonusFromAmount = amount.mul(30).div(100); // presale has 30% bonus\r\n            return amount.add(bonusFromAmount);\r\n        }\r\n\r\n        // range of each bonus milestones\r\n        uint256 firstBonusRange = firstBonusEnds;\r\n        uint256 secondBonusRange = secondBonusEnds.sub(firstBonusEnds);\r\n        uint256 thirdBonusRange = thirdBonusEnds.sub(secondBonusEnds);\r\n        uint256 fourthBonusRange = fourthBonusEnds.sub(thirdBonusEnds);\r\n        uint256 result;\r\n\r\n        if (bonusMilestones == BonusMilestones.First)\r\n            (result, amount) = calculateBonus(BonusMilestones.Second, amount, firstBonusRange, 20, result);\r\n\r\n        if (bonusMilestones == BonusMilestones.Second)\r\n            (result, amount) = calculateBonus(BonusMilestones.Third, amount, secondBonusRange, 15, result);\r\n\r\n        if (bonusMilestones == BonusMilestones.Third)\r\n            (result, amount) = calculateBonus(BonusMilestones.Fourth, amount, thirdBonusRange, 10, result);\r\n\r\n        if (bonusMilestones == BonusMilestones.Fourth)\r\n            (result, amount) = calculateBonus(BonusMilestones.Fifth, amount, fourthBonusRange, 5, result);\r\n\r\n        return result.add(amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Fetchs Bonus tier percentage per bonus milestones\r\n     * @dev qualifiedPartner Address of partners that participated in pre sale\r\n     * @dev amountSent Value sent by qualified partner\r\n     */\r\n    function sendQualifiedPartnerCommissionFee(address qualifiedPartner, uint256 amountSent) internal {\r\n        //calculate the commission fee to send to qualified partner\r\n        uint256 commissionFeePercentageCalculationAmount = SafeMath.mul(amountSent, qualifiedPartners[qualifiedPartner].commissionFeePercentage) / 100;\r\n\r\n        // send commission fee amount\r\n        qualifiedPartner.transfer(commissionFeePercentageCalculationAmount);\r\n    }\r\n\r\n    /**\r\n     * @dev redirectToPurchase Redirect to adequate purchase function within the smart contract\r\n     */\r\n    function redirectToPurchase() internal {\r\n        if (block.number < purchaseStartBlock) {\r\n            purchaseAsQualifiedPartner();\r\n        } else {\r\n            purchaseWithEth();\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"earlyPurchasedAmountBy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleTokenAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"secondBonusEnds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_qualifiedPartner\",\"type\":\"address\"},{\"name\":\"_amountCap\",\"type\":\"uint256\"},{\"name\":\"_commissionFeePercentage\",\"type\":\"uint256\"}],\"name\":\"setQualifiedPartner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"earlyPurchasesLoaded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"purchaseAsQualifiedPartner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"updateCnyBtcRate\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fourthBonusEnds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endedAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numOfLoadedEarlyPurchases\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalRaisedAmountInCny\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"numOfPurchasedTokensOnEpBy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MIN_INVESTMENT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_qualifiedPartner\",\"type\":\"address\"}],\"name\":\"unlistQualifiedPartner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_qualifiedPartner\",\"type\":\"address\"},{\"name\":\"_amountCap\",\"type\":\"uint256\"}],\"name\":\"updateQualifiedPartnerCapAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"picopsCertifier\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"earlyPurchaseTokenAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawForCompany\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"starbaseEpAmendment\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"crowdsalePurchaseAmountBy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"endCrowdsale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"numOfPurchasedTokensOnCsBy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numOfPurchases\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"purchaseWithEth\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalAmountOfEarlyPurchasesWithoutBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cnyBtcRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"crowdsalePurchases\",\"outputs\":[{\"name\":\"purchaser\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"rawAmount\",\"type\":\"uint256\"},{\"name\":\"purchasedAt\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numOfDeliveredCrowdsalePurchases\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numOfDeliveredEarlyPurchases\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presalePurchasesLoaded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cnyEthRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxCrowdsaleCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"earlyPurchasers\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"firstBonusEnds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"updateCnyEthRate\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawPurchasedTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalAmountOfCrowdsalePurchases\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"starbaseToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusMilestones\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"purchaseStartBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_CAP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"qualifiedPartners\",\"outputs\":[{\"name\":\"amountCap\",\"type\":\"uint256\"},{\"name\":\"amountRaised\",\"type\":\"uint256\"},{\"name\":\"bonaFide\",\"type\":\"bool\"},{\"name\":\"commissionFeePercentage\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalAmountOfEarlyPurchases\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"starbaseCrowdsalePresale\",\"type\":\"address\"}],\"name\":\"loadPresalePurchases\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"thirdBonusEnds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalAmountOfCrowdsalePurchasesWithoutBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"loadEarlyPurchases\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"starbaseTokenAddress\",\"type\":\"address\"},{\"name\":\"_purchaseStartBlock\",\"type\":\"uint256\"}],\"name\":\"setup\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ownerStartsCrowdsale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalAmountOfEarlyPurchasesWithBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PURCHASE_AMOUNT_UNIT\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_purchaseStartBlock\",\"type\":\"uint256\"}],\"name\":\"updatePurchaseStartBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"starbaseEpAddr\",\"type\":\"address\"},{\"name\":\"picopsCertifierAddr\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"endedAt\",\"type\":\"uint256\"}],\"name\":\"CrowdsaleEnded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"rawAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"cnyEthRate\",\"type\":\"uint256\"}],\"name\":\"StarbasePurchasedWithEth\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"cnyEthRate\",\"type\":\"uint256\"}],\"name\":\"CnyEthRateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"cnyBtcRate\",\"type\":\"uint256\"}],\"name\":\"CnyBtcRateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"qualifiedPartner\",\"type\":\"address\"}],\"name\":\"QualifiedPartnerAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"StarbaseCrowdsale","CompilerVersion":"v0.4.16+commit.d7661dd9","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000859e7e76caede3b642fc84862809f60c055cb7310000000000000000000000001e2f058c43ac8965938f6e9ca286685a3e63f24e","Library":"","SwarmSource":"bzzr://1d7c2cd31d275d766618ee81038956d41e6fe08d758cd5bbe92b7ac6a73aff8b"}]}