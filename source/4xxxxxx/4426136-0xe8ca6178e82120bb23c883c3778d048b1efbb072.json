{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\ncontract token {\r\n    function transferFrom(address, address, uint) returns(bool){}\r\n    function burn() {}\r\n}\r\n\r\ncontract SafeMath {\r\n    //internals\r\n\r\n    function safeMul(uint a, uint b) internal returns (uint) {\r\n        uint c = a * b;\r\n        Assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function safeSub(uint a, uint b) internal returns (uint) {\r\n        Assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function safeAdd(uint a, uint b) internal returns (uint) {\r\n        uint c = a + b;\r\n        Assert(c >= a && c >= b);\r\n        return c;\r\n    }\r\n\r\n    function Assert(bool assertion) internal {\r\n        if (!assertion) {\r\n            revert();\r\n        }\r\n    }\r\n}\r\n\r\n\r\ncontract Crowdsale is SafeMath {\r\n    /*Owner's address*/\r\n    address public owner;\r\n    /* tokens will be transferred from BAP's address */\r\n    address public initialTokensHolder = 0xB27590b9d328bA0396271303e24db44132531411;\r\n    /* if the funding goal is not reached, investors may withdraw their funds */\r\n    uint public fundingGoal =  260000000;\r\n    /* the maximum amount of tokens to be sold */\r\n    uint public maxGoal     = 2100000000;\r\n    /* how much has been raised by crowdale (in ETH) */\r\n    uint public amountRaised;\r\n    /* the start date of the crowdsale 12:00 am 31/11/2017 */\r\n    uint public start = 1508929200;\r\n    /* the start date of the crowdsale 11:59 pm 10/11/2017*/\r\n    uint public end =   1508936400;\r\n    /*token's price  1ETH = 15000 KRB*/\r\n    uint public tokenPrice = 15000;\r\n    /* the number of tokens already sold */\r\n    uint public tokensSold;\r\n    /* the address of the token contract */\r\n    token public tokenReward;\r\n    /* the balances (in ETH) of all investors */\r\n    mapping(address => uint256) public balanceOf;\r\n    /*this mapping tracking allowed specific investor to invest and their referral */\r\n    mapping(address => address) public permittedInvestors;\r\n    /* indicated if the funding goal has been reached. */\r\n    bool public fundingGoalReached = false;\r\n    /* indicates if the crowdsale has been closed already */\r\n    bool public crowdsaleClosed = false;\r\n    /* this wallet will store all the fund made by ICO after ICO success*/\r\n    address beneficiary = 0x12bF8E198A6474FC65cEe0e1C6f1C7f23324C8D5;\r\n    /* notifying transfers and the success of the crowdsale*/\r\n    event GoalReached(address TokensHolderAddr, uint amountETHRaised);\r\n    event FundTransfer(address backer, uint amount, uint amountRaisedInICO, uint amountTokenSold, uint tokensHaveSold);\r\n    event TransferToReferrer(address indexed backer, address indexed referrerAddress, uint commission, uint amountReferralHasInvested, uint tokensReferralHasBought);\r\n    event AllowSuccess(address indexed investorAddr, address referralAddr);\r\n    event Withdraw(address indexed recieve, uint amount);\r\n\r\n    function changeTime(uint _start, uint _end){\r\n        start = _start;\r\n        end   = _end;\r\n    }\r\n\r\n    function changeMaxMin(uint _min, uint _max){\r\n        fundingGoal = _min;\r\n        maxGoal     = _max;\r\n    }\r\n\r\n    /*  initialization, set the token address */\r\n    function Crowdsale() {\r\n        tokenReward = token(0x1960edc283c1c7b9fba34da4cc1aa665eec0587e);\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /* invest by sending ether to the contract. */\r\n    function () payable {\r\n        invest();\r\n    }\r\n\r\n    function invest() payable {\r\n        if(permittedInvestors[msg.sender] == 0x0) {\r\n            revert();\r\n        }\r\n        uint amount = msg.value;\r\n        uint numTokens = safeMul(amount, tokenPrice) / 1000000000000000000; // 1 ETH\r\n        if (now < start || now > end || safeAdd(tokensSold, numTokens) > maxGoal) {\r\n            revert();\r\n        }\r\n        balanceOf[msg.sender] = safeAdd(balanceOf[msg.sender], amount);\r\n        amountRaised = safeAdd(amountRaised, amount);\r\n        tokensSold += numTokens;\r\n        if (!tokenReward.transferFrom(initialTokensHolder, msg.sender, numTokens)) {\r\n            revert();\r\n        }\r\n        if(permittedInvestors[msg.sender] != initialTokensHolder) {\r\n            uint commission = safeMul(numTokens, 5) / 100;\r\n            if(commission != 0){\r\n                /* we plus maxGoal for referrer in value param to distinguish between tokens for investors and tokens for referrer.\r\n                This value will be subtracted in token contract */\r\n                if (!tokenReward.transferFrom(initialTokensHolder, permittedInvestors[msg.sender], safeAdd(commission, maxGoal))) {\r\n                    revert();\r\n                }\r\n                TransferToReferrer(msg.sender, permittedInvestors[msg.sender], commission, amount, numTokens);\r\n            }\r\n        }\r\n\r\n        FundTransfer(msg.sender, amount, amountRaised, tokensSold, numTokens);\r\n    }\r\n\r\n    modifier afterDeadline() {\r\n        if (now < end) {\r\n            revert();\r\n        }\r\n        _;\r\n\r\n    }\r\n    modifier onlyOwner {\r\n        if (msg.sender != owner) {\r\n            revert();\r\n        }\r\n        _;\r\n    }\r\n\r\n    /* checks if the goal or time limit has been reached and ends the campaign */\r\n    function checkGoalReached() {\r\n        if((tokensSold >= fundingGoal && now >= end) || (tokensSold >= maxGoal)) {\r\n            fundingGoalReached = true;\r\n            crowdsaleClosed = true;\r\n            tokenReward.burn();\r\n            sendToBeneficiary();\r\n            GoalReached(initialTokensHolder, amountRaised);\r\n        }\r\n        if(now >= end) {\r\n            crowdsaleClosed = true;\r\n        }\r\n    }\r\n\r\n    function allowInvest(address investorAddress, address referralAddress) onlyOwner external {\r\n        require(permittedInvestors[investorAddress] == 0x0);\r\n        if(referralAddress != 0x0 && permittedInvestors[referralAddress] == 0x0) revert();\r\n        permittedInvestors[investorAddress] = referralAddress == 0x0 ? initialTokensHolder : referralAddress;\r\n        AllowSuccess(investorAddress, referralAddress);\r\n    }\r\n\r\n    /* send money to beneficiary */\r\n    function sendToBeneficiary() internal {\r\n        beneficiary.transfer(this.balance);\r\n    }\r\n\r\n\r\n    /*if the ICO is fail, investors will call this function to get their money back */\r\n    function safeWithdrawal() afterDeadline {\r\n        require(this.balance != 0);\r\n        if(!crowdsaleClosed) revert();\r\n        uint amount = balanceOf[msg.sender];\r\n        if(address(this).balance >= amount) {\r\n            balanceOf[msg.sender] = 0;\r\n            if (amount > 0) {\r\n                msg.sender.transfer(amount);\r\n                Withdraw(msg.sender, amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    function kill() onlyOwner {\r\n        selfdestruct(beneficiary);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"checkGoalReached\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_min\",\"type\":\"uint256\"},{\"name\":\"_max\",\"type\":\"uint256\"}],\"name\":\"changeMaxMin\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"investorAddress\",\"type\":\"address\"},{\"name\":\"referralAddress\",\"type\":\"address\"}],\"name\":\"allowInvest\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialTokensHolder\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenReward\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_start\",\"type\":\"uint256\"},{\"name\":\"_end\",\"type\":\"uint256\"}],\"name\":\"changeTime\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundingGoal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"amountRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"start\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleClosed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundingGoalReached\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"invest\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"end\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"permittedInvestors\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxGoal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"safeWithdrawal\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"TokensHolderAddr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amountETHRaised\",\"type\":\"uint256\"}],\"name\":\"GoalReached\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"backer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amountRaisedInICO\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amountTokenSold\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokensHaveSold\",\"type\":\"uint256\"}],\"name\":\"FundTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"backer\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"referrerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"commission\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amountReferralHasInvested\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokensReferralHasBought\",\"type\":\"uint256\"}],\"name\":\"TransferToReferrer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"investorAddr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"referralAddr\",\"type\":\"address\"}],\"name\":\"AllowSuccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"recieve\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"}]","ContractName":"Crowdsale","CompilerVersion":"v0.4.11+commit.68ef5810","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://45240edf3f565586409a90942531a33f2e755debb230653f0c1f6e763a1ec706"}]}