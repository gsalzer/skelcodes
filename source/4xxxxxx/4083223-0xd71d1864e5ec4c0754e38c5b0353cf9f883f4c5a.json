{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13;\r\n\r\n// note: breaks if members.length exceeds 2^256-1 (so, not really a problem)\r\nlibrary Sets {\r\n    // address set\r\n    struct addressSet {\r\n        address[] members;\r\n        mapping (address => bool) memberExists;\r\n        mapping (address => uint) memberIndex;\r\n    }\r\n\r\n    function insert(addressSet storage self, address other) {\r\n        if (!self.memberExists[other]) {\r\n            self.memberExists[other] = true;\r\n            self.memberIndex[other] = self.members.length;\r\n            self.members.push(other);\r\n        }\r\n    }\r\n\r\n    function remove(addressSet storage self, address other) {\r\n        if (self.memberExists[other])  {\r\n            self.memberExists[other] = false;\r\n            uint index = self.memberIndex[other];\r\n            // change index of last value to index of other \r\n            self.memberIndex[self.members[self.members.length - 1]] = index;\r\n            // copy last value over other and decrement length\r\n            self.members[index] = self.members[self.members.length - 1];\r\n            self.members.length--;\r\n        }\r\n    }\r\n\r\n    function contains(addressSet storage self, address other) returns (bool) {\r\n        return self.memberExists[other];\r\n    }\r\n\r\n    function length(addressSet storage self) returns (uint256) {\r\n        return self.members.length;\r\n    }\r\n\r\n\r\n    // uint set\r\n    struct uintSet {\r\n        uint[] members;\r\n        mapping (uint => bool) memberExists;\r\n        mapping (uint => uint) memberIndex;\r\n    }\r\n\r\n    function insert(uintSet storage self, uint other) {\r\n        if (!self.memberExists[other]) {\r\n            self.memberExists[other] = true;\r\n            self.memberIndex[other] = self.members.length;\r\n            self.members.push(other);\r\n        }\r\n    }\r\n\r\n    function remove(uintSet storage self, uint other) {\r\n        if (self.memberExists[other])  {\r\n            self.memberExists[other] = false;\r\n            uint index = self.memberIndex[other];\r\n            // change index of last value to index of other \r\n            self.memberIndex[self.members[self.members.length - 1]] = index;\r\n            // copy last value over other and decrement length\r\n            self.members[index] = self.members[self.members.length - 1];\r\n            self.members.length--;\r\n        }\r\n    }\r\n\r\n    function contains(uintSet storage self, uint other) returns (bool) {\r\n        return self.memberExists[other];\r\n    }\r\n\r\n    function length(uintSet storage self) returns (uint256) {\r\n        return self.members.length;\r\n    }\r\n\r\n\r\n    // uint8 set\r\n    struct uint8Set {\r\n        uint8[] members;\r\n        mapping (uint8 => bool) memberExists;\r\n        mapping (uint8 => uint) memberIndex;\r\n    }\r\n\r\n    function insert(uint8Set storage self, uint8 other) {\r\n        if (!self.memberExists[other]) {\r\n            self.memberExists[other] = true;\r\n            self.memberIndex[other] = self.members.length;\r\n            self.members.push(other);\r\n        }\r\n    }\r\n\r\n    function remove(uint8Set storage self, uint8 other) {\r\n        if (self.memberExists[other])  {\r\n            self.memberExists[other] = false;\r\n            uint index = self.memberIndex[other];\r\n            // change index of last value to index of other \r\n            self.memberIndex[self.members[self.members.length - 1]] = index;\r\n            // copy last value over other and decrement length\r\n            self.members[index] = self.members[self.members.length - 1];\r\n            self.members.length--;\r\n        }\r\n    }\r\n\r\n    function contains(uint8Set storage self, uint8 other) returns (bool) {\r\n        return self.memberExists[other];\r\n    }\r\n\r\n    function length(uint8Set storage self) returns (uint256) {\r\n        return self.members.length;\r\n    }\r\n\r\n\r\n    // int set\r\n    struct intSet {\r\n        int[] members;\r\n        mapping (int => bool) memberExists;\r\n        mapping (int => uint) memberIndex;\r\n    }\r\n\r\n    function insert(intSet storage self, int other) {\r\n        if (!self.memberExists[other]) {\r\n            self.memberExists[other] = true;\r\n            self.memberIndex[other] = self.members.length;\r\n            self.members.push(other);\r\n        }\r\n    }\r\n\r\n    function remove(intSet storage self, int other) {\r\n        if (self.memberExists[other])  {\r\n            self.memberExists[other] = false;\r\n            uint index = self.memberIndex[other];\r\n            // change index of last value to index of other \r\n            self.memberIndex[self.members[self.members.length - 1]] = index;\r\n            // copy last value over other and decrement length\r\n            self.members[index] = self.members[self.members.length - 1];\r\n            self.members.length--;\r\n        }\r\n    }\r\n\r\n    function contains(intSet storage self, int other) returns (bool) {\r\n        return self.memberExists[other];\r\n    }\r\n\r\n    function length(intSet storage self) returns (uint256) {\r\n        return self.members.length;\r\n    }\r\n\r\n\r\n    // int8 set\r\n    struct int8Set {\r\n        int8[] members;\r\n        mapping (int8 => bool) memberExists;\r\n        mapping (int8 => uint) memberIndex;\r\n    }\r\n\r\n    function insert(int8Set storage self, int8 other) {\r\n        if (!self.memberExists[other]) {\r\n            self.memberExists[other] = true;\r\n            self.memberIndex[other] = self.members.length;\r\n            self.members.push(other);\r\n        }\r\n    }\r\n\r\n    function remove(int8Set storage self, int8 other) {\r\n        if (self.memberExists[other])  {\r\n            self.memberExists[other] = false;\r\n            uint index = self.memberIndex[other];\r\n            // change index of last value to index of other \r\n            self.memberIndex[self.members[self.members.length - 1]] = index;\r\n            // copy last value over other and decrement length\r\n            self.members[index] = self.members[self.members.length - 1];\r\n            self.members.length--;\r\n        }\r\n    }\r\n\r\n    function contains(int8Set storage self, int8 other) returns (bool) {\r\n        return self.memberExists[other];\r\n    }\r\n\r\n    function length(int8Set storage self) returns (uint256) {\r\n        return self.members.length;\r\n    }\r\n\r\n\r\n    // byte set\r\n    struct byteSet {\r\n        byte[] members;\r\n        mapping (byte => bool) memberExists;\r\n        mapping (byte => uint) memberIndex;\r\n    }\r\n\r\n    function insert(byteSet storage self, byte other) {\r\n        if (!self.memberExists[other]) {\r\n            self.memberExists[other] = true;\r\n            self.memberIndex[other] = self.members.length;\r\n            self.members.push(other);\r\n        }\r\n    }\r\n\r\n    function remove(byteSet storage self, byte other) {\r\n        if (self.memberExists[other])  {\r\n            self.memberExists[other] = false;\r\n            uint index = self.memberIndex[other];\r\n            // change index of last value to index of other \r\n            self.memberIndex[self.members[self.members.length - 1]] = index;\r\n            // copy last value over other and decrement length\r\n            self.members[index] = self.members[self.members.length - 1];\r\n            self.members.length--;\r\n        }\r\n    }\r\n\r\n    function contains(byteSet storage self, byte other) returns (bool) {\r\n        return self.memberExists[other];\r\n    }\r\n\r\n    function length(byteSet storage self) returns (uint256) {\r\n        return self.members.length;\r\n    }\r\n\r\n\r\n    // bytes32 set\r\n    struct bytes32Set {\r\n        bytes32[] members;\r\n        mapping (bytes32 => bool) memberExists;\r\n        mapping (bytes32 => uint) memberIndex;\r\n    }\r\n\r\n    function insert(bytes32Set storage self, bytes32 other) {\r\n        if (!self.memberExists[other]) {\r\n            self.memberExists[other] = true;\r\n            self.memberIndex[other] = self.members.length;\r\n            self.members.push(other);\r\n        }\r\n    }\r\n\r\n    function remove(bytes32Set storage self, bytes32 other) {\r\n        if (self.memberExists[other])  {\r\n            self.memberExists[other] = false;\r\n            uint index = self.memberIndex[other];\r\n            // change index of last value to index of other \r\n            self.memberIndex[self.members[self.members.length - 1]] = index;\r\n            // copy last value over other and decrement length\r\n            self.members[index] = self.members[self.members.length - 1];\r\n            self.members.length--;\r\n        }\r\n    }\r\n\r\n    function contains(bytes32Set storage self, bytes32 other) returns (bool) {\r\n        return self.memberExists[other];\r\n    }\r\n\r\n    function length(bytes32Set storage self) returns (uint256) {\r\n        return self.members.length;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"self\",\"type\":\"Sets.uint8Set storage\"},{\"name\":\"other\",\"type\":\"uint8\"}],\"name\":\"insert\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"self\",\"type\":\"Sets.intSet storage\"}],\"name\":\"length\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"self\",\"type\":\"Sets.addressSet storage\"},{\"name\":\"other\",\"type\":\"address\"}],\"name\":\"contains\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"self\",\"type\":\"Sets.int8Set storage\"},{\"name\":\"other\",\"type\":\"int8\"}],\"name\":\"remove\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"self\",\"type\":\"Sets.addressSet storage\"},{\"name\":\"other\",\"type\":\"address\"}],\"name\":\"remove\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"self\",\"type\":\"Sets.intSet storage\"},{\"name\":\"other\",\"type\":\"int256\"}],\"name\":\"contains\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"self\",\"type\":\"Sets.intSet storage\"},{\"name\":\"other\",\"type\":\"int256\"}],\"name\":\"remove\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"self\",\"type\":\"Sets.uint8Set storage\"},{\"name\":\"other\",\"type\":\"uint8\"}],\"name\":\"contains\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"self\",\"type\":\"Sets.uintSet storage\"}],\"name\":\"length\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"self\",\"type\":\"Sets.uint8Set storage\"},{\"name\":\"other\",\"type\":\"uint8\"}],\"name\":\"remove\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"self\",\"type\":\"Sets.int8Set storage\"}],\"name\":\"length\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"self\",\"type\":\"Sets.uint8Set storage\"}],\"name\":\"length\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"self\",\"type\":\"Sets.bytes32Set storage\"},{\"name\":\"other\",\"type\":\"bytes32\"}],\"name\":\"insert\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"self\",\"type\":\"Sets.byteSet storage\"},{\"name\":\"other\",\"type\":\"bytes1\"}],\"name\":\"insert\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"self\",\"type\":\"Sets.byteSet storage\"}],\"name\":\"length\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"self\",\"type\":\"Sets.byteSet storage\"},{\"name\":\"other\",\"type\":\"bytes1\"}],\"name\":\"contains\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"self\",\"type\":\"Sets.uintSet storage\"},{\"name\":\"other\",\"type\":\"uint256\"}],\"name\":\"remove\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"self\",\"type\":\"Sets.uintSet storage\"},{\"name\":\"other\",\"type\":\"uint256\"}],\"name\":\"contains\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"self\",\"type\":\"Sets.byteSet storage\"},{\"name\":\"other\",\"type\":\"bytes1\"}],\"name\":\"remove\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"self\",\"type\":\"Sets.bytes32Set storage\"}],\"name\":\"length\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"self\",\"type\":\"Sets.int8Set storage\"},{\"name\":\"other\",\"type\":\"int8\"}],\"name\":\"contains\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"self\",\"type\":\"Sets.bytes32Set storage\"},{\"name\":\"other\",\"type\":\"bytes32\"}],\"name\":\"contains\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"self\",\"type\":\"Sets.intSet storage\"},{\"name\":\"other\",\"type\":\"int256\"}],\"name\":\"insert\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"self\",\"type\":\"Sets.int8Set storage\"},{\"name\":\"other\",\"type\":\"int8\"}],\"name\":\"insert\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"self\",\"type\":\"Sets.uintSet storage\"},{\"name\":\"other\",\"type\":\"uint256\"}],\"name\":\"insert\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"self\",\"type\":\"Sets.addressSet storage\"},{\"name\":\"other\",\"type\":\"address\"}],\"name\":\"insert\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"self\",\"type\":\"Sets.addressSet storage\"}],\"name\":\"length\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"self\",\"type\":\"Sets.bytes32Set storage\"},{\"name\":\"other\",\"type\":\"bytes32\"}],\"name\":\"remove\",\"outputs\":[],\"payable\":false,\"type\":\"function\"}]","ContractName":"Sets","CompilerVersion":"v0.4.13+commit.fb4cb1a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://7ba0f30e6804ca2f50497d77cca1868a7364337ea8ce8bf89aeb1e0e508c1e27"}]}