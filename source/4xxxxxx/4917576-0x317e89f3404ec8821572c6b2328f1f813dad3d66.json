{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.18;\r\n\r\n\r\n/**\r\n * @title Multisignature wallet\r\n * @dev Allows multiple parties to agree on transactions before execution\r\n * @author Stefan George <stefan.george@consensys.net>\r\n * @author Jakub Stefanski (https://github.com/jstefanski)\r\n */\r\ncontract MultiSigWallet {\r\n\r\n    uint256 constant public MAX_OWNER_COUNT = 50;\r\n\r\n    mapping (uint256 => Transaction) public transactions;\r\n    mapping (uint256 => mapping (address => bool)) public confirmations;\r\n\r\n    mapping (address => bool) public isOwner;\r\n    address[] public owners;\r\n\r\n    uint256 public required;\r\n    uint256 public transactionCount;\r\n\r\n    struct Transaction {\r\n        address destination;\r\n        uint256 value;\r\n        bytes data;\r\n        bool executed;\r\n    }\r\n\r\n    event Confirmation(address indexed sender, uint256 indexed transactionId);\r\n\r\n    event Revocation(address indexed sender, uint256 indexed transactionId);\r\n\r\n    event Submission(uint256 indexed transactionId);\r\n\r\n    event Execution(uint256 indexed transactionId);\r\n\r\n    event ExecutionFailure(uint256 indexed transactionId);\r\n\r\n    event Deposit(address indexed sender, uint256 value);\r\n\r\n    event OwnerAddition(address indexed owner);\r\n\r\n    event OwnerRemoval(address indexed owner);\r\n\r\n    event RequirementChange(uint256 required);\r\n\r\n    modifier onlyWallet() {\r\n        require(msg.sender == address(this));\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwnerDoesNotExist(address owner) {\r\n        require(!isOwner[owner]);\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwnerExists(address owner) {\r\n        require(isOwner[owner]);\r\n        _;\r\n    }\r\n\r\n    modifier onlyTransactionExists(uint256 transactionId) {\r\n        require(transactions[transactionId].destination != address(0));\r\n        _;\r\n    }\r\n\r\n    modifier onlyConfirmed(uint256 transactionId, address owner) {\r\n        require(confirmations[transactionId][owner]);\r\n        _;\r\n    }\r\n\r\n    modifier onlyNotConfirmed(uint256 transactionId, address owner) {\r\n        require(!confirmations[transactionId][owner]);\r\n        _;\r\n    }\r\n\r\n    modifier onlyNotExecuted(uint256 transactionId) {\r\n        require(!transactions[transactionId].executed);\r\n        _;\r\n    }\r\n\r\n    modifier onlyValid(address _address) {\r\n        require(_address != 0);\r\n        _;\r\n    }\r\n\r\n    modifier onlyValidRequirement(uint256 ownerCount, uint256 _required) {\r\n        require(ownerCount > 0);\r\n        require(ownerCount <= MAX_OWNER_COUNT);\r\n        require(_required > 0);\r\n        require(_required <= ownerCount);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Contract constructor sets initial owners and required number of confirmations\r\n     * @param _owners List of initial owners\r\n     * @param _required Number of required confirmations\r\n     */\r\n    function MultiSigWallet(address[] _owners, uint256 _required)\r\n        public\r\n        onlyValidRequirement(_owners.length, _required)\r\n    {\r\n        for (uint256 i = 0; i < _owners.length; i++) {\r\n            require(!isOwner[_owners[i]] && _owners[i] != address(0));\r\n\r\n            isOwner[_owners[i]] = true;\r\n        }\r\n\r\n        owners = _owners;\r\n        required = _required;\r\n    }\r\n\r\n    /**\r\n     * @dev Fallback function allows ETH deposits\r\n     */\r\n    function() public payable {\r\n        if (msg.value > 0) {\r\n            Deposit(msg.sender, msg.value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Add a new owner\r\n     * @dev Transaction has to be sent by wallet\r\n     * @param owner The address of a new owner\r\n     */\r\n    function addOwner(address owner)\r\n        public\r\n        onlyWallet\r\n        onlyValid(owner)\r\n        onlyOwnerDoesNotExist(owner)\r\n        onlyValidRequirement(owners.length + 1, required)\r\n    {\r\n        isOwner[owner] = true;\r\n        owners.push(owner);\r\n\r\n        OwnerAddition(owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Remove an owner\r\n     * @dev Transaction has to be sent by wallet\r\n     * @param owner The address of an owner\r\n     */\r\n    function removeOwner(address owner)\r\n        public\r\n        onlyWallet\r\n        onlyOwnerExists(owner)\r\n    {\r\n        isOwner[owner] = false;\r\n\r\n        for (uint256 i = 0; i < owners.length - 1; i++) {\r\n            if (owners[i] == owner) {\r\n                owners[i] = owners[owners.length - 1];\r\n                owners.length -= 1;\r\n                break;\r\n            }\r\n        }\r\n\r\n        if (required > owners.length) {\r\n            changeRequirement(owners.length);\r\n        }\r\n\r\n        OwnerRemoval(owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Replace the owner with a new owner\r\n     * @dev Transaction has to be sent by wallet\r\n     * @param owner The address of owner to be replaced\r\n     * @param newOwner The address of new owner\r\n     */\r\n    function replaceOwner(address owner, address newOwner)\r\n        public\r\n        onlyWallet\r\n        onlyOwnerExists(owner)\r\n        onlyOwnerDoesNotExist(newOwner)\r\n    {\r\n        for (uint256 i = 0; i < owners.length; i++) {\r\n            if (owners[i] == owner) {\r\n                owners[i] = newOwner;\r\n                break;\r\n            }\r\n        }\r\n\r\n        isOwner[owner] = false;\r\n        isOwner[newOwner] = true;\r\n\r\n        OwnerRemoval(owner);\r\n        OwnerAddition(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Change the number of required confirmations\r\n     * @dev Transaction has to be sent by wallet\r\n     * @param _required The number of required confirmations\r\n     */\r\n    function changeRequirement(uint256 _required)\r\n        public\r\n        onlyWallet\r\n        onlyValidRequirement(owners.length, _required)\r\n    {\r\n        required = _required;\r\n        RequirementChange(_required);\r\n    }\r\n\r\n    /**\r\n     * @dev Submit and confirm a transaction\r\n     * @dev Transaction has to be sent by wallet\r\n     * @param destination The transaction target address\r\n     * @param value The transaction ETH value\r\n     * @param data The transaction data payload\r\n     * @return A transaction ID\r\n     */\r\n    function submitTransaction(address destination, uint256 value, bytes data)\r\n        public\r\n        onlyOwnerExists(msg.sender)\r\n        returns (uint256 transactionId)\r\n    {\r\n        transactionId = addTransaction(destination, value, data);\r\n        confirmTransaction(transactionId);\r\n    }\r\n\r\n    /**\r\n     * @dev Confirm the transaction\r\n     * @param transactionId The transaction ID\r\n     */\r\n    function confirmTransaction(uint256 transactionId)\r\n        public\r\n        onlyOwnerExists(msg.sender)\r\n        onlyTransactionExists(transactionId)\r\n        onlyNotConfirmed(transactionId, msg.sender)\r\n    {\r\n        confirmations[transactionId][msg.sender] = true;\r\n        Confirmation(msg.sender, transactionId);\r\n\r\n        executeTransaction(transactionId);\r\n    }\r\n\r\n    /**\r\n     * @dev Revoke the transaction confirmation\r\n     * @param transactionId The transaction ID\r\n     */\r\n    function revokeConfirmation(uint256 transactionId)\r\n        public\r\n        onlyOwnerExists(msg.sender)\r\n        onlyConfirmed(transactionId, msg.sender)\r\n        onlyNotExecuted(transactionId)\r\n    {\r\n        confirmations[transactionId][msg.sender] = false;\r\n        Revocation(msg.sender, transactionId);\r\n    }\r\n\r\n    /**\r\n     * @dev Execute confirmed transaction\r\n     * @param transactionId The transaction ID\r\n     */\r\n    function executeTransaction(uint256 transactionId)\r\n        public\r\n        onlyOwnerExists(msg.sender)\r\n        onlyConfirmed(transactionId, msg.sender)\r\n        onlyNotExecuted(transactionId)\r\n    {\r\n        if (isConfirmed(transactionId)) {\r\n            Transaction storage txn = transactions[transactionId];\r\n            txn.executed = true;\r\n\r\n            /* solhint-disable avoid-call-value */\r\n            if (txn.destination.call.value(txn.value)(txn.data)) {\r\n                Execution(transactionId);\r\n            } else {\r\n                ExecutionFailure(transactionId);\r\n                txn.executed = false;\r\n            }\r\n            /* solhint-enable avoid-call-value */\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Check confirmation status of the transaction\r\n     * @param transactionId The transaction ID\r\n     * @return True if transaction is confirmed, otherwise False\r\n     */\r\n    function isConfirmed(uint256 transactionId)\r\n        public\r\n        view\r\n        returns (bool)\r\n    {\r\n        uint256 count = 0;\r\n        for (uint256 i=0; i < owners.length; i++) {\r\n            if (confirmations[transactionId][owners[i]]) {\r\n                count += 1;\r\n            }\r\n\r\n            if (count == required) {\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Get number of confirmations of the transaction\r\n     * @param transactionId The transaction ID\r\n     * @return Number of confirmations\r\n     */\r\n    function getConfirmationCount(uint256 transactionId)\r\n        public\r\n        view\r\n        returns (uint256 count)\r\n    {\r\n        for (uint256 i = 0; i < owners.length; i++) {\r\n            if (confirmations[transactionId][owners[i]]) {\r\n                count += 1;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Get total number of transactions after filers are applied\r\n     * @param pending Include pending transactions\r\n     * @param executed Include executed transactions\r\n     * @return Total number of transactions after filters are applied\r\n     */\r\n    function getTransactionCount(bool pending, bool executed)\r\n        public\r\n        view\r\n        returns (uint256 count)\r\n    {\r\n        for (uint256 i = 0; i < transactionCount; i++) {\r\n            bool txExecuted = transactions[i].executed;\r\n\r\n            if ((pending && !txExecuted) || (executed && txExecuted)) {\r\n                count += 1;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Get list of owners\r\n     * @return List of owner addresses\r\n     */\r\n    function getOwners()\r\n        public\r\n        view\r\n        returns (address[])\r\n    {\r\n        return owners;\r\n    }\r\n\r\n    /**\r\n     * @dev Get array with owner addresses that confirmed the transaction\r\n     * @param transactionId The transaction ID\r\n     * @return Array of owner addresses that confirmed the transaction\r\n     */\r\n    function getConfirmations(uint256 transactionId)\r\n        public\r\n        view\r\n        returns (address[] _confirmations)\r\n    {\r\n        address[] memory confirmationsTemp = new address[](owners.length);\r\n        uint256 count = 0;\r\n        uint256 i;\r\n\r\n        for (i = 0; i < owners.length; i++) {\r\n            if (confirmations[transactionId][owners[i]]) {\r\n                confirmationsTemp[count] = owners[i];\r\n                count += 1;\r\n            }\r\n        }\r\n\r\n        _confirmations = new address[](count);\r\n        for (i = 0; i < count; i++) {\r\n            _confirmations[i] = confirmationsTemp[i];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Get list of transaction IDs in defined range\r\n     * @param from Index start position of transaction array\r\n     * @param to Index end position of transaction array\r\n     * @param pending Include pending transactions\r\n     * @param executed Include executed transactions\r\n     * @return Array of transaction IDs\r\n     */\r\n    function getTransactionIds(\r\n        uint256 from,\r\n        uint256 to,\r\n        bool pending,\r\n        bool executed\r\n    )\r\n        public\r\n        view\r\n        returns (uint256[] _transactionIds)\r\n    {\r\n        uint256[] memory transactionIdsTemp = new uint256[](transactionCount);\r\n        uint256 count = 0;\r\n        uint256 i;\r\n\r\n        for (i = 0; i < transactionCount; i++) {\r\n            bool txExecuted = transactions[i].executed;\r\n\r\n            if ((pending && !txExecuted) || (executed && txExecuted)) {\r\n                transactionIdsTemp[count] = i;\r\n                count += 1;\r\n            }\r\n        }\r\n\r\n        _transactionIds = new uint256[](to - from);\r\n        for (i = from; i < to; i++) {\r\n            _transactionIds[i - from] = transactionIdsTemp[i];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Add a new transaction to the transaction mapping\r\n     * @param destination The transaction target address\r\n     * @param value The transaction ether value\r\n     * @param data The transaction data payload\r\n     * @return The transaction ID\r\n     */\r\n    function addTransaction(address destination, uint256 value, bytes data)\r\n        internal\r\n        onlyValid(destination)\r\n        returns (uint256 transactionId)\r\n    {\r\n        transactionId = transactionCount;\r\n        transactions[transactionId] = Transaction({\r\n            destination: destination,\r\n            value: value,\r\n            data: data,\r\n            executed: false\r\n        });\r\n        transactionCount += 1;\r\n\r\n        Submission(transactionId);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"owners\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"removeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"revokeConfirmation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"confirmations\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"pending\",\"type\":\"bool\"},{\"name\":\"executed\",\"type\":\"bool\"}],\"name\":\"getTransactionCount\",\"outputs\":[{\"name\":\"count\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"addOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"isConfirmed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"getConfirmationCount\",\"outputs\":[{\"name\":\"count\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transactions\",\"outputs\":[{\"name\":\"destination\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"},{\"name\":\"executed\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwners\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"from\",\"type\":\"uint256\"},{\"name\":\"to\",\"type\":\"uint256\"},{\"name\":\"pending\",\"type\":\"bool\"},{\"name\":\"executed\",\"type\":\"bool\"}],\"name\":\"getTransactionIds\",\"outputs\":[{\"name\":\"_transactionIds\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"getConfirmations\",\"outputs\":[{\"name\":\"_confirmations\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transactionCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_required\",\"type\":\"uint256\"}],\"name\":\"changeRequirement\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"confirmTransaction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"destination\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"submitTransaction\",\"outputs\":[{\"name\":\"transactionId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_OWNER_COUNT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"required\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"replaceOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"executeTransaction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_owners\",\"type\":\"address[]\"},{\"name\":\"_required\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"Confirmation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"Revocation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"Submission\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"Execution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"ExecutionFailure\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnerAddition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnerRemoval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"required\",\"type\":\"uint256\"}],\"name\":\"RequirementChange\",\"type\":\"event\"}]","ContractName":"MultiSigWallet","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000005000000000000000000000000594f5804eb71d66b16753d7247d7dd031245fbe7000000000000000000000000886351b3135e66523ba495f27ede6982d6936e41000000000000000000000000b2514c4637843336da49ac69394515f04bb01471000000000000000000000000529e8fc0ae96409b89f7255efe9ebe3a55780f2f0000000000000000000000006633b7233b63521b4697bbe92100cf4a1bf70829","Library":"","SwarmSource":"bzzr://67c463fe20fbe6a14ab1fd7fb3fc09abbf5fc1609702f99b732ac6c6925cd7cc"}]}