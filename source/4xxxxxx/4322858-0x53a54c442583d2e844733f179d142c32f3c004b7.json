{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Crowdsale {\r\n  function buyTokens(address _recipient) payable;\r\n}\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner {\r\n    if (newOwner != address(0)) {\r\n      owner = newOwner;\r\n    }\r\n  }\r\n\r\n}\r\n\r\ncontract Preallocation is Ownable {\r\n    using SafeMath for uint;\r\n\r\n    address public investor;\r\n    uint public maxBalance;\r\n\r\n    enum States { Pending, Success, Fail }\r\n    States public state = States.Pending;\r\n\r\n    event InvestorChanged(address from, address to);\r\n\r\n    event FundsLoaded(uint value, address from);\r\n    event FundsRefunded(uint balance);\r\n\r\n    event InvestmentSucceeded(uint value);\r\n    event InvestmentFailed();\r\n\r\n\r\n    function Preallocation(address _investor, uint _maxBalance) {\r\n        investor = _investor;\r\n        maxBalance = _maxBalance;\r\n    }\r\n\r\n    function () payable {\r\n        if (this.balance > maxBalance) {\r\n          throw;\r\n        }\r\n        FundsLoaded(msg.value, msg.sender);\r\n    }\r\n\r\n    function withdraw() onlyOwner notState(States.Success) {\r\n        uint bal = this.balance;\r\n        if (!investor.send(bal)) {\r\n            throw;\r\n        }\r\n\r\n        FundsRefunded(bal);\r\n    }\r\n\r\n    function setInvestor(address _investor) onlyOwner {\r\n        InvestorChanged(investor, _investor);\r\n        investor = _investor;\r\n    }\r\n\r\n    function buyTokens(Crowdsale crowdsale) onlyOwner {\r\n        uint bal = Math.min256(this.balance, maxBalance);\r\n        crowdsale.buyTokens.value(bal)(investor);\r\n\r\n        state = States.Success;\r\n        InvestmentSucceeded(bal);\r\n    }\r\n\r\n    function setFailed() onlyOwner {\r\n      state = States.Fail;\r\n      InvestmentFailed();\r\n    }\r\n\r\n    function stateIs(States _state) constant returns (bool) {\r\n        return state == _state;\r\n    }\r\n\r\n    modifier onlyState(States _state) {\r\n        require (state == _state);\r\n        _;\r\n    }\r\n\r\n    modifier notState(States _state) {\r\n        require (state != _state);\r\n        _;\r\n    }\r\n}\r\n\r\nlibrary Math {\r\n  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n    return a < b ? a : b;\r\n  }\r\n\r\n  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    return a < b ? a : b;\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"setFailed\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"investor\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_state\",\"type\":\"uint8\"}],\"name\":\"stateIs\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_investor\",\"type\":\"address\"}],\"name\":\"setInvestor\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"crowdsale\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_investor\",\"type\":\"address\"},{\"name\":\"_maxBalance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"}],\"name\":\"InvestorChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"}],\"name\":\"FundsLoaded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"FundsRefunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"InvestmentSucceeded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"InvestmentFailed\",\"type\":\"event\"}]","ContractName":"Preallocation","CompilerVersion":"v0.4.11+commit.68ef5810","OptimizationUsed":"1","Runs":"0","ConstructorArguments":"0000000000000000000000002c840d94dcf091b87fd63db7eb0885d9ca4b5f790000000000000000000000000000000000000000000000b2e4b323d9c5100000","Library":"","SwarmSource":"bzzr://32ec3b9985462f4cac10e51fe1a9b9cb7c1471afd1f26bf20dd104fc261c0b9d"}]}