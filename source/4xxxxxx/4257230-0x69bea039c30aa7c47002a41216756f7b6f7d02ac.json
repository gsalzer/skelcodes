{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.16;\r\n\r\n\r\ncontract SafeMath {\r\n  function safeMul(uint a, uint b) internal returns (uint) {\r\n    uint c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function safeDiv(uint a, uint b) internal returns (uint) {\r\n    assert(b > 0);\r\n    uint c = a / b;\r\n    assert(a == b * c + a % b);\r\n    return c;\r\n  }\r\n\r\n  function safeSub(uint a, uint b) internal returns (uint) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function safeAdd(uint a, uint b) internal returns (uint) {\r\n    uint c = a + b;\r\n    assert(c>=a && c>=b);\r\n    return c;\r\n  }\r\n\r\n  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n    return a < b ? a : b;\r\n  }\r\n\r\n  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    return a < b ? a : b;\r\n  }\r\n\r\n  function assert(bool assertion) internal {\r\n    if (!assertion) {\r\n      throw;\r\n    }\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\ncontract ERC20 {\r\n  uint public totalSupply;\r\n  function balanceOf(address who) constant returns (uint);\r\n  function allowance(address owner, address spender) constant returns (uint);\r\n\r\n  function transfer(address to, uint value) returns (bool ok);\r\n  function transferFrom(address from, address to, uint value) returns (bool ok);\r\n  function approve(address spender, uint value) returns (bool ok);\r\n  event Transfer(address indexed from, address indexed to, uint value);\r\n  event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\n\r\n\r\n\r\ncontract StandardToken is ERC20, SafeMath {\r\n\r\n  /* Token supply got increased and a new owner received these tokens */\r\n  event Minted(address receiver, uint amount);\r\n\r\n  /* Actual balances of token holders */\r\n  mapping(address => uint) balances;\r\n\r\n  /* approve() allowances */\r\n  mapping (address => mapping (address => uint)) allowed;\r\n\r\n  /* Interface declaration */\r\n  function isToken() public constant returns (bool weAre) {\r\n    return true;\r\n  }\r\n\r\n  function transfer(address _to, uint _value) returns (bool success) {\r\n      \r\n      if (_value < 0) {\r\n          revert();\r\n      }\r\n      \r\n    balances[msg.sender] = safeSub(balances[msg.sender], _value);\r\n    balances[_to] = safeAdd(balances[_to], _value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  function transferFrom(address _from, address _to, uint _value) returns (bool success) {\r\n      \r\n      if (_value < 0) {\r\n          revert();\r\n      }\r\n      \r\n    uint _allowance = allowed[_from][msg.sender];\r\n\r\n    balances[_to] = safeAdd(balances[_to], _value);\r\n    balances[_from] = safeSub(balances[_from], _value);\r\n    allowed[_from][msg.sender] = safeSub(_allowance, _value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  function balanceOf(address _owner) constant returns (uint balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n  function approve(address _spender, uint _value) returns (bool success) {\r\n\r\n    // To change the approve amount you first have to reduce the addresses`\r\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n    //  already 0 to mitigate the race condition described here:\r\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    if ((_value != 0) && (allowed[msg.sender][_spender] != 0)) throw;\r\n\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  function allowance(address _owner, address _spender) constant returns (uint remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract CTest1 is StandardToken {\r\n  \r\n    // Set the contract controller address\r\n    // Set the 3 Founder addresses\r\n    address public owner = msg.sender;\r\n    address public Founder1 = 0xB5D39A8Ea30005f9114Bf936025De2D6f353813E;\r\n    address public Founder2 = 0x00A591199F53907480E1f5A00958b93B43200Fe4;\r\n    address public Founder3 = 0x0d19C131400e73c71bBB2bC1666dBa8Fe22d242D;\r\n\r\n  \r\n    function name() constant returns (string) { return \"CTest1 Token\"; }\r\n    function symbol() constant returns (string) { return \"CTest1\"; }\r\n    function decimals() constant returns (uint) { return 18; }\r\n    \r\n    uint256 totalSupply = 1000000;\r\n    \r\n    \r\n    function () payable {\r\n        \r\n        \r\n        //If all the tokens are gone, stop!\r\n        if (totalSupply < 1)\r\n        {\r\n            throw;\r\n        }\r\n        \r\n        \r\n        uint256 rate = 0;\r\n        address receiver = msg.sender;\r\n        \r\n        \r\n        //Set the price to 0.0003 ETH/CTest1\r\n        //$0.10 per\r\n        if (totalSupply > 975000)\r\n        {\r\n            rate = 3340;\r\n        }\r\n        \r\n        //Set the price to 0.0015 ETH/CTest1\r\n        //$0.50 per\r\n        if (totalSupply < 975001)\r\n        {\r\n            rate = 668;\r\n        }\r\n        \r\n        //Set the price to 0.0030 ETH/CTest1\r\n        //$1.00 per\r\n        if (totalSupply < 875001)\r\n        {\r\n            rate = 334;\r\n        }\r\n        \r\n        //Set the price to 0.0075 ETH/CTest1\r\n        //$2.50 per\r\n        if (totalSupply < 475001)\r\n        {\r\n            rate = 134;\r\n        }\r\n        \r\n        \r\n       \r\n\r\n        \r\n        uint256 tokens = safeMul(msg.value, rate);\r\n        \r\n        \r\n        //Make sure they send enough to buy atleast 1 token.\r\n        if (tokens < 1)\r\n        {\r\n            throw;\r\n        }\r\n        \r\n        \r\n        //Make sure someone isn't buying more than the remaining supply\r\n        uint256 check = safeSub(totalSupply, tokens);\r\n        if (check < 0)\r\n        {\r\n            throw;\r\n        }\r\n        \r\n        \r\n        //Make sure someone isn't buying more than the current tier\r\n        if (totalSupply > 975000 && check < 975000)\r\n        {\r\n            throw;\r\n        }\r\n        \r\n        //Make sure someone isn't buying more than the current tier\r\n        if (totalSupply > 875000 && check < 875000)\r\n        {\r\n            throw;\r\n        }\r\n        \r\n        //Make sure someone isn't buying more than the current tier\r\n        if (totalSupply > 475000 && check < 475000)\r\n        {\r\n            throw;\r\n        }\r\n        \r\n        \r\n        //Prevent any ETH address from buying more than 50 CTest1 during the pre-sale\r\n        if ((balances[receiver] + tokens) > 50 && totalSupply > 975000)\r\n        {\r\n            throw;\r\n        }\r\n        \r\n        \r\n        balances[receiver] = safeAdd(balances[receiver], tokens);\r\n        \r\n        totalSupply = safeSub(totalSupply, tokens);\r\n        \r\n        Transfer(0, receiver, tokens);\r\n\r\n\r\n\r\n\t    Founder1.transfer((msg.value/3));\t\t\t\t\t//Send the ETH\r\n\t    Founder2.transfer((msg.value/3));\t\t\t\t\t//Send the ETH\r\n\t    Founder3.transfer((msg.value/3));\t\t\t\t\t//Send the ETH\r\n        \r\n    }\r\n    \r\n    \r\n    \r\n    //Burn all remaining tokens.\r\n    //Only contract creator can do this.\r\n    function Burn () {\r\n        \r\n        if (msg.sender == owner && totalSupply > 0)\r\n        {\r\n            totalSupply = 0;\r\n        } else {throw;}\r\n\r\n    }\r\n  \r\n  \r\n  \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"Burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Founder3\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Founder2\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Founder1\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isToken\",\"outputs\":[{\"name\":\"weAre\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Minted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"CTest1","CompilerVersion":"v0.4.16+commit.d7661dd9","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://af82fa030b1eb587a58b542e087bf11d0f0bdcc7dae2fec4502ca3d57acf1491"}]}