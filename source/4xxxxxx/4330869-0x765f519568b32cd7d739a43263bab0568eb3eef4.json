{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.16;\r\n\r\ncontract ERC20 {\r\n    \r\n    string public name;\r\n    function totalSupply() constant returns (uint);\r\n    function balanceOf(address _owner) constant returns (uint);\r\n    function allowance(address _owner, address _spender) constant returns (uint);\r\n    function transfer(address _to, uint _value) returns (bool);\r\n    function transferFrom(address _from, address _to, uint _value) returns (bool);\r\n    function approve(address _spender, uint _value) returns (bool);\r\n\r\n}\r\n\r\ncontract Ownable {\r\n\r\n    address public owner;\r\n\r\n    function Ownable() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract Pausable is Ownable {\r\n\r\n    bool public paused = false;\r\n\r\n    modifier whenNotPaused() {\r\n        require(!paused);\r\n        _;\r\n    }\r\n\r\n    modifier whenPaused() {\r\n        require(paused);\r\n        _;\r\n    }\r\n\r\n    function pause() public onlyOwner whenNotPaused {\r\n        paused = true;\r\n    }\r\n\r\n    function unpause() public onlyOwner whenPaused {\r\n        paused = false;\r\n    }\r\n}\r\n\r\ncontract OTC is Pausable {\r\n\r\n    struct Swap {\r\n        uint256 expires;\r\n        uint256 amountGive;\r\n        uint256 amountGet;\r\n        address tokenGet;\r\n        address tokenGive;\r\n        address buyer;\r\n        address seller;\r\n    }\r\n\r\n    Swap[] public swaps;\r\n\r\n    event SwapCreated(address indexed creator, uint256 swap);\r\n    event Swapped(address indexed seller, uint256 swap);\r\n\r\n    function () public payable { revert(); }\r\n\r\n    function createSwap(uint256 amountGive, uint256 amountGet, address tokenGive, address tokenGet, address seller) external whenNotPaused {\r\n        Swap memory swap = Swap({\r\n            expires: now + 1 days,\r\n            amountGive: amountGive,\r\n            amountGet: amountGet,\r\n            tokenGet: tokenGet,\r\n            tokenGive: tokenGive,\r\n            buyer: msg.sender,\r\n            seller: seller\r\n        });\r\n\r\n        uint256 id = swaps.length;\r\n        swaps.push(swap);\r\n        SwapCreated(msg.sender, id);\r\n    }\r\n\r\n    function cancelSwap(uint256 id) external whenNotPaused {\r\n        require(msg.sender == swaps[id].buyer);\r\n        delete swaps[id];\r\n    }\r\n\r\n    function swap(uint256 id) external whenNotPaused {\r\n        Swap storage swap = swaps[id];\r\n\r\n        require(swap.expires >= now);\r\n        require(canSwap(id, msg.sender));\r\n        require(ERC20(swap.tokenGive).transferFrom(swap.buyer, msg.sender, swap.amountGive));\r\n        require(ERC20(swap.tokenGet).transferFrom(msg.sender, swap.buyer, swap.amountGet));\r\n\r\n        delete swaps[id];\r\n\r\n        Swapped(msg.sender, id);\r\n    }\r\n\r\n    function canSwap(uint256 id, address seller) public constant returns (bool) {\r\n        Swap storage swap = swaps[id];\r\n\r\n        if (swap.seller != 0x0 && seller != swap.seller) {\r\n            return false;\r\n        }\r\n\r\n        return swap.buyer != seller;\r\n    }\r\n\r\n    function swapsFor(address _owner) public constant returns (uint[]) {\r\n        uint[] memory swapsForOwner;\r\n\r\n        for (uint256 i = 0; i < swaps.length; i++) {\r\n            if (swaps[i].buyer == _owner) {\r\n                swapsForOwner[swapsForOwner.length] = i;\r\n            }\r\n        }\r\n\r\n        return swapsForOwner;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"cancelSwap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"swap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amountGive\",\"type\":\"uint256\"},{\"name\":\"amountGet\",\"type\":\"uint256\"},{\"name\":\"tokenGive\",\"type\":\"address\"},{\"name\":\"tokenGet\",\"type\":\"address\"},{\"name\":\"seller\",\"type\":\"address\"}],\"name\":\"createSwap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"seller\",\"type\":\"address\"}],\"name\":\"canSwap\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"swapsFor\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"swaps\",\"outputs\":[{\"name\":\"expires\",\"type\":\"uint256\"},{\"name\":\"amountGive\",\"type\":\"uint256\"},{\"name\":\"amountGet\",\"type\":\"uint256\"},{\"name\":\"tokenGet\",\"type\":\"address\"},{\"name\":\"tokenGive\",\"type\":\"address\"},{\"name\":\"buyer\",\"type\":\"address\"},{\"name\":\"seller\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"swap\",\"type\":\"uint256\"}],\"name\":\"SwapCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"swap\",\"type\":\"uint256\"}],\"name\":\"Swapped\",\"type\":\"event\"}]","ContractName":"OTC","CompilerVersion":"v0.4.17+commit.bdeb9e52","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://8d296aa86124b81f5c9ed3048113107db9b243084cc2f5167a29ce890d43b5da"}]}