{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\ncontract FullERC20 {\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n  \r\n  uint256 public totalSupply;\r\n  uint8 public decimals;\r\n\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n}\r\n\r\ncontract RewardDistributable {\r\n    event TokensRewarded(address indexed player, address rewardToken, uint rewards, address requester, uint gameId, uint block);\r\n    event ReferralRewarded(address indexed referrer, address indexed player, address rewardToken, uint rewards, uint gameId, uint block);\r\n    event ReferralRegistered(address indexed player, address indexed referrer);\r\n\r\n    /// @dev Calculates and transfers the rewards to the player.\r\n    function transferRewards(address player, uint entryAmount, uint gameId) public;\r\n\r\n    /// @dev Returns the total number of tokens, across all approvals.\r\n    function getTotalTokens(address tokenAddress) public constant returns(uint);\r\n\r\n    /// @dev Returns the total number of supported reward token contracts.\r\n    function getRewardTokenCount() public constant returns(uint);\r\n\r\n    /// @dev Gets the total number of approvers.\r\n    function getTotalApprovers() public constant returns(uint);\r\n\r\n    /// @dev Gets the reward rate inclusive of referral bonus.\r\n    function getRewardRate(address player, address tokenAddress) public constant returns(uint);\r\n\r\n    /// @dev Adds a requester to the whitelist.\r\n    /// @param requester The address of a contract which will request reward transfers\r\n    function addRequester(address requester) public;\r\n\r\n    /// @dev Removes a requester from the whitelist.\r\n    /// @param requester The address of a contract which will request reward transfers\r\n    function removeRequester(address requester) public;\r\n\r\n    /// @dev Adds a approver address.  Approval happens with the token contract.\r\n    /// @param approver The approver address to add to the pool.\r\n    function addApprover(address approver) public;\r\n\r\n    /// @dev Removes an approver address. \r\n    /// @param approver The approver address to remove from the pool.\r\n    function removeApprover(address approver) public;\r\n\r\n    /// @dev Updates the reward rate\r\n    function updateRewardRate(address tokenAddress, uint newRewardRate) public;\r\n\r\n    /// @dev Updates the token address of the payment type.\r\n    function addRewardToken(address tokenAddress, uint newRewardRate) public;\r\n\r\n    /// @dev Updates the token address of the payment type.\r\n    function removeRewardToken(address tokenAddress) public;\r\n\r\n    /// @dev Updates the referral bonus rate\r\n    function updateReferralBonusRate(uint newReferralBonusRate) public;\r\n\r\n    /// @dev Registers the player with the given referral code\r\n    /// @param player The address of the player\r\n    /// @param referrer The address of the referrer\r\n    function registerReferral(address player, address referrer) public;\r\n\r\n    /// @dev Transfers any tokens to the owner\r\n    function destroyRewards() public;\r\n}\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\ncontract RewardDistributor is RewardDistributable, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    struct RewardSource {\r\n        address rewardTokenAddress;\r\n        uint96 rewardRate; // 1 token for every reward rate (in wei)\r\n    }\r\n\r\n    RewardSource[] public rewardSources;\r\n    mapping(address => bool) public approvedRewardSources;\r\n    \r\n    mapping(address => bool) public requesters; // distribution requesters\r\n    address[] public approvers; // distribution approvers\r\n\r\n    mapping(address => address) public referrers; // player -> referrer\r\n    \r\n    uint public referralBonusRate;\r\n\r\n    modifier onlyRequesters() {\r\n        require(requesters[msg.sender] || (msg.sender == owner));\r\n        _;\r\n    }\r\n\r\n    modifier validRewardSource(address tokenAddress) {\r\n        require(approvedRewardSources[tokenAddress]);\r\n        _;        \r\n    }\r\n\r\n    function RewardDistributor(uint256 rewardRate, address tokenAddress) public {\r\n        referralBonusRate = 10;\r\n        addRewardToken(tokenAddress, rewardRate);\r\n    }\r\n\r\n    /// @dev Calculates and transfers the rewards to the player.\r\n    function transferRewards(address player, uint entryAmount, uint gameId) public onlyRequesters {\r\n        // loop through all reward tokens, since we never really expect more than 2, this should be ok wrt gas\r\n        for (uint i = 0; i < rewardSources.length; i++) {\r\n            transferRewardsInternal(player, entryAmount, gameId, rewardSources[i]);\r\n        }\r\n    }\r\n\r\n    /// @dev Returns the total number of tokens, across all approvals.\r\n    function getTotalTokens(address tokenAddress) public constant validRewardSource(tokenAddress) returns(uint) {\r\n        for (uint j = 0; j < rewardSources.length; j++) {\r\n            if (rewardSources[j].rewardTokenAddress == tokenAddress) {\r\n                FullERC20 rewardToken = FullERC20(rewardSources[j].rewardTokenAddress);\r\n                uint total = rewardToken.balanceOf(this);\r\n            \r\n                for (uint i = 0; i < approvers.length; i++) {\r\n                    address approver = approvers[i];\r\n                    uint allowance = rewardToken.allowance(approver, this);\r\n                    total = total.add(allowance);\r\n                }\r\n\r\n                return total;\r\n            }\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    /// @dev Get reward token count\r\n    function getRewardTokenCount() public constant returns(uint) {\r\n        return rewardSources.length;\r\n    }\r\n\r\n\r\n    /// @dev Gets the total number of approvers.\r\n    function getTotalApprovers() public constant returns(uint) {\r\n        return approvers.length;\r\n    }\r\n\r\n    /// @dev Gets the reward rate inclusive of bonus.\r\n    /// This is meant to be used by dividing the total purchase amount in wei by this amount.\r\n    function getRewardRate(address player, address tokenAddress) public constant validRewardSource(tokenAddress) returns(uint) {\r\n        for (uint j = 0; j < rewardSources.length; j++) {\r\n            if (rewardSources[j].rewardTokenAddress == tokenAddress) {\r\n                RewardSource storage rewardSource = rewardSources[j];\r\n                uint256 rewardRate = rewardSource.rewardRate;\r\n                uint bonusRate = referrers[player] == address(0) ? 0 : referralBonusRate;\r\n                return rewardRate.mul(100).div(100 + bonusRate);\r\n            }\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    /// @dev Adds a requester to the whitelist.\r\n    /// @param requester The address of a contract which will request reward transfers\r\n    function addRequester(address requester) public onlyOwner {\r\n        require(!requesters[requester]);    \r\n        requesters[requester] = true;\r\n    }\r\n\r\n    /// @dev Removes a requester from the whitelist.\r\n    /// @param requester The address of a contract which will request reward transfers\r\n    function removeRequester(address requester) public onlyOwner {\r\n        require(requesters[requester]);\r\n        requesters[requester] = false;\r\n    }\r\n\r\n    /// @dev Adds a approver address.  Approval happens with the token contract.\r\n    /// @param approver The approver address to add to the pool.\r\n    function addApprover(address approver) public onlyOwner {\r\n        approvers.push(approver);\r\n    }\r\n\r\n    /// @dev Removes an approver address. \r\n    /// @param approver The approver address to remove from the pool.\r\n    function removeApprover(address approver) public onlyOwner {\r\n        uint good = 0;\r\n        for (uint i = 0; i < approvers.length; i = i.add(1)) {\r\n            bool isValid = approvers[i] != approver;\r\n            if (isValid) {\r\n                if (good != i) {\r\n                    approvers[good] = approvers[i];            \r\n                }\r\n              \r\n                good = good.add(1);\r\n            } \r\n        }\r\n\r\n        // TODO Delete the previous entries.\r\n        approvers.length = good;\r\n    }\r\n\r\n    /// @dev Updates the reward rate\r\n    function updateRewardRate(address tokenAddress, uint newRewardRate) public onlyOwner {\r\n        require(newRewardRate > 0);\r\n        require(tokenAddress != address(0));\r\n\r\n        for (uint i = 0; i < rewardSources.length; i++) {\r\n            if (rewardSources[i].rewardTokenAddress == tokenAddress) {\r\n                rewardSources[i].rewardRate = uint96(newRewardRate);\r\n                return;\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @dev Adds the token address of the payment type.\r\n    function addRewardToken(address tokenAddress, uint newRewardRate) public onlyOwner {\r\n        require(tokenAddress != address(0));\r\n        require(!approvedRewardSources[tokenAddress]);\r\n        \r\n        rewardSources.push(RewardSource(tokenAddress, uint96(newRewardRate)));\r\n        approvedRewardSources[tokenAddress] = true;\r\n    }\r\n\r\n    /// @dev Removes the given token address from the approved sources.\r\n    /// @param tokenAddress the address of the token\r\n    function removeRewardToken(address tokenAddress) public onlyOwner {\r\n        require(tokenAddress != address(0));\r\n        require(approvedRewardSources[tokenAddress]);\r\n\r\n        approvedRewardSources[tokenAddress] = false;\r\n\r\n        // Shifting costs significant gas with every write.\r\n        // UI should update the reward sources after this function call.\r\n        for (uint i = 0; i < rewardSources.length; i++) {\r\n            if (rewardSources[i].rewardTokenAddress == tokenAddress) {\r\n                rewardSources[i] = rewardSources[rewardSources.length - 1];\r\n                delete rewardSources[rewardSources.length - 1];\r\n                rewardSources.length--;\r\n                return;\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @dev Transfers any tokens to the owner\r\n    function destroyRewards() public onlyOwner {\r\n        for (uint i = 0; i < rewardSources.length; i++) {\r\n            FullERC20 rewardToken = FullERC20(rewardSources[i].rewardTokenAddress);\r\n            uint tokenBalance = rewardToken.balanceOf(this);\r\n            assert(rewardToken.transfer(owner, tokenBalance));\r\n            approvedRewardSources[rewardSources[i].rewardTokenAddress] = false;\r\n        }\r\n\r\n        rewardSources.length = 0;\r\n    }\r\n\r\n    /// @dev Updates the referral bonus percentage\r\n    function updateReferralBonusRate(uint newReferralBonusRate) public onlyOwner {\r\n        require(newReferralBonusRate < 100);\r\n        referralBonusRate = newReferralBonusRate;\r\n    }\r\n\r\n    /// @dev Registers the player with the given referral code\r\n    /// @param player The address of the player\r\n    /// @param referrer The address of the referrer\r\n    function registerReferral(address player, address referrer) public onlyRequesters {\r\n        if (referrer != address(0) && player != referrer) {\r\n            referrers[player] = referrer;\r\n            ReferralRegistered(player, referrer);\r\n        }\r\n    }\r\n\r\n    /// @dev Transfers the rewards to the player for the provided reward source\r\n    function transferRewardsInternal(address player, uint entryAmount, uint gameId, RewardSource storage rewardSource) internal {\r\n        if (rewardSource.rewardTokenAddress == address(0)) {\r\n            return;\r\n        }\r\n        \r\n        FullERC20 rewardToken = FullERC20(rewardSource.rewardTokenAddress);\r\n        uint rewards = entryAmount.div(rewardSource.rewardRate).mul(10**uint256(rewardToken.decimals()));\r\n        if (rewards == 0) {\r\n            return;\r\n        }\r\n\r\n        address referrer = referrers[player];\r\n        uint referralBonus = referrer == address(0) ? 0 : rewards.mul(referralBonusRate).div(100);\r\n        uint totalRewards = referralBonus.mul(2).add(rewards);\r\n        uint playerRewards = rewards.add(referralBonus);\r\n\r\n        // First check if the contract itself has enough tokens to reward.\r\n        if (rewardToken.balanceOf(this) >= totalRewards) {\r\n            assert(rewardToken.transfer(player, playerRewards));\r\n            TokensRewarded(player, rewardToken, playerRewards, msg.sender, gameId, block.number);\r\n\r\n            if (referralBonus > 0) {\r\n                assert(rewardToken.transfer(referrer, referralBonus));\r\n                ReferralRewarded(referrer, rewardToken, player, referralBonus, gameId, block.number);\r\n            }\r\n            \r\n            return;\r\n        }\r\n\r\n        // Iterate through the approvers to find first with enough rewards and successful transfer\r\n        for (uint i = 0; i < approvers.length; i++) {\r\n            address approver = approvers[i];\r\n            uint allowance = rewardToken.allowance(approver, this);\r\n            if (allowance >= totalRewards) {\r\n                assert(rewardToken.transferFrom(approver, player, playerRewards));\r\n                TokensRewarded(player, rewardToken, playerRewards, msg.sender, gameId, block.number);\r\n                if (referralBonus > 0) {\r\n                    assert(rewardToken.transfer(referrer, referralBonus));\r\n                    ReferralRewarded(referrer, rewardToken, player, referralBonus, gameId, block.number);\r\n                }\r\n                return;\r\n            }\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"newRewardRate\",\"type\":\"uint256\"}],\"name\":\"addRewardToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"requester\",\"type\":\"address\"}],\"name\":\"removeRequester\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalApprovers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"referralBonusRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardSources\",\"outputs\":[{\"name\":\"rewardTokenAddress\",\"type\":\"address\"},{\"name\":\"rewardRate\",\"type\":\"uint96\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"removeRewardToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"referrers\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"player\",\"type\":\"address\"},{\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"registerReferral\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"removeApprover\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"destroyRewards\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRewardTokenCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"player\",\"type\":\"address\"},{\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"getRewardRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"getTotalTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"addApprover\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"player\",\"type\":\"address\"},{\"name\":\"entryAmount\",\"type\":\"uint256\"},{\"name\":\"gameId\",\"type\":\"uint256\"}],\"name\":\"transferRewards\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"approvers\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"requesters\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"requester\",\"type\":\"address\"}],\"name\":\"addRequester\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newReferralBonusRate\",\"type\":\"uint256\"}],\"name\":\"updateReferralBonusRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"approvedRewardSources\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"newRewardRate\",\"type\":\"uint256\"}],\"name\":\"updateRewardRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"rewardRate\",\"type\":\"uint256\"},{\"name\":\"tokenAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"rewardToken\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"rewards\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"requester\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"gameId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"block\",\"type\":\"uint256\"}],\"name\":\"TokensRewarded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"rewardToken\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"rewards\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"gameId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"block\",\"type\":\"uint256\"}],\"name\":\"ReferralRewarded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"ReferralRegistered\",\"type\":\"event\"}]","ContractName":"RewardDistributor","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000002386f26fc100000000000000000000000000008be732f654e0023537d244937172fa531821d125","Library":"","SwarmSource":"bzzr://27973c10f5331381aae012867390eeb8a5cde512bee66a218a18c687a6d360ef"}]}