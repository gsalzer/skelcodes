{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.14;\r\n\r\ncontract DSMath {\r\n    \r\n    /*\r\n    standard uint256 functions\r\n     */\r\n\r\n    function add(uint256 x, uint256 y) constant internal returns (uint256 z) {\r\n        assert((z = x + y) >= x);\r\n    }\r\n\r\n    function sub(uint256 x, uint256 y) constant internal returns (uint256 z) {\r\n        assert((z = x - y) <= x);\r\n    }\r\n\r\n    function mul(uint256 x, uint256 y) constant internal returns (uint256 z) {\r\n        assert((z = x * y) >= x);\r\n    }\r\n\r\n    function div(uint256 x, uint256 y) constant internal returns (uint256 z) {\r\n        z = x / y;\r\n    }\r\n\r\n    function min(uint256 x, uint256 y) constant internal returns (uint256 z) {\r\n        return x <= y ? x : y;\r\n    }\r\n    function max(uint256 x, uint256 y) constant internal returns (uint256 z) {\r\n        return x >= y ? x : y;\r\n    }\r\n\r\n    /*\r\n    uint128 functions (h is for half)\r\n     */\r\n\r\n\r\n    function hadd(uint128 x, uint128 y) constant internal returns (uint128 z) {\r\n        assert((z = x + y) >= x);\r\n    }\r\n\r\n    function hsub(uint128 x, uint128 y) constant internal returns (uint128 z) {\r\n        assert((z = x - y) <= x);\r\n    }\r\n\r\n    function hmul(uint128 x, uint128 y) constant internal returns (uint128 z) {\r\n        assert((z = x * y) >= x);\r\n    }\r\n\r\n    function hdiv(uint128 x, uint128 y) constant internal returns (uint128 z) {\r\n        z = x / y;\r\n    }\r\n\r\n    function hmin(uint128 x, uint128 y) constant internal returns (uint128 z) {\r\n        return x <= y ? x : y;\r\n    }\r\n    function hmax(uint128 x, uint128 y) constant internal returns (uint128 z) {\r\n        return x >= y ? x : y;\r\n    }\r\n\r\n\r\n    /*\r\n    int256 functions\r\n     */\r\n\r\n    function imin(int256 x, int256 y) constant internal returns (int256 z) {\r\n        return x <= y ? x : y;\r\n    }\r\n    function imax(int256 x, int256 y) constant internal returns (int256 z) {\r\n        return x >= y ? x : y;\r\n    }\r\n\r\n    /*\r\n    WAD math\r\n     */\r\n\r\n    uint128 constant WAD = 10 ** 18;\r\n\r\n    function wadd(uint128 x, uint128 y) constant internal returns (uint128) {\r\n        return hadd(x, y);\r\n    }\r\n\r\n    function wsub(uint128 x, uint128 y) constant internal returns (uint128) {\r\n        return hsub(x, y);\r\n    }\r\n\r\n    function wmul(uint128 x, uint128 y) constant internal returns (uint128 z) {\r\n        z = cast((uint256(x) * y + WAD / 2) / WAD);\r\n    }\r\n\r\n    function wdiv(uint128 x, uint128 y) constant internal returns (uint128 z) {\r\n        z = cast((uint256(x) * WAD + y / 2) / y);\r\n    }\r\n\r\n    function wmin(uint128 x, uint128 y) constant internal returns (uint128) {\r\n        return hmin(x, y);\r\n    }\r\n    function wmax(uint128 x, uint128 y) constant internal returns (uint128) {\r\n        return hmax(x, y);\r\n    }\r\n\r\n    /*\r\n    RAY math\r\n     */\r\n\r\n    uint128 constant RAY = 10 ** 27;\r\n\r\n    function radd(uint128 x, uint128 y) constant internal returns (uint128) {\r\n        return hadd(x, y);\r\n    }\r\n\r\n    function rsub(uint128 x, uint128 y) constant internal returns (uint128) {\r\n        return hsub(x, y);\r\n    }\r\n\r\n    function rmul(uint128 x, uint128 y) constant internal returns (uint128 z) {\r\n        z = cast((uint256(x) * y + RAY / 2) / RAY);\r\n    }\r\n\r\n    function rdiv(uint128 x, uint128 y) constant internal returns (uint128 z) {\r\n        z = cast((uint256(x) * RAY + y / 2) / y);\r\n    }\r\n\r\n    function rpow(uint128 x, uint64 n) constant internal returns (uint128 z) {\r\n        // This famous algorithm is called \"exponentiation by squaring\"\r\n        // and calculates x^n with x as fixed-point and n as regular unsigned.\r\n        //\r\n        // It's O(log n), instead of O(n) for naive repeated multiplication.\r\n        //\r\n        // These facts are why it works:\r\n        //\r\n        //  If n is even, then x^n = (x^2)^(n/2).\r\n        //  If n is odd,  then x^n = x * x^(n-1),\r\n        //   and applying the equation for even x gives\r\n        //    x^n = x * (x^2)^((n-1) / 2).\r\n        //\r\n        //  Also, EVM division is flooring and\r\n        //    floor[(n-1) / 2] = floor[n / 2].\r\n\r\n        z = n % 2 != 0 ? x : RAY;\r\n\r\n        for (n /= 2; n != 0; n /= 2) {\r\n            x = rmul(x, x);\r\n\r\n            if (n % 2 != 0) {\r\n                z = rmul(z, x);\r\n            }\r\n        }\r\n    }\r\n\r\n    function rmin(uint128 x, uint128 y) constant internal returns (uint128) {\r\n        return hmin(x, y);\r\n    }\r\n    function rmax(uint128 x, uint128 y) constant internal returns (uint128) {\r\n        return hmax(x, y);\r\n    }\r\n\r\n    function cast(uint256 x) constant internal returns (uint128 z) {\r\n        assert((z = uint128(x)) == x);\r\n    }\r\n\r\n}\r\n\r\ncontract Owned\r\n{\r\n    address public owner;\r\n    \r\n    function Owned()\r\n    {\r\n        owner = msg.sender;\r\n    }\r\n    \r\n    modifier onlyOwner()\r\n    {\r\n        if (msg.sender != owner) revert();\r\n        _;\r\n    }\r\n}\r\n\r\ncontract ProspectorsCrowdsale is Owned, DSMath\r\n{\r\n    ProspectorsGoldToken public token;\r\n    address public dev_multisig; //multisignature wallet to collect funds\r\n    \r\n    uint public total_raised; //crowdsale total funds raised\r\n    uint public contributors_count = 0; //crowdsale total funds raised\r\n    \r\n    uint public constant start_time = 1502377200; //crowdsale start time - August 10, 15:00 UTC\r\n    uint public constant end_time = 1505055600; //crowdsale end time - Septempber 10, 15:00 UTC\r\n    uint public constant bonus_amount = 10000000 * 10**18; //amount of tokens by bonus price\r\n    uint public constant start_amount = 60000000 * 10**18; //tokens amount allocated for crowdsale\r\n    uint public constant price =  0.0005 * 10**18; //standart token price in ETH \r\n    uint public constant bonus_price = 0.0004 * 10**18; //bonus token price in ETH\r\n    uint public constant goal = 2000 ether; //soft crowdsale cap. If not reached funds will be returned\r\n    bool private closed = false; //can be true after end_time or when all tokens sold\r\n    \r\n    mapping(address => uint) funded; //needed to save amounts of ETH for refund\r\n    \r\n    modifier in_time //allows send eth only when crowdsale is active\r\n    {\r\n        if (time() < start_time || time() > end_time)  revert();\r\n        _;\r\n    }\r\n\r\n    function is_success() public constant returns (bool)\r\n    {\r\n        return closed == true && total_raised >= goal;\r\n    }\r\n    \r\n    function time() public constant returns (uint)\r\n    {\r\n        return block.timestamp;\r\n    }\r\n    \r\n    function my_token_balance() public constant returns (uint)\r\n    {\r\n        return token.balanceOf(this);\r\n    }\r\n    \r\n    //tokens amount available by bonus price\r\n    function available_with_bonus() public constant returns (uint)\r\n    {\r\n        return my_token_balance() >=  min_balance_for_bonus() ? \r\n                my_token_balance() - min_balance_for_bonus() \r\n                : \r\n                0;\r\n    }\r\n    \r\n    function available_without_bonus() private constant returns (uint)\r\n    {\r\n        return min(my_token_balance(),  min_balance_for_bonus());\r\n    }\r\n    \r\n    function min_balance_for_bonus() private constant returns (uint)\r\n    {\r\n        return start_amount - bonus_amount;\r\n    }\r\n    \r\n    //prevent send less than 0.01 ETH\r\n    modifier has_value\r\n    {\r\n        if (msg.value < 0.01 ether) revert();\r\n        _;\r\n    }\r\n\r\n    function init(address _token_address, address _dev_multisig) onlyOwner\r\n    {\r\n        if (address(0) != address(token)) revert();\r\n        token = ProspectorsGoldToken(_token_address);\r\n        dev_multisig = _dev_multisig;\r\n    }\r\n    \r\n    //main contribute function\r\n    function participate() in_time has_value private {\r\n        if (my_token_balance() == 0 || closed == true) revert();\r\n\r\n        var remains = msg.value;\r\n        \r\n         //calculate tokens amount by bonus price\r\n        var can_with_bonus = wdiv(cast(remains), cast(bonus_price));\r\n        var buy_amount = cast(min(can_with_bonus, available_with_bonus()));\r\n        remains = sub(remains, wmul(buy_amount, cast(bonus_price)));\r\n        \r\n        if (buy_amount < can_with_bonus) //calculate tokens amount by standart price if tokens with bonus don't cover eth amount\r\n        {\r\n            var can_without_bonus = wdiv(cast(remains), cast(price));\r\n            var buy_without_bonus = cast(min(can_without_bonus, available_without_bonus()));\r\n            remains = sub(remains, wmul(buy_without_bonus, cast(price)));\r\n            buy_amount = hadd(buy_amount, buy_without_bonus);\r\n        }\r\n\r\n        if (remains > 0) revert();\r\n\r\n        total_raised = add(total_raised, msg.value);\r\n        if (funded[msg.sender] == 0) contributors_count++;\r\n        funded[msg.sender] = add(funded[msg.sender], msg.value);\r\n\r\n        token.transfer(msg.sender, buy_amount); //transfer tokens to participant\r\n    }\r\n    \r\n    function refund() //allows get eth back if min goal not reached\r\n    {\r\n        if (total_raised >= goal || closed == false) revert();\r\n        var amount = funded[msg.sender];\r\n        if (amount > 0)\r\n        {\r\n            funded[msg.sender] = 0;\r\n            msg.sender.transfer(amount);\r\n        }\r\n    }\r\n    \r\n    function closeCrowdsale() //close crowdsale. this action unlocks refunds or token transfers\r\n    {\r\n        if (closed == false && time() > start_time && (time() > end_time || my_token_balance() == 0))\r\n        {\r\n            closed = true;\r\n            if (is_success())\r\n            {\r\n                token.unlock(); //unlock token transfers\r\n                if (my_token_balance() > 0)\r\n                {\r\n                    token.transfer(0xb1, my_token_balance()); //move not saled tokens to game balance\r\n                }\r\n            }\r\n        }\r\n        else\r\n        {\r\n            revert();\r\n        }\r\n    }\r\n    \r\n    function collect() //collect eth by devs if min goal reached\r\n    {\r\n        if (total_raised < goal) revert();\r\n        dev_multisig.transfer(this.balance);\r\n    }\r\n\r\n    function () payable external \r\n    {\r\n        participate();\r\n    }\r\n    \r\n    //allows destroy this whithin 180 days after crowdsale ends\r\n    function destroy() onlyOwner\r\n    {\r\n        if (time() > end_time + 180 days)\r\n        {\r\n            selfdestruct(dev_multisig);\r\n        }\r\n    }\r\n}\r\n\r\ncontract ProspectorsGoldToken {\r\n    function balanceOf( address who ) constant returns (uint value);\r\n    function transfer( address to, uint value) returns (bool ok);\r\n    function unlock() returns (bool ok);\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"end_time\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"time\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"start_amount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"my_token_balance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"goal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refund\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"destroy\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"start_time\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"total_raised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"closeCrowdsale\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dev_multisig\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"available_with_bonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contributors_count\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"is_success\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonus_amount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonus_price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"collect\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token_address\",\"type\":\"address\"},{\"name\":\"_dev_multisig\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"payable\":true,\"type\":\"fallback\"}]","ContractName":"ProspectorsCrowdsale","CompilerVersion":"v0.4.14+commit.c2215d46","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://a4609405cc2256bc1132273371990c4b3ade7cf1b3d90848943a0d3edb0ff427"}]}