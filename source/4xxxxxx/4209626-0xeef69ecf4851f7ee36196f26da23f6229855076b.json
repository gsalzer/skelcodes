{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\ncontract Token {\r\n    uint256 public totalSupply;\r\n    function transfer(address _to, uint256 _value) returns (bool success);\r\n    function balanceOf(address _owner) constant returns (uint256 balance) ;\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n}\r\n\r\n\r\n/*  ERC 20 token */\r\ncontract StandardToken is Token {\r\n\r\n\r\n    struct LCBalance{\r\n        uint lcValue;\r\n        uint lockTime;\r\n        uint ethValue;\r\n\r\n        uint index;\r\n        bytes32 indexHash;\r\n        uint8 lotteryNum;\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) returns (bool success) {\r\n        if (balances[msg.sender].lcValue >= _value && _value > 0&&  balances[msg.sender].lockTime!=0) {       \r\n            balances[msg.sender].lcValue -= _value;\r\n            balances[_to].lcValue += _value;\r\n            Transfer(msg.sender, _to, _value);\r\n            return true;\r\n        }\r\n         else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {\r\n        return balances[_owner].lcValue;\r\n    }\r\n\r\n    function balanceOfEth(address _owner) constant returns (uint256 balance) {\r\n        return balances[_owner].ethValue;\r\n    }\r\n\r\n    function balanceOfLockTime(address _owner) constant returns (uint256 balance) {\r\n        return balances[_owner].lockTime;\r\n    }\r\n\r\n    mapping (address => LCBalance) balances;\r\n}\r\n\r\ncontract LCToken is StandardToken {\r\n    // metadata\r\n    string public constant name = \"Lottery Coin\";\r\n    string public constant symbol = \"SaberLC\";\r\n    uint256 public constant decimals = 18;\r\n    string public version = \"1.0\";\r\n\r\n    // constant\r\n    uint256 val1 = 1 wei;    // 1\r\n    uint256 val2 = 1 szabo;  // 1 * 10 ** 12\r\n    uint256 val3 = 1 finney; // 1 * 10 ** 15\r\n    uint256 val4 = 1 ether;  // 1 * 10 ** 18\r\n\r\n    // contact setting\r\n    address public creator;\r\n\r\n    uint256 public constant LOCKPERIOD          = 365 days;\r\n    uint256 public constant ICOPERIOD           = 120 days;\r\n    uint256 public constant SHAREPERIOD           = 30 days;\r\n    uint256 public constant LOCKAMOUNT          = 3000000 * 10**decimals;\r\n    uint256 public constant AMOUNT_ICO          = 5000000 * 10**decimals;\r\n    uint256 public constant AMOUNT_TeamSupport  = 2000000 * 10**decimals;\r\n\r\n    uint256 public gcStartTime = 0;     //ico begin time, unix timestamp seconds\r\n    uint256 public gcEndTime = 0;       //ico end time, unix timestamp seconds\r\n\r\n    \r\n    // LC: 30% lock , 20% for Team, 50% for ico          \r\n    address account_lock = 0x9AD7aeBe8811b0E3071C627403B38803D91BC1ac;  //30%  lock\r\n    address account_team = 0xc96c3da8bc6381DB296959Ec3e1Fe1e430a4B65B;  //20%  team\r\n\r\n    uint256 public gcSupply = 5000000 * 10**decimals;                 // ico 50% (5000000) total LC supply\r\n    uint256 public constant gcExchangeRate=1000;                       // 1000 LC per 1 ETH\r\n\r\n    \r\n    // Play\r\n    bytes32[1000]   blockhash;\r\n    uint            firstIndex;\r\n    uint            endIndex;\r\n\r\n    uint256 public totalLotteryValue = 0;\r\n    uint256 public currentLotteryValue = 0;\r\n    uint256 public currentProfit = 0;\r\n    uint256 public shareTime = 0;\r\n    uint256 public shareLimit = 10000*val4;\r\n\r\n\r\n    function addHash (bytes32 _hashValue) {\r\n        if(endIndex+1==firstIndex)\r\n        {\r\n            endIndex++;\r\n            blockhash[endIndex]=_hashValue;\r\n            if(firstIndex<999)\r\n            {\r\n                firstIndex++;\r\n            }\r\n            else\r\n            {\r\n                firstIndex=0;\r\n            }\r\n        }\r\n        else\r\n        {\r\n            if(firstIndex==0 && 999==endIndex)\r\n            {\r\n                endIndex=0;\r\n                blockhash[endIndex]=_hashValue;\r\n                firstIndex=1;\r\n            }\r\n            else\r\n            {\r\n                if(999<=endIndex)\r\n                {\r\n                    endIndex=0;\r\n                }\r\n                else\r\n                {\r\n                    endIndex++;\r\n                }\r\n                blockhash[endIndex]=_hashValue;\r\n            }\r\n        }\r\n    }\r\n\r\n    function buyLottery (uint8 _lotteryNum) payable {\r\n        if ( msg.value >=val3*10 && _lotteryNum>=0 &&  _lotteryNum<=9 )\r\n        {\r\n            bytes32 currentHash=block.blockhash(block.number-1);\r\n            if(blockhash[endIndex]!=currentHash)\r\n            {\r\n                addHash(currentHash);\r\n            }\r\n            balances[msg.sender].ethValue+=msg.value;\r\n            balances[msg.sender].index=endIndex;\r\n            balances[msg.sender].lotteryNum=_lotteryNum;\r\n            balances[msg.sender].indexHash=currentHash;\r\n            totalLotteryValue+=msg.value;\r\n            currentLotteryValue+=msg.value;\r\n        }\r\n        else\r\n        {\r\n            revert();\r\n        }\r\n    }\r\n\r\n    function openLottery () {\r\n\r\n        bytes32 currentHash=block.blockhash(block.number-1);\r\n        if(blockhash[endIndex]!=currentHash)\r\n        {\r\n            addHash(currentHash);\r\n        }\r\n        if ( balances[msg.sender].ethValue >=val3*10 && balances[msg.sender].indexHash!=currentHash)\r\n        {\r\n            currentLotteryValue-=balances[msg.sender].ethValue;\r\n\r\n            uint temuint = balances[msg.sender].index;\r\n            if(balances[msg.sender].lotteryNum>=0 && balances[msg.sender].lotteryNum<=9 && balances[msg.sender].indexHash==blockhash[temuint])\r\n            {\r\n                temuint++;\r\n                if(temuint>999)\r\n                {\r\n                    temuint=0;\r\n                }\r\n                temuint = uint(blockhash[temuint]);\r\n                temuint = temuint%10;\r\n                if(temuint==balances[msg.sender].lotteryNum)\r\n                {\r\n                    uint _tosend=balances[msg.sender].ethValue*90/100;\r\n                    if(_tosend>totalLotteryValue)\r\n                    {\r\n                        _tosend=totalLotteryValue;\r\n                    }\r\n                    totalLotteryValue-=_tosend;\r\n                    balances[msg.sender].ethValue=0;\r\n                    msg.sender.transfer(_tosend);\r\n                }\r\n                else\r\n                {\r\n                    balances[msg.sender].ethValue=0;\r\n                }\r\n            }\r\n            else\r\n            {\r\n                balances[msg.sender].ethValue=0;\r\n            }\r\n        }\r\n    }\r\n\r\n    function getShare ()  {\r\n\r\n        if(shareTime+SHAREPERIOD<now)\r\n        {\r\n            while(shareTime+SHAREPERIOD<now)\r\n            {\r\n                shareTime+=SHAREPERIOD;\r\n            }\r\n            if(totalLotteryValue>currentLotteryValue)\r\n            {\r\n                currentProfit=totalLotteryValue-currentLotteryValue;\r\n            }\r\n            else\r\n            {\r\n                currentProfit=0;\r\n            }\r\n        }\r\n\r\n        if (balances[msg.sender].lockTime!=0 && balances[msg.sender].lockTime+SHAREPERIOD <=shareTime && currentLotteryValue<totalLotteryValue && balances[msg.sender].lcValue >=shareLimit)\r\n        {\r\n            uint _sharevalue=balances[msg.sender].lcValue/val4*currentProfit/1000;\r\n            if(_sharevalue>totalLotteryValue)\r\n            {\r\n                _sharevalue=totalLotteryValue;\r\n            }\r\n            totalLotteryValue-=_sharevalue;\r\n            msg.sender.transfer(_sharevalue);\r\n            balances[msg.sender].lockTime=now;\r\n        }\r\n    }\r\n\r\n\r\n    function Add_totalLotteryValue () payable {\r\n        if(msg.value>0)\r\n        {\r\n            totalLotteryValue+=msg.value;\r\n        }\r\n    }\r\n\r\n    //\r\n    function lockAccount ()  {\r\n        balances[msg.sender].lockTime=now;\r\n    }\r\n\r\n    function unlockAccount ()  {\r\n        balances[msg.sender].lockTime=0;\r\n    }\r\n\r\n    \r\n    //+ buy lc,1eth=1000lc, 30%eth send to owner, 70% keep in contact\r\n    function buyLC () payable {\r\n        if(now < gcEndTime)\r\n        {\r\n            uint256 lcAmount;\r\n            if ( msg.value >=0){\r\n                lcAmount = msg.value * gcExchangeRate;\r\n                if (gcSupply < lcAmount) revert();\r\n                gcSupply -= lcAmount;          \r\n                balances[msg.sender].lcValue += lcAmount;\r\n            }\r\n            if(!creator.send(msg.value*30/100)) revert();\r\n        }\r\n        else\r\n        {    \r\n            balances[account_team].lcValue += gcSupply;\r\n            account_team.transfer((AMOUNT_ICO-gcSupply)*699/1000/gcExchangeRate);\r\n            gcSupply = 0;     \r\n        }\r\n    }\r\n\r\n    // exchange lc to eth, 1000lc =0.7eth, 30% for fee\r\n    function clearLC ()  {\r\n        if(now < gcEndTime)\r\n        {\r\n            uint256 ethAmount;\r\n            if ( balances[msg.sender].lcValue >0 && balances[msg.sender].lockTime==0){\r\n                if(msg.sender == account_lock && now < gcStartTime + LOCKPERIOD)\r\n                {\r\n                    revert();\r\n                }\r\n                ethAmount = balances[msg.sender].lcValue *70/100/ gcExchangeRate;\r\n                gcSupply += balances[msg.sender].lcValue;          \r\n                balances[msg.sender].lcValue = 0;\r\n                msg.sender.transfer(ethAmount);\r\n            }\r\n        }\r\n    }\r\n\r\n    //+ transfer\r\n    function transfer(address _to, uint256 _value) returns (bool success) {\r\n        if (balances[msg.sender].lcValue >= _value && _value > 0 && balances[msg.sender].lockTime==0 ) { \r\n            if(msg.sender == account_lock ){\r\n                if(now < gcStartTime + LOCKPERIOD){\r\n                    return false;\r\n                }\r\n            }\r\n            else{\r\n                balances[msg.sender].lcValue -= _value;\r\n                if(address(this)==_to)\r\n                {\r\n                    balances[creator].lcValue += _value;\r\n                }\r\n                else\r\n                {\r\n                    balances[_to].lcValue += _value;\r\n                }\r\n                Transfer(msg.sender, _to, _value);\r\n                return true;\r\n            }\r\n        \r\n        } \r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function endThisContact () {\r\n        if(msg.sender==creator && balances[msg.sender].lcValue >=9000000 * val4)\r\n        {\r\n            selfdestruct(creator);\r\n        }\r\n    }\r\n\r\n    // constructor\r\n    function LCToken( ) {\r\n        creator = msg.sender;\r\n        balances[account_team].lcValue = AMOUNT_TeamSupport;    //for team\r\n        balances[account_lock].lcValue = LOCKAMOUNT;            //30%   lock 365 days\r\n        gcStartTime = now;\r\n        gcEndTime=now+ICOPERIOD;\r\n\r\n\r\n        totalLotteryValue=0;\r\n\r\n        firstIndex=0;\r\n        endIndex=0;\r\n        blockhash[0] = block.blockhash(block.number-1);\r\n\r\n        shareTime=now+SHAREPERIOD;\r\n    }\r\n    \r\n\r\n    \r\n    // fallback\r\n    function() payable {\r\n        buyLC();\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"endThisContact\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ICOPERIOD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"lockAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gcExchangeRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gcSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"AMOUNT_ICO\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unlockAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gcStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"shareLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOfEth\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_hashValue\",\"type\":\"bytes32\"}],\"name\":\"addHash\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gcEndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"shareTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyLC\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_lotteryNum\",\"type\":\"uint8\"}],\"name\":\"buyLottery\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"LOCKPERIOD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"Add_totalLotteryValue\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getShare\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"clearLC\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentProfit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentLotteryValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SHAREPERIOD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalLotteryValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"openLottery\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"LOCKAMOUNT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"AMOUNT_TeamSupport\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOfLockTime\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"LCToken","CompilerVersion":"v0.4.16+commit.d7661dd9","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://5e3d4340eabcf3bda1b9e1754cede191d843623caffa0da935237cff0aaaa047"}]}