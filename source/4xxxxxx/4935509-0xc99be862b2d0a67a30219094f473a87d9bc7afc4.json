{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\ninterface token {\r\n    function    transfer(address _to, uint256 _value) public returns (bool success);\r\n    function    burn( uint256 value ) public returns ( bool success );\r\n    function    balanceOf( address user ) public view returns ( uint256 );\r\n}\r\n\r\ncontract Crowdsale {\r\n    address     public beneficiary;\r\n    uint        public amountRaised;\r\n    uint        public price;\r\n    token       public tokenReward;\r\n    uint        public excess;\r\n\r\n    mapping(address => uint256) public balanceOf;\r\n\r\n    bool    public crowdsaleClosed = false;\r\n    bool    public crowdsaleSuccess = false;\r\n\r\n    event   GoalReached(address recipient, uint totalAmountRaised, bool crowdsaleSuccess);\r\n    event   FundTransfer(address backer, uint amount, bool isContribution);\r\n\r\n    /**\r\n     * Constrctor function\r\n     *\r\n     * Setup the owner\r\n     */\r\n    function    Crowdsale( ) public {\r\n        beneficiary = msg.sender;\r\n        price = 0.1 ether;\r\n        tokenReward = token(0xe881D262acbfE8997Cfc57E9fd527b175Fb26373);\r\n    }\r\n\r\n    /**\r\n    * Fallback function\r\n    *\r\n    * The function without name is the default function that is called whenever anyone sends funds to a contract\r\n    */\r\n    function () public payable {\r\n        require(!crowdsaleClosed);\r\n\r\n        uint amount = msg.value;\r\n        require((amount % price) == 0);\r\n        balanceOf[msg.sender] += amount;\r\n        amountRaised += amount;\r\n        tokenReward.transfer(msg.sender, amount / price);\r\n        excess += amount % price;\r\n        FundTransfer(msg.sender, amount, true);\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == beneficiary);\r\n        _;\r\n    }\r\n\r\n    function goalManagment(bool statement) public onlyOwner {\r\n        require(crowdsaleClosed == false);    \r\n        crowdsaleClosed = true;\r\n        crowdsaleSuccess = statement;\r\n        GoalReached(beneficiary, amountRaised, crowdsaleSuccess);\r\n    }\r\n\r\n    /**\r\n    * Withdraw the funds\r\n    *\r\n    * Checks to see if goal or time limit has been reached, and if so, and the funding goal was reached,\r\n    * sends the entire amount to the beneficiary. If goal was not reached, each contributor can withdraw\r\n    * the amount they contributed.\r\n    */\r\n    function    withdrawalMoneyBack() public {\r\n        uint    amount;\r\n\r\n        if (crowdsaleClosed == true && crowdsaleSuccess == false) {\r\n            amount = balanceOf[msg.sender] * price;\r\n            balanceOf[msg.sender] = 0;\r\n            amountRaised -= amount;\r\n            msg.sender.transfer(amount);\r\n            FundTransfer(msg.sender, amount, false);\r\n        }\r\n    }\r\n\r\n    function    withdrawalOwner() public onlyOwner {\r\n        if (crowdsaleSuccess == true && crowdsaleClosed == true) {\r\n            beneficiary.transfer(amountRaised);\r\n            FundTransfer(beneficiary, amountRaised, false);\r\n            burnToken();\r\n        }\r\n    }\r\n\r\n    function takeExcess () public onlyOwner {\r\n        beneficiary.transfer(excess);\r\n        FundTransfer(beneficiary, excess, false);\r\n    }\r\n\r\n    function    burnToken() private {\r\n        uint amount;\r\n\r\n        amount = tokenReward.balanceOf(this);\r\n        tokenReward.burn(amount);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleSuccess\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawalOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"excess\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"takeExcess\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenReward\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"amountRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleClosed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"statement\",\"type\":\"bool\"}],\"name\":\"goalManagment\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawalMoneyBack\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"totalAmountRaised\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"crowdsaleSuccess\",\"type\":\"bool\"}],\"name\":\"GoalReached\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"backer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"isContribution\",\"type\":\"bool\"}],\"name\":\"FundTransfer\",\"type\":\"event\"}]","ContractName":"Crowdsale","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://daf6658970e6360226147246b1042c98181a1940cc048dab6475a9a77ed7c8b8"}]}