{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13; \r\ncontract owned { \r\n  address public owner;\r\n\r\n  function owned() {\r\n      owner = msg.sender;\r\n  }\r\n\r\n  modifier onlyOwner {\r\n      require(msg.sender == owner);\r\n      _;\r\n  }\r\n\r\n  function transferOwnership(address newOwner) onlyOwner {\r\n      owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\ncontract tokenRecipient { function receiveApproval(address from, uint256 value, address token, bytes extraData); }\r\n\r\ncontract token { \r\n    // Public variables of the token / \r\n    string public name = 'CTB'; \r\n    string public symbol; \r\n    uint8 public decimals; \r\n    uint256 public totalSupply;\r\n\r\n  /* This creates an array with all balances */\r\n  mapping (address => uint256) public balanceOf;\r\n  mapping (address => mapping (address => uint256)) public allowance;\r\n\r\n  /* This generates a public event on the blockchain that will notify clients */\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n  /* This notifies clients about the amount burnt */\r\n  event Burn(address indexed from, uint256 value);\r\n\r\n  /* Initializes contract with initial supply tokens to the creator of the contract */\r\n  function token(\r\n      uint256 initialSupply,\r\n      string tokenName,\r\n      uint8 decimalUnits,\r\n      string tokenSymbol\r\n      ) {\r\n      balanceOf[msg.sender] = initialSupply;              // Give the creator all initial tokens\r\n      totalSupply = initialSupply;                        // Update total supply\r\n      name = tokenName;                                   // Set the name for display purposes\r\n      symbol = tokenSymbol;                               // Set the symbol for display purposes\r\n      decimals = decimalUnits;                            // Amount of decimals for display purposes\r\n  }\r\n\r\n  /* Internal transfer, only can be called by this contract */\r\n  function _transfer(address _from, address _to, uint _value) internal {\r\n      require (_to != 0x0);                               // Prevent transfer to 0x0 address. Use burn() instead\r\n      require (balanceOf[_from] > _value);                // Check if the sender has enough\r\n      require (balanceOf[_to] + _value > balanceOf[_to]); // Check for overflows\r\n      balanceOf[_from] -= _value;                         // Subtract from the sender\r\n      balanceOf[_to] += _value;                            // Add the same to the recipient\r\n      Transfer(_from, _to, _value);\r\n  }\r\n\r\n  /// @notice Send `_value` tokens to `_to` from your account\r\n  /// @param _to The address of the recipient\r\n  /// @param _value the amount to send\r\n  function transfer(address _to, uint256 _value) {\r\n      _transfer(msg.sender, _to, _value);\r\n  }\r\n\r\n  /// @notice Send `_value` tokens to `_to` in behalf of `_from`\r\n  /// @param _from The address of the sender\r\n  /// @param _to The address of the recipient\r\n  /// @param _value the amount to send\r\n  function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\r\n      require (_value < allowance[_from][msg.sender]);     // Check allowance\r\n      allowance[_from][msg.sender] -= _value;\r\n      _transfer(_from, _to, _value);\r\n      return true;\r\n  }\r\n\r\n  /// @notice Allows `_spender` to spend no more than `_value` tokens in your behalf\r\n  /// @param _spender The address authorized to spend\r\n  /// @param _value the max amount they can spend\r\n  function approve(address _spender, uint256 _value)\r\n      returns (bool success) {\r\n      allowance[msg.sender][_spender] = _value;\r\n      return true;\r\n  }\r\n\r\n  /// @notice Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\r\n  /// @param _spender The address authorized to spend\r\n  /// @param _value the max amount they can spend\r\n  /// @param _extraData some extra information to send to the approved contract\r\n  function approveAndCall(address _spender, uint256 _value, bytes _extraData)\r\n      returns (bool success) {\r\n      tokenRecipient spender = tokenRecipient(_spender);\r\n      if (approve(_spender, _value)) {\r\n          spender.receiveApproval(msg.sender, _value, this, _extraData);\r\n          return true;\r\n      }\r\n  }        \r\n\r\n  /// @notice Remove `_value` tokens from the system irreversibly\r\n  /// @param _value the amount of money to burn\r\n  function burn(uint256 _value) returns (bool success) {\r\n      require (balanceOf[msg.sender] > _value);            // Check if the sender has enough\r\n      balanceOf[msg.sender] -= _value;                      // Subtract from the sender\r\n      totalSupply -= _value;                                // Updates totalSupply\r\n      Burn(msg.sender, _value);\r\n      return true;\r\n  }\r\n\r\n  function burnFrom(address _from, uint256 _value) returns (bool success) {\r\n      require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\r\n      require(_value <= allowance[_from][msg.sender]);    // Check allowance\r\n      balanceOf[_from] -= _value;                         // Subtract from the targeted balance\r\n      allowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance\r\n      totalSupply -= _value;                              // Update totalSupply\r\n      Burn(_from, _value);\r\n      return true;\r\n  }\r\n\r\n}\r\n\r\ncontract CTB is owned, token {\r\n\r\n  uint256 public sellPrice;\r\n  uint256 public buyPrice;\r\n\r\n  mapping (address => bool) public frozenAccount;\r\n\r\n  /* This generates a public event on the blockchain that will notify clients */\r\n  event FrozenFunds(address target, bool frozen);\r\n\r\n  /* Initializes contract with initial supply tokens to the creator of the contract */\r\n  function CTB(\r\n      uint256 initialSupply,\r\n      string tokenName,\r\n      uint8 decimalUnits,\r\n      string tokenSymbol\r\n  ) token (initialSupply, tokenName, decimalUnits, tokenSymbol) {}\r\n\r\n  /* Internal transfer, only can be called by this contract */\r\n  function _transfer(address _from, address _to, uint _value) internal {\r\n      require (_to != 0x0);                               // Prevent transfer to 0x0 address. Use burn() instead\r\n      require (balanceOf[_from] > _value);                // Check if the sender has enough\r\n      require (balanceOf[_to] + _value > balanceOf[_to]); // Check for overflows\r\n      require(!frozenAccount[_from]);                     // Check if sender is frozen\r\n      require(!frozenAccount[_to]);                       // Check if recipient is frozen\r\n      balanceOf[_from] -= _value;                         // Subtract from the sender\r\n      balanceOf[_to] += _value;                           // Add the same to the recipient\r\n      Transfer(_from, _to, _value);\r\n  }\r\n\r\n  /// @notice Create `mintedAmount` tokens and send it to `target`\r\n  /// @param target Address to receive the tokens\r\n  /// @param mintedAmount the amount of tokens it will receive\r\n  function mintToken(address target, uint256 mintedAmount) onlyOwner {\r\n      balanceOf[target] += mintedAmount;\r\n      totalSupply += mintedAmount;\r\n      Transfer(0, this, mintedAmount);\r\n      Transfer(this, target, mintedAmount);\r\n  }\r\n\r\n  /// @notice `freeze? Prevent | Allow` `target` from sending & receiving tokens\r\n  /// @param target Address to be frozen\r\n  /// @param freeze either to freeze it or not\r\n  function freezeAccount(address target, bool freeze) onlyOwner {\r\n      frozenAccount[target] = freeze;\r\n      FrozenFunds(target, freeze);\r\n  }\r\n\r\n  /// @notice Allow users to buy tokens for `newBuyPrice` eth and sell tokens for `newSellPrice` eth\r\n  /// @param newSellPrice Price the users can sell to the contract\r\n  /// @param newBuyPrice Price users can buy from the contract\r\n  function setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner {\r\n      sellPrice = newSellPrice;\r\n      buyPrice = newBuyPrice;\r\n  }\r\n\r\n  /// @notice Buy tokens from contract by sending ether\r\n  function buy() payable {\r\n      uint amount = msg.value / buyPrice;               // calculates the amount\r\n      _transfer(this, msg.sender, amount);              // makes the transfers\r\n  }\r\n\r\n  /// @notice Sell `amount` tokens to contract\r\n  /// @param amount amount of tokens to be sold\r\n  function sell(uint256 amount) {\r\n      require(this.balance >= amount * sellPrice);      // checks if the contract has enough ether to buy\r\n      _transfer(msg.sender, this, amount);              // makes the transfers\r\n      msg.sender.transfer(amount * sellPrice);          // sends ether to the seller. It's important to do this last to avoid recursion attacks\r\n  }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"newSellPrice\",\"type\":\"uint256\"},{\"name\":\"newBuyPrice\",\"type\":\"uint256\"}],\"name\":\"setPrices\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"mintedAmount\",\"type\":\"uint256\"}],\"name\":\"mintToken\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"freeze\",\"type\":\"bool\"}],\"name\":\"freezeAccount\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"initialSupply\",\"type\":\"uint256\"},{\"name\":\"tokenName\",\"type\":\"string\"},{\"name\":\"decimalUnits\",\"type\":\"uint8\"},{\"name\":\"tokenSymbol\",\"type\":\"string\"}],\"payable\":false,\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"FrozenFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"}]","ContractName":"CTB","CompilerVersion":"v0.4.13+commit.fb4cb1a","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000011e1a3000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000003435442000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034354420000000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://dcf6a3a1bf5fc60e68a29784684b3749101642ef3bd881a3b1300656ec30ce36"}]}