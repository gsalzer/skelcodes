{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\ncontract owned {\r\n    \r\n    address _owner;\r\n    \r\n    function owner() public  constant returns (address) {\r\n        return _owner;\r\n    }\r\n    \r\n    function owned() public {\r\n        _owner = msg.sender;\r\n    }\r\n    \r\n    modifier onlyOwner {\r\n        require(msg.sender == _owner);\r\n        _;\r\n    }\r\n    \r\n    function transferOwnership(address _newOwner) onlyOwner public {\r\n        require(_newOwner != address(0));\r\n        _owner = _newOwner;\r\n    }\r\n}\r\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public; }\r\ncontract MyTokenEVC is owned {\r\n    \r\n    // Internal variables of the token\r\n    string  _name;\r\n    string _symbol;\r\n    uint8  _decimals = 18;\r\n    uint256 _totalSupply;\r\n    \r\n    // This creates an array with all balances\r\n    mapping (address => uint256)  _balanceOf;\r\n    mapping (address => mapping (address => uint256)) _allowance;\r\n    mapping (address => bool) _frozenAccount;\r\n    \r\n    // This generates a public event on the blockchain that will notify clients\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    // This notifies clients about the amount burnt\r\n    event Burn(address indexed from, uint256 value);\r\n    // This notifies clients frozen accounts\r\n    event FrozenFunds(address target, bool frozen);\r\n       \r\n    /**\r\n     * Constrctor function\r\n     *\r\n     * Initializes contract with initial supply tokens to the creator of the contract\r\n     */\r\n    function MyTokenEVC() public {\r\n        \r\n        // Update total supply with the decimal amount\r\n        _totalSupply = 0 * 10 ** uint256(_decimals);\r\n        \r\n        // Give the creator all initial tokens\r\n        _balanceOf[msg.sender] = _totalSupply;\r\n        \r\n        // Set the name for display purposes\r\n        _name = \"MyTokenEVC 4\";   \r\n        \r\n        // Set the symbol for display purposes\r\n        _symbol = \"MEVC4\";                    \r\n        \r\n    }\r\n    \r\n    /**\r\n     * Returns token's name\r\n     *\r\n     */\r\n    \r\n    function name() public  constant returns (string) {\r\n        return _name;\r\n    }\r\n    \r\n    /**\r\n     * Returns token's symbol\r\n     *\r\n     */\r\n    function symbol() public constant returns (string) {\r\n        return _symbol;\r\n    }\r\n    \r\n    /**\r\n     * Returns token's total supply\r\n     *\r\n     */\r\n    function decimals() public constant returns (uint8) {\r\n        return _decimals;\r\n    }\r\n    \r\n    function totalSupply() public constant returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n    \r\n    /**\r\n     * Returns balance of the give address\r\n     * @param _tokenHolder Tokens holder address\r\n     */\r\n    function balanceOf(address _tokenHolder) public constant returns (uint256) {\r\n        return _balanceOf[_tokenHolder];\r\n    }\r\n    \r\n    /**\r\n     * Returns allowance for the given owner and spender\r\n     * @param _tokenOwner Tokens owner address\r\n     * @param _spender Spender address\r\n     */\r\n    function allowance(address _tokenOwner, address _spender) public constant returns (uint256) {\r\n        return _allowance[_tokenOwner][_spender];\r\n    }\r\n    \r\n    /**\r\n     * Check if the address is frozen\r\n     * @param _account Address to be checked\r\n     */\r\n    function frozenAccount(address _account) public constant returns (bool) {\r\n        return _frozenAccount[_account];\r\n    }\r\n    \r\n    /**\r\n     * Internal transfer, only can be called by this contract\r\n     */\r\n    function _transfer(address _from, address _to, uint256 _value) internal {\r\n        \r\n        // Prevent transfer to 0x0 address. Use burn() instead\r\n        require(_to != 0x0);\r\n        \r\n        //Check if FrozenFunds\r\n        require(!_frozenAccount[msg.sender]);\r\n        \r\n        // Check if the sender has enough\r\n        require(_balanceOf[_from] >= _value);\r\n        \r\n        // Check for overflows\r\n        require(_balanceOf[_to] + _value > _balanceOf[_to]);\r\n        \r\n        // Save this for an assertion in the future\r\n        uint256 previousBalances = _balanceOf[_from] + _balanceOf[_to];\r\n        \r\n        // Subtract from the sender\r\n        _balanceOf[_from] -= _value;\r\n        \r\n        // Add the same to the recipient\r\n        _balanceOf[_to] += _value;\r\n        \r\n        Transfer(_from, _to, _value);\r\n        \r\n        // Asserts are used to use static analysis to find bugs in your code. They should never fail\r\n        assert(_balanceOf[_from] + _balanceOf[_to] == previousBalances);\r\n        \r\n    }\r\n    \r\n    /**\r\n     * Transfer tokens\r\n     *\r\n     * Send `_value` tokens to `_to` from your account\r\n     *\r\n     * @param _to The address of the recipient\r\n     * @param _value the amount to send\r\n     */\r\n    function transfer(address _to, uint256 _value) public {\r\n        \r\n        _transfer(msg.sender, _to, _value);\r\n        \r\n    }\r\n    \r\n    /**\r\n     * Transfer tokens from other address\r\n     *\r\n     * Send `_value` tokens to `_to` in behalf of `_from`\r\n     *\r\n     * @param _from The address of the sender\r\n     * @param _to The address of the recipient\r\n     * @param _value the amount to send\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        \r\n        // Check allowance if transfer not from own\r\n        if (msg.sender != _from) {\r\n            require(_allowance[_from][msg.sender] >= _value);     \r\n            _allowance[_from][msg.sender] -= _value;\r\n        }\r\n        \r\n        _transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * Set allowance for other address\r\n     *\r\n     * Allows `_spender` to spend no more than `_value` tokens in your behalf\r\n     *\r\n     * @param _spender The address authorized to spend\r\n     * @param _value the max amount they can spend\r\n     */\r\n    function approve(address _spender, uint256 _value) public returns (bool success) {\r\n        \r\n        //Check the balance\r\n        require(_balanceOf[msg.sender] >= _value);\r\n        \r\n        _allowance[msg.sender][_spender] = _value;\r\n        return true;\r\n        \r\n    }\r\n    \r\n    /**\r\n     * Set allowance for other address and notify\r\n     *\r\n     * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\r\n     *\r\n     * @param _spender The address authorized to spend\r\n     * @param _value the max amount they can spend\r\n     * @param _extraData some extra information to send to the approved contract\r\n     */\r\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) {\r\n        tokenRecipient spender = tokenRecipient(_spender);\r\n        if (approve(_spender, _value)) {\r\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\r\n            return true;\r\n        }\r\n    }\r\n    \r\n    \r\n    \r\n    /**\r\n     * @notice Destroy tokens from owener account, can be run only by owner\r\n     *\r\n     * Remove `_value` tokens from the system irreversibly\r\n     *\r\n     * @param _value the amount of money to burn\r\n     */\r\n    function burn(uint256 _value) onlyOwner public returns (bool success) {\r\n        \r\n        // Check if the targeted balance is enough\r\n        require(_balanceOf[_owner] >= _value);\r\n        \r\n        // Check total Supply\r\n        require(_totalSupply >= _value);\r\n        // Subtract from the targeted balance and total supply\r\n        _balanceOf[_owner] -= _value;\r\n        _totalSupply -= _value;\r\n        \r\n        Burn(_owner, _value);\r\n        return true;\r\n        \r\n    }\r\n    \r\n    /**\r\n     * @notice Destroy tokens from other account, can be run only by owner\r\n     *\r\n     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\r\n     *\r\n     * @param _from the address of the sender\r\n     * @param _value the amount of money to burn\r\n     */\r\n    function burnFrom(address _from, uint256 _value) onlyOwner public returns (bool success) {\r\n        \r\n        // Save frozen state\r\n        bool bAccountFrozen = frozenAccount(_from);\r\n        \r\n        //Unfreeze account if was frozen\r\n        if (bAccountFrozen) {\r\n            //Allow transfers\r\n            freezeAccount(_from,false);\r\n        }\r\n        \r\n        // Transfer to owners account\r\n        _transfer(_from, _owner, _value);\r\n        \r\n        //Freeze again if was frozen before\r\n        if (bAccountFrozen) {\r\n            freezeAccount(_from,bAccountFrozen);\r\n        }\r\n        \r\n        // Burn from owners account\r\n        burn(_value);\r\n        \r\n        return true;\r\n    }\r\n    \r\n    /**\r\n    * @notice Create `mintedAmount` tokens and send it to `owner`, can be run only by owner\r\n    * @param mintedAmount the amount of tokens it will receive\r\n    */\r\n    function mintToken(uint256 mintedAmount) onlyOwner public {\r\n        \r\n        // Check for overflows\r\n        require(_balanceOf[_owner] + mintedAmount >= _balanceOf[_owner]);\r\n        \r\n        // Check for overflows\r\n        require(_totalSupply + mintedAmount >= _totalSupply);\r\n        \r\n        _balanceOf[_owner] += mintedAmount;\r\n        _totalSupply += mintedAmount;\r\n        \r\n        Transfer(0, _owner, mintedAmount);\r\n        \r\n    }\r\n    \r\n    /**\r\n    * @notice Freeze or unfreeze account, can be run only by owner\r\n    * @param target Account\r\n    * @param freeze True to freeze, False to unfreeze\r\n    */\r\n    function freezeAccount (address target, bool freeze) onlyOwner public {\r\n        \r\n        _frozenAccount[target] = freeze;\r\n        FrozenFunds(target, freeze);\r\n        \r\n    }\r\n    \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenHolder\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"frozenAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"mintedAmount\",\"type\":\"uint256\"}],\"name\":\"mintToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenOwner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"freeze\",\"type\":\"bool\"}],\"name\":\"freezeAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"FrozenFunds\",\"type\":\"event\"}]","ContractName":"MyTokenEVC","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://622f19283d6a9df9017b4684a893cf1242ae496b5f830ee37d5bba2ada9da1c0"}]}