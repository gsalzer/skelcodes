{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *  Crowdsale for Fast Invest Tokens.\r\n *  Raised Ether will be stored safely at the wallet.\r\n *\r\n *  Based on OpenZeppelin framework.\r\n *  https://openzeppelin.org\r\n *\r\n *  Author: Paulius Tumosa\r\n **/\r\n\r\npragma solidity ^0.4.18;\r\n\r\n/**\r\n * Safe Math library from OpenZeppelin framework\r\n * https://openzeppelin.org\r\n *\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract token {\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n}\r\n\r\n/**\r\n * @title FastInvestTokenCrowdsale\r\n *\r\n * Crowdsale have a start and end timestamps, where investors can make\r\n * token purchases and the crowdsale will assign them tokens based\r\n * on a token per ETH rate. Funds collected are forwarded to a wallet\r\n * as they arrive.\r\n */\r\ncontract FastInvestTokenCrowdsale {\r\n    using SafeMath for uint256;\r\n\r\n    address public owner;\r\n\r\n    // The token being sold\r\n    token public tokenReward;\r\n\r\n    // Tokens will be transfered from this address\r\n    address internal tokenOwner;\r\n\r\n    // Address where funds are collected\r\n    address internal wallet;\r\n\r\n    // Start and end timestamps where investments are allowed\r\n    uint256 public startTime;\r\n    uint256 public endTime;\r\n\r\n    // Amount of tokens sold\r\n    uint256 public tokensSold = 0;\r\n\r\n    // Amount of raised money in wei\r\n    uint256 public weiRaised = 0;\r\n\r\n    // Funding goal and soft cap\r\n    uint256 constant public SOFT_CAP        = 38850000000000000000000000;\r\n    uint256 constant public FUNDING_GOAL    = 388500000000000000000000000;\r\n\r\n    // Tokens per ETH rates before and after the soft cap is reached\r\n    uint256 constant public RATE = 1000;\r\n    uint256 constant public RATE_SOFT = 1200;\r\n\r\n    // The balances in ETH of all investors\r\n    mapping (address => uint256) public balanceOf;\r\n\r\n    /**\r\n     * Event for token purchase logging\r\n     *\r\n     * @param purchaser who paid for the tokens\r\n     * @param beneficiary who got the tokens\r\n     * @param value weis paid for purchase\r\n     * @param amount amount of tokens purchased\r\n     */\r\n    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function FastInvestTokenCrowdsale(address _tokenAddress, address _wallet, uint256 _start, uint256 _end) public {\r\n        require(_tokenAddress != address(0));\r\n        require(_wallet != address(0));\r\n\r\n        owner = msg.sender;\r\n        tokenOwner = msg.sender;\r\n        wallet = _wallet;\r\n\r\n        tokenReward = token(_tokenAddress);\r\n\r\n        require(_start < _end);\r\n        startTime = _start;\r\n        endTime = _end;\r\n\r\n    }\r\n\r\n    // Fallback function can be used to buy tokens\r\n    function () external payable {\r\n        buyTokens(msg.sender);\r\n    }\r\n\r\n    // Low level token purchase function\r\n    function buyTokens(address beneficiary) public payable {\r\n        require(beneficiary != 0x0);\r\n        require(validPurchase());\r\n\r\n        uint256 weiAmount = msg.value;\r\n        uint256 tokens = 0;\r\n\r\n        // Calculate token amount\r\n        if (tokensSold < SOFT_CAP) {\r\n            tokens = weiAmount.mul(RATE_SOFT);\r\n\r\n            if (tokensSold.add(tokens) > SOFT_CAP) {\r\n                uint256 softTokens = SOFT_CAP.sub(tokensSold);\r\n                uint256 amountLeft = weiAmount.sub(softTokens.div(RATE_SOFT));\r\n\r\n                tokens = softTokens.add(amountLeft.mul(RATE));\r\n            }\r\n\r\n        } else  {\r\n            tokens = weiAmount.mul(RATE);\r\n        }\r\n\r\n        require(tokens > 0);\r\n        require(tokensSold.add(tokens) <= FUNDING_GOAL);\r\n\r\n        forwardFunds();\r\n        assert(tokenReward.transferFrom(tokenOwner, beneficiary, tokens));\r\n\r\n        balanceOf[beneficiary] = balanceOf[beneficiary].add(weiAmount);\r\n\r\n        // Update totals\r\n        weiRaised  = weiRaised.add(weiAmount);\r\n        tokensSold = tokensSold.add(tokens);\r\n\r\n        TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\r\n    }\r\n\r\n    // Send ether to the fund collection wallet\r\n    function forwardFunds() internal {\r\n        wallet.transfer(msg.value);\r\n    }\r\n\r\n    // @return true if the transaction can buy tokens\r\n    function validPurchase() internal view returns (bool) {\r\n        bool withinPeriod = now >= startTime && now <= endTime;\r\n        bool nonZeroPurchase = msg.value != 0;\r\n        bool hasTokens = tokensSold < FUNDING_GOAL;\r\n\r\n        return withinPeriod && nonZeroPurchase && hasTokens;\r\n    }\r\n\r\n    function setStart(uint256 _start) public onlyOwner {\r\n        startTime = _start;\r\n    }\r\n\r\n    function setEnd(uint256 _end) public onlyOwner {\r\n        require(startTime < _end);\r\n        endTime = _end;\r\n    }\r\n\r\n    // @return true if crowdsale event has ended\r\n    function hasEnded() public view returns (bool) {\r\n        return now > endTime;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FUNDING_GOAL\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RATE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenReward\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_end\",\"type\":\"uint256\"}],\"name\":\"setEnd\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SOFT_CAP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RATE_SOFT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_start\",\"type\":\"uint256\"}],\"name\":\"setStart\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_start\",\"type\":\"uint256\"},{\"name\":\"_end\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"}]","ContractName":"FastInvestTokenCrowdsale","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000e25deffe1e7464bad53b3885c6c0220ce90e57db000000000000000000000000cc350fca0890e22d082130f32f790ba1b3fe1a0a000000000000000000000000000000000000000000000000000000005a251ca0000000000000000000000000000000000000000000000000000000005a71d9f0","Library":"","SwarmSource":"bzzr://481dd405532cab9d997687bbd965ef48a7fa35c3864d02a40dc9a22151f62ad2"}]}