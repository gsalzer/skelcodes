{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\npragma solidity ^0.4.18;\r\n\r\ncontract ERC20Basic {\r\n    uint256 public totalSupply;\r\n    function balanceOf(address who) public constant returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n    function allowance(address owner, address spender) public constant returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract BasicToken is ERC20Basic {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) balances;\r\n\r\n    /**\r\n    * @dev transfer token for a specified address\r\n    * @param _to The address to transfer to.\r\n    * @param _value The amount to be transferred.\r\n    */\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        balances[_to] = balances[_to].add(_value);\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the balance of the specified address.\r\n    * @param _owner The address to query the the balance of.\r\n    * @return An uint256 representing the amount owned by the passed address.\r\n    */\r\n    function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n}\r\n\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another\r\n     * @param _from address The address which you want to send tokens from\r\n     * @param _to address The address which you want to transfer to\r\n     * @param _value uint256 the amout of tokens to be transfered\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n        var _allowance = allowed[_from][msg.sender];\r\n\r\n        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n        // require (_value <= _allowance);\r\n\r\n        balances[_to] = balances[_to].add(_value);\r\n        balances[_from] = balances[_from].sub(_value);\r\n        allowed[_from][msg.sender] = _allowance.sub(_value);\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _value The amount of tokens to be spent.\r\n     */\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n\r\n        // To change the approve amount you first have to reduce the addresses`\r\n        //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n        //  already 0 to mitigate the race condition described here:\r\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n        require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n     * @param _owner address The address which owns the funds.\r\n     * @param _spender address The address which will spend the funds.\r\n     * @return A uint256 specifing the amount of tokens still avaible for the spender.\r\n     */\r\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n}\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    function Ownable() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        assert(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        if (newOwner != address(0)) {\r\n            owner = newOwner;\r\n        }\r\n    }\r\n}\r\n\r\ncontract TheMoveToken is StandardToken, Ownable {\r\n    string public constant name = \"MOVE Token\";\r\n    string public constant symbol = \"MOVE\";\r\n    uint public constant decimals = 18;\r\n    using SafeMath for uint256;\r\n    // timestamps for PRE-ICO phase\r\n    uint public preicoStartDate;\r\n    uint public preicoEndDate;\r\n    // timestamps for ICO phase\r\n    uint public icoStartDate;\r\n    uint public icoEndDate;\r\n    // address where funds are collected\r\n    address public wallet;\r\n    // how many token units a buyer gets per wei\r\n    uint256 public rate;\r\n    uint256 public minTransactionAmount;\r\n    uint256 public raisedForEther = 0;\r\n    uint256 private preicoSupply = 3072000000000000000000000;\r\n    uint256 private icoSupply = 10000000000000000000000000;\r\n    uint256 private bonusesSupply = 3000000000000000000000000;\r\n\r\n    uint256 public bonusesSold = 0;\r\n    uint256 public tokensSold = 0;\r\n\r\n    // PRE-ICO stages\r\n    uint256 public stage1 = 240000000000000000000000;\r\n    uint256 public stage2 = 360000000000000000000000;\r\n    uint256 public stage3 = 960000000000000000000000;\r\n    uint256 public stage4 = 1512000000000000000000000;\r\n\r\n    modifier inActivePeriod() {\r\n\t   require((preicoStartDate < now && now <= preicoEndDate) || (icoStartDate < now && now <= icoEndDate));\r\n        _;\r\n    }\r\n\r\n    function TheMoveToken(uint _preicostart, uint _preicoend,uint _icostart, uint _icoend, address _wallet) public {\r\n        require(_wallet != 0x0);\r\n        require(_preicostart < _preicoend);\r\n        require(_preicoend < _icostart);\r\n        require(_icostart < _icoend);\r\n\r\n        totalSupply = 21172000000000000000000000;\r\n        rate = 3600;\r\n\r\n        // minimal invest\r\n        minTransactionAmount = 0.1 ether;\r\n        icoStartDate = _icostart;\r\n        icoEndDate = _icoend;\r\n        preicoStartDate = _preicostart;\r\n        preicoEndDate = _preicoend;\r\n        wallet = _wallet;\r\n\r\n\t   // Store the ico funds in the contract and send the rest to the developer wallet\r\n       uint256 amountInContract = preicoSupply + icoSupply + bonusesSupply;\r\n       uint256 amountDevelopers = totalSupply - amountInContract;\r\n       \r\n\t   balances[this] = balances[this].add(amountInContract);\r\n\t   Transfer(_wallet, _wallet, amountDevelopers);\r\n       balances[_wallet] = balances[_wallet].add(totalSupply - amountInContract);\r\n       Transfer(_wallet, this, amountInContract);\r\n    }\r\n\r\n    function setupPREICOPeriod(uint _start, uint _end) public onlyOwner {\r\n        require(_start < _end);\r\n        preicoStartDate = _start;\r\n        preicoEndDate = _end;\r\n    }\r\n\r\n    function setupICOPeriod(uint _start, uint _end) public onlyOwner {\r\n        require(_start < _end);\r\n        icoStartDate = _start;\r\n        icoEndDate = _end;\r\n    }\r\n    \r\n    function setRate(uint256 _rate) public onlyOwner {\r\n        rate = _rate;\r\n    }\r\n\r\n    // fallback function can be used to buy tokens\r\n    function () public inActivePeriod payable {\r\n        buyTokens(msg.sender);\r\n    }\r\n\r\n    function burnPREICOTokens() public onlyOwner {\r\n        int256 amountToBurn = int256(preicoSupply) - int256(tokensSold);\r\n        if (amountToBurn > 0) {\r\n            balances[this] = balances[this].sub(uint256(amountToBurn));\r\n        }\r\n    }\r\n    \r\n    function sendTokens(address _sender, uint256 amount) public inActivePeriod onlyOwner {\r\n        // calculate token amount to be issued\r\n        uint256 tokens = amount.mul(rate);\r\n        tokens += getBonus(tokens);\r\n\r\n        if (isPREICO()) {\r\n            require(tokensSold + tokens < preicoSupply);\r\n        } else if (isICO()) {\r\n            require(tokensSold + tokens <= (icoSupply + bonusesSupply));\r\n        }\r\n\r\n        issueTokens(_sender, tokens);\r\n        tokensSold += tokens;\r\n    }\r\n\r\n    // Use with extreme caution this will burn the rest of the tokens in the contract\r\n    function burnICOTokens() public onlyOwner {\r\n        balances[this] = 0;\r\n    }\r\n\r\n    function burnBonuses() public onlyOwner {\r\n        int256 amountToBurn = int256(bonusesSupply) - int256(bonusesSold);\r\n        if (amountToBurn > 0) {\r\n            balances[this] = balances[this].sub(uint256(amountToBurn));\r\n        }\r\n    }\r\n\r\n    // low level token purchase function\r\n    function buyTokens(address _sender) public inActivePeriod payable {\r\n        require(_sender != 0x0);\r\n        require(msg.value >= minTransactionAmount);\r\n\r\n        uint256 weiAmount = msg.value;\r\n\r\n        raisedForEther = raisedForEther.add(weiAmount);\r\n\r\n        // calculate token amount to be created\r\n        uint256 tokens = weiAmount.mul(rate);\r\n        tokens += getBonus(tokens);\r\n\r\n        if (isPREICO()) {\r\n            require(tokensSold + tokens < preicoSupply);\r\n        } else if (isICO()) {\r\n            require(tokensSold + tokens <= (icoSupply + bonusesSupply));\r\n        }\r\n\r\n        issueTokens(_sender, tokens);\r\n        tokensSold += tokens;\r\n    }\r\n\r\n    function withdrawEther(uint256 amount) external onlyOwner {\r\n        owner.transfer(amount);\r\n    }\r\n\r\n    function isPREICO() public view returns (bool) {\r\n        return (preicoStartDate < now && now <= preicoEndDate);\r\n    }\r\n\r\n    function isICO() public view returns (bool) {\r\n        return (icoStartDate < now && now <= icoEndDate);\r\n    }\r\n    \r\n    function setTokensSold(uint256 amount) public onlyOwner {\r\n        tokensSold = amount;\r\n    }\r\n\r\n    function getBonus(uint256 _tokens) public returns (uint256) {\r\n        require(_tokens != 0);\r\n        uint256 bonuses = 0;\r\n        uint256 multiplier = 0;\r\n\r\n        // First case if PRE-ICO is happening\r\n        if (isPREICO()) {\r\n            // Bonus depends on the amount of tokens sold.\r\n            if (tokensSold < stage1) {\r\n                // 100% bonus for stage1\r\n                multiplier = 100;\r\n            } else if (stage1 < tokensSold && tokensSold < (stage1 + stage2)) {\r\n                // 80% bonus for stage2\r\n                multiplier = 80;\r\n            } else if ((stage1 + stage2) < tokensSold && tokensSold < (stage1 + stage2 + stage3)) {\r\n                // 60% bonus for stage2\r\n                multiplier = 60;\r\n            } else if ((stage1 + stage2 + stage3) < tokensSold && tokensSold < (stage1 + stage2 + stage3 + stage4)) {\r\n                // 40% bonus for stage2\r\n                multiplier = 40;\r\n            }\r\n            bonuses = _tokens.mul(multiplier).div(100);\r\n\r\n            return bonuses;\r\n        }\r\n\r\n        \r\n        // Second case if ICO is happening\r\n        else if (isICO()) {\r\n            // Bonus depends on the week of the ICO and the bonus supply\r\n            if (icoStartDate < now && now <= icoStartDate + 7 days) {\r\n                // 20% bonus week 1\r\n                multiplier = 20;\r\n            } else if (icoStartDate + 7 days < now && now <= icoStartDate + 14 days ) {\r\n                // 10% bonus week 2\r\n                multiplier = 10;\r\n            } else if (icoStartDate + 14 days < now && now <= icoStartDate + 21 days ) {\r\n                // 5% bonus week 3\r\n                multiplier = 5;\r\n            }\r\n\r\n            bonuses = _tokens.mul(multiplier).div(100);\r\n\r\n            // Bonus supply limit reached.\r\n            if (bonusesSold + bonuses > bonusesSupply) {\r\n                bonuses = 0;\r\n            } else {\r\n                bonusesSold += bonuses;\r\n            }\r\n            return bonuses;\r\n        } \r\n    }\r\n\r\n    function issueTokens(address _to, uint256 _value) internal returns (bool) {\r\n        balances[_to] = balances[_to].add(_value);\r\n        balances[this] = balances[this].sub(_value);\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sendTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minTransactionAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_start\",\"type\":\"uint256\"},{\"name\":\"_end\",\"type\":\"uint256\"}],\"name\":\"setupICOPeriod\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"burnPREICOTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setTokensSold\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoEndDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"raisedForEther\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"setRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"getBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preicoEndDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"burnICOTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isPREICO\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preicoStartDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isICO\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stage3\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stage2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"burnBonuses\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusesSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_start\",\"type\":\"uint256\"},{\"name\":\"_end\",\"type\":\"uint256\"}],\"name\":\"setupPREICOPeriod\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stage4\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stage1\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoStartDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_preicostart\",\"type\":\"uint256\"},{\"name\":\"_preicoend\",\"type\":\"uint256\"},{\"name\":\"_icostart\",\"type\":\"uint256\"},{\"name\":\"_icoend\",\"type\":\"uint256\"},{\"name\":\"_wallet\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"TheMoveToken","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000030000000000000000000000003685c423d54e6ad85fb78bed40a79fd47f1e41f5","Library":"","SwarmSource":"bzzr://86559ed54e09a0a5e717c9c8ee8aeb45952eb98d76dc0de55ee76a16dad3892f"}]}