{"status":"1","message":"OK","result":[{"SourceCode":"contract Tickets {\r\n\r\n    string public name = \"Kraftwerk\";\r\n    string public symbol = \"KKT\";\r\n    uint8 public decimals = 0;\r\n\r\n    address[1000] public holders;\r\n    mapping(uint256 => bool) public usedTickets;\r\n    mapping(uint256 => string) public additionalInfo;\r\n    mapping(address => uint[16]) public seatsList;\r\n    mapping(address => uint256) public balanceOf;\r\n    address[30000] public booking;\r\n    mapping(address => uint[16]) public bookingList;\r\n    mapping(address => uint256) public amountOfBooked;\r\n\r\n    address Manager;\r\n    address ManagerForRate;\r\n    address Company;\r\n    address nullAddress = 0x0;\r\n\r\n    uint public limitPerHolder = 16;\r\n    uint public seatsCount = 1000;\r\n    uint scaleMultiplier = 1000000000000000000; \r\n\r\n    uint public Rate_Eth = 298;\r\n    uint public Ticket_Price = 15*scaleMultiplier/Rate_Eth;\r\n\r\n    modifier managerOnly { require(msg.sender == Manager); _; }\r\n    modifier rateManagerOnly { require(msg.sender == ManagerForRate); _; }\r\n\r\n    event LogAllocateTicket(uint256 _seatID, address _buyer, string _infoString);\r\n    event LogTransfer(address _holder, address _receiver, uint256 _seatID, string _infoStringt);\r\n    event LogRedeemTicket(uint _seatID, address _holder, string _infoString);\r\n    event LogBookTicket(uint _seatID, address _buyer,string _infoString);\r\n    event LogCancelReservation(address _buyer, uint _seatID);\r\n\r\n\r\n\r\n    function Tickets(address _ManagerForRate,  address _Manager, address _Company) {\r\n        ManagerForRate = _ManagerForRate;\r\n        Manager = _Manager;\r\n        Company = _Company;\r\n    }\r\n\r\n    function setRate(uint _RateEth) external rateManagerOnly {\r\n       Rate_Eth = _RateEth;\r\n       Ticket_Price = 15*scaleMultiplier/Rate_Eth;\r\n    }\r\n\r\n\r\n    function allocateTicket(uint256 seatID, address buyer, string infoString) external managerOnly {\r\n        require(seatID > 0 && seatID < seatsCount);\r\n        require(holders[seatID] == nullAddress);\r\n        require(balanceOf[buyer] < limitPerHolder);\r\n        require(booking[seatID] == nullAddress);\r\n        createTicket(seatID, buyer);\r\n        additionalInfo[seatID] = infoString;\r\n        LogAllocateTicket(seatID, buyer, infoString);\r\n    }\r\n\r\n    function createTicket(uint256 seatID, address buyer) internal {\r\n        uint i = 0;\r\n        for(i = 0; i < limitPerHolder; i++)\r\n        {\r\n            if(seatsList[buyer][i] == 0)\r\n            {\r\n                break;\r\n            }\r\n        }\r\n        holders[seatID] = buyer;\r\n        balanceOf[buyer] += 1;\r\n        seatsList[buyer][i] = seatID;\r\n    }\r\n\r\n    function redeemTicket(uint seatID, address holder) external managerOnly{\r\n        require(seatID > 0 && seatID < seatsCount);\r\n        require(usedTickets[seatID] == false);\r\n        require(holders[seatID] == holder);\r\n        usedTickets[seatID] = true;\r\n        string infoString = additionalInfo[seatID];\r\n        LogRedeemTicket(seatID, holder, infoString);\r\n    }\r\n\r\n    function transfer(address holder, address receiver, uint256 seatID) external managerOnly{\r\n        require(seatID > 0 && seatID < seatsCount);\r\n        require(holders[seatID] == holder);\r\n        require(balanceOf[receiver] < limitPerHolder);\r\n        require(holder != receiver);\r\n        uint i = 0;\r\n        holders[seatID] = receiver;\r\n        balanceOf[holder] -= 1;\r\n        if(receiver != nullAddress)\r\n        {\r\n            for(i = 0; i < limitPerHolder; i++)\r\n              {\r\n                  if(seatsList[receiver][i] == 0)\r\n                  {\r\n                     break;\r\n                  }\r\n            }\r\n            balanceOf[receiver] += 1;\r\n            seatsList[receiver][i] = seatID;\r\n        }\r\n        for(i = 0; i < limitPerHolder; i++)\r\n        {\r\n            if(seatsList[holder][i] == seatID)\r\n            {\r\n                seatsList[holder][i] = 0;\r\n            }\r\n        }\r\n        string infoString = additionalInfo[seatID];\r\n        LogTransfer(holder, receiver, seatID, infoString);\r\n    }\r\n\r\n    function bookTicket(uint256 seatID, address buyer, string infoString) external managerOnly{\r\n        require(seatID > 0 && seatID < seatsCount);\r\n        require(holders[seatID] == nullAddress);\r\n        require(booking[seatID] == nullAddress);\r\n        require(balanceOf[buyer] + amountOfBooked[buyer] < limitPerHolder);\r\n        uint i = 0;\r\n        booking[seatID] = buyer;\r\n        amountOfBooked[buyer] += 1;\r\n        while(bookingList[buyer][i] != 0) {\r\n            i++;\r\n        }\r\n        bookingList[buyer][i] = seatID;\r\n        additionalInfo[seatID] = infoString;\r\n        LogBookTicket(seatID, buyer, infoString);\r\n    }\r\n\r\n    function cancelReservation(address buyer, uint256 seatID) external managerOnly{\r\n        require(booking[seatID] == buyer);\r\n        uint i = 0;\r\n        while(i < limitPerHolder) {\r\n            if (seatID == bookingList[buyer][i]){\r\n              booking[seatID] = nullAddress;\r\n              bookingList[buyer][i] = 0;\r\n              break;\r\n            }\r\n            i++;\r\n        }\r\n        amountOfBooked[buyer] -= 1;\r\n        LogCancelReservation(buyer, seatID);\r\n    }\r\n\r\n\r\n    function() payable {\r\n        require(amountOfBooked[msg.sender] != 0);\r\n        require(balanceOf[msg.sender] + amountOfBooked[msg.sender] <= limitPerHolder);\r\n        require(msg.value >= Ticket_Price * amountOfBooked[msg.sender]);\r\n        makePayment(msg.sender);\r\n    }\r\n\r\n    function makePayment(address buyer) internal {\r\n        uint i = 0;\r\n        uint seatID;\r\n        string infoString;\r\n        while(i < limitPerHolder) {\r\n            if(bookingList[buyer][i] != 0) {\r\n              seatID = bookingList[buyer][i];\r\n              bookingList[buyer][i] = 0;\r\n              booking[seatID] = nullAddress;\r\n              createTicket(seatID, buyer);\r\n              infoString = additionalInfo[seatID];\r\n              LogAllocateTicket(seatID, msg.sender, infoString);\r\n            }\r\n            i++;\r\n        }\r\n        amountOfBooked[buyer] = 0;\r\n    }\r\n\r\n    function withdrawEther(uint256 _value) external managerOnly{\r\n       Company.transfer(_value);\r\n    }\r\n\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bookingList\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Ticket_Price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"seatID\",\"type\":\"uint256\"},{\"name\":\"buyer\",\"type\":\"address\"},{\"name\":\"infoString\",\"type\":\"string\"}],\"name\":\"bookTicket\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"holders\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"seatsList\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_RateEth\",\"type\":\"uint256\"}],\"name\":\"setRate\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"booking\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"withdrawEther\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"buyer\",\"type\":\"address\"},{\"name\":\"seatID\",\"type\":\"uint256\"}],\"name\":\"cancelReservation\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"usedTickets\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"seatID\",\"type\":\"uint256\"},{\"name\":\"buyer\",\"type\":\"address\"},{\"name\":\"infoString\",\"type\":\"string\"}],\"name\":\"allocateTicket\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"seatID\",\"type\":\"uint256\"},{\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"redeemTicket\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"holder\",\"type\":\"address\"},{\"name\":\"receiver\",\"type\":\"address\"},{\"name\":\"seatID\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"seatsCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"amountOfBooked\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Rate_Eth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"additionalInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"limitPerHolder\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_ManagerForRate\",\"type\":\"address\"},{\"name\":\"_Manager\",\"type\":\"address\"},{\"name\":\"_Company\",\"type\":\"address\"}],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_seatID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_infoString\",\"type\":\"string\"}],\"name\":\"LogAllocateTicket\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_holder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_receiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_seatID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_infoStringt\",\"type\":\"string\"}],\"name\":\"LogTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_seatID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_holder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_infoString\",\"type\":\"string\"}],\"name\":\"LogRedeemTicket\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_seatID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_infoString\",\"type\":\"string\"}],\"name\":\"LogBookTicket\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_seatID\",\"type\":\"uint256\"}],\"name\":\"LogCancelReservation\",\"type\":\"event\"}]","ContractName":"Tickets","CompilerVersion":"v0.4.13-nightly.2017.7.3+commit.6e4e627b","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000363c42de26a47b05ffca269bb2202851fd8725d20000000000000000000000004c3343bbfa7dac896cd0e3795f46187134ab28bb0000000000000000000000006a5f3cc68f323aa306c018b21efb3c23db2d46d5","Library":"","SwarmSource":"bzzr://6a75ce5534944bcc2907b24737c92b511b5de3543060bff0a953f82a34c2a9aa"}]}