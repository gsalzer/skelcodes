{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\n/*\r\n    Copyright 2016, Jordi Baylina\r\n    Contributor: Adrià Massanet <adria@codecontext.io>\r\n\r\n    This program is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    This program is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n    GNU General Public License for more details.\r\n\r\n    You should have received a copy of the GNU General Public License\r\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n    \r\n    \r\n    This is just some extra garbage to check about comments\r\n*/\r\n/// Add an extra comment here see if I care\r\n/// @title Owned\r\n/// @author Adrià Massanet <adria@codecontext.io>\r\n/// @notice The Owned contract has an owner address, and provides basic \r\n///  authorization control functions, this simplifies & the implementation of\r\n///  user permissions; this contract has three work flows for a change in\r\n///  ownership, the first requires the new owner to validate that they have the\r\n///  ability to accept ownership, the second allows the ownership to be\r\n///  directly transfered without requiring acceptance, and the third allows for\r\n///  the ownership to be removed to allow for decentralization \r\ncontract Owned {\r\n\r\n    address public owner;\r\n    address public newOwnerCandidate;\r\n\r\n    event OwnershipRequested(address indexed by, address indexed to);\r\n    event OwnershipTransferred(address indexed from, address indexed to);\r\n    event OwnershipRemoved();\r\n\r\n    /// @dev The constructor sets the `msg.sender` as the`owner` of the contract\r\n    function Owned() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /// @dev `owner` is the only address that can call a function with this\r\n    /// modifier\r\n    modifier onlyOwner() {\r\n        require (msg.sender == owner);\r\n        _;\r\n    }\r\n    \r\n    /// @dev In this 1st option for ownership transfer `proposeOwnership()` must\r\n    ///  be called first by the current `owner` then `acceptOwnership()` must be\r\n    ///  called by the `newOwnerCandidate`\r\n    /// @notice `onlyOwner` Proposes to transfer control of the contract to a\r\n    ///  new owner\r\n    /// @param _newOwnerCandidate The address being proposed as the new owner\r\n    function proposeOwnership(address _newOwnerCandidate) public onlyOwner {\r\n        newOwnerCandidate = _newOwnerCandidate;\r\n        OwnershipRequested(msg.sender, newOwnerCandidate);\r\n    }\r\n\r\n    /// @notice Can only be called by the `newOwnerCandidate`, accepts the\r\n    ///  transfer of ownership\r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwnerCandidate);\r\n\r\n        address oldOwner = owner;\r\n        owner = newOwnerCandidate;\r\n        newOwnerCandidate = 0x0;\r\n\r\n        OwnershipTransferred(oldOwner, owner);\r\n    }\r\n\r\n    /// @dev In this 2nd option for ownership transfer `changeOwnership()` can\r\n    ///  be called and it will immediately assign ownership to the `newOwner`\r\n    /// @notice `owner` can step down and assign some other address to this role\r\n    /// @param _newOwner The address of the new owner\r\n    function changeOwnership(address _newOwner) public onlyOwner {\r\n        require(_newOwner != 0x0);\r\n\r\n        address oldOwner = owner;\r\n        owner = _newOwner;\r\n        newOwnerCandidate = 0x0;\r\n\r\n        OwnershipTransferred(oldOwner, owner);\r\n    }\r\n\r\n    /// @dev In this 3rd option for ownership transfer `removeOwnership()` can\r\n    ///  be called and it will immediately assign ownership to the 0x0 address;\r\n    ///  it requires a 0xdece be input as a parameter to prevent accidental use\r\n    /// @notice Decentralizes the contract, this operation cannot be undone \r\n    /// @param _dac `0xdac` has to be entered for this function to work\r\n    function removeOwnership(address _dac) public onlyOwner {\r\n        require(_dac == 0xdac);\r\n        owner = 0x0;\r\n        newOwnerCandidate = 0x0;\r\n        OwnershipRemoved();     \r\n    }\r\n} \r\n\r\n\r\n\r\n/**\r\n * @title ERC20\r\n * @dev A standard interface for tokens.\r\n * @dev https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\r\n */\r\ncontract ERC20 {\r\n  \r\n    /// @dev Returns the total token supply\r\n    function totalSupply() public constant returns (uint256 supply);\r\n\r\n    /// @dev Returns the account balance of the account with address _owner\r\n    function balanceOf(address _owner) public constant returns (uint256 balance);\r\n\r\n    /// @dev Transfers _value number of tokens to address _to\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n\r\n    /// @dev Transfers _value number of tokens from address _from to address _to\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n\r\n    /// @dev Allows _spender to withdraw from the msg.sender's account up to the _value amount\r\n    function approve(address _spender, uint256 _value) public returns (bool success);\r\n\r\n    /// @dev Returns the amount which _spender is still allowed to withdraw from _owner\r\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n}\r\n\r\n\r\n/// @dev `Escapable` is a base level contract built off of the `Owned`\r\n///  contract; it creates an escape hatch function that can be called in an\r\n///  emergency that will allow designated addresses to send any ether or tokens\r\n///  held in the contract to an `escapeHatchDestination` as long as they were\r\n///  not blacklisted\r\ncontract Escapable is Owned {\r\n    address public escapeHatchCaller;\r\n    address public escapeHatchDestination;\r\n    mapping (address=>bool) private escapeBlacklist; // Token contract addresses\r\n\r\n    /// @notice The Constructor assigns the `escapeHatchDestination` and the\r\n    ///  `escapeHatchCaller`\r\n    /// @param _escapeHatchCaller The address of a trusted account or contract\r\n    ///  to call `escapeHatch()` to send the ether in this contract to the\r\n    ///  `escapeHatchDestination` it would be ideal that `escapeHatchCaller`\r\n    ///  cannot move funds out of `escapeHatchDestination`\r\n    /// @param _escapeHatchDestination The address of a safe location (usu a\r\n    ///  Multisig) to send the ether held in this contract; if a neutral address\r\n    ///  is required, the WHG Multisig is an option:\r\n    ///  0x8Ff920020c8AD673661c8117f2855C384758C572 \r\n    function Escapable(address _escapeHatchCaller, address _escapeHatchDestination) public {\r\n        escapeHatchCaller = _escapeHatchCaller;\r\n        escapeHatchDestination = _escapeHatchDestination;\r\n    }\r\n\r\n    /// @dev The addresses preassigned as `escapeHatchCaller` or `owner`\r\n    ///  are the only addresses that can call a function with this modifier\r\n    modifier onlyEscapeHatchCallerOrOwner {\r\n        require ((msg.sender == escapeHatchCaller)||(msg.sender == owner));\r\n        _;\r\n    }\r\n\r\n    /// @notice Creates the blacklist of tokens that are not able to be taken\r\n    ///  out of the contract; can only be done at the deployment, and the logic\r\n    ///  to add to the blacklist will be in the constructor of a child contract\r\n    /// @param _token the token contract address that is to be blacklisted \r\n    function blacklistEscapeToken(address _token) internal {\r\n        escapeBlacklist[_token] = true;\r\n        EscapeHatchBlackistedToken(_token);\r\n    }\r\n\r\n    /// @notice Checks to see if `_token` is in the blacklist of tokens\r\n    /// @param _token the token address being queried\r\n    /// @return False if `_token` is in the blacklist and can't be taken out of\r\n    ///  the contract via the `escapeHatch()`\r\n    function isTokenEscapable(address _token) constant public returns (bool) {\r\n        return !escapeBlacklist[_token];\r\n    }\r\n\r\n    /// @notice The `escapeHatch()` should only be called as a last resort if a\r\n    /// security issue is uncovered or something unexpected happened\r\n    /// @param _token to transfer, use 0x0 for ether\r\n    function escapeHatch(address _token) public onlyEscapeHatchCallerOrOwner {   \r\n        require(escapeBlacklist[_token]==false);\r\n\r\n        uint256 balance;\r\n\r\n        /// @dev Logic for ether\r\n        if (_token == 0x0) {\r\n            balance = this.balance;\r\n            escapeHatchDestination.transfer(balance);\r\n            EscapeHatchCalled(_token, balance);\r\n            return;\r\n        }\r\n        /// @dev Logic for tokens\r\n        ERC20 token = ERC20(_token);\r\n        balance = token.balanceOf(this);\r\n        require(token.transfer(escapeHatchDestination, balance));\r\n        EscapeHatchCalled(_token, balance);\r\n    }\r\n\r\n    /// @notice Changes the address assigned to call `escapeHatch()`\r\n    /// @param _newEscapeHatchCaller The address of a trusted account or\r\n    ///  contract to call `escapeHatch()` to send the value in this contract to\r\n    function changeHatchEscapeCaller(address _newEscapeHatchCaller) public onlyEscapeHatchCallerOrOwner {\r\n        escapeHatchCaller = _newEscapeHatchCaller;\r\n    }\r\n\r\n    event EscapeHatchBlackistedToken(address token);\r\n    event EscapeHatchCalled(address token, uint amount);\r\n}\r\n\r\n// Copyright (C) 2018 Alon Bukai This program is free software: you \r\n// can redistribute it and/or modify it under the terms of the GNU General \r\n// Public License as published by the Free Software Foundation, version. \r\n// This program is distributed in the hope that it will be useful, \r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\r\n// or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for\r\n// more details. You should have received a copy of the GNU General Public\r\n// License along with this program. If not, see http://www.gnu.org/licenses/\r\n\r\n/// @notice `MultiSend` is a contract for sending multiple ETH/ERC20 Tokens to\r\n///  multiple addresses. In addition this contract can call multiple contracts\r\n///  with multiple amounts. There are also TightlyPacked functions which in\r\n///  some situations allow for gas savings. TightlyPacked is cheaper if you\r\n///  need to store input data and if amount is less than 12 bytes. Normal is\r\n///  cheaper if you don't need to store input data or if amounts are greater\r\n///  than 12 bytes. Supports deterministic deployment. As explained\r\n///  here: https://github.com/ethereum/EIPs/issues/777#issuecomment-356103528\r\ncontract MultiSend is Escapable {\r\n  \r\n    /// @dev Hardcoded escapeHatchCaller\r\n    address CALLER = 0x839395e20bbB182fa440d08F850E6c7A8f6F0780;\r\n    /// @dev Hardcoded escapeHatchDestination\r\n    address DESTINATION = 0x8ff920020c8ad673661c8117f2855c384758c572;\r\n\r\n    event MultiTransfer(\r\n        address indexed _from,\r\n        uint indexed _value,\r\n        address _to,\r\n        uint _amount\r\n    );\r\n\r\n    event MultiCall(\r\n        address indexed _from,\r\n        uint indexed _value,\r\n        address _to,\r\n        uint _amount\r\n    );\r\n\r\n    event MultiERC20Transfer(\r\n        address indexed _from,\r\n        uint indexed _value,\r\n        address _to,\r\n        uint _amount,\r\n        ERC20 _token\r\n    );\r\n\r\n    /// @notice Constructor using Escapable and Hardcoded values\r\n    function MultiSend() Escapable(CALLER, DESTINATION) public {}\r\n\r\n    /// @notice Send to multiple addresses using a byte32 array which\r\n    ///  includes the address and the amount.\r\n    ///  Addresses and amounts are stored in a packed bytes32 array\r\n    ///  Address is stored in the 20 most significant bytes\r\n    ///  The address is retrieved by bitshifting 96 bits to the right\r\n    ///  Amount is stored in the 12 least significant bytes\r\n    ///  The amount is retrieved by taking the 96 least significant bytes\r\n    ///  and converting them into an unsigned integer\r\n    ///  Payable\r\n    /// @param _addressesAndAmounts Bitwise packed array of addresses\r\n    ///  and amounts\r\n    function multiTransferTightlyPacked(bytes32[] _addressesAndAmounts)\r\n    payable public returns(bool)\r\n    {\r\n        uint startBalance = this.balance;\r\n        for (uint i = 0; i < _addressesAndAmounts.length; i++) {\r\n            address to = address(_addressesAndAmounts[i] >> 96);\r\n            uint amount = uint(uint96(_addressesAndAmounts[i]));\r\n            _safeTransfer(to, amount);\r\n            MultiTransfer(msg.sender, msg.value, to, amount);\r\n        }\r\n        require(startBalance - msg.value == this.balance);\r\n        return true;\r\n    }\r\n\r\n    /// @notice Send to multiple addresses using two arrays which\r\n    ///  includes the address and the amount.\r\n    ///  Payable\r\n    /// @param _addresses Array of addresses to send to\r\n    /// @param _amounts Array of amounts to send\r\n    function multiTransfer(address[] _addresses, uint[] _amounts)\r\n    payable public returns(bool)\r\n    {\r\n        uint startBalance = this.balance;\r\n        for (uint i = 0; i < _addresses.length; i++) {\r\n            _safeTransfer(_addresses[i], _amounts[i]);\r\n            MultiTransfer(msg.sender, msg.value, _addresses[i], _amounts[i]);\r\n        }\r\n        require(startBalance - msg.value == this.balance);\r\n        return true;\r\n    }\r\n\r\n    /// @notice Call to multiple contracts using a byte32 array which\r\n    ///  includes the contract address and the amount.\r\n    ///  Addresses and amounts are stored in a packed bytes32 array.\r\n    ///  Address is stored in the 20 most significant bytes.\r\n    ///  The address is retrieved by bitshifting 96 bits to the right\r\n    ///  Amount is stored in the 12 least significant bytes.\r\n    ///  The amount is retrieved by taking the 96 least significant bytes\r\n    ///  and converting them into an unsigned integer.\r\n    ///  Payable\r\n    /// @param _addressesAndAmounts Bitwise packed array of contract\r\n    ///  addresses and amounts\r\n    function multiCallTightlyPacked(bytes32[] _addressesAndAmounts)\r\n    payable public returns(bool)\r\n    {\r\n        uint startBalance = this.balance;\r\n        for (uint i = 0; i < _addressesAndAmounts.length; i++) {\r\n            address to = address(_addressesAndAmounts[i] >> 96);\r\n            uint amount = uint(uint96(_addressesAndAmounts[i]));\r\n            _safeCall(to, amount);\r\n            MultiCall(msg.sender, msg.value, to, amount);\r\n        }\r\n        require(startBalance - msg.value == this.balance);\r\n        return true;\r\n    }\r\n\r\n    /// @notice Call to multiple contracts using two arrays which\r\n    ///  includes the contract address and the amount.\r\n    /// @param _addresses Array of contract addresses to call\r\n    /// @param _amounts Array of amounts to send\r\n    function multiCall(address[] _addresses, uint[] _amounts)\r\n    payable public returns(bool)\r\n    {\r\n        uint startBalance = this.balance;\r\n        for (uint i = 0; i < _addresses.length; i++) {\r\n            _safeCall(_addresses[i], _amounts[i]);\r\n            MultiCall(msg.sender, msg.value, _addresses[i], _amounts[i]);\r\n        }\r\n        require(startBalance - msg.value == this.balance);\r\n        return true;\r\n    }\r\n\r\n    /// @notice Send ERC20 tokens to multiple contracts \r\n    ///  using a byte32 array which includes the address and the amount.\r\n    ///  Addresses and amounts are stored in a packed bytes32 array.\r\n    ///  Address is stored in the 20 most significant bytes.\r\n    ///  The address is retrieved by bitshifting 96 bits to the right\r\n    ///  Amount is stored in the 12 least significant bytes.\r\n    ///  The amount is retrieved by taking the 96 least significant bytes\r\n    ///  and converting them into an unsigned integer.\r\n    /// @param _token The token to send\r\n    /// @param _addressesAndAmounts Bitwise packed array of addresses\r\n    ///  and token amounts\r\n    function multiERC20TransferTightlyPacked\r\n    (\r\n        ERC20 _token,\r\n        bytes32[] _addressesAndAmounts\r\n    ) public\r\n    {\r\n        for (uint i = 0; i < _addressesAndAmounts.length; i++) {\r\n            address to = address(_addressesAndAmounts[i] >> 96);\r\n            uint amount = uint(uint96(_addressesAndAmounts[i]));\r\n            _safeERC20Transfer(_token, to, amount);\r\n            MultiERC20Transfer(msg.sender, msg.value, to, amount, _token);\r\n        }\r\n    }\r\n\r\n    /// @notice Send ERC20 tokens to multiple contracts\r\n    ///  using two arrays which includes the address and the amount.\r\n    /// @param _token The token to send\r\n    /// @param _addresses Array of addresses to send to\r\n    /// @param _amounts Array of token amounts to send\r\n    function multiERC20Transfer(\r\n        ERC20 _token,\r\n        address[] _addresses,\r\n        uint[] _amounts\r\n    ) public\r\n    {\r\n        for (uint i = 0; i < _addresses.length; i++) {\r\n            _safeERC20Transfer(_token, _addresses[i], _amounts[i]);\r\n            MultiERC20Transfer(\r\n                msg.sender,\r\n                msg.value,\r\n                _addresses[i],\r\n                _amounts[i],\r\n                _token\r\n            );\r\n        }\r\n    }\r\n\r\n    /// @notice `_safeTransfer` is used internally when transfer funds safely.\r\n    function _safeTransfer(address _to, uint _amount) internal {\r\n        require(_to != 0);\r\n        _to.transfer(_amount);\r\n    }\r\n\r\n    /// @notice `_safeCall` is used internally when call a contract safely.\r\n    function _safeCall(address _to, uint _amount) internal {\r\n        require(_to != 0);\r\n        require(_to.call.value(_amount)());\r\n    }\r\n\r\n    /// @notice `_safeERC20Transfer` is used internally when\r\n    ///  transfer a quantity of ERC20 tokens.\r\n    function _safeERC20Transfer(ERC20 _token, address _to, uint _amount)\r\n    internal\r\n    {\r\n        require(_to != 0);\r\n        require(_token.transferFrom(msg.sender, _to, _amount));\r\n    }\r\n\r\n    /// @dev Default payable function to not allow sending to contract;\r\n    ///  remember this does not necesarily prevent the contract\r\n    ///  from accumulating funds.\r\n    function () public payable {\r\n        revert();\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_addresses\",\"type\":\"address[]\"},{\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"multiCall\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addresses\",\"type\":\"address[]\"},{\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"multiTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"escapeHatchCaller\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addressesAndAmounts\",\"type\":\"bytes32[]\"}],\"name\":\"multiTransferTightlyPacked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_addresses\",\"type\":\"address[]\"},{\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"multiERC20Transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_dac\",\"type\":\"address\"}],\"name\":\"removeOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwnerCandidate\",\"type\":\"address\"}],\"name\":\"proposeOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"isTokenEscapable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"escapeHatch\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addressesAndAmounts\",\"type\":\"bytes32[]\"}],\"name\":\"multiCallTightlyPacked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwnerCandidate\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newEscapeHatchCaller\",\"type\":\"address\"}],\"name\":\"changeHatchEscapeCaller\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"escapeHatchDestination\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_addressesAndAmounts\",\"type\":\"bytes32[]\"}],\"name\":\"multiERC20TransferTightlyPacked\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"MultiTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"MultiCall\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"MultiERC20Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"}],\"name\":\"EscapeHatchBlackistedToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EscapeHatchCalled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"by\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"OwnershipRemoved\",\"type\":\"event\"}]","ContractName":"MultiSend","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://6d3245535bbb40c1e4add63bf860eff7b68c54d29a16b40d2b9c0c16d94d7cd5"}]}