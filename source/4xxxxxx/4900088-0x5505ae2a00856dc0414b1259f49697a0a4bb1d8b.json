{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.16;\r\n\r\n/**\r\n * @title Controllable\r\n * @dev The Controllable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Controllable {\r\n    \r\n    address public owner;\r\n\r\n    /**\r\n    * @dev The Controllable constructor sets the original `owner` of the contract to the sender\r\n    * account.\r\n    */\r\n    function Controllable() public {\r\n        owner = msg.sender;\r\n    }\r\n    \r\n    /**\r\n    * @dev Throws if called by any account other than the owner.\r\n    */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    \r\n    /**\r\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n    * @param newOwner The address to transfer ownership to.\r\n    */\r\n    function transferOwnership(address newOwner) onlyOwner public {\r\n        require(newOwner != address(0));      \r\n        owner = newOwner;\r\n    }\r\n\r\n}\r\n\r\ncontract QudosTestToken is Controllable {\r\n    \r\n    uint256 public totalSupply;\r\n    mapping(address => uint256) balances;\r\n    mapping(address => mapping(address => uint256)) allowed;\r\n    \r\n    string public constant name = \"QudosTestToken\";\r\n    string public constant symbol = \"QTTK\";\r\n    uint32 public constant decimals = 12;\r\n\r\n    uint constant restrictedPercent = 25; //should never be set above 100\r\n    address constant restricted = 0xded730565f420e9d70b8Bc66cEf86E6a417BE82D;\r\n    uint constant start = 1509458400;\r\n    uint constant period = 87;\r\n    uint256 public constant hardcap = 30000000000 * 1 ether;\r\n    \r\n    bool public transferAllowed = false;\r\n    bool public mintingFinished = false;\r\n    \r\n    modifier whenTransferAllowed() {\r\n        if(msg.sender != owner){\r\n            require(transferAllowed);\r\n        }\r\n        _;\r\n    }\r\n\r\n    modifier saleIsOn() {\r\n        require(now > start && now < start + period * 1 days);\r\n        _;\r\n    }\r\n    \r\n    modifier canMint() {\r\n        require(!mintingFinished);\r\n        _;\r\n    }\r\n  \r\n    function transfer(address _to, uint256 _value) whenTransferAllowed public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[msg.sender]);\r\n        \r\n        balances[msg.sender] = balances[msg.sender] - _value;\r\n        balances[_to] = balances[_to] + _value;\r\n        //assert(balances[_to] >= _value); no need to check, since mint has limited hardcap\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function balanceOf(address _owner) constant public returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n    \r\n    function transferFrom(address _from, address _to, uint256 _value) whenTransferAllowed public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[_from]);\r\n        require(_value <= allowed[_from][msg.sender]);\r\n        \r\n        balances[_from] = balances[_from] - _value;\r\n        balances[_to] = balances[_to] + _value;\r\n        //assert(balances[_to] >= _value); no need to check, since mint has limited hardcap\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender] - _value;\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        //NOTE: To prevent attack vectors like the one discussed here: \r\n        //https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729,\r\n        //clients SHOULD make sure to create user interfaces in such a way \r\n        //that they set the allowance first to 0 before setting it to another value for the same spender. \r\n    \r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n   \r\n    function allowTransfer() onlyOwner public {\r\n        transferAllowed = true;\r\n    }\r\n    \r\n    function mint(address _to, uint256 _value) onlyOwner saleIsOn canMint public returns (bool) {\r\n        require(_to != address(0));\r\n        \r\n        uint restrictedTokens = _value * restrictedPercent / (100 - restrictedPercent);\r\n        uint _amount = _value + restrictedTokens;\r\n        assert(_amount >= _value);\r\n        \r\n        if(_amount + totalSupply <= hardcap){\r\n        \r\n            totalSupply = totalSupply + _amount;\r\n            \r\n            assert(totalSupply >= _amount);\r\n            \r\n            balances[msg.sender] = balances[msg.sender] + _amount;\r\n            assert(balances[msg.sender] >= _amount);\r\n            Mint(msg.sender, _amount);\r\n        \r\n            transfer(_to, _value);\r\n            transfer(restricted, restrictedTokens);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function finishMinting() onlyOwner public returns (bool) {\r\n        mintingFinished = true;\r\n        MintFinished();\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * @dev Burns a specific amount of tokens.\r\n     * @param _value The amount of token to be burned.\r\n     */\r\n    function burn(uint256 _value) public returns (bool) {\r\n        require(_value <= balances[msg.sender]);\r\n        // no need to require value <= totalSupply, since that would imply the\r\n        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\r\n        balances[msg.sender] = balances[msg.sender] - _value;\r\n        totalSupply = totalSupply - _value;\r\n        Burn(msg.sender, _value);\r\n        return true;\r\n    }\r\n    \r\n    function burnFrom(address _from, uint256 _value) public returns (bool success) {\r\n        require(_value <= balances[_from]);\r\n        require(_value <= allowed[_from][msg.sender]);\r\n        balances[_from] = balances[_from] - _value;\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender] - _value;\r\n        totalSupply = totalSupply - _value;\r\n        Burn(_from, _value);\r\n        return true;\r\n    }\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    event Mint(address indexed to, uint256 amount);\r\n\r\n    event MintFinished();\r\n\r\n    event Burn(address indexed burner, uint256 value);\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"Controllable","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://d2e9e35b2479ae4c6da02d7a88c6a84cc2f92a29a4e2528d4c80a4be37ff2b6e"}]}