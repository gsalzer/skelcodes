{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\ncontract SafeMath {\r\n\r\n    uint constant DAY_IN_SECONDS = 86400;\r\n    uint constant BASE = 1000000000000000000;\r\n    uint constant preIcoPrice = 3000;\r\n    uint constant icoPrice = 1500;\r\n\r\n    function mul(uint256 a, uint256 b) constant internal returns (uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) constant internal returns (uint256) {\r\n        assert(b != 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) constant internal returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) constant internal returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n\r\n    function divToMul(uint256 number, uint256 numerator, uint256 denominator) internal returns (uint256) {\r\n        return div(mul(number, numerator), denominator);\r\n    }\r\n\r\n    function mulToDiv(uint256 number, uint256 numerator, uint256 denominator) internal returns (uint256) {\r\n        return mul(div(number, numerator), denominator);\r\n    }\r\n\r\n\r\n    // ICO volume bonus calculation\r\n    function volumeBonus(uint256 etherValue) internal returns (uint256) {\r\n        if(etherValue >= 10000000000000000000000) return 55;  // +55% tokens\r\n        if(etherValue >=  5000000000000000000000) return 50;  // +50% tokens\r\n        if(etherValue >=  1000000000000000000000) return 45;  // +45% tokens\r\n        if(etherValue >=   200000000000000000000) return 40;  // +40% tokens\r\n        if(etherValue >=   100000000000000000000) return 35;  // +35% tokens\r\n        if(etherValue >=    50000000000000000000) return 30; // +30% tokens\r\n        if(etherValue >=    30000000000000000000) return 25;  // +25% tokens\r\n        if(etherValue >=    20000000000000000000) return 20;  // +20% tokens\r\n        if(etherValue >=    10000000000000000000) return 15;  // +15% tokens\r\n        if(etherValue >=     5000000000000000000) return 10;  // +10% tokens\r\n        if(etherValue >=     1000000000000000000) return 5;   // +5% tokens\r\n\r\n        return 0;\r\n    }\r\n\r\n    // date bonus calculation\r\n    function dateBonus(uint startIco, uint currentType, uint datetime) internal returns (uint256) {\r\n        if(currentType == 2){\r\n            // day from ICO start\r\n            uint daysFromStart = (datetime - startIco) / DAY_IN_SECONDS + 1;\r\n\r\n            if(daysFromStart == 1)  return 30; // +30% tokens\r\n            if(daysFromStart == 2)  return 29; // +29% tokens\r\n            if(daysFromStart == 3)  return 28; // +28% tokens\r\n            if(daysFromStart == 4)  return 27; // +27% tokens\r\n            if(daysFromStart == 5)  return 26; // +26% tokens\r\n            if(daysFromStart == 6)  return 25; // +25% tokens\r\n            if(daysFromStart == 7)  return 24; // +24% tokens\r\n            if(daysFromStart == 8)  return 23; // +23% tokens\r\n            if(daysFromStart == 9)  return 22; // +22% tokens\r\n            if(daysFromStart == 10) return 21; // +21% tokens\r\n            if(daysFromStart == 11) return 20; // +20% tokens\r\n            if(daysFromStart == 12) return 19; // +19% tokens\r\n            if(daysFromStart == 13) return 18; // +18% tokens\r\n            if(daysFromStart == 14) return 17; // +17% tokens\r\n            if(daysFromStart == 15) return 16; // +16% tokens\r\n            if(daysFromStart == 16) return 15; // +15% tokens\r\n            if(daysFromStart == 17) return 14; // +14% tokens\r\n            if(daysFromStart == 18) return 13; // +13% tokens\r\n            if(daysFromStart == 19) return 12; // +12% tokens\r\n            if(daysFromStart == 20) return 11; // +11% tokens\r\n            if(daysFromStart == 21) return 10; // +10% tokens\r\n            if(daysFromStart == 22) return 9;  // +9% tokens\r\n            if(daysFromStart == 23) return 8;  // +8% tokens\r\n            if(daysFromStart == 24) return 7;  // +7% tokens\r\n            if(daysFromStart == 25) return 6;  // +6% tokens\r\n            if(daysFromStart == 26) return 5;  // +5% tokens\r\n            if(daysFromStart == 27) return 4;  // +4% tokens\r\n            if(daysFromStart == 28) return 3;  // +3% tokens\r\n            if(daysFromStart == 29) return 2;  // +2% tokens\r\n            if(daysFromStart == 30) return 1;  // +1% tokens\r\n            if(daysFromStart == 31) return 1;  // +1% tokens\r\n            if(daysFromStart == 32) return 1;  // +1% tokens\r\n        }\r\n        if(currentType == 1){\r\n            /// day from PreSale start\r\n            uint daysFromPresaleStart = (datetime - startIco) / DAY_IN_SECONDS + 1;\r\n\r\n            if(daysFromPresaleStart == 1)  return 54;  // +54% tokens\r\n            if(daysFromPresaleStart == 2)  return 51;  // +51% tokens\r\n            if(daysFromPresaleStart == 3)  return 48;  // +48% tokens\r\n            if(daysFromPresaleStart == 4)  return 45;  // +45% tokens\r\n            if(daysFromPresaleStart == 5)  return 42;  // +42% tokens\r\n            if(daysFromPresaleStart == 6)  return 39;  // +39% tokens\r\n            if(daysFromPresaleStart == 7)  return 36;  // +36% tokens\r\n            if(daysFromPresaleStart == 8)  return 33;  // +33% tokens\r\n            if(daysFromPresaleStart == 9)  return 30;  // +30% tokens\r\n            if(daysFromPresaleStart == 10) return 27;  // +27% tokens\r\n            if(daysFromPresaleStart == 11) return 24;  // +24% tokens\r\n            if(daysFromPresaleStart == 12) return 21;  // +21% tokens\r\n            if(daysFromPresaleStart == 13) return 18;  // +18% tokens\r\n            if(daysFromPresaleStart == 14) return 15;  // +15% tokens\r\n            if(daysFromPresaleStart == 15) return 12;  // +12% tokens\r\n            if(daysFromPresaleStart == 16) return 9;   // +9% tokens\r\n            if(daysFromPresaleStart == 17) return 6;   // +6% tokens\r\n            if(daysFromPresaleStart == 18) return 4;   // +4% tokens\r\n            if(daysFromPresaleStart == 19) return 0;   // +0% tokens\r\n        }\r\n\r\n        // no discount\r\n        return 0;\r\n    }\r\n}\r\n\r\n\r\n/// Implements ERC 20 Token standard: https://github.com/ethereum/EIPs/issues/20\r\n/// @title Abstract token contract - Functions to be implemented by token contracts.\r\n\r\ncontract AbstractToken {\r\n    // This is not an abstract function, because solc won't recognize generated getter functions for public variables as functions\r\n    function totalSupply() constant returns (uint256) {}\r\n    function balanceOf(address owner) constant returns (uint256 balance);\r\n    function transfer(address to, uint256 value) returns (bool success);\r\n    function transferFrom(address from, address to, uint256 value) returns (bool success);\r\n    function approve(address spender, uint256 value) returns (bool success);\r\n    function allowance(address owner, address spender) constant returns (uint256 remaining);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event Issuance(address indexed to, uint256 value);\r\n}\r\n\r\ncontract StandardToken is AbstractToken {\r\n    /*\r\n     *  Data structures\r\n     */\r\n    mapping (address => uint256) balances;\r\n    mapping (address => bool) ownerAppended;\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n    uint256 public totalSupply;\r\n    address[] public owners;\r\n\r\n    /*\r\n     *  Read and write storage functions\r\n     */\r\n    /// @dev Transfers sender's tokens to a given address. Returns success.\r\n    /// @param _to Address of token receiver.\r\n    /// @param _value Number of tokens to transfer.\r\n    function transfer(address _to, uint256 _value) returns (bool success) {\r\n        if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\r\n            balances[msg.sender] -= _value;\r\n            balances[_to] += _value;\r\n            if(!ownerAppended[_to]) {\r\n                ownerAppended[_to] = true;\r\n                owners.push(_to);\r\n            }\r\n            Transfer(msg.sender, _to, _value);\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /// @dev Allows allowed third party to transfer tokens from one address to another. Returns success.\r\n    /// @param _from Address from where tokens are withdrawn.\r\n    /// @param _to Address to where tokens are sent.\r\n    /// @param _value Number of tokens to transfer.\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\r\n        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\r\n            balances[_to] += _value;\r\n            balances[_from] -= _value;\r\n            allowed[_from][msg.sender] -= _value;\r\n            if(!ownerAppended[_to]) {\r\n                ownerAppended[_to] = true;\r\n                owners.push(_to);\r\n            }\r\n            Transfer(_from, _to, _value);\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /// @dev Returns number of tokens owned by given address.\r\n    /// @param _owner Address of token owner.\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    /// @dev Sets approved amount of tokens for spender. Returns success.\r\n    /// @param _spender Address of allowed account.\r\n    /// @param _value Number of approved tokens.\r\n    function approve(address _spender, uint256 _value) returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /*\r\n     * Read storage functions\r\n     */\r\n    /// @dev Returns number of allowed tokens for given address.\r\n    /// @param _owner Address of token owner.\r\n    /// @param _spender Address of token spender.\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract VINNDTokenContract is StandardToken, SafeMath {\r\n    /*\r\n     * Token meta data\r\n     */\r\n    string public constant name = \"VINND\";\r\n    string public constant symbol = \"VIN\";\r\n    uint public constant decimals = 18;\r\n\r\n    // tottal supply\r\n\r\n    address public icoContract = 0x0;\r\n    /*\r\n     * Modifiers\r\n     */\r\n\r\n    modifier onlyIcoContract() {\r\n        // only ICO contract is allowed to proceed\r\n        require(msg.sender == icoContract);\r\n        _;\r\n    }\r\n\r\n    /*\r\n     * Contract functions\r\n     */\r\n\r\n    /// @dev Contract is needed in icoContract address\r\n    /// @param _icoContract Address of account which will be mint tokens\r\n    function VINNDTokenContract(address _icoContract) payable{\r\n        assert(_icoContract != 0x0);\r\n        icoContract = _icoContract;\r\n    }\r\n\r\n    /// @dev Burns tokens from address. It's can be applied by account with address this.icoContract\r\n    /// @param _from Address of account, from which will be burned tokens\r\n    /// @param _value Amount of tokens, that will be burned\r\n    function burnTokens(address _from, uint _value) onlyIcoContract {\r\n        assert(_from != 0x0);\r\n        require(_value > 0);\r\n\r\n        balances[_from] = sub(balances[_from], _value);\r\n    }\r\n\r\n    /// @dev Adds tokens to address. It's can be applied by account with address this.icoContract\r\n    /// @param _to Address of account to which the tokens will pass\r\n    /// @param _value Amount of tokens\r\n    function emitTokens(address _to, uint _value) onlyIcoContract {\r\n        assert(_to != 0x0);\r\n        require(_value > 0);\r\n\r\n        balances[_to] = add(balances[_to], _value);\r\n\r\n        if(!ownerAppended[_to]) {\r\n            ownerAppended[_to] = true;\r\n            owners.push(_to);\r\n        }\r\n\r\n    }\r\n\r\n    function getOwner(uint index) constant returns (address, uint256) {\r\n        return (owners[index], balances[owners[index]]);\r\n    }\r\n\r\n    function getOwnerCount() constant returns (uint) {\r\n        return owners.length;\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract VINContract is SafeMath {\r\n    /*\r\n     * ICO meta data\r\n     */\r\n    VINNDTokenContract public VINToken;\r\n\r\n    enum Stage{\r\n    Pause,\r\n    Init,\r\n    Running,\r\n    Stopped\r\n    }\r\n\r\n    enum Type{\r\n    PRESALE,\r\n    ICO\r\n    }\r\n\r\n    // Initializing current steps\r\n    Stage public currentStage = Stage.Pause;\r\n    Type public currentType = Type.PRESALE;\r\n\r\n    // Setting constant dates UTC\r\n\r\n    // 11.12.2017 00:00:00\r\n    uint public startPresaleDate = 1512950400;\r\n    // 29.12.2017 23:59:59\r\n    uint public endPresaleDate = 1514591999;\r\n    // 18.01.2018 00:00:00\r\n    uint public startICODate = 1516233600;\r\n    // 18.02.2018 23:59:59\r\n    uint public endICODate = 1518998399;\r\n\r\n    // Address of manager\r\n    address public icoOwner;\r\n\r\n    // Addresses of founders and bountyOwner\r\n    address public founder;\r\n    address public bountyOwner;\r\n\r\n    // 888.888.888 VIN all tokens\r\n    uint public constant totalCap   = 888888888000000000000000000;\r\n    // 534.444.444 ico cap\r\n    uint public constant ICOCap     = 534444444000000000000000000;\r\n    //  28.888.888 presale cap\r\n    uint public constant presaleCap =  28888888000000000000000000;\r\n\r\n    //  14.444.444 VIN is total bounty tokens\r\n    uint public constant totalBountyTokens = 14444444000000000000000000;\r\n\r\n    // 1 ETH = 3000 VIN\r\n    uint public constant PRICE = 3000;\r\n    // 1 ETH = 1500 VIN\r\n    uint public constant ICOPRICE = 1500;\r\n\r\n    // 2018.02.20 00:00 UTC\r\n    // founders' reward time\r\n    uint public foundersRewardTime = 1519084800;\r\n\r\n    // Amount of sold tokens on ICO\r\n    uint public totalSoldOnICO = 0;\r\n    // Amount of issued tokens on pre-ICO\r\n    uint public totalSoldOnPresale = 0;\r\n\r\n\r\n    // ? Tokens already sent Founder\r\n    bool public sentTokensToFounders = false;\r\n\r\n    // Boolean set founder\r\n    bool public setFounder = false;\r\n    bool public setBounty = false;\r\n\r\n    uint public totalEther = 0;\r\n\r\n    /*\r\n     * Modifiers\r\n     */\r\n\r\n    modifier whenInitialized() {\r\n        // only when contract is initialized\r\n        require(currentStage >= Stage.Init);\r\n        _;\r\n    }\r\n\r\n    modifier onlyManager() {\r\n        // only ICO manager can do this action\r\n        require(msg.sender == icoOwner);\r\n        _;\r\n    }\r\n\r\n    modifier onStageRunning() {\r\n        // Checks, if ICO is running and has not been stopped\r\n        require(currentStage == Stage.Running);\r\n        _;\r\n    }\r\n\r\n    modifier onStageStopped() {\r\n        // Checks if ICO was stopped or deadline is reached\r\n        require(currentStage == Stage.Stopped);\r\n        _;\r\n    }\r\n\r\n    modifier checkType() {\r\n        require(currentType == Type.ICO || currentType == Type.PRESALE);\r\n        _;\r\n    }\r\n\r\n    modifier checkDateTime(){\r\n        if(currentType == Type.PRESALE){\r\n            require(startPresaleDate < now && now < endPresaleDate);\r\n        }else{\r\n            require(startICODate < now && now < endICODate);\r\n        }\r\n        _;\r\n    }\r\n\r\n    /// @dev Constructor of ICO\r\n    function VINContract() payable{\r\n        VINToken = new VINNDTokenContract(this);\r\n        icoOwner = msg.sender;\r\n    }\r\n\r\n    /// @dev Initialises addresses of founders, bountyOwner.\r\n    /// Initialises balances of tokens owner\r\n    /// @param _founder Address of founder\r\n    /// @param _bounty Address of bounty\r\n    function initialize(address _founder, address _bounty) onlyManager {\r\n        assert(currentStage != Stage.Init);\r\n        assert(_founder != 0x0);\r\n        assert(_bounty != 0x0);\r\n        require(!setFounder);\r\n        require(!setBounty);\r\n\r\n        founder = _founder;\r\n        bountyOwner = _bounty;\r\n\r\n        VINToken.emitTokens(_bounty, totalBountyTokens);\r\n\r\n        setFounder = true;\r\n        setBounty = true;\r\n\r\n        currentStage = Stage.Init;\r\n    }\r\n\r\n    /// @dev Sets new type\r\n    /// @param _type Value of new type\r\n    function setType(Type _type) public onlyManager onStageStopped{\r\n        currentType = _type;\r\n    }\r\n\r\n    /// @dev Sets new stage\r\n    /// @param _stage Value of new stage\r\n    function setStage(Stage _stage) public onlyManager{\r\n        currentStage = _stage;\r\n    }\r\n\r\n\r\n    /// @dev Sets new owner. Only manager can do it\r\n    /// @param _newicoOwner Address of new ICO manager\r\n    function setNewOwner(address _newicoOwner) onlyManager {\r\n        assert(_newicoOwner != 0x0);\r\n        icoOwner = _newicoOwner;\r\n    }\r\n\r\n    /// @dev Buy quantity of tokens depending on the amount of sent ethers.\r\n    /// @param _buyer Address of account which will receive tokens\r\n    function buyTokens(address _buyer, uint datetime, uint _value) private {\r\n        assert(_buyer != 0x0);\r\n        require(_value > 0);\r\n\r\n        uint dateBonusPercent = 0;\r\n        uint tokensToEmit = 0;\r\n\r\n        //calculate date bonus and set emitTokenPrice\r\n        if(currentType == Type.PRESALE){\r\n            tokensToEmit = _value * PRICE;\r\n            dateBonusPercent = dateBonus(startPresaleDate, 1, datetime);\r\n        }\r\n        else{\r\n            tokensToEmit = _value * ICOPRICE;\r\n            dateBonusPercent = dateBonus(startICODate, 2, datetime);\r\n        }\r\n\r\n        //calculate volume bonus\r\n        uint volumeBonusPercent = volumeBonus(_value);\r\n\r\n        //total bonus tokens\r\n        uint totalBonusPercent = dateBonusPercent + volumeBonusPercent;\r\n\r\n        if(totalBonusPercent > 0){\r\n            tokensToEmit =  tokensToEmit + divToMul(tokensToEmit, totalBonusPercent, 100);\r\n        }\r\n\r\n        if(currentType == Type.PRESALE){\r\n            require(add(totalSoldOnPresale, tokensToEmit) <= presaleCap);\r\n            totalSoldOnPresale = add(totalSoldOnPresale, tokensToEmit);\r\n        }\r\n        else{\r\n            require(add(totalSoldOnICO, tokensToEmit) <= ICOCap);\r\n            totalSoldOnICO = add(totalSoldOnICO, tokensToEmit);\r\n        }\r\n\r\n        //emit tokens to token holder\r\n        VINToken.emitTokens(_buyer, tokensToEmit);\r\n\r\n        totalEther = add(totalEther, _value);\r\n    }\r\n\r\n    /// @dev Fall back function ~50k-100k gas\r\n    function () payable onStageRunning checkType checkDateTime{\r\n        buyTokens(msg.sender, now, msg.value);\r\n    }\r\n\r\n    /// @dev Burn tokens from accounts. Only manager can do it\r\n    /// @param _from Address of account\r\n    function burnTokens(address _from, uint _value) onlyManager{\r\n        VINToken.burnTokens(_from, _value);\r\n    }\r\n\r\n\r\n    /// @dev Send tokens to founders. Can be sent only after VINToken.rewardTime\r\n    function sendTokensToFounders() onlyManager whenInitialized {\r\n        require(!sentTokensToFounders && now >= foundersRewardTime);\r\n\r\n        //Calculate total tokens sold on pre-ICO and ICO\r\n        uint tokensSold = add(totalSoldOnICO, totalSoldOnPresale);\r\n        uint totalTokenToSold = add(ICOCap, presaleCap);\r\n\r\n        uint x = mul(mul(tokensSold, totalCap), 35);\r\n        uint y = mul(100, totalTokenToSold);\r\n        uint result = div(x, y);\r\n\r\n        VINToken.emitTokens(founder, result);\r\n\r\n        sentTokensToFounders = true;\r\n    }\r\n\r\n    /// @dev Send tokens to other wallets\r\n    /// @param _buyer Address of account which will receive tokens\r\n    /// @param _datetime datetime of transaction\r\n    /// @param _ether ether value\r\n    function emitTokensToOtherWallet(address _buyer, uint _datetime, uint _ether) onlyManager checkType{\r\n        assert(_buyer != 0x0);\r\n        buyTokens(_buyer, _datetime, _ether * 10 ** 18);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"currentType\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_type\",\"type\":\"uint8\"}],\"name\":\"setType\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnTokens\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSoldOnICO\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"sendTokensToFounders\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"VINToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalBountyTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_founder\",\"type\":\"address\"},{\"name\":\"_bounty\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"founder\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endPresaleDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentStage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presaleCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"setFounder\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sentTokensToFounders\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSoldOnPresale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"setBounty\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"foundersRewardTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRICE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ICOPRICE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ICOCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bountyOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endICODate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalEther\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startICODate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_buyer\",\"type\":\"address\"},{\"name\":\"_datetime\",\"type\":\"uint256\"},{\"name\":\"_ether\",\"type\":\"uint256\"}],\"name\":\"emitTokensToOtherWallet\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_stage\",\"type\":\"uint8\"}],\"name\":\"setStage\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startPresaleDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newicoOwner\",\"type\":\"address\"}],\"name\":\"setNewOwner\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":true,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"}]","ContractName":"VINContract","CompilerVersion":"v0.4.13+commit.fb4cb1a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://6ce2d4da6e7a31b3be76f3464c380ba38dc6d915cfd109385e195d3bf84e434d"}]}