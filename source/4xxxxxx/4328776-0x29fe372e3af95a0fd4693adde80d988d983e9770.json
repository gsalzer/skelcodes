{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13;\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\ncontract ERC23ContractInterface {\r\n  function tokenFallback(address _from, uint256 _value, bytes _data) external;\r\n}\r\n\r\ncontract ERC23Contract is ERC23ContractInterface {\r\n\r\n /**\r\n  * @dev Reject all ERC23 compatible tokens\r\n  * param _from address that is transferring the tokens\r\n  * param _value amount of specified token\r\n  * param _data bytes data passed from the caller\r\n  */\r\n  function tokenFallback(address /*_from*/, uint256 /*_value*/, bytes /*_data*/) external {\r\n    revert();\r\n  }\r\n\r\n}\r\n\r\ncontract EthMatch is Ownable, ERC23Contract {\r\n  using SafeMath for uint256;\r\n\r\n  uint256 public constant MASTERY_THRESHOLD = 10 finney; // new master allowed if balance falls below this (10 finney == .01 ETH)\r\n  uint256 public constant PAYOUT_PCT = 95; // % to winner (rest to creator)\r\n\r\n  uint256 public startTime; // start timestamp when matches may begin\r\n  address public master; // current Matchmaster\r\n  uint256 public gasReq; // require same gas every time in maker()\r\n\r\n  event MatchmakerPrevails(address indexed matchmaster, address indexed matchmaker, uint256 sent, uint256 actual, uint256 winnings);\r\n  event MatchmasterPrevails(address indexed matchmaster, address indexed matchmaker, uint256 sent, uint256 actual, uint256 winnings);\r\n  event MatchmasterTakeover(address indexed matchmasterPrev, address indexed matchmasterNew, uint256 balanceNew);\r\n\r\n  // can be funded at init if desired\r\n  function EthMatch(uint256 _startTime) public payable {\r\n    require(_startTime >= now);\r\n\r\n    startTime = _startTime;\r\n    master = msg.sender; // initial\r\n    gasReq = 42000;\r\n  }\r\n\r\n  // ensure proper state\r\n  modifier isValid(address _addr) {\r\n    require(_addr != 0x0);\r\n    require(!Lib.isContract(_addr)); // ban contracts\r\n    require(now >= startTime);\r\n\r\n   _;\r\n  }\r\n\r\n  // fallback function\r\n  // make a match\r\n  function () public payable {\r\n    maker(msg.sender);\r\n  }\r\n\r\n  // make a match (and specify payout address)\r\n  function maker(address _addr) isValid(_addr) public payable {\r\n    require(msg.gas >= gasReq); // require same gas every time (overages auto-returned)\r\n\r\n    uint256 weiPaid = msg.value;\r\n    require(weiPaid > 0);\r\n\r\n    uint256 balPrev = this.balance.sub(weiPaid);\r\n\r\n    if (balPrev == weiPaid) {\r\n      // maker wins\r\n      uint256 winnings = weiPaid.add(balPrev.div(2));\r\n      pay(_addr, winnings);\r\n      MatchmakerPrevails(master, _addr, weiPaid, balPrev, winnings);\r\n    } else {\r\n      // master wins\r\n      pay(master, weiPaid);\r\n      MatchmasterPrevails(master, _addr, weiPaid, balPrev, weiPaid);\r\n    }\r\n  }\r\n\r\n  // send proceeds\r\n  function pay(address _addr, uint256 _amount) internal {\r\n    if (_amount == 0) {\r\n      return; // amount actually could be 0, e.g. initial funding or if balance is totally drained\r\n    }\r\n\r\n    uint256 payout = _amount.mul(PAYOUT_PCT).div(100);\r\n    _addr.transfer(payout);\r\n\r\n    uint256 remainder = _amount.sub(payout);\r\n    owner.transfer(remainder);\r\n  }\r\n\r\n  // become the new master\r\n  function mastery() public payable {\r\n    mastery(msg.sender);\r\n  }\r\n\r\n  // become the new master (and specify payout address)\r\n  function mastery(address _addr) isValid(_addr) public payable {\r\n    uint256 weiPaid = msg.value;\r\n    require(weiPaid >= MASTERY_THRESHOLD);\r\n\r\n    uint256 balPrev = this.balance.sub(weiPaid);\r\n    require(balPrev < MASTERY_THRESHOLD);\r\n\r\n    pay(master, balPrev);\r\n\r\n    MatchmasterTakeover(master, _addr, weiPaid); // called before new master set\r\n\r\n    master = _addr; // must be set after event logged\r\n  }\r\n\r\n  // in case it ever needs to be updated for future Ethereum releases, etc\r\n  function setGasReq(uint256 _gasReq) onlyOwner external {\r\n    gasReq = _gasReq;\r\n  }\r\n\r\n  // initial funding\r\n  function fund() onlyOwner external payable {\r\n    require(now < startTime); // otherwise can just call mastery()\r\n\r\n    // it is possible that funds can be forced in via selfdestruct, so\r\n    // just ensure balance is enough, at least after receiving this call (msg.value)\r\n    require(this.balance >= MASTERY_THRESHOLD);\r\n  }\r\n\r\n  // explicit balance getter\r\n  function getBalance() external constant returns (uint256) {\r\n    return this.balance;\r\n  }\r\n\r\n}\r\n\r\nlibrary Lib {\r\n  // whether given address is a contract or not based on bytecode\r\n  function isContract(address addr) internal constant returns (bool) {\r\n    uint size;\r\n    assembly {\r\n      size := extcodesize(addr)\r\n    }\r\n    return (size > 1); // testing returned size \"1\" for non-contract accounts, so we're using that.\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gasReq\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"mastery\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"mastery\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_gasReq\",\"type\":\"uint256\"}],\"name\":\"setGasReq\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PAYOUT_PCT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MASTERY_THRESHOLD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"tokenFallback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"maker\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"master\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_startTime\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"matchmaster\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"matchmaker\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"sent\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"actual\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"winnings\",\"type\":\"uint256\"}],\"name\":\"MatchmakerPrevails\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"matchmaster\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"matchmaker\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"sent\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"actual\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"winnings\",\"type\":\"uint256\"}],\"name\":\"MatchmasterPrevails\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"matchmasterPrev\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"matchmasterNew\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"balanceNew\",\"type\":\"uint256\"}],\"name\":\"MatchmasterTakeover\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"EthMatch","CompilerVersion":"v0.4.17+commit.bdeb9e52","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000059d26280","Library":"","SwarmSource":"bzzr://537eec6218e3d29df08fd05f1eec77d92c2c0d2a3b4c91bc068577897447cbd3"}]}