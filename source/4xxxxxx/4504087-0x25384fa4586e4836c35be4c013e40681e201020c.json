{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13;\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner {\r\n    if (newOwner != address(0)) {\r\n      owner = newOwner;\r\n    }\r\n  }\r\n\r\n}\r\n\r\ncontract DemoUSDPricedCrowdsale is Ownable {\r\n\r\n        using SafeMath for uint256;\r\n\r\n        /* the number of tokens already sold through this contract*/\r\n        uint256 public tokensSold = 0;\r\n\r\n        /* How many wei of funding we have raised */\r\n        uint256 public weiRaised = 0;\r\n        uint256 public centsRaised = 0;\r\n\r\n        uint256 public centsPerEther = 30400;\r\n        uint256 public bonusPercent = 0;\r\n        uint256 public centsPerToken = 30;\r\n        uint256 public debugLatestPurchaseCentsValue;\r\n\r\n        address public wallet;\r\n\r\n        ERC20Basic tokenContract;\r\n\r\n        event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n\r\n        event EventCentsPerEtherChanged(uint256 _oldcentsPerEther, uint256 _centsPerEther);\r\n        event EventCentsPerTokenChanged(uint256 _oldcentsPerEther, uint256 _centsPerEther);\r\n        event EventBonusPercentChanged(uint256 _oldcentsPerEther, uint256 _centsPerEther);\r\n        event ChangeWallet(address _oldWallet, address _newWallet);\r\n\r\n\r\n        function DemoUSDPricedCrowdsale(\r\n                uint256 _centsPerEther,\r\n                uint256 _centsPerToken,\r\n                address _tokenContract,\r\n                address _wallet\r\n        ) {\r\n                require(_centsPerEther > 0);\r\n                require(_centsPerToken > 0);\r\n                require(_tokenContract != 0x0);\r\n                require(_wallet != 0x0);\r\n\r\n                centsPerEther = _centsPerEther;\r\n                centsPerToken = _centsPerToken;\r\n                tokenContract = ERC20Basic(_tokenContract);\r\n                wallet = _wallet;\r\n        }\r\n\r\n        function setCentsPerEther(uint256 _centsPerEther) onlyOwner {\r\n                require(_centsPerEther > 0);\r\n                uint256 oldCentsPerEther = centsPerEther;\r\n                centsPerEther = _centsPerEther;\r\n                EventCentsPerEtherChanged(oldCentsPerEther, centsPerEther);\r\n        }\r\n\r\n        function setCentsPerToken(uint256 _centsPerToken) onlyOwner {\r\n                require(_centsPerToken > 0);\r\n                uint256 oldCentsPerToken = centsPerToken;\r\n                centsPerToken = _centsPerToken;\r\n                EventCentsPerTokenChanged(oldCentsPerToken, centsPerToken);\r\n        }\r\n\r\n        function setBonusPercent(uint256 _bonusPercent) onlyOwner {\r\n                require(_bonusPercent > 0);\r\n                uint256 oldBonusPercent = _bonusPercent;\r\n                bonusPercent = _bonusPercent;\r\n                EventBonusPercentChanged(oldBonusPercent, bonusPercent);\r\n        }\r\n\r\n        function changeWallet(address _wallet) onlyOwner {\r\n                require(_wallet != 0x0);\r\n                address oldWallet = _wallet;\r\n                wallet = _wallet;\r\n                ChangeWallet(oldWallet, wallet);\r\n        }\r\n\r\n        // fallback function can be used to buy tokens\r\n        function () payable {\r\n                buyTokens(msg.sender);\r\n        }\r\n\r\n        // low level token purchase function\r\n        function buyTokens(address beneficiary) payable {\r\n                require(beneficiary != 0x0);\r\n                require(msg.value != 0);\r\n\r\n                uint256 weiAmount = msg.value;\r\n                uint256 centsAmount = weiAmount.mul(centsPerEther).div(1E18);\r\n                debugLatestPurchaseCentsValue = centsAmount;\r\n                // calculate token amount to be created\r\n\r\n                uint256 tokens = centsAmount.div(centsPerToken).mul(getBonusCoefficient()).div(100);\r\n\r\n                // update state\r\n                weiRaised = weiRaised.add(weiAmount);\r\n                weiRaised = centsAmount.add(weiAmount);\r\n\r\n                tokenContract.transfer(beneficiary, tokens);\r\n                forwardFunds();\r\n        }\r\n\r\n        function getBonusCoefficient() constant returns (uint256) {\r\n                return 100 + bonusPercent;\r\n        }\r\n\r\n        function forwardFunds() internal {\r\n                wallet.transfer(msg.value);\r\n        }\r\n\r\n        function withdrawTokens(address where) onlyOwner {\r\n                tokenContract.transfer(where, tokenContract.balanceOf(this));\r\n        }\r\n\r\n}\r\n\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) constant returns (uint256);\r\n  function transfer(address to, uint256 value) returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"centsPerEther\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_centsPerToken\",\"type\":\"uint256\"}],\"name\":\"setCentsPerToken\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"where\",\"type\":\"address\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"centsRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_bonusPercent\",\"type\":\"uint256\"}],\"name\":\"setBonusPercent\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"centsPerToken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"changeWallet\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"debugLatestPurchaseCentsValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBonusCoefficient\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_centsPerEther\",\"type\":\"uint256\"}],\"name\":\"setCentsPerEther\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_centsPerEther\",\"type\":\"uint256\"},{\"name\":\"_centsPerToken\",\"type\":\"uint256\"},{\"name\":\"_tokenContract\",\"type\":\"address\"},{\"name\":\"_wallet\",\"type\":\"address\"}],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_oldcentsPerEther\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_centsPerEther\",\"type\":\"uint256\"}],\"name\":\"EventCentsPerEtherChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_oldcentsPerEther\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_centsPerEther\",\"type\":\"uint256\"}],\"name\":\"EventCentsPerTokenChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_oldcentsPerEther\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_centsPerEther\",\"type\":\"uint256\"}],\"name\":\"EventBonusPercentChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_oldWallet\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_newWallet\",\"type\":\"address\"}],\"name\":\"ChangeWallet\",\"type\":\"event\"}]","ContractName":"DemoUSDPricedCrowdsale","CompilerVersion":"v0.4.15+commit.bbb8e64f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000493e0000000000000000000000000000000000000000000000000000000000000001e00000000000000000000000037651ec8545eadbd4de028b97c2ec3965867c0af000000000000000000000000d7e321b8e8cc014abe2bbb2857bec4bec03973ee","Library":"","SwarmSource":"bzzr://6de3dff22c40e30257668309bb03d61a2042e0e3683a63be8802eb9bf48dc0bd"}]}