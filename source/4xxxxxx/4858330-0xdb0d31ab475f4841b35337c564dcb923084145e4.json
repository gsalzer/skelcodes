{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.16;\r\n\r\ncontract Ownable \r\n{\r\n\taddress m_addrOwner;\r\n\r\n\tfunction Ownable() public\t\r\n\t{ \r\n\t\tm_addrOwner = msg.sender;\r\n\t}\r\n\r\n\tmodifier onlyOwner() \r\n\t{\r\n\t\tif (msg.sender != m_addrOwner) \r\n\t\t{\r\n\t\t\trevert();\r\n\t\t}\r\n    \t_;\r\n\t}\r\n\r\n\t// ---\r\n\r\n\tfunction transferOwnership(address newOwner) public onlyOwner \r\n\t{\r\n\t\tm_addrOwner = newOwner;\r\n\t}\r\n\r\n\t// ---\r\n\r\n\tfunction isOwner() public constant returns (bool bIsOwner) { return (m_addrOwner == msg.sender); }\r\n\r\n}\r\n\r\n// ------\r\n\r\ncontract IcoMultiWallet is Ownable\r\n{\r\n\tstruct Account\r\n\t{\r\n\t\tuint nTotalAmount;\r\n\t\tuint nFirstDepositDate;\r\n\t\tuint nDailyPrice;\r\n\t}\r\n\t\r\n\tmapping (address => Account) m_mapAccounts;\r\n\tuint m_nDailyPrice = 1 finney;  // Campaign has to pay it daily. Price can increase only for new campaigns.\r\n\r\n\tuint m_nTotalDeposited = 0;\r\n\t\r\n    // --- Events ---\r\n\r\n\tevent eventPaid(address indexed addrDepositFrom, uint nAmount, uint nTotalAmountOnAccount, uint nTotalAmount);\r\n\t\r\n\t// --- Functions ---\r\n\r\n\tfunction IcoMultiWallet() public\r\n\t{\r\n\t}\r\n\r\n\t// ---\r\n\t\r\n\tfunction() public payable \r\n\t{ \r\n\t\tdepositFunds();\r\n\t}\t\r\n\t\r\n\t// ---\r\n\t\r\n\tfunction depositFunds() public payable\r\n\t{\r\n\t\tif(msg.value < m_nDailyPrice)\r\n\t\t\trevert();\r\n\r\n\t\tm_nTotalDeposited += msg.value;\r\n\t\t\r\n\t\tif(m_mapAccounts[msg.sender].nTotalAmount == 0)\r\n\t\t{\r\n\t\t\tAccount memory newAccount;\r\n\t\t\tnewAccount.nTotalAmount = msg.value;\r\n\t\t\tnewAccount.nFirstDepositDate = now;\r\n\t\t\tnewAccount.nDailyPrice = m_nDailyPrice;\r\n\t\t\t\r\n\t\t\tm_mapAccounts[msg.sender] = newAccount;\r\n\t\t}\r\n\t\telse\r\n\t\t\tm_mapAccounts[msg.sender].nTotalAmount += msg.value;\r\n        \r\n\t\teventPaid(msg.sender, msg.value, m_mapAccounts[msg.sender].nTotalAmount, m_nTotalDeposited);\r\n\t}\r\n\t\r\n\t// ---\r\n\t\r\n\tfunction withdrawOwnersMoney() public onlyOwner\r\n\t{\r\n\t\tm_addrOwner.transfer(this.balance);\r\n\t}\r\n\t\r\n\t// ---\r\n\t\r\n    function setDailyPrice(uint nDailyPrice) public onlyOwner { m_nDailyPrice = nDailyPrice; }\r\n\r\n\t// ---\r\n\t\r\n\tfunction getBalance(address addr) public constant returns (uint) { return m_mapAccounts[addr].nTotalAmount; }\r\n\tfunction getCampaignDailyPrice(address addr) public constant returns (uint) { return m_mapAccounts[addr].nDailyPrice; }\r\n\tfunction getDailyPrice() public constant returns (uint) { return m_nDailyPrice; }\r\n\t\r\n\tfunction getUnusedBalance(address addr) public constant returns (int) \r\n\t{ \r\n\t\tif(m_mapAccounts[addr].nTotalAmount == 0)\r\n\t\t\treturn 0;\r\n\t\tuint nDays = (now - m_mapAccounts[addr].nFirstDepositDate) / 86400;\r\n\t\treturn (int)(m_mapAccounts[addr].nTotalAmount - nDays * m_nDailyPrice); \r\n\t}\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"withdrawOwnersMoney\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"nDailyPrice\",\"type\":\"uint256\"}],\"name\":\"setDailyPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"bIsOwner\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getUnusedBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDailyPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getCampaignDailyPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"depositFunds\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addrDepositFrom\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"nAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"nTotalAmountOnAccount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"nTotalAmount\",\"type\":\"uint256\"}],\"name\":\"eventPaid\",\"type\":\"event\"}]","ContractName":"IcoMultiWallet","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://96a1b60b9bfe7a8d413a9815a775f5126bf689733f031cfcf8c060b671f88dcb"}]}