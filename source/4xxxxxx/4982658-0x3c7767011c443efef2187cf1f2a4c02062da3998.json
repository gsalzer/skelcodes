{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\ncontract CratePreSale is Ownable {\r\n    \r\n    // ------ STATE ------ \r\n    uint256 constant public MAX_CRATES_TO_SELL = 3900; // Max no. of robot crates to ever be sold\r\n    uint256 constant public PRESALE_END_TIMESTAMP = 1518699600; // End date for the presale - no purchases can be made after this date - Midnight 16 Feb 2018 UTC\r\n\r\n    uint256 public appreciationRateWei = 400000000000000;  \r\n    uint256 public currentPrice = appreciationRateWei; // initalise the price to the appreciation rate\r\n    uint32 public cratesSold;\r\n    \r\n    mapping (address => uint32) public userCrateCount; // store how many crates a user has bought\r\n    mapping (address => uint[]) public userToRobots; // store the DNA/robot information of bought crates\r\n    \r\n    // ------ EVENTS ------ \r\n    event LogCratePurchase( \r\n        address indexed _from,\r\n        uint256 _value,\r\n        uint32 _quantity\r\n        );\r\n\r\n\r\n    // ------ FUNCTIONS ------ \r\n    function getPrice() view public returns (uint256) {\r\n        return currentPrice;\r\n    }\r\n\r\n    function getRobotsForUser( address _user ) view public returns (uint[]) {\r\n        return userToRobots[_user];\r\n    }\r\n\r\n    function incrementPrice() private { \r\n        // Decrease the rate of increase of the crate price\r\n        // as the crates become more expensive\r\n        // to avoid runaway pricing\r\n        // (halving rate of increase at 0.1 ETH, 0.2 ETH, 0.3 ETH).\r\n        if ( currentPrice == 100000000000000000 ) {\r\n            appreciationRateWei = 200000000000000;\r\n        } else if ( currentPrice == 200000000000000000) {\r\n            appreciationRateWei = 100000000000000;\r\n        } else if (currentPrice == 300000000000000000) {\r\n            appreciationRateWei = 50000000000000;\r\n        }\r\n        currentPrice += appreciationRateWei;\r\n    }\r\n\r\n    function purchaseCrate() payable public {\r\n        require(now < PRESALE_END_TIMESTAMP); // Check presale is still ongoing\r\n        require(cratesSold < MAX_CRATES_TO_SELL); // Check max crates sold is less than hard limit\r\n        require(msg.value >= currentPrice); // Check buyer sent sufficient funds to purchase\r\n        if (msg.value > currentPrice) { //overpaid, return excess\r\n            msg.sender.transfer(msg.value-currentPrice);\r\n        }\r\n        userCrateCount[msg.sender] += 1;\r\n        cratesSold++;\r\n        incrementPrice();\r\n        userToRobots[msg.sender].push(genRandom());\r\n        LogCratePurchase(msg.sender, msg.value, 1);\r\n\r\n    }\r\n\r\n    // ROBOT FORMAT\r\n    // [3 digits - RARITY][2 digits - PART] * 4 (4 parts)\r\n    // e.g. [140][20][218][04]\r\n    // Presale exclusives are encoded by extending the range of the part by 1\r\n    // ie lamborghini will be the 23rd body. If 23 (or a multiple of it) is generated, a lamborghini will be awarded.\r\n    //RARITY INFORMATION:\r\n    //All parts are of equal rarity, except for presale exclusives.\r\n    //A three-digit modifier precedes each part, denoting whether it is of type\r\n    //normal, rare shadow, or legendary gold.\r\n    //Shadow has a 10% chance of applying for the presale (2% in game)\r\n    //Gold has a 5% chance of applying for the presale (1% in game).\r\n    function genRandom() private view returns (uint) {\r\n        uint rand = uint(keccak256(block.blockhash(block.number-1)));\r\n        return uint(rand % (10 ** 20));\r\n    }\r\n\r\n    //owner only withdrawal function for the presale\r\n    function withdraw() onlyOwner public {\r\n        owner.transfer(this.balance);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"cratesSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getRobotsForUser\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_CRATES_TO_SELL\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRESALE_END_TIMESTAMP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"userCrateCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"purchaseCrate\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userToRobots\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"appreciationRateWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_quantity\",\"type\":\"uint32\"}],\"name\":\"LogCratePurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"CratePreSale","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://d1a1f2796ea04d4f50d4aeb8d3da0173bc2dcea80e9d5c12eae8e17580b4fe90"}]}