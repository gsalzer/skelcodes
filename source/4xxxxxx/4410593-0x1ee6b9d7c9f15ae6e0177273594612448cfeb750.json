{"status":"1","message":"OK","result":[{"SourceCode":"// SIMPLECOIN TOKEN\r\n// simplecoin.co\r\n//\r\n// SMP token is a virtual token, governed by ERC20-compatible Ethereum Smart Contract and secured by Ethereum Blockchain\r\n// The official website is https://www.simplecoin.co\r\n//\r\n// The uints are all in wei and WEI tokens (*10^-18)\r\n\r\n// The contract code itself, as usual, is at the end, after all the connected libraries\r\n\r\npragma solidity ^0.4.11;\r\n\r\n/**\r\n * Math operations with safety checks\r\n */\r\n\r\nlibrary SafeMath {\r\n  function mul(uint a, uint b) internal returns (uint) {\r\n    uint c = a * b;\r\n    validate(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint a, uint b) internal returns (uint) {\r\n    validate(b > 0);\r\n    uint c = a / b;\r\n    validate(a == b * c + a % b);\r\n    return c;\r\n  }\r\n\r\n  function sub(uint a, uint b) internal returns (uint) {\r\n    validate(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint a, uint b) internal returns (uint) {\r\n    uint c = a + b;\r\n    validate(c >= a);\r\n    return c;\r\n  }\r\n\r\n  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n    return a < b ? a : b;\r\n  }\r\n\r\n  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    return a < b ? a : b;\r\n  }\r\n\r\n  function validate(bool validation) internal {\r\n    if (!validation) {\r\n      revert();\r\n    }\r\n  }\r\n}\r\n\r\n\r\n/*\r\n * ERC20Basic\r\n * Simpler version of ERC20 interface\r\n * see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20Basic {\r\n  uint public totalSupply;\r\n  function balanceOf(address who) constant returns (uint);\r\n  function transfer(address to, uint value);\r\n  event Transfer(address indexed from, address indexed to, uint value);\r\n}\r\n\r\n\r\n/*\r\n * Basic token\r\n * Basic version of StandardToken, with no allowances\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint;\r\n\r\n  mapping(address => uint) balances;\r\n\r\n  /*\r\n   * Fix for the ERC20 short address attack  \r\n   */\r\n  modifier onlyPayloadSize(uint size) {\r\n     if(msg.data.length < size + 4) {\r\n       revert();\r\n     }\r\n     _;\r\n  }\r\n\r\n  function transfer(address _to, uint _value) onlyPayloadSize(2 * 32) {\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n  }\r\n\r\n  function balanceOf(address _owner) constant returns (uint balance) {\r\n    return balances[_owner];\r\n  }\r\n  \r\n}\r\n\r\n/*\r\n * ERC20 interface\r\n * see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) constant returns (uint);\r\n  function transferFrom(address from, address to, uint value);\r\n  function approve(address spender, uint value);\r\n  event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\n/**\r\n * Standard ERC20 token\r\n *\r\n * https://github.com/ethereum/EIPs/issues/20\r\n * Based on code by FirstBlood:\r\n * https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is BasicToken, ERC20 {\r\n\r\n  mapping (address => mapping (address => uint)) allowed;\r\n\r\n  function transferFrom(address _from, address _to, uint _value) {\r\n    var _allowance = allowed[_from][msg.sender];\r\n\r\n    // Check is not needed because sub(_allowance, _value) will already revert() if this condition is not met\r\n    // if (value > allowance) revert();\r\n\r\n    balances[_to] = balances[_to].add(_value);\r\n    balances[_from] = balances[_from].sub(_value);\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    Transfer(_from, _to, _value);\r\n  }\r\n\r\n  function approve(address _spender, uint _value) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n  }\r\n\r\n  function allowance(address _owner, address _spender) constant returns (uint remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n}\r\n\r\n\r\n/*\r\n * Ownable\r\n *\r\n * Base contract with an owner.\r\n * Provides onlyOwner modifier, which prevents function from running if it is called by anyone other than the owner.\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    if (msg.sender != owner) {\r\n      revert();\r\n    }\r\n    _;\r\n  }\r\n\r\n  function transferOwnership(address newOwner) onlyOwner {\r\n    if (newOwner != address(0)) {\r\n      owner = newOwner;\r\n    }\r\n  }\r\n\r\n}\r\n\r\n\r\ncontract SIMPLECOIN is StandardToken, Ownable {\r\n    using SafeMath for uint;\r\n\r\n    //--------------   Info for ERC20 explorers  -----------------//\r\n    string public name = \"SIMPLECOIN\";\r\n    string public symbol = \"SIM\";\r\n    uint public decimals = 18;\r\n\r\n    //---------------------   Constants   ------------------------//\r\n    uint public constant WEI = 1000000000000000000;\r\n    uint public constant INITIAL_SUPPLY = 500000000 * WEI; // 500 mln SMP. Impossible to mint more than this\r\n    uint public constant PRICE = 600;\r\n\r\n    uint public constant _ONE = 1 * WEI;\r\n    uint public constant _FIFTY = 50 * WEI;\r\n    uint public constant _HUNDRED = 100 * WEI;\r\n    uint public constant _FIVEHUNDRED = 500 * WEI;\r\n    uint public constant _THOUSAND = 1000 * WEI;\r\n    uint public constant _FIVETHOUSAND = 5000 * WEI;\r\n\r\n    address public TEAM_WALLET = 0x08FB9bF8645c5f1B2540436C6352dA23eE843b50;\r\n    address public ICO_ADDRESS = 0x1c01C01C01C01c01C01c01c01c01C01c01c01c01;\r\n\r\n    //----------------------  Variables  -------------------------//\r\n    uint public current_supply = 0; // Holding the number of all the coins in existence\r\n    uint public ico_starting_supply = 0; // How many WEI tokens were available for sale at the beginning of the ICO\r\n\r\n    //-------------   Flags describing ICO stages   --------------//\r\n    bool public preMarketingSharesDistributed = false; // Prevents accidental re-distribution of shares\r\n    // private venture pre ico\r\n    bool public isPreICOPrivateOpened = false;\r\n    bool public isPreICOPrivateClosed = false;\r\n    // public pre ico\r\n    bool public isPreICOPublicOpened = false;\r\n    bool public isPreICOPublicClosed = false;\r\n    // public ico\r\n    bool public isICOOpened = false;\r\n    bool public isICOClosed = false;\r\n\r\n    //----------------------   Events  ---------------------------//\r\n    event PreICOPrivateOpened();\r\n    event PreICOPrivateClosed();\r\n    event PreICOPublicOpened();\r\n    event PreICOPublicClosed();\r\n    event ICOOpened();\r\n    event ICOClosed();\r\n    event SupplyChanged(uint supply, uint old_supply);\r\n    event SMPAcquired(address account, uint amount_in_wei, uint amount_in_rkc);\r\n\r\n    // *\r\n\r\n    // Constructor\r\n    function SIMPLECOIN() {\r\n        // Some percentage of the tokens is already reserved by early employees and investors\r\n        // Here we're initializing their balances\r\n        distributeMarketingShares();\r\n    }\r\n\r\n    // Sending ether directly to the contract invokes buy() and assigns tokens to the sender\r\n    function () payable {\r\n        buy();\r\n    }\r\n\r\n    // *\r\n\r\n    // Buy token by sending ether here\r\n    //\r\n    // You can also send the ether directly to the contract address\r\n    function buy() payable {\r\n        if (msg.value == 0) {\r\n            revert();\r\n        }\r\n\r\n        // prevent from buying before starting preico or ico\r\n        if (!isPreICOPrivateOpened && !isPreICOPublicOpened && !isICOOpened) {\r\n            revert();\r\n        }\r\n\r\n        if (isICOClosed) {\r\n            revert();\r\n        }\r\n\r\n        // Deciding how many tokens can be bought with the ether received\r\n        uint tokens = getSMPTokensAmountPerEthInternal(msg.value);\r\n\r\n        // Just in case\r\n        if (tokens > balances[ICO_ADDRESS]) { \r\n            revert();\r\n        }\r\n\r\n        // Transfer from the ICO pool\r\n        balances[ICO_ADDRESS] = balances[ICO_ADDRESS].sub(tokens); // if not enough, will revert()\r\n        balances[msg.sender] = balances[msg.sender].add(tokens);\r\n\r\n        // Broadcasting the buying event\r\n        SMPAcquired(msg.sender, msg.value, tokens);\r\n    }\r\n\r\n    // *\r\n\r\n    // Functions for the contract owner\r\n    function openPreICOPrivate() onlyOwner {\r\n        if (isPreICOPrivateOpened) revert();\r\n        if (isPreICOPrivateClosed) revert();\r\n\r\n        if (isPreICOPublicOpened) revert();\r\n        if (isPreICOPublicClosed) revert();\r\n\r\n        if (isICOOpened) revert();\r\n        if (isICOClosed) revert();        \r\n\r\n        isPreICOPrivateOpened = true;\r\n\r\n        PreICOPrivateOpened();\r\n    }\r\n\r\n    function closePreICOPrivate() onlyOwner {\r\n        if (!isPreICOPrivateOpened) revert();\r\n        if (isPreICOPrivateClosed) revert();\r\n\r\n        if (isPreICOPublicOpened) revert();\r\n        if (isPreICOPublicClosed) revert();\r\n\r\n        if (isICOOpened) revert();\r\n        if (isICOClosed) revert();\r\n\r\n        isPreICOPrivateOpened = false;\r\n        isPreICOPrivateClosed = true;\r\n\r\n        PreICOPrivateClosed();\r\n    }\r\n\r\n    function openPreICOPublic() onlyOwner {\r\n        if (isPreICOPrivateOpened) revert();\r\n        if (!isPreICOPrivateClosed) revert();\r\n\r\n        if (isPreICOPublicOpened) revert();\r\n        if (isPreICOPublicClosed) revert();\r\n\r\n        if (isICOOpened) revert();\r\n        if (isICOClosed) revert();        \r\n\r\n        isPreICOPublicOpened = true;\r\n\r\n        PreICOPublicOpened();\r\n    }\r\n\r\n    function closePreICOPublic() onlyOwner {\r\n        if (isPreICOPrivateOpened) revert();\r\n        if (!isPreICOPrivateClosed) revert();\r\n\r\n        if (!isPreICOPublicOpened) revert();\r\n        if (isPreICOPublicClosed) revert();\r\n\r\n        if (isICOOpened) revert();\r\n        if (isICOClosed) revert();\r\n\r\n        isPreICOPublicOpened = false;\r\n        isPreICOPublicClosed = true;\r\n\r\n        PreICOPublicClosed();\r\n    }\r\n\r\n    function openICO() onlyOwner {\r\n        if (isPreICOPrivateOpened) revert();\r\n        if (!isPreICOPrivateClosed) revert();\r\n\r\n        if (isPreICOPublicOpened) revert();\r\n        if (!isPreICOPublicClosed) revert();\r\n\r\n        if (isICOOpened) revert();\r\n        if (isICOClosed) revert();\r\n\r\n        isICOOpened = true;\r\n\r\n        ICOOpened();\r\n    }\r\n\r\n    function closeICO() onlyOwner {\r\n        if (isPreICOPrivateOpened) revert();\r\n        if (!isPreICOPrivateClosed) revert();\r\n\r\n        if (isPreICOPublicOpened) revert();\r\n        if (!isPreICOPublicClosed) revert();\r\n\r\n        if (!isICOOpened) revert();\r\n        if (isICOClosed) revert();\r\n\r\n        isICOOpened = false;\r\n        isICOClosed = true;\r\n\r\n        balances[ICO_ADDRESS] = 0;\r\n\r\n        ICOClosed();\r\n    }\r\n\r\n    function pullEtherFromContractAfterPreICOPrivate() onlyOwner {       \r\n        if (isPreICOPrivateOpened) revert();\r\n        if (!isPreICOPrivateClosed) revert();\r\n\r\n        if (isPreICOPublicOpened) revert();\r\n        if (isPreICOPublicClosed) revert();\r\n\r\n        if (isICOOpened) revert();\r\n        if (isICOClosed) revert();\r\n\r\n        if (!TEAM_WALLET.send(this.balance)) {\r\n            revert();\r\n        }\r\n    }\r\n\r\n    function pullEtherFromContractAfterPreICOPublic() onlyOwner {       \r\n        if (isPreICOPrivateOpened) revert();\r\n        if (!isPreICOPrivateClosed) revert();\r\n\r\n        if (isPreICOPublicOpened) revert();\r\n        if (!isPreICOPublicClosed) revert();\r\n\r\n        if (isICOOpened) revert();\r\n        if (isICOClosed) revert();\r\n\r\n        if (!TEAM_WALLET.send(this.balance)) {\r\n            revert();\r\n        }\r\n    }\r\n\r\n    function pullEtherFromContractAfterICO() onlyOwner {\r\n        if (isPreICOPrivateOpened) revert();\r\n        if (!isPreICOPrivateClosed) revert();\r\n\r\n        if (isPreICOPublicOpened) revert();\r\n        if (!isPreICOPublicClosed) revert();\r\n\r\n        if (isICOOpened) revert();\r\n        if (!isICOClosed) revert();\r\n\r\n        if (!TEAM_WALLET.send(this.balance)) {\r\n            revert();\r\n        }\r\n    }\r\n\r\n    // *\r\n\r\n    // Some percentage of the tokens is already reserved for marketing\r\n    function distributeMarketingShares() onlyOwner {\r\n        // Making it impossible to call this function twice\r\n        if (preMarketingSharesDistributed) {\r\n            revert();\r\n        }\r\n\r\n        preMarketingSharesDistributed = true;\r\n\r\n        // Values are in WEI tokens\r\n        balances[0xAc5C2414dae4ADB07D82d40dE71B4Bc5E2b417fd] = 100000000 * WEI; // referral\r\n        balances[0x603D3e11E88dD9aDdc4D9AbE205C7C02e9e13483] = 20000000 * WEI; // social marketing\r\n        \r\n        current_supply = (100000000 + 20000000) * WEI;\r\n\r\n        // Sending the rest to ICO pool\r\n        balances[ICO_ADDRESS] = INITIAL_SUPPLY.sub(current_supply);\r\n\r\n        // Initializing the supply variables\r\n        ico_starting_supply = balances[ICO_ADDRESS];\r\n        current_supply = INITIAL_SUPPLY;\r\n        SupplyChanged(0, current_supply);\r\n    }\r\n\r\n    // *\r\n\r\n    // Some useful getters (although you can just query the public variables)\r\n\r\n    function getPriceSMPTokensPerWei() public constant returns (uint result) {\r\n        return PRICE;\r\n    }\r\n\r\n    /* function getSMPTokensAmountPerEthInternal(uint value) public payable returns (uint result) {     \r\n        return value * PRICE;\r\n    } */\r\n\r\n    function getSMPTokensAmountPerEthInternal(uint value) public payable returns (uint result) {    \r\n        if (isPreICOPrivateOpened) {\r\n            if (value >= _FIFTY && value < _FIVEHUNDRED) {\r\n                return (value + (value * 35) / 100) * PRICE;\r\n            }\r\n\r\n            if (value >= _FIVEHUNDRED && value < _THOUSAND) {\r\n                return (value + (value * 40) / 100) * PRICE;\r\n            }\r\n\r\n            if (value >= _THOUSAND && value < _FIVETHOUSAND) {\r\n                return (value + (value * 60) / 100) * PRICE;\r\n            }\r\n\r\n            if (value >= _FIVETHOUSAND) {\r\n                return (value + value) * PRICE;\r\n            }\r\n        }\r\n\r\n        if (isPreICOPublicOpened) {\r\n            if (value >= _ONE && value < _HUNDRED) {\r\n                return (value + (value * 20) / 100) * PRICE;\r\n            }\r\n\r\n            if (value >= _HUNDRED && value < _FIVEHUNDRED) {\r\n                return (value + (value * 30) / 100) * PRICE;\r\n            }\r\n\r\n            if (value >= _FIVEHUNDRED && value < _THOUSAND) {\r\n                return (value + (value * 40) / 100) * PRICE;\r\n            }\r\n\r\n            if (value >= _THOUSAND) {\r\n                return (value + (value * 50) / 100) * PRICE;\r\n            }\r\n        }\r\n\r\n        return value * PRICE;\r\n    }\r\n\r\n    function getSMPTokensAmountPerWei(uint value) public constant returns (uint result) {\r\n        return getSMPTokensAmountPerEthInternal(value);\r\n    }\r\n    function getSupply() public constant returns (uint result) {\r\n        return current_supply;\r\n    }\r\n    function getSMPTokensLeftForICO() public constant returns (uint result) {\r\n        return balances[ICO_ADDRESS];\r\n    }\r\n    function getSMPTokensBoughtInICO() public constant returns (uint result) {\r\n        return ico_starting_supply - getSMPTokensLeftForICO();\r\n    }\r\n    function getBalance(address addr) public constant returns (uint balance) {\r\n        return balances[addr];\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint _value) {\r\n        super.transferFrom(_from, _to, _value);\r\n    }\r\n    function transfer(address _to, uint _value) onlyPayloadSize(2 * 32) {\r\n        super.transfer(_to, _value);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isPreICOPublicOpened\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"getSMPTokensAmountPerEthInternal\",\"outputs\":[{\"name\":\"result\",\"type\":\"uint256\"}],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_FIVETHOUSAND\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_ONE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isPreICOPrivateClosed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TEAM_WALLET\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isICOOpened\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_FIFTY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INITIAL_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"openPreICOPublic\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_THOUSAND\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"closeICO\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"distributeMarketingShares\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isPreICOPrivateOpened\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"current_supply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSupply\",\"outputs\":[{\"name\":\"result\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preMarketingSharesDistributed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isPreICOPublicClosed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pullEtherFromContractAfterPreICOPrivate\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSMPTokensLeftForICO\",\"outputs\":[{\"name\":\"result\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRICE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_FIVEHUNDRED\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pullEtherFromContractAfterICO\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"openICO\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"WEI\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isICOClosed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"closePreICOPublic\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"closePreICOPrivate\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"getSMPTokensAmountPerWei\",\"outputs\":[{\"name\":\"result\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"openPreICOPrivate\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_HUNDRED\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pullEtherFromContractAfterPreICOPublic\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ico_starting_supply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSMPTokensBoughtInICO\",\"outputs\":[{\"name\":\"result\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ICO_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPriceSMPTokensPerWei\",\"outputs\":[{\"name\":\"result\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"PreICOPrivateOpened\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"PreICOPrivateClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"PreICOPublicOpened\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"PreICOPublicClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ICOOpened\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ICOClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"supply\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"old_supply\",\"type\":\"uint256\"}],\"name\":\"SupplyChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount_in_wei\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount_in_rkc\",\"type\":\"uint256\"}],\"name\":\"SMPAcquired\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"SIMPLECOIN","CompilerVersion":"v0.4.15+commit.bbb8e64f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://ab4cd5a6a5c69731d59d89501e84802ea030e1dd1ea0afa9daf8a856a722a887"}]}