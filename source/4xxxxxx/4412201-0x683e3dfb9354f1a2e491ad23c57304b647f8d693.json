{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.15;\r\n\r\ncontract admined {\r\n    address public admin;\r\n\t\r\n    function admined(){\r\n        admin = msg.sender;\r\n    }\r\n\r\n    modifier onlyAdmin(){\r\n        // if(msg.sender != admin) throw;\r\n        require(msg.sender == admin);\r\n        _;\r\n    }\r\n\r\n    function transferAdminship(address newAdmin) onlyAdmin {\r\n        admin = newAdmin;\r\n    }\r\n\r\n}\r\n\r\ncontract BitsaleERC20 {\r\n\r\n    mapping (address => uint256) public balanceOf;\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n    // balanceOf[address] = 5;\r\n    string public standard = \"BitsaleERC20 v1.0\";\r\n    string public name = \"BitsaleERC20\";\r\n    string public symbol = \"BSL\";\r\n    uint8 public decimals = 8; \r\n    uint256 public totalSupply = 1200000000 ;\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function BitsaleERC20(){\r\n        balanceOf[msg.sender] = 1200000000;\r\n    \r\n    }\r\n\r\n    function transfer(address _to, uint256 _value){\r\n        // if(balanceOf[msg.sender] < _value) throw;\r\n        // if(balanceOf[_to] + _value < balanceOf[_to]) throw;\r\n        require(balanceOf[msg.sender] >= _value);\r\n        require(balanceOf[_to] + _value >= balanceOf[_to]);\r\n        //if(admin)\r\n\r\n        balanceOf[msg.sender] -= _value;\r\n        balanceOf[_to] += _value;\r\n        Transfer(msg.sender, _to, _value);\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) returns (bool success){\r\n        allowance[msg.sender][_spender] = _value;\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success){\r\n        // if(balanceOf[_from] < _value) throw;\r\n        require(balanceOf[_from] >= _value);\r\n        // if(balanceOf[_to] + _value < balanceOf[_to]) throw;\r\n        require(balanceOf[_to] + _value >= balanceOf[_to]);\r\n        // if(_value > allowance[_from][msg.sender]) throw;\r\n        require(_value < allowance[_from][msg.sender]);\r\n        balanceOf[_from] -= _value;\r\n        balanceOf[_to] += _value;\r\n        allowance[_from][msg.sender] -= _value;\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n\r\n    }\r\n}\r\n\r\ncontract Bitsale is admined, BitsaleERC20{\r\n\r\n    uint256 minimumBalanceForAccounts = 5 finney;\r\n    uint256 public sellPrice;\r\n    uint256 public buyPrice;\r\n    mapping (address => bool) public frozenAccount;\r\n\r\n    event FrozenFund(address target, bool frozen);\r\n\r\n    function Bitsale() BitsaleERC20 (){\r\n        admin = msg.sender;\r\n        balanceOf[admin] = 1200000000;\r\n        totalSupply = 1200000000;    \r\n    }\r\n\r\n    function mintToken(address target, uint256 mintedAmount) onlyAdmin{\r\n        balanceOf[target] += mintedAmount;\r\n        totalSupply += mintedAmount;\r\n        Transfer(0, this, mintedAmount);\r\n        Transfer(this, target, mintedAmount);\r\n    }\r\n\r\n    function freezeAccount(address target, bool freeze) onlyAdmin{\r\n        frozenAccount[target] = freeze;\r\n        FrozenFund(target, freeze);\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value){\r\n        if(msg.sender.balance < minimumBalanceForAccounts)\r\n        sell((minimumBalanceForAccounts - msg.sender.balance)/sellPrice);\r\n\r\n        // if(frozenAccount[msg.sender]) throw;\r\n        require(!frozenAccount[msg.sender]);\r\n        // if(balanceOf[msg.sender] < _value) throw;\r\n        require(balanceOf[msg.sender] >= _value);\r\n        // if(balanceOf[_to] + _value < balanceOf[_to]) throw;\r\n        require(balanceOf[_to] + _value >= balanceOf[_to]);\r\n        //if(admin)\r\n\r\n        balanceOf[msg.sender] -= _value;\r\n        balanceOf[_to] += _value;\r\n        Transfer(msg.sender, _to, _value);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success){\r\n        // if(frozenAccount[_from]) throw;\r\n        require(!frozenAccount[_from]);\r\n        // if(balanceOf[_from] < _value) throw;\r\n        require(balanceOf[_from] >= _value);\r\n        // if(balanceOf[_to] + _value < balanceOf[_to]) throw;\r\n        require(balanceOf[_to] + _value >= balanceOf[_to]);\r\n        // if(_value > allowance[_from][msg.sender]) throw;\r\n        require(_value <= allowance[_from][msg.sender]);\r\n        balanceOf[_from] -= _value;\r\n        balanceOf[_to] += _value;\r\n        allowance[_from][msg.sender] -= _value;\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n\r\n    }\r\n\r\n    function setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyAdmin{\r\n        sellPrice = newSellPrice;\r\n        buyPrice = newBuyPrice;\r\n    }\r\n\r\n    function buy() payable {\r\n        uint256 amount = (msg.value/(1 ether)) / buyPrice;\r\n        // if(balanceOf[this] < amount) throw;\r\n        require(balanceOf[this] >= amount);\r\n        balanceOf[msg.sender] += amount;\r\n        balanceOf[this] -= amount;\r\n        Transfer(this, msg.sender, amount);\r\n    }\r\n\r\n    function sell(uint256 amount){\r\n        // if(balanceOf[msg.sender] < amount) throw;\r\n        require(balanceOf[msg.sender] >= amount);\r\n        balanceOf[this] +=amount;\r\n        balanceOf[msg.sender] -= amount;\r\n        if(!msg.sender.send(amount * sellPrice * 1 ether)){\r\n            revert();\r\n        } else {\r\n            Transfer(msg.sender, this, amount);\r\n        }\r\n    }\r\n\r\n    function giveBlockreward(){\r\n        balanceOf[block.coinbase] += 1;\r\n    }\r\n\r\n    bytes32 public currentChallenge;\r\n    uint public timeOfLastProof;\r\n    uint public difficulty = 10**32;\r\n\r\n    function proofOfWork(uint nonce){\r\n        bytes8 n = bytes8(sha3(nonce, currentChallenge));\r\n\r\n        // if(n < bytes8(difficulty)) throw;\r\n        require(n >= bytes8(difficulty));\r\n        uint timeSinceLastBlock = (now - timeOfLastProof);\r\n        // if(timeSinceLastBlock < 5 seconds) throw;\r\n        require(timeSinceLastBlock >= 5 seconds);\r\n\r\n        balanceOf[msg.sender] += timeSinceLastBlock / 60 seconds;\r\n        difficulty = difficulty * 10 minutes / timeOfLastProof + 1;\r\n        timeOfLastProof = now;\r\n        currentChallenge = sha3(nonce, currentChallenge, block.blockhash(block.number-1));\r\n     }\r\n\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"newSellPrice\",\"type\":\"uint256\"},{\"name\":\"newBuyPrice\",\"type\":\"uint256\"}],\"name\":\"setPrices\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"difficulty\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentChallenge\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"standard\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"transferAdminship\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"proofOfWork\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"mintedAmount\",\"type\":\"uint256\"}],\"name\":\"mintToken\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"timeOfLastProof\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"giveBlockreward\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"freeze\",\"type\":\"bool\"}],\"name\":\"freezeAccount\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"FrozenFund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"Bitsale","CompilerVersion":"v0.4.15+commit.bbb8e64f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://2d00f0bb0a48fb49ca267bb314cec27c4b4570f80604f27f0b4b837dd3aab29f"}]}