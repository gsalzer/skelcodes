{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.13;\r\ncontract Burnable {\r\n\r\n    event LogBurned(address indexed burner, uint256 indexed amount);\r\n\r\n    function burn(uint256 amount) returns (bool burned);\r\n}\r\ncontract Mintable {\r\n\r\n    function mint(address to, uint256 amount) returns (bool minted);\r\n\r\n    function mintLocked(address to, uint256 amount) returns (bool minted);\r\n}\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public constant returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\r\n    assert(token.transfer(to, value));\r\n  }\r\n\r\n  function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\r\n    assert(token.transferFrom(from, to, value));\r\n  }\r\n\r\n  function safeApprove(ERC20 token, address spender, uint256 value) internal {\r\n    assert(token.approve(spender, value));\r\n  }\r\n}\r\n/**\r\n * @title TokenTimelock\r\n * @dev TokenTimelock is a token holder contract that will allow a\r\n * beneficiary to extract the tokens after a given release time\r\n */\r\ncontract TokenTimelock {\r\n    using SafeERC20 for ERC20Basic;\r\n\r\n    // ERC20 basic token contract being held\r\n    ERC20Basic public token;\r\n\r\n    // beneficiary of tokens after they are released\r\n    address public beneficiary;\r\n\r\n    // timestamp when token release is enabled\r\n    uint256 public releaseTime;\r\n\r\n    function TokenTimelock(ERC20Basic _token, address _beneficiary, uint256 _releaseTime) {\r\n        //require(_token != address(0));\r\n        //require(_beneficiary != address(0));\r\n        require(_releaseTime > now);\r\n\r\n        token = _token;\r\n        beneficiary = _beneficiary;\r\n        releaseTime = _releaseTime;\r\n    }\r\n\r\n    /**\r\n    * @notice Transfers tokens held by timelock to beneficiary.\r\n    */\r\n    function release() public {\r\n        require(now >= releaseTime);\r\n\r\n        uint256 amount = token.balanceOf(this);\r\n        require(amount > 0);\r\n\r\n        token.safeTransfer(beneficiary, amount);\r\n    }\r\n}\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n/**\r\n* @title TokenVesting\r\n* @dev A token holder contract that can release its token balance gradually like a typical vesting\r\n* scheme, with a cliff and vesting period. Optionally revocable by the owner.\r\n*/\r\ncontract TokenVesting is Ownable {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for ERC20Basic;\r\n\r\n    event LogVestingCreated(address indexed beneficiary, uint256 startTime, uint256 indexed cliff,\r\n        uint256 indexed duration, bool revocable);\r\n    event LogVestedTokensReleased(address indexed token, uint256 indexed released);\r\n    event LogVestingRevoked(address indexed token, uint256 indexed refunded);\r\n\r\n    // Beneficiary of tokens after they are released\r\n    address public beneficiary;\r\n\r\n    // The duration in seconds of the cliff in which tokens will begin to vest\r\n    uint256 public cliff;\r\n    \r\n    // When the vesting starts as timestamp in seconds from Unix epoch\r\n    uint256 public startTime;\r\n    \r\n    // The duration in seconds of the period in which the tokens will vest\r\n    uint256 public duration;\r\n\r\n    // Flag indicating whether the vesting is revocable or not\r\n    bool public revocable;\r\n\r\n    mapping (address => uint256) public released;\r\n    mapping (address => bool) public revoked;\r\n\r\n    /**\r\n    * @dev Creates a vesting contract that vests its balance of any ERC20 token to the\r\n    * _beneficiary, gradually in a linear fashion until _startTime + _duration. By then all\r\n    * of the balance will have vested.\r\n    * @param _beneficiary The address of the beneficiary to whom vested tokens are transferred\r\n    * @param _startTime When the vesting starts as timestamp in seconds from Unix epoch\r\n    * @param _cliff The duration in seconds of the cliff in which tokens will begin to vest\r\n    * @param _duration The duration in seconds of the period in which the tokens will vest\r\n    * @param _revocable Flag indicating whether the vesting is revocable or not\r\n    */\r\n    function TokenVesting(address _beneficiary, uint256 _startTime, uint256 _cliff, uint256 _duration, bool _revocable) public {\r\n        require(_beneficiary != address(0));\r\n        require(_startTime >= now);\r\n        require(_duration > 0);\r\n        require(_cliff <= _duration);\r\n\r\n        beneficiary = _beneficiary;\r\n        startTime = _startTime;\r\n        cliff = _startTime.add(_cliff);\r\n        duration = _duration;\r\n        revocable = _revocable;\r\n\r\n        LogVestingCreated(beneficiary, startTime, cliff, duration, revocable);\r\n    }\r\n\r\n    /**\r\n    * @notice Transfers vested tokens to beneficiary.\r\n    * @param token ERC20 token which is being vested\r\n    */\r\n    function release(ERC20Basic token) public {\r\n        uint256 unreleased = releasableAmount(token);\r\n        require(unreleased > 0);\r\n\r\n        released[token] = released[token].add(unreleased);\r\n\r\n        token.safeTransfer(beneficiary, unreleased);\r\n\r\n        LogVestedTokensReleased(address(token), unreleased);\r\n    }\r\n\r\n    /**\r\n    * @notice Allows the owner to revoke the vesting. Tokens already vested\r\n    * remain in the contract, the rest are returned to the owner.\r\n    * @param token ERC20 token which is being vested\r\n    */\r\n    function revoke(ERC20Basic token) public onlyOwner {\r\n        require(revocable);\r\n        require(!revoked[token]);\r\n\r\n        uint256 balance = token.balanceOf(this);\r\n\r\n        uint256 unreleased = releasableAmount(token);\r\n        uint256 refundable = balance.sub(unreleased);\r\n\r\n        revoked[token] = true;\r\n\r\n        token.safeTransfer(owner, refundable);\r\n\r\n        LogVestingRevoked(address(token), refundable);\r\n    }\r\n\r\n    /**\r\n    * @dev Calculates the amount that has already vested but hasn't been released yet.\r\n    * @param token ERC20 token which is being vested\r\n    */\r\n    function releasableAmount(ERC20Basic token) public constant returns (uint256) {\r\n        return vestedAmount(token).sub(released[token]);\r\n    }\r\n\r\n    /**\r\n    * @dev Calculates the amount that has already vested.\r\n    * @param token ERC20 token which is being vested\r\n    */\r\n    function vestedAmount(ERC20Basic token) public constant returns (uint256) {\r\n        uint256 currentBalance = token.balanceOf(this);\r\n        uint256 totalBalance = currentBalance.add(released[token]);\r\n\r\n        if (now < cliff) {\r\n            return 0;\r\n        } else if (now >= startTime.add(duration) || revoked[token]) {\r\n            return totalBalance;\r\n        } else {\r\n            return totalBalance.mul(now.sub(startTime)).div(duration);\r\n        }\r\n    }\r\n}\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    Unpause();\r\n  }\r\n}\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n\r\n    uint256 _allowance = allowed[_from][msg.sender];\r\n\r\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n    // require (_value <= _allowance);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   */\r\n  function increaseApproval (address _spender, uint _addedValue)\r\n    returns (bool success) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  function decreaseApproval (address _spender, uint _subtractedValue)\r\n    returns (bool success) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n/**\r\n * @title Pausable token\r\n *\r\n * @dev StandardToken modified with pausable transfers.\r\n **/\r\n\r\ncontract PausableToken is StandardToken, Pausable {\r\n\r\n  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\r\n    return super.transfer(_to, _value);\r\n  }\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\r\n    return super.transferFrom(_from, _to, _value);\r\n  }\r\n\r\n  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\r\n    return super.approve(_spender, _value);\r\n  }\r\n\r\n  function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\r\n    return super.increaseApproval(_spender, _addedValue);\r\n  }\r\n\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\r\n    return super.decreaseApproval(_spender, _subtractedValue);\r\n  }\r\n}\r\ncontract AdaptableToken is Burnable, Mintable, PausableToken {\r\n\r\n    uint256 public transferableFromBlock;\r\n\r\n    uint256 public lockEndBlock;\r\n    \r\n    mapping (address => uint256) public initiallyLockedAmount;\r\n    \r\n    function AdaptableToken(uint256 _transferableFromBlock, uint256 _lockEndBlock) internal {\r\n        require(_lockEndBlock > _transferableFromBlock);\r\n        transferableFromBlock = _transferableFromBlock;\r\n        lockEndBlock = _lockEndBlock;\r\n    }\r\n\r\n    modifier canTransfer(address _from, uint _value) {\r\n        require(block.number >= transferableFromBlock);\r\n\r\n        if (block.number < lockEndBlock) {\r\n            uint256 locked = lockedBalanceOf(_from);\r\n            if (locked > 0) {\r\n                uint256 newBalance = balanceOf(_from).sub(_value);\r\n                require(newBalance >= locked);\r\n            }\r\n        }\r\n        _;\r\n    }\r\n\r\n    function lockedBalanceOf(address _to) public constant returns(uint256) {\r\n        uint256 locked = initiallyLockedAmount[_to];\r\n        if (block.number >= lockEndBlock) return 0;\r\n        else if (block.number <= transferableFromBlock) return locked;\r\n\r\n        uint256 releaseForBlock = locked.div(lockEndBlock.sub(transferableFromBlock));\r\n        uint256 released = block.number.sub(transferableFromBlock).mul(releaseForBlock);\r\n        return locked.sub(released);\r\n    }\r\n\r\n    function transfer(address _to, uint _value) canTransfer(msg.sender, _value) public returns (bool) {\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint _value) canTransfer(_from, _value) public returns (bool) {\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n    modifier canMint() {\r\n        require(!mintingFinished());\r\n        _;\r\n    }\r\n\r\n    function mintingFinished() public constant returns(bool finished) {\r\n        return block.number >= transferableFromBlock;\r\n    }\r\n\r\n    /**\r\n    * @dev Mint new tokens.\r\n    * @param _to The address that will receieve the minted tokens.\r\n    * @param _amount The amount of tokens to mint.\r\n    * @return A boolean that indicates if the operation was successful.\r\n    */\r\n    function mint(address _to, uint256 _amount) public onlyOwner canMint returns (bool minted) {\r\n        totalSupply = totalSupply.add(_amount);\r\n        balances[_to] = balances[_to].add(_amount);\r\n        Transfer(address(0), _to, _amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Mint new locked tokens, which will unlock progressively.\r\n    * @param _to The address that will receieve the minted locked tokens.\r\n    * @param _amount The amount of tokens to mint.\r\n    * @return A boolean that indicates if the operation was successful.\r\n    */\r\n    function mintLocked(address _to, uint256 _amount) public onlyOwner canMint returns (bool minted) {\r\n        initiallyLockedAmount[_to] = initiallyLockedAmount[_to].add(_amount);\r\n        return mint(_to, _amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Mint timelocked tokens.\r\n     * @param _to The address that will receieve the minted locked tokens.\r\n     * @param _amount The amount of tokens to mint.\r\n     * @param _releaseTime The token release time as timestamp from Unix epoch.\r\n     * @return A boolean that indicates if the operation was successful.\r\n     */\r\n    function mintTimelocked(address _to, uint256 _amount, uint256 _releaseTime) public\r\n        onlyOwner canMint returns (TokenTimelock tokenTimelock) {\r\n\r\n        TokenTimelock timelock = new TokenTimelock(this, _to, _releaseTime);\r\n        mint(timelock, _amount);\r\n\r\n        return timelock;\r\n    }\r\n\r\n    /**\r\n    * @dev Mint vested tokens.\r\n    * @param _to The address that will receieve the minted vested tokens.\r\n    * @param _amount The amount of tokens to mint.\r\n    * @param _startTime When the vesting starts as timestamp in seconds from Unix epoch.\r\n    * @param _duration The duration in seconds of the period in which the tokens will vest.\r\n    * @return A boolean that indicates if the operation was successful.\r\n    */\r\n    function mintVested(address _to, uint256 _amount, uint256 _startTime, uint256 _duration) public\r\n        onlyOwner canMint returns (TokenVesting tokenVesting) {\r\n\r\n        TokenVesting vesting = new TokenVesting(_to, _startTime, 0, _duration, true);\r\n        mint(vesting, _amount);\r\n\r\n        return vesting;\r\n    }\r\n\r\n    /**\r\n    * @dev Burn tokens.\r\n    * @param _amount The amount of tokens to burn.\r\n    * @return A boolean that indicates if the operation was successful.\r\n    */\r\n    function burn(uint256 _amount) public returns (bool burned) {\r\n        //require(0 < _amount && _amount <= balances[msg.sender]);\r\n\r\n        balances[msg.sender] = balances[msg.sender].sub(_amount);\r\n        totalSupply = totalSupply.sub(_amount);\r\n\r\n        Transfer(msg.sender, address(0), _amount);\r\n        \r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Release vested tokens to beneficiary.\r\n     * @param _vesting The token vesting to release.\r\n     */\r\n    function releaseVested(TokenVesting _vesting) public {\r\n        require(_vesting != address(0));\r\n\r\n        _vesting.release(this);\r\n    }\r\n\r\n    /**\r\n     * @dev Revoke vested tokens. Just the token can revoke because it is the vesting owner.\r\n     * @param _vesting The token vesting to revoke.\r\n     */\r\n    function revokeVested(TokenVesting _vesting) public onlyOwner {\r\n        require(_vesting != address(0));\r\n\r\n        _vesting.revoke(this);\r\n    }\r\n}\r\ncontract NokuMasterToken is AdaptableToken {\r\n    string public constant name = \"NOKU\";\r\n    string public constant symbol = \"NOKU\";\r\n    uint8 public constant decimals = 18;\r\n\r\n    function NokuMasterToken(uint256 _transferableFromBlock, uint256 _lockEndBlock)\r\n        AdaptableToken(_transferableFromBlock, _lockEndBlock) public {\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"finished\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_startTime\",\"type\":\"uint256\"},{\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"mintVested\",\"outputs\":[{\"name\":\"tokenVesting\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_vesting\",\"type\":\"address\"}],\"name\":\"releaseVested\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"minted\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"burned\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mintLocked\",\"outputs\":[{\"name\":\"minted\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"lockedBalanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockEndBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_vesting\",\"type\":\"address\"}],\"name\":\"revokeVested\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_releaseTime\",\"type\":\"uint256\"}],\"name\":\"mintTimelocked\",\"outputs\":[{\"name\":\"tokenTimelock\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transferableFromBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"initiallyLockedAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_transferableFromBlock\",\"type\":\"uint256\"},{\"name\":\"_lockEndBlock\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogBurned\",\"type\":\"event\"}]","ContractName":"NokuMasterToken","CompilerVersion":"v0.4.13+commit.fb4cb1a","OptimizationUsed":"1","Runs":"0","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000004b5bcd00000000000000000000000000000000000000000000000000000000006b704d","Library":"","SwarmSource":"bzzr://4c356406b0b2da61c04925a8bc5b845c6fd5acfe51cf776d659833d554a7df8d"}]}