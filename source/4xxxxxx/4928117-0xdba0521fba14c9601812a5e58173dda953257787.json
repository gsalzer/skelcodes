{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\ncontract SMINT {\r\n    struct Invoice {\r\n        address beneficiary;\r\n        uint amount;\r\n        address payer;\r\n    }\r\n    \r\n    address public owner;\r\n    string public name = 'SMINT';\r\n    string public symbol = 'SMINT';\r\n    uint8 public decimals = 18;\r\n    uint public totalSupply = 100000000000000000000000000000;\r\n    uint public currentInvoice = 0;\r\n    uint public lastEfficientBlockNumber;\r\n    \r\n    /* This creates an array with all balances */\r\n    mapping (address => uint) public balanceOf;\r\n    mapping (address => uint) public frozenBalanceOf;\r\n    mapping (address => uint) public successesOf;\r\n    mapping (address => uint) public failsOf;\r\n    mapping (address => mapping (address => uint)) public allowance;\r\n    mapping (uint => Invoice) public invoices;\r\n    \r\n    /* This generates a public event on the blockchain that will notify clients */\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    \r\n    event Mine(address indexed miner, uint value, uint rewardAddition);\r\n    event Bill(uint invoiceId);\r\n    event Pay(uint indexed invoiceId);\r\n\r\n    modifier onlyOwner {\r\n        if (msg.sender != owner) revert();\r\n        _;\r\n    }\r\n    \r\n    /* Initializes contract with initial supply tokens to the creator of the contract */\r\n    function SMINT() public {\r\n        owner = msg.sender;\r\n        balanceOf[msg.sender] = totalSupply;\r\n        lastEfficientBlockNumber = block.number;\r\n    }\r\n    \r\n    /* Internal transfer, only can be called by this contract */\r\n    function _transfer(address _from, address _to, uint _value) internal {\r\n        require(_to != 0x0);\r\n        require(balanceOf[_from] >= _value);\r\n        require(balanceOf[_to] + _value > balanceOf[_to]);\r\n        balanceOf[_from] -= _value;\r\n        balanceOf[_to] += _value;\r\n        Transfer(_from, _to, _value);\r\n    }\r\n    \r\n    /* Unfreeze not more than _value tokens */\r\n    function _unfreezeMaxTokens(uint _value) internal {\r\n        uint amount = frozenBalanceOf[msg.sender] > _value ? _value : frozenBalanceOf[msg.sender];\r\n        if (amount > 0) {\r\n            balanceOf[msg.sender] += amount;\r\n            frozenBalanceOf[msg.sender] -= amount;\r\n            Transfer(this, msg.sender, amount);\r\n        }\r\n    }\r\n    \r\n    function transferAndFreeze(address _to, uint _value) onlyOwner external {\r\n        require(_to != 0x0);\r\n        require(balanceOf[owner] >= _value);\r\n        require(frozenBalanceOf[_to] + _value > frozenBalanceOf[_to]);\r\n        balanceOf[owner] -= _value;\r\n        frozenBalanceOf[_to] += _value;\r\n        Transfer(owner, this, _value);\r\n    }\r\n    \r\n    /* Send coins */\r\n    function transfer(address _to, uint _value) public returns (bool success) {\r\n        _transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n    \r\n    function bill(uint _amount) external {\r\n        require(_amount > 0);\r\n        invoices[currentInvoice] = Invoice({\r\n            beneficiary: msg.sender,\r\n            amount: _amount,\r\n            payer: 0x0\r\n        });\r\n        Bill(currentInvoice);\r\n        currentInvoice++;\r\n    }\r\n    \r\n    function pay(uint _invoiceId) external {\r\n        require(_invoiceId < currentInvoice);\r\n        require(invoices[_invoiceId].payer == 0x0);\r\n        _transfer(msg.sender, invoices[_invoiceId].beneficiary, invoices[_invoiceId].amount);\r\n        invoices[_invoiceId].payer = msg.sender;\r\n        Pay(_invoiceId);\r\n    }\r\n    \r\n    /* Transfer tokens from other address */\r\n    function transferFrom(address _from, address _to, uint _value) public returns (bool success) {\r\n        require(_value <= allowance[_from][msg.sender]);     // Check allowance\r\n        allowance[_from][msg.sender] -= _value;\r\n        _transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n    \r\n    /* Set allowance for other address */\r\n    function approve(address _spender, uint _value) public returns (bool success) {\r\n        allowance[msg.sender][_spender] = _value;\r\n        return true;\r\n    }\r\n    \r\n    function () external payable {\r\n        if (msg.value > 0) {\r\n            revert();\r\n        }\r\n        \r\n        uint minedAtBlock = uint(block.blockhash(block.number - 1));\r\n        uint minedHashRel = uint(sha256(minedAtBlock + uint(msg.sender) + block.timestamp)) % 1000000;\r\n        uint balanceRel = (balanceOf[msg.sender] + frozenBalanceOf[msg.sender]) * 1000000 / totalSupply;\r\n        if (balanceRel > 0) {\r\n            uint k = balanceRel;\r\n            if (k > 255) {\r\n                k = 255;\r\n            }\r\n            k = 2 ** k;\r\n            balanceRel = 500000 / k;\r\n            balanceRel = 500000 - balanceRel;\r\n            if (minedHashRel < balanceRel) {\r\n                uint reward = 100000000000000000 + minedHashRel * 1000000000000000;\r\n                uint rewardAddition = reward * (block.number - lastEfficientBlockNumber) * 197 / 1000000;\r\n                reward += rewardAddition;\r\n                balanceOf[msg.sender] += reward;\r\n                totalSupply += reward;\r\n                _unfreezeMaxTokens(reward);\r\n                Transfer(0, this, reward);\r\n                Transfer(this, msg.sender, reward);\r\n                Mine(msg.sender, reward, rewardAddition);\r\n                successesOf[msg.sender]++;\r\n                lastEfficientBlockNumber = block.number;\r\n            } else {\r\n                Mine(msg.sender, 0, 0);\r\n                failsOf[msg.sender]++;\r\n            }\r\n        } else {\r\n            revert();\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentInvoice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"invoices\",\"outputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"payer\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"bill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"failsOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferAndFreeze\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenBalanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_invoiceId\",\"type\":\"uint256\"}],\"name\":\"pay\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"successesOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastEfficientBlockNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"miner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"rewardAddition\",\"type\":\"uint256\"}],\"name\":\"Mine\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"invoiceId\",\"type\":\"uint256\"}],\"name\":\"Bill\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"invoiceId\",\"type\":\"uint256\"}],\"name\":\"Pay\",\"type\":\"event\"}]","ContractName":"SMINT","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://d111732c4ae1667a1e05a1e709f1c3f287681784b5316434a0ec7ebafd4b7856"}]}