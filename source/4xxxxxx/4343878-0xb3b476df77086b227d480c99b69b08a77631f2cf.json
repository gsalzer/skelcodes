{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.17;\r\n\r\n/*\r\n\r\nICO Syndicate Contract\r\n========================\r\n\r\nBuys ICO Tokens for a given ICO known contract address\r\nAuthor: Bogdan\r\n\r\n*/\r\n\r\n// ERC20 Interface: https://github.com/ethereum/EIPs/issues/20\r\ncontract ERC20 {\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n    function balanceOf(address _owner) public constant returns (uint256 balance);\r\n}\r\n\r\ncontract ICOSyndicate {\r\n    // Store the amount of ETH deposited by each account.\r\n    mapping (address => uint256) public balances;\r\n    // Track whether the contract has bought the tokens yet.\r\n    bool public bought_tokens;\r\n    // Record ETH value of tokens currently held by contract.\r\n    uint256 public contract_eth_value;\r\n    // Emergency kill switch in case a critical bug is found.\r\n    bool public kill_switch;\r\n\r\n    // Maximum amount of user ETH contract will accept.  Reduces risk of hard cap related failure.\r\n    uint256 public eth_cap = 30000 ether;\r\n    // The developer address.\r\n    address public developer = 0x91d97da49d3cD71B475F46d719241BD8bb6Af18f;\r\n    // The crowdsale address.  Settable by the developer.\r\n    address public sale;\r\n    // The token address.  Settable by the developer.\r\n    ERC20 public token;\r\n\r\n    // Allows the developer to set the crowdsale and token addresses.\r\n    function set_addresses(address _sale, address _token) public {\r\n        // Only allow the developer to set the sale and token addresses.\r\n        require(msg.sender == developer);\r\n        // Only allow setting the addresses once.\r\n        require(sale == 0x0);\r\n        // Set the crowdsale and token addresses.\r\n        sale = _sale;\r\n        token = ERC20(_token);\r\n    }\r\n\r\n    // Allows the developer or anyone with the password to shut down everything except withdrawals in emergencies.\r\n    function activate_kill_switch() public {\r\n        // Only activate the kill switch if the sender is the developer or the password is correct.\r\n        require(msg.sender == developer);\r\n        // Irreversibly activate the kill switch.\r\n        kill_switch = true;\r\n    }\r\n\r\n    // Withdraws all ETH deposited or tokens purchased by the given user and rewards the caller.\r\n    function withdraw(address user) public {\r\n        // Only allow withdrawals after the contract has had a chance to buy in.\r\n        require(bought_tokens);\r\n        // Short circuit to save gas if the user doesn't have a balance.\r\n        if (balances[user] == 0) return;\r\n        // If the contract failed to buy into the sale, withdraw the user's ETH.\r\n        if (!bought_tokens) {\r\n            // Store the user's balance prior to withdrawal in a temporary variable.\r\n            uint256 eth_to_withdraw = balances[user];\r\n            // Update the user's balance prior to sending ETH to prevent recursive call.\r\n            balances[user] = 0;\r\n            // Return the user's funds.  Throws on failure to prevent loss of funds.\r\n            user.transfer(eth_to_withdraw);\r\n        }\r\n        // Withdraw the user's tokens if the contract has purchased them.\r\n        else {\r\n            // Retrieve current token balance of contract.\r\n            uint256 contract_token_balance = token.balanceOf(address(this));\r\n            // Disallow token withdrawals if there are no tokens to withdraw.\r\n            require(contract_token_balance != 0);\r\n            // Store the user's token balance in a temporary variable.\r\n            uint256 tokens_to_withdraw = (balances[user] * contract_token_balance) / contract_eth_value;\r\n            // Update the value of tokens currently held by the contract.\r\n            contract_eth_value -= balances[user];\r\n            // Update the user's balance prior to sending to prevent recursive call.\r\n            balances[user] = 0;\r\n            // Send the funds.  Throws on failure to prevent loss of funds.\r\n            require(token.transfer(user, tokens_to_withdraw));\r\n\r\n        }\r\n\r\n    }\r\n\r\n    // Buys tokens in the crowdsale and rewards the caller, callable by anyone.\r\n    function buy() public {\r\n        // Short circuit to save gas if the contract has already bought tokens.\r\n        if (bought_tokens) return;\r\n        // Short circuit to save gas if kill switch is active.\r\n        if (kill_switch) return;\r\n        // Disallow buying in if the developer hasn't set the sale address yet.\r\n        require(sale != 0x0);\r\n        // Record that the contract has bought the tokens.\r\n        bought_tokens = true;\r\n        // Record the amount of ETH sent as the contract's current value.\r\n        contract_eth_value = this.balance;\r\n        // Transfer all the funds to the crowdsale address to buy tokens.\r\n        // Throws if the crowdsale hasn't started yet or has already completed, preventing loss of funds.\r\n        require(sale.call.value(contract_eth_value)());\r\n    }\r\n\r\n    // Default function.  Called when a user sends ETH to the contract.\r\n    function () public payable {\r\n        // Disallow deposits if kill switch is active.\r\n        require(!kill_switch);\r\n        // Only allow deposits if the contract hasn't already purchased the tokens.\r\n        require(!bought_tokens);\r\n        // Only allow deposits that won't exceed the contract's ETH cap.\r\n        require(this.balance < eth_cap);\r\n        // Update records of deposited ETH to include the received amount.\r\n        balances[msg.sender] += msg.value;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sale\",\"type\":\"address\"},{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"set_addresses\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bought_tokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sale\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"activate_kill_switch\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kill_switch\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contract_eth_value\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"developer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"eth_cap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"ICOSyndicate","CompilerVersion":"v0.4.17+commit.bdeb9e52","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://02c34f9a2c90a71bc7a9f58a5c77302b368243ea321c2e2b44ab1a73e04b6d4d"}]}