{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.17;\r\n\r\n// ----------------------------------------------------------------------------\r\n// Future Token Sale Lock Box\r\n//\r\n// Copyright (c) 2017 OpenST Ltd.\r\n// https://simpletoken.org/\r\n//\r\n// The MIT Licence.\r\n// ----------------------------------------------------------------------------\r\n\r\n// ----------------------------------------------------------------------------\r\n// SafeMath Library Implementation\r\n//\r\n// Copyright (c) 2017 OpenST Ltd.\r\n// https://simpletoken.org/\r\n//\r\n// The MIT Licence.\r\n//\r\n// Based on the SafeMath library by the OpenZeppelin team.\r\n// Copyright (c) 2016 Smart Contract Solutions, Inc.\r\n// https://github.com/OpenZeppelin/zeppelin-solidity\r\n// The MIT License.\r\n// ----------------------------------------------------------------------------\r\n\r\n\r\nlibrary SafeMath {\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a * b;\r\n\r\n        assert(a == 0 || c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n\r\n        return a - b;\r\n    }\r\n\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n\r\n        assert(c >= a);\r\n\r\n        return c;\r\n    }\r\n}\r\n\r\n//\r\n// Implements basic ownership with 2-step transfers.\r\n//\r\ncontract Owned {\r\n\r\n    address public owner;\r\n    address public proposedOwner;\r\n\r\n    event OwnershipTransferInitiated(address indexed _proposedOwner);\r\n    event OwnershipTransferCompleted(address indexed _newOwner);\r\n\r\n\r\n    function Owned() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n\r\n    modifier onlyOwner() {\r\n        require(isOwner(msg.sender));\r\n        _;\r\n    }\r\n\r\n\r\n    function isOwner(address _address) internal view returns (bool) {\r\n        return (_address == owner);\r\n    }\r\n\r\n\r\n    function initiateOwnershipTransfer(address _proposedOwner) public onlyOwner returns (bool) {\r\n        proposedOwner = _proposedOwner;\r\n\r\n        OwnershipTransferInitiated(_proposedOwner);\r\n\r\n        return true;\r\n    }\r\n\r\n\r\n    function completeOwnershipTransfer() public returns (bool) {\r\n        require(msg.sender == proposedOwner);\r\n\r\n        owner = proposedOwner;\r\n        proposedOwner = address(0);\r\n\r\n        OwnershipTransferCompleted(owner);\r\n\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract ERC20Interface {\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n    function name() public view returns (string);\r\n    function symbol() public view returns (string);\r\n    function decimals() public view returns (uint8);\r\n    function totalSupply() public view returns (uint256);\r\n\r\n    function balanceOf(address _owner) public view returns (uint256 balance);\r\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n    function approve(address _spender, uint256 _value) public returns (bool success);\r\n}\r\n\r\n/**\r\n   @title TokenSaleInterface\r\n   @dev Provides interface for calling TokenSale.endTime\r\n*/\r\ncontract TokenSaleInterface {\r\n    function endTime() public view returns (uint256);\r\n}\r\n\r\n/**\r\n   @title FutureTokenSaleLockBox\r\n   @notice Holds tokens reserved for future token sales. Tokens cannot be transferred for at least six months.\r\n*/\r\ncontract FutureTokenSaleLockBox is Owned {\r\n    using SafeMath for uint256;\r\n\r\n    // To enable transfers of tokens held by this contract\r\n    ERC20Interface public simpleToken;\r\n\r\n    // To determine earliest unlock date after which tokens held by this contract can be transferred\r\n    TokenSaleInterface public tokenSale;\r\n\r\n    // The unlock date is initially 26 weeks after tokenSale.endTime, but may be extended\r\n    uint256 public unlockDate;\r\n\r\n    event UnlockDateExtended(uint256 _newDate);\r\n    event TokensTransferred(address indexed _to, uint256 _value);\r\n\r\n    /**\r\n       @dev Constructor\r\n       @param _simpleToken SimpleToken contract\r\n       @param _tokenSale TokenSale contract\r\n    */\r\n    function FutureTokenSaleLockBox(ERC20Interface _simpleToken, TokenSaleInterface _tokenSale)\r\n             Owned()\r\n             public\r\n    {\r\n        require(address(_simpleToken) != address(0));\r\n        require(address(_tokenSale)   != address(0));\r\n\r\n        simpleToken = _simpleToken;\r\n        tokenSale   = _tokenSale;\r\n        uint256 endTime = tokenSale.endTime();\r\n\r\n        require(endTime > 0);\r\n\r\n        unlockDate  = endTime.add(26 weeks);\r\n    }\r\n\r\n    /**\r\n       @dev Limits execution to after unlock date\r\n    */\r\n    modifier onlyAfterUnlockDate() {\r\n        require(hasUnlockDatePassed());\r\n        _;\r\n    }\r\n\r\n    /**\r\n       @dev Provides current time\r\n    */\r\n    function currentTime() public view returns (uint256) {\r\n        return now;\r\n    }\r\n\r\n    /**\r\n       @dev Determines whether unlock date has passed\r\n    */\r\n    function hasUnlockDatePassed() public view returns (bool) {\r\n        return currentTime() >= unlockDate;\r\n    }\r\n\r\n    /**\r\n       @dev Extends unlock date\r\n       @param _newDate new unlock date\r\n    */\r\n    function extendUnlockDate(uint256 _newDate) public onlyOwner returns (bool) {\r\n        require(_newDate > unlockDate);\r\n\r\n        unlockDate = _newDate;\r\n        UnlockDateExtended(_newDate);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n       @dev Transfers tokens held by this contract\r\n       @param _to account to which to transfer tokens\r\n       @param _value value of tokens to transfer\r\n    */\r\n    function transfer(address _to, uint256 _value) public onlyOwner onlyAfterUnlockDate returns (bool) {\r\n        require(simpleToken.transfer(_to, _value));\r\n\r\n        TokensTransferred(_to, _value);\r\n\r\n        return true;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"simpleToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newDate\",\"type\":\"uint256\"}],\"name\":\"extendUnlockDate\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"unlockDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasUnlockDatePassed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenSale\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_proposedOwner\",\"type\":\"address\"}],\"name\":\"initiateOwnershipTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"proposedOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"completeOwnershipTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_simpleToken\",\"type\":\"address\"},{\"name\":\"_tokenSale\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_newDate\",\"type\":\"uint256\"}],\"name\":\"UnlockDateExtended\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"TokensTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_proposedOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferInitiated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferCompleted\",\"type\":\"event\"}]","ContractName":"FutureTokenSaleLockBox","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000002c4e8f2d746113d0696ce89b35f0d8bf88e0aeca00000000000000000000000058b7056deb51ed292614f0da1e94e7e9c589828d","Library":"","SwarmSource":"bzzr://ba8687f769bc90eb3229181060f539a5f53917b546f9f303eaa3507ccf1ef92a"}]}