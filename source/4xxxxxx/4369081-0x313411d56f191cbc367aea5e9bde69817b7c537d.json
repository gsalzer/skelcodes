{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13;\r\n\r\n// ERC20 token interface is implemented only partially\r\n// (no SafeMath is used because contract code is very simple)\r\n// \r\n// Some functions left undefined:\r\n//  - transfer, transferFrom,\r\n//  - approve, allowance.\r\ncontract PresaleToken\r\n{\r\n/// Fields:\r\n    string public constant name = \"Remechain Presale Token\";\r\n    string public constant symbol = \"RMC\";\r\n    uint public constant decimals = 18;\r\n    uint public constant PRICE = 320;  // per 1 Ether\r\n\r\n    //  price\r\n    // Cap is 1875 ETH\r\n    // 1 RMC = 0,003125 ETH or 1 ETH = 320 RMC\r\n    // ETH price ~300$ - 13.10.2017\r\n    uint public constant HARDCAP_ETH_LIMIT = 1875;\r\n    uint public constant SOFTCAP_ETH_LIMIT = 500;\r\n    uint public constant TOKEN_SUPPLY_LIMIT = PRICE * HARDCAP_ETH_LIMIT * (1 ether / 1 wei);\r\n    uint public constant SOFTCAP_LIMIT = PRICE * SOFTCAP_ETH_LIMIT * (1 ether / 1 wei);\r\n    \r\n    // 25.11.2017 17:00 MSK\r\n    uint public icoDeadline = 1511618400;\r\n    \r\n    uint public constant BOUNTY_LIMIT = 350000 * (1 ether / 1 wei);\r\n\r\n    enum State{\r\n       Init,\r\n       Running,\r\n       Paused,\r\n       Migrating,\r\n       Migrated\r\n    }\r\n\r\n    State public currentState = State.Init;\r\n    uint public totalSupply = 0; // amount of tokens already sold\r\n    uint public bountySupply = 0; // amount of tokens already given as a reward\r\n\r\n    // Gathered funds can be withdrawn only to escrow's address.\r\n    address public escrow = 0;\r\n\r\n    // Token manager has exclusive priveleges to call administrative\r\n    // functions on this contract.\r\n    address public tokenManager = 0;\r\n\r\n    // Crowdsale manager has exclusive priveleges to burn presale tokens.\r\n    address public crowdsaleManager = 0;\r\n\r\n    mapping (address => uint256) public balances;\r\n    mapping (address => uint256) public ethBalances;\r\n\r\n/// Modifiers:\r\n    modifier onlyTokenManager()     { require(msg.sender == tokenManager); _;}\r\n    modifier onlyCrowdsaleManager() { require(msg.sender == crowdsaleManager); _;}\r\n    modifier onlyInState(State state){ require(state == currentState); _;}\r\n\r\n/// Events:\r\n    event LogBuy(address indexed owner, uint value);\r\n    event LogBurn(address indexed owner, uint value);\r\n    event LogStateSwitch(State newState);\r\n\r\n/// Functions:\r\n    /// @dev Constructor\r\n    /// @param _tokenManager Token manager address.\r\n    function PresaleToken(address _tokenManager, address _escrow) public\r\n    {\r\n        require(_tokenManager!=0);\r\n        require(_escrow!=0);\r\n\r\n        tokenManager = _tokenManager;\r\n        escrow = _escrow;\r\n    }\r\n    \r\n    function reward(address _user, uint  _amount) public onlyTokenManager {\r\n        require(_user != 0x0);\r\n        \r\n        assert(bountySupply + _amount >= bountySupply);\r\n        assert(bountySupply + _amount <= BOUNTY_LIMIT);\r\n        bountySupply += _amount;\r\n        \r\n        assert(balances[_user] + _amount >= balances[_user]);\r\n        balances[_user] += _amount;\r\n        \r\n        addAddressToList(_user);\r\n    }\r\n    \r\n    function isIcoSuccessful() constant public returns(bool successful)  {\r\n        return totalSupply >= SOFTCAP_LIMIT;\r\n    }\r\n    \r\n    function isIcoOver() constant public returns(bool isOver) {\r\n        return now >= icoDeadline;\r\n    }\r\n\r\n    function buyTokens(address _buyer) public payable onlyInState(State.Running)\r\n    {\r\n        assert(!isIcoOver());\r\n        require(msg.value != 0);\r\n        \r\n        uint ethValue = msg.value;\r\n        uint newTokens = msg.value * PRICE;\r\n       \r\n        require(!(totalSupply + newTokens > TOKEN_SUPPLY_LIMIT));\r\n        assert(ethBalances[_buyer] + ethValue >= ethBalances[_buyer]);\r\n        assert(balances[_buyer] + newTokens >= balances[_buyer]);\r\n        assert(totalSupply + newTokens >= totalSupply);\r\n        \r\n        ethBalances[_buyer] += ethValue;\r\n        balances[_buyer] += newTokens;\r\n        totalSupply += newTokens;\r\n        \r\n        addAddressToList(_buyer);\r\n\r\n        LogBuy(_buyer, newTokens);\r\n    }\r\n    \r\n    address[] public addressList;\r\n    mapping (address => bool) isAddressInList;\r\n    function addAddressToList(address _address) private {\r\n        if (isAddressInList[_address]) {\r\n            return;\r\n        }\r\n        addressList.push(_address);\r\n        isAddressInList[_address] = true;\r\n    }\r\n\r\n    /// @dev Returns number of tokens owned by given address.\r\n    /// @param _owner Address of token owner.\r\n    function burnTokens(address _owner) public onlyCrowdsaleManager onlyInState(State.Migrating)\r\n    {\r\n        uint tokens = balances[_owner];\r\n        require(tokens != 0);\r\n\r\n        balances[_owner] = 0;\r\n        totalSupply -= tokens;\r\n\r\n        LogBurn(_owner, tokens);\r\n\r\n        // Automatically switch phase when migration is done.\r\n        if(totalSupply == 0) \r\n        {\r\n            currentState = State.Migrated;\r\n            LogStateSwitch(State.Migrated);\r\n        }\r\n    }\r\n\r\n    /// @dev Returns number of tokens owned by given address.\r\n    /// @param _owner Address of token owner.\r\n    function balanceOf(address _owner) public constant returns (uint256) \r\n    {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function setPresaleState(State _nextState) public onlyTokenManager\r\n    {\r\n        // Init -> Running\r\n        // Running -> Paused\r\n        // Running -> Migrating\r\n        // Paused -> Running\r\n        // Paused -> Migrating\r\n        // Migrating -> Migrated\r\n        bool canSwitchState\r\n             =  (currentState == State.Init && _nextState == State.Running)\r\n             || (currentState == State.Running && _nextState == State.Paused)\r\n             // switch to migration phase only if crowdsale manager is set\r\n             || ((currentState == State.Running || currentState == State.Paused)\r\n                 && _nextState == State.Migrating\r\n                 && crowdsaleManager != 0x0)\r\n             || (currentState == State.Paused && _nextState == State.Running)\r\n             // switch to migrated only if everyting is migrated\r\n             || (currentState == State.Migrating && _nextState == State.Migrated\r\n                 && totalSupply == 0);\r\n\r\n        require(canSwitchState);\r\n\r\n        currentState = _nextState;\r\n        LogStateSwitch(_nextState);\r\n    }\r\n\r\n    uint public nextInListToReturn = 0;\r\n    uint private constant transfersPerIteration = 50;\r\n    function returnToFunders() private {\r\n        uint afterLast = nextInListToReturn + transfersPerIteration < addressList.length ? nextInListToReturn + transfersPerIteration : addressList.length; \r\n        \r\n        for (uint i = nextInListToReturn; i < afterLast; i++) {\r\n            address currentUser = addressList[i];\r\n            if (ethBalances[currentUser] > 0) {\r\n                currentUser.transfer(ethBalances[currentUser]);\r\n                ethBalances[currentUser] = 0;\r\n            }\r\n        }\r\n        \r\n        nextInListToReturn = afterLast;\r\n    }\r\n    function withdrawEther() public\r\n    {\r\n        if (isIcoSuccessful()) {\r\n            if(msg.sender == tokenManager && this.balance > 0) \r\n            {\r\n                escrow.transfer(this.balance);\r\n            }\r\n        }\r\n        else {\r\n            if (isIcoOver()) {\r\n                returnToFunders();\r\n            }\r\n        }\r\n    }\r\n    \r\n    function returnFunds() public {\r\n        returnFundsFor(msg.sender);\r\n    }\r\n    function returnFundsFor(address _user) public {\r\n        assert(isIcoOver() && !isIcoSuccessful());\r\n        assert(msg.sender == tokenManager || msg.sender == address(this));\r\n        \r\n        if (ethBalances[_user] > 0) {\r\n            _user.transfer(ethBalances[_user]);\r\n            ethBalances[_user] = 0;\r\n        }\r\n    }\r\n\r\n/// Setters\r\n    function setTokenManager(address _mgr) public onlyTokenManager\r\n    {\r\n        tokenManager = _mgr;\r\n    }\r\n\r\n    function setCrowdsaleManager(address _mgr) public onlyTokenManager\r\n    {\r\n        // You can't change crowdsale contract when migration is in progress.\r\n        require(currentState != State.Migrating);\r\n\r\n        crowdsaleManager = _mgr;\r\n    }\r\n\r\n    // Default fallback function\r\n    function()  public payable \r\n    {\r\n        buyTokens(msg.sender);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentState\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isIcoOver\",\"outputs\":[{\"name\":\"isOver\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"returnFunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"reward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SOFTCAP_LIMIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN_SUPPLY_LIMIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenManager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoDeadline\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleManager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"ethBalances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_mgr\",\"type\":\"address\"}],\"name\":\"setCrowdsaleManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextInListToReturn\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_mgr\",\"type\":\"address\"}],\"name\":\"setTokenManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"returnFundsFor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isIcoSuccessful\",\"outputs\":[{\"name\":\"successful\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bountySupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRICE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BOUNTY_LIMIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nextState\",\"type\":\"uint8\"}],\"name\":\"setPresaleState\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"burnTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"addressList\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SOFTCAP_ETH_LIMIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"escrow\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"HARDCAP_ETH_LIMIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_buyer\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tokenManager\",\"type\":\"address\"},{\"name\":\"_escrow\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"LogBuy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"LogBurn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newState\",\"type\":\"uint8\"}],\"name\":\"LogStateSwitch\",\"type\":\"event\"}]","ContractName":"PresaleToken","CompilerVersion":"v0.4.17+commit.bdeb9e52","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000057b22f88eb4aec3ce8d120ca642d5e4f97bb5daf0000000000000000000000000db878904a0a6960c8d7701455d3bc2b81b5d6d5","Library":"","SwarmSource":"bzzr://de532eb336d78d2cb58e6de6efab24342485727d126aedeacd1a50ebb145e3b8"}]}