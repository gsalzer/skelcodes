{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n// ----------------------------------------------------------------------------\r\n// GazeCoin Crowdsale Contract\r\n//\r\n// Deployed to : {TBA}\r\n//\r\n// Note: Calculations are based on GZE having 18 decimal places\r\n//\r\n// Enjoy.\r\n//\r\n// (c) BokkyPooBah / Bok Consulting Pty Ltd for GazeCoin 2017. The MIT Licence.\r\n// ----------------------------------------------------------------------------\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// ERC Token Standard #20 Interface\r\n// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\r\n// ----------------------------------------------------------------------------\r\ncontract ERC20Interface {\r\n    function totalSupply() public constant returns (uint);\r\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\r\n    function transfer(address to, uint tokens) public returns (bool success);\r\n    function approve(address spender, uint tokens) public returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// BokkyPooBah's Token Teleportation Service Interface v1.00\r\n//\r\n// Enjoy. (c) BokkyPooBah / Bok Consulting Pty Ltd 2017. The MIT Licence.\r\n// ----------------------------------------------------------------------------\r\ncontract BTTSTokenInterface is ERC20Interface {\r\n    uint public constant bttsVersion = 100;\r\n\r\n    bytes public constant signingPrefix = \"\\x19Ethereum Signed Message:\\n32\";\r\n    bytes4 public constant signedTransferSig = \"\\x75\\x32\\xea\\xac\";\r\n    bytes4 public constant signedApproveSig = \"\\xe9\\xaf\\xa7\\xa1\";\r\n    bytes4 public constant signedTransferFromSig = \"\\x34\\x4b\\xcc\\x7d\";\r\n    bytes4 public constant signedApproveAndCallSig = \"\\xf1\\x6f\\x9b\\x53\";\r\n\r\n    event OwnershipTransferred(address indexed from, address indexed to);\r\n    event MinterUpdated(address from, address to);\r\n    event Mint(address indexed tokenOwner, uint tokens, bool lockAccount);\r\n    event MintingDisabled();\r\n    event TransfersEnabled();\r\n    event AccountUnlocked(address indexed tokenOwner);\r\n\r\n    function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success);\r\n\r\n    // ------------------------------------------------------------------------\r\n    // signed{X} functions\r\n    // ------------------------------------------------------------------------\r\n    function signedTransferHash(address tokenOwner, address to, uint tokens, uint fee, uint nonce) public view returns (bytes32 hash);\r\n    function signedTransferCheck(address tokenOwner, address to, uint tokens, uint fee, uint nonce, bytes sig, address feeAccount) public view returns (CheckResult result);\r\n    function signedTransfer(address tokenOwner, address to, uint tokens, uint fee, uint nonce, bytes sig, address feeAccount) public returns (bool success);\r\n\r\n    function signedApproveHash(address tokenOwner, address spender, uint tokens, uint fee, uint nonce) public view returns (bytes32 hash);\r\n    function signedApproveCheck(address tokenOwner, address spender, uint tokens, uint fee, uint nonce, bytes sig, address feeAccount) public view returns (CheckResult result);\r\n    function signedApprove(address tokenOwner, address spender, uint tokens, uint fee, uint nonce, bytes sig, address feeAccount) public returns (bool success);\r\n\r\n    function signedTransferFromHash(address spender, address from, address to, uint tokens, uint fee, uint nonce) public view returns (bytes32 hash);\r\n    function signedTransferFromCheck(address spender, address from, address to, uint tokens, uint fee, uint nonce, bytes sig, address feeAccount) public view returns (CheckResult result);\r\n    function signedTransferFrom(address spender, address from, address to, uint tokens, uint fee, uint nonce, bytes sig, address feeAccount) public returns (bool success);\r\n\r\n    function signedApproveAndCallHash(address tokenOwner, address spender, uint tokens, bytes _data, uint fee, uint nonce) public view returns (bytes32 hash);\r\n    function signedApproveAndCallCheck(address tokenOwner, address spender, uint tokens, bytes _data, uint fee, uint nonce, bytes sig, address feeAccount) public view returns (CheckResult result);\r\n    function signedApproveAndCall(address tokenOwner, address spender, uint tokens, bytes _data, uint fee, uint nonce, bytes sig, address feeAccount) public returns (bool success);\r\n\r\n    function mint(address tokenOwner, uint tokens, bool lockAccount) public returns (bool success);\r\n    function unlockAccount(address tokenOwner) public;\r\n    function disableMinting() public;\r\n    function enableTransfers() public;\r\n\r\n    // ------------------------------------------------------------------------\r\n    // signed{X}Check return status\r\n    // ------------------------------------------------------------------------\r\n    enum CheckResult {\r\n        Success,                           // 0 Success\r\n        NotTransferable,                   // 1 Tokens not transferable yet\r\n        AccountLocked,                     // 2 Account locked\r\n        SignerMismatch,                    // 3 Mismatch in signing account\r\n        AlreadyExecuted,                   // 4 Transfer already executed\r\n        InsufficientApprovedTokens,        // 5 Insufficient approved tokens\r\n        InsufficientApprovedTokensForFees, // 6 Insufficient approved tokens for fees\r\n        InsufficientTokens,                // 7 Insufficient tokens\r\n        InsufficientTokensForFees,         // 8 Insufficient tokens for fees\r\n        OverflowError                      // 9 Overflow error\r\n    }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// Bonus list interface\r\n// ----------------------------------------------------------------------------\r\ncontract BonusListInterface {\r\n    mapping(address => uint) public bonusList;\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// Safe maths\r\n// ----------------------------------------------------------------------------\r\ncontract SafeMath {\r\n    function safeAdd(uint a, uint b) public pure returns (uint c) {\r\n        c = a + b;\r\n        require(c >= a);\r\n    }\r\n    function safeSub(uint a, uint b) public pure returns (uint c) {\r\n        require(b <= a);\r\n        c = a - b;\r\n    }\r\n    function safeMul(uint a, uint b) public pure returns (uint c) {\r\n        c = a * b;\r\n        require(a == 0 || c / a == b);\r\n    }\r\n    function safeDiv(uint a, uint b) public pure returns (uint c) {\r\n        require(b > 0);\r\n        c = a / b;\r\n    }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// Owned contract\r\n// ----------------------------------------------------------------------------\r\ncontract Owned {\r\n    address public owner;\r\n    address public newOwner;\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function Owned() public {\r\n        owner = msg.sender;\r\n    }\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        newOwner = _newOwner;\r\n    }\r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner);\r\n        OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = address(0);\r\n    }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// GazeCoin Crowdsale Contract\r\n// ----------------------------------------------------------------------------\r\ncontract GazeCoinCrowdsale is SafeMath, Owned {\r\n\r\n    BTTSTokenInterface public bttsToken;\r\n    uint8 public constant TOKEN_DECIMALS = 18;\r\n\r\n    address public wallet = 0x8cD8baa410E9172b949f2c4433D3b5905F8606fF;\r\n    address public teamWallet = 0xb4eC550893D31763C02EBDa44Dff90b7b5a62656;\r\n    uint public constant TEAM_PERCENT_GZE = 30;\r\n\r\n    BonusListInterface public bonusList;\r\n    uint public constant TIER1_BONUS = 50;\r\n    uint public constant TIER2_BONUS = 20;\r\n    uint public constant TIER3_BONUS = 15;\r\n\r\n    // Start 10 Dec 2017 11:00 EST => 10 Dec 2017 16:00 UTC => 11 Dec 2017 03:00 AEST\r\n    // new Date(1512921600 * 1000).toUTCString() => \"Sun, 10 Dec 2017 16:00:00 UTC\"\r\n    uint public constant START_DATE = 1512921600;\r\n    // End 21 Dec 2017 11:00 EST => 21 Dec 2017 16:00 UTC => 21 Dec 2017 03:00 AEST\r\n    // new Date(1513872000 * 1000).toUTCString() => \"Thu, 21 Dec 2017 16:00:00 UTC\"\r\n    uint public endDate = 1513872000;\r\n\r\n    // ETH/USD 9 Dec 2017 11:00 EST => 9 Dec 2017 16:00 UTC => 10 Dec 2017 03:00 AEST => 489.44 from CMC\r\n    uint public usdPerKEther = 489440;\r\n    uint public constant USD_CENT_PER_GZE = 35;\r\n    uint public constant CAP_USD = 35000000;\r\n    uint public constant MIN_CONTRIBUTION_ETH = 0.01 ether;\r\n\r\n    uint public contributedEth;\r\n    uint public contributedUsd;\r\n    uint public generatedGze;\r\n\r\n    //  AUD 10,000 = ~ USD 7,500\r\n    uint public lockedAccountThresholdUsd = 7500;\r\n    mapping(address => uint) public accountEthAmount;\r\n\r\n    bool public precommitmentAdjusted;\r\n    bool public finalised;\r\n\r\n    event BTTSTokenUpdated(address indexed oldBTTSToken, address indexed newBTTSToken);\r\n    event WalletUpdated(address indexed oldWallet, address indexed newWallet);\r\n    event TeamWalletUpdated(address indexed oldTeamWallet, address indexed newTeamWallet);\r\n    event BonusListUpdated(address indexed oldBonusList, address indexed newBonusList);\r\n    event EndDateUpdated(uint oldEndDate, uint newEndDate);\r\n    event UsdPerKEtherUpdated(uint oldUsdPerKEther, uint newUsdPerKEther);\r\n    event LockedAccountThresholdUsdUpdated(uint oldEthLockedThreshold, uint newEthLockedThreshold);\r\n    event Contributed(address indexed addr, uint ethAmount, uint ethRefund, uint accountEthAmount, uint usdAmount, uint gzeAmount, uint contributedEth, uint contributedUsd, uint generatedGze, bool lockAccount);\r\n\r\n    function GazeCoinCrowdsale() public {\r\n    }\r\n    function setBTTSToken(address _bttsToken) public onlyOwner {\r\n        require(now <= START_DATE);\r\n        BTTSTokenUpdated(address(bttsToken), _bttsToken);\r\n        bttsToken = BTTSTokenInterface(_bttsToken);\r\n    }\r\n    function setWallet(address _wallet) public onlyOwner {\r\n        WalletUpdated(wallet, _wallet);\r\n        wallet = _wallet;\r\n    }\r\n    function setTeamWallet(address _teamWallet) public onlyOwner {\r\n        TeamWalletUpdated(teamWallet, _teamWallet);\r\n        teamWallet = _teamWallet;\r\n    }\r\n    function setBonusList(address _bonusList) public onlyOwner {\r\n        require(now <= START_DATE);\r\n        BonusListUpdated(address(bonusList), _bonusList);\r\n        bonusList = BonusListInterface(_bonusList);\r\n    }\r\n    function setEndDate(uint _endDate) public onlyOwner {\r\n        require(_endDate >= now);\r\n        EndDateUpdated(endDate, _endDate);\r\n        endDate = _endDate;\r\n    }\r\n    function setUsdPerKEther(uint _usdPerKEther) public onlyOwner {\r\n        require(now <= START_DATE);\r\n        UsdPerKEtherUpdated(usdPerKEther, _usdPerKEther);\r\n        usdPerKEther = _usdPerKEther;\r\n    }\r\n    function setLockedAccountThresholdUsd(uint _lockedAccountThresholdUsd) public onlyOwner {\r\n        require(now <= START_DATE);\r\n        LockedAccountThresholdUsdUpdated(lockedAccountThresholdUsd, _lockedAccountThresholdUsd);\r\n        lockedAccountThresholdUsd = _lockedAccountThresholdUsd;\r\n    }\r\n\r\n    function capEth() public view returns (uint) {\r\n        return CAP_USD * 10**uint(3 + 18) / usdPerKEther;\r\n    }\r\n    function gzeFromEth(uint ethAmount, uint bonusPercent) public view returns (uint) {\r\n        return usdPerKEther * ethAmount * (100 + bonusPercent) / 10**uint(3 + 2 - 2) / USD_CENT_PER_GZE;\r\n    }\r\n    function gzePerEth() public view returns (uint) {\r\n        return gzeFromEth(10**18, 0);\r\n    }\r\n    function lockedAccountThresholdEth() public view returns (uint) {\r\n        return lockedAccountThresholdUsd * 10**uint(3 + 18) / usdPerKEther;\r\n    }\r\n    function getBonusPercent(address addr) public view returns (uint bonusPercent) {\r\n        uint tier = bonusList.bonusList(addr);\r\n        if (tier == 1) {\r\n            bonusPercent = TIER1_BONUS;\r\n        } else if (tier == 2) {\r\n            bonusPercent = TIER2_BONUS;\r\n        } else if (tier == 3) {\r\n            bonusPercent = TIER3_BONUS;\r\n        } else {\r\n            bonusPercent = 0;\r\n        }\r\n    }\r\n    function () public payable {\r\n        require((now >= START_DATE && now <= endDate) || (msg.sender == owner && msg.value == MIN_CONTRIBUTION_ETH));\r\n        require(contributedEth < capEth());\r\n        require(msg.value >= MIN_CONTRIBUTION_ETH);\r\n        uint bonusPercent = getBonusPercent(msg.sender);\r\n        uint ethAmount = msg.value;\r\n        uint ethRefund = 0;\r\n        if (safeAdd(contributedEth, ethAmount) > capEth()) {\r\n            ethAmount = safeSub(capEth(), contributedEth);\r\n            ethRefund = safeSub(msg.value, ethAmount);\r\n        }\r\n        uint usdAmount = safeDiv(safeMul(ethAmount, usdPerKEther), 10**uint(3 + 18));\r\n        uint gzeAmount = gzeFromEth(ethAmount, bonusPercent);\r\n        generatedGze = safeAdd(generatedGze, gzeAmount);\r\n        contributedEth = safeAdd(contributedEth, ethAmount);\r\n        contributedUsd = safeAdd(contributedUsd, usdAmount);\r\n        accountEthAmount[msg.sender] = safeAdd(accountEthAmount[msg.sender], ethAmount);\r\n        bool lockAccount = accountEthAmount[msg.sender] > lockedAccountThresholdEth();\r\n        bttsToken.mint(msg.sender, gzeAmount, lockAccount);\r\n        if (ethAmount > 0) {\r\n            wallet.transfer(ethAmount);\r\n        }\r\n        Contributed(msg.sender, ethAmount, ethRefund, accountEthAmount[msg.sender], usdAmount, gzeAmount, contributedEth, contributedUsd, generatedGze, lockAccount);\r\n        if (ethRefund > 0) {\r\n            msg.sender.transfer(ethRefund);\r\n        }\r\n    }\r\n\r\n    function addPrecommitment(address tokenOwner, uint ethAmount, uint bonusPercent) public onlyOwner {\r\n        require(!finalised);\r\n        uint usdAmount = safeDiv(safeMul(ethAmount, usdPerKEther), 10**uint(3 + 18));\r\n        uint gzeAmount = gzeFromEth(ethAmount, bonusPercent);\r\n        uint ethRefund = 0;\r\n        generatedGze = safeAdd(generatedGze, gzeAmount);\r\n        contributedEth = safeAdd(contributedEth, ethAmount);\r\n        contributedUsd = safeAdd(contributedUsd, usdAmount);\r\n        accountEthAmount[tokenOwner] = safeAdd(accountEthAmount[tokenOwner], ethAmount);\r\n        bool lockAccount = accountEthAmount[tokenOwner] > lockedAccountThresholdEth();\r\n        bttsToken.mint(tokenOwner, gzeAmount, lockAccount);\r\n        Contributed(tokenOwner, ethAmount, ethRefund, accountEthAmount[tokenOwner], usdAmount, gzeAmount, contributedEth, contributedUsd, generatedGze, lockAccount);\r\n    }\r\n    function addPrecommitmentAdjustment(address tokenOwner, uint gzeAmount) public onlyOwner {\r\n        require(now > endDate || contributedEth >= capEth());\r\n        require(!finalised);\r\n        uint ethAmount = 0;\r\n        uint usdAmount = 0;\r\n        uint ethRefund = 0;\r\n        generatedGze = safeAdd(generatedGze, gzeAmount);\r\n        bool lockAccount = accountEthAmount[tokenOwner] > lockedAccountThresholdEth();\r\n        bttsToken.mint(tokenOwner, gzeAmount, lockAccount);\r\n        precommitmentAdjusted = true;\r\n        Contributed(tokenOwner, ethAmount, ethRefund, accountEthAmount[tokenOwner], usdAmount, gzeAmount, contributedEth, contributedUsd, generatedGze, lockAccount);\r\n    }\r\n    function roundUp(uint a) public pure returns (uint) {\r\n        uint multiple = 10**uint(TOKEN_DECIMALS);\r\n        uint remainder = a % multiple;\r\n        if (remainder > 0) {\r\n            return safeSub(safeAdd(a, multiple), remainder);\r\n        }\r\n    }\r\n    function finalise() public onlyOwner {\r\n        require(!finalised);\r\n        require(precommitmentAdjusted);\r\n        require(now > endDate || contributedEth >= capEth());\r\n        uint total = safeDiv(safeMul(generatedGze, 100), safeSub(100, TEAM_PERCENT_GZE));\r\n        uint amountTeam = safeDiv(safeMul(total, TEAM_PERCENT_GZE), 100);\r\n        generatedGze = safeAdd(generatedGze, amountTeam);\r\n        uint rounded = roundUp(generatedGze);\r\n        if (rounded > generatedGze) {\r\n            uint dust = safeSub(rounded, generatedGze);\r\n            generatedGze = safeAdd(generatedGze, dust);\r\n            amountTeam = safeAdd(amountTeam, dust);\r\n        }\r\n        bttsToken.mint(teamWallet, amountTeam, false);\r\n        bttsToken.disableMinting();\r\n        finalised = true;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"ethAmount\",\"type\":\"uint256\"},{\"name\":\"bonusPercent\",\"type\":\"uint256\"}],\"name\":\"gzeFromEth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TEAM_PERCENT_GZE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TIER3_BONUS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_teamWallet\",\"type\":\"address\"}],\"name\":\"setTeamWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"finalised\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MIN_CONTRIBUTION_ETH\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusList\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"START_DATE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_endDate\",\"type\":\"uint256\"}],\"name\":\"setEndDate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TIER2_BONUS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAP_USD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"capEth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"USD_CENT_PER_GZE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN_DECIMALS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"generatedGze\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contributedUsd\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"a\",\"type\":\"uint256\"}],\"name\":\"roundUp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockedAccountThresholdEth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"},{\"name\":\"ethAmount\",\"type\":\"uint256\"},{\"name\":\"bonusPercent\",\"type\":\"uint256\"}],\"name\":\"addPrecommitment\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockedAccountThresholdUsd\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"a\",\"type\":\"uint256\"},{\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"safeSub\",\"outputs\":[{\"name\":\"c\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalise\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contributedEth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"a\",\"type\":\"uint256\"},{\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"safeDiv\",\"outputs\":[{\"name\":\"c\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"usdPerKEther\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gzePerEth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TIER1_BONUS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getBonusPercent\",\"outputs\":[{\"name\":\"bonusPercent\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_lockedAccountThresholdUsd\",\"type\":\"uint256\"}],\"name\":\"setLockedAccountThresholdUsd\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_bonusList\",\"type\":\"address\"}],\"name\":\"setBonusList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"a\",\"type\":\"uint256\"},{\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"safeMul\",\"outputs\":[{\"name\":\"c\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_usdPerKEther\",\"type\":\"uint256\"}],\"name\":\"setUsdPerKEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_bttsToken\",\"type\":\"address\"}],\"name\":\"setBTTSToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"setWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"a\",\"type\":\"uint256\"},{\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"safeAdd\",\"outputs\":[{\"name\":\"c\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"},{\"name\":\"gzeAmount\",\"type\":\"uint256\"}],\"name\":\"addPrecommitmentAdjustment\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bttsToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"precommitmentAdjusted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"accountEthAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"oldBTTSToken\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newBTTSToken\",\"type\":\"address\"}],\"name\":\"BTTSTokenUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"oldWallet\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"WalletUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"oldTeamWallet\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newTeamWallet\",\"type\":\"address\"}],\"name\":\"TeamWalletUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"oldBonusList\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newBonusList\",\"type\":\"address\"}],\"name\":\"BonusListUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldEndDate\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newEndDate\",\"type\":\"uint256\"}],\"name\":\"EndDateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldUsdPerKEther\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newUsdPerKEther\",\"type\":\"uint256\"}],\"name\":\"UsdPerKEtherUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldEthLockedThreshold\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newEthLockedThreshold\",\"type\":\"uint256\"}],\"name\":\"LockedAccountThresholdUsdUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ethAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ethRefund\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"accountEthAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"usdAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"gzeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"contributedEth\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"contributedUsd\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"generatedGze\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"lockAccount\",\"type\":\"bool\"}],\"name\":\"Contributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"GazeCoinCrowdsale","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://ae48f93ccc68348a60f89c650287178f1e6d2da559d6961436df0fa86252d059"}]}