{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public constant returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n\r\n/*\r\n * This contract allows the deposit of funds during the presale of a tokens\r\n * It can supply a mapping of addresses of participants => amount contributed\r\n */\r\n\r\ncontract FornicoinPresale {\r\n  using SafeMath for uint256;\r\n\r\n  // Time of start and end to presale\r\n  uint256 public startPresale;\r\n  uint256 public endPresale;\r\n\r\n  // Mapping of contributor addresses to the resective amounts contributed as FXX tokens\r\n  mapping (address => uint256) contributors;\r\n\r\n  // address where funds are collected\r\n  address public wallet;\r\n\r\n  // admin address to halt contract\r\n  address public admin;\r\n  bool public haltSale;\r\n\r\n  // amount of wei raised in the presale\r\n  uint256 public weiRaised;\r\n\r\n  // FXX rate per ETH: 1300FXX/1ETH during presale\r\n  uint256 public presaleRate = (1300 * (10 ** uint256(18)))/(1 ether);\r\n\r\n  // Token pruchase event notification\r\n  event TokenPurchase(address indexed purchaser, uint256 value, uint256 amount);\r\n\r\n  function FornicoinPresale(address _wallet, uint256 _startTime, address _admin) {\r\n    require(_startTime >= now);\r\n    require(_wallet != 0x0);\r\n\r\n    admin = _admin;\r\n    startPresale = _startTime;\r\n    endPresale = startPresale + 7 days;\r\n    wallet = _wallet;\r\n  }\r\n\r\n  // Halt the presale in case of emergency\r\n  function setHaltSale( bool halt ) {\r\n        require( msg.sender == admin );\r\n        haltSale = halt;\r\n    }\r\n\r\n  // fallback function can be used to buy tokens\r\n  function () payable {\r\n    buyTokens();\r\n  }\r\n\r\n  // low level token purchase function\r\n  function buyTokens() public payable {\r\n    require(tx.gasprice <= 50000000000 wei);\r\n    require(!haltSale);\r\n    require(!hasEnded());\r\n    require(validPurchase());\r\n\r\n    uint256 weiAmount = msg.value;\r\n\r\n    // calculate token amount to be created\r\n    uint256 tokens = weiAmount.mul(presaleRate);\r\n\r\n    // add contributor and value to mapping\r\n    contributors[msg.sender] = contributors[msg.sender].add(tokens);\r\n\r\n    // update state\r\n    weiRaised = weiRaised.add(weiAmount);\r\n\r\n    // Send out event on network\r\n    TokenPurchase(msg.sender, weiAmount, tokens);\r\n\r\n    // forward contribution funds to secure address\r\n    forwardFunds();\r\n  }\r\n\r\n  function forwardFunds() internal {\r\n    wallet.transfer(msg.value);\r\n  }\r\n\r\n  // @return true if the transaction can buy tokens\r\n  // Purchases must be greater than 2 ETH\r\n  function validPurchase() internal constant returns (bool) {\r\n    bool withinPeriod = now >= startPresale && now <= endPresale;\r\n    bool nonZeroPurchase = msg.value >= 2 ether;\r\n    return withinPeriod && nonZeroPurchase;\r\n  }\r\n\r\n// ETH balance is always expected to be 0.\r\n// but in case something went wrong, we use this function to extract the eth.\r\nfunction emergencyDrain(ERC20 anyToken) returns(bool){\r\n    require(msg.sender == admin);\r\n    require(hasEnded());\r\n\r\n    if(this.balance > 0) {\r\n        wallet.transfer(this.balance);\r\n    }\r\n\r\n    if(anyToken != address(0x0)) {\r\n        assert(anyToken.transfer(wallet, anyToken.balanceOf(this)));\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\n  // @return true if crowdsale event has ended\r\n  function hasEnded() public constant returns (bool) {\r\n    return now > endPresale;\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"startPresale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presaleRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"haltSale\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"halt\",\"type\":\"bool\"}],\"name\":\"setHaltSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"anyToken\",\"type\":\"address\"}],\"name\":\"emergencyDrain\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endPresale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_startTime\",\"type\":\"uint256\"},{\"name\":\"_admin\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"}]","ContractName":"FornicoinPresale","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000358eb6af1c0ea663e0ee65eca583c86aa4e6a59b000000000000000000000000000000000000000000000000000000005a456960000000000000000000000000550dc91c87edab2173cd71eb4046648fb7c183be","Library":"","SwarmSource":"bzzr://f24a48fea8d34e6c940b55880f0b9a42528119d064b0f25b706dfec313ad4e64"}]}