{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.15;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    function Ownable() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) onlyOwner public {\r\n        require(newOwner != address(0));\r\n        OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n}\r\n\r\n\r\n/*\r\n    Copyright 2016, Jordi Baylina\r\n\r\n    This program is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    This program is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n    GNU General Public License for more details.\r\n\r\n    You should have received a copy of the GNU General Public License\r\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n\r\n/// @title MiniMeToken Contract\r\n/// @author Jordi Baylina\r\n/// @dev This token contract's goal is to make it easy for anyone to clone this\r\n///  token using the token distribution at a given block, this will allow DAO's\r\n///  and DApps to upgrade their features in a decentralized manner without\r\n///  affecting the original token\r\n/// @dev It is ERC20 compliant, but still needs to under go further testing.\r\n\r\n\r\n/// @dev The token controller contract must implement these functions\r\ncontract TokenController {\r\n    /// @notice Called when `_owner` sends ether to the MiniMe Token contract\r\n    /// @param _owner The address that sent the ether to create tokens\r\n    /// @return True if the ether is accepted, false if it throws\r\n    function proxyPayment(address _owner) payable returns(bool);\r\n\r\n    /// @notice Notifies the controller about a token transfer allowing the\r\n    ///  controller to react if desired\r\n    /// @param _from The origin of the transfer\r\n    /// @param _to The destination of the transfer\r\n    /// @param _amount The amount of the transfer\r\n    /// @return False if the controller does not authorize the transfer\r\n    function onTransfer(address _from, address _to, uint256 _amount) returns(bool);\r\n\r\n    /// @notice Notifies the controller about an approval allowing the\r\n    ///  controller to react if desired\r\n    /// @param _owner The address that calls `approve()`\r\n    /// @param _spender The spender in the `approve()` call\r\n    /// @param _amount The amount in the `approve()` call\r\n    /// @return False if the controller does not authorize the approval\r\n    function onApprove(address _owner, address _spender, uint256 _amount)\r\n    returns(bool);\r\n}\r\n\r\ncontract Controlled {\r\n    /// @notice The address of the controller is the only address that can call\r\n    ///  a function with this modifier\r\n    modifier onlyController { require(msg.sender == controller); _; }\r\n\r\n    address public controller;\r\n\r\n    function Controlled() { controller = msg.sender;}\r\n\r\n    /// @notice Changes the controller of the contract\r\n    /// @param _newController The new controller of the contract\r\n    function changeController(address _newController) onlyController {\r\n        controller = _newController;\r\n    }\r\n}\r\n\r\ncontract ApproveAndCallFallBack {\r\n    function receiveApproval(address from, uint256 _amount, address _token, bytes _data);\r\n}\r\n\r\n/// @dev The actual token contract, the default controller is the msg.sender\r\n///  that deploys the contract, so usually this token will be deployed by a\r\n///  token controller contract, which Giveth will call a \"Campaign\"\r\ncontract MiniMeToken is Controlled {\r\n\r\n    string public name;                //The Token's name: e.g. DigixDAO Tokens\r\n    uint8 public decimals;             //Number of decimals of the smallest unit\r\n    string public symbol;              //An identifier: e.g. REP\r\n    string public version = 'MMT_0.1'; //An arbitrary versioning scheme\r\n\r\n\r\n    /// @dev `Checkpoint` is the structure that attaches a block number to a\r\n    ///  given value, the block number attached is the one that last changed the\r\n    ///  value\r\n    struct  Checkpoint {\r\n\r\n    // `fromBlock` is the block number that the value was generated from\r\n    uint128 fromBlock;\r\n\r\n    // `value` is the amount of tokens at a specific block number\r\n    uint128 value;\r\n    }\r\n\r\n    // `parentToken` is the Token address that was cloned to produce this token;\r\n    //  it will be 0x0 for a token that was not cloned\r\n    MiniMeToken public parentToken;\r\n\r\n    // `parentSnapShotBlock` is the block number from the Parent Token that was\r\n    //  used to determine the initial distribution of the Clone Token\r\n    uint256 public parentSnapShotBlock;\r\n\r\n    // `creationBlock` is the block number that the Clone Token was created\r\n    uint256 public creationBlock;\r\n\r\n    // `balances` is the map that tracks the balance of each address, in this\r\n    //  contract when the balance changes the block number that the change\r\n    //  occurred is also included in the map\r\n    mapping (address => Checkpoint[]) balances;\r\n\r\n    // `allowed` tracks any extra transfer rights as in all ERC20 tokens\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n\r\n    // Tracks the history of the `totalSupply` of the token\r\n    Checkpoint[] totalSupplyHistory;\r\n\r\n    // Flag that determines if the token is transferable or not.\r\n    bool public transfersEnabled;\r\n\r\n    // The factory used to create new clone tokens\r\n    MiniMeTokenFactory public tokenFactory;\r\n\r\n    ////////////////\r\n    // Constructor\r\n    ////////////////\r\n\r\n    /// @notice Constructor to create a MiniMeToken\r\n    /// @param _tokenFactory The address of the MiniMeTokenFactory contract that\r\n    ///  will create the Clone token contracts, the token factory needs to be\r\n    ///  deployed first\r\n    /// @param _parentToken Address of the parent token, set to 0x0 if it is a\r\n    ///  new token\r\n    /// @param _parentSnapShotBlock Block of the parent token that will\r\n    ///  determine the initial distribution of the clone token, set to 0 if it\r\n    ///  is a new token\r\n    /// @param _tokenName Name of the new token\r\n    /// @param _decimalUnits Number of decimals of the new token\r\n    /// @param _tokenSymbol Token Symbol for the new token\r\n    /// @param _transfersEnabled If true, tokens will be able to be transferred\r\n    function MiniMeToken(\r\n        address _tokenFactory,\r\n        address _parentToken,\r\n        uint256 _parentSnapShotBlock,\r\n        string _tokenName,\r\n        uint8 _decimalUnits,\r\n        string _tokenSymbol,\r\n        bool _transfersEnabled\r\n    ) {\r\n        tokenFactory = MiniMeTokenFactory(_tokenFactory);\r\n        name = _tokenName;                                 // Set the name\r\n        decimals = _decimalUnits;                          // Set the decimals\r\n        symbol = _tokenSymbol;                             // Set the symbol\r\n        parentToken = MiniMeToken(_parentToken);\r\n        parentSnapShotBlock = _parentSnapShotBlock;\r\n        transfersEnabled = _transfersEnabled;\r\n        creationBlock = block.number;\r\n    }\r\n\r\n\r\n    ///////////////////\r\n    // ERC20 Methods\r\n    ///////////////////\r\n\r\n    /// @notice Send `_amount` tokens to `_to` from `msg.sender`\r\n    /// @param _to The address of the recipient\r\n    /// @param _amount The amount of tokens to be transferred\r\n    /// @return Whether the transfer was successful or not\r\n    function transfer(address _to, uint256 _amount) returns (bool success) {\r\n        require(transfersEnabled);\r\n        return doTransfer(msg.sender, _to, _amount);\r\n    }\r\n\r\n    /// @notice Send `_amount` tokens to `_to` from `_from` on the condition it\r\n    ///  is approved by `_from`\r\n    /// @param _from The address holding the tokens being transferred\r\n    /// @param _to The address of the recipient\r\n    /// @param _amount The amount of tokens to be transferred\r\n    /// @return True if the transfer was successful\r\n    function transferFrom(address _from, address _to, uint256 _amount\r\n    ) returns (bool success) {\r\n\r\n        // The controller of this contract can move tokens around at will,\r\n        //  this is important to recognize! Confirm that you trust the\r\n        //  controller of this contract, which in most situations should be\r\n        //  another open source smart contract or 0x0\r\n        if (msg.sender != controller) {\r\n            require(transfersEnabled);\r\n\r\n            // The standard ERC 20 transferFrom functionality\r\n            if (allowed[_from][msg.sender] < _amount) return false;\r\n            allowed[_from][msg.sender] -= _amount;\r\n        }\r\n        return doTransfer(_from, _to, _amount);\r\n    }\r\n\r\n    /// @dev This is the actual transfer function in the token contract, it can\r\n    ///  only be called by other functions in this contract.\r\n    /// @param _from The address holding the tokens being transferred\r\n    /// @param _to The address of the recipient\r\n    /// @param _amount The amount of tokens to be transferred\r\n    /// @return True if the transfer was successful\r\n    function doTransfer(address _from, address _to, uint256 _amount\r\n    ) internal returns(bool) {\r\n\r\n        if (_amount == 0) {\r\n            return true;\r\n        }\r\n\r\n        require(parentSnapShotBlock < block.number);\r\n\r\n        // Do not allow transfer to 0x0 or the token contract itself\r\n        require((_to != 0) && (_to != address(this)));\r\n\r\n        // If the amount being transfered is more than the balance of the\r\n        //  account the transfer returns false\r\n        var previousBalanceFrom = balanceOfAt(_from, block.number);\r\n        if (previousBalanceFrom < _amount) {\r\n            return false;\r\n        }\r\n\r\n        // Alerts the token controller of the transfer\r\n        if (isContract(controller)) {\r\n            require(TokenController(controller).onTransfer(_from, _to, _amount));\r\n        }\r\n\r\n        // First update the balance array with the new value for the address\r\n        //  sending the tokens\r\n        updateValueAtNow(balances[_from], previousBalanceFrom - _amount);\r\n\r\n        // Then update the balance array with the new value for the address\r\n        //  receiving the tokens\r\n        var previousBalanceTo = balanceOfAt(_to, block.number);\r\n        require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow\r\n        updateValueAtNow(balances[_to], previousBalanceTo + _amount);\r\n\r\n        // An event to make the transfer easy to find on the blockchain\r\n        Transfer(_from, _to, _amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    /// @param _owner The address that's balance is being requested\r\n    /// @return The balance of `_owner` at the current block\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {\r\n        return balanceOfAt(_owner, block.number);\r\n    }\r\n\r\n    /// @notice `msg.sender` approves `_spender` to spend `_amount` tokens on\r\n    ///  its behalf. This is a modified version of the ERC20 approve function\r\n    ///  to be a little bit safer\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @param _amount The amount of tokens to be approved for transfer\r\n    /// @return True if the approval was successful\r\n    function approve(address _spender, uint256 _amount) returns (bool success) {\r\n        require(transfersEnabled);\r\n\r\n        // To change the approve amount you first have to reduce the addresses`\r\n        //  allowance to zero by calling `approve(_spender,0)` if it is not\r\n        //  already 0 to mitigate the race condition described here:\r\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n        require((_amount == 0) || (allowed[msg.sender][_spender] == 0));\r\n\r\n        // Alerts the token controller of the approve function call\r\n        if (isContract(controller)) {\r\n            require(TokenController(controller).onApprove(msg.sender, _spender, _amount));\r\n        }\r\n\r\n        allowed[msg.sender][_spender] = _amount;\r\n        Approval(msg.sender, _spender, _amount);\r\n        return true;\r\n    }\r\n\r\n    /// @dev This function makes it easy to read the `allowed[]` map\r\n    /// @param _owner The address of the account that owns the token\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @return Amount of remaining tokens of _owner that _spender is allowed\r\n    ///  to spend\r\n    function allowance(address _owner, address _spender\r\n    ) constant returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    /// @notice `msg.sender` approves `_spender` to send `_amount` tokens on\r\n    ///  its behalf, and then a function is triggered in the contract that is\r\n    ///  being approved, `_spender`. This allows users to use their tokens to\r\n    ///  interact with contracts in one function call instead of two\r\n    /// @param _spender The address of the contract able to transfer the tokens\r\n    /// @param _amount The amount of tokens to be approved for transfer\r\n    /// @return True if the function call was successful\r\n    function approveAndCall(address _spender, uint256 _amount, bytes _extraData\r\n    ) returns (bool success) {\r\n        require(approve(_spender, _amount));\r\n\r\n        ApproveAndCallFallBack(_spender).receiveApproval(\r\n        msg.sender,\r\n        _amount,\r\n        this,\r\n        _extraData\r\n        );\r\n\r\n        return true;\r\n    }\r\n\r\n    /// @dev This function makes it easy to get the total number of tokens\r\n    /// @return The total number of tokens\r\n    function totalSupply() constant returns (uint) {\r\n        return totalSupplyAt(block.number);\r\n    }\r\n\r\n    ////////////////\r\n    // Query balance and totalSupply in History\r\n    ////////////////\r\n\r\n    /// @dev Queries the balance of `_owner` at a specific `_blockNumber`\r\n    /// @param _owner The address from which the balance will be retrieved\r\n    /// @param _blockNumber The block number when the balance is queried\r\n    /// @return The balance at `_blockNumber`\r\n    function balanceOfAt(address _owner, uint256 _blockNumber) constant\r\n    returns (uint) {\r\n\r\n        // These next few lines are used when the balance of the token is\r\n        //  requested before a check point was ever created for this token, it\r\n        //  requires that the `parentToken.balanceOfAt` be queried at the\r\n        //  genesis block for that token as this contains initial balance of\r\n        //  this token\r\n        if ((balances[_owner].length == 0)\r\n        || (balances[_owner][0].fromBlock > _blockNumber)) {\r\n            if (address(parentToken) != 0) {\r\n                return parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock));\r\n            } else {\r\n                // Has no parent\r\n                return 0;\r\n            }\r\n\r\n            // This will return the expected balance during normal situations\r\n        } else {\r\n            return getValueAt(balances[_owner], _blockNumber);\r\n        }\r\n    }\r\n\r\n    /// @notice Total amount of tokens at a specific `_blockNumber`.\r\n    /// @param _blockNumber The block number when the totalSupply is queried\r\n    /// @return The total amount of tokens at `_blockNumber`\r\n    function totalSupplyAt(uint256 _blockNumber) constant returns(uint) {\r\n\r\n        // These next few lines are used when the totalSupply of the token is\r\n        //  requested before a check point was ever created for this token, it\r\n        //  requires that the `parentToken.totalSupplyAt` be queried at the\r\n        //  genesis block for this token as that contains totalSupply of this\r\n        //  token at this block number.\r\n        if ((totalSupplyHistory.length == 0)\r\n        || (totalSupplyHistory[0].fromBlock > _blockNumber)) {\r\n            if (address(parentToken) != 0) {\r\n                return parentToken.totalSupplyAt(min(_blockNumber, parentSnapShotBlock));\r\n            } else {\r\n                return 0;\r\n            }\r\n\r\n            // This will return the expected totalSupply during normal situations\r\n        } else {\r\n            return getValueAt(totalSupplyHistory, _blockNumber);\r\n        }\r\n    }\r\n\r\n    ////////////////\r\n    // Clone Token Method\r\n    ////////////////\r\n\r\n    /// @notice Creates a new clone token with the initial distribution being\r\n    ///  this token at `_snapshotBlock`\r\n    /// @param _cloneTokenName Name of the clone token\r\n    /// @param _cloneDecimalUnits Number of decimals of the smallest unit\r\n    /// @param _cloneTokenSymbol Symbol of the clone token\r\n    /// @param _snapshotBlock Block when the distribution of the parent token is\r\n    ///  copied to set the initial distribution of the new clone token;\r\n    ///  if the block is zero than the actual block, the current block is used\r\n    /// @param _transfersEnabled True if transfers are allowed in the clone\r\n    /// @return The address of the new MiniMeToken Contract\r\n    function createCloneToken(\r\n    string _cloneTokenName,\r\n    uint8 _cloneDecimalUnits,\r\n    string _cloneTokenSymbol,\r\n    uint256 _snapshotBlock,\r\n    bool _transfersEnabled\r\n    ) returns(address) {\r\n        if (_snapshotBlock == 0) _snapshotBlock = block.number;\r\n        MiniMeToken cloneToken = tokenFactory.createCloneToken(\r\n        this,\r\n        _snapshotBlock,\r\n        _cloneTokenName,\r\n        _cloneDecimalUnits,\r\n        _cloneTokenSymbol,\r\n        _transfersEnabled\r\n        );\r\n\r\n        cloneToken.changeController(msg.sender);\r\n\r\n        // An event to make the token easy to find on the blockchain\r\n        NewCloneToken(address(cloneToken), _snapshotBlock);\r\n        return address(cloneToken);\r\n    }\r\n\r\n    ////////////////\r\n    // Generate and destroy tokens\r\n    ////////////////\r\n\r\n    /// @notice Generates `_amount` tokens that are assigned to `_owner`\r\n    /// @param _owner The address that will be assigned the new tokens\r\n    /// @param _amount The quantity of tokens generated\r\n    /// @return True if the tokens are generated correctly\r\n    function generateTokens(address _owner, uint256 _amount\r\n    ) onlyController returns (bool) {\r\n        uint256 curTotalSupply = totalSupply();\r\n        require(curTotalSupply + _amount >= curTotalSupply); // Check for overflow\r\n        uint256 previousBalanceTo = balanceOf(_owner);\r\n        require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow\r\n        updateValueAtNow(totalSupplyHistory, curTotalSupply + _amount);\r\n        updateValueAtNow(balances[_owner], previousBalanceTo + _amount);\r\n        Transfer(0, _owner, _amount);\r\n        return true;\r\n    }\r\n\r\n\r\n    /// @notice Burns `_amount` tokens from `_owner`\r\n    /// @param _owner The address that will lose the tokens\r\n    /// @param _amount The quantity of tokens to burn\r\n    /// @return True if the tokens are burned correctly\r\n    function destroyTokens(address _owner, uint256 _amount\r\n    ) onlyController returns (bool) {\r\n        uint256 curTotalSupply = totalSupply();\r\n        require(curTotalSupply >= _amount);\r\n        uint256 previousBalanceFrom = balanceOf(_owner);\r\n        require(previousBalanceFrom >= _amount);\r\n        updateValueAtNow(totalSupplyHistory, curTotalSupply - _amount);\r\n        updateValueAtNow(balances[_owner], previousBalanceFrom - _amount);\r\n        Transfer(_owner, 0, _amount);\r\n        return true;\r\n    }\r\n\r\n    ////////////////\r\n    // Enable tokens transfers\r\n    ////////////////\r\n\r\n    /// @notice Enables token holders to transfer their tokens freely if true\r\n    /// @param _transfersEnabled True if transfers are allowed in the clone\r\n    function enableTransfers(bool _transfersEnabled) onlyController {\r\n        transfersEnabled = _transfersEnabled;\r\n    }\r\n\r\n    ////////////////\r\n    // Internal helper functions to query and set a value in a snapshot array\r\n    ////////////////\r\n\r\n    /// @dev `getValueAt` retrieves the number of tokens at a given block number\r\n    /// @param checkpoints The history of values being queried\r\n    /// @param _block The block number to retrieve the value at\r\n    /// @return The number of tokens being queried\r\n    function getValueAt(Checkpoint[] storage checkpoints, uint256 _block\r\n    ) constant internal returns (uint) {\r\n        if (checkpoints.length == 0) return 0;\r\n\r\n        // Shortcut for the actual value\r\n        if (_block >= checkpoints[checkpoints.length-1].fromBlock)\r\n        return checkpoints[checkpoints.length-1].value;\r\n        if (_block < checkpoints[0].fromBlock) return 0;\r\n\r\n        // Binary search of the value in the array\r\n        uint256 min = 0;\r\n        uint256 max = checkpoints.length-1;\r\n        while (max > min) {\r\n            uint256 mid = (max + min + 1)/ 2;\r\n            if (checkpoints[mid].fromBlock<=_block) {\r\n                min = mid;\r\n            } else {\r\n                max = mid-1;\r\n            }\r\n        }\r\n        return checkpoints[min].value;\r\n    }\r\n\r\n    /// @dev `updateValueAtNow` used to update the `balances` map and the\r\n    ///  `totalSupplyHistory`\r\n    /// @param checkpoints The history of data being updated\r\n    /// @param _value The new number of tokens\r\n    function updateValueAtNow(Checkpoint[] storage checkpoints, uint256 _value\r\n    ) internal  {\r\n        if ((checkpoints.length == 0)\r\n        || (checkpoints[checkpoints.length -1].fromBlock < block.number)) {\r\n            Checkpoint storage newCheckPoint = checkpoints[ checkpoints.length++ ];\r\n            newCheckPoint.fromBlock =  uint128(block.number);\r\n            newCheckPoint.value = uint128(_value);\r\n        } else {\r\n            Checkpoint storage oldCheckPoint = checkpoints[checkpoints.length-1];\r\n            oldCheckPoint.value = uint128(_value);\r\n        }\r\n    }\r\n\r\n    /// @dev Internal function to determine if an address is a contract\r\n    /// @param _addr The address being queried\r\n    /// @return True if `_addr` is a contract\r\n    function isContract(address _addr) constant internal returns(bool) {\r\n        uint256 size;\r\n        if (_addr == 0) return false;\r\n        assembly {\r\n            size := extcodesize(_addr)\r\n        }\r\n        return size>0;\r\n    }\r\n\r\n    /// @dev Helper function to return a min betwen the two uints\r\n    function min(uint256 a, uint256 b) internal returns (uint) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /// @notice The fallback function: If the contract's controller has not been\r\n    ///  set to 0, then the `proxyPayment` method is called which relays the\r\n    ///  ether and creates tokens as described in the token controller contract\r\n    function ()  payable {\r\n        require(isContract(controller));\r\n        require(TokenController(controller).proxyPayment.value(msg.value)(msg.sender));\r\n    }\r\n\r\n    //////////\r\n    // Safety Methods\r\n    //////////\r\n\r\n    /// @notice This method can be used by the controller to extract mistakenly\r\n    ///  sent tokens to this contract.\r\n    /// @param _token The address of the token contract that you want to recover\r\n    ///  set to 0 in case you want to extract ether.\r\n    function claimTokens(address _token) onlyController {\r\n        if (_token == 0x0) {\r\n            controller.transfer(this.balance);\r\n            return;\r\n        }\r\n\r\n        MiniMeToken token = MiniMeToken(_token);\r\n        uint256 balance = token.balanceOf(this);\r\n        token.transfer(controller, balance);\r\n        ClaimedTokens(_token, controller, balance);\r\n    }\r\n\r\n    ////////////////\r\n    // Events\r\n    ////////////////\r\n    event ClaimedTokens(address indexed _token, address indexed _controller, uint256 _amount);\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _amount);\r\n    event NewCloneToken(address indexed _cloneToken, uint256 _snapshotBlock);\r\n    event Approval(\r\n        address indexed _owner,\r\n        address indexed _spender,\r\n        uint256 _amount\r\n    );\r\n\r\n}\r\n\r\n////////////////\r\n// MiniMeTokenFactory\r\n////////////////\r\n\r\n/// @dev This contract is used to generate clone contracts from a contract.\r\n///  In solidity this is the way to create a contract from a contract of the\r\n///  same class\r\ncontract MiniMeTokenFactory {\r\n\r\n    /// @notice Update the DApp by creating a new token with new functionalities\r\n    ///  the msg.sender becomes the controller of this clone token\r\n    /// @param _parentToken Address of the token being cloned\r\n    /// @param _snapshotBlock Block of the parent token that will\r\n    ///  determine the initial distribution of the clone token\r\n    /// @param _tokenName Name of the new token\r\n    /// @param _decimalUnits Number of decimals of the new token\r\n    /// @param _tokenSymbol Token Symbol for the new token\r\n    /// @param _transfersEnabled If true, tokens will be able to be transferred\r\n    /// @return The address of the new token contract\r\n    function createCloneToken(\r\n        address _parentToken,\r\n        uint256 _snapshotBlock,\r\n        string _tokenName,\r\n        uint8 _decimalUnits,\r\n        string _tokenSymbol,\r\n        bool _transfersEnabled\r\n    ) returns (MiniMeToken) {\r\n        MiniMeToken newToken = new MiniMeToken(\r\n            this,\r\n            _parentToken,\r\n            _snapshotBlock,\r\n            _tokenName,\r\n            _decimalUnits,\r\n            _tokenSymbol,\r\n            _transfersEnabled\r\n        );\r\n\r\n        newToken.changeController(msg.sender);\r\n        return newToken;\r\n    }\r\n}\r\n\r\ncontract TokenBurner {\r\n    function burn(address , uint256 )\r\n    returns (bool result) {\r\n        return false;\r\n    }\r\n}\r\n\r\ncontract FiinuToken is MiniMeToken, Ownable {\r\n\r\n    TokenBurner public tokenBurner;\r\n\r\n    function FiinuToken(address _tokenFactory)\r\n    MiniMeToken(\r\n        _tokenFactory,\r\n        0x0,                     // no parent token\r\n        0,                       // no snapshot block number from parent\r\n        \"Fiinu Token\",           // Token name\r\n        6,                       // Decimals\r\n        \"FNU\",                   // Symbol\r\n        true                    // Enable transfers\r\n    )\r\n    {}\r\n\r\n    function setTokenBurner(address _tokenBurner) onlyOwner {\r\n        tokenBurner = TokenBurner(_tokenBurner);\r\n    }\r\n\r\n    // allows a token holder to burn tokens\r\n    // requires tokenBurner to be set to a valid contract address\r\n    // tokenBurner can take any appropriate action\r\n    function burn(uint256 _amount) {\r\n        uint256 curTotalSupply = totalSupply();\r\n        require(curTotalSupply >= _amount);\r\n        uint256 previousBalanceFrom = balanceOf(msg.sender);\r\n        require(previousBalanceFrom >= _amount);\r\n        updateValueAtNow(totalSupplyHistory, curTotalSupply - _amount);\r\n        updateValueAtNow(balances[msg.sender], previousBalanceFrom - _amount);\r\n        assert(tokenBurner.burn(msg.sender, _amount));\r\n        Transfer(msg.sender, 0, _amount);\r\n    }\r\n\r\n}\r\n\r\ncontract Milestones is Ownable {\r\n\r\n    enum State { PreIco, IcoOpen, IcoClosed, IcoSuccessful, IcoFailed, BankLicenseSuccessful, BankLicenseFailed }\r\n\r\n    event Milestone(string _announcement, State _state);\r\n\r\n    State public state = State.PreIco;\r\n    bool public tradingOpen = false;\r\n\r\n    modifier inState(State _state) {\r\n        require(state == _state);\r\n        _;\r\n    }\r\n\r\n    modifier isTradingOpen() {\r\n        require(tradingOpen);\r\n        _;\r\n    }\r\n\r\n    function Milestone_OpenTheIco(string _announcement) onlyOwner inState(State.PreIco) {\r\n        state = State.IcoOpen;\r\n        Milestone(_announcement, state);\r\n    }\r\n\r\n    function Milestone_CloseTheIco(string _announcement) onlyOwner inState(State.IcoOpen) {\r\n        state = State.IcoClosed;\r\n        Milestone(_announcement, state);\r\n    }\r\n\r\n    function Milestone_IcoSuccessful(string _announcement) onlyOwner inState(State.IcoClosed) {\r\n        state = State.IcoSuccessful;\r\n        Milestone(_announcement, state);\r\n    }\r\n\r\n    function Milestone_IcoFailed(string _announcement) onlyOwner inState(State.IcoClosed) {\r\n        state = State.IcoFailed;\r\n        Milestone(_announcement, state);\r\n    }\r\n\r\n    function Milestone_BankLicenseSuccessful(string _announcement) onlyOwner inState(State.IcoSuccessful) {\r\n        tradingOpen = true;\r\n        state = State.BankLicenseSuccessful;\r\n        Milestone(_announcement, state);\r\n    }\r\n\r\n    function Milestone_BankLicenseFailed(string _announcement) onlyOwner inState(State.IcoSuccessful) {\r\n        state = State.BankLicenseFailed;\r\n        Milestone(_announcement, state);\r\n    }\r\n\r\n}\r\n\r\ncontract Investors is Milestones {\r\n\r\n    struct WhitelistEntry {\r\n        uint256 max;\r\n        uint256 total;\r\n        bool init;\r\n    }\r\n\r\n    mapping(address => bool) internal admins;\r\n    mapping(address => WhitelistEntry) approvedInvestors;\r\n\r\n    modifier onlyAdmins() {\r\n        require(admins[msg.sender] == true);\r\n        _;\r\n    }\r\n\r\n    function manageInvestors(address _investors_wallet_address, uint256 _max_approved_investment) onlyAdmins {\r\n        if(approvedInvestors[_investors_wallet_address].init){\r\n            approvedInvestors[_investors_wallet_address].max = SafeMath.mul(_max_approved_investment, 10 ** 18); // ETH to WEI\r\n            // clean up\r\n            if(approvedInvestors[_investors_wallet_address].max == 0 && approvedInvestors[_investors_wallet_address].total == 0)\r\n            delete approvedInvestors[_investors_wallet_address];\r\n        }\r\n        else{\r\n            approvedInvestors[_investors_wallet_address] = WhitelistEntry(SafeMath.mul(_max_approved_investment, 10 ** 18), 0, true);\r\n        }\r\n    }\r\n\r\n    function manageAdmins(address _address, bool _add) onlyOwner {\r\n        admins[_address] = _add;\r\n    }\r\n\r\n}\r\n\r\ncontract FiinuCrowdSale is TokenController, Investors {\r\n    using SafeMath for uint256;\r\n\r\n    event Investment(address indexed _investor, uint256 _valueEth, uint256 _valueFnu);\r\n    event RefundAdded(address indexed _refunder, uint256 _valueEth);\r\n    event RefundEnabled(uint256 _valueEth);\r\n\r\n    address wallet;\r\n    address public staff_1 = 0x2717FCee32b2896E655Ad82EfF81987A34EFF3E7;\r\n    address public staff_2 = 0x7ee4471C371e581Af42b280CD19Ed7593BD7D15F;\r\n    address public staff_3 = 0xE6BeCcc43b48416CE69B6d03c2e44E2B7b8F77b4;\r\n    address public staff_4 = 0x3369De7Ff98bd5C225a67E09ac81aFa7b5dF3d3d;\r\n\r\n    uint256 constant minRaisedWei = 20000 ether;\r\n    uint256 constant targetRaisedWei = 100000 ether;\r\n    uint256 constant maxRaisedWei = 400000 ether;\r\n    uint256 public raisedWei = 0;\r\n    uint256 public refundWei = 0;\r\n\r\n    bool public refundOpen = false;\r\n\r\n    MiniMeToken public tokenContract;   // The new token for this Campaign\r\n\r\n    function FiinuCrowdSale(address _wallet, address _tokenAddress) {\r\n        wallet = _wallet; // multi sig wallet\r\n        tokenContract = MiniMeToken(_tokenAddress);// The Deployed Token Contract\r\n    }\r\n\r\n    /////////////////\r\n    // TokenController interface\r\n    /////////////////\r\n\r\n    /// @notice `proxyPayment()` returns false, meaning ether is not accepted at\r\n    ///  the token address, only the address of FiinuCrowdSale\r\n    /// @param _owner The address that will hold the newly created tokens\r\n\r\n    function proxyPayment(address _owner) payable returns(bool) {\r\n        return false;\r\n    }\r\n\r\n    /// @notice Notifies the controller about a transfer, for this Campaign all\r\n    ///  transfers are allowed by default and no extra notifications are needed\r\n    /// @param _from The origin of the transfer\r\n    /// @param _to The destination of the transfer\r\n    /// @param _amount The amount of the transfer\r\n    /// @return False if the controller does not authorize the transfer\r\n    function onTransfer(address _from, address _to, uint256 _amount) returns(bool) {\r\n        return tradingOpen;\r\n    }\r\n\r\n    /// @notice Notifies the controller about an approval, for this Campaign all\r\n    ///  approvals are allowed by default and no extra notifications are needed\r\n    /// @param _owner The address that calls `approve()`\r\n    /// @param _spender The spender in the `approve()` call\r\n    /// @param _amount The amount in the `approve()` call\r\n    /// @return False if the controller does not authorize the approval\r\n    function onApprove(address _owner, address _spender, uint256 _amount)\r\n    returns(bool)\r\n    {\r\n        return true;\r\n    }\r\n\r\n    function weiToFNU(uint256 _wei) public constant returns (uint){\r\n        uint256 _return;\r\n        // 1 FNU = 0.75 ETH\r\n        if(state == State.PreIco){\r\n            _return = _wei.add(_wei.div(3));\r\n        }\r\n        else {\r\n            // 1 FNU = 1 ETH\r\n            if(raisedWei < targetRaisedWei){\r\n                _return = _wei;\r\n            } else {\r\n                // 1 FNU = raisedWei / targetRaisedWei\r\n                _return = _wei.mul(targetRaisedWei).div(raisedWei);\r\n            }\r\n        }\r\n        // WEI to FNU\r\n        return _return.div(10 ** 12);\r\n    }\r\n\r\n    function () payable { // incoming investment in the state of PreIco or IcoOpen\r\n\r\n        require(msg.value != 0); // incoming transaction must have value\r\n        require(state == State.PreIco || state == State.IcoOpen);\r\n        require(approvedInvestors[msg.sender].init == true); // is approved investor\r\n        require(approvedInvestors[msg.sender].max >= approvedInvestors[msg.sender].total.add(msg.value)); // investment is not breaching max approved investment amount\r\n        require(maxRaisedWei >= raisedWei.add(msg.value)); // investment is not breaching max raising limit\r\n\r\n        uint256 _fnu = weiToFNU(msg.value);\r\n        require(_fnu > 0);\r\n\r\n        raisedWei = raisedWei.add(msg.value);\r\n        approvedInvestors[msg.sender].total = approvedInvestors[msg.sender].total.add(msg.value); // increase total invested\r\n        mint(msg.sender, _fnu); // Mint the tokens\r\n        wallet.transfer(msg.value); // Move ETH to multi sig wallet\r\n        Investment(msg.sender, msg.value, _fnu); // Announce investment\r\n    }\r\n\r\n    function refund() payable {\r\n        require(msg.value != 0); // incoming transaction must have value\r\n        require(state == State.IcoClosed || state == State.IcoSuccessful || state == State.IcoFailed || state == State.BankLicenseFailed);\r\n        refundWei = refundWei.add(msg.value);\r\n        RefundAdded(msg.sender, msg.value);\r\n    }\r\n\r\n    function Milestone_IcoSuccessful(string _announcement) onlyOwner {\r\n        require(raisedWei >= minRaisedWei);\r\n        uint256 _toBeAllocated = tokenContract.totalSupply();\r\n        _toBeAllocated = _toBeAllocated.div(10);\r\n        mint(staff_1, _toBeAllocated.mul(81).div(100)); // 81%\r\n        mint(staff_2, _toBeAllocated.mul(9).div(100)); // 9%\r\n        mint(staff_3, _toBeAllocated.mul(15).div(1000));  // 1.5%\r\n        mint(staff_4, _toBeAllocated.mul(15).div(1000)); // 1.5%\r\n        mint(owner, _toBeAllocated.mul(7).div(100)); // 7%\r\n        super.Milestone_IcoSuccessful(_announcement);\r\n    }\r\n\r\n    function Milestone_IcoFailed(string _announcement) onlyOwner {\r\n        require(raisedWei < minRaisedWei);\r\n        super.Milestone_IcoFailed(_announcement);\r\n    }\r\n\r\n    function Milestone_BankLicenseFailed(string _announcement) onlyOwner {\r\n        // remove staff allocations\r\n        burn(staff_1);\r\n        burn(staff_2);\r\n        burn(staff_3);\r\n        burn(staff_4);\r\n        burn(owner);\r\n        super.Milestone_BankLicenseFailed(_announcement);\r\n    }\r\n\r\n    function EnableRefund() onlyOwner {\r\n        require(state == State.IcoFailed || state == State.BankLicenseFailed);\r\n        require(refundWei > 0);\r\n        refundOpen = true;\r\n        RefundEnabled(refundWei);\r\n    }\r\n\r\n    // handle automatic refunds\r\n    function RequestRefund() public {\r\n        require(refundOpen);\r\n        require(state == State.IcoFailed || state == State.BankLicenseFailed);\r\n        require(tokenContract.balanceOf(msg.sender) > 0); // you must have some FNU to request refund\r\n        // refund prorata against your ETH investment\r\n        uint256 refundAmount = refundWei.mul(approvedInvestors[msg.sender].total).div(raisedWei);\r\n        burn(msg.sender);\r\n        msg.sender.transfer(refundAmount);\r\n    }\r\n\r\n    // minting possible only if State.PreIco and State.IcoOpen for () payable or State.IcoClosed for investFIAT()\r\n    function mint(address _to, uint256 _tokens) internal {\r\n        tokenContract.generateTokens(_to, _tokens);\r\n    }\r\n\r\n    // burning only in State.ICOcompleted for Milestone_BankLicenseFailed() or State.BankLicenseFailed for RequestRefund()\r\n    function burn(address _address) internal {\r\n        tokenContract.destroyTokens(_address, tokenContract.balanceOf(_address));\r\n    }\r\n}\r\n\r\ncontract ProfitSharing is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    event DividendDeposited(address indexed _depositor, uint256 _blockNumber, uint256 _amount, uint256 _totalSupply, uint256 _dividendIndex);\r\n    event DividendClaimed(address indexed _claimer, uint256 _dividendIndex, uint256 _claim);\r\n    event DividendRecycled(address indexed _recycler, uint256 _blockNumber, uint256 _amount, uint256 _totalSupply, uint256 _dividendIndex);\r\n\r\n    MiniMeToken public token;\r\n\r\n    uint256 public RECYCLE_TIME = 1 years;\r\n\r\n    struct Dividend {\r\n        uint256 blockNumber;\r\n        uint256 timestamp;\r\n        uint256 amount;\r\n        uint256 claimedAmount;\r\n        uint256 totalSupply;\r\n        bool recycled;\r\n        mapping (address => bool) claimed;\r\n    }\r\n\r\n    Dividend[] public dividends;\r\n\r\n    mapping (address => uint256) dividendsClaimed;\r\n\r\n    modifier validDividendIndex(uint256 _dividendIndex) {\r\n        require(_dividendIndex < dividends.length);\r\n        _;\r\n    }\r\n\r\n    function ProfitSharing(address _token) {\r\n        token = MiniMeToken(_token);\r\n    }\r\n\r\n    function depositDividend() payable\r\n    onlyOwner\r\n    {\r\n        uint256 currentSupply = token.totalSupplyAt(block.number);\r\n        uint256 dividendIndex = dividends.length;\r\n        uint256 blockNumber = SafeMath.sub(block.number, 1);\r\n        dividends.push(\r\n            Dividend(\r\n                blockNumber,\r\n                getNow(),\r\n                msg.value,\r\n                0,\r\n                currentSupply,\r\n                false\r\n            )\r\n        );\r\n        DividendDeposited(msg.sender, blockNumber, msg.value, currentSupply, dividendIndex);\r\n    }\r\n\r\n    function claimDividend(uint256 _dividendIndex) public\r\n    validDividendIndex(_dividendIndex)\r\n    {\r\n        Dividend storage dividend = dividends[_dividendIndex];\r\n        require(dividend.claimed[msg.sender] == false);\r\n        require(dividend.recycled == false);\r\n        uint256 balance = token.balanceOfAt(msg.sender, dividend.blockNumber);\r\n        uint256 claim = balance.mul(dividend.amount).div(dividend.totalSupply);\r\n        dividend.claimed[msg.sender] = true;\r\n        dividend.claimedAmount = SafeMath.add(dividend.claimedAmount, claim);\r\n        if (claim > 0) {\r\n            msg.sender.transfer(claim);\r\n            DividendClaimed(msg.sender, _dividendIndex, claim);\r\n        }\r\n    }\r\n\r\n    function claimDividendAll() public {\r\n        require(dividendsClaimed[msg.sender] < dividends.length);\r\n        for (uint256 i = dividendsClaimed[msg.sender]; i < dividends.length; i++) {\r\n            if ((dividends[i].claimed[msg.sender] == false) && (dividends[i].recycled == false)) {\r\n                dividendsClaimed[msg.sender] = SafeMath.add(i, 1);\r\n                claimDividend(i);\r\n            }\r\n        }\r\n    }\r\n\r\n    function recycleDividend(uint256 _dividendIndex) public\r\n    onlyOwner\r\n    validDividendIndex(_dividendIndex)\r\n    {\r\n        Dividend storage dividend = dividends[_dividendIndex];\r\n        require(dividend.recycled == false);\r\n        require(dividend.timestamp < SafeMath.sub(getNow(), RECYCLE_TIME));\r\n        dividends[_dividendIndex].recycled = true;\r\n        uint256 currentSupply = token.totalSupplyAt(block.number);\r\n        uint256 remainingAmount = SafeMath.sub(dividend.amount, dividend.claimedAmount);\r\n        uint256 dividendIndex = dividends.length;\r\n        uint256 blockNumber = SafeMath.sub(block.number, 1);\r\n        dividends.push(\r\n            Dividend(\r\n                blockNumber,\r\n                getNow(),\r\n                remainingAmount,\r\n                0,\r\n                currentSupply,\r\n                false\r\n            )\r\n        );\r\n        DividendRecycled(msg.sender, blockNumber, remainingAmount, currentSupply, dividendIndex);\r\n    }\r\n\r\n    //Function is mocked for tests\r\n    function getNow() internal constant returns (uint256) {\r\n        return now;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"creationBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenBurner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newController\",\"type\":\"address\"}],\"name\":\"changeController\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"balanceOfAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_cloneTokenName\",\"type\":\"string\"},{\"name\":\"_cloneDecimalUnits\",\"type\":\"uint8\"},{\"name\":\"_cloneTokenSymbol\",\"type\":\"string\"},{\"name\":\"_snapshotBlock\",\"type\":\"uint256\"},{\"name\":\"_transfersEnabled\",\"type\":\"bool\"}],\"name\":\"createCloneToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"parentToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"generateTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"totalSupplyAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenBurner\",\"type\":\"address\"}],\"name\":\"setTokenBurner\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transfersEnabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"parentSnapShotBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"destroyTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"claimTokens\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenFactory\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_transfersEnabled\",\"type\":\"bool\"}],\"name\":\"enableTransfers\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tokenFactory\",\"type\":\"address\"}],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_controller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"ClaimedTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_cloneToken\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_snapshotBlock\",\"type\":\"uint256\"}],\"name\":\"NewCloneToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"FiinuToken","CompilerVersion":"v0.4.15+commit.bbb8e64f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000054c31704c1052ffa9922fb769277e9e5bafc0d92","Library":"","SwarmSource":"bzzr://befd8b88ff00bfbb79a3e110c1cf57434992fb06120d859cfe5232207b61d345"}]}