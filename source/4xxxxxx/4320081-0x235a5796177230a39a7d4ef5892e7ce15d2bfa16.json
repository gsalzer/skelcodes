{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13;\r\ncontract SafeMath {\r\n\r\n    function safeAdd(uint256 x, uint256 y) internal returns(uint256) {\r\n        uint256 z = x + y;\r\n        assert((z >= x) && (z >= y));\r\n        return z;\r\n    }\r\n\r\n    function safeSubtract(uint256 x, uint256 y) internal returns(uint256) {\r\n        assert(x >= y);\r\n        uint256 z = x - y;\r\n        return z;\r\n    }\r\n\r\n    function safeMult(uint256 x, uint256 y) internal returns(uint256) {\r\n        uint256 z = x * y;\r\n        assert((x == 0)||(z/x == y));\r\n        return z;\r\n    }\r\n}\r\n\r\ncontract Token {\r\n    uint256 public totalSupply;\r\n\r\n    function balanceOf(address _owner) constant returns (uint256 balance);\r\n    function transfer(address _to, uint256 _value) returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\r\n    function approve(address _spender, uint256 _value) returns (bool success);\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\n/*  ERC 20 token */\r\ncontract StandardToken is Token, SafeMath {\r\n\r\n    mapping (address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n\r\n    modifier onlyPayloadSize(uint numwords) {\r\n        assert(msg.data.length == numwords * 32 + 4);\r\n        _;\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value)\r\n    returns (bool success)\r\n    {\r\n        if (balances[msg.sender] >= _value && _value > 0 && balances[_to] + _value > balances[_to]) {\r\n            balances[msg.sender] = safeSubtract(balances[msg.sender], _value);\r\n            balances[_to] = safeAdd(balances[_to], _value);\r\n            Transfer(msg.sender, _to, _value);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value)\r\n    returns (bool success)\r\n    {\r\n        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0 && balances[_to] + _value > balances[_to]) {\r\n            balances[_to] = safeAdd(balances[_to], _value);\r\n            balances[_from] = safeSubtract(balances[_from], _value);\r\n            allowed[_from][msg.sender] = safeSubtract(allowed[_from][msg.sender], _value);\r\n            Transfer(_from, _to, _value);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value)\r\n    onlyPayloadSize(2)\r\n    returns (bool success)\r\n    {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender)\r\n    constant\r\n    onlyPayloadSize(2)\r\n    returns (uint256 remaining)\r\n    {\r\n        return allowed[_owner][_spender];\r\n    }\r\n}\r\ncontract PrivateCityTokens {\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\r\n}\r\n\r\n\r\ncontract PCXToken is StandardToken {\r\n\r\n    // Token metadata\r\n\tstring public name = \"PRIVATE CITY TOKENS EXCHANGE\";\r\n\tstring public symbol = \"PCTX\";\r\n    uint256 public constant decimals = 18;\r\n\r\n    // Deposit address of account controlled by the creators\r\n    address public ethFundDeposit = 0xFEfC687c084E6A77322519BEc3A9107640905445;\r\n    address public tokenExchangeAddress = 0x0d2d64c2c4ba21d08252661c3ca159982579b640;\r\n    address public tokenAccountAddress = 0xFEfC687c084E6A77322519BEc3A9107640905445;\r\n    //Access to token contract for vibe exchange\r\n    PrivateCityTokens public tokenExchange;\r\n\r\n    // Fundraising parameters\r\n    enum ContractState { Fundraising, Finalized, Redeeming, Paused }\r\n    ContractState public state;           // Current state of the contract\r\n    ContractState private savedState;     // State of the contract before pause\r\n\r\n    //start date: 08/07/2017 @ 12:00am (UTC)\r\n    uint public startDate = 1506521932;\r\n    //start date: 09/21/2017 @ 11:59pm (UTC)\r\n    uint public endDate = 1506635111;\r\n    \r\n    uint256 public constant ETH_RECEIVED_MIN = 0;//1 * 10**decimals; // 0 ETH\r\n    uint256 public constant TOKEN_MIN = 1 * 10**decimals; // 1 VIBEX\r\n\r\n    // We need to keep track of how much ether have been contributed, since we have a cap for ETH too\r\n    uint256 public totalReceivedEth = 0;\r\n\r\n    // Since we have different exchange rates at different stages, we need to keep track\r\n    // of how much ether each contributed in case that we need to issue a refund\r\n    mapping (address => uint256) private ethBalances;\r\n\t\r\n\r\n    modifier isFinalized() {\r\n        require(state == ContractState.Finalized);\r\n        _;\r\n    }\r\n\r\n    modifier isFundraising() {\r\n        require(state == ContractState.Fundraising);\r\n        _;\r\n    }\r\n\r\n    modifier isRedeeming() {\r\n        require(state == ContractState.Redeeming);\r\n        _;\r\n    }\r\n\r\n    modifier isPaused() {\r\n        require(state == ContractState.Paused);\r\n        _;\r\n    }\r\n\r\n    modifier notPaused() {\r\n        require(state != ContractState.Paused);\r\n        _;\r\n    }\r\n\r\n    modifier isFundraisingIgnorePaused() {\r\n        require(state == ContractState.Fundraising || (state == ContractState.Paused && savedState == ContractState.Fundraising));\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == ethFundDeposit);\r\n        _;\r\n    }\r\n\r\n    modifier minimumReached() {\r\n        require(totalReceivedEth >= ETH_RECEIVED_MIN);\r\n        _;\r\n    }\r\n\r\n    // Constructor\r\n    function PCXToken()\r\n    {\r\n        // Contract state\r\n        state = ContractState.Fundraising;\r\n        savedState = ContractState.Fundraising;\r\n        tokenExchange = PrivateCityTokens(tokenExchangeAddress);\r\n        totalSupply = 0;\r\n    }\r\n\r\n    // Overridden method to check for end of fundraising before allowing transfer of tokens\r\n    function transfer(address _to, uint256 _value)\r\n    isFinalized // Only allow token transfer after the fundraising has ended\r\n    onlyPayloadSize(2)\r\n    returns (bool success)\r\n    {\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n\r\n    // Overridden method to check for end of fundraising before allowing transfer of tokens\r\n    function transferFrom(address _from, address _to, uint256 _value)\r\n    isFinalized // Only allow token transfer after the fundraising has ended\r\n    onlyPayloadSize(3)\r\n    returns (bool success)\r\n    {\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n    \r\n    /// @dev Accepts ether and creates new VIBEX tokens\r\n    function ()\r\n    payable\r\n    external\r\n    isFundraising\r\n    {\r\n        require(now >= startDate);\r\n        require(now <= endDate);\r\n        require(msg.value > 0);\r\n        \r\n\r\n        // First we check the ETH cap, as it's easier to calculate, return\r\n        // the contribution if the cap has been reached already\r\n        uint256 checkedReceivedEth = safeAdd(totalReceivedEth, msg.value);\r\n\r\n        // If all is fine with the ETH cap, we continue to check the\r\n        // minimum amount of tokens\r\n        uint256 tokens = safeMult(msg.value, getCurrentTokenPrice());\r\n        require(tokens >= TOKEN_MIN);\r\n\r\n        // Only when all the checks have passed, then we update the state (ethBalances,\r\n        // totalReceivedEth, totalSupply, and balances) of the contract\r\n        ethBalances[msg.sender] = safeAdd(ethBalances[msg.sender], msg.value);\r\n        totalReceivedEth = checkedReceivedEth;\r\n        totalSupply = safeAdd(totalSupply, tokens);\r\n        balances[msg.sender] += tokens;  // safeAdd not needed; bad semantics to use here\r\n        \r\n        // Send the ETH to Vibehub Creators\r\n        ethFundDeposit.transfer(msg.value);\r\n\r\n    }\r\n\r\n\r\n    /// @dev Returns the current token price\r\n    function getCurrentTokenPrice()\r\n    private\r\n    constant\r\n    returns (uint256 currentPrice)\r\n    {\r\n        return 100;//bonuses are not implied!\r\n    }\r\n\r\n\r\n    /// @dev Redeems VIBEs and records the Vibehub address of the sender\r\n    function redeemTokens()\r\n    external\r\n    isRedeeming\r\n    {\r\n        uint256 vibeVal = balances[msg.sender];\r\n        require(vibeVal >= TOKEN_MIN); // At least TOKEN_MIN tokens have to be redeemed\r\n\r\n        // Move the tokens of the caller to Vibehub's address\r\n        //if (!super.transfer(ethFundDeposit, vibeVal)) revert();\r\n        balances[msg.sender]=0;\r\n        \r\n        uint256 exchangeRate = ((160200000* 10**decimals)/totalSupply);\r\n        uint256 numTokens = safeMult(exchangeRate, vibeVal); // Extra safe\r\n        if(!tokenExchange.transferFrom(tokenAccountAddress, msg.sender, numTokens)) revert();\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    /// @dev Ends the fundraising period and sends the ETH to the ethFundDeposit wallet\r\n    function finalize()\r\n    external\r\n    isFundraising\r\n    minimumReached\r\n    onlyOwner // Only the owner of the ethFundDeposit address can finalize the contract\r\n    {\r\n        // Move the contract to Finalized state\r\n        state = ContractState.Finalized;\r\n        savedState = ContractState.Finalized;\r\n    }\r\n\r\n\r\n    /// @dev Starts the redeeming period\r\n    function startRedeeming()\r\n    external\r\n    isFinalized // The redeeming period can only be started after the contract is finalized\r\n    onlyOwner   // Only the owner of the ethFundDeposit address can start the redeeming period\r\n    {\r\n        // Move the contract to Redeeming state\r\n        state = ContractState.Redeeming;\r\n        savedState = ContractState.Redeeming;\r\n    }\r\n\r\n\r\n    /// @dev Pauses the contract\r\n    function pause()\r\n    external\r\n    notPaused   // Prevent the contract getting stuck in the Paused state\r\n    onlyOwner   // Only the owner of the ethFundDeposit address can pause the contract\r\n    {\r\n        // Move the contract to Paused state\r\n        savedState = state;\r\n        state = ContractState.Paused;\r\n    }\r\n\r\n\r\n    /// @dev Proceeds with the contract\r\n    function proceed()\r\n    external\r\n    isPaused\r\n    onlyOwner   // Only the owner of the ethFundDeposit address can proceed with the contract\r\n    {\r\n        // Move the contract to the previous state\r\n        state = savedState;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ETH_RECEIVED_MIN\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"proceed\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenExchange\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalReceivedEth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethFundDeposit\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenAccountAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startRedeeming\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN_MIN\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"redeemTokens\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenExchangeAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"PCXToken","CompilerVersion":"v0.4.13+commit.fb4cb1a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://1c66e21973093b45d4601a813b2d1e49bb887a3beca0f0268f777b7fbf661a26"}]}