{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.17;\r\n\r\n//\r\n// ==== DISCLAIMER ====\r\n//\r\n// ETHEREUM IS STILL AN EXPEREMENTAL TECHNOLOGY.\r\n// ALTHOUGH THIS SMART CONTRACT WAS CREATED WITH GREAT CARE AND IN THE HOPE OF BEING USEFUL, NO GUARANTEES OF FLAWLESS OPERATION CAN BE GIVEN.\r\n// IN PARTICULAR - SUBTILE BUGS, HACKER ATTACKS OR MALFUNCTION OF UNDERLYING TECHNOLOGY CAN CAUSE UNINTENTIONAL BEHAVIOUR.\r\n// YOU ARE STRONGLY ENCOURAGED TO STUDY THIS SMART CONTRACT CAREFULLY IN ORDER TO UNDERSTAND POSSIBLE EDGE CASES AND RISKS.\r\n// DON'T USE THIS SMART CONTRACT IF YOU HAVE SUBSTANTIAL DOUBTS OR IF YOU DON'T KNOW WHAT YOU ARE DOING.\r\n//\r\n// THIS SOFTWARE IS PROVIDED \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY\r\n// AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,\r\n// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,\r\n// OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\r\n// OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n// ====\r\n//\r\n//\r\n// ==== PARANOIA NOTICE ====\r\n// A careful reader will find some additional checks and excessive code, consuming some extra gas. This is intentional.\r\n// Even though the contract should work without these parts, they make the code more secure in production and for future refactoring.\r\n// Also, they show more clearly what we have considered and addressed during development.\r\n// Discussion is welcome!\r\n// ====\r\n//\r\n\r\n/// @author ethernian\r\n/// @notice report bugs to: bugs@ethernian.com\r\n/// @title BnsPresale Contract\r\n\r\ncontract BnsPresale {\r\n\r\n    string public constant VERSION = \"0.2.0-bns\";\r\n\r\n    /* ====== configuration START ====== */\r\n    uint public constant PRESALE_START  = 4470000; /* approx. WED NOV 01 2017 12:55:47 GMT+0100 (CET) */\r\n    uint public constant PRESALE_END    = 5033333; /* approx. WED JAN 31 2018 19:39:39 GMT+0100 (CET) */\r\n    uint public constant WITHDRAWAL_END = 5111111; /* approx. TUE FEB 13 2018 10:08:39 GMT+0100 (CET) */\r\n\r\n    address public constant OWNER = 0x54ef8Ffc6EcdA95d286722c0358ad79123c3c8B0;\r\n\r\n    uint public constant MIN_TOTAL_AMOUNT_TO_RECEIVE_ETH = 0;\r\n    uint public constant MAX_TOTAL_AMOUNT_TO_RECEIVE_ETH = 3125;\r\n    uint public constant MIN_ACCEPTED_AMOUNT_FINNEY = 1;\r\n\r\n    /* ====== configuration END ====== */\r\n\r\n    string[5] private stateNames = [\"BEFORE_START\",  \"PRESALE_RUNNING\", \"WITHDRAWAL_RUNNING\", \"REFUND_RUNNING\", \"CLOSED\" ];\r\n    enum State { BEFORE_START,  PRESALE_RUNNING, WITHDRAWAL_RUNNING, REFUND_RUNNING, CLOSED }\r\n\r\n    uint public total_received_amount;\r\n    uint public total_refunded;\r\n    mapping (address => uint) public balances;\r\n\r\n    uint private constant MIN_TOTAL_AMOUNT_TO_RECEIVE = MIN_TOTAL_AMOUNT_TO_RECEIVE_ETH * 1 ether;\r\n    uint private constant MAX_TOTAL_AMOUNT_TO_RECEIVE = MAX_TOTAL_AMOUNT_TO_RECEIVE_ETH * 1 ether;\r\n    uint private constant MIN_ACCEPTED_AMOUNT = MIN_ACCEPTED_AMOUNT_FINNEY * 1 finney;\r\n    bool public isAborted = false;\r\n    bool public isStopped = false;\r\n\r\n\r\n    //constructor\r\n    function BnsPresale () public validSetupOnly() { }\r\n\r\n    //\r\n    // ======= interface methods =======\r\n    //\r\n\r\n    //accept payments here\r\n    function ()\r\n    payable\r\n    noReentrancy\r\n    public\r\n    {\r\n        State state = currentState();\r\n        if (state == State.PRESALE_RUNNING) {\r\n            receiveFunds();\r\n        } else if (state == State.REFUND_RUNNING) {\r\n            // any entring call in Refund Phase will cause full refund\r\n            sendRefund();\r\n        } else {\r\n            revert();\r\n        }\r\n    }\r\n\r\n    function refund() external\r\n    inState(State.REFUND_RUNNING)\r\n    noReentrancy\r\n    {\r\n        sendRefund();\r\n    }\r\n\r\n\r\n    function withdrawFunds() external\r\n    onlyOwner\r\n    noReentrancy\r\n    {\r\n        // transfer funds to owner if any\r\n        OWNER.transfer(this.balance);\r\n    }\r\n\r\n\r\n    function abort() external\r\n    inStateBefore(State.REFUND_RUNNING)\r\n    onlyOwner\r\n    {\r\n        isAborted = true;\r\n    }\r\n\r\n\r\n    function stop() external\r\n    inState(State.PRESALE_RUNNING)\r\n    onlyOwner\r\n    {\r\n        isStopped = true;\r\n    }\r\n\r\n\r\n    //displays current contract state in human readable form\r\n    function state() external constant\r\n    returns (string)\r\n    {\r\n        return stateNames[ uint(currentState()) ];\r\n    }\r\n\r\n\r\n    //\r\n    // ======= implementation methods =======\r\n    //\r\n\r\n    function sendRefund() private tokenHoldersOnly {\r\n        // load balance to refund plus amount currently sent\r\n        uint amount_to_refund = min(balances[msg.sender], this.balance - msg.value) ;\r\n\r\n        // change balance\r\n        balances[msg.sender] -= amount_to_refund;\r\n        total_refunded += amount_to_refund;\r\n\r\n        // send refund back to sender\r\n        msg.sender.transfer(amount_to_refund + msg.value);\r\n    }\r\n\r\n\r\n    function receiveFunds() private notTooSmallAmountOnly {\r\n      // no overflow is possible here: nobody have soo much money to spend.\r\n      if (total_received_amount + msg.value > MAX_TOTAL_AMOUNT_TO_RECEIVE) {\r\n          // accept amount only and return change\r\n          var change_to_return = total_received_amount + msg.value - MAX_TOTAL_AMOUNT_TO_RECEIVE;\r\n          var acceptable_remainder = MAX_TOTAL_AMOUNT_TO_RECEIVE - total_received_amount;\r\n          balances[msg.sender] += acceptable_remainder;\r\n          total_received_amount += acceptable_remainder;\r\n\r\n          msg.sender.transfer(change_to_return);\r\n      } else {\r\n          // accept full amount\r\n          balances[msg.sender] += msg.value;\r\n          total_received_amount += msg.value;\r\n      }\r\n    }\r\n\r\n\r\n    function currentState() private constant returns (State) {\r\n        if (isAborted) {\r\n            return this.balance > 0\r\n                   ? State.REFUND_RUNNING\r\n                   : State.CLOSED;\r\n        } else if (block.number < PRESALE_START) {\r\n            return State.BEFORE_START;\r\n        } else if (block.number <= PRESALE_END && total_received_amount < MAX_TOTAL_AMOUNT_TO_RECEIVE && !isStopped) {\r\n            return State.PRESALE_RUNNING;\r\n        } else if (this.balance == 0) {\r\n            return State.CLOSED;\r\n        } else if (block.number <= WITHDRAWAL_END && total_received_amount >= MIN_TOTAL_AMOUNT_TO_RECEIVE) {\r\n            return State.WITHDRAWAL_RUNNING;\r\n        } else {\r\n            return State.REFUND_RUNNING;\r\n        }\r\n    }\r\n\r\n    function min(uint a, uint b) pure private returns (uint) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n\r\n    //\r\n    // ============ modifiers ============\r\n    //\r\n\r\n    //fails if state doesn't match\r\n    modifier inState(State state) {\r\n        assert(state == currentState());\r\n        _;\r\n    }\r\n\r\n    //fails if the current state is not before than the given one.\r\n    modifier inStateBefore(State state) {\r\n        assert(currentState() < state);\r\n        _;\r\n    }\r\n\r\n\r\n    //fails if something in setup is looking weird\r\n    modifier validSetupOnly() {\r\n        if ( OWNER == 0x0\r\n            || PRESALE_START == 0\r\n            || PRESALE_END == 0\r\n            || WITHDRAWAL_END ==0\r\n            || PRESALE_START <= block.number\r\n            || PRESALE_START >= PRESALE_END\r\n            || PRESALE_END   >= WITHDRAWAL_END\r\n            || MIN_TOTAL_AMOUNT_TO_RECEIVE > MAX_TOTAL_AMOUNT_TO_RECEIVE )\r\n                revert();\r\n        _;\r\n    }\r\n\r\n\r\n    //accepts calls from owner only\r\n    modifier onlyOwner(){\r\n        assert(msg.sender == OWNER);\r\n        _;\r\n    }\r\n\r\n\r\n    //accepts calls from token holders only\r\n    modifier tokenHoldersOnly(){\r\n        assert(balances[msg.sender] > 0);\r\n        _;\r\n    }\r\n\r\n\r\n    // don`t accept transactions with value less than allowed minimum\r\n    modifier notTooSmallAmountOnly(){\r\n        assert(msg.value >= MIN_ACCEPTED_AMOUNT);\r\n        _;\r\n    }\r\n\r\n\r\n    //prevents reentrancy attacs\r\n    bool private locked = false;\r\n    modifier noReentrancy() {\r\n        assert(!locked);\r\n        locked = true;\r\n        _;\r\n        locked = false;\r\n    }\r\n}//contract","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"MIN_TOTAL_AMOUNT_TO_RECEIVE_ETH\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"OWNER\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawFunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"abort\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isStopped\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"total_refunded\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MIN_ACCEPTED_AMOUNT_FINNEY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"WITHDRAWAL_END\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"total_received_amount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_TOTAL_AMOUNT_TO_RECEIVE_ETH\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRESALE_START\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRESALE_END\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isAborted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"BnsPresale","CompilerVersion":"v0.4.17+commit.bdeb9e52","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://3504e36a416a346a550d9922ba147e7a72ae2155e1fb2d3e71c6032804256afc"}]}