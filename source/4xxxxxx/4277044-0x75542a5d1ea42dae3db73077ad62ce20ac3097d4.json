{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n * Copyright (C) Virtue Fintech FZ-LLC, Dubai\r\n * All rights reserved.\r\n * Author: mhi@virtue.finance \r\n *\r\n * MIT License\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy \r\n * of this software and associated documentation files (the \"\"Software\"\"), to \r\n * deal in the Software without restriction, including without limitation the \r\n * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or \r\n * sell copies of the Software, and to permit persons to whom the Software is \r\n * furnished to do so, subject to the following conditions: \r\n *  The above copyright notice and this permission notice shall be included in \r\n *  all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED AS IS, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, \r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN \r\n * THE SOFTWARE.\r\n *\r\n */\r\npragma solidity ^0.4.11;\r\n\r\n/**\r\n * Guards is a handful of modifiers to be used throughout this project\r\n */\r\ncontract Guarded {\r\n\r\n    modifier isValidAmount(uint256 _amount) { \r\n        require(_amount > 0); \r\n        _; \r\n    }\r\n\r\n    // ensure address not null, and not this contract address\r\n    modifier isValidAddress(address _address) {\r\n        require(_address != 0x0 && _address != address(this));\r\n        _;\r\n    }\r\n\r\n}\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    /** \r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    function Ownable() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner. \r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to. \r\n     */\r\n    function transferOwnership(address newOwner) onlyOwner {\r\n        if (newOwner != address(0)) {\r\n            owner = newOwner;\r\n        }\r\n    }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal returns (uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\ncontract FaradTokenSwap is Guarded, Ownable {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) contributions;          // contributions from public\r\n    uint256 contribCount = 0;\r\n\r\n    string public version = '0.1.2';\r\n\r\n    uint256 public startBlock = 4280263;                // 16th September 2017, 00:00:00 - 1505520000\r\n    uint256 public endBlock = 4305463;                  // 22nd September 2017, 23:59:59 - 1506124799\r\n\r\n    uint256 public totalEtherCap = 1184834 ether;       // Total raised for ICO, at USD 211/ether\r\n    uint256 public weiRaised = 0;                       // wei raised in this ICO\r\n    uint256 public minContrib = 0.05 ether;             // min contribution accepted\r\n\r\n    address public wallet = 0xdDA27AC23Fc398d5e6B0108041fc334EDab3c183;\r\n\r\n    event Contribution(address indexed _contributor, uint256 _amount);\r\n\r\n    function FaradTokenSwap() {\r\n    }\r\n\r\n    // function to start the Token Sale\r\n    /// start the token sale at `_starBlock`\r\n    function setStartBlock(uint256 _startBlock) onlyOwner public {\r\n        startBlock = _startBlock;\r\n    }\r\n\r\n    // function to stop the Token Swap \r\n    /// stop the token swap at `_endBlock`\r\n    function setEndBlock(uint256 _endBlock) onlyOwner public {\r\n        endBlock = _endBlock;\r\n    }\r\n\r\n    // this function is to add the previous token sale balance.\r\n    /// set the accumulated balance of `_weiRaised`\r\n    function setWeiRaised(uint256 _weiRaised) onlyOwner public {\r\n        weiRaised = weiRaised.add(_weiRaised);\r\n    }\r\n\r\n    // set the wallet address\r\n    /// set the wallet at `_wallet`\r\n    function setWallet(address _wallet) onlyOwner public {\r\n        wallet = _wallet;\r\n    }\r\n\r\n    /// set the minimum contribution to `_minContrib`\r\n    function setMinContribution(uint256 _minContrib) onlyOwner public {\r\n        minContrib = _minContrib;\r\n    }\r\n\r\n    // @return true if token swap event has ended\r\n    function hasEnded() public constant returns (bool) {\r\n        return block.number >= endBlock;\r\n    }\r\n\r\n    // @return true if the token swap contract is active.\r\n    function isActive() public constant returns (bool) {\r\n        return block.number >= startBlock && block.number <= endBlock;\r\n    }\r\n\r\n    function () payable {\r\n        processContributions(msg.sender, msg.value);\r\n    }\r\n\r\n    /**\r\n     * Okay, we changed the process flow a bit where the actual FRD to ETH\r\n     * mapping shall be calculated, and pushed to the contract once the\r\n     * crowdsale is over.\r\n     *\r\n     * Then, the user can pull the tokens to their wallet.\r\n     *\r\n     */\r\n    function processContributions(address _contributor, uint256 _weiAmount) payable {\r\n        require(validPurchase());\r\n\r\n        uint256 updatedWeiRaised = weiRaised.add(_weiAmount);\r\n\r\n        // update state\r\n        weiRaised = updatedWeiRaised;\r\n\r\n        // notify event for this contribution\r\n        contributions[_contributor] = contributions[_contributor].add(_weiAmount);\r\n        contribCount += 1;\r\n        Contribution(_contributor, _weiAmount);\r\n\r\n        // forware the funds\r\n        forwardFunds();\r\n    }\r\n\r\n    // @return true if the transaction can buy tokens\r\n    function validPurchase() internal constant returns (bool) {\r\n        uint256 current = block.number;\r\n\r\n        bool withinPeriod = current >= startBlock && current <= endBlock;\r\n        bool minPurchase = msg.value >= minContrib;\r\n\r\n        // add total wei raised\r\n        uint256 totalWeiRaised = weiRaised.add(msg.value);\r\n        bool withinCap = totalWeiRaised <= totalEtherCap;\r\n\r\n        // check all 3 conditions met\r\n        return withinPeriod && minPurchase && withinCap;\r\n    }\r\n\r\n    // send ether to the fund collection wallet\r\n    // override to create custom fund forwarding mechanisms\r\n    function forwardFunds() internal {\r\n        wallet.transfer(msg.value);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"endBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isActive\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalEtherCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minContrib\",\"type\":\"uint256\"}],\"name\":\"setMinContribution\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contributor\",\"type\":\"address\"},{\"name\":\"_weiAmount\",\"type\":\"uint256\"}],\"name\":\"processContributions\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_weiRaised\",\"type\":\"uint256\"}],\"name\":\"setWeiRaised\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_endBlock\",\"type\":\"uint256\"}],\"name\":\"setEndBlock\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"setWallet\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minContrib\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_startBlock\",\"type\":\"uint256\"}],\"name\":\"setStartBlock\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_contributor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Contribution\",\"type\":\"event\"}]","ContractName":"FaradTokenSwap","CompilerVersion":"v0.4.12+commit.194ff033","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://b7578153bea170e406eacbab893b8c4d2280e0a2846df763758767210d5f98e5"}]}