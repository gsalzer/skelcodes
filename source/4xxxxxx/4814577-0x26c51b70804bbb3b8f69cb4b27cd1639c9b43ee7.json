{"status":"1","message":"OK","result":[{"SourceCode":"// (c) Bitzlato Ltd, 2017\r\npragma solidity ^0.4.0;\r\n\r\ncontract CBRToken {\r\n\r\n    string public name = \"ChangeBotR\";      //  token name\r\n    string public symbol = \"CBR\";           //  token symbol\r\n    uint256 public decimals = 0;            //  token digit\r\n\r\n    mapping (address => uint256) private balances;\r\n    mapping (address => mapping (address => uint256)) private allowed;\r\n\r\n    uint256 private _totalSupply = 0;\r\n    bool public stopped = false;\r\n\r\n    uint256 constant valueFounder = 1e10;\r\n    address ownerA = 0x0;\r\n    address ownerB = 0x0;\r\n    address ownerC = 0x0;\r\n    uint public voteA = 0;\r\n    uint public voteB = 0;\r\n    uint public voteC = 0;\r\n    uint public mintA = 0;\r\n    uint public mintB = 0;\r\n    uint public mintC = 0;\r\n\r\n    modifier hasVote {\r\n        require((voteA + voteB + voteC) >= 2);\r\n        _;\r\n        voteA = 0;\r\n        voteB = 0;\r\n        voteC = 0;\r\n    }\r\n\r\n    modifier isOwner {\r\n        assert(ownerA == msg.sender || ownerB == msg.sender || ownerC == msg.sender);\r\n        _;\r\n    }\r\n\r\n    modifier isRunning {\r\n        assert (!stopped);\r\n        _;\r\n    }\r\n\r\n    modifier validAddress {\r\n        assert(0x0 != msg.sender);\r\n        _;\r\n    }\r\n\r\n    function CBRToken(address _addressFounderB, address _addressFounderC) public {\r\n        assert(0x0 != msg.sender);\r\n        assert(0x0 != _addressFounderB);\r\n        assert(0x0 != _addressFounderC);\r\n        assert(_addressFounderB != _addressFounderC);\r\n        ownerA = msg.sender;\r\n        ownerB = _addressFounderB;\r\n        ownerC = _addressFounderC;\r\n        _totalSupply = valueFounder;\r\n        balances[ownerA] = valueFounder;\r\n        balances[ownerB] = 0;\r\n        balances[ownerC] = 0;\r\n    }\r\n\r\n    function totalSupply() constant public returns (uint256 total) {\r\n        total = _totalSupply;\r\n    }\r\n \r\n    function balanceOf(address _owner) constant public returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) constant public returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) isRunning validAddress public returns (bool success) {\r\n        require(balances[msg.sender] >= _value);\r\n        require(balances[_to] + _value >= balances[_to]);\r\n        balances[msg.sender] -= _value;\r\n        balances[_to] += _value;\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) isRunning validAddress public returns (bool success) {\r\n        require(balances[_from] >= _value);\r\n        require(balances[_to] + _value >= balances[_to]);\r\n        require(allowed[_from][msg.sender] >= _value);\r\n        balances[_to] += _value;\r\n        balances[_from] -= _value;\r\n        allowed[_from][msg.sender] -= _value;\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) isRunning validAddress public returns (bool success) {\r\n        require(_value == 0 || allowed[msg.sender][_spender] == 0);\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function stop() isOwner public {\r\n        stopped = true;\r\n    }\r\n\r\n    function start() isOwner public {\r\n        stopped = false;\r\n    }\r\n\r\n    function setName(string _name) isOwner public {\r\n        name = _name;\r\n    }\r\n\r\n    function doMint(uint256 _value) isOwner hasVote public {\r\n        assert(_value > 0 && _value <= (mintA + mintB + mintC));\r\n        mintA = 0; mintB = 0; mintC = 0;\r\n        balances[msg.sender] += _value;\r\n        _totalSupply += _value;\r\n        DoMint(msg.sender, _value);\r\n    }\r\n    \r\n    function proposeMint(uint256 _value) public {\r\n        if (msg.sender == ownerA) {mintA = _value; ProposeMint(msg.sender, _value); return;}\r\n        if (msg.sender == ownerB) {mintB = _value; ProposeMint(msg.sender, _value); return;}\r\n        if (msg.sender == ownerC) {mintC = _value; ProposeMint(msg.sender, _value); return;}\r\n        assert(false);\r\n    }\r\n    \r\n    function vote(uint v) public {\r\n        uint s = 0;\r\n        if (v > 0) {s = 1;}\r\n        if (msg.sender == ownerA) {voteA = s; Vote(msg.sender, s); return;}\r\n        if (msg.sender == ownerB) {voteB = s; Vote(msg.sender, s); return;}\r\n        if (msg.sender == ownerC) {voteC = s; Vote(msg.sender, s); return;}\r\n\r\n        assert(false);\r\n    }\r\n\r\n    function burn(uint256 _value) public {\r\n        require(balances[msg.sender] >= _value);\r\n        balances[msg.sender] -= _value;\r\n        balances[0x0] += _value;\r\n        Transfer(msg.sender, 0x0, _value);\r\n    }\r\n\r\n    function destroy(address _addr, uint256 _value) isOwner hasVote public {\r\n        require(balances[_addr] >= _value);\r\n        balances[_addr] -= _value;\r\n        balances[0x0] += _value;\r\n        Transfer(_addr, 0x0, _value);\r\n    }\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n    event ProposeMint(address indexed _owner, uint256 _value);\r\n    event Vote(address indexed _owner, uint v);\r\n    event DoMint(address indexed _from, uint256 _value);\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"v\",\"type\":\"uint256\"}],\"name\":\"vote\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"total\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mintC\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"voteA\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stopped\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mintB\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"voteC\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"destroy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"doMint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"proposeMint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"start\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"setName\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mintA\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"voteB\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_addressFounderB\",\"type\":\"address\"},{\"name\":\"_addressFounderC\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"ProposeMint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"v\",\"type\":\"uint256\"}],\"name\":\"Vote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"DoMint\",\"type\":\"event\"}]","ContractName":"CBRToken","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000c20c79857fdedd726ffd1b3f697365354986886e0000000000000000000000004dacbf1fba6ea5b33b2efeb7222e8e1704f7c6af","Library":"","SwarmSource":"bzzr://e6c7b5a7bc517746e850b0a04dd1b7d51f2f545ef7f92b3f1d86a01eff7df0f9"}]}