{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n/*\r\n    DonationForwarder v1.0\r\n    \r\n    When you're feeling generous, you can send ether to this contract to have\r\n     it forwarded to someone else.\r\n     \r\n    You can buy or override a previous redirect by paying a higher price (note:\r\n     there are NO refunds if your redirect is overriden!).\r\n     \r\n    You can purchase a redirect to your address by using the buyRedirect\r\n     function (see the code).\r\n     \r\n    If you want the contract to forward ether to another address, use\r\n     buyRedirectFor instead.\r\n     \r\n    Warning: the recommended gas limit for sending ether to this contract is\r\n     at least 40000.\r\n    \r\n    The starting price is defined below.\r\n    \r\n    Public Domain, made by SopaXorzTaker.\r\n*/\r\n\r\ncontract DonationForwarder {\r\n    address owner;\r\n    address redirect;\r\n    uint lastPrice;\r\n    \r\n    uint startingPrice = 0.01 ether;\r\n\r\n\r\n    modifier onlyOwner {\r\n        require (msg.sender == owner);\r\n        _;\r\n    }\r\n    \r\n    event RedirectChanged (\r\n        address _newRedirect,\r\n        uint _lastPrice\r\n    );\r\n    \r\n    function DonationForwarder() public {\r\n        // The default redirect address will be the contract creator's.\r\n        owner = msg.sender;\r\n        redirect = owner;\r\n        \r\n        // The starting price.\r\n        lastPrice = startingPrice;\r\n    }\r\n    \r\n    function () payable public {\r\n        // Redirect the funds to the current redirect address.\r\n        redirect.transfer(msg.value);\r\n    }\r\n    \r\n    function buyRedirect() payable public {\r\n        // Buy a redirect for the current sender.\r\n        buyRedirectFor(msg.sender);\r\n    }\r\n    \r\n    function buyRedirectFor(address newRedirect) payable public {\r\n        // Any new redirect is going to cost more than the previous.\r\n        // One can pay a higher price to ensure it would be harder to change.\r\n        require(msg.value > lastPrice);\r\n        \r\n        // The new redirect address must be different from the previous one.\r\n        require(newRedirect != redirect);\r\n        \r\n        // Send the funds collected to the contract owner.\r\n        owner.transfer(msg.value);\r\n            \r\n        // Set the new redirect address to the one specified.\r\n        redirect = newRedirect;\r\n        \r\n        // Update the last price.\r\n        lastPrice = msg.value;\r\n        \r\n        // Create an event to indicate that.\r\n        RedirectChanged(newRedirect, lastPrice);\r\n    }\r\n    \r\n    function kill() public onlyOwner {\r\n        // An ability for the owner to kill the contract if necessary.\r\n        selfdestruct(owner);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"buyRedirect\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newRedirect\",\"type\":\"address\"}],\"name\":\"buyRedirectFor\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_newRedirect\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_lastPrice\",\"type\":\"uint256\"}],\"name\":\"RedirectChanged\",\"type\":\"event\"}]","ContractName":"DonationForwarder","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://e4dcd260def2005eb06dd7080dad4c143ea6ae5d81d83cb56002db7a21a31c79"}]}