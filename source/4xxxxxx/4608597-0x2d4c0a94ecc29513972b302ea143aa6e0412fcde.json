{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n// Created by Roman Oznobin (oz_r@mail.ru) - http://code-expert.pro\r\n// Owner is Alexey Malashkin (leningrad18@yandex.ru)\r\n// Smart contract for BasisToken of Ltd \"KKM\" (armaturaplus@mail.ru) - http://ruarmatura.ru/\r\n\r\nlibrary SafeMath {\r\n\r\n  function mul(uint a, uint b) internal pure returns (uint) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint a, uint b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n\r\n  address public owner;\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n     address inp_sender = msg.sender;\r\n     bool chekk = msg.sender == owner;\r\n    require(chekk);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n// The contract...\r\n\r\ncontract BasisIco  {\r\n\r\n  using SafeMath for uint;\r\n  \r\n    string public constant name = \"Basis Token\";\r\n\r\n    string public constant symbol = \"BSS\";\r\n\r\n    uint32 public constant decimals = 0;  \r\n    \r\n    struct Investor {\r\n        address holder;\r\n        uint tokens;\r\n\r\n    }\r\n  \r\n    Investor[] internal Cast_Arr;\r\n     \r\n    Investor tmp_investor;  \r\n      \r\n  \r\n  // Used to set wallet for owner, bounty and developer\r\n  // To that address Ether will be sended if Ico will have sucsess done\r\n  // Untill Ico is no finish and is no sucsess, all Ether are closed from anybody on ICO contract wallet\r\n  address internal constant owner_wallet = 0x79d8af6eEA6Aeeaf7a3a92D348457a5C4f0eEe1B;\r\n  address public constant owner = 0x79d8af6eEA6Aeeaf7a3a92D348457a5C4f0eEe1B;\r\n  address internal constant developer = 0xf2F1A92AD7f1124ef8900931ED00683f0B3A5da7;\r\n\r\n  //\r\n  //address public bounty_wallet = 0x79d8af6eEA6Aeeaf7a3a92D348457a5C4f0eEe1B;\r\n\r\n  uint public constant bountyPercent = 4;\r\n  \r\n\r\n  //address public bounty_reatricted_addr;\r\n  //Base price for BSS ICO. Show how much Wei is in 1 BSS. During ICO price calculate from the $rate\r\n  uint internal constant rate = 3300000000000000;\r\n  \r\n    uint public token_iso_price;\r\n// Генерируется в Crowdsale constructor\r\n//  BasisToken public token = new BasisToken();\r\n\r\n  // Time sructure of Basis ico\r\n  // start_declaration of first round of Basis ico - Presale ( start_declaration of token creation and ico Presale )\r\n  uint public start_declaration = 1511384400;\r\n  // The period for calculate the time structure of Basis ico, amount of the days\r\n  uint public ico_period = 15;\r\n  // First round finish - Presale finish\r\n  uint public presale_finish;\r\n  // ico Second raund start.\r\n  uint public second_round_start;\r\n  // Basis ico finish, all mint are closed\r\n  uint public ico_finish = start_declaration + (ico_period * 1 days).mul(6);\r\n\r\n\r\n  // Limmits and callculation of total minted Basis token\r\n    uint public constant hardcap = 1536000;\r\n    // minimal for softcap\r\n    uint public softcap = 150000;\r\n    // Total suplied Basis token during ICO\r\n    uint public bssTotalSuply;\r\n    // Wei raised during ICO\r\n    uint public weiRaised;\r\n  //  list of owners and token balances \r\n    mapping(address => uint) public ico_balances;\r\n  //  list of owners and ether balances for refund    \r\n    mapping(address => uint) public ico_investor;\r\n   \r\n    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n    event  Finalized();  \r\n    event Transfer(address indexed from, address indexed to, uint256 value);    \r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    \r\n    bool RefundICO =false;\r\n    bool isFinalized =false;\r\n    // The map of allowed tokens for external address access\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n    \r\n// The constractor of contract ...\r\n  function BasisIco() public     {\r\n\r\n \r\n    weiRaised = 0;\r\n    bssTotalSuply = 0;\r\n  \r\n    \r\n    token_iso_price = rate.mul(80).div(100); \r\n\r\n\r\n\r\n    presale_finish = start_declaration + (ico_period * 1 days);\r\n    second_round_start = start_declaration + (ico_period * 1 days).mul(2);\r\n  }\r\n  \r\n    modifier saleIsOn() {\r\n      require(now > start_declaration && now < ico_finish);\r\n      _;\r\n    }\r\n\r\n    modifier NoBreak() {\r\n      require(now < presale_finish  || now > second_round_start);\r\n      _;\r\n    }\r\n\r\n    modifier isUnderHardCap() {\r\n      require (bssTotalSuply <= hardcap);\r\n      _;\r\n    }  \r\n    \r\n    modifier onlyOwner() {\r\n         address inp_sender = msg.sender;\r\n         bool chekk = msg.sender == owner;\r\n        require(chekk);\r\n    _;\r\n     }\r\n  \r\n    function setPrice () public isUnderHardCap saleIsOn {\r\n          if  (now < presale_finish ){\r\n               // Chek total supply BSS for price level changes\r\n              if( bssTotalSuply > 50000 && bssTotalSuply <= 100000 ) {\r\n                  token_iso_price = rate.mul(85).div(100);\r\n              }\r\n                if( bssTotalSuply > 100000 && bssTotalSuply <= 150000 ) {\r\n                  token_iso_price = rate.mul(90).div(100);\r\n                  }\r\n\r\n          }\r\n          else {\r\n               if(bssTotalSuply <= 200000) {\r\n                   token_iso_price = rate.mul(90).div(100);\r\n               } else { if(bssTotalSuply <= 400000) {\r\n                        token_iso_price = rate.mul(95).div(100);\r\n                        }\r\n                        else {\r\n                        token_iso_price = rate;\r\n                        }\r\n                      }\r\n           }\r\n    } \r\n    \r\n    function getActualPrice() public returns (uint) {\r\n        setPrice ();        \r\n        return token_iso_price;\r\n    }  \r\n    \r\n     function validPurchase(uint _msg_value) internal constant returns (bool) {\r\n     bool withinPeriod = now >= start_declaration && now <= ico_finish;\r\n     bool nonZeroPurchase = _msg_value != 0;\r\n     return withinPeriod && nonZeroPurchase;\r\n   }\r\n   \r\n   function token_mint(address _investor, uint _tokens, uint _wei) internal {\r\n       \r\n       ico_balances[_investor] = ico_balances[_investor].add(_tokens);\r\n       tmp_investor.holder = _investor;\r\n       tmp_investor.tokens = _tokens;\r\n       Cast_Arr.push(tmp_investor);\r\n       ico_investor[_investor]= ico_investor[_investor].add(_wei);\r\n   }\r\n    \r\n   function buyTokens() external payable saleIsOn NoBreak {\r\n     \r\n     //require(beneficiary != address(0));\r\n     require(validPurchase(msg.value));\r\n\r\n     uint256 weiAmount = msg.value;\r\n\r\n     // calculate token amount to be created\r\n     uint256 tokens = weiAmount.div(token_iso_price);\r\n     if  (now < presale_finish ){\r\n         require ((bssTotalSuply + tokens) <= softcap);\r\n     }\r\n    require ((bssTotalSuply + tokens) < hardcap);\r\n     // update state\r\n     weiRaised = weiRaised.add(weiAmount);\r\n\r\n     token_mint( msg.sender, tokens, msg.value);\r\n     TokenPurchase(msg.sender, msg.sender, weiAmount, tokens);\r\n\r\n     //forwardFunds();\r\n     bssTotalSuply += tokens;\r\n    }\r\n\r\n   // fallback function can be used to buy tokens\r\n   function () external payable {\r\n     buyTokensFor(msg.sender);\r\n   } \r\n\r\n   function buyTokensFor(address beneficiary) public payable saleIsOn NoBreak {\r\n     \r\n     require(beneficiary != address(0));\r\n     require(validPurchase(msg.value));\r\n\r\n     uint256 weiAmount = msg.value;\r\n\r\n     // calculate token amount to be created\r\n     uint256 tokens = weiAmount.div(token_iso_price);\r\n      if  (now < presale_finish ){\r\n         require ((bssTotalSuply + tokens) <= softcap);\r\n     }\r\n    require ((bssTotalSuply + tokens) < hardcap);\r\n     // update state\r\n     weiRaised = weiRaised.add(weiAmount);\r\n\r\n     token_mint( beneficiary, tokens, msg.value);\r\n     TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\r\n\r\n     //forwardFunds();\r\n     bssTotalSuply += tokens;\r\n }\r\n \r\n   function extraTokenMint(address beneficiary, uint _tokens) external payable saleIsOn onlyOwner {\r\n     \r\n    require(beneficiary != address(0));\r\n    require ((bssTotalSuply + _tokens) < hardcap);\r\n    \r\n    uint weiAmount = _tokens.mul(token_iso_price);\r\n     // update state\r\n    weiRaised = weiRaised.add(weiAmount);\r\n\r\n     token_mint( beneficiary, _tokens, msg.value);\r\n     TokenPurchase(msg.sender, beneficiary, weiAmount, _tokens);\r\n\r\n     //forwardFunds();\r\n     bssTotalSuply += _tokens;\r\n  }\r\n\r\n  function goalReached() public constant returns (bool) {\r\n    return bssTotalSuply >= softcap;\r\n  }\r\n  \r\n  function bounty_mining () internal {\r\n    uint bounty_tokens = bssTotalSuply.mul(bountyPercent).div(100);\r\n    uint tmp_z = 0;\r\n    token_mint(owner_wallet, bounty_tokens, tmp_z);\r\n    bssTotalSuply += bounty_tokens;\r\n    }  \r\n  \r\n  // vault finalization task, called when owner calls finalize()\r\n  function finalization() public onlyOwner {\r\n    require (now > ico_finish);\r\n    if (goalReached()) {\r\n        bounty_mining ();\r\n        EtherTakeAfterSoftcap ();\r\n        } \r\n    else {\r\n        RefundICO = true;    \r\n    }\r\n    isFinalized = true;\r\n    Finalized();\r\n  }  \r\n\r\n  function investor_Refund()  public {\r\n        require (RefundICO && isFinalized);\r\n        address investor = msg.sender;\r\n        uint for_refund = ico_investor[msg.sender];\r\n        investor.transfer(for_refund);\r\n\r\n  }\r\n  \r\n  function EtherTakeAfterSoftcap () onlyOwner public {\r\n      require ( bssTotalSuply >= softcap );\r\n      uint for_developer = this.balance;\r\n      for_developer = for_developer.mul(6).div(100);\r\n      developer.transfer(for_developer);\r\n      owner.transfer(this.balance);\r\n  }\r\n\r\n  function balanceOf(address _owner) constant public returns (uint256 balance) {\r\n    return ico_balances[_owner];\r\n  }\r\n  \r\n   function transfer(address _to, uint256 _value) public returns (bool) {\r\n    ico_balances[msg.sender] = ico_balances[msg.sender].sub(_value);\r\n    ico_balances[_to] = ico_balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  } \r\n\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    var _allowance = allowed[_from][msg.sender];\r\n\r\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n    require (_value <= _allowance);\r\n\r\n    ico_balances[_to] = ico_balances[_to].add(_value);\r\n    ico_balances[_from] = ico_balances[_from].sub(_value);\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n  \r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n\r\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }  \r\n\r\n  function allowance(address _owner, address _spender) constant public returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presale_finish\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ico_finish\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token_iso_price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"ico_investor\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bssTotalSuply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"},{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"extraTokenMint\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"second_round_start\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokensFor\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getActualPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalization\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"goalReached\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"start_declaration\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hardcap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ico_period\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bountyPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"investor_Refund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"ico_balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"EtherTakeAfterSoftcap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"softcap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Finalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"BasisIco","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://759915b7be30abee304a6895d5f0e02bbfe64e1fce31bfbaec5e561acf53fc5a"}]}