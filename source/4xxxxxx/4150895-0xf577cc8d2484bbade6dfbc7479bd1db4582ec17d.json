{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\ncontract IERC20 {\r\n    function totalSupply() constant returns (uint256 totalSupply);\r\n    function balanceOf(address _owner) constant returns (uint256 balance);\r\n    function transfer(address _to, uint256 _value) returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\r\n    function approve(address _spender, uint256 _value) returns (bool success);\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\r\n    \r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract SHITcoin is IERC20 {\r\n    \r\n    using SafeMath for uint256;\r\n  \r\n    string public symbol = 'SHT';\r\n\r\n    string public name = 'SHITcoin';\r\n    \r\n    uint8 public constant decimals = 18;\r\n    \r\n    uint256 public constant tokensPerEther = 1000;\r\n    \r\n    uint256 public _totalSupply = 99999999000000000000000000;\r\n    \r\n    \r\n    uint256 public totalContribution = 0;\r\n    \r\n    uint256 public bonusSupply = 0;\r\n    \r\n    bool public purchasingAllowed = false;\r\n    \r\n    uint8 public currentSaleDay = 1; \r\n    uint8 public currentBonus = 100;\r\n    \r\n    string public startDate = '2017-09-16 18:00';\r\n    \r\n    address public owner;\r\n    \r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    \r\n    mapping(address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) public allowed;\r\n    \r\n    function SHITcoin() {\r\n        owner = msg.sender;\r\n        balances[msg.sender] = _totalSupply;\r\n    }\r\n    \r\n    function changeStartDate(string _startDate){\r\n        require(\r\n            msg.sender==owner\r\n        );\r\n        startDate = _startDate;\r\n    }\r\n    \r\n    function totalSupply() constant returns (uint256 totalSupply) {\r\n        return _totalSupply;\r\n    }\r\n   \r\n    function getStats() constant returns (uint256, uint256, uint256,  bool, uint256, uint256, string) {\r\n        return (totalContribution, _totalSupply, bonusSupply, purchasingAllowed, currentSaleDay, currentBonus, startDate);\r\n    }\r\n    \r\n    function transferOwnership(address _newOwner) onlyOwner {\r\n        owner = _newOwner;\r\n    }\r\n    \r\n     function rebrand(string _symbol, string _name) onlyOwner {\r\n        symbol = _symbol;\r\n        name   = _name;\r\n     }\r\n\r\n    \r\n    function withdraw() onlyOwner {\r\n        owner.transfer(this.balance);\r\n    }\r\n    /* \r\n     * create payable token. Now you can purchase it\r\n     *\r\n     */\r\n    function () payable {\r\n        require(\r\n            msg.value > 0\r\n            && purchasingAllowed\r\n        );\r\n        /*  everything is in wei */\r\n        uint256 baseTokens  = msg.value.mul(tokensPerEther);\r\n        uint256 bonusTokens = msg.value.mul(currentBonus);\r\n        /* send tokens to buyer. Buyer gets baseTokens + bonusTokens */\r\n        balances[msg.sender] = balances[msg.sender].add(baseTokens).add(bonusTokens);\r\n        /* send eth to owner */\r\n        owner.transfer(msg.value);\r\n        \r\n        bonusSupply       = bonusSupply.add(bonusTokens);\r\n        totalContribution = totalContribution.add(msg.value);\r\n        _totalSupply      = _totalSupply.add(baseTokens).add(bonusTokens);\r\n\r\n        Transfer(address(this), msg.sender, baseTokens.add(bonusTokens));\r\n    }\r\n    \r\n    function enablePurchasing() onlyOwner {\r\n        purchasingAllowed = true;\r\n    }\r\n    \r\n    function disablePurchasing() onlyOwner {\r\n        purchasingAllowed = false;\r\n    }\r\n    \r\n    function setCurrentSaleDayAndBonus(uint8 _day) onlyOwner {\r\n        require(\r\n            (_day > 0 && _day < 11) \r\n        );\r\n\r\n        currentBonus = 10; \r\n        currentSaleDay = _day;\r\n\r\n        if(_day==1) {\r\n            currentBonus = 100;\r\n        } \r\n        if(_day==2) {\r\n            currentBonus = 75;\r\n        }\r\n        if(_day>=3 && _day<5) {\r\n            currentBonus = 50;\r\n        }\r\n        if(_day>=5 && _day<8) {\r\n            currentBonus = 25;\r\n        }\r\n\r\n        \r\n    }\r\n\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) returns (bool success) {\r\n        require(\r\n            (balances[msg.sender] >= _value)\r\n            && (_value > 0)\r\n            && (_to != address(0))\r\n            && (balances[_to].add(_value) >= balances[_to])\r\n            && (msg.data.length >= (2 * 32) + 4)\r\n        );\r\n\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\r\n        require(\r\n            (allowed[_from][msg.sender] >= _value) // Check allowance\r\n            && (balances[_from] >= _value) // Check if the sender has enough\r\n            && (_value > 0) // Don't allow 0value transfer\r\n            && (_to != address(0)) // Prevent transfer to 0x0 address\r\n            && (balances[_to].add(_value) >= balances[_to]) // Check for overflows\r\n            && (msg.data.length >= (2 * 32) + 4) //mitigates the ERC20 short address attack\r\n            //most of these things are not necesary\r\n        );\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) returns (bool success) {\r\n        \r\n        require(\r\n            (_value == 0) \r\n            || (allowed[msg.sender][_spender] == 0)\r\n        );\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    \r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startDate\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalContribution\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_day\",\"type\":\"uint8\"}],\"name\":\"setCurrentSaleDayAndBonus\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_startDate\",\"type\":\"string\"}],\"name\":\"changeStartDate\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentSaleDay\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"disablePurchasing\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"enablePurchasing\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"rebrand\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getStats\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"purchasingAllowed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensPerEther\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"SHITcoin","CompilerVersion":"v0.4.11+commit.68ef5810","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://4225bb83117bc784d6e3b39d52425133ec2cd2ee7bd6e8b41c2a1583bf2ab23e"}]}