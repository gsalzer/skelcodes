{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.18;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\ncontract TelcoinSaleCapEscrow {\r\n    using SafeMath for uint256;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    event WalletChanged(address indexed previousWallet, address indexed newWallet);\r\n    event ValuePlaced(address indexed purchaser, address indexed beneficiary, uint256 amount);\r\n    event Approved(address indexed participant, uint256 amount);\r\n    event Rejected(address indexed participant);\r\n    event Closed();\r\n\r\n    /// The owner of the contract.\r\n    address public owner;\r\n\r\n    /// The wallet that will receive funds on approval after the token\r\n    /// sale's  registerAltPurchase() has been called.\r\n    address public wallet;\r\n\r\n    /// Whether the escrow has closed.\r\n    bool public closed = false;\r\n\r\n    /// The amount of wei deposited by each participant. This value\r\n    /// can change with new deposits, approvals and rejections.\r\n    mapping(address => uint256) public deposited;\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    modifier escrowOpen() {\r\n        require(!closed);\r\n        _;\r\n    }\r\n\r\n    function TelcoinSaleCapEscrow(address _wallet) public payable {\r\n        require(msg.value > 0);\r\n        require(_wallet != address(0));\r\n\r\n        owner = msg.sender;\r\n        wallet = _wallet;\r\n\r\n        wallet.transfer(msg.value);\r\n    }\r\n\r\n    function () public payable {\r\n        placeValue(msg.sender);\r\n    }\r\n\r\n    /// By the time approve() is called by the owner, a matching call for\r\n    /// registerAltPurchase(_participant, \"ETH\", tx.id, _weiAmount) shall\r\n    /// have been called in the main token sale.\r\n    function approve(address _participant, uint256 _weiAmount) onlyOwner public {\r\n        uint256 depositedAmount = deposited[_participant];\r\n        require(depositedAmount > 0);\r\n        require(_weiAmount <= depositedAmount);\r\n\r\n        deposited[_participant] = depositedAmount.sub(_weiAmount);\r\n        Approved(_participant, _weiAmount);\r\n        wallet.transfer(_weiAmount);\r\n    }\r\n\r\n    function approveMany(address[] _participants, uint256[] _weiAmounts) onlyOwner public {\r\n        require(_participants.length == _weiAmounts.length);\r\n\r\n        for (uint256 i = 0; i < _participants.length; i++) {\r\n            approve(_participants[i], _weiAmounts[i]);\r\n        }\r\n    }\r\n\r\n    function changeWallet(address _wallet) onlyOwner public payable {\r\n        require(_wallet != 0x0);\r\n        require(msg.value > 0);\r\n\r\n        WalletChanged(wallet, _wallet);\r\n        wallet = _wallet;\r\n        wallet.transfer(msg.value);\r\n    }\r\n\r\n    function close() onlyOwner public {\r\n        require(!closed);\r\n\r\n        closed = true;\r\n        Closed();\r\n    }\r\n\r\n    function placeValue(address _beneficiary) escrowOpen public payable {\r\n        require(_beneficiary != address(0));\r\n\r\n        uint256 weiAmount = msg.value;\r\n        require(weiAmount > 0);\r\n\r\n        uint256 newDeposited = deposited[_beneficiary].add(weiAmount);\r\n        deposited[_beneficiary] = newDeposited;\r\n\r\n        ValuePlaced(\r\n            msg.sender,\r\n            _beneficiary,\r\n            weiAmount\r\n        );\r\n    }\r\n\r\n    function reject(address _participant) onlyOwner public {\r\n        uint256 weiAmount = deposited[_participant];\r\n        require(weiAmount > 0);\r\n\r\n        deposited[_participant] = 0;\r\n        Rejected(_participant);\r\n        require(_participant.call.value(weiAmount)());\r\n    }\r\n\r\n    function rejectMany(address[] _participants) onlyOwner public {\r\n        for (uint256 i = 0; i < _participants.length; i++) {\r\n            reject(_participants[i]);\r\n        }\r\n    }\r\n\r\n    function transferOwnership(address _to) onlyOwner public {\r\n        require(_to != address(0));\r\n        OwnershipTransferred(owner, _to);\r\n        owner = _to;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_participant\",\"type\":\"address\"},{\"name\":\"_weiAmount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_participants\",\"type\":\"address[]\"}],\"name\":\"rejectMany\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"close\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"closed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_participants\",\"type\":\"address[]\"},{\"name\":\"_weiAmounts\",\"type\":\"uint256[]\"}],\"name\":\"approveMany\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"changeWallet\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"placeValue\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_participant\",\"type\":\"address\"}],\"name\":\"reject\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"deposited\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousWallet\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"WalletChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ValuePlaced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"participant\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Approved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"participant\",\"type\":\"address\"}],\"name\":\"Rejected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Closed\",\"type\":\"event\"}]","ContractName":"TelcoinSaleCapEscrow","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000008322c7e7c14b57ff85947f28381421692a1cf267","Library":"","SwarmSource":"bzzr://cb184612e6b0e13b8209ac157bcc63ab5e4417d8dbae3478eec271cc5421eddf"}]}