{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.18;\r\n\r\n// File: node_modules/zeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: node_modules/zeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/FxRates.sol\r\n\r\n/**\r\n * @title FxRates\r\n * @dev Store the historic fx rates for conversion ETHEUR and BTCEUR\r\n */\r\ncontract FxRates is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    struct Rate {\r\n        string rate;\r\n        string timestamp;\r\n    }\r\n\r\n    /**\r\n     * @dev Event for logging an update of the exchange rates\r\n     * @param symbol one of [\"ETH\", \"BTC\"]\r\n     * @param updateNumber an incremental number giving the number of update\r\n     * @param timestamp human readable timestamp of the earliest validity time\r\n     * @param rate a string containing the rate value\r\n     */\r\n    event RateUpdate(string symbol, uint256 updateNumber, string timestamp, string rate);\r\n\r\n    uint256 public numberBtcUpdates = 0;\r\n\r\n    mapping(uint256 => Rate) public btcUpdates;\r\n\r\n    uint256 public numberEthUpdates = 0;\r\n\r\n    mapping(uint256 => Rate) public ethUpdates;\r\n\r\n    /**\r\n     * @dev Adds the latest Ether Euro rate to the history. Only the crontract owner can execute this.\r\n     * @param _rate the exchange rate\r\n     * @param _timestamp human readable earliest point in time where the rate is valid\r\n     */\r\n    function updateEthRate(string _rate, string _timestamp) public onlyOwner {\r\n        numberEthUpdates = numberEthUpdates.add(1);\r\n        ethUpdates[numberEthUpdates] = Rate({\r\n            rate: _rate,\r\n            timestamp: _timestamp\r\n        });\r\n        RateUpdate(\"ETH\", numberEthUpdates, _timestamp, _rate);\r\n    }\r\n\r\n    /**\r\n     * @dev Adds the latest Btc Euro rate to the history. . Only the crontract owner can execute this.\r\n     * @param _rate the exchange rate\r\n     * @param _timestamp human readable earliest point in time where the rate is valid\r\n     */\r\n    function updateBtcRate(string _rate, string _timestamp) public onlyOwner {\r\n        numberBtcUpdates = numberBtcUpdates.add(1);\r\n        btcUpdates[numberBtcUpdates] = Rate({\r\n            rate: _rate,\r\n            timestamp: _timestamp\r\n        });\r\n        RateUpdate(\"BTC\", numberBtcUpdates, _timestamp, _rate);\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the latest Eth Euro rate\r\n     * @return a tuple containing the rate and the timestamp in human readable format\r\n     */\r\n    function getEthRate() public view returns(Rate) {\r\n        /* require(numberEthUpdates > 0); */\r\n        return ethUpdates[numberEthUpdates];\r\n            /* ethUpdates[numberEthUpdates].rate, */\r\n            /* ethUpdates[numberEthUpdates].timestamp */\r\n        /* ); */\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the latest Btc Euro rate\r\n     * @return a tuple containing the rate and the timestamp in human readable format\r\n     */\r\n    function getBtcRate() public view returns(string, string) {\r\n        /* require(numberBtcUpdates > 0); */\r\n        return (\r\n            btcUpdates[numberBtcUpdates].rate,\r\n            btcUpdates[numberBtcUpdates].timestamp\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the historic Eth Euro rate\r\n     * @param _updateNumber the number of the update the rate corresponds to.\r\n     * @return a tuple containing the rate and the timestamp in human readable format\r\n     */\r\n    function getHistEthRate(uint256 _updateNumber) public view returns(string, string) {\r\n        require(_updateNumber <= numberEthUpdates);\r\n        return (\r\n            ethUpdates[_updateNumber].rate,\r\n            ethUpdates[_updateNumber].timestamp\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the historic Btc Euro rate\r\n     * @param _updateNumber the number of the update the rate corresponds to.\r\n     * @return a tuple containing the rate and the timestamp in human readable format\r\n     */\r\n    function getHistBtcRate(uint256 _updateNumber) public view returns(string, string) {\r\n        require(_updateNumber <= numberBtcUpdates);\r\n        return (\r\n            btcUpdates[_updateNumber].rate,\r\n            btcUpdates[_updateNumber].timestamp\r\n        );\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ethUpdates\",\"outputs\":[{\"name\":\"rate\",\"type\":\"string\"},{\"name\":\"timestamp\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numberBtcUpdates\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"btcUpdates\",\"outputs\":[{\"name\":\"rate\",\"type\":\"string\"},{\"name\":\"timestamp\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getEthRate\",\"outputs\":[{\"components\":[{\"name\":\"rate\",\"type\":\"string\"},{\"name\":\"timestamp\",\"type\":\"string\"}],\"name\":\"\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rate\",\"type\":\"string\"},{\"name\":\"_timestamp\",\"type\":\"string\"}],\"name\":\"updateBtcRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numberEthUpdates\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBtcRate\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rate\",\"type\":\"string\"},{\"name\":\"_timestamp\",\"type\":\"string\"}],\"name\":\"updateEthRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_updateNumber\",\"type\":\"uint256\"}],\"name\":\"getHistEthRate\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_updateNumber\",\"type\":\"uint256\"}],\"name\":\"getHistBtcRate\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"symbol\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"updateNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"rate\",\"type\":\"string\"}],\"name\":\"RateUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"FxRates","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://239c8caaa3f6afba08237b811d97c7e646ccca04f115ba2b84c27ef37df81b10"}]}