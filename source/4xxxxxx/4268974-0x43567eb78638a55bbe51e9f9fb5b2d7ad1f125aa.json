{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\ncontract ERC20Interface {\r\n\tfunction totalSupply() constant returns (uint256 total); // Get the total token supply\r\n\tfunction balanceOf(address _owner) constant returns (uint256 balance); // Get the account balance of another account with address _owner\r\n\tfunction transfer(address _to, uint256 _value) returns (bool success); // Send _value amount of tokens to address _to\r\n\tfunction transferFrom(address _from, address _to, uint256 _value) returns (bool success); // Send _value amount of tokens from address _from to address _to\r\n\t// Allow _spender to withdraw from your account, multiple times, up to the _value amount.\r\n\t// If this function is called again it overwrites the current allowance with _value.\r\n\t// this function is required for some DEX functionality\r\n\t// function approve(address _spender, uint256 _value) returns (bool success);\r\n\t// function allowance(address _owner, address _spender) constant returns (uint256 remaining); // Returns the amount which _spender is still allowed to withdraw from _owner\r\n\tevent Transfer(address indexed _from, address indexed _to, uint256 _value); // Triggered when tokens are transferred.\r\n\t//event Approval(address indexed _owner, address indexed _spender, uint256 _value); // Triggered whenever approve(address _spender, uint256 _value) is called.\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\tfunction mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n\t\tuint256 c = a * b;\r\n\t\tassert(a == 0 || c / a == b);\r\n\t\treturn c;\r\n\t}\r\n\r\n\tfunction div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n\t\t// assert(b > 0); // Solidity automatically throws when dividing by 0\r\n\t\tuint256 c = a / b;\r\n\t\t// assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\t\treturn c;\r\n\t}\r\n\r\n\tfunction sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n\t\tassert(b <= a);\r\n\t\treturn a - b;\r\n\t}\r\n\r\n\tfunction add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n\t\tuint256 c = a + b;\r\n\t\tassert(c >= a);\r\n\t\treturn c;\r\n\t}\r\n}\r\n\r\ncontract owned {\r\n\taddress public owner;\r\n\r\n\tfunction owned() {\r\n\t\towner = msg.sender;\r\n\t}\r\n\r\n\tmodifier onlyOwner {\r\n\t\tif (msg.sender != owner) revert();\r\n\t\t_;\r\n\t}\r\n\r\n\t/* function transferOwnership(address newOwner) onlyOwner {\r\n\t\towner = newOwner;\r\n\t} */\r\n}\r\n\r\ncontract tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData); }\r\n\r\ncontract HacToken is ERC20Interface, owned{\r\n\tstring public standard = 'Token 0.1';\r\n\tstring public name;\r\n\tstring public symbol;\r\n\tuint8 public decimals;\r\n\tuint256 public freeTokens;\r\n\tuint256 public totalSupply;\r\n\r\n\tmapping (address => uint256) public balanceOf;\r\n\r\n\tevent TransferFrom(address indexed _from, address indexed _to, uint256 _value); // Triggered when tokens are transferred by owner.\r\n\r\n\tfunction HacToken() {\r\n\t\ttotalSupply = freeTokens = 10000000000000;\r\n\t\tname = \"HAC Token\";\r\n\t\tdecimals = 4;\r\n\t\tsymbol = \"HAC\";\r\n\t}\r\n\r\n\tfunction totalSupply() constant returns (uint256 total) {\r\n\t\treturn total = totalSupply;\r\n\t}\r\n\tfunction balanceOf(address _owner) constant returns (uint256 balance) {\r\n\t\treturn balanceOf[_owner];\r\n\t}\r\n\t/* function approve(address _spender, uint256 _amount) returns (bool success) {\r\n\t\treturn false;\r\n\t}\r\n\tfunction allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n\t\treturn 0;\r\n\t} */\r\n\tfunction () {\r\n\t\trevert();\r\n\t}\r\n\r\n\tfunction setTokens(address target, uint256 amount) onlyOwner {\r\n\t\tif(freeTokens < amount) revert();\r\n\r\n\t\tbalanceOf[target] = SafeMath.add(balanceOf[target], amount);\r\n\t\tfreeTokens = SafeMath.sub(freeTokens, amount);\r\n\t\tTransfer(this, target, amount);\r\n\t}\r\n\r\n\tfunction transfer(address _to, uint256 _value) returns (bool success){\r\n\t\tbalanceOf[msg.sender] = SafeMath.sub(balanceOf[msg.sender], _value);\r\n\t\tbalanceOf[_to] = SafeMath.add(balanceOf[_to], _value);\r\n\r\n\t\tTransfer(msg.sender, _to, _value);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction transferFrom(address _from, address _to, uint256 _value) onlyOwner returns (bool success) {\r\n\t\tbalanceOf[_from] = SafeMath.sub(balanceOf[_from], _value);\r\n\t\tbalanceOf[_to] = SafeMath.add(balanceOf[_to], _value);\r\n\r\n\t\tTransferFrom(_from, _to, _value);\r\n\t\treturn true;\r\n\t}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"total\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"standard\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"freeTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setTokens\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":false,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"TransferFrom\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"HacToken","CompilerVersion":"v0.4.12+commit.194ff033","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://0dfa1c5789b9d4268db841c18402f848888cf2009f8fd7ca26d8d7b477189e37"}]}