{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13;\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) constant returns (uint256);\r\n  function transfer(address to, uint256 value) returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) returns (bool);\r\n  function approve(address spender, uint256 value) returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    \r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n  \r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances. \r\n */\r\ncontract BasicToken is ERC20Basic {\r\n    \r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) returns (bool) {\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of. \r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) allowed;\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amout of tokens to be transfered\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\r\n    var _allowance = allowed[_from][msg.sender];\r\n\r\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n    // require (_value <= _allowance);\r\n\r\n    balances[_to] = balances[_to].add(_value);\r\n    balances[_from] = balances[_from].sub(_value);\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) returns (bool) {\r\n\r\n    // To change the approve amount you first have to reduce the addresses`\r\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n    //  already 0 to mitigate the race condition described here:\r\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifing the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    \r\n  address public owner;\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner {\r\n    require(newOwner != address(0));      \r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Mintable token\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\r\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n */\r\n\r\ncontract MintableToken is StandardToken, Ownable {\r\n    \r\n  event Mint(address indexed to, uint256 amount);\r\n  \r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will recieve the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(address _to, uint256 _amount) onlyOwner canMint returns (bool) {\r\n    totalSupply = totalSupply.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    Mint(_to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() onlyOwner returns (bool) {\r\n    mintingFinished = true;\r\n    MintFinished();\r\n    return true;\r\n  }\r\n  \r\n}\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n    \r\n  event Pause();\r\n  \r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n  /**\r\n   * @dev modifier to allow actions only when the contract IS paused\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev modifier to allow actions only when the contract IS NOT paused\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused {\r\n    paused = true;\r\n    Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused {\r\n    paused = false;\r\n    Unpause();\r\n  }\r\n  \r\n}\r\n\r\ncontract SGAToken is MintableToken {\t\r\n    \r\n  string public constant name = \"SGA Token\";\r\n   \r\n  string public constant symbol = \"SGA\";\r\n    \r\n  uint32 public constant decimals = 18;\r\n\r\n  bool public transferAllowed = false;\r\n\r\n  modifier whenTransferAllowed() {\r\n    require(transferAllowed || msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  function allowTransfer() onlyOwner {\r\n    transferAllowed = true;\r\n  }\r\n\r\n  function transfer(address _to, uint256 _value) whenTransferAllowed returns (bool) {\r\n    return super.transfer(_to, _value);\r\n  }\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value) whenTransferAllowed returns (bool) {\r\n    return super.transferFrom(_from, _to, _value);\r\n  }\r\n    \r\n}\r\n\r\n\r\ncontract PurchaseBonusCrowdsale is Pausable {\r\n\r\n  using SafeMath for uint;\r\n\r\n  struct Bonus {\r\n    uint limit;\r\n    uint bonus;\r\n  }\r\n \r\n  Bonus[] public bonuses;\r\n\r\n  function bonusesCount() constant returns(uint) {\r\n    return bonuses.length;\r\n  }\r\n\r\n  function addBonus(uint limit, uint bonus) onlyOwner {\r\n    bonuses.push(Bonus(limit, bonus));\r\n  }\r\n\r\n  function removeBonus(uint8 number) onlyOwner {\r\n    require(number < bonuses.length);\r\n\r\n    delete bonuses[number];\r\n\r\n    for (uint i = number; i < bonuses.length - 1; i++) {\r\n      bonuses[i] = bonuses[i+1];\r\n    }\r\n\r\n    bonuses.length--;\r\n  }\r\n\r\n  function changeBonus(uint8 number, uint limit, uint bonusValue) onlyOwner {\r\n    require(number < bonuses.length);\r\n    Bonus storage bonus = bonuses[number];\r\n\r\n    bonus.limit = limit;\r\n    bonus.bonus = bonusValue;\r\n  }\r\n\r\n  function insertBonus(uint8 numberAfter, uint limit, uint bonus) onlyOwner {\r\n    require(numberAfter < bonuses.length);\r\n\r\n    bonuses.length++;\r\n\r\n    for (uint i = bonuses.length - 2; i > numberAfter; i--) {\r\n      bonuses[i + 1] = bonuses[i];\r\n    }\r\n\r\n    bonuses[numberAfter + 1] = Bonus(limit, bonus);\r\n  }\r\n\r\n  function clearBonuses() onlyOwner {\r\n    require(bonuses.length > 0);\r\n    for (uint i = 0; i < bonuses.length; i++) {\r\n      delete bonuses[i];\r\n    }\r\n    bonuses.length -= bonuses.length;\r\n  }\r\n\r\n  function getBonus(uint value) constant returns(uint) {\r\n    uint targetBonus = 0;\r\n    if(value < bonuses[0].limit)\r\n      return 0;\r\n    for (uint i = bonuses.length; i > 0; i--) {\r\n      Bonus storage bonus = bonuses[i - 1];\r\n      if (value >= bonus.limit)\r\n        return bonus.bonus;\r\n      else\r\n        targetBonus = bonus.bonus;\r\n    }\r\n    return targetBonus;\r\n  }\r\n\r\n}\r\n\r\ncontract Crowdsale is PurchaseBonusCrowdsale {\r\n\r\n  uint public start;\r\n\r\n  uint public period;\r\n\r\n  uint public invested;\r\n\r\n  uint public hardCap;\r\n  \r\n  uint public softCap;\r\n\r\n  address public multisigWallet;\r\n\r\n  address public secondWallet;\r\n  \r\n  address public foundersTokensWallet;\r\n  \r\n  uint public secondWalletPercent;\r\n\r\n  uint public foundersTokensPercent;\r\n  \r\n  uint public price;\r\n  \r\n  uint public minPrice;\r\n\r\n  uint public percentRate = 1000;\r\n\r\n  bool public refundOn = false;\r\n  \r\n  mapping (address => uint) public balances;\r\n\r\n  SGAToken public token = new SGAToken();\r\n\r\n  function Crowdsale() {\r\n    period = 60;\r\n    price = 3000;\r\n    minPrice = 50000000000000000;\r\n    start = 1505998800;\r\n    hardCap = 186000000000000000000000;\r\n    softCap =  50000000000000000000000;\r\n    foundersTokensPercent = 202;\r\n    foundersTokensWallet = 0x839D81F27B870632428fab6ae9c5903936a4E5aE;\r\n    multisigWallet = 0x0CeeD87a6b8ac86938B6c2d1a0fA2B2e9000Cf6c;\r\n    secondWallet = 0x949e62320992D5BD123B4616d2E2769473101AbB;\r\n    secondWalletPercent = 10;\r\n    addBonus(1000000000000000000,5);\r\n    addBonus(2000000000000000000,10);\r\n    addBonus(3000000000000000000,15);\r\n    addBonus(5000000000000000000,20);\r\n    addBonus(7000000000000000000,25);\r\n    addBonus(10000000000000000000,30);\r\n    addBonus(15000000000000000000,35);\r\n    addBonus(20000000000000000000,40);\r\n    addBonus(50000000000000000000,45);\r\n    addBonus(75000000000000000000,50);\r\n    addBonus(100000000000000000000,55);\r\n    addBonus(150000000000000000000,60);\r\n    addBonus(200000000000000000000,70);\r\n    addBonus(300000000000000000000,75);\r\n    addBonus(500000000000000000000,80);\r\n    addBonus(750000000000000000000,90);\r\n    addBonus(1000000000000000000000,100);\r\n    addBonus(1500000000000000000000,110);\r\n    addBonus(2000000000000000000000,125);\r\n    addBonus(3000000000000000000000,140);\r\n  }\r\n\r\n  modifier saleIsOn() {\r\n    require(now >= start && now < lastSaleDate());\r\n    _;\r\n  }\r\n  \r\n  modifier isUnderHardCap() {\r\n    require(invested <= hardCap);\r\n    _;\r\n  }\r\n  \r\n  function lastSaleDate() constant returns(uint) {\r\n    return start + period * 1 days;\r\n  }\r\n\r\n  function setStart(uint newStart) onlyOwner {\r\n    start = newStart;\r\n  }\r\n  \r\n  function setMinPrice(uint newMinPrice) onlyOwner {\r\n    minPrice = newMinPrice;\r\n  }\r\n\r\n  function setHardcap(uint newHardcap) onlyOwner {\r\n    hardCap = newHardcap;\r\n  }\r\n\r\n  function setPrice(uint newPrice) onlyOwner {\r\n    price = newPrice;\r\n  }\r\n\r\n  function setFoundersTokensPercent(uint newFoundersTokensPercent) onlyOwner {\r\n    foundersTokensPercent = newFoundersTokensPercent;\r\n  }\r\n\r\n  function setSoftcap(uint newSoftcap) onlyOwner {\r\n    softCap = newSoftcap;\r\n  }\r\n\r\n  function setSecondWallet(address newSecondWallet) onlyOwner {\r\n    secondWallet = newSecondWallet;\r\n  }\r\n  \r\n  function setSecondWalletPercent(uint newSecondWalletPercent) onlyOwner {\r\n    secondWalletPercent = newSecondWalletPercent;\r\n  }\r\n\r\n  function setMultisigWallet(address newMultisigWallet) onlyOwner {\r\n    multisigWallet = newMultisigWallet;\r\n  }\r\n\r\n  function setFoundersTokensWallet(address newFoundersTokensWallet) onlyOwner {\r\n    foundersTokensWallet = newFoundersTokensWallet;\r\n  }\r\n\r\n  function createTokens() whenNotPaused isUnderHardCap saleIsOn payable {\r\n    require(msg.value >= minPrice);\r\n    balances[msg.sender] = balances[msg.sender].add(msg.value);\r\n    invested = invested.add(msg.value);\r\n    uint bonusPercent = getBonus(msg.value);\r\n    uint tokens = msg.value.mul(price);\r\n    uint bonusTokens = tokens.mul(bonusPercent).div(percentRate);\r\n    uint tokensWithBonus = tokens.add(bonusTokens);\r\n    token.mint(this, tokensWithBonus);\r\n    token.transfer(msg.sender, tokensWithBonus);\r\n  }\r\n\r\n  function refund() whenNotPaused {\r\n    require(now > start && refundOn && balances[msg.sender] > 0);\r\n    msg.sender.transfer(balances[msg.sender]);\r\n  } \r\n\r\n  function finishMinting() public whenNotPaused onlyOwner {\r\n    if(invested < softCap) {\r\n      refundOn = true;      \r\n    } else {\r\n      uint secondWalletInvested = invested.mul(secondWalletPercent).div(percentRate);\r\n      secondWallet.transfer(secondWalletInvested);\r\n      multisigWallet.transfer(invested - secondWalletInvested);    \r\n      uint issuedTokenSupply = token.totalSupply();\r\n      uint foundersTokens = issuedTokenSupply.mul(foundersTokensPercent).div(percentRate - foundersTokensPercent);\r\n      token.mint(this, foundersTokens);\r\n      token.allowTransfer();\r\n      token.transfer(foundersTokensWallet, foundersTokens);\r\n    }\r\n    token.finishMinting();\r\n    token.transferOwnership(owner);\r\n  }\r\n\r\n  function() external payable {\r\n    createTokens();\r\n  }\r\n\r\n  function retrieveTokens(address anotherToken) public onlyOwner {\r\n    ERC20 alienToken = ERC20(anotherToken);\r\n    alienToken.transfer(multisigWallet, token.balanceOf(this));\r\n  }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"newSoftcap\",\"type\":\"uint256\"}],\"name\":\"setSoftcap\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"secondWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastSaleDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newFoundersTokensWallet\",\"type\":\"address\"}],\"name\":\"setFoundersTokensWallet\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newSecondWallet\",\"type\":\"address\"}],\"name\":\"setSecondWallet\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"foundersTokensWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"getBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"refundOn\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refund\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"numberAfter\",\"type\":\"uint8\"},{\"name\":\"limit\",\"type\":\"uint256\"},{\"name\":\"bonus\",\"type\":\"uint256\"}],\"name\":\"insertBonus\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"number\",\"type\":\"uint8\"},{\"name\":\"limit\",\"type\":\"uint256\"},{\"name\":\"bonusValue\",\"type\":\"uint256\"}],\"name\":\"changeBonus\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newMinPrice\",\"type\":\"uint256\"}],\"name\":\"setMinPrice\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newMultisigWallet\",\"type\":\"address\"}],\"name\":\"setMultisigWallet\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"percentRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"foundersTokensPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"clearBonuses\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"softCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"multisigWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bonuses\",\"outputs\":[{\"name\":\"limit\",\"type\":\"uint256\"},{\"name\":\"bonus\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"anotherToken\",\"type\":\"address\"}],\"name\":\"retrieveTokens\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newFoundersTokensPercent\",\"type\":\"uint256\"}],\"name\":\"setFoundersTokensPercent\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"limit\",\"type\":\"uint256\"},{\"name\":\"bonus\",\"type\":\"uint256\"}],\"name\":\"addBonus\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"createTokens\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"secondWalletPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"start\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newSecondWalletPercent\",\"type\":\"uint256\"}],\"name\":\"setSecondWalletPercent\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"invested\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"number\",\"type\":\"uint8\"}],\"name\":\"removeBonus\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusesCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newHardcap\",\"type\":\"uint256\"}],\"name\":\"setHardcap\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"period\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newStart\",\"type\":\"uint256\"}],\"name\":\"setStart\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hardCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"}]","ContractName":"Crowdsale","CompilerVersion":"v0.4.13+commit.fb4cb1a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://b275c97b09c54d82fe690f727409fe1926a0326e6acb030e76d6c0c4e16e1379"}]}