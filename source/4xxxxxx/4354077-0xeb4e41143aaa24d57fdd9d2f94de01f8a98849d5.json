{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.16;\r\n\r\ncontract SafeMath {\r\n     function safeMul(uint a, uint b) internal returns (uint) {\r\n          uint c = a * b;\r\n          assert(a == 0 || c / a == b);\r\n          return c;\r\n     }\r\n\r\n     function safeSub(uint a, uint b) internal returns (uint) {\r\n          assert(b <= a);\r\n          return a - b;\r\n     }\r\n\r\n     function safeAdd(uint a, uint b) internal returns (uint) {\r\n          uint c = a + b;\r\n          assert(c>=a && c>=b);\r\n          return c;\r\n     }\r\n}\r\n\r\n// ERC20 standard\r\ncontract StdToken {\r\n     function transfer(address, uint256) returns(bool);\r\n     function transferFrom(address, address, uint256) returns(bool);\r\n     function balanceOf(address) constant returns (uint256);\r\n     function approve(address, uint256) returns (bool);\r\n     function allowance(address, address) constant returns (uint256);\r\n}\r\n\r\ncontract GoldmintVote1 {\r\n// Fields:\r\n     address public creator = 0x0;\r\n     bool public stopped = false;\r\n     StdToken mntpToken; \r\n\r\n     mapping(address => bool) isVoted;\r\n     mapping(address => bool) votes;\r\n     uint public totalVotes = 0;\r\n     uint public votedYes = 0;\r\n\r\n// Functions:\r\n     function GoldmintVote1(address _mntpContractAddress) {\r\n          require(_mntpContractAddress!=0);\r\n\r\n          creator = msg.sender;\r\n          mntpToken = StdToken(_mntpContractAddress);\r\n     }\r\n\r\n     function vote(bool _answer) public {\r\n          require(!stopped);\r\n\r\n          // 1 - should be Goldmint MNTP token holder \r\n          // with >1 MNTP token balance\r\n          uint256 balance = mntpToken.balanceOf(msg.sender);\r\n          require(balance>=1 ether);\r\n\r\n          // 2 - can vote only once \r\n          require(isVoted[msg.sender]==false);\r\n\r\n          // save vote\r\n          votes[msg.sender] = _answer;\r\n          isVoted[msg.sender] = true;\r\n\r\n          ++totalVotes;\r\n          if(_answer){\r\n               ++votedYes;\r\n          }\r\n     }\r\n\r\n     function getVoteBy(address _a) public constant returns(bool) {\r\n          require(isVoted[_a]==true);\r\n          return votes[_a];\r\n     }\r\n\r\n     function stop() public {\r\n          require(msg.sender==creator);\r\n          stopped = true;\r\n     }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalVotes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_a\",\"type\":\"address\"}],\"name\":\"getVoteBy\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_answer\",\"type\":\"bool\"}],\"name\":\"vote\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stopped\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"votedYes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_mntpContractAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"GoldmintVote1","CompilerVersion":"v0.4.17+commit.bdeb9e52","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000083cee9e086a77e492ee0bb93c2b0437ad6fdeccc","Library":"","SwarmSource":"bzzr://8f76f5023ba4b651f582e36ff387495f0211ac4de7272d354a6dd756e385053b"}]}