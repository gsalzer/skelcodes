{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n// Â© Bulleon. All Rights Reserved\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract owned {\r\n    address public owner;\r\n    address public newOwner;\r\n\r\n    function owned() payable {\r\n        owner = msg.sender;\r\n    }\r\n    \r\n    modifier onlyOwner {\r\n        require(owner == msg.sender);\r\n        _;\r\n    }\r\n\r\n    function changeOwner(address _owner) onlyOwner public {\r\n        require(_owner != 0);\r\n        newOwner = _owner;\r\n    }\r\n    \r\n    function confirmOwner() public {\r\n        require(newOwner == msg.sender);\r\n        owner = newOwner;\r\n        delete newOwner;\r\n    }\r\n}\r\n\r\ncontract StandardToken {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n    mapping(address => uint256) balances;\r\n    uint256 public totalSupply;  \r\n    \r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    /**\r\n    * @dev transfer token for a specified address\r\n    * @param _to The address to transfer to.\r\n    * @param _value The amount to be transferred.\r\n    */\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n      require(_to != address(0));\r\n\r\n      // SafeMath.sub will throw if there is not enough balance.\r\n      balances[msg.sender] = balances[msg.sender].sub(_value);\r\n      balances[_to] = balances[_to].add(_value);\r\n      Transfer(msg.sender, _to, _value);\r\n      return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the balance of the specified address.\r\n    * @param _owner The address to query the the balance of. \r\n    * @return An uint256 representing the amount owned by the passed address.\r\n    */\r\n    function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n      return balances[_owner];\r\n    }\r\n\r\n\r\n    /**\r\n    * @dev Transfer tokens from one address to another\r\n    * @param _from address The address which you want to send tokens from\r\n    * @param _to address The address which you want to transfer to\r\n    * @param _value uint256 the amount of tokens to be transferred\r\n    */\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n      require(_to != address(0));\r\n\r\n      var _allowance = allowed[_from][msg.sender];\r\n\r\n      // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n      // require (_value <= _allowance);\r\n\r\n      balances[_from] = balances[_from].sub(_value);\r\n      balances[_to] = balances[_to].add(_value);\r\n      allowed[_from][msg.sender] = _allowance.sub(_value);\r\n      Transfer(_from, _to, _value);\r\n      return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n    * @param _spender The address which will spend the funds.\r\n    * @param _value The amount of tokens to be spent.\r\n    */\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n\r\n      // To change the approve amount you first have to reduce the addresses`\r\n      //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n      //  already 0 to mitigate the race condition described here:\r\n      //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n      require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n\r\n      allowed[msg.sender][_spender] = _value;\r\n      Approval(msg.sender, _spender, _value);\r\n      return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n    * @param _owner address The address which owns the funds.\r\n    * @param _spender address The address which will spend the funds.\r\n    * @return A uint256 specifying the amount of tokens still available for the spender.\r\n    */\r\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n      return allowed[_owner][_spender];\r\n    }\r\n    \r\n    /**\r\n    * approve should be called when allowed[_spender] == 0. To increment\r\n    * allowed value is better to use this function to avoid 2 calls (and wait until \r\n    * the first transaction is mined)\r\n    * From MonolithDAO Token.sol\r\n    */\r\n    function increaseApproval (address _spender, uint _addedValue) public\r\n      returns (bool success) {\r\n      allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n      Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n      return true;\r\n    }\r\n\r\n    function decreaseApproval (address _spender, uint _subtractedValue) public\r\n      returns (bool success) {\r\n      uint oldValue = allowed[msg.sender][_spender];\r\n      if (_subtractedValue > oldValue) {\r\n        allowed[msg.sender][_spender] = 0;\r\n      } else {\r\n        allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n      }\r\n      Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n      return true;\r\n    }\r\n}\r\n\r\n\r\ncontract BulleonICO is owned {\r\n    using SafeMath for uint256;\r\n    string public version = \"1.0\";\r\n    address private WITHDRAW_WALLET;\r\n    uint256 public totalSold = 0;\r\n    uint256 public soldOnStage = 0;\r\n    uint8 public currentStage = 0;\r\n    Bulleon public rewardToken;\r\n\r\n\r\n    uint256[] tokensRate = [1000,800,600,400,200,100,75,50,25,10,5,1];\r\n    uint256[] tokensCap = [760000,760000,760000,760000,760000,760000,760000,760000,760000,760000,760000,760000];\r\n    mapping(address=>uint256) investments;\r\n    uint256 LIMIT_ON_BENEFICIARY = 1000 * 1 ether;\r\n\r\n    function investmentsOf(address beneficiary) public constant returns(uint256) {\r\n      return investments[beneficiary];\r\n    }\r\n  \r\n    function availableOnStage() public constant returns(uint256) {\r\n        return tokensCap[currentStage].mul(1 ether).sub(soldOnStage);\r\n    }\r\n\r\n    function createTokenContract() internal returns (Bulleon) {\r\n      return new Bulleon();\r\n    }\r\n\r\n    function currentStageTokensCap() public constant returns(uint256) {\r\n      return tokensCap[currentStage];\r\n    }\r\n    function currentStageTokensRate() public constant returns(uint256) {\r\n      return tokensRate[currentStage];\r\n    }\r\n\r\n    function BulleonICO() payable owned() {\r\n        owner = msg.sender;\r\n        WITHDRAW_WALLET = msg.sender; \r\n        rewardToken = createTokenContract();\r\n    }\r\n\r\n    function () payable {\r\n        buyTokens(msg.sender);\r\n    }\r\n\r\n    function buyTokens(address beneficiary) payable {\r\n      bool canBuy = investmentsOf(beneficiary) < LIMIT_ON_BENEFICIARY;\r\n      bool validPurchase = beneficiary != 0x0 && msg.value != 0;\r\n      uint256 currentTokensAmount = availableTokens();\r\n      require(canBuy && validPurchase && currentTokensAmount > 0);\r\n      uint256 boughtTokens;\r\n      uint256 refundAmount = 0;\r\n      \r\n      uint256[2] memory tokensAndRefund = calcMultiStage();\r\n      boughtTokens = tokensAndRefund[0];\r\n      refundAmount = tokensAndRefund[1];\r\n\r\n      require(boughtTokens < currentTokensAmount);\r\n\r\n      totalSold = totalSold.add(boughtTokens);\r\n      investments[beneficiary] = investments[beneficiary].add(boughtTokens);\r\n      if( soldOnStage >= tokensCap[currentStage].mul(1 ether)) {\r\n        toNextStage();\r\n      } \r\n      \r\n      rewardToken.transfer(beneficiary,boughtTokens);\r\n      if (refundAmount > 0) \r\n          refundMoney(refundAmount);\r\n\r\n      withdrawFunds(this.balance);\r\n    }\r\n\r\n    function forceWithdraw() onlyOwner {\r\n      withdrawFunds(this.balance);\r\n    }\r\n\r\n    function calcMultiStage() internal returns(uint256[2]) {\r\n      uint256 stageBoughtTokens;\r\n      uint256 undistributedAmount = msg.value; \r\n      uint256 _boughtTokens = 0; \r\n      uint256 undistributedTokens = availableTokens(); \r\n\r\n      while(undistributedAmount > 0 && undistributedTokens > 0) {\r\n        bool needNextStage = false; \r\n        \r\n        stageBoughtTokens = getTokensAmount(undistributedAmount);\r\n        \r\n\r\n        if(totalInvestments(_boughtTokens.add(stageBoughtTokens)) > LIMIT_ON_BENEFICIARY){\r\n          stageBoughtTokens = LIMIT_ON_BENEFICIARY.sub(_boughtTokens);\r\n          undistributedTokens = stageBoughtTokens; \r\n        }\r\n\r\n        \r\n        if (stageBoughtTokens > availableOnStage()) {\r\n          stageBoughtTokens = availableOnStage();\r\n          needNextStage = true; \r\n        }\r\n        \r\n        _boughtTokens = _boughtTokens.add(stageBoughtTokens);\r\n        undistributedTokens = undistributedTokens.sub(stageBoughtTokens); \r\n        undistributedAmount = undistributedAmount.sub(getTokensCost(stageBoughtTokens)); \r\n        soldOnStage = soldOnStage.add(stageBoughtTokens);\r\n        if (needNextStage) \r\n          toNextStage();\r\n      }\r\n      return [_boughtTokens,undistributedAmount];\r\n    }\r\n\r\n\r\n    function setWithdrawWallet(address addressToWithdraw) public onlyOwner {\r\n        require(addressToWithdraw != 0x0);\r\n        WITHDRAW_WALLET = addressToWithdraw;\r\n    }\r\n    function totalInvestments(uint additionalAmount) internal returns (uint256) {\r\n      return investmentsOf(msg.sender).add(additionalAmount);\r\n    }\r\n\r\n    function refundMoney(uint256 refundAmount) internal {\r\n      msg.sender.transfer(refundAmount);\r\n    }\r\n\r\n    function burnTokens(uint256 amount) public onlyOwner {\r\n      rewardToken.burn(amount);\r\n    }\r\n\r\n    function getTokensCost(uint256 _tokensAmount) internal constant returns(uint256) {\r\n      return _tokensAmount.div(tokensRate[currentStage]);\r\n    } \r\n\r\n    function getTokensAmount(uint256 _amountInWei) internal constant returns(uint256) {\r\n      return _amountInWei.mul(tokensRate[currentStage]);\r\n    }\r\n\r\n    function toNextStage() internal {\r\n        \r\n        if(currentStage < tokensRate.length && currentStage < tokensCap.length){\r\n          currentStage++;\r\n          soldOnStage = 0;\r\n        }\r\n    }\r\n\r\n    function availableTokens() public constant returns(uint256) {\r\n        return rewardToken.balanceOf(address(this));\r\n    }\r\n\r\n    function withdrawFunds(uint256 amount) internal {\r\n        WITHDRAW_WALLET.transfer(amount);\r\n    }\r\n}\r\n\r\n\r\ncontract Bulleon is StandardToken {\r\n      event Burn(address indexed burner, uint256 value);\r\n\r\n      string public constant name = \"Bulleon\";\r\n      string public constant symbol = \"BLN\";\r\n      uint8 public constant decimals = 18;\r\n      string public version = \"1.0\";\r\n      uint256 public totalSupply  = 9500000 * 1 ether;\r\n      mapping(address=>uint256) premineOf;\r\n      address[] private premineWallets = [\r\n          0xdAB26a04594Ca4EDB276672BE0A0F697e5a24aFb, \r\n          0xA75E62874Cb25D53e563A269DF4b52d5A28e7A8e, \r\n          0x6Ff480a30D037B774c6aba935468fa5560d769a4  \r\n      ];\r\n\r\n      function Bulleon() public {\r\n        balances[msg.sender] = totalSupply;\r\n        premineOf[premineWallets[0]] = 95000 * 1 ether; \r\n        premineOf[premineWallets[1]] = 95000 * 1 ether;\r\n        premineOf[premineWallets[2]] = 190000 * 1 ether;\r\n        \r\n        for(uint i = 0; i<premineWallets.length;i++) {\r\n          transfer(premineWallets[i],premineOf[premineWallets[i]]);\r\n        }\r\n      }\r\n\r\n    /**\r\n     * @dev Burns a specific amount of tokens.\r\n     * @param _value The amount of token to be burned.\r\n     */\r\n    function burn(uint256 _value) public {\r\n        require(_value > 0);\r\n\r\n        address burner = msg.sender;\r\n        balances[burner] = balances[burner].sub(_value);\r\n        totalSupply = totalSupply.sub(_value);\r\n        Burn(burner, _value);\r\n    }\r\n  }","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"Bulleon","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://3f7d0552de59291e81a0673b42c325484ecf1db0aebae252f7e676bd24e93138"}]}