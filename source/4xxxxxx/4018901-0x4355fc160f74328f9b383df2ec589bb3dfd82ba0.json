{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.8;\r\n\r\n\r\n/**\r\n * Math operations with safety checks\r\n * By OpenZeppelin: https://github.com/OpenZeppelin/zeppelin-solidity/contracts/SafeMath.sol\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal returns (uint256) {\r\n    uint256 c = a * b;\r\n    if(!(a == 0 || c / a == b)) throw;\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal returns (uint256) {\r\n    if(!(b <= a)) throw;\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal returns (uint256) {\r\n    uint256 c = a + b;\r\n    if(!(c >= a)) throw;\r\n    return c;\r\n  }\r\n\r\n  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n    return a < b ? a : b;\r\n  }\r\n\r\n  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    return a < b ? a : b;\r\n  }\r\n\r\n}\r\n\r\ncontract ContractReceiver{\r\n    function tokenFallback(address _from, uint256 _value, bytes  _data) external;\r\n}\r\n\r\n\r\n//Basic ERC23 token, backward compatible with ERC20 transfer function.\r\n//Based in part on code by open-zeppelin: https://github.com/OpenZeppelin/zeppelin-solidity.git\r\ncontract ERC23BasicToken {\r\n    using SafeMath for uint256;\r\n    uint256 public totalSupply;\r\n    mapping(address => uint256) balances;\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    \r\n    function tokenFallback(address _from, uint256 _value, bytes  _data) external {\r\n        throw;\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value, bytes _data) returns (bool success) {\r\n\r\n        //Standard ERC23 transfer function\r\n\r\n        if(isContract(_to)) {\r\n            transferToContract(_to, _value, _data);\r\n        }\r\n        else {\r\n            transferToAddress(_to, _value, _data);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) {\r\n\r\n        //standard function transfer similar to ERC20 transfer with no _data\r\n        //added due to backwards compatibility reasons\r\n\r\n        bytes memory empty;\r\n        if(isContract(_to)) {\r\n            transferToContract(_to, _value, empty);\r\n        }\r\n        else {\r\n            transferToAddress(_to, _value, empty);\r\n        }\r\n    }\r\n\r\n    function transferToAddress(address _to, uint256 _value, bytes _data) internal {\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        Transfer(msg.sender, _to, _value);\r\n     }\r\n\r\n    function transferToContract(address _to, uint256 _value, bytes _data) internal {\r\n        balances[msg.sender] = balances[msg.sender].sub( _value);\r\n        balances[_to] = balances[_to].add( _value);\r\n        ContractReceiver receiver = ContractReceiver(_to);\r\n        receiver.tokenFallback(msg.sender, _value, _data);\r\n        Transfer(msg.sender, _to, _value);    }\r\n\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    //assemble the given address bytecode. If bytecode exists then the _addr is a contract.\r\n    function isContract(address _addr) returns (bool is_contract) {\r\n          uint256 length;\r\n          assembly {\r\n              //retrieve the size of the code on target address, this needs assembly\r\n              length := extcodesize(_addr)\r\n          }\r\n          if(length>0) {\r\n              return true;\r\n          }\r\n          else {\r\n              return false;\r\n          }\r\n    }\r\n}\r\n\r\ncontract ERC23StandardToken is ERC23BasicToken {\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n    event Approval (address indexed owner, address indexed spender, uint256 value);\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) {\r\n        var _allowance = allowed[_from][msg.sender];\r\n\r\n        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n        // if (_value > _allowance) throw;\r\n\r\n        balances[_to] = balances[_to].add(_value);\r\n        balances[_from] = balances[_from].sub(_value);\r\n        allowed[_from][msg.sender] = _allowance.sub(_value);\r\n        Transfer(_from, _to, _value);\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) {\r\n\r\n        // To change the approve amount you first have to reduce the addresses`\r\n        //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n        //  already 0 to mitigate the race condition described here:\r\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n        if ((_value != 0) && (allowed[msg.sender][_spender] != 0)) throw;\r\n\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n// Based in part on code by Open-Zeppelin: https://github.com/OpenZeppelin/zeppelin-solidity.git\r\n// Based in part on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\ncontract OpusToken is ERC23StandardToken {\r\n    string public constant name = \"Opus Token\";\r\n    string public constant symbol = \"OPT\";\r\n    uint256 public constant decimals = 18;\r\n    address public multisig=address(0x1426c1f91b923043F7C5FbabC6e369e7cBaef3f0); //multisig wallet, to which all contributions will be sent\r\n    address public foundation; //owner address\r\n    address public candidate; //owner candidate in 2-phase ownership transfer\r\n\r\n    mapping (address => uint256) contributions; //keeps track of ether contributions in Wei of each contributor address\r\n    uint256 public startBlock = 4023333; //pre-crowdsale start block (30min ealier than estimate) \r\n    uint256 public preEndBlock = 4057233; //pre-crowdsale end block(1h after estimated time)\r\n    uint256 public phase1StartBlock = 4066633; //Crowdsale start block (1h earlier)\r\n    uint256 public phase1EndBlock = 4100233; //Week 1 end block (estimate)\r\n    uint256 public phase2EndBlock = 4133833; //Week 2 end block (estimate)\r\n    uint256 public phase3EndBlock = 4201433; //Week 4 end block (2h later)\r\n    uint256 public endBlock = 4201433; //whole crowdsale end block\r\n    uint256 public crowdsaleTokenSupply = 900000000 * (10**18); //Amount of tokens for sale during crowdsale\r\n    uint256 public ecosystemTokenSupply = 100000000 * (10**18); //Tokens for supporting the Opus eco-system, e.g. purchasing music licenses, artist bounties, etc.\r\n    uint256 public foundationTokenSupply = 600000000 * (10**18); //Tokens distributed to the Opus foundation, developers and angel investors\r\n    uint256 public crowdsaleTokenSold = 0; //Keeps track of the amount of tokens sold during the crowdsale\r\n    uint256 public presaleEtherRaised = 0; //Keeps track of the Ether raised during the crowdsale\r\n    uint256 public transferLockup = 9600;\r\n    bool public halted = false; //Halt crowdsale in emergency\r\n    event Halt(); //Halt event\r\n    event Unhalt(); //Unhalt event\r\n\r\n    modifier onlyFoundation() {\r\n        //only do if call is from owner modifier\r\n        if (msg.sender != foundation) throw;\r\n        _;\r\n    }\r\n\r\n    modifier crowdsaleTransferLock() {\r\n        // lockup during and after 48h of end of crowdsale\r\n        if (block.number <= endBlock.add(transferLockup)) throw;\r\n        _;\r\n    }\r\n\r\n    modifier whenNotHalted() {\r\n        // only do when not halted modifier\r\n        if (halted) throw;\r\n        _;\r\n    }\r\n\r\n    //Constructor: set multisig crowdsale recipient wallet address and fund the foundation\r\n    //Initialize total supply and allocate ecosystem & foundation tokens\r\n  \tfunction OpusToken() {\r\n        foundation = msg.sender;\r\n        totalSupply = ecosystemTokenSupply.add(foundationTokenSupply);\r\n        balances[foundation] = totalSupply;\r\n  \t}\r\n\r\n    //Fallback function when receiving Ether.\r\n    function() payable {\r\n        buy();\r\n    }\r\n\r\n\r\n    //Halt ICO in case of emergency.\r\n    function halt() onlyFoundation {\r\n        halted = true;\r\n        Halt();\r\n    }\r\n\r\n    function unhalt() onlyFoundation {\r\n        halted = false;\r\n        Unhalt();\r\n    }\r\n\r\n    function buy() payable {\r\n        buyRecipient(msg.sender);\r\n    }\r\n\r\n    //Allow addresses to buy token for another account\r\n    function buyRecipient(address recipient) public payable whenNotHalted {\r\n        if(msg.value == 0) throw;\r\n        if(!(preCrowdsaleOn()||crowdsaleOn())) throw;//only allows during presale/crowdsale\r\n        if(contributions[recipient].add(msg.value)>perAddressCap()) throw;//per address cap\r\n        uint256 tokens = msg.value.mul(returnRate()); //decimals=18, so no need to adjust for unit\r\n        if(crowdsaleTokenSold.add(tokens)>crowdsaleTokenSupply) throw;//max supply limit\r\n\r\n        balances[recipient] = balances[recipient].add(tokens);\r\n        totalSupply = totalSupply.add(tokens);\r\n        presaleEtherRaised = presaleEtherRaised.add(msg.value);\r\n        contributions[recipient] = contributions[recipient].add(msg.value);\r\n        crowdsaleTokenSold = crowdsaleTokenSold.add(tokens);\r\n        if(crowdsaleTokenSold == crowdsaleTokenSupply){\r\n        //If crowdsale token sold out, end crowdsale\r\n            if(block.number < preEndBlock) {\r\n                preEndBlock = block.number;\r\n            }\r\n            endBlock = block.number;\r\n        }\r\n        if (!multisig.send(msg.value)) throw; //immediately send Ether to multisig address\r\n        Transfer(this, recipient, tokens);\r\n    }\r\n\r\n    //Burns the specified amount of tokens from the foundation\r\n    //Used to burn unspent funds in foundation DAO\r\n    function burn(uint256 _value) external onlyFoundation returns (bool) {\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        totalSupply = totalSupply.sub(_value);\r\n        Transfer(msg.sender, address(0), _value);\r\n        return true;\r\n    }\r\n\r\n    //2-phase ownership transfer;\r\n    //prevent transferring ownership to non-existent addresses by accident.\r\n    function proposeFoundationTransfer(address newFoundation) external onlyFoundation {\r\n        //propose new owner\r\n        candidate = newFoundation;\r\n    }\r\n\r\n    function cancelFoundationTransfer() external onlyFoundation {\r\n        candidate = address(0);\r\n    }\r\n\r\n    function acceptFoundationTransfer() external {\r\n        //new owner accept transfer to complete transfer\r\n        if(msg.sender != candidate) throw;\r\n        foundation = candidate;\r\n        candidate = address(0);\r\n    }\r\n\r\n    //Allow to change the recipient multisig address\r\n    function setMultisig(address addr) external onlyFoundation {\r\n      \tif (addr == address(0)) throw;\r\n      \tmultisig = addr;\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value, bytes _data) public crowdsaleTransferLock returns (bool success) {\r\n        return super.transfer(_to, _value, _data);\r\n    }\r\n\r\n\t  function transfer(address _to, uint256 _value) public crowdsaleTransferLock {\r\n        super.transfer(_to, _value);\r\n\t  }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public crowdsaleTransferLock {\r\n        super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n    //Return rate of token against ether.\r\n    function returnRate() public constant returns(uint256) {\r\n        if (block.number>=startBlock && block.number<=preEndBlock) return 8888; //Pre-crowdsale\r\n        if (block.number>=phase1StartBlock && block.number<=phase1EndBlock) return 8000; //Crowdsale phase1\r\n        if (block.number>phase1EndBlock && block.number<=phase2EndBlock) return 7500; //Phase2\r\n        if (block.number>phase2EndBlock && block.number<=phase3EndBlock) return 7000; //Phase3\r\n    }\r\n\r\n    //per address cap in Wei: 1000 ether + 1% of ether received at the given time.\r\n    function perAddressCap() public constant returns(uint256) {\r\n        uint256 baseline = 1000 * (10**18);\r\n        return baseline.add(presaleEtherRaised.div(100));\r\n    }\r\n\r\n    function preCrowdsaleOn() public constant returns (bool) {\r\n        //return whether presale is on according to block number\r\n        return (block.number>=startBlock && block.number<=preEndBlock);\r\n    }\r\n\r\n    function crowdsaleOn() public constant returns (bool) {\r\n        //return whether crowdsale is on according to block number\r\n        return (block.number>=phase1StartBlock && block.number<=endBlock);\r\n    }\r\n\r\n\r\n    function getEtherRaised() external constant returns (uint256) {\r\n        //getter function for etherRaised\r\n        return presaleEtherRaised;\r\n    }\r\n\r\n    function getTokenSold() external constant returns (uint256) {\r\n        //getter function for crowdsaleTokenSold\r\n        return crowdsaleTokenSold;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleOn\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"buyRecipient\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"phase1StartBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptFoundationTransfer\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"isContract\",\"outputs\":[{\"name\":\"is_contract\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleTokenSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"foundation\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleTokenSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presaleEtherRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"multisig\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"perAddressCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"phase1EndBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ecosystemTokenSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"halt\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preCrowdsaleOn\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"phase2EndBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"candidate\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"returnRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preEndBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newFoundation\",\"type\":\"address\"}],\"name\":\"proposeFoundationTransfer\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"phase3EndBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTokenSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"halted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"tokenFallback\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transferLockup\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unhalt\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getEtherRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cancelFoundationTransfer\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setMultisig\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"foundationTokenSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Halt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unhalt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"OpusToken","CompilerVersion":"v0.4.8+commit.60cc1668","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://be2438a2c5e28c2f291e5de0431c85e1051363d4bbf7da1f0b10f176e5d9be65"}]}