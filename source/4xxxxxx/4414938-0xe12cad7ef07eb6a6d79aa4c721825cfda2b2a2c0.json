{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n * Copyright 2017 Icofunding S.L. (https://icofunding.com)\r\n * \r\n */\r\n\r\n/**\r\n * Math operations with safety checks\r\n * Reference: https://github.com/OpenZeppelin/zeppelin-solidity/commit/353285e5d96477b4abb86f7cde9187e84ed251ac\r\n */\r\ncontract SafeMath {\r\n  function safeMul(uint a, uint b) internal constant returns (uint) {\r\n    uint c = a * b;\r\n\r\n    assert(a == 0 || c / a == b);\r\n\r\n    return c;\r\n  }\r\n\r\n  function safeDiv(uint a, uint b) internal constant returns (uint) {    \r\n    uint c = a / b;\r\n\r\n    return c;\r\n  }\r\n\r\n  function safeSub(uint a, uint b) internal constant returns (uint) {\r\n    require(b <= a);\r\n\r\n    return a - b;\r\n  }\r\n\r\n  function safeAdd(uint a, uint b) internal constant returns (uint) {\r\n    uint c = a + b;\r\n\r\n    assert(c>=a && c>=b);\r\n\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract EtherReceiverInterface {\r\n  function receiveEther() public payable;\r\n}\r\n\r\n/**\r\n * Escrow contract to manage the funds collected\r\n */\r\ncontract Escrow is SafeMath, EtherReceiverInterface {\r\n  // Sample thresholds.\r\n  uint[3] threshold = [0 ether, 21008 ether, 1000000 ether];\r\n  // Different rates for each phase.\r\n  uint[2] rate = [4, 1];\r\n\r\n  // Adresses that will receive funds\r\n  address public project;\r\n  address public icofunding;\r\n\r\n  // Block from when the funds will be released\r\n  uint public lockUntil;\r\n\r\n  // Wei\r\n  uint public totalCollected; // total amount of wei collected\r\n\r\n  modifier locked() {\r\n    require(block.number >= lockUntil);\r\n\r\n    _;\r\n  }\r\n\r\n  event e_Withdraw(uint block, uint fee, uint amount);\r\n\r\n  function Escrow(uint _lockUntil, address _icofunding, address _project) {\r\n    lockUntil = _lockUntil;\r\n    icofunding = _icofunding;\r\n    project = _project;\r\n  }\r\n\r\n  // Sends the funds collected to the addresses \"icofunding\" and \"project\"\r\n  // The ether is distributed following the formula below\r\n  // Only exeuted after \"lockUntil\"\r\n  function withdraw() public locked {\r\n    // Calculates the amount to send to each address\r\n    uint fee = getFee(this.balance);\r\n    uint amount = safeSub(this.balance, fee);\r\n\r\n    // Sends the ether\r\n    icofunding.transfer(fee);\r\n    project.transfer(amount);\r\n\r\n    e_Withdraw(block.number, fee, amount);\r\n  }\r\n\r\n  // Calculates the variable fees depending on the amount, thresholds and rates set.\r\n  function getFee(uint value) public constant returns (uint) {\r\n    uint fee;\r\n    uint slice;\r\n    uint aux;\r\n\r\n    for(uint i = 0; i < 2; i++) {\r\n      aux = value;\r\n      if(value > threshold[i+1])\r\n        aux = threshold[i+1];\r\n\r\n      if(threshold[i] < aux) {\r\n        slice = safeSub(aux, threshold[i]);\r\n\r\n        fee = safeAdd(fee, safeDiv(safeMul(slice, rate[i]), 100));\r\n      }\r\n    }\r\n\r\n    return fee;\r\n  }\r\n\r\n  function receiveEther() public payable {\r\n    totalCollected += msg.value;\r\n  }\r\n\r\n  function() payable {\r\n    totalCollected += msg.value;\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"icofunding\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockUntil\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"receiveEther\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalCollected\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"project\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"getFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_lockUntil\",\"type\":\"uint256\"},{\"name\":\"_icofunding\",\"type\":\"address\"},{\"name\":\"_project\",\"type\":\"address\"}],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"block\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"e_Withdraw\",\"type\":\"event\"}]","ContractName":"Escrow","CompilerVersion":"v0.4.13+commit.fb4cb1a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000462868000000000000000000000000f561c80611122b561b068a16b90f4e8bde205aa7000000000000000000000000412790a9e6a6dd5b201bfa29af8d589cb85ff20c","Library":"","SwarmSource":"bzzr://f64509eae187ef3286f38c1fb60c3637460d71cc0084fb51f5051d221820dcb3"}]}