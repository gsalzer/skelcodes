{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20Basic {\r\n  uint public totalSupply;\r\n  function balanceOf(address who) constant returns (uint);\r\n  function transfer(address to, uint value);\r\n  event Transfer(address indexed from, address indexed to, uint value);\r\n}\r\n\r\n/**\r\n * Math operations with safety checks\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint a, uint b) internal returns (uint) {\r\n    uint c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint a, uint b) internal returns (uint) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint a, uint b) internal returns (uint) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint a, uint b) internal returns (uint) {\r\n    uint c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n\r\n  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n    return a < b ? a : b;\r\n  }\r\n\r\n  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    return a < b ? a : b;\r\n  }\r\n  \r\n  /**\r\n   * Based on http://www.codecodex.com/wiki/Calculate_an_integer_square_root\r\n   */\r\n  function sqrt(uint num) internal returns (uint) {\r\n    if (0 == num) { // Avoid zero divide \r\n      return 0; \r\n    }   \r\n    uint n = (num / 2) + 1;      // Initial estimate, never low  \r\n    uint n1 = (n + (num / n)) / 2;  \r\n    while (n1 < n) {  \r\n      n = n1;  \r\n      n1 = (n + (num / n)) / 2;  \r\n    }  \r\n    return n;  \r\n  }\r\n\r\n  function assert(bool assertion) internal {\r\n    if (!assertion) {\r\n      throw;\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances. \r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint;\r\n\r\n  mapping(address => uint) balances;\r\n\r\n  /**\r\n   * @dev Fix for the ERC20 short address attack.\r\n   */\r\n  modifier onlyPayloadSize(uint size) {\r\n     if(msg.data.length < size + 4) {\r\n       throw;\r\n     }\r\n     _;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint _value) onlyPayloadSize(2 * 32) {\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of. \r\n  * @return An uint representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) constant returns (uint balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) constant returns (uint);\r\n  function transferFrom(address from, address to, uint value);\r\n  function approve(address spender, uint value);\r\n  event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implemantation of the basic standart token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is BasicToken, ERC20 {\r\n\r\n  mapping (address => mapping (address => uint)) allowed;\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint the amout of tokens to be transfered\r\n   */\r\n  function transferFrom(address _from, address _to, uint _value) onlyPayloadSize(3 * 32) {\r\n    var _allowance = allowed[_from][msg.sender];\r\n\r\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n    // if (_value > _allowance) throw;\r\n\r\n    balances[_to] = balances[_to].add(_value);\r\n    balances[_from] = balances[_from].sub(_value);\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    Transfer(_from, _to, _value);\r\n  }\r\n\r\n  /**\r\n   * @dev Aprove the passed address to spend the specified amount of tokens on beahlf of msg.sender.\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint _value) {\r\n\r\n    // To change the approve amount you first have to reduce the addresses`\r\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n    //  already 0 to mitigate the race condition described here:\r\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    if ((_value != 0) && (allowed[msg.sender][_spender] != 0)) throw;\r\n\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens than an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint specifing the amount of tokens still avaible for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) constant returns (uint remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Crypto Masters Token\r\n * \r\n */\r\ncontract CryptoMastersToken is StandardToken {\r\n    // metadata\r\n    string public constant name = \"Crypto Masters Token\";\r\n    string public constant symbol = \"CMS\";\r\n    uint public constant decimals = 0;\r\n    // crowdsale parameters\r\n    uint public constant tokenCreationMin = 1000000;\r\n    uint public constant tokenPriceMin = 0.0004 ether;\r\n    // contructor parameters\r\n    address public owner1;\r\n    address public owner2;\r\n    // contract state\r\n    uint public EthersRaised = 0;\r\n    bool public isHalted = false;\r\n    // events\r\n    event LogBuy(address indexed who, uint tokens, uint EthersValue, uint supplyAfter);  \r\n    /**\r\n     * @dev Throws if called by any account other than one of the owners. \r\n     */\r\n    modifier onlyOwner() {\r\n      if (msg.sender != owner1 && msg.sender != owner2) {\r\n        throw;\r\n      }\r\n      _;\r\n    }\r\n    /**\r\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n    * @param newOwner1 The address to transfer ownership to.\r\n    */\r\n    function transferOwnership1(address newOwner1) onlyOwner {\r\n     require(newOwner1 != address(0));      \r\n     owner1 = newOwner1;\r\n    }\r\n    function transferOwnership2(address newOwner2) onlyOwner {\r\n      require(newOwner2 != address(0));      \r\n      owner2 = newOwner2;\r\n    } \r\n    // constructor\r\n    function CryptoMastersToken() {\r\n        owner1 = msg.sender;\r\n        owner2 = msg.sender;\r\n    }\r\n    /**\r\n     * @dev Calculates how many tokens one can buy for specified value\r\n     * @return Amount of tokens one will receive and purchase value without remainder. \r\n     */\r\n    function getBuyPrice(uint _bidValue) constant returns (uint tokenCount, uint purchaseValue) {\r\n\r\n        // Token price formula is twofold. We have flat pricing below tokenCreationMin, \r\n        // and above that price linarly increases with supply. \r\n\r\n        uint flatTokenCount;\r\n        uint startSupply;\r\n        uint linearBidValue;\r\n        \r\n        if(totalSupply < tokenCreationMin) {\r\n            uint maxFlatTokenCount = _bidValue.div(tokenPriceMin);\r\n            // entire purchase in flat pricing\r\n            if(totalSupply.add(maxFlatTokenCount) <= tokenCreationMin) {\r\n                return (maxFlatTokenCount, maxFlatTokenCount.mul(tokenPriceMin));\r\n            }\r\n            flatTokenCount = tokenCreationMin.sub(totalSupply);\r\n            linearBidValue = _bidValue.sub(flatTokenCount.mul(tokenPriceMin));\r\n            startSupply = tokenCreationMin;\r\n        } else {\r\n            flatTokenCount = 0;\r\n            linearBidValue = _bidValue;\r\n            startSupply = totalSupply;\r\n        }\r\n        \r\n        // Solves quadratic equation to calculate maximum token count that can be purchased\r\n        uint currentPrice = tokenPriceMin.mul(startSupply).div(tokenCreationMin);\r\n        uint delta = (2 * startSupply).mul(2 * startSupply).add(linearBidValue.mul(4 * 1 * 2 * startSupply).div(currentPrice));\r\n\r\n        uint linearTokenCount = delta.sqrt().sub(2 * startSupply).div(2);\r\n        uint linearAvgPrice = currentPrice.add((startSupply+linearTokenCount+1).mul(tokenPriceMin).div(tokenCreationMin)).div(2);\r\n        \r\n        // double check to eliminate rounding errors\r\n        linearTokenCount = linearBidValue / linearAvgPrice;\r\n        linearAvgPrice = currentPrice.add((startSupply+linearTokenCount+1).mul(tokenPriceMin).div(tokenCreationMin)).div(2);\r\n        \r\n        purchaseValue = linearTokenCount.mul(linearAvgPrice).add(flatTokenCount.mul(tokenPriceMin));\r\n        return (\r\n            flatTokenCount + linearTokenCount,\r\n            purchaseValue\r\n        );\r\n     }\r\n    \r\n    /**\r\n     * Default function called by sending Ether to this address with no arguments.\r\n     * \r\n     */\r\n    function() payable {\r\n        BuyLimit(0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\r\n    }\r\n    \r\n    /**\r\n     * @dev Buy tokens\r\n     */\r\n    function Buy() payable external {\r\n        BuyLimit(0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);    \r\n    }\r\n    \r\n    /**\r\n     * @dev Buy tokens with limit maximum average price\r\n     * @param _maxPrice Maximum price user want to pay for one token\r\n     */\r\n    function BuyLimit(uint _maxPrice) payable public {\r\n        require(msg.value >= tokenPriceMin);\r\n        assert(!isHalted);\r\n        \r\n        uint boughtTokens;\r\n        uint averagePrice;\r\n        uint purchaseValue;\r\n        \r\n        (boughtTokens, purchaseValue) = getBuyPrice(msg.value);\r\n        if(boughtTokens == 0) { \r\n            // bid to small, return ether and abort\r\n            msg.sender.transfer(msg.value);\r\n            return; \r\n        }\r\n        averagePrice = purchaseValue.div(boughtTokens);\r\n        if(averagePrice > _maxPrice) { \r\n            // price too high, return ether and abort\r\n            msg.sender.transfer(msg.value);\r\n            return; \r\n        }\r\n        assert(averagePrice >= tokenPriceMin);\r\n        assert(purchaseValue <= msg.value);\r\n        \r\n        totalSupply = totalSupply.add(boughtTokens);\r\n        balances[msg.sender] = balances[msg.sender].add(boughtTokens);\r\n      \r\n        LogBuy(msg.sender, boughtTokens, purchaseValue.div(1000000000000000000), totalSupply);\r\n        \r\n        if(msg.value > purchaseValue) {\r\n            msg.sender.transfer(msg.value.sub(purchaseValue));\r\n        }  \r\n        EthersRaised += purchaseValue;\r\n    }\r\n    /**\r\n     * @dev Withdraw funds to owners.\r\n     */\r\n    function withdrawAllFunds() external onlyOwner { \r\n        msg.sender.transfer(this.balance);\r\n    }\r\n    function withdrawFunds(uint _amount) external onlyOwner { \r\n        require(_amount <= this.balance);\r\n        msg.sender.transfer(_amount);\r\n    }\r\n    /**\r\n     * \r\n     * @dev When contract is halted no one can buy new tokens.\r\n     * \r\n     */\r\n    function haltCrowdsale() external onlyOwner {\r\n        isHalted = !isHalted;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_bidValue\",\"type\":\"uint256\"}],\"name\":\"getBuyPrice\",\"outputs\":[{\"name\":\"tokenCount\",\"type\":\"uint256\"},{\"name\":\"purchaseValue\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawAllFunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner2\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"haltCrowdsale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner1\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"Buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_maxPrice\",\"type\":\"uint256\"}],\"name\":\"BuyLimit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenPriceMin\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenCreationMin\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isHalted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"EthersRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner2\",\"type\":\"address\"}],\"name\":\"transferOwnership2\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner1\",\"type\":\"address\"}],\"name\":\"transferOwnership1\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"EthersValue\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"supplyAfter\",\"type\":\"uint256\"}],\"name\":\"LogBuy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"CryptoMastersToken","CompilerVersion":"v0.4.17+commit.bdeb9e52","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://5e3277d00a18acca4349229eb1d32743c2791d3e2ff70aadd498b047a5bc76b0"}]}