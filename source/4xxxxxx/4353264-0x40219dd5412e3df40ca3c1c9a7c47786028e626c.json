{"status":"1","message":"OK","result":[{"SourceCode":"contract ICreditBIT {\r\n    function totalSupply() constant returns (uint256 supply) {}\r\n    function mintMigrationTokens(address _reciever, uint _amount) returns (uint error) {}\r\n    function getAccountData(address _owner) constant returns (uint avaliableBalance, uint lockedBalance, uint bondMultiplier, uint lockedUntilBlock, uint lastBlockClaimed) {}\r\n}\r\n\r\ncontract ICreditIDENTITY {\r\n    function getAddressDescription(address _queryAddress) constant returns (string){}\r\n}\r\n\r\ncontract ICreditDAOfund {\r\n    function withdrawReward(address _destination) {}\r\n    function setCreditBondContract(address _creditBondAddress) {}\r\n    function setCreditBitContract(address _creditBitAddress) {}\r\n    function setFundsCreditDaoAddress(address _creditDaoAddress) {}\r\n    function claimBondReward() {}\r\n    function setCreditDaoAddress(address _creditDaoAddress) {}\r\n    function lockTokens(uint _multiplier) {}\r\n\r\n}\r\n\r\ncontract CreditDAO {\r\n    struct Election {\r\n        uint startBlock;\r\n        uint endBlock;\r\n        uint totalCrbSupply;\r\n        bool electionsFinished;\r\n\r\n        uint nextCandidateIndex;\r\n        mapping(uint => address) candidateIndex;\r\n        mapping(address => uint) candidateAddyToIndexMap;\r\n        mapping(uint => uint) candidateVotes;\r\n        mapping(address => bool) candidates;\r\n\r\n        mapping(address => bool) userHasVoted;\r\n\r\n        address maxVotes;\r\n        uint numOfMaxVotes;\r\n        uint idProcessed;\r\n    }\r\n\r\n    uint public nextElectionIndex;\r\n    mapping(uint => Election) public elections;\r\n\r\n    address public creditCEO;\r\n    uint public mandateInBlocks = 927530;\r\n    uint public blocksPerMonth = 76235;\r\n\r\n    ICreditBIT creditBitContract = ICreditBIT(0xAef38fBFBF932D1AeF3B808Bc8fBd8Cd8E1f8BC5);\r\n    ICreditDAOfund creditDAOFund;\r\n\r\n    modifier onlyCEO {\r\n        require(msg.sender == creditCEO);\r\n        _;\r\n    }\r\n    \r\n    function CreditDAO() {\r\n        elections[nextElectionIndex].startBlock = block.number;\r\n        elections[nextElectionIndex].endBlock = block.number + blocksPerMonth;\r\n        elections[nextElectionIndex].totalCrbSupply = creditBitContract.totalSupply();\r\n        nextElectionIndex++;\r\n    }\r\n\r\n    // Election part\r\n    function createNewElections() {\r\n        require(elections[nextElectionIndex - 1].endBlock + mandateInBlocks < block.number);\r\n\r\n        elections[nextElectionIndex].startBlock = block.number;\r\n        elections[nextElectionIndex].endBlock = block.number + blocksPerMonth;\r\n        elections[nextElectionIndex].totalCrbSupply = creditBitContract.totalSupply();\r\n        nextElectionIndex++;\r\n\r\n        creditCEO = 0x0;\r\n    }\r\n\r\n    function sumbitForElection() {\r\n        require(elections[nextElectionIndex - 1].endBlock > block.number);\r\n        require(!elections[nextElectionIndex - 1].candidates[msg.sender]);\r\n\r\n        uint nextCandidateId = elections[nextElectionIndex].nextCandidateIndex;\r\n        elections[nextElectionIndex - 1].candidateIndex[nextCandidateId] = msg.sender;\r\n        elections[nextElectionIndex - 1].candidateAddyToIndexMap[msg.sender] = nextCandidateId;\r\n        elections[nextElectionIndex - 1].nextCandidateIndex++;\r\n        elections[nextElectionIndex - 1].candidates[msg.sender] = true;\r\n        \r\n    }\r\n\r\n    function vote(address _participant) {\r\n        require(elections[nextElectionIndex - 1].endBlock > block.number);\r\n        \r\n        uint avaliableBalance;\r\n        uint lockedBalance;\r\n        uint bondMultiplier; \r\n        uint lockedUntilBlock; \r\n        uint lastBlockClaimed; \r\n        (avaliableBalance, lockedBalance, bondMultiplier, lockedUntilBlock, lastBlockClaimed) = creditBitContract.getAccountData(msg.sender);\r\n        require(lockedUntilBlock >= elections[nextElectionIndex - 1].endBlock);\r\n        require(!elections[nextElectionIndex - 1].userHasVoted[msg.sender]);\r\n        uint candidateId = elections[nextElectionIndex - 1].candidateAddyToIndexMap[_participant];\r\n        elections[nextElectionIndex - 1].candidateVotes[candidateId] += lockedBalance;\r\n        elections[nextElectionIndex - 1].userHasVoted[msg.sender] = true;\r\n    }\r\n\r\n    function finishElections(uint _iterations) {\r\n        require(elections[nextElectionIndex - 1].endBlock < block.number);\r\n        require(!elections[nextElectionIndex - 1].electionsFinished);\r\n\r\n        uint curentVotes;\r\n        uint nextCandidateId = elections[nextElectionIndex - 1].idProcessed;\r\n        for (uint cnt = 0; cnt < _iterations; cnt++) {\r\n            curentVotes = elections[nextElectionIndex - 1].candidateVotes[nextCandidateId];\r\n            if (curentVotes > elections[nextElectionIndex - 1].numOfMaxVotes) {\r\n                elections[nextElectionIndex - 1].maxVotes = elections[nextElectionIndex - 1].candidateIndex[nextCandidateId];\r\n                elections[nextElectionIndex - 1].numOfMaxVotes = curentVotes;\r\n            }\r\n            nextCandidateId++;\r\n        }\r\n        elections[nextElectionIndex - 1].idProcessed = nextCandidateId;\r\n        if (elections[nextElectionIndex - 1].candidateIndex[nextCandidateId] == 0x0) {\r\n            creditCEO = elections[nextElectionIndex - 1].maxVotes;\r\n            elections[nextElectionIndex - 1].electionsFinished = true;\r\n\r\n            if (elections[nextElectionIndex - 1].numOfMaxVotes == 0) {\r\n                elections[nextElectionIndex].startBlock = block.number;\r\n                elections[nextElectionIndex].endBlock = block.number + blocksPerMonth;\r\n                elections[nextElectionIndex].totalCrbSupply = creditBitContract.totalSupply();\r\n                nextElectionIndex++;\r\n            }\r\n        }\r\n    }\r\n\r\n    // CEO part\r\n    function claimBondReward() onlyCEO {\r\n\t\tcreditDAOFund.claimBondReward();\r\n\t}\r\n\r\n    function withdrawBondReward(address _addy) onlyCEO {\r\n        creditDAOFund.withdrawReward(_addy);\r\n    }\r\n\r\n    function lockTokens(uint _multiplier) onlyCEO {\r\n        creditDAOFund.lockTokens(_multiplier);\r\n    }\r\n\r\n    function setCreditBitContract(address _newCreditBitAddress) onlyCEO {\r\n        creditBitContract = ICreditBIT(_newCreditBitAddress);\r\n    }\r\n\r\n    function setMandateInBlocks(uint _newMandateInBlocks) onlyCEO {\r\n        mandateInBlocks = _newMandateInBlocks;\r\n    }\r\n\r\n    function setblocksPerMonth(uint _newblocksPerMonth) onlyCEO {\r\n        blocksPerMonth = _newblocksPerMonth;\r\n    }\r\n\r\n    \r\n    function setCreditDaoFund(address _newCreditDaoFundAddress) onlyCEO {\r\n        creditDAOFund = ICreditDAOfund(_newCreditDaoFundAddress);\r\n    }\r\n\r\n    // Fund methods\r\n    function setFundsCreditDaoAddress(address _creditDaoAddress) onlyCEO {\r\n\t    creditDAOFund.setCreditDaoAddress(_creditDaoAddress);\r\n\t}\r\n\t\r\n\tfunction setFundsCreditBitContract(address _creditBitAddress) onlyCEO {\r\n        creditDAOFund.setCreditBitContract(_creditBitAddress);\r\n\t}\r\n\t\r\n\tfunction setFundsCreditBondContract(address _creditBondAddress) onlyCEO {\r\n        creditDAOFund.setCreditBondContract(_creditBondAddress);\r\n\t}\r\n\r\n    function getCreditFundAddress() constant returns (address) {\r\n        return address(creditDAOFund);\r\n    }\r\n\r\n    function getCreditBitAddress() constant returns (address) {\r\n        return address(creditBitContract);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_creditBondAddress\",\"type\":\"address\"}],\"name\":\"setFundsCreditBondContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newMandateInBlocks\",\"type\":\"uint256\"}],\"name\":\"setMandateInBlocks\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"sumbitForElection\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCreditFundAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addy\",\"type\":\"address\"}],\"name\":\"withdrawBondReward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCreditDaoFundAddress\",\"type\":\"address\"}],\"name\":\"setCreditDaoFund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"blocksPerMonth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mandateInBlocks\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"creditCEO\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"elections\",\"outputs\":[{\"name\":\"startBlock\",\"type\":\"uint256\"},{\"name\":\"endBlock\",\"type\":\"uint256\"},{\"name\":\"totalCrbSupply\",\"type\":\"uint256\"},{\"name\":\"electionsFinished\",\"type\":\"bool\"},{\"name\":\"nextCandidateIndex\",\"type\":\"uint256\"},{\"name\":\"maxVotes\",\"type\":\"address\"},{\"name\":\"numOfMaxVotes\",\"type\":\"uint256\"},{\"name\":\"idProcessed\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimBondReward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCreditBitAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_participant\",\"type\":\"address\"}],\"name\":\"vote\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_multiplier\",\"type\":\"uint256\"}],\"name\":\"lockTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"createNewElections\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newblocksPerMonth\",\"type\":\"uint256\"}],\"name\":\"setblocksPerMonth\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_creditDaoAddress\",\"type\":\"address\"}],\"name\":\"setFundsCreditDaoAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextElectionIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCreditBitAddress\",\"type\":\"address\"}],\"name\":\"setCreditBitContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_creditBitAddress\",\"type\":\"address\"}],\"name\":\"setFundsCreditBitContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_iterations\",\"type\":\"uint256\"}],\"name\":\"finishElections\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"CreditDAO","CompilerVersion":"v0.4.17+commit.bdeb9e52","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://bde7342e96eced37c457330ef1f54a86d828a1c03cf869aac613c86c2a1e4078"}]}