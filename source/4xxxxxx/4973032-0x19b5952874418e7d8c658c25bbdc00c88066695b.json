{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\ncontract ItsCalledBeingOnTheCuttingEdge {\r\n    \r\n    address Alex;\r\n    address Ben;\r\n    address Chow;\r\n    \r\n    // variables that get written each pay period\r\n    uint256 minsToPay;\r\n    \r\n    bool benAccepts;\r\n    uint256 bensEtherPriceInCents;\r\n    \r\n    bool alexAccepts;\r\n    uint256 alexsEtherPriceInCents;\r\n    \r\n    // hourly wage\r\n    uint16 hourlyWageInCents = 4000;\r\n    \r\n    event PleasePayMe(uint256 minsToPay, uint256 timestamp);\r\n    event Accept(address acceptor, uint256 mins, uint256 etherPrice);\r\n    event Reject(address rejector);\r\n    event Paid(address Chow, uint256 mins, uint256 amt, uint256 timestamp);\r\n    \r\n    function ItsCalledBeingOnTheCuttingEdge(address alex, address ben, address chow) public {\r\n        Alex = alex;\r\n        Ben = ben;\r\n        Chow = chow;\r\n    }\r\n    \r\n    function () public payable {\r\n    }\r\n    \r\n    function payMeFor(uint16 mins) public {\r\n        require(msg.sender == Chow && mins < 20000);\r\n        \r\n        minsToPay = mins;\r\n        // log an event\r\n        PleasePayMe(mins, block.timestamp);\r\n    }\r\n    \r\n    function acceptMins(uint256 etherPriceInCents) public {\r\n        require (minsToPay > 0 && (msg.sender == Ben || msg.sender == Alex));\r\n        \r\n        Accept(msg.sender, minsToPay, etherPriceInCents);\r\n        \r\n        if (msg.sender == Alex){\r\n            if (benAccepts && etherPricesAreClose(bensEtherPriceInCents, etherPriceInCents)){\r\n                // pay Chow\r\n                payChow(bensEtherPriceInCents, etherPriceInCents);\r\n                // toggle off acceptance\r\n                toggleOffAcceptance();\r\n            }\r\n            else {\r\n                alexAccepts = true;\r\n                alexsEtherPriceInCents = etherPriceInCents;\r\n            }\r\n        }\r\n        else if (msg.sender == Ben){\r\n            if (alexAccepts && etherPricesAreClose(bensEtherPriceInCents, etherPriceInCents)){\r\n                // pay Chow\r\n                payChow(alexsEtherPriceInCents, etherPriceInCents);\r\n                // toggleOffAcceptance\r\n                toggleOffAcceptance();\r\n            }\r\n            else {\r\n                benAccepts = true;\r\n                bensEtherPriceInCents = etherPriceInCents;\r\n            }\r\n        }\r\n    }\r\n    \r\n    function rejectHours() public {\r\n        require(msg.sender == Alex || msg.sender == Ben);\r\n        // log an event\r\n        Reject(msg.sender);\r\n        \r\n        toggleOffAcceptance();\r\n    }\r\n    \r\n    function etherPricesAreClose(uint256 price1InCents, uint256 price2InCents) public pure returns (bool) {\r\n        if (price1InCents + 1001 > price2InCents && price2InCents + 1001 > price1InCents){\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    \r\n    function toggleOffAcceptance() internal {\r\n        minsToPay = 0;\r\n        alexAccepts = false;\r\n        alexsEtherPriceInCents = 0;\r\n        benAccepts = false;\r\n        bensEtherPriceInCents = 0;\r\n    }\r\n    \r\n    function payChow(uint256 price1InCents, uint256 price2InCents) internal {\r\n        uint256 actualPriceInCents = (price1InCents + price2InCents) / 2;\r\n        uint256 weiPerMin = (1e18 / actualPriceInCents) * hourlyWageInCents / 60;\r\n        uint256 payment = weiPerMin * minsToPay;\r\n        \r\n        Chow.transfer(payment);\r\n        \r\n        Paid(Chow, minsToPay, payment, block.timestamp);\r\n        \r\n        toggleOffAcceptance();\r\n    }\r\n\r\n    function newAlex(address alex) public {\r\n        require(msg.sender == Alex);\r\n        \r\n        Alex = alex;\r\n    }\r\n    \r\n    function newBen(address ben) public {\r\n        require(msg.sender == Ben);\r\n        \r\n        Ben = ben;\r\n    }\r\n    \r\n    function newChow(address chow) public {\r\n        require(msg.sender == Chow);\r\n        \r\n        Chow = chow;\r\n    }\r\n    \r\n    function newWage(uint16 wageInCents) public {\r\n        require(msg.sender == Alex || msg.sender == Ben);\r\n        \r\n        hourlyWageInCents = wageInCents;\r\n    }\r\n    \r\n    function selfDestruct() public {\r\n        require(msg.sender == Alex || msg.sender == Ben);\r\n        \r\n        selfdestruct(msg.sender);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"alex\",\"type\":\"address\"}],\"name\":\"newAlex\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"price1InCents\",\"type\":\"uint256\"},{\"name\":\"price2InCents\",\"type\":\"uint256\"}],\"name\":\"etherPricesAreClose\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"mins\",\"type\":\"uint16\"}],\"name\":\"payMeFor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"rejectHours\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"chow\",\"type\":\"address\"}],\"name\":\"newChow\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"selfDestruct\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ben\",\"type\":\"address\"}],\"name\":\"newBen\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"wageInCents\",\"type\":\"uint16\"}],\"name\":\"newWage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"etherPriceInCents\",\"type\":\"uint256\"}],\"name\":\"acceptMins\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"alex\",\"type\":\"address\"},{\"name\":\"ben\",\"type\":\"address\"},{\"name\":\"chow\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"minsToPay\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"PleasePayMe\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"acceptor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"mins\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"etherPrice\",\"type\":\"uint256\"}],\"name\":\"Accept\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"rejector\",\"type\":\"address\"}],\"name\":\"Reject\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"Chow\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"mins\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amt\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Paid\",\"type\":\"event\"}]","ContractName":"ItsCalledBeingOnTheCuttingEdge","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000002172ab856effd7c343a1b1790e00f604318320890000000000000000000000002172ab856effd7c343a1b1790e00f604318320890000000000000000000000002172ab856effd7c343a1b1790e00f60431832089","Library":"","SwarmSource":"bzzr://2a0b7d20477cbc0c5a1a59ccc19e299b8c6f4b59b2d1daa0529e1d3f2cd39fc6"}]}