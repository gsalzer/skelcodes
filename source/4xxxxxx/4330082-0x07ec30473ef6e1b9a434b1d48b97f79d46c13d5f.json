{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner {\r\n    if (newOwner != address(0)) {\r\n      owner = newOwner;\r\n    }\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract MintableInterface {\r\n  function mint(address _to, uint256 _amount) returns (bool);\r\n  function mintLocked(address _to, uint256 _amount) returns (bool);\r\n}\r\n\r\n/**\r\n * This is the Crowdsale contract from OpenZeppelin version 1.2.0\r\n * The only changes are:\r\n *   - the type of token field is changed from MintableToken to MintableInterface\r\n *   - the createTokenContract() method is removed, the token field must be initialized in the derived contracts constuctor\r\n **/\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Crowdsale \r\n * @dev Crowdsale is a base contract for managing a token crowdsale.\r\n * Crowdsales have a start and end block, where investors can make\r\n * token purchases and the crowdsale will assign them tokens based\r\n * on a token per ETH rate. Funds collected are forwarded to a wallet \r\n * as they arrive.\r\n */\r\ncontract Crowdsale {\r\n  using SafeMath for uint256;\r\n\r\n  // The token being sold\r\n  MintableInterface public token;\r\n\r\n  // start and end block where investments are allowed (both inclusive)\r\n  uint256 public startBlock;\r\n  uint256 public endBlock;\r\n\r\n  // address where funds are collected\r\n  address public wallet;\r\n\r\n  // how many token units a buyer gets per wei\r\n  uint256 public rate;\r\n\r\n  // amount of raised money in wei\r\n  uint256 public weiRaised;\r\n\r\n  /**\r\n   * event for token purchase logging\r\n   * @param purchaser who paid for the tokens\r\n   * @param beneficiary who got the tokens\r\n   * @param value weis paid for purchase\r\n   * @param amount amount of tokens purchased\r\n   */ \r\n  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n\r\n\r\n  function Crowdsale(uint256 _startBlock, uint256 _endBlock, uint256 _rate, address _wallet) {\r\n    require(_startBlock >= block.number);\r\n    require(_endBlock >= _startBlock);\r\n    require(_rate > 0);\r\n    require(_wallet != 0x0);\r\n\r\n    startBlock = _startBlock;\r\n    endBlock = _endBlock;\r\n    rate = _rate;\r\n    wallet = _wallet;\r\n  }\r\n\r\n  // fallback function can be used to buy tokens\r\n  function () payable {\r\n    buyTokens(msg.sender);\r\n  }\r\n\r\n  // low level token purchase function\r\n  function buyTokens(address beneficiary) payable {\r\n    require(beneficiary != 0x0);\r\n    require(validPurchase());\r\n\r\n    uint256 weiAmount = msg.value;\r\n\r\n    // calculate token amount to be created\r\n    uint256 tokens = weiAmount.mul(rate);\r\n\r\n    // update state\r\n    weiRaised = weiRaised.add(weiAmount);\r\n\r\n    token.mint(beneficiary, tokens);\r\n    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\r\n\r\n    forwardFunds();\r\n  }\r\n\r\n  // send ether to the fund collection wallet\r\n  // override to create custom fund forwarding mechanisms\r\n  function forwardFunds() internal {\r\n    wallet.transfer(msg.value);\r\n  }\r\n\r\n  // @return true if the transaction can buy tokens\r\n  function validPurchase() internal constant returns (bool) {\r\n    uint256 current = block.number;\r\n    bool withinPeriod = current >= startBlock && current <= endBlock;\r\n    bool nonZeroPurchase = msg.value != 0;\r\n    return withinPeriod && nonZeroPurchase;\r\n  }\r\n\r\n  // @return true if crowdsale event has ended\r\n  function hasEnded() public constant returns (bool) {\r\n    return block.number > endBlock;\r\n  }\r\n\r\n\r\n}\r\n\r\n/**\r\n * @title CappedCrowdsale\r\n * @dev Extension of Crowsdale with a max amount of funds raised\r\n */\r\ncontract TokenCappedCrowdsale is Crowdsale {\r\n  using SafeMath for uint256;\r\n\r\n  // tokenCap should be initialized in derived contract\r\n  uint256 public tokenCap;\r\n\r\n  uint256 public soldTokens;\r\n\r\n  // overriding Crowdsale#hasEnded to add tokenCap logic\r\n  // @return true if crowdsale event has ended\r\n  function hasEnded() public constant returns (bool) {\r\n    bool capReached = soldTokens >= tokenCap;\r\n    return super.hasEnded() || capReached;\r\n  }\r\n\r\n  // overriding Crowdsale#buyTokens to add extra tokenCap logic\r\n  function buyTokens(address beneficiary) payable {\r\n    // calculate token amount to be created\r\n    uint256 tokens = msg.value.mul(rate);\r\n    uint256 newTotalSold = soldTokens.add(tokens);\r\n    require(newTotalSold <= tokenCap);\r\n    soldTokens = newTotalSold;\r\n    super.buyTokens(beneficiary);\r\n  }\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) constant returns (uint256);\r\n  function transfer(address to, uint256 value) returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * This is the TokenTimelock contract from OpenZeppelin version 1.2.0\r\n * The only changes are:\r\n *   - all contract fields are declared as public\r\n *   - removed deprecated claim() method\r\n **/\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title TokenTimelock\r\n * @dev TokenTimelock is a token holder contract that will allow a \r\n * beneficiary to extract the tokens after a given release time\r\n */\r\ncontract TokenTimelock {\r\n  \r\n  // ERC20 basic token contract being held\r\n  ERC20Basic public token;\r\n\r\n  // beneficiary of tokens after they are released\r\n  address public beneficiary;\r\n\r\n  // timestamp when token release is enabled\r\n  uint public releaseTime;\r\n\r\n  function TokenTimelock(ERC20Basic _token, address _beneficiary, uint _releaseTime) {\r\n    require(_releaseTime > now);\r\n    token = _token;\r\n    beneficiary = _beneficiary;\r\n    releaseTime = _releaseTime;\r\n  }\r\n\r\n  /**\r\n   * @notice Transfers tokens held by timelock to beneficiary.\r\n   */\r\n  function release() {\r\n    require(now >= releaseTime);\r\n\r\n    uint amount = token.balanceOf(this);\r\n    require(amount > 0);\r\n\r\n    token.transfer(beneficiary, amount);\r\n  }\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances. \r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) returns (bool) {\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of. \r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) returns (bool);\r\n  function approve(address spender, uint256 value) returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amout of tokens to be transfered\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\r\n    var _allowance = allowed[_from][msg.sender];\r\n\r\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n    // require (_value <= _allowance);\r\n\r\n    balances[_to] = balances[_to].add(_value);\r\n    balances[_from] = balances[_from].sub(_value);\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) returns (bool) {\r\n\r\n    // To change the approve amount you first have to reduce the addresses`\r\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n    //  already 0 to mitigate the race condition described here:\r\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifing the amount of tokens still avaible for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n}\r\n\r\ncontract EidooToken is MintableInterface, Ownable, StandardToken {\r\n  using SafeMath for uint256;\r\n\r\n  string public name = \"Eidoo Token\";\r\n  string public symbol = \"EDO\";\r\n  uint256 public decimals = 18;\r\n\r\n  uint256 public transferableFromBlock;\r\n  uint256 public lockEndBlock;\r\n  mapping (address => uint256) public initiallyLockedAmount;\r\n\r\n  function EidooToken(uint256 _transferableFromBlock, uint256 _lockEndBlock) {\r\n    require(_lockEndBlock > _transferableFromBlock);\r\n    transferableFromBlock = _transferableFromBlock;\r\n    lockEndBlock = _lockEndBlock;\r\n  }\r\n\r\n  modifier canTransfer(address _from, uint _value) {\r\n    if (block.number < lockEndBlock) {\r\n      require(block.number >= transferableFromBlock);\r\n      uint256 locked = lockedBalanceOf(_from);\r\n      if (locked > 0) {\r\n        uint256 newBalance = balanceOf(_from).sub(_value);\r\n        require(newBalance >= locked);\r\n      }\r\n    }\r\n   _;\r\n  }\r\n\r\n  function lockedBalanceOf(address _to) constant returns(uint256) {\r\n    uint256 locked = initiallyLockedAmount[_to];\r\n    if (block.number >= lockEndBlock ) return 0;\r\n    else if (block.number <= transferableFromBlock) return locked;\r\n\r\n    uint256 releaseForBlock = locked.div(lockEndBlock.sub(transferableFromBlock));\r\n    uint256 released = block.number.sub(transferableFromBlock).mul(releaseForBlock);\r\n    return locked.sub(released);\r\n  }\r\n\r\n  function transfer(address _to, uint _value) canTransfer(msg.sender, _value) returns (bool) {\r\n    return super.transfer(_to, _value);\r\n  }\r\n\r\n  function transferFrom(address _from, address _to, uint _value) canTransfer(_from, _value) returns (bool) {\r\n    return super.transferFrom(_from, _to, _value);\r\n  }\r\n\r\n  // --------------- Minting methods\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished());\r\n    _;\r\n  }\r\n\r\n  function mintingFinished() constant returns(bool) {\r\n    return block.number >= transferableFromBlock;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens, implements MintableInterface\r\n   * @param _to The address that will recieve the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(address _to, uint256 _amount) onlyOwner canMint returns (bool) {\r\n    totalSupply = totalSupply.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    Transfer(address(0), _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  function mintLocked(address _to, uint256 _amount) onlyOwner canMint returns (bool) {\r\n    initiallyLockedAmount[_to] = initiallyLockedAmount[_to].add(_amount);\r\n    return mint(_to, _amount);\r\n  }\r\n\r\n  function burn(uint256 _amount) returns (bool) {\r\n    balances[msg.sender] = balances[msg.sender].sub(_amount);\r\n    totalSupply = totalSupply.sub(_amount);\r\n    Transfer(msg.sender, address(0), _amount);\r\n    return true;\r\n  }\r\n}\r\n\r\ncontract EidooTokenSale is Ownable, TokenCappedCrowdsale {\r\n  using SafeMath for uint256;\r\n  uint256 public MAXIMUM_SUPPLY = 100000000 * 10**18;\r\n  uint256 [] public LOCKED = [     20000000 * 10**18,\r\n                                   15000000 * 10**18,\r\n                                    6000000 * 10**18,\r\n                                    6000000 * 10**18 ];\r\n  uint256 public POST_ICO =        21000000 * 10**18;\r\n  uint256 [] public LOCK_END = [\r\n    1570190400, // 4 October 2019 12:00:00 GMT\r\n    1538654400, // 4 October 2018 12:00:00 GMT\r\n    1522843200, // 4 April 2018 12:00:00 GMT\r\n    1515067200  // 4 January 2018 12:00:00 GMT\r\n  ];\r\n\r\n  mapping (address => bool) public claimed;\r\n  TokenTimelock [4] public timeLocks;\r\n\r\n  event ClaimTokens(address indexed to, uint amount);\r\n\r\n  modifier beforeStart() {\r\n    require(block.number < startBlock);\r\n    _;\r\n  }\r\n\r\n  function EidooTokenSale(\r\n    uint256 _startBlock,\r\n    uint256 _endBlock,\r\n    uint256 _rate,\r\n    uint _tokenStartBlock,\r\n    uint _tokenLockEndBlock,\r\n    address _wallet\r\n  )\r\n    Crowdsale(_startBlock, _endBlock, _rate, _wallet)\r\n  {\r\n    token = new EidooToken(_tokenStartBlock, _tokenLockEndBlock);\r\n\r\n    // create timelocks for tokens\r\n    timeLocks[0] = new TokenTimelock(EidooToken(token), _wallet, LOCK_END[0]);\r\n    timeLocks[1] = new TokenTimelock(EidooToken(token), _wallet, LOCK_END[1]);\r\n    timeLocks[2] = new TokenTimelock(EidooToken(token), _wallet, LOCK_END[2]);\r\n    timeLocks[3] = new TokenTimelock(EidooToken(token), _wallet, LOCK_END[3]);\r\n    token.mint(address(timeLocks[0]), LOCKED[0]);\r\n    token.mint(address(timeLocks[1]), LOCKED[1]);\r\n    token.mint(address(timeLocks[2]), LOCKED[2]);\r\n    token.mint(address(timeLocks[3]), LOCKED[3]);\r\n\r\n    token.mint(_wallet, POST_ICO);\r\n\r\n    // initialize maximum number of tokens that can be sold\r\n    tokenCap = MAXIMUM_SUPPLY.sub(EidooToken(token).totalSupply());\r\n  }\r\n\r\n  function claimTokens(address [] buyers, uint [] amounts) onlyOwner beforeStart public {\r\n    require(buyers.length == amounts.length);\r\n    uint len = buyers.length;\r\n    for (uint i = 0; i < len; i++) {\r\n      address to = buyers[i];\r\n      uint256 amount = amounts[i];\r\n      if (amount > 0 && !claimed[to]) {\r\n        claimed[to] = true;\r\n        if (to == 0x32Be343B94f860124dC4fEe278FDCBD38C102D88) {\r\n          // replace Poloniex Wallet address\r\n          to = 0x2274bebe2b47Ec99D50BB9b12005c921F28B83bB;\r\n        }\r\n        tokenCap = tokenCap.sub(amount);\r\n        uint256 unlockedAmount = amount.div(10).mul(3);\r\n        token.mint(to, unlockedAmount);\r\n        token.mintLocked(to, amount.sub(unlockedAmount));\r\n        ClaimTokens(to, amount);\r\n      }\r\n    }\r\n  }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"endBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"POST_ICO\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAXIMUM_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"LOCKED\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"soldTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"timeLocks\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"buyers\",\"type\":\"address[]\"},{\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"claimTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"LOCK_END\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_startBlock\",\"type\":\"uint256\"},{\"name\":\"_endBlock\",\"type\":\"uint256\"},{\"name\":\"_rate\",\"type\":\"uint256\"},{\"name\":\"_tokenStartBlock\",\"type\":\"uint256\"},{\"name\":\"_tokenLockEndBlock\",\"type\":\"uint256\"},{\"name\":\"_wallet\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ClaimTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"}]","ContractName":"EidooTokenSale","CompilerVersion":"v0.4.17+commit.bdeb9e52","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000422366000000000000000000000000000000000000000000000000000000000042b5a60000000000000000000000000000000000000000000000000000000000000082000000000000000000000000000000000000000000000000000000000042b5a700000000000000000000000000000000000000000000000000000000004e93270000000000000000000000003904fbb06c6b91a242e20d589c0007ff392b56bd","Library":"","SwarmSource":"bzzr://12ec57a05ffd83f4040dee190b7986a636139f0ff1f97986782f0f0132228111"}]}