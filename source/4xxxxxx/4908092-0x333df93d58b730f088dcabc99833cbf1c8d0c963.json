{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n// Project: Imigize\r\n// v2, 2018-01-14\r\n// This code is the property of CryptoB2B.io\r\n// Copying in whole or in part is prohibited.\r\n// Authors: Ivan Fedorov and Dmitry Borodin\r\n// Do you want the same TokenSale platform? www.cryptob2b.io\r\n\r\n// (A1)\r\n// The main contract for the sale and management of rounds.\r\ncontract CrowdsaleL{\r\n\r\n\t// For Round0, firstMint is:\r\n\t// 0000000000000000000000000000000000000000000069e10de76676d0800000\r\n\t// (extra 500K tokens for marketing)\r\n    \r\n    using SafeMath for uint256;\r\n\r\n    enum TokenSaleType {round1, round2}\r\n    enum Roles {beneficiary, accountant, manager, observer, bounty, team, company}\r\n    \r\n    // Extra fee\r\n    address constant TaxCollector = 0x0;\r\n\t// fee for round 1 & 2\r\n    uint256[2] TaxValues = [0 finney, 0 finney];\r\n    uint8 vaultNum;\r\n\r\n    TokenL public token;\r\n\r\n    bool public isFinalized;\r\n    bool public isInitialized;\r\n    bool public isPausedCrowdsale;\r\n\r\n    mapping (uint8 => address) public wallets;\r\n\r\n    struct Profit{\r\n\t    uint256 min;    // percent from 0 to 50\r\n\t    uint256 max;    // percent from 0 to 50\r\n\t    uint256 step;   // percent step, from 1 to 50 (please, read doc!)\r\n\t    uint256 maxAllProfit; \r\n    }\r\n    struct Bonus {\r\n\t    uint256 value;\r\n\t    uint256 procent;\r\n\t    uint256 freezeTime;\r\n    }\r\n\r\n    Bonus[] public bonuses;\r\n\r\n    Profit public profit = Profit(0, 20, 5, 100);\r\n    \r\n    uint256 public startTime= 1515974400;\r\n    uint256 public endDiscountTime = 1520294400;\r\n    uint256 public endTime = 1520294400;\r\n\r\n    // How many tokens (excluding the bonus) are transferred to the investor in exchange for 1 ETH\r\n    // **THOUSANDS** 10^3 for human, *10**3 for Solidity, 1e3 for MyEtherWallet (MEW).\r\n    // Example: if 1ETH = 40.5 Token ==> use 40500\r\n    uint256 public rate = 5668000;\r\n\r\n    // If the round does not attain this value before the closing date, the round is recognized as a\r\n    // failure and investors take the money back (the founders will not interfere in any way).\r\n    // **QUINTILLIONS** 10^18 / *10**18 / 1e18. Example: softcap=15ETH ==> use 15*10**18 (Solidity) or 15e18 (MEW)\r\n    uint256 public softCap = 0 ether;\r\n\r\n    // The maximum possible amount of income\r\n    // **QUINTILLIONS** 10^18 / *10**18 / 1e18. Example: hardcap=123.45ETH ==> use 123450*10**15 (Solidity) or 12345e15 (MEW)\r\n    uint256 public hardCap = 802 ether;\r\n\r\n    // If the last payment is slightly higher than the hardcap, then the usual contracts do\r\n    // not accept it, because it goes beyond the hardcap. However it is more reasonable to accept the\r\n    // last payment, very slightly raising the hardcap. The value indicates by how many ETH the\r\n    // last payment can exceed the hardcap to allow it to be paid. Immediately after this payment, the\r\n    // round closes. The funders should write here a small number, not more than 1% of the CAP.\r\n    // Can be equal to zero, to cancel.\r\n    // **QUINTILLIONS** 10^18 / *10**18 / 1e18\r\n    uint256 public overLimit = 20 ether;\r\n\r\n    // The minimum possible payment from an investor in ETH. Payments below this value will be rejected.\r\n    // **QUINTILLIONS** 10^18 / *10**18 / 1e18. Example: minPay=0.1ETH ==> use 100*10**15 (Solidity) or 100e15 (MEW)\r\n    uint256 public minPay = 70 finney;\r\n\r\n    uint256 ethWeiRaised;\r\n    uint256 nonEthWeiRaised;\r\n    uint256 weiRound1;\r\n    uint256 public tokenReserved;\r\n\r\n    RefundVault public vault;\r\n    SVTAllocation public lockedAllocation;\r\n\r\n    TokenSaleType TokenSale = TokenSaleType.round1;\r\n\r\n    uint256 allToken;\r\n\r\n    bool public bounty;\r\n    bool public team;\r\n    bool public company;\r\n    //bool public partners;\r\n\r\n    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n\r\n    event Finalized();\r\n    event Initialized();\r\n\r\n    function CrowdsaleL(TokenL _token, uint256 firstMint) public\r\n    {\r\n        // Initially, all next 7 roles/wallets are given to the Manager. The Manager is an employee of the company\r\n        // with knowledge of IT, who publishes the contract and sets it up. However, money and tokens require\r\n        // a Beneficiary and other roles (Accountant, Team, etc.). The Manager will not have the right\r\n        // to receive them. To enable this, the Manager must either enter specific wallets here, or perform\r\n        // this via method changeWallet. In the finalization methods it is written which wallet and\r\n        // what percentage of tokens are received.\r\n\r\n        // Receives all the money (when finalizing Round1 & Round2)\r\n        wallets[uint8(Roles.beneficiary)] = 0x07544edde0542857277188598606B32F2C28062F; //msg.sender;\r\n\r\n        // Receives all the tokens for non-ETH investors (when finalizing Round1 & Round2)\r\n        wallets[uint8(Roles.accountant)] = 0x31e78568a5E53C568711dd139Ec99d775E9fB80b; //msg.sender;\r\n\r\n        // All rights except the rights to receive tokens or money. Has the right to change any other\r\n        // wallets (Beneficiary, Accountant, ...), but only if the round has not started. Once the\r\n        // round is initialized, the Manager has lost all rights to change the wallets.\r\n        // If the TokenSale is conducted by one person, then nothing needs to be changed. Permit all 7 roles\r\n        // point to a single wallet.\r\n        wallets[uint8(Roles.manager)] = msg.sender;\r\n\r\n        // Has only the right to call paymentsInOtherCurrency (please read the document)\r\n        wallets[uint8(Roles.observer)] = 0x7FF83C688CaC62f5944C694CF04bF3f30ec19608; //msg.sender;\r\n\r\n        wallets[uint8(Roles.bounty)] = 0x17194d2cA481d2533A147776BeB471DC40dc4580; //msg.sender;\r\n\r\n        // When the round is finalized, all team tokens are transferred to a special freezing\r\n        // contract. As soon as defrosting is over, only the Team wallet will be able to\r\n        // collect all the tokens. It does not store the address of the freezing contract,\r\n        // but the final wallet of the project team.\r\n        wallets[uint8(Roles.team)] = 0x443f4Be0f50f973e3970343c6A50bcf1Ac66c6C3; //msg.sender;\r\n\r\n        wallets[uint8(Roles.company)] = 0xb4D429B3240616FA67D1509c0C0E48D11900dd18; //msg.sender;\r\n\r\n        token = _token;\r\n        token.setOwner();\r\n\r\n        token.pause(); // block exchange tokens\r\n\r\n        token.addUnpausedWallet(wallets[uint8(Roles.accountant)]);\r\n        token.addUnpausedWallet(msg.sender);\r\n        token.addUnpausedWallet(wallets[uint8(Roles.bounty)]);\r\n        token.addUnpausedWallet(wallets[uint8(Roles.company)]);\r\n\r\n        if (firstMint > 0) {\r\n            token.mint(msg.sender, firstMint);\r\n        }\r\n\r\n    }\r\n\r\n    // Returns the name of the current round in plain text. Constant.\r\n    function getTokenSaleType()  public constant returns(string){\r\n        return (TokenSale == TokenSaleType.round1)?'round1':'round2';\r\n    }\r\n\r\n    // Transfers the funds of the investor to the contract of return of funds. Internal.\r\n    function forwardFunds() internal {\r\n        vault.deposit.value(msg.value)(msg.sender);\r\n    }\r\n\r\n    // Check for the possibility of buying tokens. Inside. Constant.\r\n    function validPurchase() internal constant returns (bool) {\r\n\r\n        // The round started and did not end\r\n        bool withinPeriod = (now > startTime && now < endTime);\r\n\r\n        // Rate is greater than or equal to the minimum\r\n        bool nonZeroPurchase = msg.value >= minPay;\r\n\r\n        // hardCap is not reached, and in the event of a transaction, it will not be exceeded by more than OverLimit\r\n        bool withinCap = msg.value <= hardCap.sub(weiRaised()).add(overLimit);\r\n\r\n        // round is initialized and no \"Pause of trading\" is set\r\n        return withinPeriod && nonZeroPurchase && withinCap && isInitialized && !isPausedCrowdsale;\r\n    }\r\n\r\n    // Check for the ability to finalize the round. Constant.\r\n    function hasEnded() public constant returns (bool) {\r\n\r\n        bool timeReached = now > endTime;\r\n\r\n        bool capReached = weiRaised() >= hardCap;\r\n\r\n        return (timeReached || capReached) && isInitialized;\r\n    }\r\n    \r\n    function finalizeAll() external {\r\n        finalize();\r\n        finalize1();\r\n        finalize2();\r\n        finalize3();\r\n    }\r\n\r\n    // Finalize. Only available to the Manager and the Beneficiary. If the round failed, then\r\n    // anyone can call the finalization to unlock the return of funds to investors\r\n    // You must call a function to finalize each round (after the Round1 & after the Round2)\r\n    function finalize() public {\r\n\r\n        require(wallets[uint8(Roles.manager)] == msg.sender || wallets[uint8(Roles.beneficiary)] == msg.sender || !goalReached());\r\n        require(!isFinalized);\r\n        require(hasEnded());\r\n\r\n        isFinalized = true;\r\n        finalization();\r\n        Finalized();\r\n    }\r\n\r\n    // The logic of finalization. Internal\r\n    function finalization() internal {\r\n\r\n        // If the goal of the achievement\r\n        if (goalReached()) {\r\n\r\n            // Send ether to Beneficiary\r\n            vault.close(wallets[uint8(Roles.beneficiary)]);\r\n\r\n            // if there is anything to give\r\n            if (tokenReserved > 0) {\r\n\r\n                // Issue tokens of non-eth investors to Accountant account\r\n                token.mint(wallets[uint8(Roles.accountant)],tokenReserved);\r\n\r\n                // Reset the counter\r\n                tokenReserved = 0;\r\n            }\r\n\r\n            // If the finalization is Round 1\r\n            if (TokenSale == TokenSaleType.round1) {\r\n\r\n                // Reset settings\r\n                isInitialized = false;\r\n                isFinalized = false;\r\n\r\n                // Switch to the second round (to Round2)\r\n                TokenSale = TokenSaleType.round2;\r\n\r\n                // Reset the collection counter\r\n                weiRound1 = weiRaised();\r\n                ethWeiRaised = 0;\r\n                nonEthWeiRaised = 0;\r\n\r\n\r\n            }\r\n            else // If the second round is finalized\r\n            {\r\n\r\n                // Record how many tokens we have issued\r\n                allToken = token.totalSupply();\r\n\r\n                // Permission to collect tokens to those who can pick them up\r\n                bounty = true;\r\n                team = true;\r\n                company = true;\r\n                //partners = true;\r\n\r\n            }\r\n\r\n        }\r\n        else // If they failed round\r\n        {\r\n            // Allow investors to withdraw their funds\r\n            vault.enableRefunds();\r\n        }\r\n    }\r\n\r\n    // The Manager freezes the tokens for the Team.\r\n    // You must call a function to finalize Round 2 (only after the Round2)\r\n    function finalize1() public {\r\n        require(wallets[uint8(Roles.manager)] == msg.sender || wallets[uint8(Roles.beneficiary)] == msg.sender);\r\n        require(team);\r\n        team = false;\r\n        lockedAllocation = new SVTAllocation(token, wallets[uint8(Roles.team)]);\r\n        token.addUnpausedWallet(lockedAllocation);\r\n        // 12% - tokens to Team wallet after freeze (77% for investors)\r\n        // *** CHECK THESE NUMBERS ***\r\n        token.mint(lockedAllocation,allToken.mul(12).div(77));\r\n    }\r\n\r\n    function finalize2() public {\r\n        require(wallets[uint8(Roles.manager)] == msg.sender || wallets[uint8(Roles.beneficiary)] == msg.sender);\r\n        require(bounty);\r\n        bounty = false;\r\n        // 2% - tokens to bounty wallet after freeze (77% for investors)\r\n        // *** CHECK THESE NUMBERS ***\r\n        token.mint(wallets[uint8(Roles.bounty)],allToken.mul(2).div(77));\r\n    }\r\n\r\n    // For marketing, referral, reserve \r\n    // You must call a function to finalize Round 2 (only after the Round2)\r\n    function finalize3() public {\r\n        require(wallets[uint8(Roles.manager)] == msg.sender || wallets[uint8(Roles.beneficiary)] == msg.sender);\r\n        require(company);\r\n        company = false;\r\n        // 9% - tokens to company wallet after freeze (77% for investors)\r\n        // *** CHECK THESE NUMBERS ***\r\n        token.mint(wallets[uint8(Roles.company)],allToken.mul(9).div(77));\r\n    }\r\n\r\n\r\n    // Initializing the round. Available to the manager. After calling the function,\r\n    // the Manager loses all rights: Manager can not change the settings (setup), change\r\n    // wallets, prevent the beginning of the round, etc. You must call a function after setup\r\n    // for the initial round (before the Round1 and before the Round2)\r\n    function initialize() public {\r\n\r\n        // Only the Manager\r\n        require(wallets[uint8(Roles.manager)] == msg.sender);\r\n\r\n        // If not yet initialized\r\n        require(!isInitialized);\r\n\r\n        // And the specified start time has not yet come\r\n        // If initialization return an error, check the start date!\r\n        require(now <= startTime);\r\n\r\n        initialization();\r\n\r\n        Initialized();\r\n\r\n        isInitialized = true;\r\n    }\r\n\r\n    function initialization() internal {\r\n        uint256 taxValue = TaxValues[vaultNum];\r\n        vaultNum++;\r\n        uint256 arrear;\r\n        if (address(vault) != 0x0){\r\n            arrear = DistributorRefundVault(vault).taxValue();\r\n            vault.del(wallets[uint8(Roles.beneficiary)]);\r\n        }\r\n        vault = new DistributorRefundVault(TaxCollector, taxValue.add(arrear));\r\n    }\r\n\r\n    // At the request of the investor, we raise the funds (if the round has failed because of the hardcap)\r\n    function claimRefund() public{\r\n        vault.refund(msg.sender);\r\n    }\r\n\r\n    // We check whether we collected the necessary minimum funds. Constant.\r\n    function goalReached() public constant returns (bool) {\r\n        return weiRaised() >= softCap;\r\n    }\r\n\r\n    // Customize. The arguments are described in the constructor above.\r\n    function setup(uint256 _startTime, uint256 _endDiscountTime, uint256 _endTime, uint256 _softCap, uint256 _hardCap, uint256 _rate, uint256 _overLimit, uint256 _minPay, uint256 _minProfit, uint256 _maxProfit, uint256 _stepProfit, uint256 _maxAllProfit, uint256[] _value, uint256[] _procent, uint256[] _freezeTime) public{\r\n        changePeriod(_startTime, _endDiscountTime, _endTime);\r\n        changeTargets(_softCap, _hardCap);\r\n        changeRate(_rate, _overLimit, _minPay);\r\n        changeDiscount(_minProfit, _maxProfit, _stepProfit, _maxAllProfit);\r\n        setBonuses(_value, _procent, _freezeTime);\r\n    }\r\n\r\n    // Change the date and time: the beginning of the round, the end of the bonus, the end of the round. Available to Manager\r\n    // Description in the Crowdsale constructor\r\n    function changePeriod(uint256 _startTime, uint256 _endDiscountTime, uint256 _endTime) public{\r\n\r\n        require(wallets[uint8(Roles.manager)] == msg.sender);\r\n\r\n        require(!isInitialized);\r\n\r\n        // Date and time are correct\r\n        require(now <= _startTime);\r\n        require(_endDiscountTime > _startTime && _endDiscountTime <= _endTime);\r\n\r\n        startTime = _startTime;\r\n        endTime = _endTime;\r\n        endDiscountTime = _endDiscountTime;\r\n\r\n    }\r\n\r\n    // We change the purpose of raising funds. Available to the manager.\r\n    // Description in the Crowdsale constructor.\r\n    function changeTargets(uint256 _softCap, uint256 _hardCap) public {\r\n\r\n        require(wallets[uint8(Roles.manager)] == msg.sender);\r\n\r\n        require(!isInitialized);\r\n\r\n        // The parameters are correct\r\n        require(_softCap <= _hardCap);\r\n\r\n        softCap = _softCap;\r\n        hardCap = _hardCap;\r\n    }\r\n\r\n    // Change the price (the number of tokens per 1 eth), the maximum hardCap for the last bet,\r\n    // the minimum bet. Available to the Manager.\r\n    // Description in the Crowdsale constructor\r\n    function changeRate(uint256 _rate, uint256 _overLimit, uint256 _minPay) public {\r\n\r\n        require(wallets[uint8(Roles.manager)] == msg.sender);\r\n\r\n        require(!isInitialized);\r\n\r\n        require(_rate > 0);\r\n\r\n        rate = _rate;\r\n        overLimit = _overLimit;\r\n        minPay = _minPay;\r\n    }\r\n\r\n    // We change the parameters of the discount:% min bonus,% max bonus, number of steps.\r\n    // Available to the manager. Description in the Crowdsale constructor\r\n    function changeDiscount(uint256 _minProfit, uint256 _maxProfit, uint256 _stepProfit, uint256 _maxAllProfit) public {\r\n\r\n        require(wallets[uint8(Roles.manager)] == msg.sender);\r\n\r\n        require(!isInitialized);\r\n        \r\n        require(_maxProfit <= _maxAllProfit);\r\n\r\n        // The parameters are correct\r\n        require(_stepProfit <= _maxProfit.sub(_minProfit));\r\n\r\n        // If not zero steps\r\n        if(_stepProfit > 0){\r\n            // We will specify the maximum percentage at which it is possible to provide\r\n            // the specified number of steps without fractional parts\r\n            profit.max = _maxProfit.sub(_minProfit).div(_stepProfit).mul(_stepProfit).add(_minProfit);\r\n        }else{\r\n            // to avoid a divide to zero error, set the bonus as static\r\n            profit.max = _minProfit;\r\n        }\r\n\r\n        profit.min = _minProfit;\r\n        profit.step = _stepProfit;\r\n        profit.maxAllProfit = _maxAllProfit;\r\n    }\r\n\r\n    function setBonuses(uint256[] _value, uint256[] _procent, uint256[] _dateUnfreeze) public {\r\n\r\n        require(wallets[uint8(Roles.manager)] == msg.sender);\r\n        require(!isInitialized);\r\n\r\n        require(_value.length == _procent.length && _value.length == _dateUnfreeze.length);\r\n        bonuses.length = _value.length;\r\n        for(uint256 i = 0; i < _value.length; i++){\r\n            bonuses[i] = Bonus(_value[i],_procent[i],_dateUnfreeze[i]);\r\n        }\r\n    }\r\n\r\n    // Collected funds for the current round. Constant.\r\n    function weiRaised() public constant returns(uint256){\r\n        return ethWeiRaised.add(nonEthWeiRaised);\r\n    }\r\n\r\n    // Returns the amount of fees for both phases. Constant.\r\n    function weiTotalRaised() public constant returns(uint256){\r\n        return weiRound1.add(weiRaised());\r\n    }\r\n\r\n    // Returns the percentage of the bonus on the current date. Constant.\r\n    function getProfitPercent() public constant returns (uint256){\r\n        return getProfitPercentForData(now);\r\n    }\r\n\r\n    // Returns the percentage of the bonus on the given date. Constant.\r\n    function getProfitPercentForData(uint256 timeNow) public constant returns (uint256){\r\n        // if the discount is 0 or zero steps, or the round does not start, we return the minimum discount\r\n        if (profit.max == 0 || profit.step == 0 || timeNow > endDiscountTime){\r\n            return profit.min;\r\n        }\r\n\r\n        // if the round is over - the maximum\r\n        if (timeNow<=startTime){\r\n            return profit.max;\r\n        }\r\n\r\n        // bonus period\r\n        uint256 range = endDiscountTime.sub(startTime);\r\n\r\n        // delta bonus percentage\r\n        uint256 profitRange = profit.max.sub(profit.min);\r\n\r\n        // Time left\r\n        uint256 timeRest = endDiscountTime.sub(timeNow);\r\n\r\n        // Divide the delta of time into\r\n        uint256 profitProcent = profitRange.div(profit.step).mul(timeRest.mul(profit.step.add(1)).div(range));\r\n        return profitProcent.add(profit.min);\r\n    }\r\n\r\n    function getBonuses(uint256 _value) public constant returns(uint256 procent, uint256 _dateUnfreeze){\r\n        if(bonuses.length == 0 || bonuses[0].value > _value){\r\n            return (0,0);\r\n        }\r\n        uint16 i = 1;\r\n        for(i; i < bonuses.length; i++){\r\n            if(bonuses[i].value > _value){\r\n                break;\r\n            }\r\n        }\r\n        return (bonuses[i-1].procent,bonuses[i-1].freezeTime);\r\n    }\r\n\r\n    // The ability to quickly check Round1 (only for Round1, only 1 time). Completes the Round1 by\r\n    // transferring the specified number of tokens to the Accountant's wallet. Available to the Manager.\r\n    // Use only if this is provided by the script and white paper. In the normal scenario, it\r\n    // does not call and the funds are raised normally. We recommend that you delete this\r\n    // function entirely, so as not to confuse the auditors. Initialize & Finalize not needed.\r\n    // ** QUINTILIONS **  10^18 / 1**18 / 1e18\r\n    function fastTokenSale(uint256 _totalSupply) public {\r\n        require(wallets[uint8(Roles.manager)] == msg.sender);\r\n        require(TokenSale == TokenSaleType.round1 && !isInitialized);\r\n        token.mint(wallets[uint8(Roles.accountant)], _totalSupply);\r\n        TokenSale = TokenSaleType.round2;\r\n    }\r\n\r\n    // Remove the \"Pause of exchange\". Available to the manager at any time. If the\r\n    // manager refuses to remove the pause, then 30-120 days after the successful\r\n    // completion of the TokenSale, anyone can remove a pause and allow the exchange to continue.\r\n    // The manager does not interfere and will not be able to delay the term.\r\n    // He can only cancel the pause before the appointed time.\r\n    function tokenUnpause() public {\r\n        require(wallets[uint8(Roles.manager)] == msg.sender\r\n            || (now > endTime + 60 days && TokenSale == TokenSaleType.round2 && isFinalized && goalReached()));\r\n        token.unpause();\r\n    }\r\n\r\n    // Enable the \"Pause of exchange\". Available to the manager until the TokenSale is completed.\r\n    // The manager cannot turn on the pause, for example, 3 years after the end of the TokenSale.\r\n    function tokenPause() public {\r\n        require(wallets[uint8(Roles.manager)] == msg.sender && !isFinalized);\r\n        token.pause();\r\n    }\r\n\r\n    // Pause of sale. Available to the manager.\r\n    function crowdsalePause() public {\r\n        require(wallets[uint8(Roles.manager)] == msg.sender);\r\n        require(isPausedCrowdsale == false);\r\n        isPausedCrowdsale = true;\r\n    }\r\n\r\n    // Withdrawal from the pause of sale. Available to the manager.\r\n    function crowdsaleUnpause() public {\r\n        require(wallets[uint8(Roles.manager)] == msg.sender);\r\n        require(isPausedCrowdsale == true);\r\n        isPausedCrowdsale = false;\r\n    }\r\n\r\n    // Checking whether the rights to address ignore the \"Pause of exchange\". If the\r\n    // wallet is included in this list, it can translate tokens, ignoring the pause. By default,\r\n    // only the following wallets are included:\r\n    //    - Accountant wallet (he should immediately transfer tokens, but not to non-ETH investors)\r\n    //    - Contract for freezing the tokens for the Team (but Team wallet not included)\r\n    // Inside. Constant.\r\n    function unpausedWallet(address _wallet) internal constant returns(bool) {\r\n        bool _accountant = wallets[uint8(Roles.accountant)] == _wallet;\r\n        bool _manager = wallets[uint8(Roles.manager)] == _wallet;\r\n        bool _bounty = wallets[uint8(Roles.bounty)] == _wallet;\r\n        bool _company = wallets[uint8(Roles.company)] == _wallet;\r\n        return _accountant || _manager || _bounty || _company;\r\n    }\r\n\r\n    // For example - After 5 years of the project's existence, all of us suddenly decided collectively\r\n    // (company + investors) that it would be more profitable for everyone to switch to another smart\r\n    // contract responsible for tokens. The company then prepares a new token, investors\r\n    // disassemble, study, discuss, etc. After a general agreement, the manager allows any investor:\r\n    //      - to burn the tokens of the previous contract\r\n    //      - generate new tokens for a new contract\r\n    // It is understood that after a general solution through this function all investors\r\n    // will collectively (and voluntarily) move to a new token.\r\n    function moveTokens(address _migrationAgent) public {\r\n        require(wallets[uint8(Roles.manager)] == msg.sender);\r\n        token.setMigrationAgent(_migrationAgent);\r\n    }\r\n\r\n    function migrateAll(address[] _holders) public {\r\n        require(wallets[uint8(Roles.manager)] == msg.sender);\r\n        token.migrateAll(_holders);\r\n    }\r\n\r\n    // Change the address for the specified role.\r\n    // Available to any wallet owner except the observer.\r\n    // Available to the manager until the round is initialized.\r\n    // The Observer's wallet or his own manager can change at any time.\r\n    function changeWallet(Roles _role, address _wallet) public\r\n    {\r\n        require(\r\n        (msg.sender == wallets[uint8(_role)] && _role != Roles.observer)\r\n        ||\r\n        (msg.sender == wallets[uint8(Roles.manager)] && (!isInitialized || _role == Roles.observer))\r\n        );\r\n        address oldWallet = wallets[uint8(_role)];\r\n        wallets[uint8(_role)] = _wallet;\r\n        if(!unpausedWallet(oldWallet))\r\n        token.delUnpausedWallet(oldWallet);\r\n        if(unpausedWallet(_wallet))\r\n        token.addUnpausedWallet(_wallet);\r\n    }\r\n\r\n    // If a little more than a year has elapsed (Round2 start date + 400 days), a smart contract\r\n    // will allow you to send all the money to the Beneficiary, if any money is present. This is\r\n    // possible if you mistakenly launch the Round2 for 30 years (not 30 days), investors will transfer\r\n    // money there and you will not be able to pick them up within a reasonable time. It is also\r\n    // possible that in our checked script someone will make unforeseen mistakes, spoiling the\r\n    // finalization. Without finalization, money cannot be returned. This is a rescue option to\r\n    // get around this problem, but available only after a year (400 days).\r\n\r\n    // Another reason - the TokenSale was a failure, but not all ETH investors took their money during the year after.\r\n    // Some investors may have lost a wallet key, for example.\r\n\r\n    // The method works equally with the Round1 and Round2. When the Round1 starts, the time for unlocking\r\n    // the distructVault begins. If the TokenSale is then started, then the term starts anew from the first day of the TokenSale.\r\n\r\n    // Next, act independently, in accordance with obligations to investors.\r\n\r\n    // Within 400 days of the start of the Round, if it fails only investors can take money. After\r\n    // the deadline this can also include the company as well as investors, depending on who is the first to use the method.\r\n    function distructVault() public {\r\n        require(wallets[uint8(Roles.beneficiary)] == msg.sender);\r\n        require(now > startTime + 400 days);\r\n        vault.del(wallets[uint8(Roles.beneficiary)]);\r\n    }\r\n\r\n\r\n    // We accept payments other than Ethereum (ETH) and other currencies, for example, Bitcoin (BTC).\r\n    // Perhaps other types of cryptocurrency - see the original terms in the white paper and on the TokenSale website.\r\n\r\n    // We release tokens on Ethereum. During the Round1 and Round2 with a smart contract, you directly transfer\r\n    // the tokens there and immediately, with the same transaction, receive tokens in your wallet.\r\n\r\n    // When paying in any other currency, for example in BTC, we accept your money via one common wallet.\r\n    // Our manager fixes the amount received for the bitcoin wallet and calls the method of the smart\r\n    // contract paymentsInOtherCurrency to inform him how much foreign currency has been received - on a daily basis.\r\n    // The smart contract pins the number of accepted ETH directly and the number of BTC. Smart contract\r\n    // monitors softcap and hardcap, so as not to go beyond this framework.\r\n\r\n    // In theory, it is possible that when approaching hardcap, we will receive a transfer (one or several\r\n    // transfers) to the wallet of BTC, that together with previously received money will exceed the hardcap in total.\r\n    // In this case, we will refund all the amounts above, in order not to exceed the hardcap.\r\n\r\n    // Collection of money in BTC will be carried out via one common wallet. The wallet's address will be published\r\n    // everywhere (in a white paper, on the TokenSale website, on Telegram, on Bitcointalk, in this code, etc.)\r\n    // Anyone interested can check that the administrator of the smart contract writes down exactly the amount\r\n    // in ETH (in equivalent for BTC) there. In theory, the ability to bypass a smart contract to accept money in\r\n    // BTC and not register them in ETH creates a possibility for manipulation by the company. Thanks to\r\n    // paymentsInOtherCurrency however, this threat is leveled.\r\n\r\n    // Any user can check the amounts in BTC and the variable of the smart contract that accounts for this\r\n    // (paymentsInOtherCurrency method). Any user can easily check the incoming transactions in a smart contract\r\n    // on a daily basis. Any hypothetical tricks on the part of the company can be exposed and panic during the TokenSale,\r\n    // simply pointing out the incompatibility of paymentsInOtherCurrency (ie, the amount of ETH + BTC collection)\r\n    // and the actual transactions in BTC. The company strictly adheres to the described principles of openness.\r\n\r\n    // The company administrator is required to synchronize paymentsInOtherCurrency every working day (but you\r\n    // cannot synchronize if there are no new BTC payments). In the case of unforeseen problems, such as\r\n    // brakes on the Ethereum network, this operation may be difficult. You should only worry if the\r\n    // administrator does not synchronize the amount for more than 96 hours in a row, and the BTC wallet\r\n    // receives significant amounts.\r\n\r\n    // This scenario ensures that for the sum of all fees in all currencies this value does not exceed hardcap.\r\n\r\n    // BTC - 1HQahivPX2cU5Nq921wSuULpuZyi9AcXCY\r\n\r\n    // ** QUINTILLIONS ** 10^18 / 1**18 / 1e18\r\n    function paymentsInOtherCurrency(uint256 _token, uint256 _value) public {\r\n        require(wallets[uint8(Roles.observer)] == msg.sender);\r\n        bool withinPeriod = (now >= startTime && now <= endTime);\r\n\r\n        bool withinCap = _value.add(ethWeiRaised) <= hardCap.add(overLimit);\r\n        require(withinPeriod && withinCap && isInitialized);\r\n\r\n        nonEthWeiRaised = _value;\r\n        tokenReserved = _token;\r\n\r\n    }\r\n    \r\n    function changeLock(address _owner, uint256 _value, uint256 _date) external {\r\n        require(wallets[uint8(Roles.manager)] == msg.sender);\r\n        token.changeLock(_owner, _value, _date);\r\n    }\r\n\r\n    function lokedMint(address _beneficiary, uint256 _value, uint256 _freezeTime) internal {\r\n        if(_freezeTime > 0){\r\n            \r\n            uint256 totalBloked = token.valueBlocked(_beneficiary).add(_value);\r\n            uint256 pastDateUnfreeze = token.blikedUntil(_beneficiary);\r\n            uint256 newDateUnfreeze = _freezeTime + now; \r\n            newDateUnfreeze = (pastDateUnfreeze > newDateUnfreeze ) ? pastDateUnfreeze : newDateUnfreeze;\r\n\r\n            token.changeLock(_beneficiary,totalBloked,newDateUnfreeze);\r\n        }\r\n        token.mint(_beneficiary,_value);\r\n    }\r\n\r\n\r\n    // The function for obtaining smart contract funds in ETH. If all the checks are true, the token is\r\n    // transferred to the buyer, taking into account the current bonus.\r\n    function buyTokens(address beneficiary) public payable {\r\n        require(beneficiary != 0x0);\r\n        require(validPurchase());\r\n\r\n        uint256 weiAmount = msg.value;\r\n\r\n        uint256 ProfitProcent = getProfitPercent();\r\n\r\n        var (bonus, dateUnfreeze) = getBonuses(weiAmount);\r\n        \r\n        // Scenario 1 - select max from all bonuses + check profit.maxAllProfit\r\n        //uint256 totalProfit = ProfitProcent;\r\n        //totalProfit = (totalProfit < bonus) ? bonus : totalProfit;\r\n        //totalProfit = (totalProfit > profit.maxAllProfit) ? profit.maxAllProfit : totalProfit;\r\n        \r\n        // Scenario 2 - sum both bonuses + check profit.maxAllProfit\r\n        uint256 totalProfit = bonus.add(ProfitProcent);\r\n        totalProfit = (totalProfit > profit.maxAllProfit)? profit.maxAllProfit: totalProfit;\r\n        \r\n        // calculate token amount to be created\r\n        uint256 tokens = weiAmount.mul(rate).mul(totalProfit + 100).div(100000);\r\n\r\n        // update state\r\n        ethWeiRaised = ethWeiRaised.add(weiAmount);\r\n\r\n        lokedMint(beneficiary, tokens, dateUnfreeze);\r\n\r\n        TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\r\n\r\n        forwardFunds();\r\n    }\r\n\r\n    // buyTokens alias\r\n    function () public payable {\r\n        buyTokens(msg.sender);\r\n    }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this does not hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    function Ownable() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) onlyOwner public{\r\n        require(newOwner != address(0));\r\n        owner = newOwner;\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n    event Pause();\r\n    event Unpause();\r\n\r\n    bool _paused = false;\r\n\r\n    function paused() public constant returns(bool)\r\n    {\r\n        return _paused;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev modifier to allow actions only when the contract IS paused\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!paused());\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev called by the owner to pause, triggers stopped state\r\n     */\r\n    function pause() onlyOwner public {\r\n        require(!_paused);\r\n        _paused = true;\r\n        Pause();\r\n    }\r\n\r\n    /**\r\n     * @dev called by the owner to unpause, returns to normal state\r\n     */\r\n    function unpause() onlyOwner public {\r\n        require(_paused);\r\n        _paused = false;\r\n        Unpause();\r\n    }\r\n}\r\n\r\n\r\n// Contract interface for transferring current tokens to another\r\ncontract MigrationAgent\r\n{\r\n    function migrateFrom(address _from, uint256 _value) public;\r\n}\r\n\r\ncontract BlockedToken is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    struct locked {uint256 value; uint256 date;}\r\n\r\n    mapping (address => locked) locks;\r\n\r\n    function blikedUntil(address _owner) external constant returns (uint256) {\r\n        if(now < locks[_owner].date)\r\n        {\r\n            return locks[_owner].date;\r\n        }else{\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    function valueBlocked(address _owner) public constant returns (uint256) {\r\n        if(now < locks[_owner].date)\r\n        {\r\n            return locks[_owner].value;\r\n        }else{\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    function changeLock(address _owner, uint256 _value, uint256 _date) external onlyOwner {\r\n        locks[_owner] = locked(_value,_date);\r\n    }\r\n}\r\n\r\n\r\n// (A2)\r\n// Contract token\r\ncontract TokenL is Pausable, BlockedToken {\r\n    using SafeMath for uint256;\r\n\r\n    string public constant name = \"Imigize\";\r\n    string public constant symbol = \"IMGZ\";\r\n    uint8 public constant decimals = 18;\r\n\r\n    uint256 public totalSupply;\r\n\r\n    mapping(address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n\r\n    mapping (address => bool) public unpausedWallet;\r\n\r\n    bool public mintingFinished = false;\r\n\r\n    uint256 public totalMigrated;\r\n    address public migrationAgent;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    event Mint(address indexed to, uint256 amount);\r\n    event MintFinished();\r\n\r\n    event Migrate(address indexed _from, address indexed _to, uint256 _value);\r\n\r\n    modifier canMint() {\r\n        require(!mintingFinished);\r\n        _;\r\n    }\r\n\r\n    function TokenL() public{\r\n        owner = 0x0;\r\n    }\r\n\r\n    function setOwner() public{\r\n        require(owner == 0x0);\r\n        owner = msg.sender;\r\n    }\r\n\r\n    // Balance of the specified address\r\n    function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n\r\n    // Transfer of tokens from one account to another\r\n    function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\r\n        uint256 available = balances[msg.sender].sub(valueBlocked(msg.sender));\r\n        require(_value <= available);\r\n        require (_value > 0);\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    // Returns the number of tokens that _owner trusted to spend from his account _spender\r\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    // Trust _sender and spend _value tokens from your account\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n\r\n        // To change the approve amount you first have to reduce the addresses\r\n        //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n        //  already 0 to mitigate the race condition described here:\r\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n        require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    // Transfer of tokens from the trusted address _from to the address _to in the number _value\r\n    function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\r\n\r\n        uint256 available = balances[_from].sub(valueBlocked(_from));\r\n        require(_value <= available);\r\n\r\n        var _allowance = allowed[_from][msg.sender];\r\n\r\n        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n        // require (_value <= _allowance);\r\n\r\n        require (_value > 0);\r\n\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = _allowance.sub(_value);\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    // Issue new tokens to the address _to in the amount _amount. Available to the owner of the contract (contract Crowdsale)\r\n    function mint(address _to, uint256 _amount) public onlyOwner canMint returns (bool) {\r\n        totalSupply = totalSupply.add(_amount);\r\n        balances[_to] = balances[_to].add(_amount);\r\n        Mint(_to, _amount);\r\n        Transfer(0x0, _to, _amount);\r\n        return true;\r\n    }\r\n\r\n    // Stop the release of tokens. This is not possible to cancel. Available to the owner of the contract.\r\n    function finishMinting() public onlyOwner returns (bool) {\r\n    \tmintingFinished = true;\r\n        MintFinished();\r\n        return true;\r\n    }\r\n\r\n    // Redefinition of the method of the returning status of the \"Exchange pause\".\r\n    // Never for the owner of an unpaused wallet.\r\n    function paused() public constant returns(bool) {\r\n        return super.paused() && !unpausedWallet[msg.sender];\r\n    }\r\n\r\n    // Add a wallet ignoring the \"Exchange pause\". Available to the owner of the contract.\r\n    function addUnpausedWallet(address _wallet) public onlyOwner {\r\n        unpausedWallet[_wallet] = true;\r\n    }\r\n\r\n    // Remove the wallet ignoring the \"Exchange pause\". Available to the owner of the contract.\r\n    function delUnpausedWallet(address _wallet) public onlyOwner {\r\n        unpausedWallet[_wallet] = false;\r\n    }\r\n\r\n    // Enable the transfer of current tokens to others. Only 1 time. Disabling this is not possible.\r\n    // Available to the owner of the contract.\r\n    function setMigrationAgent(address _migrationAgent) public onlyOwner {\r\n        require(migrationAgent == 0x0);\r\n        migrationAgent = _migrationAgent;\r\n    }\r\n\r\n    function migrateAll(address[] _holders) public onlyOwner {\r\n        require(migrationAgent != 0x0);\r\n        uint256 total = 0;\r\n        uint256 value;\r\n        for(uint i = 0; i < _holders.length; i++){\r\n            value = balances[_holders[i]];\r\n            if(value > 0){\r\n                balances[_holders[i]] = 0;\r\n                total = total.add(value);\r\n                MigrationAgent(migrationAgent).migrateFrom(_holders[i], value);\r\n                Migrate(_holders[i],migrationAgent,value);\r\n            }\r\n            totalSupply = totalSupply.sub(total);\r\n            totalMigrated = totalMigrated.add(total);\r\n        }\r\n    }\r\n\r\n    function migration(address _holder) internal {\r\n        require(migrationAgent != 0x0);\r\n        uint256 value = balances[_holder];\r\n        require(value > 0);\r\n        balances[_holder] = 0;\r\n        totalSupply = totalSupply.sub(value);\r\n        totalMigrated = totalMigrated.add(value);\r\n        MigrationAgent(migrationAgent).migrateFrom(_holder, value);\r\n        Migrate(_holder,migrationAgent,value);\r\n\r\n    }\r\n\r\n    // Reissue your tokens.\r\n    function migrate() public\r\n    {\r\n        migration(msg.sender);\r\n    }\r\n}\r\n\r\n\r\n// (A3)\r\n// Contract for freezing of investors' funds. Hence, investors will be able to withdraw money if the\r\n// round does not attain the softcap. From here the wallet of the beneficiary will receive all the\r\n// money (namely, the beneficiary, not the manager's wallet).\r\ncontract RefundVault is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    enum State { Active, Refunding, Closed }\r\n\r\n    mapping (address => uint256) public deposited;\r\n    State public state;\r\n\r\n    event Closed();\r\n    event RefundsEnabled();\r\n    event Refunded(address indexed beneficiary, uint256 weiAmount);\r\n    event Deposited(address indexed beneficiary, uint256 weiAmount);\r\n\r\n    function RefundVault() public {\r\n        state = State.Active;\r\n    }\r\n\r\n    // Depositing funds on behalf of an TokenSale investor. Available to the owner of the contract (Crowdsale Contract).\r\n    function deposit(address investor) onlyOwner public payable {\r\n        require(state == State.Active);\r\n        deposited[investor] = deposited[investor].add(msg.value);\r\n        Deposited(investor,msg.value);\r\n    }\r\n\r\n    // Move the collected funds to a specified address. Available to the owner of the contract.\r\n    function close(address _wallet) onlyOwner public {\r\n        require(state == State.Active);\r\n        require(_wallet != 0x0);\r\n        state = State.Closed;\r\n        Closed();\r\n        _wallet.transfer(this.balance);\r\n    }\r\n\r\n    // Allow refund to investors. Available to the owner of the contract.\r\n    function enableRefunds() onlyOwner public {\r\n        require(state == State.Active);\r\n        state = State.Refunding;\r\n        RefundsEnabled();\r\n    }\r\n\r\n    // Return the funds to a specified investor. In case of failure of the round, the investor\r\n    // should call this method of this contract (RefundVault) or call the method claimRefund of Crowdsale\r\n    // contract. This function should be called either by the investor himself, or the company\r\n    // (or anyone) can call this function in the loop to return funds to all investors en masse.\r\n    function refund(address investor) public {\r\n        require(state == State.Refunding);\r\n        require(deposited[investor] > 0);\r\n        uint256 depositedValue = deposited[investor];\r\n        deposited[investor] = 0;\r\n        investor.transfer(depositedValue);\r\n        Refunded(investor, depositedValue);\r\n    }\r\n\r\n    // Destruction of the contract with return of funds to the specified address. Available to\r\n    // the owner of the contract.\r\n    function del(address _wallet) external onlyOwner {\r\n        selfdestruct(_wallet);\r\n    }\r\n}\r\n\r\ncontract DistributorRefundVault is RefundVault{\r\n \r\n    address public taxCollector;\r\n    uint256 public taxValue;\r\n    \r\n    function DistributorRefundVault(address _taxCollector, uint256 _taxValue) RefundVault() public{\r\n        taxCollector = _taxCollector;\r\n        taxValue = _taxValue;\r\n    }\r\n   \r\n    function close(address _wallet) onlyOwner public {\r\n    \r\n        require(state == State.Active);\r\n        require(_wallet != 0x0);\r\n        \r\n        state = State.Closed;\r\n        Closed();\r\n        uint256 allPay = this.balance;\r\n        uint256 forTarget1;\r\n        uint256 forTarget2;\r\n        if(taxValue <= allPay){\r\n           forTarget1 = taxValue;\r\n           forTarget2 = allPay.sub(taxValue);\r\n           taxValue = 0;\r\n        }else {\r\n            taxValue = taxValue.sub(allPay);\r\n            forTarget1 = allPay;\r\n            forTarget2 = 0;\r\n        }\r\n        if(forTarget1 != 0){\r\n            taxCollector.transfer(forTarget1);\r\n        }\r\n       \r\n        if(forTarget2 != 0){\r\n            _wallet.transfer(forTarget2);\r\n        }\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\n// (B)\r\n// The contract for freezing tokens for the team..\r\ncontract SVTAllocation {\r\n    using SafeMath for uint256;\r\n\r\n    TokenL public token;\r\n\r\n    address public owner;\r\n\r\n    uint256 public unlockedAt;\r\n\r\n    // The contract takes the ERC20 coin address from which this contract will work and from the\r\n    // owner (Team wallet) who owns the funds.\r\n    function SVTAllocation(TokenL _token, address _owner) public{\r\n\r\n        // How many days to freeze from the moment of finalizing Round2\r\n        unlockedAt = now + 1 years;\r\n\r\n        token = _token;\r\n        owner = _owner;\r\n    }\r\n\r\n    function changeToken(TokenL _token) external{\r\n        require(msg.sender == owner);\r\n        token = _token;\r\n    }\r\n\r\n\r\n    // If the time of freezing expired will return the funds to the owner.\r\n    function unlock() external{\r\n        require(now >= unlockedAt);\r\n        require(token.transfer(owner,token.balanceOf(this)));\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"finalize2\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"tokenPause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"tokenUnpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rate\",\"type\":\"uint256\"},{\"name\":\"_overLimit\",\"type\":\"uint256\"},{\"name\":\"_minPay\",\"type\":\"uint256\"}],\"name\":\"changeRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiTotalRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"uint256\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"paymentsInOtherCurrency\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize1\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isInitialized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"crowdsalePause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_date\",\"type\":\"uint256\"}],\"name\":\"changeLock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getProfitPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalizeAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_migrationAgent\",\"type\":\"address\"}],\"name\":\"moveTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"profit\",\"outputs\":[{\"name\":\"min\",\"type\":\"uint256\"},{\"name\":\"max\",\"type\":\"uint256\"},{\"name\":\"step\",\"type\":\"uint256\"},{\"name\":\"maxAllProfit\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_holders\",\"type\":\"address[]\"}],\"name\":\"migrateAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"company\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"wallets\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"goalReached\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minProfit\",\"type\":\"uint256\"},{\"name\":\"_maxProfit\",\"type\":\"uint256\"},{\"name\":\"_stepProfit\",\"type\":\"uint256\"},{\"name\":\"_maxAllProfit\",\"type\":\"uint256\"}],\"name\":\"changeDiscount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minPay\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"team\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_role\",\"type\":\"uint8\"},{\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"changeWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isFinalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"softCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"timeNow\",\"type\":\"uint256\"}],\"name\":\"getProfitPercentForData\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256[]\"},{\"name\":\"_procent\",\"type\":\"uint256[]\"},{\"name\":\"_dateUnfreeze\",\"type\":\"uint256[]\"}],\"name\":\"setBonuses\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bounty\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_startTime\",\"type\":\"uint256\"},{\"name\":\"_endDiscountTime\",\"type\":\"uint256\"},{\"name\":\"_endTime\",\"type\":\"uint256\"},{\"name\":\"_softCap\",\"type\":\"uint256\"},{\"name\":\"_hardCap\",\"type\":\"uint256\"},{\"name\":\"_rate\",\"type\":\"uint256\"},{\"name\":\"_overLimit\",\"type\":\"uint256\"},{\"name\":\"_minPay\",\"type\":\"uint256\"},{\"name\":\"_minProfit\",\"type\":\"uint256\"},{\"name\":\"_maxProfit\",\"type\":\"uint256\"},{\"name\":\"_stepProfit\",\"type\":\"uint256\"},{\"name\":\"_maxAllProfit\",\"type\":\"uint256\"},{\"name\":\"_value\",\"type\":\"uint256[]\"},{\"name\":\"_procent\",\"type\":\"uint256[]\"},{\"name\":\"_freezeTime\",\"type\":\"uint256[]\"}],\"name\":\"setup\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"distructVault\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_startTime\",\"type\":\"uint256\"},{\"name\":\"_endDiscountTime\",\"type\":\"uint256\"},{\"name\":\"_endTime\",\"type\":\"uint256\"}],\"name\":\"changePeriod\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bonuses\",\"outputs\":[{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"procent\",\"type\":\"uint256\"},{\"name\":\"freezeTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_totalSupply\",\"type\":\"uint256\"}],\"name\":\"fastTokenSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endDiscountTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimRefund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize3\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isPausedCrowdsale\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTokenSaleType\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockedAllocation\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"overLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenReserved\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"getBonuses\",\"outputs\":[{\"name\":\"procent\",\"type\":\"uint256\"},{\"name\":\"_dateUnfreeze\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_softCap\",\"type\":\"uint256\"},{\"name\":\"_hardCap\",\"type\":\"uint256\"}],\"name\":\"changeTargets\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hardCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"crowdsaleUnpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"firstMint\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Finalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Initialized\",\"type\":\"event\"}]","ContractName":"CrowdsaleL","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000707f0612cBbfa02284e02B0010B4f859bb7308ec0000000000000000000000000000000000000000000069e10de76676d0800000","Library":"","SwarmSource":"bzzr://49dbda70e8f049b0802560947f5414b97198cd64e76892386be0dbb58650fd68"}]}