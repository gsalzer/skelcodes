{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\npragma solidity ^0.4.11;\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control \r\n * functions, this simplifies the implementation of \"user permissions\". \r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  /** \r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner. \r\n   */\r\n  modifier onlyOwner() {\r\n    if (msg.sender != owner) {\r\n      throw;\r\n    }\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to. \r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner {\r\n    if (newOwner != address(0)) {\r\n      owner = newOwner;\r\n    }\r\n  }\r\n\r\n}\r\n\r\npragma solidity ^0.4.11;\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) constant returns (uint256);\r\n  function transfer(address to, uint256 value);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\npragma solidity ^0.4.11;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value);\r\n  function approve(address spender, uint256 value);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\npragma solidity ^0.4.11;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances. \r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) {\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of. \r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\npragma solidity ^0.4.11;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amout of tokens to be transfered\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) {\r\n    var _allowance = allowed[_from][msg.sender];\r\n\r\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n    // if (_value > _allowance) throw;\r\n\r\n    balances[_to] = balances[_to].add(_value);\r\n    balances[_from] = balances[_from].sub(_value);\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    Transfer(_from, _to, _value);\r\n  }\r\n\r\n  /**\r\n   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) {\r\n\r\n    // To change the approve amount you first have to reduce the addresses`\r\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n    //  already 0 to mitigate the race condition described here:\r\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    if ((_value != 0) && (allowed[msg.sender][_spender] != 0)) throw;\r\n\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifing the amount of tokens still avaible for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n}\r\n\r\npragma solidity ^0.4.11;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Mintable token\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\r\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n */\r\n\r\ncontract MintableToken is StandardToken, Ownable {\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n\r\n  modifier canMint() {\r\n    if(mintingFinished) throw;\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will recieve the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(address _to, uint256 _amount) onlyOwner canMint returns (bool) {\r\n    totalSupply = totalSupply.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    Mint(_to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() onlyOwner returns (bool) {\r\n    mintingFinished = true;\r\n    MintFinished();\r\n    return true;\r\n  }\r\n}\r\n\r\npragma solidity ^0.4.11;\r\n\r\n\r\n/*\r\n    Copyright 2017, Giovanni Zorzato (Boul√© Foundation)\r\n*/\r\n\r\ncontract BouleToken is MintableToken {\r\n    // BouleToken is an OpenZeppelin Mintable Token\r\n    string public name = \"Boule Token\";\r\n    string public symbol = \"BOU\";\r\n    uint public decimals = 18;\r\n\r\n    // do no allow to send ether to this token\r\n    function () public payable {\r\n        throw;\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\npragma solidity ^0.4.4;\r\n\r\n\r\n/// @title Multisignature wallet - Allows multiple parties to agree on transactions before execution.\r\n/// @author Stefan George - <stefan.george@consensys.net>\r\ncontract MultiSigWallet {\r\n\r\n    uint constant public MAX_OWNER_COUNT = 50;\r\n\r\n    event Confirmation(address indexed sender, uint indexed transactionId);\r\n    event Revocation(address indexed sender, uint indexed transactionId);\r\n    event Submission(uint indexed transactionId);\r\n    event Execution(uint indexed transactionId);\r\n    event ExecutionFailure(uint indexed transactionId);\r\n    event Deposit(address indexed sender, uint value);\r\n    event OwnerAddition(address indexed owner);\r\n    event OwnerRemoval(address indexed owner);\r\n    event RequirementChange(uint required);\r\n\r\n    mapping (uint => Transaction) public transactions;\r\n    mapping (uint => mapping (address => bool)) public confirmations;\r\n    mapping (address => bool) public isOwner;\r\n    address[] public owners;\r\n    uint public required;\r\n    uint public transactionCount;\r\n\r\n    struct Transaction {\r\n        address destination;\r\n        uint value;\r\n        bytes data;\r\n        bool executed;\r\n    }\r\n\r\n    modifier onlyWallet() {\r\n        if (msg.sender != address(this))\r\n            throw;\r\n        _;\r\n    }\r\n\r\n    modifier ownerDoesNotExist(address owner) {\r\n        if (isOwner[owner])\r\n            throw;\r\n        _;\r\n    }\r\n\r\n    modifier ownerExists(address owner) {\r\n        if (!isOwner[owner])\r\n            throw;\r\n        _;\r\n    }\r\n\r\n    modifier transactionExists(uint transactionId) {\r\n        if (transactions[transactionId].destination == 0)\r\n            throw;\r\n        _;\r\n    }\r\n\r\n    modifier confirmed(uint transactionId, address owner) {\r\n        if (!confirmations[transactionId][owner])\r\n            throw;\r\n        _;\r\n    }\r\n\r\n    modifier notConfirmed(uint transactionId, address owner) {\r\n        if (confirmations[transactionId][owner])\r\n            throw;\r\n        _;\r\n    }\r\n\r\n    modifier notExecuted(uint transactionId) {\r\n        if (transactions[transactionId].executed)\r\n            throw;\r\n        _;\r\n    }\r\n\r\n    modifier notNull(address _address) {\r\n        if (_address == 0)\r\n            throw;\r\n        _;\r\n    }\r\n\r\n    modifier validRequirement(uint ownerCount, uint _required) {\r\n        if (   ownerCount > MAX_OWNER_COUNT\r\n            || _required > ownerCount\r\n            || _required == 0\r\n            || ownerCount == 0)\r\n            throw;\r\n        _;\r\n    }\r\n\r\n    /// @dev Fallback function allows to deposit ether.\r\n    function()\r\n        payable\r\n    {\r\n        if (msg.value > 0)\r\n            Deposit(msg.sender, msg.value);\r\n    }\r\n\r\n    /*\r\n     * Public functions\r\n     */\r\n    /// @dev Contract constructor sets initial owners and required number of confirmations.\r\n    /// @param _owners List of initial owners.\r\n    /// @param _required Number of required confirmations.\r\n    function MultiSigWallet(address[] _owners, uint _required)\r\n        public\r\n        validRequirement(_owners.length, _required)\r\n    {\r\n        for (uint i=0; i<_owners.length; i++) {\r\n            if (isOwner[_owners[i]] || _owners[i] == 0)\r\n                throw;\r\n            isOwner[_owners[i]] = true;\r\n        }\r\n        owners = _owners;\r\n        required = _required;\r\n    }\r\n\r\n    /// @dev Allows to add a new owner. Transaction has to be sent by wallet.\r\n    /// @param owner Address of new owner.\r\n    function addOwner(address owner)\r\n        public\r\n        onlyWallet\r\n        ownerDoesNotExist(owner)\r\n        notNull(owner)\r\n        validRequirement(owners.length + 1, required)\r\n    {\r\n        isOwner[owner] = true;\r\n        owners.push(owner);\r\n        OwnerAddition(owner);\r\n    }\r\n\r\n    /// @dev Allows to remove an owner. Transaction has to be sent by wallet.\r\n    /// @param owner Address of owner.\r\n    function removeOwner(address owner)\r\n        public\r\n        onlyWallet\r\n        ownerExists(owner)\r\n    {\r\n        isOwner[owner] = false;\r\n        for (uint i=0; i<owners.length - 1; i++)\r\n            if (owners[i] == owner) {\r\n                owners[i] = owners[owners.length - 1];\r\n                break;\r\n            }\r\n        owners.length -= 1;\r\n        if (required > owners.length)\r\n            changeRequirement(owners.length);\r\n        OwnerRemoval(owner);\r\n    }\r\n\r\n    /// @dev Allows to replace an owner with a new owner. Transaction has to be sent by wallet.\r\n    /// @param owner Address of owner to be replaced.\r\n    /// @param owner Address of new owner.\r\n    function replaceOwner(address owner, address newOwner)\r\n        public\r\n        onlyWallet\r\n        ownerExists(owner)\r\n        ownerDoesNotExist(newOwner)\r\n    {\r\n        for (uint i=0; i<owners.length; i++)\r\n            if (owners[i] == owner) {\r\n                owners[i] = newOwner;\r\n                break;\r\n            }\r\n        isOwner[owner] = false;\r\n        isOwner[newOwner] = true;\r\n        OwnerRemoval(owner);\r\n        OwnerAddition(newOwner);\r\n    }\r\n\r\n    /// @dev Allows to change the number of required confirmations. Transaction has to be sent by wallet.\r\n    /// @param _required Number of required confirmations.\r\n    function changeRequirement(uint _required)\r\n        public\r\n        onlyWallet\r\n        validRequirement(owners.length, _required)\r\n    {\r\n        required = _required;\r\n        RequirementChange(_required);\r\n    }\r\n\r\n    /// @dev Allows an owner to submit and confirm a transaction.\r\n    /// @param destination Transaction target address.\r\n    /// @param value Transaction ether value.\r\n    /// @param data Transaction data payload.\r\n    /// @return Returns transaction ID.\r\n    function submitTransaction(address destination, uint value, bytes data)\r\n        public\r\n        returns (uint transactionId)\r\n    {\r\n        transactionId = addTransaction(destination, value, data);\r\n        confirmTransaction(transactionId);\r\n    }\r\n\r\n    /// @dev Allows an owner to confirm a transaction.\r\n    /// @param transactionId Transaction ID.\r\n    function confirmTransaction(uint transactionId)\r\n        public\r\n        ownerExists(msg.sender)\r\n        transactionExists(transactionId)\r\n        notConfirmed(transactionId, msg.sender)\r\n    {\r\n        confirmations[transactionId][msg.sender] = true;\r\n        Confirmation(msg.sender, transactionId);\r\n        executeTransaction(transactionId);\r\n    }\r\n\r\n    /// @dev Allows an owner to revoke a confirmation for a transaction.\r\n    /// @param transactionId Transaction ID.\r\n    function revokeConfirmation(uint transactionId)\r\n        public\r\n        ownerExists(msg.sender)\r\n        confirmed(transactionId, msg.sender)\r\n        notExecuted(transactionId)\r\n    {\r\n        confirmations[transactionId][msg.sender] = false;\r\n        Revocation(msg.sender, transactionId);\r\n    }\r\n\r\n    /// @dev Allows anyone to execute a confirmed transaction.\r\n    /// @param transactionId Transaction ID.\r\n    function executeTransaction(uint transactionId)\r\n        public\r\n        notExecuted(transactionId)\r\n    {\r\n        if (isConfirmed(transactionId)) {\r\n            Transaction tx = transactions[transactionId];\r\n            tx.executed = true;\r\n            if (tx.destination.call.value(tx.value)(tx.data))\r\n                Execution(transactionId);\r\n            else {\r\n                ExecutionFailure(transactionId);\r\n                tx.executed = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @dev Returns the confirmation status of a transaction.\r\n    /// @param transactionId Transaction ID.\r\n    /// @return Confirmation status.\r\n    function isConfirmed(uint transactionId)\r\n        public\r\n        constant\r\n        returns (bool)\r\n    {\r\n        uint count = 0;\r\n        for (uint i=0; i<owners.length; i++) {\r\n            if (confirmations[transactionId][owners[i]])\r\n                count += 1;\r\n            if (count == required)\r\n                return true;\r\n        }\r\n    }\r\n\r\n    /*\r\n     * Internal functions\r\n     */\r\n    /// @dev Adds a new transaction to the transaction mapping, if transaction does not exist yet.\r\n    /// @param destination Transaction target address.\r\n    /// @param value Transaction ether value.\r\n    /// @param data Transaction data payload.\r\n    /// @return Returns transaction ID.\r\n    function addTransaction(address destination, uint value, bytes data)\r\n        internal\r\n        notNull(destination)\r\n        returns (uint transactionId)\r\n    {\r\n        transactionId = transactionCount;\r\n        transactions[transactionId] = Transaction({\r\n            destination: destination,\r\n            value: value,\r\n            data: data,\r\n            executed: false\r\n        });\r\n        transactionCount += 1;\r\n        Submission(transactionId);\r\n    }\r\n\r\n    /*\r\n     * Web3 call functions\r\n     */\r\n    /// @dev Returns number of confirmations of a transaction.\r\n    /// @param transactionId Transaction ID.\r\n    /// @return Number of confirmations.\r\n    function getConfirmationCount(uint transactionId)\r\n        public\r\n        constant\r\n        returns (uint count)\r\n    {\r\n        for (uint i=0; i<owners.length; i++)\r\n            if (confirmations[transactionId][owners[i]])\r\n                count += 1;\r\n    }\r\n\r\n    /// @dev Returns total number of transactions after filers are applied.\r\n    /// @param pending Include pending transactions.\r\n    /// @param executed Include executed transactions.\r\n    /// @return Total number of transactions after filters are applied.\r\n    function getTransactionCount(bool pending, bool executed)\r\n        public\r\n        constant\r\n        returns (uint count)\r\n    {\r\n        for (uint i=0; i<transactionCount; i++)\r\n            if (   pending && !transactions[i].executed\r\n                || executed && transactions[i].executed)\r\n                count += 1;\r\n    }\r\n\r\n    /// @dev Returns list of owners.\r\n    /// @return List of owner addresses.\r\n    function getOwners()\r\n        public\r\n        constant\r\n        returns (address[])\r\n    {\r\n        return owners;\r\n    }\r\n\r\n    /// @dev Returns array with owner addresses, which confirmed transaction.\r\n    /// @param transactionId Transaction ID.\r\n    /// @return Returns array of owner addresses.\r\n    function getConfirmations(uint transactionId)\r\n        public\r\n        constant\r\n        returns (address[] _confirmations)\r\n    {\r\n        address[] memory confirmationsTemp = new address[](owners.length);\r\n        uint count = 0;\r\n        uint i;\r\n        for (i=0; i<owners.length; i++)\r\n            if (confirmations[transactionId][owners[i]]) {\r\n                confirmationsTemp[count] = owners[i];\r\n                count += 1;\r\n            }\r\n        _confirmations = new address[](count);\r\n        for (i=0; i<count; i++)\r\n            _confirmations[i] = confirmationsTemp[i];\r\n    }\r\n\r\n    /// @dev Returns list of transaction IDs in defined range.\r\n    /// @param from Index start position of transaction array.\r\n    /// @param to Index end position of transaction array.\r\n    /// @param pending Include pending transactions.\r\n    /// @param executed Include executed transactions.\r\n    /// @return Returns array of transaction IDs.\r\n    function getTransactionIds(uint from, uint to, bool pending, bool executed)\r\n        public\r\n        constant\r\n        returns (uint[] _transactionIds)\r\n    {\r\n        uint[] memory transactionIdsTemp = new uint[](transactionCount);\r\n        uint count = 0;\r\n        uint i;\r\n        for (i=0; i<transactionCount; i++)\r\n            if (   pending && !transactions[i].executed\r\n                || executed && transactions[i].executed)\r\n            {\r\n                transactionIdsTemp[count] = i;\r\n                count += 1;\r\n            }\r\n        _transactionIds = new uint[](to - from);\r\n        for (i=from; i<to; i++)\r\n            _transactionIds[i - from] = transactionIdsTemp[i];\r\n    }\r\n}\r\n\r\npragma solidity ^0.4.11;\r\n\r\n\r\n/*\r\n    Copyright 2017, Giovanni Zorzato (Boul√© Foundation)\r\n */\r\n\r\ncontract BoulePreSale is Ownable{\r\n\r\n    uint public initialBlock;             // Block number in which the sale starts.\r\n    uint public discountBlock;            // Block number in which the priority discount end.\r\n    uint public finalBlock;               // Block number in which the sale end.\r\n\r\n    address public bouleDevMultisig;      // The address to hold the funds donated\r\n\r\n\r\n    uint public totalCollected = 0;               // In wei\r\n    bool public saleStopped = false;              // Has Boul√© Dev stopped the sale?\r\n    bool public saleFinalized = false;            // Has Boul√© Dev finalized the sale?\r\n\r\n    BouleToken public token;              // The token\r\n\r\n    MultiSigWallet wallet;\r\n\r\n    uint constant public minInvestment = 1 finney;    // Minimum investment  0,001 ETH\r\n    uint public hardCap = 10000 ether;               // Pre-sale Cap\r\n    uint public minFundingGoal = 300 ether;          // Minimum funding goal for sale success\r\n\r\n\r\n    /** Addresses that are allowed to invest even before ICO offical opens. For testing, for ICO partners, etc. */\r\n    mapping (address => bool) public whitelist;\r\n\r\n    /** How much they have invested */\r\n    mapping(address => uint) public balances;\r\n\r\n    event NewBuyer(address indexed holder, uint256 bouAmount, uint256 amount);\r\n    // Address early participation whitelist status changed\r\n    event Whitelisted(address addr, bool status);\r\n    // Investor has been refunded because the ico did not reach the min funding goal\r\n    event Refunded(address investor, uint value);\r\n\r\n    function BoulePreSale (\r\n    address _token,\r\n    uint _initialBlock,\r\n    uint _discountBlock,\r\n    uint _finalBlock,\r\n    address _bouleDevMultisig\r\n    )\r\n    {\r\n        if (_initialBlock >= _finalBlock) throw;\r\n\r\n        // Save constructor arguments as global variables\r\n        token = BouleToken(_token);\r\n\r\n        initialBlock = _initialBlock;\r\n        discountBlock = _discountBlock;\r\n        finalBlock = _finalBlock;\r\n        bouleDevMultisig = _bouleDevMultisig;\r\n        // create wallet object\r\n        wallet = MultiSigWallet(bouleDevMultisig);\r\n\r\n    }\r\n\r\n    // change whitelist status for a specific address\r\n    function setWhitelistStatus(address addr, bool status)\r\n    onlyOwner {\r\n        whitelist[addr] = status;\r\n        Whitelisted(addr, status);\r\n    }\r\n\r\n    // @notice Get the price for a BOU token at any given block number\r\n    // @param _blockNumber the block for which the price is requested\r\n    // @return price of boule\r\n    // If sale isn't ongoing for that block, returns 0.\r\n    function getPrice(uint _blockNumber) constant public returns (uint256) {\r\n        if (_blockNumber >= finalBlock) return 0;\r\n        if(_blockNumber <= discountBlock){\r\n            return 2000; // 2000 BOU for 1 ETH first 24 hours (approx in blocks)\r\n        }\r\n        return 1400; // 1400 BOU for 1 ETH after 24 hours (approx in blocks)\r\n    }\r\n\r\n\r\n    /// @dev The fallback function is called when ether is sent to the contract, it\r\n    /// simply calls `doPayment()` with the address that sent the ether as the\r\n    /// `_owner`. Payable is a required solidity modifier for functions to receive\r\n    /// ether, without this modifier functions will throw if ether is sent to them\r\n\r\n    function () public payable {\r\n        doPayment(msg.sender);\r\n    }\r\n\r\n\r\n\r\n    /// @dev `doPayment()` is an internal function that sends the ether that this\r\n    ///  contract receives to the bouleDevMultisig and creates tokens in the address of the\r\n    /// @param _owner The address that will hold the newly created tokens\r\n\r\n    function doPayment(address _owner)\r\n    only_during_sale_period_or_whitelisted(_owner)\r\n    only_sale_not_stopped\r\n    non_zero_address(_owner)\r\n    minimum_value(minInvestment)\r\n    internal {\r\n        // do not allow to go past hard cap\r\n        if ((totalCollected + msg.value) > hardCap) throw; // If past hard cap, throw\r\n\r\n        if ((totalCollected + msg.value) < minFundingGoal){ // if under min funding goal\r\n            // record the investment for possible refund in case the ICO does not finalize\r\n            balances[_owner] = SafeMath.add(balances[_owner], msg.value);\r\n            // keep funds here\r\n        }\r\n        else{\r\n            if (!wallet.send(msg.value)) throw; // Send funds to multisig wallet\r\n        }\r\n\r\n        uint256 boughtTokens = SafeMath.mul(msg.value, getPrice(getBlockNumber())); // Calculate how many tokens bought\r\n\r\n        if (!token.mint(_owner, boughtTokens)) throw; // Allocate tokens.\r\n\r\n        totalCollected = SafeMath.add(totalCollected, msg.value); // Save total collected amount\r\n\r\n        NewBuyer(_owner, boughtTokens, msg.value);\r\n    }\r\n\r\n    // allow investors to be refunded if the sale does not reach min investment target (minFundingGoal)\r\n    // refund can be asked only after sale period\r\n    function refund()\r\n    only_sale_refundable {\r\n        address investor = msg.sender;\r\n        if(balances[investor] == 0) throw; // nothing to refund\r\n        uint amount = balances[investor];\r\n        // remove balance\r\n        delete balances[investor];\r\n        // send back eth\r\n        if(!investor.send(amount)) throw;\r\n\r\n        Refunded(investor, amount);\r\n    }\r\n\r\n    // @notice Function to stop sale for an emergency.\r\n    // @dev Only Boul√© Dev can do it after it has been activated.\r\n    function emergencyStopSale()\r\n    only_sale_not_stopped\r\n    onlyOwner\r\n    public {\r\n\r\n        saleStopped = true;\r\n    }\r\n\r\n    // @notice Function to restart stopped sale.\r\n    // @dev Only Boul√© Dev can do it after it has been disabled and sale is ongoing.\r\n    function restartSale()\r\n    only_during_sale_period\r\n    only_sale_stopped\r\n    onlyOwner\r\n    public {\r\n\r\n        saleStopped = false;\r\n    }\r\n\r\n    // @notice Function to change sale block intervals.\r\n    // @dev Only Boul√© Dev can do it while the sale is ongoing to fix block time variations.\r\n    function changeSaleBlocks(uint _initialBlock, uint _discountBlock, uint _finalBlock)\r\n    onlyOwner\r\n    only_sale_not_stopped\r\n    public {\r\n        if (_initialBlock >= _finalBlock) throw;\r\n        if (_initialBlock >= _discountBlock) throw;\r\n        if (saleFinalized) throw; // only if sale is still active\r\n        initialBlock = _initialBlock;\r\n        discountBlock = _discountBlock;\r\n        finalBlock = _finalBlock;\r\n    }\r\n\r\n\r\n    // @notice Moves funds in sale contract to Boul√© MultiSigWallet.\r\n    // @dev  Moves funds in sale contract to Boul√© MultiSigWallet.\r\n    function moveFunds()\r\n    onlyOwner\r\n    public {\r\n        if (totalCollected < minFundingGoal) throw;\r\n        // move funds\r\n        if (!wallet.send(this.balance)) throw;\r\n    }\r\n\r\n\r\n    // @notice Finalizes sale generating the tokens for Boul√© Dev.\r\n    // @dev Transfers the token controller power to the ANPlaceholder.\r\n    function finalizeSale()\r\n    only_after_sale\r\n    onlyOwner\r\n    public {\r\n\r\n        doFinalizeSale();\r\n    }\r\n\r\n    function doFinalizeSale()\r\n    internal {\r\n        // Doesn't check if saleStopped is false, because sale could end in a emergency stop.\r\n        // This function cannot be successfully called twice, because it will top being the controller,\r\n        // and the generateTokens call will fail if called again.\r\n\r\n        // Boul√© owns 50% of the total number of emitted tokens at the end of the pre-sale.\r\n\r\n        if (totalCollected >= minFundingGoal){ // if min funding goal reached\r\n            // move all remaining eth in the sale contract into multisig wallet (no refund is possible anymore)\r\n            if (!wallet.send(this.balance)) throw;\r\n\r\n            uint256 bouleTokenSupply = token.totalSupply();\r\n\r\n            if (!token.mint(bouleDevMultisig, bouleTokenSupply)) throw; // Allocate tokens for Boul√©.\r\n        }\r\n        // token will be owned by Boul√© multisig wallet, this contract cannot mint anymore\r\n        token.transferOwnership(bouleDevMultisig);\r\n\r\n        saleFinalized = true;\r\n        saleStopped = true;\r\n    }\r\n\r\n\r\n    function getBlockNumber() constant internal returns (uint) {\r\n        return block.number;\r\n    }\r\n\r\n\r\n    modifier only(address x) {\r\n        if (msg.sender != x) throw;\r\n        _;\r\n    }\r\n\r\n    modifier only_before_sale {\r\n        if (getBlockNumber() >= initialBlock) throw;\r\n        _;\r\n    }\r\n\r\n    modifier only_during_sale_period {\r\n        if (getBlockNumber() < initialBlock) throw;\r\n        if (getBlockNumber() >= finalBlock) throw;\r\n        _;\r\n    }\r\n\r\n    // valid only during sale or before sale if the sender is whitelisted\r\n    modifier only_during_sale_period_or_whitelisted(address x) {\r\n        if (getBlockNumber() < initialBlock && !whitelist[x]) throw;\r\n        if (getBlockNumber() >= finalBlock) throw;\r\n        _;\r\n    }\r\n\r\n    modifier only_after_sale {\r\n        if (getBlockNumber() < finalBlock) throw;\r\n        _;\r\n    }\r\n\r\n    modifier only_sale_stopped {\r\n        if (!saleStopped) throw;\r\n        _;\r\n    }\r\n\r\n    modifier only_sale_not_stopped {\r\n        if (saleStopped) throw;\r\n        _;\r\n    }\r\n\r\n    modifier only_finalized_sale {\r\n        if (getBlockNumber() < finalBlock) throw;\r\n        if (!saleFinalized) throw;\r\n        _;\r\n    }\r\n\r\n    modifier non_zero_address(address x) {\r\n        if (x == 0) throw;\r\n        _;\r\n    }\r\n\r\n    modifier only_sale_refundable {\r\n        if (getBlockNumber() < finalBlock) throw; // sale must have ended\r\n        if (totalCollected >= minFundingGoal) throw; // sale must be under min funding goal\r\n        _;\r\n    }\r\n\r\n    modifier minimum_value(uint256 x) {\r\n        if (msg.value < x) throw;\r\n        _;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setWhitelistStatus\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minFundingGoal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"finalBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"emergencyStopSale\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bouleDevMultisig\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleStopped\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalizeSale\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refund\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"restartSale\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minInvestment\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleFinalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"moveFunds\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"discountBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalCollected\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"getPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_initialBlock\",\"type\":\"uint256\"},{\"name\":\"_discountBlock\",\"type\":\"uint256\"},{\"name\":\"_finalBlock\",\"type\":\"uint256\"}],\"name\":\"changeSaleBlocks\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hardCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_initialBlock\",\"type\":\"uint256\"},{\"name\":\"_discountBlock\",\"type\":\"uint256\"},{\"name\":\"_finalBlock\",\"type\":\"uint256\"},{\"name\":\"_bouleDevMultisig\",\"type\":\"address\"}],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"bouAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NewBuyer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"Whitelisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Refunded\",\"type\":\"event\"}]","ContractName":"BoulePreSale","CompilerVersion":"v0.4.15+commit.bbb8e64f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000c2c63f23ec5e97efbd7565df9ec764fdc7d4e91d00000000000000000000000000000000000000000000000000000000004038ba0000000000000000000000000000000000000000000000000000000000405613000000000000000000000000000000000000000000000000000000000041d9b6000000000000000000000000f8ad829711ee14eb0d85566f7fb4e380105d11ef","Library":"","SwarmSource":"bzzr://89af0db28bd69bead9e8cb17755893c32b7be37db2eb261a4b747e4114dbc570"}]}