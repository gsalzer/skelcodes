{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.15;\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public constant returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n\r\n    uint256 _allowance = allowed[_from][msg.sender];\r\n\r\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n    // require (_value <= _allowance);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   */\r\n  function increaseApproval (address _spender, uint _addedValue)\r\n    returns (bool success) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  function decreaseApproval (address _spender, uint _subtractedValue)\r\n    returns (bool success) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n// This is just a contract of a B2BC Token.\r\n// It is a ERC20 token\r\ncontract B2BCToken is StandardToken, Ownable{\r\n    \r\n    string public version = \"1.8\";\r\n    string public name = \"B2B Coin Token\";\r\n    string public symbol = \"B2BC\";\r\n    uint8 public  decimals = 18;\r\n\r\n    \r\n    uint256 internal constant INITIAL_SUPPLY = 300 * (10**6) * (10 **18);\r\n    uint256 internal constant DEVELOPER_RESERVED = 120 * (10**6) * (10**18);\r\n\r\n    //address public developer;\r\n    //uint256 internal crowdsaleAvaible;\r\n\r\n\r\n    event Burn(address indexed burner, uint256 value);\r\n    \r\n    // constructor\r\n    function B2BCToken(address _developer) { \r\n        balances[_developer] = DEVELOPER_RESERVED;\r\n        totalSupply = DEVELOPER_RESERVED;\r\n    }\r\n\r\n  \r\n    /**\r\n     * @dev Burns a specific amount of tokens.\r\n     * @param _value The amount of token to be burned.\r\n     */\r\n    function burn(uint256 _value) public returns (bool success) {\r\n        require(_value > 0);\r\n        require(_value <= balances[msg.sender]);\r\n    \r\n        address burner = msg.sender;\r\n        balances[burner] = balances[burner].sub(_value);\r\n        totalSupply = totalSupply.sub(_value);\r\n        Burn(burner, _value);\r\n        return true;\r\n    }\r\n\r\n    // \r\n    function isSoleout() public constant returns (bool) {\r\n        return (totalSupply >= INITIAL_SUPPLY);\r\n    }\r\n\r\n\r\n    modifier canMint() {\r\n        require(!isSoleout());\r\n        _;\r\n    } \r\n    \r\n    /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n    function mintB2BC(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\r\n        totalSupply = totalSupply.add(_amount);\r\n        balances[_to] = balances[_to].add(_amount);\r\n        Transfer(0x0, _to, _amount);\r\n        return true;\r\n    }\r\n}\r\n\r\n\r\n// Contract for B2BC Token sale\r\ncontract B2BCCrowdsale is Ownable{\r\n    using SafeMath for uint256;\r\n\r\n      // The token being sold\r\n      B2BCToken public b2bcToken;\r\n\r\n      // start and end timestamps where investments are allowed (both inclusive)\r\n      uint256 public startTime;\r\n      uint256 public endTime;\r\n      \r\n\r\n      uint256 internal constant baseExchangeRate =  2000 ;  //2000 B2BC Tokens per 1 ETH\r\n      uint256 internal constant earlyExchangeRate = 2300 ;  //2300 B2BC Tokens per 1 ETH\r\n      uint256 internal constant vipExchangeRate =   2900 ;  //2900 B2BC Tokens per 1 ETH\r\n      uint256 internal constant vcExchangeRate  =   3000 ;  //3000 B2BC Tokens per 1 ETH\r\n      uint8   internal constant  DaysForEarlyDay = 11;\r\n      uint256 internal constant vipThrehold = 1000 * (10**18);\r\n           \r\n      // amount of eth crowded in wei\r\n      uint256 public weiCrowded;\r\n      event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n\r\n      //constructor\r\n      function B2BCCrowdsale() {          \r\n            owner = 0xeedA60D0C81836747f684cE48d53137d08392448;\r\n            b2bcToken = new B2BCToken(owner); \r\n      }\r\n\r\n      function setStartEndTime(uint256 _startTime, uint256 _endTime) onlyOwner{\r\n            require(_startTime >= now);\r\n            require(_endTime >= _startTime);\r\n            startTime = _startTime;\r\n            endTime = _endTime;\r\n      }\r\n      // fallback function can be used to buy tokens\r\n      function () payable {\r\n          buyTokens(msg.sender);\r\n      }\r\n\r\n      // low level token purchase function\r\n      function buyTokens(address beneficiary) public payable {\r\n            require(beneficiary != 0x0);\r\n            require(validPurchase());\r\n\r\n            uint256 weiAmount = msg.value;\r\n            weiCrowded = weiCrowded.add(weiAmount);\r\n\r\n            \r\n            // calculate token amount to be created\r\n            uint256 rRate = rewardRate();\r\n            uint256 rewardB2BC = weiAmount.mul(rRate);\r\n            uint256 baseB2BC = weiAmount.mul(baseExchangeRate);\r\n           \r\n            // the rewardB2BC lock in 3 mounthes\r\n            if(rRate > baseExchangeRate) {\r\n                b2bcToken.mintB2BC(beneficiary, rewardB2BC);  \r\n                TokenPurchase(msg.sender, beneficiary, weiAmount, rewardB2BC);\r\n            } else {\r\n                b2bcToken.mintB2BC(beneficiary, baseB2BC);  \r\n                TokenPurchase(msg.sender, beneficiary, weiAmount, baseB2BC);\r\n            }\r\n\r\n            forwardFunds();           \r\n      }\r\n\r\n      /**\r\n       * reward rate for purchase\r\n       */\r\n      function rewardRate() internal constant returns (uint256) {\r\n            uint256 rate = baseExchangeRate;\r\n            if (now < startTime) {\r\n                rate = vcExchangeRate;\r\n            } else {\r\n                uint crowdIndex = (now - startTime) / (24 * 60 * 60); \r\n                if (crowdIndex < DaysForEarlyDay) {\r\n                    rate = earlyExchangeRate;\r\n                } else {\r\n                    rate = baseExchangeRate;\r\n                }\r\n\r\n                //vip\r\n                if (msg.value >= vipThrehold) {\r\n                    rate = vipExchangeRate;\r\n                }\r\n            }\r\n            return rate;\r\n      }\r\n\r\n      // send ether to the fund collection wallet\r\n      function forwardFunds() internal {\r\n            owner.transfer(msg.value);\r\n      }\r\n\r\n      // @return true if the transaction can buy tokens\r\n      function validPurchase() internal constant returns (bool) {\r\n            bool nonZeroPurchase = msg.value != 0;\r\n            bool noEnd = !hasEnded();\r\n            return  nonZeroPurchase && noEnd;\r\n      }\r\n\r\n      // @return true if crowdsale event has ended\r\n      function hasEnded() public constant returns (bool) {\r\n            return (now > endTime) || b2bcToken.isSoleout(); \r\n      }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_startTime\",\"type\":\"uint256\"},{\"name\":\"_endTime\",\"type\":\"uint256\"}],\"name\":\"setStartEndTime\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"b2bcToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiCrowded\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"B2BCCrowdsale","CompilerVersion":"v0.4.15+commit.bbb8e64f","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://891e7f85b823d1a31f3bae8ba709f797526fbc0afda62104d1015ab499d2f825"}]}