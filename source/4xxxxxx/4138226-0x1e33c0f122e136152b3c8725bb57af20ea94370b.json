{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13;\r\n\r\n\r\n/**\r\n * Math operations with safety checks\r\n */\r\nlibrary SafeMath {\r\n\r\n  function mul(uint a, uint b) internal returns (uint) {\r\n    uint c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint a, uint b) internal returns (uint) {\r\n    return a / b;\r\n  }\r\n\r\n  function sub(uint a, uint b) internal returns (uint) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint a, uint b) internal returns (uint) {\r\n    uint c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n\r\n  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n    return a < b ? a : b;\r\n  }\r\n\r\n  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    return a < b ? a : b;\r\n  }\r\n\r\n  function assertTrue(bool val) internal {\r\n    assert(val);\r\n  }\r\n\r\n  function assertFalse(bool val) internal {\r\n    assert(!val);\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * ERC20Basic\r\n * Simpler version of ERC20 interface\r\n * see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20Basic {\r\n  uint public totalSupply;\r\n  function balanceOf(address who) constant returns (uint);\r\n  function transfer(address to, uint value);\r\n  event Transfer(address indexed from, address indexed to, uint value);\r\n}\r\n\r\n\r\n/**\r\n * ERC20 interface\r\n * see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) constant returns (uint);\r\n  function transferFrom(address from, address to, uint value);\r\n  function approve(address spender, uint value);\r\n  event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\n\r\n/**\r\n * Basic token.\r\n * Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint;\r\n\r\n  mapping (address => uint) balances;\r\n\r\n  /**\r\n   * Fix for the ERC20 short address attack.\r\n   */\r\n  modifier onlyPayloadSize(uint size) {\r\n     if (msg.data.length < size + 4) {\r\n       revert();\r\n     }\r\n     _;\r\n  }\r\n\r\n  /**\r\n  * transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint _value) onlyPayloadSize(2 * 32) {\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n  }\r\n\r\n  /**\r\n  * Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) constant returns (uint balance) {\r\n    return balances[_owner];\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * Standard ERC20 token\r\n *\r\n * Implemantation of the basic standard token.\r\n * https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract StandardToken is BasicToken, ERC20 {\r\n\r\n  mapping (address => mapping (address => uint)) allowed;\r\n\r\n  /**\r\n   * Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint the amout of tokens to be transfered\r\n   */\r\n  function transferFrom(address _from, address _to, uint _value) onlyPayloadSize(3 * 32) {\r\n    var _allowance = allowed[_from][msg.sender];\r\n    balances[_to] = balances[_to].add(_value);\r\n    balances[_from] = balances[_from].sub(_value);\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    Transfer(_from, _to, _value);\r\n  }\r\n\r\n  /**\r\n   * Aprove the passed address to spend the specified amount of tokens on beahlf of msg.sender.\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint _value) {\r\n    // To change the approve amount you first have to reduce the addresses`\r\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n    //  already 0 to mitigate the race condition described here:\r\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    if ((_value != 0) && (allowed[msg.sender][_spender] != 0)) revert();\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n  }\r\n\r\n  /**\r\n   * Function to check the amount of tokens than an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint specifing the amount of tokens still avaible for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) constant returns (uint remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n}\r\n\r\n/**\r\n * Controller interface.\r\n */\r\ncontract Controller {\r\n\r\n  /**\r\n   * Called to determine if the token allows proxy payments.\r\n   *\r\n   * @param _owner The address that sent ether to the token contract\r\n   * @return True if the ether is accepted, false if it throws\r\n   */\r\n  function proxyPayment(address _owner) payable returns(bool);\r\n\r\n  /**\r\n   * Called to determine if the controller approves a token transfer.\r\n   *\r\n   * @param _from The origin of the transfer\r\n   * @param _to The destination of the transfer\r\n   * @param _amount The amount of the transfer\r\n   * @return False if the controller does not authorize the transfer\r\n   */\r\n  function onTransfer(address _from, address _to, uint _amount) returns(bool);\r\n\r\n  /**\r\n   * Called to notify the controller of a transfer approval.\r\n   *\r\n   * @param _owner The address that calls `approve()`\r\n   * @param _spender The spender in the `approve()` call\r\n   * @param _amount The amount in the `approve()` call\r\n   * @return False if the controller does not authorize the approval\r\n   */\r\n  function onApprove(address _owner, address _spender, uint _amount) returns(bool);\r\n}\r\n\r\n\r\n/**\r\n * Controlled.\r\n */\r\ncontract Controlled {\r\n\r\n  address public controller;\r\n\r\n  function Controlled() {\r\n    controller = msg.sender;\r\n  }\r\n\r\n  function changeController(address _controller) onlyController {\r\n    controller = _controller;\r\n  }\r\n\r\n  modifier onlyController {\r\n    if (msg.sender != controller) revert();\r\n    _;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * A trait that allows any token owner to decrease the token supply.\r\n *\r\n * We add a Burned event to differentiate from normal transfers.\r\n * However, we still try to support some legacy Ethereum ecosystem,\r\n * as ERC-20 has not standardized on the burn event yet.\r\n */\r\ncontract BurnableToken is StandardToken {\r\n\r\n  address public constant BURN_ADDRESS = 0;\r\n\r\n  event Burned(address burner, uint burnedAmount);\r\n\r\n  /**\r\n   * Burn extra tokens from a balance.\r\n   *\r\n   * Keeps token balance tracking services happy by sending the burned\r\n   * amount to BURN_ADDRESS, so that it will show up as a ERC-20 transaction\r\n   * in etherscan, etc. as there is no standardized burn event yet.\r\n   *\r\n   * @param burnAmount The amount of tokens to burn\r\n   */\r\n  function burn(uint burnAmount) {\r\n    address burner = msg.sender;\r\n    balances[burner] = balances[burner].sub(burnAmount);\r\n    totalSupply = totalSupply.sub(burnAmount);\r\n\r\n    Burned(burner, burnAmount);\r\n    Transfer(burner, BURN_ADDRESS, burnAmount);\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * Mintable token.\r\n *\r\n * Simple ERC20 Token example, with mintable token creation\r\n */\r\ncontract MintableToken is StandardToken, Controlled {\r\n\r\n  event Mint(address indexed to, uint value);\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n  uint public totalSupply = 0;\r\n\r\n  /**\r\n   * Function to mint tokens\r\n   * @param _to The address that will recieve the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(address _to, uint _amount) onlyController canMint returns (bool) {\r\n    totalSupply = totalSupply.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    Mint(_to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() onlyController returns (bool) {\r\n    mintingFinished = true;\r\n    MintFinished();\r\n    return true;\r\n  }\r\n\r\n  modifier canMint() {\r\n    if (mintingFinished) revert();\r\n    _;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * LimitedTransferToken\r\n *\r\n * LimitedTransferToken defines the generic interface and the implementation to limit token\r\n * transferability for different events. It is intended to be used as a base class for other token\r\n * contracts.\r\n * LimitedTransferToken has been designed to allow for different limiting factors,\r\n * this can be achieved by recursively calling super.transferableTokens() until the base class is\r\n * hit. For example:\r\n *     function transferableTokens(address holder, uint64 time) constant public returns (uint256) {\r\n *       return min256(unlockedTokens, super.transferableTokens(holder, time));\r\n *     }\r\n * A working example is VestedToken.sol:\r\n */\r\ncontract LimitedTransferToken is ERC20 {\r\n\r\n  /**\r\n   * Checks whether it can transfer or otherwise throws\r\n   */\r\n  modifier canTransfer(address _sender, uint _value) {\r\n    if (_value > transferableTokens(_sender, uint64(now))) revert();\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * Checks modifier and allows transfer if tokens are not locked.\r\n   *\r\n   * @param _to The address that will recieve the tokens\r\n   * @param _value The amount of tokens to be transferred\r\n   */\r\n  function transfer(address _to, uint _value) canTransfer(msg.sender, _value) {\r\n    super.transfer(_to, _value);\r\n  }\r\n\r\n /**\r\n  * Checks modifier and allows transfer if tokens are not locked.\r\n  *\r\n  * @param _from The address that will send the tokens\r\n  * @param _to The address that will receive the tokens\r\n  * @param _value The amount of tokens to be transferred\r\n  */\r\n  function transferFrom(address _from, address _to, uint _value) canTransfer(_from, _value) {\r\n    super.transferFrom(_from, _to, _value);\r\n  }\r\n\r\n  /**\r\n   * Default transferable tokens function returns all tokens for a holder (no limit).\r\n   *\r\n   * Overriding transferableTokens(address holder, uint64 time) is the way to provide the\r\n   * specific logic for limiting token transferability for a holder over time.\r\n   *\r\n   * @param holder The address of the token holder\r\n   */\r\n  function transferableTokens(address holder, uint64 /* time */) constant public returns (uint256) {\r\n    return balanceOf(holder);\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * Upgrade agent interface.\r\n *\r\n * Upgrade agent transfers tokens to a new contract. The upgrade agent itself\r\n * can be the token contract, or just an intermediary contract doing the heavy lifting.\r\n */\r\ncontract UpgradeAgent {\r\n\r\n  uint public originalSupply;\r\n\r\n  function isUpgradeAgent() public constant returns (bool) {\r\n    return true;\r\n  }\r\n\r\n  function upgradeFrom(address _from, uint256 _value) public;\r\n}\r\n\r\n\r\n/**\r\n * A token upgrade mechanism where users can opt-in amount of tokens\r\n * to the next smart contract revision.\r\n *\r\n */\r\ncontract UpgradeableToken is StandardToken {\r\n\r\n  /** Contract/actor who can set the upgrade path. */\r\n  address public upgradeController;\r\n\r\n  /** Designated upgrade agent responsible for completing the upgrade. */\r\n  UpgradeAgent public upgradeAgent;\r\n\r\n  /** Number of tokens upgraded to date. */\r\n  uint256 public totalUpgraded;\r\n\r\n  /**\r\n   * Upgrade states:\r\n   *\r\n   * - NotAllowed: the child contract has not reached a condition where the upgrade can begin\r\n   * - WaitingForAgent: token allows upgrade, but we don't have a new agent yet\r\n   * - ReadyToUpgrade: the agent is set, but not a single token has been upgraded yet\r\n   * - Upgrading: upgrade agent is set and the balance holders can upgrade their tokens\r\n   *\r\n   */\r\n  enum UpgradeState {Unknown, NotAllowed, WaitingForAgent, ReadyToUpgrade, Upgrading}\r\n\r\n  /**\r\n   * Emitted when a token holder upgrades some portion of token holdings.\r\n   */\r\n  event Upgrade(address indexed from, address indexed to, uint256 value);\r\n\r\n  /**\r\n   * New upgrade agent has been set.\r\n   */\r\n  event UpgradeAgentSet(address agent);\r\n\r\n  /**\r\n   * Do not allow construction without upgrade controller.\r\n   */\r\n  function UpgradeableToken(address _upgradeController) {\r\n    upgradeController = _upgradeController;\r\n  }\r\n\r\n  /**\r\n   * Allow the token holder to upgrade some of their tokens to a new contract.\r\n   */\r\n  function upgrade(uint256 value) public {\r\n      UpgradeState state = getUpgradeState();\r\n      if (!(state == UpgradeState.ReadyToUpgrade || state == UpgradeState.Upgrading)) {\r\n        revert(); // called in an invalid state\r\n      }\r\n\r\n      if (value == 0) revert(); // validate input value\r\n\r\n      balances[msg.sender] = balances[msg.sender].sub(value);\r\n\r\n      // Take tokens out from circulation\r\n      totalSupply = totalSupply.sub(value);\r\n      totalUpgraded = totalUpgraded.add(value);\r\n\r\n      // Upgrade agent reissues the tokens\r\n      upgradeAgent.upgradeFrom(msg.sender, value);\r\n      Upgrade(msg.sender, upgradeAgent, value);\r\n  }\r\n\r\n  /**\r\n   * Set an upgrade agent that can handle.\r\n   */\r\n  function setUpgradeAgent(address agent) external {\r\n      if (!canUpgrade()) {\r\n        revert();\r\n      }\r\n\r\n      if (agent == 0x0) revert();\r\n      if (msg.sender != upgradeController) revert(); // only upgrade controller can designate the next agent\r\n      if (getUpgradeState() == UpgradeState.Upgrading) revert(); // upgrade has already started for an agent\r\n\r\n      upgradeAgent = UpgradeAgent(agent);\r\n\r\n      if (!upgradeAgent.isUpgradeAgent()) revert(); // bad interface\r\n      if (upgradeAgent.originalSupply() != totalSupply) revert(); // ensure that token supplies match in source and target\r\n\r\n      UpgradeAgentSet(upgradeAgent);\r\n  }\r\n\r\n  /**\r\n   * Get the state of the token upgrade.\r\n   */\r\n  function getUpgradeState() public constant returns(UpgradeState) {\r\n    if (!canUpgrade()) return UpgradeState.NotAllowed;\r\n    else if (address(upgradeAgent) == 0x0) return UpgradeState.WaitingForAgent;\r\n    else if (totalUpgraded == 0) return UpgradeState.ReadyToUpgrade;\r\n    else return UpgradeState.Upgrading;\r\n  }\r\n\r\n  /**\r\n   * Change the upgrade controller.\r\n   *\r\n   * This allows us to set a new owner for the upgrade mechanism.\r\n   */\r\n  function setUpgradeController(address controller) public {\r\n      if (controller == 0x0) revert();\r\n      if (msg.sender != upgradeController) revert();\r\n      upgradeController = controller;\r\n  }\r\n\r\n  /**\r\n   * Child contract can override to condition enable upgrade path.\r\n   */\r\n  function canUpgrade() public constant returns(bool) {\r\n     return true;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * Vested token.\r\n *\r\n * Tokens that can be vested for a group of addresses.\r\n */\r\ncontract VestedToken is StandardToken, LimitedTransferToken {\r\n\r\n  uint256 MAX_GRANTS_PER_ADDRESS = 20;\r\n\r\n  struct TokenGrant {\r\n    address granter;     // 20 bytes\r\n    uint256 value;       // 32 bytes\r\n    uint64 cliff;\r\n    uint64 vesting;\r\n    uint64 start;        // 3 * 8 = 24 bytes\r\n    bool revokable;\r\n    bool burnsOnRevoke;  // 2 * 1 = 2 bits? or 2 bytes?\r\n  } // total 78 bytes = 3 sstore per operation (32 per sstore)\r\n\r\n  mapping (address => TokenGrant[]) public grants;\r\n\r\n  event NewTokenGrant(address indexed from, address indexed to, uint256 value, uint256 grantId);\r\n\r\n  /**\r\n   * Grant tokens to a specified address.\r\n   *\r\n   * @param _to address The address which the tokens will be granted to.\r\n   * @param _value uint256 The amount of tokens to be granted.\r\n   * @param _start uint64 Time of the beginning of the grant.\r\n   * @param _cliff uint64 Time of the cliff period.\r\n   * @param _vesting uint64 The vesting period.\r\n   * @param _revokable bool If the grant is revokable.\r\n   * @param _burnsOnRevoke bool When true, the tokens are burned if revoked.\r\n   */\r\n  function grantVestedTokens(\r\n    address _to,\r\n    uint256 _value,\r\n    uint64 _start,\r\n    uint64 _cliff,\r\n    uint64 _vesting,\r\n    bool _revokable,\r\n    bool _burnsOnRevoke\r\n  ) public {\r\n\r\n    // Check for date inconsistencies that may cause unexpected behavior\r\n    if (_cliff < _start || _vesting < _cliff) {\r\n      revert();\r\n    }\r\n\r\n    if (tokenGrantsCount(_to) > MAX_GRANTS_PER_ADDRESS) revert();  // To prevent a user being spammed and have his balance\r\n                                                                // locked (out of gas attack when calculating vesting).\r\n\r\n    uint count = grants[_to].push(\r\n                TokenGrant(\r\n                  _revokable ? msg.sender : 0,  // avoid storing an extra 20 bytes when it is non-revokable\r\n                  _value,\r\n                  _cliff,\r\n                  _vesting,\r\n                  _start,\r\n                  _revokable,\r\n                  _burnsOnRevoke\r\n                )\r\n              );\r\n    transfer(_to, _value);\r\n    NewTokenGrant(msg.sender, _to, _value, count - 1);\r\n  }\r\n\r\n  /**\r\n   * Revoke the grant of tokens of a specified address.\r\n   *\r\n   * @param _holder The address which will have its tokens revoked\r\n   * @param _grantId The id of the token grant\r\n   */\r\n  function revokeTokenGrant(address _holder, uint _grantId) public {\r\n    TokenGrant storage grant = grants[_holder][_grantId];\r\n\r\n    if (!grant.revokable) { // check if grant is revokable\r\n      revert();\r\n    }\r\n\r\n    if (grant.granter != msg.sender) { // only granter to revoke the grant\r\n      revert();\r\n    }\r\n\r\n    address receiver = grant.burnsOnRevoke ? 0x0 : msg.sender;\r\n    uint256 nonVested = nonVestedTokens(grant, uint64(now));\r\n\r\n    // remove grant from array\r\n    delete grants[_holder][_grantId];\r\n    grants[_holder][_grantId] = grants[_holder][grants[_holder].length.sub(1)];\r\n    grants[_holder].length -= 1;\r\n\r\n    balances[receiver] = balances[receiver].add(nonVested);\r\n    balances[_holder] = balances[_holder].sub(nonVested);\r\n\r\n    Transfer(_holder, receiver, nonVested);\r\n  }\r\n\r\n  /**\r\n   * Calculate the total amount of transferable tokens of a holder at a given time.\r\n   *\r\n   * @param holder address The address of the holder\r\n   * @param time uint64 The specific time\r\n   * @return An uint representing a holder's total amount of transferable tokens\r\n   */\r\n  function transferableTokens(address holder, uint64 time) constant public returns (uint256) {\r\n    uint256 grantIndex = tokenGrantsCount(holder);\r\n    if (grantIndex == 0) return balanceOf(holder); // shortcut for holder without grants\r\n\r\n    // Iterate through all the grants the holder has, and add all non-vested tokens\r\n    uint256 nonVested = 0;\r\n    for (uint256 i = 0; i < grantIndex; i++) {\r\n      nonVested = nonVested.add(nonVestedTokens(grants[holder][i], time));\r\n    }\r\n\r\n    // Balance - totalNonVested is the amount of tokens a holder can transfer at any given time\r\n    uint256 vestedTransferable = balanceOf(holder).sub(nonVested);\r\n\r\n    // Return the minimum of how many vested can transfer and other value\r\n    // in case there are other limiting transferability factors (default is balanceOf)\r\n    return SafeMath.min256(vestedTransferable, super.transferableTokens(holder, time));\r\n  }\r\n\r\n  /**\r\n   * Check the amount of grants that an address has.\r\n   *\r\n   * @param _holder The holder of the grants\r\n   * @return A uint representing the total amount of grants\r\n   */\r\n  function tokenGrantsCount(address _holder) constant returns (uint index) {\r\n    return grants[_holder].length;\r\n  }\r\n\r\n  /**\r\n   * Calculate amount of vested tokens at a specific time.\r\n   *\r\n   * @param tokens uint256 The amount of tokens granted\r\n   * @param time uint64 The time to be checked\r\n   * @param start uint64 A time representing the beginning of the grant\r\n   * @param cliff uint64 The cliff period\r\n   * @param vesting uint64 The vesting period\r\n   * @return An uint representing the amount of vested tokens from a specific grant\r\n   *  transferableTokens\r\n   *   |                         _/--------   vestedTokens rect\r\n   *   |                       _/\r\n   *   |                     _/\r\n   *   |                   _/\r\n   *   |                 _/\r\n   *   |                /\r\n   *   |              .|\r\n   *   |            .  |\r\n   *   |          .    |\r\n   *   |        .      |\r\n   *   |      .        |(grants[_holder] == address(0)) return 0;\r\n   *   |    .          |\r\n   *   +===+===========+---------+----------> time\r\n   *      Start       Clift    Vesting\r\n   */\r\n  function calculateVestedTokens(uint256 tokens, uint256 time, uint256 start, uint256 cliff, uint256 vesting) constant returns (uint256) {\r\n      // Shortcuts for before cliff and after vesting cases.\r\n      if (time < cliff) return 0;\r\n      if (time >= vesting) return tokens;\r\n\r\n      // Interpolate all vested tokens.\r\n      // As before cliff the shortcut returns 0, we can use just calculate a value\r\n      // in the vesting rect (as shown in above's figure)\r\n\r\n      uint vestedTokens = tokens.mul(time.sub(start)).div(vesting.sub(start));\r\n      return vestedTokens;\r\n  }\r\n\r\n  /**\r\n   * Get all information about a specifc grant.\r\n   *\r\n   * @param _holder The address which will have its tokens revoked.\r\n   * @param _grantId The id of the token grant.\r\n   * @return Returns all the values that represent a TokenGrant(address, value, start, cliff,\r\n   *         revokability, burnsOnRevoke, and vesting) plus the vested value at the current time.\r\n   */\r\n  function tokenGrant(address _holder, uint _grantId) constant returns (address granter, uint256 value, uint256 vested, uint64 start, uint64 cliff, uint64 vesting, bool revokable, bool burnsOnRevoke) {\r\n    TokenGrant storage grant = grants[_holder][_grantId];\r\n\r\n    granter = grant.granter;\r\n    value = grant.value;\r\n    start = grant.start;\r\n    cliff = grant.cliff;\r\n    vesting = grant.vesting;\r\n    revokable = grant.revokable;\r\n    burnsOnRevoke = grant.burnsOnRevoke;\r\n\r\n    vested = vestedTokens(grant, uint64(now));\r\n  }\r\n\r\n  /**\r\n   * Get the amount of vested tokens at a specific time.\r\n   *\r\n   * @param grant TokenGrant The grant to be checked.\r\n   * @param time The time to be checked\r\n   * @return An uint representing the amount of vested tokens of a specific grant at a specific time.\r\n   */\r\n  function vestedTokens(TokenGrant grant, uint64 time) private constant returns (uint256) {\r\n    return calculateVestedTokens(\r\n      grant.value,\r\n      uint256(time),\r\n      uint256(grant.start),\r\n      uint256(grant.cliff),\r\n      uint256(grant.vesting)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Calculate the amount of non vested tokens at a specific time.\r\n   *\r\n   * @param grant TokenGrant The grant to be checked.\r\n   * @param time uint64 The time to be checked\r\n   * @return An uint representing the amount of non vested tokens of a specifc grant on the\r\n   * passed time frame.\r\n   */\r\n  function nonVestedTokens(TokenGrant grant, uint64 time) private constant returns (uint256) {\r\n    return grant.value.sub(vestedTokens(grant, time));\r\n  }\r\n\r\n  /**\r\n   * Calculate the date when the holder can trasfer all its tokens\r\n   *\r\n   * @param holder address The address of the holder\r\n   * @return An uint representing the date of the last transferable tokens.\r\n   */\r\n  function lastTokenIsTransferableDate(address holder) constant public returns (uint64 date) {\r\n    date = uint64(now);\r\n    uint256 grantIndex = grants[holder].length;\r\n    for (uint256 i = 0; i < grantIndex; i++) {\r\n      date = SafeMath.max64(grants[holder][i].vesting, date);\r\n    }\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * Provide (PRVD) token contract.\r\n */\r\ncontract ProvideToken is BurnableToken, MintableToken, VestedToken, UpgradeableToken {\r\n\r\n  string public constant name = 'Provide';\r\n  string public constant symbol = 'PRVD';\r\n  uint public constant decimals = 8;\r\n\r\n  function ProvideToken()  UpgradeableToken(msg.sender) { }\r\n\r\n  function() public payable {\r\n    if (isContract(controller)) {\r\n      if (!Controller(controller).proxyPayment.value(msg.value)(msg.sender)) revert();\r\n    } else {\r\n      revert();\r\n    }\r\n  }\r\n\r\n  function isContract(address _addr) constant internal returns(bool) {\r\n    uint size;\r\n    if (_addr == address(0)) return false;\r\n    assembly {\r\n      size := extcodesize(_addr)\r\n    }\r\n    return size > 0;\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_holder\",\"type\":\"address\"}],\"name\":\"tokenGrantsCount\",\"outputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"controller\",\"type\":\"address\"}],\"name\":\"setUpgradeController\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"grants\",\"outputs\":[{\"name\":\"granter\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"cliff\",\"type\":\"uint64\"},{\"name\":\"vesting\",\"type\":\"uint64\"},{\"name\":\"start\",\"type\":\"uint64\"},{\"name\":\"revokable\",\"type\":\"bool\"},{\"name\":\"burnsOnRevoke\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"changeController\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"burnAmount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"upgrade\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"upgradeAgent\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_holder\",\"type\":\"address\"},{\"name\":\"_grantId\",\"type\":\"uint256\"}],\"name\":\"tokenGrant\",\"outputs\":[{\"name\":\"granter\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"vested\",\"type\":\"uint256\"},{\"name\":\"start\",\"type\":\"uint64\"},{\"name\":\"cliff\",\"type\":\"uint64\"},{\"name\":\"vesting\",\"type\":\"uint64\"},{\"name\":\"revokable\",\"type\":\"bool\"},{\"name\":\"burnsOnRevoke\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"lastTokenIsTransferableDate\",\"outputs\":[{\"name\":\"date\",\"type\":\"uint64\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getUpgradeState\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"upgradeController\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canUpgrade\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_start\",\"type\":\"uint64\"},{\"name\":\"_cliff\",\"type\":\"uint64\"},{\"name\":\"_vesting\",\"type\":\"uint64\"},{\"name\":\"_revokable\",\"type\":\"bool\"},{\"name\":\"_burnsOnRevoke\",\"type\":\"bool\"}],\"name\":\"grantVestedTokens\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalUpgraded\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"holder\",\"type\":\"address\"},{\"name\":\"time\",\"type\":\"uint64\"}],\"name\":\"transferableTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"agent\",\"type\":\"address\"}],\"name\":\"setUpgradeAgent\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokens\",\"type\":\"uint256\"},{\"name\":\"time\",\"type\":\"uint256\"},{\"name\":\"start\",\"type\":\"uint256\"},{\"name\":\"cliff\",\"type\":\"uint256\"},{\"name\":\"vesting\",\"type\":\"uint256\"}],\"name\":\"calculateVestedTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_holder\",\"type\":\"address\"},{\"name\":\"_grantId\",\"type\":\"uint256\"}],\"name\":\"revokeTokenGrant\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BURN_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Upgrade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"agent\",\"type\":\"address\"}],\"name\":\"UpgradeAgentSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"grantId\",\"type\":\"uint256\"}],\"name\":\"NewTokenGrant\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"burnedAmount\",\"type\":\"uint256\"}],\"name\":\"Burned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"ProvideToken","CompilerVersion":"v0.4.13+commit.fb4cb1a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://647a44d70f10b0501747e17ced2c1a88ccccc6cfc5f4d543a7cf726fe80fb028"}]}