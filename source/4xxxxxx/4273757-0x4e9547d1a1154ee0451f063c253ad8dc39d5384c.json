{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) constant returns (uint256);\r\n  function transfer(address to, uint256 value) returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances. \r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) returns (bool) {\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of. \r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) returns (bool);\r\n  function approve(address spender, uint256 value) returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amout of tokens to be transfered\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\r\n    var _allowance = allowed[_from][msg.sender];\r\n\r\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n    // require (_value <= _allowance);\r\n\r\n    balances[_to] = balances[_to].add(_value);\r\n    balances[_from] = balances[_from].sub(_value);\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) returns (bool) {\r\n\r\n    // To change the approve amount you first have to reduce the addresses`\r\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n    //  already 0 to mitigate the race condition described here:\r\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifing the amount of tokens still avaible for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n}\r\n\r\n\r\n// Migration Agent interface\r\ncontract MigrationAgent {\r\n    function migrateFrom(address _from, uint _value);\r\n}\r\n\r\ncontract GVToken is StandardToken {\r\n    \r\n    // Constants\r\n    string public constant name = \"Genesis Vision Token\";\r\n    string public constant symbol = \"GVT\";\r\n    uint   public constant decimals = 18;\r\n    uint   constant TOKEN_LIMIT = 44 * 1e6 * 1e18; \r\n    \r\n    address public ico;\r\n\r\n    // GVT transfers are blocked until ICO is finished.\r\n    bool public isFrozen = true;\r\n\r\n    // Token migration variables\r\n    address public migrationMaster;\r\n    address public migrationAgent;\r\n    uint public totalMigrated;\r\n\r\n    event Migrate(address indexed _from, address indexed _to, uint _value);\r\n\r\n    // Constructor\r\n    function GVToken(address _ico, address _migrationMaster) {\r\n        require(_ico != 0);\r\n        require(_migrationMaster != 0);\r\n        ico = _ico;\r\n        migrationMaster = _migrationMaster;\r\n    }\r\n\r\n    // Create tokens\r\n    function mint(address holder, uint value) {\r\n        require(msg.sender == ico);\r\n        require(value > 0);\r\n        require(totalSupply + value <= TOKEN_LIMIT);\r\n\r\n        balances[holder] += value;\r\n        totalSupply += value;\r\n        Transfer(0x0, holder, value);\r\n    }\r\n\r\n    // Allow token transfer.\r\n    function unfreeze() {\r\n        require(msg.sender == ico);\r\n        isFrozen = false;\r\n    }\r\n\r\n    // ERC20 functions\r\n    // =========================\r\n\r\n    function transfer(address _to, uint _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(!isFrozen);\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint _value) public returns (bool) {\r\n        require(!isFrozen);\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n    function approve(address _spender, uint _value) public returns (bool) {\r\n        require(!isFrozen);\r\n        return super.approve(_spender, _value);\r\n    }\r\n\r\n    // Token migration\r\n    function migrate(uint value) external {\r\n        require(migrationAgent != 0);\r\n        require(value > 0);\r\n        require(value <= balances[msg.sender]);\r\n\r\n        balances[msg.sender] -= value;\r\n        totalSupply -= value;\r\n        totalMigrated += value;\r\n        MigrationAgent(migrationAgent).migrateFrom(msg.sender, value);\r\n        Migrate(msg.sender, migrationAgent, value);\r\n    }\r\n\r\n    // Set address of migration contract\r\n    function setMigrationAgent(address _agent) external {\r\n        require(migrationAgent == 0);\r\n        require(msg.sender == migrationMaster);\r\n        migrationAgent = _agent;\r\n    }\r\n\r\n    function setMigrationMaster(address _master) external {\r\n        require(msg.sender == migrationMaster);\r\n        require(_master != 0);\r\n        migrationMaster = _master;\r\n    }\r\n}\r\n\r\ncontract GVOptionToken is StandardToken {\r\n    \r\n    address public optionProgram;\r\n\r\n    string public name;\r\n    string public symbol;\r\n    uint   public constant decimals = 18;\r\n\r\n    uint TOKEN_LIMIT;\r\n\r\n    // Modifiers\r\n    modifier optionProgramOnly { require(msg.sender == optionProgram); _; }\r\n\r\n    // Constructor\r\n    function GVOptionToken(\r\n        address _optionProgram,\r\n        string _name,\r\n        string _symbol,\r\n        uint _TOKEN_LIMIT\r\n    ) {\r\n        require(_optionProgram != 0);        \r\n        optionProgram = _optionProgram;\r\n        name = _name;\r\n        symbol = _symbol;\r\n        TOKEN_LIMIT = _TOKEN_LIMIT;\r\n    }\r\n\r\n    // Create tokens\r\n    function buyOptions(address buyer, uint value) optionProgramOnly {\r\n        require(value > 0);\r\n        require(totalSupply + value <= TOKEN_LIMIT);\r\n\r\n        balances[buyer] += value;\r\n        totalSupply += value;\r\n        Transfer(0x0, buyer, value);\r\n    }\r\n    \r\n    function remainingTokensCount() returns(uint) {\r\n        return TOKEN_LIMIT - totalSupply;\r\n    }\r\n    \r\n    // Burn option tokens after execution during ICO\r\n    function executeOption(address addr, uint optionsCount) \r\n        optionProgramOnly\r\n        returns (uint) {\r\n        if (balances[addr] < optionsCount) {\r\n            optionsCount = balances[addr];\r\n        }\r\n        if (optionsCount == 0) {\r\n            return 0;\r\n        }\r\n\r\n        balances[addr] -= optionsCount;\r\n        totalSupply -= optionsCount;\r\n\r\n        return optionsCount;\r\n    }\r\n}\r\n\r\ncontract GVOptionProgram {\r\n\r\n    // Constants\r\n    uint constant option30perCent = 26 * 1e16; // GVOT30 tokens per usd cent during option purchase \r\n    uint constant option20perCent = 24 * 1e16; // GVOT20 tokens per usd cent during option purchase\r\n    uint constant option10perCent = 22 * 1e16; // GVOT10 tokens per usd cent during option purchase\r\n    uint constant token30perCent  = 13684210526315800;  // GVT tokens per usd cent during execution of GVOT30\r\n    uint constant token20perCent  = 12631578947368500;  // GVT tokens per usd cent during execution of GVOT20\r\n    uint constant token10perCent  = 11578947368421100;  // GVT tokens per usd cent during execution of GVOT10\r\n\r\n    string public constant option30name = \"30% GVOT\";\r\n    string public constant option20name = \"20% GVOT\";\r\n    string public constant option10name = \"10% GVOT\";\r\n\r\n    string public constant option30symbol = \"GVOT30\";\r\n    string public constant option20symbol = \"GVOT20\";\r\n    string public constant option10symbol = \"GVOT10\";\r\n\r\n    uint constant option30_TOKEN_LIMIT = 26 * 1e5 * 1e18;\r\n    uint constant option20_TOKEN_LIMIT = 36 * 1e5 * 1e18;\r\n    uint constant option10_TOKEN_LIMIT = 55 * 1e5 * 1e18;\r\n\r\n    // Events\r\n    event BuyOptions(address buyer, uint amount, string tx, uint8 optionType);\r\n    event ExecuteOptions(address buyer, uint amount, string tx, uint8 optionType);\r\n\r\n    // State variables\r\n    address public gvAgent; // payments bot account\r\n    address public team;    // team account\r\n    address public ico;     \r\n\r\n    GVOptionToken public gvOptionToken30;\r\n    GVOptionToken public gvOptionToken20;\r\n    GVOptionToken public gvOptionToken10;\r\n\r\n    // Modifiers\r\n    modifier icoOnly { require(msg.sender == ico); _; }\r\n    \r\n    // Constructor\r\n    function GVOptionProgram(address _ico, address _gvAgent, address _team) {\r\n        gvOptionToken30 = new GVOptionToken(this, option30name, option30symbol, option30_TOKEN_LIMIT);\r\n        gvOptionToken20 = new GVOptionToken(this, option20name, option20symbol, option20_TOKEN_LIMIT);\r\n        gvOptionToken10 = new GVOptionToken(this, option10name, option10symbol, option10_TOKEN_LIMIT);\r\n        gvAgent = _gvAgent;\r\n        team = _team;\r\n        ico = _ico;\r\n    }\r\n\r\n    // Get remaining tokens for all types of option tokens\r\n    function getBalance() public returns (uint, uint, uint) {\r\n        return (gvOptionToken30.remainingTokensCount(), gvOptionToken20.remainingTokensCount(), gvOptionToken10.remainingTokensCount());\r\n    }\r\n\r\n    // Execute options during the ICO token purchase. Priority: GVOT30 -> GVOT20 -> GVOT10\r\n    function executeOptions(address buyer, uint usdCents, string txHash) icoOnly\r\n        returns (uint executedTokens, uint remainingCents) {\r\n        require(usdCents > 0);\r\n\r\n        (executedTokens, remainingCents) = executeIfAvailable(buyer, usdCents, txHash, gvOptionToken30, 0, token30perCent);\r\n        if (remainingCents == 0) {\r\n            return (executedTokens, 0);\r\n        }\r\n\r\n        uint executed20;\r\n        (executed20, remainingCents) = executeIfAvailable(buyer, remainingCents, txHash, gvOptionToken20, 1, token20perCent);\r\n        if (remainingCents == 0) {\r\n            return (executedTokens + executed20, 0);\r\n        }\r\n\r\n        uint executed10;\r\n        (executed10, remainingCents) = executeIfAvailable(buyer, remainingCents, txHash, gvOptionToken10, 2, token10perCent);\r\n        \r\n        return (executedTokens + executed20 + executed10, remainingCents);\r\n    }\r\n\r\n    // Buy option tokens. Priority: GVOT30 -> GVOT20 -> GVOT10\r\n    function buyOptions(address buyer, uint usdCents, string txHash) icoOnly {\r\n        require(usdCents > 0);\r\n\r\n        var remainUsdCents = buyIfAvailable(buyer, usdCents, txHash, gvOptionToken30, 0, option30perCent);\r\n        if (remainUsdCents == 0) {\r\n            return;\r\n        }\r\n\r\n        remainUsdCents = buyIfAvailable(buyer, remainUsdCents, txHash, gvOptionToken20, 1, option20perCent);\r\n        if (remainUsdCents == 0) {\r\n            return;\r\n        }\r\n\r\n        remainUsdCents = buyIfAvailable(buyer, remainUsdCents, txHash, gvOptionToken10, 2, option10perCent);\r\n    }   \r\n\r\n    // Private functions\r\n    \r\n    function executeIfAvailable(address buyer, uint usdCents, string txHash,\r\n        GVOptionToken optionToken, uint8 optionType, uint optionPerCent)\r\n        private returns (uint executedTokens, uint remainingCents) {\r\n        \r\n        var optionsAmount = usdCents * optionPerCent;\r\n        executedTokens = optionToken.executeOption(buyer, optionsAmount);\r\n        remainingCents = usdCents - (executedTokens / optionPerCent);\r\n        if (executedTokens > 0) {\r\n            ExecuteOptions(buyer, executedTokens, txHash, optionType);\r\n        }\r\n        return (executedTokens, remainingCents);\r\n    }\r\n\r\n    function buyIfAvailable(address buyer, uint usdCents, string txHash,\r\n        GVOptionToken optionToken, uint8 optionType, uint optionsPerCent)\r\n        private returns (uint) {\r\n        \r\n        var availableTokens = optionToken.remainingTokensCount(); \r\n        if (availableTokens > 0) {\r\n            var tokens = usdCents * optionsPerCent;\r\n            if(availableTokens >= tokens) {\r\n                optionToken.buyOptions(buyer, tokens);\r\n                BuyOptions(buyer, tokens, txHash, optionType);\r\n                return 0;\r\n            }\r\n            else {\r\n                optionToken.buyOptions(buyer, availableTokens);\r\n                BuyOptions(buyer, availableTokens, txHash, optionType);\r\n                return usdCents - availableTokens / optionsPerCent;\r\n            }\r\n        }\r\n        return usdCents;\r\n    }\r\n}\r\n\r\ncontract Initable {\r\n    function init(address token);\r\n}\r\n\r\n// Crowdfunding code for Genesis Vision Project\r\ncontract ICO {\r\n\r\n    // Constants\r\n    uint public constant TOKENS_FOR_SALE = 33 * 1e6 * 1e18;\r\n\r\n    // Events\r\n    event StartOptionsSelling();\r\n    event StartICOForOptionsHolders();\r\n    event RunIco();\r\n    event PauseIco();\r\n    event ResumeIco();\r\n    event FinishIco();\r\n\r\n    event BuyTokens(address buyer, uint amount, string txHash);\r\n\r\n    address public gvAgent; // payments bot account\r\n    address public team;    // team account\r\n\r\n    GVToken public gvToken;\r\n    GVOptionProgram public optionProgram;\r\n    Initable public teamAllocator;\r\n    address public migrationMaster;\r\n\r\n    // Modifiers\r\n    modifier teamOnly { require(msg.sender == team); _; }\r\n    modifier gvAgentOnly { require(msg.sender == gvAgent); _; }\r\n\r\n    // Current total token supply\r\n    uint tokensSold = 0;\r\n\r\n    bool public isPaused = false;\r\n    enum IcoState { Created, RunningOptionsSelling, RunningForOptionsHolders, Running, Finished }\r\n    IcoState public icoState = IcoState.Created;\r\n\r\n    // Constructor\r\n    function ICO(address _team, address _gvAgent, address _migrationMaster, address _teamAllocator) {\r\n        gvAgent = _gvAgent;\r\n        team = _team;\r\n        teamAllocator = Initable(_teamAllocator);\r\n        migrationMaster = _migrationMaster;\r\n        gvToken = new GVToken(this, migrationMaster);\r\n    }\r\n\r\n    // Initialize Option Program contract\r\n    function initOptionProgram() external teamOnly {\r\n        if (optionProgram == address(0)) {\r\n            optionProgram = new GVOptionProgram(this, gvAgent, team);\r\n        }\r\n    }\r\n\r\n    // ICO and Option Program state management\r\n    function startOptionsSelling() external teamOnly {\r\n        require(icoState == IcoState.Created);\r\n        // Check if Option Program is initialized\r\n        require(optionProgram != address(0));    \r\n        icoState = IcoState.RunningOptionsSelling;\r\n        StartOptionsSelling();\r\n    }\r\n\r\n    // Finish options selling and start ICO for the option holders\r\n    function startIcoForOptionsHolders() external teamOnly {\r\n        require(icoState == IcoState.RunningOptionsSelling);       \r\n        icoState = IcoState.RunningForOptionsHolders;\r\n        StartICOForOptionsHolders();\r\n    }\r\n\r\n    function startIco() external teamOnly {\r\n        require(icoState == IcoState.RunningForOptionsHolders);\r\n        icoState = IcoState.Running;\r\n        RunIco();\r\n    }\r\n\r\n    function pauseIco() external teamOnly {\r\n        require(!isPaused);\r\n        require(icoState == IcoState.Running || icoState == IcoState.RunningForOptionsHolders || icoState == IcoState.RunningOptionsSelling);\r\n        isPaused = true;\r\n        PauseIco();\r\n    }\r\n\r\n    function resumeIco() external teamOnly {\r\n        require(isPaused);\r\n        require(icoState == IcoState.Running || icoState == IcoState.RunningForOptionsHolders || icoState == IcoState.RunningOptionsSelling);\r\n        isPaused = false;\r\n        ResumeIco();\r\n    }\r\n\r\n    function finishIco(address _fund, address _bounty) external teamOnly {\r\n        require(icoState == IcoState.Running);\r\n        icoState = IcoState.Finished;\r\n\r\n        uint mintedTokens = gvToken.totalSupply();\r\n        if (mintedTokens > 0) {\r\n            uint totalAmount = mintedTokens * 4 / 3;              // 75% of total tokens are for sale, get 100%\r\n            gvToken.mint(teamAllocator, 11 * totalAmount / 100);  // 11% for team to the time-locked wallet\r\n            gvToken.mint(_fund, totalAmount / 20);                // 5% for Genesis Vision fund\r\n            gvToken.mint(_bounty, 9 * totalAmount / 100);         // 9% for Advisers, Marketing, Bounty\r\n            gvToken.unfreeze();\r\n        }\r\n        \r\n        FinishIco();\r\n    }    \r\n\r\n    // Buy GVT without options\r\n    function buyTokens(address buyer, uint usdCents, string txHash)\r\n        external gvAgentOnly returns (uint) {\r\n        require(icoState == IcoState.Running);\r\n        require(!isPaused);\r\n        return buyTokensInternal(buyer, usdCents, txHash);\r\n    }\r\n\r\n    // Buy GVT for option holders. At first buy GVT with option execution, then buy GVT in regular way if ICO is running\r\n    function buyTokensByOptions(address buyer, uint usdCents, string txHash)\r\n        external gvAgentOnly returns (uint) {\r\n        require(!isPaused);\r\n        require(icoState == IcoState.Running || icoState == IcoState.RunningForOptionsHolders);\r\n        require(usdCents > 0);\r\n\r\n        uint executedTokens; \r\n        uint remainingCents;\r\n        // Execute options\r\n        (executedTokens, remainingCents) = optionProgram.executeOptions(buyer, usdCents, txHash);\r\n\r\n        if (executedTokens > 0) {\r\n            require(tokensSold + executedTokens <= TOKENS_FOR_SALE);\r\n            tokensSold += executedTokens;\r\n            \r\n            gvToken.mint(buyer, executedTokens);\r\n            BuyTokens(buyer, executedTokens, txHash);\r\n        }\r\n\r\n        //Buy GVT for remaining cents without options\r\n        if (icoState == IcoState.Running) {\r\n            return buyTokensInternal(buyer, remainingCents, txHash);\r\n        } else {\r\n            return remainingCents;\r\n        }\r\n    }\r\n\r\n    // Buy GVOT during the Option Program\r\n    function buyOptions(address buyer, uint usdCents, string txHash)\r\n        external gvAgentOnly {\r\n        require(!isPaused);\r\n        require(icoState == IcoState.RunningOptionsSelling);\r\n        optionProgram.buyOptions(buyer, usdCents, txHash);\r\n    }\r\n\r\n    // Internal buy GVT without options\r\n    function buyTokensInternal(address buyer, uint usdCents, string txHash)\r\n    private returns (uint) {\r\n        //ICO state is checked in external functions, which call this function        \r\n        require(usdCents > 0);\r\n        uint tokens = usdCents * 1e16;\r\n        require(tokensSold + tokens <= TOKENS_FOR_SALE);\r\n        tokensSold += tokens;\r\n            \r\n        gvToken.mint(buyer, tokens);\r\n        BuyTokens(buyer, tokens, txHash);\r\n\r\n        return 0;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"startIcoForOptionsHolders\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"buyer\",\"type\":\"address\"},{\"name\":\"usdCents\",\"type\":\"uint256\"},{\"name\":\"txHash\",\"type\":\"string\"}],\"name\":\"buyOptions\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fund\",\"type\":\"address\"},{\"name\":\"_bounty\",\"type\":\"address\"}],\"name\":\"finishIco\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoState\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamAllocator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"migrationMaster\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startOptionsSelling\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"resumeIco\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"team\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startIco\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"buyer\",\"type\":\"address\"},{\"name\":\"usdCents\",\"type\":\"uint256\"},{\"name\":\"txHash\",\"type\":\"string\"}],\"name\":\"buyTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"optionProgram\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isPaused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gvToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"buyer\",\"type\":\"address\"},{\"name\":\"usdCents\",\"type\":\"uint256\"},{\"name\":\"txHash\",\"type\":\"string\"}],\"name\":\"buyTokensByOptions\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pauseIco\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKENS_FOR_SALE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gvAgent\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"initOptionProgram\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_team\",\"type\":\"address\"},{\"name\":\"_gvAgent\",\"type\":\"address\"},{\"name\":\"_migrationMaster\",\"type\":\"address\"},{\"name\":\"_teamAllocator\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"StartOptionsSelling\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"StartICOForOptionsHolders\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"RunIco\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"PauseIco\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ResumeIco\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"FinishIco\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"txHash\",\"type\":\"string\"}],\"name\":\"BuyTokens\",\"type\":\"event\"}]","ContractName":"ICO","CompilerVersion":"v0.4.16+commit.d7661dd9","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000005e747502a1c426c1c217cacfa97b076ce06ab9d60000000000000000000000004ef3cc88299c075623734990baa272a2ed39939f000000000000000000000000b3b9adb05fd11db68ffcc036e3eb7ac476a17ee6000000000000000000000000ad41cd44884f0fa1968297743152bc9f572f1edb","Library":"","SwarmSource":"bzzr://2c49f12155be3664a0f335285a4c862a018889caefeeb2e5d2d980edfc29dec0"}]}