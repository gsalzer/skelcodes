{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.19;\r\n\r\n\r\ncontract DeusETH {\r\n    using SafeMath for uint256;\r\n\r\n    struct Citizen {\r\n        uint8 state; // 1 - living tokens, 0 - dead tokens\r\n        address holder;\r\n        uint8 branch;\r\n        bool isExist;\r\n    }\r\n\r\n    //max token supply\r\n    uint256 public cap = 50;\r\n\r\n    //2592000 - it is 1 month\r\n    uint256 public timeWithoutUpdate = 2592000;\r\n\r\n    //token price\r\n    uint256 public rate = 1 ether;\r\n\r\n    // amount of raised money in wei for FundsKeeper\r\n    uint256 public weiRaised;\r\n\r\n    // address where funds are collected\r\n    address public fundsKeeper;\r\n\r\n    //address of Episode Manager\r\n    address public episodeManager;\r\n    bool public managerSet = false;\r\n\r\n    address public owner;\r\n\r\n    bool public started = false;\r\n    bool public gameOver = false;\r\n    bool public gameOverByUser = false;\r\n\r\n    uint256 public totalSupply = 0;\r\n    uint256 public livingSupply = 0;\r\n\r\n    mapping(uint256 => Citizen) public citizens;\r\n\r\n    //using for userFinalize\r\n    uint256 public timestamp = 0;\r\n\r\n    event TokenState(uint256 indexed id, uint8 state);\r\n    event TokenHolder(uint256 indexed id, address holder);\r\n    event TokenBranch(uint256 indexed id, uint8 branch);\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    modifier onlyEpisodeManager() {\r\n        require(msg.sender == episodeManager);\r\n        _;\r\n    }\r\n\r\n    function DeusETH(address _fundsKeeper) public {\r\n        require(_fundsKeeper != address(0));\r\n        owner = msg.sender;\r\n        fundsKeeper = _fundsKeeper;\r\n        timestamp = now;\r\n    }\r\n\r\n    // fallback function not use to buy token\r\n    function () external payable {\r\n        revert();\r\n    }\r\n\r\n    function setEpisodeManager(address _episodeManager) public {\r\n        require(!managerSet);\r\n        episodeManager = _episodeManager;\r\n        managerSet = true;\r\n    }\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return totalSupply;\r\n    }\r\n\r\n    function livingSupply() public view returns (uint256) {\r\n        return livingSupply;\r\n    }\r\n\r\n    // low level token purchase function\r\n    function buyTokens(uint256 _id, address _holder) public payable {\r\n        require(!started);\r\n        require(!gameOver);\r\n        require(!gameOverByUser);\r\n        require(_id > 0 && _id <= cap);\r\n        require(citizens[_id].isExist == false);\r\n        require(_holder != address(0));\r\n\r\n        require(msg.value == rate);\r\n\r\n        uint256 weiAmount = msg.value;\r\n\r\n        // update weiRaised\r\n        weiRaised = weiRaised.add(weiAmount);\r\n\r\n        totalSupply = totalSupply.add(1);\r\n        livingSupply = livingSupply.add(1);\r\n\r\n        createCitizen(_id, _holder);\r\n        timestamp = now;\r\n        TokenHolder(_id, _holder);\r\n        TokenState(_id, 1);\r\n        TokenBranch(_id, 1);\r\n\r\n        forwardFunds();\r\n    }\r\n\r\n    function changeState(uint256 _id, uint8 _state) public onlyEpisodeManager returns (bool) {\r\n        require(started);\r\n        require(!gameOver);\r\n        require(!gameOverByUser);\r\n        require(_id > 0 && _id <= cap);\r\n        require(_state <= 1);\r\n        require(citizens[_id].state != _state);\r\n\r\n        citizens[_id].state = _state;\r\n        TokenState(_id, _state);\r\n        timestamp = now;\r\n        if (_state == 0) {\r\n            livingSupply--;\r\n        } else {\r\n            livingSupply++;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function changeHolder(uint256 _id, address _newholder) public returns (bool) {\r\n        require(!gameOver);\r\n        require(!gameOverByUser);\r\n        require(_id > 0 && _id <= cap);\r\n        require(citizens[_id].holder == msg.sender);\r\n        require(_newholder != address(0));\r\n        citizens[_id].holder = _newholder;\r\n        TokenHolder(_id, _newholder);\r\n        return true;\r\n    }\r\n\r\n    function changeBranch(uint256 _id, uint8 _branch) public onlyEpisodeManager returns (bool) {\r\n        require(started);\r\n        require(!gameOver);\r\n        require(!gameOverByUser);\r\n        require(_id > 0 && _id <= cap);\r\n        require(_branch > 0);\r\n        citizens[_id].branch = _branch;\r\n        TokenBranch(_id, _branch);\r\n        return true;\r\n    }\r\n\r\n    function start() public onlyOwner {\r\n        started = true;\r\n    }\r\n\r\n    function finalize() public onlyOwner {\r\n        require(!gameOverByUser);\r\n        gameOver = true;\r\n    }\r\n\r\n    function userFinalize() public {\r\n        require(now > (timestamp + timeWithoutUpdate));\r\n        require(!gameOver);\r\n        gameOverByUser = true;\r\n    }\r\n\r\n    function checkGameOver() public view returns (bool) {\r\n        return gameOver;\r\n    }\r\n\r\n    function checkGameOverByUser() public view returns (bool) {\r\n        return gameOverByUser;\r\n    }\r\n\r\n    function changeOwner(address _newOwner) public onlyOwner returns (bool) {\r\n        require(_newOwner != address(0));\r\n        owner = _newOwner;\r\n        return true;\r\n    }\r\n\r\n    function getState(uint256 _id) public view returns (uint256) {\r\n        require(_id > 0 && _id <= cap);\r\n        return citizens[_id].state;\r\n    }\r\n\r\n    function getHolder(uint256 _id) public view returns (address) {\r\n        require(_id > 0 && _id <= cap);\r\n        return citizens[_id].holder;\r\n    }\r\n\r\n    function getNowTokenPrice() public view returns (uint256) {\r\n        return rate;\r\n    }\r\n\r\n    function forwardFunds() internal {\r\n        fundsKeeper.transfer(msg.value);\r\n    }\r\n\r\n    function createCitizen(uint256 _id, address _holder) internal returns (uint256) {\r\n        require(!started);\r\n        require(_id > 0 && _id <= cap);\r\n        require(_holder != address(0));\r\n        citizens[_id].state = 1;\r\n        citizens[_id].holder = _holder;\r\n        citizens[_id].branch = 1;\r\n        citizens[_id].isExist = true;\r\n        return _id;\r\n    }\r\n}\r\n\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"fundsKeeper\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"episodeManager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"citizens\",\"outputs\":[{\"name\":\"state\",\"type\":\"uint8\"},{\"name\":\"holder\",\"type\":\"address\"},{\"name\":\"branch\",\"type\":\"uint8\"},{\"name\":\"isExist\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"userFinalize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_newholder\",\"type\":\"address\"}],\"name\":\"changeHolder\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"started\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getState\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"managerSet\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"checkGameOverByUser\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_state\",\"type\":\"uint8\"}],\"name\":\"changeState\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_branch\",\"type\":\"uint8\"}],\"name\":\"changeBranch\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gameOverByUser\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"checkGameOver\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getNowTokenPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"timestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gameOver\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"livingSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"start\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_holder\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"timeWithoutUpdate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getHolder\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_episodeManager\",\"type\":\"address\"}],\"name\":\"setEpisodeManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_fundsKeeper\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"state\",\"type\":\"uint8\"}],\"name\":\"TokenState\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"TokenHolder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"branch\",\"type\":\"uint8\"}],\"name\":\"TokenBranch\",\"type\":\"event\"}]","ContractName":"DeusETH","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000340c5a30af64ce1e7b6aab09bcc44d46d48c782d","Library":"","SwarmSource":"bzzr://3b9d1d0d62eb7da7f94032e0931873e8f2a6cce69d23b0716b537a38011fe605"}]}