{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.15;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Stoppable\r\n * @dev Base contract which allows children to implement a permanent stop mechanism.\r\n */\r\ncontract Stoppable is Ownable {\r\n  event Stop();  \r\n\r\n  bool public stopped = false;\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not stopped.\r\n   */\r\n  modifier whenNotStopped() {\r\n    require(!stopped);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is stopped.\r\n   */\r\n  modifier whenStopped() {\r\n    require(stopped);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function stop() onlyOwner whenNotStopped public {\r\n    stopped = true;\r\n    Stop();\r\n  }\r\n}\r\n\r\ncontract SpaceRegistry is Stoppable {\r\n    \r\n    event Add();\r\n    uint constant START_INDEX = 1;\r\n    Space[] spaces;\r\n    mapping(uint => uint) spaceMap;\r\n    mapping(uint => uint[]) userSpaceLookup;\r\n    \r\n    struct Space {\r\n        uint id;\r\n        uint userId;\r\n        bytes userHash;\r\n        uint bottomLeft;\r\n        uint topLeft;\r\n        uint topRight;\r\n        uint bottomRight;\r\n        string txType;\r\n        string txId;\r\n        uint txTime;\r\n        uint created;\r\n    }\r\n\r\n    function SpaceRegistry() {\r\n        spaces.length = START_INDEX;\r\n    }\r\n\r\n    function addSpace(\r\n        uint id, uint userId, bytes userHash, uint bottomLeft, uint topLeft, \r\n        uint topRight, uint bottomRight, string txType, string txId, uint txTime) \r\n        onlyOwner whenNotStopped {\r\n\r\n        require(id > 0);\r\n        require(spaceMap[id] == 0);\r\n        require(userId > 0);\r\n        require(userHash.length > 0);\r\n        require(bottomLeft > 0);\r\n        require(topLeft > 0);\r\n        require(topRight > 0);\r\n        require(bottomRight > 0);\r\n        require(bytes(txType).length > 0);\r\n        require(bytes(txId).length > 0);\r\n        require(txTime > 0);\r\n        \r\n        var space = Space({\r\n            id: id,\r\n            userId: userId,\r\n            userHash: userHash,\r\n            bottomLeft: bottomLeft,\r\n            topLeft: topLeft,\r\n            topRight: topRight,\r\n            bottomRight: bottomRight,\r\n            txType: txType,\r\n            txId: txId,\r\n            txTime: txTime,\r\n            created: block.timestamp\r\n        });\r\n\r\n        var _index = spaces.push(space) - 1;\r\n        assert(_index >= START_INDEX);\r\n        spaceMap[id] = _index;\r\n        userSpaceLookup[userId].push(id);\r\n        Add();\r\n    }\r\n\r\n    function getSpaceByIndex(uint index) external constant returns(\r\n        uint id,\r\n        uint userId,\r\n        bytes userHash,\r\n        uint bottomLeft,\r\n        uint topLeft,\r\n        uint topRight, \r\n        uint bottomRight,\r\n        string txType,\r\n        string txId, \r\n        uint txTime,\r\n        uint created) {\r\n\r\n        var _index = index + START_INDEX;\r\n        require(spaces.length > _index);\r\n        var space = spaces[_index];\r\n        id = space.id;\r\n        userId = space.userId;\r\n        userHash = space.userHash;\r\n        bottomLeft = space.bottomLeft;\r\n        topLeft = space.topLeft;\r\n        topRight = space.topRight;\r\n        bottomRight = space.bottomRight;\r\n        txType = space.txType;\r\n        txId = space.txId;\r\n        txTime = space.txTime;\r\n        created = space.created;\r\n    }    \r\n\r\n    function getSpaceById(uint _id) external constant returns(\r\n        uint id,\r\n        uint userId,\r\n        bytes userHash,\r\n        uint bottomLeft,\r\n        uint topLeft,\r\n        uint topRight, \r\n        uint bottomRight,\r\n        string txType,\r\n        string txId,\r\n        uint txTime,\r\n        uint created) {\r\n\r\n        require(_id > 0);\r\n        id = _id;\r\n        var index = spaceMap[id];\r\n        var space = spaces[index];\r\n        userId = space.userId;\r\n        userHash = space.userHash;\r\n        bottomLeft = space.bottomLeft;\r\n        topLeft = space.topLeft;\r\n        topRight = space.topRight;\r\n        bottomRight = space.bottomRight;\r\n        txType = space.txType;\r\n        txId = space.txId;\r\n        txTime = space.txTime;\r\n        created = space.created;\r\n    }\r\n\r\n    function getUserSpaceIds(uint userId) external constant returns(uint[]) {\r\n        require(userId > 0);\r\n        return userSpaceLookup[userId]; \r\n    }\r\n\r\n    function getUserId(uint id) external constant returns(uint) {\r\n        require(id > 0);\r\n        var index = spaceMap[id];\r\n        require(index > 0);\r\n        var space = spaces[index];\r\n        return space.userId; \r\n    }\r\n\r\n    function exists(uint id) external constant returns(bool) {\r\n        require(id > 0);\r\n        return spaceMap[id] != 0;\r\n    }\r\n    \r\n    function spaceCount() constant returns (uint) {\r\n        return spaces.length - START_INDEX;\r\n    }   \r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"stop\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"userId\",\"type\":\"uint256\"},{\"name\":\"userHash\",\"type\":\"bytes\"},{\"name\":\"bottomLeft\",\"type\":\"uint256\"},{\"name\":\"topLeft\",\"type\":\"uint256\"},{\"name\":\"topRight\",\"type\":\"uint256\"},{\"name\":\"bottomRight\",\"type\":\"uint256\"},{\"name\":\"txType\",\"type\":\"string\"},{\"name\":\"txId\",\"type\":\"string\"},{\"name\":\"txTime\",\"type\":\"uint256\"}],\"name\":\"addSpace\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"spaceCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getSpaceById\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"userId\",\"type\":\"uint256\"},{\"name\":\"userHash\",\"type\":\"bytes\"},{\"name\":\"bottomLeft\",\"type\":\"uint256\"},{\"name\":\"topLeft\",\"type\":\"uint256\"},{\"name\":\"topRight\",\"type\":\"uint256\"},{\"name\":\"bottomRight\",\"type\":\"uint256\"},{\"name\":\"txType\",\"type\":\"string\"},{\"name\":\"txId\",\"type\":\"string\"},{\"name\":\"txTime\",\"type\":\"uint256\"},{\"name\":\"created\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stopped\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getSpaceByIndex\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"userId\",\"type\":\"uint256\"},{\"name\":\"userHash\",\"type\":\"bytes\"},{\"name\":\"bottomLeft\",\"type\":\"uint256\"},{\"name\":\"topLeft\",\"type\":\"uint256\"},{\"name\":\"topRight\",\"type\":\"uint256\"},{\"name\":\"bottomRight\",\"type\":\"uint256\"},{\"name\":\"txType\",\"type\":\"string\"},{\"name\":\"txId\",\"type\":\"string\"},{\"name\":\"txTime\",\"type\":\"uint256\"},{\"name\":\"created\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getUserId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userId\",\"type\":\"uint256\"}],\"name\":\"getUserSpaceIds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Add\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Stop\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"SpaceRegistry","CompilerVersion":"v0.4.15+commit.bbb8e64f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://dde1bff844b9b5d9a889e2fdf645193305aa4ef60607f6329656e83e34298dbc"}]}