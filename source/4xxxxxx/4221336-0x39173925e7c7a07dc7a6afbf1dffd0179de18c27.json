{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner {\r\n    if (newOwner != address(0)) {\r\n      owner = newOwner;\r\n    }\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title Contracts that should not own Contracts\r\n * @author Remco Bloemen <remco@2π.com>\r\n * @dev Should contracts (anything Ownable) end up being owned by this contract, it allows the owner\r\n * of this contract to reclaim ownership of the contracts.\r\n */\r\ncontract HasNoContracts is Ownable {\r\n\r\n  /**\r\n   * @dev Reclaim ownership of Ownable contracts\r\n   * @param contractAddr The address of the Ownable to be reclaimed.\r\n   */\r\n  function reclaimContract(address contractAddr) external onlyOwner {\r\n    Ownable contractInst = Ownable(contractAddr);\r\n    contractInst.transferOwnership(owner);\r\n  }\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) constant returns (uint256);\r\n  function transfer(address to, uint256 value) returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Contracts that should not own Tokens\r\n * @author Remco Bloemen <remco@2π.com>\r\n * @dev This blocks incoming ERC23 tokens to prevent accidental loss of tokens.\r\n * Should tokens (any ERC20Basic compatible) end up in the contract, it allows the\r\n * owner to reclaim the tokens.\r\n */\r\ncontract reclaimTokens is Ownable {\r\n\r\n  /**\r\n   * @dev Reclaim all ERC20Basic compatible tokens\r\n   * @param tokenAddr address The address of the token contract\r\n   */\r\n  function reclaimToken(address tokenAddr) external onlyOwner {\r\n    ERC20Basic tokenInst = ERC20Basic(tokenAddr);\r\n    uint256 balance = tokenInst.balanceOf(this);\r\n    tokenInst.transfer(owner, balance);\r\n  }\r\n}\r\n\r\ncontract ExperimentalPreICO is reclaimTokens, HasNoContracts {\r\n  using SafeMath for uint256;\r\n\r\n  address public beneficiary;\r\n  bool public fundingGoalReached = false;\r\n  bool public crowdsaleClosed = false;\r\n  ERC20Basic public rewardToken;\r\n  uint256 public fundingGoal;\r\n  uint256 public fundingCap;\r\n  uint256 public paymentMin;\r\n  uint256 public paymentMax;\r\n  uint256 public amountRaised;\r\n  uint256 public rate;\r\n\r\n  mapping(address => uint256) public balanceOf;\r\n  mapping(address => bool) public whitelistedAddresses;\r\n  event GoalReached(address beneficiaryAddress, uint256 amount);\r\n  event FundTransfer(address backer, uint256 amount, bool isContribution);\r\n\r\n  /**\r\n   * @dev data structure to hold information about campaign contributors\r\n   */\r\n  function ExperimentalPreICO(address _wallet,\r\n                              uint256 _goalInEthers,\r\n                              uint256 _capInEthers,\r\n                              uint256 _minPaymentInEthers,\r\n                              uint256 _maxPaymentInEthers,\r\n                              uint256 _rate,\r\n                              address _rewardToken) {\r\n    require(_goalInEthers > 0);\r\n    require(_capInEthers >= _goalInEthers);\r\n    require(_minPaymentInEthers > 0);\r\n    require(_maxPaymentInEthers > _minPaymentInEthers);\r\n    require(_rate > 0);\r\n    require(_wallet != 0x0);\r\n    beneficiary = _wallet;\r\n    fundingGoal = _goalInEthers.mul(1 ether);\r\n    fundingCap = _capInEthers.mul(1 ether);\r\n    paymentMin = _minPaymentInEthers.mul(1 ether);\r\n    paymentMax = _maxPaymentInEthers.mul(1 ether);\r\n    rate = _rate;\r\n    rewardToken = ERC20Basic(_rewardToken);\r\n  }\r\n\r\n  /**\r\n   * @dev The default function that is called whenever anyone sends funds to the contract\r\n   */\r\n  function () external payable crowdsaleActive {\r\n    require(validPurchase());\r\n\r\n    uint256 amount = msg.value;\r\n    balanceOf[msg.sender] = balanceOf[msg.sender].add(amount);\r\n    amountRaised = amountRaised.add(amount);\r\n    rewardToken.transfer(msg.sender, amount.mul(rate));\r\n    FundTransfer(msg.sender, amount, true);\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called when crowdsale is still open.\r\n   */\r\n  modifier crowdsaleEnded() {\r\n    require(crowdsaleClosed == true);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called when crowdsale has closed.\r\n   */\r\n  modifier crowdsaleActive() {\r\n    require(crowdsaleClosed == false);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev return true if the transaction can buy tokens\r\n   */\r\n  function validPurchase() internal returns (bool) {\r\n    bool whitelisted = whitelistedAddresses[msg.sender] == true;\r\n    bool validAmmount = msg.value >= paymentMin && msg.value <= paymentMax;\r\n    bool availableFunding = fundingCap >= amountRaised.add(msg.value);\r\n    return whitelisted && validAmmount && availableFunding;\r\n  }\r\n\r\n  /**\r\n   * @dev checks if the goal has been reached\r\n   */\r\n  function checkGoal() external onlyOwner {\r\n    if (amountRaised >= fundingGoal){\r\n      fundingGoalReached = true;\r\n      GoalReached(beneficiary, amountRaised);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev ends or resumes the crowdsale\r\n   */\r\n  function endCrowdsale() external onlyOwner {\r\n    crowdsaleClosed = true;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows backers to withdraw their funds in the crowdsale was unsuccessful,\r\n   * and allow the owner to send the amount raised to the beneficiary\r\n   */\r\n  function safeWithdrawal() external crowdsaleEnded {\r\n    if (!fundingGoalReached) {\r\n      uint256 amount = balanceOf[msg.sender];\r\n      balanceOf[msg.sender] = 0;\r\n      if (amount > 0) {\r\n        if (msg.sender.send(amount)) {\r\n          FundTransfer(msg.sender, amount, false);\r\n        } else {\r\n          balanceOf[msg.sender] = amount;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (fundingGoalReached && owner == msg.sender) {\r\n      if (beneficiary.send(amountRaised)) {\r\n        FundTransfer(beneficiary, amountRaised, false);\r\n      } else {\r\n        //If we fail to send the funds to beneficiary, unlock funders balance\r\n        fundingGoalReached = false;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Whitelists a list of addresses\r\n   */\r\n  function whitelistAddress (address[] addresses) external onlyOwner crowdsaleActive {\r\n    for (uint i = 0; i < addresses.length; i++) {\r\n      whitelistedAddresses[addresses[i]] = true;\r\n    }\r\n  }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelistedAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddr\",\"type\":\"address\"}],\"name\":\"reclaimToken\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"endCrowdsale\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"contractAddr\",\"type\":\"address\"}],\"name\":\"reclaimContract\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"checkGoal\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paymentMax\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paymentMin\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundingGoal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"amountRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addresses\",\"type\":\"address[]\"}],\"name\":\"whitelistAddress\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleClosed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundingGoalReached\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundingCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"safeWithdrawal\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_goalInEthers\",\"type\":\"uint256\"},{\"name\":\"_capInEthers\",\"type\":\"uint256\"},{\"name\":\"_minPaymentInEthers\",\"type\":\"uint256\"},{\"name\":\"_maxPaymentInEthers\",\"type\":\"uint256\"},{\"name\":\"_rate\",\"type\":\"uint256\"},{\"name\":\"_rewardToken\",\"type\":\"address\"}],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"beneficiaryAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"GoalReached\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"backer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"isContribution\",\"type\":\"bool\"}],\"name\":\"FundTransfer\",\"type\":\"event\"}]","ContractName":"ExperimentalPreICO","CompilerVersion":"v0.4.13+commit.fb4cb1a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000352044056717c2ac541258c8f94c194185b8ece1000000000000000000000000000000000000000000000000000000000000012c0000000000000000000000000000000000000000000000000000000000000bb80000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000003e80000000000000000000000004805f9568bca23bef099c2a317346b42146384a1","Library":"","SwarmSource":"bzzr://f021610d0014bc985e37b481298f4b75f096b56a5322b4caffe858c71e88b08f"}]}