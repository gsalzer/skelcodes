{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.16;\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n\r\n  modifier onlyOwner(){\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    if (newOwner != address(0)) {\r\n      owner = newOwner;\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public constant returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n    * @param _value The amount to be transferred.\r\n      */\r\n  function transfer(address _to, uint256 _value) public returns (bool){\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n    * @return An uint256 representing the amount owned by the passed address.\r\n    */\r\n  function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n  /**\r\n  * @dev Transfer tokens from one address to another\r\n  * @param _from address The address which you want to send tokens from\r\n  * @param _to address The address which you want to transfer to\r\n  * @param _value uint256 the amout of tokens to be transfered\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    balances[_to] = balances[_to].add(_value);\r\n    balances[_from] = balances[_from].sub(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n  * @param _spender The address which will spend the funds.\r\n  * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n\r\n    // To change the approve amount you first have to reduce the addresses`\r\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n    //  already 0 to mitigate the race condition described here:\r\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n  * @param _owner address The address which owns the funds.\r\n    * @param _spender address The address which will spend the funds.\r\n    * @return A uint256 specifing the amount of tokens still avaible for the spender.\r\n   */\r\n\r\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n}\r\n\r\n/**\r\n * @title Mintable token\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\r\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n */\r\ncontract MintableToken is StandardToken, Ownable {\r\n\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  /**\r\n  * @dev Function to mint tokens\r\n  * @param _to The address that will recieve the minted tokens.\r\n    * @param _amount The amount of tokens to mint.\r\n    * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\r\n    totalSupply = totalSupply.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    Transfer(0X0, _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Function to stop minting new tokens.\r\n  * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() onlyOwner public returns (bool) {\r\n    mintingFinished = true;\r\n    MintFinished();\r\n    return true;\r\n  }\r\n}\r\n\r\ncontract FidentiaXToken is MintableToken {\r\n  // Coin Properties\r\n  string public name = \"fidentiaX\";\r\n  string public symbol = \"fdX\";\r\n  uint256 public decimals = 18;\r\n\r\n  // Special propeties\r\n  bool public tradingStarted = false;\r\n\r\n  /**\r\n  * @dev modifier that throws if trading has not started yet\r\n   */\r\n  modifier hasStartedTrading() {\r\n    require(tradingStarted);\r\n    _;\r\n  }\r\n\r\n  /**\r\n  * @dev Allows the owner to enable the trading. This can not be undone\r\n  */\r\n  function startTrading() public onlyOwner {\r\n    tradingStarted = true;\r\n  }\r\n\r\n  /**\r\n  * @dev Allows anyone to transfer the Change tokens once trading has started\r\n  * @param _to the recipient address of the tokens.\r\n  * @param _value number of tokens to be transfered.\r\n   */\r\n  function transfer(address _to, uint _value) hasStartedTrading public returns (bool) {\r\n    return super.transfer(_to, _value);\r\n  }\r\n\r\n  /**\r\n  * @dev Allows anyone to transfer the Change tokens once trading has started\r\n  * @param _from address The address which you want to send tokens from\r\n  * @param _to address The address which you want to transfer to\r\n  * @param _value uint the amout of tokens to be transfered\r\n   */\r\n  function transferFrom(address _from, address _to, uint _value) hasStartedTrading public returns (bool) {\r\n    return super.transferFrom(_from, _to, _value);\r\n  }\r\n\r\n  function emergencyERC20Drain( ERC20 oddToken, uint amount ) public {\r\n    oddToken.transfer(owner, amount);\r\n  }\r\n}\r\n\r\n\r\n\r\ncontract FidentiaXTokenSale is Ownable {\r\n\r\n  using SafeMath for uint256;\r\n\r\n  // The token being sold\r\n  FidentiaXToken public token;\r\n\r\n  uint256 public decimals;  \r\n\r\n  uint256 public oneCoin;\r\n\r\n  // start and end block where investments are allowed (both inclusive)\r\n  uint256 public startTimestamp;\r\n  uint256 public endTimestamp;\r\n\r\n  // timestamps for tiers\r\n  uint256 public tier1Timestamp;\r\n  uint256 public tier2Timestamp;\r\n\r\n  // address where funds are collected\r\n\r\n  address public multiSig;\r\n\r\n  function setWallet(address _newWallet) public onlyOwner {\r\n    multiSig = _newWallet;\r\n  }\r\n\r\n  // These will be set by setTier()\r\n\r\n  uint256 public rate; // how many token units a buyer gets per wei\r\n\r\n  uint256 public minContribution = 0.0001 ether;  // minimum contributio to participate in tokensale\r\n\r\n  uint256 public maxContribution = 200000 ether;  // default limit to tokens that the users can buy\r\n\r\n  // ***************************\r\n  // amount of raised money in wei\r\n\r\n  uint256 public weiRaised;\r\n\r\n  // amount of raised tokens \r\n\r\n  uint256 public tokenRaised;\r\n\r\n  // maximum amount of tokens being created\r\n\r\n  uint256 public maxTokens;\r\n\r\n  // maximum amount of tokens for sale\r\n\r\n  uint256 public tokensForSale;  // 24 Million Tokens for SALE\r\n\r\n  // number of participants in presale\r\n\r\n  uint256 public numberOfPurchasers = 0;\r\n\r\n  //  for whitelist\r\n  address public cs;\r\n  //  for whitelist AND placement\r\n  address public fx;\r\n\r\n  // switch on/off the authorisation , default: true - on\r\n\r\n  bool    public freeForAll = false;\r\n\r\n  mapping (address => bool) public authorised; // just to annoy the heck out of americans\r\n\r\n  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n\r\n  event SaleClosed();\r\n\r\n  function FidentiaXTokenSale() public {\r\n    startTimestamp = 1509930000; //  Monday November 06, 2017 09:00:00 (am) in time zone Asia/Singapore (SGT)\r\n    //1508684400;\r\n    endTimestamp = 1512489599;   //  December 05, 2017 23:59:59 (pm) in time zone Asia/Singapore (SGT) ( GMT +08:00 )\r\n    tier1Timestamp = 1510102799; //   November 08, 2017 08:59:59 (am) in time zone Asia/Singapore (SGT)\r\n    tier2Timestamp = 1510361999; //   November 11, 2017 08:59:59 (am) in time zone Asia/Singapore (SGT)\r\n    token = new FidentiaXToken();\r\n    decimals = token.decimals();\r\n    oneCoin = 10 ** decimals;\r\n    maxTokens = 130 * (10**6) * oneCoin;\r\n    tokensForSale = 130 * (10**6) * oneCoin;\r\n  }\r\n\r\n  /**\r\n  * @dev Calculates the amount of bonus coins the buyer gets\r\n   */\r\n  function getRateAt(uint256 at) internal constant returns (uint256) {\r\n    if (at < (tier1Timestamp))\r\n      return 575;\r\n    if (at < (tier2Timestamp))\r\n      return 550;\r\n    return 500;\r\n  }\r\n\r\n  // @return true if crowdsale event has ended\r\n  function hasEnded() public constant returns (bool) {\r\n    if (now > endTimestamp)\r\n      return true;\r\n    if (tokenRaised >= tokensForSale)\r\n      return true; // if we reach the tokensForSale\r\n    return false;\r\n  }\r\n\r\n  /**\r\n  * @dev throws if person sending is not contract owner or cs role\r\n   */\r\n  modifier onlyCSorFx() {\r\n    require((msg.sender == fx) || (msg.sender==cs));\r\n    _;\r\n  }\r\n\r\n  modifier onlyFx() {\r\n    require(msg.sender == fx);\r\n    _;\r\n  }\r\n\r\n  /**\r\n  * @dev throws if person sending is not authorised or sends nothing\r\n  */\r\n  modifier onlyAuthorised() {\r\n    require (authorised[msg.sender] || freeForAll);\r\n    require (now >= startTimestamp);\r\n    require (!(hasEnded()));\r\n    require (multiSig != 0x0);\r\n    require (msg.value > 1 finney);\r\n    require(tokensForSale > tokenRaised); // check we are not over the number of tokensForSale\r\n    _;\r\n  }\r\n\r\n  /**\r\n  * @dev authorise an account to participate\r\n  */\r\n  function authoriseAccount(address whom) onlyCSorFx public {\r\n    authorised[whom] = true;\r\n  }\r\n\r\n  /**\r\n  * @dev authorise a lot of accounts in one go\r\n  */\r\n  function authoriseManyAccounts(address[] many) onlyCSorFx public {\r\n    for (uint256 i = 0; i < many.length; i++) {\r\n      authorised[many[i]] = true;\r\n    }\r\n  }\r\n\r\n  /**\r\n  * @dev ban an account from participation (default)\r\n  */\r\n  function blockAccount(address whom) onlyCSorFx public {\r\n    authorised[whom] = false;\r\n  }\r\n\r\n  /**\r\n  * @dev set a new CS representative\r\n  */\r\n  function setCS(address newCS) onlyOwner public {\r\n    cs = newCS;\r\n  }\r\n\r\n  /**\r\n  * @dev set a new Fx representative\r\n  */\r\n  function setFx(address newFx) onlyOwner public {\r\n    fx = newFx;\r\n  }\r\n\r\n  function placeTokens(address beneficiary, uint256 _tokens) onlyFx public {\r\n    //check minimum and maximum amount\r\n    require(_tokens != 0);\r\n    require(!hasEnded());\r\n    uint256 amount = 0;\r\n    if (token.balanceOf(beneficiary) == 0) {\r\n      numberOfPurchasers++;\r\n    }\r\n    tokenRaised = tokenRaised.add(_tokens); // so we can go slightly over\r\n    token.mint(beneficiary, _tokens);\r\n    TokenPurchase(beneficiary, beneficiary, amount, _tokens);\r\n  }\r\n\r\n  // low level token purchase function\r\n  function buyTokens(address beneficiary, uint256 amount) onlyAuthorised internal {\r\n    //check minimum and maximum amount\r\n    require(amount >= minContribution);\r\n    require(amount <= maxContribution);\r\n\r\n    // Calculate token amount to be purchased\r\n    uint256 actualRate = getRateAt(now);\r\n    uint256 tokens = amount.mul(actualRate);\r\n\r\n    // update state\r\n    weiRaised = weiRaised.add(amount);\r\n    if (token.balanceOf(beneficiary) == 0) {\r\n      numberOfPurchasers++;\r\n    }\r\n    tokenRaised = tokenRaised.add(tokens); // so we can go slightly over\r\n    token.mint(beneficiary, tokens);\r\n    TokenPurchase(beneficiary, beneficiary, amount, tokens);\r\n    multiSig.transfer(this.balance); // better in case any other ether ends up here\r\n  }\r\n\r\n  // transfer ownership of the token to the owner of the presale contract\r\n  function finishSale() public onlyOwner {\r\n    require(hasEnded());\r\n    // assign the rest of the 100M tokens to the reserve\r\n    uint unassigned;\r\n    if(maxTokens > tokenRaised) {\r\n      unassigned  = maxTokens.sub(tokenRaised);\r\n      token.mint(multiSig,unassigned);\r\n    }\r\n    token.finishMinting();\r\n    token.transferOwnership(owner);\r\n    SaleClosed();\r\n  }\r\n\r\n  // fallback function can be used to buy tokens\r\n  function () public payable {\r\n    buyTokens(msg.sender, msg.value);\r\n  }\r\n\r\n  function emergencyERC20Drain( ERC20 oddToken, uint amount ) public {\r\n    oddToken.transfer(owner, amount);\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startTrading\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tradingStarted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"oddToken\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"emergencyERC20Drain\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"FidentiaXToken","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://8c441f3356873023bd58e356eb9cb64eadf3bf3d7aace817e2978bb1c31d4f0d"}]}