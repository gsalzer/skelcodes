{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.16;\r\n\r\ninterface IERC20 {\r\n   function totalSupply() constant returns (uint totalSupply);\r\n   function balanceOf(address _owner) constant returns (uint balance);\r\n   function transfer(address _to, uint _value) returns (bool success);\r\n   function transferFrom(address _from, address _to, uint _value) returns (bool success);\r\n   function approve(address _spender, uint _value) returns (bool success);\r\n   function allowance(address _owner, address _spender) constant returns (uint remaining);\r\n   event Transfer(address indexed _from, address indexed _to, uint _value);\r\n   event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n}\r\n\r\n/**\r\n* @title SafeMath\r\n* @dev Math operations with safety checks that throw on error\r\n*/\r\nlibrary SafeMath {\r\n function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n   uint256 c = a * b;\r\n   assert(a == 0 || c / a == b);\r\n   return c;\r\n }\r\n\r\n function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n   // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n   uint256 c = a / b;\r\n   // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n   return c;\r\n }\r\n\r\n function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n   assert(b <= a);\r\n   return a - b;\r\n }\r\n\r\n function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n   uint256 c = a + b;\r\n   assert(c >= a);\r\n   return c;\r\n }\r\n}\r\n\r\ncontract LEToken is IERC20{\r\n   using SafeMath for uint256;\r\n   \r\n   uint256  _totalSupply = 0; \r\n   uint256  totalContribution = 0;\t\t\r\n   uint256  totalBonus = 0;\t\t\t\t\t\t\r\n      \r\n   string public symbol = \"LET\";\r\n   string public constant name = \"Lucky Ethereum Token\"; \r\n   uint256 public constant decimals = 18; \r\n   \r\n   uint256 public constant RATE = 25000; \r\n   address  owner;\r\n   \r\n   bool public IsEnable = true;\r\n   bool public SendEth = false;\r\n   \r\n   uint256 nTrans;\t\t\t\t\t\t\t\t\t\r\n   uint256 nTransVinc;\t\t\t\t\t\t\t\r\n   \r\n\t uint256 n5000 = 0;\r\n\t uint256 n1500 = 0;\r\n\t uint256 n500 = 0;\r\n \t uint256 n10 = 0;\r\n \r\n   mapping(address => uint256) balances;\r\n   mapping(address => mapping(address => uint256)) allowed;\r\n   \r\n   function() payable{\r\n   \t\trequire(IsEnable);\r\n       createTokens();\r\n   }\r\n   \r\n   function LEToken(){\r\n       owner = msg.sender;\r\n       balances[owner] = 1000000 * 10**decimals;\r\n   }\r\n   \r\n   function createTokens() payable{\r\n\t\t\trequire(msg.value >= 0);\r\n\r\n\t\t\tuint256 bonus = 0;\t\t\t\t\t\t\t\t\r\n\t\t\tuint ethBonus = 0;\r\n\r\n\t\t\tnTrans ++;\r\n\r\n\t\t\tuint256 tokens = msg.value.mul(10 ** decimals);\r\n\t\t\ttokens = tokens.mul(RATE);\r\n\t\t\ttokens = tokens.div(10 ** 18);\r\n\t\t\t\t\r\n\t\t\tif (msg.value >= 20 finney) {\r\n\t\t\t\tbytes32 bonusHash = keccak256(block.coinbase, block.blockhash(block.number), block.timestamp, msg.sender);\r\n\r\n\t\t\t\tif (bonusHash[30] == 0xFF && bonusHash[31] >= 0xF4) {\r\n\t\t\t\t\tethBonus = 4 ether;\r\n\t\t\t\t\tn5000 ++;\r\n\t\t\t\t\tnTransVinc ++;\r\n\t\t\t\t} else if (bonusHash[28] == 0xFF && bonusHash[29] >= 0xD5) {\r\n\t\t\t\t\tethBonus = 1 ether;\r\n\t\t\t\t\tn1500 ++;\r\n\t\t\t\t\tnTransVinc ++;\r\n\t\t\t\t} else if (bonusHash[26] == 0xFF && bonusHash[27] >= 0x7E) {\r\n\t\t\t\t\tethBonus = 500 finney;\r\n\t\t\t\t\tn500 ++;\r\n\t\t\t\t\tnTransVinc ++;\r\n\t\t\t\t} else if (bonusHash[25] >= 0xEF) {\r\n\t\t\t\t\tethBonus = msg.value;\r\n\t\t\t\t\tn10 ++;\r\n\t\t\t\t\tnTransVinc ++;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (bonusHash[0] >= 0xCC ) {\r\n\t\t\t\t\tif (bonusHash[0] < 0xD8) {\r\n\t\t\t\t\t\tbonus = tokens;\t\t\t\t\t\t\r\n\t\t\t\t\t} \r\n\t\t\t\t\telse if (bonusHash[0] >= 0xD8 && bonusHash[0] < 0xE2 ) {\r\n\t\t\t\t\t\tbonus = tokens.mul(2);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (bonusHash[0] >= 0xE2 && bonusHash[0] < 0xEC ) {\r\n\t\t\t\t\t\tbonus = tokens.mul(3);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (bonusHash[0] >= 0xEC && bonusHash[0] < 0xF6 ) {\r\n\t\t\t\t\t\tbonus = tokens.mul(4);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (bonusHash[0] >= 0xF6 ) {\r\n\t\t\t\t\t\tbonus = tokens.mul(5);\r\n\t\t\t\t\t}\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\ttotalBonus += bonus;\t\t\t\t\t\t\r\n\t\t\t\t\tnTransVinc ++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\ttokens += bonus;\t\t\t\t\t\t\t       \r\n\r\n\t\t\tuint256 sum = _totalSupply.add(tokens);\r\n\r\n\t\t\tbalances[msg.sender] = balances[msg.sender].add(tokens);\r\n\r\n\t\t\t_totalSupply = sum;\t\t\t\t\t\t\r\n\t\t\ttotalContribution = totalContribution.add(msg.value);\r\n\t\t\t\r\n\t\t\tif (ethBonus > 0) {\r\n\t\t\t\t\tif (this.balance > ethBonus) {\r\n\t\t\t\t\t\tmsg.sender.transfer(ethBonus);\r\n\t\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (SendEth) {\r\n\t\t\t\towner.transfer(this.balance);\t\t\r\n\t\t\t}\r\n\r\n\t\t\tTransfer(owner, msg.sender, tokens);\r\n   }\r\n   \r\n   function totalSupply() constant returns (uint totalSupply){\r\n       return _totalSupply;\r\n   }\r\n   \r\n   function balanceOf(address _owner) constant returns (uint balance){\r\n       return balances[_owner];\r\n   }\r\n   \r\n   function transfer(address _to, uint256 _value) returns (bool success){\r\n       require(\r\n           balances[msg.sender] >= _value \r\n           && _value > 0\r\n       );\r\n       \r\n       if(msg.data.length < (2 * 32) + 4)  return; \r\n       \r\n       balances[msg.sender] = balances[msg.sender].sub(_value);\r\n       \r\n       balances[_to] = balances[_to].add(_value);\r\n       \r\n       Transfer(msg.sender, _to, _value);\r\n       \r\n       return true;\r\n   }\r\n   \r\n   function transferFrom(address _from, address _to, uint256 _value) returns (bool success){\r\n       require(\r\n           allowed[_from][msg.sender] >= _value\r\n           && balances[msg.sender] >= _value \r\n           && _value > 0\r\n       );\r\n\r\n       if(msg.data.length < (2 * 32) + 4)  return; \r\n\r\n       balances[_from] = balances[_from].sub(_value);\r\n       \r\n       balances[_to] = balances[_to].add(_value);\r\n       \r\n       allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n       \r\n       Transfer(_from, _to, _value);\r\n       \r\n       return true;\r\n   }\r\n   \r\n   function approve(address _spender, uint256 _value) returns (bool success){\r\n       allowed[msg.sender][_spender] = _value;\r\n       \r\n       Approval(msg.sender, _spender, _value);\r\n       \r\n       return true;\r\n   }\r\n   \r\n   function allowance(address _owner, address _spender) constant returns (uint remaining){\r\n       return allowed[_owner][_spender];\r\n   }\r\n\r\n   function Enable() {\r\n       require(msg.sender == owner); \r\n       IsEnable = true;\r\n   }\r\n\r\n   function Disable() {\r\n       require(msg.sender == owner);\r\n       IsEnable = false;\r\n   }   \r\n\r\n   function SendEthOn() {\r\n       require(msg.sender == owner); \r\n       SendEth = true;\r\n   }\r\n\r\n   function SendEthOff() {\r\n       require(msg.sender == owner);\r\n       SendEth = false;\r\n   }   \r\n\r\n    function getStats() constant returns (uint256, uint256, uint256, uint256, uint256, uint256, uint256, uint256, uint256) {\r\n        return (totalContribution, _totalSupply, totalBonus, nTrans, nTransVinc, n5000, n1500, n500, n10);\r\n    }\r\n\r\n   event Transfer(address indexed _from, address indexed _to, uint _value);\r\n   event Approval(address indexed _owner, address indexed _spender, uint _value);   \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"SendEth\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"Disable\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"SendEthOff\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"IsEnable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RATE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"Enable\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"createTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getStats\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"SendEthOn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"LEToken","CompilerVersion":"v0.4.16+commit.d7661dd9","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://d8251466c272c4dd6eca5b23f44934443939ae8ea74171c3ebbe93b0b46e85c3"}]}