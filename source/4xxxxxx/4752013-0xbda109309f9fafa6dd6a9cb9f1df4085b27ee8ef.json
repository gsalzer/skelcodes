{"status":"1","message":"OK","result":[{"SourceCode":"// hevm: flattened sources of src/tap.sol\r\npragma solidity ^0.4.18;\r\n\r\n////// lib/ds-guard/lib/ds-auth/src/auth.sol\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/* pragma solidity ^0.4.13; */\r\n\r\ncontract DSAuthority {\r\n    function canCall(\r\n        address src, address dst, bytes4 sig\r\n    ) public view returns (bool);\r\n}\r\n\r\ncontract DSAuthEvents {\r\n    event LogSetAuthority (address indexed authority);\r\n    event LogSetOwner     (address indexed owner);\r\n}\r\n\r\ncontract DSAuth is DSAuthEvents {\r\n    DSAuthority  public  authority;\r\n    address      public  owner;\r\n\r\n    function DSAuth() public {\r\n        owner = msg.sender;\r\n        LogSetOwner(msg.sender);\r\n    }\r\n\r\n    function setOwner(address owner_)\r\n        public\r\n        auth\r\n    {\r\n        owner = owner_;\r\n        LogSetOwner(owner);\r\n    }\r\n\r\n    function setAuthority(DSAuthority authority_)\r\n        public\r\n        auth\r\n    {\r\n        authority = authority_;\r\n        LogSetAuthority(authority);\r\n    }\r\n\r\n    modifier auth {\r\n        require(isAuthorized(msg.sender, msg.sig));\r\n        _;\r\n    }\r\n\r\n    function isAuthorized(address src, bytes4 sig) internal view returns (bool) {\r\n        if (src == address(this)) {\r\n            return true;\r\n        } else if (src == owner) {\r\n            return true;\r\n        } else if (authority == DSAuthority(0)) {\r\n            return false;\r\n        } else {\r\n            return authority.canCall(src, this, sig);\r\n        }\r\n    }\r\n}\r\n\r\n////// lib/ds-spell/lib/ds-note/src/note.sol\r\n/// note.sol -- the `note' modifier, for logging calls as events\r\n\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/* pragma solidity ^0.4.13; */\r\n\r\ncontract DSNote {\r\n    event LogNote(\r\n        bytes4   indexed  sig,\r\n        address  indexed  guy,\r\n        bytes32  indexed  foo,\r\n        bytes32  indexed  bar,\r\n        uint              wad,\r\n        bytes             fax\r\n    ) anonymous;\r\n\r\n    modifier note {\r\n        bytes32 foo;\r\n        bytes32 bar;\r\n\r\n        assembly {\r\n            foo := calldataload(4)\r\n            bar := calldataload(36)\r\n        }\r\n\r\n        LogNote(msg.sig, msg.sender, foo, bar, msg.value, msg.data);\r\n\r\n        _;\r\n    }\r\n}\r\n\r\n////// lib/ds-thing/lib/ds-math/src/math.sol\r\n/// math.sol -- mixin for inline numerical wizardry\r\n\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/* pragma solidity ^0.4.13; */\r\n\r\ncontract DSMath {\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x + y) >= x);\r\n    }\r\n    function sub(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x - y) <= x);\r\n    }\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x);\r\n    }\r\n\r\n    function min(uint x, uint y) internal pure returns (uint z) {\r\n        return x <= y ? x : y;\r\n    }\r\n    function max(uint x, uint y) internal pure returns (uint z) {\r\n        return x >= y ? x : y;\r\n    }\r\n    function imin(int x, int y) internal pure returns (int z) {\r\n        return x <= y ? x : y;\r\n    }\r\n    function imax(int x, int y) internal pure returns (int z) {\r\n        return x >= y ? x : y;\r\n    }\r\n\r\n    uint constant WAD = 10 ** 18;\r\n    uint constant RAY = 10 ** 27;\r\n\r\n    function wmul(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, y), WAD / 2) / WAD;\r\n    }\r\n    function rmul(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, y), RAY / 2) / RAY;\r\n    }\r\n    function wdiv(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, WAD), y / 2) / y;\r\n    }\r\n    function rdiv(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, RAY), y / 2) / y;\r\n    }\r\n\r\n    // This famous algorithm is called \"exponentiation by squaring\"\r\n    // and calculates x^n with x as fixed-point and n as regular unsigned.\r\n    //\r\n    // It's O(log n), instead of O(n) for naive repeated multiplication.\r\n    //\r\n    // These facts are why it works:\r\n    //\r\n    //  If n is even, then x^n = (x^2)^(n/2).\r\n    //  If n is odd,  then x^n = x * x^(n-1),\r\n    //   and applying the equation for even x gives\r\n    //    x^n = x * (x^2)^((n-1) / 2).\r\n    //\r\n    //  Also, EVM division is flooring and\r\n    //    floor[(n-1) / 2] = floor[n / 2].\r\n    //\r\n    function rpow(uint x, uint n) internal pure returns (uint z) {\r\n        z = n % 2 != 0 ? x : RAY;\r\n\r\n        for (n /= 2; n != 0; n /= 2) {\r\n            x = rmul(x, x);\r\n\r\n            if (n % 2 != 0) {\r\n                z = rmul(z, x);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n////// lib/ds-thing/src/thing.sol\r\n// thing.sol - `auth` with handy mixins. your things should be DSThings\r\n\r\n// Copyright (C) 2017  DappHub, LLC\r\n\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/* pragma solidity ^0.4.13; */\r\n\r\n/* import 'ds-auth/auth.sol'; */\r\n/* import 'ds-note/note.sol'; */\r\n/* import 'ds-math/math.sol'; */\r\n\r\ncontract DSThing is DSAuth, DSNote, DSMath {\r\n\r\n    function S(string s) internal pure returns (bytes4) {\r\n        return bytes4(keccak256(s));\r\n    }\r\n\r\n}\r\n\r\n////// lib/ds-token/lib/ds-stop/src/stop.sol\r\n/// stop.sol -- mixin for enable/disable functionality\r\n\r\n// Copyright (C) 2017  DappHub, LLC\r\n\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/* pragma solidity ^0.4.13; */\r\n\r\n/* import \"ds-auth/auth.sol\"; */\r\n/* import \"ds-note/note.sol\"; */\r\n\r\ncontract DSStop is DSNote, DSAuth {\r\n\r\n    bool public stopped;\r\n\r\n    modifier stoppable {\r\n        require(!stopped);\r\n        _;\r\n    }\r\n    function stop() public auth note {\r\n        stopped = true;\r\n    }\r\n    function start() public auth note {\r\n        stopped = false;\r\n    }\r\n\r\n}\r\n\r\n////// lib/ds-token/lib/erc20/src/erc20.sol\r\n/// erc20.sol -- API for the ERC20 token standard\r\n\r\n// See <https://github.com/ethereum/EIPs/issues/20>.\r\n\r\n// This file likely does not meet the threshold of originality\r\n// required for copyright to apply.  As a result, this is free and\r\n// unencumbered software belonging to the public domain.\r\n\r\n/* pragma solidity ^0.4.8; */\r\n\r\ncontract ERC20Events {\r\n    event Approval(address indexed src, address indexed guy, uint wad);\r\n    event Transfer(address indexed src, address indexed dst, uint wad);\r\n}\r\n\r\ncontract ERC20 is ERC20Events {\r\n    function totalSupply() public view returns (uint);\r\n    function balanceOf(address guy) public view returns (uint);\r\n    function allowance(address src, address guy) public view returns (uint);\r\n\r\n    function approve(address guy, uint wad) public returns (bool);\r\n    function transfer(address dst, uint wad) public returns (bool);\r\n    function transferFrom(\r\n        address src, address dst, uint wad\r\n    ) public returns (bool);\r\n}\r\n\r\n////// lib/ds-token/src/base.sol\r\n/// base.sol -- basic ERC20 implementation\r\n\r\n// Copyright (C) 2015, 2016, 2017  DappHub, LLC\r\n\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/* pragma solidity ^0.4.13; */\r\n\r\n/* import \"erc20/erc20.sol\"; */\r\n/* import \"ds-math/math.sol\"; */\r\n\r\ncontract DSTokenBase is ERC20, DSMath {\r\n    uint256                                            _supply;\r\n    mapping (address => uint256)                       _balances;\r\n    mapping (address => mapping (address => uint256))  _approvals;\r\n\r\n    function DSTokenBase(uint supply) public {\r\n        _balances[msg.sender] = supply;\r\n        _supply = supply;\r\n    }\r\n\r\n    function totalSupply() public view returns (uint) {\r\n        return _supply;\r\n    }\r\n    function balanceOf(address src) public view returns (uint) {\r\n        return _balances[src];\r\n    }\r\n    function allowance(address src, address guy) public view returns (uint) {\r\n        return _approvals[src][guy];\r\n    }\r\n\r\n    function transfer(address dst, uint wad) public returns (bool) {\r\n        return transferFrom(msg.sender, dst, wad);\r\n    }\r\n\r\n    function transferFrom(address src, address dst, uint wad)\r\n        public\r\n        returns (bool)\r\n    {\r\n        if (src != msg.sender) {\r\n            _approvals[src][msg.sender] = sub(_approvals[src][msg.sender], wad);\r\n        }\r\n\r\n        _balances[src] = sub(_balances[src], wad);\r\n        _balances[dst] = add(_balances[dst], wad);\r\n\r\n        Transfer(src, dst, wad);\r\n\r\n        return true;\r\n    }\r\n\r\n    function approve(address guy, uint wad) public returns (bool) {\r\n        _approvals[msg.sender][guy] = wad;\r\n\r\n        Approval(msg.sender, guy, wad);\r\n\r\n        return true;\r\n    }\r\n}\r\n\r\n////// lib/ds-token/src/token.sol\r\n/// token.sol -- ERC20 implementation with minting and burning\r\n\r\n// Copyright (C) 2015, 2016, 2017  DappHub, LLC\r\n\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/* pragma solidity ^0.4.13; */\r\n\r\n/* import \"ds-stop/stop.sol\"; */\r\n\r\n/* import \"./base.sol\"; */\r\n\r\ncontract DSToken is DSTokenBase(0), DSStop {\r\n\r\n    bytes32  public  symbol;\r\n    uint256  public  decimals = 18; // standard token precision. override to customize\r\n\r\n    function DSToken(bytes32 symbol_) public {\r\n        symbol = symbol_;\r\n    }\r\n\r\n    event Mint(address indexed guy, uint wad);\r\n    event Burn(address indexed guy, uint wad);\r\n\r\n    function approve(address guy) public stoppable returns (bool) {\r\n        return super.approve(guy, uint(-1));\r\n    }\r\n\r\n    function approve(address guy, uint wad) public stoppable returns (bool) {\r\n        return super.approve(guy, wad);\r\n    }\r\n\r\n    function transferFrom(address src, address dst, uint wad)\r\n        public\r\n        stoppable\r\n        returns (bool)\r\n    {\r\n        if (src != msg.sender && _approvals[src][msg.sender] != uint(-1)) {\r\n            _approvals[src][msg.sender] = sub(_approvals[src][msg.sender], wad);\r\n        }\r\n\r\n        _balances[src] = sub(_balances[src], wad);\r\n        _balances[dst] = add(_balances[dst], wad);\r\n\r\n        Transfer(src, dst, wad);\r\n\r\n        return true;\r\n    }\r\n\r\n    function push(address dst, uint wad) public {\r\n        transferFrom(msg.sender, dst, wad);\r\n    }\r\n    function pull(address src, uint wad) public {\r\n        transferFrom(src, msg.sender, wad);\r\n    }\r\n    function move(address src, address dst, uint wad) public {\r\n        transferFrom(src, dst, wad);\r\n    }\r\n\r\n    function mint(uint wad) public {\r\n        mint(msg.sender, wad);\r\n    }\r\n    function burn(uint wad) public {\r\n        burn(msg.sender, wad);\r\n    }\r\n    function mint(address guy, uint wad) public auth stoppable {\r\n        _balances[guy] = add(_balances[guy], wad);\r\n        _supply = add(_supply, wad);\r\n        Mint(guy, wad);\r\n    }\r\n    function burn(address guy, uint wad) public auth stoppable {\r\n        if (guy != msg.sender && _approvals[guy][msg.sender] != uint(-1)) {\r\n            _approvals[guy][msg.sender] = sub(_approvals[guy][msg.sender], wad);\r\n        }\r\n\r\n        _balances[guy] = sub(_balances[guy], wad);\r\n        _supply = sub(_supply, wad);\r\n        Burn(guy, wad);\r\n    }\r\n\r\n    // Optional token name\r\n    bytes32   public  name = \"\";\r\n\r\n    function setName(bytes32 name_) public auth {\r\n        name = name_;\r\n    }\r\n}\r\n\r\n////// lib/ds-value/src/value.sol\r\n/// value.sol - a value is a simple thing, it can be get and set\r\n\r\n// Copyright (C) 2017  DappHub, LLC\r\n\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/* pragma solidity ^0.4.13; */\r\n\r\n/* import 'ds-thing/thing.sol'; */\r\n\r\ncontract DSValue is DSThing {\r\n    bool    has;\r\n    bytes32 val;\r\n    function peek() public view returns (bytes32, bool) {\r\n        return (val,has);\r\n    }\r\n    function read() public view returns (bytes32) {\r\n        var (wut, haz) = peek();\r\n        assert(haz);\r\n        return wut;\r\n    }\r\n    function poke(bytes32 wut) public note auth {\r\n        val = wut;\r\n        has = true;\r\n    }\r\n    function void() public note auth {  // unset the value\r\n        has = false;\r\n    }\r\n}\r\n\r\n////// src/vox.sol\r\n/// vox.sol -- target price feed\r\n\r\n// Copyright (C) 2016, 2017  Nikolai Mushegian <nikolai@dapphub.com>\r\n// Copyright (C) 2016, 2017  Daniel Brockman <daniel@dapphub.com>\r\n// Copyright (C) 2017        Rain Break <rainbreak@riseup.net>\r\n\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/* pragma solidity ^0.4.18; */\r\n\r\n/* import \"ds-thing/thing.sol\"; */\r\n\r\ncontract SaiVox is DSThing {\r\n    uint256  _par;\r\n    uint256  _way;\r\n\r\n    uint256  public  fix;\r\n    uint256  public  how;\r\n    uint256  public  tau;\r\n\r\n    function SaiVox(uint par_) public {\r\n        _par = fix = par_;\r\n        _way = RAY;\r\n        tau  = era();\r\n    }\r\n\r\n    function era() public view returns (uint) {\r\n        return block.timestamp;\r\n    }\r\n\r\n    function mold(bytes32 param, uint val) public note auth {\r\n        if (param == 'way') _way = val;\r\n    }\r\n\r\n    // Dai Target Price (ref per dai)\r\n    function par() public returns (uint) {\r\n        prod();\r\n        return _par;\r\n    }\r\n    function way() public returns (uint) {\r\n        prod();\r\n        return _way;\r\n    }\r\n\r\n    function tell(uint256 ray) public note auth {\r\n        fix = ray;\r\n    }\r\n    function tune(uint256 ray) public note auth {\r\n        how = ray;\r\n    }\r\n\r\n    function prod() public note {\r\n        var age = era() - tau;\r\n        if (age == 0) return;  // optimised\r\n        tau = era();\r\n\r\n        if (_way != RAY) _par = rmul(_par, rpow(_way, age));  // optimised\r\n\r\n        if (how == 0) return;  // optimised\r\n        var wag = int128(how * age);\r\n        _way = inj(prj(_way) + (fix < _par ? wag : -wag));\r\n    }\r\n\r\n    function inj(int128 x) internal pure returns (uint256) {\r\n        return x >= 0 ? uint256(x) + RAY\r\n            : rdiv(RAY, RAY + uint256(-x));\r\n    }\r\n    function prj(uint256 x) internal pure returns (int128) {\r\n        return x >= RAY ? int128(x - RAY)\r\n            : int128(RAY) - int128(rdiv(RAY, x));\r\n    }\r\n}\r\n\r\n////// src/tub.sol\r\n/// tub.sol -- simplified CDP engine (baby brother of `vat')\r\n\r\n// Copyright (C) 2017  Nikolai Mushegian <nikolai@dapphub.com>\r\n// Copyright (C) 2017  Daniel Brockman <daniel@dapphub.com>\r\n// Copyright (C) 2017  Rain Break <rainbreak@riseup.net>\r\n\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/* pragma solidity ^0.4.18; */\r\n\r\n/* import \"ds-thing/thing.sol\"; */\r\n/* import \"ds-token/token.sol\"; */\r\n/* import \"ds-value/value.sol\"; */\r\n\r\n/* import \"./vox.sol\"; */\r\n\r\ncontract SaiTubEvents {\r\n    event LogNewCup(address indexed lad, bytes32 cup);\r\n}\r\n\r\ncontract SaiTub is DSThing, SaiTubEvents {\r\n    DSToken  public  sai;  // Stablecoin\r\n    DSToken  public  sin;  // Debt (negative sai)\r\n\r\n    DSToken  public  skr;  // Abstracted collateral\r\n    ERC20    public  gem;  // Underlying collateral\r\n\r\n    DSToken  public  gov;  // Governance token\r\n\r\n    SaiVox   public  vox;  // Target price feed\r\n    DSValue  public  pip;  // Reference price feed\r\n    DSValue  public  pep;  // Governance price feed\r\n\r\n    address  public  tap;  // Liquidator\r\n    address  public  pit;  // Governance Vault\r\n\r\n    uint256  public  axe;  // Liquidation penalty\r\n    uint256  public  cap;  // Debt ceiling\r\n    uint256  public  mat;  // Liquidation ratio\r\n    uint256  public  tax;  // Stability fee\r\n    uint256  public  fee;  // Governance fee\r\n    uint256  public  gap;  // Join-Exit Spread\r\n\r\n    bool     public  off;  // Cage flag\r\n    bool     public  out;  // Post cage exit\r\n\r\n    uint256  public  fit;  // REF per SKR (just before settlement)\r\n\r\n    uint256  public  rho;  // Time of last drip\r\n    uint256         _chi;  // Accumulated Tax Rates\r\n    uint256         _rhi;  // Accumulated Tax + Fee Rates\r\n    uint256  public  rum;  // Total normalised debt\r\n\r\n    uint256                   public  cupi;\r\n    mapping (bytes32 => Cup)  public  cups;\r\n\r\n    struct Cup {\r\n        address  lad;      // CDP owner\r\n        uint256  ink;      // Locked collateral (in SKR)\r\n        uint256  art;      // Outstanding normalised debt (tax only)\r\n        uint256  ire;      // Outstanding normalised debt\r\n    }\r\n\r\n    function lad(bytes32 cup) public view returns (address) {\r\n        return cups[cup].lad;\r\n    }\r\n    function ink(bytes32 cup) public view returns (uint) {\r\n        return cups[cup].ink;\r\n    }\r\n    function tab(bytes32 cup) public returns (uint) {\r\n        return rmul(cups[cup].art, chi());\r\n    }\r\n    function rap(bytes32 cup) public returns (uint) {\r\n        return sub(rmul(cups[cup].ire, rhi()), tab(cup));\r\n    }\r\n\r\n    // Total CDP Debt\r\n    function din() public returns (uint) {\r\n        return rmul(rum, chi());\r\n    }\r\n    // Backing collateral\r\n    function air() public view returns (uint) {\r\n        return skr.balanceOf(this);\r\n    }\r\n    // Raw collateral\r\n    function pie() public view returns (uint) {\r\n        return gem.balanceOf(this);\r\n    }\r\n\r\n    //------------------------------------------------------------------\r\n\r\n    function SaiTub(\r\n        DSToken  sai_,\r\n        DSToken  sin_,\r\n        DSToken  skr_,\r\n        ERC20    gem_,\r\n        DSToken  gov_,\r\n        DSValue  pip_,\r\n        DSValue  pep_,\r\n        SaiVox   vox_,\r\n        address  pit_\r\n    ) public {\r\n        gem = gem_;\r\n        skr = skr_;\r\n\r\n        sai = sai_;\r\n        sin = sin_;\r\n\r\n        gov = gov_;\r\n        pit = pit_;\r\n\r\n        pip = pip_;\r\n        pep = pep_;\r\n        vox = vox_;\r\n\r\n        axe = RAY;\r\n        mat = RAY;\r\n        tax = RAY;\r\n        fee = RAY;\r\n        gap = WAD;\r\n\r\n        _chi = RAY;\r\n        _rhi = RAY;\r\n\r\n        rho = era();\r\n    }\r\n\r\n    function era() public constant returns (uint) {\r\n        return block.timestamp;\r\n    }\r\n\r\n    //--Risk-parameter-config-------------------------------------------\r\n\r\n    function mold(bytes32 param, uint val) public note auth {\r\n        if      (param == 'cap') cap = val;\r\n        else if (param == 'mat') { require(val >= RAY); mat = val; }\r\n        else if (param == 'tax') { require(val >= RAY); drip(); tax = val; }\r\n        else if (param == 'fee') { require(val >= RAY); drip(); fee = val; }\r\n        else if (param == 'axe') { require(val >= RAY); axe = val; }\r\n        else if (param == 'gap') { require(val >= WAD); gap = val; }\r\n        else return;\r\n    }\r\n\r\n    //--Price-feed-setters----------------------------------------------\r\n\r\n    function setPip(DSValue pip_) public note auth {\r\n        pip = pip_;\r\n    }\r\n    function setPep(DSValue pep_) public note auth {\r\n        pep = pep_;\r\n    }\r\n    function setVox(SaiVox vox_) public note auth {\r\n        vox = vox_;\r\n    }\r\n\r\n    //--Tap-setter------------------------------------------------------\r\n    function turn(address tap_) public note {\r\n        require(tap  == 0);\r\n        require(tap_ != 0);\r\n        tap = tap_;\r\n    }\r\n\r\n    //--Collateral-wrapper----------------------------------------------\r\n\r\n    // Wrapper ratio (gem per skr)\r\n    function per() public view returns (uint ray) {\r\n        return skr.totalSupply() == 0 ? RAY : rdiv(pie(), skr.totalSupply());\r\n    }\r\n    // Join price (gem per skr)\r\n    function ask(uint wad) public view returns (uint) {\r\n        return rmul(wad, wmul(per(), gap));\r\n    }\r\n    // Exit price (gem per skr)\r\n    function bid(uint wad) public view returns (uint) {\r\n        return rmul(wad, wmul(per(), sub(2 * WAD, gap)));\r\n    }\r\n    function join(uint wad) public note {\r\n        require(!off);\r\n        require(ask(wad) > 0);\r\n        require(gem.transferFrom(msg.sender, this, ask(wad)));\r\n        skr.mint(msg.sender, wad);\r\n    }\r\n    function exit(uint wad) public note {\r\n        require(!off || out);\r\n        require(gem.transfer(msg.sender, bid(wad)));\r\n        skr.burn(msg.sender, wad);\r\n    }\r\n\r\n    //--Stability-fee-accumulation--------------------------------------\r\n\r\n    // Accumulated Rates\r\n    function chi() public returns (uint) {\r\n        drip();\r\n        return _chi;\r\n    }\r\n    function rhi() public returns (uint) {\r\n        drip();\r\n        return _rhi;\r\n    }\r\n    function drip() public note {\r\n        if (off) return;\r\n\r\n        var rho_ = era();\r\n        var age = rho_ - rho;\r\n        if (age == 0) return;    // optimised\r\n        rho = rho_;\r\n\r\n        var inc = RAY;\r\n\r\n        if (tax != RAY) {  // optimised\r\n            var _chi_ = _chi;\r\n            inc = rpow(tax, age);\r\n            _chi = rmul(_chi, inc);\r\n            sai.mint(tap, rmul(sub(_chi, _chi_), rum));\r\n        }\r\n\r\n        // optimised\r\n        if (fee != RAY) inc = rmul(inc, rpow(fee, age));\r\n        if (inc != RAY) _rhi = rmul(_rhi, inc);\r\n    }\r\n\r\n\r\n    //--CDP-risk-indicator----------------------------------------------\r\n\r\n    // Abstracted collateral price (ref per skr)\r\n    function tag() public view returns (uint wad) {\r\n        return off ? fit : wmul(per(), uint(pip.read()));\r\n    }\r\n    // Returns true if cup is well-collateralized\r\n    function safe(bytes32 cup) public returns (bool) {\r\n        var pro = rmul(tag(), ink(cup));\r\n        var con = rmul(vox.par(), tab(cup));\r\n        var min = rmul(con, mat);\r\n        return pro >= min;\r\n    }\r\n\r\n\r\n    //--CDP-operations--------------------------------------------------\r\n\r\n    function open() public note returns (bytes32 cup) {\r\n        require(!off);\r\n        cupi = add(cupi, 1);\r\n        cup = bytes32(cupi);\r\n        cups[cup].lad = msg.sender;\r\n        LogNewCup(msg.sender, cup);\r\n    }\r\n    function give(bytes32 cup, address guy) public note {\r\n        require(msg.sender == cups[cup].lad);\r\n        require(guy != 0);\r\n        cups[cup].lad = guy;\r\n    }\r\n\r\n    function lock(bytes32 cup, uint wad) public note {\r\n        require(!off);\r\n        cups[cup].ink = add(cups[cup].ink, wad);\r\n        skr.pull(msg.sender, wad);\r\n        require(cups[cup].ink == 0 || cups[cup].ink > 0.005 ether);\r\n    }\r\n    function free(bytes32 cup, uint wad) public note {\r\n        require(msg.sender == cups[cup].lad);\r\n        cups[cup].ink = sub(cups[cup].ink, wad);\r\n        skr.push(msg.sender, wad);\r\n        require(safe(cup));\r\n        require(cups[cup].ink == 0 || cups[cup].ink > 0.005 ether);\r\n    }\r\n\r\n    function draw(bytes32 cup, uint wad) public note {\r\n        require(!off);\r\n        require(msg.sender == cups[cup].lad);\r\n        require(rdiv(wad, chi()) > 0);\r\n\r\n        cups[cup].art = add(cups[cup].art, rdiv(wad, chi()));\r\n        rum = add(rum, rdiv(wad, chi()));\r\n\r\n        cups[cup].ire = add(cups[cup].ire, rdiv(wad, rhi()));\r\n        sai.mint(cups[cup].lad, wad);\r\n\r\n        require(safe(cup));\r\n        require(sai.totalSupply() <= cap);\r\n    }\r\n    function wipe(bytes32 cup, uint wad) public note {\r\n        require(!off);\r\n\r\n        var owe = rmul(wad, rdiv(rap(cup), tab(cup)));\r\n\r\n        cups[cup].art = sub(cups[cup].art, rdiv(wad, chi()));\r\n        rum = sub(rum, rdiv(wad, chi()));\r\n\r\n        cups[cup].ire = sub(cups[cup].ire, rdiv(add(wad, owe), rhi()));\r\n        sai.burn(msg.sender, wad);\r\n\r\n        var (val, ok) = pep.peek();\r\n        if (ok && val != 0) gov.move(msg.sender, pit, wdiv(owe, uint(val)));\r\n    }\r\n\r\n    function shut(bytes32 cup) public note {\r\n        require(!off);\r\n        require(msg.sender == cups[cup].lad);\r\n        if (tab(cup) != 0) wipe(cup, tab(cup));\r\n        if (ink(cup) != 0) free(cup, ink(cup));\r\n        delete cups[cup];\r\n    }\r\n\r\n    function bite(bytes32 cup) public note {\r\n        require(!safe(cup) || off);\r\n\r\n        // Take on all of the debt, except unpaid fees\r\n        var rue = tab(cup);\r\n        sin.mint(tap, rue);\r\n        rum = sub(rum, cups[cup].art);\r\n        cups[cup].art = 0;\r\n        cups[cup].ire = 0;\r\n\r\n        // Amount owed in SKR, including liquidation penalty\r\n        var owe = rdiv(rmul(rmul(rue, axe), vox.par()), tag());\r\n\r\n        if (owe > cups[cup].ink) {\r\n            owe = cups[cup].ink;\r\n        }\r\n\r\n        skr.push(tap, owe);\r\n        cups[cup].ink = sub(cups[cup].ink, owe);\r\n    }\r\n\r\n    //------------------------------------------------------------------\r\n\r\n    function cage(uint fit_, uint jam) public note auth {\r\n        require(!off && fit_ != 0);\r\n        off = true;\r\n        axe = RAY;\r\n        gap = WAD;\r\n        fit = fit_;         // ref per skr\r\n        require(gem.transfer(tap, jam));\r\n    }\r\n    function flow() public note auth {\r\n        require(off);\r\n        out = true;\r\n    }\r\n}\r\n\r\n////// src/tap.sol\r\n/// tap.sol -- liquidation engine (see also `vow`)\r\n\r\n// Copyright (C) 2017  Nikolai Mushegian <nikolai@dapphub.com>\r\n// Copyright (C) 2017  Daniel Brockman <daniel@dapphub.com>\r\n// Copyright (C) 2017  Rain Break <rainbreak@riseup.net>\r\n\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/* pragma solidity ^0.4.18; */\r\n\r\n/* import \"./tub.sol\"; */\r\n\r\ncontract SaiTap is DSThing {\r\n    DSToken  public  sai;\r\n    DSToken  public  sin;\r\n    DSToken  public  skr;\r\n\r\n    SaiVox   public  vox;\r\n    SaiTub   public  tub;\r\n\r\n    uint256  public  gap;  // Boom-Bust Spread\r\n    bool     public  off;  // Cage flag\r\n    uint256  public  fix;  // Cage price\r\n\r\n    // Surplus\r\n    function joy() public view returns (uint) {\r\n        return sai.balanceOf(this);\r\n    }\r\n    // Bad debt\r\n    function woe() public view returns (uint) {\r\n        return sin.balanceOf(this);\r\n    }\r\n    // Collateral pending liquidation\r\n    function fog() public view returns (uint) {\r\n        return skr.balanceOf(this);\r\n    }\r\n\r\n\r\n    function SaiTap(SaiTub tub_) public {\r\n        tub = tub_;\r\n\r\n        sai = tub.sai();\r\n        sin = tub.sin();\r\n        skr = tub.skr();\r\n\r\n        vox = tub.vox();\r\n\r\n        gap = WAD;\r\n    }\r\n\r\n    function mold(bytes32 param, uint val) public note auth {\r\n        if (param == 'gap') gap = val;\r\n    }\r\n\r\n    // Cancel debt\r\n    function heal() public note {\r\n        if (joy() == 0 || woe() == 0) return;  // optimised\r\n        var wad = min(joy(), woe());\r\n        sai.burn(wad);\r\n        sin.burn(wad);\r\n    }\r\n\r\n    // Feed price (sai per skr)\r\n    function s2s() public returns (uint) {\r\n        var tag = tub.tag();    // ref per skr\r\n        var par = vox.par();    // ref per sai\r\n        return rdiv(tag, par);  // sai per skr\r\n    }\r\n    // Boom price (sai per skr)\r\n    function bid(uint wad) public returns (uint) {\r\n        return rmul(wad, wmul(s2s(), sub(2 * WAD, gap)));\r\n    }\r\n    // Bust price (sai per skr)\r\n    function ask(uint wad) public returns (uint) {\r\n        return rmul(wad, wmul(s2s(), gap));\r\n    }\r\n    function flip(uint wad) internal {\r\n        require(ask(wad) > 0);\r\n        skr.push(msg.sender, wad);\r\n        sai.pull(msg.sender, ask(wad));\r\n        heal();\r\n    }\r\n    function flop(uint wad) internal {\r\n        skr.mint(sub(wad, fog()));\r\n        flip(wad);\r\n        require(joy() == 0);  // can't flop into surplus\r\n    }\r\n    function flap(uint wad) internal {\r\n        heal();\r\n        sai.push(msg.sender, bid(wad));\r\n        skr.burn(msg.sender, wad);\r\n    }\r\n    function bust(uint wad) public note {\r\n        require(!off);\r\n        if (wad > fog()) flop(wad);\r\n        else flip(wad);\r\n    }\r\n    function boom(uint wad) public note {\r\n        require(!off);\r\n        flap(wad);\r\n    }\r\n\r\n    //------------------------------------------------------------------\r\n\r\n    function cage(uint fix_) public note auth {\r\n        require(!off);\r\n        off = true;\r\n        fix = fix_;\r\n    }\r\n    function cash(uint wad) public note {\r\n        require(off);\r\n        sai.burn(msg.sender, wad);\r\n        require(tub.gem().transfer(msg.sender, rmul(wad, fix)));\r\n    }\r\n    function mock(uint wad) public note {\r\n        require(off);\r\n        sai.mint(msg.sender, wad);\r\n        require(tub.gem().transferFrom(msg.sender, this, rmul(wad, fix)));\r\n    }\r\n    function vent() public note {\r\n        require(off);\r\n        skr.burn(fog());\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"heal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"skr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"vent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"cash\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"woe\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tub\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"mock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"bid\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"joy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"s2s\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"off\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vox\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fog\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"authority_\",\"type\":\"address\"}],\"name\":\"setAuthority\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sai\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"param\",\"type\":\"bytes32\"},{\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"mold\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"fix_\",\"type\":\"uint256\"}],\"name\":\"cage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fix\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"bust\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"boom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"authority\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"ask\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"tub_\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":true,\"inputs\":[{\"indexed\":true,\"name\":\"sig\",\"type\":\"bytes4\"},{\"indexed\":true,\"name\":\"guy\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"foo\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"bar\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"wad\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"fax\",\"type\":\"bytes\"}],\"name\":\"LogNote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"LogSetAuthority\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"LogSetOwner\",\"type\":\"event\"}]","ContractName":"SaiTap","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000448a5065aebb8e423f0896e6c5d525c040f59af3","Library":"","SwarmSource":"bzzr://1d5cef56d558b5c5fdeb560a0045c5bf90fe5020537776c583d9a1ceb09f945c"}]}