{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\n// @title ICO Simple Contract\r\n// @author Harsh Patel\r\n\r\ncontract SafeMath {\r\n\r\n    // @notice SafeMath multiply function\r\n    // @param a Variable 1\r\n    // @param b Variable 2\r\n    // @result { \"\" : \"result of safe multiply\"}\r\n    function mul(uint256 a, uint256 b) internal  returns (uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    // @notice SafeMath divide function\r\n    // @param a Variable 1\r\n    // @param b Variable 2\r\n    // @result { \"\" : \"result of safe multiply\"}\r\n    function div(uint256 a, uint256 b) internal  returns (uint256) {\r\n        assert(b > 0);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    // @notice SafeMath substract function\r\n    // @param a Variable 1\r\n    // @param b Variable 2\r\n    function sub(uint256 a, uint256 b) internal   returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    // @notice SafeMath addition function\r\n    // @param a Variable 1\r\n    // @param b Variable 2\r\n    function add(uint256 a, uint256 b) internal  returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n\r\n    // @notice SafeMath Power function\r\n    // @param a Variable 1\r\n    // @param b Variable 2\r\n    function pow( uint256 a , uint8 b ) internal returns ( uint256 ){\r\n        uint256 c;\r\n        c = a ** b;\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract owned {\r\n\r\n    bool public OwnerDefined = false;\r\n    address public owner;\r\n    event OwnerEvents(address _addr, uint8 action);\r\n\r\n    // @notice Initializes Owner Contract and set the first Owner\r\n    function owned()\r\n        internal\r\n    {\r\n        require(OwnerDefined == false);\r\n        owner = msg.sender;\r\n        OwnerDefined = true;\r\n        OwnerEvents(msg.sender,1);\r\n    }\r\n\r\n    // @notice Transfers the ownership of owner\r\n    // @param newOwner Address of the new owner\r\n    function transferOwnership( address newOwner )\r\n        external\r\n    {\r\n        require(msg.sender == owner);\r\n        require(newOwner != address(0));\r\n        owner = newOwner;\r\n        OwnerEvents(msg.sender,2);\r\n    }\r\n}\r\n\r\ncontract ERC20Token is owned, SafeMath{\r\n\r\n    // Token Definitions\r\n    bool public tokenState;\r\n    string public name = \"DropDeck\";\r\n    string public symbol = \"DDD\";\r\n    uint256 public decimals = 8;\r\n    uint256 public totalSupply = 380000000000000000;\r\n    uint256 public blocktime;\r\n    address public ico;\r\n\r\n    mapping(address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n    // @notice Initialize the Token Contract\r\n    // @param _name Name of Token\r\n    // @param _code Short Code of the Token\r\n    // @param _decimals Amount of Decimals for the Token\r\n    // @param _netSupply TotalSupply of Tokens\r\n    function init( uint256 _blocktime,address _ico)\r\n        external\r\n    returns ( bool ){\r\n        require(tokenState == false);\r\n        owned;\r\n        tokenState = true;\r\n        balances[msg.sender] = totalSupply;\r\n        blocktime = _blocktime;\r\n        ico = _ico;\r\n        return true;\r\n    }\r\n\r\n    // @notice Transfers the token\r\n    // @param _to Address of reciver\r\n    // @param _value Value to be transfered\r\n    function transfer(address _to, uint256 _value)\r\n        public\r\n    returns ( bool ) {\r\n        require(tokenState == true);\r\n        require(_to != address(0));\r\n        require(_value <= balances[msg.sender]);\r\n        require(block.number >= blocktime);\r\n        balances[msg.sender] = sub(balances[msg.sender],_value);\r\n        balances[_to] = add(balances[_to],_value);\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n    // @notice Transfers the token on behalf of\r\n    // @param _from Address of sender\r\n    // @param _to Address of reciver\r\n    // @param _value Value to be transfered\r\n    function transferFrom(address _from, address _to, uint256 _value)\r\n        public\r\n    {\r\n        require(_to != address(0));\r\n        require(_value <= balances[_from]);\r\n        require(_value <= allowed[_from][msg.sender]);\r\n\r\n        balances[_from] = sub(balances[_from],_value);\r\n        balances[_to] = add(balances[_to],_value);\r\n        allowed[_from][msg.sender] = sub(allowed[_from][msg.sender],_value);\r\n        Transfer(_from, _to, _value);\r\n\r\n    }\r\n\r\n    // @notice Transfers the token from owner during the ICO\r\n    // @param _to Address of reciver\r\n    // @param _value Value to be transfered\r\n    function transferICO(address _to, uint256 _value)\r\n        public\r\n    returns ( bool ) {\r\n        require(tokenState == true);\r\n        require(_to != address(0));\r\n        require(_value <= balances[owner]);\r\n        require(ico == msg.sender);\r\n        balances[owner] = sub(balances[owner],_value);\r\n        balances[_to] = add(balances[_to],_value);\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    // @notice Checks balance of Address\r\n    // @param _to Address of token holder\r\n    function balanceOf(address _owner)\r\n        external\r\n        constant\r\n    returns (uint256) {\r\n        require(tokenState == true);\r\n        return balances[_owner];\r\n    }\r\n\r\n    // @notice Approves allowance for token holder\r\n    // @param _spender Address of token holder\r\n    // @param _value Amount of Token Transfer to approve\r\n    function approve(address _spender, uint256 _value)\r\n        external\r\n    returns (bool success) {\r\n        require(tokenState == true);\r\n        require(_spender != address(0));\r\n        require(msg.sender == owner);\r\n        allowed[msg.sender][_spender] = mul(_value, 100000000);\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    // @notice Fetched Allowance for owner\r\n    // @param _spender Address of token holder\r\n    // @param _owner Amount of token owner\r\n    function allowance(address _owner, address _spender)\r\n        external\r\n        constant\r\n    returns (uint256 remaining) {\r\n        require(tokenState == true);\r\n        return allowed[_owner][_spender];\r\n    }\r\n}\r\ncontract tokenContract is ERC20Token{\r\n\r\n}\r\n\r\ncontract DDDico is SafeMath {\r\n\r\n    tokenContract token;\r\n\r\n    bool public state;\r\n\r\n    address public wallet;\r\n    address public tokenAddress;\r\n    address public owner;\r\n\r\n    uint256 public weiRaised;\r\n    uint256 public hardCap;\r\n    uint256 public tokenSale;\r\n    uint256 public tokenLeft;\r\n    uint256 public applicableRate;\r\n    uint256 weiAmount;\r\n    uint256 tok;\r\n\r\n    uint256 public block0 = 4644650;\r\n    uint256 public block1 = 4644890;\r\n    uint256 public block2 = 4650650;\r\n    uint256 public block3 = 4690970;\r\n    uint256 public block4 = 4731290;\r\n    uint256 public block5 = 4771610;\r\n    uint256 public block6 = 4811930;\r\n\r\n    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n\r\n    // @notice Initializes a ICO Contract\r\n    // @param _hardCap Specifies hard cap for ICO in wei\r\n    // @param _wallet Address of the multiSig wallet\r\n    // @param _token Address of the Token Contract\r\n    function DDDico( address _wallet, address _token , uint256 _hardCap, uint256 _tokenSale ) {\r\n        require(_wallet != address(0));\r\n        state = true;\r\n        owner = msg.sender;\r\n        wallet = _wallet;\r\n        tokenAddress = _token;\r\n        token = tokenContract(tokenAddress);\r\n        hardCap = mul(_hardCap,pow(10,16));\r\n        tokenSale = mul(_tokenSale,pow(10,8));\r\n        tokenLeft = tokenSale;\r\n    }\r\n\r\n    // @notice Fallback function to invest in ICO\r\n    function () payable {\r\n        buyTokens();\r\n    }\r\n\r\n    // @notice Buy Token Function to purchase tokens in ICO\r\n    function buyTokens() public payable {\r\n        require(validPurchase());\r\n        weiAmount               = 0;\r\n        tok                     = 0;\r\n        weiAmount               = msg.value;\r\n        tok                     = div(mul(weiAmount,fetchRate()),pow(10,16));\r\n        weiRaised               = add(weiRaised,weiAmount);\r\n        tokenLeft               = sub(tokenLeft,tok);\r\n        token.transferICO(msg.sender,tok);\r\n        TokenPurchase(msg.sender, msg.sender, weiAmount, tok);\r\n        forwardFunds();\r\n    }\r\n\r\n    // @notice Function to forward incomming funds to multi-sig wallet\r\n    function forwardFunds() internal {\r\n        wallet.transfer(msg.value);\r\n    }\r\n\r\n    // @notice Validates the purchase\r\n    function validPurchase() internal constant returns (bool) {\r\n        bool withinPeriod = block.number >= block0 && block.number <= block6;\r\n        bool nonZeroPurchase = msg.value != 0;\r\n        bool cap = weiRaised <= hardCap;\r\n        return withinPeriod && nonZeroPurchase && cap;\r\n    }\r\n\r\n    // @notice Calculates the rate based on slabs\r\n    function fetchRate() constant returns (uint256){\r\n        if( block0 <= block.number && block1 > block.number ){\r\n            applicableRate = 18700000000;\r\n            return applicableRate;\r\n        }\r\n        if ( block1 <= block.number && block2 > block.number ){\r\n            applicableRate = 16700000000;\r\n            return applicableRate;\r\n        }\r\n        if ( block2 <= block.number && block3 > block.number ){\r\n            applicableRate = 15000000000;\r\n            return applicableRate;\r\n        }\r\n        if ( block3 <= block.number && block4 > block.number ){\r\n            applicableRate = 13600000000;\r\n            return applicableRate;\r\n        }\r\n        if ( block4 <= block.number && block5 > block.number ){\r\n            applicableRate = 12500000000;\r\n            return applicableRate;\r\n        }\r\n        if ( block5 <= block.number && block6 > block.number ){\r\n            applicableRate = 11500000000;\r\n            return applicableRate;\r\n        }\r\n    }\r\n\r\n    // @notice Checks weather ICO has ended or not\r\n    function hasEnded() public constant returns (bool)\r\n    {\r\n        return block.number > block6;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferICO\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ico\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"blocktime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"OwnerDefined\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_blocktime\",\"type\":\"uint256\"},{\"name\":\"_ico\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenState\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"action\",\"type\":\"uint8\"}],\"name\":\"OwnerEvents\",\"type\":\"event\"}]","ContractName":"tokenContract","CompilerVersion":"v0.4.11+commit.68ef5810","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://943b34a80c5bee91fecb240efad67d89c165ee48dacdd0181c7b024e2da64bdf"}]}