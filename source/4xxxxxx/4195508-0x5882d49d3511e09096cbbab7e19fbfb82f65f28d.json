{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n * https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts/math/SafeMath.sol\r\n */\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    function Ownable() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        if (msg.sender != owner) {\r\n            revert();\r\n        }\r\n        _;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) onlyOwner {\r\n        if (newOwner != address(0)) {\r\n            owner = newOwner;\r\n        }\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 {\r\n    uint256 public tokenTotalSupply;\r\n\r\n    function balanceOf(address who) constant returns(uint256);\r\n\r\n    function allowance(address owner, address spender) constant returns(uint256);\r\n\r\n    function transfer(address to, uint256 value) returns (bool success);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function transferFrom(address from, address to, uint256 value) returns (bool success);\r\n\r\n    function approve(address spender, uint256 value) returns (bool success);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    function totalSupply() constant returns (uint256 availableSupply);\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implemantation of the basic standart token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract BioToken is ERC20, Ownable {\r\n    using SafeMath for uint;\r\n\r\n    string public name = \"BIONT Token\";\r\n    string public symbol = \"BIONT\";\r\n    uint public decimals = 18;\r\n\r\n    bool public tradingStarted = false;\r\n    bool public mintingFinished = false;\r\n    bool public salePaused = false;\r\n\r\n    uint256 public tokenTotalSupply = 0;\r\n    uint256 public trashedTokens = 0;\r\n    uint256 public hardcap = 140000000 * (10 ** decimals); // 140 million tokens\r\n    uint256 public ownerTokens = 14000000 * (10 ** decimals); // 14 million tokens\r\n\r\n    uint public ethToToken = 300; // 1 eth buys 300 tokens\r\n    uint public noContributors = 0;\r\n\r\n    uint public start = 1503346080; // 08/21/2017 @ 20:08pm (UTC)\r\n    uint public initialSaleEndDate = start + 9 weeks;\r\n    uint public ownerGrace = initialSaleEndDate + 182 days;\r\n    uint public fiveYearGrace = initialSaleEndDate + 5 * 365 days;\r\n\r\n    address public multisigVault;\r\n    address public lockedVault;\r\n    address public ownerVault;\r\n\r\n    address public authorizerOne;\r\n    address public authorizerTwo;\r\n\r\n    mapping(address => uint256) balances;\r\n    mapping(address => mapping(address => uint256)) allowed;\r\n    mapping(address => uint256) authorizedWithdrawal;\r\n\r\n    event Mint(address indexed to, uint256 value);\r\n    event MintFinished();\r\n    event TokenSold(address recipient, uint256 ether_amount, uint256 pay_amount, uint256 exchangerate);\r\n    event MainSaleClosed();\r\n\r\n    /**\r\n     * @dev Fix for the ERC20 short address attack.\r\n     */\r\n    modifier onlyPayloadSize(uint size) {\r\n        if (msg.data.length < size + 4) {\r\n            revert();\r\n        }\r\n        _;\r\n    }\r\n\r\n    modifier canMint() {\r\n        if (mintingFinished) {\r\n            revert();\r\n        }\r\n\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev modifier that throws if trading has not started yet\r\n     */\r\n    modifier hasStartedTrading() {\r\n        require(tradingStarted);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev modifier to allow token creation only when the sale IS ON\r\n     */\r\n    modifier saleIsOn() {\r\n        require(now > start && now < initialSaleEndDate && salePaused == false);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev modifier to allow token creation only when the hardcap has not been reached\r\n     */\r\n    modifier isUnderHardCap() {\r\n        require(tokenTotalSupply <= hardcap);\r\n        _;\r\n    }\r\n\r\n    function BioToken(address _ownerVault, address _authorizerOne, address _authorizerTwo, address _lockedVault, address _multisigVault) {\r\n        ownerVault = _ownerVault;\r\n        authorizerOne = _authorizerOne;\r\n        authorizerTwo = _authorizerTwo;\r\n        lockedVault = _lockedVault;\r\n        multisigVault = _multisigVault;\r\n\r\n        mint(ownerVault, ownerTokens);\r\n    }\r\n\r\n    /**\r\n     * @dev Function to mint tokens\r\n     * @param _to The address that will recieve the minted tokens.\r\n     * @param _amount The amount of tokens to mint.\r\n     * @return A boolean that indicates if the operation was successful.\r\n     */\r\n    function mint(address _to, uint256 _amount) private canMint returns(bool) {\r\n        tokenTotalSupply = tokenTotalSupply.add(_amount);\r\n\r\n        require(tokenTotalSupply <= hardcap);\r\n\r\n        balances[_to] = balances[_to].add(_amount);\r\n        noContributors = noContributors.add(1);\r\n        Mint(_to, _amount);\r\n        Transfer(this, _to, _amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to mint tokens\r\n     * @param _to The address that will recieve the minted tokens.\r\n     * @param _amount The amount of tokens to mint.\r\n     * @return A boolean that indicates if the operation was successful.\r\n     */\r\n    function masterMint(address _to, uint256 _amount) public canMint onlyOwner returns(bool) {\r\n        tokenTotalSupply = tokenTotalSupply.add(_amount);\r\n\r\n        require(tokenTotalSupply <= hardcap);\r\n\r\n        balances[_to] = balances[_to].add(_amount);\r\n        noContributors = noContributors.add(1);\r\n        Mint(_to, _amount);\r\n        Transfer(this, _to, _amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to stop minting new tokens.\r\n     * @return True if the operation was successful.\r\n     */\r\n    function finishMinting() private onlyOwner returns(bool) {\r\n        mintingFinished = true;\r\n        MintFinished();\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev transfer token for a specified address\r\n     * @param _to The address to transfer to.\r\n     * @param _value The amount to be transferred.\r\n     */\r\n    function transfer(address _to, uint256 _value) onlyPayloadSize(2 * 32) hasStartedTrading returns (bool success) {\r\n        // don't allow the vault to make transfers\r\n        if (msg.sender == lockedVault && now < fiveYearGrace) {\r\n            revert();\r\n        }\r\n\r\n        // owner needs to wait as well\r\n        if (msg.sender == ownerVault && now < ownerGrace) {\r\n            revert();\r\n        }\r\n\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        Transfer(msg.sender, _to, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another\r\n     * @param _from address The address which you want to send tokens from\r\n     * @param _to address The address which you want to transfer to\r\n     * @param _value uint256 the amout of tokens to be transfered\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) onlyPayloadSize(3 * 32) hasStartedTrading returns (bool success) {\r\n        if (_from == lockedVault && now < fiveYearGrace) {\r\n            revert();\r\n        }\r\n\r\n        // owner needs to wait as well\r\n        if (_from == ownerVault && now < ownerGrace) {\r\n            revert();\r\n        }\r\n\r\n        var _allowance = allowed[_from][msg.sender];\r\n\r\n        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n        // if (_value > _allowance) throw;\r\n\r\n        balances[_to] = balances[_to].add(_value);\r\n        balances[_from] = balances[_from].sub(_value);\r\n        allowed[_from][msg.sender] = _allowance.sub(_value);\r\n        Transfer(_from, _to, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another according to off exchange agreements\r\n     * @param _from address The address which you want to send tokens from\r\n     * @param _to address The address which you want to transfer to\r\n     * @param _value uint256 the amount of tokens to be transferred\r\n     */\r\n    function masterTransferFrom(address _from, address _to, uint256 _value) onlyPayloadSize(3 * 32) public hasStartedTrading onlyOwner returns (bool success) {\r\n        if (_from == lockedVault && now < fiveYearGrace) {\r\n            revert();\r\n        }\r\n\r\n        // owner needs to wait as well\r\n        if (_from == ownerVault && now < ownerGrace) {\r\n            revert();\r\n        }\r\n\r\n        balances[_to] = balances[_to].add(_value);\r\n        balances[_from] = balances[_from].sub(_value);\r\n        Transfer(_from, _to, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n    function totalSupply() constant returns (uint256 availableSupply) {\r\n        return tokenTotalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the balance of the specified address.\r\n     * @param _owner The address to query the the balance of.\r\n     * @return An uint256 representing the amount owned by the passed address.\r\n     */\r\n    function balanceOf(address _owner) constant returns(uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    /**\r\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _value The amount of tokens to be spent.\r\n     */\r\n    function approve(address _spender, uint256 _value) returns (bool success) {\r\n\r\n        // To change the approve amount you first have to reduce the addresses`\r\n        //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n        //  already 0 to mitigate the race condition described here:\r\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n        if ((_value != 0) && (allowed[msg.sender][_spender] != 0)) {\r\n            revert();\r\n        }\r\n\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to check the amount of tokens than an owner allowed to a spender.\r\n     * @param _owner address The address which owns the funds.\r\n     * @param _spender address The address which will spend the funds.\r\n     * @return A uint256 specifying the amount of tokens still available for the spender.\r\n     */\r\n    function allowance(address _owner, address _spender) constant returns(uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the owner to enable the trading. This can not be undone\r\n     */\r\n    function startTrading() onlyOwner {\r\n        tradingStarted = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the owner to enable the trading. This can not be undone\r\n     */\r\n    function pauseSale() onlyOwner {\r\n        salePaused = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the owner to enable the trading. This can not be undone\r\n     */\r\n    function resumeSale() onlyOwner {\r\n        salePaused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the owner to enable the trading. This can not be undone\r\n     */\r\n    function getNoContributors() constant returns(uint contributors) {\r\n        return noContributors;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the owner to set the multisig wallet address.\r\n     * @param _multisigVault the multisig wallet address\r\n     */\r\n    function setMultisigVault(address _multisigVault) public onlyOwner {\r\n        if (_multisigVault != address(0)) {\r\n            multisigVault = _multisigVault;\r\n        }\r\n    }\r\n\r\n    function setAuthorizedWithdrawalAmount(uint256 _amount) public {\r\n        if (_amount < 0) {\r\n            revert();\r\n        }\r\n\r\n        if (msg.sender != authorizerOne && msg.sender != authorizerTwo) {\r\n            revert();\r\n        }\r\n\r\n        authorizedWithdrawal[msg.sender] = _amount;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the owner to send the funds to the vault.\r\n     * @param _amount the amount in wei to send\r\n     */\r\n    function withdrawEthereum(uint256 _amount) public onlyOwner {\r\n        require(multisigVault != address(0));\r\n        require(_amount <= this.balance); // wei\r\n\r\n        if (authorizedWithdrawal[authorizerOne] != authorizedWithdrawal[authorizerTwo]) {\r\n            revert();\r\n        }\r\n\r\n        if (_amount > authorizedWithdrawal[authorizerOne]) {\r\n            revert();\r\n        }\r\n\r\n        if (!multisigVault.send(_amount)) {\r\n            revert();\r\n        }\r\n\r\n        authorizedWithdrawal[authorizerOne] = authorizedWithdrawal[authorizerOne].sub(_amount);\r\n        authorizedWithdrawal[authorizerTwo] = authorizedWithdrawal[authorizerTwo].sub(_amount);\r\n    }\r\n\r\n    function showAuthorizerOneAmount() constant public returns(uint256 remaining) {\r\n        return authorizedWithdrawal[authorizerOne];\r\n    }\r\n\r\n    function showAuthorizerTwoAmount() constant public returns(uint256 remaining) {\r\n        return authorizedWithdrawal[authorizerTwo];\r\n    }\r\n\r\n    function showEthBalance() constant public returns(uint256 remaining) {\r\n        return this.balance;\r\n    }\r\n\r\n    function retrieveTokens() public onlyOwner {\r\n        require(lockedVault != address(0));\r\n\r\n        uint256 capOut = hardcap.sub(tokenTotalSupply);\r\n        tokenTotalSupply = hardcap;\r\n\r\n        balances[lockedVault] = balances[lockedVault].add(capOut);\r\n        Transfer(this, lockedVault, capOut);\r\n    }\r\n\r\n    function trashTokens(address _from, uint256 _amount) onlyOwner returns(bool) {\r\n        balances[_from] = balances[_from].sub(_amount);\r\n        trashedTokens = trashedTokens.add(_amount);\r\n        tokenTotalSupply = tokenTotalSupply.sub(_amount);\r\n    }\r\n\r\n    function decreaseSupply(uint256 value, address from) onlyOwner returns (bool) {\r\n      balances[from] = balances[from].sub(value);\r\n      trashedTokens = trashedTokens.add(value);\r\n      tokenTotalSupply = tokenTotalSupply.sub(value);\r\n      Transfer(from, 0, value);\r\n      return true;\r\n    }\r\n\r\n    function finishSale() public onlyOwner {\r\n        finishMinting();\r\n        retrieveTokens();\r\n        startTrading();\r\n\r\n        MainSaleClosed();\r\n    }\r\n\r\n    function saleOn() constant returns(bool) {\r\n        return (now > start && now < initialSaleEndDate && salePaused == false);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows anyone to create tokens by depositing ether.\r\n     * @param recipient the recipient to receive tokens.\r\n     */\r\n    function createTokens(address recipient) public isUnderHardCap saleIsOn payable {\r\n        uint bonus = 0;\r\n        uint period = 1 weeks;\r\n        uint256 tokens;\r\n\r\n        if (now <= start + 2 * period) {\r\n            bonus = 20;\r\n        } else if (now > start + 2 * period && now <= start + 3 * period) {\r\n            bonus = 15;\r\n        } else if (now > start + 3 * period && now <= start + 4 * period) {\r\n            bonus = 10;\r\n        } else if (now > start + 4 * period && now <= start + 5 * period) {\r\n            bonus = 5;\r\n        }\r\n\r\n        // the bonus is in percentages, solidity is doing standard integer division, basically rounding 'down'\r\n        if (bonus > 0) {\r\n            tokens = ethToToken.mul(msg.value) + ethToToken.mul(msg.value).mul(bonus).div(100);\r\n        } else {\r\n            tokens = ethToToken.mul(msg.value);\r\n        }\r\n\r\n        if (tokens <= 0) {\r\n            revert();\r\n        }\r\n\r\n        mint(recipient, tokens);\r\n\r\n        TokenSold(recipient, msg.value, tokens, ethToToken);\r\n    }\r\n\r\n    function() external payable {\r\n        createTokens(msg.sender);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"trashTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"masterTransferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_multisigVault\",\"type\":\"address\"}],\"name\":\"setMultisigVault\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"authorizerTwo\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"availableSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"authorizerOne\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"masterMint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"showAuthorizerTwoAmount\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerVault\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startTrading\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"resumeSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setAuthorizedWithdrawalAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"showEthBalance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pauseSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tradingStarted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"salePaused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getNoContributors\",\"outputs\":[{\"name\":\"contributors\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"retrieveTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"showAuthorizerOneAmount\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleOn\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethToToken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerGrace\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"from\",\"type\":\"address\"}],\"name\":\"decreaseSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fiveYearGrace\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hardcap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"trashedTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockedVault\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"start\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialSaleEndDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"createTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"multisigVault\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"noContributors\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenTotalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawEthereum\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_ownerVault\",\"type\":\"address\"},{\"name\":\"_authorizerOne\",\"type\":\"address\"},{\"name\":\"_authorizerTwo\",\"type\":\"address\"},{\"name\":\"_lockedVault\",\"type\":\"address\"},{\"name\":\"_multisigVault\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ether_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"pay_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"exchangerate\",\"type\":\"uint256\"}],\"name\":\"TokenSold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MainSaleClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"BioToken","CompilerVersion":"v0.4.16+commit.d7661dd9","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000005DfEdD3F1FcbDa2198215c146842156cF40aC87C00000000000000000000000038eE1a560431CC286b392861c8388D98242629a40000000000000000000000002Db05b0DC4EED2696121f91625A89fffAfAEc77E00000000000000000000000098868E7185F7f2c2F3954F6daf8AD328Fa43C5Bc0000000000000000000000002Db05b0DC4EED2696121f91625A89fffAfAEc77E","Library":"","SwarmSource":"bzzr://36a0d711be4a3e0690ec6553c5ce076a772dd288d98c537621ef141753d1642a"}]}