{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.17;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n    uint256 public totalSupply;\r\n    function balanceOf(address who) constant returns (uint256);\r\n    function transfer(address to, uint256 value) returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances. \r\n */\r\ncontract BasicToken is ERC20Basic {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) balances;\r\n\r\n    /**\r\n    * @dev transfer token for a specified address\r\n    * @param _to The address to transfer to.\r\n    * @param _value The amount to be transferred.\r\n    */\r\n    function transfer(address _to, uint256 _value) returns (bool) {\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the balance of the specified address.\r\n    * @param _owner The address to query the the balance of. \r\n    * @return An uint256 representing the amount owned by the passed address.\r\n    */\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n    function allowance(address owner, address spender) constant returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value) returns (bool);\r\n    function approve(address spender, uint256 value) returns (bool);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    /**\r\n    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n    * account.\r\n    */\r\n    function Ownable() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n    * @dev Throws if called by any account other than the owner.\r\n    */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n    * @param newOwner The address to transfer ownership to.\r\n    */\r\n    function transferOwnership(address newOwner) onlyOwner {\r\n        if (newOwner != address(0)) {\r\n            owner = newOwner;\r\n        }\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardMintableToken is ERC20, BasicToken, Ownable {\r\n\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n  \r\n    event Mint(address indexed to, uint256 amount);\r\n    event MintFinished();\r\n\r\n    bool public mintingFinished = false;\r\n\r\n    modifier canMint() {\r\n        require(!mintingFinished);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Transfer tokens from one address to another\r\n    * @param _from address The address which you want to send tokens from\r\n    * @param _to address The address which you want to transfer to\r\n    * @param _value uint256 the amout of tokens to be transfered\r\n    */\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\r\n        var _allowance = allowed[_from][msg.sender];\r\n\r\n        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n        // require (_value <= _allowance);\r\n\r\n        balances[_to] = balances[_to].add(_value);\r\n        balances[_from] = balances[_from].sub(_value);\r\n        allowed[_from][msg.sender] = _allowance.sub(_value);\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n    * @param _spender The address which will spend the funds.\r\n    * @param _value The amount of tokens to be spent.\r\n    */\r\n    function approve(address _spender, uint256 _value) returns (bool) {\r\n\r\n    // To change the approve amount you first have to reduce the addresses`\r\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n    //  already 0 to mitigate the race condition described here:\r\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n    * @param _owner address The address which owns the funds.\r\n    * @param _spender address The address which will spend the funds.\r\n    * @return A uint256 specifing the amount of tokens still avaible for the spender.\r\n    */\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n  \r\n   /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n    function mint(address _to, uint256 _amount) onlyOwner canMint returns (bool) {\r\n        totalSupply = totalSupply.add(_amount);\r\n        balances[_to] = balances[_to].add(_amount);\r\n        Mint(_to, _amount);\r\n        Transfer(0x0, _to, _amount); // so it is displayed properly on EtherScan\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n    * @dev Function to stop minting new tokens.\r\n    * @return True if the operation was successful.\r\n    */\r\n    function finishMinting() onlyOwner returns (bool) {\r\n        mintingFinished = true;\r\n        MintFinished();\r\n        return true;\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title Slot Ticket\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\r\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n */\r\n \r\ncontract SlotTicket is StandardMintableToken {\r\n\r\n    string public name = \"Slot Ticket\";\r\n    uint8 public decimals = 0;\r\n    string public symbol = \"TICKET\";\r\n    string public version = \"0.7\";\r\n\r\n    function destroy() onlyOwner {\r\n        selfdestruct(owner);\r\n    }\r\n}\r\n\r\n/**  \r\n *  @title Slot\r\n *  @dev every participant has an account index, the winners are picked from here\r\n *  all winners are picked in order from the single random int \r\n *  needs to be cleared after every game \r\n */\r\n     \r\ncontract Slot is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    uint8   constant SIZE =           100;        // size of the lottery\r\n    uint32  constant JACKPOT_CHANCE = 1000000;    // one in a million\r\n    uint32  constant INACTIVITY =     160000;     // blocks after which refunds can be claimed\r\n    uint256 constant PRICE =          100 finney;\r\n    uint256 constant JACK_DIST =      249 finney;\r\n    uint256 constant DIV_DIST =       249 finney;\r\n    uint256 constant GAS_REFUND =     2 finney;\r\n\r\n    /* \r\n    *  every participant has an account index, the winners are picked from here\r\n    *  all winners are picked in order from the single random int \r\n    *  needs to be cleared after every game\r\n    */\r\n    mapping (uint => mapping (uint => address)) public participants; // game number => counter => address\r\n    SlotTicket public ticket; // this is a receipt for the ticket, it wont affect the prize distribution\r\n    uint256 public jackpotAmount;\r\n    uint256 public gameIndex;\r\n    uint256 public gameStartedAtBlock;\r\n    address public fund; // address to send dividends\r\n    uint256[8] public prizes = [4 ether, \r\n                                2 ether,\r\n                                1 ether, \r\n                                500 finney, \r\n                                500 finney, \r\n                                500 finney, \r\n                                500 finney, \r\n                                500 finney];\r\n    uint256 counter;\r\n\r\n    event ParticipantAdded(address indexed _participant, uint256 indexed _game, uint256 indexed _number);\r\n    event PrizeAwarded(uint256 indexed _game , address indexed _winner, uint256 indexed _amount);\r\n    event JackpotAwarded(uint256 indexed _game, address indexed _winner, uint256 indexed _amount);\r\n    event GameRefunded(uint256 _game);\r\n\r\n    function Slot(address _fundAddress) payable { // address _ticketAddress\r\n        ticket = new SlotTicket();\r\n        fund = _fundAddress;\r\n\r\n        jackpotAmount = msg.value;\r\n        gameIndex = 0;\r\n        counter = 0;\r\n        gameStartedAtBlock = block.number;\r\n    }\r\n\r\n    function() payable {\r\n        buyTicketsFor(msg.sender);\r\n    }\r\n\r\n    function buyTicketsFor(address _beneficiary) public payable {\r\n        require(_beneficiary != 0x0);\r\n        require(msg.value >= PRICE);\r\n\r\n        // calculate number of tickets, issue tokens and add participant\r\n        // every (PRICE) buys a ticket, the rest is returned\r\n        uint256 change = msg.value%PRICE;\r\n        uint256 numberOfTickets = msg.value.sub(change).div(PRICE);\r\n        ticket.mint(_beneficiary, numberOfTickets);\r\n        addParticipant(_beneficiary, numberOfTickets);\r\n\r\n        // Return change to msg.sender\r\n        msg.sender.transfer(change);\r\n    }\r\n\r\n    /* private functions */\r\n\r\n    function addParticipant(address _participant, uint256 _numberOfTickets) private {\r\n        // if number of tickets exceeds the size of the game, tickets are added to next game\r\n\r\n        for (uint256 i = 0; i < _numberOfTickets; i++) {\r\n            // using gameIndex instead of counter/SIZE since games can be cancelled\r\n            participants[gameIndex][counter%SIZE] = _participant; \r\n            ParticipantAdded(_participant, gameIndex, counter%SIZE);\r\n\r\n            // msg.sender triggers the drawing of lots\r\n            if (++counter%SIZE == 0) {\r\n                awardPrizes();\r\n                // Split the rest, increase game number\r\n                distributeRemaining();\r\n                increaseGame();\r\n            }\r\n            // loop continues if there are more tickets\r\n        }\r\n    }\r\n    \r\n    function awardPrizes() private {\r\n        uint256 hashNumber = uint256(keccak256(block.blockhash(block.number-1)));\r\n\r\n        // get the winning number\r\n        uint256 winnerIndex = hashNumber%SIZE;\r\n\r\n        // get jackpot winner, hash result of last two digit number (index) with 4 preceding zeroes will win\r\n        uint256 jackpotNumber = hashNumber%JACKPOT_CHANCE;\r\n        if (winnerIndex == jackpotNumber) {\r\n            distributeJackpot(winnerIndex);\r\n        }\r\n\r\n        // loop throught the prizes \r\n        for (uint8 i = 0; i < prizes.length; i++) {\r\n            // GAS: 21000 Paid for every transaction. (prizes.length)\r\n            participants[gameIndex][winnerIndex%SIZE].transfer(prizes[i]); // msg.sender pays the gas, he's refunded later, % to wrap around\r\n            PrizeAwarded(gameIndex, participants[gameIndex][winnerIndex%SIZE], prizes[i]);\r\n\r\n            // increment index to the next winner to receive the next prize\r\n            winnerIndex++;\r\n        }\r\n    }\r\n\r\n    function distributeJackpot(uint256 _winnerIndex) private {\r\n        uint256 amount = jackpotAmount;\r\n        jackpotAmount = 0; // later on in the code sequence funds will be added\r\n\r\n        participants[gameIndex][_winnerIndex].transfer(amount);\r\n        JackpotAwarded(gameIndex,  participants[gameIndex][_winnerIndex], amount);\r\n    }\r\n\r\n    function distributeRemaining() private {\r\n        jackpotAmount = jackpotAmount.add(JACK_DIST);   // add to jackpot\r\n        fund.transfer(DIV_DIST);                        // dividends are paid to SLOT investors\r\n        msg.sender.transfer(GAS_REFUND);                // repay gas to msg.sender\r\n    }\r\n\r\n    function increaseGame() private {\r\n        gameIndex++;\r\n        gameStartedAtBlock = block.number;\r\n    }\r\n\r\n    /* public functions */\r\n\r\n    function spotsLeft() public constant returns (uint8 spots) {\r\n        return SIZE - uint8(counter%SIZE);\r\n    }\r\n\r\n    function refundPlayersAfterVeryLongGame() public {\r\n        require(block.number.sub(gameStartedAtBlock) >= INACTIVITY);\r\n        require(counter%SIZE != 0); // nothing to refund\r\n        // refunds for everybody can be requested after the game has gone (INACTIVITY) blocks without a conclusion\r\n        \r\n        // Checks-Effects-Interactions pattern to avoid re-entrancy\r\n        uint256 _size = counter%SIZE; // not counter.size, but modulus of SIZE\r\n        counter -= _size;\r\n\r\n        for (uint8 i = 0; i < _size; i++) {\r\n            participants[gameIndex][i].transfer(PRICE);\r\n        }\r\n\r\n        GameRefunded(gameIndex);\r\n        increaseGame();\r\n    }\r\n\r\n    function destroy() public onlyOwner {\r\n        require(this.balance < 1 ether);\r\n\r\n        ticket.destroy();\r\n        selfdestruct(owner);\r\n    }\r\n    \r\n    function changeTicketOwner(address _newOwner) public onlyOwner {\r\n        require(_newOwner != 0x0);\r\n        // in case of new contract, old token can still be used\r\n        // the token contract owner is the slot contract itself\r\n        ticket.transferOwnership(_newOwner);\r\n    }\r\n    \r\n    function changeFund(address _newFund) public onlyOwner {\r\n        require(_newFund != 0x0);\r\n        // changes the place to send dividends to SLOT investors\r\n        fund = _newFund;\r\n    }\r\n    \r\n    function changeTicket(address _newTicket) public onlyOwner {\r\n        require(_newTicket != 0x0);\r\n        ticket = SlotTicket(_newTicket); // still owner of the ticket needs to changed to work\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"destroy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"SlotTicket","CompilerVersion":"v0.4.17+commit.bdeb9e52","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://bf5f54140692199ee632c449298ea39c49f526970017f7a5f4790578f182df5d"}]}