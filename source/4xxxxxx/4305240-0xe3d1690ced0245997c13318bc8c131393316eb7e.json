{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.15;\r\n\r\n/**\r\n * Ethino Crowdsale Contract\r\n *\r\n * This is the crowdsale contract for the Ethino token. It utilizes Majoolr's\r\n * CrowdsaleLib library to reduce custom source code surface area and increase overall\r\n * security.Majoolr provides smart contract services\r\n * and security reviews for contract deployments in addition to working on open\r\n * source projects in the Ethereum community.\r\n * For further information: ethino.com, majoolr.io\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\r\n * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\r\n * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\r\n * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\r\n * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\n\r\ncontract ENOCrowdsale {\r\n  using DirectCrowdsaleLib for DirectCrowdsaleLib.DirectCrowdsaleStorage;\r\n\r\n  DirectCrowdsaleLib.DirectCrowdsaleStorage sale;\r\n\r\n  function ENOCrowdsale(\r\n                address owner,\r\n                uint256 capAmountInCents,\r\n                uint256 startTime,\r\n                uint256 endTime,\r\n                uint256[] tokenPricePoints,\r\n                uint256 fallbackExchangeRate,\r\n                uint256 changeInterval,\r\n                uint8 percentBurn,\r\n                CrowdsaleToken token)\r\n  {\r\n  \tsale.init(owner, capAmountInCents, startTime, endTime, tokenPricePoints, fallbackExchangeRate, changeInterval, percentBurn, token);\r\n  }\r\n\r\n  /*EVENTS*/\r\n\r\n  event LogTokensBought(address indexed buyer, uint256 amount);\r\n  event LogErrorMsg(uint256 amount, string Msg);\r\n  event LogTokenPriceChange(uint256 amount, string Msg);\r\n  event LogTokensWithdrawn(address indexed _bidder, uint256 Amount);\r\n  event LogWeiWithdrawn(address indexed _bidder, uint256 Amount);\r\n  event LogOwnerEthWithdrawn(address indexed owner, uint256 amount, string Msg);\r\n  event LogNoticeMsg(address _buyer, uint256 value, string Msg);\r\n  event LogErrorMsg(string Msg);\r\n\r\n  /*FUNCTIONS*/\r\n\r\n  // fallback function can be used to buy tokens\r\n  function () payable {\r\n    sendPurchase();\r\n  }\r\n\r\n  function sendPurchase() payable returns (bool) {\r\n  \treturn sale.receivePurchase(msg.value);\r\n  }\r\n\r\n  function withdrawOwnerEth() returns (bool) {\r\n  \treturn sale.withdrawOwnerEth();\r\n  }\r\n\r\n  function setTokenExchangeRate(uint256 _exchangeRate) returns (bool) {\r\n    return sale.setTokenExchangeRate(_exchangeRate);\r\n  }\r\n\r\n  function setTokens() returns (bool) {\r\n    return sale.setTokens();\r\n  }\r\n\r\n  function withdrawTokens() returns (bool) {\r\n  \treturn sale.withdrawTokens();\r\n  }\r\n\r\n  function withdrawLeftoverWei() returns (bool) {\r\n    return sale.withdrawLeftoverWei();\r\n  }\r\n\r\n  /*GETTERS*/\r\n\r\n  function owner() constant returns (address) {\r\n    return sale.base.owner;\r\n  }\r\n\r\n  function tokensPerEth() constant returns (uint256) {\r\n    return sale.base.tokensPerEth;\r\n  }\r\n\r\n  function exchangeRate() constant returns (uint256) {\r\n    return sale.base.exchangeRate;\r\n  }\r\n\r\n  function capAmount() constant returns (uint256) {\r\n    return sale.base.capAmount;\r\n  }\r\n\r\n  function startTime() constant returns (uint256) {\r\n    return sale.base.startTime;\r\n  }\r\n\r\n  function endTime() constant returns (uint256) {\r\n    return sale.base.endTime;\r\n  }\r\n\r\n  function changeInterval() constant returns (uint256) {\r\n    return sale.changeInterval;\r\n  }\r\n\r\n  function crowdsaleActive() constant returns (bool) {\r\n  \treturn sale.crowdsaleActive();\r\n  }\r\n\r\n  function firstPriceChange() constant returns (uint256) {\r\n    return sale.tokenPricePoints[1];\r\n  }\r\n\r\n  function crowdsaleEnded() constant returns (bool) {\r\n  \treturn sale.crowdsaleEnded();\r\n  }\r\n\r\n  function ethRaised() constant returns (uint256) {\r\n    return sale.base.ownerBalance;\r\n  }\r\n\r\n  function tokensSold() constant returns (uint256) {\r\n    return sale.base.startingTokenBalance - sale.base.token.balanceOf(this);\r\n  }\r\n\r\n  function contributionAmount(address _buyer) constant returns (uint256) {\r\n  \treturn sale.base.hasContributed[_buyer];\r\n  }\r\n\r\n  function tokenPurchaseAmount(address _buyer) constant returns (uint256) {\r\n  \treturn sale.base.withdrawTokensMap[_buyer];\r\n  }\r\n\r\n  function leftoverWeiAmount(address _buyer) constant returns (uint256) {\r\n    return sale.base.leftoverWei[_buyer];\r\n  }\r\n}\r\n\r\npragma solidity ^0.4.15;\r\n\r\n/**\r\n * @title DirectCrowdsaleLib\r\n * @author Majoolr.io\r\n *\r\n * version 1.0.0\r\n * Copyright (c) 2017 Majoolr, LLC\r\n * The MIT License (MIT)\r\n * https://github.com/Majoolr/ethereum-libraries/blob/master/LICENSE\r\n *\r\n * The DirectCrowdsale Library provides functionality to create a initial coin offering\r\n * for a standard token sale with high supply where there is a direct ether to\r\n * token transfer.\r\n *\r\n * Majoolr provides smart contract services and security reviews for contract\r\n * deployments in addition to working on open source projects in the Ethereum\r\n * community. Our purpose is to test, document, and deploy reusable code onto the\r\n * blockchain and improve both security and usability. We also educate non-profits,\r\n * schools, and other community members about the application of blockchain\r\n * technology. For further information: majoolr.io\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\r\n * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\r\n * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\r\n * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\r\n * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\n\r\nlibrary DirectCrowdsaleLib {\r\n  using BasicMathLib for uint256;\r\n  using CrowdsaleLib for CrowdsaleLib.CrowdsaleStorage;\r\n\r\n  struct DirectCrowdsaleStorage {\r\n\r\n  \tCrowdsaleLib.CrowdsaleStorage base; // base storage from CrowdsaleLib\r\n\r\n    uint256[] tokenPricePoints;    // price points at each price change interval in cents/token.\r\n\r\n  \tuint256 changeInterval;      // amount of time between changes in the price of the token\r\n  \tuint256 lastPriceChangeTime;  // time of the last change in token cost\r\n  }\r\n\r\n  event LogTokensBought(address indexed buyer, uint256 amount);\r\n  event LogAddressCapExceeded(address indexed buyer, uint256 amount, string Msg);\r\n  event LogErrorMsg(uint256 amount, string Msg);\r\n  event LogTokenPriceChange(uint256 amount, string Msg);\r\n\r\n\r\n  /// @dev Called by a crowdsale contract upon creation.\r\n  /// @param self Stored crowdsale from crowdsale contract\r\n  /// @param _owner Address of crowdsale owner\r\n  /// @param _capAmountInCents Total to be raised in cents\r\n  /// @param _startTime Timestamp of sale start time\r\n  /// @param _endTime Timestamp of sale end time\r\n  /// @param _tokenPricePoints Array of each price point during sale cents/token\r\n  /// @param _fallbackExchangeRate Exchange rate of cents/ETH\r\n  /// @param _changeInterval The number of seconds between each step\r\n  /// @param _percentBurn Percentage of extra tokens to burn\r\n  /// @param _token Token being sold\r\n  function init(DirectCrowdsaleStorage storage self,\r\n                address _owner,\r\n                uint256 _capAmountInCents,\r\n                uint256 _startTime,\r\n                uint256 _endTime,\r\n                uint256[] _tokenPricePoints,\r\n                uint256 _fallbackExchangeRate,\r\n                uint256 _changeInterval,\r\n                uint8 _percentBurn,\r\n                CrowdsaleToken _token)\r\n  {\r\n  \tself.base.init(_owner,\r\n                _tokenPricePoints[0],\r\n                _fallbackExchangeRate,\r\n                _capAmountInCents,\r\n                _startTime,\r\n                _endTime,\r\n                _percentBurn,\r\n                _token);\r\n\r\n    require(_tokenPricePoints.length > 0);\r\n\r\n    // if there is no increase or decrease in price, the time interval should also be zero\r\n    if (_tokenPricePoints.length == 1) {\r\n    \trequire(_changeInterval == 0);\r\n    }\r\n    self.tokenPricePoints = _tokenPricePoints;\r\n  \tself.changeInterval = _changeInterval;\r\n  \tself.lastPriceChangeTime = _startTime;\r\n  }\r\n\r\n  /// @dev Called when an address wants to purchase tokens\r\n  /// @param self Stored crowdsale from crowdsale contract\r\n  /// @param _amount amound of wei that the buyer is sending\r\n  /// @return true on succesful purchase\r\n  function receivePurchase(DirectCrowdsaleStorage storage self, uint256 _amount) returns (bool) {\r\n    require(msg.sender != self.base.owner);\r\n  \trequire(self.base.validPurchase());\r\n\r\n    require((self.base.ownerBalance + _amount) <= self.base.capAmount);\r\n\r\n  \t// if the token price increase interval has passed, update the current day and change the token price\r\n  \tif ((self.changeInterval > 0) && (now >= (self.lastPriceChangeTime + self.changeInterval))) {\r\n  \t\tself.lastPriceChangeTime = self.lastPriceChangeTime + self.changeInterval;\r\n      uint256 index = (now-self.base.startTime)/self.changeInterval;\r\n\r\n      //prevents going out of bounds on the tokenPricePoints array\r\n      if (self.tokenPricePoints.length <= index)\r\n        index = self.tokenPricePoints.length - 1;\r\n\r\n      self.base.changeTokenPrice(self.tokenPricePoints[index]);\r\n\r\n      LogTokenPriceChange(self.base.tokensPerEth,\"Token Price has changed!\");\r\n  \t}\r\n\r\n  \tuint256 numTokens; //number of tokens that will be purchased\r\n  \tbool err;\r\n    uint256 newBalance; //the new balance of the owner of the crowdsale\r\n    uint256 weiTokens; //temp calc holder\r\n    uint256 zeros; //for calculating token\r\n    uint256 leftoverWei; //wei change for purchaser\r\n    uint256 remainder; //temp calc holder\r\n\r\n    // Find the number of tokens as a function in wei\r\n    (err,weiTokens) = _amount.times(self.base.tokensPerEth);\r\n    require(!err);\r\n\r\n    if(self.base.tokenDecimals <= 18){\r\n      zeros = 10**(18-uint256(self.base.tokenDecimals));\r\n      numTokens = weiTokens/zeros;\r\n      leftoverWei = weiTokens % zeros;\r\n      self.base.leftoverWei[msg.sender] += leftoverWei;\r\n    } else {\r\n      zeros = 10**(uint256(self.base.tokenDecimals)-18);\r\n      numTokens = weiTokens*zeros;\r\n    }\r\n\r\n    // can't overflow because it is under the cap\r\n    self.base.hasContributed[msg.sender] += _amount - leftoverWei;\r\n\r\n    require(numTokens <= self.base.token.balanceOf(this));\r\n\r\n    // calculate the amout of ether in the owners balance\r\n    (err,newBalance) = self.base.ownerBalance.plus(_amount-leftoverWei);\r\n    require(!err);\r\n\r\n    self.base.ownerBalance = newBalance;   // \"deposit\" the amount\r\n\r\n    // can't overflow because it will be under the cap\r\n\t  self.base.withdrawTokensMap[msg.sender] += numTokens;\r\n\r\n    //subtract tokens from owner's share\r\n    (err,remainder) = self.base.withdrawTokensMap[self.base.owner].minus(numTokens);\r\n    self.base.withdrawTokensMap[self.base.owner] = remainder;\r\n\r\n\t  LogTokensBought(msg.sender, numTokens);\r\n\r\n    return true;\r\n  }\r\n\r\n  /*Functions \"inherited\" from CrowdsaleLib library*/\r\n\r\n  function setTokenExchangeRate(DirectCrowdsaleStorage storage self, uint256 _exchangeRate) returns (bool) {\r\n    return self.base.setTokenExchangeRate(_exchangeRate);\r\n  }\r\n\r\n  function setTokens(DirectCrowdsaleStorage storage self) returns (bool) {\r\n    return self.base.setTokens();\r\n  }\r\n\r\n  function withdrawTokens(DirectCrowdsaleStorage storage self) returns (bool) {\r\n    return self.base.withdrawTokens();\r\n  }\r\n\r\n  function withdrawLeftoverWei(DirectCrowdsaleStorage storage self) returns (bool) {\r\n    return self.base.withdrawLeftoverWei();\r\n  }\r\n\r\n  function withdrawOwnerEth(DirectCrowdsaleStorage storage self) returns (bool) {\r\n    return self.base.withdrawOwnerEth();\r\n  }\r\n\r\n  function crowdsaleActive(DirectCrowdsaleStorage storage self) constant returns (bool) {\r\n    return self.base.crowdsaleActive();\r\n  }\r\n\r\n  function crowdsaleEnded(DirectCrowdsaleStorage storage self) constant returns (bool) {\r\n    return self.base.crowdsaleEnded();\r\n  }\r\n\r\n  function validPurchase(DirectCrowdsaleStorage storage self) constant returns (bool) {\r\n    return self.base.validPurchase();\r\n  }\r\n}\r\npragma solidity ^0.4.15;\r\n\r\n/**\r\n * Standard ERC20 token\r\n *\r\n * https://github.com/ethereum/EIPs/issues/20\r\n * Based on code by FirstBlood:\r\n * https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n *\r\n * This is an example token contract built using the Majoolr token library at\r\n * https://github.com/Majoolr/ethereum-libraries/tree/master/TokenLib. This\r\n * example does not use all of the functionality available, it is only\r\n * a barebones example of a basic ERC20 token contract.\r\n *\r\n * Majoolr provides smart contract services and security reviews for contract\r\n * deployments in addition to working on open source projects in the Ethereum\r\n * community. Our purpose is to test, document, and deploy reusable code onto the\r\n * blockchain and improve both security and usability. We also educate non-profits,\r\n * schools, and other community members about the application of blockchain\r\n * technology. For further information: majoolr.io\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\r\n * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\r\n * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\r\n * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\r\n * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\n\r\ncontract CrowdsaleToken {\r\n  using TokenLib for TokenLib.TokenStorage;\r\n\r\n  TokenLib.TokenStorage public token;\r\n\r\n  function CrowdsaleToken(address owner,\r\n                                string name,\r\n                                string symbol,\r\n                                uint8 decimals,\r\n                                uint256 initialSupply,\r\n                                bool allowMinting)\r\n  {\r\n    token.init(owner, name, symbol, decimals, initialSupply, allowMinting);\r\n  }\r\n\r\n  function name() constant returns (string) {\r\n    return token.name;\r\n  }\r\n\r\n  function symbol() constant returns (string) {\r\n    return token.symbol;\r\n  }\r\n\r\n  function decimals() constant returns (uint8) {\r\n    return token.decimals;\r\n  }\r\n\r\n  function totalSupply() constant returns (uint256) {\r\n    return token.totalSupply;\r\n  }\r\n\r\n  function initialSupply() constant returns (uint256) {\r\n    return token.INITIAL_SUPPLY;\r\n  }\r\n\r\n  function balanceOf(address who) constant returns (uint256) {\r\n    return token.balanceOf(who);\r\n  }\r\n\r\n  function allowance(address owner, address spender) constant returns (uint256) {\r\n    return token.allowance(owner, spender);\r\n  }\r\n\r\n  function transfer(address to, uint value) returns (bool ok) {\r\n    return token.transfer(to, value);\r\n  }\r\n\r\n  function transferFrom(address from, address to, uint value) returns (bool ok) {\r\n    return token.transferFrom(from, to, value);\r\n  }\r\n\r\n  function approve(address spender, uint value) returns (bool ok) {\r\n    return token.approve(spender, value);\r\n  }\r\n\r\n  function changeOwner(address newOwner) returns (bool ok) {\r\n    return token.changeOwner(newOwner);\r\n  }\r\n\r\n  function burnToken(uint256 amount) returns (bool ok) {\r\n    return token.burnToken(amount);\r\n  }\r\n}\r\n\r\npragma solidity ^0.4.15;\r\n\r\n/**\r\n * @title CrowdsaleLib\r\n * @author Majoolr.io\r\n *\r\n * version 1.0.0\r\n * Copyright (c) 2017 Majoolr, LLC\r\n * The MIT License (MIT)\r\n * https://github.com/Majoolr/ethereum-libraries/blob/master/LICENSE\r\n *\r\n * The Crowdsale Library provides basic functionality to create an initial coin\r\n * offering for different types of token sales.\r\n *\r\n * Majoolr provides smart contract services and security reviews for contract\r\n * deployments in addition to working on open source projects in the Ethereum\r\n * community. Our purpose is to test, document, and deploy reusable code onto the\r\n * blockchain and improve both security and usability. We also educate non-profits,\r\n * schools, and other community members about the application of blockchain\r\n * technology. For further information: majoolr.io\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\r\n * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\r\n * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\r\n * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\r\n * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\n\r\nlibrary CrowdsaleLib {\r\n  using BasicMathLib for uint256;\r\n\r\n  struct CrowdsaleStorage {\r\n  \taddress owner;     //owner of the crowdsale\r\n\r\n  \tuint256 tokensPerEth;  //number of tokens received per ether\r\n  \tuint256 capAmount; //Maximum amount to be raised in wei\r\n  \tuint256 startTime; //ICO start time, timestamp\r\n  \tuint256 endTime; //ICO end time, timestamp automatically calculated\r\n    uint256 exchangeRate; //cents/ETH exchange rate at the time of the sale\r\n    uint256 ownerBalance; //owner wei Balance\r\n    uint256 startingTokenBalance; //initial amount of tokens for sale\r\n    uint8 tokenDecimals; //stored token decimals for calculation later\r\n    uint8 percentBurn; //percentage of extra tokens to burn\r\n    bool tokensSet; //true if tokens have been prepared for crowdsale\r\n    bool rateSet; //true if exchange rate has been set\r\n\r\n    //shows how much wei an address has contributed\r\n  \tmapping (address => uint256) hasContributed;\r\n\r\n    //For token withdraw function, maps a user address to the amount of tokens they can withdraw\r\n  \tmapping (address => uint256) withdrawTokensMap;\r\n\r\n    // any leftover wei that buyers contributed that didn't add up to a whole token amount\r\n    mapping (address => uint256) leftoverWei;\r\n\r\n  \tCrowdsaleToken token; //token being sold\r\n  }\r\n\r\n  // Indicates when an address has withdrawn their supply of tokens\r\n  event LogTokensWithdrawn(address indexed _bidder, uint256 Amount);\r\n\r\n  // Indicates when an address has withdrawn their supply of extra wei\r\n  event LogWeiWithdrawn(address indexed _bidder, uint256 Amount);\r\n\r\n  // Logs when owner has pulled eth\r\n  event LogOwnerEthWithdrawn(address indexed owner, uint256 amount, string Msg);\r\n\r\n  // Generic Notice message that includes and address and number\r\n  event LogNoticeMsg(address _buyer, uint256 value, string Msg);\r\n\r\n  // Indicates when an error has occurred in the execution of a function\r\n  event LogErrorMsg(string Msg);\r\n\r\n  /// @dev Called by a crowdsale contract upon creation.\r\n  /// @param self Stored crowdsale from crowdsale contract\r\n  /// @param _owner Address of crowdsale owner\r\n  /// @param _tokenPriceInCents Price of tokens in cents\r\n  /// @param _fallbackExchangeRate Exchange rate of cents/ETH\r\n  /// @param _capAmountInCents Total to be raised in cents\r\n  /// @param _startTime Timestamp of sale start time\r\n  /// @param _endTime Timestamp of sale end time\r\n  /// @param _percentBurn Percentage of extra tokens to burn\r\n  /// @param _token Token being sold\r\n  function init(CrowdsaleStorage storage self,\r\n                address _owner,\r\n                uint256 _tokenPriceInCents,\r\n                uint256 _fallbackExchangeRate,\r\n                uint256 _capAmountInCents,\r\n                uint256 _startTime,\r\n                uint256 _endTime,\r\n                uint8 _percentBurn,\r\n                CrowdsaleToken _token)\r\n  {\r\n  \trequire(self.capAmount == 0);\r\n  \trequire(self.owner == 0);\r\n    require(_endTime > _startTime);\r\n    require(_tokenPriceInCents > 0);\r\n    require(_capAmountInCents > 0);\r\n    require(_owner > 0);\r\n    require(_fallbackExchangeRate > 0);\r\n    require(_percentBurn <= 100);\r\n    self.owner = _owner;\r\n    self.capAmount = ((_capAmountInCents/_fallbackExchangeRate) + 1)*(10**18);\r\n    self.startTime = _startTime;\r\n    self.endTime = _endTime;\r\n    self.token = _token;\r\n    self.tokenDecimals = _token.decimals();\r\n    self.percentBurn = _percentBurn;\r\n    self.exchangeRate = _fallbackExchangeRate;\r\n    changeTokenPrice(self,_tokenPriceInCents);\r\n  }\r\n\r\n  /// @dev function to check if the crowdsale is currently active\r\n  /// @param self Stored crowdsale from crowdsale contract\r\n  /// @return success\r\n  function crowdsaleActive(CrowdsaleStorage storage self) constant returns (bool) {\r\n  \treturn (now >= self.startTime && now <= self.endTime);\r\n  }\r\n\r\n  /// @dev function to check if the crowdsale has ended\r\n  /// @param self Stored crowdsale from crowdsale contract\r\n  /// @return success\r\n  function crowdsaleEnded(CrowdsaleStorage storage self) constant returns (bool) {\r\n  \treturn now > self.endTime;\r\n  }\r\n\r\n  /// @dev function to check if a purchase is valid\r\n  /// @param self Stored crowdsale from crowdsale contract\r\n  /// @return true if the transaction can buy tokens\r\n  function validPurchase(CrowdsaleStorage storage self) internal constant returns (bool) {\r\n    bool nonZeroPurchase = msg.value != 0;\r\n    if (crowdsaleActive(self) && nonZeroPurchase) {\r\n      return true;\r\n    } else {\r\n      LogErrorMsg(\"Invalid Purchase! Check send time and amount of ether.\");\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /// @dev Function called by purchasers to pull tokens\r\n  /// @param self Stored crowdsale from crowdsale contract\r\n  /// @return true if tokens were withdrawn\r\n  function withdrawTokens(CrowdsaleStorage storage self) returns (bool) {\r\n    bool ok;\r\n\r\n    if (self.withdrawTokensMap[msg.sender] == 0) {\r\n      LogErrorMsg(\"Sender has no tokens to withdraw!\");\r\n      return false;\r\n    }\r\n\r\n    if (msg.sender == self.owner) {\r\n      if((!crowdsaleEnded(self))){\r\n        LogErrorMsg(\"Owner cannot withdraw extra tokens until after the sale!\");\r\n        return false;\r\n      } else {\r\n        if(self.percentBurn > 0){\r\n          uint256 _burnAmount = (self.withdrawTokensMap[msg.sender] * self.percentBurn)/100;\r\n          self.withdrawTokensMap[msg.sender] = self.withdrawTokensMap[msg.sender] - _burnAmount;\r\n          ok = self.token.burnToken(_burnAmount);\r\n          require(ok);\r\n        }\r\n      }\r\n    }\r\n\r\n    var total = self.withdrawTokensMap[msg.sender];\r\n    self.withdrawTokensMap[msg.sender] = 0;\r\n    ok = self.token.transfer(msg.sender, total);\r\n    require(ok);\r\n    LogTokensWithdrawn(msg.sender, total);\r\n    return true;\r\n  }\r\n\r\n  /// @dev Function called by purchasers to pull leftover wei from their purchases\r\n  /// @param self Stored crowdsale from crowdsale contract\r\n  /// @return true if wei was withdrawn\r\n  function withdrawLeftoverWei(CrowdsaleStorage storage self) returns (bool) {\r\n    require(self.hasContributed[msg.sender] > 0);\r\n    if (self.leftoverWei[msg.sender] == 0) {\r\n      LogErrorMsg(\"Sender has no extra wei to withdraw!\");\r\n      return false;\r\n    }\r\n\r\n    var total = self.leftoverWei[msg.sender];\r\n    self.leftoverWei[msg.sender] = 0;\r\n    msg.sender.transfer(total);\r\n    LogWeiWithdrawn(msg.sender, total);\r\n    return true;\r\n  }\r\n\r\n  /// @dev send ether from the completed crowdsale to the owners wallet address\r\n  /// @param self Stored crowdsale from crowdsale contract\r\n  /// @return true if owner withdrew eth\r\n  function withdrawOwnerEth(CrowdsaleStorage storage self) returns (bool) {\r\n    if (!crowdsaleEnded(self)) {\r\n      LogErrorMsg(\"Cannot withdraw owner ether until after the sale!\");\r\n      return false;\r\n    }\r\n\r\n    require(msg.sender == self.owner);\r\n    require(self.ownerBalance > 0);\r\n\r\n    uint256 amount = self.ownerBalance;\r\n    self.ownerBalance = 0;\r\n    self.owner.transfer(amount);\r\n    LogOwnerEthWithdrawn(msg.sender,amount,\"Crowdsale owner has withdrawn all funds!\");\r\n\r\n    return true;\r\n  }\r\n\r\n  /// @dev Function to change the price of the token\r\n  /// @param self Stored crowdsale from crowdsale contract\r\n  /// @param _newPrice new token price (amount of tokens per ether)\r\n  /// @return true if the token price changed successfully\r\n  function changeTokenPrice(CrowdsaleStorage storage self,uint256 _newPrice) internal returns (bool) {\r\n  \trequire(_newPrice > 0);\r\n\r\n    uint256 result;\r\n    bool err;\r\n\r\n    (err,result) = self.exchangeRate.dividedBy(_newPrice);\r\n    require(!err);\r\n\r\n  \tself.tokensPerEth = result + 1;\r\n    return true;\r\n  }\r\n\r\n  /// @dev function that is called three days before the sale to set the token and price\r\n  /// @param self Stored Crowdsale from crowdsale contract\r\n  /// @param _exchangeRate  ETH exchange rate expressed in cents/ETH\r\n  /// @return true if the exchange rate has been set\r\n  function setTokenExchangeRate(CrowdsaleStorage storage self, uint256 _exchangeRate) returns (bool) {\r\n    require(msg.sender == self.owner);\r\n    require((now > (self.startTime - 3 days)) && (now < (self.startTime)));\r\n    require(!self.rateSet);   // the exchange rate can only be set once!\r\n    require(self.token.balanceOf(this) > 0);\r\n    require(_exchangeRate > 0);\r\n\r\n    uint256 _capAmountInCents;\r\n    uint256 _tokenPriceInCents;\r\n    uint256 _tokenBalance;\r\n    bool err;\r\n\r\n    (err, _capAmountInCents) = self.exchangeRate.times(self.capAmount);\r\n    require(!err);\r\n\r\n    (err, _tokenPriceInCents) = self.exchangeRate.dividedBy(self.tokensPerEth);\r\n    require(!err);\r\n\r\n    _tokenBalance = self.token.balanceOf(this);\r\n    self.withdrawTokensMap[msg.sender] = _tokenBalance;\r\n    self.startingTokenBalance = _tokenBalance;\r\n    self.tokensSet = true;\r\n\r\n    self.exchangeRate = _exchangeRate;\r\n    self.capAmount = (_capAmountInCents/_exchangeRate) + 1;\r\n    changeTokenPrice(self,_tokenPriceInCents + 1);\r\n    self.rateSet = true;\r\n\r\n    LogNoticeMsg(msg.sender,self.tokensPerEth,\"Owner has sent the exchange Rate and tokens bought per ETH!\");\r\n    return true;\r\n  }\r\n\r\n  /// @dev fallback function to set tokens if the exchange rate function was not called\r\n  /// @param self Stored Crowdsale from crowdsale contract\r\n  /// @return true if tokens set successfully\r\n  function setTokens(CrowdsaleStorage storage self) returns (bool) {\r\n    require(msg.sender == self.owner);\r\n    require(!self.tokensSet);\r\n\r\n    uint256 _tokenBalance;\r\n\r\n    _tokenBalance = self.token.balanceOf(this);\r\n    self.withdrawTokensMap[msg.sender] = _tokenBalance;\r\n    self.startingTokenBalance = _tokenBalance;\r\n    self.tokensSet = true;\r\n\r\n    return true;\r\n  }\r\n}\r\n\r\npragma solidity ^0.4.15;\r\n\r\n/**\r\n * @title TokenLib\r\n * @author Majoolr.io\r\n *\r\n * version 1.1.0\r\n * Copyright (c) 2017 Majoolr, LLC\r\n * The MIT License (MIT)\r\n * https://github.com/Majoolr/ethereum-libraries/blob/master/LICENSE\r\n *\r\n * The Token Library provides functionality to create a variety of ERC20 tokens.\r\n * See https://github.com/Majoolr/ethereum-contracts for an example of how to\r\n * create a basic ERC20 token.\r\n *\r\n * Majoolr works on open source projects in the Ethereum community with the\r\n * purpose of testing, documenting, and deploying reusable code onto the\r\n * blockchain to improve security and usability of smart contracts. Majoolr\r\n * also strives to educate non-profits, schools, and other community members\r\n * about the application of blockchain technology.\r\n * For further information: majoolr.io\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\r\n * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\r\n * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\r\n * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\r\n * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\n\r\nlibrary TokenLib {\r\n  using BasicMathLib for uint256;\r\n\r\n  struct TokenStorage {\r\n    mapping (address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n\r\n    string name;\r\n    string symbol;\r\n    uint256 totalSupply;\r\n    uint256 INITIAL_SUPPLY;\r\n    address owner;\r\n    uint8 decimals;\r\n    bool stillMinting;\r\n  }\r\n\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n  event OwnerChange(address from, address to);\r\n  event Burn(address indexed burner, uint256 value);\r\n  event MintingClosed(bool mintingClosed);\r\n\r\n  /// @dev Called by the Standard Token upon creation.\r\n  /// @param self Stored token from token contract\r\n  /// @param _name Name of the new token\r\n  /// @param _symbol Symbol of the new token\r\n  /// @param _decimals Decimal places for the token represented\r\n  /// @param _initial_supply The initial token supply\r\n  /// @param _allowMinting True if additional tokens can be created, false otherwise\r\n  function init(TokenStorage storage self,\r\n                address _owner,\r\n                string _name,\r\n                string _symbol,\r\n                uint8 _decimals,\r\n                uint256 _initial_supply,\r\n                bool _allowMinting)\r\n  {\r\n    require(self.INITIAL_SUPPLY == 0);\r\n    self.name = _name;\r\n    self.symbol = _symbol;\r\n    self.totalSupply = _initial_supply;\r\n    self.INITIAL_SUPPLY = _initial_supply;\r\n    self.decimals = _decimals;\r\n    self.owner = _owner;\r\n    self.stillMinting = _allowMinting;\r\n    self.balances[_owner] = _initial_supply;\r\n  }\r\n\r\n  /// @dev Transfer tokens from caller's account to another account.\r\n  /// @param self Stored token from token contract\r\n  /// @param _to Address to send tokens\r\n  /// @param _value Number of tokens to send\r\n  /// @return True if completed\r\n  function transfer(TokenStorage storage self, address _to, uint256 _value) returns (bool) {\r\n    bool err;\r\n    uint256 balance;\r\n\r\n    (err,balance) = self.balances[msg.sender].minus(_value);\r\n    require(!err);\r\n    self.balances[msg.sender] = balance;\r\n    //It's not possible to overflow token supply\r\n    self.balances[_to] = self.balances[_to] + _value;\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /// @dev Authorized caller transfers tokens from one account to another\r\n  /// @param self Stored token from token contract\r\n  /// @param _from Address to send tokens from\r\n  /// @param _to Address to send tokens to\r\n  /// @param _value Number of tokens to send\r\n  /// @return True if completed\r\n  function transferFrom(TokenStorage storage self,\r\n                        address _from,\r\n                        address _to,\r\n                        uint256 _value)\r\n                        returns (bool)\r\n  {\r\n    var _allowance = self.allowed[_from][msg.sender];\r\n    bool err;\r\n    uint256 balanceOwner;\r\n    uint256 balanceSpender;\r\n\r\n    (err,balanceOwner) = self.balances[_from].minus(_value);\r\n    require(!err);\r\n\r\n    (err,balanceSpender) = _allowance.minus(_value);\r\n    require(!err);\r\n\r\n    self.balances[_from] = balanceOwner;\r\n    self.allowed[_from][msg.sender] = balanceSpender;\r\n    self.balances[_to] = self.balances[_to] + _value;\r\n\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /// @dev Retrieve token balance for an account\r\n  /// @param self Stored token from token contract\r\n  /// @param _owner Address to retrieve balance of\r\n  /// @return balance The number of tokens in the subject account\r\n  function balanceOf(TokenStorage storage self, address _owner) constant returns (uint256 balance) {\r\n    return self.balances[_owner];\r\n  }\r\n\r\n  /// @dev Authorize an account to send tokens on caller's behalf\r\n  /// @param self Stored token from token contract\r\n  /// @param _spender Address to authorize\r\n  /// @param _value Number of tokens authorized account may send\r\n  /// @return True if completed\r\n  function approve(TokenStorage storage self, address _spender, uint256 _value) returns (bool) {\r\n    self.allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /// @dev Remaining tokens third party spender has to send\r\n  /// @param self Stored token from token contract\r\n  /// @param _owner Address of token holder\r\n  /// @param _spender Address of authorized spender\r\n  /// @return remaining Number of tokens spender has left in owner's account\r\n  function allowance(TokenStorage storage self, address _owner, address _spender) constant returns (uint256 remaining) {\r\n    return self.allowed[_owner][_spender];\r\n  }\r\n\r\n  /// @dev Authorize third party transfer by increasing/decreasing allowed rather than setting it\r\n  /// @param self Stored token from token contract\r\n  /// @param _spender Address to authorize\r\n  /// @param _valueChange Increase or decrease in number of tokens authorized account may send\r\n  /// @param _increase True if increasing allowance, false if decreasing allowance\r\n  /// @return True if completed\r\n  function approveChange (TokenStorage storage self, address _spender, uint256 _valueChange, bool _increase)\r\n                          returns (bool)\r\n  {\r\n    uint256 _newAllowed;\r\n    bool err;\r\n\r\n    if(_increase) {\r\n      (err, _newAllowed) = self.allowed[msg.sender][_spender].plus(_valueChange);\r\n      require(!err);\r\n\r\n      self.allowed[msg.sender][_spender] = _newAllowed;\r\n    } else {\r\n      if (_valueChange > self.allowed[msg.sender][_spender]) {\r\n        self.allowed[msg.sender][_spender] = 0;\r\n      } else {\r\n        _newAllowed = self.allowed[msg.sender][_spender] - _valueChange;\r\n        self.allowed[msg.sender][_spender] = _newAllowed;\r\n      }\r\n    }\r\n\r\n    Approval(msg.sender, _spender, _newAllowed);\r\n    return true;\r\n  }\r\n\r\n  /// @dev Change owning address of the token contract, specifically for minting\r\n  /// @param self Stored token from token contract\r\n  /// @param _newOwner Address for the new owner\r\n  /// @return True if completed\r\n  function changeOwner(TokenStorage storage self, address _newOwner) returns (bool) {\r\n    require((self.owner == msg.sender) && (_newOwner > 0));\r\n\r\n    self.owner = _newOwner;\r\n    OwnerChange(msg.sender, _newOwner);\r\n    return true;\r\n  }\r\n\r\n  /// @dev Mints additional tokens, new tokens go to owner\r\n  /// @param self Stored token from token contract\r\n  /// @param _amount Number of tokens to mint\r\n  /// @return True if completed\r\n  function mintToken(TokenStorage storage self, uint256 _amount) returns (bool) {\r\n    require((self.owner == msg.sender) && self.stillMinting);\r\n    uint256 _newAmount;\r\n    bool err;\r\n\r\n    (err, _newAmount) = self.totalSupply.plus(_amount);\r\n    require(!err);\r\n\r\n    self.totalSupply =  _newAmount;\r\n    self.balances[self.owner] = self.balances[self.owner] + _amount;\r\n    Transfer(0x0, self.owner, _amount);\r\n    return true;\r\n  }\r\n\r\n  /// @dev Permanent stops minting\r\n  /// @param self Stored token from token contract\r\n  /// @return True if completed\r\n  function closeMint(TokenStorage storage self) returns (bool) {\r\n    require(self.owner == msg.sender);\r\n\r\n    self.stillMinting = false;\r\n    MintingClosed(true);\r\n    return true;\r\n  }\r\n\r\n  /// @dev Permanently burn tokens\r\n  /// @param self Stored token from token contract\r\n  /// @param _amount Amount of tokens to burn\r\n  /// @return True if completed\r\n  function burnToken(TokenStorage storage self, uint256 _amount) returns (bool) {\r\n      uint256 _newBalance;\r\n      bool err;\r\n\r\n      (err, _newBalance) = self.balances[msg.sender].minus(_amount);\r\n      require(!err);\r\n\r\n      self.balances[msg.sender] = _newBalance;\r\n      self.totalSupply = self.totalSupply - _amount;\r\n      Burn(msg.sender, _amount);\r\n      Transfer(msg.sender, 0x0, _amount);\r\n      return true;\r\n  }\r\n}\r\n\r\npragma solidity ^0.4.13;\r\n\r\n/**\r\n * @title Basic Math Library\r\n * @author Majoolr.io\r\n *\r\n * version 1.1.0\r\n * Copyright (c) 2017 Majoolr, LLC\r\n * The MIT License (MIT)\r\n * https://github.com/Majoolr/ethereum-libraries/blob/master/LICENSE\r\n *\r\n * The Basic Math Library is inspired by the Safe Math library written by\r\n * OpenZeppelin at https://github.com/OpenZeppelin/zeppelin-solidity/ .\r\n * Majoolr works on open source projects in the Ethereum community with the\r\n * purpose of testing, documenting, and deploying reusable code onto the\r\n * blockchain to improve security and usability of smart contracts. Majoolr\r\n * also strives to educate non-profits, schools, and other community members\r\n * about the application of blockchain technology.\r\n * For further information: majoolr.io, openzeppelin.org\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\r\n * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\r\n * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\r\n * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\r\n * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\n\r\nlibrary BasicMathLib {\r\n  event Err(string typeErr);\r\n\r\n  /// @dev Multiplies two numbers and checks for overflow before returning.\r\n  /// Does not throw but rather logs an Err event if there is overflow.\r\n  /// @param a First number\r\n  /// @param b Second number\r\n  /// @return err False normally, or true if there is overflow\r\n  /// @return res The product of a and b, or 0 if there is overflow\r\n  function times(uint256 a, uint256 b) constant returns (bool err,uint256 res) {\r\n    assembly{\r\n      res := mul(a,b)\r\n      switch or(iszero(b), eq(div(res,b), a))\r\n      case 0 {\r\n        err := 1\r\n        res := 0\r\n      }\r\n    }\r\n    if (err)\r\n      Err(\"times func overflow\");\r\n  }\r\n\r\n  /// @dev Divides two numbers but checks for 0 in the divisor first.\r\n  /// Does not throw but rather logs an Err event if 0 is in the divisor.\r\n  /// @param a First number\r\n  /// @param b Second number\r\n  /// @return err False normally, or true if `b` is 0\r\n  /// @return res The quotient of a and b, or 0 if `b` is 0\r\n  function dividedBy(uint256 a, uint256 b) constant returns (bool err,uint256 res) {\r\n    assembly{\r\n      switch iszero(b)\r\n      case 0 {\r\n        res := div(a,b)\r\n        mstore(add(mload(0x40),0x20),res)\r\n        return(mload(0x40),0x40)\r\n      }\r\n    }\r\n    Err(\"tried to divide by zero\");\r\n    return (true, 0);\r\n  }\r\n\r\n  /// @dev Adds two numbers and checks for overflow before returning.\r\n  /// Does not throw but rather logs an Err event if there is overflow.\r\n  /// @param a First number\r\n  /// @param b Second number\r\n  /// @return err False normally, or true if there is overflow\r\n  /// @return res The sum of a and b, or 0 if there is overflow\r\n  function plus(uint256 a, uint256 b) constant returns (bool err, uint256 res) {\r\n    assembly{\r\n      res := add(a,b)\r\n      switch and(eq(sub(res,b), a), or(gt(res,b),eq(res,b)))\r\n      case 0 {\r\n        err := 1\r\n        res := 0\r\n      }\r\n    }\r\n    if (err)\r\n      Err(\"plus func overflow\");\r\n  }\r\n\r\n  /// @dev Subtracts two numbers and checks for underflow before returning.\r\n  /// Does not throw but rather logs an Err event if there is underflow.\r\n  /// @param a First number\r\n  /// @param b Second number\r\n  /// @return err False normally, or true if there is underflow\r\n  /// @return res The difference between a and b, or 0 if there is underflow\r\n  function minus(uint256 a, uint256 b) constant returns (bool err,uint256 res) {\r\n    assembly{\r\n      res := sub(a,b)\r\n      switch eq(and(eq(add(res,b), a), or(lt(res,a), eq(res,a))), 1)\r\n      case 0 {\r\n        err := 1\r\n        res := 0\r\n      }\r\n    }\r\n    if (err)\r\n      Err(\"minus func underflow\");\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_buyer\",\"type\":\"address\"}],\"name\":\"contributionAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleActive\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawOwnerEth\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"exchangeRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_buyer\",\"type\":\"address\"}],\"name\":\"tokenPurchaseAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"firstPriceChange\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"sendPurchase\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawLeftoverWei\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_exchangeRate\",\"type\":\"uint256\"}],\"name\":\"setTokenExchangeRate\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensPerEth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_buyer\",\"type\":\"address\"}],\"name\":\"leftoverWeiAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"changeInterval\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"capAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"capAmountInCents\",\"type\":\"uint256\"},{\"name\":\"startTime\",\"type\":\"uint256\"},{\"name\":\"endTime\",\"type\":\"uint256\"},{\"name\":\"tokenPricePoints\",\"type\":\"uint256[]\"},{\"name\":\"fallbackExchangeRate\",\"type\":\"uint256\"},{\"name\":\"changeInterval\",\"type\":\"uint256\"},{\"name\":\"percentBurn\",\"type\":\"uint8\"},{\"name\":\"token\",\"type\":\"address\"}],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogTokensBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"Msg\",\"type\":\"string\"}],\"name\":\"LogErrorMsg\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"Msg\",\"type\":\"string\"}],\"name\":\"LogTokenPriceChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_bidder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"Amount\",\"type\":\"uint256\"}],\"name\":\"LogTokensWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_bidder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"Amount\",\"type\":\"uint256\"}],\"name\":\"LogWeiWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"Msg\",\"type\":\"string\"}],\"name\":\"LogOwnerEthWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"Msg\",\"type\":\"string\"}],\"name\":\"LogNoticeMsg\",\"type\":\"event\"}]","ContractName":"ENOCrowdsale","CompilerVersion":"v0.4.15+commit.bbb8e64f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000033cc8a390496513f767f970c34e23ac4df8e89ef000000000000000000000000000000000000000000000000000000006553f1000000000000000000000000000000000000000000000000000000000059d27ea00000000000000000000000000000000000000000000000000000000059f768a000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000006e280000000000000000000000000000000000000000000000000000000000093a80000000000000000000000000000000000000000000000000000000000000003200000000000000000000000048cd81536898c5143459867c508c4b02440424f10000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000008d000000000000000000000000000000000000000000000000000000000000009b00000000000000000000000000000000000000000000000000000000000000a500000000000000000000000000000000000000000000000000000000000000af","Library":"CrowdsaleLib:cd9e2e077d7f4e94812c6fd6ecc1e22e267c52e1;DirectCrowdsaleLib:49a4dfad9797a1726da60098a1c06616cacfc1ec","SwarmSource":"bzzr://32797f2a8b5aa3a3912a494b05363a870b3fd5c3d2e3fe01a23a7cd53cabef06"}]}