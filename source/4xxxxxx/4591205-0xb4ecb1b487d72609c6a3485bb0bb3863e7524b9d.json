{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    \r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n  \r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    \r\n    // Public variable with address of owner\r\n    address public owner;\r\n    \r\n    /**\r\n     * Log ownership transference\r\n     */\r\n    event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    function Ownable() public {\r\n        // Set the contract creator as the owner\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        // Check that sender is owner\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) onlyOwner public {\r\n        // Check for a non-null owner\r\n        require(newOwner != address(0));\r\n        // Log ownership transference\r\n        OwnershipTransferred(owner, newOwner);\r\n        // Set new owner\r\n        owner = newOwner;\r\n    }\r\n    \r\n}\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n\r\n    uint256 public totalSupply = 0;\r\n    function balanceOf(address who) public constant returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n}\r\n\r\n\r\ncontract MintableToken is ERC20Basic, Ownable {\r\n\r\n    bool public mintingFinished = false;\r\n\r\n    event Mint(address indexed to, uint256 amount);\r\n    event MintFinished();\r\n\r\n    modifier canMint() {\r\n        require(!mintingFinished);\r\n        _;\r\n    }\r\n    \r\n    function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool);\r\n\r\n    /**\r\n     * @dev Function to stop minting new tokens.\r\n     * @return True if the operation was successful.\r\n     */\r\n    function finishMinting() onlyOwner public returns (bool) {\r\n        mintingFinished = true;\r\n        MintFinished();\r\n        return true;\r\n    }\r\n  \r\n}\r\n\r\n\r\n/**\r\n * @title Extended ERC20 Token contract\r\n * @dev Custom Token (ERC20 Token) transactions.\r\n */\r\ncontract StyrasToken is MintableToken {\r\n  \r\n    using SafeMath for uint256;\r\n\r\n    string public name = \"Styras\";\r\n    string public symbol = \"STY\";\r\n    uint256 public decimals = 18;\r\n\r\n    uint256 public reservedSupply;\r\n\r\n    uint256 public publicLockEnd = 1516060800; // GMT: Tuesday, January 16, 2018 0:00:00\r\n    uint256 public partnersLockEnd = 1530230400; // GMT: Friday, June 29, 2018 0:00:00\r\n    uint256 public partnersMintLockEnd = 1514678400; // GMT: Sunday, December 31, 2017 0:00:00\r\n\r\n    address public partnersWallet;\r\n    mapping(address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Burn(address indexed burner, uint256 value);\r\n\r\n    /**\r\n     * Initializes contract with initial supply tokens to the creator of the contract\r\n     */\r\n    function StyrasToken(address partners, uint256 reserved) public {\r\n        require(partners != address(0));\r\n        partnersWallet = partners;\r\n        reservedSupply = reserved;\r\n        assert(publicLockEnd <= partnersLockEnd);\r\n        assert(partnersMintLockEnd < partnersLockEnd);\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the balance of the specified address.\r\n     * @param investor The address to query the the balance of.\r\n     * @return An uint256 representing the amount owned by the passed address.\r\n     */\r\n    function balanceOf(address investor) public constant returns (uint256 balanceOfInvestor) {\r\n        return balances[investor];\r\n    }\r\n\r\n    /**\r\n     * @dev transfer token for a specified address\r\n     * @param _to The address to transfer to.\r\n     * @param _amount The amount to be transferred.\r\n     */\r\n    function transfer(address _to, uint256 _amount) public returns (bool) {\r\n        require(_to != address(0));\r\n        require((msg.sender != partnersWallet && now >= publicLockEnd) || now >= partnersLockEnd);\r\n        require(_amount > 0 && _amount <= balances[msg.sender]);\r\n        balances[msg.sender] = balances[msg.sender].sub(_amount);\r\n        balances[_to] = balances[_to].add(_amount);\r\n        Transfer(msg.sender, _to, _amount);\r\n        return true;\r\n    }\r\n  \r\n    /**\r\n     * @dev Transfer tokens from one address to another\r\n     * @param _from address The address which you want to send tokens from\r\n     * @param _to address The address which you want to transfer to\r\n     * @param _amount uint256 the amount of tokens to be transferred\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _amount) public returns (bool) {\r\n        require(_to != address(0));\r\n        require((_from != partnersWallet && now >= publicLockEnd) || now >= partnersLockEnd);\r\n        require(_amount > 0 && _amount <= balances[_from]);\r\n        require(_amount <= allowed[_from][msg.sender]);\r\n        balances[_from] = balances[_from].sub(_amount);\r\n        balances[_to] = balances[_to].add(_amount);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\r\n        Transfer(_from, _to, _amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n     *\r\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _value The amount of tokens to be spent.\r\n     */\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n     * @param _owner address The address which owns the funds.\r\n     * @param _spender address The address which will spend the funds.\r\n     * @return A uint256 specifying the amount of tokens still available for the spender.\r\n     */\r\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    /**\r\n     * approve should be called when allowed[_spender] == 0. To increment\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     */\r\n    function increaseApproval (address _spender, uint _addedValue) public returns (bool success) {\r\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n    function decreaseApproval (address _spender, uint _subtractedValue) public returns (bool success) {\r\n        uint oldValue = allowed[msg.sender][_spender];\r\n        if (_subtractedValue > oldValue) {\r\n            allowed[msg.sender][_spender] = 0;\r\n        } else {\r\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n        }\r\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Burns a specific amount of tokens.\r\n     * @param _value The amount of token to be burned.\r\n     */\r\n    function burn(uint256 _value) public {\r\n        require((msg.sender != partnersWallet && now >= publicLockEnd) || now >= partnersLockEnd);\r\n        require(_value > 0 && _value <= balances[msg.sender]);\r\n        address burner = msg.sender;\r\n        balances[burner] = balances[burner].sub(_value);\r\n        totalSupply = totalSupply.sub(_value);\r\n        Burn(burner, _value);\r\n    }\r\n\r\n    /**\r\n     * @dev Function to mint tokens\r\n     * @param _to The address that will receive the minted tokens.\r\n     * @param _amount The amount of tokens to mint.\r\n     * @return A boolean that indicates if the operation was successful.\r\n     */\r\n    function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\r\n        require(_to != partnersWallet);\r\n        totalSupply = totalSupply.add(_amount);\r\n        balances[_to] = balances[_to].add(_amount);\r\n        Mint(_to, _amount);\r\n        Transfer(address(0), _to, _amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to mint reserved tokens to partners\r\n     * @return A boolean that indicates if the operation was successful.\r\n     */\r\n    function mintPartners(uint256 amount) onlyOwner canMint public returns (bool) {\r\n        require(now >= partnersMintLockEnd);\r\n        require(reservedSupply > 0);\r\n        require(amount <= reservedSupply);\r\n        totalSupply = totalSupply.add(amount);\r\n        reservedSupply = reservedSupply.sub(amount);\r\n        balances[partnersWallet] = balances[partnersWallet].add(amount);\r\n        Mint(partnersWallet, amount);\r\n        Transfer(address(0), partnersWallet, amount);\r\n        return true;\r\n    }\r\n  \r\n}\r\n\r\n\r\n/**\r\n * @title RefundVault\r\n * @dev This contract is used for storing funds while a crowdsale\r\n * is in progress. Supports refunding the money if crowdsale fails,\r\n * and forwarding it if crowdsale is successful.\r\n */\r\ncontract RefundVault is Ownable {\r\n  \r\n    using SafeMath for uint256;\r\n\r\n    enum State { Active, Refunding, Closed }\r\n\r\n    mapping (address => uint256) public deposited;\r\n    address public wallet;\r\n    State public state;\r\n\r\n    event Closed();\r\n    event RefundsEnabled();\r\n    event Refunded(address indexed beneficiary, uint256 weiAmount);\r\n\r\n    function RefundVault(address _to) public {\r\n        require(_to != address(0));\r\n        wallet = _to;\r\n        state = State.Active;\r\n    }\r\n\r\n    function deposit(address investor) onlyOwner public payable {\r\n        require(state == State.Active);\r\n        deposited[investor] = deposited[investor].add(msg.value);\r\n    }\r\n\r\n    function close() onlyOwner public {\r\n        require(state == State.Active);\r\n        state = State.Closed;\r\n        Closed();\r\n        wallet.transfer(this.balance);\r\n    }\r\n\r\n    function enableRefunds() onlyOwner public {\r\n        require(state == State.Active);\r\n        state = State.Refunding;\r\n        RefundsEnabled();\r\n    }\r\n\r\n    function refund(address investor) public {\r\n        require(state == State.Refunding);\r\n        require(deposited[investor] > 0);\r\n        uint256 depositedValue = deposited[investor];\r\n        deposited[investor] = 0;\r\n        investor.transfer(depositedValue);\r\n        Refunded(investor, depositedValue);\r\n    }\r\n  \r\n}\r\n\r\n\r\ncontract Withdrawable is Ownable {\r\n\r\n    bool public withdrawEnabled = false;\r\n    address public wallet;\r\n\r\n    event Withdrawed(uint256 weiAmount);\r\n  \r\n    function Withdrawable(address _to) public {\r\n        require(_to != address(0));\r\n        wallet = _to;\r\n    }\r\n\r\n    modifier canWithdraw() {\r\n        require(withdrawEnabled);\r\n        _;\r\n    }\r\n  \r\n    function enableWithdraw() onlyOwner public {\r\n        withdrawEnabled = true;\r\n    }\r\n  \r\n    // owner can withdraw ether here\r\n    function withdraw(uint256 weiAmount) onlyOwner canWithdraw public {\r\n        require(this.balance >= weiAmount);\r\n        wallet.transfer(weiAmount);\r\n        Withdrawed(weiAmount);\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract StyrasVault is Withdrawable, RefundVault {\r\n  \r\n    function StyrasVault(address wallet) public\r\n        Withdrawable(wallet)\r\n        RefundVault(wallet) {\r\n        // NOOP\r\n    }\r\n  \r\n    function balanceOf(address investor) public constant returns (uint256 depositedByInvestor) {\r\n        return deposited[investor];\r\n    }\r\n  \r\n    function enableWithdraw() onlyOwner public {\r\n        require(state == State.Active);\r\n        withdrawEnabled = true;\r\n    }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title StyrasCrowdsale\r\n * @dev This is a capped and refundable crowdsale.\r\n */\r\ncontract StyrasCrowdsale is Ownable {\r\n\r\n    using SafeMath for uint256;\r\n  \r\n    enum State { preSale, publicSale, hasFinalized }\r\n\r\n    // how many token units a buyer gets per ether\r\n    // minimum amount of funds (soft-cap) to be raised in weis\r\n    // maximum amount of funds (hard-cap) to be raised in weis\r\n    // minimum amount of weis to invest per investor\r\n    uint256 public rate;\r\n    uint256 public goal;\r\n    uint256 public cap;\r\n    uint256 public minInvest = 100000000000000000; // 0.1 ETH\r\n\r\n    // presale treats\r\n    uint256 public presaleDeadline = 1511827200; // GMT: Tuesday, November 28, 2017 00:00:00\r\n    uint256 public presaleRate = 4000; // 1 ETH == 4000 STY 33% bonus\r\n    uint256 public presaleCap = 50000000000000000000000000; // 50 millions STY\r\n  \r\n    // pubsale treats\r\n    uint256 public pubsaleDeadline = 1514678400; // GMT: Sunday, December 31, 2017 0:00:00\r\n    uint256 public pubsaleRate = 3000; // 1 ETH == 3000 STY\r\n    uint256 public pubsaleCap = 180000000000000000000000000;\r\n\r\n    // harrd cap = pubsaleCap + reservedSupply -> 200000000 DTY\r\n    uint256 public reservedSupply = 20000000000000000000000000; // 10% max totalSupply\r\n\r\n    uint256 public softCap = 840000000000000000000000; // 840 thousands STY\r\n\r\n    // start and end timestamps where investments are allowed (both inclusive)\r\n    // flag for investments finalization\r\n    uint256 public startTime = 1511276400; // GMT: Tuesday, November 21, 2017 15:00:00\r\n    uint256 public endTime;\r\n\r\n    // amount of raised money in wei\r\n    // address where funds are collected\r\n    uint256 public weiRaised = 0;\r\n    address public escrowWallet;\r\n    address public partnersWallet;\r\n\r\n    // contract of the token being sold\r\n    // contract of the vault used to hold funds while crowdsale is running\r\n    StyrasToken public token;\r\n    StyrasVault public vault;\r\n\r\n    State public state;\r\n\r\n    /**\r\n     * event for token purchase logging\r\n     * @param purchaser who paid for the tokens\r\n     * @param beneficiary who got the tokens\r\n     * @param value weis paid for purchase\r\n     * @param amount amount of tokens purchased\r\n     */\r\n    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n    event PresaleFinalized();\r\n    event Finalized();\r\n\r\n    function StyrasCrowdsale(address escrow, address partners) public {\r\n        require(now < startTime);\r\n        require(partners != address(0));\r\n        require(startTime < presaleDeadline);\r\n        require(presaleDeadline < pubsaleDeadline);\r\n        require(pubsaleRate < presaleRate);\r\n        require(presaleCap < pubsaleCap);\r\n        require(softCap <= pubsaleCap);\r\n        endTime = presaleDeadline;\r\n        escrowWallet = escrow;\r\n        partnersWallet = partners;\r\n        token = new StyrasToken(partnersWallet, reservedSupply);\r\n        vault = new StyrasVault(escrowWallet);\r\n        rate = presaleRate;\r\n        goal = softCap.div(rate);\r\n        cap = presaleCap.div(rate);\r\n        state = State.preSale;\r\n        assert(goal < cap);\r\n        assert(startTime < endTime);\r\n    }\r\n\r\n    // fallback function can be used to buy tokens\r\n    function () public payable {\r\n        buyTokens(msg.sender);\r\n    }\r\n  \r\n    // low level token purchase function\r\n    function buyTokens(address beneficiary) public payable {\r\n        require(beneficiary != address(0));\r\n        require(state < State.hasFinalized);\r\n        require(validPurchase());\r\n        uint256 weiAmount = msg.value;\r\n        // calculate token amount to be created\r\n        uint256 tokenAmount = weiAmount.mul(rate);\r\n        // update state\r\n        weiRaised = weiRaised.add(weiAmount);\r\n        token.mint(beneficiary, tokenAmount);\r\n        TokenPurchase(msg.sender, beneficiary, weiAmount, tokenAmount);\r\n        forwardFunds();\r\n    }\r\n\r\n    // send ether to the fund collection wallet\r\n    // override to create custom fund forwarding mechanisms\r\n    function forwardFunds() internal {\r\n        vault.deposit.value(msg.value)(msg.sender);\r\n        assert(vault.balance == weiRaised);\r\n    }\r\n\r\n    // @return true if the transaction can buy tokens\r\n    function validPurchase() internal constant returns (bool) {\r\n        bool withinPeriod = startTime <= now && now <= endTime;\r\n        bool nonZeroPurchase = msg.value > 0;\r\n        bool withinCap = weiRaised < cap;\r\n        bool overMinInvest = msg.value >= minInvest || vault.balanceOf(msg.sender) >= minInvest;\r\n        return withinPeriod && nonZeroPurchase && withinCap && overMinInvest;\r\n    }\r\n\r\n    function hardCap() public constant returns (uint256) {\r\n        return pubsaleCap + reservedSupply;\r\n    }\r\n\r\n    function goalReached() public constant returns (bool) {\r\n        return weiRaised >= goal;\r\n    }\r\n\r\n    // @return true if crowdsale event has ended\r\n    function hasEnded() public constant returns (bool) {\r\n        bool afterPeriod = now > endTime;\r\n        bool capReached = weiRaised >= cap;\r\n        return afterPeriod || capReached;\r\n    }\r\n\r\n    // if crowdsale is unsuccessful, investors can claim refunds here\r\n    function claimRefund() public {\r\n        require(state == State.hasFinalized);\r\n        require(!goalReached());\r\n        vault.refund(msg.sender);\r\n    }\r\n\r\n    function enableWithdraw() onlyOwner public {\r\n        require(goalReached());\r\n        vault.enableWithdraw();\r\n    }\r\n  \r\n    // if crowdsale is successful, owner can withdraw ether here\r\n    function withdraw(uint256 _weiAmountToWithdraw) onlyOwner public {\r\n        require(goalReached());\r\n        vault.withdraw(_weiAmountToWithdraw);\r\n    }\r\n\r\n    function finalizePresale() onlyOwner public {\r\n        require(state == State.preSale);\r\n        require(hasEnded());\r\n        uint256 weiDiff = 0;\r\n        uint256 raisedTokens = token.totalSupply();\r\n        rate = pubsaleRate;\r\n        if (!goalReached()) {\r\n            weiDiff = (softCap.sub(raisedTokens)).div(rate);\r\n            goal = weiRaised.add(weiDiff);\r\n        }\r\n        weiDiff = (pubsaleCap.sub(raisedTokens)).div(rate);\r\n        cap = weiRaised.add(weiDiff);\r\n        endTime = pubsaleDeadline;\r\n        state = State.publicSale;\r\n        assert(goal < cap);\r\n        assert(startTime < endTime);\r\n        PresaleFinalized();\r\n    }\r\n\r\n    /**\r\n     * @dev Must be called after crowdsale ends, to do some extra finalization\r\n     * work. Calls the contract's finalization function.\r\n     */\r\n    function finalize() onlyOwner public {\r\n        require(state == State.publicSale);\r\n        require(hasEnded());\r\n        finalization();\r\n        state = State.hasFinalized;\r\n        Finalized();\r\n    }\r\n\r\n    // vault finalization task, called when owner calls finalize()\r\n    function finalization() internal {\r\n        if (goalReached()) {\r\n            vault.close();\r\n            token.mintPartners(reservedSupply);\r\n        } else {\r\n            vault.enableRefunds();\r\n        }\r\n        vault.transferOwnership(owner);\r\n        token.transferOwnership(owner);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"withdrawEnabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"weiAmount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"close\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"enableWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"investor\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"depositedByInvestor\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"enableRefunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"deposited\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"investor\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"investor\",\"type\":\"address\"}],\"name\":\"refund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"wallet\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Closed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"RefundsEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"weiAmount\",\"type\":\"uint256\"}],\"name\":\"Refunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"weiAmount\",\"type\":\"uint256\"}],\"name\":\"Withdrawed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"StyrasVault","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000005bdf907608ccbed1170e4d04edc30f74f78237b","Library":"","SwarmSource":"bzzr://e27600372b8592322ff053d41058a073dd3ebeda4ceee0840a780e85f53366a4"}]}