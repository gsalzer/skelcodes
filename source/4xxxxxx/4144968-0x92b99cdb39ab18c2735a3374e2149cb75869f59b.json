{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.4;\r\n\r\ncontract SafeMath {\r\n     function safeMul(uint a, uint b) internal returns (uint) {\r\n          uint c = a * b;\r\n          assert(a == 0 || c / a == b);\r\n          return c;\r\n     }\r\n\r\n     function safeSub(uint a, uint b) internal returns (uint) {\r\n          assert(b <= a);\r\n          return a - b;\r\n     }\r\n\r\n     function safeAdd(uint a, uint b) internal returns (uint) {\r\n          uint c = a + b;\r\n          assert(c>=a && c>=b);\r\n          return c;\r\n     }\r\n\r\n     function assert(bool assertion) internal {\r\n          if (!assertion) throw;\r\n     }\r\n}\r\n\r\n// Standard token interface (ERC 20)\r\n// https://github.com/ethereum/EIPs/issues/20\r\ncontract Token is SafeMath {\r\n     // Functions:\r\n     /// @return total amount of tokens\r\n     function totalSupply() constant returns (uint256 supply) {}\r\n\r\n     /// @param _owner The address from which the balance will be retrieved\r\n     /// @return The balance\r\n     function balanceOf(address _owner) constant returns (uint256 balance) {}\r\n\r\n     /// @notice send `_value` token to `_to` from `msg.sender`\r\n     /// @param _to The address of the recipient\r\n     /// @param _value The amount of token to be transferred\r\n     function transfer(address _to, uint256 _value) {}\r\n\r\n     /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\r\n     /// @param _from The address of the sender\r\n     /// @param _to The address of the recipient\r\n     /// @param _value The amount of token to be transferred\r\n     /// @return Whether the transfer was successful or not\r\n     function transferFrom(address _from, address _to, uint256 _value){}\r\n\r\n     /// @notice `msg.sender` approves `_addr` to spend `_value` tokens\r\n     /// @param _spender The address of the account able to transfer the tokens\r\n     /// @param _value The amount of wei to be approved for transfer\r\n     /// @return Whether the approval was successful or not\r\n     function approve(address _spender, uint256 _value) returns (bool success) {}\r\n\r\n     /// @param _owner The address of the account owning tokens\r\n     /// @param _spender The address of the account able to transfer the tokens\r\n     /// @return Amount of remaining tokens allowed to spent\r\n     function allowance(address _owner, address _spender) constant returns (uint256 remaining) {}\r\n\r\n     // Events:\r\n     event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n     event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\ncontract StdToken is Token {\r\n     // Fields:\r\n     mapping(address => uint256) balances;\r\n     mapping (address => mapping (address => uint256)) allowed;\r\n     uint public totalSupply = 0;\r\n\r\n     // Functions:\r\n     function transfer(address _to, uint256 _value) {\r\n          if((balances[msg.sender] < _value) || (balances[_to] + _value <= balances[_to])) {\r\n               throw;\r\n          }\r\n\r\n          balances[msg.sender] -= _value;\r\n          balances[_to] += _value;\r\n          Transfer(msg.sender, _to, _value);\r\n     }\r\n\r\n     function transferFrom(address _from, address _to, uint256 _value) {\r\n          if((balances[_from] < _value) || \r\n               (allowed[_from][msg.sender] < _value) || \r\n               (balances[_to] + _value <= balances[_to])) \r\n          {\r\n               throw;\r\n          }\r\n\r\n          balances[_to] += _value;\r\n          balances[_from] -= _value;\r\n          allowed[_from][msg.sender] -= _value;\r\n\r\n          Transfer(_from, _to, _value);\r\n     }\r\n\r\n     function balanceOf(address _owner) constant returns (uint256 balance) {\r\n          return balances[_owner];\r\n     }\r\n\r\n     function approve(address _spender, uint256 _value) returns (bool success) {\r\n          allowed[msg.sender][_spender] = _value;\r\n          Approval(msg.sender, _spender, _value);\r\n\r\n          return true;\r\n     }\r\n\r\n     function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n          return allowed[_owner][_spender];\r\n     }\r\n\r\n     modifier onlyPayloadSize(uint _size) {\r\n          if(msg.data.length < _size + 4) {\r\n               throw;\r\n          }\r\n          _;\r\n     }\r\n}\r\n\r\ncontract GOLD is StdToken {\r\n/// Fields:\r\n     string public constant name = \"Goldmint GOLD Token\";\r\n     string public constant symbol = \"GOLD\";\r\n     uint public constant decimals = 18;\r\n\r\n     address public creator = 0x0;\r\n     address public tokenManager = 0x0;\r\n\r\n     // lock by default all methods\r\n     bool public lock = true;\r\n\r\n/// Modifiers:\r\n     modifier onlyCreator() { if(msg.sender != creator) throw; _; }\r\n     modifier onlyCreatorOrTokenManager() { if((msg.sender!=creator) && (msg.sender!=tokenManager)) throw; _; }\r\n\r\n     function setCreator(address _creator) onlyCreator {\r\n          creator = _creator;\r\n     }\r\n\r\n     function setTokenManager(address _manager) onlyCreator {\r\n          tokenManager = _manager;\r\n     }\r\n\r\n     function lockContract(bool _lock) onlyCreator {\r\n          lock = _lock;\r\n     }\r\n\r\n/// Functions:\r\n     /// @dev Constructor\r\n     function GOLD() {\r\n          creator = msg.sender;\r\n          tokenManager = msg.sender;\r\n     }\r\n\r\n     /// @dev Override\r\n     function transfer(address _to, uint256 _value) public {\r\n          if(lock && (msg.sender!=tokenManager)){\r\n               throw;\r\n          }\r\n\r\n          super.transfer(_to,_value);\r\n     }\r\n\r\n     /// @dev Override\r\n     function transferFrom(address _from, address _to, uint256 _value)public{\r\n          if(lock && (msg.sender!=tokenManager)){\r\n               throw;\r\n          }\r\n\r\n          super.transferFrom(_from,_to,_value);\r\n     }\r\n\r\n     /// @dev Override\r\n     function approve(address _spender, uint256 _value) public returns (bool) {\r\n          if(lock && (msg.sender!=tokenManager)){\r\n               throw;\r\n          }\r\n\r\n          return super.approve(_spender,_value);\r\n     }\r\n\r\n     function issueTokens(address _who, uint _tokens) onlyCreatorOrTokenManager {\r\n          if(lock && (msg.sender!=tokenManager)){\r\n               throw;\r\n          }\r\n\r\n          balances[_who] += _tokens;\r\n          totalSupply += _tokens;\r\n     }\r\n\r\n     function burnTokens(address _who, uint _tokens) onlyCreatorOrTokenManager {\r\n          if(lock && (msg.sender!=tokenManager)){\r\n               throw;\r\n          }\r\n\r\n          balances[_who] = safeSub(balances[_who], _tokens);\r\n          totalSupply = safeSub(totalSupply, _tokens);\r\n     }\r\n\r\n     // Do not allow to send money directly to this contract\r\n     function() {\r\n          throw;\r\n     }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"},{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"burnTokens\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenManager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_creator\",\"type\":\"address\"}],\"name\":\"setCreator\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"},{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"issueTokens\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"setTokenManager\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_lock\",\"type\":\"bool\"}],\"name\":\"lockContract\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lock\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":false,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"GOLD","CompilerVersion":"v0.4.15+commit.bbb8e64f","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://ad29ca9163be17125fd6627556ebbbcd8a0f00a3a8bfff720b9906a23e0fabcd"}]}