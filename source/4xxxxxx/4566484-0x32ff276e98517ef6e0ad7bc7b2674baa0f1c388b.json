{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.16;\r\n\r\n\r\ncontract Token {\r\n    uint256 public totalSupply;\r\n\r\n    function balanceOf(address who) constant returns (uint256);\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    function Ownable() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) onlyOwner {\r\n        require(newOwner != address(0));\r\n        owner = newOwner;\r\n    }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n    event Pause();\r\n\r\n    event Unpause();\r\n\r\n    bool public paused = false;\r\n\r\n\r\n    /**\r\n     * @dev modifier to allow actions only when the contract IS paused\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!paused);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev modifier to allow actions only when the contract IS NOT paused\r\n     */\r\n    modifier whenPaused() {\r\n        require(paused);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev called by the owner to pause, triggers stopped state\r\n     */\r\n    function pause() onlyOwner whenNotPaused {\r\n        paused = true;\r\n        Pause();\r\n    }\r\n\r\n    /**\r\n     * @dev called by the owner to unpause, returns to normal state\r\n     */\r\n    function unpause() onlyOwner whenPaused {\r\n        paused = false;\r\n        Unpause();\r\n    }\r\n}\r\n\r\n\r\ncontract BillPokerPreICO is Ownable, Pausable {\r\n    using SafeMath for uint;\r\n\r\n    /* The party who holds the full token pool and has approve()'ed tokens for this crowdsale */\r\n    address public tokenWallet = 0xf91E6d611ec35B985bADAD2F0DA96820930B9BD2;\r\n\r\n    uint public tokensSold;\r\n\r\n    uint public weiRaised;\r\n\r\n    mapping (address => uint256) public holdTokens;\r\n\r\n    mapping (address => uint256) public purchaseTokens;\r\n\r\n    address[] public holdTokenInvestors;\r\n\r\n    Token public token = Token(0xc305fcdc300fa43c527e9327711f360e79528a70);\r\n\r\n    uint public constant minInvest = 0.0001 ether;\r\n\r\n    uint public constant tokensLimit = 25000000 ether;\r\n\r\n    // start and end timestamps where investments are allowed\r\n    uint256 public startTime = 1510339500; // 14 November 2017 00:00 UTC\r\n\r\n    uint256 public endTime = 1519689600; // 28 December 2017 00:00 UTC\r\n\r\n    uint public price = 0.0001 ether;\r\n\r\n    bool public isHoldTokens = false;\r\n\r\n    uint public investorCount;\r\n\r\n    mapping (bytes32 => Promo) public promoMap;\r\n\r\n    struct Promo {\r\n    bool enable;\r\n    uint investorPercentToken;\r\n    address dealer;\r\n    uint dealerPercentToken;\r\n    uint dealerPercentETH;\r\n    uint buyCount;\r\n    uint investorTokenAmount;\r\n    uint dealerTokenAmount;\r\n    uint investorEthAmount;\r\n    uint dealerEthAmount;\r\n    }\r\n    \r\n    function addPromo(bytes32 promoPublicKey, uint userPercentToken, address dealer, uint dealerPercentToken, uint dealerPercentETH) public onlyOwner {\r\n        promoMap[promoPublicKey] = Promo(true, userPercentToken, dealer, dealerPercentToken, dealerPercentETH, 0, 0, 0, 0, 0);\r\n    }\r\n\r\n    function removePromo(bytes32 promoPublicKey) public onlyOwner {\r\n        promoMap[promoPublicKey].enable = false;\r\n    }\r\n\r\n\r\n    /**\r\n     * event for token purchase logging\r\n     * @param purchaser who paid for the tokens\r\n     * @param beneficiary who got the tokens\r\n     * @param value weis paid for purchase\r\n     * @param amount amount of tokens purchased\r\n     */\r\n    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n\r\n    // fallback function can be used to buy tokens\r\n    function() public payable {\r\n        buyTokens(msg.sender);\r\n    }\r\n\r\n    // low level token purchase function\r\n    function buyTokens(address beneficiary) public whenNotPaused payable {\r\n        require(startTime <= now && now <= endTime);\r\n\r\n        uint weiAmount = msg.value;\r\n\r\n        require(weiAmount >= minInvest);\r\n\r\n        uint tokenAmountEnable = tokensLimit.sub(tokensSold);\r\n\r\n        require(tokenAmountEnable > 0);\r\n\r\n        uint tokenAmount = weiAmount / price * 1 ether;\r\n\r\n        if (tokenAmount > tokenAmountEnable) {\r\n            tokenAmount = tokenAmountEnable;\r\n            weiAmount = tokenAmount * price / 1 ether;\r\n            msg.sender.transfer(msg.value.sub(weiAmount));\r\n\r\n\r\n            if (msg.data.length > 0) {\r\n                Promo storage promo = promoMap[sha3(msg.data)];\r\n                if (promo.enable && promo.dealerPercentETH > 0) {\r\n                    uint dealerEthAmount = weiAmount * promo.dealerPercentETH / 10000;\r\n                    promo.dealer.transfer(dealerEthAmount);\r\n                    weiAmount = weiAmount.sub(dealerEthAmount);\r\n\r\n                    promo.dealerEthAmount += dealerEthAmount;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            uint countBonusAmount = tokenAmount * getCountBonus(weiAmount) / 1000;\r\n            uint timeBonusAmount = tokenAmount * getTimeBonus(now) / 1000;\r\n\r\n            if (msg.data.length > 0) {\r\n                bytes32 promoPublicKey = sha3(msg.data);\r\n                promo = promoMap[promoPublicKey];\r\n                if (promo.enable) {\r\n                    \r\n                    promo.buyCount++;\r\n                    promo.investorTokenAmount += tokenAmount;\r\n                    promo.investorEthAmount += weiAmount;\r\n                    \r\n                    if (promo.dealerPercentToken > 0) {\r\n                        uint dealerTokenAmount = tokenAmount * promo.dealerPercentToken / 10000;\r\n                        sendTokens(promo.dealer, dealerTokenAmount);\r\n                        promo.dealerTokenAmount += dealerTokenAmount;\r\n                    }\r\n\r\n                    if (promo.dealerPercentETH > 0) {\r\n                        dealerEthAmount = weiAmount * promo.dealerPercentETH / 10000;\r\n                        promo.dealer.transfer(dealerEthAmount);\r\n                        weiAmount = weiAmount.sub(dealerEthAmount);\r\n                        promo.dealerEthAmount += dealerEthAmount;\r\n                    }\r\n\r\n                        \r\n                    if (promo.investorPercentToken > 0) {\r\n                        uint promoBonusAmount = tokenAmount * promo.investorPercentToken / 10000;\r\n                        tokenAmount += promoBonusAmount;\r\n                    }\r\n\r\n                }\r\n            }\r\n\r\n            tokenAmount += countBonusAmount + timeBonusAmount;\r\n\r\n            if (tokenAmount > tokenAmountEnable) {\r\n                tokenAmount = tokenAmountEnable;\r\n            }\r\n        }\r\n\r\n\r\n        if (purchaseTokens[beneficiary] == 0) investorCount++;\r\n\r\n        purchaseTokens[beneficiary] = purchaseTokens[beneficiary].add(tokenAmount);\r\n\r\n        sendTokens(beneficiary, tokenAmount);\r\n\r\n        weiRaised = weiRaised.add(weiAmount);\r\n\r\n        TokenPurchase(msg.sender, beneficiary, weiAmount, tokenAmount);\r\n    }\r\n\r\n    function sendTokens(address to, uint tokenAmount) private {\r\n        if (isHoldTokens) {\r\n            if (holdTokens[to] == 0) holdTokenInvestors.push(to);\r\n            holdTokens[to] = holdTokens[to].add(tokenAmount);\r\n        }\r\n        else {\r\n            require(token.transferFrom(tokenWallet, to, tokenAmount));\r\n        }\r\n\r\n        tokensSold = tokensSold.add(tokenAmount);\r\n    }\r\n\r\n    uint[] etherForCountBonus = [2 ether, 3 ether, 5 ether, 7 ether, 9 ether, 12 ether, 15 ether, 20 ether, 25 ether, 30 ether, 35 ether, 40 ether, 45 ether, 50 ether, 60 ether, 70 ether, 80 ether, 90 ether, 100 ether, 120 ether, 150 ether, 200 ether, 250 ether, 300 ether, 350 ether, 400 ether, 450 ether, 500 ether];\r\n\r\n    uint[] amountForCountBonus = [0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 90, 100, 105, 110, 115, 120, 125, 130, 135, 140, 145, 150];\r\n\r\n\r\n    function getCountBonus(uint weiAmount) public constant returns (uint) {\r\n        for (uint i = 0; i < etherForCountBonus.length; i++) {\r\n            if (weiAmount < etherForCountBonus[i]) return amountForCountBonus[i];\r\n        }\r\n        return amountForCountBonus[amountForCountBonus.length - 1];\r\n    }\r\n\r\n    function getTimeBonus(uint time) public constant returns (uint) {\r\n        if (time < startTime + 604800) return 250;\r\n        if (time < startTime + 604800) return 200;\r\n        if (time < startTime + 259200) return 100;\r\n        return 0;\r\n    }\r\n\r\n    function withdrawal(address to) public onlyOwner {\r\n        to.transfer(this.balance);\r\n    }\r\n\r\n    function holdTokenInvestorsCount() public constant returns(uint){\r\n        return holdTokenInvestors.length;\r\n    }\r\n\r\n    uint public sendInvestorIndex = 0;\r\n\r\n    function finalSendTokens() public onlyOwner {\r\n        isHoldTokens = false;\r\n        \r\n        for (uint i = sendInvestorIndex; i < holdTokenInvestors.length; i++) {\r\n            address investor = holdTokenInvestors[i];\r\n            uint tokenAmount = holdTokens[investor];\r\n\r\n            if (tokenAmount > 0) {\r\n                holdTokens[investor] = 0;\r\n                require(token.transferFrom(tokenWallet, investor, tokenAmount));\r\n            }\r\n\r\n            if (msg.gas < 100000) {\r\n                sendInvestorIndex = i;\r\n                return;\r\n            }\r\n        }\r\n\r\n        sendInvestorIndex = holdTokenInvestors.length;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"holdTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalSendTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"holdTokenInvestors\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"promoPublicKey\",\"type\":\"bytes32\"}],\"name\":\"removePromo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minInvest\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"holdTokenInvestorsCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isHoldTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdrawal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"promoPublicKey\",\"type\":\"bytes32\"},{\"name\":\"userPercentToken\",\"type\":\"uint256\"},{\"name\":\"dealer\",\"type\":\"address\"},{\"name\":\"dealerPercentToken\",\"type\":\"uint256\"},{\"name\":\"dealerPercentETH\",\"type\":\"uint256\"}],\"name\":\"addPromo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"weiAmount\",\"type\":\"uint256\"}],\"name\":\"getCountBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"getTimeBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"purchaseTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"promoMap\",\"outputs\":[{\"name\":\"enable\",\"type\":\"bool\"},{\"name\":\"investorPercentToken\",\"type\":\"uint256\"},{\"name\":\"dealer\",\"type\":\"address\"},{\"name\":\"dealerPercentToken\",\"type\":\"uint256\"},{\"name\":\"dealerPercentETH\",\"type\":\"uint256\"},{\"name\":\"buyCount\",\"type\":\"uint256\"},{\"name\":\"investorTokenAmount\",\"type\":\"uint256\"},{\"name\":\"dealerTokenAmount\",\"type\":\"uint256\"},{\"name\":\"investorEthAmount\",\"type\":\"uint256\"},{\"name\":\"dealerEthAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"investorCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sendInvestorIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"}]","ContractName":"BillPokerPreICO","CompilerVersion":"v0.4.16+commit.d7661dd9","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://0e9151841ff25ac0dd57c3074142a8dbe60844456fec8eb534766462f4a96a91"}]}