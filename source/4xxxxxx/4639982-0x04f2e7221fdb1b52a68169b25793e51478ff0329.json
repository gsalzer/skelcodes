{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 {\r\n  uint public totalSupply;\r\n\r\n  function balanceOf(address _owner) constant public returns (uint balance);\r\n  function transfer(address _to, uint _value) public returns (bool success);\r\n  function transferFrom(address _from, address _to, uint _value) public returns (bool success);\r\n  function approve(address _spender, uint _value) public returns (bool success);\r\n  function allowance(address _owner, address _spender) constant public returns (uint remaining);\r\n\r\n  event Transfer(address indexed _from, address indexed _to, uint value);\r\n  event Approval(address indexed _owner, address indexed _spender, uint value);\r\n}\r\n\r\nlibrary SafeMath {\r\n   function mul(uint a, uint b) internal pure returns (uint) {\r\n     if (a == 0) {\r\n        return 0;\r\n      }\r\n\r\n      uint c = a * b;\r\n      assert(c / a == b);\r\n      return c;\r\n   }\r\n\r\n   function sub(uint a, uint b) internal pure returns (uint) {\r\n      assert(b <= a);\r\n      return a - b;\r\n   }\r\n\r\n   function add(uint a, uint b) internal pure returns (uint) {\r\n      uint c = a + b;\r\n      assert(c >= a);\r\n      return c;\r\n   }\r\n\r\n  function div(uint a, uint b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract StandardToken is ERC20 {\r\n    using SafeMath for uint;\r\n\r\n    mapping (address => uint) balances;\r\n    mapping (address => mapping (address => uint)) allowed;\r\n\r\n    function transfer(address _to, uint _value) onlyPayloadSize(2 * 32) public returns (bool) {\r\n        if (balances[msg.sender] >= _value\r\n            && _value > 0\r\n            && _to != msg.sender\r\n            && _to != address(0)\r\n          ) {\r\n            balances[msg.sender] = balances[msg.sender].sub(_value);\r\n            balances[_to] = balances[_to].add(_value);\r\n\r\n            Transfer(msg.sender, _to, _value);\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint _value) public returns (bool) {\r\n        if (balances[_from] >= _value\r\n            && allowed[_from][msg.sender] >= _value\r\n            && _value > 0\r\n            && _from != _to\r\n          ) {\r\n            balances[_to]   = balances[_to].add(_value);\r\n            balances[_from] = balances[_from].sub(_value);\r\n            allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n            Transfer(_from, _to, _value);\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    function balanceOf(address _owner) constant public returns (uint) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) constant public returns (uint) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    function approve(address _spender, uint _value) public returns (bool) {\r\n        require(_spender != address(0));\r\n        // needs to be called twice -> first set to 0, then increase to another amount\r\n        // this is to avoid race conditions\r\n        require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n        // useless operation\r\n        require(_spender != address(0));\r\n\r\n        // perform operation\r\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n        // useless operation\r\n        require(_spender != address(0));\r\n\r\n        uint oldValue = allowed[msg.sender][_spender];\r\n        if (_subtractedValue > oldValue) {\r\n            allowed[msg.sender][_spender] = 0;\r\n        } else {\r\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n        }\r\n\r\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n    modifier onlyPayloadSize(uint _size) {\r\n        require(msg.data.length >= _size + 4);\r\n        _;\r\n    }\r\n}\r\n\r\ncontract Cappasity is StandardToken {\r\n\r\n    // Constants\r\n    // =========\r\n    string public constant name = \"Cappasity\";\r\n    string public constant symbol = \"CAPP\";\r\n    uint8 public constant decimals = 2;\r\n    uint public constant TOKEN_LIMIT = 10 * 1e9 * 1e2; // 10 billion tokens, 2 decimals\r\n\r\n    // State variables\r\n    // ===============\r\n    address public manager;\r\n\r\n    // Block token transfers until ICO is finished.\r\n    bool public tokensAreFrozen = true;\r\n\r\n    // Allow/Disallow minting\r\n    bool public mintingIsAllowed = true;\r\n\r\n    // events for minting\r\n    event MintingAllowed();\r\n    event MintingDisabled();\r\n\r\n    // Freeze/Unfreeze assets\r\n    event TokensFrozen();\r\n    event TokensUnfrozen();\r\n\r\n    // Constructor\r\n    // ===========\r\n    function Cappasity(address _manager) public {\r\n        manager = _manager;\r\n    }\r\n\r\n    // Fallback function\r\n    // Do not allow to send money directly to this contract\r\n    function() payable public {\r\n        revert();\r\n    }\r\n\r\n    // ERC20 functions\r\n    // =========================\r\n    function transfer(address _to, uint _value) public returns (bool) {\r\n        require(!tokensAreFrozen);\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint _value) public returns (bool) {\r\n        require(!tokensAreFrozen);\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n    function approve(address _spender, uint _value) public returns (bool) {\r\n        require(!tokensAreFrozen);\r\n        return super.approve(_spender, _value);\r\n    }\r\n\r\n    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n        require(!tokensAreFrozen);\r\n        return super.increaseApproval(_spender, _addedValue);\r\n    }\r\n\r\n    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n        require(!tokensAreFrozen);\r\n        return super.decreaseApproval(_spender, _subtractedValue);\r\n    }\r\n\r\n    // PRIVILEGED FUNCTIONS\r\n    // ====================\r\n    modifier onlyByManager() {\r\n        require(msg.sender == manager);\r\n        _;\r\n    }\r\n\r\n    // Mint some tokens and assign them to an address\r\n    function mint(address _beneficiary, uint _value) external onlyByManager {\r\n        require(_value != 0);\r\n        require(totalSupply.add(_value) <= TOKEN_LIMIT);\r\n        require(mintingIsAllowed == true);\r\n\r\n        balances[_beneficiary] = balances[_beneficiary].add(_value);\r\n        totalSupply = totalSupply.add(_value);\r\n    }\r\n\r\n    // Disable minting. Can be enabled later, but TokenAllocation.sol only does that once.\r\n    function endMinting() external onlyByManager {\r\n        require(mintingIsAllowed == true);\r\n        mintingIsAllowed = false;\r\n        MintingDisabled();\r\n    }\r\n\r\n    // Enable minting. See TokenAllocation.sol\r\n    function startMinting() external onlyByManager {\r\n        require(mintingIsAllowed == false);\r\n        mintingIsAllowed = true;\r\n        MintingAllowed();\r\n    }\r\n\r\n    // Disable token transfer\r\n    function freeze() external onlyByManager {\r\n        require(tokensAreFrozen == false);\r\n        tokensAreFrozen = true;\r\n        TokensFrozen();\r\n    }\r\n\r\n    // Allow token transfer\r\n    function unfreeze() external onlyByManager {\r\n        require(tokensAreFrozen == true);\r\n        tokensAreFrozen = false;\r\n        TokensUnfrozen();\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN_LIMIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mintingIsAllowed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"freeze\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unfreeze\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startMinting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensAreFrozen\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"endMinting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_manager\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintingAllowed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintingDisabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"TokensFrozen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"TokensUnfrozen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"Cappasity","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000f67acb7b9226e482afcf7f08aac9466c50c19d9c","Library":"","SwarmSource":"bzzr://aae7252a04d75dd9b6180657454476c6b715329f50bb603876154f65c5a464a0"}]}