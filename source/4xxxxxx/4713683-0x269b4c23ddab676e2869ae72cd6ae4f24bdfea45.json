{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.15;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        uint256 c = a * b;\r\n        if (a != 0 && c / a != b) revert();\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        if (b > a) revert();\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        uint256 c = a + b;\r\n        if (c < a) revert();\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract ERC20Basic {\r\n    uint256 public totalSupply;\r\n\r\n    function balanceOf(address who) public constant returns (uint256);\r\n\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n    function allowance(address owner, address spender) public constant returns (uint256);\r\n\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) balances;\r\n\r\n    /**\r\n    * @dev transfer token for a specified address\r\n    * @param _to The address to transfer to.\r\n    * @param _value The amount to be transferred.\r\n    */\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n\r\n        // SafeMath.sub will throw if there is not enough balance.\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the balance of the specified address.\r\n    * @param _owner The address to query the the balance of.\r\n    * @return An uint256 representing the amount owned by the passed address.\r\n    */\r\n    function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another\r\n     * @param _from address The address which you want to send tokens from\r\n     * @param _to address The address which you want to transfer to\r\n     * @param _value uint256 the amount of tokens to be transferred\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n\r\n        uint256 _allowance = allowed[_from][msg.sender];\r\n\r\n        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n        // require (_value <= _allowance);\r\n\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = _allowance.sub(_value);\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n     *\r\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _value The amount of tokens to be spent.\r\n     */\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n     * @param _owner address The address which owns the funds.\r\n     * @param _spender address The address which will spend the funds.\r\n     * @return A uint256 specifying the amount of tokens still available for the spender.\r\n     */\r\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    /**\r\n     * approve should be called when allowed[_spender] == 0. To increment\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     */\r\n    function increaseApproval(address _spender, uint _addedValue)\r\n    returns (bool success) {\r\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n    function decreaseApproval(address _spender, uint _subtractedValue)\r\n    returns (bool success) {\r\n        uint oldValue = allowed[msg.sender][_spender];\r\n        if (_subtractedValue > oldValue) {\r\n            allowed[msg.sender][_spender] = 0;\r\n        }\r\n        else {\r\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n        }\r\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    function Ownable() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) onlyOwner public {\r\n        require(newOwner != address(0));\r\n        OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n    event Pause();\r\n\r\n    event Unpause();\r\n\r\n    bool public paused = false;\r\n\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!paused);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(paused);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev called by the owner to pause, triggers stopped state\r\n     */\r\n    function pause() onlyOwner whenNotPaused public {\r\n        paused = true;\r\n        Pause();\r\n    }\r\n\r\n    /**\r\n     * @dev called by the owner to unpause, returns to normal state\r\n     */\r\n    function unpause() onlyOwner whenPaused public {\r\n        paused = false;\r\n        Unpause();\r\n    }\r\n}\r\n\r\n/**\r\n * @title IRBTokens\r\n * @dev IRB Token contract based on Zeppelin StandardToken contract\r\n */\r\ncontract IRBToken is StandardToken, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    /**\r\n     * @dev ERC20 descriptor variables\r\n     */\r\n    string public constant name = \"IRB Tokens\";\r\n\r\n    string public constant symbol = \"IRB\";\r\n\r\n    uint8 public decimals = 18;\r\n\r\n    /**\r\n     * @dev 489.58 millions s the initial Token sale\r\n     */\r\n    uint256 public constant crowdsaleTokens = 489580 * 10 ** 21;\r\n\r\n    /**\r\n     * @dev 10.42 millions is the initial Token presale\r\n     */\r\n    uint256 public constant preCrowdsaleTokens = 10420 * 10 ** 21;\r\n\r\n    // TODO: TestRPC addresses, replace to real\r\n    // PRE Crowdsale Tokens Wallet\r\n    address public constant preCrowdsaleTokensWallet = 0x0CD95a59fAd089c4EBCCEB54f335eC8f61Caa80e;\r\n    // Crowdsale Tokens Wallet\r\n    address public constant crowdsaleTokensWallet = 0x48545E41696Dc51020C35cA8C36b678101a98437;\r\n\r\n    /**\r\n     * @dev Address of PRE Crowdsale contract which will be compared\r\n     *       against in the appropriate modifier check\r\n     */\r\n    address public preCrowdsaleContractAddress;\r\n\r\n    /**\r\n     * @dev Address of Crowdsale contract which will be compared\r\n     *       against in the appropriate modifier check\r\n     */\r\n    address public crowdsaleContractAddress;\r\n\r\n    /**\r\n     * @dev variable that holds flag of ended pre tokensake\r\n     */\r\n    bool isPreFinished = false;\r\n\r\n    /**\r\n     * @dev variable that holds flag of ended tokensake\r\n     */\r\n    bool isFinished = false;\r\n\r\n    /**\r\n     * @dev Modifier that allow only the Crowdsale contract to be sender\r\n     */\r\n    modifier onlyPreCrowdsaleContract() {\r\n        require(msg.sender == preCrowdsaleContractAddress);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier that allow only the Crowdsale contract to be sender\r\n     */\r\n    modifier onlyCrowdsaleContract() {\r\n        require(msg.sender == crowdsaleContractAddress);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev event for the burnt tokens after crowdsale logging\r\n     * @param tokens amount of tokens available for crowdsale\r\n     */\r\n    event TokensBurnt(uint256 tokens);\r\n\r\n    /**\r\n     * @dev event for the tokens contract move to the active state logging\r\n     * @param supply amount of tokens left after all the unsold was burned\r\n     */\r\n    event Live(uint256 supply);\r\n\r\n    /**\r\n     * @dev Contract constructor\r\n     */\r\n    function IRBToken() {\r\n        // Issue pre crowdsale tokens\r\n        balances[preCrowdsaleTokensWallet] = balanceOf(preCrowdsaleTokensWallet).add(preCrowdsaleTokens);\r\n        Transfer(address(0), preCrowdsaleTokensWallet, preCrowdsaleTokens);\r\n\r\n        // Issue crowdsale tokens\r\n        balances[crowdsaleTokensWallet] = balanceOf(crowdsaleTokensWallet).add(crowdsaleTokens);\r\n        Transfer(address(0), crowdsaleTokensWallet, crowdsaleTokens);\r\n\r\n        // 500 millions tokens overall\r\n        totalSupply = crowdsaleTokens.add(preCrowdsaleTokens);\r\n    }\r\n\r\n    /**\r\n     * @dev back link IRBToken contract with IRBPreCrowdsale one\r\n     * @param _preCrowdsaleAddress non zero address of IRBPreCrowdsale contract\r\n     */\r\n    function setPreCrowdsaleAddress(address _preCrowdsaleAddress) onlyOwner external {\r\n        require(_preCrowdsaleAddress != address(0));\r\n        preCrowdsaleContractAddress = _preCrowdsaleAddress;\r\n\r\n        // Allow pre crowdsale contract\r\n        uint256 balance = balanceOf(preCrowdsaleTokensWallet);\r\n        allowed[preCrowdsaleTokensWallet][preCrowdsaleContractAddress] = balance;\r\n        Approval(preCrowdsaleTokensWallet, preCrowdsaleContractAddress, balance);\r\n    }\r\n\r\n    /**\r\n     * @dev back link IRBToken contract with IRBCrowdsale one\r\n     * @param _crowdsaleAddress non zero address of IRBCrowdsale contract\r\n     */\r\n    function setCrowdsaleAddress(address _crowdsaleAddress) onlyOwner external {\r\n        require(isPreFinished);\r\n        require(_crowdsaleAddress != address(0));\r\n        crowdsaleContractAddress = _crowdsaleAddress;\r\n\r\n        // Allow crowdsale contract\r\n        uint256 balance = balanceOf(crowdsaleTokensWallet);\r\n        allowed[crowdsaleTokensWallet][crowdsaleContractAddress] = balance;\r\n        Approval(crowdsaleTokensWallet, crowdsaleContractAddress, balance);\r\n    }\r\n\r\n    /**\r\n     * @dev called only by linked IRBPreCrowdsale contract to end precrowdsale.\r\n     */\r\n    function endPreTokensale() onlyPreCrowdsaleContract external {\r\n        require(!isPreFinished);\r\n        uint256 preCrowdsaleLeftovers = balanceOf(preCrowdsaleTokensWallet);\r\n\r\n        if (preCrowdsaleLeftovers > 0) {\r\n            balances[preCrowdsaleTokensWallet] = 0;\r\n            balances[crowdsaleTokensWallet] = balances[crowdsaleTokensWallet].add(preCrowdsaleLeftovers);\r\n            Transfer(preCrowdsaleTokensWallet, crowdsaleTokensWallet, preCrowdsaleLeftovers);\r\n        }\r\n\r\n        isPreFinished = true;\r\n    }\r\n\r\n    /**\r\n     * @dev called only by linked IRBCrowdsale contract to end crowdsale.\r\n     */\r\n    function endTokensale() onlyCrowdsaleContract external {\r\n        require(!isFinished);\r\n        uint256 crowdsaleLeftovers = balanceOf(crowdsaleTokensWallet);\r\n\r\n        if (crowdsaleLeftovers > 0) {\r\n            totalSupply = totalSupply.sub(crowdsaleLeftovers);\r\n\r\n            balances[crowdsaleTokensWallet] = 0;\r\n            Transfer(crowdsaleTokensWallet, address(0), crowdsaleLeftovers);\r\n            TokensBurnt(crowdsaleLeftovers);\r\n        }\r\n\r\n        isFinished = true;\r\n        Live(totalSupply);\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title RefundVault.\r\n * @dev This contract is used for storing funds while a crowdsale\r\n * is in progress. Supports refunding the money if crowdsale fails,\r\n * and forwarding it if crowdsale is successful.\r\n */\r\ncontract IRBPreRefundVault is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    enum State {Active, Refunding, Closed}\r\n    State public state;\r\n\r\n    mapping (address => uint256) public deposited;\r\n\r\n    uint256 public totalDeposited;\r\n\r\n    address public constant wallet = 0x26dB9eF39Bbfe437f5b384c3913E807e5633E7cE;\r\n\r\n    address preCrowdsaleContractAddress;\r\n\r\n    event Closed();\r\n\r\n    event RefundsEnabled();\r\n\r\n    event Refunded(address indexed beneficiary, uint256 weiAmount);\r\n\r\n    event Withdrawal(address indexed receiver, uint256 weiAmount);\r\n\r\n    function IRBPreRefundVault() {\r\n        state = State.Active;\r\n    }\r\n\r\n    modifier onlyCrowdsaleContract() {\r\n        require(msg.sender == preCrowdsaleContractAddress);\r\n        _;\r\n    }\r\n\r\n    function setPreCrowdsaleAddress(address _preCrowdsaleAddress) external onlyOwner {\r\n        require(_preCrowdsaleAddress != address(0));\r\n        preCrowdsaleContractAddress = _preCrowdsaleAddress;\r\n    }\r\n\r\n    function deposit(address investor) onlyCrowdsaleContract external payable {\r\n        require(state == State.Active);\r\n        uint256 amount = msg.value;\r\n        deposited[investor] = deposited[investor].add(amount);\r\n        totalDeposited = totalDeposited.add(amount);\r\n    }\r\n\r\n    function close() onlyCrowdsaleContract external {\r\n        require(state == State.Active);\r\n        state = State.Closed;\r\n        totalDeposited = 0;\r\n        Closed();\r\n        wallet.transfer(this.balance);\r\n    }\r\n\r\n    function enableRefunds() onlyCrowdsaleContract external {\r\n        require(state == State.Active);\r\n        state = State.Refunding;\r\n        RefundsEnabled();\r\n    }\r\n\r\n    function refund(address investor) public {\r\n        require(state == State.Refunding);\r\n        uint256 depositedValue = deposited[investor];\r\n        deposited[investor] = 0;\r\n        investor.transfer(depositedValue);\r\n        Refunded(investor, depositedValue);\r\n    }\r\n\r\n    /**\r\n     * @dev withdraw method that can be used by crowdsale contract's owner\r\n     *      for the withdrawal funds to the owner\r\n     */\r\n    function withdraw(uint value) onlyCrowdsaleContract external returns (bool success) {\r\n        require(state == State.Active);\r\n        require(totalDeposited >= value);\r\n        totalDeposited = totalDeposited.sub(value);\r\n        wallet.transfer(value);\r\n        Withdrawal(wallet, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev killer method that can be used by owner to\r\n     *      kill the contract and send funds to owner\r\n     */\r\n    function kill() onlyOwner {\r\n        require(state == State.Closed);\r\n        selfdestruct(owner);\r\n    }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title IRBPreCrowdsale\r\n * @dev IRB pre crowdsale contract borrows Zeppelin Finalized, Capped and Refundable crowdsales implementations\r\n */\r\ncontract IRBPreCrowdsale is Ownable, Pausable {\r\n    using SafeMath for uint;\r\n\r\n    /**\r\n     * @dev token contract\r\n     */\r\n    IRBToken public token;\r\n\r\n    /**\r\n     * @dev refund vault used to hold funds while crowdsale is running\r\n     */\r\n    IRBPreRefundVault public vault;\r\n\r\n    /**\r\n     * @dev tokensale(presale) start time: Dec 12, 2017, 11:00:00 + 3\r\n     */\r\n    uint startTime = 1513065600;\r\n\r\n    /**\r\n     * @dev tokensale end time: Jan 14, 2018 23:59:59 +3\r\n     */\r\n    uint endTime = 1515963599;\r\n\r\n    /**\r\n     * @dev minimum purchase amount for presale\r\n     */\r\n    uint256 public constant minPresaleAmount = 108 * 10 ** 15; // 400 IRB\r\n\r\n    /**\r\n     * @dev minimum and maximum amount of funds to be raised in weis\r\n     */\r\n    uint256 public constant goal = 1125 * 10 ** 18;  // 1.125 Kether\r\n    uint256 public constant cap = 2250 * 10 ** 18; // 2.25 Kether\r\n\r\n    /**\r\n     * @dev amount of raised money in wei\r\n     */\r\n    uint256 public weiRaised;\r\n\r\n    /**\r\n     * @dev tokensale finalization flag\r\n     */\r\n    bool public isFinalized = false;\r\n\r\n    /**\r\n     * @dev event for token purchase logging\r\n     * @param purchaser who paid for the tokens\r\n     * @param beneficiary who got the tokens\r\n     * @param value weis paid for purchase\r\n     * @param amount amount of tokens purchased\r\n     */\r\n    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n\r\n    /**\r\n     * @dev event for tokensale final logging\r\n     */\r\n    event Finalized();\r\n\r\n    /**\r\n     * @dev Pre Crowdsale in the constructor takes addresses of\r\n     *      the just deployed IRBToken and IRBPreRefundVault contracts\r\n     * @param _tokenAddress address of the IRBToken deployed contract\r\n     * @param _vaultAddress address of the IRBPreRefundVault deployed contract\r\n     */\r\n    function IRBPreCrowdsale(address _tokenAddress, address _vaultAddress) {\r\n        require(_tokenAddress != address(0));\r\n        require(_vaultAddress != address(0));\r\n\r\n        // IRBToken and IRBPreRefundVault was deployed separately\r\n        token = IRBToken(_tokenAddress);\r\n        vault = IRBPreRefundVault(_vaultAddress);\r\n    }\r\n\r\n    /**\r\n     * @dev fallback function can be used to buy tokens\r\n     */\r\n    function() payable {\r\n        buyTokens(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev main function to buy tokens\r\n     * @param beneficiary target wallet for tokens can vary from the sender one\r\n     */\r\n    function buyTokens(address beneficiary) whenNotPaused public payable {\r\n        require(beneficiary != address(0));\r\n        require(validPurchase(msg.value));\r\n\r\n        uint256 weiAmount = msg.value;\r\n\r\n        // buyer and beneficiary could be two different wallets\r\n        address buyer = msg.sender;\r\n\r\n        // calculate token amount to be created\r\n        uint256 tokens = convertAmountToTokens(weiAmount);\r\n\r\n        weiRaised = weiRaised.add(weiAmount);\r\n\r\n        if (!token.transferFrom(token.preCrowdsaleTokensWallet(), beneficiary, tokens)) {\r\n            revert();\r\n        }\r\n\r\n        TokenPurchase(buyer, beneficiary, weiAmount, tokens);\r\n\r\n        vault.deposit.value(weiAmount)(buyer);\r\n    }\r\n\r\n    /**\r\n     * @dev check if the current purchase valid based on time and amount of passed ether\r\n     * @param _value amount of passed ether\r\n     * @return true if investors can buy at the moment\r\n     */\r\n    function validPurchase(uint256 _value) internal constant returns (bool) {\r\n        bool nonZeroPurchase = _value != 0;\r\n        bool withinPeriod = now >= startTime && now <= endTime;\r\n        bool withinCap = weiRaised.add(_value) <= cap;\r\n        // For presale we want to decline all payments less then minPresaleAmount\r\n        bool withinAmount = msg.value >= minPresaleAmount;\r\n\r\n        return nonZeroPurchase && withinPeriod && withinCap && withinAmount;\r\n    }\r\n\r\n    /**\r\n     * @dev check if crowdsale still active based on current time and cap\r\n     * consider minPresaleAmount\r\n     * @return true if crowdsale event has ended\r\n     */\r\n    function hasEnded() public constant returns (bool) {\r\n        bool capReached = weiRaised.add(minPresaleAmount) >= cap;\r\n        bool timeIsUp = now > endTime;\r\n        return timeIsUp || capReached;\r\n    }\r\n\r\n    /**\r\n     * @dev if crowdsale is unsuccessful, investors can claim refunds here\r\n     */\r\n    function claimRefund() public {\r\n        require(isFinalized);\r\n        require(!goalReached());\r\n\r\n        vault.refund(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev finalize crowdsale. this method triggers vault and token finalization\r\n     */\r\n    function finalize() onlyOwner public {\r\n        require(!isFinalized);\r\n        require(hasEnded());\r\n\r\n        // trigger vault and token finalization\r\n        if (goalReached()) {\r\n            vault.close();\r\n        }\r\n        else {\r\n            vault.enableRefunds();\r\n        }\r\n\r\n        token.endPreTokensale();\r\n\r\n        isFinalized = true;\r\n\r\n        Finalized();\r\n    }\r\n\r\n    /**\r\n     * @dev check if hard cap goal is reached\r\n     */\r\n    function goalReached() public constant returns (bool) {\r\n        return weiRaised >= goal;\r\n    }\r\n\r\n    /**\r\n    * @dev withdraw method that can be used by owner for\r\n    *      withdraw funds from vault to owner\r\n    */\r\n    function withdraw(uint256 amount) onlyOwner public {\r\n        require(!isFinalized);\r\n        require(goalReached());\r\n        require(amount > 0);\r\n\r\n        vault.withdraw(amount);\r\n    }\r\n\r\n    /**\r\n     * @dev returns current token price\r\n     */\r\n    function convertAmountToTokens(uint256 amount) public constant returns (uint256) {\r\n        // 1 token = 0.00027 ETH\r\n        uint256 tokens = amount.div(27).mul(100000);\r\n        // bonus +25%\r\n        uint256 bonus = tokens.div(4);\r\n\r\n        return tokens.add(bonus);\r\n    }\r\n\r\n    /**\r\n     * @dev killer method that can bu used by owner to\r\n     *      kill the contract and send funds to owner\r\n     */\r\n    function kill() onlyOwner whenPaused {\r\n        selfdestruct(owner);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"goal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"convertAmountToTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"goalReached\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isFinalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimRefund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minPresaleAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_vaultAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Finalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"IRBPreCrowdsale","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000003ccb4b3bb15d4b8911cd7f57a6479e21daf4c68c000000000000000000000000cbe98a2b1f756bebe53d41eb3b94e566a0777ede","Library":"","SwarmSource":"bzzr://2a3f0dadd6c45f5e02e08dab56205164747602e08bbf979cb47be08f48f239ad"}]}