{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.15;\r\n\r\ncontract ERC20 {\r\n    function totalSupply() external constant returns (uint256 _totalSupply);\r\n    function balanceOf(address _owner) external constant returns (uint256 balance);\r\n    function userTransfer(address _to, uint256 _value) external returns (bool success);\r\n    function userTransferFrom(address _from, address _to, uint256 _value) external returns (bool success);\r\n    function userApprove(address _spender, uint256 _old, uint256 _new) external returns (bool success);\r\n    function allowance(address _owner, address _spender) external constant returns (uint256 remaining);\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n    function ERC20() internal {\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    uint256 constant private    MAX_UINT256     = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n\r\n    function safeAdd (uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        assert (x <= MAX_UINT256 - y);\r\n        return x + y;\r\n    }\r\n\r\n    function safeSub (uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        assert (x >= y);\r\n        return x - y;\r\n    }\r\n\r\n    function safeMul (uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = x * y;\r\n        assert(x == 0 || z / x == y);\r\n    }\r\n\r\n    function safeDiv (uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = x / y;\r\n        return z;\r\n    }\r\n}\r\n\r\ncontract AutoCoin is ERC20 {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    address public              owner;\r\n    address private             subowner;\r\n\r\n    uint256 private             summarySupply;\r\n    uint256 public              weiPerMinToken;\r\n\r\n    string  public              name = \"Auto Token\";\r\n    string  public              symbol = \"ATK\";\r\n    uint8   public              decimals = 2;\r\n\r\n    bool    public              contractEnable = true;\r\n    bool    public              transferEnable = false;\r\n\r\n\r\n    mapping(address => uint8)                        private   group;\r\n    mapping(address => uint256)                      private   accounts;\r\n    mapping(address => mapping (address => uint256)) private   allowed;\r\n\r\n    event EvGroupChanged(address _address, uint8 _oldgroup, uint8 _newgroup);\r\n    event EvTokenAdd(uint256 _value, uint256 _lastSupply);\r\n    event EvTokenRm(uint256 _delta, uint256 _value, uint256 _lastSupply);\r\n    event EvLoginfo(string _functionName, string _text);\r\n    event EvMigration(address _address, uint256 _balance, uint256 _secret);\r\n\r\n    struct groupPolicy {\r\n        uint8 _default;\r\n        uint8 _backend;\r\n        uint8 _migration;\r\n        uint8 _admin;\r\n        uint8 _subowner;\r\n        uint8 _owner;\r\n    }\r\n\r\n    groupPolicy private currentState = groupPolicy(0, 3, 9, 4, 2, 9);\r\n\r\n    function AutoCoin(string _name, string _symbol, uint8 _decimals, uint256 _weiPerMinToken, uint256 _startTokens) public {\r\n        owner = msg.sender;\r\n        group[msg.sender] = 9;\r\n\r\n        if (_weiPerMinToken != 0)\r\n            weiPerMinToken = _weiPerMinToken;\r\n\r\n        accounts[owner]  = _startTokens;\r\n        summarySupply    = _startTokens;\r\n        name = _name;\r\n        symbol = _symbol;\r\n        decimals = _decimals;\r\n    }\r\n\r\n    modifier minGroup(int _require) {\r\n        require(group[msg.sender] >= _require);\r\n        _;\r\n    }\r\n\r\n    modifier onlyPayloadSize(uint size) {\r\n        assert(msg.data.length >= size + 4);\r\n        _;\r\n    }\r\n\r\n    function serviceGroupChange(address _address, uint8 _group) minGroup(currentState._admin) external returns(uint8) {\r\n        uint8 old = group[_address];\r\n        if(old <= currentState._admin) {\r\n            group[_address] = _group;\r\n            EvGroupChanged(_address, old, _group);\r\n        }\r\n        return group[_address];\r\n    }\r\n\r\n    function serviceGroupGet(address _check) minGroup(currentState._backend) external constant returns(uint8 _group) {\r\n        return group[_check];\r\n    }\r\n\r\n\r\n    function settingsSetWeiPerMinToken(uint256 _weiPerMinToken) minGroup(currentState._admin) external {\r\n        if (_weiPerMinToken > 0) {\r\n            weiPerMinToken = _weiPerMinToken;\r\n\r\n            EvLoginfo(\"[weiPerMinToken]\", \"changed\");\r\n        }\r\n    }\r\n\r\n    function serviceIncreaseBalance(address _who, uint256 _value) minGroup(currentState._backend) external returns(bool) {\r\n        accounts[_who] = accounts[_who].safeAdd(_value);\r\n        summarySupply = summarySupply.safeAdd(_value);\r\n\r\n        EvTokenAdd(_value, summarySupply);\r\n        return true;\r\n    }\r\n\r\n    function serviceDecreaseBalance(address _who, uint256 _value) minGroup(currentState._backend) external returns(bool) {\r\n        accounts[_who] = accounts[_who].safeSub(_value);\r\n        summarySupply = summarySupply.safeSub(_value);\r\n\r\n        EvTokenRm(accounts[_who], _value, summarySupply);\r\n        return true;\r\n    }\r\n\r\n    function serviceTokensBurn(address _address) external minGroup(currentState._backend) returns(uint256 balance) {\r\n        accounts[_address] = 0;\r\n        return accounts[_address];\r\n    }\r\n\r\n    function serviceChangeOwner(address _newowner) minGroup(currentState._subowner) external returns(address) {\r\n        address temp;\r\n        uint256 value;\r\n\r\n        if (msg.sender == owner) {\r\n            subowner = _newowner;\r\n            group[msg.sender] = currentState._subowner;\r\n            group[_newowner] = currentState._subowner;\r\n\r\n            EvGroupChanged(_newowner, currentState._owner, currentState._subowner);\r\n        }\r\n\r\n        if (msg.sender == subowner) {\r\n            temp = owner;\r\n            value = accounts[owner];\r\n\r\n            accounts[owner] = accounts[owner].safeSub(value);\r\n            accounts[subowner] = accounts[subowner].safeAdd(value);\r\n\r\n            owner = subowner;\r\n\r\n            delete group[temp];\r\n            group[subowner] = currentState._owner;\r\n\r\n            subowner = 0x00;\r\n\r\n            EvGroupChanged(_newowner, currentState._subowner, currentState._owner);\r\n        }\r\n\r\n        return subowner;\r\n    }\r\n\r\n    function userTransfer(address _to, uint256 _value) onlyPayloadSize(64) minGroup(currentState._default) external returns (bool success) {\r\n        if (accounts[msg.sender] >= _value && (transferEnable || group[msg.sender] >= currentState._backend)) {\r\n            accounts[msg.sender] = accounts[msg.sender].safeSub(_value);\r\n            accounts[_to] = accounts[_to].safeAdd(_value);\r\n            Transfer(msg.sender, _to, _value);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function userTransferFrom(address _from, address _to, uint256 _value) onlyPayloadSize(64) minGroup(currentState._default) external returns (bool success) {\r\n        if ((accounts[_from] >= _value) && (allowed[_from][msg.sender] >= _value) && (transferEnable || group[msg.sender] >= currentState._backend)) {\r\n            accounts[_from] = accounts[_from].safeSub(_value);\r\n            allowed[_from][msg.sender] = allowed[_from][msg.sender].safeSub(_value);\r\n            accounts[_to] = accounts[_to].safeAdd(_value);\r\n            Transfer(_from, _to, _value);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function userApprove(address _spender, uint256 _old, uint256 _new) onlyPayloadSize(64) minGroup(currentState._default) external returns (bool success) {\r\n        if (_old == allowed[msg.sender][_spender]) {\r\n            allowed[msg.sender][_spender] = _new;\r\n            Approval(msg.sender, _spender, _new);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) external constant returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    function balanceOf(address _owner) external constant returns (uint256 balance) {\r\n        if (_owner == 0x00)\r\n            return accounts[msg.sender];\r\n        return accounts[_owner];\r\n    }\r\n\r\n    function totalSupply() external constant returns (uint256 _totalSupply) {\r\n        _totalSupply = summarySupply;\r\n    }\r\n\r\n    function destroy() minGroup(currentState._owner) external {\r\n        selfdestruct(owner);\r\n    }\r\n\r\n    function settingsSwitchState() external minGroup(currentState._owner) returns (bool state) {\r\n\r\n        if(contractEnable) {\r\n            currentState._default = 9;\r\n            currentState._migration = 0;\r\n            contractEnable = false;\r\n        } else {\r\n            currentState._default = 0;\r\n            currentState._migration = 9;\r\n            contractEnable = true;\r\n        }\r\n\r\n        return contractEnable;\r\n    }\r\n\r\n    function settingsSwitchTransferAccess() external minGroup(currentState._backend) returns (bool access) {\r\n        transferEnable = !transferEnable;\r\n        return transferEnable;\r\n    }\r\n\r\n    function userMigration(uint256 _secrect) external minGroup(currentState._migration) returns (bool successful) {\r\n\r\n        uint256 balance = accounts[msg.sender];\r\n        if (balance > 0) {\r\n            accounts[msg.sender] = accounts[msg.sender].safeSub(balance);\r\n            accounts[owner] = accounts[owner].safeAdd(balance);\r\n            EvMigration(msg.sender, balance, _secrect);\r\n            return true;\r\n        }\r\n        else\r\n            return false;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"serviceDecreaseBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiPerMinToken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"_totalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_secrect\",\"type\":\"uint256\"}],\"name\":\"userMigration\",\"outputs\":[{\"name\":\"successful\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_weiPerMinToken\",\"type\":\"uint256\"}],\"name\":\"settingsSetWeiPerMinToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transferEnable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"settingsSwitchTransferAccess\",\"outputs\":[{\"name\":\"access\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"settingsSwitchState\",\"outputs\":[{\"name\":\"state\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_old\",\"type\":\"uint256\"},{\"name\":\"_new\",\"type\":\"uint256\"}],\"name\":\"userApprove\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newowner\",\"type\":\"address\"}],\"name\":\"serviceChangeOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_group\",\"type\":\"uint8\"}],\"name\":\"serviceGroupChange\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"userTransferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"destroy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_check\",\"type\":\"address\"}],\"name\":\"serviceGroupGet\",\"outputs\":[{\"name\":\"_group\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"userTransfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"serviceIncreaseBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractEnable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"serviceTokensBurn\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_decimals\",\"type\":\"uint8\"},{\"name\":\"_weiPerMinToken\",\"type\":\"uint256\"},{\"name\":\"_startTokens\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_oldgroup\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"_newgroup\",\"type\":\"uint8\"}],\"name\":\"EvGroupChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_lastSupply\",\"type\":\"uint256\"}],\"name\":\"EvTokenAdd\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_delta\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_lastSupply\",\"type\":\"uint256\"}],\"name\":\"EvTokenRm\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_functionName\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_text\",\"type\":\"string\"}],\"name\":\"EvLoginfo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_balance\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_secret\",\"type\":\"uint256\"}],\"name\":\"EvMigration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"AutoCoin","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000174876e800000000000000000000000000000000000000000000000000000000c831a5770c000000000000000000000000000000000000000000000000000000000000000a4175746f20546f6b656e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000341544b0000000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://b11b2af95a3a2dc21cb1b394e3a3781b80a353249187ce05ed6ebe33522b2bc2"}]}