{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13;\r\n\r\n// DigiToken ICO group buyer\r\n\r\ncontract ERC20 {\r\n  function transfer(address _to, uint256 _value) returns (bool success);\r\n  function balanceOf(address _owner) constant returns (uint256 balance);\r\n}\r\n\r\ncontract AtlantBuyer {\r\n  mapping (address => uint256) public balances;\r\n  mapping (address => uint256) public balances_for_refund;\r\n  bool public bought_tokens;\r\n  bool public token_set;\r\n  uint256 public contract_eth_value;\r\n  uint256 public refund_contract_eth_value;\r\n  uint256 public refund_eth_value;\r\n  bool public kill_switch;\r\n  bytes32 password_hash = 0xa8a4593cd683c96f5f31f4694e61192fb79928fb1f4b208470088f66c7710c6e;\r\n  address public developer = 0xc024728C52142151208226FD6f059a9b4366f94A;\r\n  address public sale = 0xD7E53b24e014cD3612D8469fD1D8e371Dd7b3024;\r\n  ERC20 public token;\r\n  uint256 public eth_minimum = 1 ether;\r\n\r\n  function set_token(address _token) {\r\n    require(msg.sender == developer);\r\n    token = ERC20(_token);\r\n    token_set = true;\r\n  }\r\n  \r\n  function activate_kill_switch(string password) {\r\n    require(msg.sender == developer || sha3(password) == password_hash);\r\n    kill_switch = true;\r\n  }\r\n  \r\n  function personal_withdraw(){\r\n    if (balances[msg.sender] == 0) return;\r\n    if (!bought_tokens) {\r\n      uint256 eth_to_withdraw = balances[msg.sender];\r\n      balances[msg.sender] = 0;\r\n      msg.sender.transfer(eth_to_withdraw);\r\n    }\r\n    else {\r\n      require(token_set);\r\n      uint256 contract_token_balance = token.balanceOf(address(this));\r\n      require(contract_token_balance != 0);\r\n      uint256 tokens_to_withdraw = (balances[msg.sender] * contract_token_balance) / contract_eth_value;\r\n      contract_eth_value -= balances[msg.sender];\r\n      balances[msg.sender] = 0;\r\n      uint256 fee = tokens_to_withdraw / 100;\r\n      require(token.transfer(developer, fee));\r\n      require(token.transfer(msg.sender, tokens_to_withdraw - fee));\r\n    }\r\n  }\r\n\r\n\r\n  // Use with caution - use this withdraw function if you do not trust the\r\n  // contract's token setting. You can only use this once, so if you\r\n  // put in the wrong token address you will burn the Digi on the contract.\r\n  function withdraw_token(address _token){\r\n    ERC20 myToken = ERC20(_token);\r\n    if (balances[msg.sender] == 0) return;\r\n    require(msg.sender != sale);\r\n    if (!bought_tokens) {\r\n      uint256 eth_to_withdraw = balances[msg.sender];\r\n      balances[msg.sender] = 0;\r\n      msg.sender.transfer(eth_to_withdraw);\r\n    }\r\n    else {\r\n      uint256 contract_token_balance = myToken.balanceOf(address(this));\r\n      require(contract_token_balance != 0);\r\n      uint256 tokens_to_withdraw = (balances[msg.sender] * contract_token_balance) / contract_eth_value;\r\n      contract_eth_value -= balances[msg.sender];\r\n      balances[msg.sender] = 0;\r\n      uint256 fee = tokens_to_withdraw / 100;\r\n      require(myToken.transfer(developer, fee));\r\n      require(myToken.transfer(msg.sender, tokens_to_withdraw - fee));\r\n    }\r\n  }\r\n\r\n  // This handles the withdrawal of refunds. Also works with partial refunds.\r\n  function withdraw_refund(){\r\n    require(refund_eth_value!=0);\r\n    require(balances_for_refund[msg.sender] != 0);\r\n    uint256 eth_to_withdraw = (balances_for_refund[msg.sender] * refund_eth_value) / refund_contract_eth_value;\r\n    refund_contract_eth_value -= balances_for_refund[msg.sender];\r\n    refund_eth_value -= eth_to_withdraw;\r\n    balances_for_refund[msg.sender] = 0;\r\n    msg.sender.transfer(eth_to_withdraw);\r\n  }\r\n\r\n  function () payable {\r\n    if (!bought_tokens) {\r\n      balances[msg.sender] += msg.value;\r\n      balances_for_refund[msg.sender] += msg.value;\r\n      if (this.balance < eth_minimum) return;\r\n      if (kill_switch) return;\r\n      require(sale != 0x0);\r\n      bought_tokens = true;\r\n      contract_eth_value = this.balance;\r\n      refund_contract_eth_value = this.balance;\r\n      require(sale.call.value(contract_eth_value)());\r\n      require(this.balance==0);\r\n    } else {\r\n\r\n      require(msg.sender == sale);\r\n      refund_eth_value += msg.value;\r\n    }\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances_for_refund\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"refund_contract_eth_value\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw_refund\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bought_tokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sale\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"refund_eth_value\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token_set\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"withdraw_token\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kill_switch\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"eth_minimum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"personal_withdraw\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contract_eth_value\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"developer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"set_token\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"password\",\"type\":\"string\"}],\"name\":\"activate_kill_switch\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"payable\":true,\"type\":\"fallback\"}]","ContractName":"AtlantBuyer","CompilerVersion":"v0.4.13+commit.fb4cb1a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://3571cad9acba744f5b5d2681a334a7ccc1b840a3e7871b330ebc5747b9bddc6d"}]}