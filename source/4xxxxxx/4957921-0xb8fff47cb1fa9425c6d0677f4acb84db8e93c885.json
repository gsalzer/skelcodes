{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n \r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n \r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n \r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract ERC20Interface {\r\n    function balanceOf(address _owner) public constant returns (uint balance) {}\r\n    function transfer(address _to, uint _value) public returns (bool success) {}\r\n    function transferFrom(address _from, address _to, uint _value) public returns (bool success) {}\r\n}\r\n\r\ncontract Exchanger {\r\n    using SafeMath for uint;\r\n  // Decimals 18\r\n  ERC20Interface dai = ERC20Interface(0x89d24a6b4ccb1b6faa2625fe562bdd9a23260359);\r\n  // Decimals 6\r\n  ERC20Interface usdt = ERC20Interface(0xdac17f958d2ee523a2206206994597c13d831ec7);\r\n\r\n  address creator = 0x34f1e87e890b5683ef7b011b16055113c7194c35;\r\n  uint feeDAI = 50000000000000000;\r\n  uint feeUSDT = 50000;\r\n\r\n  function getDAI(uint _amountInDollars) public returns (bool) {\r\n    // Must first call approve for the usdt contract\r\n    usdt.transferFrom(msg.sender, this, _amountInDollars * (10 ** 6));\r\n    dai.transfer(msg.sender, _amountInDollars.mul(((10 ** 18) - feeDAI)));\r\n    return true;\r\n  }\r\n\r\n  function getUSDT(uint _amountInDollars) public returns (bool) {\r\n    // Must first call approve for the dai contract\r\n    dai.transferFrom(msg.sender, this, _amountInDollars * (10 ** 18));\r\n    usdt.transfer(msg.sender, _amountInDollars.mul(((10 ** 6) - feeUSDT)));\r\n    return true;\r\n  }\r\n\r\n  function withdrawEquity(uint _amountInDollars, bool isUSDT) public returns (bool) {\r\n    require(msg.sender == creator);\r\n    if(isUSDT) {\r\n      usdt.transfer(creator, _amountInDollars * (10 ** 6));\r\n    } else {\r\n      dai.transfer(creator, _amountInDollars * (10 ** 18));\r\n    }\r\n    return true;\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_amountInDollars\",\"type\":\"uint256\"}],\"name\":\"getDAI\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amountInDollars\",\"type\":\"uint256\"}],\"name\":\"getUSDT\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amountInDollars\",\"type\":\"uint256\"},{\"name\":\"isUSDT\",\"type\":\"bool\"}],\"name\":\"withdrawEquity\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Exchanger","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://2817d19fbe7a28833182b20db3bb477cb9ca76407d5d9a6d0a7e4228f958087a"}]}