{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.7;\r\n\r\ncontract AbstractZENOSCrowdsale {\r\n    function crowdsaleStartingBlock() constant returns (uint256 startingBlock) {}\r\n}\r\n\r\n/// @title EarlyPurchase contract - Keep track of purchased amount by Early Purchasers\r\n/// Project by ZENOS Team (http://www.thezenos.com/)\r\n/// This smart contract developed by Starbase - Token funding & payment Platform for innovative projects <support[at]starbase.co>\r\n\r\ncontract ZENOSEarlyPurchase {\r\n    /*\r\n     *  Properties\r\n     */\r\n    string public constant PURCHASE_AMOUNT_UNIT = 'ETH';    // Ether\r\n    address public owner;\r\n    EarlyPurchase[] public earlyPurchases;\r\n    uint public earlyPurchaseClosedAt;\r\n\r\n    /*\r\n     *  Types\r\n     */\r\n    struct EarlyPurchase {\r\n        address purchaser;\r\n        uint amount;        // Amount in Wei( = 1/ 10^18 Ether)\r\n        uint purchasedAt;   // timestamp\r\n    }\r\n\r\n    /*\r\n     *  External contracts\r\n     */\r\n    AbstractZENOSCrowdsale public zenOSCrowdsale;\r\n\r\n\r\n    /*\r\n     *  Modifiers\r\n     */\r\n    modifier onlyOwner() {\r\n        if (msg.sender != owner) {\r\n            throw;\r\n        }\r\n        _;\r\n    }\r\n\r\n    modifier onlyBeforeCrowdsale() {\r\n        if (address(zenOSCrowdsale) != 0 &&\r\n            zenOSCrowdsale.crowdsaleStartingBlock() > 0)\r\n        {\r\n            throw;\r\n        }\r\n        _;\r\n    }\r\n\r\n    modifier onlyEarlyPurchaseTerm() {\r\n        if (earlyPurchaseClosedAt > 0) {\r\n            throw;\r\n        }\r\n        _;\r\n    }\r\n\r\n    /// @dev Contract constructor function\r\n    function ZENOSEarlyPurchase() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /*\r\n     *  Contract functions\r\n     */\r\n    /// @dev Returns early purchased amount by purchaser's address\r\n    /// @param purchaser Purchaser address\r\n    function purchasedAmountBy(address purchaser)\r\n        external\r\n        constant\r\n        returns (uint amount)\r\n    {\r\n        for (uint i; i < earlyPurchases.length; i++) {\r\n            if (earlyPurchases[i].purchaser == purchaser) {\r\n                amount += earlyPurchases[i].amount;\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @dev Returns total amount of raised funds by Early Purchasers\r\n    function totalAmountOfEarlyPurchases()\r\n        constant\r\n        returns (uint totalAmount)\r\n    {\r\n        for (uint i; i < earlyPurchases.length; i++) {\r\n            totalAmount += earlyPurchases[i].amount;\r\n        }\r\n    }\r\n\r\n    /// @dev Returns number of early purchases\r\n    function numberOfEarlyPurchases()\r\n        external\r\n        constant\r\n        returns (uint)\r\n    {\r\n        return earlyPurchases.length;\r\n    }\r\n\r\n    /// @dev Append an early purchase log\r\n    /// @param purchaser Purchaser address\r\n    /// @param amount Purchase amount\r\n    /// @param purchasedAt Timestamp of purchased date\r\n    function appendEarlyPurchase(address purchaser, uint amount, uint purchasedAt)\r\n        internal\r\n        onlyBeforeCrowdsale\r\n        onlyEarlyPurchaseTerm\r\n        returns (bool)\r\n    {\r\n\r\n        if (purchasedAt == 0 || purchasedAt > now) {\r\n            throw;\r\n        }\r\n\r\n        earlyPurchases.push(EarlyPurchase(purchaser, amount, purchasedAt));\r\n        return true;\r\n    }\r\n\r\n    /// @dev Close early purchase term\r\n    function closeEarlyPurchase()\r\n        external\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        earlyPurchaseClosedAt = now;\r\n    }\r\n\r\n    /// @dev Setup function sets external crowdsale contract's address\r\n    /// @param zenOSCrowdsaleAddress Token address\r\n    function setup(address zenOSCrowdsaleAddress)\r\n        external\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        if (address(zenOSCrowdsale) == 0) {\r\n            zenOSCrowdsale = AbstractZENOSCrowdsale(zenOSCrowdsaleAddress);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function withdraw(uint withdrawalAmount) onlyOwner {\r\n          if(!owner.send(withdrawalAmount)) throw;  // send collected ETH to ZENOS team\r\n    }\r\n\r\n    function transferOwnership(address newOwner) onlyOwner {\r\n        owner = newOwner;\r\n    }\r\n\r\n    /// @dev By sending Ether to the contract, early purchase will be recorded.\r\n    function () payable {\r\n        appendEarlyPurchase(msg.sender, msg.value, block.timestamp);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"earlyPurchases\",\"outputs\":[{\"name\":\"purchaser\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"purchasedAt\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"earlyPurchaseClosedAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"withdrawalAmount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numberOfEarlyPurchases\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"purchaser\",\"type\":\"address\"}],\"name\":\"purchasedAmountBy\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"zenOSCrowdsaleAddress\",\"type\":\"address\"}],\"name\":\"setup\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"closeEarlyPurchase\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalAmountOfEarlyPurchases\",\"outputs\":[{\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"zenOSCrowdsale\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PURCHASE_AMOUNT_UNIT\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"}]","ContractName":"ZENOSEarlyPurchase","CompilerVersion":"v0.4.14-nightly.2017.7.10+commit.6fa5d47f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://9541ba99cbc4d056fc53a33cf4b3f9456e0177bee6f19bd725fa06727d185414"}]}