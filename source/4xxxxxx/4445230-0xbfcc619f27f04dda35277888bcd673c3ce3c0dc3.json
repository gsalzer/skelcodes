{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.8;\r\n\tcontract tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public ; }\r\n\r\n\t/*\r\n\t * Standard token contract with ability to hold some amount on some balances before single initially specified deadline\r\n\t * Which is useful for example for holding unsold tokens for a year for next step of project management\r\n\t *\r\n\t * Implements initial supply and allows additional supply based on coordinator agreement\r\n\t * Coordinators list can be altered by owner\r\n\t * Once minimal count of coordinators stated that they're agree for some value, emission is made\r\n\t *\r\n\t * Allows to change name, symbol and owner when in unlocked, can be locked by owner\r\n\t * Once locked, can't be unlocked and reconfigured anymore\r\n\t */ \r\n\r\n\tcontract MetalExchangeToken {\r\n\t\t/* Public variables of the token */\r\n\t\tstring public standard = 'Token 0.1';\r\n\t\tstring public name;\r\n\t\tstring public symbol;\r\n\t\taddress public owner;\r\n\t\tuint8 public decimals;\r\n\t\tuint256 public totalSupply;\r\n\t\tbool public nameLocked=false;\r\n\t\tbool public symbolLocked=false;\r\n\t\tbool public ownerLocked=false;\t\r\n\t\tuint256 public unholdTime;//deadline for unhold\r\n\r\n\t\t/* This creates an array with all balances */\r\n\t\tmapping (address => uint256) public balanceOf;\r\n\t\tmapping (address => uint256) public holdBalanceOf;\r\n\t\tmapping (address => mapping (address => uint256)) public allowance;\r\n\t\t\r\n\t\t// Holds agreements for emission for Coordinators\r\n\t\tmapping (address => uint256) public coordinatorAgreeForEmission;\r\n\t\tmapping (uint256 => address) public coordinatorAccountIndex;\r\n\t\tuint256 public coordinatorAccountCount;\r\n\t\t\r\n\t\t// Keeps required count of coordinators to perform emission\r\n\t\tuint256 public minCoordinatorCount;\r\n\r\n\t\t/* This generates a public event on the blockchain that will notify clients */\r\n\t\tevent Transfer(address indexed from, address indexed to, uint256 value);\r\n\t\tevent Emission(uint256 value);\t\t\r\n\t\t\r\n\t\tevent Hold(address indexed from, uint256 value);\r\n\t\tevent Unhold(address indexed from, uint256 value);\r\n\r\n\t\t/* This notifies clients about the amount burnt */\r\n\t\tevent Burn(address indexed from, uint256 value);\r\n\t\t\r\n\t\tmodifier canUnhold() { if (block.timestamp >= unholdTime) _; }\r\n\t\tmodifier canHold() { if (block.timestamp < unholdTime) _; }\r\n\r\n\t\t/* Initializes contract with initial supply tokens to the creator of the contract */\r\n\t\tfunction MetalExchangeToken() public {\r\n\t\t\towner=msg.sender;\r\n\t\t\ttotalSupply = 40000000000;\t \t\t\t\t    // Update total supply\r\n\t\t\tbalanceOf[owner] = totalSupply;\t\t\t\t// Give the creator all initial tokens\t\t\t\r\n\t\t\tname = 'MetalExchangeToken';\t\t\t\t// Set the name for display purposes\r\n\t\t\tsymbol = 'MET';\t\t\t\t\t\t\t\t// Set the symbol for display purposes\r\n\t\t\tdecimals = 4;\t\t\t\t\t\t\t\t// Amount of decimals for display purposes\r\n\t\t\tunholdTime = 0;\t\t\t\t\t\t\t\t// Time of automatic unhold of hold tokens\r\n\t\t\tcoordinatorAccountCount = 0;\r\n\t\t\tminCoordinatorCount = 2;\r\n\t\t}\r\n\t\t\r\n\t\t// Adds new coordinator\r\n\t\tfunction addCoordinator(address newCoordinator) public {\r\n\t\t\tif (msg.sender!=owner) revert();\r\n\t\t\tcoordinatorAccountIndex[coordinatorAccountCount]=newCoordinator;\r\n\t\t\tcoordinatorAgreeForEmission[newCoordinator]=0;\r\n\t\t\tcoordinatorAccountCount++;\r\n\t\t}\r\n\t\t\r\n\t\t// Removes exist coordinator from list of coordinators\r\n\t\tfunction removeCoordinator(address coordinator) public {\r\n\t\t\tif (msg.sender!=owner) revert();\r\n\t\t\tdelete coordinatorAgreeForEmission[coordinator];\r\n\t\t\tfor (uint256 i=0;i<coordinatorAccountCount;i++)\r\n\t\t\t\tif (coordinatorAccountIndex[i]==coordinator){\r\n\t\t\t\t\tfor (uint256 j=i;j<coordinatorAccountCount-1;j++)\r\n\t\t\t\t\t\tcoordinatorAccountIndex[j]=coordinatorAccountIndex[j+1];\r\n\t\t\t\t\t\t\r\n\t\t\t\t\tcoordinatorAccountCount--;\r\n\t\t\t\t\tdelete coordinatorAccountIndex[coordinatorAccountCount];\r\n\t\t\t\t\ti=coordinatorAccountCount;\r\n\t\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\t// Accepts the vote of coordinator for upcoming emission: which amount he or she is agree to emit\r\n\t\tfunction coordinatorSetAgreeForEmission(uint256 value_) public {\r\n\t\t\tbool found=false;\r\n\t\t\tfor (uint256 i=0;i<coordinatorAccountCount;i++)\r\n\t\t\t\tif (coordinatorAccountIndex[i]==msg.sender){\r\n\t\t\t\t\tfound=true;\r\n\t\t\t\t\ti=coordinatorAccountCount;\r\n\t\t\t\t}\r\n\t\t\tif (!found) revert();\r\n\t\t\tcoordinatorAgreeForEmission[msg.sender]=value_;\r\n\t\t\temit(value_);\r\n\t\t}\r\n\t\t\r\n\t\t// Attempts to make emission of specified value\r\n\t\t// Emission will be processed if required count of coordinators are agree\r\n\t\tfunction emit(uint256 value_) private {\r\n\t\t\tif (value_ <= 0) revert();\r\n\t\t\t\r\n\t\t\tbool found=false;\r\n\t\t\tif (msg.sender==owner) found=true;\r\n\t\t\tfor (uint256 i=0;(!found)&&(i<coordinatorAccountCount);i++)\r\n\t\t\t\tif (coordinatorAccountIndex[i]==msg.sender){\r\n\t\t\t\t\tfound=true;\r\n\t\t\t\t\ti=coordinatorAccountCount;\r\n\t\t\t\t}\r\n\t\t\tif (!found) revert();\r\n\t\t\t\r\n\t\t\tuint256 agree=0;\r\n\t\t\tfor (i=0;i<coordinatorAccountCount;i++)\r\n\t\t\t\tif (coordinatorAgreeForEmission[coordinatorAccountIndex[i]]>=value_)\r\n\t\t\t\t\tagree++;\r\n\t\t\t\t\t\r\n\t\t\tif (agree<minCoordinatorCount) revert();\r\n\t\t\t\r\n\t\t\tfor (i=0;i<coordinatorAccountCount;i++)\r\n\t\t\t\tif (coordinatorAgreeForEmission[coordinatorAccountIndex[i]]>=value_)\r\n\t\t\t\t\tcoordinatorAgreeForEmission[coordinatorAccountIndex[i]]-=value_;\r\n\t\t\t\r\n\t\t\tbalanceOf[owner] += value_;\r\n\t\t\ttotalSupply += value_;\r\n\t\t\tEmission(value_);\r\n\t\t}\r\n\t\t\r\n\t\tfunction lockName() public {\r\n\t\t\tif (msg.sender!=owner) revert();\r\n\t\t\tif (nameLocked) revert();\r\n\t\t\tnameLocked=true;\r\n\t\t}\r\n\t\t\r\n\t\tfunction changeName(string new_name) public {\r\n\t\t\tif (msg.sender!=owner) revert();\r\n\t\t\tif (nameLocked) revert();\r\n\t\t\tname=new_name;\r\n\t\t}\r\n\t\t\r\n\t\tfunction lockSymbol() public {\r\n\t\t\tif (msg.sender!=owner) revert();\r\n\t\t\tif (symbolLocked) revert();\r\n\t\t\tsymbolLocked=true;\r\n\t\t}\r\n\t\t\r\n\t\tfunction changeSymbol(string new_symbol) public {\r\n\t\t\tif (msg.sender!=owner) revert();\r\n\t\t\tif (symbolLocked) revert();\r\n\t\t\tsymbol=new_symbol;\r\n\t\t}\r\n\t\t\r\n\t\tfunction lockOwner() public {\r\n\t\t\tif (msg.sender!=owner) revert();\r\n\t\t\tif (ownerLocked) revert();\r\n\t\t\townerLocked=true;\r\n\t\t}\r\n\t\t\r\n\t\tfunction changeOwner(address new_owner) public {\r\n\t\t\tif (msg.sender!=owner) revert();\r\n\t\t\tif (ownerLocked) revert();\r\n\t\t\towner=new_owner;\r\n\t\t}\r\n\t\t\r\n\t\t/* Hold coins */\r\n\t\tfunction hold(uint256 _value) canHold payable public {\r\n\t\t\tif (balanceOf[msg.sender] < _value) revert();\t\t   \t\t// Check if the sender has enough to hold\r\n\t\t\tif (holdBalanceOf[msg.sender] + _value < holdBalanceOf[msg.sender]) revert(); // Check for overflows\r\n\t\t\t\tbalanceOf[msg.sender] -= _value;\t\t\t\t\t// Subtract from the sender\r\n\t\t\tholdBalanceOf[msg.sender] += _value;\t\t\t\t\t// Add the same to the sender's hold\r\n\t\t\tHold(msg.sender, _value);\t\t\t\t   \t\t\t\t// Notify anyone listening that this hold took place\r\n\t\t}\r\n\t\t\r\n\t\t/* Unhold coins */\r\n\t\tfunction unhold(uint256 _value) canUnhold payable public {\r\n\t\t\tif (holdBalanceOf[msg.sender] < _value) revert();\t\t   \t// Check if the sender has enough hold\r\n\t\t\tif (balanceOf[msg.sender] + _value < balanceOf[msg.sender]) revert(); // Check for overflows\r\n\t\t\tholdBalanceOf[msg.sender] -= _value;\t\t\t\t\t// Subtract from the sender hold\r\n\t\t\tbalanceOf[msg.sender] += _value;\t\t\t\t\t\t// Add the same to the sender\r\n\t\t\tUnhold(msg.sender, _value);\t\t\t\t   \t\t\t \t// Notify anyone listening that this unhold took place\r\n\t\t}\r\n\r\n\t\t/* Send coins */\r\n\t\tfunction transfer(address _to, uint256 _value) payable public {\r\n\t\t\tif (_to == 0x0) revert();\t\t\t\t\t\t\t   \t\t// Prevent transfer to 0x0 address. Use burn() instead\r\n\t\t\tif (balanceOf[msg.sender] < _value) revert();\t\t   \t\t// Check if the sender has enough\r\n\t\t\tif (balanceOf[_to] + _value < balanceOf[_to]) revert(); \t// Check for overflows\r\n\t\t\tbalanceOf[msg.sender] -= _value;\t\t\t\t\t \t// Subtract from the sender\r\n\t\t\tbalanceOf[_to] += _value;\t\t\t\t\t\t\t\t// Add the same to the recipient\r\n\t\t\tTransfer(msg.sender, _to, _value);\t\t\t\t   \t\t// Notify anyone listening that this transfer took place\r\n\t\t}\r\n\r\n\t\t/* Allow another contract to spend some tokens in your behalf */\r\n\t\tfunction approve(address _spender, uint256 _value)\r\n\t\t\tpublic\r\n\t\t\treturns (bool success) {\r\n\t\t\tallowance[msg.sender][_spender] = _value;\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\t/* Approve and then communicate the approved contract in a single tx */\r\n\t\tfunction approveAndCall(address _spender, uint256 _value, bytes _extraData)\r\n\t\t\tpublic\r\n\t\t\treturns (bool success) {\r\n\t\t\ttokenRecipient spender = tokenRecipient(_spender);\r\n\t\t\tif (approve(_spender, _value)) {\r\n\t\t\t\tspender.receiveApproval(msg.sender, _value, this, _extraData);\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\t\t\r\n\r\n\t\t/* A contract attempts to get the coins */\r\n\t\tfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n\t\t\tif (_to == 0x0) revert();\t\t\t\t\t\t\t\t\t// Prevent transfer to 0x0 address. Use burn() instead\r\n\t\t\tif (balanceOf[_from] < _value) revert();\t\t\t\t \t// Check if the sender has enough\r\n\t\t\tif (balanceOf[_to] + _value < balanceOf[_to]) revert();  \t// Check for overflows\r\n\t\t\tif (_value > allowance[_from][msg.sender]) revert();\t \t// Check allowance\r\n\t\t\tbalanceOf[_from] -= _value;\t\t\t\t\t\t   \t\t// Subtract from the sender\r\n\t\t\tbalanceOf[_to] += _value;\t\t\t\t\t\t\t \t// Add the same to the recipient\r\n\t\t\tallowance[_from][msg.sender] -= _value;\r\n\t\t\tTransfer(_from, _to, _value);\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\tfunction burn(uint256 _value) public returns (bool success) {\r\n\t\t\tif (balanceOf[msg.sender] < _value) revert();\t\t\t\t// Check if the sender has enough\r\n\t\t\tbalanceOf[msg.sender] -= _value;\t\t\t\t\t  \t// Subtract from the sender\r\n\t\t\ttotalSupply -= _value;\t\t\t\t\t\t\t\t\t// Updates totalSupply\r\n\t\t\tBurn(msg.sender, _value);\t\t\t\t\t\t\t\t// Fires the event about token burn\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\tfunction burnFrom(address _from, uint256 _value) public returns (bool success){\r\n\t\t\tif (balanceOf[_from] < _value) revert();\t\t\t\t\t// Check if the sender has enough\r\n\t\t\tif (_value > allowance[_from][msg.sender]) revert();\t\t// Check allowance\r\n\t\t\tbalanceOf[_from] -= _value;\t\t\t\t\t\t  \t\t// Subtract from the sender\r\n\t\t\ttotalSupply -= _value;\t\t\t\t\t\t\t   \t\t// Updates totalSupply\r\n\t\t\tBurn(_from, _value);\t\t\t\t\t\t\t\t\t// Fires the event about token burn\r\n\t\t\treturn true;\r\n\t\t}\r\n\t}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"lockSymbol\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerLocked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"unhold\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"hold\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"new_name\",\"type\":\"string\"}],\"name\":\"changeName\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"standard\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"lockOwner\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"coordinator\",\"type\":\"address\"}],\"name\":\"removeCoordinator\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"new_symbol\",\"type\":\"string\"}],\"name\":\"changeSymbol\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"new_owner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nameLocked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"lockName\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"holdBalanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"coordinatorAgreeForEmission\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"coordinatorAccountCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"coordinatorAccountIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minCoordinatorCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"unholdTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value_\",\"type\":\"uint256\"}],\"name\":\"coordinatorSetAgreeForEmission\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbolLocked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCoordinator\",\"type\":\"address\"}],\"name\":\"addCoordinator\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Emission\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Hold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Unhold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"}]","ContractName":"MetalExchangeToken","CompilerVersion":"v0.4.15+commit.bbb8e64f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://0175af9b9a09430d2b3af77603ed1ca7d071a1c3c0f3ffb114f3008d4567dab4"}]}