{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.16;\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev cutdown simply to allow removal of tokens sent to contract\r\n */\r\ncontract ERC20 {\r\n  function transfer(address to, uint256 value) returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner {\r\n    if (newOwner != address(0)) {\r\n      owner = newOwner;\r\n    }\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev modifier to allow actions only when the contract IS paused\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev modifier to allow actions only when the contract IS NOT paused\r\n   */\r\n  modifier whenPaused {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused returns (bool) {\r\n    paused = true;\r\n    Pause();\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused returns (bool) {\r\n    paused = false;\r\n    Unpause();\r\n    return true;\r\n  }\r\n}\r\n\r\n// 200 000 000 ether = A56FA5B99019A5C8000000 = 88 bits. We have 256.\r\n// we do NOT need safemath.\r\n\r\ncontract SimpleSale is Ownable,Pausable {\r\n\r\n    address public multisig = 0xc862705dDA23A2BAB54a6444B08a397CD4DfCD1c;\r\n    address public cs;\r\n    uint256 public totalCollected;\r\n    bool    public saleFinished;\r\n    uint256 public startTime = 1505998800;\r\n    uint256 public stopTime = 1508590800;\r\n\r\n    mapping (address => uint256) public deposits;\r\n    mapping (address => bool) public authorised; // just to annoy the heck out of americans\r\n\r\n    /**\r\n     * @dev throws if person sending is not contract owner or cs role\r\n     */\r\n    modifier onlyCSorOwner() {\r\n        require((msg.sender == owner) || (msg.sender==cs));\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev throws if person sending is not authorised or sends nothing\r\n     */\r\n    modifier onlyAuthorised() {\r\n        require (authorised[msg.sender]);\r\n        require (msg.value > 0);\r\n        require (now >= startTime);\r\n        require (now <= stopTime);\r\n        require (!saleFinished);\r\n        require(!paused);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev set start and stop times\r\n     */\r\n    function setPeriod(uint256 start, uint256 stop) onlyOwner {\r\n        startTime = start;\r\n        stopTime = stop;\r\n    }\r\n    \r\n    /**\r\n     * @dev authorise an account to participate\r\n     */\r\n    function authoriseAccount(address whom) onlyCSorOwner {\r\n        authorised[whom] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev authorise a lot of accounts in one go\r\n     */\r\n    function authoriseManyAccounts(address[] many) onlyCSorOwner {\r\n        for (uint256 i = 0; i < many.length; i++) {\r\n            authorised[many[i]] = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev ban an account from participation (default)\r\n     */\r\n    function blockAccount(address whom) onlyCSorOwner {\r\n        authorised[whom] = false;\r\n    }\r\n\r\n    /**\r\n     * @dev set a new CS representative\r\n     */\r\n    function setCS(address newCS) onlyOwner {\r\n        cs = newCS;\r\n    }\r\n\r\n    /**\r\n     * @dev call an end (e.g. because cap reached)\r\n     */\r\n    function stopSale() onlyOwner {\r\n        saleFinished = true;\r\n    }\r\n    \r\n    function SimpleSale() {\r\n        \r\n    }\r\n\r\n    /**\r\n     * @dev fallback function received ether, sends it to the multisig, notes indivdual and group contributions\r\n     */\r\n    function () payable onlyAuthorised {\r\n        multisig.transfer(msg.value);\r\n        deposits[msg.sender] += msg.value;\r\n        totalCollected += msg.value;\r\n    }\r\n\r\n    /**\r\n     * @dev in case somebody sends ERC2o tokens...\r\n     */\r\n    function emergencyERC20Drain( ERC20 token, uint amount ) onlyOwner {\r\n        token.transfer(owner, amount);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"start\",\"type\":\"uint256\"},{\"name\":\"stop\",\"type\":\"uint256\"}],\"name\":\"setPeriod\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stopTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"multisig\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cs\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"whom\",\"type\":\"address\"}],\"name\":\"blockAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"many\",\"type\":\"address[]\"}],\"name\":\"authoriseManyAccounts\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCS\",\"type\":\"address\"}],\"name\":\"setCS\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"whom\",\"type\":\"address\"}],\"name\":\"authoriseAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"authorised\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"emergencyERC20Drain\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalCollected\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stopSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"deposits\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"}]","ContractName":"SimpleSale","CompilerVersion":"v0.4.16+commit.d7661dd9","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://c958ab7e1634430b14981624afebc5eca4792a70a6f2b8c9815267b101a189a8"}]}