{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.15;\r\n\r\n\r\n/// @title Math library - Allows calculation of logarithmic and exponential functions\r\n/// @author Alan Lu - <alan.lu@gnosis.pm>\r\n/// @author Stefan George - <stefan@gnosis.pm>\r\nlibrary Math {\r\n\r\n    /*\r\n     *  Constants\r\n     */\r\n    // This is equal to 1 in our calculations\r\n    uint public constant ONE =  0x10000000000000000;\r\n    uint public constant LN2 = 0xb17217f7d1cf79ac;\r\n    uint public constant LOG2_E = 0x171547652b82fe177;\r\n\r\n    /*\r\n     *  Public functions\r\n     */\r\n    /// @dev Returns natural exponential function value of given x\r\n    /// @param x x\r\n    /// @return e**x\r\n    function exp(int x)\r\n        public\r\n        constant\r\n        returns (uint)\r\n    {\r\n        // revert if x is > MAX_POWER, where\r\n        // MAX_POWER = int(mp.floor(mp.log(mpf(2**256 - 1) / ONE) * ONE))\r\n        require(x <= 2454971259878909886679);\r\n        // return 0 if exp(x) is tiny, using\r\n        // MIN_POWER = int(mp.floor(mp.log(mpf(1) / ONE) * ONE))\r\n        if (x < -818323753292969962227)\r\n            return 0;\r\n        // Transform so that e^x -> 2^x\r\n        x = x * int(ONE) / int(LN2);\r\n        // 2^x = 2^whole(x) * 2^frac(x)\r\n        //       ^^^^^^^^^^ is a bit shift\r\n        // so Taylor expand on z = frac(x)\r\n        int shift;\r\n        uint z;\r\n        if (x >= 0) {\r\n            shift = x / int(ONE);\r\n            z = uint(x % int(ONE));\r\n        }\r\n        else {\r\n            shift = x / int(ONE) - 1;\r\n            z = ONE - uint(-x % int(ONE));\r\n        }\r\n        // 2^x = 1 + (ln 2) x + (ln 2)^2/2! x^2 + ...\r\n        //\r\n        // Can generate the z coefficients using mpmath and the following lines\r\n        // >>> from mpmath import mp\r\n        // >>> mp.dps = 100\r\n        // >>> ONE =  0x10000000000000000\r\n        // >>> print('\\n'.join(hex(int(mp.log(2)**i / mp.factorial(i) * ONE)) for i in range(1, 7)))\r\n        // 0xb17217f7d1cf79ab\r\n        // 0x3d7f7bff058b1d50\r\n        // 0xe35846b82505fc5\r\n        // 0x276556df749cee5\r\n        // 0x5761ff9e299cc4\r\n        // 0xa184897c363c3\r\n        uint zpow = z;\r\n        uint result = ONE;\r\n        result += 0xb17217f7d1cf79ab * zpow / ONE;\r\n        zpow = zpow * z / ONE;\r\n        result += 0x3d7f7bff058b1d50 * zpow / ONE;\r\n        zpow = zpow * z / ONE;\r\n        result += 0xe35846b82505fc5 * zpow / ONE;\r\n        zpow = zpow * z / ONE;\r\n        result += 0x276556df749cee5 * zpow / ONE;\r\n        zpow = zpow * z / ONE;\r\n        result += 0x5761ff9e299cc4 * zpow / ONE;\r\n        zpow = zpow * z / ONE;\r\n        result += 0xa184897c363c3 * zpow / ONE;\r\n        zpow = zpow * z / ONE;\r\n        result += 0xffe5fe2c4586 * zpow / ONE;\r\n        zpow = zpow * z / ONE;\r\n        result += 0x162c0223a5c8 * zpow / ONE;\r\n        zpow = zpow * z / ONE;\r\n        result += 0x1b5253d395e * zpow / ONE;\r\n        zpow = zpow * z / ONE;\r\n        result += 0x1e4cf5158b * zpow / ONE;\r\n        zpow = zpow * z / ONE;\r\n        result += 0x1e8cac735 * zpow / ONE;\r\n        zpow = zpow * z / ONE;\r\n        result += 0x1c3bd650 * zpow / ONE;\r\n        zpow = zpow * z / ONE;\r\n        result += 0x1816193 * zpow / ONE;\r\n        zpow = zpow * z / ONE;\r\n        result += 0x131496 * zpow / ONE;\r\n        zpow = zpow * z / ONE;\r\n        result += 0xe1b7 * zpow / ONE;\r\n        zpow = zpow * z / ONE;\r\n        result += 0x9c7 * zpow / ONE;\r\n        if (shift >= 0) {\r\n            if (result >> (256-shift) > 0)\r\n                return (2**256-1);\r\n            return result << shift;\r\n        }\r\n        else\r\n            return result >> (-shift);\r\n    }\r\n\r\n    /// @dev Returns natural logarithm value of given x\r\n    /// @param x x\r\n    /// @return ln(x)\r\n    function ln(uint x)\r\n        public\r\n        constant\r\n        returns (int)\r\n    {\r\n        require(x > 0);\r\n        // binary search for floor(log2(x))\r\n        int ilog2 = floorLog2(x);\r\n        int z;\r\n        if (ilog2 < 0)\r\n            z = int(x << uint(-ilog2));\r\n        else\r\n            z = int(x >> uint(ilog2));\r\n        // z = x * 2^-⌊log₂x⌋\r\n        // so 1 <= z < 2\r\n        // and ln z = ln x - ⌊log₂x⌋/log₂e\r\n        // so just compute ln z using artanh series\r\n        // and calculate ln x from that\r\n        int term = (z - int(ONE)) * int(ONE) / (z + int(ONE));\r\n        int halflnz = term;\r\n        int termpow = term * term / int(ONE) * term / int(ONE);\r\n        halflnz += termpow / 3;\r\n        termpow = termpow * term / int(ONE) * term / int(ONE);\r\n        halflnz += termpow / 5;\r\n        termpow = termpow * term / int(ONE) * term / int(ONE);\r\n        halflnz += termpow / 7;\r\n        termpow = termpow * term / int(ONE) * term / int(ONE);\r\n        halflnz += termpow / 9;\r\n        termpow = termpow * term / int(ONE) * term / int(ONE);\r\n        halflnz += termpow / 11;\r\n        termpow = termpow * term / int(ONE) * term / int(ONE);\r\n        halflnz += termpow / 13;\r\n        termpow = termpow * term / int(ONE) * term / int(ONE);\r\n        halflnz += termpow / 15;\r\n        termpow = termpow * term / int(ONE) * term / int(ONE);\r\n        halflnz += termpow / 17;\r\n        termpow = termpow * term / int(ONE) * term / int(ONE);\r\n        halflnz += termpow / 19;\r\n        termpow = termpow * term / int(ONE) * term / int(ONE);\r\n        halflnz += termpow / 21;\r\n        termpow = termpow * term / int(ONE) * term / int(ONE);\r\n        halflnz += termpow / 23;\r\n        termpow = termpow * term / int(ONE) * term / int(ONE);\r\n        halflnz += termpow / 25;\r\n        return (ilog2 * int(ONE)) * int(ONE) / int(LOG2_E) + 2 * halflnz;\r\n    }\r\n\r\n    /// @dev Returns base 2 logarithm value of given x\r\n    /// @param x x\r\n    /// @return logarithmic value\r\n    function floorLog2(uint x)\r\n        public\r\n        constant\r\n        returns (int lo)\r\n    {\r\n        lo = -64;\r\n        int hi = 193;\r\n        // I use a shift here instead of / 2 because it floors instead of rounding towards 0\r\n        int mid = (hi + lo) >> 1;\r\n        while((lo + 1) < hi) {\r\n            if (mid < 0 && x << uint(-mid) < ONE || mid >= 0 && x >> uint(mid) < ONE)\r\n                hi = mid;\r\n            else\r\n                lo = mid;\r\n            mid = (hi + lo) >> 1;\r\n        }\r\n    }\r\n\r\n    /// @dev Returns maximum of an array\r\n    /// @param nums Numbers to look through\r\n    /// @return Maximum number\r\n    function max(int[] nums)\r\n        public\r\n        constant\r\n        returns (int max)\r\n    {\r\n        require(nums.length > 0);\r\n        max = -2**255;\r\n        for (uint i = 0; i < nums.length; i++)\r\n            if (nums[i] > max)\r\n                max = nums[i];\r\n    }\r\n\r\n    /// @dev Returns whether an add operation causes an overflow\r\n    /// @param a First addend\r\n    /// @param b Second addend\r\n    /// @return Did no overflow occur?\r\n    function safeToAdd(uint a, uint b)\r\n        public\r\n        constant\r\n        returns (bool)\r\n    {\r\n        return a + b >= a;\r\n    }\r\n\r\n    /// @dev Returns whether a subtraction operation causes an underflow\r\n    /// @param a Minuend\r\n    /// @param b Subtrahend\r\n    /// @return Did no underflow occur?\r\n    function safeToSub(uint a, uint b)\r\n        public\r\n        constant\r\n        returns (bool)\r\n    {\r\n        return a >= b;\r\n    }\r\n\r\n    /// @dev Returns whether a multiply operation causes an overflow\r\n    /// @param a First factor\r\n    /// @param b Second factor\r\n    /// @return Did no overflow occur?\r\n    function safeToMul(uint a, uint b)\r\n        public\r\n        constant\r\n        returns (bool)\r\n    {\r\n        return b == 0 || a * b / b == a;\r\n    }\r\n\r\n    /// @dev Returns sum if no overflow occurred\r\n    /// @param a First addend\r\n    /// @param b Second addend\r\n    /// @return Sum\r\n    function add(uint a, uint b)\r\n        public\r\n        constant\r\n        returns (uint)\r\n    {\r\n        require(safeToAdd(a, b));\r\n        return a + b;\r\n    }\r\n\r\n    /// @dev Returns difference if no overflow occurred\r\n    /// @param a Minuend\r\n    /// @param b Subtrahend\r\n    /// @return Difference\r\n    function sub(uint a, uint b)\r\n        public\r\n        constant\r\n        returns (uint)\r\n    {\r\n        require(safeToSub(a, b));\r\n        return a - b;\r\n    }\r\n\r\n    /// @dev Returns product if no overflow occurred\r\n    /// @param a First factor\r\n    /// @param b Second factor\r\n    /// @return Product\r\n    function mul(uint a, uint b)\r\n        public\r\n        constant\r\n        returns (uint)\r\n    {\r\n        require(safeToMul(a, b));\r\n        return a * b;\r\n    }\r\n\r\n    /// @dev Returns whether an add operation causes an overflow\r\n    /// @param a First addend\r\n    /// @param b Second addend\r\n    /// @return Did no overflow occur?\r\n    function safeToAdd(int a, int b)\r\n        public\r\n        constant\r\n        returns (bool)\r\n    {\r\n        return (b >= 0 && a + b >= a) || (b < 0 && a + b < a);\r\n    }\r\n\r\n    /// @dev Returns whether a subtraction operation causes an underflow\r\n    /// @param a Minuend\r\n    /// @param b Subtrahend\r\n    /// @return Did no underflow occur?\r\n    function safeToSub(int a, int b)\r\n        public\r\n        constant\r\n        returns (bool)\r\n    {\r\n        return (b >= 0 && a - b <= a) || (b < 0 && a - b > a);\r\n    }\r\n\r\n    /// @dev Returns whether a multiply operation causes an overflow\r\n    /// @param a First factor\r\n    /// @param b Second factor\r\n    /// @return Did no overflow occur?\r\n    function safeToMul(int a, int b)\r\n        public\r\n        constant\r\n        returns (bool)\r\n    {\r\n        return (b == 0) || (a * b / b == a);\r\n    }\r\n\r\n    /// @dev Returns sum if no overflow occurred\r\n    /// @param a First addend\r\n    /// @param b Second addend\r\n    /// @return Sum\r\n    function add(int a, int b)\r\n        public\r\n        constant\r\n        returns (int)\r\n    {\r\n        require(safeToAdd(a, b));\r\n        return a + b;\r\n    }\r\n\r\n    /// @dev Returns difference if no overflow occurred\r\n    /// @param a Minuend\r\n    /// @param b Subtrahend\r\n    /// @return Difference\r\n    function sub(int a, int b)\r\n        public\r\n        constant\r\n        returns (int)\r\n    {\r\n        require(safeToSub(a, b));\r\n        return a - b;\r\n    }\r\n\r\n    /// @dev Returns product if no overflow occurred\r\n    /// @param a First factor\r\n    /// @param b Second factor\r\n    /// @return Product\r\n    function mul(int a, int b)\r\n        public\r\n        constant\r\n        returns (int)\r\n    {\r\n        require(safeToMul(a, b));\r\n        return a * b;\r\n    }\r\n}\r\n\r\n\r\n\r\n/// @title Abstract token contract - Functions to be implemented by token contracts\r\ncontract Token {\r\n\r\n    /*\r\n     *  Events\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n\r\n    /*\r\n     *  Public functions\r\n     */\r\n    function transfer(address to, uint value) public returns (bool);\r\n    function transferFrom(address from, address to, uint value) public returns (bool);\r\n    function approve(address spender, uint value) public returns (bool);\r\n    function balanceOf(address owner) public constant returns (uint);\r\n    function allowance(address owner, address spender) public constant returns (uint);\r\n    function totalSupply() public constant returns (uint);\r\n}\r\n\r\n\r\n\r\n/// @title Standard token contract with overflow protection\r\ncontract StandardToken is Token {\r\n    using Math for *;\r\n\r\n    /*\r\n     *  Storage\r\n     */\r\n    mapping (address => uint) balances;\r\n    mapping (address => mapping (address => uint)) allowances;\r\n    uint totalTokens;\r\n\r\n    /*\r\n     *  Public functions\r\n     */\r\n    /// @dev Transfers sender's tokens to a given address. Returns success\r\n    /// @param to Address of token receiver\r\n    /// @param value Number of tokens to transfer\r\n    /// @return Was transfer successful?\r\n    function transfer(address to, uint value)\r\n        public\r\n        returns (bool)\r\n    {\r\n        if (   !balances[msg.sender].safeToSub(value)\r\n            || !balances[to].safeToAdd(value))\r\n            return false;\r\n        balances[msg.sender] -= value;\r\n        balances[to] += value;\r\n        Transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n\r\n    /// @dev Allows allowed third party to transfer tokens from one address to another. Returns success\r\n    /// @param from Address from where tokens are withdrawn\r\n    /// @param to Address to where tokens are sent\r\n    /// @param value Number of tokens to transfer\r\n    /// @return Was transfer successful?\r\n    function transferFrom(address from, address to, uint value)\r\n        public\r\n        returns (bool)\r\n    {\r\n        if (   !balances[from].safeToSub(value)\r\n            || !allowances[from][msg.sender].safeToSub(value)\r\n            || !balances[to].safeToAdd(value))\r\n            return false;\r\n        balances[from] -= value;\r\n        allowances[from][msg.sender] -= value;\r\n        balances[to] += value;\r\n        Transfer(from, to, value);\r\n        return true;\r\n    }\r\n\r\n    /// @dev Sets approved amount of tokens for spender. Returns success\r\n    /// @param spender Address of allowed account\r\n    /// @param value Number of approved tokens\r\n    /// @return Was approval successful?\r\n    function approve(address spender, uint value)\r\n        public\r\n        returns (bool)\r\n    {\r\n        allowances[msg.sender][spender] = value;\r\n        Approval(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    /// @dev Returns number of allowed tokens for given address\r\n    /// @param owner Address of token owner\r\n    /// @param spender Address of token spender\r\n    /// @return Remaining allowance for spender\r\n    function allowance(address owner, address spender)\r\n        public\r\n        constant\r\n        returns (uint)\r\n    {\r\n        return allowances[owner][spender];\r\n    }\r\n\r\n    /// @dev Returns number of tokens owned by given address\r\n    /// @param owner Address of token owner\r\n    /// @return Balance of owner\r\n    function balanceOf(address owner)\r\n        public\r\n        constant\r\n        returns (uint)\r\n    {\r\n        return balances[owner];\r\n    }\r\n\r\n    /// @dev Returns total supply of tokens\r\n    /// @return Total supply\r\n    function totalSupply()\r\n        public\r\n        constant\r\n        returns (uint)\r\n    {\r\n        return totalTokens;\r\n    }\r\n}\r\n\r\n\r\n\r\n/// @title Outcome token contract - Issuing and revoking outcome tokens\r\n/// @author Stefan George - <stefan@gnosis.pm>\r\ncontract OutcomeToken is StandardToken {\r\n    using Math for *;\r\n\r\n    /*\r\n     *  Events\r\n     */\r\n    event Issuance(address indexed owner, uint amount);\r\n    event Revocation(address indexed owner, uint amount);\r\n\r\n    /*\r\n     *  Storage\r\n     */\r\n    address public eventContract;\r\n\r\n    /*\r\n     *  Modifiers\r\n     */\r\n    modifier isEventContract () {\r\n        // Only event contract is allowed to proceed\r\n        require(msg.sender == eventContract);\r\n        _;\r\n    }\r\n\r\n    /*\r\n     *  Public functions\r\n     */\r\n    /// @dev Constructor sets events contract address\r\n    function OutcomeToken()\r\n        public\r\n    {\r\n        eventContract = msg.sender;\r\n    }\r\n    \r\n    /// @dev Events contract issues new tokens for address. Returns success\r\n    /// @param _for Address of receiver\r\n    /// @param outcomeTokenCount Number of tokens to issue\r\n    function issue(address _for, uint outcomeTokenCount)\r\n        public\r\n        isEventContract\r\n    {\r\n        balances[_for] = balances[_for].add(outcomeTokenCount);\r\n        totalTokens = totalTokens.add(outcomeTokenCount);\r\n        Issuance(_for, outcomeTokenCount);\r\n    }\r\n\r\n    /// @dev Events contract revokes tokens for address. Returns success\r\n    /// @param _for Address of token holder\r\n    /// @param outcomeTokenCount Number of tokens to revoke\r\n    function revoke(address _for, uint outcomeTokenCount)\r\n        public\r\n        isEventContract\r\n    {\r\n        balances[_for] = balances[_for].sub(outcomeTokenCount);\r\n        totalTokens = totalTokens.sub(outcomeTokenCount);\r\n        Revocation(_for, outcomeTokenCount);\r\n    }\r\n}\r\n\r\n\r\n\r\n/// @title Abstract oracle contract - Functions to be implemented by oracles\r\ncontract Oracle {\r\n\r\n    function isOutcomeSet() public constant returns (bool);\r\n    function getOutcome() public constant returns (int);\r\n}\r\n\r\n\r\n\r\n/// @title Event contract - Provide basic functionality required by different event types\r\n/// @author Stefan George - <stefan@gnosis.pm>\r\ncontract Event {\r\n\r\n    /*\r\n     *  Events\r\n     */\r\n    event OutcomeTokenCreation(OutcomeToken outcomeToken, uint8 index);\r\n    event OutcomeTokenSetIssuance(address indexed buyer, uint collateralTokenCount);\r\n    event OutcomeTokenSetRevocation(address indexed seller, uint outcomeTokenCount);\r\n    event OutcomeAssignment(int outcome);\r\n    event WinningsRedemption(address indexed receiver, uint winnings);\r\n\r\n    /*\r\n     *  Storage\r\n     */\r\n    Token public collateralToken;\r\n    Oracle public oracle;\r\n    bool public isOutcomeSet;\r\n    int public outcome;\r\n    OutcomeToken[] public outcomeTokens;\r\n\r\n    /*\r\n     *  Public functions\r\n     */\r\n    /// @dev Contract constructor validates and sets basic event properties\r\n    /// @param _collateralToken Tokens used as collateral in exchange for outcome tokens\r\n    /// @param _oracle Oracle contract used to resolve the event\r\n    /// @param outcomeCount Number of event outcomes\r\n    function Event(Token _collateralToken, Oracle _oracle, uint8 outcomeCount)\r\n        public\r\n    {\r\n        // Validate input\r\n        require(address(_collateralToken) != 0 && address(_oracle) != 0 && outcomeCount >= 2);\r\n        collateralToken = _collateralToken;\r\n        oracle = _oracle;\r\n        // Create an outcome token for each outcome\r\n        for (uint8 i = 0; i < outcomeCount; i++) {\r\n            OutcomeToken outcomeToken = new OutcomeToken();\r\n            outcomeTokens.push(outcomeToken);\r\n            OutcomeTokenCreation(outcomeToken, i);\r\n        }\r\n    }\r\n\r\n    /// @dev Buys equal number of tokens of all outcomes, exchanging collateral tokens and sets of outcome tokens 1:1\r\n    /// @param collateralTokenCount Number of collateral tokens\r\n    function buyAllOutcomes(uint collateralTokenCount)\r\n        public\r\n    {\r\n        // Transfer collateral tokens to events contract\r\n        require(collateralToken.transferFrom(msg.sender, this, collateralTokenCount));\r\n        // Issue new outcome tokens to sender\r\n        for (uint8 i = 0; i < outcomeTokens.length; i++)\r\n            outcomeTokens[i].issue(msg.sender, collateralTokenCount);\r\n        OutcomeTokenSetIssuance(msg.sender, collateralTokenCount);\r\n    }\r\n\r\n    /// @dev Sells equal number of tokens of all outcomes, exchanging collateral tokens and sets of outcome tokens 1:1\r\n    /// @param outcomeTokenCount Number of outcome tokens\r\n    function sellAllOutcomes(uint outcomeTokenCount)\r\n        public\r\n    {\r\n        // Revoke sender's outcome tokens of all outcomes\r\n        for (uint8 i = 0; i < outcomeTokens.length; i++)\r\n            outcomeTokens[i].revoke(msg.sender, outcomeTokenCount);\r\n        // Transfer collateral tokens to sender\r\n        require(collateralToken.transfer(msg.sender, outcomeTokenCount));\r\n        OutcomeTokenSetRevocation(msg.sender, outcomeTokenCount);\r\n    }\r\n\r\n    /// @dev Sets winning event outcome\r\n    function setOutcome()\r\n        public\r\n    {\r\n        // Winning outcome is not set yet in event contract but in oracle contract\r\n        require(!isOutcomeSet && oracle.isOutcomeSet());\r\n        // Set winning outcome\r\n        outcome = oracle.getOutcome();\r\n        isOutcomeSet = true;\r\n        OutcomeAssignment(outcome);\r\n    }\r\n\r\n    /// @dev Returns outcome count\r\n    /// @return Outcome count\r\n    function getOutcomeCount()\r\n        public\r\n        constant\r\n        returns (uint8)\r\n    {\r\n        return uint8(outcomeTokens.length);\r\n    }\r\n\r\n    /// @dev Returns outcome tokens array\r\n    /// @return Outcome tokens\r\n    function getOutcomeTokens()\r\n        public\r\n        constant\r\n        returns (OutcomeToken[])\r\n    {\r\n        return outcomeTokens;\r\n    }\r\n\r\n    /// @dev Returns the amount of outcome tokens held by owner\r\n    /// @return Outcome token distribution\r\n    function getOutcomeTokenDistribution(address owner)\r\n        public\r\n        constant\r\n        returns (uint[] outcomeTokenDistribution)\r\n    {\r\n        outcomeTokenDistribution = new uint[](outcomeTokens.length);\r\n        for (uint8 i = 0; i < outcomeTokenDistribution.length; i++)\r\n            outcomeTokenDistribution[i] = outcomeTokens[i].balanceOf(owner);\r\n    }\r\n\r\n    /// @dev Calculates and returns event hash\r\n    /// @return Event hash\r\n    function getEventHash() public constant returns (bytes32);\r\n\r\n    /// @dev Exchanges sender's winning outcome tokens for collateral tokens\r\n    /// @return Sender's winnings\r\n    function redeemWinnings() public returns (uint);\r\n}\r\n\r\n\r\n\r\n/// @title Abstract market contract - Functions to be implemented by market contracts\r\ncontract Market {\r\n\r\n    /*\r\n     *  Events\r\n     */\r\n    event MarketFunding(uint funding);\r\n    event MarketClosing();\r\n    event FeeWithdrawal(uint fees);\r\n    event OutcomeTokenPurchase(address indexed buyer, uint8 outcomeTokenIndex, uint outcomeTokenCount, uint outcomeTokenCost, uint marketFees);\r\n    event OutcomeTokenSale(address indexed seller, uint8 outcomeTokenIndex, uint outcomeTokenCount, uint outcomeTokenProfit, uint marketFees);\r\n    event OutcomeTokenShortSale(address indexed buyer, uint8 outcomeTokenIndex, uint outcomeTokenCount, uint cost);\r\n\r\n    /*\r\n     *  Storage\r\n     */\r\n    address public creator;\r\n    uint public createdAtBlock;\r\n    Event public eventContract;\r\n    MarketMaker public marketMaker;\r\n    uint24 public fee;\r\n    uint public funding;\r\n    int[] public netOutcomeTokensSold;\r\n    Stages public stage;\r\n\r\n    enum Stages {\r\n        MarketCreated,\r\n        MarketFunded,\r\n        MarketClosed\r\n    }\r\n\r\n    /*\r\n     *  Public functions\r\n     */\r\n    function fund(uint _funding) public;\r\n    function close() public;\r\n    function withdrawFees() public returns (uint);\r\n    function buy(uint8 outcomeTokenIndex, uint outcomeTokenCount, uint maxCost) public returns (uint);\r\n    function sell(uint8 outcomeTokenIndex, uint outcomeTokenCount, uint minProfit) public returns (uint);\r\n    function shortSell(uint8 outcomeTokenIndex, uint outcomeTokenCount, uint minProfit) public returns (uint);\r\n    function calcMarketFee(uint outcomeTokenCost) public constant returns (uint);\r\n}\r\n\r\n\r\n\r\n/// @title Abstract market maker contract - Functions to be implemented by market maker contracts\r\ncontract MarketMaker {\r\n\r\n    /*\r\n     *  Public functions\r\n     */\r\n    function calcCost(Market market, uint8 outcomeTokenIndex, uint outcomeTokenCount) public constant returns (uint);\r\n    function calcProfit(Market market, uint8 outcomeTokenIndex, uint outcomeTokenCount) public constant returns (uint);\r\n    function calcMarginalPrice(Market market, uint8 outcomeTokenIndex) public constant returns (uint);\r\n}\r\n\r\n\r\n\r\n/// @title LMSR market maker contract - Calculates share prices based on share distribution and initial funding\r\n/// @author Alan Lu - <alan.lu@gnosis.pm>\r\ncontract LMSRMarketMaker is MarketMaker {\r\n    using Math for *;\r\n\r\n    /*\r\n     *  Constants\r\n     */\r\n    uint constant ONE = 0x10000000000000000;\r\n    int constant EXP_LIMIT = 2352680790717288641401;\r\n\r\n    /*\r\n     *  Public functions\r\n     */\r\n    /// @dev Returns cost to buy given number of outcome tokens\r\n    /// @param market Market contract\r\n    /// @param outcomeTokenIndex Index of outcome to buy\r\n    /// @param outcomeTokenCount Number of outcome tokens to buy\r\n    /// @return Cost\r\n    function calcCost(Market market, uint8 outcomeTokenIndex, uint outcomeTokenCount)\r\n        public\r\n        constant\r\n        returns (uint cost)\r\n    {\r\n        require(market.eventContract().getOutcomeCount() > 1);\r\n        int[] memory netOutcomeTokensSold = getNetOutcomeTokensSold(market);\r\n        // Calculate cost level based on net outcome token balances\r\n        int logN = Math.ln(netOutcomeTokensSold.length * ONE);\r\n        uint funding = market.funding();\r\n        int costLevelBefore = calcCostLevel(logN, netOutcomeTokensSold, funding);\r\n        // Add outcome token count to net outcome token balance\r\n        require(int(outcomeTokenCount) >= 0);\r\n        netOutcomeTokensSold[outcomeTokenIndex] = netOutcomeTokensSold[outcomeTokenIndex].add(int(outcomeTokenCount));\r\n        // Calculate cost level after balance was updated\r\n        int costLevelAfter = calcCostLevel(logN, netOutcomeTokensSold, funding);\r\n        // Calculate cost as cost level difference\r\n        require(costLevelAfter >= costLevelBefore);\r\n        cost = uint(costLevelAfter - costLevelBefore);\r\n        // Take the ceiling to account for rounding\r\n        if (cost / ONE * ONE == cost)\r\n            cost /= ONE;\r\n        else\r\n            // Integer division by ONE ensures there is room to (+ 1)\r\n            cost = cost / ONE + 1;\r\n        // Make sure cost is not bigger than 1 per share\r\n        if (cost > outcomeTokenCount)\r\n            cost = outcomeTokenCount;\r\n    }\r\n\r\n    /// @dev Returns profit for selling given number of outcome tokens\r\n    /// @param market Market contract\r\n    /// @param outcomeTokenIndex Index of outcome to sell\r\n    /// @param outcomeTokenCount Number of outcome tokens to sell\r\n    /// @return Profit\r\n    function calcProfit(Market market, uint8 outcomeTokenIndex, uint outcomeTokenCount)\r\n        public\r\n        constant\r\n        returns (uint profit)\r\n    {\r\n        require(market.eventContract().getOutcomeCount() > 1);\r\n        int[] memory netOutcomeTokensSold = getNetOutcomeTokensSold(market);\r\n        // Calculate cost level based on net outcome token balances\r\n        int logN = Math.ln(netOutcomeTokensSold.length * ONE);\r\n        uint funding = market.funding();\r\n        int costLevelBefore = calcCostLevel(logN, netOutcomeTokensSold, funding);\r\n        // Subtract outcome token count from the net outcome token balance\r\n        require(int(outcomeTokenCount) >= 0);\r\n        netOutcomeTokensSold[outcomeTokenIndex] = netOutcomeTokensSold[outcomeTokenIndex].sub(int(outcomeTokenCount));\r\n        // Calculate cost level after balance was updated\r\n        int costLevelAfter = calcCostLevel(logN, netOutcomeTokensSold, funding);\r\n        // Calculate profit as cost level difference\r\n        require(costLevelBefore >= costLevelAfter);\r\n        // Take the floor\r\n        profit = uint(costLevelBefore - costLevelAfter) / ONE;\r\n    }\r\n\r\n    /// @dev Returns marginal price of an outcome\r\n    /// @param market Market contract\r\n    /// @param outcomeTokenIndex Index of outcome to determine marginal price of\r\n    /// @return Marginal price of an outcome as a fixed point number\r\n    function calcMarginalPrice(Market market, uint8 outcomeTokenIndex)\r\n        public\r\n        constant\r\n        returns (uint price)\r\n    {\r\n        require(market.eventContract().getOutcomeCount() > 1);\r\n        int[] memory netOutcomeTokensSold = getNetOutcomeTokensSold(market);\r\n        int logN = Math.ln(netOutcomeTokensSold.length * ONE);\r\n        uint funding = market.funding();\r\n        // The price function is exp(quantities[i]/b) / sum(exp(q/b) for q in quantities)\r\n        // To avoid overflow, calculate with\r\n        // exp(quantities[i]/b - offset) / sum(exp(q/b - offset) for q in quantities)\r\n        var (sum, , outcomeExpTerm) = sumExpOffset(logN, netOutcomeTokensSold, funding, outcomeTokenIndex);\r\n        return outcomeExpTerm / (sum / ONE);\r\n    }\r\n\r\n    /*\r\n     *  Private functions\r\n     */\r\n    /// @dev Calculates the result of the LMSR cost function which is used to\r\n    ///      derive prices from the market state\r\n    /// @param logN Logarithm of the number of outcomes\r\n    /// @param netOutcomeTokensSold Net outcome tokens sold by market\r\n    /// @param funding Initial funding for market\r\n    /// @return Cost level\r\n    function calcCostLevel(int logN, int[] netOutcomeTokensSold, uint funding)\r\n        private\r\n        constant\r\n        returns(int costLevel)\r\n    {\r\n        // The cost function is C = b * log(sum(exp(q/b) for q in quantities)).\r\n        // To avoid overflow, we need to calc with an exponent offset:\r\n        // C = b * (offset + log(sum(exp(q/b - offset) for q in quantities)))\r\n        var (sum, offset, ) = sumExpOffset(logN, netOutcomeTokensSold, funding, 0);\r\n        costLevel = Math.ln(sum);\r\n        costLevel = costLevel.add(offset);\r\n        costLevel = (costLevel.mul(int(ONE)) / logN).mul(int(funding));\r\n    }\r\n\r\n    /// @dev Calculates sum(exp(q/b - offset) for q in quantities), where offset is set\r\n    ///      so that the sum fits in 248-256 bits\r\n    /// @param logN Logarithm of the number of outcomes\r\n    /// @param netOutcomeTokensSold Net outcome tokens sold by market\r\n    /// @param funding Initial funding for market\r\n    /// @param outcomeIndex Index of exponential term to extract (for use by marginal price function)\r\n    /// @return A result structure composed of the sum, the offset used, and the summand associated with the supplied index\r\n    function sumExpOffset(int logN, int[] netOutcomeTokensSold, uint funding, uint8 outcomeIndex)\r\n        private\r\n        constant\r\n        returns (uint sum, int offset, uint outcomeExpTerm)\r\n    {\r\n        // Naive calculation of this causes an overflow\r\n        // since anything above a bit over 133*ONE supplied to exp will explode\r\n        // as exp(133) just about fits into 192 bits of whole number data.\r\n\r\n        // The choice of this offset is subject to another limit:\r\n        // computing the inner sum successfully.\r\n        // Since the index is 8 bits, there has to be 8 bits of headroom for\r\n        // each summand, meaning q/b - offset <= exponential_limit,\r\n        // where that limit can be found with `mp.floor(mp.log((2**248 - 1) / ONE) * ONE)`\r\n        // That is what EXP_LIMIT is set to: it is about 127.5\r\n\r\n        // finally, if the distribution looks like [BIG, tiny, tiny...], using a\r\n        // BIG offset will cause the tiny quantities to go really negative\r\n        // causing the associated exponentials to vanish.\r\n\r\n        int maxQuantity = Math.max(netOutcomeTokensSold);\r\n        require(logN >= 0 && int(funding) >= 0);\r\n        offset = maxQuantity.mul(logN) / int(funding);\r\n        offset = offset.sub(EXP_LIMIT);\r\n        uint term;\r\n        for (uint8 i = 0; i < netOutcomeTokensSold.length; i++) {\r\n            term = Math.exp((netOutcomeTokensSold[i].mul(logN) / int(funding)).sub(offset));\r\n            if (i == outcomeIndex)\r\n                outcomeExpTerm = term;\r\n            sum = sum.add(term);\r\n        }\r\n    }\r\n\r\n    /// @dev Gets net outcome tokens sold by market. Since all sets of outcome tokens are backed by\r\n    ///      corresponding collateral tokens, the net quantity of a token sold by the market is the\r\n    ///      number of collateral tokens (which is the same as the number of outcome tokens the\r\n    ///      market created) subtracted by the quantity of that token held by the market.\r\n    /// @param market Market contract\r\n    /// @return Net outcome tokens sold by market\r\n    function getNetOutcomeTokensSold(Market market)\r\n        private\r\n        constant\r\n        returns (int[] quantities)\r\n    {\r\n        quantities = new int[](market.eventContract().getOutcomeCount());\r\n        for (uint8 i = 0; i < quantities.length; i++)\r\n            quantities[i] = market.netOutcomeTokensSold(i);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"market\",\"type\":\"address\"},{\"name\":\"outcomeTokenIndex\",\"type\":\"uint8\"},{\"name\":\"outcomeTokenCount\",\"type\":\"uint256\"}],\"name\":\"calcProfit\",\"outputs\":[{\"name\":\"profit\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"market\",\"type\":\"address\"},{\"name\":\"outcomeTokenIndex\",\"type\":\"uint8\"},{\"name\":\"outcomeTokenCount\",\"type\":\"uint256\"}],\"name\":\"calcCost\",\"outputs\":[{\"name\":\"cost\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"market\",\"type\":\"address\"},{\"name\":\"outcomeTokenIndex\",\"type\":\"uint8\"}],\"name\":\"calcMarginalPrice\",\"outputs\":[{\"name\":\"price\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"}]","ContractName":"LMSRMarketMaker","CompilerVersion":"v0.4.15+commit.bbb8e64f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":":Math:62F4074655d8f888e9293c59d2a5FAa5156F2275","SwarmSource":"bzzr://03a111cf3306645a8161fe4ce0f6c29e55d4be9593837fbd2c0182ec7d901aa3"}]}