{"status":"1","message":"OK","result":[{"SourceCode":"/* The Burner v1.0, Main-Net release.\r\n*  ~by Gluedog \r\n*  -----------\r\n*\r\n*  Compiler version: 0.4.19+commit.c4cbbb05.Emscripten.clang\r\n*\r\n* The Burner is Billionaire Token's version of a \"Faucet\" - an evil, twisted Faucet. \r\n* Just like a Faucet, people can use it to get some extra coins. \r\n* Unlike a Faucet, the Burner will also burn coins and reduce the maximum supply in the process of giving people extra coins.\r\n* The Burner is only usable by addresses who have also participated in the last week's Raffle round.\r\n*/\r\n\r\npragma solidity ^0.4.8;\r\n\r\ncontract XBL_ERC20Wrapper\r\n{\r\n    function transferFrom(address from, address to, uint value) returns (bool success);\r\n    function transfer(address _to, uint _value) returns (bool success);\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\r\n    function burn(uint256 _value) returns (bool success);\r\n    function balanceOf(address _owner) constant returns (uint256 balance);\r\n    function totalSupply() constant returns (uint256 total_supply);\r\n    function burnFrom(address _from, uint256 _value) returns (bool success);\r\n}\r\n\r\ncontract XBL_RaffleWrapper\r\n{\r\n    function getLastWeekStake(address user_addr) public returns (uint256 last_week_stake);\r\n    function reduceLastWeekStake(address user_addr, uint256 amount) public;\r\n}\r\n\r\ncontract TheBurner\r\n{\r\n    uint256 DECIMALS = 1000000000000000000;\r\n\r\n    XBL_ERC20Wrapper ERC20_CALLS;\r\n    XBL_RaffleWrapper RAFFLE_CALLS;\r\n\r\n    uint8 public extra_bonus; /* The percentage of extra coins that the burner will reward people for. */\r\n\r\n    address public burner_addr;\r\n    address public raffle_addr;\r\n    address owner_addr;\r\n    address XBLContract_addr;\r\n\r\n    function TheBurner()\r\n    {\r\n        XBLContract_addr = 0x49AeC0752E68D0282Db544C677f6BA407BA17ED7;\r\n        raffle_addr = 0x0; /* Do we have a raffle address? */\r\n        extra_bonus = 5; /* 5% reward for burning your own coins, provided the burner has enough. */\r\n        burner_addr = address(this);\r\n        owner_addr = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() \r\n    {\r\n        require (msg.sender == owner_addr);\r\n        _;\r\n    }\r\n\r\n    function setRaffleAddress(address _raffle_addr) public onlyOwner\r\n    {   /* Allows the owner to set the raffle address */\r\n        raffle_addr = _raffle_addr;\r\n        RAFFLE_CALLS = XBL_RaffleWrapper(raffle_addr);\r\n    }\r\n\r\n    function getPercent(uint8 percent, uint256 number) private returns (uint256 result)\r\n    {\r\n        return number * percent / 100;\r\n    }\r\n\r\n    function registerBurn(uint256 user_input) returns (int8 registerBurn_STATUS)\r\n    {   /* This function will take a number as input, make it 18 decimal format, burn the tokens, \r\n            and give them back to the user plus 5% - if he is elligible of course.\r\n        */\r\n        uint256 tokens_registered = user_input*DECIMALS; /* 18 Decimals */\r\n        require (ERC20_CALLS.allowance(msg.sender, burner_addr) >= tokens_registered); /* Did the user pre-allow enough tokens ? */\r\n        require (tokens_registered <= RAFFLE_CALLS.getLastWeekStake(msg.sender)); /* Did the user have enough tickets in last week's Raffle ? */\r\n        uint256 eligible_reward = tokens_registered + getPercent(extra_bonus, tokens_registered);\r\n        require (eligible_reward <= ERC20_CALLS.balanceOf(burner_addr)); /* Do we have enough tokens to give out? */\r\n\r\n        /* Burn their tokens and give them their reward */\r\n        ERC20_CALLS.burnFrom(msg.sender, tokens_registered);\r\n        ERC20_CALLS.transfer(msg.sender, eligible_reward);\r\n\r\n        /* We have to reduce the users last_week_stake so that they can't burn all of the tokens, just the ones they contributed to the Raffle. */\r\n        RAFFLE_CALLS.reduceLastWeekStake(msg.sender, tokens_registered);\r\n\r\n        return 0;\r\n    }\r\n\r\n\r\n    /* <<<--- Debug ONLY functions. --->>> */\r\n    /* <<<--- Debug ONLY functions. --->>> */\r\n    /* <<<--- Debug ONLY functions. --->>> */\r\n\r\n    function dSET_XBL_ADDRESS(address _XBLContract_addr) public onlyOwner\r\n    {/* Debugging purposes. This will be hardcoded in the deployable version. */\r\n        XBLContract_addr = _XBLContract_addr;\r\n        ERC20_CALLS = XBL_ERC20Wrapper(XBLContract_addr);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"extra_bonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_XBLContract_addr\",\"type\":\"address\"}],\"name\":\"dSET_XBL_ADDRESS\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_raffle_addr\",\"type\":\"address\"}],\"name\":\"setRaffleAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"user_input\",\"type\":\"uint256\"}],\"name\":\"registerBurn\",\"outputs\":[{\"name\":\"registerBurn_STATUS\",\"type\":\"int8\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"raffle_addr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"burner_addr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"TheBurner","CompilerVersion":"v0.4.19-nightly.2017.11.11+commit.284c3839","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://17566ec11316c89efea09861db3ccb6776d72a287ee5dd94342303949c61b206"}]}