{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\ncontract owned {\r\n    address public owner;\r\n\r\n    function owned() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) onlyOwner {\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\nlibrary TiposCompartidos {\r\n    enum TipoPremio {none,free,x2,x3,x5, surprise }\r\n\r\n    struct Celda {\r\n        address creador;\r\n        uint polenPositivos;\r\n        uint polenNegativos;\r\n        uint256 fechaCreacion;\r\n        uint primeraPosicion;\r\n        uint segundaPosicion;\r\n        uint terceraPosicion;\r\n        uint cuartaPosicion;\r\n        uint quintaPosicion;\r\n        uint sextaPosicion;\r\n        TipoPremio tipo;\r\n        bool premio;\r\n    }\r\n    \r\n}\r\n\r\ncontract BeeGame is owned {\r\n    \r\n    uint256 internal sellPrice;\r\n    uint256 internal buyPrice;\r\n    uint internal numeroCeldas;\r\n    string internal name;\r\n    string internal symbol;\r\n    uint8 internal decimals;\r\n    uint internal numeroUsuarios;\r\n    uint fechaTax;\r\n\r\n    mapping (address => uint) balanceOf;\r\n\r\n    address[] indiceUsuarios;\r\n    \r\n    mapping (uint256 => TiposCompartidos.Celda) celdas;\r\n    \r\n    uint256[] indiceCeldas;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event TransferKO(address indexed from, address indexed to, uint256 value);\r\n    \r\n    function BeeGame (\r\n        uint256 initialSupply,\r\n        uint256 newSellPrice,\r\n        uint256 newBuyPrice,\r\n        uint _fechaTax) {\r\n        fechaTax = _fechaTax;\r\n        balanceOf[owner] = initialSupply;\r\n        setPrices(newSellPrice,newBuyPrice);\r\n        numeroCeldas = 0;\r\n        name = \"Beether\";\r\n        symbol = \"beeth\"; \r\n        decimals = 2;\r\n        TiposCompartidos.Celda memory celda = TiposCompartidos.Celda({\r\n            creador:msg.sender,\r\n            polenPositivos : 0, \r\n            polenNegativos : 3,\r\n            fechaCreacion: 1509302402021,\r\n            primeraPosicion : 0,\r\n            segundaPosicion : 0,\r\n            terceraPosicion : 0,\r\n            cuartaPosicion : 0,\r\n            quintaPosicion : 0,\r\n            sextaPosicion : 0,\r\n            tipo:TiposCompartidos.TipoPremio.none,\r\n            premio:false\r\n        });\r\n        indiceCeldas.push(1509302402021);\r\n        numeroCeldas = numeroCeldas + 1;\r\n        celdas[1509302402021] = celda;\r\n    }\r\n\r\n    function buy() payable returns (uint amount) {\r\n        amount = msg.value / buyPrice;         \r\n        require(balanceOf[owner] >= amount); \r\n        _transfer(owner, msg.sender, amount);\r\n        incluirUsuario(msg.sender);\r\n        Transfer(owner, msg.sender, amount); \r\n        return amount;                         \r\n    }\r\n\r\n    function incluirUsuario(address usuario){\r\n        bool encontrado = false;\r\n        for (uint i = 0; i < numeroUsuarios; i++) {\r\n            address usuarioT = indiceUsuarios[i];\r\n            if (usuarioT == usuario){\r\n                encontrado = true;\r\n            }\r\n        }\r\n        if(!encontrado){\r\n            indiceUsuarios.push(usuario);\r\n            numeroUsuarios++;\r\n        }\r\n    }\r\n\r\n    function cobrarImpuesto(uint _fechaTax) onlyOwner {\r\n        for (uint i = 0; i < numeroUsuarios; i++) {\r\n            address usuario = indiceUsuarios[i];\r\n            if (balanceOf[usuario] > 0){\r\n                _transfer(usuario, owner, 1);\r\n            }\r\n        }\r\n        fechaTax = _fechaTax;\r\n    }\r\n\r\n    function crearCelda(uint _polenes, uint256 _fechaCreacion, uint posicion, uint _celdaPadre, uint _celdaAbuelo, TiposCompartidos.TipoPremio tipo) {\r\n        require(balanceOf[msg.sender]>=3);\r\n        require(_polenes == 3);\r\n        require(_celdaPadre != 0);\r\n        require((posicion >= 0 && posicion < 7) || (posicion == 0 && msg.sender == owner));\r\n        require(((tipo == TiposCompartidos.TipoPremio.free || tipo == TiposCompartidos.TipoPremio.x2 || tipo == TiposCompartidos.TipoPremio.x3 || tipo == TiposCompartidos.TipoPremio.x5 || tipo == TiposCompartidos.TipoPremio.surprise) && msg.sender == owner) || tipo == TiposCompartidos.TipoPremio.none);\r\n        TiposCompartidos.Celda memory celdaPadre = celdas[_celdaPadre];\r\n        require(\r\n            ((posicion == 1 && celdaPadre.primeraPosicion == 0) || celdas[celdaPadre.primeraPosicion].tipo != TiposCompartidos.TipoPremio.none ) || \r\n            ((posicion == 2 && celdaPadre.segundaPosicion == 0) || celdas[celdaPadre.segundaPosicion].tipo != TiposCompartidos.TipoPremio.none ) || \r\n            ((posicion == 3 && celdaPadre.terceraPosicion == 0) || celdas[celdaPadre.terceraPosicion].tipo != TiposCompartidos.TipoPremio.none ) || \r\n            ((posicion == 4 && celdaPadre.cuartaPosicion == 0)  || celdas[celdaPadre.cuartaPosicion].tipo != TiposCompartidos.TipoPremio.none ) || \r\n            ((posicion == 5 && celdaPadre.quintaPosicion == 0)  || celdas[celdaPadre.quintaPosicion].tipo != TiposCompartidos.TipoPremio.none ) || \r\n            ((posicion == 6 && celdaPadre.sextaPosicion == 0) || celdas[celdaPadre.sextaPosicion].tipo != TiposCompartidos.TipoPremio.none )\r\n        );\r\n        TiposCompartidos.Celda memory celda;\r\n        TiposCompartidos.TipoPremio tipoPremio;\r\n        if (celdas[_fechaCreacion].fechaCreacion == _fechaCreacion) {\r\n            celda = celdas[_fechaCreacion];\r\n            celda.creador = msg.sender;\r\n            celda.premio = false;\r\n            tipoPremio = celda.tipo;\r\n            celda.tipo = TiposCompartidos.TipoPremio.none;\r\n        } else {\r\n            if (msg.sender != owner) {\r\n                celda = TiposCompartidos.Celda({\r\n                    creador:msg.sender,\r\n                    polenPositivos : 0, \r\n                    polenNegativos : _polenes,\r\n                    fechaCreacion: _fechaCreacion,\r\n                    primeraPosicion : 0,\r\n                    segundaPosicion : 0,\r\n                    terceraPosicion : 0,\r\n                    cuartaPosicion : 0,\r\n                    quintaPosicion : 0,\r\n                    sextaPosicion : 0,\r\n                    tipo:tipo,\r\n                    premio:false\r\n                });\r\n            }else {\r\n                celda = TiposCompartidos.Celda({\r\n                    creador:msg.sender,\r\n                    polenPositivos : 0, \r\n                    polenNegativos : _polenes,\r\n                    fechaCreacion: _fechaCreacion,\r\n                    primeraPosicion : 0,\r\n                    segundaPosicion : 0,\r\n                    terceraPosicion : 0,\r\n                    cuartaPosicion : 0,\r\n                    quintaPosicion : 0,\r\n                    sextaPosicion : 0,\r\n                    tipo:tipo,\r\n                    premio:true\r\n                });\r\n            }\r\n            indiceCeldas.push(_fechaCreacion);\r\n            numeroCeldas = numeroCeldas + 1;\r\n        }\r\n        celdas[_fechaCreacion] = celda;\r\n        TiposCompartidos.Celda memory celdaAbuelo = celdas[_celdaAbuelo];\r\n        uint multiplicador = 1;\r\n        address repartidor = msg.sender;\r\n        if (tipoPremio == TiposCompartidos.TipoPremio.x2 && !celda.premio) {\r\n            multiplicador = 2;\r\n            repartidor = owner;\r\n        } else if (tipoPremio == TiposCompartidos.TipoPremio.x3 && !celda.premio) {\r\n            multiplicador = 3;\r\n            repartidor = owner;\r\n        } else if (tipoPremio == TiposCompartidos.TipoPremio.x5 && !celda.premio) {\r\n            multiplicador = 5;\r\n            repartidor = owner;\r\n        }  else if (tipoPremio == TiposCompartidos.TipoPremio.free && !celda.premio) {\r\n            repartidor = owner;\r\n        }\r\n        if (posicion == 1 && celdaPadre.primeraPosicion == 0) {\r\n            celdaPadre.primeraPosicion = _fechaCreacion;   \r\n        }else if (posicion == 2 && celdaPadre.segundaPosicion == 0 ) {\r\n            celdaPadre.segundaPosicion = _fechaCreacion;\r\n        }else if (posicion == 3 && celdaPadre.terceraPosicion == 0) {\r\n            celdaPadre.terceraPosicion = _fechaCreacion;\r\n        }else if (posicion == 4 && celdaPadre.cuartaPosicion == 0) {\r\n            celdaPadre.cuartaPosicion = _fechaCreacion;\r\n        }else if (posicion == 5 && celdaPadre.quintaPosicion == 0) {\r\n            celdaPadre.quintaPosicion = _fechaCreacion;\r\n        }else if (posicion == 6 && celdaPadre.sextaPosicion == 0) {\r\n            celdaPadre.sextaPosicion = _fechaCreacion;\r\n        }\r\n        if (_celdaAbuelo != 0 && !celda.premio) {\r\n            _transfer(repartidor,celdaPadre.creador,2 * multiplicador);\r\n            celdaPadre.polenPositivos = celdaPadre.polenPositivos + (2 * multiplicador);\r\n            celdaAbuelo.polenPositivos = celdaAbuelo.polenPositivos + (1 * multiplicador);\r\n            _transfer(repartidor,celdaAbuelo.creador,1 * multiplicador);\r\n            celdas[celdaAbuelo.fechaCreacion] = celdaAbuelo;\r\n        }else if (!celda.premio) {\r\n            _transfer(repartidor,celdaPadre.creador,3 * multiplicador);\r\n            celdaPadre.polenPositivos = celdaPadre.polenPositivos + ( 3 * multiplicador);\r\n        }\r\n        celdas[celdaPadre.fechaCreacion] = celdaPadre;\r\n    }\r\n\r\n    function getCelda(uint index) returns (address creador, uint polenPositivos, uint polenNegativos, uint fechaCreacion, \r\n                                            uint primeraPosicion, uint segundaPosicion, uint terceraPosicion,\r\n                                            uint cuartaPosicion, uint quintaPosicion, uint sextaPosicion, TiposCompartidos.TipoPremio tipo, bool premio) {\r\n        uint256 indexA = indiceCeldas[index];\r\n        TiposCompartidos.Celda memory  celda = celdas[indexA];\r\n        return (celda.creador,celda.polenPositivos,celda.polenNegativos,celda.fechaCreacion,\r\n        celda.primeraPosicion, celda.segundaPosicion, celda.terceraPosicion, celda.cuartaPosicion, \r\n        celda.quintaPosicion, celda.sextaPosicion, celda.tipo, celda.premio);\r\n    }\r\n\r\n    function getBalance(address addr) returns(uint) {\r\n\t\treturn balanceOf[addr];\r\n\t}\r\n\r\n    function getFechaTax() returns(uint) {\r\n        return fechaTax;\r\n    }\r\n\r\n    function getNumeroCeldas() returns(uint) {\r\n        return numeroCeldas;\r\n    }\r\n\r\n    function getOwner() returns(address) {\r\n        return owner;\r\n    }\r\n\r\n    function getRevenue(uint amount) onlyOwner {\r\n        owner.transfer(amount);\r\n    }\r\n\r\n    function sell(uint amount){\r\n        require(balanceOf[msg.sender] >= amount);         \r\n        _transfer(msg.sender, owner, amount);\r\n        uint revenue = amount * sellPrice;\r\n        if (msg.sender.send (revenue)) {                \r\n            Transfer(msg.sender, owner, revenue);  \r\n        }else {\r\n            _transfer(owner, msg.sender, amount);\r\n            TransferKO(msg.sender, this, revenue);\r\n        }                                   \r\n    }\r\n\r\n    function setFechaTax(uint _fechaTax) onlyOwner {\r\n        fechaTax = _fechaTax;\r\n    }\r\n\r\n    function setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner {\r\n        sellPrice = newSellPrice * 1 finney;\r\n        buyPrice = newBuyPrice * 1 finney;\r\n    }\r\n\r\n    function transfer(address _to, uint _value){\r\n        _transfer(msg.sender, _to, _value);\r\n        incluirUsuario(_to);\r\n    }\r\n\r\n    function _transfer(address _from, address _to, uint _value) internal {\r\n        require(_to != 0x0);                               // Prevent transfer to 0x0 address. Use burn() instead\r\n        require(balanceOf[_from] >= _value);                // Check if the sender has enough\r\n        require(balanceOf[_to] + _value > balanceOf[_to]); // Check for overflows\r\n        balanceOf[_from] = balanceOf[_from] - _value;                         \r\n        balanceOf[_to] = balanceOf[_to] + _value;                           \r\n        Transfer(_from, _to, _value);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_polenes\",\"type\":\"uint256\"},{\"name\":\"_fechaCreacion\",\"type\":\"uint256\"},{\"name\":\"posicion\",\"type\":\"uint256\"},{\"name\":\"_celdaPadre\",\"type\":\"uint256\"},{\"name\":\"_celdaAbuelo\",\"type\":\"uint256\"},{\"name\":\"tipo\",\"type\":\"uint8\"}],\"name\":\"crearCelda\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newSellPrice\",\"type\":\"uint256\"},{\"name\":\"newBuyPrice\",\"type\":\"uint256\"}],\"name\":\"setPrices\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getRevenue\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fechaTax\",\"type\":\"uint256\"}],\"name\":\"cobrarImpuesto\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buy\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getCelda\",\"outputs\":[{\"name\":\"creador\",\"type\":\"address\"},{\"name\":\"polenPositivos\",\"type\":\"uint256\"},{\"name\":\"polenNegativos\",\"type\":\"uint256\"},{\"name\":\"fechaCreacion\",\"type\":\"uint256\"},{\"name\":\"primeraPosicion\",\"type\":\"uint256\"},{\"name\":\"segundaPosicion\",\"type\":\"uint256\"},{\"name\":\"terceraPosicion\",\"type\":\"uint256\"},{\"name\":\"cuartaPosicion\",\"type\":\"uint256\"},{\"name\":\"quintaPosicion\",\"type\":\"uint256\"},{\"name\":\"sextaPosicion\",\"type\":\"uint256\"},{\"name\":\"tipo\",\"type\":\"uint8\"},{\"name\":\"premio\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"usuario\",\"type\":\"address\"}],\"name\":\"incluirUsuario\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getFechaTax\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fechaTax\",\"type\":\"uint256\"}],\"name\":\"setFechaTax\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getNumeroCeldas\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"initialSupply\",\"type\":\"uint256\"},{\"name\":\"newSellPrice\",\"type\":\"uint256\"},{\"name\":\"newBuyPrice\",\"type\":\"uint256\"},{\"name\":\"_fechaTax\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferKO\",\"type\":\"event\"}]","ContractName":"BeeGame","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000001dcd65000000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000001e0000000000000000000000000000000000000000000000000000015feb1bf980","Library":"","SwarmSource":"bzzr://1f508f1f0c3d90d5897858c46eb4aae94c8592044462ae79e8bc3dd03920632e"}]}