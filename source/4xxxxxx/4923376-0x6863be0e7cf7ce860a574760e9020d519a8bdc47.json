{"status":"1","message":"OK","result":[{"SourceCode":"/* solhint-disable no-simple-event-func-name */\r\n\r\npragma solidity 0.4.18;\r\n\r\n\r\n/*\r\n * https://github.com/OpenZeppelin/zeppelin-solidity\r\n *\r\n * The MIT License (MIT)\r\n * Copyright (c) 2016 Smart Contract Solutions, Inc.\r\n */\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\n/*\r\n * https://github.com/OpenZeppelin/zeppelin-solidity\r\n *\r\n * The MIT License (MIT)\r\n * Copyright (c) 2016 Smart Contract Solutions, Inc.\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    function Ownable() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n/*\r\n * https://github.com/OpenZeppelin/zeppelin-solidity\r\n *\r\n * The MIT License (MIT)\r\n * Copyright (c) 2016 Smart Contract Solutions, Inc.\r\n */\r\ncontract ERC20Basic {\r\n    uint256 public totalSupply;\r\n    function balanceOf(address who) public view returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\n/*\r\n * https://github.com/OpenZeppelin/zeppelin-solidity\r\n *\r\n * The MIT License (MIT)\r\n * Copyright (c) 2016 Smart Contract Solutions, Inc.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) internal balances;\r\n\r\n    /**\r\n    * @dev transfer token for a specified address\r\n    * @param _to The address to transfer to.\r\n    * @param _value The amount to be transferred.\r\n    */\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[msg.sender]);\r\n\r\n        // SafeMath.sub will throw if there is not enough balance.\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the balance of the specified address.\r\n    * @param _owner The address to query the the balance of.\r\n    * @return An uint256 representing the amount owned by the passed address.\r\n    */\r\n    function balanceOf(address _owner) public view returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title A token that can decrease its supply\r\n * @author Jakub Stefanski (https://github.com/jstefanski)\r\n *\r\n * https://github.com/OnLivePlatform/onlive-contracts\r\n *\r\n * The BSD 3-Clause Clear License\r\n * Copyright (c) 2018 OnLive LTD\r\n */\r\ncontract BurnableToken is BasicToken {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    /**\r\n     * @dev Address where burned tokens are Transferred.\r\n     * @dev This is useful for blockchain explorers operating on Transfer event.\r\n     */\r\n    address public constant BURN_ADDRESS = address(0x0);\r\n\r\n    /**\r\n     * @dev Tokens destroyed from specified address\r\n     * @param from address The burner\r\n     * @param amount uint256 The amount of destroyed tokens\r\n     */\r\n    event Burned(address indexed from, uint256 amount);\r\n\r\n    modifier onlyHolder(uint256 amount) {\r\n        require(balances[msg.sender] >= amount);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Destroy tokens (reduce total supply)\r\n     * @param amount uint256 The amount of tokens to be burned\r\n     */\r\n    function burn(uint256 amount)\r\n        public\r\n        onlyHolder(amount)\r\n    {\r\n        balances[msg.sender] = balances[msg.sender].sub(amount);\r\n        totalSupply = totalSupply.sub(amount);\r\n\r\n        Burned(msg.sender, amount);\r\n        Transfer(msg.sender, BURN_ADDRESS, amount);\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title A token with modifiable name and symbol\r\n * @author Jakub Stefanski (https://github.com/jstefanski)\r\n *\r\n * https://github.com/OnLivePlatform/onlive-contracts\r\n *\r\n * The BSD 3-Clause Clear License\r\n * Copyright (c) 2018 OnLive LTD\r\n */\r\ncontract DescriptiveToken is BasicToken, Ownable {\r\n\r\n    string public name;\r\n    string public symbol;\r\n    bool public isDescriptionFinalized;\r\n    uint256 public decimals = 18;\r\n\r\n    function DescriptiveToken(\r\n        string _name,\r\n        string _symbol\r\n    )\r\n        public\r\n        onlyNotEmpty(_name)\r\n        onlyNotEmpty(_symbol)\r\n    {\r\n        name = _name;\r\n        symbol = _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Logs change of token name and symbol\r\n     * @param name string The new token name\r\n     * @param symbol string The new token symbol\r\n     */\r\n    event DescriptionChanged(string name, string symbol);\r\n\r\n    /**\r\n     * @dev Further changes to name and symbol are forbidden\r\n     */\r\n    event DescriptionFinalized();\r\n\r\n    modifier onlyNotEmpty(string str) {\r\n        require(bytes(str).length > 0);\r\n        _;\r\n    }\r\n\r\n    modifier onlyDescriptionNotFinalized() {\r\n        require(!isDescriptionFinalized);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Change name and symbol of tokens\r\n     * @dev May be used in case of symbol collisions in exchanges.\r\n     * @param _name string A new token name\r\n     * @param _symbol string A new token symbol\r\n     */\r\n    function changeDescription(string _name, string _symbol)\r\n        public\r\n        onlyOwner\r\n        onlyDescriptionNotFinalized\r\n        onlyNotEmpty(_name)\r\n        onlyNotEmpty(_symbol)\r\n    {\r\n        name = _name;\r\n        symbol = _symbol;\r\n\r\n        DescriptionChanged(name, symbol);\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents further changes to name and symbol\r\n     */\r\n    function finalizeDescription()\r\n        public\r\n        onlyOwner\r\n        onlyDescriptionNotFinalized\r\n    {\r\n        isDescriptionFinalized = true;\r\n\r\n        DescriptionFinalized();\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title A token that can increase its supply in initial period\r\n * @author Jakub Stefanski (https://github.com/jstefanski)\r\n *\r\n * https://github.com/OnLivePlatform/onlive-contracts\r\n *\r\n * The BSD 3-Clause Clear License\r\n * Copyright (c) 2018 OnLive LTD\r\n */\r\ncontract MintableToken is BasicToken, Ownable {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    /**\r\n     * @dev Address from which minted tokens are Transferred.\r\n     * @dev This is useful for blockchain explorers operating on Transfer event.\r\n     */\r\n    address public constant MINT_ADDRESS = address(0x0);\r\n\r\n    /**\r\n     * @dev Indicates whether creating tokens has finished\r\n     */\r\n    bool public mintingFinished;\r\n\r\n    /**\r\n     * @dev Addresses allowed to create tokens\r\n     */\r\n    mapping (address => bool) public isMintingManager;\r\n\r\n    /**\r\n     * @dev Tokens minted to specified address\r\n     * @param to address The receiver of the tokens\r\n     * @param amount uint256 The amount of tokens\r\n     */\r\n    event Minted(address indexed to, uint256 amount);\r\n\r\n    /**\r\n     * @dev Approves specified address as a Minting Manager\r\n     * @param addr address The approved address\r\n     */\r\n    event MintingManagerApproved(address addr);\r\n\r\n    /**\r\n     * @dev Revokes specified address as a Minting Manager\r\n     * @param addr address The revoked address\r\n     */\r\n    event MintingManagerRevoked(address addr);\r\n\r\n    /**\r\n     * @dev Creation of tokens finished\r\n     */\r\n    event MintingFinished();\r\n\r\n    modifier onlyMintingManager(address addr) {\r\n        require(isMintingManager[addr]);\r\n        _;\r\n    }\r\n\r\n    modifier onlyMintingNotFinished {\r\n        require(!mintingFinished);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Approve specified address to mint tokens\r\n     * @param addr address The approved Minting Manager address\r\n     */\r\n    function approveMintingManager(address addr)\r\n        public\r\n        onlyOwner\r\n        onlyMintingNotFinished\r\n    {\r\n        isMintingManager[addr] = true;\r\n\r\n        MintingManagerApproved(addr);\r\n    }\r\n\r\n    /**\r\n     * @dev Forbid specified address to mint tokens\r\n     * @param addr address The denied Minting Manager address\r\n     */\r\n    function revokeMintingManager(address addr)\r\n        public\r\n        onlyOwner\r\n        onlyMintingManager(addr)\r\n        onlyMintingNotFinished\r\n    {\r\n        delete isMintingManager[addr];\r\n\r\n        MintingManagerRevoked(addr);\r\n    }\r\n\r\n    /**\r\n     * @dev Create new tokens and transfer them to specified address\r\n     * @param to address The address to transfer to\r\n     * @param amount uint256 The amount to be minted\r\n     */\r\n    function mint(address to, uint256 amount)\r\n        public\r\n        onlyMintingManager(msg.sender)\r\n        onlyMintingNotFinished\r\n    {\r\n        totalSupply = totalSupply.add(amount);\r\n        balances[to] = balances[to].add(amount);\r\n\r\n        Minted(to, amount);\r\n        Transfer(MINT_ADDRESS, to, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Prevent further creation of tokens\r\n     */\r\n    function finishMinting()\r\n        public\r\n        onlyOwner\r\n        onlyMintingNotFinished\r\n    {\r\n        mintingFinished = true;\r\n\r\n        MintingFinished();\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title A token that can increase its supply to the specified limit\r\n * @author Jakub Stefanski (https://github.com/jstefanski)\r\n *\r\n * https://github.com/OnLivePlatform/onlive-contracts\r\n *\r\n * The BSD 3-Clause Clear License\r\n * Copyright (c) 2018 OnLive LTD\r\n */\r\ncontract CappedMintableToken is MintableToken {\r\n\r\n    /**\r\n     * @dev Maximum supply that can be minted\r\n     */\r\n    uint256 public maxSupply;\r\n\r\n    function CappedMintableToken(uint256 _maxSupply)\r\n        public\r\n        onlyNotZero(_maxSupply)\r\n    {\r\n        maxSupply = _maxSupply;\r\n    }\r\n\r\n    modifier onlyNotZero(uint256 value) {\r\n        require(value != 0);\r\n        _;\r\n    }\r\n\r\n    modifier onlyNotExceedingMaxSupply(uint256 supply) {\r\n        require(supply <= maxSupply);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Create new tokens and transfer them to specified address\r\n     * @dev Checks against capped max supply of token.\r\n     * @param to address The address to transfer to\r\n     * @param amount uint256 The amount to be minted\r\n     */\r\n    function mint(address to, uint256 amount)\r\n        public\r\n        onlyNotExceedingMaxSupply(totalSupply.add(amount))\r\n    {\r\n        return MintableToken.mint(to, amount);\r\n    }\r\n}\r\n\r\n\r\n/*\r\n * https://github.com/OpenZeppelin/zeppelin-solidity\r\n *\r\n * The MIT License (MIT)\r\n * Copyright (c) 2016 Smart Contract Solutions, Inc.\r\n *\r\n * https://github.com/OnLivePlatform/onlive-contracts\r\n *\r\n * The BSD 3-Clause Clear License\r\n * Copyright (c) 2018 OnLive LTD\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n    function allowance(address owner, address spender) public view returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n/*\r\n * https://github.com/OpenZeppelin/zeppelin-solidity\r\n *\r\n * The MIT License (MIT)\r\n * Copyright (c) 2016 Smart Contract Solutions, Inc.\r\n *\r\n * https://github.com/OnLivePlatform/onlive-contracts\r\n *\r\n * The BSD 3-Clause Clear License\r\n * Copyright (c) 2018 OnLive LTD\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n    mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another\r\n     * @param _from address The address which you want to send tokens from\r\n     * @param _to address The address which you want to transfer to\r\n     * @param _value uint256 the amount of tokens to be transferred\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[_from]);\r\n        require(_value <= allowed[_from][msg.sender]);\r\n\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n     *\r\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _value The amount of tokens to be spent.\r\n     */\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n     * @param _owner address The address which owns the funds.\r\n     * @param _spender address The address which will spend the funds.\r\n     * @return A uint256 specifying the amount of tokens still available for the spender.\r\n     */\r\n    function allowance(address _owner, address _spender) public view returns (uint256) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    /**\r\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n     *\r\n     * approve should be called when allowed[_spender] == 0. To increment\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _addedValue The amount of tokens to increase the allowance by.\r\n     */\r\n    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n     *\r\n     * approve should be called when allowed[_spender] == 0. To decrement\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n     */\r\n    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n        uint oldValue = allowed[msg.sender][_spender];\r\n        if (_subtractedValue > oldValue) {\r\n            allowed[msg.sender][_spender] = 0;\r\n        } else {\r\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n        }\r\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20 token with manual initial lock up period\r\n * @author Jakub Stefanski (https://github.com/jstefanski)\r\n *\r\n * https://github.com/OnLivePlatform/onlive-contracts\r\n *\r\n * The BSD 3-Clause Clear License\r\n * Copyright (c) 2018 OnLive LTD\r\n */\r\ncontract ReleasableToken is StandardToken, Ownable {\r\n\r\n    /**\r\n     * @dev Controls whether token transfers are enabled\r\n     * @dev If false, token is in transfer lock up period.\r\n     */\r\n    bool public released;\r\n\r\n    /**\r\n     * @dev Contract or EOA that can enable token transfers\r\n     */\r\n    address public releaseManager;\r\n\r\n    /**\r\n     * @dev Map of addresses allowed to transfer tokens despite the lock up period\r\n     */\r\n    mapping (address => bool) public isTransferManager;\r\n\r\n    /**\r\n     * @dev Specified address set as a Release Manager\r\n     * @param addr address The approved address\r\n     */\r\n    event ReleaseManagerSet(address addr);\r\n\r\n    /**\r\n     * @dev Approves specified address as Transfer Manager\r\n     * @param addr address The approved address\r\n     */\r\n    event TransferManagerApproved(address addr);\r\n\r\n    /**\r\n     * @dev Revokes specified address as Transfer Manager\r\n     * @param addr address The denied address\r\n     */\r\n    event TransferManagerRevoked(address addr);\r\n\r\n    /**\r\n     * @dev Marks token as released (transferable)\r\n     */\r\n    event Released();\r\n\r\n    /**\r\n     * @dev Token is released or specified address is transfer manager\r\n     */\r\n    modifier onlyTransferableFrom(address from) {\r\n        if (!released) {\r\n            require(isTransferManager[from]);\r\n        }\r\n\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Specified address is transfer manager\r\n     */\r\n    modifier onlyTransferManager(address addr) {\r\n        require(isTransferManager[addr]);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Sender is release manager\r\n     */\r\n    modifier onlyReleaseManager() {\r\n        require(msg.sender == releaseManager);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Token is released (transferable)\r\n     */\r\n    modifier onlyReleased() {\r\n        require(released);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Token is in lock up period\r\n     */\r\n    modifier onlyNotReleased() {\r\n        require(!released);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Set release manager if token not released yet\r\n     * @param addr address The new Release Manager address\r\n     */\r\n    function setReleaseManager(address addr)\r\n        public\r\n        onlyOwner\r\n        onlyNotReleased\r\n    {\r\n        releaseManager = addr;\r\n\r\n        ReleaseManagerSet(addr);\r\n    }\r\n\r\n    /**\r\n     * @dev Approve specified address to make transfers in lock up period\r\n     * @param addr address The approved Transfer Manager address\r\n     */\r\n    function approveTransferManager(address addr)\r\n        public\r\n        onlyOwner\r\n        onlyNotReleased\r\n    {\r\n        isTransferManager[addr] = true;\r\n\r\n        TransferManagerApproved(addr);\r\n    }\r\n\r\n    /**\r\n     * @dev Forbid specified address to make transfers in lock up period\r\n     * @param addr address The denied Transfer Manager address\r\n     */\r\n    function revokeTransferManager(address addr)\r\n        public\r\n        onlyOwner\r\n        onlyTransferManager(addr)\r\n        onlyNotReleased\r\n    {\r\n        delete isTransferManager[addr];\r\n\r\n        TransferManagerRevoked(addr);\r\n    }\r\n\r\n    /**\r\n     * @dev Release token and makes it transferable\r\n     */\r\n    function release()\r\n        public\r\n        onlyReleaseManager\r\n        onlyNotReleased\r\n    {\r\n        released = true;\r\n\r\n        Released();\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer token to a specified address\r\n     * @dev Available only after token release\r\n     * @param to address The address to transfer to\r\n     * @param amount uint256 The amount to be transferred\r\n     */\r\n    function transfer(\r\n        address to,\r\n        uint256 amount\r\n    )\r\n        public\r\n        onlyTransferableFrom(msg.sender)\r\n        returns (bool)\r\n    {\r\n        return super.transfer(to, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another\r\n     * @dev Available only after token release\r\n     * @param from address The address which you want to send tokens from\r\n     * @param to address The address which you want to transfer to\r\n     * @param amount uint256 the amount of tokens to be transferred\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    )\r\n        public\r\n        onlyTransferableFrom(from)\r\n        returns (bool)\r\n    {\r\n        return super.transferFrom(from, to, amount);\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title OnLive Token\r\n * @author Jakub Stefanski (https://github.com/jstefanski)\r\n * @dev Implements ERC20 interface\r\n * @dev Mintable by selected addresses until sale finishes\r\n * @dev A cap on total supply of tokens\r\n * @dev Burnable by anyone\r\n * @dev Manual lock-up period (non-transferable) with a non-reversible release by the selected address\r\n * @dev Modifiable symbol and name in case of collision\r\n *\r\n * https://github.com/OnLivePlatform/onlive-contracts\r\n *\r\n * The BSD 3-Clause Clear License\r\n * Copyright (c) 2018 OnLive LTD\r\n */\r\ncontract OnLiveToken is DescriptiveToken, ReleasableToken, CappedMintableToken, BurnableToken {\r\n\r\n    function OnLiveToken(\r\n        string _name,\r\n        string _symbol,\r\n        uint256 _maxSupply\r\n    )\r\n        public\r\n        DescriptiveToken(_name, _symbol)\r\n        CappedMintableToken(_maxSupply)\r\n    {\r\n        owner = msg.sender;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"releaseManager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"approveTransferManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MINT_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"approveMintingManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"revokeMintingManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setReleaseManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"revokeTransferManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"release\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"released\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isDescriptionFinalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"changeDescription\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isTransferManager\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isMintingManager\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalizeDescription\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BURN_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_maxSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Burned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Minted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"MintingManagerApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"MintingManagerRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintingFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"ReleaseManagerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"TransferManagerApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"TransferManagerRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Released\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"DescriptionChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"DescriptionFinalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"OnLiveToken","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000005bd12a0eaadb08cf000000000000000000000000000000000000000000000000000000000000000000000c4f6e4c69766520546f6b656e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034f4e4c0000000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://55e49db4b0910c823ab2d74d0e52056c9974f51a0727e35a7ee0566b8407a628"}]}