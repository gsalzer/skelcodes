{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.15;\r\n\r\ncontract ELTCoinToken {\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  function balanceOf(address who) public constant returns (uint256);\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Crowdsale\r\n * @dev Crowdsale is a base contract for managing a token crowdsale.\r\n * Crowdsales have a end timestamp, where investors can make\r\n * token purchases and the crowdsale will assign them tokens based\r\n * on a token per ETH rate. Funds collected are forwarded to a wallet\r\n * as they arrive.\r\n */\r\ncontract Crowdsale {\r\n  using SafeMath for uint256;\r\n\r\n  uint256 public constant RATE_CHANGE_THRESHOLD = 30000000000000;\r\n\r\n  // The token being sold\r\n  ELTCoinToken public token;\r\n\r\n  // end timestamp where investments are allowed (both inclusive)\r\n  uint256 public endTime;\r\n\r\n  // address where funds are collected\r\n  address public wallet;\r\n\r\n  // how many wei for a token unit\r\n  uint256 public startRate;\r\n\r\n  // current rate\r\n  uint256 public currentRate;\r\n\r\n  // maximum rate\r\n  uint256 public maxRate;\r\n\r\n  // the minimum transaction threshold in wei\r\n  uint256 public minThreshold;\r\n\r\n  // amount of raised money in wei\r\n  uint256 public weiRaised;\r\n\r\n  // amount of tokens sold\r\n  uint256 public tokensSold;\r\n\r\n  /**\r\n   * event for token purchase logging\r\n   * @param purchaser who paid for the tokens\r\n   * @param beneficiary who got the tokens\r\n   * @param value weis paid for purchase\r\n   * @param amount amount of tokens purchased\r\n   */\r\n  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n\r\n  event WeiTransfer(address indexed receiver, uint256 amount);\r\n\r\n  function Crowdsale(\r\n    address _contractAddress, uint256 _endTime, uint256 _startRate, uint256 _minThreshold, address _wallet) {\r\n    // require(_endTime >= now);\r\n    require(_wallet != 0x0);\r\n\r\n    token = ELTCoinToken(_contractAddress);\r\n    endTime = _endTime;\r\n    startRate = _startRate;\r\n    currentRate = _startRate;\r\n    maxRate = startRate.mul(10);\r\n    wallet = _wallet;\r\n    minThreshold = _minThreshold;\r\n  }\r\n\r\n  // fallback function can be used to buy tokens\r\n  function () payable {\r\n    buyTokens(msg.sender);\r\n  }\r\n\r\n  // low level token purchase function\r\n  function buyTokens(address beneficiary) public payable {\r\n    require(beneficiary != 0x0);\r\n    require(validPurchase());\r\n\r\n    uint256 weiAmount = msg.value;\r\n\r\n    require(weiAmount >= minThreshold);\r\n\r\n    uint256 weiToAllocate = weiAmount;\r\n\r\n    uint256 tokensTotal = 0;\r\n\r\n    while (weiToAllocate > 0) {\r\n      currentRate = tokensSold.div(RATE_CHANGE_THRESHOLD).mul(startRate).add(startRate);\r\n\r\n      if (currentRate > maxRate) {\r\n        currentRate = maxRate;\r\n      }\r\n\r\n      // Round to an integer number of tokens\r\n      weiToAllocate = weiToAllocate.sub(weiToAllocate % currentRate);\r\n\r\n      uint256 remainingTokens = RATE_CHANGE_THRESHOLD.sub(tokensSold % RATE_CHANGE_THRESHOLD);\r\n\r\n      uint256 tokens = weiToAllocate.div(currentRate) > remainingTokens ? remainingTokens : weiToAllocate.div(currentRate);\r\n\r\n      tokensTotal = tokensTotal.add(tokens);\r\n      tokensSold = tokensSold.add(tokens);\r\n\r\n      weiToAllocate = weiToAllocate.sub(tokens.mul(currentRate));\r\n    }\r\n\r\n    weiRaised = weiRaised.add(weiAmount);\r\n\r\n    require(token.transfer(beneficiary, tokensTotal));\r\n\r\n    TokenPurchase(msg.sender, beneficiary, weiAmount, tokensTotal);\r\n\r\n    forwardFunds(weiAmount);\r\n  }\r\n\r\n  function forwardFunds(uint256 amount) internal {\r\n    wallet.transfer(amount);\r\n    WeiTransfer(wallet, amount);\r\n  }\r\n\r\n  // @return true if the transaction can buy tokens\r\n  function validPurchase() internal returns (bool) {\r\n    bool withinPeriod = now <= endTime;\r\n    bool nonZeroPurchase = msg.value != 0;\r\n    return withinPeriod && nonZeroPurchase;\r\n  }\r\n\r\n  // @return true if crowdsale event has ended\r\n  function hasEnded() public constant returns (bool) {\r\n    return now > endTime;\r\n  }\r\n}\r\n\r\n/**\r\n * @title IndividualCappedCrowdsale\r\n * @dev Extension of Crowdsale with an individual cap\r\n */\r\ncontract IndividualCappedCrowdsale is Crowdsale {\r\n  using SafeMath for uint256;\r\n\r\n  uint public constant GAS_LIMIT_IN_WEI = 50000000000 wei;\r\n\r\n  // The maximum wei amount a user can spend during this sale\r\n  uint256 public capPerAddress;\r\n\r\n  mapping(address=>uint) public participated;\r\n\r\n  function IndividualCappedCrowdsale(uint256 _capPerAddress) {\r\n    // require(capPerAddress > 0);\r\n    capPerAddress = _capPerAddress;\r\n  }\r\n\r\n  /**\r\n    * @dev overriding CappedCrowdsale#validPurchase to add an individual cap\r\n    * @return true if investors can buy at the moment\r\n    */\r\n  function validPurchase() internal returns (bool) {\r\n    require(tx.gasprice <= GAS_LIMIT_IN_WEI);\r\n    participated[msg.sender] = participated[msg.sender].add(msg.value);\r\n    return super.validPurchase() && participated[msg.sender] <= capPerAddress;\r\n  }\r\n}\r\n\r\n/**\r\n * @title CappedCrowdsale\r\n * @dev Extension of Crowdsale with a max amount of funds raised\r\n */\r\ncontract CappedCrowdsale is Crowdsale {\r\n  using SafeMath for uint256;\r\n\r\n  uint256 public cap;\r\n\r\n  function CappedCrowdsale(uint256 _cap) {\r\n    require(_cap > 0);\r\n    cap = _cap;\r\n  }\r\n\r\n  // overriding Crowdsale#validPurchase to add extra cap logic\r\n  // @return true if investors can buy at the moment\r\n  function validPurchase() internal returns (bool) {\r\n    bool withinCap = weiRaised.add(msg.value) <= cap;\r\n    return super.validPurchase() && withinCap;\r\n  }\r\n}\r\n\r\ncontract ELTCoinCrowdsale is Ownable, CappedCrowdsale, IndividualCappedCrowdsale {\r\n  function ELTCoinCrowdsale(address _coinAddress, uint256 _endTime, uint256 _rate, uint256 _cap, uint256 _minThreshold, uint256 _capPerAddress, address _wallet)\r\n    IndividualCappedCrowdsale(_capPerAddress)\r\n    CappedCrowdsale(_cap)\r\n    Crowdsale(_coinAddress, _endTime, _rate, _minThreshold, _wallet)\r\n  {\r\n\r\n  }\r\n\r\n  /**\r\n  * @dev Transfer the unsold tokens to the owner main wallet\r\n  * @dev Only for owner\r\n  */\r\n  function drainRemainingToken ()\r\n    public\r\n    onlyOwner\r\n  {\r\n      require(hasEnded());\r\n      token.transfer(owner, token.balanceOf(this));\r\n  }\r\n\r\n  function setMaxRate(uint256 _maxRate) public onlyOwner {\r\n    maxRate = _maxRate;\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"startRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RATE_CHANGE_THRESHOLD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"drainRemainingToken\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GAS_LIMIT_IN_WEI\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"capPerAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_maxRate\",\"type\":\"uint256\"}],\"name\":\"setMaxRate\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"participated\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minThreshold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_coinAddress\",\"type\":\"address\"},{\"name\":\"_endTime\",\"type\":\"uint256\"},{\"name\":\"_rate\",\"type\":\"uint256\"},{\"name\":\"_cap\",\"type\":\"uint256\"},{\"name\":\"_minThreshold\",\"type\":\"uint256\"},{\"name\":\"_capPerAddress\",\"type\":\"uint256\"},{\"name\":\"_wallet\",\"type\":\"address\"}],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WeiTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"ELTCoinCrowdsale","CompilerVersion":"v0.4.15+commit.bbb8e64f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000044197a4c44d6a059297caf6be4f7e172bd56caaf0000000000000000000000000000000000000000000000000000000059f4c2c7000000000000000000000000000000000000000000000000000000000004e20000000000000000000000000000000000000000000000003635c9adc5dea00000000000000000000000000000000000000000000000000000016345785d8a00000000000000000000000000000000000000000000000000056bc75e2d63100000000000000000000000000000dcbd3b5605a525f12819958e0cb02941c539eab6","Library":"","SwarmSource":"bzzr://8660fbccc2c285ddfa413a3b0ed7f1f8ef9c3f7619c2dc0b730e4493920f95b6"}]}