{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.17;\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Ownable {\r\n\r\n    //Variables\r\n    address public owner;\r\n\r\n    address public newOwner;\r\n\r\n    //    Modifiers\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    function Ownable() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param _newOwner The address to transfer ownership to.\r\n     */\r\n\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        require(_newOwner != address(0));\r\n        newOwner = _newOwner;\r\n    }\r\n\r\n    function acceptOwnership() public {\r\n        if (msg.sender == newOwner) {\r\n            owner = newOwner;\r\n        }\r\n    }\r\n}\r\n\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public constant returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) balances;\r\n\r\n    /**\r\n    * @dev transfer token for a specified address\r\n    * @param _to The address to transfer to.\r\n    * @param _value The amount to be transferred.\r\n    */\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[msg.sender]);\r\n\r\n        // SafeMath.sub will throw if there is not enough balance.\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the balance of the specified address.\r\n    * @param _owner The address to query the the balance of.\r\n    * @return An uint256 representing the amount owned by the passed address.\r\n    */\r\n    function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n}\r\n\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   */\r\n  function increaseApproval (address _spender, uint _addedValue) public returns (bool success) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  function decreaseApproval (address _spender, uint _subtractedValue) public returns (bool success) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n\r\ncontract MintableToken is StandardToken, Ownable {\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\r\n    totalSupply = totalSupply.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    Mint(_to, _amount);\r\n    Transfer(0x0, _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() onlyOwner public returns (bool) {\r\n    mintingFinished = true;\r\n    MintFinished();\r\n    return true;\r\n  }\r\n}\r\n\r\n\r\ncontract LamdenTau is MintableToken {\r\n    string public constant name = \"Lamden Tau\";\r\n    string public constant symbol = \"TAU\";\r\n    uint8 public constant decimals = 18;\r\n\r\n    // locks transfers until minting is over, which ends at the end of the sale\r\n    // thus, the behavior of this token is locked transfers during sale, and unlocked after :)\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n      require(mintingFinished);\r\n      bool success = super.transfer(_to, _value);\r\n      return success;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n      require(mintingFinished);\r\n      bool success = super.transferFrom(_from, _to, _value);\r\n      return success;\r\n    }\r\n}\r\n\r\ncontract Crowdsale {\r\n  using SafeMath for uint256;\r\n\r\n  // The token being sold\r\n  MintableToken public token;\r\n\r\n  // start and end timestamps where investments are allowed (both inclusive)\r\n  uint256 public startTime;\r\n  uint256 public endTime;\r\n\r\n  // address where funds are collected\r\n  address public wallet;\r\n\r\n  // how many token units a buyer gets per wei\r\n  uint256 public rate;\r\n\r\n  // amount of raised money in wei\r\n  uint256 public weiRaised;\r\n\r\n  /**\r\n   * event for token purchase logging\r\n   * @param purchaser who paid for the tokens\r\n   * @param beneficiary who got the tokens\r\n   * @param value weis paid for purchase\r\n   * @param amount amount of tokens purchased\r\n   */\r\n  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n\r\n\r\n  function Crowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet) {\r\n    require(_startTime >= now);\r\n    require(_endTime >= _startTime);\r\n    require(_rate > 0);\r\n    require(_wallet != 0x0);\r\n\r\n    token = createTokenContract();\r\n    startTime = _startTime;\r\n    endTime = _endTime;\r\n    rate = _rate;\r\n    wallet = _wallet;\r\n  }\r\n\r\n  // creates the token to be sold.\r\n  // override this method to have crowdsale of a specific mintable token.\r\n  function createTokenContract() internal returns (MintableToken) {\r\n    return new MintableToken();\r\n  }\r\n\r\n\r\n  // fallback function can be used to buy tokens\r\n  function () payable {\r\n    buyTokens(msg.sender);\r\n  }\r\n\r\n  // low level token purchase function\r\n  function buyTokens(address beneficiary) public payable {\r\n    require(beneficiary != 0x0);\r\n    require(validPurchase());\r\n\r\n    uint256 weiAmount = msg.value;\r\n\r\n    // calculate token amount to be created\r\n    uint256 tokens = weiAmount.mul(rate);\r\n\r\n    // update state\r\n    weiRaised = weiRaised.add(weiAmount);\r\n\r\n    token.mint(beneficiary, tokens);\r\n    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\r\n\r\n    forwardFunds();\r\n  }\r\n\r\n  // send ether to the fund collection wallet\r\n  // override to create custom fund forwarding mechanisms\r\n  function forwardFunds() internal {\r\n    wallet.transfer(msg.value);\r\n  }\r\n\r\n  // @return true if the transaction can buy tokens\r\n  function validPurchase() internal constant returns (bool) {\r\n    bool withinPeriod = now >= startTime && now <= endTime;\r\n    bool nonZeroPurchase = msg.value != 0;\r\n    return withinPeriod && nonZeroPurchase;\r\n  }\r\n\r\n  // @return true if crowdsale event has ended\r\n  function hasEnded() public constant returns (bool) {\r\n    return now > endTime;\r\n  }\r\n\r\n\r\n}\r\n\r\ncontract CappedCrowdsale is Crowdsale {\r\n  using SafeMath for uint256;\r\n\r\n  uint256 public cap;\r\n\r\n  function CappedCrowdsale(uint256 _cap) {\r\n    require(_cap > 0);\r\n    cap = _cap;\r\n  }\r\n\r\n  // overriding Crowdsale#validPurchase to add extra cap logic\r\n  // @return true if investors can buy at the moment\r\n  function validPurchase() internal constant returns (bool) {\r\n    bool withinCap = weiRaised.add(msg.value) <= cap;\r\n    return super.validPurchase() && withinCap;\r\n  }\r\n\r\n  // overriding Crowdsale#hasEnded to add cap logic\r\n  // @return true if crowdsale event has ended\r\n  function hasEnded() public constant returns (bool) {\r\n    bool capReached = weiRaised >= cap;\r\n    return super.hasEnded() || capReached;\r\n  }\r\n\r\n}\r\n\r\n\r\ncontract Presale is CappedCrowdsale, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => bool) public whitelist;\r\n\r\n    bool public isFinalized = false;\r\n    event Finalized();\r\n    \r\n    address public team = 0x7D72dc07876435d3B2eE498E53A803958bc55b42;\r\n    uint256 public teamShare = 150000000 * (10 ** 18);\r\n    \r\n    address public seed = 0x3669ad54675E94e14196528786645c858b8391F1;\r\n    uint256 public seedShare = 1805067 * (10 ** 18);\r\n\r\n    bool public hasAllocated = false;\r\n\r\n    address public mediator = 0x0;\r\n    \r\n    function Presale(uint256 _startTime, uint256 _endTime, uint256 _rate, uint256 _cap, address _wallet, address _tokenAddress) \r\n    Crowdsale(_startTime, _endTime, _rate, _wallet)\r\n    CappedCrowdsale(_cap)\r\n    {\r\n        token = LamdenTau(_tokenAddress);\r\n    }\r\n    \r\n    // Crowdsale overrides\r\n    function createTokenContract() internal returns (MintableToken) {\r\n        return LamdenTau(0x0);\r\n    }\r\n\r\n    function validPurchase() internal constant returns (bool) {\r\n        bool withinCap = weiRaised.add(msg.value) <= cap;\r\n        bool valid = super.validPurchase() && withinCap && whitelist[msg.sender];\r\n        return valid;\r\n    }\r\n    // * * *\r\n    \r\n    // Finalizer functions. Redefined from FinalizableCrowdsale to prevent diamond inheritence complexities\r\n    \r\n    function finalize() onlyOwner public {\r\n      require(mediator != 0x0);\r\n      require(!isFinalized);\r\n      require(hasEnded());\r\n      \r\n      finalization();\r\n      Finalized();\r\n\r\n      isFinalized = true;\r\n    }\r\n    \r\n    function finalization() internal {\r\n        // set the ownership to the mediator so it can pass it onto the sale contract\r\n        // at the time that the sale contract is deployed\r\n        token.transferOwnership(mediator);\r\n        Mediator m = Mediator(mediator);\r\n        m.acceptToken();\r\n    }\r\n    // * * * \r\n\r\n    // Contract Specific functions\r\n    function assignMediator(address _m) public onlyOwner returns(bool) {\r\n        mediator = _m;\r\n        return true;\r\n    }\r\n    \r\n    function whitelistUser(address _a) public onlyOwner returns(bool){\r\n        whitelist[_a] = true;\r\n        return whitelist[_a];\r\n    }\r\n\r\n    function whitelistUsers(address[] users) external onlyOwner {\r\n        for (uint i = 0; i < users.length; i++) {\r\n            whitelist[users[i]] = true;\r\n        }\r\n    }\r\n\r\n    function unWhitelistUser(address _a) public onlyOwner returns(bool){\r\n        whitelist[_a] = false;\r\n        return whitelist[_a];\r\n    }\r\n\r\n    function unWhitelistUsers(address[] users) external onlyOwner {\r\n        for (uint i = 0; i < users.length; i++) {\r\n            whitelist[users[i]] = false;\r\n        }\r\n    }\r\n    \r\n    function allocateTokens() public onlyOwner returns(bool) {\r\n        require(hasAllocated == false);\r\n        token.mint(team, teamShare);\r\n        token.mint(seed, seedShare);\r\n        hasAllocated = true;\r\n        return hasAllocated;\r\n    }\r\n    \r\n    function acceptToken() public onlyOwner returns(bool) {\r\n        token.acceptOwnership();\r\n        return true;\r\n    }\r\n\r\n    function changeEndTime(uint256 _e) public onlyOwner returns(uint256) {\r\n        require(_e > startTime);\r\n        endTime = _e;\r\n        return endTime;\r\n    }\r\n    \r\n    // * * *\r\n}\r\n\r\ncontract Sale is CappedCrowdsale, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    // Initialization Variables\r\n    uint256 public amountPerDay; // 30 eth\r\n    uint256 public constant UNIX_DAY = 86400;\r\n\r\n    bool public isFinalized = false;\r\n    event Finalized();\r\n\r\n    mapping (address => bool) public whitelist;\r\n    mapping (address => uint256) public amountContributedBy;\r\n    // * * *\r\n\r\n    // Constructor\r\n    function Sale(uint256 _startTime, uint256 _endTime, uint256 _rate, uint256 _cap, address _wallet, uint256 _amountPerDay, address _tokenAddress)\r\n    Crowdsale(_startTime, _endTime, _rate, _wallet)\r\n    CappedCrowdsale(_cap)\r\n    {\r\n        amountPerDay = _amountPerDay;\r\n        token = LamdenTau(_tokenAddress);\r\n    }\r\n    // * * *\r\n    \r\n    // Crowdsale overrides\r\n    function createTokenContract() internal returns (MintableToken) {\r\n        return LamdenTau(0x0);\r\n    }\r\n    \r\n    function validPurchase() internal constant returns (bool) {\r\n        bool withinCap = weiRaised.add(msg.value) <= cap;\r\n        bool withinContributionLimit = msg.value <= currentPersonalLimit(msg.sender);\r\n        bool valid = super.validPurchase() && withinCap && whitelist[msg.sender] && withinContributionLimit;\r\n        return valid;\r\n    }\r\n\r\n    function buyTokens(address beneficiary) public payable {\r\n        super.buyTokens(beneficiary);\r\n        amountContributedBy[msg.sender] = amountContributedBy[msg.sender].add(msg.value);\r\n    }\r\n    // * * *\r\n\r\n    // Finalizer functions\r\n    function finalize() onlyOwner public {\r\n      require(!isFinalized);\r\n      require(hasEnded());\r\n\r\n      finalization();\r\n      Finalized();\r\n\r\n      isFinalized = true;\r\n    }\r\n    \r\n    function finalization() internal {\r\n        token.finishMinting();\r\n    }\r\n    // * * * \r\n    \r\n    // Contract Specific functions\r\n    function daysSinceLaunch() public constant returns(uint256) {\r\n        return now.sub(startTime).div(UNIX_DAY);\r\n    }\r\n    \r\n    function currentContributionLimit() public constant returns(uint256) {\r\n        return amountPerDay.mul(2 ** daysSinceLaunch());\r\n    }\r\n    \r\n    function currentPersonalLimit(address _a) public constant returns(uint256) {\r\n        return currentContributionLimit().sub(amountContributedBy[_a]);\r\n    }\r\n    \r\n    function claimToken(address _m) public onlyOwner returns(bool) {\r\n        Mediator m = Mediator(_m);\r\n        m.passOff();\r\n        token.acceptOwnership();\r\n        return true;\r\n    }\r\n    \r\n    function whitelistUser(address _a) onlyOwner public returns(bool) {\r\n        whitelist[_a] = true;\r\n        return whitelist[_a];\r\n    }\r\n    \r\n    function whitelistUsers(address[] users) external onlyOwner {\r\n        for (uint i = 0; i < users.length; i++) {\r\n            whitelist[users[i]] = true;\r\n        }\r\n    }\r\n\r\n    function unWhitelistUser(address _a) public onlyOwner returns(bool){\r\n        whitelist[_a] = false;\r\n        return whitelist[_a];\r\n    }\r\n\r\n    function unWhitelistUsers(address[] users) external onlyOwner {\r\n        for (uint i = 0; i < users.length; i++) {\r\n            whitelist[users[i]] = false;\r\n        }\r\n    }\r\n\r\n    function changeEndTime(uint256 _e) public onlyOwner returns(uint256) {\r\n        require(_e > startTime);\r\n        endTime = _e;\r\n        return endTime;\r\n    }\r\n    // * * *\r\n}\r\n\r\n\r\ncontract Mediator is Ownable {\r\n    address public presale;\r\n    LamdenTau public tau;\r\n    address public sale;\r\n    \r\n    function setPresale(address p) public onlyOwner { presale = p; }\r\n    function setTau(address t) public onlyOwner { tau = LamdenTau(t); }\r\n    function setSale(address s) public onlyOwner { sale = s; }\r\n    \r\n    modifier onlyPresale {\r\n        require(msg.sender == presale);\r\n        _;\r\n    }\r\n    \r\n    modifier onlySale {\r\n        require(msg.sender == sale);\r\n        _;\r\n    }\r\n    \r\n    function acceptToken() public onlyPresale { tau.acceptOwnership(); }\r\n    function passOff() public onlySale { tau.transferOwnership(sale); }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"allocateTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_a\",\"type\":\"address\"}],\"name\":\"unWhitelistUser\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_e\",\"type\":\"uint256\"}],\"name\":\"changeEndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_a\",\"type\":\"address\"}],\"name\":\"whitelistUser\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasAllocated\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mediator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"users\",\"type\":\"address[]\"}],\"name\":\"unWhitelistUsers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"seed\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"team\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isFinalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_m\",\"type\":\"address\"}],\"name\":\"assignMediator\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"seedShare\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamShare\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"users\",\"type\":\"address[]\"}],\"name\":\"whitelistUsers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_startTime\",\"type\":\"uint256\"},{\"name\":\"_endTime\",\"type\":\"uint256\"},{\"name\":\"_rate\",\"type\":\"uint256\"},{\"name\":\"_cap\",\"type\":\"uint256\"},{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Finalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"}]","ContractName":"Presale","CompilerVersion":"v0.4.17+commit.bdeb9e52","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000059f5d7d8000000000000000000000000000000000000000000000000000000005a4979ff0000000000000000000000000000000000000000000000000001224ea8981ecb0000000000000000000000000000000000000000002d90bc59a3e4050788000000000000000000000000000019f36cafa41492d82c5d688b2502f704f87c9df90000000000000000000000003fe8a1cdbb598f2c9169fd0a216607b4dcb09888","Library":"","SwarmSource":"bzzr://fe61060f479015f88f84fd83293fdbc8a757fe73f6b4e3ad9f2be3141d07dafb"}]}