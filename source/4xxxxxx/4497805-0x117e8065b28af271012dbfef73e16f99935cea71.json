{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n    \r\n    \r\n    /**\r\n    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n    * account.\r\n    */\r\n    function Ownable() public {\r\n        owner = msg.sender;\r\n    }\r\n    \r\n    \r\n    /**\r\n    * @dev Throws if called by any account other than the owner.\r\n    */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    \r\n    \r\n    /**\r\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n    * @param newOwner The address to transfer ownership to.\r\n    */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        if (newOwner != address(0)) {\r\n            owner = newOwner;\r\n        }\r\n    }\r\n\r\n}\r\n\r\ncontract Escrow is Ownable {\r\n    \r\n    enum DealState { Empty, Created, InProgress, InTrial, Finished }\r\n    enum Answer { NotDefined, Yes, No }\r\n    \r\n    struct Deal {\r\n        address customer;\r\n        address beneficiary;\r\n        address agent;\r\n        \r\n        uint256 value;\r\n        uint256 commission;\r\n        \r\n        uint256 endtime;\r\n        \r\n        bool customerAns;\r\n        bool beneficiaryAns;\r\n        \r\n        DealState state;\r\n    }\r\n    \r\n    mapping (uint256 => Deal) public deals;\r\n    uint256 lastDealId;\r\n    \r\n    function createNew(address _customer, address _beneficiary, address _agent,\r\n                        uint256 _value, uint256 _commision, uint256 _endtime) public onlyOwner returns (uint256) {\r\n        uint256 dealId = lastDealId + 1;\r\n        deals[dealId] = Deal(_customer, _beneficiary, _agent, _value, _commision, _endtime, false, false, DealState.Created);\r\n        lastDealId++;\r\n        return dealId;\r\n    }\r\n    \r\n    function pledge(uint256 _dealId) public payable {\r\n        require(msg.value == (deals[_dealId].value + deals[_dealId].commission));\r\n        deals[_dealId].state = DealState.InProgress;\r\n    }\r\n    \r\n    modifier onlyAgent(uint256 _dealId) {\r\n        require(msg.sender == deals[_dealId].agent);\r\n        _;\r\n    }\r\n    \r\n    /**\r\n     * @dev Сonfirm that the customer conditions are met\r\n     */\r\n    function confirmCustomer(uint256 _dealId) public {\r\n        require(msg.sender == deals[_dealId].customer);\r\n        deals[_dealId].customerAns = true;\r\n    }\r\n    \r\n    /**\r\n     * @dev Сonfirm that the beneficiary conditions are met\r\n     */\r\n    function confirmBeneficiary(uint256 _dealId) public {\r\n        require(msg.sender == deals[_dealId].beneficiary);\r\n        deals[_dealId].beneficiaryAns = true;\r\n    }\r\n    \r\n    /**\r\n     * @dev Check participants answers and change deal state\r\n     */\r\n    function finishDeal(uint256 _dealId) public onlyOwner {\r\n        require(deals[_dealId].state == DealState.InProgress);\r\n        if (deals[_dealId].customerAns && deals[_dealId].beneficiaryAns) {\r\n            deals[_dealId].beneficiary.transfer(deals[_dealId].value);\r\n            deals[_dealId].agent.transfer(deals[_dealId].commission);\r\n            deals[_dealId].state = DealState.Finished;\r\n        } else {\r\n            require(now >= deals[_dealId].endtime);\r\n            deals[_dealId].state = DealState.InTrial;\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * @dev Return money to customer\r\n     */\r\n    function dealRevert(uint256 _dealId) public onlyAgent(_dealId) {\r\n        require(deals[_dealId].state == DealState.InTrial);\r\n        deals[_dealId].customer.transfer(deals[_dealId].value);\r\n        deals[_dealId].agent.transfer(deals[_dealId].commission);\r\n        deals[_dealId].state = DealState.Finished;\r\n    }\r\n    \r\n    /**\r\n     * @dev Confirm deal completed and transfer money to beneficiary\r\n     */\r\n    function dealConfirm(uint256 _dealId) public onlyAgent(_dealId) {\r\n        require(deals[_dealId].state == DealState.InTrial);\r\n        deals[_dealId].beneficiary.transfer(deals[_dealId].value);\r\n        deals[_dealId].agent.transfer(deals[_dealId].commission);\r\n        deals[_dealId].state = DealState.Finished;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"deals\",\"outputs\":[{\"name\":\"customer\",\"type\":\"address\"},{\"name\":\"beneficiary\",\"type\":\"address\"},{\"name\":\"agent\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"commission\",\"type\":\"uint256\"},{\"name\":\"endtime\",\"type\":\"uint256\"},{\"name\":\"customerAns\",\"type\":\"bool\"},{\"name\":\"beneficiaryAns\",\"type\":\"bool\"},{\"name\":\"state\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_dealId\",\"type\":\"uint256\"}],\"name\":\"dealRevert\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_dealId\",\"type\":\"uint256\"}],\"name\":\"pledge\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_dealId\",\"type\":\"uint256\"}],\"name\":\"confirmBeneficiary\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_dealId\",\"type\":\"uint256\"}],\"name\":\"finishDeal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_dealId\",\"type\":\"uint256\"}],\"name\":\"confirmCustomer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_dealId\",\"type\":\"uint256\"}],\"name\":\"dealConfirm\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_customer\",\"type\":\"address\"},{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_agent\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_commision\",\"type\":\"uint256\"},{\"name\":\"_endtime\",\"type\":\"uint256\"}],\"name\":\"createNew\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Escrow","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://903b41cd4b28fe8a496e5fb82020442762ebc10ea0acb5359784fd5ccaf229b9"}]}