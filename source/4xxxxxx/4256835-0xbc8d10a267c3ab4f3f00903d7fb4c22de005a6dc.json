{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.12;\r\n\r\n//======  OpenZeppelin libraray =====\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) constant returns (uint256);\r\n  function transfer(address to, uint256 value) returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) returns (bool);\r\n  function approve(address spender, uint256 value) returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\r\n    assert(token.transfer(to, value));\r\n  }\r\n\r\n  function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\r\n    assert(token.transferFrom(from, to, value));\r\n  }\r\n\r\n  function safeApprove(ERC20 token, address spender, uint256 value) internal {\r\n    assert(token.approve(spender, value));\r\n  }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner {\r\n    require(newOwner != address(0));      \r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n/** \r\n * @title Contracts that should not own Contracts\r\n * @author Remco Bloemen <remco@2π.com>\r\n * @dev Should contracts (anything Ownable) end up being owned by this contract, it allows the owner\r\n * of this contract to reclaim ownership of the contracts.\r\n */\r\ncontract HasNoContracts is Ownable {\r\n\r\n  /**\r\n   * @dev Reclaim ownership of Ownable contracts\r\n   * @param contractAddr The address of the Ownable to be reclaimed.\r\n   */\r\n  function reclaimContract(address contractAddr) external onlyOwner {\r\n    Ownable contractInst = Ownable(contractAddr);\r\n    contractInst.transferOwnership(owner);\r\n  }\r\n}\r\n\r\n/**\r\n * @title Contracts that should be able to recover tokens\r\n * @author SylTi\r\n * @dev This allow a contract to recover any ERC20 token received in a contract by transfering the balance to the contract owner.\r\n * This will prevent any accidental loss of tokens.\r\n */\r\ncontract CanReclaimToken is Ownable {\r\n  using SafeERC20 for ERC20Basic;\r\n\r\n  /**\r\n   * @dev Reclaim all ERC20Basic compatible tokens\r\n   * @param token ERC20Basic The address of the token contract\r\n   */\r\n  function reclaimToken(ERC20Basic token) external onlyOwner {\r\n    uint256 balance = token.balanceOf(this);\r\n    token.safeTransfer(owner, balance);\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Contracts that should not own Tokens\r\n * @author Remco Bloemen <remco@2π.com>\r\n * @dev This blocks incoming ERC23 tokens to prevent accidental loss of tokens.\r\n * Should tokens (any ERC20Basic compatible) end up in the contract, it allows the\r\n * owner to reclaim the tokens.\r\n */\r\ncontract HasNoTokens is CanReclaimToken {\r\n\r\n /**\r\n  * @dev Reject all ERC23 compatible tokens\r\n  * param from_ address The address that is transferring the tokens\r\n  * param value_ uint256 the amount of the specified token\r\n  * param data_ Bytes The data passed from the caller.\r\n  */\r\n  function tokenFallback(address /*from_*/, uint256 /*value_*/, bytes /*data_*/) external {\r\n    revert();\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances. \r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) returns (bool) {\r\n    require(_to != address(0));\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of. \r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\r\n    require(_to != address(0));\r\n\r\n    var _allowance = allowed[_from][msg.sender];\r\n\r\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n    // require (_value <= _allowance);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) returns (bool) {\r\n\r\n    // To change the approve amount you first have to reduce the addresses`\r\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n    //  already 0 to mitigate the race condition described here:\r\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n  \r\n  /**\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until \r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   */\r\n  function increaseApproval (address _spender, uint _addedValue) \r\n    returns (bool success) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  function decreaseApproval (address _spender, uint _subtractedValue) \r\n    returns (bool success) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Mintable token\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\r\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n */\r\n\r\ncontract MintableToken is StandardToken, Ownable {\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(address _to, uint256 _amount) onlyOwner canMint returns (bool) {\r\n    totalSupply = totalSupply.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    Mint(_to, _amount);\r\n    Transfer(0x0, _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() onlyOwner returns (bool) {\r\n    mintingFinished = true;\r\n    MintFinished();\r\n    return true;\r\n  }\r\n}\r\n\r\n//======  MatreXa =====\r\n\r\ncontract BurnableToken is StandardToken {\r\n    using SafeMath for uint256;\r\n\r\n    event Burn(address indexed from, uint256 amount);\r\n    event BurnRewardIncreased(address indexed from, uint256 value);\r\n\r\n    /**\r\n    * @dev Sending ether to contract increases burning reward \r\n    */\r\n    function() payable {\r\n        if(msg.value > 0){\r\n            BurnRewardIncreased(msg.sender, msg.value);    \r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Calculates how much ether one will receive in reward for burning tokens\r\n     * @param _amount of tokens to be burned\r\n     */\r\n    function burnReward(uint256 _amount) public constant returns(uint256){\r\n        return this.balance.mul(_amount).div(totalSupply);\r\n    }\r\n\r\n    /**\r\n    * @dev Burns tokens and send reward\r\n    * This is internal function because it DOES NOT check \r\n    * if _from has allowance to burn tokens.\r\n    * It is intended to be used in transfer() and transferFrom() which do this check.\r\n    * @param _from The address which you want to burn tokens from\r\n    * @param _amount of tokens to be burned\r\n    */\r\n    function burn(address _from, uint256 _amount) internal returns(bool){\r\n        require(balances[_from] >= _amount);\r\n        \r\n        uint256 reward = burnReward(_amount);\r\n        assert(this.balance - reward > 0);\r\n\r\n        balances[_from] = balances[_from].sub(_amount);\r\n        totalSupply = totalSupply.sub(_amount);\r\n        //assert(totalSupply >= 0); //Check is not needed because totalSupply.sub(value) will already throw if this condition is not met\r\n        \r\n        _from.transfer(reward);\r\n        Burn(_from, _amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Transfers or burns tokens\r\n    * Burns tokens transferred to this contract itself or to zero address\r\n    * @param _to The address to transfer to or token contract address to burn.\r\n    * @param _value The amount to be transferred.\r\n    */\r\n    function transfer(address _to, uint256 _value) returns (bool) {\r\n        if( (_to == address(this)) || (_to == 0) ){\r\n            return burn(msg.sender, _value);\r\n        }else{\r\n            return super.transfer(_to, _value);\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev Transfer tokens from one address to another \r\n    * or burns them if _to is this contract or zero address\r\n    * @param _from address The address which you want to send tokens from\r\n    * @param _to address The address which you want to transfer to\r\n    * @param _value uint256 the amout of tokens to be transfered\r\n    */\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\r\n        if( (_to == address(this)) || (_to == 0) ){\r\n            var _allowance = allowed[_from][msg.sender];\r\n            //require (_value <= _allowance); //Check is not needed because _allowance.sub(_value) will already throw if this condition is not met\r\n            allowed[_from][msg.sender] = _allowance.sub(_value);\r\n            return burn(_from, _value);\r\n        }else{\r\n            return super.transferFrom(_from, _to, _value);\r\n        }\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title MatreXa Token\r\n */\r\ncontract MatreXaToken is BurnableToken, MintableToken, HasNoContracts, HasNoTokens { //MintableToken is StandardToken, Ownable\r\n    using SafeMath for uint256;\r\n\r\n    string public name = \"MatreXa\";\r\n    string public symbol = \"MTRX\";\r\n    uint256 public decimals = 18;\r\n\r\n    uint256 public allowTransferTimestamp = 0;\r\n\r\n    modifier canTransfer() {\r\n        require(mintingFinished);\r\n        require(now > allowTransferTimestamp);\r\n        _;\r\n    }\r\n\r\n    function setAllowTransferTimestamp(uint256 _allowTransferTimestamp) onlyOwner {\r\n        require(allowTransferTimestamp == 0);\r\n        allowTransferTimestamp = _allowTransferTimestamp;\r\n    }\r\n    \r\n    function transfer(address _to, uint256 _value) canTransfer returns (bool) {\r\n        BurnableToken.transfer(_to, _value);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) canTransfer returns (bool) {\r\n        BurnableToken.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title MatreXa Crowdsale\r\n */\r\ncontract MatreXaCrowdsale is Ownable, HasNoContracts, HasNoTokens {\r\n    using SafeMath for uint256;\r\n\r\n    //use https://www.myetherwallet.com/helpers.html for simple coversion to/from wei\r\n    uint256 constant public MAX_GAS_PRICE  = 50000000000 wei;    //Maximum gas price for contribution transactions\r\n    uint256 public goal;                                         //Amount of ether (in wei) to receive for crowdsale to be successful\r\n\r\n    MatreXaToken public mtrx;\r\n\r\n    uint256 public availableSupply;     //tokens left to sale\r\n    uint256 public startTimestamp;      //start crowdsale timestamp\r\n    uint256 public endTimestamp;        //after this timestamp no contributions will be accepted and if minimum cap not reached refunds may be claimed\r\n    uint256 public totalCollected;      //total amount of collected funds (in ethereum wei)\r\n    uint256[] public periods;           //periods of crowdsale with different prices\r\n    uint256[] public prices;            //prices of each crowdsale periods\r\n    bool public finalized;              //crowdsale is finalized\r\n    \r\n    mapping(address => uint256) contributions; //amount of ether (in wei)received from a contributor\r\n\r\n    event LogSale(address indexed to, uint256 eth, uint256 tokens);\r\n\r\n    /**\r\n     * @dev Asserts crowdsale goal is reached\r\n     */\r\n    modifier goalReached(){\r\n        require(totalCollected >= goal);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Asserts crowdsale is finished, but goal not reached \r\n     */\r\n    modifier crowdsaleFailed(){\r\n        require(totalCollected < goal);\r\n        require(now > endTimestamp);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * Throws if crowdsale is not running: not started, ended or max cap reached\r\n     */\r\n    modifier crowdsaleIsRunning(){\r\n        // require(now > startTimestamp);\r\n        // require(now <= endTimestamp);\r\n        // require(availableSupply > 0);\r\n        // require(!finalized);\r\n        require(crowdsaleRunning());\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * verifies that the gas price is lower than 50 gwei\r\n    */\r\n    modifier validGasPrice() {\r\n        assert(tx.gasprice <= MAX_GAS_PRICE);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev MatreXa Crowdsale Contract\r\n     * @param _startTimestamp Start crowdsale timestamp\r\n     * @param _periods Array of timestamps when a corresponding price is no longer valid. Last timestamp is the last date of ICO\r\n     * @param _prices Array of prices (how many token units one will receive per wei) corrsponding to thresholds.\r\n     * @param _goal Amount of ether (in wei) to receive for crowdsale to be successful\r\n     * @param _ownerTokens Amount of MTRX tokens (in wei) minted to owner\r\n     * @param _availableSupply Amount of MTRX tokens (in wei) to distribute during ICO\r\n     * @param _allowTransferTimestamp timestamp after wich transfer of tokens should be allowed\r\n     */\r\n    function MatreXaCrowdsale(\r\n        uint256 _startTimestamp, \r\n        uint256[] _periods,\r\n        uint256[] _prices, \r\n        uint256 _goal,\r\n        uint256 _ownerTokens,\r\n        uint256 _availableSupply,\r\n        uint256 _allowTransferTimestamp\r\n    ) {\r\n\r\n        require(_periods.length > 0);                   //There should be at least one period\r\n        require(_startTimestamp < _periods[0]);         //Start should be before first period end\r\n        require(_prices.length == _periods.length);     //Each period should have corresponding price\r\n\r\n        startTimestamp = _startTimestamp;\r\n        endTimestamp = _periods[_periods.length - 1];\r\n        periods = _periods;\r\n        prices = _prices;\r\n\r\n        goal = _goal;\r\n        availableSupply = _availableSupply;\r\n        \r\n        uint256 reachableCap = availableSupply.mul(_prices[0]);   //find how much ether can be collected in first period\r\n        require(reachableCap > goal);           //Check if it is possible to reach minimumCap (not accurate check, but it's ok) \r\n\r\n        mtrx = new MatreXaToken();\r\n        mtrx.setAllowTransferTimestamp(_allowTransferTimestamp);\r\n        mtrx.mint(owner, _ownerTokens);\r\n    }\r\n\r\n    /**\r\n    * @dev Calculates current price rate (how many MTRX you get for 1 ETH)\r\n    * @return calculated price or zero if crodsale not started or finished\r\n    */\r\n    function currentPrice() constant public returns(uint256) {\r\n        if( (now < startTimestamp) || finalized) return 0;\r\n        for(uint i=0; i < periods.length; i++){\r\n            if(now < periods[i]){\r\n                return prices[i];\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n    /**\r\n    * @dev Shows if crowdsale is running\r\n    */ \r\n    function crowdsaleRunning() constant public returns(bool){\r\n        return  (now > startTimestamp) &&  (now <= endTimestamp) && (availableSupply > 0) && !finalized;\r\n    }\r\n    /**\r\n    * @dev Buy MatreXa tokens\r\n    */\r\n    function() payable validGasPrice crowdsaleIsRunning {\r\n        require(msg.value > 0);\r\n        uint256 price = currentPrice();\r\n        assert(price > 0);\r\n        uint256 tokens = price.mul(msg.value);\r\n        assert(tokens > 0);\r\n        require(availableSupply - tokens >= 0);\r\n\r\n        contributions[msg.sender] = contributions[msg.sender].add(msg.value);\r\n        totalCollected = totalCollected.add(msg.value);\r\n        availableSupply = availableSupply.sub(tokens);\r\n        mtrx.mint(msg.sender, tokens);\r\n        LogSale(msg.sender, msg.value, tokens);\r\n    } \r\n\r\n    /**\r\n    * @dev Sends all contributed ether back if minimum cap is not reached by the end of crowdsale\r\n    */\r\n    function claimRefund() public crowdsaleFailed {\r\n        require(contributions[msg.sender] > 0);\r\n\r\n        uint256 refund = contributions[msg.sender];\r\n        contributions[msg.sender] = 0;\r\n        msg.sender.transfer(refund);\r\n    }\r\n\r\n    /**\r\n    * @dev Sends collected funds to owner\r\n    * May be executed only if goal reached and no refunds are possible\r\n    */\r\n    function withdrawFunds(uint256 amount) public onlyOwner goalReached {\r\n        msg.sender.transfer(amount);\r\n    }\r\n\r\n    /**\r\n    * @dev Finalizes ICO when one of conditions met:\r\n    * - end time reached OR\r\n    * - no more tokens available (cap reached) OR\r\n    * - message sent by owner\r\n    */\r\n    function finalizeCrowdfunding() public {\r\n        require ( (now > endTimestamp) || (availableSupply == 0) || (msg.sender == owner) );\r\n        finalized = mtrx.finishMinting();\r\n        mtrx.transferOwnership(owner);\r\n    } \r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFunds\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"reclaimToken\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalizeCrowdfunding\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"contractAddr\",\"type\":\"address\"}],\"name\":\"reclaimContract\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"goal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"availableSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"finalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimRefund\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleRunning\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"prices\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"tokenFallback\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalCollected\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_GAS_PRICE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"periods\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mtrx\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_startTimestamp\",\"type\":\"uint256\"},{\"name\":\"_periods\",\"type\":\"uint256[]\"},{\"name\":\"_prices\",\"type\":\"uint256[]\"},{\"name\":\"_goal\",\"type\":\"uint256\"},{\"name\":\"_ownerTokens\",\"type\":\"uint256\"},{\"name\":\"_availableSupply\",\"type\":\"uint256\"},{\"name\":\"_allowTransferTimestamp\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"eth\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"LogSale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"MatreXaCrowdsale","CompilerVersion":"v0.4.13+commit.fb4cb1a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000059be47a000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000001a0000000000000000000000000000000000000000000000202fefbf2d7c2f0000000000000000000000000000000000000000000000000d3c21bcecceda10000000000000000000000000000000000000000000000001a784379d99db420000000000000000000000000000000000000000000000000000000000000005a4b582000000000000000000000000000000000000000000000000000000000000000050000000000000000000000000000000000000000000000000000000059bf99200000000000000000000000000000000000000000000000000000000059c23c200000000000000000000000000000000000000000000000000000000059c630a00000000000000000000000000000000000000000000000000000000059cb76a00000000000000000000000000000000000000000000000000000000059d20e200000000000000000000000000000000000000000000000000000000000000005000000000000000000000000000000000000000000000000000000000000011600000000000000000000000000000000000000000000000000000000000000fa00000000000000000000000000000000000000000000000000000000000000e900000000000000000000000000000000000000000000000000000000000000d900000000000000000000000000000000000000000000000000000000000000c8","Library":"","SwarmSource":"bzzr://01216caf2c2c31ad144f90d377a8b9f25b90642b104932b3e01378f1e0f4230f"}]}