{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.17;\r\n\r\n/** @title Decentralized Identification Number (DIN) registry. */\r\ncontract DINRegistry {\r\n\r\n    struct Record {\r\n        address owner;\r\n        address resolver;  // Address of the resolver contract, which can be used to find product information. \r\n        uint256 updated;   // Last updated time (Unix timestamp).\r\n    }\r\n\r\n    // DIN => Record\r\n    mapping (uint256 => Record) records;\r\n\r\n    // The first DIN registered.\r\n    uint256 public genesis;\r\n\r\n    // The current DIN.\r\n    uint256 public index;\r\n\r\n    modifier only_owner(uint256 DIN) {\r\n        require(records[DIN].owner == msg.sender);\r\n        _;\r\n    }\r\n\r\n    // Log transfers of ownership.\r\n    event NewOwner(uint256 indexed DIN, address indexed owner);\r\n\r\n    // Log when new resolvers are set.\r\n    event NewResolver(uint256 indexed DIN, address indexed resolver);\r\n\r\n    // Log new registrations.\r\n    event NewRegistration(uint256 indexed DIN, address indexed owner);\r\n\r\n    /** @dev Constructor.\r\n      * @param _genesis The first DIN registered.\r\n      */\r\n    function DINRegistry(uint256 _genesis) public {\r\n        genesis = _genesis;\r\n        index = _genesis;\r\n\r\n        // Register the genesis DIN to the account that deploys this contract.\r\n        records[_genesis].owner = msg.sender;\r\n        records[_genesis].updated = block.timestamp;\r\n        NewRegistration(_genesis, msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev Get the owner of a specific DIN.\r\n     */\r\n    function owner(uint256 _DIN) public view returns (address) {\r\n        return records[_DIN].owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer ownership of a DIN.\r\n     * @param _DIN The DIN to transfer.\r\n     * @param _owner Address of the new owner.\r\n     */\r\n    function setOwner(uint256 _DIN, address _owner) public only_owner(_DIN) {\r\n        records[_DIN].owner = _owner;\r\n        records[_DIN].updated = block.timestamp;\r\n        NewOwner(_DIN, _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Get the address of the resolver contract for a specific DIN.\r\n     */\r\n    function resolver(uint256 _DIN) public view returns (address) {\r\n        return records[_DIN].resolver;\r\n    }\r\n\r\n    /**\r\n     * @dev Set the resolver of a DIN.\r\n     * @param _DIN The DIN to update.\r\n     * @param _resolver Address of the resolver.\r\n     */\r\n    function setResolver(uint256 _DIN, address _resolver) public only_owner(_DIN) {\r\n        records[_DIN].resolver = _resolver;\r\n        records[_DIN].updated = block.timestamp;\r\n        NewResolver(_DIN, _resolver);\r\n    }\r\n\r\n    /**\r\n     * @dev Get the last time a DIN was updated with a new owner or resolver.\r\n     * @param _DIN The DIN to query.\r\n     * @return _timestamp Last updated time (Unix timestamp).\r\n     */\r\n    function updated(uint256 _DIN) public view returns (uint256 _timestamp) {\r\n        return records[_DIN].updated;\r\n    }\r\n\r\n    /**\r\n     * @dev Self-register a new DIN.\r\n     * @return _DIN The DIN that is registered.\r\n     */\r\n    function selfRegisterDIN() public returns (uint256 _DIN) {\r\n        return registerDIN(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev Self-register a new DIN and set the resolver.\r\n     * @param _resolver Address of the resolver.\r\n     * @return _DIN The DIN that is registered.\r\n     */\r\n    function selfRegisterDINWithResolver(address _resolver) public returns (uint256 _DIN) {\r\n        return registerDINWithResolver(msg.sender, _resolver);\r\n    }\r\n\r\n    /**\r\n     * @dev Register a new DIN for a specific address.\r\n     * @param _owner Account that will own the DIN.\r\n     * @return _DIN The DIN that is registered.\r\n     */\r\n    function registerDIN(address _owner) public returns (uint256 _DIN) {\r\n        index++;\r\n        records[index].owner = _owner;\r\n        records[index].updated = block.timestamp;\r\n        NewRegistration(index, _owner);\r\n        return index;\r\n    }\r\n\r\n    /**\r\n     * @dev Register a new DIN and set the resolver.\r\n     * @param _owner Account that will own the DIN.\r\n     * @param _resolver Address of the resolver.\r\n     * @return _DIN The DIN that is registered.\r\n     */\r\n    function registerDINWithResolver(address _owner, address _resolver) public returns (uint256 _DIN) {\r\n        index++;\r\n        records[index].owner = _owner;\r\n        records[index].resolver = _resolver;\r\n        records[index].updated = block.timestamp;\r\n        NewRegistration(index, _owner);\r\n        NewResolver(index, _resolver);\r\n        return index;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_resolver\",\"type\":\"address\"}],\"name\":\"selfRegisterDINWithResolver\",\"outputs\":[{\"name\":\"_DIN\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_DIN\",\"type\":\"uint256\"}],\"name\":\"resolver\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"index\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_resolver\",\"type\":\"address\"}],\"name\":\"registerDINWithResolver\",\"outputs\":[{\"name\":\"_DIN\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_DIN\",\"type\":\"uint256\"},{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"registerDIN\",\"outputs\":[{\"name\":\"_DIN\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_DIN\",\"type\":\"uint256\"}],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"selfRegisterDIN\",\"outputs\":[{\"name\":\"_DIN\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"genesis\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_DIN\",\"type\":\"uint256\"}],\"name\":\"updated\",\"outputs\":[{\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_DIN\",\"type\":\"uint256\"},{\"name\":\"_resolver\",\"type\":\"address\"}],\"name\":\"setResolver\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_genesis\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"DIN\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"NewOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"DIN\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"resolver\",\"type\":\"address\"}],\"name\":\"NewResolver\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"DIN\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"NewRegistration\",\"type\":\"event\"}]","ContractName":"DINRegistry","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000003b9aca00","Library":"","SwarmSource":"bzzr://fb0a382f44ca926472f2c5e05e716cf42c1f719fadbc9a1b2f4828834dab536f"}]}