{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13;\r\n\r\ncontract ForeignToken {\r\n    function balanceOf(address _owner) constant returns (uint256);\r\n    function transfer(address _to, uint256 _value) returns (bool);\r\n}\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ninterface Token { \r\n    function transfer(address _to, uint256 _value) returns (bool);\r\n    function totalSupply() constant returns (uint256 supply);\r\n    function balanceOf(address _owner) constant returns (uint256 balance);\r\n}\r\n\r\ncontract FuddCrowdsale {\r\n\r\n    using SafeMath for uint256;\r\n    mapping (address => uint256) balances;\r\n    Token public fuddToken;\r\n\r\n    // Crowdsale details\r\n    address public beneficiary;                     \r\n    address public creator;                         \r\n    address public confirmedBy;                     \r\n    uint256 public maxSupply;    \r\n    bool public purchasingAllowed = false;\r\n    uint256 public totalSupplied = 0;\r\n    uint256 public startTimestamp;\r\n    uint256 public rate;\r\n    uint256 public firstBonus;\r\n    uint256 public secondBonus;\r\n    uint256 public firstTimer;\r\n    uint256 public secondTimer;\r\n    uint256 public endTimer;\r\n    \r\n    /**\r\n    * Constructor\r\n    *\r\n    * @param _tokenAddress The address of the token contact\r\n    * @param _beneficiary  The address of the wallet for the beneficiary  \r\n    * @param _creator      The address of the wallet for the creator \r\n    */\r\n    function FuddCrowdsale(address _tokenAddress, address _beneficiary, address _creator) {\r\n        fuddToken = Token(_tokenAddress);\r\n        beneficiary = _beneficiary;\r\n        creator = _creator;\r\n    }\r\n\r\n    enum Stages {\r\n        PreSale,     //0\r\n        InProgress,  //1\r\n        Ended,       //2 \r\n        Withdrawn    //3\r\n    }\r\n\r\n    Stages public stage = Stages.PreSale;\r\n\r\n    /**\r\n    * Throw if at stage other than current stage\r\n    * \r\n    * @param _stage expected stage to test for\r\n    */\r\n    modifier atStage(Stages _stage) {\r\n        require(stage == _stage);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * Throw if sender is not beneficiary\r\n    */\r\n    modifier onlyBeneficiary() {\r\n        require(beneficiary == msg.sender);\r\n        _;\r\n    }\r\n\r\n    /** \r\n    * Get balance of `_investor` \r\n    * \r\n    * @param _investor The address from which the balance will be retrieved\r\n    * @return The balance\r\n    */\r\n    function balanceOf(address _investor) constant returns (uint256 balance) {\r\n        return balances[_investor];\r\n    }\r\n    \r\n    function enablePurchasing(uint256 _firstTimer, uint256 _secondTimer, uint256 _endTimer,\r\n    uint256 _maxSupply, uint256 _rate, uint256 _firstBonus, uint256 _secondBonus) onlyBeneficiary atStage(Stages.PreSale) {\r\n        firstTimer = _firstTimer;\r\n        secondTimer = _secondTimer;\r\n        endTimer = _endTimer;\r\n        maxSupply = _maxSupply;\r\n        rate = _rate;\r\n        firstBonus = _firstBonus;\r\n        secondBonus = _secondBonus;\r\n        purchasingAllowed = true;\r\n        startTimestamp = now;\r\n        stage = Stages.InProgress;\r\n    }\r\n\r\n    function disablePurchasing() onlyBeneficiary atStage(Stages.InProgress) {\r\n        purchasingAllowed = false;\r\n        stage = Stages.Ended;\r\n    }\r\n    \r\n    function hasEnded() atStage(Stages.InProgress) {\r\n        if (now >= startTimestamp.add(endTimer)){\r\n            purchasingAllowed = false;\r\n            stage = Stages.Ended;\r\n        }\r\n    }\r\n\r\n    function enableNewPurchasing(uint256 _firstTimer, uint256 _secondTimer, uint256 _endTimer,\r\n    uint256 _maxSupply, uint256 _rate, uint256 _firstBonus, uint256 _secondBonus) onlyBeneficiary atStage(Stages.Withdrawn) {\r\n        firstTimer = _firstTimer;\r\n        secondTimer = _secondTimer;\r\n        endTimer = _endTimer;\r\n        maxSupply = _maxSupply;\r\n        rate = _rate;\r\n        firstBonus = _firstBonus;\r\n        secondBonus = _secondBonus;\r\n        totalSupplied = 0;\r\n        startTimestamp = now;\r\n        purchasingAllowed = true;\r\n        stage = Stages.InProgress;\r\n    }\r\n    \r\n    /**\r\n    * Transfer raised amount to the beneficiary address\r\n    */\r\n    function withdraw() onlyBeneficiary atStage(Stages.Ended) {\r\n        uint256 ethBalance = this.balance;\r\n        beneficiary.transfer(ethBalance);\r\n        stage = Stages.Withdrawn;\r\n    }\r\n\r\n    /**\r\n    * For testing purposes\r\n    *\r\n    * @return The beneficiary address\r\n    */\r\n    function confirmBeneficiary() onlyBeneficiary {\r\n        confirmedBy = msg.sender;\r\n    }\r\n    \r\n    event sendTokens(address indexed to, uint256 value);\r\n\r\n    /**\r\n    * Receives Eth and issue tokens to the sender\r\n    */\r\n    function () payable atStage(Stages.InProgress) {\r\n        hasEnded();\r\n        require(purchasingAllowed);\r\n        if (msg.value == 0) { return; }\r\n        uint256 weiAmount = msg.value;\r\n        address investor = msg.sender;\r\n        uint256 received = weiAmount.div(10e7);\r\n        uint256 tokens = (received).mul(rate);\r\n\r\n        if (msg.value >= 10 finney) {\r\n            if (now <= startTimestamp.add(firstTimer)){\r\n                uint256 firstBonusToken = (tokens.div(100)).mul(firstBonus);\r\n                tokens = tokens.add(firstBonusToken);\r\n            }\r\n            \r\n            if (startTimestamp.add(firstTimer) < now && \r\n            now <= startTimestamp.add(secondTimer)){\r\n                uint256 secondBonusToken = (tokens.div(100)).mul(secondBonus);\r\n                tokens = tokens.add(secondBonusToken);\r\n            }\r\n        }\r\n        \r\n        sendTokens(msg.sender, tokens);\r\n        fuddToken.transfer(investor, tokens);\r\n        totalSupplied = (totalSupplied).add(tokens);\r\n            \r\n        if (totalSupplied >= maxSupply) {\r\n            purchasingAllowed = false;\r\n            stage = Stages.Ended;\r\n        }\r\n    }\r\n    \r\n    function tokensAvailable() constant returns (uint256) {\r\n        return fuddToken.balanceOf(this);\r\n    }\r\n    \r\n    function withdrawForeignTokens(address _tokenContract) onlyBeneficiary public returns (bool) {\r\n        ForeignToken token = ForeignToken(_tokenContract);\r\n        uint256 amount = token.balanceOf(address(this));\r\n        return token.transfer(beneficiary, amount);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_firstTimer\",\"type\":\"uint256\"},{\"name\":\"_secondTimer\",\"type\":\"uint256\"},{\"name\":\"_endTimer\",\"type\":\"uint256\"},{\"name\":\"_maxSupply\",\"type\":\"uint256\"},{\"name\":\"_rate\",\"type\":\"uint256\"},{\"name\":\"_firstBonus\",\"type\":\"uint256\"},{\"name\":\"_secondBonus\",\"type\":\"uint256\"}],\"name\":\"enablePurchasing\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"firstBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"secondTimer\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fuddToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensAvailable\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"secondBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupplied\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"disablePurchasing\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_investor\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"firstTimer\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"confirmBeneficiary\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_firstTimer\",\"type\":\"uint256\"},{\"name\":\"_secondTimer\",\"type\":\"uint256\"},{\"name\":\"_endTimer\",\"type\":\"uint256\"},{\"name\":\"_maxSupply\",\"type\":\"uint256\"},{\"name\":\"_rate\",\"type\":\"uint256\"},{\"name\":\"_firstBonus\",\"type\":\"uint256\"},{\"name\":\"_secondBonus\",\"type\":\"uint256\"}],\"name\":\"enableNewPurchasing\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTimer\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"confirmedBy\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"purchasingAllowed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenContract\",\"type\":\"address\"}],\"name\":\"withdrawForeignTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"hasEnded\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_creator\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"sendTokens\",\"type\":\"event\"}]","ContractName":"FuddCrowdsale","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000De39E5E5a1B0eEB3Afe717D6d011CaE88D19451e0000000000000000000000009a35805049C6bC553409E0dAF71Aa98E4eE97Df90000000000000000000000009a35805049C6bC553409E0dAF71Aa98E4eE97Df9","Library":"","SwarmSource":"bzzr://acc983dced9655ea5c9c72a7385af2b2d2d726a29708ddb669f1718548e6b8df"}]}