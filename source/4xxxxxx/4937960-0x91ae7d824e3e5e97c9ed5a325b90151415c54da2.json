{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.17;\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n\r\n  function min(uint a, uint b) internal pure returns (uint256) {\r\n    return a < b ? a : b;\r\n  }\r\n}\r\n\r\n\r\n\r\n//This is the basic wrapped Ether contract. \r\n//All money deposited is transformed into ERC20 tokens at the rate of 1 wei = 1 token\r\ncontract Wrapped_Ether {\r\n\r\n  using SafeMath for uint256;\r\n\r\n  /*Variables*/\r\n\r\n  //ERC20 fields\r\n  string public name = \"Wrapped Ether\";\r\n  uint public total_supply;\r\n\r\n\r\n  //ERC20 fields\r\n  mapping(address => uint) balances;\r\n  mapping(address => mapping (address => uint)) allowed;\r\n\r\n  /*Events*/\r\n\r\n  event Transfer(address indexed _from, address indexed _to, uint _value);\r\n  event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n  event StateChanged(bool _success, string _message);\r\n\r\n  /*Functions*/\r\n\r\n  //This function creates tokens equal in value to the amount sent to the contract\r\n  function CreateToken() public payable {\r\n    require(msg.value > 0);\r\n    balances[msg.sender] = balances[msg.sender].add(msg.value);\r\n    total_supply = total_supply.add(msg.value);\r\n  }\r\n\r\n  /*\r\n  * This function 'unwraps' an _amount of Ether in the sender's balance by transferring Ether to them\r\n  *\r\n  * @param \"_amount\": The amount of the token to unwrap\r\n  */\r\n  function withdraw(uint _value) public {\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    total_supply = total_supply.sub(_value);\r\n    msg.sender.transfer(_value);\r\n  }\r\n\r\n  //Returns the balance associated with the passed in _owner\r\n  function balanceOf(address _owner) public constant returns (uint bal) { return balances[_owner]; }\r\n\r\n  /*\r\n  * Allows for a transfer of tokens to _to\r\n  *\r\n  * @param \"_to\": The address to send tokens to\r\n  * @param \"_amount\": The amount of tokens to send\r\n  */\r\n  function transfer(address _to, uint _amount) public returns (bool success) {\r\n    if (balances[msg.sender] >= _amount\r\n    && _amount > 0\r\n    && balances[_to] + _amount > balances[_to]) {\r\n      balances[msg.sender] = balances[msg.sender].sub(_amount);\r\n      balances[_to] = balances[_to].add(_amount);\r\n      Transfer(msg.sender, _to, _amount);\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /*\r\n  * Allows an address with sufficient spending allowance to send tokens on the behalf of _from\r\n  *\r\n  * @param \"_from\": The address to send tokens from\r\n  * @param \"_to\": The address to send tokens to\r\n  * @param \"_amount\": The amount of tokens to send\r\n  */\r\n  function transferFrom(address _from, address _to, uint _amount) public returns (bool success) {\r\n    if (balances[_from] >= _amount\r\n    && allowed[_from][msg.sender] >= _amount\r\n    && _amount > 0\r\n    && balances[_to] + _amount > balances[_to]) {\r\n      balances[_from] = balances[_from].sub(_amount);\r\n      allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\r\n      balances[_to] = balances[_to].add(_amount);\r\n      Transfer(_from, _to, _amount);\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  //Approves a _spender an _amount of tokens to use\r\n  function approve(address _spender, uint _amount) public returns (bool success) {\r\n    allowed[msg.sender][_spender] = _amount;\r\n    Approval(msg.sender, _spender, _amount);\r\n    return true;\r\n  }\r\n\r\n  //Returns the remaining allowance of tokens granted to the _spender from the _owner\r\n  function allowance(address _owner, address _spender) public view returns (uint remaining) { return allowed[_owner][_spender]; }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"total_supply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"bal\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"CreateToken\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_success\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"_message\",\"type\":\"string\"}],\"name\":\"StateChanged\",\"type\":\"event\"}]","ContractName":"Wrapped_Ether","CompilerVersion":"v0.4.17+commit.bdeb9e52","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://e2b5e4803231a8a13c9b47bb7d386b744b1bcf05d389d4e26bf69d613ad3dc49"}]}