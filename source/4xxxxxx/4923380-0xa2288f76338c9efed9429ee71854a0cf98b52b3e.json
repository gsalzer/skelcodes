{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.18;\r\n\r\n\r\n/*\r\n * https://github.com/OpenZeppelin/zeppelin-solidity\r\n *\r\n * The MIT License (MIT)\r\n * Copyright (c) 2016 Smart Contract Solutions, Inc.\r\n */\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\n/*\r\n * https://github.com/OpenZeppelin/zeppelin-solidity\r\n *\r\n * The MIT License (MIT)\r\n * Copyright (c) 2016 Smart Contract Solutions, Inc.\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    function Ownable() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title One-time schedulable contract\r\n * @author Jakub Stefanski (https://github.com/jstefanski)\r\n *\r\n * https://github.com/OnLivePlatform/onlive-contracts\r\n *\r\n * The BSD 3-Clause Clear License\r\n * Copyright (c) 2018 OnLive LTD\r\n */\r\ncontract Schedulable is Ownable {\r\n\r\n    /**\r\n     * @dev First block when contract is active (inclusive). Zero if not scheduled.\r\n     */\r\n    uint256 public startBlock;\r\n\r\n    /**\r\n     * @dev Last block when contract is active (inclusive). Zero if not scheduled.\r\n     */\r\n    uint256 public endBlock;\r\n\r\n    /**\r\n     * @dev Contract scheduled within given blocks\r\n     * @param startBlock uint256 The first block when contract is active (inclusive)\r\n     * @param endBlock uint256 The last block when contract is active (inclusive)\r\n     */\r\n    event Scheduled(uint256 startBlock, uint256 endBlock);\r\n\r\n    modifier onlyNotZero(uint256 value) {\r\n        require(value != 0);\r\n        _;\r\n    }\r\n\r\n    modifier onlyScheduled() {\r\n        require(isScheduled());\r\n        _;\r\n    }\r\n\r\n    modifier onlyNotScheduled() {\r\n        require(!isScheduled());\r\n        _;\r\n    }\r\n\r\n    modifier onlyActive() {\r\n        require(isActive());\r\n        _;\r\n    }\r\n\r\n    modifier onlyNotActive() {\r\n        require(!isActive());\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Schedule contract activation for given block range\r\n     * @param _startBlock uint256 The first block when contract is active (inclusive)\r\n     * @param _endBlock uint256 The last block when contract is active (inclusive)\r\n     */\r\n    function schedule(uint256 _startBlock, uint256 _endBlock)\r\n        public\r\n        onlyOwner\r\n        onlyNotScheduled\r\n        onlyNotZero(_startBlock)\r\n        onlyNotZero(_endBlock)\r\n    {\r\n        require(_startBlock < _endBlock);\r\n\r\n        startBlock = _startBlock;\r\n        endBlock = _endBlock;\r\n\r\n        Scheduled(_startBlock, _endBlock);\r\n    }\r\n\r\n    /**\r\n     * @dev Check whether activation is scheduled\r\n     */\r\n    function isScheduled() public view returns (bool) {\r\n        return startBlock > 0 && endBlock > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Check whether contract is currently active\r\n     */\r\n    function isActive() public view returns (bool) {\r\n        return block.number >= startBlock && block.number <= endBlock;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title Pre-ICO Crowdsale with constant price and limited supply\r\n * @author Jakub Stefanski (https://github.com/jstefanski)\r\n *\r\n * https://github.com/OnLivePlatform/onlive-contracts\r\n *\r\n * The BSD 3-Clause Clear License\r\n * Copyright (c) 2018 OnLive LTD\r\n */\r\ncontract Mintable {\r\n    uint256 public decimals;\r\n\r\n    function mint(address to, uint256 amount) public;\r\n}\r\n\r\n\r\n/**\r\n * @title Crowdsale for off-chain payment methods\r\n * @author Jakub Stefanski (https://github.com/jstefanski)\r\n *\r\n * https://github.com/OnLivePlatform/onlive-contracts\r\n *\r\n * The BSD 3-Clause Clear License\r\n * Copyright (c) 2018 OnLive LTD\r\n */\r\ncontract PreIcoCrowdsale is Schedulable {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    /**\r\n     * @dev Address of contribution wallet\r\n     */\r\n    address public wallet;\r\n\r\n    /**\r\n     * @dev Address of mintable token instance\r\n     */\r\n    Mintable public token;\r\n\r\n    /**\r\n     * @dev Current amount of tokens available for sale\r\n     */\r\n    uint256 public availableAmount;\r\n\r\n    /**\r\n     * @dev Price of token in Wei\r\n     */\r\n    uint256 public price;\r\n\r\n    /**\r\n     * @dev Minimum ETH value sent as contribution\r\n     */\r\n    uint256 public minValue;\r\n\r\n    /**\r\n     * @dev Indicates whether contribution identified by bytes32 id is already registered\r\n     */\r\n    mapping (bytes32 => bool) public isContributionRegistered;\r\n\r\n    function PreIcoCrowdsale(\r\n        address _wallet,\r\n        Mintable _token,\r\n        uint256 _availableAmount,\r\n        uint256 _price,\r\n        uint256 _minValue\r\n    )\r\n        public\r\n        onlyValid(_wallet)\r\n        onlyValid(_token)\r\n        onlyNotZero(_availableAmount)\r\n        onlyNotZero(_price)\r\n    {\r\n        wallet = _wallet;\r\n        token = _token;\r\n        availableAmount = _availableAmount;\r\n        price = _price;\r\n        minValue = _minValue;\r\n    }\r\n\r\n    /**\r\n     * @dev Contribution is accepted\r\n     * @param contributor address The recipient of the tokens\r\n     * @param value uint256 The amount of contributed ETH\r\n     * @param amount uint256 The amount of tokens\r\n     */\r\n    event ContributionAccepted(address indexed contributor, uint256 value, uint256 amount);\r\n\r\n    /**\r\n     * @dev Off-chain contribution registered\r\n     * @param id bytes32 A unique contribution id\r\n     * @param contributor address The recipient of the tokens\r\n     * @param amount uint256 The amount of tokens\r\n     */\r\n    event ContributionRegistered(bytes32 indexed id, address indexed contributor, uint256 amount);\r\n\r\n    modifier onlyValid(address addr) {\r\n        require(addr != address(0));\r\n        _;\r\n    }\r\n\r\n    modifier onlySufficientValue(uint256 value) {\r\n        require(value >= minValue);\r\n        _;\r\n    }\r\n\r\n    modifier onlySufficientAvailableTokens(uint256 amount) {\r\n        require(availableAmount >= amount);\r\n        _;\r\n    }\r\n\r\n    modifier onlyUniqueContribution(bytes32 id) {\r\n        require(!isContributionRegistered[id]);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Accept ETH transfers as contributions\r\n     */\r\n    function () public payable {\r\n        acceptContribution(msg.sender, msg.value);\r\n    }\r\n\r\n    /**\r\n     * @dev Contribute ETH in exchange for tokens\r\n     * @param contributor address The address that receives tokens\r\n     */\r\n    function contribute(address contributor) public payable returns (uint256) {\r\n        return acceptContribution(contributor, msg.value);\r\n    }\r\n\r\n    /**\r\n     * @dev Register contribution with given id\r\n     * @param id bytes32 A unique contribution id\r\n     * @param contributor address The recipient of the tokens\r\n     * @param amount uint256 The amount of tokens\r\n     */\r\n    function registerContribution(bytes32 id, address contributor, uint256 amount)\r\n        public\r\n        onlyOwner\r\n        onlyActive\r\n        onlyValid(contributor)\r\n        onlyNotZero(amount)\r\n        onlyUniqueContribution(id)\r\n    {\r\n        isContributionRegistered[id] = true;\r\n        mintTokens(contributor, amount);\r\n\r\n        ContributionRegistered(id, contributor, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Calculate amount of ONL tokens received for given ETH value\r\n     * @param value uint256 Contribution value in ETH\r\n     * @return uint256 Amount of received ONL tokens\r\n     */\r\n    function calculateContribution(uint256 value) public view returns (uint256) {\r\n        return value.mul(10 ** token.decimals()).div(price);\r\n    }\r\n\r\n    function acceptContribution(address contributor, uint256 value)\r\n        private\r\n        onlyActive\r\n        onlyValid(contributor)\r\n        onlySufficientValue(value)\r\n        returns (uint256)\r\n    {\r\n        uint256 amount = calculateContribution(value);\r\n        mintTokens(contributor, amount);\r\n\r\n        wallet.transfer(value);\r\n\r\n        ContributionAccepted(contributor, value, amount);\r\n\r\n        return amount;\r\n    }\r\n\r\n    function mintTokens(address to, uint256 amount)\r\n        private\r\n        onlySufficientAvailableTokens(amount)\r\n    {\r\n        availableAmount = availableAmount.sub(amount);\r\n        token.mint(to, amount);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"endBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_startBlock\",\"type\":\"uint256\"},{\"name\":\"_endBlock\",\"type\":\"uint256\"}],\"name\":\"schedule\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isActive\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"isContributionRegistered\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"contributor\",\"type\":\"address\"}],\"name\":\"contribute\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isScheduled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"availableAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"calculateContribution\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"bytes32\"},{\"name\":\"contributor\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"registerContribution\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_availableAmount\",\"type\":\"uint256\"},{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"_minValue\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"contributor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ContributionAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"contributor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ContributionRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"startBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"endBlock\",\"type\":\"uint256\"}],\"name\":\"Scheduled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"PreIcoCrowdsale","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000d0078f5c7e33bad8767c602d3aaee6e38481c9a10000000000000000000000006863be0e7cf7ce860a574760e9020d519a8bdc470000000000000000000000000000000000000000000a19916d2227742b400000000000000000000000000000000000000000000000000000000412d39db31000000000000000000000000000000000000000000000000000016345785d8a0000","Library":"","SwarmSource":"bzzr://24368f93bde28c972b75b4d79cd171c65366b9a8064afe523a8909b1e2738840"}]}