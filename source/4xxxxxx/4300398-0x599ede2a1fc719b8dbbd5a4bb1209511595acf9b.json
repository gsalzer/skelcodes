{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\n/* taking ideas from FirstBlood token */\r\ncontract SafeMath {\r\n\r\nfunction safeAdd(uint256 x, uint256 y) internal returns(uint256) {\r\nuint256 z = x + y;\r\n      assert((z >= x) && (z >= y));\r\n      return z;\r\n    }\r\n\r\n    function safeSubtract(uint256 x, uint256 y) internal returns(uint256) {\r\n      assert(x >= y);\r\n      uint256 z = x - y;\r\n      return z;\r\n    }\r\n\r\n    function safeMult(uint256 x, uint256 y) internal returns(uint256) {\r\n      uint256 z = x * y;\r\n      assert((x == 0)||(z/x == y));\r\n      return z;\r\n    }\r\n\r\n}\r\n\r\ncontract Token {\r\n    uint256 public totalSupply;\r\n    function balanceOf(address _owner) constant returns (uint256 balance);\r\n    function transfer(address _to, uint256 _value) returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\r\n    function approve(address _spender, uint256 _value) returns (bool success);\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\n\r\n/*  ERC 20 token */\r\ncontract StandardToken is Token {\r\n\r\n    function transfer(address _to, uint256 _value) returns (bool success) {\r\n      if (balances[msg.sender] >= _value && _value > 0) {\r\n        balances[msg.sender] -= _value;\r\n        balances[_to] += _value;\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n      } else {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\r\n      if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\r\n        balances[_to] += _value;\r\n        balances[_from] -= _value;\r\n        allowed[_from][msg.sender] -= _value;\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n      } else {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n      return allowed[_owner][_spender];\r\n    }\r\n\r\n    mapping (address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n}\r\n\r\ncontract LockChain is StandardToken, SafeMath {\r\n\r\n    // metadata\r\n    string public constant name = \"LockChain\";\r\n    string public constant symbol = \"LOK\";\r\n    uint256 public constant decimals = 18;\r\n    string public version = \"1.0\";\r\n\r\n    // contracts\r\n    address public LockChainFundDeposit;      // deposit address for depositing tokens for owners\r\n    address public account1Address;      // deposit address for depositing tokens for owners\r\n    address public account2Address;\r\n    address public creatorAddress;\r\n\r\n    // crowdsale parameters\r\n    bool public isFinalized;              // switched to true in operational state\r\n    bool public isPreSale;\r\n    bool public isPrePreSale;\r\n    bool public isMainSale;\r\n    uint public preSalePeriod;\r\n    uint public prePreSalePeriod;\r\n    uint256 public tokenExchangeRate = 0; //  LockChain tokens per 1 ETH\r\n    uint256 public constant tokenSaleCap =  155 * (10**6) * 10**decimals;\r\n    uint256 public constant tokenPreSaleCap =  50 * (10**6) * 10**decimals;\r\n\r\n\r\n    // events\r\n    event CreateLOK(address indexed _to, uint256 _value);\r\n\r\n    // constructor\r\n    function LockChain()\r\n    {\r\n      isFinalized = false;                   //controls pre through crowdsale state\r\n      LockChainFundDeposit = '0x013aF31dc76255d3b33d2185A7148300882EbC7a';\r\n      account1Address = '0xe0F2653e7928e6CB7c6D3206163b3E466a29c7C3';\r\n      account2Address = '0x25BC70bFda877e1534151cB92D97AC5E69e1F53D';\r\n      creatorAddress = '0x953ebf6C38C58C934D58b9b17d8f9D0F121218BB';\r\n      isPrePreSale = false;\r\n      isPreSale = false;\r\n      isMainSale = false;\r\n      totalSupply = 0;\r\n    }\r\n\r\n    /// @dev Accepts ether and creates new LOK tokens.\r\n    function () payable {\r\n      if (isFinalized) throw;\r\n      if (!isPrePreSale && !isPreSale && !isMainSale) throw;\r\n      //if (!saleStarted) throw;\r\n      if (msg.value == 0) throw;\r\n      //create tokens\r\n      uint256 tokens = safeMult(msg.value, tokenExchangeRate); // check that we're not over totals\r\n      uint256 checkedSupply = safeAdd(totalSupply, tokens);\r\n\r\n      if(!isMainSale){\r\n        if (tokenPreSaleCap < checkedSupply) throw;\r\n      }\r\n\r\n      // return money if something goes wrong\r\n      if (tokenSaleCap < checkedSupply) throw;  // odd fractions won't be found\r\n      totalSupply = checkedSupply;\r\n      //All good. start the transfer\r\n      balances[msg.sender] += tokens;  // safeAdd not needed\r\n      CreateLOK(msg.sender, tokens);  // logs token creation\r\n    }\r\n\r\n    /// LockChain Ends the funding period and sends the ETH home\r\n    function finalize() external {\r\n      if (isFinalized) throw;\r\n      if (msg.sender != LockChainFundDeposit) throw; // locks finalize to the ultimate ETH owner\r\n        uint256 newTokens = totalSupply;\r\n        uint256 account1Tokens;\r\n        uint256 account2Tokens;\r\n        uint256 creatorTokens = 10000 * 10**decimals;\r\n        uint256 LOKFundTokens;\r\n        uint256 checkedSupply = safeAdd(totalSupply, newTokens);\r\n        totalSupply = checkedSupply;\r\n        if (newTokens % 2 == 0){\r\n          LOKFundTokens = newTokens/2;\r\n          account2Tokens = newTokens/2;\r\n          account1Tokens = LOKFundTokens - creatorTokens;\r\n          balances[account1Address] += account1Tokens;\r\n          balances[account2Address] += account2Tokens;\r\n        }\r\n        else{\r\n          uint256 makeEven = newTokens - 1;\r\n          uint256 halfTokens = makeEven/2;\r\n          LOKFundTokens = halfTokens;\r\n          account2Tokens = halfTokens + 1;\r\n          account1Tokens = LOKFundTokens - creatorTokens;\r\n          balances[account1Address] += account1Tokens;\r\n          balances[account2Address] += account2Tokens;\r\n        }\r\n        balances[creatorAddress] += creatorTokens;\r\n        CreateLOK(creatorAddress, creatorTokens);\r\n        CreateLOK(account1Address, account1Tokens);\r\n        CreateLOK(account2Address, account2Tokens);\r\n      // move to operational\r\n      if(!LockChainFundDeposit.send(this.balance)) throw;\r\n      isFinalized = true;  // send the eth to LockChain\r\n    }\r\n    function switchSaleStage() external {\r\n      if (msg.sender != LockChainFundDeposit) throw; // locks finalize to the ultimate ETH owner\r\n      if(isMainSale) throw;\r\n      if(!isPrePreSale){\r\n        isPrePreSale = true;\r\n        tokenExchangeRate = 1150;\r\n      }\r\n      else if (!isPreSale){\r\n        isPreSale = true;\r\n        tokenExchangeRate = 1000;\r\n      }\r\n      else if (!isMainSale){\r\n        isMainSale = true;\r\n        if (totalSupply < 10 * (10**6) * 10**decimals)\r\n        {\r\n          tokenExchangeRate = 750;\r\n        }\r\n        else if (totalSupply >= 10 * (10**6) * 10**decimals && totalSupply < 20 * (10**6) * 10**decimals)\r\n        {\r\n          tokenExchangeRate = 700;\r\n        }\r\n        else if (totalSupply >= 20 * (10**6) * 10**decimals && totalSupply < 30 * (10**6) * 10**decimals)\r\n        {\r\n          tokenExchangeRate = 650;\r\n        }\r\n        else if (totalSupply >= 30 * (10**6) * 10**decimals && totalSupply < 40 * (10**6) * 10**decimals)\r\n        {\r\n          tokenExchangeRate = 620;\r\n        }\r\n        else if (totalSupply >= 40 * (10**6) * 10**decimals && totalSupply <= 50 * (10**6) * 10**decimals)\r\n        {\r\n          tokenExchangeRate = 600;\r\n        }\r\n\r\n      }\r\n    }\r\n\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"account2Address\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isPrePreSale\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preSalePeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"LockChainFundDeposit\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"switchSaleStage\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenExchangeRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isPreSale\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenPreSaleCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isFinalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenSaleCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"account1Address\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isMainSale\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"prePreSalePeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"creatorAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"CreateLOK\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"LockChain","CompilerVersion":"v0.4.11+commit.68ef5810","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://befb1311cb44a4b85d29b2b749943557540dd2315ae282539f3908a1c0e4b8fb"}]}