{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.17;\r\n\r\nlibrary SafeMath {\r\n\r\n  function mul(uint a, uint b) internal pure returns (uint) {\r\n    uint c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint a, uint b) internal pure returns (uint) {\r\n    uint c = a / b;\r\n    return c;\r\n  }\r\n\r\n  function sub(uint a, uint b) internal pure returns (uint) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint a, uint b) internal pure returns (uint) {\r\n    uint c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\ncontract Ownable {\r\n    \r\n    address public owner;\r\n\r\n    event OwnershipTransferred(address from, address to);\r\n\r\n    /**\r\n     * The address whcih deploys this contrcat is automatically assgined ownership.\r\n     * */\r\n    function Ownable() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * Functions with this modifier can only be executed by the owner of the contract. \r\n     * */\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * Transfers ownership provided that a valid address is given. This function can \r\n     * only be called by the owner of the contract. \r\n     */\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        require(_newOwner != 0x0);\r\n        OwnershipTransferred(owner, _newOwner);\r\n        owner = _newOwner;\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract ERC20Basic {\r\n  uint public totalSupply;\r\n  function balanceOf(address who) public constant returns (uint);\r\n  function transfer(address to, uint value) public;\r\n  event Transfer(address indexed from, address indexed to, uint value);\r\n}\r\n\r\n\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public constant returns (uint);\r\n  function transferFrom(address from, address to, uint value) public;\r\n  function approve(address spender, uint value) public;\r\n  event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\n\r\ncontract BasicToken is ERC20Basic, Ownable {\r\n  using SafeMath for uint;\r\n\r\n  mapping(address => uint) balances;\r\n\r\n  modifier onlyPayloadSize(uint size) {\r\n     if (msg.data.length < size + 4) {\r\n       revert();\r\n     }\r\n     _;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint _value) public onlyPayloadSize(2 * 32) {\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of. \r\n  * @return An uint representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public constant returns (uint balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n\r\ncontract StandardToken is BasicToken, ERC20 {\r\n\r\n    mapping (address => mapping (address => uint256)) allowances;\r\n\r\n    /**\r\n     * Transfers tokens from the account of the owner by an approved spender. \r\n     * The spender cannot spend more than the approved amount. \r\n     * \r\n     * @param _from The address of the owners account.\r\n     * @param _amount The amount of tokens to transfer.\r\n     * */\r\n    function transferFrom(address _from, address _to, uint256 _amount) public onlyPayloadSize(3 * 32) {\r\n        require(allowances[_from][msg.sender] >= _amount && balances[_from] >= _amount);\r\n        allowances[_from][msg.sender] = allowances[_from][msg.sender].sub(_amount);\r\n        balances[_from] = balances[_from].sub(_amount);\r\n        balances[_to] = balances[_to].add(_amount);\r\n        Transfer(_from, _to, _amount);\r\n    }\r\n\r\n    /**\r\n     * Allows another account to spend a given amount of tokens on behalf of the \r\n     * owner's account. If the owner has previously allowed a spender to spend\r\n     * tokens on his or her behalf and would like to change the approval amount,\r\n     * he or she will first have to set the allowance back to 0 and then update\r\n     * the allowance.\r\n     * \r\n     * @param _spender The address of the spenders account.\r\n     * @param _amount The amount of tokens the spender is allowed to spend.\r\n     * */\r\n    function approve(address _spender, uint256 _amount) public {\r\n        require((_amount == 0) || (allowances[msg.sender][_spender] == 0));\r\n        allowances[msg.sender][_spender] = _amount;\r\n        Approval(msg.sender, _spender, _amount);\r\n    }\r\n\r\n\r\n    /**\r\n     * Returns the approved allowance from an owners account to a spenders account.\r\n     * \r\n     * @param _owner The address of the owners account.\r\n     * @param _spender The address of the spenders account.\r\n     **/\r\n    function allowance(address _owner, address _spender) public constant returns (uint256) {\r\n        return allowances[_owner][_spender];\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract MintableToken is StandardToken {\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * Mints a given amount of tokens to the provided address. This function can only be called by the contract's\r\n   * owner, which in this case is the ICO contract itself. From there, the founders of the ICO contract will be\r\n   * able to invoke this function. \r\n   *\r\n   * @param _to The address which will receive the tokens.\r\n   * @param _amount The total amount of ETCL tokens to be minted.\r\n   */\r\n  function mint(address _to, uint256 _amount) public onlyOwner canMint onlyPayloadSize(2 * 32) returns (bool) {\r\n    totalSupply = totalSupply.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    Mint(_to, _amount);\r\n    Transfer(0x0, _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Terminates the minting period permanently. This function can only be called by the owner of the contract.\r\n   */\r\n  function finishMinting() public onlyOwner returns (bool) {\r\n    mintingFinished = true;\r\n    MintFinished();\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n\r\ncontract Ethercloud is MintableToken {\r\n    \r\n    uint8 public decimals;\r\n    string public name;\r\n    string public symbol;\r\n\r\n    function Ethercloud() public {\r\n       totalSupply = 0;\r\n       decimals = 18;\r\n       name = \"Ethercloud\";\r\n       symbol = \"ETCL\";\r\n    }\r\n}\r\n\r\n\r\ncontract ICO is Ownable {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    Ethercloud public ETCL;\r\n\r\n    bool       public success;\r\n    uint256    public rate;\r\n    uint256    public rateWithBonus;\r\n    uint256    public bountiesIssued;\r\n    uint256    public tokensSold;\r\n    uint256    public tokensForSale;\r\n    uint256    public tokensForBounty;\r\n    uint256    public maxTokens;\r\n    uint256    public startTime;\r\n    uint256    public endTime;\r\n    uint256    public softCap;\r\n    uint256    public hardCap;\r\n    uint256[3] public bonusStages;\r\n\r\n    mapping (address => uint256) investments;\r\n\r\n    event TokensPurchased(address indexed by, uint256 amount);\r\n    event RefundIssued(address indexed by, uint256 amount);\r\n    event FundsWithdrawn(address indexed by, uint256 amount);\r\n    event BountyIssued(address indexed to, uint256 amount);\r\n    event IcoSuccess();\r\n    event CapReached();\r\n\r\n    function ICO() public {\r\n        ETCL = new Ethercloud();\r\n        success = false;\r\n        rate = 1288; \r\n        rateWithBonus = 1674;\r\n        bountiesIssued = 0;\r\n        tokensSold = 0;\r\n        tokensForSale = 78e24;              //78 million ETCL for sale\r\n        tokensForBounty = 2e24;             //2 million ETCL for bounty\r\n        maxTokens = 100e24;                 //100 million ETCL\r\n        startTime = now.add(15 days);       //ICO starts 15 days after deployment\r\n        endTime = startTime.add(30 days);   //30 days end time\r\n        softCap = 6212530674370205e6;       //6212.530674370205 ETH\r\n        hardCap = 46594980057776535e6;      //46594.980057776535 ETH\r\n\r\n        bonusStages[0] = startTime.add(7 days);\r\n\r\n        for (uint i = 1; i < bonusStages.length; i++) {\r\n            bonusStages[i] = bonusStages[i - 1].add(7 days);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * When ETH is sent to the contract, the fallback function calls the buy tokens function.\r\n     */\r\n    function() public payable {\r\n        buyTokens(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * Allows investors to buy ETCL tokens by sending ETH and automatically receiving tokens\r\n     * to the provided address.\r\n     *\r\n     * @param _beneficiary The address which will receive the tokens. \r\n     */\r\n    function buyTokens(address _beneficiary) public payable {\r\n        require(_beneficiary != 0x0 && validPurchase() && this.balance.sub(msg.value) < hardCap);\r\n        if (this.balance >= softCap && !success) {\r\n            success = true;\r\n            IcoSuccess();\r\n        }\r\n        uint256 weiAmount = msg.value;\r\n        if (this.balance > hardCap) {\r\n            CapReached();\r\n            uint256 toRefund = this.balance.sub(hardCap);\r\n            msg.sender.transfer(toRefund);\r\n            weiAmount = weiAmount.sub(toRefund);\r\n        }\r\n        uint256 tokens = weiAmount.mul(getCurrentRateWithBonus());\r\n        if (tokensSold.add(tokens) > tokensForSale) {\r\n            revert();\r\n        }\r\n        ETCL.mint(_beneficiary, tokens);\r\n        tokensSold = tokensSold.add(tokens);\r\n        investments[_beneficiary] = investments[_beneficiary].add(weiAmount);\r\n        TokensPurchased(_beneficiary, tokens);\r\n    }\r\n\r\n    /**\r\n     * Returns the current rate with bonus percentage of the tokens. \r\n     */\r\n    function getCurrentRateWithBonus() internal returns (uint256) {\r\n        rateWithBonus = (rate.mul(getBonusPercentage()).div(100)).add(rate);\r\n        return rateWithBonus;\r\n    }\r\n\r\n    /**\r\n     * Returns the current bonus percentage. \r\n     */\r\n    function getBonusPercentage() internal view returns (uint256 bonusPercentage) {\r\n        uint256 timeStamp = now;\r\n        if (timeStamp > bonusStages[2]) {\r\n            bonusPercentage = 0; \r\n        }\r\n        if (timeStamp <= bonusStages[2]) {\r\n            bonusPercentage = 5;\r\n        }\r\n        if (timeStamp <= bonusStages[1]) {\r\n            bonusPercentage = 15;\r\n        }\r\n        if (timeStamp <= bonusStages[0]) {\r\n            bonusPercentage = 30;\r\n        } \r\n        return bonusPercentage;\r\n    }\r\n\r\n    /**\r\n     * Mints a given amount of new tokens to the provided address. This function can only be\r\n     * called by the owner of the contract.\r\n     *\r\n     * @param _beneficiary The address which will receive the tokens.\r\n     * @param _amount The total amount of tokens to be minted.\r\n     */\r\n    function issueTokens(address _beneficiary, uint256 _amount) public onlyOwner {\r\n        require(_beneficiary != 0x0 && _amount > 0 && tokensSold.add(_amount) <= tokensForSale); \r\n        ETCL.mint(_beneficiary, _amount);\r\n        tokensSold = tokensSold.add(_amount);\r\n        TokensPurchased(_beneficiary, _amount);\r\n    }\r\n\r\n    /**\r\n     * Checks whether or not a purchase is valid. If not, then the buy tokens function will \r\n     * not execute.\r\n     */\r\n    function validPurchase() internal constant returns (bool) {\r\n        bool withinPeriod = now >= startTime && now <= endTime;\r\n        bool nonZeroPurchase = msg.value != 0;\r\n        return withinPeriod && nonZeroPurchase;\r\n    }\r\n\r\n    /**\r\n     * Allows investors to claim refund in the case that the soft cap has not been reached and\r\n     * the duration of the ICO has passed. \r\n     *\r\n     * @param _addr The address to be refunded. If no address is provided, the _addr will default\r\n     * to the message sender. \r\n     */\r\n    function getRefund(address _addr) public {\r\n        if (_addr == 0x0) {\r\n            _addr = msg.sender;\r\n        }\r\n        require(!isSuccess() && hasEnded() && investments[_addr] > 0);\r\n        uint256 toRefund = investments[_addr];\r\n        investments[_addr] = 0;\r\n        _addr.transfer(toRefund);\r\n        RefundIssued(_addr, toRefund);\r\n    }\r\n\r\n    /**\r\n     * Mints new tokens for the bounty campaign. This function can only be called by the owner \r\n     * of the contract. \r\n     *\r\n     * @param _beneficiary The address which will receive the tokens. \r\n     * @param _amount The total amount of tokens that will be minted. \r\n     */\r\n    function issueBounty(address _beneficiary, uint256 _amount) public onlyOwner {\r\n        require(bountiesIssued.add(_amount) <= tokensForBounty && _beneficiary != 0x0);\r\n        ETCL.mint(_beneficiary, _amount);\r\n        bountiesIssued = bountiesIssued.add(_amount);\r\n        BountyIssued(_beneficiary, _amount);\r\n    }\r\n\r\n    /**\r\n     * Withdraws the total amount of ETH raised to the owners address. This function can only be\r\n     * called by the owner of the contract given that the ICO is a success and the duration has \r\n     * passed.\r\n     */\r\n    function withdraw() public onlyOwner {\r\n        uint256 inCirculation = tokensSold.add(bountiesIssued);\r\n        ETCL.mint(owner, inCirculation.mul(25).div(100));\r\n        owner.transfer(this.balance);\r\n    }\r\n\r\n    /**\r\n     * Returns true if the ICO is a success, false otherwise.\r\n     */\r\n    function isSuccess() public constant returns (bool) {\r\n        return success;\r\n    }\r\n\r\n    /**\r\n     * Returns true if the duration of the ICO has passed, false otherwise. \r\n     */\r\n    function hasEnded() public constant returns (bool) {\r\n        return now > endTime;\r\n    }\r\n\r\n    /**\r\n     * Returns the end time of the ICO.\r\n     */\r\n    function endTime() public constant returns (uint256) {\r\n        return endTime;\r\n    }\r\n\r\n    /**\r\n     * Returns the total investment of a given ETH address. \r\n     *\r\n     * @param _addr The address being queried.\r\n     */\r\n    function investmentOf(address _addr) public constant returns (uint256) {\r\n        return investments[_addr];\r\n    }\r\n\r\n    /**\r\n     * Finishes the minting period. This function can only be called by the owner of the \r\n     * contract given that the duration of the ICO has ended. \r\n     */\r\n    function finishMinting() public onlyOwner {\r\n        require(hasEnded());\r\n        ETCL.finishMinting();\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"issueBounty\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isSuccess\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"success\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensForSale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"issueTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensForBounty\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getRefund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bonusStages\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bountiesIssued\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"softCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"investmentOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ETCL\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rateWithBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hardCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RefundIssued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FundsWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BountyIssued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"IcoSuccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"CapReached\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"ICO","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://1a8e6d3e1d7ba5922f50ab0cec5618c3d137f32422debb2fe2f5d8ff9818eead"}]}