{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control \r\n * functions, this simplifies the implementation of \"user permissions\". \r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  /** \r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner. \r\n   */\r\n  modifier onlyOwner() {\r\n    if (msg.sender != owner) {\r\n      throw;\r\n    }\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to. \r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner {\r\n    if (newOwner != address(0)) {\r\n      owner = newOwner;\r\n    }\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * Math operations with safety checks\r\n */\r\ncontract SafeMath {\r\n  function safeMul(uint a, uint b) internal returns (uint) {\r\n    uint c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function safeSub(uint a, uint b) internal returns (uint) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function safeAdd(uint a, uint b) internal returns (uint) {\r\n    uint c = a + b;\r\n    assert(c>=a && c>=b);\r\n    return c;\r\n  }\r\n\r\n  function assert(bool assertion) internal {\r\n    if (!assertion) throw;\r\n  }\r\n}\r\n\r\ncontract ERC20 {\r\n    string public symbol;\r\n    string public name;\r\n    uint256 public decimals;\r\n    uint256 _totalSupply;\r\n    \r\n    mapping(address => uint256) balances;\r\n    mapping(address => mapping (address => uint256)) allowed;\r\n    \r\n    function totalSupply() constant returns (uint256 totalSupply);\r\n    function balanceOf(address _owner) constant returns (uint256 balance);\r\n    function transfer(address _to, uint256 _value) returns (bool success);\r\n    \r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\r\n    function approve(address _spender, uint256 _value) returns (bool success);\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\r\n    \r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\n \r\ncontract Redvolution is Ownable, SafeMath, ERC20 {\r\n    // ERC20 constants\r\n    string public symbol = \"REDV\";\r\n    string public name = \"Redvolution\";\r\n    uint256 constant decimals = 8;\r\n    uint256 _totalSupply = 21000000*(10**decimals);\r\n    \r\n    // Constants\r\n    uint public pricePerMessage = 5*(10**decimals);\r\n    uint public priceCreatingChannel = 5000*(10**decimals);\r\n    uint public maxCharacters = 300;\r\n    uint public metadataSize = 1000;\r\n    uint public channelMaxSize = 25;\r\n    \r\n    // Channels\r\n    mapping(string => address) channelOwner;\r\n    mapping(string => uint256) channelsOnSale;\r\n    mapping(string => string) metadataChannel;\r\n    mapping(address => string) metadataUser;\r\n    mapping(address => uint256) ranks;\r\n    \r\n    // Events\r\n    event MessageSent(address from, address to, uint256 bonus, string messageContent, string messageTitle, uint256 timestamp);\r\n    event MessageSentToChannel(address from, string channel, string messageContent, uint256 timestamp);\r\n    event pricePerMessageChanged(uint256 lastOne, uint256 newOne);\r\n    event priceCreatingChannelChanged(uint256 lastOne, uint256 newOne);\r\n    event ChannelBought(string channelName, address buyer, address seller);\r\n    event ChannelCreated(string channelName, address creator);\r\n    \r\n    function Redvolution() {\r\n        owner = msg.sender;\r\n        balances[msg.sender] = _totalSupply;\r\n        channelOwner[\"general\"] = owner;\r\n        channelOwner[\"General\"] = owner;\r\n        channelOwner[\"redvolution\"] = owner;\r\n        channelOwner[\"Redvolution\"] = owner;\r\n        channelOwner[\"REDV\"] = owner;\r\n    }\r\n    \r\n    function sendMessage(address to, string messageContent, string messageTitle, uint256 amountBonusToken){\r\n        assert(bytes(messageContent).length <= maxCharacters);\r\n        transfer(to,amountBonusToken+pricePerMessage);\r\n        MessageSent(msg.sender,to,amountBonusToken,messageContent,messageTitle,block.timestamp);\r\n    }\r\n    \r\n    function sendMultipleMessages(address[] to, string messageContent, string messageTitle, uint256 amountBonusToken){\r\n        for(uint i=0;i<to.length;i++){\r\n            sendMessage(to[i],messageContent,messageTitle,amountBonusToken);\r\n        }\r\n    }\r\n    \r\n    function sendMessageToChannel(string channelName, string messageContent){ // only owners can send messages to channels\r\n        assert(bytes(messageContent).length <= maxCharacters);\r\n        assert(bytes(channelName).length <= channelMaxSize);\r\n        assert(msg.sender == channelOwner[channelName]);\r\n        \r\n        MessageSentToChannel(msg.sender,channelName,messageContent, block.timestamp);\r\n    }\r\n    \r\n    /**\r\n     * Sales of Channels \r\n     */\r\n     \r\n    function sellChannel(string channelName, uint256 price){\r\n        assert(bytes(channelName).length <= channelMaxSize);\r\n        assert(channelOwner[channelName] != 0);\r\n        assert(msg.sender == channelOwner[channelName]);\r\n        \r\n        channelsOnSale[channelName] = price;\r\n    } \r\n    \r\n    function buyChannel(string channelName){\r\n        assert(bytes(channelName).length <= channelMaxSize);\r\n        assert(channelsOnSale[channelName] > 0);\r\n        assert(channelOwner[channelName] != 0);\r\n        \r\n        transfer(channelOwner[channelName],channelsOnSale[channelName]);\r\n        \r\n        ChannelBought(channelName,msg.sender,channelOwner[channelName]);\r\n        channelOwner[channelName] = msg.sender;\r\n        channelsOnSale[channelName] = 0;\r\n    }\r\n    \r\n    function createChannel(string channelName){\r\n        assert(channelOwner[channelName] == 0);\r\n        assert(bytes(channelName).length <= channelMaxSize);\r\n        \r\n        burn(priceCreatingChannel);\r\n        channelOwner[channelName] = msg.sender;\r\n        ChannelCreated(channelName,msg.sender);\r\n    }\r\n    \r\n    /**\r\n     * General setters\r\n     */\r\n     \r\n    function setMetadataUser(string metadata) {\r\n        assert(bytes(metadata).length <= metadataSize);\r\n        metadataUser[msg.sender] = metadata;    \r\n    }\r\n    \r\n    function setMetadataChannels(string channelName, string metadata){ // metadata can be used for a lot of things such as redirection or displaying an image\r\n        assert(msg.sender == channelOwner[channelName]);\r\n        assert(bytes(metadata).length <= metadataSize);\r\n        \r\n        metadataChannel[channelName] = metadata;\r\n    }\r\n    \r\n    /**\r\n     * General getters\r\n     */\r\n    \r\n    function getOwner(string channel) constant returns(address ownerOfChannel){\r\n        return channelOwner[channel];\r\n    }\r\n    \r\n    function getPriceChannel(string channel) constant returns(uint256 price){\r\n        return channelsOnSale[channel];\r\n    }\r\n    \r\n    function getMetadataChannel(string channel) constant returns(string metadataOfChannel){\r\n        return metadataChannel[channel];\r\n    }\r\n    \r\n    function getMetadataUser(address user) constant returns(string metadataOfUser){\r\n        return metadataUser[user];\r\n    }\r\n    \r\n    function getRank(address user) constant returns(uint256){\r\n        return ranks[user];\r\n    }\r\n    \r\n    /**\r\n     * Update the constants of the network if necessary\r\n     */\r\n    \r\n    function setPricePerMessage(uint256 newPrice) onlyOwner {\r\n        pricePerMessageChanged(pricePerMessage,newPrice);\r\n        pricePerMessage = newPrice;\r\n    }\r\n    \r\n    function setPriceCreatingChannel(uint256 newPrice) onlyOwner {\r\n        priceCreatingChannelChanged(priceCreatingChannel,newPrice);\r\n        priceCreatingChannel = newPrice;\r\n    }\r\n    \r\n    function setPriceChannelMaxSize(uint256 newSize) onlyOwner {\r\n        channelMaxSize = newSize;\r\n    }\r\n    \r\n    function setMetadataSize(uint256 newSize) onlyOwner {\r\n        metadataSize = newSize;\r\n    }\r\n    \r\n    function setMaxCharacters(uint256 newMax) onlyOwner {\r\n        maxCharacters = newMax;\r\n    }\r\n    \r\n    function setSymbol(string newSymbol) onlyOwner {\r\n        symbol = newSymbol;\r\n    }\r\n    \r\n    function setName(string newName) onlyOwner {\r\n        name = newName;\r\n    }\r\n    \r\n    function setRank(address user, uint256 newRank) onlyOwner {\r\n        ranks[user] = newRank;\r\n    }\r\n    \r\n    /**\r\n     * Others\r\n     */\r\n     \r\n    function burn(uint256 amount){\r\n        balances[msg.sender] = safeSub(balances[msg.sender],amount);\r\n        _totalSupply = safeSub(_totalSupply,amount);\r\n    }\r\n    \r\n    /**\r\n     * ERC20 functions\r\n     */\r\n    \r\n    function totalSupply() constant returns (uint256 totalSupply) {\r\n        totalSupply = _totalSupply;\r\n    }\r\n  \r\n    function balanceOf(address _owner) constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n \r\n    function transfer(address _to, uint256 _amount) returns (bool success) {\r\n        if (balances[msg.sender] >= _amount \r\n            && _amount > 0\r\n            && balances[_to] + _amount > balances[_to]) {\r\n            balances[msg.sender] = safeSub(balances[msg.sender],_amount);\r\n            balances[_to] = safeAdd(balances[_to],_amount);\r\n            Transfer(msg.sender, _to, _amount);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n     \r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _amount\r\n    ) returns (bool success) {\r\n        if (balances[_from] >= _amount\r\n            && allowed[_from][msg.sender] >= _amount\r\n            && _amount > 0\r\n            && balances[_to] + _amount > balances[_to]) {\r\n            allowed[_from][msg.sender] = safeSub(allowed[_from][msg.sender],_amount);\r\n            balances[_from] = safeSub(balances[_from],_amount);\r\n            balances[_to] = safeAdd(balances[_to],_amount);\r\n            Transfer(_from, _to, _amount);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n \r\n    function approve(address _spender, uint256 _amount) returns (bool success) {\r\n        allowed[msg.sender][_spender] = _amount;\r\n        Approval(msg.sender, _spender, _amount);\r\n        return true;\r\n    }\r\n  \r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n    \r\n    /**\r\n    * @dev Transfer an _amount to multiple addresses, used for airdrop\r\n    * @param _amount The amount to be transfered\r\n    * @param addresses The array of addresses to which the tokens will be sent\r\n    */\r\n    function transferMultiple(uint256 _amount, address[] addresses) onlyOwner {\r\n        for (uint i = 0; i < addresses.length; i++) {\r\n            transfer(addresses[i],_amount);\r\n        }\r\n    }\r\n    \r\n    function transferMultipleDifferentValues(uint256[] amounts, address[] addresses) onlyOwner {\r\n        assert(amounts.length == addresses.length);\r\n        for (uint i = 0; i < addresses.length; i++) {\r\n            transfer(addresses[i],amounts[i]);\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"newSize\",\"type\":\"uint256\"}],\"name\":\"setMetadataSize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"metadataSize\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"messageContent\",\"type\":\"string\"},{\"name\":\"messageTitle\",\"type\":\"string\"},{\"name\":\"amountBonusToken\",\"type\":\"uint256\"}],\"name\":\"sendMessage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pricePerMessage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"setPriceCreatingChannel\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"channel\",\"type\":\"string\"}],\"name\":\"getOwner\",\"outputs\":[{\"name\":\"ownerOfChannel\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getRank\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getMetadataUser\",\"outputs\":[{\"name\":\"metadataOfUser\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"metadata\",\"type\":\"string\"}],\"name\":\"setMetadataUser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"channelName\",\"type\":\"string\"},{\"name\":\"metadata\",\"type\":\"string\"}],\"name\":\"setMetadataChannels\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"name\":\"addresses\",\"type\":\"address[]\"}],\"name\":\"transferMultipleDifferentValues\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newMax\",\"type\":\"uint256\"}],\"name\":\"setMaxCharacters\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"channelName\",\"type\":\"string\"}],\"name\":\"buyChannel\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxCharacters\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"channel\",\"type\":\"string\"}],\"name\":\"getPriceChannel\",\"outputs\":[{\"name\":\"price\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"addresses\",\"type\":\"address[]\"}],\"name\":\"transferMultiple\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"channelName\",\"type\":\"string\"},{\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"sellChannel\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"channelMaxSize\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"setPricePerMessage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newSymbol\",\"type\":\"string\"}],\"name\":\"setSymbol\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newSize\",\"type\":\"uint256\"}],\"name\":\"setPriceChannelMaxSize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newName\",\"type\":\"string\"}],\"name\":\"setName\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"channel\",\"type\":\"string\"}],\"name\":\"getMetadataChannel\",\"outputs\":[{\"name\":\"metadataOfChannel\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"channelName\",\"type\":\"string\"}],\"name\":\"createChannel\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"priceCreatingChannel\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"newRank\",\"type\":\"uint256\"}],\"name\":\"setRank\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address[]\"},{\"name\":\"messageContent\",\"type\":\"string\"},{\"name\":\"messageTitle\",\"type\":\"string\"},{\"name\":\"amountBonusToken\",\"type\":\"uint256\"}],\"name\":\"sendMultipleMessages\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"channelName\",\"type\":\"string\"},{\"name\":\"messageContent\",\"type\":\"string\"}],\"name\":\"sendMessageToChannel\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"bonus\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"messageContent\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"messageTitle\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"MessageSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"channel\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"messageContent\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"MessageSentToChannel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"lastOne\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newOne\",\"type\":\"uint256\"}],\"name\":\"pricePerMessageChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"lastOne\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newOne\",\"type\":\"uint256\"}],\"name\":\"priceCreatingChannelChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"channelName\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"seller\",\"type\":\"address\"}],\"name\":\"ChannelBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"channelName\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"creator\",\"type\":\"address\"}],\"name\":\"ChannelCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"Redvolution","CompilerVersion":"v0.4.17+commit.bdeb9e52","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://727bc91e67ad5b5821b787182899100b3eb7c7c2e0429c94ad611f9a69deae22"}]}