{"status":"1","message":"OK","result":[{"SourceCode":"/* Author: Victor Mezrin  victor@mezrin.com */\r\n\r\npragma solidity ^0.4.18;\r\n\r\n\r\n\r\n/**\r\n * @title CommonModifiers\r\n * @dev Base contract which contains common checks.\r\n */\r\ncontract CommonModifiersInterface {\r\n\r\n  /**\r\n   * @dev Assemble the given address bytecode. If bytecode exists then the _addr is a contract.\r\n   */\r\n  function isContract(address _targetAddress) internal constant returns (bool);\r\n\r\n  /**\r\n   * @dev modifier to allow actions only when the _targetAddress is a contract.\r\n   */\r\n  modifier onlyContractAddress(address _targetAddress) {\r\n    require(isContract(_targetAddress) == true);\r\n    _;\r\n  }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title CommonModifiers\r\n * @dev Base contract which contains common checks.\r\n */\r\ncontract CommonModifiers is CommonModifiersInterface {\r\n\r\n  /**\r\n   * @dev Assemble the given address bytecode. If bytecode exists then the _addr is a contract.\r\n   */\r\n  function isContract(address _targetAddress) internal constant returns (bool) {\r\n    require (_targetAddress != address(0x0));\r\n\r\n    uint256 length;\r\n    assembly {\r\n      //retrieve the size of the code on target address, this needs assembly\r\n      length := extcodesize(_targetAddress)\r\n    }\r\n    return (length > 0);\r\n  }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title AssetIDInterface\r\n * @dev Interface of a contract that assigned to an asset (JNT, jUSD etc.)\r\n * @dev Contracts for the same asset (like JNT, jUSD etc.) will have the same AssetID.\r\n * @dev This will help to avoid misconfiguration of contracts\r\n */\r\ncontract AssetIDInterface {\r\n  function getAssetID() public constant returns (string);\r\n  function getAssetIDHash() public constant returns (bytes32);\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title AssetID\r\n * @dev Base contract implementing AssetIDInterface\r\n */\r\ncontract AssetID is AssetIDInterface {\r\n\r\n  /* Storage */\r\n\r\n  string assetID;\r\n\r\n\r\n  /* Constructor */\r\n\r\n  function AssetID(string _assetID) public {\r\n    require(bytes(_assetID).length > 0);\r\n\r\n    assetID = _assetID;\r\n  }\r\n\r\n\r\n  /* Getters */\r\n\r\n  function getAssetID() public constant returns (string) {\r\n    return assetID;\r\n  }\r\n\r\n  function getAssetIDHash() public constant returns (bytes32) {\r\n    return keccak256(assetID);\r\n  }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract OwnableInterface {\r\n\r\n  /**\r\n   * @dev The getter for \"owner\" contract variable\r\n   */\r\n  function getOwner() public constant returns (address);\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the current owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require (msg.sender == getOwner());\r\n    _;\r\n  }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable is OwnableInterface {\r\n\r\n  /* Storage */\r\n\r\n  address owner = address(0x0);\r\n  address proposedOwner = address(0x0);\r\n\r\n\r\n  /* Events */\r\n\r\n  event OwnerAssignedEvent(address indexed newowner);\r\n  event OwnershipOfferCreatedEvent(address indexed currentowner, address indexed proposedowner);\r\n  event OwnershipOfferAcceptedEvent(address indexed currentowner, address indexed proposedowner);\r\n  event OwnershipOfferCancelledEvent(address indexed currentowner, address indexed proposedowner);\r\n\r\n\r\n  /**\r\n   * @dev The constructor sets the initial `owner` to the passed account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n\r\n    OwnerAssignedEvent(owner);\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Old owner requests transfer ownership to the new owner.\r\n   * @param _proposedOwner The address to transfer ownership to.\r\n   */\r\n  function createOwnershipOffer(address _proposedOwner) external onlyOwner {\r\n    require (proposedOwner == address(0x0));\r\n    require (_proposedOwner != address(0x0));\r\n    require (_proposedOwner != address(this));\r\n\r\n    proposedOwner = _proposedOwner;\r\n\r\n    OwnershipOfferCreatedEvent(owner, _proposedOwner);\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the new owner to accept an ownership offer to contract control.\r\n   */\r\n  //noinspection UnprotectedFunction\r\n  function acceptOwnershipOffer() external {\r\n    require (proposedOwner != address(0x0));\r\n    require (msg.sender == proposedOwner);\r\n\r\n    address _oldOwner = owner;\r\n    owner = proposedOwner;\r\n    proposedOwner = address(0x0);\r\n\r\n    OwnerAssignedEvent(owner);\r\n    OwnershipOfferAcceptedEvent(_oldOwner, owner);\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Old owner cancels transfer ownership to the new owner.\r\n   */\r\n  function cancelOwnershipOffer() external {\r\n    require (proposedOwner != address(0x0));\r\n    require (msg.sender == owner || msg.sender == proposedOwner);\r\n\r\n    address _oldProposedOwner = proposedOwner;\r\n    proposedOwner = address(0x0);\r\n\r\n    OwnershipOfferCancelledEvent(owner, _oldProposedOwner);\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev The getter for \"owner\" contract variable\r\n   */\r\n  function getOwner() public constant returns (address) {\r\n    return owner;\r\n  }\r\n\r\n  /**\r\n   * @dev The getter for \"proposedOwner\" contract variable\r\n   */\r\n  function getProposedOwner() public constant returns (address) {\r\n    return proposedOwner;\r\n  }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title ManageableInterface\r\n * @dev Contract that allows to grant permissions to any address\r\n * @dev In real life we are no able to perform all actions with just one Ethereum address\r\n * @dev because risks are too high.\r\n * @dev Instead owner delegates rights to manage an contract to the different addresses and\r\n * @dev stay able to revoke permissions at any time.\r\n */\r\ncontract ManageableInterface {\r\n\r\n  /**\r\n   * @dev Function to check if the manager can perform the action or not\r\n   * @param _manager        address Manager`s address\r\n   * @param _permissionName string  Permission name\r\n   * @return True if manager is enabled and has been granted needed permission\r\n   */\r\n  function isManagerAllowed(address _manager, string _permissionName) public constant returns (bool);\r\n\r\n  /**\r\n   * @dev Modifier to use in derived contracts\r\n   */\r\n  modifier onlyAllowedManager(string _permissionName) {\r\n    require(isManagerAllowed(msg.sender, _permissionName) == true);\r\n    _;\r\n  }\r\n}\r\n\r\n\r\n\r\ncontract Manageable is OwnableInterface,\r\n                       ManageableInterface {\r\n\r\n  /* Storage */\r\n\r\n  mapping (address => bool) managerEnabled;  // hard switch for a manager - on/off\r\n  mapping (address => mapping (string => bool)) managerPermissions;  // detailed info about manager`s permissions\r\n\r\n\r\n  /* Events */\r\n\r\n  event ManagerEnabledEvent(address indexed manager);\r\n  event ManagerDisabledEvent(address indexed manager);\r\n  event ManagerPermissionGrantedEvent(address indexed manager, string permission);\r\n  event ManagerPermissionRevokedEvent(address indexed manager, string permission);\r\n\r\n\r\n  /* Configure contract */\r\n\r\n  /**\r\n   * @dev Function to add new manager\r\n   * @param _manager address New manager\r\n   */\r\n  function enableManager(address _manager) external onlyOwner onlyValidManagerAddress(_manager) {\r\n    require(managerEnabled[_manager] == false);\r\n\r\n    managerEnabled[_manager] = true;\r\n    ManagerEnabledEvent(_manager);\r\n  }\r\n\r\n  /**\r\n   * @dev Function to remove existing manager\r\n   * @param _manager address Existing manager\r\n   */\r\n  function disableManager(address _manager) external onlyOwner onlyValidManagerAddress(_manager) {\r\n    require(managerEnabled[_manager] == true);\r\n\r\n    managerEnabled[_manager] = false;\r\n    ManagerDisabledEvent(_manager);\r\n  }\r\n\r\n  /**\r\n   * @dev Function to grant new permission to the manager\r\n   * @param _manager        address Existing manager\r\n   * @param _permissionName string  Granted permission name\r\n   */\r\n  function grantManagerPermission(\r\n    address _manager, string _permissionName\r\n  )\r\n    external\r\n    onlyOwner\r\n    onlyValidManagerAddress(_manager)\r\n    onlyValidPermissionName(_permissionName)\r\n  {\r\n    require(managerPermissions[_manager][_permissionName] == false);\r\n\r\n    managerPermissions[_manager][_permissionName] = true;\r\n    ManagerPermissionGrantedEvent(_manager, _permissionName);\r\n  }\r\n\r\n  /**\r\n   * @dev Function to revoke permission of the manager\r\n   * @param _manager        address Existing manager\r\n   * @param _permissionName string  Revoked permission name\r\n   */\r\n  function revokeManagerPermission(\r\n    address _manager, string _permissionName\r\n  )\r\n    external\r\n    onlyOwner\r\n    onlyValidManagerAddress(_manager)\r\n    onlyValidPermissionName(_permissionName)\r\n  {\r\n    require(managerPermissions[_manager][_permissionName] == true);\r\n\r\n    managerPermissions[_manager][_permissionName] = false;\r\n    ManagerPermissionRevokedEvent(_manager, _permissionName);\r\n  }\r\n\r\n\r\n  /* Getters */\r\n\r\n  /**\r\n   * @dev Function to check manager status\r\n   * @param _manager address Manager`s address\r\n   * @return True if manager is enabled\r\n   */\r\n  function isManagerEnabled(\r\n    address _manager\r\n  )\r\n    public\r\n    constant\r\n    onlyValidManagerAddress(_manager)\r\n    returns (bool)\r\n  {\r\n    return managerEnabled[_manager];\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check permissions of a manager\r\n   * @param _manager        address Manager`s address\r\n   * @param _permissionName string  Permission name\r\n   * @return True if manager has been granted needed permission\r\n   */\r\n  function isPermissionGranted(\r\n    address _manager, string _permissionName\r\n  )\r\n    public\r\n    constant\r\n    onlyValidManagerAddress(_manager)\r\n    onlyValidPermissionName(_permissionName)\r\n    returns (bool)\r\n  {\r\n    return managerPermissions[_manager][_permissionName];\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check if the manager can perform the action or not\r\n   * @param _manager        address Manager`s address\r\n   * @param _permissionName string  Permission name\r\n   * @return True if manager is enabled and has been granted needed permission\r\n   */\r\n  function isManagerAllowed(\r\n    address _manager, string _permissionName\r\n  )\r\n    public\r\n    constant\r\n    onlyValidManagerAddress(_manager)\r\n    onlyValidPermissionName(_permissionName)\r\n    returns (bool)\r\n  {\r\n    return (managerEnabled[_manager] && managerPermissions[_manager][_permissionName]);\r\n  }\r\n\r\n\r\n  /* Helpers */\r\n\r\n  /**\r\n   * @dev Modifier to check manager address\r\n   */\r\n  modifier onlyValidManagerAddress(address _manager) {\r\n    require(_manager != address(0x0));\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to check name of manager permission\r\n   */\r\n  modifier onlyValidPermissionName(string _permissionName) {\r\n    require(bytes(_permissionName).length != 0);\r\n    _;\r\n  }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title PausableInterface\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n * @dev Based on zeppelin's Pausable, but integrated with Manageable\r\n * @dev Contract is in paused state by default and should be explicitly unlocked\r\n */\r\ncontract PausableInterface {\r\n\r\n  /**\r\n   * Events\r\n   */\r\n\r\n  event PauseEvent();\r\n  event UnpauseEvent();\r\n\r\n\r\n  /**\r\n   * @dev called by the manager to pause, triggers stopped state\r\n   */\r\n  function pauseContract() public;\r\n\r\n  /**\r\n   * @dev called by the manager to unpause, returns to normal state\r\n   */\r\n  function unpauseContract() public;\r\n\r\n  /**\r\n   * @dev The getter for \"paused\" contract variable\r\n   */\r\n  function getPaused() public constant returns (bool);\r\n\r\n\r\n  /**\r\n   * @dev modifier to allow actions only when the contract IS paused\r\n   */\r\n  modifier whenContractNotPaused() {\r\n    require(getPaused() == false);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev modifier to allow actions only when the contract IS NOT paused\r\n   */\r\n  modifier whenContractPaused {\r\n    require(getPaused() == true);\r\n    _;\r\n  }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n * @dev Based on zeppelin's Pausable, but integrated with Manageable\r\n * @dev Contract is in paused state by default and should be explicitly unlocked\r\n */\r\ncontract Pausable is ManageableInterface,\r\n                     PausableInterface {\r\n\r\n  /**\r\n   * Storage\r\n   */\r\n\r\n  bool paused = true;\r\n\r\n\r\n  /**\r\n   * @dev called by the manager to pause, triggers stopped state\r\n   */\r\n  function pauseContract() public onlyAllowedManager('pause_contract') whenContractNotPaused {\r\n    paused = true;\r\n    PauseEvent();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the manager to unpause, returns to normal state\r\n   */\r\n  function unpauseContract() public onlyAllowedManager('unpause_contract') whenContractPaused {\r\n    paused = false;\r\n    UnpauseEvent();\r\n  }\r\n\r\n  /**\r\n   * @dev The getter for \"paused\" contract variable\r\n   */\r\n  function getPaused() public constant returns (bool) {\r\n    return paused;\r\n  }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title BytecodeExecutorInterface interface\r\n * @dev Implementation of a contract that execute any bytecode on behalf of the contract\r\n * @dev Last resort for the immutable and not-replaceable contract :)\r\n */\r\ncontract BytecodeExecutorInterface {\r\n\r\n  /* Events */\r\n\r\n  event CallExecutedEvent(address indexed target,\r\n                          uint256 suppliedGas,\r\n                          uint256 ethValue,\r\n                          bytes32 transactionBytecodeHash);\r\n  event DelegatecallExecutedEvent(address indexed target,\r\n                                  uint256 suppliedGas,\r\n                                  bytes32 transactionBytecodeHash);\r\n\r\n\r\n  /* Functions */\r\n\r\n  function executeCall(address _target, uint256 _suppliedGas, uint256 _ethValue, bytes _transactionBytecode) external;\r\n  function executeDelegatecall(address _target, uint256 _suppliedGas, bytes _transactionBytecode) external;\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title BytecodeExecutor\r\n * @dev Implementation of a contract that execute any bytecode on behalf of the contract\r\n * @dev Last resort for the immutable and not-replaceable contract :)\r\n */\r\ncontract BytecodeExecutor is ManageableInterface,\r\n                             BytecodeExecutorInterface {\r\n\r\n  /* Storage */\r\n\r\n  bool underExecution = false;\r\n\r\n\r\n  /* BytecodeExecutorInterface */\r\n\r\n  function executeCall(\r\n    address _target,\r\n    uint256 _suppliedGas,\r\n    uint256 _ethValue,\r\n    bytes _transactionBytecode\r\n  )\r\n    external\r\n    onlyAllowedManager('execute_call')\r\n  {\r\n    require(underExecution == false);\r\n\r\n    underExecution = true; // Avoid recursive calling\r\n    _target.call.gas(_suppliedGas).value(_ethValue)(_transactionBytecode);\r\n    underExecution = false;\r\n\r\n    CallExecutedEvent(_target, _suppliedGas, _ethValue, keccak256(_transactionBytecode));\r\n  }\r\n\r\n  function executeDelegatecall(\r\n    address _target,\r\n    uint256 _suppliedGas,\r\n    bytes _transactionBytecode\r\n  )\r\n    external\r\n    onlyAllowedManager('execute_delegatecall')\r\n  {\r\n    require(underExecution == false);\r\n\r\n    underExecution = true; // Avoid recursive calling\r\n    _target.delegatecall.gas(_suppliedGas)(_transactionBytecode);\r\n    underExecution = false;\r\n\r\n    DelegatecallExecutedEvent(_target, _suppliedGas, keccak256(_transactionBytecode));\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title CrydrControllerERC20Interface interface\r\n * @dev Interface of a contract that implement business-logic of an ERC20 CryDR\r\n */\r\ncontract CrydrControllerERC20Interface {\r\n\r\n  /* ERC20 support. _msgsender - account that invoked CrydrView */\r\n\r\n  function transfer(address _msgsender, address _to, uint256 _value) public;\r\n  function getTotalSupply() public constant returns (uint256);\r\n  function getBalance(address _owner) public constant returns (uint256);\r\n\r\n  function approve(address _msgsender, address _spender, uint256 _value) public;\r\n  function transferFrom(address _msgsender, address _from, address _to, uint256 _value) public;\r\n  function getAllowance(address _owner, address _spender) public constant returns (uint256);\r\n}\r\n\r\n\r\n\r\n\r\n\r\ncontract CrydrViewBaseInterface {\r\n\r\n  /* Events */\r\n\r\n  event CrydrControllerChangedEvent(address indexed crydrcontroller);\r\n\r\n\r\n  /* Configuration */\r\n\r\n  function setCrydrController(address _crydrController) external;\r\n  function getCrydrController() public constant returns (address);\r\n\r\n  function getCrydrViewStandardName() public constant returns (string);\r\n  function getCrydrViewStandardNameHash() public constant returns (bytes32);\r\n}\r\n\r\n\r\n\r\ncontract CrydrViewBase is CommonModifiersInterface,\r\n                          AssetIDInterface,\r\n                          ManageableInterface,\r\n                          PausableInterface,\r\n                          CrydrViewBaseInterface {\r\n\r\n  /* Storage */\r\n\r\n  address crydrController = address(0x0);\r\n  string crydrViewStandardName = '';\r\n\r\n\r\n  /* Constructor */\r\n\r\n  function CrydrViewBase(string _crydrViewStandardName) public {\r\n    require(bytes(_crydrViewStandardName).length > 0);\r\n\r\n    crydrViewStandardName = _crydrViewStandardName;\r\n  }\r\n\r\n\r\n  /* CrydrViewBaseInterface */\r\n\r\n  function setCrydrController(\r\n    address _crydrController\r\n  )\r\n    external\r\n    onlyContractAddress(_crydrController)\r\n    onlyAllowedManager('set_crydr_controller')\r\n    whenContractPaused\r\n  {\r\n    require(crydrController != _crydrController);\r\n\r\n    crydrController = _crydrController;\r\n    CrydrControllerChangedEvent(_crydrController);\r\n  }\r\n\r\n  function getCrydrController() public constant returns (address) {\r\n    return crydrController;\r\n  }\r\n\r\n\r\n  function getCrydrViewStandardName() public constant returns (string) {\r\n    return crydrViewStandardName;\r\n  }\r\n\r\n  function getCrydrViewStandardNameHash() public constant returns (bytes32) {\r\n    return keccak256(crydrViewStandardName);\r\n  }\r\n\r\n\r\n  /* PausableInterface */\r\n\r\n  /**\r\n   * @dev Override method to ensure that contract properly configured before it is unpaused\r\n   */\r\n  function unpauseContract() public {\r\n    require(isContract(crydrController) == true);\r\n    require(getAssetIDHash() == AssetIDInterface(crydrController).getAssetIDHash());\r\n\r\n    super.unpauseContract();\r\n  }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title CrydrViewERC20Interface\r\n * @dev ERC20 interface to use in applications\r\n */\r\ncontract CrydrViewERC20Interface {\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n  function transfer(address _to, uint256 _value) external returns (bool);\r\n  function totalSupply() external constant returns (uint256);\r\n  function balanceOf(address _owner) external constant returns (uint256);\r\n\r\n  function approve(address _spender, uint256 _value) external returns (bool);\r\n  function transferFrom(address _from, address _to, uint256 _value) external returns (bool);\r\n  function allowance(address _owner, address _spender) external constant returns (uint256);\r\n}\r\n\r\n\r\n\r\ncontract CrydrViewERC20 is PausableInterface,\r\n                           CrydrViewBaseInterface,\r\n                           CrydrViewERC20Interface {\r\n\r\n  /* ERC20Interface */\r\n\r\n  function transfer(\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    external\r\n    whenContractNotPaused\r\n    onlyPayloadSize(2 * 32)\r\n    returns (bool)\r\n  {\r\n    CrydrControllerERC20Interface(getCrydrController()).transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  function totalSupply() external constant returns (uint256) {\r\n    return CrydrControllerERC20Interface(getCrydrController()).getTotalSupply();\r\n  }\r\n\r\n  function balanceOf(address _owner) external constant onlyPayloadSize(1 * 32) returns (uint256) {\r\n    return CrydrControllerERC20Interface(getCrydrController()).getBalance(_owner);\r\n  }\r\n\r\n\r\n  function approve(\r\n    address _spender,\r\n    uint256 _value\r\n  )\r\n    external\r\n    whenContractNotPaused\r\n    onlyPayloadSize(2 * 32)\r\n    returns (bool)\r\n  {\r\n    CrydrControllerERC20Interface(getCrydrController()).approve(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    external\r\n    whenContractNotPaused\r\n    onlyPayloadSize(3 * 32)\r\n    returns (bool)\r\n  {\r\n    CrydrControllerERC20Interface(getCrydrController()).transferFrom(msg.sender, _from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  function allowance(\r\n    address _owner,\r\n    address _spender\r\n  )\r\n    external\r\n    constant\r\n    onlyPayloadSize(2 * 32)\r\n    returns (uint256)\r\n  {\r\n    return CrydrControllerERC20Interface(getCrydrController()).getAllowance(_owner, _spender);\r\n  }\r\n\r\n\r\n  /* Helpers */\r\n\r\n  /**\r\n   * @dev Fix for the ERC20 short address attack.\r\n   */\r\n  modifier onlyPayloadSize(uint256 size) {\r\n    require(msg.data.length == (size + 4));\r\n    _;\r\n  }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title CrydrViewERC20LoggableInterface\r\n * @dev Contract is able to create Transfer/Approval events with the cal from controller\r\n */\r\ncontract CrydrViewERC20LoggableInterface {\r\n\r\n  function emitTransferEvent(address _from, address _to, uint256 _value) external;\r\n  function emitApprovalEvent(address _owner, address _spender, uint256 _value) external;\r\n}\r\n\r\n\r\n\r\ncontract CrydrViewERC20Loggable is PausableInterface,\r\n                                   CrydrViewBaseInterface,\r\n                                   CrydrViewERC20Interface,\r\n                                   CrydrViewERC20LoggableInterface {\r\n\r\n  function emitTransferEvent(\r\n    address _from,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    external\r\n  {\r\n    require(msg.sender == getCrydrController());\r\n\r\n    Transfer(_from, _to, _value);\r\n  }\r\n\r\n  function emitApprovalEvent(\r\n    address _owner,\r\n    address _spender,\r\n    uint256 _value\r\n  )\r\n    external\r\n  {\r\n    require(msg.sender == getCrydrController());\r\n\r\n    Approval(_owner, _spender, _value);\r\n  }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title CrydrViewERC20MintableInterface\r\n * @dev Contract is able to create Mint/Burn events with the cal from controller\r\n */\r\ncontract CrydrViewERC20MintableInterface {\r\n  event MintEvent(address indexed owner, uint256 value);\r\n  event BurnEvent(address indexed owner, uint256 value);\r\n\r\n  function emitMintEvent(address _owner, uint256 _value) external;\r\n  function emitBurnEvent(address _owner, uint256 _value) external;\r\n}\r\n\r\n\r\n\r\ncontract CrydrViewERC20Mintable is PausableInterface,\r\n                                   CrydrViewBaseInterface,\r\n                                   CrydrViewERC20MintableInterface {\r\n\r\n  function emitMintEvent(\r\n    address _owner,\r\n    uint256 _value\r\n  )\r\n    external\r\n  {\r\n    require(msg.sender == getCrydrController());\r\n\r\n    MintEvent(_owner, _value);\r\n  }\r\n\r\n  function emitBurnEvent(\r\n    address _owner,\r\n    uint256 _value\r\n  )\r\n    external\r\n  {\r\n    require(msg.sender == getCrydrController());\r\n\r\n    BurnEvent(_owner, _value);\r\n  }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title CrydrViewERC20NamedInterface\r\n * @dev Contract is able to set name/symbol/decimals\r\n */\r\ncontract CrydrViewERC20NamedInterface {\r\n\r\n  function name() external constant returns (string);\r\n  function symbol() external constant returns (string);\r\n  function decimals() external constant returns (uint8);\r\n\r\n  function getNameHash() external constant returns (bytes32);\r\n  function getSymbolHash() external constant returns (bytes32);\r\n\r\n  function setName(string _name) external;\r\n  function setSymbol(string _symbol) external;\r\n  function setDecimals(uint8 _decimals) external;\r\n}\r\n\r\n\r\n\r\ncontract CrydrViewERC20Named is ManageableInterface,\r\n                                PausableInterface,\r\n                                CrydrViewERC20NamedInterface {\r\n\r\n  /* Storage */\r\n\r\n  string tokenName = '';\r\n  string tokenSymbol = '';\r\n  uint8 tokenDecimals = 0;\r\n\r\n\r\n  /* Constructor */\r\n\r\n  function CrydrViewERC20Named(string _name, string _symbol, uint8 _decimals) public {\r\n    require(bytes(_name).length > 0);\r\n    require(bytes(_symbol).length > 0);\r\n\r\n    tokenName = _name;\r\n    tokenSymbol = _symbol;\r\n    tokenDecimals = _decimals;\r\n  }\r\n\r\n\r\n  /* CrydrViewERC20NamedInterface */\r\n\r\n  function name() external constant returns (string) {\r\n    return tokenName;\r\n  }\r\n\r\n  function symbol() external constant returns (string) {\r\n    return tokenSymbol;\r\n  }\r\n\r\n  function decimals() external constant returns (uint8) {\r\n    return tokenDecimals;\r\n  }\r\n\r\n\r\n  function getNameHash() external constant returns (bytes32){\r\n    return keccak256(tokenName);\r\n  }\r\n\r\n  function getSymbolHash() external constant returns (bytes32){\r\n    return keccak256(tokenSymbol);\r\n  }\r\n\r\n\r\n  function setName(\r\n    string _name\r\n  )\r\n    external\r\n    whenContractPaused\r\n    onlyAllowedManager('set_crydr_name')\r\n  {\r\n    require(bytes(_name).length > 0);\r\n\r\n    tokenName = _name;\r\n  }\r\n\r\n  function setSymbol(\r\n    string _symbol\r\n  )\r\n    external\r\n    whenContractPaused\r\n    onlyAllowedManager('set_crydr_symbol')\r\n  {\r\n    require(bytes(_symbol).length > 0);\r\n\r\n    tokenSymbol = _symbol;\r\n  }\r\n\r\n  function setDecimals(\r\n    uint8 _decimals\r\n  )\r\n    external\r\n    whenContractPaused\r\n    onlyAllowedManager('set_crydr_decimals')\r\n  {\r\n    tokenDecimals = _decimals;\r\n  }\r\n}\r\n\r\n\r\n\r\ncontract JCashCrydrViewERC20 is CommonModifiers,\r\n                                AssetID,\r\n                                Ownable,\r\n                                Manageable,\r\n                                Pausable,\r\n                                BytecodeExecutor,\r\n                                CrydrViewBase,\r\n                                CrydrViewERC20,\r\n                                CrydrViewERC20Loggable,\r\n                                CrydrViewERC20Mintable,\r\n                                CrydrViewERC20Named {\r\n\r\n  function JCashCrydrViewERC20(string _assetID, string _name, string _symbol, uint8 _decimals)\r\n    public\r\n    AssetID(_assetID)\r\n    CrydrViewBase('erc20')\r\n    CrydrViewERC20Named(_name, _symbol, _decimals)\r\n  { }\r\n}\r\n\r\n\r\n\r\ncontract JNTViewERC20 is JCashCrydrViewERC20 {\r\n  function JNTViewERC20() public JCashCrydrViewERC20('JNT', 'Jibrel Network Token', 'JNT', 18) {}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_manager\",\"type\":\"address\"},{\"name\":\"_permissionName\",\"type\":\"string\"}],\"name\":\"isManagerAllowed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cancelOwnershipOffer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCrydrViewStandardNameHash\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_crydrController\",\"type\":\"address\"}],\"name\":\"setCrydrController\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_manager\",\"type\":\"address\"},{\"name\":\"_permissionName\",\"type\":\"string\"}],\"name\":\"isPermissionGranted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pauseContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"enableManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPaused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAssetID\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSymbolHash\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_decimals\",\"type\":\"uint8\"}],\"name\":\"setDecimals\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_manager\",\"type\":\"address\"},{\"name\":\"_permissionName\",\"type\":\"string\"}],\"name\":\"revokeManagerPermission\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCrydrViewStandardName\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_manager\",\"type\":\"address\"},{\"name\":\"_permissionName\",\"type\":\"string\"}],\"name\":\"grantManagerPermission\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"},{\"name\":\"_suppliedGas\",\"type\":\"uint256\"},{\"name\":\"_ethValue\",\"type\":\"uint256\"},{\"name\":\"_transactionBytecode\",\"type\":\"bytes\"}],\"name\":\"executeCall\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"emitMintEvent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_proposedOwner\",\"type\":\"address\"}],\"name\":\"createOwnershipOffer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"isManagerEnabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"emitTransferEvent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAssetIDHash\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpauseContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"setSymbol\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"setName\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCrydrController\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"},{\"name\":\"_suppliedGas\",\"type\":\"uint256\"},{\"name\":\"_transactionBytecode\",\"type\":\"bytes\"}],\"name\":\"executeDelegatecall\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"disableManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getNameHash\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getProposedOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"emitBurnEvent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"emitApprovalEvent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnershipOffer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"MintEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"BurnEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"crydrcontroller\",\"type\":\"address\"}],\"name\":\"CrydrControllerChangedEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"suppliedGas\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ethValue\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"transactionBytecodeHash\",\"type\":\"bytes32\"}],\"name\":\"CallExecutedEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"suppliedGas\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"transactionBytecodeHash\",\"type\":\"bytes32\"}],\"name\":\"DelegatecallExecutedEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"PauseEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"UnpauseEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"ManagerEnabledEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"ManagerDisabledEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"manager\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"permission\",\"type\":\"string\"}],\"name\":\"ManagerPermissionGrantedEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"manager\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"permission\",\"type\":\"string\"}],\"name\":\"ManagerPermissionRevokedEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"newowner\",\"type\":\"address\"}],\"name\":\"OwnerAssignedEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"currentowner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"proposedowner\",\"type\":\"address\"}],\"name\":\"OwnershipOfferCreatedEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"currentowner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"proposedowner\",\"type\":\"address\"}],\"name\":\"OwnershipOfferAcceptedEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"currentowner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"proposedowner\",\"type\":\"address\"}],\"name\":\"OwnershipOfferCancelledEvent\",\"type\":\"event\"}]","ContractName":"JNTViewERC20","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://ec674e8d64e700bcb0909d4673514f7a296d8f89c8b59f5af0c4157895cdd18e"}]}