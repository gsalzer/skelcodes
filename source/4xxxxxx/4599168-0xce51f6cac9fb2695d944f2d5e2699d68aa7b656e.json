{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.15;\r\n\r\ncontract helper {\r\n    \r\n    function eccVerify(bytes32 hash, uint8 curve, bytes32 r, bytes32 s) \r\n        constant \r\n        returns(address publicKey) {\r\n        publicKey = ecrecover(hash, curve, r, s);\r\n    }\r\n    \r\n    function calcBindedBlindHash3(string key, address receiver) \r\n        constant returns(bytes32 lock) {\r\n        lock = sha3(sha3(key),receiver);\r\n    }\r\n    \r\n    function calcBindedBlindHash256(string key, address receiver) \r\n        constant returns(bytes32 lock) {\r\n        lock = sha256(sha256(key),receiver);\r\n    }\r\n    \r\n    function calcDoubleBindedBlindHash3(string key, address caller, address receiver) \r\n        constant returns(bytes32 lock) {\r\n        lock = sha3(sha3(sha3(key),caller),receiver);\r\n    }\r\n    \r\n    function calcDoubleBindedBlindHash256(string key, address caller, address receiver) \r\n        constant returns(bytes32 lock) {\r\n        lock = sha256(sha256(sha256(key),caller),receiver);\r\n    }\r\n    \r\n    function hash_sha256(string key, uint rounds) \r\n        constant returns(bytes32 sha256_hash) {\r\n        if (rounds == 0) rounds = 1;\r\n        sha256_hash = sha256(key);  \r\n        for (uint i = 0; i < rounds-1; i++) {\r\n            sha256_hash = sha256(sha256_hash);  \r\n        }\r\n    }\r\n    \r\n    function hash_sha3(string key, uint rounds)\r\n        constant returns(bytes32 sha3_hash) {\r\n        if (rounds == 0) rounds = 1;\r\n        sha3_hash = sha3(key);  \r\n        for (uint i = 0; i < rounds-1; i++) {\r\n            sha3_hash = sha3(sha3_hash);  \r\n        }\r\n    }\r\n    \r\n    function hash_ripemd160(string key, uint rounds)\r\n        constant returns(bytes32 r160_hash) {\r\n        if (rounds == 0) rounds = 1;\r\n        r160_hash = sha3(key);  \r\n        for (uint i = 0; i < rounds-1; i++) {\r\n            r160_hash = ripemd160(r160_hash);  \r\n        }\r\n    }\r\n}\r\ncontract owned {\r\n    address public owner;\r\n    \r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    \r\n    function owned() { owner = msg.sender; }\r\n}\r\n\r\ncontract logger {\r\n    \r\n    event Unlock(address caller, string key, bytes32 proof);\r\n    event Deposit(address from, uint value);\r\n    event LogEvent(\r\n        uint num_event,\r\n        address from, \r\n        bytes4 sig, \r\n        bytes msgdata, \r\n        uint time,\r\n        uint gasprice\r\n        );\r\n}\r\n\r\ncontract Locksmith is owned, logger, helper {\r\n    uint public nonce;\r\n    uint public m_proofs;\r\n    bool public didProve;\r\n    bytes32 public lock;\r\n    string public protocol = \"set by strong10, verify by strong7\";\r\n    \r\n    struct proof {\r\n        address prover;\r\n        address receiver;\r\n        string key;\r\n        bytes32 lock;\r\n    }\r\n    \r\n    mapping(uint => proof) public proofs;\r\n    \r\n    /* Constructor */\r\n    function Locksmith() {\r\n        owner = msg.sender;\r\n    }\r\n    \r\n    function setLock(bytes32 _lock, string _protocol) onlyOwner {\r\n        require(_lock != 0x0 && lock != _lock);\r\n        lock = _lock;\r\n        didProve = false;\r\n        if (bytes(_protocol).length > 0) protocol = _protocol;\r\n        logEvent();\r\n    }\r\n    \r\n    function unlock(string key, address receiver, bytes32 newLock, string _protocol) {\r\n        bytes32 k = sha3(sha3(key),msg.sender);\r\n        if (uint(receiver) > 0) k = sha3(k,receiver);\r\n        if (k == lock) {\r\n            if (uint(receiver) > 0) owner = receiver;\r\n            else owner = msg.sender;\r\n            \r\n            Unlock(msg.sender, key, lock);\r\n            \r\n            proofs[m_proofs].prover = msg.sender;\r\n            proofs[m_proofs].receiver = (uint(receiver) == 0 ? msg.sender:receiver);\r\n            proofs[m_proofs].key = key;\r\n            proofs[m_proofs].lock = lock;\r\n            m_proofs++;\r\n            lock = newLock;\r\n            didProve = (uint(newLock) == 0);\r\n            if (bytes(_protocol).length > 0) \r\n                protocol = _protocol;\r\n            if (this.balance > 0)\r\n                require(owner.send(this.balance));\r\n        }\r\n        logEvent();\r\n    }\r\n    \r\n    function sendTo(address _to, uint value) onlyOwner {\r\n        require(didProve);\r\n        require(this.balance >= value && value > 0);\r\n        require(_to.send(value));\r\n        logEvent();\r\n    }\r\n    \r\n    function logEvent() internal {\r\n        LogEvent(nonce++, msg.sender, msg.sig, msg.data, now, tx.gasprice);\r\n    }\r\n \r\n    function kill() onlyOwner { \r\n        require(didProve);\r\n        selfdestruct(owner); \r\n    }\r\n    \r\n    function() payable {\r\n        require(msg.value > 0);\r\n        Deposit(msg.sender, msg.value);\r\n    }\r\n    \r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"key\",\"type\":\"string\"},{\"name\":\"caller\",\"type\":\"address\"},{\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"calcDoubleBindedBlindHash3\",\"outputs\":[{\"name\":\"lock\",\"type\":\"bytes32\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"m_proofs\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"key\",\"type\":\"string\"},{\"name\":\"rounds\",\"type\":\"uint256\"}],\"name\":\"hash_ripemd160\",\"outputs\":[{\"name\":\"r160_hash\",\"type\":\"bytes32\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"key\",\"type\":\"string\"},{\"name\":\"caller\",\"type\":\"address\"},{\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"calcDoubleBindedBlindHash256\",\"outputs\":[{\"name\":\"lock\",\"type\":\"bytes32\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"key\",\"type\":\"string\"},{\"name\":\"receiver\",\"type\":\"address\"},{\"name\":\"newLock\",\"type\":\"bytes32\"},{\"name\":\"_protocol\",\"type\":\"string\"}],\"name\":\"unlock\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_lock\",\"type\":\"bytes32\"},{\"name\":\"_protocol\",\"type\":\"string\"}],\"name\":\"setLock\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"protocol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"key\",\"type\":\"string\"},{\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"calcBindedBlindHash256\",\"outputs\":[{\"name\":\"lock\",\"type\":\"bytes32\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proofs\",\"outputs\":[{\"name\":\"prover\",\"type\":\"address\"},{\"name\":\"receiver\",\"type\":\"address\"},{\"name\":\"key\",\"type\":\"string\"},{\"name\":\"lock\",\"type\":\"bytes32\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"sendTo\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"didProve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"hash\",\"type\":\"bytes32\"},{\"name\":\"curve\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"eccVerify\",\"outputs\":[{\"name\":\"publicKey\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nonce\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"key\",\"type\":\"string\"},{\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"calcBindedBlindHash3\",\"outputs\":[{\"name\":\"lock\",\"type\":\"bytes32\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"key\",\"type\":\"string\"},{\"name\":\"rounds\",\"type\":\"uint256\"}],\"name\":\"hash_sha3\",\"outputs\":[{\"name\":\"sha3_hash\",\"type\":\"bytes32\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lock\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"key\",\"type\":\"string\"},{\"name\":\"rounds\",\"type\":\"uint256\"}],\"name\":\"hash_sha256\",\"outputs\":[{\"name\":\"sha256_hash\",\"type\":\"bytes32\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"proof\",\"type\":\"bytes32\"}],\"name\":\"Unlock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"num_event\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"sig\",\"type\":\"bytes4\"},{\"indexed\":false,\"name\":\"msgdata\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"time\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"gasprice\",\"type\":\"uint256\"}],\"name\":\"LogEvent\",\"type\":\"event\"}]","ContractName":"Locksmith","CompilerVersion":"v0.4.15+commit.bbb8e64f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://dfc012ef0f2f35e3447e51862c21524ab6c92dad0957f4cddf3b734fb2a3b210"}]}