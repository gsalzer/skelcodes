{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\nfile:   Hut34ICO.sol\r\nver:    0.2.4_deploy\r\nauthor: Darryl Morris\r\ndate:   27-Oct-2017\r\nemail:  o0ragman0o AT gmail.com\r\n(c) Darryl Morris 2017\r\n\r\nA collated contract set for the receipt of funds and production and transfer\r\nof ERC20 tokens as specified by Hut34.\r\n\r\nLicense\r\n-------\r\nThis software is distributed in the hope that it will be useful,\r\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\r\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\r\nSee MIT Licence for further details.\r\n<https://opensource.org/licenses/MIT>.\r\n\r\nRelease Notes\r\n-------------\r\n* Added `event Aborted()`\r\n* correct `wholesaleLeft` magnitude bug\r\n* All tests passed\r\n\r\nDedications\r\n-------------\r\n* with love to Isabella and pea from your dad\r\n* xx to edie, robin, william and charlotte x\r\n*/\r\n\r\n\r\npragma solidity ^0.4.17;\r\n\r\n// Audited 27 October 2017 by Darryl Morris, Peter Godbolt\r\ncontract Hut34Config\r\n{\r\n    // ERC20 token name\r\n    string  public constant name            = \"Hut34 Entropy\";\r\n\r\n    // ERC20 trading symbol\r\n    string  public constant symbol          = \"ENT\";\r\n\r\n    // ERC20 decimal places\r\n    uint8   public constant decimals        = 18;\r\n\r\n    // Total supply (* in unit ENT *)\r\n    uint    public constant TOTAL_TOKENS    = 100000000;\r\n\r\n    // Contract owner at time of deployment.\r\n    address public constant OWNER           = 0xdA3780Cff2aE3a59ae16eC1734DEec77a7fd8db2;\r\n\r\n    // + new Date(\"00:00 2 November 2017 utc\")/1000\r\n    uint    public constant START_DATE      = 1509580800;\r\n\r\n    // A Hut34 address to own tokens\r\n    address public constant HUT34_RETAIN    = 0x3135F4acA3C1Ad4758981500f8dB20EbDc5A1caB;\r\n\r\n    // A Hut34 address to accept raised funds\r\n    address public constant HUT34_WALLET    = 0xA70d04dC4a64960c40CD2ED2CDE36D76CA4EDFaB;\r\n\r\n    // Percentage of tokens to be vested over 2 years. 20%\r\n    uint    public constant VESTED_PERCENT  = 20;\r\n\r\n    // Vesting period\r\n    uint    public constant VESTING_PERIOD  = 26 weeks;\r\n\r\n    // Minimum cap over which the funding is considered successful\r\n    uint    public constant MIN_CAP         = 3000 * 1 ether;\r\n\r\n    // An ether threshold over which a funder must KYC before tokens can be\r\n    // transferred (unit of ether);\r\n    uint    public constant KYC_THRESHOLD   = 150 * 1 ether;\r\n\r\n    // A minimum amount of ether funding before the concierge rate is applied\r\n    // to tokens\r\n    uint    public constant WHOLESALE_THRESHOLD  = 150 * 1 ether;\r\n\r\n    // Number of tokens up for wholesale purchasers (* in unit ENT *)\r\n    uint    public constant WHOLESALE_TOKENS = 12500000;\r\n\r\n    // Tokens sold to prefunders (* in unit ENT *)\r\n    uint    public constant PRESOLD_TOKENS  = 1817500;\r\n\r\n    // Presale ether is estimateed from fiat raised prior to ICO at the ETH/AUD\r\n    // rate at the time of contract deployment\r\n    uint    public constant PRESALE_ETH_RAISE = 2807 * 1 ether;\r\n\r\n    // Address holding presold tokens to be distributed after ICO\r\n    address public constant PRESOLD_ADDRESS = 0x6BF708eF2C1FDce3603c04CE9547AA6E134093b6;\r\n\r\n    // wholesale rate for purchases over WHOLESALE_THRESHOLD ether\r\n    uint    public constant RATE_WHOLESALE  = 1000;\r\n\r\n    // Time dependant retail rates\r\n    // First Day\r\n    uint    public constant RATE_DAY_0      = 750;\r\n\r\n    // First Week (The six days after first day)\r\n    uint    public constant RATE_DAY_1      = 652;\r\n\r\n    // Second Week\r\n    uint    public constant RATE_DAY_7      = 588;\r\n\r\n    // Third Week\r\n    uint    public constant RATE_DAY_14     = 545;\r\n\r\n    // Fourth Week\r\n    uint    public constant RATE_DAY_21     = 517;\r\n\r\n    // Fifth Week\r\n    uint    public constant RATE_DAY_28     = 500;\r\n}\r\n\r\n\r\nlibrary SafeMath\r\n{\r\n    // a add to b\r\n    function add(uint a, uint b) internal pure returns (uint c) {\r\n        c = a + b;\r\n        assert(c >= a);\r\n    }\r\n\r\n    // a subtract b\r\n    function sub(uint a, uint b) internal pure returns (uint c) {\r\n        c = a - b;\r\n        assert(c <= a);\r\n    }\r\n\r\n    // a multiplied by b\r\n    function mul(uint a, uint b) internal pure returns (uint c) {\r\n        c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n    }\r\n\r\n    // a divided by b\r\n    function div(uint a, uint b) internal pure returns (uint c) {\r\n        assert(b != 0);\r\n        c = a / b;\r\n    }\r\n}\r\n\r\n\r\ncontract ReentryProtected\r\n{\r\n    // The reentry protection state mutex.\r\n    bool __reMutex;\r\n\r\n    // Sets and clears mutex in order to block function reentry\r\n    modifier preventReentry() {\r\n        require(!__reMutex);\r\n        __reMutex = true;\r\n        _;\r\n        delete __reMutex;\r\n    }\r\n\r\n    // Blocks function entry if mutex is set\r\n    modifier noReentry() {\r\n        require(!__reMutex);\r\n        _;\r\n    }\r\n}\r\n\r\n\r\ncontract ERC20Token\r\n{\r\n    using SafeMath for uint;\r\n\r\n/* Constants */\r\n\r\n    // none\r\n\r\n/* State variable */\r\n\r\n    /// @return The Total supply of tokens\r\n    uint public totalSupply;\r\n\r\n    /// @return Tokens owned by an address\r\n    mapping (address => uint) balances;\r\n\r\n    /// @return Tokens spendable by a thridparty\r\n    mapping (address => mapping (address => uint)) allowed;\r\n\r\n/* Events */\r\n\r\n    // Triggered when tokens are transferred.\r\n    event Transfer(\r\n        address indexed _from,\r\n        address indexed _to,\r\n        uint256 _amount);\r\n\r\n    // Triggered whenever approve(address _spender, uint256 _amount) is called.\r\n    event Approval(\r\n        address indexed _owner,\r\n        address indexed _spender,\r\n        uint256 _amount);\r\n\r\n/* Modifiers */\r\n\r\n    // none\r\n\r\n/* Functions */\r\n\r\n    // Using an explicit getter allows for function overloading\r\n    function balanceOf(address _addr)\r\n        public\r\n        view\r\n        returns (uint)\r\n    {\r\n        return balances[_addr];\r\n    }\r\n\r\n    // Using an explicit getter allows for function overloading\r\n    function allowance(address _owner, address _spender)\r\n        public\r\n        constant\r\n        returns (uint)\r\n    {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    // Send _value amount of tokens to address _to\r\n    function transfer(address _to, uint256 _amount)\r\n        public\r\n        returns (bool)\r\n    {\r\n        return xfer(msg.sender, _to, _amount);\r\n    }\r\n\r\n    // Send _value amount of tokens from address _from to address _to\r\n    function transferFrom(address _from, address _to, uint256 _amount)\r\n        public\r\n        returns (bool)\r\n    {\r\n        require(_amount <= allowed[_from][msg.sender]);\r\n\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\r\n        return xfer(_from, _to, _amount);\r\n    }\r\n\r\n    // Process a transfer internally.\r\n    function xfer(address _from, address _to, uint _amount)\r\n        internal\r\n        returns (bool)\r\n    {\r\n        require(_amount <= balances[_from]);\r\n\r\n        Transfer(_from, _to, _amount);\r\n\r\n        // avoid wasting gas on 0 token transfers\r\n        if(_amount == 0) return true;\r\n\r\n        balances[_from] = balances[_from].sub(_amount);\r\n        balances[_to]   = balances[_to].add(_amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    // Approves a third-party spender\r\n    function approve(address _spender, uint256 _amount)\r\n        public\r\n        returns (bool)\r\n    {\r\n        allowed[msg.sender][_spender] = _amount;\r\n        Approval(msg.sender, _spender, _amount);\r\n        return true;\r\n    }\r\n}\r\n\r\n\r\n/*-----------------------------------------------------------------------------\\\r\n\r\n## Conditional Entry Table\r\n\r\nFunctions must throw on F conditions\r\n\r\nRenetry prevention is on all public mutating functions\r\nReentry mutex set in finalizeICO(), externalXfer(), refund()\r\n\r\n|function                |<startDate |<endDate  |fundFailed  |fundRaised|icoSucceeded\r\n|------------------------|:---------:|:--------:|:----------:|:--------:|:---------:|\r\n|()                      |F          |T         |F           |T         |F          |\r\n|abort()                 |T          |T         |T           |T         |F          |\r\n|proxyPurchase()         |F          |T         |F           |T         |F          |\r\n|finalizeICO()           |F          |F         |F           |T         |T          |\r\n|refund()                |F          |F         |T           |F         |F          |\r\n|refundFor()             |F          |F         |T           |F         |F          |\r\n|transfer()              |F          |F         |F           |F         |T          |\r\n|transferFrom()          |F          |F         |F           |F         |T          |\r\n|transferToMany()        |F          |F         |F           |F         |T          |\r\n|approve()               |F          |F         |F           |F         |T          |\r\n|clearKyc()              |T          |T         |T           |T         |T          |\r\n|releaseVested()         |F          |F         |F           |F         |now>release|\r\n|changeOwner()           |T          |T         |T           |T         |T          |\r\n|acceptOwnership()       |T          |T         |T           |T         |T          |\r\n|transferExternalTokens()|T          |T         |T           |T         |T          |\r\n|destroy()               |F          |F         |!__abortFuse|F         |F          |\r\n\r\n\\*----------------------------------------------------------------------------*/\r\n\r\ncontract Hut34ICOAbstract\r\n{\r\n    /// @dev Logged upon receiving a deposit\r\n    /// @param _from The address from which value has been recieved\r\n    /// @param _value The value of ether received\r\n    event Deposit(address indexed _from, uint _value);\r\n\r\n    /// @dev Logged upon a withdrawal\r\n    /// @param _from the address of the withdrawer\r\n    /// @param _to Address to which value was sent\r\n    /// @param _value The value in ether which was withdrawn\r\n    event Withdrawal(address indexed _from, address indexed _to, uint _value);\r\n\r\n    /// @dev Logged when new owner accepts ownership\r\n    /// @param _from the old owner address\r\n    /// @param _to the new owner address\r\n    event ChangedOwner(address indexed _from, address indexed _to);\r\n\r\n    /// @dev Logged when owner initiates a change of ownership\r\n    /// @param _to the new owner address\r\n    event ChangeOwnerTo(address indexed _to);\r\n\r\n    /// @dev Logged when a funder exceeds the KYC limit\r\n    /// @param _addr Address to set or clear KYC flag\r\n    /// @param _kyc A boolean flag\r\n    event Kyc(address indexed _addr, bool _kyc);\r\n\r\n    /// @dev Logged when vested tokens are released back to HUT32_WALLET\r\n    /// @param _releaseDate The official release date (even if released at\r\n    /// later date)\r\n    event VestingReleased(uint _releaseDate);\r\n\r\n    /// @dev Logged if the contract is aborted\r\n    event Aborted();\r\n\r\n//\r\n// Constants\r\n//\r\n\r\n    /// @dev The Hut34 vesting 'psudo-address' for transferring and releasing\r\n    /// vested tokens to the Hut34 Wallet. The address is UTF8 encoding of the\r\n    /// string and can only be accessed by the 'releaseVested()' function.\r\n    /// @return `0x48757433342056657374696e6700000000000000`\r\n    address public constant HUT34_VEST_ADDR = address(bytes20(\"Hut34 Vesting\"));\r\n\r\n//\r\n// State Variables\r\n//\r\n\r\n    /// @dev This fuse blows upon calling abort() which forces a fail state\r\n    /// @return the abort state. true == not aborted\r\n    bool public __abortFuse = true;\r\n\r\n    /// @dev Sets to true after the fund is swept to the fund wallet, allows\r\n    /// token transfers and prevents abort()\r\n    /// @return final success state of ICO\r\n    bool public icoSucceeded;\r\n\r\n    /// @dev An address permissioned to enact owner restricted functions\r\n    /// @return owner\r\n    address public owner;\r\n\r\n    /// @dev An address permissioned to take ownership of the contract\r\n    /// @return new owner address\r\n    address public newOwner;\r\n\r\n    /// @dev A tally of total ether raised during the funding period\r\n    /// @return Total ether raised during funding\r\n    uint public etherRaised;\r\n\r\n    /// @return Wholesale tokens available for sale\r\n    uint public wholesaleLeft;\r\n\r\n    /// @return Total ether refunded. Used to permision call to `destroy()`\r\n    uint public refunded;\r\n\r\n    /// @returns Date of next vesting release\r\n    uint public nextReleaseDate;\r\n\r\n    /// @return Ether paid by an address\r\n    mapping (address => uint) public etherContributed;\r\n\r\n    /// @returns KYC flag for an address\r\n    mapping (address => bool) public mustKyc;\r\n\r\n//\r\n// Modifiers\r\n//\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n//\r\n// Function Abstracts\r\n//\r\n\r\n    /// @return `true` if MIN_FUNDS were raised\r\n    function fundRaised() public view returns (bool);\r\n\r\n    /// @return `true` if MIN_FUNDS were not raised before END_DATE or contract\r\n    /// has been aborted\r\n    function fundFailed() public view returns (bool);\r\n\r\n    /// @return The current retail rate for token purchase\r\n    function currentRate() public view returns (uint);\r\n\r\n    /// @param _wei A value of ether in units of wei\r\n    /// @return allTokens_ returnable tokens for the funding amount\r\n    /// @return wholesaleToken_ Number of tokens purchased at wholesale rate\r\n    function ethToTokens(uint _wei)\r\n        public view returns (uint allTokens_, uint wholesaleTokens_);\r\n\r\n    /// @notice Processes a token purchase for `_addr`\r\n    /// @param _addr An address to purchase tokens\r\n    /// @return Boolean success value\r\n    /// @dev Requires <150,000 gas\r\n    function proxyPurchase(address _addr) public payable returns (bool);\r\n\r\n    /// @notice Finalize the ICO and transfer funds\r\n    /// @return Boolean success value\r\n    function finalizeICO() public returns (bool);\r\n\r\n    /// @notice Clear the KYC flags for an array of addresses to allow tokens\r\n    /// transfers\r\n    function clearKyc(address[] _addrs) public returns (bool);\r\n\r\n    /// @notice Make bulk transfer of tokens to many addresses\r\n    /// @param _addrs An array of recipient addresses\r\n    /// @param _amounts An array of amounts to transfer to respective addresses\r\n    /// @return Boolean success value\r\n    function transferToMany(address[] _addrs, uint[] _amounts)\r\n        public returns (bool);\r\n\r\n    /// @notice Release vested tokens after a maturity date\r\n    /// @return Boolean success value\r\n    function releaseVested() public returns (bool);\r\n\r\n    /// @notice Claim refund on failed ICO\r\n    /// @return Boolean success value\r\n    function refund() public returns (bool);\r\n\r\n    /// @notice Push refund for `_addr` from failed ICO\r\n    /// @param _addrs An array of address to refund\r\n    /// @return Boolean success value\r\n    function refundFor(address[] _addrs) public returns (bool);\r\n\r\n    /// @notice Abort the token sale prior to finalizeICO()\r\n    function abort() public returns (bool);\r\n\r\n    /// @notice Salvage `_amount` tokens at `_kaddr` and send them to `_to`\r\n    /// @param _kAddr An ERC20 contract address\r\n    /// @param _to and address to send tokens\r\n    /// @param _amount The number of tokens to transfer\r\n    /// @return Boolean success value\r\n    function transferExternalToken(address _kAddr, address _to, uint _amount)\r\n        public returns (bool);\r\n}\r\n\r\n\r\n/*-----------------------------------------------------------------------------\\\r\n\r\n Hut34ICO implimentation\r\n\r\n\\*----------------------------------------------------------------------------*/\r\n\r\ncontract Hut34ICO is\r\n    ReentryProtected,\r\n    ERC20Token,\r\n    Hut34ICOAbstract,\r\n    Hut34Config\r\n{\r\n    using SafeMath for uint;\r\n\r\n//\r\n// Constants\r\n//\r\n\r\n    // Token fixed point for decimal places\r\n    uint constant TOKEN = uint(10)**decimals;\r\n\r\n    // Calculate vested tokens\r\n    uint public constant VESTED_TOKENS =\r\n            TOTAL_TOKENS * TOKEN * VESTED_PERCENT / 100;\r\n\r\n    // Hut34 retains 50% of tokens (70% - 20% vested tokens)\r\n    uint public constant RETAINED_TOKENS = TOKEN * TOTAL_TOKENS / 2;\r\n\r\n    // Calculate end date\r\n    uint public constant END_DATE = START_DATE + 35 days;\r\n\r\n    // Divides `etherRaised` to calculate commision\r\n    // etherRaised/6.66... == etherRaised * 1.5% / 100\r\n    uint public constant COMMISSION_DIV = 67;\r\n\r\n    // Developer commission wallet\r\n    address public constant COMMISSION_WALLET =\r\n        0x0065D506E475B5DBD76480bAFa57fe7C41c783af;\r\n\r\n//\r\n// Functions\r\n//\r\n\r\n    function Hut34ICO()\r\n        public\r\n    {\r\n        // Run sanity checks\r\n        require(TOTAL_TOKENS != 0);\r\n        require(OWNER != 0x0);\r\n        require(HUT34_RETAIN != 0x0);\r\n        require(HUT34_WALLET != 0x0);\r\n        require(PRESOLD_TOKENS <= WHOLESALE_TOKENS);\r\n        require(PRESOLD_TOKENS == 0 || PRESOLD_ADDRESS != 0x0);\r\n        require(MIN_CAP != 0);\r\n        require(START_DATE >= now);\r\n        require(bytes(name).length != 0);\r\n        require(bytes(symbol).length != 0);\r\n        require(KYC_THRESHOLD != 0);\r\n        require(RATE_DAY_0 >= RATE_DAY_1);\r\n        require(RATE_DAY_1 >= RATE_DAY_7);\r\n        require(RATE_DAY_7 >= RATE_DAY_14);\r\n        require(RATE_DAY_14 >= RATE_DAY_21);\r\n        require(RATE_DAY_21 >= RATE_DAY_28);\r\n\r\n        owner = OWNER;\r\n        totalSupply = TOTAL_TOKENS.mul(TOKEN);\r\n        wholesaleLeft = WHOLESALE_TOKENS.mul(TOKEN);\r\n        uint presold = PRESOLD_TOKENS.mul(TOKEN);\r\n        wholesaleLeft = wholesaleLeft.sub(presold);\r\n\r\n        // Presale raise is appoximate given it was conducted in Fiat.\r\n        etherRaised = PRESALE_ETH_RAISE;\r\n\r\n        // Mint the total supply into Hut34 token holding address\r\n        balances[HUT34_RETAIN] = totalSupply;\r\n        Transfer(0x0, HUT34_RETAIN, totalSupply);\r\n\r\n        // Transfer vested tokens from holding wallet to vesting pseudo-address\r\n        balances[HUT34_RETAIN] = balances[HUT34_RETAIN].sub(VESTED_TOKENS);\r\n        balances[HUT34_VEST_ADDR] = balances[HUT34_VEST_ADDR].add(VESTED_TOKENS);\r\n        Transfer(HUT34_RETAIN, HUT34_VEST_ADDR, VESTED_TOKENS);\r\n\r\n        // Transfer presold tokens to holding address;\r\n        balances[HUT34_RETAIN] = balances[HUT34_RETAIN].sub(presold);\r\n        balances[PRESOLD_ADDRESS] = balances[PRESOLD_ADDRESS].add(presold);\r\n        Transfer(HUT34_RETAIN, PRESOLD_ADDRESS, presold);\r\n    }\r\n\r\n    // Default function. Accepts payments during funding period\r\n    function ()\r\n        public\r\n        payable\r\n    {\r\n        // Pass through to purchasing function. Will throw on failed or\r\n        // successful ICO\r\n        proxyPurchase(msg.sender);\r\n    }\r\n\r\n//\r\n// Getters\r\n//\r\n\r\n    // ICO fails if aborted or minimum funds are not raised by the end date\r\n    function fundFailed() public view returns (bool)\r\n    {\r\n        return !__abortFuse\r\n            || (now > END_DATE && etherRaised < MIN_CAP);\r\n    }\r\n\r\n    // Funding succeeds if not aborted, minimum funds are raised before end date\r\n    function fundRaised() public view returns (bool)\r\n    {\r\n        return !fundFailed()\r\n            && etherRaised >= MIN_CAP\r\n            && now > START_DATE;\r\n    }\r\n\r\n    // Returns wholesale value in wei\r\n    function wholeSaleValueLeft() public view returns (uint)\r\n    {\r\n        return wholesaleLeft / RATE_WHOLESALE;\r\n    }\r\n\r\n    function currentRate()\r\n        public\r\n        view\r\n        returns (uint)\r\n    {\r\n        return\r\n            fundFailed() ? 0 :\r\n            icoSucceeded ? 0 :\r\n            now < START_DATE ? 0 :\r\n            now < START_DATE + 1 days ? RATE_DAY_0 :\r\n            now < START_DATE + 7 days ? RATE_DAY_1 :\r\n            now < START_DATE + 14 days ? RATE_DAY_7 :\r\n            now < START_DATE + 21 days ? RATE_DAY_14 :\r\n            now < START_DATE + 28 days ? RATE_DAY_21 :\r\n            now < END_DATE ? RATE_DAY_28 :\r\n            0;\r\n    }\r\n\r\n    // Calculates the sale and wholesale portion of tokens for a given value\r\n    // of wei at the time of calling.\r\n    function ethToTokens(uint _wei)\r\n        public\r\n        view\r\n        returns (uint allTokens_, uint wholesaleTokens_)\r\n    {\r\n        // Get wholesale portion of ether and tokens\r\n        uint wsValueLeft = wholeSaleValueLeft();\r\n        uint wholesaleSpend =\r\n                fundFailed() ? 0 :\r\n                icoSucceeded ? 0 :\r\n                now < START_DATE ? 0 :\r\n                now > END_DATE ? 0 :\r\n                // No wholesale purchse\r\n                _wei < WHOLESALE_THRESHOLD ? 0 :\r\n                // Total wholesale purchase\r\n                _wei < wsValueLeft ?  _wei :\r\n                // over funded for remaining wholesale tokens\r\n                wsValueLeft;\r\n\r\n        wholesaleTokens_ = wholesaleSpend\r\n                .mul(RATE_WHOLESALE)\r\n                .mul(TOKEN)\r\n                .div(1 ether);\r\n\r\n        // Remaining wei used to purchase retail tokens\r\n        _wei = _wei.sub(wholesaleSpend);\r\n\r\n        // Get retail rate\r\n        uint saleRate = currentRate();\r\n\r\n        allTokens_ = _wei\r\n                .mul(saleRate)\r\n                .mul(TOKEN)\r\n                .div(1 ether)\r\n                .add(wholesaleTokens_);\r\n    }\r\n\r\n//\r\n// ICO functions\r\n//\r\n\r\n    // The fundraising can be aborted any time before `finaliseICO()` is called.\r\n    // This will force a fail state and allow refunds to be collected.\r\n    // The owner can abort or anyone else if a successful fund has not been\r\n    // finalised before 7 days after the end date.\r\n    function abort()\r\n        public\r\n        noReentry\r\n        returns (bool)\r\n    {\r\n        require(!icoSucceeded);\r\n        require(msg.sender == owner || now > END_DATE  + 14 days);\r\n        delete __abortFuse;\r\n        Aborted();\r\n        return true;\r\n    }\r\n\r\n    // General addresses can purchase tokens during funding\r\n    function proxyPurchase(address _addr)\r\n        public\r\n        payable\r\n        noReentry\r\n        returns (bool)\r\n    {\r\n        require(!fundFailed());\r\n        require(!icoSucceeded);\r\n        require(now > START_DATE);\r\n        require(now <= END_DATE);\r\n        require(msg.value > 0);\r\n\r\n        // Log ether deposit\r\n        Deposit (_addr, msg.value);\r\n\r\n        // Get ether to token conversion\r\n        uint tokens;\r\n        // Portion of tokens sold at wholesale rate\r\n        uint wholesaleTokens;\r\n\r\n        (tokens, wholesaleTokens) = ethToTokens(msg.value);\r\n\r\n        // Block any failed token creation\r\n        require(tokens > 0);\r\n\r\n        // Prevent over subscribing\r\n        require(balances[HUT34_RETAIN] - tokens >= RETAINED_TOKENS);\r\n\r\n        // Adjust wholesale tokens left for sale\r\n        if (wholesaleTokens != 0) {\r\n            wholesaleLeft = wholesaleLeft.sub(wholesaleTokens);\r\n        }\r\n\r\n        // transfer tokens from fund wallet\r\n        balances[HUT34_RETAIN] = balances[HUT34_RETAIN].sub(tokens);\r\n        balances[_addr] = balances[_addr].add(tokens);\r\n        Transfer(HUT34_RETAIN, _addr, tokens);\r\n\r\n        // Update funds raised\r\n        etherRaised = etherRaised.add(msg.value);\r\n\r\n        // Update holder payments\r\n        etherContributed[_addr] = etherContributed[_addr].add(msg.value);\r\n\r\n        // Check KYC requirement\r\n        if(etherContributed[_addr] >= KYC_THRESHOLD && !mustKyc[_addr]) {\r\n            mustKyc[_addr] = true;\r\n            Kyc(_addr, true);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    // Owner can sweep a successful funding to the fundWallet.\r\n    // Can be called repeatedly to recover errant ether which may have been\r\n    // `selfdestructed` to the contract\r\n    // Contract can be aborted up until this returns `true`\r\n    function finalizeICO()\r\n        public\r\n        onlyOwner\r\n        preventReentry()\r\n        returns (bool)\r\n    {\r\n        // Must have reached minimum cap\r\n        require(fundRaised());\r\n\r\n        // Set first vesting date (only once as this function can be called again)\r\n        if(!icoSucceeded) {\r\n            nextReleaseDate = now + VESTING_PERIOD;\r\n        }\r\n\r\n        // Set success flag;\r\n        icoSucceeded = true;\r\n\r\n        // Transfer % Developer commission\r\n        uint devCommission = calcCommission();\r\n        Withdrawal(this, COMMISSION_WALLET, devCommission);\r\n        COMMISSION_WALLET.transfer(devCommission);\r\n\r\n        // Remaining % to the fund wallet\r\n        Withdrawal(this, HUT34_WALLET, this.balance);\r\n        HUT34_WALLET.transfer(this.balance);\r\n        return true;\r\n    }\r\n\r\n    function clearKyc(address[] _addrs)\r\n        public\r\n        noReentry\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        uint len = _addrs.length;\r\n        for(uint i; i < len; i++) {\r\n            delete mustKyc[_addrs[i]];\r\n            Kyc(_addrs[i], false);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    // Releases vested tokens back to Hut34 wallet\r\n    function releaseVested()\r\n        public\r\n        returns (bool)\r\n    {\r\n        require(now > nextReleaseDate);\r\n        VestingReleased(nextReleaseDate);\r\n        nextReleaseDate = nextReleaseDate.add(VESTING_PERIOD);\r\n        return xfer(HUT34_VEST_ADDR, HUT34_RETAIN, VESTED_TOKENS / 4);\r\n    }\r\n\r\n    // Direct refund to caller\r\n    function refund()\r\n        public\r\n        returns (bool)\r\n    {\r\n        address[] memory addrs = new address[](1);\r\n        addrs[0] = msg.sender;\r\n        return refundFor(addrs);\r\n    }\r\n\r\n    // Bulk refunds can be pushed from a failed ICO\r\n    function refundFor(address[] _addrs)\r\n        public\r\n        preventReentry()\r\n        returns (bool)\r\n    {\r\n        require(fundFailed());\r\n        uint i;\r\n        uint len = _addrs.length;\r\n        uint value;\r\n        uint tokens;\r\n        address addr;\r\n\r\n        for (i; i < len; i++) {\r\n            addr = _addrs[i];\r\n            value = etherContributed[addr];\r\n            tokens = balances[addr];\r\n            if (tokens > 0) {\r\n                // Return tokens\r\n                // transfer tokens from fund wallet\r\n                balances[HUT34_RETAIN] = balances[HUT34_RETAIN].add(tokens);\r\n                delete balances[addr];\r\n                Transfer(addr, HUT34_RETAIN, tokens);\r\n            }\r\n\r\n            if (value > 0) {\r\n                // Refund ether contribution\r\n                delete etherContributed[addr];\r\n                delete mustKyc[addr];\r\n                refunded = refunded.add(value);\r\n                Withdrawal(this, addr, value);\r\n                addr.transfer(value);\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n//\r\n// ERC20 additional and overloaded functions\r\n//\r\n\r\n    // Allows a sender to transfer tokens to an array of recipients\r\n    function transferToMany(address[] _addrs, uint[] _amounts)\r\n        public\r\n        noReentry\r\n        returns (bool)\r\n    {\r\n        require(_addrs.length == _amounts.length);\r\n        uint len = _addrs.length;\r\n        for(uint i = 0; i < len; i++) {\r\n            xfer(msg.sender, _addrs[i], _amounts[i]);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    // Overload to check ICO success and KYC flags.\r\n    function xfer(address _from, address _to, uint _amount)\r\n        internal\r\n        noReentry\r\n        returns (bool)\r\n    {\r\n        require(icoSucceeded);\r\n        require(!mustKyc[_from]);\r\n        super.xfer(_from, _to, _amount);\r\n        return true;\r\n    }\r\n\r\n    // Overload to require ICO success\r\n    function approve(address _spender, uint _amount)\r\n        public\r\n        noReentry\r\n        returns (bool)\r\n    {\r\n        // ICO must be successful\r\n        require(icoSucceeded);\r\n        super.approve(_spender, _amount);\r\n        return true;\r\n    }\r\n\r\n//\r\n// Contract management functions\r\n//\r\n\r\n    // Initiate a change of owner to `_owner`\r\n    function changeOwner(address _owner)\r\n        public\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        ChangeOwnerTo(_owner);\r\n        newOwner = _owner;\r\n        return true;\r\n    }\r\n\r\n    // Finalise change of ownership to newOwner\r\n    function acceptOwnership()\r\n        public\r\n        returns (bool)\r\n    {\r\n        require(msg.sender == newOwner);\r\n        ChangedOwner(owner, msg.sender);\r\n        owner = newOwner;\r\n        delete newOwner;\r\n        return true;\r\n    }\r\n\r\n    // This will selfdestruct the contract on the condittion all have been\r\n    // processed.\r\n    function destroy()\r\n        public\r\n        noReentry\r\n        onlyOwner\r\n    {\r\n        require(!__abortFuse);\r\n        require(refunded == (etherRaised - PRESALE_ETH_RAISE));\r\n        // Log burned tokens for complete ledger accounting on archival nodes\r\n        Transfer(HUT34_RETAIN, 0x0, balances[HUT34_RETAIN]);\r\n        Transfer(HUT34_VEST_ADDR, 0x0, VESTED_TOKENS);\r\n        Transfer(PRESOLD_ADDRESS, 0x0, PRESOLD_TOKENS);\r\n        // Garbage collect mapped state\r\n        delete balances[HUT34_RETAIN];\r\n        delete balances[PRESOLD_ADDRESS];\r\n        selfdestruct(owner);\r\n    }\r\n\r\n    // Owner can salvage ERC20 tokens that may have been sent to the account\r\n    function transferExternalToken(address _kAddr, address _to, uint _amount)\r\n        public\r\n        onlyOwner\r\n        preventReentry\r\n        returns (bool)\r\n    {\r\n        require(ERC20Token(_kAddr).transfer(_to, _amount));\r\n        return true;\r\n    }\r\n\r\n    // Calculate commission on prefunded and raised ether.\r\n    function calcCommission()\r\n        internal\r\n        view\r\n        returns(uint)\r\n    {\r\n        uint commission = (this.balance + PRESALE_ETH_RAISE) / COMMISSION_DIV;\r\n        // Edge case that prefund causes commission to be greater than balance\r\n        return commission <= this.balance ? commission : this.balance;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"VESTING_PERIOD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextReleaseDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOTAL_TOKENS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"HUT34_VEST_ADDR\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"WHOLESALE_TOKENS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"OWNER\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"refunded\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"COMMISSION_DIV\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"COMMISSION_WALLET\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"releaseVested\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalizeICO\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRESOLD_TOKENS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"KYC_THRESHOLD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_kAddr\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferExternalToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RATE_DAY_1\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"abort\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoSucceeded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wholesaleLeft\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"START_DATE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"proxyPurchase\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"END_DATE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refund\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRESALE_ETH_RAISE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundFailed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"__abortFuse\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RATE_DAY_21\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addrs\",\"type\":\"address[]\"},{\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"transferToMany\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RATE_DAY_28\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MIN_CAP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RATE_DAY_7\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"destroy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addrs\",\"type\":\"address[]\"}],\"name\":\"refundFor\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RATE_DAY_14\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addrs\",\"type\":\"address[]\"}],\"name\":\"clearKyc\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRESOLD_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"HUT34_WALLET\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_wei\",\"type\":\"uint256\"}],\"name\":\"ethToTokens\",\"outputs\":[{\"name\":\"allTokens_\",\"type\":\"uint256\"},{\"name\":\"wholesaleTokens_\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RATE_WHOLESALE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"etherContributed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RATE_DAY_0\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"VESTED_PERCENT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RETAINED_TOKENS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"etherRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"mustKyc\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wholeSaleValueLeft\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"VESTED_TOKENS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"WHOLESALE_THRESHOLD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"HUT34_RETAIN\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"ChangedOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"ChangeOwnerTo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_kyc\",\"type\":\"bool\"}],\"name\":\"Kyc\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_releaseDate\",\"type\":\"uint256\"}],\"name\":\"VestingReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Aborted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"Hut34ICO","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://6a3f12bb27327b549580c8c26712154db09f8ee62cf2f6f600af54445e73bd9e"}]}