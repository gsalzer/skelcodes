{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.4; \r\n\r\ncontract Authorization {\r\n\r\n    address internal admin;\r\n\r\n    function Authorization() {\r\n        admin = msg.sender;\r\n    }\r\n\r\n    modifier onlyAdmin() {\r\n        if(msg.sender != admin) throw;\r\n        _;\r\n    }\r\n}\r\n\r\ncontract NATVCoin is Authorization {\r\n\r\n//*************************************************************************\r\n// Variables\r\n\r\n    mapping (address => uint256) private Balances;\r\n    mapping (address => mapping (address => uint256)) private Allowances;\r\n    string public standard = \"NATVCoin v1.0\";\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals;\r\n    uint256 public coinSupply;\r\n    uint private balance;\r\n    uint256 private sellPrice;\r\n    uint256 private buyPrice;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n//*************************************************************************************\r\n// End Variables\r\n\r\n//**************************************************************************************\r\n//Constructor\r\n    function NATVCoin(address benificairyAddress) {\r\n        admin = msg.sender;\r\n        Balances[admin] = 3000000000000000;\r\n        coinSupply = 3000000000000000;\r\n        decimals = 8;\r\n        symbol = \"NATV\";\r\n        name = \"Native Currency\";\r\n        beneficiary = benificairyAddress; // Need to modify to client's wallet address\r\n        SetNATVTokenSale();\r\n    }\r\n\r\n//***************************************************************************************\r\n\r\n//***************************************************************************************\r\n// Base Token  Started ERC 20 Standards\r\n    function totalSupply() constant returns (uint initCoinSupply) {\r\n        return coinSupply;\r\n    }\r\n\r\n    function balanceOf (address _owner) constant returns (uint balance){\r\n        return Balances[_owner];\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) returns (bool success){\r\n        if(Balances[msg.sender]< _value) throw;\r\n        if(Balances[_to] + _value < Balances[_to]) throw;\r\n        //if(admin)\r\n\r\n        Balances[msg.sender] -= _value;\r\n        Balances[_to] += _value;\r\n\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success){\r\n        if(Balances[_from] < _value) throw;\r\n        if(Balances[_to] + _value < Balances[_to]) throw;\r\n        if(_value > Allowances[_from][msg.sender]) throw;\r\n        Balances[_from] -= _value;\r\n        Balances[_to] += _value;\r\n        Allowances[_from][msg.sender] -= _value;\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function approve(address _sbalanceOfpender, uint256 _value) returns (bool success){\r\n        Allowances[msg.sender][_sbalanceOfpender] = _value;\r\n        Approval(msg.sender, _sbalanceOfpender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n        return Allowances[_owner][_spender];\r\n    }\r\n    //***********************************************************************************************\r\n    //End Base Token\r\n    //\r\n\r\n    function OBEFAC(address addr) onlyAdmin public {\r\n        beneficiary = addr;\r\n    } \r\n\r\n    function releaseTokens (address _to, uint256 _value) private returns (bool success) {\r\n\r\n        if(Balances[admin]< _value) throw;\r\n        if(Balances[_to] + _value < Balances[_to]) throw;\r\n        //if(admin)\r\n\r\n        Balances[admin] -= _value;\r\n        Balances[_to] += _value;\r\n\r\n        Transfer(admin, _to, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n    //***********************************************************************************************\r\n    //Crowd Sale Logic\r\n    //\r\n\r\n    enum State {\r\n        Fundraising, //initial state of crowdsale\r\n        Failed, //failed to achieve the minimum target\r\n        Successful, //funding is successfull but not yet transfered the funds to the founders\r\n        Closed //everything is done i.e. the purpose of crowdsale is over\r\n    }\r\n    State private state = State.Fundraising; // setting the default state to fundraising\r\n\r\n    struct Contribution {\r\n        uint amount; //amount(in ETH) the person has contributed\r\n        address contributor;\r\n    }\r\n    Contribution[] contributions;\r\n\r\n    uint private totalRaised;\r\n    uint private currentBalance; //currentBalance can be less than totalRaised in case of refund\r\n    uint private deadline;\r\n    uint private completedAt;\r\n    uint private priceInWei; //price of token (e.g. 1 token = 1 ETH i.e. 10^18 Wei )\r\n    uint private fundingMinimumTargetInWei;\r\n    uint private fundingMaximumTargetInWei;\r\n    address private creator; //who created the crowdsale\r\n    address private beneficiary; //beneficiary can also be a DAO\r\n    string private campaignUrl;\r\n    byte constant version = 1;\r\n\r\n    uint256 private amountInWei=0;\r\n    uint256 private tempTotalRasiedFunds=0;\r\n    uint256 private actualVlaue=0;\r\n    uint256 private refundAmount = 0;\r\n    uint256 private fundingTokens=0;\r\n\r\n    event LogRefund(address addr, uint amount);\r\n    event LogFundingReceived(address addr, uint amount, uint currentTotal); //funds received by contributors\r\n    event LogWinnerPaid(address winnerAddress); //whether the beneficiary has paid or not\r\n    event LogFundingSuccessful(uint totalRaised); //will announce when funding is successfully completed\r\n    event LogFunderInitialized(\r\n    address creator,\r\n    address beneficiary,\r\n    string url,\r\n    uint _fundingMaximumTargetInEther,\r\n    uint256 deadline);\r\n\r\n    // Modified by amit as on 18th August to stop the tarnsaction if ICO date is Over\r\n    modifier inState(State _state) {\r\n        if ( now > deadline ) {\r\n            state = State.Closed;\r\n        }\r\n\r\n        if (state != _state) throw;\r\n        _;\r\n    }\r\n\r\n    modifier isMinimum() {\r\n        if(msg.value < priceInWei*10) throw;\r\n        _;\r\n    }\r\n\r\n    modifier inMultipleOfPrice() {\r\n        if(msg.value%priceInWei != 0) throw;\r\n        _;\r\n    }\r\n\r\n    modifier isCreator() {\r\n        if (msg.sender != creator) throw;\r\n        _;\r\n    }\r\n\r\n    modifier atEndOfLifecycle() {\r\n        if(!((state == State.Failed || state == State.Successful) && completedAt < now)) {\r\n            throw;\r\n        }\r\n        _;\r\n    }\r\n\r\n\r\n    function SetNATVTokenSale () private {\r\n\r\n        creator = msg.sender;\r\n        campaignUrl = \"www.nativecurrency.com\";\r\n        fundingMinimumTargetInWei = 0 * 1 ether;\r\n        fundingMaximumTargetInWei = 30000 * 1 ether;\r\n        deadline = now + (46739 * 1 minutes);\r\n        currentBalance = 0;\r\n        priceInWei = 0.001 * 1 ether;\r\n        LogFunderInitialized(\r\n        creator,\r\n        beneficiary,\r\n        campaignUrl,\r\n        fundingMaximumTargetInWei,\r\n        deadline);\r\n    }\r\n\r\n    function contribute(address _sender)\r\n    private\r\n    inState(State.Fundraising) returns (uint256) {\r\n\r\n        uint256 _value = this.balance;\r\n        amountInWei = _value;\r\n        tempTotalRasiedFunds = totalRaised + _value;\r\n        actualVlaue = _value;\r\n        //debugLog(\"amountInWei\",amountInWei,1);\r\n        //debugLog(\"tempTotalRasiedFunds\",tempTotalRasiedFunds,2);\r\n        if (fundingMaximumTargetInWei != 0 && tempTotalRasiedFunds > fundingMaximumTargetInWei) {\r\n            //  debugLog(\"insideIf Loop\",0,3);\r\n            refundAmount = tempTotalRasiedFunds-fundingMaximumTargetInWei;\r\n            actualVlaue = _value-refundAmount;\r\n        }\r\n        contributions.push(\r\n            Contribution({\r\n                amount: actualVlaue,\r\n                contributor: _sender\r\n            })\r\n        );\r\n\r\n        if ( refundAmount > 0 ){\r\n            if (!_sender.send(refundAmount)) {\r\n                throw;\r\n            }\r\n            LogRefund(_sender,refundAmount);\r\n        }\r\n\r\n        totalRaised += actualVlaue;\r\n        currentBalance = totalRaised;\r\n\r\n        fundingTokens = (amountInWei * 100000000) / priceInWei;\r\n\r\n        releaseTokens(_sender, fundingTokens);\r\n\r\n        LogFundingReceived(_sender, actualVlaue, totalRaised);\r\n\r\n        payOut();\r\n        checkIfFundingCompleteOrExpired();\r\n        return contributions.length - 1; //this will return the contribution ID\r\n    }\r\n\r\n\r\n    //************************************************************************************/\r\n    // To check if funding is given to the founders or the beneficiaries\r\n\r\n    function checkIfFundingCompleteOrExpired() private {\r\n\r\n        if (fundingMaximumTargetInWei != 0 && totalRaised >= fundingMaximumTargetInWei) {\r\n            state = State.Closed;\r\n            LogFundingSuccessful(totalRaised);\r\n            completedAt = now;\r\n\r\n        } else if ( now > deadline )  {\r\n            if(totalRaised >= fundingMinimumTargetInWei){\r\n                state = State.Closed;\r\n                LogFundingSuccessful(totalRaised);\r\n                completedAt = now;\r\n            } else{\r\n                state = State.Failed;\r\n                completedAt = now;\r\n            }\r\n        }\r\n    }\r\n\r\n    function payOut()\r\n    private\r\n    inState(State.Fundraising)\r\n    {\r\n        if(!beneficiary.send(this.balance)) {\r\n            throw;\r\n        }\r\n        if (state == State.Successful) {\r\n            state = State.Closed;\r\n        }\r\n        currentBalance = 0;\r\n        LogWinnerPaid(beneficiary);\r\n    }\r\n\r\n    //***************************************************************************/\r\n    //This default function will execute and will throw an exception if anything is executed besides defined functions\r\n\r\n    // Modified by amit, added modifer instate to Verify the State of ICO\r\n    function () payable inState(State.Fundraising) isMinimum() { contribute(msg.sender); }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sbalanceOfpender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"initCoinSupply\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"coinSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"standard\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"OBEFAC\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"benificairyAddress\",\"type\":\"address\"}],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogRefund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"currentTotal\",\"type\":\"uint256\"}],\"name\":\"LogFundingReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"winnerAddress\",\"type\":\"address\"}],\"name\":\"LogWinnerPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"totalRaised\",\"type\":\"uint256\"}],\"name\":\"LogFundingSuccessful\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"url\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_fundingMaximumTargetInEther\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"LogFunderInitialized\",\"type\":\"event\"}]","ContractName":"NATVCoin","CompilerVersion":"v0.4.15+commit.bbb8e64f","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000bf9bd7a1e3a7971d778ee48253fd936faea262f7","Library":"","SwarmSource":"bzzr://0147a62d245ab1d746f29be967cd62ffb7bad62a7b20dfb83847cefe989fd6fa"}]}