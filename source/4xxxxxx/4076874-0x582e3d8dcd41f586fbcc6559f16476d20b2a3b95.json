{"status":"1","message":"OK","result":[{"SourceCode":"contract Token { \r\n    function issue(address _recipient, uint256 _value) returns (bool success) {} \r\n    function totalSupply() constant returns (uint256 supply) {}\r\n    function unlock() returns (bool success) {}\r\n}\r\n\r\ncontract SCLCrowdsale {\r\n\r\n    // Crowdsale details\r\n    address public beneficiary; // Company address multisig (95% funding)\r\n    address public creator; // Creator (5% funding)\r\n    address public confirmedBy; // Address that confirmed beneficiary\r\n    uint256 public minAmount = 294 ether; // ≈ 250k SCL\r\n    uint256 public maxAmount = 100000 ether; // ≈ 50 mln SCL\r\n    uint256 public maxSupply = 50000000 * 10**8; // 50 mln SCL\r\n    uint256 public minAcceptedAmount = 40 finney; // 1/25 ether\r\n\r\n    // Eth to SCL rate\r\n    uint256 public ratePreICO = 850;\r\n    uint256 public rateWaiting = 0;\r\n    uint256 public rateAngelDay = 750;\r\n    uint256 public rateFirstWeek = 700;\r\n    uint256 public rateSecondWeek = 650;\r\n    uint256 public rateThirdWeek = 600;\r\n    uint256 public rateLastWeek = 550;\r\n\r\n    uint256 public ratePreICOEnd = 10 days;\r\n    uint256 public rateWaitingEnd = 20 days;\r\n    uint256 public rateAngelDayEnd = 21 days;\r\n    uint256 public rateFirstWeekEnd = 28 days;\r\n    uint256 public rateSecondWeekEnd = 35 days;\r\n    uint256 public rateThirdWeekEnd = 42 days;\r\n    uint256 public rateLastWeekEnd = 49 days;\r\n\r\n    enum Stages {\r\n        InProgress,\r\n        Ended,\r\n        Withdrawn\r\n    }\r\n\r\n    Stages public stage = Stages.InProgress;\r\n\r\n    // Crowdsale state\r\n    uint256 public start;\r\n    uint256 public end;\r\n    uint256 public raised;\r\n\r\n    // SCL token\r\n    Token public sclToken;\r\n\r\n    // Invested balances\r\n    mapping (address => uint256) balances;\r\n\r\n\r\n    /**\r\n     * Throw if at stage other than current stage\r\n     * \r\n     * @param _stage expected stage to test for\r\n     */\r\n    modifier atStage(Stages _stage) {\r\n        if (stage != _stage) {\r\n            throw;\r\n        }\r\n        _;\r\n    }\r\n    \r\n\r\n    /**\r\n     * Throw if sender is not beneficiary\r\n     */\r\n    modifier onlyBeneficiary() {\r\n        if (beneficiary != msg.sender) {\r\n            throw;\r\n        }\r\n        _;\r\n    }\r\n\r\n\r\n    /** \r\n     * Get balance of `_investor` \r\n     * \r\n     * @param _investor The address from which the balance will be retrieved\r\n     * @return The balance\r\n     */\r\n    function balanceOf(address _investor) constant returns (uint256 balance) {\r\n        return balances[_investor];\r\n    }\r\n\r\n\r\n    /**\r\n     * Construct\r\n     *\r\n     * @param _tokenAddress The address of the SCL token contact\r\n     */\r\n    function SCLCrowdsale(address _tokenAddress, address _beneficiary, address _creator, uint256 _start) {\r\n        sclToken = Token(_tokenAddress);\r\n        beneficiary = _beneficiary;\r\n        creator = _creator;\r\n        start = _start;\r\n        end = start + rateLastWeekEnd;\r\n    }\r\n\r\n\r\n    /**\r\n     * For testing purposes\r\n     *\r\n     * @return The beneficiary address\r\n     */\r\n    function confirmBeneficiary() onlyBeneficiary {\r\n        confirmedBy = msg.sender;\r\n    }\r\n\r\n\r\n    /**\r\n     * Convert `_wei` to an amount in SCL using \r\n     * the current rate\r\n     *\r\n     * @param _wei amount of wei to convert\r\n     * @return The amount in SCL\r\n     */\r\n    function toSCL(uint256 _wei) returns (uint256 amount) {\r\n        uint256 rate = 0;\r\n        if (stage != Stages.Ended && now >= start && now <= end) {\r\n\r\n            // Check for preico\r\n            if (now <= start + ratePreICOEnd) {\r\n                rate = ratePreICO;\r\n            }\r\n\r\n            // Check for waiting period\r\n            else if (now <= start + rateWaitingEnd) {\r\n                rate = rateWaiting;\r\n            }\r\n\r\n            // Check for angelday\r\n            else if (now <= start + rateAngelDayEnd) {\r\n                rate = rateAngelDay;\r\n            }\r\n\r\n            // Check first week\r\n            else if (now <= start + rateFirstWeekEnd) {\r\n                rate = rateFirstWeek;\r\n            }\r\n\r\n            // Check second week\r\n            else if (now <= start + rateSecondWeekEnd) {\r\n                rate = rateSecondWeek;\r\n            }\r\n\r\n            // Check third week\r\n            else if (now <= start + rateThirdWeekEnd) {\r\n                rate = rateThirdWeek;\r\n            }\r\n\r\n            // Check last week\r\n            else if (now <= start + rateLastWeekEnd) {\r\n                rate = rateLastWeek;\r\n            }\r\n        }\r\n\r\n        return _wei * rate * 10**8 / 1 ether; // 10**8 for 8 decimals\r\n    }\r\n\r\n\r\n    /**\r\n     * Function to end the crowdsale by setting \r\n     * the stage to Ended\r\n     */\r\n    function endCrowdsale() atStage(Stages.InProgress) {\r\n\r\n        // Crowdsale not ended yet\r\n        if (now < end) {\r\n            throw;\r\n        }\r\n\r\n        stage = Stages.Ended;\r\n    }\r\n\r\n\r\n    /**\r\n     * Transfer appropriate percentage of raised amount \r\n     * to the company address\r\n     */\r\n    function withdraw() onlyBeneficiary atStage(Stages.Ended) {\r\n\r\n        // Confirm that minAmount is raised\r\n        if (raised < minAmount) {\r\n            throw;\r\n        }\r\n\r\n        if (!sclToken.unlock()) {\r\n            throw;\r\n        }\r\n\r\n        uint256 ethBalance = this.balance;\r\n\r\n        // 5% eth\r\n        uint256 ethFees = ethBalance * 5 / 10**2;\r\n        if (!creator.send(ethFees)) {\r\n            throw;\r\n        }\r\n\r\n        // 95% eth\r\n        if (!beneficiary.send(ethBalance - ethFees)) {\r\n            throw;\r\n        }\r\n\r\n        stage = Stages.Withdrawn;\r\n    }\r\n\r\n\r\n    /**\r\n     * Refund in the case of an unsuccessful crowdsale. The \r\n     * crowdsale is considered unsuccessful if minAmount was \r\n     * not raised before end\r\n     */\r\n    function refund() atStage(Stages.Ended) {\r\n\r\n        // Only allow refunds if minAmount is not raised\r\n        if (raised >= minAmount) {\r\n            throw;\r\n        }\r\n\r\n        uint256 receivedAmount = balances[msg.sender];\r\n        balances[msg.sender] = 0;\r\n\r\n        if (receivedAmount > 0 && !msg.sender.send(receivedAmount)) {\r\n            balances[msg.sender] = receivedAmount;\r\n        }\r\n    }\r\n\r\n    \r\n    /**\r\n     * Receives Eth and issue SCL tokens to the sender\r\n     */\r\n    function () payable atStage(Stages.InProgress) {\r\n\r\n        // Crowdsale not started yet\r\n        if (now < start) {\r\n            throw;\r\n        }\r\n\r\n        // Crowdsale expired\r\n        if (now > end) {\r\n            throw;\r\n        }\r\n\r\n        // Enforce min amount\r\n        if (msg.value < minAcceptedAmount) {\r\n            throw;\r\n        }\r\n \r\n        uint256 received = msg.value;\r\n        uint256 valueInSCL = toSCL(msg.value);\r\n\r\n        // Period between pre-ico and ico\r\n        if (valueInSCL == 0) {\r\n            throw;\r\n        }\r\n\r\n        if (!sclToken.issue(msg.sender, valueInSCL)) {\r\n            throw;\r\n        }\r\n\r\n        // Fees\r\n        uint256 sclFees = valueInSCL * 5 / 10**2;\r\n\r\n        // 5% tokens\r\n        if (!sclToken.issue(creator, sclFees)) {\r\n            throw;\r\n        }\r\n\r\n        if (now <= start + ratePreICOEnd) {\r\n\r\n            // Fees\r\n            uint256 ethFees = received * 5 / 10**2;\r\n\r\n            // 5% eth\r\n            if (!creator.send(ethFees)) {\r\n                throw;\r\n            }\r\n\r\n            // During pre-ico - Non-Refundable\r\n            if (!beneficiary.send(received - ethFees)) {\r\n                throw;\r\n            }\r\n\r\n        } else {\r\n\r\n            // During the ICO\r\n            balances[msg.sender] += received; // 100% refundable\r\n        }\r\n\r\n        raised += received;\r\n\r\n        // Check maxAmount raised\r\n        if (raised >= maxAmount || sclToken.totalSupply() >= maxSupply) {\r\n            stage = Stages.Ended;\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rateAngelDayEnd\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"endCrowdsale\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rateFirstWeekEnd\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rateAngelDay\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rateLastWeekEnd\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rateSecondWeekEnd\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rateThirdWeekEnd\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refund\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sclToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ratePreICO\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_investor\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rateWaitingEnd\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rateSecondWeek\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"confirmBeneficiary\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wei\",\"type\":\"uint256\"}],\"name\":\"toSCL\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ratePreICOEnd\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rateThirdWeek\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rateFirstWeek\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rateLastWeek\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"start\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rateWaiting\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"confirmedBy\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"end\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"raised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minAcceptedAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_creator\",\"type\":\"address\"},{\"name\":\"_start\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"}]","ContractName":"SCLCrowdsale","CompilerVersion":"v0.4.11+commit.68ef5810","OptimizationUsed":"1","Runs":"0","ConstructorArguments":"000000000000000000000000d7631787b4dcc87b1254cfd1e5ce48e96823dee80000000000000000000000006975f7b4bb33e96c46dccc6e835796e005aca2a60000000000000000000000007ec5975dba8dabfbfcffa8d89147a88f1996f75400000000000000000000000000000000000000000000000000000000597a8c90","Library":"","SwarmSource":"bzzr://1742ae5af92758828a2c1c6f2f9aab74b725beaae755919137a343d8df791dbf"}]}