{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\n * ERC20 interface\r\n * see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 {\r\n  uint public totalSupply; // Number of tokens in circulation\r\n  function balanceOf(address who) constant returns (uint);\r\n  function allowance(address owner, address spender) constant returns (uint);\r\n\r\n  function transfer(address to, uint value) returns (bool ok);\r\n  function transferFrom(address from, address to, uint value) returns (bool ok);\r\n  function approve(address spender, uint value) returns (bool ok);\r\n\r\n  event Transfer(address indexed from, address indexed to, uint value);\r\n  event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\n\r\n/**\r\n * Math operations with safety checks\r\n * Reference: https://github.com/OpenZeppelin/zeppelin-solidity/commit/353285e5d96477b4abb86f7cde9187e84ed251ac\r\n */\r\ncontract SafeMath {\r\n  function safeMul(uint a, uint b) internal constant returns (uint) {\r\n    uint c = a * b;\r\n\r\n    assert(a == 0 || c / a == b);\r\n\r\n    return c;\r\n  }\r\n\r\n  function safeDiv(uint a, uint b) internal constant returns (uint) {    \r\n    uint c = a / b;\r\n\r\n    return c;\r\n  }\r\n\r\n  function safeSub(uint a, uint b) internal constant returns (uint) {\r\n    require(b <= a);\r\n\r\n    return a - b;\r\n  }\r\n\r\n  function safeAdd(uint a, uint b) internal constant returns (uint) {\r\n    uint c = a + b;\r\n\r\n    assert(c>=a && c>=b);\r\n\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n/*\r\n * Standard ERC20 token\r\n *\r\n * https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract Token is ERC20, SafeMath {\r\n\r\n  mapping(address => uint) balances;\r\n  mapping (address => mapping (address => uint)) allowed;\r\n\r\n  function transfer(address _to, uint _value) returns (bool success) {\r\n\r\n    return doTransfer(msg.sender, _to, _value);\r\n  }\r\n\r\n  function transferFrom(address _from, address _to, uint _value) returns (bool success) {\r\n    var _allowance = allowed[_from][msg.sender];\r\n\r\n    allowed[_from][msg.sender] = safeSub(_allowance, _value);\r\n\r\n    return doTransfer(_from, _to, _value);\r\n  }\r\n\r\n  /// @notice You must set the allowance to zero before changing to a non-zero value\r\n  function approve(address _spender, uint _value) public returns (bool success) {\r\n    require(allowed[msg.sender][_spender] == 0 || _value == 0);\r\n\r\n    allowed[msg.sender][_spender] = _value;\r\n\r\n    Approval(msg.sender, _spender, _value);\r\n\r\n    return true;\r\n  }\r\n\r\n  function doTransfer(address _from, address _to, uint _value) private returns (bool success) {\r\n    balances[_from] = safeSub(balances[_from], _value);\r\n    balances[_to] = safeAdd(balances[_to], _value);\r\n\r\n    Transfer(_from, _to, _value);\r\n\r\n    return true;\r\n  }\r\n\r\n  function balanceOf(address _owner) public constant returns (uint balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n  function allowance(address _owner, address _spender) public constant returns (uint remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n}\r\n\r\ncontract MintInterface {\r\n  function mint(address recipient, uint amount) returns (bool success);\r\n}\r\n\r\n\r\n/*\r\n * Manages the ownership of a contract\r\n */\r\ncontract Owned {\r\n    address public owner; // owner of the contract. By default, the creator of the contract\r\n\r\n    modifier onlyOwner() {\r\n      require(msg.sender == owner);\r\n\r\n        _;\r\n    }\r\n\r\n    function Owned() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    // Changes the owner of the contract to \"newOwner\"\r\n    // Only executed by \"owner\"\r\n    // If you want to completely remove the ownership of a contract, just change it to \"0x0\"\r\n    function changeOwner(address newOwner) public onlyOwner {\r\n      owner = newOwner;\r\n    }\r\n}\r\n\r\n/*\r\n * Manage the minters of a token\r\n */\r\ncontract Minted is MintInterface, Owned {\r\n  uint public numMinters; // Number of minters of the token.\r\n  bool public open; // If is possible to add new minters or not. True by default.\r\n  mapping (address => bool) public minters; // if an address is a minter of the token or not\r\n\r\n  // Log of the minters added\r\n  event NewMinter(address who);\r\n\r\n  modifier onlyMinters() {\r\n    require(minters[msg.sender]);\r\n\r\n    _;\r\n  }\r\n\r\n  modifier onlyIfOpen() {\r\n    require(open);\r\n\r\n    _;\r\n  }\r\n\r\n  function Minted() {\r\n    open = true;\r\n  }\r\n\r\n  // Adds a new minter to the token\r\n  // _minter: address of the new minter\r\n  // Only executed by \"Owner\" (see \"Owned\" contract)\r\n  // Only executed if the function \"endMinting\" has not been executed\r\n  function addMinter(address _minter) public onlyOwner onlyIfOpen {\r\n    if(!minters[_minter]) {\r\n      minters[_minter] = true;\r\n      numMinters++;\r\n\r\n      NewMinter(_minter);\r\n    }\r\n  }\r\n\r\n  // Removes a minter of the token\r\n  // _minter: address of the minter to be removed\r\n  // Only executed by \"Owner\" (see \"Owned\" contract)\r\n  function removeMinter(address _minter) public onlyOwner {\r\n    if(minters[_minter]) {\r\n      minters[_minter] = false;\r\n      numMinters--;\r\n    }\r\n  }\r\n\r\n  // Blocks the possibility to add new minters\r\n  // This function is irreversible\r\n  // Only executed by \"Owner\" (see \"Owned\" contract)\r\n  function endMinting() public onlyOwner {\r\n    open = false;\r\n  }\r\n}\r\n\r\n/*\r\n * Allows an address to set a block from when a token won't be tradeable\r\n */\r\ncontract Pausable is Owned {\r\n  // block from when the token won't be tradeable\r\n  // Default to 0 = no restriction\r\n  uint public endBlock;\r\n\r\n  modifier validUntil() {\r\n    require(block.number <= endBlock || endBlock == 0);\r\n\r\n    _;\r\n  }\r\n\r\n  // Set a block from when a token won't be tradeable\r\n  // There is no limit in the number of executions to avoid irreversible mistakes.\r\n  // Only executed by \"Owner\" (see \"Owned\" contract)\r\n  function setEndBlock(uint block) public onlyOwner {\r\n    endBlock = block;\r\n  }\r\n}\r\n\r\n\r\n/*\r\n * Token contract\r\n */\r\ncontract ProjectToken is Token, Minted, Pausable {\r\n  string public name; // name of the token\r\n  string public symbol; // acronim of the token\r\n  uint public decimals; // number of decimals of the token\r\n\r\n  uint public transferableBlock; // block from which the token can de transfered\r\n\r\n  modifier lockUpPeriod() {\r\n    require(block.number >= transferableBlock);\r\n\r\n    _;\r\n  }\r\n\r\n  function ProjectToken(\r\n    string _name,\r\n    string _symbol,\r\n    uint _decimals,\r\n    uint _transferableBlock\r\n  ) {\r\n    name = _name;\r\n    symbol = _symbol;\r\n    decimals = _decimals;\r\n    transferableBlock = _transferableBlock;\r\n  }\r\n\r\n  // Creates \"amount\" tokens and send them to \"recipient\" address\r\n  // Only executed by authorized minters (see \"Minted\" contract)\r\n  function mint(address recipient, uint amount)\r\n    public\r\n    onlyMinters\r\n    returns (bool success)\r\n  {\r\n    totalSupply = safeAdd(totalSupply, amount);\r\n    balances[recipient] = safeAdd(balances[recipient], amount);\r\n\r\n    Transfer(0x0, recipient, amount);\r\n\r\n    return true;\r\n  }\r\n\r\n  // Aproves \"_spender\" to spend \"_value\" tokens and executes its \"receiveApproval\" function\r\n  function approveAndCall(address _spender, uint256 _value)\r\n    public\r\n    returns (bool success)\r\n  {\r\n    if(super.approve(_spender, _value)){\r\n      if(!_spender.call(bytes4(bytes32(sha3(\"receiveApproval(address,uint256,address)\"))), msg.sender, _value, this))\r\n        revert();\r\n\r\n      return true;\r\n    }\r\n  }\r\n\r\n  // Transfers \"value\" tokens to \"to\" address\r\n  // Only executed adter \"transferableBlock\"\r\n  // Only executed before \"endBlock\" (see \"Expiration\" contract)\r\n  // Only executed if there are enough funds and don't overflow\r\n  function transfer(address to, uint value)\r\n    public\r\n    lockUpPeriod\r\n    validUntil\r\n    returns (bool success)\r\n  {\r\n    if(super.transfer(to, value))\r\n      return true;\r\n\r\n    return false;\r\n  }\r\n\r\n  // Transfers \"value\" tokens to \"to\" address from \"from\"\r\n  // Only executed adter \"transferableBlock\"\r\n  // Only executed before \"endBlock\" (see \"Expiration\" contract)\r\n  // Only executed if there are enough funds available and approved, and don't overflow\r\n  function transferFrom(address from, address to, uint value)\r\n    public\r\n    lockUpPeriod\r\n    validUntil\r\n    returns (bool success)\r\n  {\r\n    if(super.transferFrom(from, to, value))\r\n      return true;\r\n\r\n    return false;\r\n  }\r\n\r\n  function refundTokens(address _token, address _refund, uint _value) onlyOwner {\r\n\r\n    Token(_token).transfer(_refund, _value);\r\n  }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minter\",\"type\":\"address\"}],\"name\":\"removeMinter\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transferableBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_refund\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"refundTokens\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minter\",\"type\":\"address\"}],\"name\":\"addMinter\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"block\",\"type\":\"uint256\"}],\"name\":\"setEndBlock\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numMinters\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"endMinting\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"minters\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"open\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_decimals\",\"type\":\"uint256\"},{\"name\":\"_transferableBlock\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"who\",\"type\":\"address\"}],\"name\":\"NewMinter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"ProjectToken","CompilerVersion":"v0.4.13+commit.fb4cb1a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000004628680000000000000000000000000000000000000000000000000000000000000005466c6978780000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005464c495858000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://bb1d31dbe59c951afed7e6a5def379a6dcf96ba5ce934dba364d9aa662b46c11"}]}