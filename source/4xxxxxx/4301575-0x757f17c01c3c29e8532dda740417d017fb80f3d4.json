{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.15;\r\n\r\ncontract ERC20 {\r\n    function totalSupply() constant returns (uint256 totalSupply) {}\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {}\r\n    function transfer(address _recipient, uint256 _value) returns (bool success) {}\r\n    function transferFrom(address _from, address _recipient, uint256 _value) returns (bool success) {}\r\n    function approve(address _spender, uint256 _value) returns (bool success) {}\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {}\r\n\r\n    event Transfer(address indexed _from, address indexed _recipient, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\ncontract StandardToken is ERC20 {\r\n\r\n\tuint256 public totalSupply;\r\n\tmapping (address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n    \r\n    modifier when_can_transfer(address _from, uint256 _value) {\r\n        if (balances[_from] >= _value) _;\r\n    }\r\n\r\n    modifier when_can_receive(address _recipient, uint256 _value) {\r\n        if (balances[_recipient] + _value > balances[_recipient]) _;\r\n    }\r\n\r\n    modifier when_is_allowed(address _from, address _delegate, uint256 _value) {\r\n        if (allowed[_from][_delegate] >= _value) _;\r\n    }\r\n\r\n    function transfer(address _recipient, uint256 _value)\r\n        when_can_transfer(msg.sender, _value)\r\n        when_can_receive(_recipient, _value)\r\n        returns (bool o_success)\r\n    {\r\n        balances[msg.sender] -= _value;\r\n        balances[_recipient] += _value;\r\n        Transfer(msg.sender, _recipient, _value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _from, address _recipient, uint256 _value)\r\n        when_can_transfer(_from, _value)\r\n        when_can_receive(_recipient, _value)\r\n        when_is_allowed(_from, msg.sender, _value)\r\n        returns (bool o_success)\r\n    {\r\n        allowed[_from][msg.sender] -= _value;\r\n        balances[_from] -= _value;\r\n        balances[_recipient] += _value;\r\n        Transfer(_from, _recipient, _value);\r\n        return true;\r\n    }\r\n\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) returns (bool o_success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) constant returns (uint256 o_remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n}\r\n\r\ncontract ZBCToken is StandardToken {\r\n\r\n\t//FIELDS\r\n\tstring public name = \"ZBCoin\";\r\n    string public symbol = \"ZBC\";\r\n    uint public decimals = 3;\r\n\r\n\t//ZBC Token total supply - included decimals below\r\n\tuint public constant MAX_SUPPLY = 300000000000;\r\n\t\r\n\t//ASSIGNED IN INITIALIZATION\r\n\taddress public ownerAddress;  // Address of the contract owner. \r\n\tbool public halted;           // halts the controller if true.\r\n\tmapping(address => uint256) public issuedTokens;\r\n\r\n\tmodifier only_owner() {\r\n\t\tif (msg.sender != ownerAddress) throw;\r\n\t\t_;\r\n\t}\r\n\r\n\t//May only be called if the crowdfund has not been halted\r\n\tmodifier is_not_halted() {\r\n\t\tif (halted) throw;\r\n\t\t_;\r\n\t}\r\n\r\n\t// EVENTS\r\n\tevent Issue(address indexed _recipient, uint _amount);\r\n\r\n\t// Initialization contract assigns address of crowdfund contract and end time.\r\n\tfunction ZBCToken () {\r\n\t\townerAddress = msg.sender;\r\n\t\tbalances[this] += MAX_SUPPLY; // create a pool of token\r\n\t\ttotalSupply += MAX_SUPPLY;    // and set a fix max supply\r\n\t}\r\n\r\n\t// used by owner of contract to halt crowdsale and no longer except ether.\r\n\tfunction toggleHalt(bool _halted) only_owner {\r\n\t\thalted = _halted;\r\n\t}\r\n\r\n\tfunction issueToken(address _recipent, uint _amount) \r\n\t\tonly_owner \r\n\t\tis_not_halted\r\n\t\treturns (bool o_success)\r\n\t{\r\n\t\tthis.transfer(_recipent, _amount);\r\n\t\tIssue(_recipent, _amount);\r\n\t\tissuedTokens[_recipent] += _amount;\r\n\t\treturn true;\r\n\t}\r\n\r\n\t// Transfer amount of tokens from sender account to recipient.\r\n\t// Only callable after the crowd fund end date.\r\n\tfunction transfer(address _recipient, uint _amount)\r\n\t\tis_not_halted\r\n\t\treturns (bool o_success)\r\n\t{\r\n\t\treturn super.transfer(_recipient, _amount);\r\n\t}\r\n\r\n\t// Transfer amount of tokens from a specified address to a recipient.\r\n\t// Only callable after the crowd fund end date.\r\n\tfunction transferFrom(address _from, address _recipient, uint _amount)\r\n\t\tis_not_halted\r\n\t\treturns (bool o_success)\r\n\t{\r\n\t\treturn super.transferFrom(_from, _recipient, _amount);\r\n\t}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"o_success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_recipient\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"o_success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_halted\",\"type\":\"bool\"}],\"name\":\"toggleHalt\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"issuedTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipient\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"o_success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"halted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"o_remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipent\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"issueToken\",\"outputs\":[{\"name\":\"o_success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Issue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"ZBCToken","CompilerVersion":"v0.4.15+commit.bbb8e64f","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://90edca2fbe8a78db8b9c0b768b23771b9644e57b331f3a12fa62a6250d37ffe1"}]}