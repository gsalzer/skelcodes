{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.19;\r\n\r\n// implement safemath as a library\r\nlibrary SafeMath {\r\n\r\n  function mul(uint256 a, uint256 b) internal pure  returns (uint256) {\r\n    uint256 c = a * b;\r\n    require(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a);\r\n    return c;\r\n  }\r\n  \r\n}\r\n\r\ncontract ESZCoin {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    address     public      owner;\r\n    string      public      name;\r\n    string      public      symbol;\r\n    uint256     public      totalSupply;\r\n    uint8       public      decimals;\r\n    bool        public      globalTransferLock;\r\n\r\n    mapping (address => bool)                           public      accountLock;\r\n    mapping (address => uint256)                        public      balances;\r\n    mapping (address => mapping(address => uint256))    public      allowed;\r\n\r\n    event Transfer(address indexed _sender, address indexed _recipient, uint256 _amount);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _amount);\r\n    event GlobalTransfersLocked(bool indexed _transfersFrozenGlobally);\r\n    event GlobalTransfersUnlocked(bool indexed _transfersThawedGlobally);\r\n    event AccountTransfersFrozen(address indexed _eszHolder, bool indexed _accountTransfersFrozen);\r\n    event AccountTransfersThawed(address indexed _eszHolder, bool indexed _accountTransfersThawed);\r\n\r\n    /**\r\n        @dev Checks to ensure that msg.sender is the owner\r\n    */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n        @dev Checks to ensure that global transfers are not locked\r\n    */\r\n    modifier transfersUnlocked() {\r\n        require(!globalTransferLock);\r\n        _;\r\n    }\r\n\r\n    /**CONSTRUCTOR*/\r\n    function ESZCoin() {\r\n        owner = msg.sender;\r\n        totalSupply = 10000000000000000000000000;\r\n        balances[msg.sender] = totalSupply;\r\n        name = \"ESZCoin\";\r\n        symbol = \"ESZ\";\r\n        decimals = 18;\r\n        globalTransferLock = false;\r\n    } \r\n\r\n    /**\r\n        @dev Freezes transfers globally\r\n    */\r\n    function freezeGlobalTansfers()\r\n        public\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        globalTransferLock = true;\r\n        GlobalTransfersLocked(true);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n        @dev Thaws transfers globally\r\n    */\r\n    function thawGlobalTransfers()\r\n        public\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        globalTransferLock = false;\r\n        GlobalTransfersUnlocked(true);\r\n    }\r\n\r\n    /**\r\n        @dev Freezes a particular account, preventing them from making transfers\r\n    */\r\n    function freezeAccountTransfers(\r\n        address _eszHolder\r\n    )\r\n        public\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        accountLock[_eszHolder] = true;\r\n        AccountTransfersFrozen(_eszHolder, true);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n        @dev Thaws a particular account, allowing them to make transfers again\r\n    */\r\n    function thawAccountTransfers(\r\n        address _eszHolder\r\n    )\r\n        public\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        accountLock[_eszHolder] = false;\r\n        AccountTransfersThawed(_eszHolder, true);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n        @dev Used to transfers tokens\r\n    */\r\n    function transfer(\r\n        address _recipient,\r\n        uint256 _amount\r\n    )\r\n        public\r\n        returns (bool)\r\n    {\r\n        require(accountLock[msg.sender] == false);\r\n        require(transferCheck(msg.sender, _recipient, _amount));\r\n        balances[msg.sender] = balances[msg.sender].sub(_amount);\r\n        balances[_recipient] = balances[_recipient].add(_amount);\r\n        Transfer(msg.sender, _recipient, _amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n        @dev Used to transfers tokens to someone on behalf of the owner account. Must be approved\r\n    */\r\n    function transferFrom(\r\n        address _owner,\r\n        address _recipient,\r\n        uint256 _amount\r\n    )\r\n        public\r\n        returns (bool)\r\n    {\r\n        require(accountLock[_owner] == false);\r\n        require(allowed[_owner][msg.sender] >= _amount);\r\n        require(transferCheck(_owner, _recipient, _amount));\r\n        allowed[_owner][msg.sender] = allowed[_owner][msg.sender].sub(_amount);\r\n        balances[_owner] = balances[_owner].sub(_amount);\r\n        balances[_recipient] = balances[_recipient].add(_amount);\r\n        Transfer(_owner, _recipient, _amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n        @dev Used to approve another account to spend on your behalf\r\n    */\r\n    function approve(\r\n        address _spender,\r\n        uint256 _amount\r\n    )\r\n        public\r\n        returns (bool)\r\n    {\r\n        allowed[msg.sender][_spender] = _amount;\r\n        Approval(msg.sender, _spender, _amount);\r\n        return true;\r\n    }\r\n\r\n    /** INTERNALS */\r\n\r\n    /**\r\n        @dev Does a sanity check of the parameters in a transfer, makes sure transfers are allowed\r\n    */\r\n    function transferCheck(\r\n        address _sender,\r\n        address _recipient,\r\n        uint256 _amount\r\n    )\r\n        internal\r\n        view\r\n        transfersUnlocked\r\n        returns (bool)\r\n    {\r\n        require(_amount > 0);\r\n        require(balances[_sender] >= _amount);\r\n        require(balances[_sender].sub(_amount) >= 0);\r\n        require(balances[_recipient].add(_amount) > balances[_recipient]);\r\n        return true;\r\n    }\r\n\r\n    /** GETTERS */\r\n    \r\n    /**\r\n        @dev Retrieves total supply\r\n    */\r\n    function totalSupply()\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return totalSupply;\r\n    }\r\n\r\n    /**\r\n        @dev Retrieves the balance of an ESZ holder\r\n    */\r\n    function balanceOf(\r\n        address _eszHolder\r\n    )\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return balances[_eszHolder];\r\n    }\r\n\r\n    /**\r\n        @dev Retrieves the balance of spender for owner\r\n    */\r\n    function allowance(\r\n        address _owner,\r\n        address _spender\r\n    )\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"globalTransferLock\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"accountLock\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_recipient\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_eszHolder\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"thawGlobalTransfers\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_eszHolder\",\"type\":\"address\"}],\"name\":\"freezeAccountTransfers\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipient\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_eszHolder\",\"type\":\"address\"}],\"name\":\"thawAccountTransfers\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"freezeGlobalTansfers\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_transfersFrozenGlobally\",\"type\":\"bool\"}],\"name\":\"GlobalTransfersLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_transfersThawedGlobally\",\"type\":\"bool\"}],\"name\":\"GlobalTransfersUnlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_eszHolder\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_accountTransfersFrozen\",\"type\":\"bool\"}],\"name\":\"AccountTransfersFrozen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_eszHolder\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_accountTransfersThawed\",\"type\":\"bool\"}],\"name\":\"AccountTransfersThawed\",\"type\":\"event\"}]","ContractName":"ESZCoin","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://9554af9bd86495d40874b042b953591d8f74d917e8639ed2cdf745f0c7bb930e"}]}