{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.15;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public constant returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n\r\n    // To change the approve amount you first have to reduce the addresses`\r\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n    //  already 0 to mitigate the race condition described here:\r\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   */\r\n  function increaseApproval (address _spender, uint _addedValue) public returns (bool success) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  function decreaseApproval (address _spender, uint _subtractedValue) public returns (bool success) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Mintable token\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\r\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n */\r\n\r\ncontract MintableToken is StandardToken, Ownable {\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\r\n    totalSupply = totalSupply.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    Mint(_to, _amount);\r\n    Transfer(0x0, _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() onlyOwner public returns (bool) {\r\n    mintingFinished = true;\r\n    MintFinished();\r\n    return true;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    Unpause();\r\n  }\r\n}\r\n\r\ncontract PausableToken is StandardToken, Pausable {\r\n\r\n  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\r\n    return super.transfer(_to, _value);\r\n  }\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\r\n    return super.transferFrom(_from, _to, _value);\r\n  }\r\n\r\n  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\r\n    return super.approve(_spender, _value);\r\n  }\r\n\r\n  function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\r\n    return super.increaseApproval(_spender, _addedValue);\r\n  }\r\n\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\r\n    return super.decreaseApproval(_spender, _subtractedValue);\r\n  }\r\n}\r\n\r\n\r\ncontract FSBToken is MintableToken, PausableToken {\r\n  string public constant name = \"Forty Seven Bank Token\";\r\n  string public constant symbol = \"FSBT\";\r\n  uint8 public constant decimals = 18;\r\n  string public constant version = \"H0.1\"; //human 0.1 standard. Just an arbitrary versioning scheme.\r\n}\r\n\r\n/**\r\n * @title Crowdsale\r\n * @dev Modified contract for managing a token crowdsale.\r\n * FourtySevenTokenCrowdsale have pre-sale and main sale periods, where investors can make\r\n * token purchases and the crowdsale will assign them tokens based\r\n * on a token per ETH rate and the system of bonuses.\r\n * Funds collected are forwarded to a wallet as they arrive.\r\n * pre-sale and main sale periods both have caps defined in tokens\r\n */\r\n\r\ncontract FourtySevenTokenCrowdsale is Ownable {\r\n  using SafeMath for uint256;\r\n\r\n  struct TimeBonus {\r\n    uint256 bonusPeriodEndTime;\r\n    uint percent;\r\n    bool isAmountDependent;\r\n  }\r\n\r\n  struct AmountBonus {\r\n    uint256 amount;\r\n    uint percent;\r\n  }\r\n\r\n  // true for finalised crowdsale\r\n  bool public isFinalised;\r\n\r\n  // The token being sold\r\n  MintableToken public token;\r\n\r\n  // start and end timestamps where pre-investments are allowed (both inclusive)\r\n  uint256 public preSaleStartTime;\r\n  uint256 public preSaleEndTime;\r\n\r\n  // start and end timestamps where main-investments are allowed (both inclusive)\r\n  uint256 public mainSaleStartTime;\r\n  uint256 public mainSaleEndTime;\r\n\r\n  // maximum amout of wei for pre-sale and main sale\r\n  uint256 public preSaleWeiCap;\r\n  uint256 public mainSaleWeiCap;\r\n\r\n  // address where funds are collected\r\n  address public wallet;\r\n\r\n  // address where final 10% of funds will be collected\r\n  address public tokenWallet;\r\n\r\n  // how many token units a buyer gets per wei\r\n  uint256 public rate;\r\n\r\n  // amount of raised money in wei\r\n  uint256 public weiRaised;\r\n\r\n  TimeBonus[] public timeBonuses;\r\n  AmountBonus[] public amountBonuses;\r\n\r\n  uint256 public preSaleBonus;\r\n  uint256 public preSaleMinimumWei;\r\n  uint256 public defaultPercent;\r\n\r\n  /**\r\n   * event for token purchase logging\r\n   * @param purchaser who paid for the tokens\r\n   * @param beneficiary who got the tokens\r\n   * @param value weis paid for purchase\r\n   * @param amount amount of tokens purchased\r\n   */\r\n  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n  event FinalisedCrowdsale(uint256 totalSupply, uint256 minterBenefit);\r\n\r\n  function FourtySevenTokenCrowdsale(uint256 _preSaleStartTime, uint256 _preSaleEndTime, uint256 _preSaleWeiCap, uint256 _mainSaleStartTime, uint256 _mainSaleEndTime, uint256 _mainSaleWeiCap, uint256 _rate, address _wallet, address _tokenWallet) public {\r\n\r\n    // can't start pre-sale in the past\r\n    require(_preSaleStartTime >= now);\r\n\r\n    // can't start main sale in the past\r\n    require(_mainSaleStartTime >= now);\r\n\r\n    // can't start main sale before the end of pre-sale\r\n    require(_preSaleEndTime < _mainSaleStartTime);\r\n\r\n    // the end of pre-sale can't happen before it's start\r\n    require(_preSaleStartTime < _preSaleEndTime);\r\n\r\n    // the end of main sale can't happen before it's start\r\n    require(_mainSaleStartTime < _mainSaleEndTime);\r\n\r\n    require(_rate > 0);\r\n    require(_preSaleWeiCap > 0);\r\n    require(_mainSaleWeiCap > 0);\r\n    require(_wallet != 0x0);\r\n    require(_tokenWallet != 0x0);\r\n\r\n    preSaleBonus = 30;\r\n    preSaleMinimumWei = 4700000000000000000;\r\n    defaultPercent = 0;\r\n\r\n    timeBonuses.push(TimeBonus(86400 * 3, 15, false));\r\n    timeBonuses.push(TimeBonus(86400 * 7, 10, false));\r\n    timeBonuses.push(TimeBonus(86400 * 14, 5, false));\r\n    timeBonuses.push(TimeBonus(86400 * 28, 0, true));\r\n\r\n    amountBonuses.push(AmountBonus(25000 ether, 15));\r\n    amountBonuses.push(AmountBonus(5000 ether, 10));\r\n    amountBonuses.push(AmountBonus(2500 ether, 5));\r\n    amountBonuses.push(AmountBonus(500 ether, 2));\r\n\r\n    token = createTokenContract();\r\n\r\n    preSaleStartTime = _preSaleStartTime;\r\n    preSaleEndTime = _preSaleEndTime;\r\n    preSaleWeiCap = _preSaleWeiCap;\r\n    mainSaleStartTime = _mainSaleStartTime;\r\n    mainSaleEndTime = _mainSaleEndTime;\r\n    mainSaleWeiCap = _mainSaleWeiCap;\r\n    rate = _rate;\r\n    wallet = _wallet;\r\n    tokenWallet = _tokenWallet;\r\n    isFinalised = false;\r\n  }\r\n\r\n  // creates the token to be sold.\r\n  // override this method to have crowdsale of a specific mintable token.\r\n  function createTokenContract() internal returns (MintableToken) {\r\n    return new FSBToken();\r\n  }\r\n\r\n  // fallback function can be used to buy tokens\r\n  function () payable {\r\n    buyTokens(msg.sender);\r\n  }\r\n\r\n  // low level token purchase function\r\n  function buyTokens(address beneficiary) public payable {\r\n\r\n    require(beneficiary != 0x0);\r\n    require(msg.value != 0);\r\n    require(!isFinalised);\r\n\r\n    uint256 weiAmount = msg.value;\r\n\r\n    validateWithinPeriods();\r\n    validateWithinCaps(weiAmount);\r\n\r\n    // calculate token amount to be created\r\n    uint256 tokens = weiAmount.mul(rate);\r\n\r\n    uint256 percent = getBonusPercent(tokens, now);\r\n\r\n    // add bonus to tokens depends on the period\r\n    uint256 bonusedTokens = applyBonus(tokens, percent);\r\n\r\n    // update state\r\n    weiRaised = weiRaised.add(weiAmount);\r\n    token.mint(beneficiary, bonusedTokens);\r\n    TokenPurchase(msg.sender, beneficiary, weiAmount, bonusedTokens);\r\n\r\n    forwardFunds();\r\n  }\r\n\r\n  // owner can mint tokens during crowdsale withing defined caps\r\n  function mintTokens(address beneficiary, uint256 weiAmount, uint256 forcePercent) external onlyOwner returns (bool) {\r\n\r\n    require(forcePercent <= 100);\r\n    require(beneficiary != 0x0);\r\n    require(weiAmount != 0);\r\n    require(!isFinalised);\r\n\r\n    validateWithinCaps(weiAmount);\r\n\r\n    uint256 percent = 0;\r\n\r\n    // calculate token amount to be created\r\n    uint256 tokens = weiAmount.mul(rate);\r\n\r\n    if (forcePercent == 0) {\r\n      percent = getBonusPercent(tokens, now);\r\n    } else {\r\n      percent = forcePercent;\r\n    }\r\n\r\n    // add bonus to tokens depends on the period\r\n    uint256 bonusedTokens = applyBonus(tokens, percent);\r\n\r\n    // update state\r\n    weiRaised = weiRaised.add(weiAmount);\r\n    token.mint(beneficiary, bonusedTokens);\r\n    TokenPurchase(msg.sender, beneficiary, weiAmount, bonusedTokens);\r\n  }\r\n\r\n  // finish crowdsale,\r\n  // take totalSupply as 90% and mint 10% more to specified owner's wallet\r\n  // then stop minting forever\r\n\r\n  function finaliseCrowdsale() external onlyOwner {\r\n    require(!isFinalised);\r\n    uint256 totalSupply = token.totalSupply();\r\n    uint256 minterBenefit = totalSupply.mul(10).div(90);\r\n    token.mint(tokenWallet, minterBenefit);\r\n    token.finishMinting();\r\n    FinalisedCrowdsale(totalSupply, minterBenefit);\r\n    isFinalised = true;\r\n  }\r\n\r\n  // set new dates for pre-salev (emergency case)\r\n  function setPreSaleParameters(uint256 _preSaleStartTime, uint256 _preSaleEndTime, uint256 _preSaleWeiCap, uint256 _preSaleBonus, uint256 _preSaleMinimumWei) public onlyOwner {\r\n    require(!isFinalised);\r\n    require(_preSaleStartTime < _preSaleEndTime);\r\n    require(_preSaleWeiCap > 0);\r\n    preSaleStartTime = _preSaleStartTime;\r\n    preSaleEndTime = _preSaleEndTime;\r\n    preSaleWeiCap = _preSaleWeiCap;\r\n    preSaleBonus = _preSaleBonus;\r\n    preSaleMinimumWei = _preSaleMinimumWei;\r\n  }\r\n\r\n  // set new dates for main-sale (emergency case)\r\n  function setMainSaleParameters(uint256 _mainSaleStartTime, uint256 _mainSaleEndTime, uint256 _mainSaleWeiCap) public onlyOwner {\r\n    require(!isFinalised);\r\n    require(_mainSaleStartTime < _mainSaleEndTime);\r\n    require(_mainSaleWeiCap > 0);\r\n    mainSaleStartTime = _mainSaleStartTime;\r\n    mainSaleEndTime = _mainSaleEndTime;\r\n    mainSaleWeiCap = _mainSaleWeiCap;\r\n  }\r\n\r\n  // set new wallets (emergency case)\r\n  function setWallets(address _wallet, address _tokenWallet) public onlyOwner {\r\n    require(!isFinalised);\r\n    require(_wallet != 0x0);\r\n    require(_tokenWallet != 0x0);\r\n    wallet = _wallet;\r\n    tokenWallet = _tokenWallet;\r\n  }\r\n\r\n  // set new rate (emergency case)\r\n  function setRate(uint256 _rate) public onlyOwner {\r\n    require(!isFinalised);\r\n    require(_rate > 0);\r\n    rate = _rate;\r\n  }\r\n\r\n  // set token on pause\r\n  function pauseToken() external onlyOwner {\r\n    require(!isFinalised);\r\n    FSBToken(token).pause();\r\n  }\r\n\r\n  // unset token's pause\r\n  function unpauseToken() external onlyOwner {\r\n    FSBToken(token).unpause();\r\n  }\r\n\r\n    // set token Ownership\r\n  function transferTokenOwnership(address newOwner) external onlyOwner {\r\n    FSBToken(token).transferOwnership(newOwner);\r\n  }\r\n\r\n  // @return true if main sale event has ended\r\n  function mainSaleHasEnded() external constant returns (bool) {\r\n    return now > mainSaleEndTime;\r\n  }\r\n\r\n  // @return true if pre sale event has ended\r\n  function preSaleHasEnded() external constant returns (bool) {\r\n    return now > preSaleEndTime;\r\n  }\r\n\r\n  // send ether to the fund collection wallet\r\n  function forwardFunds() internal {\r\n    wallet.transfer(msg.value);\r\n  }\r\n\r\n  // we want to be able to check all bonuses in already deployed contract\r\n  // that's why we pass currentTime as a parameter instead of using \"now\"\r\n\r\n  function getBonusPercent(uint256 tokens, uint256 currentTime) public constant returns (uint256 percent) {\r\n    //require(currentTime >= preSaleStartTime);\r\n    bool isPreSale = currentTime >= preSaleStartTime && currentTime <= preSaleEndTime;\r\n    if (isPreSale) {\r\n      return preSaleBonus;\r\n    } else {\r\n      uint256 diffInSeconds = currentTime.sub(mainSaleStartTime);\r\n      for (uint i = 0; i < timeBonuses.length; i++) {\r\n        if (diffInSeconds <= timeBonuses[i].bonusPeriodEndTime && !timeBonuses[i].isAmountDependent) {\r\n          return timeBonuses[i].percent;\r\n        } else if (timeBonuses[i].isAmountDependent) {\r\n          for (uint j = 0; j < amountBonuses.length; j++) {\r\n            if (tokens >= amountBonuses[j].amount) {\r\n              return amountBonuses[j].percent;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return defaultPercent;\r\n  }\r\n\r\n  function applyBonus(uint256 tokens, uint256 percent) internal constant returns (uint256 bonusedTokens) {\r\n    uint256 tokensToAdd = tokens.mul(percent).div(100);\r\n    return tokens.add(tokensToAdd);\r\n  }\r\n\r\n  function validateWithinPeriods() internal constant {\r\n    // within pre-sale or main sale\r\n    require((now >= preSaleStartTime && now <= preSaleEndTime) || (now >= mainSaleStartTime && now <= mainSaleEndTime));\r\n  }\r\n\r\n  function validateWithinCaps(uint256 weiAmount) internal constant {\r\n    uint256 expectedWeiRaised = weiRaised.add(weiAmount);\r\n\r\n    // within pre-sale\r\n    if (now >= preSaleStartTime && now <= preSaleEndTime) {\r\n      require(weiAmount >= preSaleMinimumWei);\r\n      require(expectedWeiRaised <= preSaleWeiCap);\r\n    }\r\n\r\n    // within main sale\r\n    if (now >= mainSaleStartTime && now <= mainSaleEndTime) {\r\n      require(expectedWeiRaised <= mainSaleWeiCap);\r\n    }\r\n  }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"preSaleStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_preSaleStartTime\",\"type\":\"uint256\"},{\"name\":\"_preSaleEndTime\",\"type\":\"uint256\"},{\"name\":\"_preSaleWeiCap\",\"type\":\"uint256\"},{\"name\":\"_preSaleBonus\",\"type\":\"uint256\"},{\"name\":\"_preSaleMinimumWei\",\"type\":\"uint256\"}],\"name\":\"setPreSaleParameters\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferTokenOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mainSaleEndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finaliseCrowdsale\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pauseToken\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preSaleHasEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"setRate\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpauseToken\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"},{\"name\":\"weiAmount\",\"type\":\"uint256\"},{\"name\":\"forcePercent\",\"type\":\"uint256\"}],\"name\":\"mintTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokens\",\"type\":\"uint256\"},{\"name\":\"currentTime\",\"type\":\"uint256\"}],\"name\":\"getBonusPercent\",\"outputs\":[{\"name\":\"percent\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preSaleMinimumWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"defaultPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_mainSaleStartTime\",\"type\":\"uint256\"},{\"name\":\"_mainSaleEndTime\",\"type\":\"uint256\"},{\"name\":\"_mainSaleWeiCap\",\"type\":\"uint256\"}],\"name\":\"setMainSaleParameters\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isFinalised\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mainSaleWeiCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mainSaleHasEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preSaleBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mainSaleStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preSaleEndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preSaleWeiCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"amountBonuses\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"percent\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_tokenWallet\",\"type\":\"address\"}],\"name\":\"setWallets\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"timeBonuses\",\"outputs\":[{\"name\":\"bonusPeriodEndTime\",\"type\":\"uint256\"},{\"name\":\"percent\",\"type\":\"uint256\"},{\"name\":\"isAmountDependent\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_preSaleStartTime\",\"type\":\"uint256\"},{\"name\":\"_preSaleEndTime\",\"type\":\"uint256\"},{\"name\":\"_preSaleWeiCap\",\"type\":\"uint256\"},{\"name\":\"_mainSaleStartTime\",\"type\":\"uint256\"},{\"name\":\"_mainSaleEndTime\",\"type\":\"uint256\"},{\"name\":\"_mainSaleWeiCap\",\"type\":\"uint256\"},{\"name\":\"_rate\",\"type\":\"uint256\"},{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_tokenWallet\",\"type\":\"address\"}],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"minterBenefit\",\"type\":\"uint256\"}],\"name\":\"FinalisedCrowdsale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"FourtySevenTokenCrowdsale","CompilerVersion":"v0.4.15+commit.bbb8e64f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000059f73063000000000000000000000000000000000000000000000000000000005a09a5600000000000000000000000000000000000000000000000c328093e61ee400000000000000000000000000000000000000000000000000000000000005a2e9d70000000000000000000000000000000000000000000000000000000005a537960000000000000000000000000000000000000000000004c3ba39c5e411100000000000000000000000000000000000000000000000000000000000000000000d400000000000000000000000078e433cb18057f328d4b16fc72c9d258d2543fec00000000000000000000000016321e2c5226db67c098597dcae7db74af88ff95","Library":"","SwarmSource":"bzzr://f43f7f5e5ffa9617f5001557fe956859f89b6e8ad5ce6a025668c09e92d26929"}]}