{"status":"1","message":"OK","result":[{"SourceCode":"{\"ConvertLib.sol\":{\"content\":\"pragma solidity ^0.4.2;\\n\\nlibrary ConvertLib{\\n\\tfunction convert(uint amount,uint conversionRate) returns (uint convertedAmount)\\n\\t{\\n\\t\\treturn amount * conversionRate;\\n\\t}\\n}\\n\"},\"MetaCoin.sol\":{\"content\":\"pragma solidity ^0.4.2;\\n\\nimport \\\"./ConvertLib.sol\\\";\\n\\n// This is just a simple example of a coin-like contract.\\n// It is not standards compatible and cannot be expected to talk to other\\n// coin/token contracts. If you want to create a standards-compliant\\n// token, see: https://github.com/ConsenSys/Tokens. Cheers!\\n\\ncontract MetaCoin {\\n\\tmapping (address =\\u003e uint) balances;\\n\\n\\tevent Transfer(address indexed _from, address indexed _to, uint256 _value);\\n\\n\\tfunction MetaCoin() {\\n\\t\\tbalances[tx.origin] = 10000;\\n\\t}\\n\\n\\tfunction sendCoin(address receiver, uint amount) returns(bool sufficient) {\\n\\t\\tif (balances[msg.sender] \\u003c amount) return false;\\n\\t\\tbalances[msg.sender] -= amount;\\n\\t\\tbalances[receiver] += amount;\\n\\t\\tTransfer(msg.sender, receiver, amount);\\n\\t\\treturn true;\\n\\t}\\n\\n\\tfunction getBalanceInEth(address addr) returns(uint){\\n\\t\\treturn ConvertLib.convert(getBalance(addr),2);\\n\\t}\\n\\n\\tfunction getBalance(address addr) returns(uint) {\\n\\t\\treturn balances[addr];\\n\\t}\\n}\\n\"},\"Migrations.sol\":{\"content\":\"pragma solidity ^0.4.2;\\n\\ncontract Migrations {\\n  address public owner;\\n  uint public last_completed_migration;\\n\\n  modifier restricted() {\\n    if (msg.sender == owner) _;\\n  }\\n\\n  function Migrations() {\\n    owner = msg.sender;\\n  }\\n\\n  function setCompleted(uint completed) restricted {\\n    last_completed_migration = completed;\\n  }\\n\\n  function upgrade(address new_address) restricted {\\n    Migrations upgraded = Migrations(new_address);\\n    upgraded.setCompleted(last_completed_migration);\\n  }\\n}\\n\"},\"StandardToken.sol\":{\"content\":\"/*\\nYou should inherit from StandardToken or, for a token like you would want to\\ndeploy in something like Mist, see HumanStandardToken.sol.\\n(This implements ONLY the standard functions and NOTHING else.\\nIf you deploy this, you won\\u0027t have anything useful.)\\n\\nImplements ERC 20 Token standard: https://github.com/ethereum/EIPs/issues/20\\n.*/\\npragma solidity ^0.4.8;\\n\\nimport \\\"./Token.sol\\\";\\n\\ncontract StandardToken is Token {\\n\\n    uint256 constant MAX_UINT256 = 2**256 - 1;\\n\\n    function transfer(address _to, uint256 _value) returns (bool success) {\\n        //Default assumes totalSupply can\\u0027t be over max (2^256 - 1).\\n        //If your token leaves out totalSupply and can issue more tokens as time goes on, you need to check if it doesn\\u0027t wrap.\\n        //Replace the if with this one instead.\\n        //require(balances[msg.sender] \\u003e= _value \\u0026\\u0026 balances[_to] + _value \\u003e balances[_to]);\\n        require(balances[msg.sender] \\u003e= _value);\\n        balances[msg.sender] -= _value;\\n        balances[_to] += _value;\\n        Transfer(msg.sender, _to, _value);\\n        return true;\\n    }\\n\\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\\n        //same as above. Replace this line with the following if you want to protect against wrapping uints.\\n        //require(balances[_from] \\u003e= _value \\u0026\\u0026 allowed[_from][msg.sender] \\u003e= _value \\u0026\\u0026 balances[_to] + _value \\u003e balances[_to]);\\n        uint256 allowance = allowed[_from][msg.sender];\\n        require(balances[_from] \\u003e= _value \\u0026\\u0026 allowance \\u003e= _value);\\n        balances[_to] += _value;\\n        balances[_from] -= _value;\\n        if (allowance \\u003c MAX_UINT256) {\\n            allowed[_from][msg.sender] -= _value;\\n        }\\n        Transfer(_from, _to, _value);\\n        return true;\\n    }\\n\\n    function balanceOf(address _owner) constant returns (uint256 balance) {\\n        return balances[_owner];\\n    }\\n\\n    function approve(address _spender, uint256 _value) returns (bool success) {\\n        allowed[msg.sender][_spender] = _value;\\n        Approval(msg.sender, _spender, _value);\\n        return true;\\n    }\\n\\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\\n      return allowed[_owner][_spender];\\n    }\\n\\n    mapping (address =\\u003e uint256) balances;\\n    mapping (address =\\u003e mapping (address =\\u003e uint256)) allowed;\\n}\\n\"},\"Token.sol\":{\"content\":\"// Abstract contract for the full ERC 20 Token standard\\n// https://github.com/ethereum/EIPs/issues/20\\npragma solidity ^0.4.8;\\n\\ncontract Token {\\n    /* This is a slight change to the ERC20 base standard.\\n    function totalSupply() constant returns (uint256 supply);\\n    is replaced with:\\n    uint256 public totalSupply;\\n    This automatically creates a getter function for the totalSupply.\\n    This is moved to the base contract since public getter functions are not\\n    currently recognised as an implementation of the matching abstract\\n    function by the compiler.\\n    */\\n    /// total amount of tokens\\n    uint256 public totalSupply;\\n\\n    /// @param _owner The address from which the balance will be retrieved\\n    /// @return The balance\\n    function balanceOf(address _owner) constant returns (uint256 balance);\\n\\n    /// @notice send `_value` token to `_to` from `msg.sender`\\n    /// @param _to The address of the recipient\\n    /// @param _value The amount of token to be transferred\\n    /// @return Whether the transfer was successful or not\\n    function transfer(address _to, uint256 _value) returns (bool success);\\n\\n    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\\n    /// @param _from The address of the sender\\n    /// @param _to The address of the recipient\\n    /// @param _value The amount of token to be transferred\\n    /// @return Whether the transfer was successful or not\\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\\n\\n    /// @notice `msg.sender` approves `_spender` to spend `_value` tokens\\n    /// @param _spender The address of the account able to transfer the tokens\\n    /// @param _value The amount of tokens to be approved for transfer\\n    /// @return Whether the approval was successful or not\\n    function approve(address _spender, uint256 _value) returns (bool success);\\n\\n    /// @param _owner The address of the account owning tokens\\n    /// @param _spender The address of the account able to transfer the tokens\\n    /// @return Amount of remaining tokens allowed to spent\\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\\n\\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\\n}\\n\"},\"TokenAuction.sol\":{\"content\":\"pragma solidity ^0.4.8;\\nimport \\u0027./StandardToken.sol\\u0027;\\n\\ncontract TokenAuction is StandardToken {\\n    address public highestBidder;\\n    address owner;\\n\\n    mapping (address =\\u003e uint) public bids;\\n    uint totalBids;\\n    bool ended;\\n    uint public endTime;\\n    event Bid(address bidder, string message);\\n\\n    function TokenAuction(uint auctionDuration) public {\\n        owner = msg.sender;\\n        endTime = now + (auctionDuration * 1 minutes);\\n    }\\n\\n    function bid(string _message) payable public {\\n        require(endTime \\u003e now \\u0026\\u0026 msg.value \\u003e 0);\\n        if(bids[msg.sender] == 0){\\n            Bid(msg.sender, _message);\\n        }\\n        bids[msg.sender] += msg.value;\\n        totalBids += msg.value;\\n        if(bids[msg.sender] \\u003e bids[highestBidder]){\\n            highestBidder = msg.sender;\\n        }\\n    }\\n\\n    function() payable public { bid(\\\"\\\"); }\\n\\n    function endAuction() public {\\n        require(now \\u003e endTime \\u0026\\u0026 !ended);\\n        balances[highestBidder] = 1;\\n\\n        owner.transfer(this.balance);\\n        ended = true;\\n    }\\n}\\n\"}}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"bids\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_message\",\"type\":\"string\"}],\"name\":\"bid\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"highestBidder\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"endAuction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"auctionDuration\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"message\",\"type\":\"string\"}],\"name\":\"Bid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"TokenAuction","CompilerVersion":"v0.4.20+commit.3155dd80","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000156","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://0a67e16a6982ee1c02cdf0fdbcc42eaadb2a2b6878ead570b103443c504d90cf"}]}