{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract ERC223 {\r\n  uint public totalSupply;\r\n  function balanceOf(address who) constant returns (uint);\r\n\r\n  function name() constant returns (string _name);\r\n  function symbol() constant returns (string _symbol);\r\n  function decimals() constant returns (uint8 _decimals);\r\n  function totalSupply() constant returns (uint256 _supply);\r\n\r\n  function transfer(address to, uint value) returns (bool ok);\r\n  function transfer(address to, uint value, bytes data) returns (bool ok);\r\n  event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n  event ERC223Transfer(address indexed _from, address indexed _to, uint256 _value, bytes _data);\r\n}\r\n\r\ncontract ContractReceiver {\r\n  function tokenFallback(address _from, uint _value, bytes _data);\r\n}\r\n\r\ncontract ERC223Token is ERC223 {\r\n  using SafeMath for uint;\r\n\r\n  mapping(address => uint) balances;\r\n\r\n  string public name;\r\n  string public symbol;\r\n  uint8 public decimals;\r\n  uint256 public totalSupply;\r\n\r\n\r\n  // Function to access name of token .\r\n  function name() constant returns (string _name) {\r\n      return name;\r\n  }\r\n  // Function to access symbol of token .\r\n  function symbol() constant returns (string _symbol) {\r\n      return symbol;\r\n  }\r\n  // Function to access decimals of token .\r\n  function decimals() constant returns (uint8 _decimals) {\r\n      return decimals;\r\n  }\r\n  // Function to access total supply of tokens .\r\n  function totalSupply() constant returns (uint256 _totalSupply) {\r\n      return totalSupply;\r\n  }\r\n\r\n  // Function that is called when a user or another contract wants to transfer funds .\r\n  function transfer(address _to, uint _value, bytes _data) returns (bool success) {\r\n    if(isContract(_to)) {\r\n        return transferToContract(_to, _value, _data);\r\n    }\r\n    else {\r\n        return transferToAddress(_to, _value, _data);\r\n    }\r\n}\r\n\r\n  // Standard function transfer similar to ERC20 transfer with no _data .\r\n  // Added due to backwards compatibility reasons .\r\n  function transfer(address _to, uint _value) returns (bool success) {\r\n\r\n    //standard function transfer similar to ERC20 transfer with no _data\r\n    //added due to backwards compatibility reasons\r\n    bytes memory empty;\r\n    if(isContract(_to)) {\r\n        return transferToContract(_to, _value, empty);\r\n    }\r\n    else {\r\n        return transferToAddress(_to, _value, empty);\r\n    }\r\n}\r\n\r\n//assemble the given address bytecode. If bytecode exists then the _addr is a contract.\r\n  function isContract(address _addr) private returns (bool is_contract) {\r\n      uint length;\r\n      assembly {\r\n            //retrieve the size of the code on target address, this needs assembly\r\n            length := extcodesize(_addr)\r\n        }\r\n        if(length>0) {\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n  //function that is called when transaction target is an address\r\n  function transferToAddress(address _to, uint _value, bytes _data) private returns (bool success) {\r\n    if (balanceOf(msg.sender) < _value) revert();\r\n    balances[msg.sender] = balanceOf(msg.sender).sub(_value);\r\n    balances[_to] = balanceOf(_to).add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    ERC223Transfer(msg.sender, _to, _value, _data);\r\n    return true;\r\n  }\r\n\r\n  //function that is called when transaction target is a contract\r\n  function transferToContract(address _to, uint _value, bytes _data) private returns (bool success) {\r\n    if (balanceOf(msg.sender) < _value) revert();\r\n    balances[msg.sender] = balanceOf(msg.sender).sub(_value);\r\n    balances[_to] = balanceOf(_to).add(_value);\r\n    ContractReceiver reciever = ContractReceiver(_to);\r\n    reciever.tokenFallback(msg.sender, _value, _data);\r\n    Transfer(msg.sender, _to, _value);\r\n    ERC223Transfer(msg.sender, _to, _value, _data);\r\n    return true;\r\n  }\r\n\r\n\r\n  function balanceOf(address _owner) constant returns (uint balance) {\r\n    return balances[_owner];\r\n  }\r\n}\r\n\r\n\r\ncontract INZEI is ERC223Token {\r\n  string public name = \"INZEI\";\r\n  string public symbol = \"INZ\";\r\n  uint public decimals = 18;\r\n  uint public INITIAL_SUPPLY = 10000000000 * (10**uint256(decimals));\r\n\r\n  function INZEI() {\r\n    totalSupply = INITIAL_SUPPLY;\r\n    balances[msg.sender] = INITIAL_SUPPLY;\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"_totalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INITIAL_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"ERC223Transfer\",\"type\":\"event\"}]","ContractName":"INZEI","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://e9e75c8bc06f83167b9faae791a8efc88ef75a41e81af4bcbde25ce3c8342db3"}]}