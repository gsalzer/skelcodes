{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\n/**\r\n * Math operations with safety checks\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n\r\n  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n    return a < b ? a : b;\r\n  }\r\n\r\n  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    return a < b ? a : b;\r\n  }\r\n\r\n}\r\n\r\ncontract Token {\r\n    uint256 public totalSupply;\r\n    function balanceOf(address _owner) constant returns (uint256 balance);\r\n}\r\n\r\n/*  ERC 20 token */\r\ncontract PreSaleToken is Token {\r\n\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n    \r\n    mapping (address => uint256) balances;\r\n}\r\n\r\ncontract MASSTokenPreSale is PreSaleToken {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 public constant decimals = 18;\r\n    \r\n    bool public isEnded = false;\r\n    address public contractOwner;\r\n    address public massEthFund;\r\n    uint256 public presaleStartBlock;\r\n    uint256 public presaleEndBlock;\r\n    uint256 public constant tokenExchangeRate = 1300;\r\n    uint256 public constant tokenCap = 13 * (10**6) * 10**decimals;\r\n    \r\n    event CreatePreSale(address indexed _to, uint256 _amount);\r\n    \r\n    function MASSTokenPreSale(address _massEthFund, uint256 _presaleStartBlock, uint256 _presaleEndBlock) {\r\n        massEthFund = _massEthFund;\r\n        presaleStartBlock = _presaleStartBlock;\r\n        presaleEndBlock = _presaleEndBlock;\r\n        contractOwner = massEthFund;\r\n        totalSupply = 0;\r\n    }\r\n    \r\n    function () payable public {\r\n        if (isEnded) throw;\r\n        if (block.number < presaleStartBlock) throw;\r\n        if (block.number > presaleEndBlock) throw;\r\n        if (msg.value == 0) throw;\r\n        \r\n        uint256 tokens = msg.value.mul(tokenExchangeRate);\r\n        uint256 checkedSupply = totalSupply.add(tokens);\r\n        \r\n        if (tokenCap < checkedSupply) throw;\r\n        \r\n        totalSupply = checkedSupply;\r\n        balances[msg.sender] += tokens;\r\n        CreatePreSale(msg.sender, tokens);\r\n    }\r\n    \r\n    function endPreSale() public {\r\n        require (msg.sender == contractOwner);\r\n        if (isEnded) throw;\r\n        if (block.number < presaleEndBlock && totalSupply != tokenCap) throw;\r\n        isEnded = true;\r\n        if (!massEthFund.send(this.balance)) throw;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenExchangeRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presaleStartBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presaleEndBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"massEthFund\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"endPreSale\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_massEthFund\",\"type\":\"address\"},{\"name\":\"_presaleStartBlock\",\"type\":\"uint256\"},{\"name\":\"_presaleEndBlock\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"CreatePreSale\",\"type\":\"event\"}]","ContractName":"MASSTokenPreSale","CompilerVersion":"v0.4.11+commit.68ef5810","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000f199af8b17d81c41abe6220a1d7c9fe04d0d9d2c00000000000000000000000000000000000000000000000000000000003d3fd800000000000000000000000000000000000000000000000000000000003e55e4","Library":"","SwarmSource":"bzzr://484a74cdaed62a2223017f0c2f14a4082fc63508bb9bbac11296f2f913c2d6c4"}]}