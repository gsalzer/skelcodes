{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) constant returns (uint256);\r\n  function transfer(address to, uint256 value);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value);\r\n  function approve(address spender, uint256 value);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract FinalizableToken {\r\n    bool public isFinalized = false;\r\n}\r\n\r\ncontract BasicToken is FinalizableToken, ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) {\r\n    if (!isFinalized) revert();\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of. \r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amout of tokens to be transfered\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) {\r\n    if (!isFinalized) revert();\r\n\r\n    var _allowance = allowed[_from][msg.sender];\r\n\r\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n    // if (_value > _allowance) throw;\r\n\r\n    balances[_to] = balances[_to].add(_value);\r\n    balances[_from] = balances[_from].sub(_value);\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    Transfer(_from, _to, _value);\r\n  }\r\n\r\n  /**\r\n   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) {\r\n\r\n    // To change the approve amount you first have to reduce the addresses`\r\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n    //  already 0 to mitigate the race condition described here:\r\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    if ((_value != 0) && (allowed[msg.sender][_spender] != 0)) revert();\r\n\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifing the amount of tokens still avaible for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n}\r\n\r\ncontract SimpleToken is StandardToken {\r\n\r\n  string public name = \"SimpleToken\";\r\n  string public symbol = \"SIM\";\r\n  uint256 public decimals = 18;\r\n  uint256 public INITIAL_SUPPLY = 10000;\r\n\r\n  /**\r\n   * @dev Contructor that gives msg.sender all of existing tokens. \r\n   */\r\n  function SimpleToken() {\r\n    totalSupply = INITIAL_SUPPLY;\r\n    balances[msg.sender] = INITIAL_SUPPLY;\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  /** \r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner. \r\n   */\r\n  modifier onlyOwner() {\r\n    if (msg.sender != owner) {\r\n      revert();\r\n    }\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to. \r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner {\r\n    if (newOwner != address(0)) {\r\n      owner = newOwner;\r\n    }\r\n  }\r\n\r\n}\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\nlibrary Math {\r\n  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n    return a < b ? a : b;\r\n  }\r\n\r\n  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    return a < b ? a : b;\r\n  }\r\n}\r\n\r\ncontract RexToken is StandardToken, Ownable {\r\n\r\n  function version() constant returns (bytes32) {\r\n      return \"0.1.2-debug\";\r\n  }\r\n\r\n  string public constant name = \"REX - Real Estate tokens\";\r\n  string public constant symbol = \"REX\";\r\n  uint256 public constant decimals = 18;\r\n\r\n  uint256 constant BASE_RATE = 700;\r\n  uint256 constant ETH_RATE = 225; // TODO: update before deploying\r\n  uint256 constant USD_RAISED_CAP = 27*10**6; // 30*10**6 = $30 Million USD\r\n  uint256 constant ETHER_RAISED_CAP = USD_RAISED_CAP / ETH_RATE;\r\n  uint256 public constant WEI_RAISED_CAP = ETHER_RAISED_CAP * 1 ether;\r\n  uint256 constant DURATION = 4 weeks;\r\n\r\n  uint256 TOTAL_SHARE = 1000;\r\n  uint256 CROWDSALE_SHARE = 500;\r\n\r\n  address ANGELS_ADDRESS = 0x00998eba0E5B83018a0CFCdeCc5304f9f167d27a;\r\n  uint256 ANGELS_SHARE = 50;\r\n\r\n  address CORE_1_ADDRESS = 0x4aD48BE9bf6E2d35277Bd33C100D283C29C7951F;\r\n  uint256 CORE_1_SHARE = 75;\r\n  address CORE_2_ADDRESS = 0x2a62609c6A6bDBE25Da4fb05980e85db9A479C5e;\r\n  uint256 CORE_2_SHARE = 75;\r\n\r\n  address PARTNERSHIP_ADDRESS = 0x53B8fFBe35AE548f22d5a3b31D6E5e0C04f0d2DF;\r\n  uint256 PARTNERSHIP_SHARE = 70;\r\n\r\n  address REWARDS_ADDRESS = 0x43F1aa047D3241B7DD250EB37b25fc509085fDf9;\r\n  uint256 REWARDS_SHARE = 200;\r\n\r\n  address AFFILIATE_ADDRESS = 0x64ea62A8080eD1C2b8d996ACC7a82108975e5361;\r\n  uint256 AFFILIATE_SHARE = 30;\r\n\r\n  // state variables\r\n  address vault;\r\n  address previousToken;\r\n  uint256 public startTime;\r\n  uint256 public weiRaised;\r\n\r\n  event TokenCreated(address indexed investor, uint256 amount);\r\n\r\n  function RexToken(uint256 _start, address _vault, address _previousToken) {\r\n    startTime = _start;\r\n    vault = _vault;\r\n    previousToken = _previousToken;\r\n    isFinalized = false;\r\n  }\r\n\r\n  function () payable {\r\n    createTokens(msg.sender);\r\n  }\r\n\r\n  function createTokens(address recipient) payable {\r\n    if (tokenSaleOnHold) revert();\r\n    if (msg.value == 0) revert();\r\n    if (now < startTime) revert();\r\n    if (now > startTime + DURATION) revert();\r\n\r\n    uint256 weiAmount = msg.value;\r\n\r\n    if (weiRaised >= WEI_RAISED_CAP) revert();\r\n\r\n    //if funder sent more than the remaining amount then send them a refund of the difference\r\n    if ((weiRaised + weiAmount) > WEI_RAISED_CAP) {\r\n      weiAmount = WEI_RAISED_CAP - weiRaised;\r\n      if (!msg.sender.send(msg.value - weiAmount)) \r\n        revert();\r\n    }\r\n\r\n    // calculate token amount to be created\r\n    uint256 tokens = weiAmount.mul(getRate());\r\n\r\n    // update totals\r\n    totalSupply = totalSupply.add(tokens);\r\n    weiRaised = weiRaised.add(weiAmount);\r\n\r\n    balances[recipient] = balances[recipient].add(tokens);\r\n    TokenCreated(recipient, tokens);\r\n\r\n    // send ether to the vault\r\n    if (!vault.send(weiAmount)) revert();\r\n  }\r\n\r\n  // return dynamic pricing\r\n  function getRate() constant returns (uint256) {\r\n    uint256 bonus = 0;\r\n    if (now < (startTime + 1 weeks)) {\r\n      bonus = 300;\r\n    } else if (now < (startTime + 2 weeks)) {\r\n      bonus = 200;\r\n    } else if (now < (startTime + 3 weeks)) {\r\n      bonus = 100;\r\n    }\r\n    return BASE_RATE.add(bonus);\r\n  }\r\n\r\n  function tokenAmount(uint256 share, uint256 finalSupply) constant returns (uint) {\r\n    if (share > TOTAL_SHARE) revert();\r\n\r\n    return share.mul(finalSupply).div(TOTAL_SHARE);\r\n  }\r\n\r\n  // grant regular tokens by share\r\n  function grantTokensByShare(address to, uint256 share, uint256 finalSupply) internal {\r\n    uint256 tokens = tokenAmount(share, finalSupply);\r\n    balances[to] = balances[to].add(tokens);\r\n    TokenCreated(to, tokens);\r\n    totalSupply = totalSupply.add(tokens);\r\n  }\r\n\r\n  function getFinalSupply() constant returns (uint256) {\r\n    return TOTAL_SHARE.mul(totalSupply).div(CROWDSALE_SHARE);\r\n  }\r\n\r\n\r\n  // do final token distribution\r\n  function finalize() onlyOwner() {\r\n    if (isFinalized) revert();\r\n\r\n    //if we are under the cap and not hit the duration then throw\r\n    if (weiRaised < WEI_RAISED_CAP && now <= startTime + DURATION) revert();\r\n\r\n    uint256 finalSupply = getFinalSupply();\r\n\r\n    grantTokensByShare(ANGELS_ADDRESS, ANGELS_SHARE, finalSupply);\r\n    grantTokensByShare(CORE_1_ADDRESS, CORE_1_SHARE, finalSupply);\r\n    grantTokensByShare(CORE_2_ADDRESS, CORE_2_SHARE, finalSupply);\r\n\r\n    grantTokensByShare(PARTNERSHIP_ADDRESS, PARTNERSHIP_SHARE, finalSupply);\r\n    grantTokensByShare(REWARDS_ADDRESS, REWARDS_SHARE, finalSupply);\r\n    grantTokensByShare(AFFILIATE_ADDRESS, AFFILIATE_SHARE, finalSupply);\r\n    \r\n    isFinalized = true;\r\n  }\r\n\r\n  bool public tokenSaleOnHold;\r\n\r\n  function toggleTokenSaleOnHold() onlyOwner() {\r\n    if (tokenSaleOnHold)\r\n      tokenSaleOnHold = false;\r\n    else\r\n      tokenSaleOnHold = true;\r\n  }\r\n\r\n  bool public migrateDisabled;\r\n\r\n  struct structMigrate {\r\n    uint dateTimeCreated;\r\n    uint amount;\r\n  }\r\n\r\n  mapping(address => structMigrate) pendingMigrations;\r\n\r\n  function toggleMigrationStatus() onlyOwner() {\r\n    if (migrateDisabled)\r\n      migrateDisabled = false;\r\n    else\r\n      migrateDisabled = true;\r\n  }\r\n\r\n  function migrate(uint256 amount) {\r\n\r\n    //dont allow migrations until crowdfund is done\r\n    if (!isFinalized) \r\n      revert();\r\n\r\n    //dont proceed if migrate is disabled\r\n    if (migrateDisabled) \r\n      revert();\r\n\r\n    //dont proceed if there is pending value\r\n    if (pendingMigrations[msg.sender].amount > 0)\r\n      revert();\r\n\r\n\r\n    //this will throw if they dont have the balance/allowance\r\n    StandardToken(previousToken).transferFrom(msg.sender, this, amount);\r\n\r\n    //store time and amount in pending mapping\r\n    pendingMigrations[msg.sender].dateTimeCreated = now;\r\n    pendingMigrations[msg.sender].amount = amount;\r\n  }\r\n\r\n  function claimMigrate() {\r\n\r\n    //dont allow if migrations are disabled\r\n    if (migrateDisabled) \r\n      revert();\r\n\r\n    //dont proceed if no value\r\n    if (pendingMigrations[msg.sender].amount == 0)\r\n      revert();\r\n\r\n    //can only claim after a week has passed\r\n    if (now < pendingMigrations[msg.sender].dateTimeCreated + 1 weeks)\r\n      revert();\r\n\r\n    //credit the balances\r\n    balances[msg.sender] += pendingMigrations[msg.sender].amount;\r\n    totalSupply += pendingMigrations[msg.sender].amount;\r\n\r\n    //remove the pending migration from the mapping\r\n    delete pendingMigrations[msg.sender];\r\n  }\r\n\r\n  function transferOwnCoins(address _to, uint _value) onlyOwner() {\r\n    if (!isFinalized) revert();\r\n\r\n    balances[this] = balances[this].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(this, _to, _value);\r\n  }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"migrate\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenSaleOnHold\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getFinalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferOwnCoins\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isFinalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"migrateDisabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimMigrate\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"WEI_RAISED_CAP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"createTokens\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"share\",\"type\":\"uint256\"},{\"name\":\"finalSupply\",\"type\":\"uint256\"}],\"name\":\"tokenAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"toggleMigrationStatus\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"toggleTokenSaleOnHold\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_start\",\"type\":\"uint256\"},{\"name\":\"_vault\",\"type\":\"address\"},{\"name\":\"_previousToken\",\"type\":\"address\"}],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"RexToken","CompilerVersion":"v0.4.13+commit.fb4cb1a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000597f540000000000000000000000000003e4b00b607d09811b0fa61cf636a6460861939f00000000000000000000000099d439455991f7f4885f20c634c9a31918d366e5","Library":"","SwarmSource":"bzzr://5a6dfd9be515d77b04f95cba1edbc739a4dd28239e131ef375dada615803494f"}]}