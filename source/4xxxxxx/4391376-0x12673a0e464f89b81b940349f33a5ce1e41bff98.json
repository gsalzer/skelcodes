{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.0;\r\n\r\n// This allows stakeholders to approve an IPFS hash, and can return the\r\n// weighted sum of ether that approved it. Used for rank & anti-phishing.\r\n\r\ncontract HashRank {\r\n  // Who approved this hash\r\n  mapping (bytes => address[]) approved;\r\n  \r\n  // Approves a hash\r\n  function approve(bytes doc) public {\r\n    approved[doc].push(msg.sender);\r\n  }\r\n  \r\n  // Computes the rank (eth-weighted sum of approvals) of the document at index\r\n  function rankOf(bytes doc) public constant returns (uint256) {\r\n    uint256 rank = 0;\r\n    \r\n    uint256 len = approved[doc].length;\r\n    for (uint256 i = 0; i < len; ++i) { \r\n      address voter = approved[doc][i];\r\n        \r\n      // Checks if voter already voted\r\n      // FIXME: this would be less stupid with an in-memory map, but how?\r\n      bool voted = false;\r\n      for (uint256 j = 0; j < i; ++j) {\r\n        voted = voted || approved[doc][j] == voter;\r\n      }\r\n      \r\n      if (!voted) {\r\n        rank += voter.balance;\r\n      }\r\n    }\r\n    return rank;\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"doc\",\"type\":\"bytes\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"doc\",\"type\":\"bytes\"}],\"name\":\"rankOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"HashRank","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://f9f57db1fbdbb7aa19ba85544d8ea2be9fc5d3b71d11e7eac90d363c29c07306"}]}