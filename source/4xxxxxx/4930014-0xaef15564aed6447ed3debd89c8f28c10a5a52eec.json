{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.15;\r\n\r\ncontract Permittable {\r\n    mapping(address => bool) permitted;\r\n\r\n    function Permittable() public {\r\n        permitted[msg.sender] = true;\r\n    }\r\n\r\n    modifier onlyPermitted() {\r\n        require(permitted[msg.sender]);\r\n        _;\r\n    }\r\n\r\n    function permit(address _address, bool _isAllowed) public onlyPermitted {\r\n        permitted[_address] = _isAllowed;\r\n    }\r\n\r\n    function isPermitted(address _address) public view returns (bool) {\r\n        return permitted[_address];\r\n    }\r\n}\r\n\r\ncontract Destructable is Permittable {\r\n    function kill() public onlyPermitted {\r\n        selfdestruct(msg.sender);\r\n    }\r\n}\r\n\r\ncontract Withdrawable is Permittable {\r\n    function withdraw(address _to, uint256 _amount) public onlyPermitted {\r\n        require(_to != address(0));\r\n\r\n        if (_amount == 0)\r\n            _amount = this.balance;\r\n\r\n        _to.transfer(_amount);\r\n    }\r\n}\r\n\r\ncontract ERC20Token {\r\n\r\n    // Topic: ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _amount);\r\n\r\n    // Topic: 8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925\r\n    event Approval(address indexed _owner, address indexed _recipient, uint256 _amount);\r\n\r\n    function totalSupply() public constant returns (uint256);\r\n    function balanceOf(address _owner) public constant returns (uint256 balance);\r\n    function transfer(address _to, uint256 _amount) public returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _amount) public returns (bool success);\r\n    function approve(address _recipient, uint256 _amount) public returns (bool success);\r\n    function allowance(address _owner, address _recipient) public constant returns (uint256 remaining);\r\n}\r\n\r\ncontract TokenStorage is Permittable, Destructable, Withdrawable {\r\n    struct Megabox {\r\n        address owner;\r\n        uint256 totalSupply;\r\n        uint256 timestamp;\r\n    }\r\n\r\n    mapping(address => uint256) private balances;\r\n    mapping(string => uint256) private settings;\r\n    mapping(uint256 => Megabox) private megaboxes;\r\n    uint256 megaboxIndex = 0;\r\n\r\n    function _start() public onlyPermitted {\r\n        //Number of decimal places\r\n        uint decimalPlaces = 8;\r\n        setSetting(\"decimalPlaces\", decimalPlaces);\r\n\r\n        //Tokens stored as integer values multiplied by multiplier. I.e. 1 token with 8 decimals would be stored as 100,000,000\r\n        setSetting(\"multiplier\", 10 ** decimalPlaces);\r\n\r\n        //Tokens amount to send exhausting warning\r\n        setSetting(\"exhaustingNumber\", 2 * 10**decimalPlaces);\r\n\r\n        //Token price in weis per 1\r\n        setSetting(\"tokenPrice\", 15283860872157044);\r\n\r\n        //Decimator for the percents (1000 = 100%)\r\n        setSetting(\"percentage\", 1000);\r\n\r\n        //TransferFee(10) == 1%\r\n        setSetting(\"transferFee\", 10);\r\n\r\n        //PurchaseFee(157) == 15.7%\r\n        setSetting(\"purchaseFee\", 0);\r\n\r\n        //PurchaseCap(5000) == 5000.00000000 tokens\r\n        setSetting(\"purchaseCap\", 0);\r\n\r\n        //PurchaseTimeout in seconds\r\n        setSetting(\"purchaseTimeout\", 0);\r\n\r\n        //Timestamp when ICO\r\n        setSetting(\"icoTimestamp\", now);\r\n\r\n        //RedemptionTimeout in seconds\r\n        setSetting(\"redemptionTimeout\", 365 * 24 * 60 * 60);\r\n\r\n        //RedemptionFee(157) == 15.7%\r\n        setSetting(\"redemptionFee\", 0);\r\n\r\n        // Address to return operational fees\r\n        setSetting(\"feeReturnAddress\", uint(address(0x0d026A63a88A0FEc2344044e656D6B63684FBeA1)));\r\n\r\n        // Address to collect dead tokens\r\n        setSetting(\"deadTokensAddress\", uint(address(0x4DcB8F5b22557672B35Ef48F8C2b71f8F54c251F)));\r\n\r\n        //Total supply of tokens\r\n        setSetting(\"totalSupply\", 100 * 1000 * 1000 * (10 ** decimalPlaces));\r\n\r\n        setSetting(\"newMegaboxThreshold\", 1 * 10**decimalPlaces);\r\n    }\r\n\r\n    function getBalance(address _address) public view onlyPermitted returns(uint256) {\r\n        return balances[_address];\r\n    }\r\n\r\n    function setBalance(address _address, uint256 _amount) public onlyPermitted returns (uint256) {\r\n        balances[_address] = _amount;\r\n        return balances[_address];\r\n    }\r\n\r\n    function transfer(address _from, address _to, uint256 _amount) public onlyPermitted returns (uint256) {\r\n        require(balances[_from] >= _amount);\r\n\r\n        decreaseBalance(_from, _amount);\r\n        increaseBalance(_to, _amount);\r\n        return _amount;\r\n    }\r\n\r\n    function decreaseBalance(address _address, uint256 _amount) public onlyPermitted returns (uint256) {\r\n        require(balances[_address] >= _amount);\r\n\r\n        balances[_address] -= _amount;\r\n        return _amount;\r\n    }\r\n\r\n    function increaseBalance(address _address, uint256 _amount) public onlyPermitted returns (uint256) {\r\n        balances[_address] += _amount;\r\n        return _amount;\r\n    }\r\n\r\n    function getSetting(string _name) public view onlyPermitted returns(uint256) {\r\n        return settings[_name];\r\n    }\r\n\r\n    function getSettingAddress(string _name) public view onlyPermitted returns(address) {\r\n        return address(getSetting(_name));\r\n    }\r\n\r\n    function setSetting(string _name, uint256 _value) public onlyPermitted returns (uint256) {\r\n        settings[_name] = _value;\r\n        return settings[_name];\r\n    }\r\n\r\n    function newMegabox(address _owner, uint256 _tokens, uint256 _timestamp) public onlyPermitted {\r\n        uint newMegaboxIndex = megaboxIndex++;\r\n        megaboxes[newMegaboxIndex] = Megabox({owner: _owner, totalSupply: _tokens, timestamp: _timestamp});\r\n\r\n        setSetting(\"totalSupply\", getSetting(\"totalSupply\") + _tokens);\r\n\r\n        uint256 balance = balances[_owner] + _tokens;\r\n        setBalance(_owner, balance);\r\n    }\r\n\r\n    function getMegabox(uint256 index) public view onlyPermitted returns (address, uint256, uint256) {\r\n        return (megaboxes[index].owner, megaboxes[index].totalSupply, megaboxes[index].timestamp);\r\n    }\r\n\r\n    function getMegaboxIndex() public view onlyPermitted returns (uint256) {\r\n        return megaboxIndex;\r\n    }\r\n}\r\n\r\ncontract TokenValidator is Permittable, Destructable {\r\n    TokenStorage store;\r\n    mapping(address => uint256) datesOfPurchase;\r\n\r\n    function _setStore(address _address) public onlyPermitted {\r\n        store = TokenStorage(_address);\r\n    }\r\n\r\n    function getTransferFee(address _owner, address _address, uint256 _amount) public view returns(uint256) {\r\n        return (_address == _owner) ? 0 : (_amount * store.getSetting(\"transferFee\") / store.getSetting(\"percentage\"));\r\n    }\r\n\r\n    function validateAndGetTransferFee(address _owner, address _from, address /*_to*/, uint256 _amount) public view returns(uint256) {\r\n        uint256 _fee = getTransferFee(_owner, _from, _amount);\r\n\r\n        require(_amount > 0);\r\n        require((_amount + _fee) > 0);\r\n        require(store.getBalance(_from) >= (_amount + _fee));\r\n\r\n        return _fee;\r\n    }\r\n\r\n    function validateResetDeadTokens(uint256 _amount) public view returns(address) {\r\n        address deadTokensAddress = store.getSettingAddress(\"deadTokensAddress\");\r\n        uint256 deadTokens = store.getBalance(deadTokensAddress);\r\n\r\n        require(_amount > 0);\r\n        require(_amount <= deadTokens);\r\n\r\n        return deadTokensAddress;\r\n    }\r\n\r\n    function validateStart(address _owner, address _store) public view {\r\n        require(_store != address(0));\r\n        require(_store == address(store));\r\n        require(store.getBalance(_owner) == 0);\r\n    }\r\n\r\n    function validateAndGetPurchaseTokens(address _owner, address _address, uint256 _moneyAmount) public view returns (uint256) {\r\n        uint256 _tokens = _moneyAmount * store.getSetting(\"multiplier\") / store.getSetting(\"tokenPrice\");\r\n        uint256 _purchaseTimeout = store.getSetting(\"purchaseTimeout\");\r\n        uint256 _purchaseCap = store.getSetting(\"purchaseCap\");\r\n\r\n        require((_purchaseTimeout <= 0) || (block.timestamp - datesOfPurchase[_address] > _purchaseTimeout));\r\n        require(_tokens > 0);\r\n        require(store.getBalance(_owner) >= _tokens);\r\n        require((_purchaseCap <= 0) || (_tokens <= _purchaseCap));\r\n\r\n        return _tokens;\r\n    }\r\n\r\n    function updateDateOfPurchase(address _address, uint256 timestamp) public onlyPermitted {\r\n        datesOfPurchase[_address] = timestamp;\r\n    }\r\n\r\n    function validateAndGetRedeemFee(address /*_owner*/, address _address, uint256 _tokens) public view returns (uint256) {\r\n        uint256 _icoTimestamp = store.getSetting(\"icoTimestamp\");\r\n        uint256 _redemptionTimeout = store.getSetting(\"redemptionTimeout\");\r\n        uint256 _fee = _tokens * store.getSetting(\"redemptionFee\") / store.getSetting(\"percentage\");\r\n\r\n        require((_redemptionTimeout <= 0) || (block.timestamp > _icoTimestamp + _redemptionTimeout));\r\n        require(_tokens > 0);\r\n        require((_tokens + _fee) >= 0);\r\n        require(store.getBalance(_address) >= (_tokens + _fee));\r\n\r\n        return _fee;\r\n    }\r\n\r\n    function validateStartMegabox(address _owner, uint256 _tokens) public view {\r\n        uint256 _totalSupply = store.getSetting(\"totalSupply\");\r\n        uint256 _newMegaboxThreshold = store.getSetting(\"newMegaboxThreshold\");\r\n        uint256 _ownerBalance = store.getBalance(_owner);\r\n\r\n        require(_ownerBalance <= _newMegaboxThreshold);\r\n        require(_tokens > 0);\r\n        require((_totalSupply + _tokens) > _totalSupply);\r\n    }\r\n\r\n    function canPurchase(address _owner, address _address, uint256 _tokens) public view returns(bool, bool, bool, bool) {\r\n        uint256 _purchaseTimeout = store.getSetting(\"purchaseTimeout\");\r\n        uint256 _fee = _tokens * store.getSetting(\"purchaseFee\") / store.getSetting(\"percentage\");\r\n\r\n        bool purchaseTimeoutPassed = ((_purchaseTimeout <= 0) || (block.timestamp - datesOfPurchase[_address] > _purchaseTimeout));\r\n        bool tokensNumberPassed = (_tokens > 0);\r\n        bool ownerBalancePassed = (store.getBalance(_owner) >= (_tokens + _fee));\r\n        bool purchaseCapPassed = (store.getSetting(\"purchaseCap\") <= 0) || (_tokens < store.getSetting(\"purchaseCap\"));\r\n\r\n        return (purchaseTimeoutPassed, ownerBalancePassed, tokensNumberPassed, purchaseCapPassed);\r\n    }\r\n\r\n    function canTransfer(address _owner, address _from, address /*_to*/, uint256 _amount) public view returns (bool, bool) {\r\n        uint256 _fee = getTransferFee(_owner, _from, _amount);\r\n\r\n        bool transferPositivePassed = (_amount + _fee) > 0;\r\n        bool ownerBalancePassed = store.getBalance(_from) >= (_amount + _fee);\r\n\r\n        return (transferPositivePassed, ownerBalancePassed);\r\n    }\r\n}\r\n\r\ncontract TokenFacade is Permittable, Destructable, Withdrawable, ERC20Token {\r\n    TokenStorage private store;\r\n    TokenValidator validator;\r\n\r\n    address private owner;\r\n\r\n    // Just for information begin //\r\n    uint256 public infoAboveSpot = 400;\r\n    string public infoTier = \"Tier 1\";\r\n    string public infoTokenSilverRatio = \"1 : 1\";\r\n    // Just for information end //\r\n\r\n    event TokenSold(address _from, uint256 _amount);                            //fe2ff4cf36ff7d2c2b06eb960897ee0d76d9c3e58da12feb7b93e86b226dd344\r\n    event TokenPurchased(address _address, uint256 _amount, uint256 _tokens);   //3ceffd410054fdaed44f598ff5c1fb450658778e2241892da4aa646979dee617\r\n    event TokenPoolExhausting(uint256 _amount);                                 //29ba2e073781c1157a9b5d5edb561437a6181e92b79152fe776615159312e9cd\r\n    event FeeApplied(string _name, address _address, uint256 _amount);\r\n\r\n    mapping(address => mapping (address => uint256)) allowed;\r\n\r\n    function TokenFacade() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    ///@notice Token purchase function. Allows user to purchase amount of tokens acccording to passed amount of Ethers.\r\n    function () public payable {\r\n        purchase();\r\n    }\r\n\r\n    function totalSupply() public constant returns (uint256) {\r\n        return store.getSetting(\"totalSupply\");\r\n    }\r\n\r\n    function balanceOf(address _address) public constant returns (uint256) {\r\n        return store.getBalance(_address);\r\n    }\r\n\r\n    string public constant symbol = \"SLVT\";\r\n    string public constant name = \"SilverToken\";\r\n    uint8 public constant decimals = 8;\r\n\r\n    ///@notice Transfer `_amount` of tokens (must be sent as floating point number of token and decimal parts)\r\n    ///to `_address` with preliminary approving amount + fee from transaction sender\r\n    ///@param _to Address of the recipient\r\n    ///@param _amount Amount of tokens to transfer. Passed as `Token.Decimals * 10^8`, @see `decimals`.\r\n    function transfer(address _to, uint256 _amount) public returns (bool) {\r\n        uint256 _fee = validator.validateAndGetTransferFee(owner, msg.sender, _to, _amount);\r\n\r\n        store.transfer(msg.sender, _to, _amount);\r\n\r\n        if (_fee > 0)\r\n            store.transfer(msg.sender, store.getSettingAddress(\"feeReturnAddress\"), _fee);\r\n\r\n        Transfer(msg.sender, _to, _amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    ///@notice Transfer `_amount` of tokens (must be sent as floating point number of token and decimal parts)\r\n    ///to `_address` from address `_from` without autoapproving\r\n    ///@param _to Address of the recipient\r\n    ///@param _amount Amount of tokens to transfer. Passed as `Token.Decimals * 10^8`, @see `decimals`.\r\n    ///@return bool Success state\r\n    function transferFrom(address _from, address _to, uint256 _amount) public returns (bool) {\r\n        require(allowed[_from][_to] >= _amount);\r\n\r\n        uint256 _fee = validator.validateAndGetTransferFee(owner, _from, _to, _amount);\r\n\r\n        store.transfer(_from, _to, _amount);\r\n\r\n        if (_fee > 0)\r\n            store.transfer(_from, store.getSettingAddress(\"feeReturnAddress\"), _fee);\r\n\r\n        allowed[_from][_to] -= _amount;\r\n\r\n        Transfer(_from, _to, _amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    ///@notice Approve amount `_amount` of tokens to send from transaction creator to `_recipient`\r\n    ///@param _recipient Recipient\r\n    ///@param _amount Amount to approve `Token.Decimals * 10^8`, @see `decimals`\r\n    ///@return bool Success state\r\n    function approve(address _recipient, uint256 _amount) public returns (bool) {\r\n        return __approve_impl(msg.sender, _recipient, _amount);\r\n    }\r\n\r\n    ///@notice Return allowed transaction amount from `_from` to `_recipient`\r\n    ///@param _from Initiator of transaction\r\n    ///@param _recipient Recipient\r\n    ///@return uint256 Amount approved to transfer as `Token.Decimals * 10^8`, @see `decimals`\r\n    function allowance(address _from, address _recipient) public constant returns (uint256) {\r\n        return allowed[_from][_recipient];\r\n    }\r\n\r\n    ///@notice Token purchase function. Allows user to purchase amount of tokens acccording to passed amount of Ethers.\r\n    function purchase() public payable {\r\n        __purchase_impl(msg.sender, msg.value);\r\n    }\r\n\r\n    ///@notice Redeem required amount of tokens for the real asset\r\n    ///@param _tokens Amount of nano tokens provides as `Token.Decimals * 10^8`\r\n    function redeem(uint256 _tokens) public {\r\n        __redeem_impl(msg.sender, _tokens);\r\n    }\r\n\r\n    //@notice Get amount if tokens that actually available for purchase\r\n    //@returns amount if tokens\r\n    function getTokensInAction() public view returns (uint256) {\r\n        address deadTokensAddress = store.getSettingAddress(\"deadTokensAddress\");\r\n        return store.getBalance(owner) - store.getBalance(deadTokensAddress);\r\n    }\r\n\r\n    //@notice Get price of specified tokens amount. Depends on the second parameter returns price with fee or without\r\n    //@return price of specified tokens in Wei\r\n    function getTokensPrice(uint256 _amount, bool withFee) public constant returns (uint256) {\r\n        uint256 tokenPrice = store.getSetting(\"tokenPrice\");\r\n        uint256 result = _amount * tokenPrice / 10**uint256(decimals);\r\n\r\n        if (withFee) {\r\n            result = result + result * store.getSetting(\"purchaseFee\") / store.getSetting(\"percentage\");\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    function resetDeadTokens(uint256 _amount) public onlyPermitted returns (bool) {\r\n        address deadTokensAddress = validator.validateResetDeadTokens(_amount);\r\n        store.transfer(deadTokensAddress, owner, _amount);\r\n    }\r\n\r\n    function canPurchase(address _address, uint256 _tokensAmount) public view returns(bool, bool, bool, bool) {\r\n        return validator.canPurchase(owner, _address, _tokensAmount);\r\n    }\r\n\r\n    function canTransfer(address _from, address _to, uint256 _amount) public view returns(bool, bool) {\r\n        return validator.canTransfer(owner, _from, _to, _amount);\r\n    }\r\n\r\n    function setInfoAboveSpot(uint256 newInfoAboveSpot) public onlyPermitted {\r\n        infoAboveSpot = newInfoAboveSpot;\r\n    }\r\n\r\n    function setInfoTier(string newInfoTier) public onlyPermitted {\r\n        infoTier = newInfoTier;\r\n    }\r\n\r\n    function setInfoTokenSilverRatio(string newInfoTokenSilverRatio) public onlyPermitted {\r\n        infoTokenSilverRatio = newInfoTokenSilverRatio;\r\n    }\r\n\r\n    function getSetting(string _name) public view returns (uint256) {\r\n        return store.getSetting(_name);\r\n    }\r\n\r\n    function getMegabox(uint256 index) public view onlyPermitted returns (address, uint256, uint256) {\r\n        return store.getMegabox(index);\r\n    }\r\n\r\n    function getMegaboxIndex() public view onlyPermitted returns (uint256) {\r\n        return store.getMegaboxIndex();\r\n    }\r\n\r\n    // Admin functions\r\n\r\n    function _approve(address _from, address _recipient, uint256 _amount) public onlyPermitted returns (bool) {\r\n        return __approve_impl(_from, _recipient, _amount);\r\n    }\r\n\r\n    function _transfer(address _from, address _to, uint256 _amount) public onlyPermitted returns (bool) {\r\n        validator.validateAndGetTransferFee(owner, _from, _to, _amount);\r\n\r\n        store.transfer(_from, _to, _amount);\r\n\r\n        Transfer(_from, _to, _amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    function _purchase(address _to, uint256 _amount) public onlyPermitted {\r\n        __purchase_impl(_to, _amount);\r\n    }\r\n\r\n    function _redeem(address _from, uint256 _tokens) public onlyPermitted {\r\n        __redeem_impl(_from, _tokens);\r\n    }\r\n\r\n    function _start() public onlyPermitted {\r\n        validator.validateStart(owner, store);\r\n\r\n        store.setBalance(owner, store.getSetting(\"totalSupply\"));\r\n        store.setSetting(\"icoTimestamp\", block.timestamp);\r\n    }\r\n\r\n    function _setStore(address _address) public onlyPermitted {\r\n        store = TokenStorage(_address);\r\n    }\r\n\r\n    function _setValidator(address _address) public onlyPermitted {\r\n        validator = TokenValidator(_address);\r\n    }\r\n\r\n    function _setSetting(string _name, uint256 _value) public onlyPermitted {\r\n        store.setSetting(_name, _value);\r\n    }\r\n\r\n    function _startMegabox(uint256 _tokens) public onlyPermitted {\r\n        validator.validateStartMegabox(owner, _tokens);\r\n        store.newMegabox(owner, _tokens, now);\r\n    }\r\n\r\n    //\r\n    // Shareable functions code implementation\r\n    //\r\n\r\n    function __approve_impl(address _sender, address _recipient, uint256 _amount) private returns (bool) {\r\n        allowed[_sender][_recipient] = _amount;\r\n        Approval(_sender, _recipient, _amount);\r\n        return true;\r\n    }\r\n\r\n    function __purchase_impl(address _to, uint256 _amount) private {\r\n        uint256 _amountWithoutFee = _amount * store.getSetting(\"percentage\") / (store.getSetting(\"purchaseFee\") + store.getSetting(\"percentage\"));\r\n        uint256 _fee = _amountWithoutFee * store.getSetting(\"purchaseFee\") / store.getSetting(\"percentage\");\r\n        uint256 _ownerBalance = store.getBalance(owner);\r\n        address _feeReturnAddress = store.getSettingAddress(\"feeReturnAddress\");\r\n        uint256 _tokens = validator.validateAndGetPurchaseTokens(owner, msg.sender, _amountWithoutFee);\r\n\r\n        store.increaseBalance(_to, _tokens);\r\n        store.decreaseBalance(owner, _tokens);\r\n\r\n        if (_fee > 0)\r\n            _feeReturnAddress.transfer(_fee);\r\n\r\n        validator.updateDateOfPurchase(_to, now);\r\n\r\n        if (_ownerBalance < store.getSetting(\"exhaustingNumber\")) {\r\n            TokenPoolExhausting(_ownerBalance);\r\n        }\r\n        TokenPurchased(_to, msg.value, _tokens);\r\n        Transfer(owner, _to, _tokens);\r\n    }\r\n\r\n    function __redeem_impl(address _from, uint256 _tokens) private {\r\n        address deadTokensAddress = store.getSettingAddress(\"deadTokensAddress\");\r\n        address feeReturnAddress = store.getSettingAddress(\"feeReturnAddress\");\r\n        uint256 _fee = validator.validateAndGetRedeemFee(owner, _from, _tokens);\r\n\r\n        store.transfer(_from, deadTokensAddress, _tokens);\r\n        store.transfer(_from, feeReturnAddress, _fee);\r\n\r\n        TokenSold(_from, _tokens);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipient\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_recipient\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"_approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"_purchase\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"infoTier\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"_transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"infoTokenSilverRatio\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isPermitted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getMegabox\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"_redeem\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"_start\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_tokensAmount\",\"type\":\"uint256\"}],\"name\":\"canPurchase\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newInfoTokenSilverRatio\",\"type\":\"string\"}],\"name\":\"setInfoTokenSilverRatio\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"_setSetting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"purchase\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"resetDeadTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMegaboxIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTokensInAction\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"_setStore\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"withFee\",\"type\":\"bool\"}],\"name\":\"getTokensPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"getSetting\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newInfoTier\",\"type\":\"string\"}],\"name\":\"setInfoTier\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"_startMegabox\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"infoAboveSpot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newInfoAboveSpot\",\"type\":\"uint256\"}],\"name\":\"setInfoAboveSpot\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"_setValidator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"canTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_isAllowed\",\"type\":\"bool\"}],\"name\":\"permit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"TokenSold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"TokenPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"TokenPoolExhausting\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_name\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"FeeApplied\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"TokenFacade","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://f0650589193464f103717817c6f34706c111fb313d4cc527137d0a98a994e94f"}]}