{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.17;\r\n\r\n//Developed by Zenos Pavlakou\r\n\r\nlibrary SafeMath {\r\n    \r\n    function mul(uint256 a, uint256 b) internal pure  returns (uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\ncontract Ownable {\r\n    \r\n    address public owner;\r\n\r\n    /**\r\n     * The address whcih deploys this contrcat is automatically assgined ownership.\r\n     * */\r\n    function Ownable() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * Functions with this modifier can only be executed by the owner of the contract. \r\n     * */\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n}\r\n\r\n\r\ncontract ERC20Basic {\r\n    uint256 public totalSupply;\r\n    function balanceOf(address who) constant public returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\ncontract ERC20 is ERC20Basic {\r\n    function allowance(address owner, address spender) constant public returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value) public  returns (bool);\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\ncontract BasicToken is ERC20Basic, Ownable {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) balances;\r\n\r\n    modifier onlyPayloadSize(uint size) {\r\n        if (msg.data.length < size + 4) {\r\n        revert();\r\n        }\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * Transfers ACO tokens from the sender's account to another given account.\r\n     * \r\n     * @param _to The address of the recipient.\r\n     * @param _amount The amount of tokens to send.\r\n     * */\r\n    function transfer(address _to, uint256 _amount) public onlyPayloadSize(2 * 32) returns (bool) {\r\n        require(balances[msg.sender] >= _amount);\r\n        balances[msg.sender] = balances[msg.sender].sub(_amount);\r\n        balances[_to] = balances[_to].add(_amount);\r\n        Transfer(msg.sender, _to, _amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Returns the balance of a given address.\r\n     * \r\n     * @param _addr The address of the balance to query.\r\n     **/\r\n    function balanceOf(address _addr) public constant returns (uint256) {\r\n        return balances[_addr];\r\n    }\r\n}\r\n\r\n\r\ncontract AdvancedToken is BasicToken, ERC20 {\r\n\r\n    mapping (address => mapping (address => uint256)) allowances;\r\n\r\n    /**\r\n     * Transfers tokens from the account of the owner by an approved spender. \r\n     * The spender cannot spend more than the approved amount. \r\n     * \r\n     * @param _from The address of the owners account.\r\n     * @param _amount The amount of tokens to transfer.\r\n     * */\r\n    function transferFrom(address _from, address _to, uint256 _amount) public onlyPayloadSize(3 * 32) returns (bool) {\r\n        require(allowances[_from][msg.sender] >= _amount && balances[_from] >= _amount);\r\n        allowances[_from][msg.sender] = allowances[_from][msg.sender].sub(_amount);\r\n        balances[_from] = balances[_from].sub(_amount);\r\n        balances[_to] = balances[_to].add(_amount);\r\n        Transfer(_from, _to, _amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Allows another account to spend a given amount of tokens on behalf of the \r\n     * owner's account. If the owner has previously allowed a spender to spend\r\n     * tokens on his or her behalf and would like to change the approval amount,\r\n     * he or she will first have to set the allowance back to 0 and then update\r\n     * the allowance.\r\n     * \r\n     * @param _spender The address of the spenders account.\r\n     * @param _amount The amount of tokens the spender is allowed to spend.\r\n     * */\r\n    function approve(address _spender, uint256 _amount) public returns (bool) {\r\n        require((_amount == 0) || (allowances[msg.sender][_spender] == 0));\r\n        allowances[msg.sender][_spender] = _amount;\r\n        Approval(msg.sender, _spender, _amount);\r\n        return true;\r\n    }\r\n\r\n\r\n    /**\r\n     * Returns the approved allowance from an owners account to a spenders account.\r\n     * \r\n     * @param _owner The address of the owners account.\r\n     * @param _spender The address of the spenders account.\r\n     **/\r\n    function allowance(address _owner, address _spender) public constant returns (uint256) {\r\n        return allowances[_owner][_spender];\r\n    }\r\n}\r\n\r\n\r\ncontract MintableToken is AdvancedToken {\r\n\r\n    bool public mintingFinished;\r\n\r\n    event TokensMinted(address indexed to, uint256 amount);\r\n    event MintingFinished();\r\n\r\n    /**\r\n     * Generates new ACO tokens during the ICO, after which the minting period \r\n     * will terminate permenantly. This function can only be called by the ICO \r\n     * contract.\r\n     * \r\n     * @param _to The address of the account to mint new tokens to.\r\n     * @param _amount The amount of tokens to mint. \r\n     * */\r\n    function mint(address _to, uint256 _amount) external onlyOwner onlyPayloadSize(2 * 32) returns (bool) {\r\n        require(_to != 0x0 && _amount > 0 && !mintingFinished);\r\n        balances[_to] = balances[_to].add(_amount);\r\n        totalSupply = totalSupply.add(_amount);\r\n        Transfer(0x0, _to, _amount);\r\n        TokensMinted(_to, _amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Terminates the minting period permenantly. This function can only be called\r\n     * by the ICO contract only when the duration of the ICO has ended. \r\n     * */\r\n    function finishMinting() external onlyOwner {\r\n        require(!mintingFinished);\r\n        mintingFinished = true;\r\n        MintingFinished();\r\n    }\r\n    \r\n    /**\r\n     * Returns true if the minting period has ended, false otherwhise.\r\n     * */\r\n    function mintingFinished() public constant returns (bool) {\r\n        return mintingFinished;\r\n    }\r\n}\r\n\r\ncontract ACO is MintableToken {\r\n\r\n    uint8 public decimals;\r\n    string public name;\r\n    string public symbol;\r\n\r\n    function ACO() public {\r\n        totalSupply = 0;\r\n        decimals = 18;\r\n        name = \"ACO\";\r\n        symbol = \"ACO\";\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintingFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"ACO","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://2ccd9f253dfd5de038536b3561ddac7c9bb23d6511a8ddece0edd3b3a63509f5"}]}