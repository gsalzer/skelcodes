{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.15;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    Unpause();\r\n  }\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public constant returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n\r\n    uint256 _allowance = allowed[_from][msg.sender];\r\n\r\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n    // require (_value <= _allowance);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   */\r\n  function increaseApproval (address _spender, uint _addedValue)\r\n    returns (bool success) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  function decreaseApproval (address _spender, uint _subtractedValue)\r\n    returns (bool success) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Mintable token\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\r\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n */\r\n\r\ncontract MintableToken is StandardToken, Ownable {\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\r\n    totalSupply = totalSupply.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    Mint(_to, _amount);\r\n    Transfer(0x0, _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() onlyOwner public returns (bool) {\r\n    mintingFinished = true;\r\n    MintFinished();\r\n    return true;\r\n  }\r\n}\r\n\r\n/**\r\n * @title LimitedTransferToken\r\n * @dev LimitedTransferToken defines the generic interface and the implementation to limit token\r\n * transferability for different events. It is intended to be used as a base class for other token\r\n * contracts.\r\n * LimitedTransferToken has been designed to allow for different limiting factors,\r\n * this can be achieved by recursively calling super.transferableTokens() until the base class is\r\n * hit. For example:\r\n *     function transferableTokens(address holder, uint64 time) constant public returns (uint256) {\r\n *       return min256(unlockedTokens, super.transferableTokens(holder, time));\r\n *     }\r\n * A working example is VestedToken.sol:\r\n * https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts/token/VestedToken.sol\r\n */\r\n\r\ncontract LimitedTransferToken is ERC20 {\r\n\r\n  /**\r\n   * @dev Checks whether it can transfer or otherwise throws.\r\n   */\r\n  modifier canTransfer(address _sender, uint256 _value) {\r\n   require(_value <= transferableTokens(_sender, uint64(now)));\r\n   _;\r\n  }\r\n\r\n  /**\r\n   * @dev Checks modifier and allows transfer if tokens are not locked.\r\n   * @param _to The address that will receive the tokens.\r\n   * @param _value The amount of tokens to be transferred.\r\n   */\r\n  function transfer(address _to, uint256 _value) canTransfer(msg.sender, _value) public returns (bool) {\r\n    return super.transfer(_to, _value);\r\n  }\r\n\r\n  /**\r\n  * @dev Checks modifier and allows transfer if tokens are not locked.\r\n  * @param _from The address that will send the tokens.\r\n  * @param _to The address that will receive the tokens.\r\n  * @param _value The amount of tokens to be transferred.\r\n  */\r\n  function transferFrom(address _from, address _to, uint256 _value) canTransfer(_from, _value) public returns (bool) {\r\n    return super.transferFrom(_from, _to, _value);\r\n  }\r\n\r\n  /**\r\n   * @dev Default transferable tokens function returns all tokens for a holder (no limit).\r\n   * @dev Overwriting transferableTokens(address holder, uint64 time) is the way to provide the\r\n   * specific logic for limiting token transferability for a holder over time.\r\n   */\r\n  function transferableTokens(address holder, uint64 time) public constant returns (uint256) {\r\n    return balanceOf(holder);\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title Crowdsale\r\n * @dev Crowdsale is a base contract for managing a token crowdsale.\r\n * Crowdsales have a start and end timestamps, where investors can make\r\n * token purchases and the crowdsale will assign them tokens based\r\n * on a token per ETH rate. Funds collected are forwarded to a wallet\r\n * as they arrive.\r\n */\r\ncontract Crowdsale {\r\n  using SafeMath for uint256;\r\n\r\n  // The token being sold\r\n  MintableToken public token;\r\n\r\n  // start and end timestamps where investments are allowed (both inclusive)\r\n  uint256 public startTime;\r\n  uint256 public endTime;\r\n\r\n  // address where funds are collected\r\n  address public wallet;\r\n\r\n  // how many token units a buyer gets per wei\r\n  uint256 public rate;\r\n\r\n  // amount of raised money in wei\r\n  uint256 public weiRaised;\r\n\r\n  /**\r\n   * event for token purchase logging\r\n   * @param purchaser who paid for the tokens\r\n   * @param beneficiary who got the tokens\r\n   * @param value weis paid for purchase\r\n   * @param amount amount of tokens purchased\r\n   */\r\n  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n\r\n\r\n  function Crowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet) {\r\n    require(_startTime >= now);\r\n    require(_endTime >= _startTime);\r\n    require(_rate > 0);\r\n    require(_wallet != 0x0);\r\n\r\n    token = createTokenContract();\r\n    startTime = _startTime;\r\n    endTime = _endTime;\r\n    rate = _rate;\r\n    wallet = _wallet;\r\n  }\r\n\r\n  // creates the token to be sold.\r\n  // override this method to have crowdsale of a specific mintable token.\r\n  function createTokenContract() internal returns (MintableToken) {\r\n    return new MintableToken();\r\n  }\r\n\r\n\r\n  // fallback function can be used to buy tokens\r\n  function () payable {\r\n    buyTokens(msg.sender);\r\n  }\r\n\r\n  // low level token purchase function\r\n  function buyTokens(address beneficiary) public payable {\r\n    require(beneficiary != 0x0);\r\n    require(validPurchase());\r\n\r\n    uint256 weiAmount = msg.value;\r\n\r\n    // calculate token amount to be created\r\n    uint256 tokens = weiAmount.mul(rate);\r\n\r\n    // update state\r\n    weiRaised = weiRaised.add(weiAmount);\r\n\r\n    token.mint(beneficiary, tokens);\r\n    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\r\n\r\n    forwardFunds();\r\n  }\r\n\r\n  // send ether to the fund collection wallet\r\n  // override to create custom fund forwarding mechanisms\r\n  function forwardFunds() internal {\r\n    wallet.transfer(msg.value);\r\n  }\r\n\r\n  // @return true if the transaction can buy tokens\r\n  function validPurchase() internal constant returns (bool) {\r\n    bool withinPeriod = now >= startTime && now <= endTime;\r\n    bool nonZeroPurchase = msg.value != 0;\r\n    return withinPeriod && nonZeroPurchase;\r\n  }\r\n\r\n  // @return true if crowdsale event has ended\r\n  function hasEnded() public constant returns (bool) {\r\n    return now > endTime;\r\n  }\r\n\r\n\r\n}\r\n\r\n/**\r\n * @title CappedCrowdsale\r\n * @dev Extension of Crowdsale with a max amount of funds raised\r\n */\r\ncontract CappedCrowdsale is Crowdsale {\r\n  using SafeMath for uint256;\r\n\r\n  uint256 public cap;\r\n\r\n  function CappedCrowdsale(uint256 _cap) {\r\n    require(_cap > 0);\r\n    cap = _cap;\r\n  }\r\n\r\n  // overriding Crowdsale#validPurchase to add extra cap logic\r\n  // @return true if investors can buy at the moment\r\n  function validPurchase() internal constant returns (bool) {\r\n    bool withinCap = weiRaised.add(msg.value) <= cap;\r\n    return super.validPurchase() && withinCap;\r\n  }\r\n\r\n  // overriding Crowdsale#hasEnded to add cap logic\r\n  // @return true if crowdsale event has ended\r\n  function hasEnded() public constant returns (bool) {\r\n    bool capReached = weiRaised >= cap;\r\n    return super.hasEnded() || capReached;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title FinalizableCrowdsale\r\n * @dev Extension of Crowdsale where an owner can do extra work\r\n * after finishing.\r\n */\r\ncontract FinalizableCrowdsale is Crowdsale, Ownable {\r\n  using SafeMath for uint256;\r\n\r\n  bool public isFinalized = false;\r\n\r\n  event Finalized();\r\n\r\n  /**\r\n   * @dev Must be called after crowdsale ends, to do some extra finalization\r\n   * work. Calls the contract's finalization function.\r\n   */\r\n  function finalize() onlyOwner public {\r\n    require(!isFinalized);\r\n    require(hasEnded());\r\n\r\n    finalization();\r\n    Finalized();\r\n\r\n    isFinalized = true;\r\n  }\r\n\r\n  /**\r\n   * @dev Can be overridden to add finalization logic. The overriding function\r\n   * should call super.finalization() to ensure the chain of finalization is\r\n   * executed entirely.\r\n   */\r\n  function finalization() internal {\r\n  }\r\n}\r\n\r\n\r\n\r\ncontract Tiers {\r\n  using SafeMath for uint256;\r\n\r\n  uint256 public cpCap = 45000 ether;\r\n  uint256 public presaleWeiSold = 18000 ether;\r\n\r\n  uint256[6] public tierAmountCaps =  [ presaleWeiSold\r\n                                      , presaleWeiSold + 5000 ether\r\n                                      , presaleWeiSold + 10000 ether\r\n                                      , presaleWeiSold + 15000 ether\r\n                                      , presaleWeiSold + 21000 ether\r\n                                      , cpCap\r\n                                      ];\r\n  uint256[6] public tierRates = [ 2000 // tierRates[0] should never be used, but it is accurate\r\n                                , 1500 // Tokens are purchased at a rate of 105-150\r\n                                , 1350 // per deciEth, depending on purchase tier.\r\n                                , 1250 // tierRates[i] is the purchase rate of tier_i\r\n                                , 1150\r\n                                , 1050\r\n                                ];\r\n\r\n    function tierIndexByWeiAmount(uint256 weiLevel) public constant returns (uint256) {\r\n        require(weiLevel <= cpCap);\r\n        for (uint256 i = 0; i < tierAmountCaps.length; i++) {\r\n            if (weiLevel <= tierAmountCaps[i]) {\r\n                return i;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Calculates how many tokens a given amount of wei can buy at\r\n     * a particular level of weiRaised. Takes into account tiers of purchase\r\n     * bonus\r\n     */\r\n    function calculateTokens(uint256 _amountWei, uint256 _weiRaised) public constant returns (uint256) {\r\n        uint256 currentTier = tierIndexByWeiAmount(_weiRaised);\r\n        uint256 startWeiLevel = _weiRaised;\r\n        uint256 endWeiLevel = _amountWei.add(_weiRaised);\r\n        uint256 tokens = 0;\r\n        for (uint256 i = currentTier; i < tierAmountCaps.length; i++) {\r\n            if (endWeiLevel <= tierAmountCaps[i]) {\r\n                tokens = tokens.add((endWeiLevel.sub(startWeiLevel)).mul(tierRates[i]));\r\n                break;\r\n            } else {\r\n                tokens = tokens.add((tierAmountCaps[i].sub(startWeiLevel)).mul(tierRates[i]));\r\n                startWeiLevel = tierAmountCaps[i];\r\n            }\r\n        }\r\n        return tokens;\r\n    }\r\n\r\n}\r\n\r\ncontract CPToken is MintableToken, LimitedTransferToken {\r\n    string public name = \"BLOCKMASON CREDIT PROTOCOL TOKEN\";\r\n    string public symbol = \"BCPT\";\r\n    uint256 public decimals = 18;\r\n\r\n    bool public saleOver = false;\r\n\r\n    function CPToken() {\r\n    }\r\n\r\n    function endSale() public onlyOwner {\r\n        require (!saleOver);\r\n        saleOver = true;\r\n    }\r\n\r\n    /**\r\n     * @dev returns all user's tokens if time >= releaseTime\r\n     */\r\n    function transferableTokens(address holder, uint64 time) public constant returns (uint256) {\r\n        if (saleOver)\r\n            return balanceOf(holder);\r\n        else\r\n            return 0;\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\ncontract DPIcoWhitelist {\r\n    address public admin;\r\n    bool public isOn;\r\n    mapping (address => bool) public whitelist;\r\n    address[] public users;\r\n\r\n    modifier signUpOpen() {\r\n        if (!isOn) revert();\r\n        _;\r\n    }\r\n\r\n    modifier isAdmin() {\r\n        if (msg.sender != admin) revert();\r\n        _;\r\n    }\r\n\r\n    modifier newAddr() {\r\n        if (whitelist[msg.sender]) revert();\r\n        _;\r\n    }\r\n\r\n    function DPIcoWhitelist() {\r\n        admin = msg.sender;\r\n        isOn = false;\r\n    }\r\n\r\n    function () {\r\n        signUp();\r\n    }\r\n\r\n    // Public functions\r\n\r\n    function setSignUpOnOff(bool state) public isAdmin {\r\n        isOn = state;\r\n    }\r\n\r\n    function signUp() public signUpOpen newAddr {\r\n        whitelist[msg.sender] = true;\r\n        users.push(msg.sender);\r\n    }\r\n\r\n    function getAdmin() public constant returns (address) {\r\n        return admin;\r\n    }\r\n\r\n    function signUpOn() public constant returns (bool) {\r\n        return isOn;\r\n    }\r\n\r\n    function isSignedUp(address addr) public constant returns (bool) {\r\n        return whitelist[addr];\r\n    }\r\n\r\n    function getUsers() public constant returns (address[]) {\r\n        return users;\r\n    }\r\n\r\n    function numUsers() public constant returns (uint) {\r\n        return users.length;\r\n    }\r\n\r\n    function userAtIndex(uint idx) public constant returns (address) {\r\n        return users[idx];\r\n    }\r\n}\r\n\r\ncontract CPCrowdsale is CappedCrowdsale, FinalizableCrowdsale, Pausable {\r\n    using SafeMath for uint256;\r\n\r\n    DPIcoWhitelist private aw;\r\n    Tiers private at;\r\n    mapping (address => bool) private hasPurchased; // has whitelist address purchased already\r\n    uint256 public whitelistEndTime;\r\n    uint256 public maxWhitelistPurchaseWei;\r\n    uint256 public openWhitelistEndTime;\r\n\r\n    function CPCrowdsale(uint256 _startTime, uint256 _endTime, uint256 _whitelistEndTime, uint256 _openWhitelistEndTime, address _wallet, address _tiersContract, address _whitelistContract, address _airdropWallet, address _advisorWallet, address _stakingWallet, address _privateSaleWallet)\r\n        CappedCrowdsale(45000 ether) // crowdsale capped at 45000 ether\r\n        FinalizableCrowdsale()\r\n        Crowdsale(_startTime, _endTime, 1, _wallet)  // rate = 1 is a dummy value; we use tiers instead\r\n    {\r\n        token.mint(_wallet, 23226934 * (10 ** 18));\r\n        token.mint(_airdropWallet, 5807933 * (10 ** 18));\r\n        token.mint(_advisorWallet, 5807933 * (10 ** 18));\r\n        token.mint(_stakingWallet, 11615867 * (10 ** 18));\r\n        token.mint(_privateSaleWallet, 36000000 * (10 ** 18));\r\n\r\n        aw = DPIcoWhitelist(_whitelistContract);\r\n        require (aw.numUsers() > 0);\r\n        at = Tiers(_tiersContract);\r\n        whitelistEndTime = _whitelistEndTime;\r\n        openWhitelistEndTime = _openWhitelistEndTime;\r\n        weiRaised = 18000 ether; // 18K ether was sold during presale\r\n        maxWhitelistPurchaseWei = (cap.sub(weiRaised)).div(aw.numUsers());\r\n    }\r\n\r\n    // Public functions\r\n    function buyTokens(address beneficiary) public payable whenNotPaused {\r\n        uint256 weiAmount = msg.value;\r\n\r\n        require(beneficiary != 0x0);\r\n        require(validPurchase());\r\n        require(!isWhitelistPeriod()\r\n             || whitelistValidPurchase(msg.sender, beneficiary, weiAmount));\r\n        require(!isOpenWhitelistPeriod()\r\n             || openWhitelistValidPurchase(msg.sender, beneficiary));\r\n\r\n        hasPurchased[beneficiary] = true;\r\n\r\n        uint256 tokens = at.calculateTokens(weiAmount, weiRaised);\r\n        weiRaised = weiRaised.add(weiAmount);\r\n        token.mint(beneficiary, tokens);\r\n        TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\r\n        forwardFunds();\r\n    }\r\n\r\n    // Internal functions\r\n\r\n    function createTokenContract() internal returns (MintableToken) {\r\n        return new CPToken();\r\n    }\r\n\r\n    /**\r\n     * @dev Overriden to add finalization logic.\r\n     * Mints remaining tokens to dev wallet\r\n     */\r\n    function finalization() internal {\r\n        uint256 remainingWei = cap.sub(weiRaised);\r\n        if (remainingWei > 0) {\r\n            uint256 remainingDevTokens = at.calculateTokens(remainingWei, weiRaised);\r\n            token.mint(wallet, remainingDevTokens);\r\n        }\r\n        CPToken(token).endSale();\r\n        token.finishMinting();\r\n        super.finalization();\r\n    }\r\n\r\n    // Private functions\r\n\r\n    // can't override `validPurchase` because need to pass additional values\r\n    function whitelistValidPurchase(address buyer, address beneficiary, uint256 amountWei) private constant returns (bool) {\r\n        bool beneficiaryPurchasedPreviously = hasPurchased[beneficiary];\r\n        bool belowMaxWhitelistPurchase = amountWei <= maxWhitelistPurchaseWei;\r\n        return (openWhitelistValidPurchase(buyer, beneficiary)\r\n                && !beneficiaryPurchasedPreviously\r\n                && belowMaxWhitelistPurchase);\r\n    }\r\n\r\n    // @return true if `now` is within the bounds of the whitelist period\r\n    function isWhitelistPeriod() private constant returns (bool) {\r\n        return (now <= whitelistEndTime && now >= startTime);\r\n    }\r\n\r\n    // can't override `validPurchase` because need to pass additional values\r\n    function openWhitelistValidPurchase(address buyer, address beneficiary) private constant returns (bool) {\r\n        bool buyerIsBeneficiary = buyer == beneficiary;\r\n        bool signedup = aw.isSignedUp(beneficiary);\r\n        return (buyerIsBeneficiary && signedup);\r\n    }\r\n\r\n    // @return true if `now` is within the bounds of the open whitelist period\r\n    function isOpenWhitelistPeriod() private constant returns (bool) {\r\n        bool cappedWhitelistOver = now > whitelistEndTime;\r\n        bool openWhitelistPeriod = now <= openWhitelistEndTime;\r\n        return cappedWhitelistOver && openWhitelistPeriod;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleOver\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"endSale\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"holder\",\"type\":\"address\"},{\"name\":\"time\",\"type\":\"uint64\"}],\"name\":\"transferableTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"CPToken","CompilerVersion":"v0.4.15+commit.bbb8e64f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://466ab3fc21f3fe81c69db487d2387b7e4a7c3736df514315b815240cbe2e1ba3"}]}