{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\ninterface TokenRecipient {\r\n\tfunction receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public;\r\n}\r\n\r\ncontract Erc20 { // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\r\n\tfunction totalSupply() public constant returns (uint256 amount);\r\n\tfunction balanceOf(address owner) public constant returns (uint256 balance);\r\n\tfunction transfer(address to, uint256 value) public returns (bool success);\r\n\tfunction transferFrom(address from, address to, uint256 value) public returns (bool success);\r\n\tfunction approve(address spender, uint256 value) public returns (bool success);\r\n\tfunction allowance(address owner, address spender) public constant returns (uint256 remaining);\r\n\r\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\r\n\tevent Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract Erc20Plus is Erc20 {\r\n\tfunction approveAndCall(address spender, uint256 value, bytes extraData) public returns (bool success);\r\n\tfunction burn(uint256 value) public returns (bool success);\r\n\tfunction burnFrom(address from, uint256 value) public returns (bool success);\r\n}\r\n\r\ncontract Owned {\r\n\taddress internal _owner;\r\n\r\n\tfunction Owned() public {\r\n\t\t_owner = msg.sender;\r\n\t}\r\n\r\n\tfunction kill() public onlyOwner {\r\n\t\tselfdestruct(_owner);\r\n\t}\r\n\r\n\tmodifier onlyOwner {\r\n\t\trequire(msg.sender == _owner);\r\n\t\t_;\r\n\t}\r\n\r\n\tfunction harvest() onlyOwner public {\r\n\t\t_owner.transfer(this.balance);\r\n\t}\r\n\r\n\tfunction () public payable {\r\n\t\trequire(false); // throw\r\n\t}\r\n}\r\n\r\ncontract CreditcoinBase is Owned {\r\n//----------- ERC20 members\r\n\tuint8 public constant decimals = 18;\r\n//=========== ERC20 members\r\n\r\n\tuint256 internal constant FRAC_IN1UNIT = 10 ** uint256(decimals);\r\n\tuint256 public constant creditcoinLimitInFrac = 2000000000 * FRAC_IN1UNIT;\r\n\tuint256 public constant initialSupplyInFrac = creditcoinLimitInFrac * 30 / 100; // 10% for sale + 15% for Gluwa + 5% for Creditcoin Foundation\r\n}\r\n\r\n/// @title Creditcoin ERC20 token\r\ncontract Creditcoin is CreditcoinBase, Erc20Plus {\r\n//----------- ERC20 members\r\n\tstring public constant name = \"Creditcoin\";\r\n\tstring public constant symbol = \"CRE\";\r\n//=========== ERC20 members\r\n\r\n\tmapping (address => uint256) internal _balanceOf;\r\n\tuint256 internal _totalSupply;\r\n\tmapping (address => mapping (address => uint256)) internal _allowance;\r\n\r\n\tevent Burnt(address indexed from, uint256 value);\r\n\tevent Minted(uint256 value);\r\n\r\n\taddress public pool;\r\n\taddress internal minter;\r\n\r\n\tfunction Creditcoin(address icoSalesAccount) public {\r\n\t\t_totalSupply = initialSupplyInFrac;\r\n\t\tpool = icoSalesAccount;\r\n\t\t_balanceOf[pool] = _totalSupply;\r\n\t}\r\n\r\n\tfunction _transfer(address from, address to, uint256 value) internal {\r\n\t\trequire(to != 0x0);\r\n\t\trequire(_balanceOf[from] >= value);\r\n\t\trequire(_balanceOf[to] + value > _balanceOf[to]);\r\n\r\n\t\tuint256 previousBalances = _balanceOf[from] + _balanceOf[to];\r\n\r\n\t\t_balanceOf[from] -= value;\r\n\t\t_balanceOf[to] += value;\r\n\r\n\t\tTransfer(from, to, value);\r\n\t\tassert(_balanceOf[from] + _balanceOf[to] == previousBalances);\r\n\t}\r\n\r\n//----------- ERC20 members\r\n\tfunction totalSupply() public constant returns (uint256 amount) {\r\n\t\tamount = _totalSupply;\r\n\t}\r\n\t\r\n\tfunction balanceOf(address owner) public constant returns (uint256 balance) {\r\n\t\tbalance = _balanceOf[owner];\r\n\t}\r\n\t\r\n\tfunction allowance(address owner, address spender) public constant returns (uint256 remaining) {\r\n\t\tremaining = _allowance[owner][spender];\r\n\t}\r\n\t\r\n\tfunction transfer(address to, uint256 value) public returns (bool success) {\r\n\t\t_transfer(msg.sender, to, value);\r\n\t\tsuccess = true;\r\n\t}\r\n\r\n\tfunction transferFrom(address from, address to, uint256 value) public returns (bool success) {\r\n\t\trequire(value <= _allowance[from][msg.sender]);\r\n\t\t_allowance[from][msg.sender] -= value;\r\n\t\t_transfer(from, to, value);\r\n\t\tsuccess = true;\r\n\t}\r\n\r\n\tfunction approve(address spender, uint256 value) public returns (bool success) {\r\n\t\t_allowance[msg.sender][spender] = value;\r\n\t\tsuccess = true;\r\n\t}\r\n//=========== ERC20 members\r\n\r\n\tfunction approveAndCall(address spender, uint256 value, bytes extraData) public returns (bool success) {\r\n\t\tTokenRecipient recepient = TokenRecipient(spender);\r\n\t\tif (approve(spender, value)) {\r\n\t\t\trecepient.receiveApproval(msg.sender, value, this, extraData);\r\n\t\t\tsuccess = true;\r\n\t\t}\r\n\t}\r\n\r\n\tfunction burn(uint256 value) public returns (bool success) {\r\n\t\trequire(_balanceOf[msg.sender] >= value);\r\n\t\t_balanceOf[msg.sender] -= value;\r\n\t\t_totalSupply -= value;\r\n\r\n\t\tBurnt(msg.sender, value);\r\n\t\tsuccess = true;\r\n\t}\r\n\r\n\tfunction burnFrom(address from, uint256 value) public returns (bool success) {\r\n\t\trequire(_balanceOf[from] >= value);\r\n\t\trequire(value <= _allowance[from][msg.sender]);\r\n\t\t_balanceOf[from] -= value;\r\n\t\t_allowance[from][msg.sender] -= value;\r\n\t\t_totalSupply -= value;\r\n\r\n\t\tBurnt(from, value);\r\n\t\tsuccess = true;\r\n\t}\r\n\r\n\t/// this function allows to mint coins up to totalSupply, so if coins were burnt it adds room for minting\r\n\t/// since natural loss of coins is expected the overall amount in use will be less than totalSupply\r\n\tfunction mint(uint256 amount) public returns (bool success) {\r\n\t\trequire(msg.sender == minter);\r\n\t\trequire(creditcoinLimitInFrac > amount && creditcoinLimitInFrac - amount >= _totalSupply);\r\n\t\trequire(_balanceOf[msg.sender] + amount > _balanceOf[msg.sender]);\r\n\t\t_balanceOf[msg.sender] += amount;\r\n\t\t_totalSupply += amount;\r\n\r\n\t\tMinted(amount);\r\n\t\tsuccess = true;\r\n\t}\r\n\r\n\tfunction setMinter(address newMinter) onlyOwner public returns (bool success) {\r\n\t\tminter = newMinter;\r\n\t\tsuccess = true;\r\n\t}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"harvest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialSupplyInFrac\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"creditcoinLimitInFrac\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newMinter\",\"type\":\"address\"}],\"name\":\"setMinter\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"icoSalesAccount\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burnt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Minted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"Creditcoin","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000c37c04e2d3c72bb14f169cc0582d922ad39da4c4","Library":"","SwarmSource":"bzzr://e58bfd83b265202bc1d3efe500672f679c9c78a28bc039381d5a94e6247297d0"}]}