{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.16;\r\n/*\r\nMoira ICO Contract\r\n\r\nMOI is an ERC-20 Token Standar Compliant\r\n\r\nContract developer: Fares A. Akel C.\r\nf.antonio.akel@gmail.com\r\nMIT PGP KEY ID: 078E41CB\r\n*/\r\n\r\n/**\r\n * @title SafeMath by OpenZeppelin\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract token { //Token functions definition\r\n\r\n    function balanceOf(address _owner) public constant returns (uint256 balance);\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n\r\n    }\r\ncontract MOIRAICO {\r\n    //This ico have 3 stages\r\n    enum State {\r\n        Preico,\r\n        Ico,\r\n        Successful\r\n    }\r\n    \r\n    State public state = State.Preico; //Set initial stage\r\n    uint startTime = now; //block-time when it was deployed\r\n\r\n    //We use an aproximation of 1 eth = 290$ for this price calculation\r\n    //List of prices for each stage, as both, eth and moi have 18 decimal, its a direct factor\r\n    uint[9] tablePrices = [\r\n    63800,70180,76560, //+10%,+20%,+30%\r\n    58000,63800,70180, //+0%,+10%,+20%\r\n    32200,35420,38640  //+0%,+10%,+20%\r\n    ];\r\n\r\n    mapping (address => uint) balances; //balances mapping\r\n    //public variables\r\n    uint public totalRaised;\r\n    uint public currentBalance;\r\n    uint public preICODeadline;\r\n    uint public ICOdeadline;\r\n    uint public completedAt;\r\n    token public tokenReward;\r\n    address public creator;\r\n    address public beneficiary; \r\n    string public campaignUrl;\r\n    uint constant version = 1;\r\n\r\n    //events for log\r\n\r\n    event LogFundingReceived(address _addr, uint _amount, uint _currentTotal);\r\n    event LogBeneficiaryPaid(address _beneficiaryAddress);\r\n    event LogFundingSuccessful(uint _totalRaised);\r\n    event LogFunderInitialized(\r\n        address _creator,\r\n        address _beneficiary,\r\n        string _url,\r\n        uint256 _preICODeadline,\r\n        uint256 _ICOdeadline);\r\n    event LogContributorsPayout(address _addr, uint _amount);\r\n\r\n    modifier notFinished() {\r\n        require(state != State.Successful);\r\n        _;\r\n    }\r\n\r\n    function MOIRAICO (\r\n        string _campaignUrl,\r\n        token _addressOfTokenUsedAsReward )\r\n        public\r\n    {\r\n        creator = msg.sender;\r\n        beneficiary = msg.sender;\r\n        campaignUrl = _campaignUrl;\r\n        preICODeadline = SafeMath.add(startTime,34 days);\r\n        ICOdeadline = SafeMath.add(preICODeadline,30 days);\r\n        currentBalance = 0;\r\n        tokenReward = token(_addressOfTokenUsedAsReward);\r\n        LogFunderInitialized(\r\n            creator,\r\n            beneficiary,\r\n            campaignUrl,\r\n            preICODeadline,\r\n            ICOdeadline);\r\n    }\r\n\r\n    function contribute() public notFinished payable {\r\n\r\n        require(msg.value > 1 finney); //minimun contribution\r\n\r\n        uint tokenBought;\r\n        totalRaised =SafeMath.add(totalRaised, msg.value);\r\n        currentBalance = totalRaised;\r\n        /**\r\n         * Here price logic is made\r\n         */\r\n        if(state == State.Preico && now < (startTime + 1 days)){ //if we are on preico first day\r\n            if(msg.value < 10 ether){ //if the amount is less than 10 ether\r\n                tokenBought = SafeMath.mul(msg.value,tablePrices[0]);\r\n            }\r\n            else if(msg.value < 20 ether){//if the amount is more than 10 ether and less than 20\r\n                tokenBought = SafeMath.mul(msg.value,tablePrices[1]);\r\n            }\r\n            else{//if the amount is more than 20 ether\r\n                tokenBought = SafeMath.mul(msg.value,tablePrices[2]);\r\n            }\r\n        }\r\n        else if(state == State.Preico) {//if we are on preico normal days\r\n            if(msg.value < 10 ether){ //if the amount is less than 10 ether\r\n                tokenBought = SafeMath.mul(msg.value,tablePrices[3]);\r\n            }\r\n            else if(msg.value < 20 ether){//if the amount is more than 10 ether and less than 20\r\n                tokenBought = SafeMath.mul(msg.value,tablePrices[4]);\r\n            }\r\n            else{//if the amount is more than 20 ether\r\n                tokenBought = SafeMath.mul(msg.value,tablePrices[5]);\r\n            }\r\n        }\r\n        else{//if we are on ico\r\n            if(msg.value < 10 ether){ //if the amount is less than 10 ether\r\n                tokenBought = SafeMath.mul(msg.value,tablePrices[6]);\r\n            }\r\n            else if(msg.value < 20 ether){//if the amount is more than 10 ether and less than 20\r\n                tokenBought = SafeMath.mul(msg.value,tablePrices[7]);\r\n            }\r\n            else{//if the amount is more than 20 ether\r\n                tokenBought = SafeMath.mul(msg.value,tablePrices[8]);\r\n            }\r\n        }\r\n\r\n        tokenReward.transfer(msg.sender, tokenBought);\r\n        \r\n        LogFundingReceived(msg.sender, msg.value, totalRaised);\r\n        LogContributorsPayout(msg.sender, tokenBought);\r\n        \r\n        checkIfFundingCompleteOrExpired();\r\n    }\r\n\r\n    function checkIfFundingCompleteOrExpired() public {\r\n        \r\n        if(now < ICOdeadline && state!=State.Successful){\r\n            if(now > preICODeadline && state==State.Preico){\r\n                state = State.Ico;    \r\n            }\r\n        }\r\n        else if(now > ICOdeadline && state!=State.Successful) {\r\n            state = State.Successful;\r\n            completedAt = now;\r\n            LogFundingSuccessful(totalRaised);\r\n            finished();  \r\n        }\r\n    }\r\n\r\n    function payOut() public {\r\n        require(msg.sender == beneficiary);\r\n        require(beneficiary.send(this.balance));\r\n        LogBeneficiaryPaid(beneficiary);\r\n    }\r\n\r\n\r\n    function finished() public { //When finished eth and remaining tokens are transfered to beneficiary\r\n        uint remanent;\r\n\r\n        require(state == State.Successful);\r\n        require(beneficiary.send(this.balance));\r\n        remanent =  tokenReward.balanceOf(this);\r\n        tokenReward.transfer(beneficiary,remanent);\r\n\r\n        currentBalance = 0;\r\n\r\n        LogBeneficiaryPaid(beneficiary);\r\n        LogContributorsPayout(beneficiary, remanent);\r\n    }\r\n\r\n    function () public payable {\r\n        require(msg.value > 1 finney);\r\n        contribute();\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"completedAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preICODeadline\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenReward\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"checkIfFundingCompleteOrExpired\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ICOdeadline\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finished\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"payOut\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"contribute\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"campaignUrl\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_campaignUrl\",\"type\":\"string\"},{\"name\":\"_addressOfTokenUsedAsReward\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_currentTotal\",\"type\":\"uint256\"}],\"name\":\"LogFundingReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_beneficiaryAddress\",\"type\":\"address\"}],\"name\":\"LogBeneficiaryPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_totalRaised\",\"type\":\"uint256\"}],\"name\":\"LogFundingSuccessful\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_creator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_url\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_preICODeadline\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_ICOdeadline\",\"type\":\"uint256\"}],\"name\":\"LogFunderInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"LogContributorsPayout\",\"type\":\"event\"}]","ContractName":"MOIRAICO","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000400000000000000000000000006dc5880bad03f0eeb6e6b60954074cd3739563d0000000000000000000000000000000000000000000000000000000000000001568747470733a2f2f69636f2e6d6f697261692e696f0000000000000000000000","Library":"","SwarmSource":"bzzr://48b093b45ce02883fba5b9859ceb14ff5eddfba50e73eaf77d56dc114e7d9522"}]}