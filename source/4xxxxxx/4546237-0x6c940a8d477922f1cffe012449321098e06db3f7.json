{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.16;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal returns (uint256) {\r\n    uint256 c = a * b;\r\n    require(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal returns (uint256) {\r\n    require(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\ncontract CryptoGain {\r\n    using SafeMath for uint256;\r\n    \r\n    struct Bid {\r\n        address player;\r\n        uint8 slot_from;\r\n        uint8 slot_to;\r\n    }\r\n\r\n    Bid[] public bids;\r\n    mapping (address => uint256) balances;\r\n\r\n    address public admin;\r\n    bool public is_alive = true;\r\n    uint8 constant max_slots = 100;\r\n    uint256 constant price_ticket = 10 finney;\r\n    uint256 constant win_reward = 40 finney;\r\n    uint256 constant house_edge = 2 finney;\r\n    uint8 constant winners_count = 20; //ripemd160 length\r\n    uint8 public last_slot = 0;\r\n    uint public start_ts = 0;\r\n    uint constant week_seconds = 60*60*24*7;\r\n    \r\n    modifier onlyOwner() {\r\n        require(msg.sender == admin);\r\n        _;\r\n    }\r\n    \r\n    modifier onlyAlive() {\r\n        require(is_alive);\r\n        _;\r\n    }\r\n\r\n    function CryptoGain() {\r\n        admin = msg.sender;\r\n    }\r\n\r\n    function set_admin(address newAdmin) public onlyOwner {\r\n        admin = newAdmin;\r\n    }\r\n    \r\n    // Fully destruct contract. Use ONLY if you want to fully close lottery.\r\n    // This action can't be revert. Use carefully if you know what you do!\r\n    function destruct() public onlyOwner {\r\n        admin.transfer(this.balance);\r\n        is_alive = false; // <- this action is fully destroy contract\r\n    }\r\n    \r\n    function reset() public onlyOwner {\r\n        require(block.timestamp > start_ts + week_seconds); //only after week of inactivity\r\n        admin.transfer(price_ticket.mul(last_slot));\r\n        restart();\r\n\r\n    }\r\n    \r\n    function restart() internal {\r\n        start_ts = block.timestamp;\r\n        last_slot = 0;\r\n        delete bids;\r\n    }\r\n    \r\n    function bid(address player, uint8 bid_slots_count) internal {\r\n        uint8 new_last_slot = last_slot + bid_slots_count;\r\n        bids.push(Bid(player, last_slot, new_last_slot));\r\n        remove_exceed(house_edge.mul(bid_slots_count));\r\n        last_slot = new_last_slot;\r\n    }\r\n    \r\n    function is_slot_in_bid(uint8 slot_from, uint8 slot_to, uint8 slot) returns (bool) {\r\n        return (slot >= slot_from && slot < slot_to) ? true : false;\r\n    }\r\n    \r\n    function search_winner_bid_address(uint8 slot) returns (address) {\r\n        uint8 i;\r\n        \r\n        if (slot < 128) {\r\n            for (i=0; i<bids.length; i++) {\r\n                if (is_slot_in_bid(bids[i].slot_from, bids[i].slot_to, slot)) {\r\n                    return bids[i].player;\r\n                }\r\n            }\r\n            \r\n        } else {\r\n            for (i=uint8(bids.length)-1; i>=0; i--) {\r\n                if (is_slot_in_bid(bids[i].slot_from, bids[i].slot_to, slot)) {\r\n                    return bids[i].player;\r\n                }\r\n            }\r\n        }\r\n        \r\n        assert (false);\r\n\r\n    }\r\n    \r\n    function playout() internal {\r\n        \r\n        bytes20 hash = ripemd160(block.timestamp, block.number, msg.sender);\r\n        \r\n        uint8 current_winner_slot = 0;\r\n        for (uint8 i=0; i<winners_count; i++) {\r\n            current_winner_slot = ( current_winner_slot + uint8(hash[i]) ) % max_slots;\r\n            address current_winner_address = search_winner_bid_address(current_winner_slot);\r\n            balances[current_winner_address] = balances[current_winner_address].add(win_reward);\r\n        }\r\n        restart();\r\n    \r\n    }\r\n    \r\n    function remove_exceed(uint256 amount) internal {\r\n        balances[admin] = balances[admin].add(amount);\r\n    }\r\n    \r\n    function get_balance() public returns (uint256) {\r\n        return balances[msg.sender];\r\n    }\r\n    \r\n    function get_foreign_balance(address _address) public returns (uint256) {\r\n        return balances[_address];\r\n    }\r\n  \r\n    function withdraw() public onlyAlive {\r\n        require(balances[msg.sender] > 0);\r\n        var amount = balances[msg.sender];\r\n        balances[msg.sender] = 0;\r\n        msg.sender.transfer(amount);\r\n    }\r\n    \r\n    function run(address player, uint256 deposit_eth) internal onlyAlive {\r\n        require(deposit_eth >= price_ticket);\r\n        uint256 exceed_mod_eth = deposit_eth % price_ticket;\r\n        \r\n        if (exceed_mod_eth > 0) {\r\n            remove_exceed(exceed_mod_eth);\r\n            deposit_eth = deposit_eth.sub(exceed_mod_eth);\r\n        }\r\n        \r\n        uint8 deposit_bids = uint8(deposit_eth / price_ticket);\r\n        \r\n        //how much slots is avaliable for bid\r\n        uint8 avaliable_session_slots = max_slots - last_slot;\r\n        \r\n\r\n        if (deposit_bids < avaliable_session_slots) {\r\n            bid(player, deposit_bids);\r\n        } else {\r\n            uint8 max_avaliable_slots = (avaliable_session_slots + max_slots - 1);\r\n            if (deposit_bids > max_avaliable_slots) { //overflow\r\n                uint256 max_bid_eth = price_ticket.mul(max_avaliable_slots);\r\n                uint256 exceed_over_eth = deposit_eth.sub(max_bid_eth);\r\n                remove_exceed(exceed_over_eth);\r\n                deposit_bids = max_avaliable_slots;\r\n            }\r\n            uint8 second_session_bids_count = deposit_bids - avaliable_session_slots;\r\n            \r\n            bid(player, avaliable_session_slots);\r\n            playout();\r\n            if (second_session_bids_count > 0) {\r\n                bid(player, second_session_bids_count);\r\n            }\r\n        }\r\n    }\r\n    \r\n    function() payable public {\r\n        run(msg.sender, msg.value);\r\n        \r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"is_alive\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"slot_from\",\"type\":\"uint8\"},{\"name\":\"slot_to\",\"type\":\"uint8\"},{\"name\":\"slot\",\"type\":\"uint8\"}],\"name\":\"is_slot_in_bid\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"destruct\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"get_foreign_balance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bids\",\"outputs\":[{\"name\":\"player\",\"type\":\"address\"},{\"name\":\"slot_from\",\"type\":\"uint8\"},{\"name\":\"slot_to\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"last_slot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"get_balance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"reset\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"set_admin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"start_ts\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"slot\",\"type\":\"uint8\"}],\"name\":\"search_winner_bid_address\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"CryptoGain","CompilerVersion":"v0.4.16+commit.d7661dd9","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://3e36eee3dc458abf3d220979022dcd62b8051af1ba51be64c4b5e88954660c9f"}]}