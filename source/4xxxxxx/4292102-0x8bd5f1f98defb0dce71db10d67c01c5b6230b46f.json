{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.16;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) constant returns (uint256);\r\n  function transfer(address to, uint256 value) returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) returns (bool);\r\n  function approve(address spender, uint256 value) returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances. \r\n */\r\ncontract BasicToken is ERC20Basic {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) balances;\r\n\r\n    /**\r\n    * @dev transfer token for a specified address\r\n    * @param _to The address to transfer to.\r\n    * @param _value The amount to be transferred.\r\n    */\r\n    function transfer(address _to, uint256 _value) returns (bool) {\r\n        require(_to != address(0));\r\n\r\n        // SafeMath.sub will throw if there is not enough balance.\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the balance of the specified address.\r\n    * @param _owner The address to query the the balance of.\r\n    * @return An uint256 representing the amount owned by the passed address.\r\n    */\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another\r\n     * @param _from address The address which you want to send tokens from\r\n     * @param _to address The address which you want to transfer to\r\n     * @param _value uint256 the amount of tokens to be transferred\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\r\n        require(_to != address(0));\r\n\r\n        var _allowance = allowed[_from][msg.sender];\r\n\r\n        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n        // require (_value <= _allowance);\r\n\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = _allowance.sub(_value);\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _value The amount of tokens to be spent.\r\n     */\r\n    function approve(address _spender, uint256 _value) returns (bool) {\r\n\r\n        // To change the approve amount you first have to reduce the addresses`\r\n        //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n        //  already 0 to mitigate the race condition described here:\r\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n        require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n     * @param _owner address The address which owns the funds.\r\n     * @param _spender address The address which will spend the funds.\r\n     * @return A uint256 specifying the amount of tokens still available for the spender.\r\n     */\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    /**\r\n     * approve should be called when allowed[_spender] == 0. To increment\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     */\r\n    function increaseApproval(address _spender, uint _addedValue) returns (bool success) {\r\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n    function decreaseApproval(address _spender, uint _subtractedValue) returns (bool success) {\r\n        uint oldValue = allowed[msg.sender][_spender];\r\n        if (_subtractedValue > oldValue) {\r\n            allowed[msg.sender][_spender] = 0;\r\n        }\r\n        else {\r\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n        }\r\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    function Ownable() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) onlyOwner {\r\n        require(newOwner != address(0));\r\n        OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title Mintable token\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\r\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n */\r\n\r\ncontract MintableToken is StandardToken, Ownable {\r\n    event Mint(address indexed to, uint256 amount);\r\n\r\n    event MintFinished();\r\n\r\n    bool public mintingFinished = false;\r\n\r\n\r\n    modifier canMint() {\r\n        require(!mintingFinished);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to mint tokens\r\n     * @param _to The address that will receive the minted tokens.\r\n     * @param _amount The amount of tokens to mint.\r\n     * @return A boolean that indicates if the operation was successful.\r\n     */\r\n    function mint(address _to, uint256 _amount) onlyOwner canMint returns (bool) {\r\n        totalSupply = totalSupply.add(_amount);\r\n        balances[_to] = balances[_to].add(_amount);\r\n        Mint(_to, _amount);\r\n        Transfer(0x0, _to, _amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to stop minting new tokens.\r\n     * @return True if the operation was successful.\r\n     */\r\n    function finishMinting() onlyOwner returns (bool) {\r\n        mintingFinished = true;\r\n        MintFinished();\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract usingMyWillConsts {\r\n    uint constant TOKEN_DECIMALS = 18;\r\n    uint8 constant TOKEN_DECIMALS_UINT8 = 18;\r\n    uint constant TOKEN_DECIMAL_MULTIPLIER = 10 ** TOKEN_DECIMALS;\r\n}\r\ncontract MyWillToken is usingMyWillConsts, MintableToken {\r\n    /**\r\n     * @dev Pause token transfer. After successfully finished crowdsale it becomes true.\r\n     */\r\n    bool public paused = true;\r\n    /**\r\n     * @dev Accounts who can transfer token even if paused. Works only during crowdsale.\r\n     */\r\n    mapping(address => bool) excluded;\r\n\r\n    function name() constant public returns (string _name) {\r\n        return \"MyWill Coin\";\r\n    }\r\n\r\n    function symbol() constant public returns (bytes32 _symbol) {\r\n        return \"WIL\";\r\n    }\r\n\r\n    function decimals() constant public returns (uint8 _decimals) {\r\n        return TOKEN_DECIMALS_UINT8;\r\n    }\r\n\r\n    function crowdsaleFinished() onlyOwner {\r\n        paused = false;\r\n    }\r\n\r\n    function addExcluded(address _toExclude) onlyOwner {\r\n        excluded[_toExclude] = true;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\r\n        require(!paused || excluded[_from]);\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) returns (bool) {\r\n        require(!paused || excluded[msg.sender]);\r\n        return super.transfer(_to, _value);\r\n    }\r\n}\r\n/**\r\n * @title Crowdsale \r\n * @dev Crowdsale is a base contract for managing a token crowdsale.\r\n *\r\n * Crowdsales have a start and end timestamps, where investors can make\r\n * token purchases and the crowdsale will assign them tokens based\r\n * on a token per ETH rate. Funds collected are forwarded to a wallet \r\n * as they arrive.\r\n */\r\ncontract Crowdsale {\r\n    using SafeMath for uint;\r\n\r\n    // The token being sold\r\n    MintableToken public token;\r\n\r\n    // start and end timestamps where investments are allowed (both inclusive)\r\n    uint32 public startTime;\r\n    uint32 public endTime;\r\n\r\n    // address where funds are collected\r\n    address public wallet;\r\n\r\n    // amount of raised money in wei\r\n    uint public weiRaised;\r\n\r\n    /**\r\n     * @dev Amount of already sold tokens.\r\n     */\r\n    uint public soldTokens;\r\n\r\n    /**\r\n     * @dev Maximum amount of tokens to mint.\r\n     */\r\n    uint public hardCap;\r\n\r\n    /**\r\n     * event for token purchase logging\r\n     * @param purchaser who paid for the tokens\r\n     * @param beneficiary who got the tokens\r\n     * @param value weis paid for purchase\r\n     * @param amount amount of tokens purchased\r\n     */\r\n    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint value, uint amount);\r\n\r\n\r\n    function Crowdsale(uint32 _startTime, uint32 _endTime, uint _hardCap, address _wallet) {\r\n        require(_startTime >= now);\r\n        require(_endTime >= _startTime);\r\n        require(_wallet != 0x0);\r\n        require(_hardCap > 0);\r\n\r\n        token = createTokenContract();\r\n        startTime = _startTime;\r\n        endTime = _endTime;\r\n        hardCap = _hardCap;\r\n        wallet = _wallet;\r\n    }\r\n\r\n    // creates the token to be sold.\r\n    // override this method to have crowdsale of a specific mintable token.\r\n    function createTokenContract() internal returns (MintableToken) {\r\n        return new MintableToken();\r\n    }\r\n\r\n    /**\r\n     * @dev this method might be overridden for implementing any sale logic.\r\n     * @return Actual rate.\r\n     */\r\n    function getRate(uint amount) internal constant returns (uint);\r\n\r\n    function getBaseRate() internal constant returns (uint);\r\n\r\n    /**\r\n     * @dev rate scale (or divider), to support not integer rates.\r\n     * @return Rate divider.\r\n     */\r\n    function getRateScale() internal constant returns (uint) {\r\n        return 1;\r\n    }\r\n\r\n    // fallback function can be used to buy tokens\r\n    function() payable {\r\n        buyTokens(msg.sender, msg.value);\r\n    }\r\n\r\n    // low level token purchase function\r\n    function buyTokens(address beneficiary, uint amountWei) internal {\r\n        require(beneficiary != 0x0);\r\n\r\n        // total minted tokens\r\n        uint totalSupply = token.totalSupply();\r\n\r\n        // actual token minting rate (with considering bonuses and discounts)\r\n        uint actualRate = getRate(amountWei);\r\n        uint rateScale = getRateScale();\r\n\r\n        require(validPurchase(amountWei, actualRate, totalSupply));\r\n\r\n        // calculate token amount to be created\r\n        uint tokens = amountWei.mul(actualRate).div(rateScale);\r\n\r\n        // change, if minted token would be less\r\n        uint change = 0;\r\n\r\n        // if hard cap reached\r\n        if (tokens.add(totalSupply) > hardCap) {\r\n            // rest tokens\r\n            uint maxTokens = hardCap.sub(totalSupply);\r\n            uint realAmount = maxTokens.mul(rateScale).div(actualRate);\r\n\r\n            // rest tokens rounded by actualRate\r\n            tokens = realAmount.mul(actualRate).div(rateScale);\r\n            change = amountWei - realAmount;\r\n            amountWei = realAmount;\r\n        }\r\n\r\n        // update state\r\n        weiRaised = weiRaised.add(amountWei);\r\n        soldTokens = soldTokens.add(tokens);\r\n\r\n        token.mint(beneficiary, tokens);\r\n        TokenPurchase(msg.sender, beneficiary, amountWei, tokens);\r\n\r\n        if (change != 0) {\r\n            msg.sender.transfer(change);\r\n        }\r\n        forwardFunds(amountWei);\r\n    }\r\n\r\n    // send ether to the fund collection wallet\r\n    // override to create custom fund forwarding mechanisms\r\n    function forwardFunds(uint amountWei) internal {\r\n        wallet.transfer(amountWei);\r\n    }\r\n\r\n    /**\r\n     * @dev Check if the specified purchase is valid.\r\n     * @return true if the transaction can buy tokens\r\n     */\r\n    function validPurchase(uint _amountWei, uint _actualRate, uint _totalSupply) internal constant returns (bool) {\r\n        bool withinPeriod = now >= startTime && now <= endTime;\r\n        bool nonZeroPurchase = _amountWei != 0;\r\n        bool hardCapNotReached = _totalSupply <= hardCap.sub(_actualRate);\r\n\r\n        return withinPeriod && nonZeroPurchase && hardCapNotReached;\r\n    }\r\n\r\n    /**\r\n     * @dev Because of discount hasEnded might be true, but validPurchase returns false.\r\n     * @return true if crowdsale event has ended\r\n     */\r\n    function hasEnded() public constant returns (bool) {\r\n        return now > endTime || token.totalSupply() > hardCap.sub(getBaseRate());\r\n    }\r\n\r\n    /**\r\n     * @return true if crowdsale event has started\r\n     */\r\n    function hasStarted() public constant returns (bool) {\r\n        return now >= startTime;\r\n    }\r\n\r\n    /**\r\n     * @dev Check this crowdsale event has ended considering with amount to buy.\r\n     * @param _value Amount to spend.\r\n     * @return true if crowdsale event has ended\r\n     */\r\n    function hasEnded(uint _value) public constant returns (bool) {\r\n        uint actualRate = getRate(_value);\r\n        return now > endTime || token.totalSupply() > hardCap.sub(actualRate);\r\n    }\r\n}\r\n\r\n/**\r\n * @title FinalizableCrowdsale\r\n * @dev Extension of Crowsdale where an owner can do extra work\r\n * after finishing. \r\n */\r\ncontract FinalizableCrowdsale is Crowdsale, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    bool public isFinalized = false;\r\n\r\n    event Finalized();\r\n\r\n    function FinalizableCrowdsale(uint32 _startTime, uint32 _endTime, uint _hardCap, address _wallet)\r\n            Crowdsale(_startTime, _endTime, _hardCap, _wallet) {\r\n    }\r\n\r\n    /**\r\n     * @dev Must be called after crowdsale ends, to do some extra finalization\r\n     * work. Calls the contract's finalization function.\r\n     */\r\n    function finalize() onlyOwner notFinalized {\r\n        require(hasEnded());\r\n\r\n        finalization();\r\n        Finalized();\r\n\r\n        isFinalized = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Can be overriden to add finalization logic. The overriding function\r\n     * should call super.finalization() to ensure the chain of finalization is\r\n     * executed entirely.\r\n     */\r\n    function finalization() internal {\r\n    }\r\n\r\n    modifier notFinalized() {\r\n        require(!isFinalized);\r\n        _;\r\n    }\r\n}\r\n\r\n/**\r\n * @title RefundVault\r\n * @dev This contract is used for storing funds while a crowdsale\r\n * is in progress. Supports refunding the money if crowdsale fails,\r\n * and forwarding it if crowdsale is successful.\r\n */\r\ncontract RefundVault is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    enum State {Active, Refunding, Closed}\r\n\r\n    mapping (address => uint256) public deposited;\r\n\r\n    address public wallet;\r\n\r\n    State public state;\r\n\r\n    event Closed();\r\n\r\n    event RefundsEnabled();\r\n\r\n    event Refunded(address indexed beneficiary, uint256 weiAmount);\r\n\r\n    function RefundVault(address _wallet) {\r\n        require(_wallet != 0x0);\r\n        wallet = _wallet;\r\n        state = State.Active;\r\n    }\r\n\r\n    function deposit(address investor) onlyOwner payable {\r\n        require(state == State.Active);\r\n        deposited[investor] = deposited[investor].add(msg.value);\r\n    }\r\n\r\n    function close() onlyOwner {\r\n        require(state == State.Active);\r\n        state = State.Closed;\r\n        Closed();\r\n        wallet.transfer(this.balance);\r\n    }\r\n\r\n    function enableRefunds() onlyOwner {\r\n        require(state == State.Active);\r\n        state = State.Refunding;\r\n        RefundsEnabled();\r\n    }\r\n\r\n    function refund(address investor) onlyOwner {\r\n        require(state == State.Refunding);\r\n        uint256 depositedValue = deposited[investor];\r\n        deposited[investor] = 0;\r\n        investor.transfer(depositedValue);\r\n        Refunded(investor, depositedValue);\r\n    }\r\n}\r\n\r\n/**\r\n * @title RefundableCrowdsale\r\n * @dev Extension of Crowdsale contract that adds a funding goal, and\r\n * the possibility of users getting a refund if goal is not met.\r\n * Uses a RefundVault as the crowdsale's vault.\r\n */\r\ncontract RefundableCrowdsale is FinalizableCrowdsale {\r\n    using SafeMath for uint256;\r\n\r\n    // minimum amount of funds to be raised in weis\r\n    uint public goal;\r\n\r\n    // refund vault used to hold funds while crowdsale is running\r\n    RefundVault public vault;\r\n\r\n    function RefundableCrowdsale(uint32 _startTime, uint32 _endTime, uint _hardCap, address _wallet, uint _goal)\r\n            FinalizableCrowdsale(_startTime, _endTime, _hardCap, _wallet) {\r\n        require(_goal > 0);\r\n        vault = new RefundVault(wallet);\r\n        goal = _goal;\r\n    }\r\n\r\n    // We're overriding the fund forwarding from Crowdsale.\r\n    // In addition to sending the funds, we want to call\r\n    // the RefundVault deposit function\r\n    function forwardFunds(uint amountWei) internal {\r\n        if (goalReached()) {\r\n            wallet.transfer(amountWei);\r\n        }\r\n        else {\r\n            vault.deposit.value(amountWei)(msg.sender);\r\n        }\r\n    }\r\n\r\n    // if crowdsale is unsuccessful, investors can claim refunds here\r\n    function claimRefund() public {\r\n        require(isFinalized);\r\n        require(!goalReached());\r\n\r\n        vault.refund(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev Close vault only if goal was reached.\r\n     */\r\n    function closeVault() public onlyOwner {\r\n        require(goalReached());\r\n        vault.close();\r\n    }\r\n\r\n    // vault finalization task, called when owner calls finalize()\r\n    function finalization() internal {\r\n        super.finalization();\r\n\r\n        if (goalReached()) {\r\n            vault.close();\r\n        }\r\n        else {\r\n            vault.enableRefunds();\r\n        }\r\n    }\r\n\r\n    function goalReached() public constant returns (bool) {\r\n        return weiRaised >= goal;\r\n    }\r\n\r\n}\r\ncontract MyWillRateProviderI {\r\n    /**\r\n     * @dev Calculate actual rate using the specified parameters.\r\n     * @param buyer     Investor (buyer) address.\r\n     * @param totalSold Amount of sold tokens.\r\n     * @param amountWei Amount of wei to purchase.\r\n     * @return ETH to Token rate.\r\n     */\r\n    function getRate(address buyer, uint totalSold, uint amountWei) public constant returns (uint);\r\n\r\n    /**\r\n     * @dev rate scale (or divider), to support not integer rates.\r\n     * @return Rate divider.\r\n     */\r\n    function getRateScale() public constant returns (uint);\r\n\r\n    /**\r\n     * @return Absolute base rate.\r\n     */\r\n    function getBaseRate() public constant returns (uint);\r\n}\r\n\r\ncontract MyWillRateProvider is usingMyWillConsts, MyWillRateProviderI, Ownable {\r\n    // rate calculate accuracy\r\n    uint constant RATE_SCALE = 10000;\r\n    uint constant STEP_30 = 20000000 * TOKEN_DECIMAL_MULTIPLIER;\r\n    uint constant STEP_20 = 40000000 * TOKEN_DECIMAL_MULTIPLIER;\r\n    uint constant STEP_10 = 60000000 * TOKEN_DECIMAL_MULTIPLIER;\r\n    uint constant RATE_30 = 1950 * RATE_SCALE;\r\n    uint constant RATE_20 = 1800 * RATE_SCALE;\r\n    uint constant RATE_10 = 1650 * RATE_SCALE;\r\n    uint constant BASE_RATE = 1500 * RATE_SCALE;\r\n\r\n    struct ExclusiveRate {\r\n        // be careful, accuracies this about 15 minutes\r\n        uint32 workUntil;\r\n        // exclusive rate or 0\r\n        uint rate;\r\n        // rate bonus percent, which will be divided by 1000 or 0\r\n        uint16 bonusPercent1000;\r\n        // flag to check, that record exists\r\n        bool exists;\r\n    }\r\n\r\n    mapping(address => ExclusiveRate) exclusiveRate;\r\n\r\n    function getRateScale() public constant returns (uint) {\r\n        return RATE_SCALE;\r\n    }\r\n\r\n    function getBaseRate() public constant returns (uint) {\r\n        return BASE_RATE;\r\n    }\r\n\r\n    function getRate(address buyer, uint totalSold, uint amountWei) public constant returns (uint) {\r\n        uint rate;\r\n        // apply sale\r\n        if (totalSold < STEP_30) {\r\n            rate = RATE_30;\r\n        }\r\n        else if (totalSold < STEP_20) {\r\n            rate = RATE_20;\r\n        }\r\n        else if (totalSold < STEP_10) {\r\n            rate = RATE_10;\r\n        }\r\n        else {\r\n            rate = BASE_RATE;\r\n        }\r\n\r\n        // apply bonus for amount\r\n        if (amountWei >= 1000 ether) {\r\n            rate += rate * 13 / 100;\r\n        }\r\n        else if (amountWei >= 500 ether) {\r\n            rate += rate * 10 / 100;\r\n        }\r\n        else if (amountWei >= 100 ether) {\r\n            rate += rate * 7 / 100;\r\n        }\r\n        else if (amountWei >= 50 ether) {\r\n            rate += rate * 5 / 100;\r\n        }\r\n        else if (amountWei >= 30 ether) {\r\n            rate += rate * 4 / 100;\r\n        }\r\n        else if (amountWei >= 10 ether) {\r\n            rate += rate * 25 / 1000;\r\n        }\r\n\r\n        ExclusiveRate memory eRate = exclusiveRate[buyer];\r\n        if (eRate.exists && eRate.workUntil >= now) {\r\n            if (eRate.rate != 0) {\r\n                rate = eRate.rate;\r\n            }\r\n            rate += rate * eRate.bonusPercent1000 / 1000;\r\n        }\r\n        return rate;\r\n    }\r\n\r\n    function setExclusiveRate(address _investor, uint _rate, uint16 _bonusPercent1000, uint32 _workUntil) onlyOwner {\r\n        exclusiveRate[_investor] = ExclusiveRate(_workUntil, _rate, _bonusPercent1000, true);\r\n    }\r\n\r\n    function removeExclusiveRate(address _investor) onlyOwner {\r\n        delete exclusiveRate[_investor];\r\n    }\r\n}\r\ncontract MyWillCrowdsale is usingMyWillConsts, RefundableCrowdsale {\r\n    uint constant teamTokens = 11000000 * TOKEN_DECIMAL_MULTIPLIER;\r\n    uint constant bountyTokens = 2000000 * TOKEN_DECIMAL_MULTIPLIER;\r\n    uint constant icoTokens = 3038800 * TOKEN_DECIMAL_MULTIPLIER;\r\n    uint constant minimalPurchase = 0.05 ether;\r\n    address constant teamAddress = 0xE4F0Ff4641f3c99de342b06c06414d94A585eFfb;\r\n    address constant bountyAddress = 0x76d4136d6EE53DB4cc087F2E2990283d5317A5e9;\r\n    address constant icoAccountAddress = 0x195610851A43E9685643A8F3b49F0F8a019204f1;\r\n\r\n    MyWillRateProviderI public rateProvider;\r\n\r\n    function MyWillCrowdsale(\r\n            uint32 _startTime,\r\n            uint32 _endTime,\r\n            uint _softCapWei,\r\n            uint _hardCapTokens\r\n    )\r\n        RefundableCrowdsale(_startTime, _endTime, _hardCapTokens * TOKEN_DECIMAL_MULTIPLIER, 0x80826b5b717aDd3E840343364EC9d971FBa3955C, _softCapWei) {\r\n\r\n        token.mint(teamAddress,  teamTokens);\r\n        token.mint(bountyAddress, bountyTokens);\r\n        token.mint(icoAccountAddress, icoTokens);\r\n\r\n        MyWillToken(token).addExcluded(teamAddress);\r\n        MyWillToken(token).addExcluded(bountyAddress);\r\n        MyWillToken(token).addExcluded(icoAccountAddress);\r\n\r\n        MyWillRateProvider provider = new MyWillRateProvider();\r\n        provider.transferOwnership(owner);\r\n        rateProvider = provider;\r\n\r\n        // pre ICO\r\n    }\r\n\r\n    /**\r\n     * @dev override token creation to integrate with MyWill token.\r\n     */\r\n    function createTokenContract() internal returns (MintableToken) {\r\n        return new MyWillToken();\r\n    }\r\n\r\n    /**\r\n     * @dev override getRate to integrate with rate provider.\r\n     */\r\n    function getRate(uint _value) internal constant returns (uint) {\r\n        return rateProvider.getRate(msg.sender, soldTokens, _value);\r\n    }\r\n\r\n    function getBaseRate() internal constant returns (uint) {\r\n        return rateProvider.getRate(msg.sender, soldTokens, minimalPurchase);\r\n    }\r\n\r\n    /**\r\n     * @dev override getRateScale to integrate with rate provider.\r\n     */\r\n    function getRateScale() internal constant returns (uint) {\r\n        return rateProvider.getRateScale();\r\n    }\r\n\r\n    /**\r\n     * @dev Admin can set new rate provider.\r\n     * @param _rateProviderAddress New rate provider.\r\n     */\r\n    function setRateProvider(address _rateProviderAddress) onlyOwner {\r\n        require(_rateProviderAddress != 0);\r\n        rateProvider = MyWillRateProviderI(_rateProviderAddress);\r\n    }\r\n\r\n    /**\r\n     * @dev Admin can move end time.\r\n     * @param _endTime New end time.\r\n     */\r\n    function setEndTime(uint32 _endTime) onlyOwner notFinalized {\r\n        require(_endTime > startTime);\r\n        endTime = _endTime;\r\n    }\r\n\r\n    function validPurchase(uint _amountWei, uint _actualRate, uint _totalSupply) internal constant returns (bool) {\r\n        if (_amountWei < minimalPurchase) {\r\n            return false;\r\n        }\r\n        return super.validPurchase(_amountWei, _actualRate, _totalSupply);\r\n    }\r\n\r\n    function finalization() internal {\r\n        super.finalization();\r\n        token.finishMinting();\r\n        if (!goalReached()) {\r\n            return;\r\n        }\r\n        MyWillToken(token).crowdsaleFinished();\r\n        token.transferOwnership(owner);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"buyer\",\"type\":\"address\"},{\"name\":\"totalSold\",\"type\":\"uint256\"},{\"name\":\"amountWei\",\"type\":\"uint256\"}],\"name\":\"getRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_investor\",\"type\":\"address\"}],\"name\":\"removeExclusiveRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_investor\",\"type\":\"address\"},{\"name\":\"_rate\",\"type\":\"uint256\"},{\"name\":\"_bonusPercent1000\",\"type\":\"uint16\"},{\"name\":\"_workUntil\",\"type\":\"uint32\"}],\"name\":\"setExclusiveRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBaseRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRateScale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"MyWillRateProvider","CompilerVersion":"v0.4.16+commit.d7661dd9","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://d12a909a2b97c82421f3bffae116fafa2b9555438223fbabb363d258e161dd73"}]}