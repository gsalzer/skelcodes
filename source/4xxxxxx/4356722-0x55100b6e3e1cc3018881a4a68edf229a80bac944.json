{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13;\r\n\r\ncontract Ownable {\r\n\r\n    address public owner;\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    function Ownable() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    address newOwner;\r\n    function transferOwnership(address _newOwner) onlyOwner {\r\n        if (_newOwner != address(0)) {\r\n            newOwner = _newOwner;\r\n        }\r\n    }\r\n    function acceptOwnership() {\r\n        if (msg.sender == newOwner) {\r\n            owner = newOwner;\r\n        }\r\n    }\r\n}\r\n\r\ncontract tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData); }\r\n\r\ncontract ERC20 is Ownable {\r\n    /* Public variables of the token */\r\n    string public standard;\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals;\r\n    uint256 public initialSupply;\r\n    bool public locked;\r\n    uint256 public creationBlock;\r\n    mapping (address => uint256) public balances;\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n\r\n    /* This generates a public event on the blockchain that will notify clients */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    modifier onlyPayloadSize(uint numwords) {\r\n        assert(msg.data.length == numwords * 32 + 4);\r\n        _;\r\n    }\r\n\r\n    /* Initializes contract with initial supply tokens to the creator of the contract */\r\n    function ERC20(\r\n    uint256 _initialSupply,\r\n    string tokenName,\r\n    uint8 decimalUnits,\r\n    string tokenSymbol,\r\n    bool transferAllSupplyToOwner,\r\n    bool _locked\r\n    ) {\r\n        standard = 'ERC20 0.1';\r\n\r\n        initialSupply = _initialSupply;\r\n\r\n        if (transferAllSupplyToOwner) {\r\n            setBalance(msg.sender, initialSupply);\r\n        }\r\n        else {\r\n            setBalance(this, initialSupply);\r\n        }\r\n\r\n        name = tokenName;\r\n        // Set the name for display purposes\r\n        symbol = tokenSymbol;\r\n        // Set the symbol for display purposes\r\n        decimals = decimalUnits;\r\n        // Amount of decimals for display purposes\r\n        locked = _locked;\r\n        creationBlock = block.number;\r\n    }\r\n\r\n    /* internal balances */\r\n\r\n    function setBalance(address holder, uint256 amount) internal {\r\n        balances[holder] = amount;\r\n    }\r\n\r\n    function transferInternal(address _from, address _to, uint256 value) internal returns (bool success) {\r\n        if (value == 0) {\r\n            return true;\r\n        }\r\n\r\n        if (balances[_from] < value) {\r\n            return false;\r\n        }\r\n\r\n        if (balances[_to] + value <= balances[_to]) {\r\n            return false;\r\n        }\r\n\r\n        setBalance(_from, balances[_from] - value);\r\n        setBalance(_to, balances[_to] + value);\r\n\r\n        Transfer(_from, _to, value);\r\n\r\n        return true;\r\n    }\r\n\r\n    /* public methods */\r\n    function totalSupply() public returns (uint256) {\r\n        return initialSupply;\r\n    }\r\n\r\n    function balanceOf(address _address) public returns (uint256) {\r\n        return balances[_address];\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) onlyPayloadSize(2) public returns (bool) {\r\n        require(locked == false);\r\n\r\n        bool status = transferInternal(msg.sender, _to, _value);\r\n\r\n        require(status == true);\r\n\r\n        return true;\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool success) {\r\n        if(locked) {\r\n            return false;\r\n        }\r\n\r\n        allowance[msg.sender][_spender] = _value;\r\n\r\n        return true;\r\n    }\r\n\r\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData) returns (bool success) {\r\n        if (locked) {\r\n            return false;\r\n        }\r\n\r\n        tokenRecipient spender = tokenRecipient(_spender);\r\n\r\n        if (approve(_spender, _value)) {\r\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\r\n            return true;\r\n        }\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\r\n        if (locked) {\r\n            return false;\r\n        }\r\n\r\n        if (allowance[_from][msg.sender] < _value) {\r\n            return false;\r\n        }\r\n\r\n        bool _success = transferInternal(_from, _to, _value);\r\n\r\n        if (_success) {\r\n            allowance[_from][msg.sender] -= _value;\r\n        }\r\n\r\n        return _success;\r\n    }\r\n\r\n}\r\n\r\ncontract MintingERC20 is ERC20 {\r\n\r\n    mapping (address => bool) public minters;\r\n\r\n    uint256 public maxSupply;\r\n\r\n    function MintingERC20(\r\n    uint256 _initialSupply,\r\n    uint256 _maxSupply,\r\n    string _tokenName,\r\n    uint8 _decimals,\r\n    string _symbol,\r\n    bool _transferAllSupplyToOwner,\r\n    bool _locked\r\n    )\r\n    ERC20(_initialSupply, _tokenName, _decimals, _symbol, _transferAllSupplyToOwner, _locked)\r\n\r\n    {\r\n        standard = \"MintingERC20 0.1\";\r\n        minters[msg.sender] = true;\r\n        maxSupply = _maxSupply;\r\n    }\r\n\r\n\r\n    function addMinter(address _newMinter) onlyOwner {\r\n        minters[_newMinter] = true;\r\n    }\r\n\r\n\r\n    function removeMinter(address _minter) onlyOwner {\r\n        minters[_minter] = false;\r\n    }\r\n\r\n\r\n    function mint(address _addr, uint256 _amount) onlyMinters returns (uint256) {\r\n        if (locked == true) {\r\n            return uint256(0);\r\n        }\r\n\r\n        if (_amount == uint256(0)) {\r\n            return uint256(0);\r\n        }\r\n        if (initialSupply + _amount <= initialSupply){\r\n            return uint256(0);\r\n        }\r\n        if (initialSupply + _amount > maxSupply) {\r\n            return uint256(0);\r\n        }\r\n\r\n        initialSupply += _amount;\r\n        balances[_addr] += _amount;\r\n        Transfer(this, _addr, _amount);\r\n        return _amount;\r\n    }\r\n\r\n\r\n    modifier onlyMinters () {\r\n        require(true == minters[msg.sender]);\r\n        _;\r\n    }\r\n}\r\n\r\ncontract Lamden is MintingERC20 {\r\n\r\n\r\n    uint8 public decimals = 18;\r\n\r\n    string public tokenName = \"Lamden Tau\";\r\n\r\n    string public tokenSymbol = \"TAU\";\r\n\r\n    uint256 public  maxSupply = 500 * 10 ** 6 * uint(10) ** decimals; // 500,000,000\r\n\r\n    // We block token transfers till ICO end.\r\n    bool public transferFrozen = true;\r\n\r\n    function Lamden(\r\n    uint256 initialSupply,\r\n    bool _locked\r\n    ) MintingERC20(initialSupply, maxSupply, tokenName, decimals, tokenSymbol, false, _locked) {\r\n        standard = 'Lamden 0.1';\r\n    }\r\n\r\n    function setLocked(bool _locked) onlyOwner {\r\n        locked = _locked;\r\n    }\r\n\r\n    // Allow token transfer.\r\n    function freezing(bool _transferFrozen) onlyOwner {\r\n        transferFrozen = _transferFrozen;\r\n    }\r\n\r\n    // ERC20 functions\r\n    // =========================\r\n\r\n    function transfer(address _to, uint _value) returns (bool) {\r\n        require(!transferFrozen);\r\n        return super.transfer(_to, _value);\r\n\r\n    }\r\n\r\n    // should  not have approve/transferFrom\r\n    function approve(address, uint) returns (bool success)  {\r\n        require(false);\r\n        return false;\r\n        //        super.approve(_spender, _value);\r\n    }\r\n\r\n    function approveAndCall(address, uint256, bytes) returns (bool success) {\r\n        require(false);\r\n        return false;\r\n    }\r\n\r\n    function transferFrom(address, address, uint)  returns (bool success) {\r\n        require(false);\r\n        return false;\r\n        //        super.transferFrom(_from, _to, _value);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"creationBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_locked\",\"type\":\"bool\"}],\"name\":\"setLocked\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minter\",\"type\":\"address\"}],\"name\":\"removeMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_transferFrozen\",\"type\":\"bool\"}],\"name\":\"freezing\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"standard\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenName\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenSymbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newMinter\",\"type\":\"address\"}],\"name\":\"addMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transferFrozen\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"locked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"minters\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"initialSupply\",\"type\":\"uint256\"},{\"name\":\"_locked\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"Lamden","CompilerVersion":"v0.4.17+commit.bdeb9e52","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001","Library":"","SwarmSource":"bzzr://f84c7c522c112b7732018962b331bfdbbf12378a590f7cedcc3c8a3b628691ea"}]}