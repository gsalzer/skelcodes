{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\n/// @title SaintArnould (Tokyo) Token (SAT) -\r\ncontract SaintArnouldToken {\r\n    string public constant name = \"Saint Arnould Token\";\r\n    string public constant symbol = \"SAT\";\r\n    uint8 public constant decimals = 18;  // 18 decimal places, the same as ETH.\r\n\r\n    uint256 public constant tokenCreationRate = 5000;  //creation rate 1 ETH = 5000 SAT\r\n    uint256 public constant firstTokenCap = 10 ether * tokenCreationRate; \r\n    uint256 public constant secondTokenCap = 920 ether * tokenCreationRate; //27,900,000 YEN\r\n\r\n    uint256 public fundingStartBlock;\r\n    uint256 public fundingEndBlock;\r\n    uint256 public locked_allocation;\r\n    uint256 public unlockingBlock;\r\n\r\n    // Receives ETH for founders.\r\n    address public founders;\r\n\r\n    // The flag indicates if the SAT contract is in Funding state.\r\n    bool public funding_ended = false;\r\n\r\n    // The current total token supply.\r\n    uint256 totalTokens;\r\n\r\n    mapping (address => uint256) balances;\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n\r\n    function SaintArnouldToken(address _founders,\r\n                               uint256 _fundingStartBlock,\r\n                               uint256 _fundingEndBlock) {\r\n\r\n        if (_founders == 0) throw;\r\n        if (_fundingStartBlock <= block.number) throw;\r\n        if (_fundingEndBlock   <= _fundingStartBlock) throw;\r\n\r\n        founders = _founders;\r\n        fundingStartBlock = _fundingStartBlock;\r\n        fundingEndBlock = _fundingEndBlock;\r\n    }\r\n\r\n    /// @notice Transfer `_value` SAT tokens from sender's account\r\n    /// `msg.sender` to provided account address `_to`.\r\n    /// @param _to The address of the tokens recipient\r\n    /// @param _value The amount of token to be transferred\r\n    /// @return Whether the transfer was successful or not\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        // Abort if not in Operational state.\r\n        if (!funding_ended) throw;\r\n        if (msg.sender == founders) throw;\r\n        var senderBalance = balances[msg.sender];\r\n        if (senderBalance >= _value && _value > 0) {\r\n            senderBalance -= _value;\r\n            balances[msg.sender] = senderBalance;\r\n            balances[_to] += _value;\r\n            Transfer(msg.sender, _to, _value);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function totalSupply() external constant returns (uint256) {\r\n        return totalTokens;\r\n    }\r\n\r\n    function balanceOf(address _owner) external constant returns (uint256) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    // Crowdfunding:\r\n\r\n    /// @notice Create tokens when funding is active.\r\n    /// @dev Required state: Funding Active\r\n    /// @dev State transition: -> Funding Success (only if cap reached)\r\n    function buy(address _sender) internal {\r\n        // Abort if not in Funding Active state.\r\n        if (funding_ended) throw;\r\n        // The checking for blocktimes.\r\n        if (block.number < fundingStartBlock) throw;\r\n        if (block.number > fundingEndBlock) throw;\r\n\r\n        // Do not allow creating 0 or more than the cap tokens.\r\n        if (msg.value == 0) throw;\r\n\r\n        var numTokens = msg.value * tokenCreationRate;\r\n        totalTokens += numTokens;\r\n\r\n        // Assign new tokens to the sender\r\n        balances[_sender] += numTokens;\r\n\r\n        // sending funds to founders\r\n        founders.transfer(msg.value);\r\n\r\n        // Log token creation event\r\n        Transfer(0, _sender, numTokens);\r\n    }\r\n\r\n    /// @notice Finalize crowdfunding\r\n    function finalize() external {\r\n        if (block.number <= fundingEndBlock) throw;\r\n\r\n        //locked allocation for founders \r\n        locked_allocation = totalTokens * 10 / 100;\r\n        balances[founders] = locked_allocation;\r\n        totalTokens += locked_allocation;\r\n        \r\n        unlockingBlock = block.number + 864000;   //about 6 months locked time.\r\n        funding_ended = true;\r\n    }\r\n\r\n    function transferFounders(address _to, uint256 _value) public returns (bool) {\r\n        if (!funding_ended) throw;\r\n        if (block.number <= unlockingBlock) throw;\r\n        if (msg.sender != founders) throw;\r\n        var senderBalance = balances[msg.sender];\r\n        if (senderBalance >= _value && _value > 0) {\r\n            senderBalance -= _value;\r\n            balances[msg.sender] = senderBalance;\r\n            balances[_to] += _value;\r\n            Transfer(msg.sender, _to, _value);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /// @notice If anybody sends Ether directly to this contract, consider he is\r\n    function() public payable {\r\n        buy(msg.sender);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFounders\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"founders\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"funding_ended\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundingEndBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"firstTokenCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"unlockingBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenCreationRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundingStartBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"locked_allocation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"secondTokenCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_founders\",\"type\":\"address\"},{\"name\":\"_fundingStartBlock\",\"type\":\"uint256\"},{\"name\":\"_fundingEndBlock\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"SaintArnouldToken","CompilerVersion":"v0.4.11+commit.68ef5810","OptimizationUsed":"1","Runs":"0","ConstructorArguments":"000000000000000000000000227ed1f9c8423fe559d7369fd50390a6c576b97800000000000000000000000000000000000000000000000000000000003d148000000000000000000000000000000000000000000000000000000000003e0d2f","Library":"","SwarmSource":"bzzr://7e3cc5b9ec167bb6d6844ca8d62db2b447be97875759d46d2db4c12b33513cc3"}]}