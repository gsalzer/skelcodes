{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\ncontract NFTHouseGame {\r\n    struct Listing {\r\n        uint startPrice;\r\n        uint endPrice;\r\n        uint startedAt;\r\n        uint endsAt;\r\n        bool isAvailable;\r\n    }\r\n\r\n    enum HouseClasses {\r\n        Shack,\r\n        Apartment,\r\n        Bungalow,\r\n        House,\r\n        Mansion,\r\n        Estate,\r\n        Penthouse,\r\n        Ashes\r\n    }\r\n\r\n    struct House {\r\n        address owner;\r\n        uint streetNumber;\r\n        string streetName;\r\n        string streetType;\r\n        string colorCode;\r\n        uint numBedrooms;\r\n        uint numBathrooms;\r\n        uint squareFootage;\r\n        uint propertyValue;\r\n        uint statusValue;\r\n        HouseClasses class;\r\n        uint classVariant;\r\n    }\r\n\r\n    struct Trait {\r\n        string name;\r\n        bool isNegative;\r\n    }\r\n\r\n    address public gameOwner;\r\n    address public gameDeveloper;\r\n\r\n    uint public presaleSales;\r\n    uint public presaleLimit = 5000;\r\n    bool public presaleOngoing = true;\r\n    uint presaleDevFee = 20;\r\n    uint presaleProceeds;\r\n    uint presaleDevPayout;\r\n\r\n    uint public buildPrice = 150 finney;\r\n    uint public additionPrice = 100 finney;\r\n    uint public saleFee = 2; // percent\r\n\r\n    House[] public houses;\r\n    Trait[] public traits;\r\n\r\n    mapping (uint => uint[4]) public houseTraits;\r\n    mapping (uint => Listing) public listings;\r\n\r\n    mapping (address => uint) public ownedHouses;\r\n    mapping (uint => uint) public classVariants;\r\n    mapping (uint => address) approvedTransfers;\r\n\r\n    string[] colors = [\"e96b63\"];\r\n    string[] streetNames = [\"Main\"];\r\n    string[] streetTypes = [\"Street\"];\r\n\r\n    modifier onlyBy(address _authorized) {\r\n        require(msg.sender == _authorized);\r\n        _;\r\n    }\r\n\r\n    modifier onlyByOwnerOrDev {\r\n        require(msg.sender == gameOwner || msg.sender == gameDeveloper);\r\n        _;\r\n    }\r\n\r\n    modifier onlyByAssetOwner(uint _tokenId) {\r\n        require(ownerOf(_tokenId) == msg.sender);\r\n        _;\r\n    }\r\n\r\n    modifier onlyDuringPresale {\r\n        require(presaleOngoing);\r\n        _;\r\n    }\r\n\r\n    function NFTHouseGame() public {\r\n        gameOwner = msg.sender;\r\n        gameDeveloper = msg.sender;\r\n\r\n        presaleOngoing = true;\r\n        presaleLimit = 5000;\r\n        presaleDevFee = 20;\r\n\r\n        buildPrice = 150 finney;\r\n        additionPrice = 10 finney;\r\n        saleFee = 2;\r\n    }\r\n\r\n    /* ERC-20 Compatibility */\r\n    function name() pure public returns (string) {\r\n        return \"SubPrimeCrypto\";\r\n    }\r\n\r\n    function symbol() pure public returns (string) {\r\n       return \"HOUSE\";\r\n    }\r\n\r\n    function totalSupply() view public returns (uint) {\r\n        return houses.length;\r\n    }\r\n\r\n    function balanceOf(address _owner) constant public returns (uint) {\r\n        return ownedHouses[_owner];\r\n    }\r\n\r\n    /* ERC-20 + ERC-721 Token Events */\r\n    event Transfer(address indexed _from, address indexed _to, uint _numTokens);\r\n    event Approval(address indexed _owner, address indexed _approved, uint _tokenId);\r\n\r\n    /* ERC-721 Token Ownership */\r\n    function ownerOf(uint _tokenId) constant public returns (address) {\r\n        return houses[_tokenId].owner;\r\n    }\r\n\r\n    function approve(address _to, uint _tokenId) onlyByAssetOwner(_tokenId) public {\r\n        require(msg.sender != _to);\r\n        approvedTransfers[_tokenId] = _to;\r\n        Approval(msg.sender, _to, _tokenId);\r\n    }\r\n\r\n    function approveAndTransfer(address _to, uint _tokenId) internal {\r\n      House storage house = houses[_tokenId];\r\n\r\n      address oldOwner = house.owner;\r\n      address newOwner = _to;\r\n\r\n      ownedHouses[oldOwner]--;\r\n      ownedHouses[newOwner]++;\r\n      house.owner = newOwner;\r\n\r\n      Approval(oldOwner, newOwner, _tokenId);\r\n      Transfer(oldOwner, newOwner, 1);\r\n    }\r\n\r\n    function takeOwnership(uint _tokenId) public {\r\n        House storage house = houses[_tokenId];\r\n\r\n        address oldOwner = house.owner;\r\n        address newOwner = msg.sender;\r\n\r\n        require(approvedTransfers[_tokenId] == newOwner);\r\n\r\n        ownedHouses[oldOwner] -= 1;\r\n        ownedHouses[newOwner] += 1;\r\n        house.owner = newOwner;\r\n\r\n        Transfer(oldOwner, newOwner, 1);\r\n    }\r\n\r\n    function transfer(address _to, uint _tokenId) public {\r\n        House storage house = houses[_tokenId];\r\n\r\n        address oldOwner = house.owner;\r\n        address newOwner = _to;\r\n\r\n        require(oldOwner != newOwner);\r\n        require(\r\n            (msg.sender == oldOwner) ||\r\n            (approvedTransfers[_tokenId] == newOwner)\r\n        );\r\n\r\n        ownedHouses[oldOwner]--;\r\n        ownedHouses[newOwner]++;\r\n        house.owner = newOwner;\r\n\r\n        Transfer(oldOwner, newOwner, 1);\r\n    }\r\n\r\n    /* Token-Specific Events */\r\n    event Minted(uint _tokenId);\r\n    event Upgraded(uint _tokenId);\r\n    event Destroyed(uint _tokenId);\r\n\r\n    /* Public Functionality */\r\n    function buildHouse() payable public {\r\n        require(\r\n          msg.value >= buildPrice ||\r\n          msg.sender == gameOwner ||\r\n          msg.sender == gameDeveloper\r\n        );\r\n\r\n        if (presaleOngoing) {\r\n          presaleSales++;\r\n          presaleProceeds += msg.value;\r\n        }\r\n\r\n        generateHouse(msg.sender);\r\n    }\r\n\r\n    function buildAddition(uint _tokenId) onlyByAssetOwner(_tokenId) payable public {\r\n        House storage house = houses[_tokenId];\r\n        require(msg.value >= additionPrice);\r\n\r\n        if (presaleOngoing) presaleProceeds += msg.value;\r\n\r\n        house.numBedrooms += (msg.value / additionPrice);\r\n        processUpgrades(house);\r\n    }\r\n\r\n    function burnForInsurance(uint _tokenId) onlyByAssetOwner(_tokenId) public {\r\n        House storage house = houses[_tokenId];\r\n        uint rand = notRandomWithSeed(1000, _tokenId);\r\n\r\n        // 80% chance \"claim\" is investigated\r\n        if (rand > 799) {\r\n            upgradeAsset(_tokenId);\r\n        } else {\r\n            // investigations yield equal chance of upgrade or permanent loss\r\n            if (rand > 499) {\r\n                upgradeAsset(_tokenId);\r\n            } else {\r\n                house.class = HouseClasses.Ashes;\r\n                house.statusValue = 0;\r\n                house.numBedrooms = 0;\r\n                house.numBathrooms = 0;\r\n                house.propertyValue = 0;\r\n                Destroyed(_tokenId);\r\n            }\r\n        }\r\n    }\r\n\r\n    function purchaseAsset(uint _tokenId) payable public {\r\n        Listing storage listing = listings[_tokenId];\r\n\r\n        uint currentPrice = calculateCurrentPrice(listing);\r\n        require(msg.value >= currentPrice);\r\n\r\n        require(listing.isAvailable && listing.endsAt > now);\r\n        listing.isAvailable = false;\r\n\r\n        if (presaleOngoing && (++presaleSales >= presaleLimit)) {\r\n          presaleOngoing = false;\r\n        }\r\n\r\n        if (houses[_tokenId].owner != address(this)) {\r\n            uint fee = currentPrice / (100 / saleFee);\r\n            uint sellerProceeds = currentPrice - fee;\r\n            presaleProceeds += (msg.value - sellerProceeds);\r\n            houses[_tokenId].owner.transfer(sellerProceeds);\r\n        } else {\r\n            presaleProceeds += msg.value;\r\n        }\r\n\r\n        approveAndTransfer(msg.sender, _tokenId);\r\n    }\r\n\r\n    function listAsset(uint _tokenId, uint _startPrice, uint _endPrice, uint _numDays) onlyByAssetOwner(_tokenId) public {\r\n        createListing(_tokenId, _startPrice, _endPrice, _numDays);\r\n    }\r\n\r\n    function removeAssetListing(uint _tokenId) public onlyByAssetOwner(_tokenId) {\r\n        listings[_tokenId].isAvailable = false;\r\n    }\r\n\r\n    function getHouseTraits(uint _tokenId) public view returns (uint[4]) {\r\n        return houseTraits[_tokenId];\r\n    }\r\n\r\n    function getTraitCount() public view returns (uint) {\r\n        return traits.length;\r\n    }\r\n\r\n    /* Admin Functionality */\r\n    function addNewColor(string _colorCode) public onlyByOwnerOrDev {\r\n        colors[colors.length++] = _colorCode;\r\n    }\r\n\r\n    function addNewTrait(string _name, bool _isNegative) public onlyByOwnerOrDev {\r\n        uint traitId = traits.length++;\r\n        traits[traitId].name = _name;\r\n        traits[traitId].isNegative = _isNegative;\r\n    }\r\n\r\n    function addNewStreetName(string _name) public onlyByOwnerOrDev {\r\n        streetNames[streetNames.length++] = _name;\r\n    }\r\n\r\n    function addNewStreetType(string _type) public onlyByOwnerOrDev {\r\n        streetTypes[streetTypes.length++] = _type;\r\n    }\r\n\r\n    function generatePresaleHouse() onlyByOwnerOrDev onlyDuringPresale public {\r\n        uint houseId = generateHouse(this);\r\n        uint sellPrice = (houses[houseId].propertyValue / 5000) * 1 finney;\r\n\r\n        if (sellPrice > 250 finney) sellPrice = 250 finney;\r\n        if (sellPrice < 50 finney) sellPrice = 50 finney;\r\n\r\n        createListing(houseId, sellPrice, 0, 30);\r\n    }\r\n\r\n    function setVariantCount(uint _houseClass, uint _variantCount) public onlyByOwnerOrDev {\r\n        classVariants[_houseClass] = _variantCount;\r\n    }\r\n\r\n    function withdrawFees(address _destination) public onlyBy(gameOwner) {\r\n        uint remainingPresaleProceeds = presaleProceeds - presaleDevPayout;\r\n        uint devsShare = remainingPresaleProceeds / (100 / presaleDevFee);\r\n\r\n        if (devsShare > 0) {\r\n          presaleDevPayout += devsShare;\r\n          gameDeveloper.transfer(devsShare);\r\n        }\r\n\r\n        _destination.transfer(this.balance);\r\n    }\r\n\r\n    function withdrawDevFees(address _destination) public onlyBy(gameDeveloper) {\r\n        uint remainingPresaleProceeds = presaleProceeds - presaleDevPayout;\r\n        uint devsShare = remainingPresaleProceeds / (100 / presaleDevFee);\r\n\r\n        if (devsShare > 0) {\r\n          presaleDevPayout += devsShare;\r\n          _destination.transfer(devsShare);\r\n        }\r\n    }\r\n\r\n    function transferGameOwnership(address _newOwner) public onlyBy(gameOwner) {\r\n        gameOwner = _newOwner;\r\n    }\r\n\r\n    /* Internal Functionality */\r\n    function generateHouse(address owner) internal returns (uint houseId) {\r\n        houseId = houses.length++;\r\n\r\n        HouseClasses houseClass = randomHouseClass();\r\n        uint numBedrooms = randomBedrooms(houseClass);\r\n        uint numBathrooms = randomBathrooms(numBedrooms);\r\n        uint squareFootage = calculateSquareFootage(houseClass, numBedrooms, numBathrooms);\r\n        uint propertyValue = calculatePropertyValue(houseClass, squareFootage, numBathrooms, numBedrooms);\r\n\r\n        houses[houseId] = House({\r\n          owner: owner,\r\n          class: houseClass,\r\n          streetNumber: notRandomWithSeed(9999, squareFootage + houseId),\r\n          streetName: streetNames[notRandom(streetNames.length)],\r\n          streetType: streetTypes[notRandom(streetTypes.length)],\r\n          propertyValue: propertyValue,\r\n          statusValue: propertyValue / 10000,\r\n          colorCode: colors[notRandom(colors.length)],\r\n          numBathrooms: numBathrooms,\r\n          numBedrooms: numBedrooms,\r\n          squareFootage: squareFootage,\r\n          classVariant: randomClassVariant(houseClass)\r\n        });\r\n\r\n        houseTraits[houseId] = [\r\n            notRandomWithSeed(traits.length, propertyValue + houseId * 5),\r\n            notRandomWithSeed(traits.length, squareFootage + houseId * 4),\r\n            notRandomWithSeed(traits.length, numBathrooms + houseId * 3),\r\n            notRandomWithSeed(traits.length, numBedrooms + houseId * 2)\r\n        ];\r\n\r\n        ownedHouses[owner]++;\r\n        Minted(houseId);\r\n        Transfer(address(0), owner, 1);\r\n\r\n        return houseId;\r\n    }\r\n\r\n    function createListing(uint tokenId, uint startPrice, uint endPrice, uint numDays) internal {\r\n        listings[tokenId] = Listing({\r\n          startPrice: startPrice,\r\n          endPrice: endPrice,\r\n          startedAt: now,\r\n          endsAt: now + (numDays * 24 hours),\r\n          isAvailable: true\r\n        });\r\n    }\r\n\r\n    function calculateCurrentPrice(Listing listing) internal view returns (uint) {\r\n        if (listing.endPrice != listing.startPrice) {\r\n          uint numberOfPeriods = listing.endsAt - listing.startedAt;\r\n          uint currentPeriod = (now - listing.startedAt) / numberOfPeriods;\r\n          return currentPeriod * (listing.startPrice + listing.endPrice);\r\n        } else {\r\n          return listing.startPrice;\r\n        }\r\n    }\r\n\r\n    function calculatePropertyValue(HouseClasses houseClass, uint squareFootage, uint numBathrooms, uint numBedrooms) pure internal returns (uint) {\r\n        uint propertyValue = (uint(houseClass) + 1) * 10;\r\n        propertyValue += (numBathrooms + 1) * 10;\r\n        propertyValue += (numBedrooms + 1) * 25;\r\n        propertyValue += squareFootage * 25;\r\n        propertyValue *= 5;\r\n\r\n        return uint(houseClass) > 4 ? propertyValue * 5 : propertyValue;\r\n    }\r\n\r\n    function randomHouseClass() internal view returns (HouseClasses) {\r\n        uint rand = notRandom(1000);\r\n\r\n        if (rand < 300) {\r\n            return HouseClasses.Shack;\r\n        } else if (rand > 300 && rand < 550) {\r\n            return HouseClasses.Apartment;\r\n        } else if (rand > 550 && rand < 750) {\r\n            return HouseClasses.Bungalow;\r\n        } else if (rand > 750 && rand < 900) {\r\n            return HouseClasses.House;\r\n        } else {\r\n            return HouseClasses.Mansion;\r\n        }\r\n    }\r\n\r\n    function randomClassVariant(HouseClasses houseClass) internal view returns (uint) {\r\n        uint possibleVariants = 10;\r\n        if (classVariants[uint(houseClass)] != 0) possibleVariants = classVariants[uint(houseClass)];\r\n        return notRandom(possibleVariants);\r\n    }\r\n\r\n    function randomBedrooms(HouseClasses houseClass) internal view returns (uint) {\r\n        uint class = uint(houseClass);\r\n        return class >= 1 ? class + notRandom(4) : 0;\r\n    }\r\n\r\n    function randomBathrooms(uint numBedrooms) internal view returns (uint) {\r\n        return numBedrooms < 2 ? numBedrooms : numBedrooms - notRandom(3);\r\n    }\r\n\r\n    function calculateSquareFootage(HouseClasses houseClass, uint numBedrooms, uint numBathrooms) internal pure returns (uint) {\r\n        uint baseSqft = uint(houseClass) >= 4 ? 50 : 25;\r\n        uint multiplier = uint(houseClass) + 1;\r\n\r\n        uint bedroomSqft = (numBedrooms + 1) * 10 * baseSqft;\r\n        uint bathroomSqft = (numBathrooms + 1) * 5 * baseSqft;\r\n\r\n        return (bedroomSqft + bathroomSqft) * multiplier;\r\n    }\r\n\r\n    function upgradeAsset(uint tokenId) internal {\r\n        House storage house = houses[tokenId];\r\n\r\n        if (uint(house.class) < 5) {\r\n          house.class = HouseClasses(uint(house.class) + 1);\r\n        }\r\n\r\n        house.numBedrooms++;\r\n        house.numBathrooms++;\r\n        processUpgrades(house);\r\n        Upgraded(tokenId);\r\n    }\r\n\r\n    function processUpgrades(House storage house) internal {\r\n        uint class = uint(house.class);\r\n        if (class <= house.numBedrooms) {\r\n            house.class = HouseClasses.Bungalow;\r\n        } else if (class < 2 && house.numBedrooms > 5) {\r\n            house.class = HouseClasses.Penthouse;\r\n        } else if (class < 4 && house.numBedrooms > 10) {\r\n            house.class = HouseClasses.Mansion;\r\n        } else if (class < 6 && house.numBedrooms > 15) {\r\n            house.class = HouseClasses.Estate;\r\n        }\r\n\r\n        house.squareFootage = calculateSquareFootage(\r\n          house.class, house.numBedrooms, house.numBathrooms\r\n        );\r\n\r\n        house.propertyValue = calculatePropertyValue(\r\n          house.class, house.squareFootage, house.numBathrooms, house.numBedrooms\r\n        );\r\n\r\n        house.statusValue += house.statusValue / 10;\r\n    }\r\n\r\n    function notRandom(uint lessThan) public view returns (uint) {\r\n        return uint(keccak256(\r\n            (houses.length + 1) + (tx.gasprice * lessThan) +\r\n            (block.difficulty * block.number + now) * msg.gas\r\n        )) % lessThan;\r\n    }\r\n\r\n    function notRandomWithSeed(uint lessThan, uint seed) public view returns (uint) {\r\n        return uint(keccak256(\r\n            seed + block.gaslimit + block.number\r\n        )) % lessThan;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_startPrice\",\"type\":\"uint256\"},{\"name\":\"_endPrice\",\"type\":\"uint256\"},{\"name\":\"_numDays\",\"type\":\"uint256\"}],\"name\":\"listAsset\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_destination\",\"type\":\"address\"}],\"name\":\"withdrawFees\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"generatePresaleHouse\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"buildAddition\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"burnForInsurance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buildPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"traits\",\"outputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"isNegative\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_houseClass\",\"type\":\"uint256\"},{\"name\":\"_variantCount\",\"type\":\"uint256\"}],\"name\":\"setVariantCount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gameDeveloper\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getHouseTraits\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[4]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_type\",\"type\":\"string\"}],\"name\":\"addNewStreetType\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presaleLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"additionPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferGameOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"houseTraits\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"lessThan\",\"type\":\"uint256\"},{\"name\":\"seed\",\"type\":\"uint256\"}],\"name\":\"notRandomWithSeed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_colorCode\",\"type\":\"string\"}],\"name\":\"addNewColor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"purchaseAsset\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"houses\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"streetNumber\",\"type\":\"uint256\"},{\"name\":\"streetName\",\"type\":\"string\"},{\"name\":\"streetType\",\"type\":\"string\"},{\"name\":\"colorCode\",\"type\":\"string\"},{\"name\":\"numBedrooms\",\"type\":\"uint256\"},{\"name\":\"numBathrooms\",\"type\":\"uint256\"},{\"name\":\"squareFootage\",\"type\":\"uint256\"},{\"name\":\"propertyValue\",\"type\":\"uint256\"},{\"name\":\"statusValue\",\"type\":\"uint256\"},{\"name\":\"class\",\"type\":\"uint8\"},{\"name\":\"classVariant\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presaleOngoing\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"takeOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_isNegative\",\"type\":\"bool\"}],\"name\":\"addNewTrait\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTraitCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"ownedHouses\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"lessThan\",\"type\":\"uint256\"}],\"name\":\"notRandom\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_destination\",\"type\":\"address\"}],\"name\":\"withdrawDevFees\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"addNewStreetName\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"listings\",\"outputs\":[{\"name\":\"startPrice\",\"type\":\"uint256\"},{\"name\":\"endPrice\",\"type\":\"uint256\"},{\"name\":\"startedAt\",\"type\":\"uint256\"},{\"name\":\"endsAt\",\"type\":\"uint256\"},{\"name\":\"isAvailable\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presaleSales\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"classVariants\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"removeAssetListing\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gameOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buildHouse\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_numTokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Minted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Destroyed\",\"type\":\"event\"}]","ContractName":"NFTHouseGame","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://d4db0e89a7a247e3db2907dec001a0b036bed8877f97e7a4f3f976b34e9bfca5"}]}