{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.15;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\ncontract SafeMath {\r\n  function mul(uint256 a, uint256 b) constant internal returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) constant internal returns (uint256) {\r\n    assert(b != 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) constant internal returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) constant internal returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n  \r\n  function mulByFraction(uint256 number, uint256 numerator, uint256 denominator) internal returns (uint256) {\r\n      return div(mul(number, numerator), denominator);\r\n  }\r\n}\r\n\r\n\r\n/// Implements ERC 20 Token standard: https://github.com/ethereum/EIPs/issues/20\r\n/// @title Abstract token contract - Functions to be implemented by token contracts.\r\n\r\ncontract AbstractToken {\r\n    // This is not an abstract function, because solc won't recognize generated getter functions for public variables as functions\r\n    function totalSupply() constant returns (uint256) {}\r\n    function balanceOf(address owner) constant returns (uint256 balance);\r\n    function transfer(address to, uint256 value) returns (bool success);\r\n    function transferFrom(address from, address to, uint256 value) returns (bool success);\r\n    function approve(address spender, uint256 value) returns (bool success);\r\n    function allowance(address owner, address spender) constant returns (uint256 remaining);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event Issuance(address indexed to, uint256 value);\r\n}\r\n\r\ncontract StandardToken is AbstractToken {\r\n    /*\r\n     *  Data structures\r\n     */\r\n    mapping (address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n    uint256 public totalSupply;\r\n\r\n    /*\r\n     *  Read and write storage functions\r\n     */\r\n    /// @dev Transfers sender's tokens to a given address. Returns success.\r\n    /// @param _to Address of token receiver.\r\n    /// @param _value Number of tokens to transfer.\r\n    function transfer(address _to, uint256 _value) returns (bool success) {\r\n        if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\r\n            balances[msg.sender] -= _value;\r\n            balances[_to] += _value;\r\n            Transfer(msg.sender, _to, _value);\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /// @dev Allows allowed third party to transfer tokens from one address to another. Returns success.\r\n    /// @param _from Address from where tokens are withdrawn.\r\n    /// @param _to Address to where tokens are sent.\r\n    /// @param _value Number of tokens to transfer.\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\r\n      if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\r\n            balances[_to] += _value;\r\n            balances[_from] -= _value;\r\n            allowed[_from][msg.sender] -= _value;\r\n            Transfer(_from, _to, _value);\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /// @dev Returns number of tokens owned by given address.\r\n    /// @param _owner Address of token owner.\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    /// @dev Sets approved amount of tokens for spender. Returns success.\r\n    /// @param _spender Address of allowed account.\r\n    /// @param _value Number of approved tokens.\r\n    function approve(address _spender, uint256 _value) returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /*\r\n     * Read storage functions\r\n     */\r\n    /// @dev Returns number of allowed tokens for given address.\r\n    /// @param _owner Address of token owner.\r\n    /// @param _spender Address of token spender.\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n      return allowed[_owner][_spender];\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract ImmlaToken is StandardToken, SafeMath {\r\n    /*\r\n     * Token meta data\r\n     */\r\n    string public constant name = \"IMMLA\";\r\n    string public constant symbol = \"IML\";\r\n    uint public constant decimals = 18;\r\n    uint public constant supplyLimit = 550688955000000000000000000;\r\n    \r\n    address public icoContract = 0x0;\r\n    /*\r\n     * Modifiers\r\n     */\r\n    \r\n    modifier onlyIcoContract() {\r\n        // only ICO contract is allowed to proceed\r\n        require(msg.sender == icoContract);\r\n        _;\r\n    }\r\n    \r\n    /*\r\n     * Contract functions\r\n     */\r\n    \r\n    /// @dev Contract is needed in icoContract address\r\n    /// @param _icoContract Address of account which will be mint tokens\r\n    function ImmlaToken(address _icoContract) {\r\n        assert(_icoContract != 0x0);\r\n        icoContract = _icoContract;\r\n    }\r\n    \r\n    /// @dev Burns tokens from address. It's can be applied by account with address this.icoContract\r\n    /// @param _from Address of account, from which will be burned tokens\r\n    /// @param _value Amount of tokens, that will be burned\r\n    function burnTokens(address _from, uint _value) onlyIcoContract {\r\n        assert(_from != 0x0);\r\n        require(_value > 0);\r\n        \r\n        balances[_from] = sub(balances[_from], _value);\r\n    }\r\n    \r\n    /// @dev Adds tokens to address. It's can be applied by account with address this.icoContract\r\n    /// @param _to Address of account to which the tokens will pass\r\n    /// @param _value Amount of tokens\r\n    function emitTokens(address _to, uint _value) onlyIcoContract {\r\n        assert(_to != 0x0);\r\n        require(_value > 0);\r\n        \r\n        balances[_to] = add(balances[_to], _value);\r\n    }\r\n}\r\n\r\n\r\ncontract ImmlaIco is SafeMath {\r\n    /*\r\n     * ICO meta data\r\n     */\r\n    ImmlaToken public immlaToken;\r\n    AbstractToken public preIcoToken;\r\n\r\n    // Address of account to which ethers will be tranfered in case of successful ICO\r\n    address public escrow;\r\n    // Address of manager\r\n    address public icoManager;\r\n    // Address of a account, that will transfer tokens from pre-ICO\r\n    address public tokenImporter = 0x0;\r\n    // Addresses of founders, team and bountyOwner\r\n    address public founder1;\r\n    address public founder2;\r\n    address public founder3;\r\n    address public team;\r\n    address public bountyOwner;\r\n    \r\n    // 38548226,7 IML is reward for team\r\n    uint public constant teamsReward = 38548226701232220000000000;\r\n    //  9361712,2 IML is token for bountyOwner\r\n    uint public constant bountyOwnersTokens = 9361712198870680000000000;\r\n    \r\n    // BASE = 10^18\r\n    uint constant BASE = 1000000000000000000;\r\n    \r\n    // 2017.09.14 21:00 UTC or 2017.09.15 0:00 MSK\r\n    uint public constant defaultIcoStart = 1505422800;\r\n    // ICO start time\r\n    uint public icoStart = defaultIcoStart;\r\n    \r\n    // 2017.10.15 21:00 UTC or 2017.10.16 0:00 MSK\r\n    uint public constant defaultIcoDeadline = 1508101200;\r\n    // ICO end time\r\n    uint public  icoDeadline = defaultIcoDeadline;\r\n    \r\n    // 2018.03.14 21:00 UTC or 2018.03.15 0:00 MSK\r\n    uint public constant defaultFoundersRewardTime = 1521061200;\r\n    // founders' reward time\r\n    uint public foundersRewardTime = defaultFoundersRewardTime;\r\n    \r\n    // Min limit of tokens is 18 000 000 IML\r\n    uint public constant minIcoTokenLimit = 18000000 * BASE;\r\n    // Max limit of tokens is 434 477 177 IML\r\n    uint public constant maxIcoTokenLimit = 434477177 * BASE;\r\n    \r\n    // Amount of imported tokens from pre-ICO\r\n    uint public importedTokens = 0;\r\n    // Amount of sold tokens on ICO\r\n    uint public soldTokensOnIco = 0;\r\n    // Amount of issued tokens on pre-ICO = 13232941,7 IML\r\n    uint public constant soldTokensOnPreIco = 13232941687168431951684000;\r\n    \r\n    // There are 170053520 tokens in stage 1\r\n    // 1 ETH = 3640 IML\r\n    uint tokenPrice1 = 3640;\r\n    uint tokenSupply1 = 170053520 * BASE;\r\n    \r\n    // There are 103725856 tokens in stage 2\r\n    // 1 ETH = 3549 IML\r\n    uint tokenPrice2 = 3549;\r\n    uint tokenSupply2 = 103725856 * BASE;\r\n    \r\n    // There are 100319718 tokens in stage 3\r\n    // 1 ETH = 3458 IML\r\n    uint tokenPrice3 = 3458;\r\n    uint tokenSupply3 = 100319718 * BASE;\r\n    \r\n    // There are 60378083 tokens in stage 4\r\n    // 1 ETH = 3367 IML\r\n    uint tokenPrice4 = 3367;\r\n    uint tokenSupply4 = 60378083 * BASE;\r\n    \r\n    // Token's prices in stages in array\r\n    uint[] public tokenPrices;\r\n    // Token's remaining amounts in stages in array\r\n    uint[] public tokenSupplies;\r\n    \r\n    // Check if manager can be setted\r\n    bool public initialized = false;\r\n    // If flag migrated=false, token can be burned\r\n    bool public migrated = false;\r\n    // Tokens to founders can be sent only if sentTokensToFounders == false and time > foundersRewardTime\r\n    bool public sentTokensToFounders = false;\r\n    // If stopICO is called, then ICO \r\n    bool public icoStoppedManually = false;\r\n    \r\n    // mapping of ether balances info\r\n    mapping (address => uint) public balances;\r\n    \r\n    /*\r\n     * Events\r\n     */\r\n    \r\n    event BuyTokens(address buyer, uint value, uint amount);\r\n    event WithdrawEther();\r\n    event StopIcoManually();\r\n    event SendTokensToFounders(uint founder1Reward, uint founder2Reward, uint founder3Reward);\r\n    event ReturnFundsFor(address account);\r\n    \r\n    /*\r\n     * Modifiers\r\n     */\r\n    \r\n    modifier whenInitialized() {\r\n        // only when contract is initialized\r\n        require(initialized);\r\n        _;\r\n    } \r\n    \r\n    modifier onlyManager() {\r\n        // only ICO manager can do this action\r\n        require(msg.sender == icoManager);\r\n        _;\r\n    }\r\n    \r\n    modifier onIcoRunning() {\r\n        // Checks, if ICO is running and has not been stopped\r\n        require(!icoStoppedManually && now >= icoStart && now <= icoDeadline);\r\n        _;\r\n    }\r\n    \r\n    modifier onGoalAchievedOrDeadline() {\r\n        // Checks if amount of sold tokens >= min limit or deadline is reached\r\n        require(soldTokensOnIco >= minIcoTokenLimit || now > icoDeadline || icoStoppedManually);\r\n        _;\r\n    }\r\n    \r\n    modifier onIcoStopped() {\r\n        // Checks if ICO was stopped or deadline is reached\r\n        require(icoStoppedManually || now > icoDeadline);\r\n        _;\r\n    }\r\n    \r\n    modifier notMigrated() {\r\n        // Checks if base can be migrated\r\n        require(!migrated);\r\n        _;\r\n    }\r\n    \r\n    /// @dev Constructor of ICO. Requires address of icoManager,\r\n    /// address of preIcoToken, time of start ICO (or zero),\r\n    /// time of ICO deadline (or zero), founders' reward time (or zero)\r\n    /// @param _icoManager Address of ICO manager\r\n    /// @param _preIcoToken Address of pre-ICO contract\r\n    /// @param _icoStart Timestamp of ICO start (if equals 0, sets defaultIcoStart)\r\n    /// @param _icoDeadline Timestamp of ICO deadline (if equals 0, sets defaultIcoDeadline)\r\n    /// @param _foundersRewardTime Timestamp of founders rewarding time \r\n    /// (if equals 0, sets defaultFoundersRewardTime)\r\n    function ImmlaIco(address _icoManager, address _preIcoToken, \r\n        uint _icoStart, uint _icoDeadline, uint _foundersRewardTime) {\r\n        assert(_preIcoToken != 0x0);\r\n        assert(_icoManager != 0x0);\r\n        \r\n        immlaToken = new ImmlaToken(this);\r\n        icoManager = _icoManager;\r\n        preIcoToken = AbstractToken(_preIcoToken);\r\n        \r\n        if (_icoStart != 0) {\r\n            icoStart = _icoStart;\r\n        }\r\n        if (_icoDeadline != 0) {\r\n            icoDeadline = _icoDeadline;\r\n        }\r\n        if (_foundersRewardTime != 0) {\r\n            foundersRewardTime = _foundersRewardTime;\r\n        }\r\n        \r\n        // tokenPrices and tokenSupplies arrays initialisation\r\n        tokenPrices.push(tokenPrice1);\r\n        tokenPrices.push(tokenPrice2);\r\n        tokenPrices.push(tokenPrice3);\r\n        tokenPrices.push(tokenPrice4);\r\n        \r\n        tokenSupplies.push(tokenSupply1);\r\n        tokenSupplies.push(tokenSupply2);\r\n        tokenSupplies.push(tokenSupply3);\r\n        tokenSupplies.push(tokenSupply4);\r\n    }\r\n    \r\n    /// @dev Initialises addresses of team, founders, tokens owner, escrow.\r\n    /// Initialises balances of team and tokens owner\r\n    /// @param _founder1 Address of founder 1\r\n    /// @param _founder2 Address of founder 2\r\n    /// @param _founder3 Address of founder 3\r\n    /// @param _team Address of team\r\n    /// @param _bountyOwner Address of bounty owner\r\n    /// @param _escrow Address of escrow\r\n    function init(\r\n        address _founder1, address _founder2, address _founder3, \r\n        address _team, address _bountyOwner, address _escrow) onlyManager {\r\n        assert(!initialized);\r\n        assert(_founder1 != 0x0);\r\n        assert(_founder2 != 0x0);\r\n        assert(_founder3 != 0x0);\r\n        assert(_team != 0x0);\r\n        assert(_bountyOwner != 0x0);\r\n        assert(_escrow != 0x0);\r\n        \r\n        founder1 = _founder1;\r\n        founder2 = _founder2;\r\n        founder3 = _founder3;\r\n        team = _team;\r\n        bountyOwner = _bountyOwner;\r\n        escrow = _escrow;\r\n        \r\n        immlaToken.emitTokens(team, teamsReward);\r\n        immlaToken.emitTokens(bountyOwner, bountyOwnersTokens);\r\n        \r\n        initialized = true;\r\n    }\r\n    \r\n    /// @dev Sets new manager. Only manager can do it\r\n    /// @param _newIcoManager Address of new ICO manager\r\n    function setNewManager(address _newIcoManager) onlyManager {\r\n        assert(_newIcoManager != 0x0);\r\n        \r\n        icoManager = _newIcoManager;\r\n    }\r\n    \r\n    /// @dev Sets new token importer. Only manager can do it\r\n    /// @param _newTokenImporter Address of token importer\r\n    function setNewTokenImporter(address _newTokenImporter) onlyManager {\r\n        tokenImporter = _newTokenImporter;\r\n    } \r\n    \r\n    // saves info if account's tokens were imported from pre-ICO\r\n    mapping (address => bool) private importedFromPreIco;\r\n    /// @dev Imports account's tokens from pre-ICO. It can be done only by user, ICO manager or token importer\r\n    /// @param _account Address of account which tokens will be imported\r\n    function importTokens(address _account) {\r\n        // only tokens holder or manager or tokenImporter can do migration\r\n        require(msg.sender == tokenImporter || msg.sender == icoManager || msg.sender == _account);\r\n        require(!importedFromPreIco[_account]);\r\n        \r\n        uint preIcoBalance = preIcoToken.balanceOf(_account);\r\n        if (preIcoBalance > 0) {\r\n            immlaToken.emitTokens(_account, preIcoBalance);\r\n            importedTokens = add(importedTokens, preIcoBalance);\r\n        }\r\n        \r\n        importedFromPreIco[_account] = true;\r\n    }\r\n    \r\n    /// @dev Stops ICO manually. Only manager can do it\r\n    function stopIco() onlyManager /* onGoalAchievedOrDeadline */ {\r\n        icoStoppedManually = true;\r\n        StopIcoManually();\r\n    }\r\n    \r\n    /// @dev If ICO is successful, sends funds to escrow (Only manager can do it). If ICO is failed, sends funds to caller (Anyone can do it)\r\n    function withdrawEther() onGoalAchievedOrDeadline {\r\n        if (soldTokensOnIco >= minIcoTokenLimit) {\r\n            assert(initialized);\r\n            assert(this.balance > 0);\r\n            assert(msg.sender == icoManager);\r\n            \r\n            escrow.transfer(this.balance);\r\n            WithdrawEther();\r\n        } \r\n        else {\r\n            returnFundsFor(msg.sender);\r\n        }\r\n    }\r\n    \r\n    /// @dev Returns funds to funder if ICO is unsuccessful. Dont removes IMMLA balance. Can be called only by manager or contract\r\n    /// @param _account Address of funder\r\n    function returnFundsFor(address _account) onGoalAchievedOrDeadline {\r\n        assert(msg.sender == address(this) || msg.sender == icoManager || msg.sender == _account);\r\n        assert(soldTokensOnIco < minIcoTokenLimit);\r\n        assert(balances[_account] > 0);\r\n        \r\n        _account.transfer(balances[_account]);\r\n        balances[_account] = 0;\r\n        \r\n        ReturnFundsFor(_account);\r\n    }\r\n    \r\n    /// @dev count tokens that can be sold with amount of money. Can be called only by contract\r\n    /// @param _weis Amount of weis\r\n    function countTokens(uint _weis) private returns(uint) { \r\n        uint result = 0;\r\n        uint stage;\r\n        for (stage = 0; stage < 4; stage++) {\r\n            if (_weis == 0) {\r\n                break;\r\n            }\r\n            if (tokenSupplies[stage] == 0) {\r\n                continue;\r\n            }\r\n            uint maxTokenAmount = tokenPrices[stage] * _weis;\r\n            if (maxTokenAmount <= tokenSupplies[stage]) {\r\n                result = add(result, maxTokenAmount);\r\n                break;\r\n            }\r\n            result = add(result, tokenSupplies[stage]);\r\n            _weis = sub(_weis, div(tokenSupplies[stage], tokenPrices[stage]));\r\n        }\r\n        \r\n        if (stage == 4) {\r\n            result = add(result, tokenPrices[3] * _weis);\r\n        }\r\n        \r\n        return result;\r\n    }\r\n    \r\n    /// @dev Invalidates _amount tokens. Can be called only by contract\r\n    /// @param _amount Amount of tokens\r\n    function removeTokens(uint _amount) private {\r\n        for (uint i = 0; i < 4; i++) {\r\n            if (_amount == 0) {\r\n                break;\r\n            }\r\n            if (tokenSupplies[i] > _amount) {\r\n                tokenSupplies[i] = sub(tokenSupplies[i], _amount);\r\n                break;\r\n            }\r\n            _amount = sub(_amount, tokenSupplies[i]);\r\n            tokenSupplies[i] = 0;\r\n        }\r\n    }\r\n    \r\n    /// @dev Buys quantity of tokens for the amount of sent ethers.\r\n    /// @param _buyer Address of account which will receive tokens\r\n    function buyTokens(address _buyer) private {\r\n        assert(_buyer != 0x0);\r\n        require(msg.value > 0);\r\n        require(soldTokensOnIco < maxIcoTokenLimit);\r\n        \r\n        uint boughtTokens = countTokens(msg.value);\r\n        assert(add(soldTokensOnIco, boughtTokens) <= maxIcoTokenLimit);\r\n        \r\n        removeTokens(boughtTokens);\r\n        soldTokensOnIco = add(soldTokensOnIco, boughtTokens);\r\n        immlaToken.emitTokens(_buyer, boughtTokens);\r\n        \r\n        balances[_buyer] = add(balances[_buyer], msg.value);\r\n        \r\n        BuyTokens(_buyer, msg.value, boughtTokens);\r\n    }\r\n    \r\n    /// @dev Fall back function ~50k-100k gas\r\n    function () payable onIcoRunning {\r\n        buyTokens(msg.sender);\r\n    }\r\n    \r\n    /// @dev Burn tokens from accounts only in state \"not migrated\". Only manager can do it\r\n    /// @param _from Address of account \r\n    function burnTokens(address _from, uint _value) onlyManager notMigrated {\r\n        immlaToken.burnTokens(_from, _value);\r\n    }\r\n    \r\n    /// @dev Set state \"migrated\". Only manager can do it \r\n    function setStateMigrated() onlyManager {\r\n        migrated = true;\r\n    }\r\n    \r\n    /// @dev Send tokens to founders. Can be sent only after immlaToken.rewardTime() (2018.03.15 0:00 UTC)\r\n    /// Sends 43% * 10% of all tokens to founder 1\r\n    /// Sends 43% * 10% of all tokens to founder 2\r\n    /// Sends 14% * 10% of all tokens to founder 3\r\n    function sendTokensToFounders() onlyManager whenInitialized {\r\n        require(!sentTokensToFounders && now >= foundersRewardTime);\r\n        \r\n        // soldTokensOnPreIco + soldTokensOnIco is ~81.3% of tokens \r\n        uint totalCountOfTokens = mulByFraction(add(soldTokensOnIco, soldTokensOnPreIco), 1000, 813);\r\n        uint totalRewardToFounders = mulByFraction(totalCountOfTokens, 1, 10);\r\n        \r\n        uint founder1Reward = mulByFraction(totalRewardToFounders, 43, 100);\r\n        uint founder2Reward = mulByFraction(totalRewardToFounders, 43, 100);\r\n        uint founder3Reward = mulByFraction(totalRewardToFounders, 14, 100);\r\n        immlaToken.emitTokens(founder1, founder1Reward);\r\n        immlaToken.emitTokens(founder2, founder2Reward);\r\n        immlaToken.emitTokens(founder3, founder3Reward);\r\n        SendTokensToFounders(founder1Reward, founder2Reward, founder3Reward);\r\n        sentTokensToFounders = true;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"defaultIcoStart\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"soldTokensOnPreIco\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"importedTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"founder1\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"sendTokensToFounders\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"migrated\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoManager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoDeadline\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxIcoTokenLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preIcoToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenImporter\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sentTokensToFounders\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bountyOwnersTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stopIco\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"foundersRewardTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"returnFundsFor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"founder2\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"immlaToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoStart\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"team\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamsReward\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_founder1\",\"type\":\"address\"},{\"name\":\"_founder2\",\"type\":\"address\"},{\"name\":\"_founder3\",\"type\":\"address\"},{\"name\":\"_team\",\"type\":\"address\"},{\"name\":\"_bountyOwner\",\"type\":\"address\"},{\"name\":\"_escrow\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bountyOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoStoppedManually\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"defaultFoundersRewardTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minIcoTokenLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenSupplies\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newIcoManager\",\"type\":\"address\"}],\"name\":\"setNewManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"soldTokensOnIco\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setStateMigrated\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"escrow\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"importTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newTokenImporter\",\"type\":\"address\"}],\"name\":\"setNewTokenImporter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenPrices\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"defaultIcoDeadline\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"founder3\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_icoManager\",\"type\":\"address\"},{\"name\":\"_preIcoToken\",\"type\":\"address\"},{\"name\":\"_icoStart\",\"type\":\"uint256\"},{\"name\":\"_icoDeadline\",\"type\":\"uint256\"},{\"name\":\"_foundersRewardTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BuyTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"WithdrawEther\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"StopIcoManually\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"founder1Reward\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"founder2Reward\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"founder3Reward\",\"type\":\"uint256\"}],\"name\":\"SendTokensToFounders\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ReturnFundsFor\",\"type\":\"event\"}]","ContractName":"ImmlaIco","CompilerVersion":"v0.4.16+commit.d7661dd9","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000003abbb0967accde028030720160212be9bab60388000000000000000000000000d29ba5f94fb91eefc5e3aaf69f181febed73930e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://0a610ce96fed9e377055e910d90a541b30770ac7b7c8a0c69dad1d4b56f701d3"}]}