{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13;\r\n// **-----------------------------------------------\r\n// 0.4.13+commit.0fb4cb1a\r\n// [Assistive Reality ARX ERC20 token & crowdsale contract w/10% dev alloc]\r\n// [https://aronline.io/icoinfo]\r\n// [v3.2 final released 10/09/17 final masterARXsale32mainnet.sol]\r\n// [Adapted from Ethereum standard crowdsale contract]\r\n// [Contact staff@aronline.io for any queries]\r\n// [Join us in changing the world]\r\n// [aronline.io]\r\n// **-----------------------------------------------\r\n// ERC Token Standard #20 Interface\r\n// https://github.com/ethereum/EIPs/issues/20\r\n// -------------------------------------------------\r\n// Security reviews completed 10/09/17 [passed OK]\r\n// Functional reviews completed 10/09/17 [passed OK]\r\n// Final code revision and regression test cycle complete 10/09/17 [passed]\r\n// https://github.com/assistivereality/ico/blob/master/3.2crowdsaletestsARXmainnet.txt\r\n// -------------------------------------------------\r\ncontract owned { // security reviewed 10/09/17\r\n    address public owner;\r\n\r\n    function owned() {\r\n        owner = msg.sender;\r\n    }\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    function transferOwnership(address newOwner) onlyOwner {\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract SafeMath { // security reviewed 10/09/17\r\n  function safeMul(uint256 a, uint256 b) internal returns (uint256) {\r\n    uint256 c = a * b;\r\n    safeAssert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function safeDiv(uint256 a, uint256 b) internal returns (uint256) {\r\n    safeAssert(b > 0);\r\n    uint256 c = a / b;\r\n    safeAssert(a == b * c + a % b);\r\n    return c;\r\n  }\r\n\r\n  function safeSub(uint256 a, uint256 b) internal returns (uint256) {\r\n    safeAssert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function safeAdd(uint256 a, uint256 b) internal returns (uint256) {\r\n    uint256 c = a + b;\r\n    safeAssert(c>=a && c>=b);\r\n    return c;\r\n  }\r\n\r\n  function safeAssert(bool assertion) internal {\r\n    if (!assertion) revert();\r\n  }\r\n}\r\n\r\ncontract ERC20Interface is owned, SafeMath { // security reviewed 10/09/17\r\n    function totalSupply() constant returns (uint256 tokenTotalSupply);\r\n    function balanceOf(address _owner) constant returns (uint256 balance);\r\n    function transfer(address _to, uint256 _value) returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\r\n    function approve(address _spender, uint256 _value) returns (bool success);\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\r\n    event Buy(address indexed _sender, uint256 _eth, uint256 _ARX);\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Burn(address _from, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n    event Refund(address indexed _refunder, uint256 _value);\r\n}\r\n\r\ncontract ARXCrowdsale is ERC20Interface { // security reviewed 10/09/17\r\n    // deployment variables for dynamic supply token\r\n    string  public constant standard              = \"ARX\";\r\n    string  public constant name                  = \"Assistive Reality\";\r\n    string  public constant symbol                = \"ARX\";\r\n    uint8   public constant decimals              = 18;\r\n    uint256 _totalSupply                          = 0;\r\n\r\n    // multi-sig addresses and price variable\r\n    address public admin = owner;                               // admin address\r\n    address public beneficiaryMultiSig;                         // beneficiaryMultiSig (founder group) multi-sig wallet account\r\n    address public foundationFundMultisig;                      // foundationFundMultisig multi-sig wallet address - Assistive Reality foundation fund\r\n    uint256 public tokensPerEthPrice;                           // priceVar e.g. 2,000 tokens per Eth\r\n\r\n    // uint256 values for min,max,caps,tracking\r\n    uint256 public amountRaisedInWei;                           // total amount raised in Wei e.g. 21 000 000 000 000 000 000 = 21 Eth\r\n    uint256 public fundingMaxInWei;                             // funding max in Wei e.g. 21 000 000 000 000 000 000 = 21 Eth\r\n    uint256 public fundingMinInWei;                             // funding min in Wei e.g. 11 000 000 000 000 000 000 = 11 Eth\r\n    uint256 public fundingMaxInEth;                             // funding max in Eth (approx) e.g. 21 Eth\r\n    uint256 public fundingMinInEth;                             // funding min in Eth (approx) e.g. 11 Eth\r\n    uint256 public remainingCapInWei;                           // amount of cap remaining to raise in Wei e.g. 1 200 000 000 000 000 000 = 1.2 Eth remaining\r\n    uint256 public remainingCapInEth;                           // amount of cap remaining to raise in Eth (approx) e.g. 1\r\n    uint256 public foundationFundTokenCountInWei;               // 10% additional tokens generated and sent to foundationFundMultisig/Assistive Reality foundation, 18 decimals\r\n\r\n    // loop control, ICO startup and limiters\r\n    string  public CurrentStatus                  = \"\";         // current crowdsale status\r\n    uint256 public fundingStartBlock;                           // crowdsale start block#\r\n    uint256 public fundingEndBlock;                             // crowdsale end block#\r\n    bool    public isCrowdSaleFinished            = false;      // boolean for crowdsale completed or not\r\n    bool    public isCrowdSaleSetup               = false;      // boolean for crowdsale setup\r\n    bool    public halted                         = false;      // boolean for halted or not\r\n    bool    public founderTokensAvailable         = false;      // variable to set false after generating founderTokens\r\n\r\n    // balance mapping and transfer allowance array\r\n    mapping(address => uint256) balances;\r\n    mapping(address => mapping (address => uint256)) allowed;\r\n    event Buy(address indexed _sender, uint256 _eth, uint256 _ARX);\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Burn(address _from, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n    event Refund(address indexed _refunder, uint256 _value);\r\n\r\n    // default function, map admin\r\n    function ARXCrowdsale() onlyOwner {\r\n      admin = msg.sender;\r\n      CurrentStatus = \"Crowdsale deployed to chain\";\r\n    }\r\n\r\n    // total number of tokens issued so far, normalised\r\n    function totalSupply() constant returns (uint256 tokenTotalSupply) {\r\n        tokenTotalSupply = safeDiv(_totalSupply,1 ether);\r\n    }\r\n\r\n    // get the account balance\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    // returns crowdsale max funding in Eth, low res\r\n    function fundingMaxInEth() constant returns (uint256 fundingMaximumInEth) {\r\n      fundingMaximumInEth = safeDiv(fundingMaxInWei,1 ether);\r\n    }\r\n\r\n    // returns crowdsale min funding in Eth, low res\r\n    function fundingMinInEth() constant returns (uint256 fundingMinimumInEth) {\r\n      fundingMinimumInEth = safeDiv(fundingMinInWei,1 ether);\r\n    }\r\n\r\n    // returns crowdsale progress (funds raised) in Eth, low res\r\n    function amountRaisedInEth() constant returns (uint256 amountRaisedSoFarInEth) {\r\n      amountRaisedSoFarInEth = safeDiv(amountRaisedInWei,1 ether);\r\n    }\r\n\r\n    // returns crowdsale remaining cap (hardcap) in Eth, low res\r\n    function remainingCapInEth() constant returns (uint256 remainingHardCapInEth) {\r\n      remainingHardCapInEth = safeDiv(remainingCapInWei,1 ether);\r\n    }\r\n\r\n    // ERC20 token transfer function\r\n    function transfer(address _to, uint256 _amount) returns (bool success) {\r\n        require(!(_to == 0x0));\r\n        if ((balances[msg.sender] >= _amount)\r\n        && (_amount > 0)\r\n        && ((safeAdd(balances[_to],_amount) > balances[_to]))) {\r\n            balances[msg.sender] = safeSub(balances[msg.sender], _amount);\r\n            balances[_to] = safeAdd(balances[_to], _amount);\r\n            Transfer(msg.sender, _to, _amount);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    // ERC20 token transferFrom function\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _amount) returns (bool success) {\r\n        require(!(_to == 0x0));\r\n        if ((balances[_from] >= _amount)\r\n        && (allowed[_from][msg.sender] >= _amount)\r\n        && (_amount > 0)\r\n        && (safeAdd(balances[_to],_amount) > balances[_to])) {\r\n            balances[_from] = safeSub(balances[_from], _amount);\r\n            allowed[_from][msg.sender] = safeSub((allowed[_from][msg.sender]),_amount);\r\n            balances[_to] = safeAdd(balances[_to], _amount);\r\n            Transfer(_from, _to, _amount);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    // ERC20 allow _spender to withdraw, multiple times, up to the _value amount\r\n    function approve(address _spender, uint256 _amount) returns (bool success) {\r\n        //Fix for known double-spend https://docs.google.com/document/d/1YLPtQxZu1UAvO9cZ1O2RPXBbT0mooh4DYKjA_jp-RLM/edit#\r\n        //Input must either set allow amount to 0, or have 0 already set, to workaround issue\r\n        require((_amount == 0) || (allowed[msg.sender][_spender] == 0));\r\n        allowed[msg.sender][_spender] = _amount;\r\n        Approval(msg.sender, _spender, _amount);\r\n        return true;\r\n    }\r\n\r\n    // ERC20 return allowance for given owner spender pair\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    // setup the CrowdSale parameters\r\n    function SetupCrowdsale(uint256 _fundingStartBlock, uint256 _fundingEndBlock) onlyOwner returns (bytes32 response) {\r\n        if ((msg.sender == admin)\r\n        && (!(isCrowdSaleSetup))\r\n        && (!(beneficiaryMultiSig > 0))\r\n        && (!(fundingMaxInWei > 0))) {\r\n            // mainnet values\r\n            beneficiaryMultiSig = 0xd93333f8cb765397A5D0d0e0ba53A2899B48511f;\r\n            foundationFundMultisig = 0x70A0bE1a5d8A9F39afED536Ec7b55d87067371aA;\r\n\r\n            // mainnet funding targets with 18 decimals\r\n            fundingMaxInWei = 70000000000000000000000; //70 000 000 000 000 000 000 000 = 70,000 Eth (hard cap) - crowdsale no longer accepts Eth after this value\r\n            fundingMinInWei = 3500000000000000000000;   //3 500 000 000 000 000 000 000 =  3,500 Eth (soft cap) - crowdsale is considered success after this value\r\n\r\n            // value of ARX token for mainnet. if hardcap is reached, this results in 280,000,000 ARX tokens in general supply (+28,000,000 in the foundationFundMultisig for a total supply of 308,000,000)\r\n            tokensPerEthPrice = 4000; // 4,000 tokens per Eth\r\n\r\n            // update values\r\n            fundingMaxInEth = safeDiv(fundingMaxInWei,1 ether); //approximate to 1 Eth due to resolution, provided for ease/viewing only\r\n            fundingMinInEth = safeDiv(fundingMinInWei,1 ether); //approximate to 1 Eth due to resolution, provided for ease/viewing only\r\n            remainingCapInWei = fundingMaxInWei;\r\n            remainingCapInEth = safeDiv(remainingCapInWei,1 ether); //approximate to 1 Eth due to resolution, provided for ease/viewing only\r\n            fundingStartBlock = _fundingStartBlock;\r\n            fundingEndBlock = _fundingEndBlock;\r\n\r\n            // configure crowdsale\r\n            isCrowdSaleSetup = true;\r\n            CurrentStatus = \"Crowdsale is setup\";\r\n            return \"Crowdsale is setup\";\r\n        } else if (msg.sender != admin) {\r\n            return \"not authorized\";\r\n        } else  {\r\n            return \"campaign cannot be changed\";\r\n        }\r\n    }\r\n\r\n    // default payable function when sending ether to this contract\r\n    function () payable {\r\n      require(msg.data.length == 0);\r\n      BuyTokens();\r\n    }\r\n\r\n    function BuyTokens() payable {\r\n      // 0. conditions (length, crowdsale setup, zero check, exceed funding contrib check, contract valid check, within funding block range check, balance overflow check etc)\r\n      require((!(msg.value == 0))\r\n      && (!(halted))\r\n      && (isCrowdSaleSetup)\r\n      && (!((safeAdd(amountRaisedInWei,msg.value)) > fundingMaxInWei))\r\n      && (block.number >= fundingStartBlock)\r\n      && (block.number <= fundingEndBlock)\r\n      && (!(isCrowdSaleFinished)));\r\n\r\n      // 1. vars\r\n      address recipient = msg.sender; // to simplify refunding\r\n      uint256 amount = msg.value;\r\n      uint256 rewardTransferAmount = 0;\r\n\r\n      // 2. effects\r\n      amountRaisedInWei = safeAdd(amountRaisedInWei,amount);\r\n      remainingCapInWei = safeSub(fundingMaxInWei,amountRaisedInWei);\r\n      rewardTransferAmount = safeMul(amount,tokensPerEthPrice);\r\n\r\n      // 3. interaction\r\n      balances[recipient] = safeAdd(balances[recipient], rewardTransferAmount);\r\n      _totalSupply = safeAdd(_totalSupply, rewardTransferAmount);\r\n      Transfer(this, recipient, rewardTransferAmount);\r\n      Buy(recipient, amount, rewardTransferAmount);\r\n    }\r\n\r\n    function AllocateFounderTokens() onlyOwner {\r\n      require(isCrowdSaleFinished && founderTokensAvailable && (foundationFundTokenCountInWei == 0));\r\n\r\n      // calculate additional 10% tokens to allocate for foundation developer distributions\r\n      foundationFundTokenCountInWei = safeMul((safeDiv(amountRaisedInWei,10)), tokensPerEthPrice);\r\n\r\n      // generate and send foundation developer token distributions\r\n      balances[foundationFundMultisig] = safeAdd(balances[foundationFundMultisig], foundationFundTokenCountInWei);\r\n\r\n      _totalSupply = safeAdd(_totalSupply, foundationFundTokenCountInWei);\r\n      Transfer(this, foundationFundMultisig, foundationFundTokenCountInWei);\r\n      Buy(foundationFundMultisig, 0, foundationFundTokenCountInWei);\r\n      founderTokensAvailable = false;\r\n    }\r\n\r\n    function beneficiaryMultiSigWithdraw(uint256 _amount) onlyOwner {\r\n      require(isCrowdSaleFinished && (amountRaisedInWei >= fundingMinInWei));\r\n      beneficiaryMultiSig.transfer(_amount);\r\n    }\r\n\r\n    function checkGoalReached() onlyOwner returns (bytes32 response) { // return crowdfund status to owner for each result case, update public constant\r\n      require (!(halted) && isCrowdSaleSetup);\r\n\r\n      if ((amountRaisedInWei < fundingMinInWei) && (block.number <= fundingEndBlock && block.number >= fundingStartBlock)) { // ICO in progress, under softcap\r\n        founderTokensAvailable = false;\r\n        isCrowdSaleFinished = false;\r\n        CurrentStatus = \"In progress (Eth < Softcap)\";\r\n        return \"In progress (Eth < Softcap)\";\r\n      } else if ((amountRaisedInWei < fundingMinInWei) && (block.number < fundingStartBlock)) { // ICO has not started\r\n        founderTokensAvailable = false;\r\n        isCrowdSaleFinished = false;\r\n        CurrentStatus = \"Crowdsale is setup\";\r\n        return \"Crowdsale is setup\";\r\n      } else if ((amountRaisedInWei < fundingMinInWei) && (block.number > fundingEndBlock)) { // ICO ended, under softcap\r\n        founderTokensAvailable = false;\r\n        isCrowdSaleFinished = true;\r\n        CurrentStatus = \"Unsuccessful (Eth < Softcap)\";\r\n        return \"Unsuccessful (Eth < Softcap)\";\r\n      } else if ((amountRaisedInWei >= fundingMinInWei) && (amountRaisedInWei >= fundingMaxInWei)) { // ICO ended, at hardcap!\r\n        if (foundationFundTokenCountInWei == 0) {\r\n          founderTokensAvailable = true;\r\n          isCrowdSaleFinished = true;\r\n          CurrentStatus = \"Successful (Eth >= Hardcap)!\";\r\n          return \"Successful (Eth >= Hardcap)!\";\r\n        } else if (foundationFundTokenCountInWei > 0) {\r\n          founderTokensAvailable = false;\r\n          isCrowdSaleFinished = true;\r\n          CurrentStatus = \"Successful (Eth >= Hardcap)!\";\r\n          return \"Successful (Eth >= Hardcap)!\";\r\n        }\r\n      } else if ((amountRaisedInWei >= fundingMinInWei) && (amountRaisedInWei < fundingMaxInWei) && (block.number > fundingEndBlock)) { // ICO ended, over softcap!\r\n        if (foundationFundTokenCountInWei == 0) {\r\n          founderTokensAvailable = true;\r\n          isCrowdSaleFinished = true;\r\n          CurrentStatus = \"Successful (Eth >= Softcap)!\";\r\n          return \"Successful (Eth >= Softcap)!\";\r\n        } else if (foundationFundTokenCountInWei > 0) {\r\n          founderTokensAvailable = false;\r\n          isCrowdSaleFinished = true;\r\n          CurrentStatus = \"Successful (Eth >= Softcap)!\";\r\n          return \"Successful (Eth >= Softcap)!\";\r\n        }\r\n      } else if ((amountRaisedInWei >= fundingMinInWei) && (amountRaisedInWei < fundingMaxInWei) && (block.number <= fundingEndBlock)) { // ICO in progress, over softcap!\r\n        founderTokensAvailable = false;\r\n        isCrowdSaleFinished = false;\r\n        CurrentStatus = \"In progress (Eth >= Softcap)!\";\r\n        return \"In progress (Eth >= Softcap)!\";\r\n      }\r\n    }\r\n\r\n    function refund() { // any contributor can call this to have their Eth returned, if not halted, soft cap not reached and deadline expires\r\n      require (!(halted)\r\n      && (amountRaisedInWei < fundingMinInWei)\r\n      && (block.number > fundingEndBlock)\r\n      && (balances[msg.sender] > 0));\r\n      //Proceed with refund\r\n      uint256 ARXbalance = balances[msg.sender];\r\n      balances[msg.sender] = 0;\r\n      _totalSupply = safeSub(_totalSupply, ARXbalance);\r\n      uint256 ethValue = safeDiv(ARXbalance, tokensPerEthPrice);\r\n      amountRaisedInWei = safeSub(amountRaisedInWei, ethValue);\r\n      msg.sender.transfer(ethValue);\r\n      Burn(msg.sender, ARXbalance);\r\n      Refund(msg.sender, ethValue);\r\n    }\r\n\r\n    function halt() onlyOwner { // halt the crowdsale\r\n        halted = true;\r\n        CurrentStatus = \"Halted\";\r\n    }\r\n\r\n    function unhalt() onlyOwner { // resume the crowdsale\r\n        halted = false;\r\n        CurrentStatus = \"Unhalted\";\r\n        checkGoalReached();\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"checkGoalReached\",\"outputs\":[{\"name\":\"response\",\"type\":\"bytes32\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundingMaxInEth\",\"outputs\":[{\"name\":\"fundingMaximumInEth\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"tokenTotalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensPerEthPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isCrowdSaleSetup\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beneficiaryMultiSig\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refund\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"standard\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"founderTokensAvailable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"halt\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"foundationFundMultisig\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"amountRaisedInWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"beneficiaryMultiSigWithdraw\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"amountRaisedInEth\",\"outputs\":[{\"name\":\"amountRaisedSoFarInEth\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundingEndBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"remainingCapInEth\",\"outputs\":[{\"name\":\"remainingHardCapInEth\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isCrowdSaleFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundingMinInEth\",\"outputs\":[{\"name\":\"fundingMinimumInEth\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fundingStartBlock\",\"type\":\"uint256\"},{\"name\":\"_fundingEndBlock\",\"type\":\"uint256\"}],\"name\":\"SetupCrowdsale\",\"outputs\":[{\"name\":\"response\",\"type\":\"bytes32\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundingMinInWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"foundationFundTokenCountInWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"halted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unhalt\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundingStartBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"remainingCapInWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"BuyTokens\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CurrentStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundingMaxInWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"AllocateFounderTokens\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_eth\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_ARX\",\"type\":\"uint256\"}],\"name\":\"Buy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_refunder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Refund\",\"type\":\"event\"}]","ContractName":"ARXCrowdsale","CompilerVersion":"v0.4.13+commit.fb4cb1a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://079252beaa5d520928d7b47877557a5d41b15abf78c60229c744b638fc22df74"}]}