{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\ncontract ATP {\r\n    \r\n    string public constant name = \"ATL Presale Token\";\r\n    string public constant symbol = \"ATP\";\r\n    uint   public constant decimals = 18;\r\n    \r\n    uint public constant PRICE = 505;\r\n    uint public constant TOKEN_SUPPLY_LIMIT = 2812500 * (1 ether / 1 wei);\r\n    \r\n    enum Phase {\r\n        Created,\r\n        Running,\r\n        Paused,\r\n        Migrating,\r\n        Migrated\r\n    }\r\n    \r\n    Phase public currentPhase = Phase.Created;\r\n    \r\n    address public tokenManager;\r\n    address public escrow;\r\n    address public crowdsaleManager;\r\n    \r\n    uint public totalSupply = 0;\r\n    mapping (address => uint256) private balances;\r\n    \r\n    event Buy(address indexed buyer, uint amount);\r\n    event Burn(address indexed owner, uint amount);\r\n    event PhaseSwitch(Phase newPhase);\r\n    \r\n    function ATP(address _tokenManager, address _escrow) {\r\n        tokenManager = _tokenManager;\r\n        escrow = _escrow;\r\n    }\r\n    \r\n    function() payable {\r\n        buyTokens(msg.sender);\r\n    }\r\n    \r\n    function buyTokens(address _buyer) public payable {\r\n        require(currentPhase == Phase.Running);\r\n        require(msg.value != 0);\r\n        \r\n        uint tokenAmount = msg.value * PRICE;\r\n        require(totalSupply + tokenAmount <= TOKEN_SUPPLY_LIMIT);\r\n        \r\n        balances[_buyer] += tokenAmount;\r\n        totalSupply += tokenAmount;\r\n        Buy(_buyer, tokenAmount);\r\n    }\r\n    \r\n    function balanceOf(address _owner) constant returns (uint256) {\r\n        return balances[_owner];\r\n    }\r\n    \r\n    modifier onlyTokenManager() {\r\n        require(msg.sender == tokenManager);\r\n        _;\r\n    }\r\n    \r\n    function setPresalePhase(Phase _nextPhase) public onlyTokenManager {\r\n        bool canSwitchPhase\r\n            =  (currentPhase == Phase.Created && _nextPhase == Phase.Running)\r\n            || (currentPhase == Phase.Running && _nextPhase == Phase.Paused)\r\n            || ((currentPhase == Phase.Running || currentPhase == Phase.Paused)\r\n                && _nextPhase == Phase.Migrating\r\n                && crowdsaleManager != 0x0)\r\n            || (currentPhase == Phase.Paused && _nextPhase == Phase.Running)\r\n            || (currentPhase == Phase.Migrating && _nextPhase == Phase.Migrated\r\n                && totalSupply == 0);\r\n        \r\n        require(canSwitchPhase);\r\n        currentPhase = _nextPhase;\r\n        PhaseSwitch(_nextPhase);\r\n    }\r\n    \r\n    function setCrowdsaleManager(address _mgr) public onlyTokenManager {\r\n        require(currentPhase != Phase.Migrating);\r\n        crowdsaleManager = _mgr;\r\n    }\r\n    \r\n    function withdrawEther() public onlyTokenManager {\r\n        if(this.balance > 0) {\r\n            escrow.transfer(this.balance);\r\n        }\r\n    }\r\n    \r\n    modifier onlyCrowdsaleManager() { \r\n        require(msg.sender == crowdsaleManager); \r\n        _;\r\n    }\r\n    \r\n    function burnTokens(address _owner) public onlyCrowdsaleManager {\r\n        require(currentPhase == Phase.Migrating);\r\n        \r\n        uint tokens = balances[_owner];\r\n        require(tokens > 0);\r\n        \r\n        balances[_owner] = 0;\r\n        totalSupply -= tokens;\r\n        Burn(_owner, tokens);\r\n        \r\n        if(totalSupply == 0) {\r\n            currentPhase = Phase.Migrated;\r\n            PhaseSwitch(Phase.Migrated);\r\n        }\r\n    }\r\n    \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"currentPhase\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nextPhase\",\"type\":\"uint8\"}],\"name\":\"setPresalePhase\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN_SUPPLY_LIMIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenManager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleManager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_mgr\",\"type\":\"address\"}],\"name\":\"setCrowdsaleManager\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawEther\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRICE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"burnTokens\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"escrow\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_buyer\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tokenManager\",\"type\":\"address\"},{\"name\":\"_escrow\",\"type\":\"address\"}],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Buy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newPhase\",\"type\":\"uint8\"}],\"name\":\"PhaseSwitch\",\"type\":\"event\"}]","ContractName":"ATP","CompilerVersion":"v0.4.11+commit.68ef5810","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000b92aac7f1db2ac60415257ef15796fd4edb7b932000000000000000000000000a5c7edcc438ba4b28e59fbe491441af93850fcbb","Library":"","SwarmSource":"bzzr://4878fee11dbff45fc383c0d82e8e37d1c127fd6b8199147b67571e8e1e50d8d3"}]}