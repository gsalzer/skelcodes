{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n * https://github.com/OpenZeppelin/zeppelin-solidity/\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\r\n    assert(token.transfer(to, value));\r\n  }\r\n\r\n  function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\r\n    assert(token.transferFrom(from, to, value));\r\n  }\r\n\r\n  function safeApprove(ERC20 token, address spender, uint256 value) internal {\r\n    assert(token.approve(spender, value));\r\n  }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n * https://github.com/OpenZeppelin/zeppelin-solidity/\r\n */\r\ncontract Ownable {\r\n  address public owner;                                                     // Operational owner.\r\n  address public masterOwner = 0xe4925C73851490401b858B657F26E62e9aD20F66;  // for ownership transfer segregation of duty, hard coded to wallet account\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public {\r\n    require(newOwner != address(0));\r\n    require(masterOwner == msg.sender); // only master owner can initiate change to ownership\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n * https://github.com/OpenZeppelin/zeppelin-solidity/\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n\r\n  function cei(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return ((a + b - 1) / b) * b;\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n * https://github.com/OpenZeppelin/zeppelin-solidity/\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n\r\n/** This interfaces will be implemented by different VZT contracts in future*/\r\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public; }\r\n\r\ncontract VZToken is StandardToken, Ownable {\r\n\r\n\r\n    /* metadata */\r\n\r\n    string public constant name = \"VectorZilla Token\"; // solium-disable-line uppercase\r\n    string public constant symbol = \"VZT\"; // solium-disable-line uppercase\r\n    string public constant version = \"1.0\"; // solium-disable-line uppercase\r\n    uint8 public constant decimals = 18; // solium-disable-line uppercase\r\n\r\n    /* all accounts in wei */\r\n\r\n    uint256 public constant INITIAL_SUPPLY = 100000000 * 10 ** 18; //intial total supply\r\n    uint256 public constant BURNABLE_UP_TO =  90000000 * 10 ** 18; //burnable up to 90% (90 million) of total supply\r\n    uint256 public constant VECTORZILLA_RESERVE_VZT = 25000000 * 10 ** 18; //25 million - reserved tokens\r\n\r\n    // Reserved tokens will be sent to this address. this address will be replaced on production:\r\n    address public constant VECTORZILLA_RESERVE = 0xF63e65c57024886cCa65985ca6E2FB38df95dA11;\r\n\r\n    // - tokenSaleContract receives the whole balance for distribution\r\n    address public tokenSaleContract;\r\n\r\n    /* Following stuff is to manage regulatory hurdles on who can and cannot use VZT token  */\r\n    mapping (address => bool) public frozenAccount;\r\n    event FrozenFunds(address target, bool frozen);\r\n\r\n\r\n    /** Modifiers to be used all over the place **/\r\n\r\n    modifier onlyOwnerAndContract() {\r\n        require(msg.sender == owner || msg.sender == tokenSaleContract);\r\n        _;\r\n    }\r\n\r\n\r\n    modifier onlyWhenValidAddress( address _addr ) {\r\n        require(_addr != address(0x0));\r\n        _;\r\n    }\r\n\r\n    modifier onlyWhenValidContractAddress(address _addr) {\r\n        require(_addr != address(0x0));\r\n        require(_addr != address(this));\r\n        require(isContract(_addr));\r\n        _;\r\n    }\r\n\r\n    modifier onlyWhenBurnable(uint256 _value) {\r\n        require(totalSupply - _value >= INITIAL_SUPPLY - BURNABLE_UP_TO);\r\n        _;\r\n    }\r\n\r\n    modifier onlyWhenNotFrozen(address _addr) {\r\n        require(!frozenAccount[_addr]);\r\n        _;\r\n    }\r\n\r\n    /** End of Modifier Definations */\r\n\r\n    /** Events */\r\n\r\n    event Burn(address indexed burner, uint256 value);\r\n    event Finalized();\r\n    //log event whenever withdrawal from this contract address happens\r\n    event Withdraw(address indexed from, address indexed to, uint256 value);\r\n\r\n    /*\r\n        Contructor that distributes initial supply between\r\n        owner and vzt reserve.\r\n    */\r\n    function VZToken(address _owner) public {\r\n        require(_owner != address(0));\r\n        totalSupply = INITIAL_SUPPLY;\r\n        balances[_owner] = INITIAL_SUPPLY - VECTORZILLA_RESERVE_VZT; //75 millions tokens\r\n        balances[VECTORZILLA_RESERVE] = VECTORZILLA_RESERVE_VZT; //25 millions\r\n        owner = _owner;\r\n    }\r\n\r\n    /*\r\n        This unnamed function is called whenever the owner send Ether to fund the gas\r\n        fees and gas reimbursement.\r\n    */\r\n    function () payable public onlyOwner {}\r\n\r\n    /**\r\n     * @dev transfer `_value` token for a specified address\r\n     * @param _to The address to transfer to.\r\n     * @param _value The amount to be transferred.\r\n     */\r\n    function transfer(address _to, uint256 _value) \r\n        public\r\n        onlyWhenValidAddress(_to)\r\n        onlyWhenNotFrozen(msg.sender)\r\n        onlyWhenNotFrozen(_to)\r\n        returns(bool) {\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer `_value` tokens from one address (`_from`) to another (`_to`)\r\n     * @param _from address The address which you want to send tokens from\r\n     * @param _to address The address which you want to transfer to\r\n     * @param _value uint256 the amount of tokens to be transferred\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) \r\n        public\r\n        onlyWhenValidAddress(_to)\r\n        onlyWhenValidAddress(_from)\r\n        onlyWhenNotFrozen(_from)\r\n        onlyWhenNotFrozen(_to)\r\n        returns(bool) {\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n    /**\r\n     * @dev Burns a specific (`_value`) amount of tokens.\r\n     * @param _value uint256 The amount of token to be burned.\r\n     */\r\n    function burn(uint256 _value)\r\n        public\r\n        onlyWhenBurnable(_value)\r\n        onlyWhenNotFrozen(msg.sender)\r\n        returns (bool) {\r\n        require(_value <= balances[msg.sender]);\r\n      // no need to require value <= totalSupply, since that would imply the\r\n      // sender's balance is greater than the totalSupply, which *should* be an assertion failure\r\n        address burner = msg.sender;\r\n        balances[burner] = balances[burner].sub(_value);\r\n        totalSupply = totalSupply.sub(_value);\r\n        Burn(burner, _value);\r\n        Transfer(burner, address(0x0), _value);\r\n        return true;\r\n      }\r\n\r\n    /**\r\n     * Destroy tokens from other account\r\n     *\r\n     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\r\n     *\r\n     * @param _from the address of the sender\r\n     * @param _value the amount of money to burn\r\n     */\r\n    function burnFrom(address _from, uint256 _value) \r\n        public\r\n        onlyWhenBurnable(_value)\r\n        onlyWhenNotFrozen(_from)\r\n        onlyWhenNotFrozen(msg.sender)\r\n        returns (bool success) {\r\n        assert(transferFrom( _from, msg.sender, _value ));\r\n        return burn(_value);\r\n    }\r\n\r\n    /**\r\n     * Set allowance for other address and notify\r\n     *\r\n     * Allows `_spender` to spend no more than `_value` tokens on your behalf, and then ping the contract about it\r\n     *\r\n     * @param _spender The address authorized to spend\r\n     * @param _value the max amount they can spend\r\n     * @param _extraData some extra information to send to the approved contract\r\n     */\r\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\r\n        public\r\n        onlyWhenValidAddress(_spender)\r\n        returns (bool success) {\r\n        tokenRecipient spender = tokenRecipient(_spender);\r\n        if (approve(_spender, _value)) {\r\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\r\n            return true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Freezes account and disables transfers/burning\r\n     *  This is to manage regulatory hurdlers where contract owner is required to freeze some accounts.\r\n     */\r\n    function freezeAccount(address target, bool freeze) external onlyOwner {\r\n        frozenAccount[target] = freeze;\r\n        FrozenFunds(target, freeze);\r\n    }\r\n\r\n    /* Owner withdrawal of an ether deposited from Token ether balance */\r\n    function withdrawToOwner(uint256 weiAmt) public onlyOwner {\r\n        // do not allow zero transfer\r\n        require(weiAmt > 0);\r\n        owner.transfer(weiAmt);\r\n        // signal the event for communication only it is meaningful\r\n        Withdraw(this, msg.sender, weiAmt);\r\n    }\r\n\r\n\r\n    /// @notice This method can be used by the controller to extract mistakenly\r\n    ///  sent tokens to this contract.\r\n    /// @param _token The address of the token contract that you want to recover\r\n    ///  set to 0 in case you want to extract ether.\r\n    function claimTokens(address _token) external onlyOwner {\r\n        if (_token == 0x0) {\r\n            owner.transfer(this.balance);\r\n            return;\r\n        }\r\n        StandardToken token = StandardToken(_token);\r\n        uint balance = token.balanceOf(this);\r\n        token.transfer(owner, balance);\r\n        // signal the event for communication only it is meaningful\r\n        Withdraw(this, owner, balance);\r\n    }\r\n\r\n    function setTokenSaleContract(address _tokenSaleContract)\r\n        external\r\n        onlyWhenValidContractAddress(_tokenSaleContract)\r\n        onlyOwner {\r\n           require(_tokenSaleContract != tokenSaleContract);\r\n           tokenSaleContract = _tokenSaleContract;\r\n    }\r\n\r\n    /// @dev Internal function to determine if an address is a contract\r\n    /// @param _addr address The address being queried\r\n    /// @return True if `_addr` is a contract\r\n    function isContract(address _addr) constant internal returns(bool) {\r\n        if (_addr == 0) {\r\n            return false;\r\n        }\r\n        uint256 size;\r\n        assembly {\r\n            size: = extcodesize(_addr)\r\n        }\r\n        return (size > 0);\r\n    }\r\n\r\n    /**\r\n     * @dev Function to send `_value` tokens to user (`_to`) from sale contract/owner\r\n     * @param _to address The address that will receive the minted tokens.\r\n     * @param _value uint256 The amount of tokens to be sent.\r\n     * @return True if the operation was successful.\r\n     */\r\n    function sendToken(address _to, uint256 _value)\r\n        public\r\n        onlyWhenValidAddress(_to)\r\n        onlyOwnerAndContract\r\n        returns(bool) {\r\n        address _from = owner;\r\n        // Check if the sender has enough\r\n        require(balances[_from] >= _value);\r\n        // Check for overflows\r\n        require(balances[_to] + _value > balances[_to]);\r\n        // Save this for an assertion in the future\r\n        uint256 previousBalances = balances[_from] + balances[_to];\r\n        // Subtract from the sender\r\n        balances[_from] -= _value;\r\n        // Add the same to the recipient\r\n        balances[_to] += _value;\r\n        Transfer(_from, _to, _value);\r\n        // Asserts are used to use static analysis to find bugs in your code. They should never fail\r\n        assert(balances[_from] + balances[_to] == previousBalances);\r\n        return true;\r\n    }\r\n    /**\r\n     * @dev Batch transfer of tokens to addresses from owner's balance\r\n     * @param addresses address[] The address that will receive the minted tokens.\r\n     * @param _values uint256[] The amount of tokens to be sent.\r\n     * @return True if the operation was successful.\r\n     */\r\n    function batchSendTokens(address[] addresses, uint256[] _values) \r\n        public onlyOwnerAndContract\r\n        returns (bool) {\r\n        require(addresses.length == _values.length);\r\n        require(addresses.length <= 20); //only batches of 20 allowed\r\n        uint i = 0;\r\n        uint len = addresses.length;\r\n        for (;i < len; i++) {\r\n            sendToken(addresses[i], _values[i]);\r\n        }\r\n        return true;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    Unpause();\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Contracts that should be able to recover tokens\r\n * @author SylTi\r\n * @dev This allow a contract to recover any ERC20 token received in a contract by transferring the balance to the contract owner.\r\n * This will prevent any accidental loss of tokens.\r\n * https://github.com/OpenZeppelin/zeppelin-solidity/\r\n */\r\ncontract CanReclaimToken is Ownable {\r\n  using SafeERC20 for ERC20Basic;\r\n\r\n    //log event whenever withdrawal from this contract address happens\r\n    event Withdraw(address indexed from, address indexed to, uint256 value);\r\n  /**\r\n   * @dev Reclaim all ERC20Basic compatible tokens\r\n   * @param token ERC20Basic The address of the token contract\r\n   */\r\n  function reclaimToken(address token) external onlyOwner {\r\n    if (token == 0x0) {\r\n      owner.transfer(this.balance);\r\n      return;\r\n    }\r\n    ERC20Basic ecr20BasicToken = ERC20Basic(token);\r\n    uint256 balance = ecr20BasicToken.balanceOf(this);\r\n    ecr20BasicToken.safeTransfer(owner, balance);\r\n    Withdraw(msg.sender, owner, balance);\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Contracts that should not own Tokens\r\n * @author Remco Bloemen <remco@2π.com>\r\n * @dev This blocks incoming ERC23 tokens to prevent accidental loss of tokens.\r\n * Should tokens (any ERC20Basic compatible) end up in the contract, it allows the\r\n * owner to reclaim the tokens.\r\n* https://github.com/OpenZeppelin/zeppelin-solidity/\r\n */\r\ncontract HasNoTokens is CanReclaimToken {\r\n\r\n /**\r\n  * @dev Reject all ERC23 compatible tokens\r\n  * @param from_ address The address that is transferring the tokens\r\n  * @param value_ uint256 the amount of the specified token\r\n  * @param data_ Bytes The data passed from the caller.\r\n  */\r\n  function tokenFallback(address from_, uint256 value_, bytes data_) pure external {\r\n    from_;\r\n    value_;\r\n    data_;\r\n    revert();\r\n  }\r\n\r\n}\r\n\r\n\r\ncontract VZTPresale is Ownable, Pausable, HasNoTokens {\r\n\r\n\r\n    using SafeMath for uint256;\r\n\r\n    string public constant name = \"VectorZilla Public Presale\";  // solium-disable-line uppercase\r\n    string public constant version = \"1.0\"; // solium-disable-line uppercase\r\n\r\n    VZToken token;\r\n\r\n    // this multi-sig address will be replaced on production:\r\n    address public constant VZT_WALLET = 0xa50EB7D45aA025525254aB2452679cE888B16b86;\r\n    /* if the minimum funding goal in wei is not reached, buyers may withdraw their funds */\r\n    uint256 public constant MIN_FUNDING_GOAL = 200 * 10 ** 18;\r\n    uint256 public constant PRESALE_TOKEN_SOFT_CAP = 1875000 * 10 ** 18;    // presale soft cap of 1,875,000 VZT\r\n    uint256 public constant PRESALE_RATE = 1250;                            // presale price is 1 ETH to 1,250 VZT\r\n    uint256 public constant SOFTCAP_RATE = 1150;                            // presale price becomes 1 ETH to 1,150 VZT after softcap is reached\r\n    uint256 public constant PRESALE_TOKEN_HARD_CAP = 5900000 * 10 ** 18;    // presale token hardcap\r\n    uint256 public constant MAX_GAS_PRICE = 50000000000;\r\n\r\n    uint256 public minimumPurchaseLimit = 0.1 * 10 ** 18;                      // minimum purchase is 0.1 ETH to make the gas worthwhile\r\n    uint256 public startDate = 1516001400;                            // January 15, 2018 7:30 AM UTC\r\n    uint256 public endDate = 1517815800;                              // Febuary 5, 2018 7:30 AM UTC\r\n    uint256 public totalCollected = 0;                                // total amount of Ether raised in wei\r\n    uint256 public tokensSold = 0;                                    // total number of VZT tokens sold\r\n    uint256 public totalDistributed = 0;                              // total number of VZT tokens distributed once finalised\r\n    uint256 public numWhitelisted = 0;                                // total number whitelisted\r\n\r\n    struct PurchaseLog {\r\n        uint256 ethValue;\r\n        uint256 vztValue;\r\n        bool kycApproved;\r\n        bool tokensDistributed;\r\n        bool paidFiat;\r\n        uint256 lastPurchaseTime;\r\n        uint256 lastDistributionTime;\r\n    }\r\n\r\n    //purchase log that captures\r\n    mapping (address => PurchaseLog) public purchaseLog;\r\n    //capture refunds\r\n    mapping (address => bool) public refundLog;\r\n    //capture buyers in array, this is for quickly looking up from DAPP\r\n    address[] public buyers;\r\n    uint256 public buyerCount = 0;                                              // total number of buyers purchased VZT\r\n\r\n    bool public isFinalized = false;                                        // it becomes true when token sale is completed\r\n    bool public publicSoftCapReached = false;                               // it becomes true when public softcap is reached\r\n\r\n    // list of addresses that can purchase\r\n    mapping(address => bool) public whitelist;\r\n\r\n    // event logging for token purchase\r\n    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n    // event logging for token sale finalized\r\n    event Finalized();\r\n    // event logging for softcap reached\r\n    event SoftCapReached();\r\n    // event logging for funds transfered to VectorZilla multi-sig wallet\r\n    event FundsTransferred();\r\n    // event logging for each individual refunded amount\r\n    event Refunded(address indexed beneficiary, uint256 weiAmount);\r\n    // event logging for each individual distributed token + bonus\r\n    event TokenDistributed(address indexed purchaser, uint256 tokenAmt);\r\n\r\n\r\n    /*\r\n        Constructor to initialize everything.\r\n    */\r\n    function VZTPresale(address _token, address _owner) public {\r\n        require(_token != address(0));\r\n        require(_owner != address(0));\r\n        token = VZToken(_token);\r\n        // default owner\r\n        owner = _owner;\r\n    }\r\n\r\n    /*\r\n       default function to buy tokens.\r\n    */\r\n\r\n    function() payable public whenNotPaused {\r\n        doPayment(msg.sender);\r\n    }\r\n\r\n    /*\r\n       allows owner to register token purchases done via fiat-eth (or equivalent currency)\r\n    */\r\n    function payableInFiatEth(address buyer, uint256 value) external onlyOwner {\r\n        purchaseLog[buyer].paidFiat = true;\r\n        // do public presale\r\n        purchasePresale(buyer, value);\r\n    }\r\n\r\n    function setTokenContract(address _token) external onlyOwner {\r\n        require(token != address(0));\r\n        token = VZToken(_token);\r\n\r\n    }\r\n\r\n    /**\r\n    * add address to whitelist\r\n    * @param _addr wallet address to be added to whitelist\r\n    */\r\n    function addToWhitelist(address _addr) public onlyOwner returns (bool) {\r\n        require(_addr != address(0));\r\n        if (!whitelist[_addr]) {\r\n            whitelist[_addr] = true;\r\n            numWhitelisted++;\r\n        }\r\n        purchaseLog[_addr].kycApproved = true;\r\n        return true;\r\n    }\r\n\r\n     /**\r\n      * add address to whitelist\r\n      * @param _addresses wallet addresses to be whitelisted\r\n      */\r\n    function addManyToWhitelist(address[] _addresses) \r\n        external \r\n        onlyOwner \r\n        returns (bool) \r\n        {\r\n        require(_addresses.length <= 50);\r\n        uint idx = 0;\r\n        uint len = _addresses.length;\r\n        for (; idx < len; idx++) {\r\n            address _addr = _addresses[idx];\r\n            addToWhitelist(_addr);\r\n        }\r\n        return true;\r\n    }\r\n    /**\r\n     * remove address from whitelist\r\n     * @param _addr wallet address to be removed from whitelist\r\n     */\r\n     function removeFomWhitelist(address _addr) public onlyOwner returns (bool) {\r\n         require(_addr != address(0));\r\n         require(whitelist[_addr]);\r\n        delete whitelist[_addr];\r\n        purchaseLog[_addr].kycApproved = false;\r\n        numWhitelisted--;\r\n        return true;\r\n     }\r\n\r\n    /*\r\n        Send Tokens tokens to a buyer:\r\n        - and KYC is approved\r\n    */\r\n    function sendTokens(address _user) public onlyOwner returns (bool) {\r\n        require(_user != address(0));\r\n        require(_user != address(this));\r\n        require(purchaseLog[_user].kycApproved);\r\n        require(purchaseLog[_user].vztValue > 0);\r\n        require(!purchaseLog[_user].tokensDistributed);\r\n        require(!refundLog[_user]);\r\n        purchaseLog[_user].tokensDistributed = true;\r\n        purchaseLog[_user].lastDistributionTime = now;\r\n        totalDistributed++;\r\n        token.sendToken(_user, purchaseLog[_user].vztValue);\r\n        TokenDistributed(_user, purchaseLog[_user].vztValue);\r\n        return true;\r\n    }\r\n\r\n    /*\r\n        Refund ethers to buyer if KYC couldn't/wasn't verified.\r\n    */\r\n    function refundEthIfKYCNotVerified(address _user) public onlyOwner returns (bool) {\r\n        if (!purchaseLog[_user].kycApproved) {\r\n            return doRefund(_user);\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /*\r\n\r\n    /*\r\n        return true if buyer is whitelisted\r\n    */\r\n    function isWhitelisted(address buyer) public view returns (bool) {\r\n        return whitelist[buyer];\r\n    }\r\n\r\n    /*\r\n        Check to see if this is public presale.\r\n    */\r\n    function isPresale() public view returns (bool) {\r\n        return !isFinalized && now >= startDate && now <= endDate;\r\n    }\r\n\r\n    /*\r\n        check if allocated has sold out.\r\n    */\r\n    function hasSoldOut() public view returns (bool) {\r\n        return PRESALE_TOKEN_HARD_CAP - tokensSold < getMinimumPurchaseVZTLimit();\r\n    }\r\n\r\n    /*\r\n        Check to see if the presale end date has passed or if all tokens allocated\r\n        for sale has been purchased.\r\n    */\r\n    function hasEnded() public view returns (bool) {\r\n        return now > endDate || hasSoldOut();\r\n    }\r\n\r\n    /*\r\n        Determine if the minimum goal in wei has been reached.\r\n    */\r\n    function isMinimumGoalReached() public view returns (bool) {\r\n        return totalCollected >= MIN_FUNDING_GOAL;\r\n    }\r\n\r\n    /*\r\n        For the convenience of presale interface to present status info.\r\n    */\r\n    function getSoftCapReached() public view returns (bool) {\r\n        return publicSoftCapReached;\r\n    }\r\n\r\n    function setMinimumPurchaseEtherLimit(uint256 newMinimumPurchaseLimit) external onlyOwner {\r\n        require(newMinimumPurchaseLimit > 0);\r\n        minimumPurchaseLimit = newMinimumPurchaseLimit;\r\n    }\r\n    /*\r\n        For the convenience of presale interface to find current tier price.\r\n    */\r\n\r\n    function getMinimumPurchaseVZTLimit() public view returns (uint256) {\r\n        if (getTier() == 1) {\r\n            return minimumPurchaseLimit.mul(PRESALE_RATE); //1250VZT/ether\r\n        } else if (getTier() == 2) {\r\n            return minimumPurchaseLimit.mul(SOFTCAP_RATE); //1150VZT/ether\r\n        }\r\n        return minimumPurchaseLimit.mul(1000); //base price\r\n    }\r\n\r\n    /*\r\n        For the convenience of presale interface to find current discount tier.\r\n    */\r\n    function getTier() public view returns (uint256) {\r\n        // Assume presale top tier discount\r\n        uint256 tier = 1;\r\n        if (now >= startDate && now < endDate && getSoftCapReached()) {\r\n            // tier 2 discount\r\n            tier = 2;\r\n        }\r\n        return tier;\r\n    }\r\n\r\n    /*\r\n        For the convenience of presale interface to present status info.\r\n    */\r\n    function getPresaleStatus() public view returns (uint256[3]) {\r\n        // 0 - presale not started\r\n        // 1 - presale started\r\n        // 2 - presale ended\r\n        if (now < startDate)\r\n            return ([0, startDate, endDate]);\r\n        else if (now <= endDate && !hasEnded())\r\n            return ([1, startDate, endDate]);\r\n        else\r\n            return ([2, startDate, endDate]);\r\n    }\r\n\r\n    /*\r\n        Called after presale ends, to do some extra finalization work.\r\n    */\r\n    function finalize() public onlyOwner {\r\n        // do nothing if finalized\r\n        require(!isFinalized);\r\n        // presale must have ended\r\n        require(hasEnded());\r\n\r\n        if (isMinimumGoalReached()) {\r\n            // transfer to VectorZilla multisig wallet\r\n            VZT_WALLET.transfer(this.balance);\r\n            // signal the event for communication\r\n            FundsTransferred();\r\n        }\r\n        // mark as finalized\r\n        isFinalized = true;\r\n        // signal the event for communication\r\n        Finalized();\r\n    }\r\n\r\n\r\n    /**\r\n     * @notice `proxyPayment()` allows the caller to send ether to the VZTPresale\r\n     * and have the tokens created in an address of their choosing\r\n     * @param buyer The address that will hold the newly created tokens\r\n     */\r\n    function proxyPayment(address buyer) \r\n    payable \r\n    public\r\n    whenNotPaused \r\n    returns(bool success) \r\n    {\r\n        return doPayment(buyer);\r\n    }\r\n\r\n    /*\r\n        Just in case we need to tweak pre-sale dates\r\n    */\r\n    function setDates(uint256 newStartDate, uint256 newEndDate) public onlyOwner {\r\n        require(newEndDate >= newStartDate);\r\n        startDate = newStartDate;\r\n        endDate = newEndDate;\r\n    }\r\n\r\n\r\n    // @dev `doPayment()` is an internal function that sends the ether that this\r\n    //  contract receives to the `vault` and creates tokens in the address of the\r\n    //  `buyer` assuming the VZTPresale is still accepting funds\r\n    //  @param buyer The address that will hold the newly created tokens\r\n    // @return True if payment is processed successfully\r\n    function doPayment(address buyer) internal returns(bool success) {\r\n        require(tx.gasprice <= MAX_GAS_PRICE);\r\n        // Antispam\r\n        // do not allow contracts to game the system\r\n        require(buyer != address(0));\r\n        require(!isContract(buyer));\r\n        // limit the amount of contributions to once per 100 blocks\r\n        //require(getBlockNumber().sub(lastCallBlock[msg.sender]) >= maxCallFrequency);\r\n        //lastCallBlock[msg.sender] = getBlockNumber();\r\n\r\n        if (msg.sender != owner) {\r\n            // stop if presale is over\r\n            require(isPresale());\r\n            // stop if no more token is allocated for sale\r\n            require(!hasSoldOut());\r\n            require(msg.value >= minimumPurchaseLimit);\r\n        }\r\n        require(msg.value > 0);\r\n        purchasePresale(buyer, msg.value);\r\n        return true;\r\n    }\r\n\r\n    /// @dev Internal function to determine if an address is a contract\r\n    /// @param _addr The address being queried\r\n    /// @return True if `_addr` is a contract\r\n    function isContract(address _addr) constant internal returns (bool) {\r\n        if (_addr == 0) {\r\n            return false;\r\n        }\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(_addr)\r\n        }\r\n        return (size > 0);\r\n    }\r\n\r\n    /// @dev Internal function to process sale\r\n    /// @param buyer The buyer address\r\n    /// @param value  The value of ether paid\r\n    function purchasePresale(address buyer, uint256 value) internal {\r\n         require(value >= minimumPurchaseLimit);\r\n         require(buyer != address(0));\r\n        uint256 tokens = 0;\r\n        // still under soft cap\r\n        if (!publicSoftCapReached) {\r\n            // 1 ETH for 1,250 VZT\r\n            tokens = value * PRESALE_RATE;\r\n            // get less if over softcap\r\n            if (tokensSold + tokens > PRESALE_TOKEN_SOFT_CAP) {\r\n                uint256 availablePresaleTokens = PRESALE_TOKEN_SOFT_CAP - tokensSold;\r\n                uint256 softCapTokens = (value - (availablePresaleTokens / PRESALE_RATE)) * SOFTCAP_RATE;\r\n                tokens = availablePresaleTokens + softCapTokens;\r\n                // process presale at 1 ETH to 1,150 VZT\r\n                processSale(buyer, value, tokens, SOFTCAP_RATE);\r\n                // public soft cap has been reached\r\n                publicSoftCapReached = true;\r\n                // signal the event for communication\r\n                SoftCapReached();\r\n            } else {\r\n                // process presale @PRESALE_RATE\r\n                processSale(buyer, value, tokens, PRESALE_RATE);\r\n            }\r\n        } else {\r\n            // 1 ETH to 1,150 VZT\r\n            tokens = value * SOFTCAP_RATE;\r\n            // process presale at 1 ETH to 1,150 VZT\r\n            processSale(buyer, value, tokens, SOFTCAP_RATE);\r\n        }\r\n    }\r\n\r\n    /*\r\n        process sale at determined price.\r\n    */\r\n    function processSale(address buyer, uint256 value, uint256 vzt, uint256 vztRate) internal {\r\n        require(buyer != address(0));\r\n        require(vzt > 0);\r\n        require(vztRate > 0);\r\n        require(value > 0);\r\n\r\n        uint256 vztOver = 0;\r\n        uint256 excessEthInWei = 0;\r\n        uint256 paidValue = value;\r\n        uint256 purchasedVzt = vzt;\r\n\r\n        if (tokensSold + purchasedVzt > PRESALE_TOKEN_HARD_CAP) {// if maximum is exceeded\r\n            // find overage\r\n            vztOver = tokensSold + purchasedVzt - PRESALE_TOKEN_HARD_CAP;\r\n            // overage ETH to refund\r\n            excessEthInWei = vztOver / vztRate;\r\n            // adjust tokens purchased\r\n            purchasedVzt = purchasedVzt - vztOver;\r\n            // adjust Ether paid\r\n            paidValue = paidValue - excessEthInWei;\r\n        }\r\n\r\n        /* To quick lookup list of buyers (pending token, kyc, or even refunded)\r\n            we are keeping an array of buyers. There might be duplicate entries when\r\n            a buyer gets refund (incomplete kyc, or requested), and then again contributes.\r\n        */\r\n        if (purchaseLog[buyer].vztValue == 0) {\r\n            buyers.push(buyer);\r\n            buyerCount++;\r\n        }\r\n\r\n        //if not whitelisted, mark kyc pending\r\n        if (!isWhitelisted(buyer)) {\r\n            purchaseLog[buyer].kycApproved = false;\r\n        }\r\n        //reset refund status in refundLog\r\n        refundLog[buyer] = false;\r\n\r\n         // record purchase in purchaseLog\r\n        purchaseLog[buyer].vztValue = SafeMath.add(purchaseLog[buyer].vztValue, purchasedVzt);\r\n        purchaseLog[buyer].ethValue = SafeMath.add(purchaseLog[buyer].ethValue, paidValue);\r\n        purchaseLog[buyer].lastPurchaseTime = now;\r\n\r\n\r\n        // total Wei raised\r\n        totalCollected += paidValue;\r\n        // total VZT sold\r\n        tokensSold += purchasedVzt;\r\n\r\n        /*\r\n            For event, log buyer and beneficiary properly\r\n        */\r\n        address beneficiary = buyer;\r\n        if (beneficiary == msg.sender) {\r\n            beneficiary = msg.sender;\r\n        }\r\n        // signal the event for communication\r\n        TokenPurchase(buyer, beneficiary, paidValue, purchasedVzt);\r\n        // transfer must be done at the end after all states are updated to prevent reentrancy attack.\r\n        if (excessEthInWei > 0 && !purchaseLog[buyer].paidFiat) {\r\n            // refund overage ETH\r\n            buyer.transfer(excessEthInWei);\r\n            // signal the event for communication\r\n            Refunded(buyer, excessEthInWei);\r\n        }\r\n    }\r\n\r\n    /*\r\n        Distribute tokens to a buyer:\r\n        - when minimum goal is reached\r\n        - and KYC is approved\r\n    */\r\n    function distributeTokensFor(address buyer) external onlyOwner returns (bool) {\r\n        require(isFinalized);\r\n        require(hasEnded());\r\n        if (isMinimumGoalReached()) {\r\n            return sendTokens(buyer);\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /*\r\n        purchaser requesting a refund, only allowed when minimum goal not reached.\r\n    */\r\n    function claimRefund() external returns (bool) {\r\n        return doRefund(msg.sender);\r\n    }\r\n\r\n    /*\r\n      send refund to purchaser requesting a refund \r\n   */\r\n    function sendRefund(address buyer) external onlyOwner returns (bool) {\r\n        return doRefund(buyer);\r\n    }\r\n\r\n    /*\r\n        Internal function to manage refunds \r\n    */\r\n    function doRefund(address buyer) internal returns (bool) {\r\n        require(tx.gasprice <= MAX_GAS_PRICE);\r\n        require(buyer != address(0));\r\n        require(!purchaseLog[buyer].paidFiat);\r\n        if (msg.sender != owner) {\r\n            // cannot refund unless authorized\r\n            require(isFinalized && !isMinimumGoalReached());\r\n        }\r\n        require(purchaseLog[buyer].ethValue > 0);\r\n        require(purchaseLog[buyer].vztValue > 0);\r\n        require(!refundLog[buyer]);\r\n        require(!purchaseLog[buyer].tokensDistributed);\r\n\r\n        // ETH to refund\r\n        uint256 depositedValue = purchaseLog[buyer].ethValue;\r\n        //VZT to revert\r\n        uint256 vztValue = purchaseLog[buyer].vztValue;\r\n        // assume all refunded, should we even do this if\r\n        // we are going to delete buyer from log?\r\n        purchaseLog[buyer].ethValue = 0;\r\n        purchaseLog[buyer].vztValue = 0;\r\n        refundLog[buyer] = true;\r\n        //delete from purchase log.\r\n        //but we won't remove buyer from buyers array\r\n        delete purchaseLog[buyer];\r\n        //decrement global counters\r\n        tokensSold = tokensSold.sub(vztValue);\r\n        totalCollected = totalCollected.sub(depositedValue);\r\n\r\n        // send must be called only after purchaseLog[buyer] is deleted to\r\n        //prevent reentrancy attack.\r\n        buyer.transfer(depositedValue);\r\n        Refunded(buyer, depositedValue);\r\n        return true;\r\n    }\r\n\r\n    function getBuyersList() external view returns (address[]) {\r\n        return buyers;\r\n    }\r\n\r\n    /**\r\n        * @dev Transfer all Ether held by the contract to the owner.\r\n        * Emergency where we might need to recover\r\n    */\r\n    function reclaimEther() external onlyOwner {\r\n        assert(owner.send(this.balance));\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"hasSoldOut\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSoftCapReached\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"VZT_WALLET\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"reclaimToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"publicSoftCapReached\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRESALE_RATE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MIN_FUNDING_GOAL\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"buyer\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBuyersList\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numWhitelisted\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTier\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMinimumPurchaseVZTLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newMinimumPurchaseLimit\",\"type\":\"uint256\"}],\"name\":\"setMinimumPurchaseEtherLimit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"refundLog\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"refundEthIfKYCNotVerified\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isMinimumGoalReached\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"sendTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addresses\",\"type\":\"address[]\"}],\"name\":\"addManyToWhitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isFinalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"purchaseLog\",\"outputs\":[{\"name\":\"ethValue\",\"type\":\"uint256\"},{\"name\":\"vztValue\",\"type\":\"uint256\"},{\"name\":\"kycApproved\",\"type\":\"bool\"},{\"name\":\"tokensDistributed\",\"type\":\"bool\"},{\"name\":\"paidFiat\",\"type\":\"bool\"},{\"name\":\"lastPurchaseTime\",\"type\":\"uint256\"},{\"name\":\"lastDistributionTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isPresale\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyerCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRESALE_TOKEN_SOFT_CAP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"reclaimEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"buyer\",\"type\":\"address\"}],\"name\":\"distributeTokensFor\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimRefund\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"setTokenContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"from_\",\"type\":\"address\"},{\"name\":\"value_\",\"type\":\"uint256\"},{\"name\":\"data_\",\"type\":\"bytes\"}],\"name\":\"tokenFallback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRESALE_TOKEN_HARD_CAP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"buyer\",\"type\":\"address\"}],\"name\":\"sendRefund\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPresaleStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[3]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newStartDate\",\"type\":\"uint256\"},{\"name\":\"newEndDate\",\"type\":\"uint256\"}],\"name\":\"setDates\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalCollected\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_GAS_PRICE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"addToWhitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"masterOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"buyer\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"payableInFiatEth\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalDistributed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimumPurchaseLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SOFTCAP_RATE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"buyers\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"buyer\",\"type\":\"address\"}],\"name\":\"proxyPayment\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"removeFomWhitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Finalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"SoftCapReached\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"FundsTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"weiAmount\",\"type\":\"uint256\"}],\"name\":\"Refunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenAmt\",\"type\":\"uint256\"}],\"name\":\"TokenDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"VZTPresale","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000fa814a9837c46c6c2065be983b546f56b19d2232000000000000000000000000e4925c73851490401b858b657f26e62e9ad20f66","Library":"","SwarmSource":"bzzr://442e230de4482723468ac42cedaee225283bd6675c10744b174e7a320057dcb2"}]}