{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.0;\r\n\r\ninterface ERC20 {\r\n    function transferFrom(address _from, address _to, uint _value) public returns (bool);\r\n    function approve(address _spender, uint _value) public returns (bool);\r\n    function allowance(address _owner, address _spender) public constant returns (uint);\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n}\r\n\r\ninterface ERC223 {\r\n    function transfer(address _to, uint _value, bytes _data) public returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint value, bytes indexed data);\r\n}\r\n\r\ncontract ERC223ReceivingContract {\r\n    function tokenFallback(address _from, uint _value, bytes _data) public;\r\n}\r\n\r\ncontract BitsenseToken {\r\n    string internal _symbol;\r\n    string internal _name;\r\n    uint8 internal _decimals;\r\n    uint internal _totalSupply = 1000000000000000;\r\n    mapping (address => uint) _balanceOf;\r\n    mapping (address => mapping (address => uint)) internal _allowances;\r\n\r\n    function BitsenseToken(string symbol, string name, uint8 decimals, uint totalSupply) public {\r\n        _symbol = symbol;\r\n        _name = name;\r\n        _decimals = decimals;\r\n        _totalSupply = totalSupply;\r\n    }\r\n\r\n    function name() public constant returns (string) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public constant returns (string) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public constant returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public constant returns (uint) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address _addr) public constant returns (uint);\r\n    function transfer(address _to, uint _value) public returns (bool);\r\n    event Transfer(address indexed _from, address indexed _to, uint _value);\r\n}\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Bitsense is BitsenseToken(\"BINS\", \"Bitsense\", 8, 1000000000000000), ERC20, ERC223 {\r\n    address private _owner;\r\n    struct LockAccount{\r\n        uint status;\r\n    }\r\n    \r\n    struct Reward{\r\n        uint amount;\r\n    }\r\n    \r\n    mapping (address => LockAccount) lockAccounts;\r\n    address[] public AllLockAccounts;\r\n    \r\n    mapping (address => Reward) rewards;\r\n    address[] public rewardsAccounts;\r\n    \r\n    using SafeMath for uint;\r\n    \r\n \r\n    \r\n    function Bitsense() public {\r\n        _balanceOf[msg.sender] = _totalSupply;\r\n        _owner = msg.sender;\r\n    }\r\n   \r\n    \r\n       function setLockAccount(address _addr) public{\r\n        require(msg.sender == _owner);\r\n        var lock_account = lockAccounts[_addr];\r\n        lock_account.status = 1;\r\n        AllLockAccounts.push(_addr) -1;\r\n    }\r\n    \r\n        function setReward(address _addr, uint _amount) public{\r\n        require(msg.sender == _owner);\r\n        var reward = rewards[_addr];\r\n        reward.amount +=  _amount;\r\n        rewardsAccounts.push(_addr) -1;\r\n    }\r\n  \r\n    function claimReward(address _addr) public returns (bool){\r\n        var addressTo = _addr;\r\n        uint amount = rewards[_addr].amount;\r\n       \r\n     \r\n          if (amount > 0 &&\r\n            amount <= _balanceOf[_owner] &&\r\n            !isContract(addressTo)) {\r\n            _balanceOf[_owner] = _balanceOf[_owner].sub(amount);\r\n            _balanceOf[addressTo] = _balanceOf[addressTo].add(amount);\r\n            Transfer(msg.sender, addressTo, amount);\r\n            return true;\r\n        }\r\n          rewards[_addr].amount = 0;\r\n        \r\n    }\r\n    \r\n    function getLockAccounts() view public returns (address[]){\r\n        return AllLockAccounts;\r\n    }\r\n    \r\n     function getLockAccount(address _addr) view public returns (uint){\r\n        return lockAccounts[_addr].status;\r\n    }\r\n    \r\n    function getReward(address _addr) view public returns (uint){\r\n        return rewards[_addr].amount;\r\n    }\r\n\r\n    function totalSupply() public constant returns (uint) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address _addr) public constant returns (uint) {\r\n        return _balanceOf[_addr];\r\n    }\r\n\r\n    function transfer(address _to, uint _value) public returns (bool) {\r\n        if (_value > 0 &&\r\n            _value <= _balanceOf[msg.sender] &&\r\n            !isContract(_to) && !isLock(msg.sender)) {\r\n            _balanceOf[msg.sender] = _balanceOf[msg.sender].sub(_value);\r\n            _balanceOf[_to] = _balanceOf[_to].add(_value);\r\n            Transfer(msg.sender, _to, _value);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    \r\n    \r\n\r\n    function transfer(address _to, uint _value, bytes _data) public returns (bool) {\r\n        if (_value > 0 &&\r\n            _value <= _balanceOf[msg.sender] &&\r\n            isContract(_to) && !isLock(msg.sender)) {\r\n            _balanceOf[msg.sender] = _balanceOf[msg.sender].sub(_value);\r\n            _balanceOf[_to] = _balanceOf[_to].add(_value);\r\n            ERC223ReceivingContract _contract = ERC223ReceivingContract(_to);\r\n            _contract.tokenFallback(msg.sender, _value, _data);\r\n            Transfer(msg.sender, _to, _value, _data);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    \r\n    function unLockAccount(address _addr) public {\r\n        require(msg.sender == _owner);\r\n       lockAccounts[_addr].status = 0;\r\n       \r\n    }\r\n    function isLock (address _addr) private constant returns(bool){\r\n        var lS = lockAccounts[_addr].status;\r\n        \r\n        if(lS == 1){\r\n            return true;\r\n        }\r\n        \r\n        return false;\r\n    }\r\n\r\n    function isContract(address _addr) private constant returns (bool) {\r\n        uint codeSize;\r\n        assembly {\r\n            codeSize := extcodesize(_addr)\r\n        }\r\n        return codeSize > 0;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint _value) public returns (bool) {\r\n        if (_allowances[_from][msg.sender] > 0 &&\r\n            _value > 0 &&\r\n            _allowances[_from][msg.sender] >= _value &&\r\n            _balanceOf[_from] >= _value) {\r\n            _balanceOf[_from] = _balanceOf[_from].sub(_value);\r\n            _balanceOf[_to] = _balanceOf[_to].add(_value);\r\n            _allowances[_from][msg.sender] = _allowances[_from][msg.sender].sub(_value);\r\n            Transfer(_from, _to, _value);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    \r\n\r\n   \r\n    function approve(address _spender, uint _value) public returns (bool) {\r\n        _allowances[msg.sender][_spender] = _allowances[msg.sender][_spender].add(_value);\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) public constant returns (uint) {\r\n        return _allowances[_owner][_spender];\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getLockAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardsAccounts\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"AllLockAccounts\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"unLockAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLockAccounts\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getReward\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"claimReward\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setReward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setLockAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"Bitsense","CompilerVersion":"v0.4.20-nightly.2018.1.19+commit.eba46a65","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://3dc5eec9bc71696cb6fae225da9bd41df0af1e4da06de3991850dae5e108ee1b"}]}