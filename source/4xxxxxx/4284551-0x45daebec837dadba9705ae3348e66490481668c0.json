{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.16;\r\n\r\ncontract SafeMath {\r\n     function safeMul(uint a, uint b) internal returns (uint) {\r\n          uint c = a * b;\r\n          assert(a == 0 || c / a == b);\r\n          return c;\r\n     }\r\n\r\n     function safeSub(uint a, uint b) internal returns (uint) {\r\n          assert(b <= a);\r\n          return a - b;\r\n     }\r\n\r\n     function safeAdd(uint a, uint b) internal returns (uint) {\r\n          uint c = a + b;\r\n          assert(c>=a && c>=b);\r\n          return c;\r\n     }\r\n}\r\n\r\n// ERC20 standard\r\n// We don't use ERC23 standard\r\ncontract StdToken is SafeMath {\r\n// Fields:\r\n     mapping(address => uint256) balances;\r\n     mapping (address => mapping (address => uint256)) allowed;\r\n     uint public totalSupply = 0;\r\n\r\n// Events:\r\n     event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n     event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n// Functions:\r\n     function transfer(address _to, uint256 _value) onlyPayloadSize(2 * 32) returns(bool){\r\n          require(balances[msg.sender] >= _value);\r\n          require(balances[_to] + _value > balances[_to]);\r\n\r\n          balances[msg.sender] = safeSub(balances[msg.sender],_value);\r\n          balances[_to] = safeAdd(balances[_to],_value);\r\n\r\n          Transfer(msg.sender, _to, _value);\r\n          return true;\r\n     }\r\n\r\n     function transferFrom(address _from, address _to, uint256 _value) returns(bool){\r\n          require(balances[_from] >= _value);\r\n          require(allowed[_from][msg.sender] >= _value);\r\n          require(balances[_to] + _value > balances[_to]);\r\n\r\n          balances[_to] = safeAdd(balances[_to],_value);\r\n          balances[_from] = safeSub(balances[_from],_value);\r\n          allowed[_from][msg.sender] = safeSub(allowed[_from][msg.sender],_value);\r\n\r\n          Transfer(_from, _to, _value);\r\n          return true;\r\n     }\r\n\r\n     function balanceOf(address _owner) constant returns (uint256) {\r\n          return balances[_owner];\r\n     }\r\n\r\n     function approve(address _spender, uint256 _value) returns (bool) {\r\n          // To change the approve amount you first have to reduce the addresses`\r\n          //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n          //  already 0 to mitigate the race condition described here:\r\n          //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n          require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n\r\n          allowed[msg.sender][_spender] = _value;\r\n          Approval(msg.sender, _spender, _value);\r\n          return true;\r\n     }\r\n\r\n     function allowance(address _owner, address _spender) constant returns (uint256) {\r\n          return allowed[_owner][_spender];\r\n     }\r\n\r\n     modifier onlyPayloadSize(uint _size) {\r\n          require(msg.data.length >= _size + 4);\r\n          _;\r\n     }\r\n}\r\n\r\ncontract MNTP is StdToken {\r\n// Fields:\r\n     string public constant name = \"Goldmint MNT Prelaunch Token\";\r\n     string public constant symbol = \"MNTP\";\r\n     uint public constant decimals = 18;\r\n\r\n     address public creator = 0x0;\r\n     address public icoContractAddress = 0x0;\r\n     bool public lockTransfers = false;\r\n\r\n     // 10 mln\r\n     uint public constant TOTAL_TOKEN_SUPPLY = 10000000 * 1 ether;\r\n\r\n/// Modifiers:\r\n     modifier onlyCreator() { \r\n          require(msg.sender == creator); \r\n          _; \r\n     }\r\n\r\n     modifier byIcoContract() { \r\n          require(msg.sender == icoContractAddress); \r\n          _; \r\n     }\r\n\r\n     function setCreator(address _creator) onlyCreator {\r\n          creator = _creator;\r\n     }\r\n\r\n// Setters/Getters\r\n     function setIcoContractAddress(address _icoContractAddress) onlyCreator {\r\n          icoContractAddress = _icoContractAddress;\r\n     }\r\n\r\n// Functions:\r\n     function MNTP() {\r\n          creator = msg.sender;\r\n\r\n          assert(TOTAL_TOKEN_SUPPLY == 10000000 * 1 ether);\r\n     }\r\n\r\n     /// @dev Override\r\n     function transfer(address _to, uint256 _value) public returns(bool){\r\n          require(!lockTransfers);\r\n          return super.transfer(_to,_value);\r\n     }\r\n\r\n     /// @dev Override\r\n     function transferFrom(address _from, address _to, uint256 _value) public returns(bool){\r\n          require(!lockTransfers);\r\n          return super.transferFrom(_from,_to,_value);\r\n     }\r\n\r\n     function issueTokens(address _who, uint _tokens) byIcoContract {\r\n          require((totalSupply + _tokens) <= TOTAL_TOKEN_SUPPLY);\r\n\r\n          balances[_who] = safeAdd(balances[_who],_tokens);\r\n          totalSupply = safeAdd(totalSupply,_tokens);\r\n\r\n          Transfer(0x0, _who, _tokens);\r\n     }\r\n\r\n     // For refunds only\r\n     function burnTokens(address _who, uint _tokens) byIcoContract {\r\n          balances[_who] = safeSub(balances[_who], _tokens);\r\n          totalSupply = safeSub(totalSupply, _tokens);\r\n     }\r\n\r\n     function lockTransfer(bool _lock) byIcoContract {\r\n          lockTransfers = _lock;\r\n     }\r\n\r\n     // Do not allow to send money directly to this contract\r\n     function() {\r\n          revert();\r\n     }\r\n}\r\n\r\n// This contract will hold all tokens that were unsold during ICO.\r\n//\r\n// Goldmint Team should be able to withdraw them and sell only after 1 year is passed after \r\n// ICO is finished.\r\ncontract GoldmintUnsold is SafeMath {\r\n     address public creator;\r\n     address public teamAccountAddress;\r\n     address public icoContractAddress;\r\n     uint64 public icoIsFinishedDate;\r\n\r\n     MNTP public mntToken;\r\n\r\n     function GoldmintUnsold(address _teamAccountAddress,address _mntTokenAddress){\r\n          creator = msg.sender;\r\n          teamAccountAddress = _teamAccountAddress;\r\n\r\n          mntToken = MNTP(_mntTokenAddress);          \r\n     }\r\n\r\n     modifier onlyCreator() { \r\n          require(msg.sender==creator); \r\n          _; \r\n     }\r\n\r\n     modifier onlyIcoContract() { \r\n          require(msg.sender==icoContractAddress); \r\n          _; \r\n     }\r\n\r\n// Setters/Getters\r\n     function setIcoContractAddress(address _icoContractAddress) onlyCreator {\r\n          icoContractAddress = _icoContractAddress;\r\n     }\r\n\r\n     function finishIco() public onlyIcoContract {\r\n          icoIsFinishedDate = uint64(now);\r\n     }\r\n\r\n     // can be called by anyone...\r\n     function withdrawTokens() public {\r\n          // Check if 1 year is passed\r\n          uint64 oneYearPassed = icoIsFinishedDate + 365 days;  \r\n          require(uint(now) >= oneYearPassed);\r\n\r\n          // Transfer all tokens from this contract to the teamAccountAddress\r\n          uint total = mntToken.balanceOf(this);\r\n          mntToken.transfer(teamAccountAddress,total);\r\n     }\r\n\r\n     // Do not allow to send money directly to this contract\r\n     function() payable {\r\n          revert();\r\n     }\r\n}\r\n\r\ncontract FoundersVesting is SafeMath {\r\n     address public creator;\r\n     address public teamAccountAddress;\r\n     uint64 public lastWithdrawTime;\r\n\r\n     uint public withdrawsCount = 0;\r\n     uint public amountToSend = 0;\r\n\r\n     MNTP public mntToken;\r\n\r\n     function FoundersVesting(address _teamAccountAddress,address _mntTokenAddress){\r\n          teamAccountAddress = _teamAccountAddress;\r\n          lastWithdrawTime = uint64(now);\r\n\r\n          mntToken = MNTP(_mntTokenAddress);          \r\n\r\n          creator = msg.sender;\r\n     }\r\n\r\n     modifier onlyCreator() { \r\n          require(msg.sender==creator); \r\n          _; \r\n     }\r\n\r\n     function withdrawTokens() onlyCreator public {\r\n          // 1 - wait for the next month\r\n          uint64 oneMonth = lastWithdrawTime + 30 days;  \r\n          require(uint(now) >= oneMonth);\r\n\r\n          // 2 - calculate amount (only first time)\r\n          if(withdrawsCount==0){\r\n               amountToSend = mntToken.balanceOf(this) / 10;\r\n          }\r\n\r\n          require(amountToSend!=0);\r\n\r\n          // 3 - send 1/10th\r\n          uint currentBalance = mntToken.balanceOf(this);\r\n          if(currentBalance<amountToSend){\r\n             amountToSend = currentBalance;  \r\n          }\r\n          mntToken.transfer(teamAccountAddress,amountToSend);\r\n\r\n          // 4 - update counter\r\n          withdrawsCount++;\r\n          lastWithdrawTime = uint64(now);\r\n     }\r\n\r\n     // Do not allow to send money directly to this contract\r\n     function() payable {\r\n          revert();\r\n     }\r\n}\r\n\r\n// This is the main Goldmint ICO smart contract\r\ncontract Goldmint is SafeMath {\r\n// Constants:\r\n     // These values are HARD CODED!!!\r\n     // For extra security we split single multisig wallet into 10 separate multisig wallets\r\n     //\r\n     // THIS IS A REAL ICO WALLETS!!!\r\n     // PLEASE DOUBLE CHECK THAT...\r\n     address[] public multisigs = [\r\n          0xcEc42E247097C276Ad3D7cFd270aDBd562dA5c61,\r\n          0x373C46c544662B8C5D55c24Cf4F9a5020163eC2f,\r\n          0x672CF829272339A6c8c11b14Acc5F9d07bAFAC7c,\r\n          0xce0e1981A19a57aE808a7575a6738e4527fB9118,\r\n          0x93Aa76cdb17EeA80e4De983108ef575D8fc8f12b,\r\n          0x20ae3329Cd1e35FEfF7115B46218c9D056d430Fd,\r\n          0xe9fC1A57a5dC1CaA3DE22A940E9F09e640615f7E,\r\n          0xD360433950DE9F6FA0e93C29425845EeD6BFA0d0,\r\n          0xF0De97EAff5D6c998c80e07746c81a336e1BBd43,\r\n          0x80b365da1C18f4aa1ecFa0dFA07Ed4417B05Cc69\r\n     ];\r\n\r\n     // We count ETH invested by person, for refunds (see below)\r\n     mapping(address => uint) ethInvestedBy;\r\n     uint collectedWei = 0;\r\n\r\n     // These can be changed before ICO starts ($7USD/MNTP)\r\n     uint constant STD_PRICE_USD_PER_1000_TOKENS = 7000;\r\n\r\n     // The USD/ETH exchange rate may be changed every hour and can vary from $100 to $700 depending on the market. The exchange rate is retrieved from coinmarketcap.com site and is rounded to $1 dollar. For example if current marketcap price is $306.123 per ETH, the price is set as $306 to the contract.\r\n     uint public usdPerEthCoinmarketcapRate = 300;\r\n     uint64 public lastUsdPerEthChangeDate = 0;\r\n\r\n     // Price changes from block to block\r\n     uint constant SINGLE_BLOCK_LEN = 700000;\r\n     // 1 000 000 tokens\r\n     uint public constant BONUS_REWARD = 1000000 * 1 ether;\r\n     // 2 000 000 tokens\r\n     uint public constant FOUNDERS_REWARD = 2000000 * 1 ether;\r\n     // 7 000 000 is sold during the ICO\r\n     uint public constant ICO_TOKEN_SUPPLY_LIMIT = 7000000 * 1 ether;\r\n     // 150 000 tokens soft cap (otherwise - refund)\r\n     uint public constant ICO_TOKEN_SOFT_CAP = 150000 * 1 ether;\r\n\r\n     // 3 000 000 can be issued from other currencies\r\n     uint public constant MAX_ISSUED_FROM_OTHER_CURRENCIES = 3000000 * 1 ether;\r\n     // 30 000 MNTP tokens per one call only\r\n     uint public constant MAX_SINGLE_ISSUED_FROM_OTHER_CURRENCIES = 30000 * 1 ether;\r\n     uint public issuedFromOtherCurrencies = 0;\r\n\r\n// Fields:\r\n     address public creator = 0x0;                // can not be changed after deploy\r\n     address public ethRateChanger = 0x0;         // can not be changed after deploy\r\n     address public tokenManager = 0x0;           // can be changed by token manager only\r\n     address public otherCurrenciesChecker = 0x0; // can not be changed after deploy\r\n\r\n     uint64 public icoStartedTime = 0;\r\n\r\n     MNTP public mntToken; \r\n\r\n     GoldmintUnsold public unsoldContract;\r\n\r\n     // Total amount of tokens sold during ICO\r\n     uint public icoTokensSold = 0;\r\n     // Total amount of tokens sent to GoldmintUnsold contract after ICO is finished\r\n     uint public icoTokensUnsold = 0;\r\n     // Total number of tokens that were issued by a scripts\r\n     uint public issuedExternallyTokens = 0;\r\n     // This is where FOUNDERS_REWARD will be allocated\r\n     address public foundersRewardsAccount = 0x0;\r\n\r\n     enum State{\r\n          Init,\r\n\r\n          ICORunning,\r\n          ICOPaused,\r\n\r\n          // Collected ETH is transferred to multisigs.\r\n          // Unsold tokens transferred to GoldmintUnsold contract.\r\n          ICOFinished,\r\n\r\n          // We start to refund if Soft Cap is not reached.\r\n          // Then each token holder should request a refund personally from his\r\n          // personal wallet.\r\n          //\r\n          // We will return ETHs only to the original address. If your address is changed\r\n          // or you have lost your keys -> you will not be able to get a refund.\r\n          // \r\n          // There is no any possibility to transfer tokens\r\n          // There is no any possibility to move back\r\n          Refunding,\r\n\r\n          // In this state we lock all MNT tokens forever.\r\n          // We are going to migrate MNTP -> MNT tokens during this stage. \r\n          // \r\n          // There is no any possibility to transfer tokens\r\n          // There is no any possibility to move back\r\n          Migrating\r\n     }\r\n     State public currentState = State.Init;\r\n\r\n// Modifiers:\r\n     modifier onlyCreator() { \r\n          require(msg.sender==creator); \r\n          _; \r\n     }\r\n     modifier onlyTokenManager() { \r\n          require(msg.sender==tokenManager); \r\n          _; \r\n     }\r\n     modifier onlyOtherCurrenciesChecker() { \r\n          require(msg.sender==otherCurrenciesChecker); \r\n          _; \r\n     }\r\n     modifier onlyEthSetter() { \r\n          require(msg.sender==ethRateChanger); \r\n          _; \r\n     }\r\n\r\n     modifier onlyInState(State state){ \r\n          require(state==currentState); \r\n          _; \r\n     }\r\n\r\n// Events:\r\n     event LogStateSwitch(State newState);\r\n     event LogBuy(address indexed owner, uint value);\r\n     event LogBurn(address indexed owner, uint value);\r\n     \r\n// Functions:\r\n     /// @dev Constructor\r\n     function Goldmint(\r\n          address _tokenManager,\r\n          address _ethRateChanger,\r\n          address _otherCurrenciesChecker,\r\n\r\n          address _mntTokenAddress,\r\n          address _unsoldContractAddress,\r\n          address _foundersVestingAddress)\r\n     {\r\n          creator = msg.sender;\r\n\r\n          tokenManager = _tokenManager;\r\n          ethRateChanger = _ethRateChanger;\r\n          lastUsdPerEthChangeDate = uint64(now);\r\n\r\n          otherCurrenciesChecker = _otherCurrenciesChecker; \r\n\r\n          mntToken = MNTP(_mntTokenAddress);\r\n          unsoldContract = GoldmintUnsold(_unsoldContractAddress);\r\n\r\n          // slight rename\r\n          foundersRewardsAccount = _foundersVestingAddress;\r\n\r\n          assert(multisigs.length==10);\r\n     }\r\n\r\n     function startICO() public onlyCreator onlyInState(State.Init) {\r\n          setState(State.ICORunning);\r\n          icoStartedTime = uint64(now);\r\n          mntToken.lockTransfer(true);\r\n          mntToken.issueTokens(foundersRewardsAccount, FOUNDERS_REWARD);\r\n     }\r\n\r\n     function pauseICO() public onlyCreator onlyInState(State.ICORunning) {\r\n          setState(State.ICOPaused);\r\n     }\r\n\r\n     function resumeICO() public onlyCreator onlyInState(State.ICOPaused) {\r\n          setState(State.ICORunning);\r\n     }\r\n\r\n     function startRefunding() public onlyCreator onlyInState(State.ICORunning) {\r\n          // only switch to this state if less than ICO_TOKEN_SOFT_CAP sold\r\n          require(icoTokensSold < ICO_TOKEN_SOFT_CAP);\r\n          setState(State.Refunding);\r\n\r\n          // in this state tokens still shouldn't be transferred\r\n          assert(mntToken.lockTransfers());\r\n     }\r\n\r\n     function startMigration() public onlyCreator onlyInState(State.ICOFinished) {\r\n          // there is no way back...\r\n          setState(State.Migrating);\r\n\r\n          // disable token transfers\r\n          mntToken.lockTransfer(true);\r\n     }\r\n\r\n     /// @dev This function can be called by creator at any time,\r\n     /// or by anyone if ICO has really finished.\r\n     function finishICO() public onlyInState(State.ICORunning) {\r\n          require(msg.sender == creator || isIcoFinished());\r\n          setState(State.ICOFinished);\r\n\r\n          // 1 - lock all transfers\r\n          mntToken.lockTransfer(false);\r\n\r\n          // 2 - move all unsold tokens to unsoldTokens contract\r\n          icoTokensUnsold = safeSub(ICO_TOKEN_SUPPLY_LIMIT,icoTokensSold);\r\n          if(icoTokensUnsold>0){\r\n               mntToken.issueTokens(unsoldContract,icoTokensUnsold);\r\n               unsoldContract.finishIco();\r\n          }\r\n\r\n          // 3 - send all ETH to multisigs\r\n          // we have N separate multisigs for extra security\r\n          uint sendThisAmount = (this.balance / 10);\r\n\r\n          // 3.1 - send to 9 multisigs\r\n          for(uint i=0; i<9; ++i){\r\n               address ms = multisigs[i];\r\n\r\n               if(this.balance>=sendThisAmount){\r\n                    ms.transfer(sendThisAmount);\r\n               }\r\n          }\r\n\r\n          // 3.2 - send everything left to 10th multisig\r\n          if(0!=this.balance){\r\n               address lastMs = multisigs[9];\r\n               lastMs.transfer(this.balance);\r\n          }\r\n     }\r\n\r\n     function setState(State _s) internal {\r\n          currentState = _s;\r\n          LogStateSwitch(_s);\r\n     }\r\n\r\n// Access methods:\r\n     function setTokenManager(address _new) public onlyTokenManager {\r\n          tokenManager = _new;\r\n     }\r\n\r\n     // TODO: stealing creator's key means stealing otherCurrenciesChecker key too!\r\n     /*\r\n     function setOtherCurrenciesChecker(address _new) public onlyCreator {\r\n          otherCurrenciesChecker = _new;\r\n     }\r\n     */\r\n\r\n     // These are used by frontend so we can not remove them\r\n     function getTokensIcoSold() constant public returns (uint){          \r\n          return icoTokensSold;       \r\n     }      \r\n     \r\n     function getTotalIcoTokens() constant public returns (uint){          \r\n          return ICO_TOKEN_SUPPLY_LIMIT;         \r\n     }       \r\n     \r\n     function getMntTokenBalance(address _of) constant public returns (uint){         \r\n          return mntToken.balanceOf(_of);         \r\n     }        \r\n\r\n     function getBlockLength()constant public returns (uint){          \r\n          return SINGLE_BLOCK_LEN;      \r\n     }\r\n\r\n     function getCurrentPrice()constant public returns (uint){\r\n          return getMntTokensPerEth(icoTokensSold);\r\n     }\r\n\r\n     function getTotalCollectedWei()constant public returns (uint){\r\n          return collectedWei;\r\n     }\r\n\r\n/////////////////////////////\r\n     function isIcoFinished() constant public returns(bool) {\r\n          return (icoStartedTime > 0)\r\n            && (now > (icoStartedTime + 30 days) || (icoTokensSold >= ICO_TOKEN_SUPPLY_LIMIT));\r\n     }\r\n\r\n     function getMntTokensPerEth(uint _tokensSold) public constant returns (uint){\r\n          // 10 buckets\r\n          uint priceIndex = (_tokensSold / 1 ether) / SINGLE_BLOCK_LEN;\r\n          assert(priceIndex>=0 && (priceIndex<=9));\r\n          \r\n          uint8[10] memory discountPercents = [20,15,10,8,6,4,2,0,0,0];\r\n\r\n          // We have to multiply by '1 ether' to avoid float truncations\r\n          // Example: ($7000 * 100) / 120 = $5833.33333\r\n          uint pricePer1000tokensUsd = \r\n               ((STD_PRICE_USD_PER_1000_TOKENS * 100) * 1 ether) / (100 + discountPercents[priceIndex]);\r\n\r\n          // Correct: 300000 / 5833.33333333 = 51.42857142\r\n          // We have to multiply by '1 ether' to avoid float truncations\r\n          uint mntPerEth = (usdPerEthCoinmarketcapRate * 1000 * 1 ether * 1 ether) / pricePer1000tokensUsd;\r\n          return mntPerEth;\r\n     }\r\n\r\n     function buyTokens(address _buyer) public payable onlyInState(State.ICORunning) {\r\n          require(msg.value!=0);\r\n\r\n          // The price is selected based on current sold tokens.\r\n          // Price can 'overlap'. For example:\r\n          //   1. if currently we sold 699950 tokens (the price is 10% discount)\r\n          //   2. buyer buys 1000 tokens\r\n          //   3. the price of all 1000 tokens would be with 10% discount!!!\r\n          uint newTokens = (msg.value * getMntTokensPerEth(icoTokensSold)) / 1 ether;\r\n\r\n          issueTokensInternal(_buyer,newTokens);\r\n\r\n          // Update this only when buying from ETH\r\n          ethInvestedBy[msg.sender] = safeAdd(ethInvestedBy[msg.sender], msg.value);\r\n\r\n          // This is total collected ETH\r\n          collectedWei = safeAdd(collectedWei, msg.value);\r\n     }\r\n\r\n     /// @dev This is called by other currency processors to issue new tokens \r\n     function issueTokensFromOtherCurrency(address _to, uint _weiCount) onlyInState(State.ICORunning) public onlyOtherCurrenciesChecker {\r\n          require(_weiCount!=0);\r\n\r\n          uint newTokens = (_weiCount * getMntTokensPerEth(icoTokensSold)) / 1 ether;\r\n          \r\n          require(newTokens<=MAX_SINGLE_ISSUED_FROM_OTHER_CURRENCIES);\r\n          require((issuedFromOtherCurrencies + newTokens)<=MAX_ISSUED_FROM_OTHER_CURRENCIES);\r\n\r\n          issueTokensInternal(_to,newTokens);\r\n\r\n          issuedFromOtherCurrencies = issuedFromOtherCurrencies + newTokens;\r\n     }\r\n\r\n     /// @dev This can be called to manually issue new tokens \r\n     /// from the bonus reward\r\n     function issueTokensExternal(address _to, uint _tokens) public onlyTokenManager {\r\n          // in 2 states\r\n          require((State.ICOFinished==currentState) || (State.ICORunning==currentState));\r\n          // can not issue more than BONUS_REWARD\r\n          require((issuedExternallyTokens + _tokens)<=BONUS_REWARD);\r\n\r\n          mntToken.issueTokens(_to,_tokens);\r\n\r\n          issuedExternallyTokens = issuedExternallyTokens + _tokens;\r\n     }\r\n\r\n     function issueTokensInternal(address _to, uint _tokens) internal {\r\n          require((icoTokensSold + _tokens)<=ICO_TOKEN_SUPPLY_LIMIT);\r\n\r\n          mntToken.issueTokens(_to,_tokens); \r\n          icoTokensSold+=_tokens;\r\n\r\n          LogBuy(_to,_tokens);\r\n     }\r\n\r\n     // anyone can call this and get his money back\r\n     function getMyRefund() public onlyInState(State.Refunding) {\r\n          address sender = msg.sender;\r\n          uint ethValue = ethInvestedBy[sender];\r\n\r\n          require(ethValue > 0);\r\n\r\n          // 1 - burn tokens\r\n          ethInvestedBy[sender] = 0;\r\n          mntToken.burnTokens(sender, mntToken.balanceOf(sender));\r\n\r\n          // 2 - send money back\r\n          sender.transfer(ethValue);\r\n     }\r\n\r\n     function setUsdPerEthRate(uint _usdPerEthRate) public onlyEthSetter {\r\n          // 1 - check\r\n          require((_usdPerEthRate>=100) && (_usdPerEthRate<=700));\r\n          uint64 hoursPassed = lastUsdPerEthChangeDate + 1 hours;  \r\n          require(uint(now) >= hoursPassed);\r\n\r\n          // 2 - update\r\n          usdPerEthCoinmarketcapRate = _usdPerEthRate;\r\n          lastUsdPerEthChangeDate = uint64(now);\r\n     }\r\n\r\n     // Default fallback function\r\n     function() payable {\r\n          // buyTokens -> issueTokensInternal\r\n          buyTokens(msg.sender);\r\n     }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentState\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startMigration\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenManager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_ISSUED_FROM_OTHER_CURRENCIES\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pauseICO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startRefunding\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"issuedFromOtherCurrencies\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getMyRefund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"unsoldContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ICO_TOKEN_SOFT_CAP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_weiCount\",\"type\":\"uint256\"}],\"name\":\"issueTokensFromOtherCurrency\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTokensIcoSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isIcoFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_new\",\"type\":\"address\"}],\"name\":\"setTokenManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mntToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startICO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_usdPerEthRate\",\"type\":\"uint256\"}],\"name\":\"setUsdPerEthRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoTokensUnsold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoStartedTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ICO_TOKEN_SUPPLY_LIMIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"resumeICO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoTokensSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"otherCurrenciesChecker\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalCollectedWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastUsdPerEthChangeDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethRateChanger\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"issuedExternallyTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_of\",\"type\":\"address\"}],\"name\":\"getMntTokenBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishICO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"usdPerEthCoinmarketcapRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"multisigs\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"issueTokensExternal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBlockLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BONUS_REWARD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokensSold\",\"type\":\"uint256\"}],\"name\":\"getMntTokensPerEth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_buyer\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_SINGLE_ISSUED_FROM_OTHER_CURRENCIES\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FOUNDERS_REWARD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"foundersRewardsAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalIcoTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tokenManager\",\"type\":\"address\"},{\"name\":\"_ethRateChanger\",\"type\":\"address\"},{\"name\":\"_otherCurrenciesChecker\",\"type\":\"address\"},{\"name\":\"_mntTokenAddress\",\"type\":\"address\"},{\"name\":\"_unsoldContractAddress\",\"type\":\"address\"},{\"name\":\"_foundersVestingAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newState\",\"type\":\"uint8\"}],\"name\":\"LogStateSwitch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"LogBuy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"LogBurn\",\"type\":\"event\"}]","ContractName":"Goldmint","CompilerVersion":"v0.4.16+commit.d7661dd9","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000017b8935ADd16b7b041188df181048E068c50777200000000000000000000000076761b1c37aEE56f88ad14F5111a034761079dFD000000000000000000000000CFC09B45b30CFe7b75f2353A95Fa1d2a11A1090a00000000000000000000000083cee9e086a77e492ee0bb93c2b0437ad6fdeccc000000000000000000000000e63ddba89e0615c40803823567643d0a10c31adb000000000000000000000000ceb4cd1ce2b6809dff06b70a8455990ec040dd41","Library":"","SwarmSource":"bzzr://0b511c90451c42deb7dca5b2e41f6ccb1d15f15e835b82af42851afcf9dcd7ac"}]}