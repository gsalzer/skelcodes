{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13;\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner {\r\n    if (newOwner != address(0)) {\r\n      owner = newOwner;\r\n    }\r\n  }\r\n\r\n}\r\n\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev modifier to allow actions only when the contract IS paused\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev modifier to allow actions only when the contract IS NOT paused\r\n   */\r\n  modifier whenPaused {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused returns (bool) {\r\n    paused = true;\r\n    Pause();\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused returns (bool) {\r\n    paused = false;\r\n    Unpause();\r\n    return true;\r\n  }\r\n}\r\n\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) constant returns (uint256);\r\n  function transfer(address to, uint256 value) returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) returns (bool) {\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of. \r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) returns (bool);\r\n  function approve(address spender, uint256 value) returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amout of tokens to be transfered\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\r\n    var _allowance = allowed[_from][msg.sender];\r\n\r\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n    // require (_value <= _allowance);\r\n\r\n    balances[_to] = balances[_to].add(_value);\r\n    balances[_from] = balances[_from].sub(_value);\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) returns (bool) {\r\n\r\n    // To change the approve amount you first have to reduce the addresses`\r\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n    //  already 0 to mitigate the race condition described here:\r\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifing the amount of tokens still avaible for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n}\r\n\r\ncontract CATContract is Ownable, Pausable {\r\n\tCATServicePaymentCollector public catPaymentCollector;\r\n\tuint public contractFee = 0.1 * 10**18; // Base fee is 0.1 CAT\r\n\t// Limits all transactions to a small amount to avoid financial risk with early code\r\n\tuint public ethPerTransactionLimit = 0.1 ether;\r\n\tstring public contractName;\r\n\tstring public versionIdent = \"0.1.0\";\r\n\r\n\tevent ContractDeployed(address indexed byWho);\r\n\tevent ContractFeeChanged(uint oldFee, uint newFee);\r\n\tevent ContractEthLimitChanged(uint oldLimit, uint newLimit);\r\n\r\n\tevent CATWithdrawn(uint numOfTokens);\r\n\r\n\tmodifier blockCatEntryPoint() {\r\n\t\t// Collect payment\r\n\t\tcatPaymentCollector.collectPayment(msg.sender, contractFee);\r\n\t\tContractDeployed(msg.sender);\r\n\t\t_;\r\n\t}\r\n\r\n\tmodifier limitTransactionValue() {\r\n\t\trequire(msg.value <= ethPerTransactionLimit);\r\n\t\t_;\r\n\t}\r\n\r\n\tfunction CATContract(address _catPaymentCollector, string _contractName) {\r\n\t\tcatPaymentCollector = CATServicePaymentCollector(_catPaymentCollector);\r\n\t\tcontractName = _contractName;\r\n\t}\r\n\r\n\t// Administrative functions\r\n\r\n\tfunction changeContractFee(uint _newFee) external onlyOwner {\r\n\t\t// _newFee is assumed to be given in full CAT precision (18 decimals)\r\n\t\tContractFeeChanged(contractFee, _newFee);\r\n\t\tcontractFee = _newFee;\r\n\t}\r\n\r\n\tfunction changeEtherTxLimit(uint _newLimit) external onlyOwner {\r\n\t\tContractEthLimitChanged(ethPerTransactionLimit, _newLimit);\r\n\t\tethPerTransactionLimit = _newLimit;\r\n\t}\r\n\r\n\tfunction withdrawCAT() external onlyOwner {\r\n\t\tStandardToken CAT = catPaymentCollector.CAT();\r\n\t\tuint ourTokens = CAT.balanceOf(this);\r\n\t\tCAT.transfer(owner, ourTokens);\r\n\t\tCATWithdrawn(ourTokens);\r\n\t}\r\n}\r\n\r\ncontract CATServicePaymentCollector is Ownable {\r\n\tStandardToken public CAT;\r\n\taddress public paymentDestination;\r\n\tuint public totalDeployments = 0;\r\n\tmapping(address => bool) public registeredServices;\r\n\tmapping(address => uint) public serviceDeployCount;\r\n\tmapping(address => uint) public userDeployCount;\r\n\r\n\tevent CATPayment(address indexed service, address indexed payer, uint price);\r\n\tevent EnableService(address indexed service);\r\n\tevent DisableService(address indexed service);\r\n\tevent ChangedPaymentDestination(address indexed oldDestination, address indexed newDestination);\r\n\r\n\tevent CATWithdrawn(uint numOfTokens);\r\n\t\r\n\tfunction CATServicePaymentCollector(address _CAT) {\r\n\t\tCAT = StandardToken(_CAT);\r\n\t\tpaymentDestination = msg.sender;\r\n\t}\r\n\t\r\n\tfunction enableService(address _service) public onlyOwner {\r\n\t\tregisteredServices[_service] = true;\r\n\t\tEnableService(_service);\r\n\t}\r\n\t\r\n\tfunction disableService(address _service) public onlyOwner {\r\n\t\tregisteredServices[_service] = false;\r\n\t\tDisableService(_service);\r\n\t}\r\n\t\r\n\tfunction collectPayment(address _fromWho, uint _payment) public {\r\n\t\trequire(registeredServices[msg.sender] == true);\r\n\t\t\r\n\t\tserviceDeployCount[msg.sender]++;\r\n\t\tuserDeployCount[_fromWho]++;\r\n\t\ttotalDeployments++;\r\n\t\t\r\n\t\tCAT.transferFrom(_fromWho, paymentDestination, _payment);\r\n\t\tCATPayment(_fromWho, msg.sender, _payment);\r\n\t}\r\n\r\n\t// Administrative functions\r\n\r\n\tfunction changePaymentDestination(address _newPaymentDest) external onlyOwner {\r\n\t\tChangedPaymentDestination(paymentDestination, _newPaymentDest);\r\n\t\tpaymentDestination = _newPaymentDest;\r\n\t}\r\n\r\n\tfunction withdrawCAT() external onlyOwner {\r\n\t\tuint ourTokens = CAT.balanceOf(this);\r\n\t\tCAT.transfer(owner, ourTokens);\r\n\t\tCATWithdrawn(ourTokens);\r\n\t}\r\n}\r\n\r\ncontract SecurityDeposit is CATContract {\r\n    uint public depositorLimit = 100;\r\n    uint public instanceId = 1;\r\n    mapping(uint => SecurityInstance) public instances;\r\n    \r\n    event SecurityDepositCreated(uint indexed id, address indexed instOwner, string ownerNote, string depositPurpose, uint depositAmount);\r\n    event Deposit(uint indexed id, address indexed depositor, uint depositAmount, string note);\r\n    event DepositClaimed(uint indexed id, address indexed fromWho, uint amountClaimed);\r\n    event RefundSent(uint indexed id, address indexed toWho, uint amountRefunded);\r\n\r\n    event DepositorLimitChanged(uint oldLimit, uint newLimit);\r\n\r\n    enum DepositorState {None, Active, Claimed, Refunded}\r\n    \r\n    struct SecurityInstance {\r\n        uint instId;\r\n        address instOwner;\r\n        string ownerNote;\r\n        string depositPurpose;\r\n        uint depositAmount;\r\n        mapping(address => DepositorState) depositorState;\r\n        mapping(address => string) depositorNote;\r\n        address[] depositors;\r\n    }\r\n    \r\n    modifier onlyInstanceOwner(uint _instId) {\r\n        require(instances[_instId].instOwner == msg.sender);\r\n        _;\r\n    }\r\n    \r\n    modifier instanceExists(uint _instId) {\r\n        require(instances[_instId].instId == _instId);\r\n        _;\r\n    }\r\n\r\n    // Chain constructor to pass along CAT payment address, and contract name\r\n    function SecurityDeposit(address _catPaymentCollector) CATContract(_catPaymentCollector, \"Security Deposit\") {}\r\n    \r\n    function createNewSecurityDeposit(string _ownerNote, string _depositPurpose, uint _depositAmount) external blockCatEntryPoint whenNotPaused returns (uint currentId) {\r\n        // Deposit can't be greater than maximum allowed for each user\r\n        require(_depositAmount <= ethPerTransactionLimit);\r\n        // Cannot have a 0 deposit security deposit\r\n        require(_depositAmount > 0);\r\n\r\n        currentId = instanceId;\r\n        address instanceOwner = msg.sender;\r\n        uint depositAmountETH = _depositAmount;\r\n        SecurityInstance storage curInst = instances[currentId];\r\n\r\n        curInst.instId = currentId;\r\n        curInst.instOwner = instanceOwner;\r\n        curInst.ownerNote = _ownerNote;\r\n        curInst.depositPurpose = _depositPurpose;\r\n        curInst.depositAmount = depositAmountETH;\r\n        \r\n        SecurityDepositCreated(currentId, instanceOwner, _ownerNote, _depositPurpose, depositAmountETH);\r\n        instanceId++;\r\n    }\r\n    \r\n    function deposit(uint _instId, string _note) external payable instanceExists(_instId) limitTransactionValue whenNotPaused {\r\n        SecurityInstance storage curInst = instances[_instId];\r\n        // Must deposit the right amount\r\n        require(curInst.depositAmount == msg.value);\r\n        // Cannot have more depositors than the limit\r\n        require(curInst.depositors.length < depositorLimit);\r\n        // Cannot double-deposit\r\n        require(curInst.depositorState[msg.sender] == DepositorState.None);\r\n\r\n        curInst.depositorState[msg.sender] = DepositorState.Active;\r\n        curInst.depositorNote[msg.sender] = _note;\r\n        curInst.depositors.push(msg.sender);\r\n        \r\n        Deposit(curInst.instId, msg.sender, msg.value, _note);\r\n    }\r\n    \r\n    function claim(uint _instId, address _whoToClaim) public onlyInstanceOwner(_instId) instanceExists(_instId) whenNotPaused returns (bool) {\r\n        SecurityInstance storage curInst = instances[_instId];\r\n        \r\n        // Can only call if the state is active\r\n        if(curInst.depositorState[_whoToClaim] != DepositorState.Active) {\r\n            return false;\r\n        }\r\n\r\n        curInst.depositorState[_whoToClaim] = DepositorState.Claimed;\r\n        curInst.instOwner.transfer(curInst.depositAmount);\r\n        DepositClaimed(_instId, _whoToClaim, curInst.depositAmount);\r\n        \r\n        return true;\r\n    }\r\n    \r\n    function refund(uint _instId, address _whoToRefund) public onlyInstanceOwner(_instId) instanceExists(_instId) whenNotPaused returns (bool) {\r\n        SecurityInstance storage curInst = instances[_instId];\r\n        \r\n        // Can only call if state is active\r\n        if(curInst.depositorState[_whoToRefund] != DepositorState.Active) {\r\n            return false;\r\n        }\r\n\r\n        curInst.depositorState[_whoToRefund] = DepositorState.Refunded;\r\n        _whoToRefund.transfer(curInst.depositAmount);\r\n        RefundSent(_instId, _whoToRefund, curInst.depositAmount);\r\n        \r\n        return true;\r\n    }\r\n    \r\n    function claimFromSeveral(uint _instId, address[] _toClaim) external onlyInstanceOwner(_instId) instanceExists(_instId) whenNotPaused {\r\n        for(uint i = 0; i < _toClaim.length; i++) {\r\n            claim(_instId, _toClaim[i]);\r\n        }\r\n    }\r\n    \r\n    function refundFromSeveral(uint _instId, address[] _toRefund) external onlyInstanceOwner(_instId) instanceExists(_instId) whenNotPaused {\r\n        for(uint i = 0; i < _toRefund.length; i++) {\r\n            refund(_instId, _toRefund[i]);\r\n        }\r\n    }\r\n    \r\n    function claimAll(uint _instId) external onlyInstanceOwner(_instId) instanceExists(_instId) whenNotPaused {\r\n        SecurityInstance storage curInst = instances[_instId];\r\n        \r\n        for(uint i = 0; i < curInst.depositors.length; i++) {\r\n            claim(_instId, curInst.depositors[i]);\r\n        }\r\n    }\r\n    \r\n    function refundAll(uint _instId) external onlyInstanceOwner(_instId) instanceExists(_instId) whenNotPaused {\r\n        SecurityInstance storage curInst = instances[_instId];\r\n        \r\n        for(uint i = 0; i < curInst.depositors.length; i++) {\r\n            refund(_instId, curInst.depositors[i]);\r\n        }\r\n    }\r\n\r\n    function changeDepositorLimit(uint _newLimit) external onlyOwner {\r\n        DepositorLimitChanged(depositorLimit, _newLimit);\r\n        depositorLimit = _newLimit;\r\n    }\r\n    \r\n    // Information functions\r\n    \r\n    function getInstanceMetadata(uint _instId) constant external returns (address instOwner, string ownerNote, string depositPurpose, uint depositAmount) {\r\n        instOwner = instances[_instId].instOwner;\r\n        ownerNote = instances[_instId].ownerNote;\r\n        depositPurpose = instances[_instId].depositPurpose;\r\n        depositAmount = instances[_instId].depositAmount;\r\n    }\r\n    \r\n    function getAllDepositors(uint _instId) constant external returns (address[]) {\r\n        return instances[_instId].depositors;\r\n    }\r\n    \r\n    function checkInfo(uint _instId, address _depositor) constant external returns (DepositorState depositorState, string note) {\r\n        depositorState = instances[_instId].depositorState[_depositor];\r\n        note = instances[_instId].depositorNote[_depositor];\r\n    }\r\n\r\n    // Metrics\r\n\r\n    function getDepositInstanceCount() constant external returns (uint) {\r\n        return instanceId - 1; // ID is 1-indexed\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"ethPerTransactionLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"instanceId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_instId\",\"type\":\"uint256\"}],\"name\":\"getAllDepositors\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"catPaymentCollector\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"versionIdent\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_instId\",\"type\":\"uint256\"}],\"name\":\"getInstanceMetadata\",\"outputs\":[{\"name\":\"instOwner\",\"type\":\"address\"},{\"name\":\"ownerNote\",\"type\":\"string\"},{\"name\":\"depositPurpose\",\"type\":\"string\"},{\"name\":\"depositAmount\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_instId\",\"type\":\"uint256\"}],\"name\":\"claimAll\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"depositorLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractName\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_instId\",\"type\":\"uint256\"},{\"name\":\"_whoToRefund\",\"type\":\"address\"}],\"name\":\"refund\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newFee\",\"type\":\"uint256\"}],\"name\":\"changeContractFee\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ownerNote\",\"type\":\"string\"},{\"name\":\"_depositPurpose\",\"type\":\"string\"},{\"name\":\"_depositAmount\",\"type\":\"uint256\"}],\"name\":\"createNewSecurityDeposit\",\"outputs\":[{\"name\":\"currentId\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"instances\",\"outputs\":[{\"name\":\"instId\",\"type\":\"uint256\"},{\"name\":\"instOwner\",\"type\":\"address\"},{\"name\":\"ownerNote\",\"type\":\"string\"},{\"name\":\"depositPurpose\",\"type\":\"string\"},{\"name\":\"depositAmount\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_instId\",\"type\":\"uint256\"},{\"name\":\"_depositor\",\"type\":\"address\"}],\"name\":\"checkInfo\",\"outputs\":[{\"name\":\"depositorState\",\"type\":\"uint8\"},{\"name\":\"note\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDepositInstanceCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newLimit\",\"type\":\"uint256\"}],\"name\":\"changeDepositorLimit\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawCAT\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_instId\",\"type\":\"uint256\"},{\"name\":\"_toClaim\",\"type\":\"address[]\"}],\"name\":\"claimFromSeveral\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_instId\",\"type\":\"uint256\"},{\"name\":\"_whoToClaim\",\"type\":\"address\"}],\"name\":\"claim\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newLimit\",\"type\":\"uint256\"}],\"name\":\"changeEtherTxLimit\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_instId\",\"type\":\"uint256\"}],\"name\":\"refundAll\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_instId\",\"type\":\"uint256\"},{\"name\":\"_note\",\"type\":\"string\"}],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_instId\",\"type\":\"uint256\"},{\"name\":\"_toRefund\",\"type\":\"address[]\"}],\"name\":\"refundFromSeveral\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_catPaymentCollector\",\"type\":\"address\"}],\"payable\":false,\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"instOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ownerNote\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"depositPurpose\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"depositAmount\",\"type\":\"uint256\"}],\"name\":\"SecurityDepositCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"depositAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"note\",\"type\":\"string\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"fromWho\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amountClaimed\",\"type\":\"uint256\"}],\"name\":\"DepositClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"toWho\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amountRefunded\",\"type\":\"uint256\"}],\"name\":\"RefundSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldLimit\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newLimit\",\"type\":\"uint256\"}],\"name\":\"DepositorLimitChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"byWho\",\"type\":\"address\"}],\"name\":\"ContractDeployed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldFee\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"ContractFeeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldLimit\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newLimit\",\"type\":\"uint256\"}],\"name\":\"ContractEthLimitChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"numOfTokens\",\"type\":\"uint256\"}],\"name\":\"CATWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"}]","ContractName":"SecurityDeposit","CompilerVersion":"v0.4.13+commit.fb4cb1a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000e5A89EB6B03d8B176d0ECa7cf78D58D5fF499aE4","Library":"","SwarmSource":"bzzr://cd9d964ceb62c61ccf5e940e91800cc65805be6185eb55cdf3b1c8c61a15a237"}]}