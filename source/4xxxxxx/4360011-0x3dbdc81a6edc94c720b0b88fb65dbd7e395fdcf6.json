{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\nCopyright (c) 2015-2016 Oraclize SRL\r\nCopyright (c) 2016-2017 Oraclize LTD\r\n*/\r\n\r\n/*\r\nOraclize Connector v1.2.0\r\n*/\r\n\r\n// 'compressed' alternative, where all modifiers have been changed to FUNCTIONS\r\n// which is cheaper for deployment, potentially cheaper execution\r\n\r\npragma solidity ^0.4.11;\r\n\r\ncontract Oraclize {\r\n    mapping (address => uint) reqc;\r\n\r\n    mapping (address => byte) public cbAddresses;\r\n\r\n    mapping (address => bool) public offchainPayment;\r\n\r\n    event Log1(address sender, bytes32 cid, uint timestamp, string datasource, string arg, uint gaslimit, byte proofType, uint gasPrice);\r\n    event Log2(address sender, bytes32 cid, uint timestamp, string datasource, string arg1, string arg2, uint gaslimit, byte proofType, uint gasPrice);\r\n    event LogN(address sender, bytes32 cid, uint timestamp, string datasource, bytes args, uint gaslimit, byte proofType, uint gasPrice);\r\n    event Log1_fnc(address sender, bytes32 cid, uint timestamp, string datasource, string arg, function() external callback, uint gaslimit, byte proofType, uint gasPrice);\r\n    event Log2_fnc(address sender, bytes32 cid, uint timestamp, string datasource, string arg1, string arg2, function() external callback, uint gaslimit, byte proofType, uint gasPrice);\r\n    event LogN_fnc(address sender, bytes32 cid, uint timestamp, string datasource, bytes args, function() external callback, uint gaslimit, byte proofType, uint gasPrice);\r\n\r\n    event Emit_OffchainPaymentFlag(address indexed idx_sender, address sender, bool indexed idx_flag, bool flag);\r\n\r\n    address owner;\r\n    address paymentFlagger;\r\n\r\n    function changeAdmin(address _newAdmin)\r\n    external\r\n    {\r\n        onlyadmin();\r\n        owner = _newAdmin;\r\n    }\r\n\r\n    function changePaymentFlagger(address _newFlagger)\r\n    external\r\n    {\r\n        onlyadmin();\r\n        paymentFlagger = _newFlagger;\r\n    }\r\n\r\n    function addCbAddress(address newCbAddress, byte addressType)\r\n    external\r\n    {\r\n        onlyadmin();\r\n        //bytes memory nil = '';\r\n        addCbAddress(newCbAddress, addressType, hex'');\r\n    }\r\n\r\n    // proof is currently a placeholder for when associated proof for addressType is added\r\n    function addCbAddress(address newCbAddress, byte addressType, bytes proof)\r\n    public\r\n    {\r\n        onlyadmin();\r\n        cbAddresses[newCbAddress] = addressType;\r\n    }\r\n\r\n    function removeCbAddress(address newCbAddress)\r\n    external\r\n    {\r\n        onlyadmin();\r\n        delete cbAddresses[newCbAddress];\r\n    }\r\n\r\n    function cbAddress()\r\n    constant\r\n    returns (address _cbAddress)\r\n    {\r\n        if (cbAddresses[tx.origin] != 0)\r\n            _cbAddress = tx.origin;\r\n    }\r\n\r\n    function addDSource(string dsname, uint multiplier)\r\n    external\r\n    {\r\n        addDSource(dsname, 0x00, multiplier);\r\n    }\r\n\r\n    function addDSource(string dsname, byte proofType, uint multiplier)\r\n    public\r\n    {\r\n        onlyadmin();\r\n        bytes32 dsname_hash = sha3(dsname, proofType);\r\n        dsources[dsources.length++] = dsname_hash;\r\n        price_multiplier[dsname_hash] = multiplier;\r\n    }\r\n\r\n    // Utilized by bridge\r\n    function multiAddDSource(bytes32[] dsHash, uint256[] multiplier)\r\n    external\r\n    {\r\n        onlyadmin();\r\n        // dsHash -> sha3(DATASOURCE_NAME, PROOF_TYPE);\r\n        for (uint i=0; i<dsHash.length; i++) {\r\n            dsources[dsources.length++] = dsHash[i];\r\n            price_multiplier[dsHash[i]] = multiplier[i];\r\n        }\r\n    }\r\n\r\n    function multisetProofType(uint[] _proofType, address[] _addr)\r\n    external\r\n    {\r\n        onlyadmin();\r\n        for (uint i=0; i<_addr.length; i++) addr_proofType[_addr[i]] = byte(_proofType[i]);\r\n    }\r\n\r\n    function multisetCustomGasPrice(uint[] _gasPrice, address[] _addr)\r\n    external\r\n    {\r\n        onlyadmin();\r\n        for (uint i=0; i<_addr.length; i++) addr_gasPrice[_addr[i]] = _gasPrice[i];\r\n    }\r\n\r\n    uint gasprice = 20000000000;\r\n\r\n    function setGasPrice(uint newgasprice)\r\n    external\r\n    {\r\n        onlyadmin();\r\n        gasprice = newgasprice;\r\n    }\r\n\r\n    function setBasePrice(uint new_baseprice)\r\n    external\r\n    { //0.001 usd in ether\r\n        onlyadmin();\r\n        baseprice = new_baseprice;\r\n        for (uint i=0; i<dsources.length; i++) price[dsources[i]] = new_baseprice*price_multiplier[dsources[i]];\r\n    }\r\n\r\n    function setBasePrice(uint new_baseprice, bytes proofID)\r\n    external\r\n    { //0.001 usd in ether\r\n        onlyadmin();\r\n        baseprice = new_baseprice;\r\n        for (uint i=0; i<dsources.length; i++) price[dsources[i]] = new_baseprice*price_multiplier[dsources[i]];\r\n    }\r\n\r\n    function setOffchainPayment(address _addr, bool _flag)\r\n    external\r\n    {\r\n      if (msg.sender != paymentFlagger) throw;\r\n      offchainPayment[_addr] = _flag;\r\n      Emit_OffchainPaymentFlag(_addr, _addr, _flag, _flag);\r\n    }\r\n\r\n    function withdrawFunds(address _addr)\r\n    external\r\n    {\r\n        onlyadmin();\r\n        _addr.send(this.balance);\r\n    }\r\n\r\n    // unnecessary?\r\n    //function() {}\r\n\r\n    function Oraclize() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    // Pesudo-modifiers\r\n\r\n    function onlyadmin()\r\n    private {\r\n        if (msg.sender != owner) throw;\r\n    }\r\n\r\n    function costs(string datasource, uint gaslimit)\r\n    private\r\n    returns (uint price) {\r\n        price = getPrice(datasource, gaslimit, msg.sender);\r\n\r\n        if (msg.value >= price){\r\n            uint diff = msg.value - price;\r\n            if (diff > 0) {\r\n                // added for correct query cost to be returned\r\n                if(!msg.sender.send(diff)) {\r\n                    throw;\r\n                }\r\n            }\r\n        } else throw;\r\n    }\r\n\r\n    mapping (address => byte) addr_proofType;\r\n    mapping (address => uint) addr_gasPrice;\r\n    uint public baseprice;\r\n    mapping (bytes32 => uint) price;\r\n    mapping (bytes32 => uint) price_multiplier;\r\n    bytes32[] dsources;\r\n\r\n    bytes32[] public randomDS_sessionPubKeysHash;\r\n\r\n    function randomDS_updateSessionPubKeysHash(bytes32[] _newSessionPubKeysHash)\r\n    external\r\n    {\r\n        onlyadmin();\r\n        randomDS_sessionPubKeysHash.length = 0;\r\n        for (uint i=0; i<_newSessionPubKeysHash.length; i++) randomDS_sessionPubKeysHash.push(_newSessionPubKeysHash[i]);\r\n    }\r\n\r\n    function randomDS_getSessionPubKeyHash()\r\n    external\r\n    constant\r\n    returns (bytes32) {\r\n        uint i = uint(sha3(reqc[msg.sender]))%randomDS_sessionPubKeysHash.length;\r\n        return randomDS_sessionPubKeysHash[i];\r\n    }\r\n\r\n    function setProofType(byte _proofType)\r\n    external\r\n    {\r\n        addr_proofType[msg.sender] = _proofType;\r\n    }\r\n\r\n    function setCustomGasPrice(uint _gasPrice)\r\n    external\r\n    {\r\n        addr_gasPrice[msg.sender] = _gasPrice;\r\n    }\r\n\r\n    function getPrice(string _datasource)\r\n    public\r\n    returns (uint _dsprice)\r\n    {\r\n        return getPrice(_datasource, msg.sender);\r\n    }\r\n\r\n    function getPrice(string _datasource, uint _gaslimit)\r\n    public\r\n    returns (uint _dsprice)\r\n    {\r\n        return getPrice(_datasource, _gaslimit, msg.sender);\r\n    }\r\n\r\n    function getPrice(string _datasource, address _addr)\r\n    private\r\n    returns (uint _dsprice)\r\n    {\r\n        return getPrice(_datasource, 200000, _addr);\r\n    }\r\n\r\n    function getPrice(string _datasource, uint _gaslimit, address _addr)\r\n    private\r\n    returns (uint _dsprice)\r\n    {\r\n        uint gasprice_ = addr_gasPrice[_addr];\r\n        if (\r\n                (offchainPayment[_addr])\r\n            ||(\r\n                (_gaslimit <= 200000)&&\r\n                (reqc[_addr] == 0)&&\r\n                (gasprice_ <= gasprice)&&\r\n                (tx.origin != cbAddress())\r\n            )\r\n        ) return 0;\r\n\r\n        if (gasprice_ == 0) gasprice_ = gasprice;\r\n        _dsprice = price[sha3(_datasource, addr_proofType[_addr])];\r\n        _dsprice += _gaslimit*gasprice_;\r\n        return _dsprice;\r\n    }\r\n\r\n    function getCodeSize(address _addr)\r\n    private\r\n    constant\r\n    returns(uint _size)\r\n    {\r\n        assembly {\r\n            _size := extcodesize(_addr)\r\n        }\r\n    }\r\n\r\n    function query(string _datasource, string _arg)\r\n    payable\r\n    external\r\n    returns (bytes32 _id)\r\n    {\r\n        return query1(0, _datasource, _arg, 200000);\r\n    }\r\n\r\n    function query1(string _datasource, string _arg)\r\n    payable\r\n    external\r\n    returns (bytes32 _id)\r\n    {\r\n        return query1(0, _datasource, _arg, 200000);\r\n    }\r\n\r\n    function query2(string _datasource, string _arg1, string _arg2)\r\n    payable\r\n    external\r\n    returns (bytes32 _id)\r\n    {\r\n        return query2(0, _datasource, _arg1, _arg2, 200000);\r\n    }\r\n\r\n    function queryN(string _datasource, bytes _args)\r\n    payable\r\n    external\r\n    returns (bytes32 _id)\r\n    {\r\n        return queryN(0, _datasource, _args, 200000);\r\n    }\r\n\r\n    function query(uint _timestamp, string _datasource, string _arg)\r\n    payable\r\n    external\r\n    returns (bytes32 _id)\r\n    {\r\n        return query1(_timestamp, _datasource, _arg, 200000);\r\n    }\r\n\r\n    function query1(uint _timestamp, string _datasource, string _arg)\r\n    payable\r\n    external\r\n    returns (bytes32 _id)\r\n    {\r\n        return query1(_timestamp, _datasource, _arg, 200000);\r\n    }\r\n\r\n    function query2(uint _timestamp, string _datasource, string _arg1, string _arg2)\r\n    payable\r\n    external\r\n    returns (bytes32 _id)\r\n    {\r\n        return query2(_timestamp, _datasource, _arg1, _arg2, 200000);\r\n    }\r\n\r\n    function queryN(uint _timestamp, string _datasource, bytes _args)\r\n    payable\r\n    external\r\n    returns (bytes32 _id)\r\n    {\r\n        return queryN(_timestamp, _datasource, _args, 200000);\r\n    }\r\n\r\n/*  Needless?\r\n    function query(uint _timestamp, string _datasource, string _arg, uint _gaslimit)\r\n    payable\r\n    external\r\n    returns (bytes32 _id)\r\n    {\r\n        return query1(_timestamp, _datasource, _arg, _gaslimit);\r\n    }\r\n*/\r\n    function query_withGasLimit(uint _timestamp, string _datasource, string _arg, uint _gaslimit)\r\n    payable\r\n    external\r\n    returns (bytes32 _id)\r\n    {\r\n        return query1(_timestamp, _datasource, _arg, _gaslimit);\r\n    }\r\n\r\n    function query1_withGasLimit(uint _timestamp, string _datasource, string _arg, uint _gaslimit)\r\n    payable\r\n    external\r\n    returns (bytes32 _id)\r\n    {\r\n        return query1(_timestamp, _datasource, _arg, _gaslimit);\r\n    }\r\n\r\n    function query2_withGasLimit(uint _timestamp, string _datasource, string _arg1, string _arg2, uint _gaslimit)\r\n    payable\r\n    external\r\n    returns (bytes32 _id)\r\n    {\r\n        return query2(_timestamp, _datasource, _arg1, _arg2, _gaslimit);\r\n    }\r\n\r\n    function queryN_withGasLimit(uint _timestamp, string _datasource, bytes _args, uint _gaslimit)\r\n    payable\r\n    external\r\n    returns (bytes32 _id)\r\n    {\r\n        return queryN(_timestamp, _datasource, _args, _gaslimit);\r\n    }\r\n\r\n    function query1(uint _timestamp, string _datasource, string _arg, uint _gaslimit)\r\n    payable\r\n    public\r\n    returns (bytes32 _id)\r\n    {\r\n        costs(_datasource, _gaslimit);\r\n    \tif ((_timestamp > now+3600*24*60)||(_gaslimit > block.gaslimit)) throw;\r\n\r\n        _id = sha3(this, msg.sender, reqc[msg.sender]);\r\n        reqc[msg.sender]++;\r\n        Log1(msg.sender, _id, _timestamp, _datasource, _arg, _gaslimit, addr_proofType[msg.sender], addr_gasPrice[msg.sender]);\r\n        return _id;\r\n    }\r\n\r\n    function query2(uint _timestamp, string _datasource, string _arg1, string _arg2, uint _gaslimit)\r\n    payable\r\n    public\r\n    returns (bytes32 _id)\r\n    {\r\n        costs(_datasource, _gaslimit);\r\n    \tif ((_timestamp > now+3600*24*60)||(_gaslimit > block.gaslimit)) throw;\r\n\r\n        _id = sha3(this, msg.sender, reqc[msg.sender]);\r\n        reqc[msg.sender]++;\r\n        Log2(msg.sender, _id, _timestamp, _datasource, _arg1, _arg2, _gaslimit, addr_proofType[msg.sender], addr_gasPrice[msg.sender]);\r\n        return _id;\r\n    }\r\n\r\n    function queryN(uint _timestamp, string _datasource, bytes _args, uint _gaslimit)\r\n    payable\r\n    public\r\n    returns (bytes32 _id)\r\n    {\r\n        costs(_datasource, _gaslimit);\r\n    \tif ((_timestamp > now+3600*24*60)||(_gaslimit > block.gaslimit)) throw;\r\n\r\n        _id = sha3(this, msg.sender, reqc[msg.sender]);\r\n        reqc[msg.sender]++;\r\n        LogN(msg.sender, _id, _timestamp, _datasource, _args, _gaslimit, addr_proofType[msg.sender], addr_gasPrice[msg.sender]);\r\n        return _id;\r\n    }\r\n\r\n    function query1_fnc(uint _timestamp, string _datasource, string _arg, function() external _fnc, uint _gaslimit)\r\n    payable\r\n    public\r\n    returns (bytes32 _id)\r\n    {\r\n        costs(_datasource, _gaslimit);\r\n        if ((_timestamp > now+3600*24*60)||(_gaslimit > block.gaslimit)||address(_fnc) != msg.sender) throw;\r\n\r\n        _id = sha3(this, msg.sender, reqc[msg.sender]);\r\n        reqc[msg.sender]++;\r\n        Log1_fnc(msg.sender, _id, _timestamp, _datasource, _arg, _fnc, _gaslimit, addr_proofType[msg.sender], addr_gasPrice[msg.sender]);\r\n        return _id;\r\n    }\r\n\r\n    function query2_fnc(uint _timestamp, string _datasource, string _arg1, string _arg2, function() external _fnc, uint _gaslimit)\r\n    payable\r\n    public\r\n    returns (bytes32 _id)\r\n    {\r\n        costs(_datasource, _gaslimit);\r\n        if ((_timestamp > now+3600*24*60)||(_gaslimit > block.gaslimit)||address(_fnc) != msg.sender) throw;\r\n\r\n        _id = sha3(this, msg.sender, reqc[msg.sender]);\r\n        reqc[msg.sender]++;\r\n        Log2_fnc(msg.sender, _id, _timestamp, _datasource, _arg1, _arg2, _fnc,  _gaslimit, addr_proofType[msg.sender], addr_gasPrice[msg.sender]);\r\n        return _id;\r\n    }\r\n\r\n    function queryN_fnc(uint _timestamp, string _datasource, bytes _args, function() external _fnc, uint _gaslimit)\r\n    payable\r\n    public\r\n    returns (bytes32 _id)\r\n    {\r\n        costs(_datasource, _gaslimit);\r\n        if ((_timestamp > now+3600*24*60)||(_gaslimit > block.gaslimit)||address(_fnc) != msg.sender) throw;\r\n\r\n        _id = sha3(this, msg.sender, reqc[msg.sender]);\r\n        reqc[msg.sender]++;\r\n        LogN_fnc(msg.sender, _id, _timestamp, _datasource, _args, _fnc, _gaslimit, addr_proofType[msg.sender], addr_gasPrice[msg.sender]);\r\n        return _id;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"name\":\"_datasource\",\"type\":\"string\"},{\"name\":\"_arg\",\"type\":\"string\"}],\"name\":\"query1\",\"outputs\":[{\"name\":\"_id\",\"type\":\"bytes32\"}],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_datasource\",\"type\":\"string\"},{\"name\":\"_gaslimit\",\"type\":\"uint256\"}],\"name\":\"getPrice\",\"outputs\":[{\"name\":\"_dsprice\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_datasource\",\"type\":\"string\"},{\"name\":\"_arg\",\"type\":\"string\"}],\"name\":\"query1\",\"outputs\":[{\"name\":\"_id\",\"type\":\"bytes32\"}],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"baseprice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCbAddress\",\"type\":\"address\"}],\"name\":\"removeCbAddress\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newSessionPubKeysHash\",\"type\":\"bytes32[]\"}],\"name\":\"randomDS_updateSessionPubKeysHash\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_datasource\",\"type\":\"string\"}],\"name\":\"getPrice\",\"outputs\":[{\"name\":\"_dsprice\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"name\":\"_datasource\",\"type\":\"string\"},{\"name\":\"_arg\",\"type\":\"string\"},{\"name\":\"_gaslimit\",\"type\":\"uint256\"}],\"name\":\"query1\",\"outputs\":[{\"name\":\"_id\",\"type\":\"bytes32\"}],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCbAddress\",\"type\":\"address\"},{\"name\":\"addressType\",\"type\":\"bytes1\"}],\"name\":\"addCbAddress\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"withdrawFunds\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_proofType\",\"type\":\"bytes1\"}],\"name\":\"setProofType\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"dsHash\",\"type\":\"bytes32[]\"},{\"name\":\"multiplier\",\"type\":\"uint256[]\"}],\"name\":\"multiAddDSource\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"name\":\"_datasource\",\"type\":\"string\"},{\"name\":\"_arg\",\"type\":\"string\"},{\"name\":\"_gaslimit\",\"type\":\"uint256\"}],\"name\":\"query1_withGasLimit\",\"outputs\":[{\"name\":\"_id\",\"type\":\"bytes32\"}],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCbAddress\",\"type\":\"address\"},{\"name\":\"addressType\",\"type\":\"bytes1\"},{\"name\":\"proof\",\"type\":\"bytes\"}],\"name\":\"addCbAddress\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"name\":\"_datasource\",\"type\":\"string\"},{\"name\":\"_arg1\",\"type\":\"string\"},{\"name\":\"_arg2\",\"type\":\"string\"}],\"name\":\"query2\",\"outputs\":[{\"name\":\"_id\",\"type\":\"bytes32\"}],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"offchainPayment\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"new_baseprice\",\"type\":\"uint256\"},{\"name\":\"proofID\",\"type\":\"bytes\"}],\"name\":\"setBasePrice\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"name\":\"_datasource\",\"type\":\"string\"},{\"name\":\"_arg1\",\"type\":\"string\"},{\"name\":\"_arg2\",\"type\":\"string\"},{\"name\":\"_gaslimit\",\"type\":\"uint256\"}],\"name\":\"query2\",\"outputs\":[{\"name\":\"_id\",\"type\":\"bytes32\"}],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newFlagger\",\"type\":\"address\"}],\"name\":\"changePaymentFlagger\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"name\":\"_datasource\",\"type\":\"string\"},{\"name\":\"_args\",\"type\":\"bytes\"},{\"name\":\"_gaslimit\",\"type\":\"uint256\"}],\"name\":\"queryN\",\"outputs\":[{\"name\":\"_id\",\"type\":\"bytes32\"}],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_datasource\",\"type\":\"string\"},{\"name\":\"_arg\",\"type\":\"string\"}],\"name\":\"query\",\"outputs\":[{\"name\":\"_id\",\"type\":\"bytes32\"}],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"name\":\"_datasource\",\"type\":\"string\"},{\"name\":\"_args\",\"type\":\"bytes\"}],\"name\":\"queryN\",\"outputs\":[{\"name\":\"_id\",\"type\":\"bytes32\"}],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"name\":\"_datasource\",\"type\":\"string\"},{\"name\":\"_arg1\",\"type\":\"string\"},{\"name\":\"_arg2\",\"type\":\"string\"},{\"name\":\"_gaslimit\",\"type\":\"uint256\"}],\"name\":\"query2_withGasLimit\",\"outputs\":[{\"name\":\"_id\",\"type\":\"bytes32\"}],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_datasource\",\"type\":\"string\"},{\"name\":\"_args\",\"type\":\"bytes\"}],\"name\":\"queryN\",\"outputs\":[{\"name\":\"_id\",\"type\":\"bytes32\"}],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"dsname\",\"type\":\"string\"},{\"name\":\"multiplier\",\"type\":\"uint256\"}],\"name\":\"addDSource\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"randomDS_getSessionPubKeyHash\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"name\":\"_datasource\",\"type\":\"string\"},{\"name\":\"_arg1\",\"type\":\"string\"},{\"name\":\"_arg2\",\"type\":\"string\"},{\"name\":\"_fnc\",\"type\":\"function\"},{\"name\":\"_gaslimit\",\"type\":\"uint256\"}],\"name\":\"query2_fnc\",\"outputs\":[{\"name\":\"_id\",\"type\":\"bytes32\"}],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"name\":\"_datasource\",\"type\":\"string\"},{\"name\":\"_arg\",\"type\":\"string\"}],\"name\":\"query\",\"outputs\":[{\"name\":\"_id\",\"type\":\"bytes32\"}],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"dsname\",\"type\":\"string\"},{\"name\":\"proofType\",\"type\":\"bytes1\"},{\"name\":\"multiplier\",\"type\":\"uint256\"}],\"name\":\"addDSource\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newgasprice\",\"type\":\"uint256\"}],\"name\":\"setGasPrice\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cbAddress\",\"outputs\":[{\"name\":\"_cbAddress\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"name\":\"_datasource\",\"type\":\"string\"},{\"name\":\"_arg\",\"type\":\"string\"},{\"name\":\"_gaslimit\",\"type\":\"uint256\"}],\"name\":\"query_withGasLimit\",\"outputs\":[{\"name\":\"_id\",\"type\":\"bytes32\"}],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"name\":\"_datasource\",\"type\":\"string\"},{\"name\":\"_args\",\"type\":\"bytes\"},{\"name\":\"_gaslimit\",\"type\":\"uint256\"}],\"name\":\"queryN_withGasLimit\",\"outputs\":[{\"name\":\"_id\",\"type\":\"bytes32\"}],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_gasPrice\",\"type\":\"uint256\"}],\"name\":\"setCustomGasPrice\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_gasPrice\",\"type\":\"uint256[]\"},{\"name\":\"_addr\",\"type\":\"address[]\"}],\"name\":\"multisetCustomGasPrice\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"cbAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes1\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_proofType\",\"type\":\"uint256[]\"},{\"name\":\"_addr\",\"type\":\"address[]\"}],\"name\":\"multisetProofType\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"name\":\"_datasource\",\"type\":\"string\"},{\"name\":\"_arg\",\"type\":\"string\"},{\"name\":\"_fnc\",\"type\":\"function\"},{\"name\":\"_gaslimit\",\"type\":\"uint256\"}],\"name\":\"query1_fnc\",\"outputs\":[{\"name\":\"_id\",\"type\":\"bytes32\"}],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"new_baseprice\",\"type\":\"uint256\"}],\"name\":\"setBasePrice\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"randomDS_sessionPubKeysHash\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_datasource\",\"type\":\"string\"},{\"name\":\"_arg1\",\"type\":\"string\"},{\"name\":\"_arg2\",\"type\":\"string\"}],\"name\":\"query2\",\"outputs\":[{\"name\":\"_id\",\"type\":\"bytes32\"}],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_flag\",\"type\":\"bool\"}],\"name\":\"setOffchainPayment\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"name\":\"_datasource\",\"type\":\"string\"},{\"name\":\"_args\",\"type\":\"bytes\"},{\"name\":\"_fnc\",\"type\":\"function\"},{\"name\":\"_gaslimit\",\"type\":\"uint256\"}],\"name\":\"queryN_fnc\",\"outputs\":[{\"name\":\"_id\",\"type\":\"bytes32\"}],\"payable\":true,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"cid\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"datasource\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"arg\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"gaslimit\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"proofType\",\"type\":\"bytes1\"},{\"indexed\":false,\"name\":\"gasPrice\",\"type\":\"uint256\"}],\"name\":\"Log1\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"cid\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"datasource\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"arg1\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"arg2\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"gaslimit\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"proofType\",\"type\":\"bytes1\"},{\"indexed\":false,\"name\":\"gasPrice\",\"type\":\"uint256\"}],\"name\":\"Log2\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"cid\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"datasource\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"args\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"gaslimit\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"proofType\",\"type\":\"bytes1\"},{\"indexed\":false,\"name\":\"gasPrice\",\"type\":\"uint256\"}],\"name\":\"LogN\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"cid\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"datasource\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"arg\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"callback\",\"type\":\"function\"},{\"indexed\":false,\"name\":\"gaslimit\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"proofType\",\"type\":\"bytes1\"},{\"indexed\":false,\"name\":\"gasPrice\",\"type\":\"uint256\"}],\"name\":\"Log1_fnc\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"cid\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"datasource\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"arg1\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"arg2\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"callback\",\"type\":\"function\"},{\"indexed\":false,\"name\":\"gaslimit\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"proofType\",\"type\":\"bytes1\"},{\"indexed\":false,\"name\":\"gasPrice\",\"type\":\"uint256\"}],\"name\":\"Log2_fnc\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"cid\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"datasource\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"args\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"callback\",\"type\":\"function\"},{\"indexed\":false,\"name\":\"gaslimit\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"proofType\",\"type\":\"bytes1\"},{\"indexed\":false,\"name\":\"gasPrice\",\"type\":\"uint256\"}],\"name\":\"LogN_fnc\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"idx_sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"idx_flag\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"Emit_OffchainPaymentFlag\",\"type\":\"event\"}]","ContractName":"Oraclize","CompilerVersion":"v0.4.15+commit.bbb8e64f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://4a8139af1bf2a9591f800190ee829830157762d6342103f42e55424b288403ae"}]}