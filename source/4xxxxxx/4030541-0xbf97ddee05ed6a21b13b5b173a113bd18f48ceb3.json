{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.8;\r\n\r\ncontract ERC20Interface {\r\n  function totalSupply() constant returns (uint256 totalSupply);\r\n  function balanceOf(address _owner) constant returns (uint256 balance);\r\n  function transfer(address _to, uint256 _value) returns (bool success);\r\n  function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\r\n  function approve(address _spender, uint256 _value) returns (bool success);\r\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining);\r\n\r\n  event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\ncontract AgoraToken is ERC20Interface {\r\n  address contractOwner;\r\n  string public constant name = \"Agora\";\r\n  string public constant symbol = \"AGO\";\r\n  uint8 public constant decimals = 0;\r\n\r\n  struct BalanceSnapshot {\r\n    bool initialized;\r\n    uint256 value;\r\n  }\r\n\r\n  mapping(address => uint256) balances;\r\n  mapping(address => mapping (address => uint256)) allowed;\r\n  mapping(uint256 => mapping (address => BalanceSnapshot)) balancesAtBlock;\r\n\r\n  uint256 public constant creatorSupply = 30000000;\r\n  uint256 public constant seriesASupply = 10000000;\r\n  uint256 public constant seriesBSupply = 30000000;\r\n  uint256 public constant seriesCSupply = 60000000;\r\n\r\n  uint256 public currentlyReleased = 0;\r\n  uint256 public valueRaised = 0;\r\n\r\n  // When building the contract, we release 30,000,000 tokens\r\n  // to the creator address.\r\n  function AgoraToken() {\r\n    contractOwner = msg.sender;\r\n    balances[contractOwner] = creatorSupply;\r\n    currentlyReleased += creatorSupply;\r\n  }\r\n\r\n  // ERC20 Logic Implementation\r\n\r\n  // Returns the balance of an address.\r\n  function balanceOf(address _owner) constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n  // Make a transfer of AGO between two addresses.\r\n  function transfer(address _to, uint256 _value) returns (bool success) {\r\n    if (balances[msg.sender] >= _value && _value > 0) {\r\n      // We need to register the balance known for the last reference block.\r\n      // That way, we can be sure that when the Claimer wants to check the balance\r\n      // the system can be protected against double-spending AGO tokens claiming.\r\n      registerBalanceForReference(msg.sender);\r\n      registerBalanceForReference(_to);\r\n\r\n      // Standard transfer stuff\r\n      balances[msg.sender] -= _value;\r\n      balances[_to] += _value;\r\n      Transfer(msg.sender, _to, _value);\r\n      return true;\r\n    } else { return false; }\r\n  }\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\r\n    if(balances[_from] >= _value && _value > 0 && allowed[_from][msg.sender] >= _value) {\r\n      // Same as `transfer` :\r\n      // We need to register the balance known for the last reference block.\r\n      // That way, we can be sure that when the Claimer wants to check the balance\r\n      // the system can be protected against double-spending AGO tokens claiming.\r\n      registerBalanceForReference(_from);\r\n      registerBalanceForReference(_to);\r\n\r\n      // Standard transferFrom stuff\r\n      balances[_from] -= _value;\r\n      balances[_to] += _value;\r\n      allowed[_from][msg.sender] -= _value;\r\n      Transfer(msg.sender, _to, _value);\r\n      return true;\r\n    } else { return false; }\r\n  }\r\n\r\n  // Approve a payment from msg.sender account to another one.\r\n  function approve(address _spender, uint256 _value) returns (bool success) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  // Checks the allowance of an account against another one. (Works with approval).\r\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  // Returns the total supply of token issued.\r\n  function totalSupply() constant returns (uint256 totalSupply) {\r\n    return creatorSupply + seriesASupply + seriesBSupply + seriesCSupply;\r\n  }\r\n\r\n  // ICO Logic Implementation\r\n\r\n  // Get tokens with a Ether payment.\r\n  function() payable {\r\n    // Require to be after block 4116800 to start the ICO.\r\n    require(block.number > 4116800);\r\n\r\n    // Require a value to be sent.\r\n    require(msg.value >= 0);\r\n\r\n    // Retrieve the current round information\r\n    var(pricePerThousands, supplyRemaining) = currentRoundInformation();\r\n\r\n    // Require a round to be started (currentRoundInformation return 0,0 if no\r\n    // round is in progress).\r\n    require(pricePerThousands > 0);\r\n\r\n    // Make the calculation : how many AGO token for this Ether value.\r\n    uint256 tokenToReceive = (msg.value * 1000 / pricePerThousands);\r\n\r\n    // Require there is enough token remaining in the supply.\r\n    require(tokenToReceive <= supplyRemaining);\r\n\r\n    // Credits the user balance with this tokens.\r\n    balances[msg.sender] += tokenToReceive;\r\n    currentlyReleased += tokenToReceive;\r\n    valueRaised += msg.value;\r\n  }\r\n\r\n  // Returns the current ICO round information.\r\n  // pricePerThousands is the current X ether = 1000 AGO\r\n  // supplyRemaining is the remaining supply of ether at this price\r\n  function currentRoundInformation() constant returns (uint256 pricePerThousands, uint256 supplyRemaining) {\r\n    if(currentlyReleased >= 30000000 && currentlyReleased < 40000000) {\r\n      return(0.75 ether, 40000000-currentlyReleased);\r\n    } else if(currentlyReleased >= 40000000 && currentlyReleased < 70000000) {\r\n      return(1.25 ether, 70000000-currentlyReleased);\r\n    } else if(currentlyReleased >= 70000000 && currentlyReleased < 130000000) {\r\n      return(1.5 ether, 130000000-currentlyReleased);\r\n    } else {\r\n      return(0,0);\r\n    }\r\n  }\r\n\r\n  // Method use by the creators. Used to retrieve the Ethers raised from the ICO.\r\n  // That way, Agora is becoming possible :).\r\n  function withdrawICO(uint256 amount) {\r\n    require(msg.sender == contractOwner);\r\n    contractOwner.transfer(amount);\r\n  }\r\n\r\n  // Claiming Logic Implementation\r\n  // This part is used by the claimer.\r\n  // The claimer can ask the balance of an user at a reference block.\r\n  // That way, the claimer is protected against double-spending AGO claimings.\r\n\r\n  // This method is triggered by `transfer` and `transferFrom`.\r\n  // It saves the balance known at a reference block only if there is no balance\r\n  // saved for this block yet.\r\n  // Meaning that this is a the first transaction since the last reference block,\r\n  // so this balance can be uses as the reference.\r\n  function registerBalanceForReference(address _owner) private {\r\n    uint256 referenceBlockNumber = latestReferenceBlockNumber();\r\n    if (balancesAtBlock[referenceBlockNumber][_owner].initialized) { return; }\r\n    balancesAtBlock[referenceBlockNumber][_owner].initialized = true;\r\n    balancesAtBlock[referenceBlockNumber][_owner].value = balances[_owner];\r\n  }\r\n\r\n  // What is the latest reference block number ?\r\n  function latestReferenceBlockNumber() constant returns (uint256 blockNumber) {\r\n    return (block.number - block.number % 157553);\r\n  }\r\n\r\n  // What is the valance of an user at a block ?\r\n  // If the user have made (or received) a transfer of AGO token since the\r\n  // last reference block, its balance will be written in the `balancesAtBlock`\r\n  // mapping. So we can retrieve it from here.\r\n  // Otherwise, if the user havn't made a transaction since the last reference\r\n  // block, the balance of AGO token is still good.\r\n  function balanceAtBlock(address _owner, uint256 blockNumber) constant returns (uint256 balance) {\r\n    if(balancesAtBlock[blockNumber][_owner].initialized) {\r\n      return balancesAtBlock[blockNumber][_owner].value;\r\n    }\r\n    return balances[_owner];\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"creatorSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"latestReferenceBlockNumber\",\"outputs\":[{\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentlyReleased\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"seriesCSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"seriesASupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawICO\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"balanceAtBlock\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"valueRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentRoundInformation\",\"outputs\":[{\"name\":\"pricePerThousands\",\"type\":\"uint256\"},{\"name\":\"supplyRemaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"seriesBSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"AgoraToken","CompilerVersion":"v0.4.13+commit.fb4cb1a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://e8c30e6a1e035bb58c5ce7966b058f53781957396399a3eb7de231d841a5d7e0"}]}