{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\ncontract Dividend {\r\n    struct Record {\r\n        uint balance;\r\n        uint shares;\r\n        uint index;\r\n    }\r\n\r\n    mapping (address => Record) public records;\r\n    address[] public investors;\r\n    address public funder;\r\n    uint public startTime;\r\n    uint public totalShares;\r\n    uint public lastInvestmentTime;\r\n\r\n    event Invested(uint indexed timestamp, address indexed from, uint amount, uint shares);\r\n    event Withdrawn(uint indexed timestamp, address indexed from, uint amount);\r\n\r\n    function Dividend() public payable {\r\n        records[msg.sender] = Record(msg.value,\r\n            totalShares = allocateShares(msg.value, 0),\r\n            investors.push(funder = msg.sender));\r\n        Invested(startTime = lastInvestmentTime = now, msg.sender, msg.value, totalShares);\r\n    }\r\n\r\n    function () public payable {\r\n        if (msg.value > 0) {\r\n            invest();\r\n        } else {\r\n            withdraw();\r\n        }\r\n    }\r\n\r\n    function investorCount() public view returns (uint) {\r\n      return investors.length;\r\n    }\r\n\r\n    function invest() public payable returns (uint) {\r\n        uint value = msg.value;\r\n        uint shares = allocateShares(value, (now - startTime) / 1 hours);\r\n        if (shares > 0) {\r\n            for (uint i = investors.length; i > 0; i--) {\r\n                Record storage rec = records[investors[i - 1]];\r\n                rec.balance += value * rec.shares / totalShares;\r\n            }\r\n            address investor = msg.sender;\r\n            rec = records[investor];\r\n            if (rec.index > 0) {\r\n                rec.shares += shares;\r\n            } else {\r\n                rec.shares = shares;\r\n                rec.index = investors.push(investor);\r\n            }\r\n            totalShares += shares;\r\n            Invested(lastInvestmentTime = now, investor, value, shares);\r\n        }\r\n        return shares;\r\n    }\r\n\r\n    function withdraw() public returns (uint) {\r\n        Record storage rec = records[msg.sender];\r\n        uint balance = rec.balance;\r\n        if (balance > 0) {\r\n            rec.balance = 0;\r\n            msg.sender.transfer(balance);\r\n            Withdrawn(now, msg.sender, balance);\r\n        }\r\n        if (now - lastInvestmentTime > 4 weeks) {\r\n            selfdestruct(funder);\r\n        }\r\n        return balance;\r\n    }\r\n\r\n    function allocateShares(uint weis, uint bonus) public pure returns (uint) {\r\n        return weis * (1000 + bonus) / 1 ether;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"funder\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalShares\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"investors\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"records\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"},{\"name\":\"shares\",\"type\":\"uint256\"},{\"name\":\"index\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastInvestmentTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"weis\",\"type\":\"uint256\"},{\"name\":\"bonus\",\"type\":\"uint256\"}],\"name\":\"allocateShares\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"investorCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"invest\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Invested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"}]","ContractName":"Dividend","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://8f7377e43ed0ac5256174ee866c52a08dd2d5f42cd0d0031ae15797a5ac531cb"}]}