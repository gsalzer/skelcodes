{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13;\r\n\r\ncontract Sudokoin {\r\n  uint supply = 203462379904501283815424;\r\n  uint public boards = 0; // max 6670903752021072936960\r\n\r\n  string public constant name = \"Sudokoin\";\r\n  string public constant symbol = \"SDK\";\r\n  uint8 public constant decimals = 12;\r\n\r\n  mapping (address => mapping (address => uint)) allowances;\r\n  mapping (address => uint) balances;\r\n  mapping (uint => bool) public claimedBoards;\r\n\r\n  event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n  event BoardClaimed(uint _board, uint _no, address _by);\r\n  event Burn(address indexed _from, uint _value);\r\n  event Transfer(address indexed _from, address indexed _to, uint _value);\r\n\r\n  function allowance(address _owner, address _spender) constant returns (uint remaining) {\r\n    remaining = allowances[_owner][_spender];\r\n  }\r\n\r\n  function balanceOf(address _owner) constant returns (uint balance) {\r\n    balance = balances[_owner];\r\n  }\r\n\r\n  function totalSupply() constant returns (uint totalSupply) {\r\n    totalSupply = supply;\r\n  }\r\n\r\n  function claimBoard(uint[81] _b) returns (bool success) {\r\n    require(validateBoard(_b));\r\n    uint cb = compressBoard(_b);\r\n    if (!claimedBoards[cb]) {\r\n      claimedBoards[cb] = true;\r\n      balances[msg.sender] += nextReward(boards);\r\n      boards += 1;\r\n      BoardClaimed(boards, cb, msg.sender);\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  function approve(address _spender, uint _value) returns (bool success) {\r\n      require(msg.data.length >= 68);\r\n      allowances[msg.sender][_spender] = _value;\r\n      Approval(msg.sender, _spender, _value);\r\n      return true;\r\n  }\r\n\r\n  function transfer(address _to, uint _value) returns (bool success) {\r\n      require(msg.data.length >= 68);\r\n      require(_to != 0x0); // use burn!\r\n      require(_value <= balances[msg.sender]);\r\n      require(_value + balances[_to] >= balances[_to]);\r\n      balances[msg.sender] -= _value;\r\n      balances[_to] += _value;\r\n      Transfer(msg.sender, _to, _value);\r\n      return true;\r\n  }\r\n\r\n  function transferFrom(address _from, address _to, uint _value) returns (bool success) {\r\n      require(msg.data.length >= 100);\r\n      require(_to != 0x0); // use burnFrom!\r\n      require(_value <= balances[_from]);\r\n      require(_value <= allowances[_from][msg.sender]);\r\n      require(_value + balances[_to] >= balances[_to]);\r\n      balances[_from] -= _value;\r\n      balances[_to] += _value;\r\n      allowances[_from][msg.sender] -= _value;\r\n      Transfer(_from, _to, _value);\r\n      return true;\r\n  }\r\n\r\n  function burn(uint _value) returns (bool success) {\r\n      require(_value <= balances[msg.sender]);\r\n      balances[msg.sender] -= _value;\r\n      supply -= _value;\r\n      Burn(msg.sender, _value);\r\n      return true;\r\n  }\r\n\r\n  function burnFrom(address _from, uint _value) returns (bool success) {\r\n      require(_value <= balances[_from]);\r\n      require(_value <= allowances[_from][msg.sender]);\r\n      balances[_from] -= _value;\r\n      allowances[_from][msg.sender] -= _value;\r\n      supply -= _value;\r\n      Burn(_from, _value);\r\n      return true;\r\n  }\r\n\r\n  // compressBoard removes last col and last row and joins digits into one number.\r\n  function compressBoard(uint[81] _b) constant returns (uint) {\r\n    uint cb = 0;\r\n    uint mul = 1000000000000000000000000000000000000000000000000000000000000000;\r\n    for (uint i = 0; i < 72; i++) {\r\n      if (i % 9 == 8) {\r\n        continue;\r\n      }\r\n      cb = cb + mul * _b[i];\r\n      mul = mul / 10;\r\n    }\r\n    return cb;\r\n  }\r\n\r\n  function validateBoard(uint[81] _b) constant returns (bool) {\r\n    return\r\n      // rows\r\n      validateSet( _b[0], _b[1], _b[2], _b[3], _b[4], _b[5], _b[6], _b[7], _b[8]) &&\r\n      validateSet( _b[9],_b[10],_b[11],_b[12],_b[13],_b[14],_b[15],_b[16],_b[17]) &&\r\n      validateSet(_b[18],_b[19],_b[20],_b[21],_b[22],_b[23],_b[24],_b[25],_b[26]) &&\r\n      validateSet(_b[27],_b[28],_b[29],_b[30],_b[31],_b[32],_b[33],_b[34],_b[35]) &&\r\n      validateSet(_b[36],_b[37],_b[38],_b[39],_b[40],_b[41],_b[42],_b[43],_b[44]) &&\r\n      validateSet(_b[45],_b[46],_b[47],_b[48],_b[49],_b[50],_b[51],_b[52],_b[53]) &&\r\n      validateSet(_b[54],_b[55],_b[56],_b[57],_b[58],_b[59],_b[60],_b[61],_b[62]) &&\r\n      validateSet(_b[63],_b[64],_b[65],_b[66],_b[67],_b[68],_b[69],_b[70],_b[71]) &&\r\n      validateSet(_b[72],_b[73],_b[74],_b[75],_b[76],_b[77],_b[78],_b[79],_b[80]) &&\r\n\r\n      // cols\r\n      validateSet(_b[0], _b[9],_b[18],_b[27],_b[36],_b[45],_b[54],_b[63],_b[72]) &&\r\n      validateSet(_b[1],_b[10],_b[19],_b[28],_b[37],_b[46],_b[55],_b[64],_b[73]) &&\r\n      validateSet(_b[2],_b[11],_b[20],_b[29],_b[38],_b[47],_b[56],_b[65],_b[74]) &&\r\n      validateSet(_b[3],_b[12],_b[21],_b[30],_b[39],_b[48],_b[57],_b[66],_b[75]) &&\r\n      validateSet(_b[4],_b[13],_b[22],_b[31],_b[40],_b[49],_b[58],_b[67],_b[76]) &&\r\n      validateSet(_b[5],_b[14],_b[23],_b[32],_b[41],_b[50],_b[59],_b[68],_b[77]) &&\r\n      validateSet(_b[6],_b[15],_b[24],_b[33],_b[42],_b[51],_b[60],_b[69],_b[78]) &&\r\n      validateSet(_b[7],_b[16],_b[25],_b[34],_b[43],_b[52],_b[61],_b[70],_b[79]) &&\r\n      validateSet(_b[8],_b[17],_b[26],_b[35],_b[44],_b[53],_b[62],_b[71],_b[80]) &&\r\n\r\n      // blocks\r\n      validateSet( _b[0], _b[1], _b[2], _b[9],_b[10],_b[11],_b[18],_b[19],_b[20]) &&\r\n      validateSet(_b[27],_b[28],_b[29],_b[36],_b[37],_b[38],_b[45],_b[46],_b[47]) &&\r\n      validateSet(_b[54],_b[55],_b[56],_b[63],_b[64],_b[65],_b[72],_b[73],_b[74]) &&\r\n      validateSet( _b[3], _b[4], _b[5],_b[12],_b[13],_b[14],_b[21],_b[22],_b[23]) &&\r\n      validateSet(_b[30],_b[31],_b[32],_b[39],_b[40],_b[41],_b[48],_b[49],_b[50]) &&\r\n      validateSet(_b[57],_b[58],_b[59],_b[66],_b[67],_b[68],_b[75],_b[76],_b[77]) &&\r\n      validateSet( _b[6], _b[7], _b[8],_b[15],_b[16],_b[17],_b[24],_b[25],_b[26]) &&\r\n      validateSet(_b[33],_b[34],_b[35],_b[42],_b[43],_b[44],_b[51],_b[52],_b[53]) &&\r\n      validateSet(_b[60],_b[61],_b[62],_b[69],_b[70],_b[71],_b[78],_b[79],_b[80]);\r\n  }\r\n\r\n  function validateSet(uint _v1, uint _v2, uint _v3, uint _v4, uint _v5, uint _v6, uint _v7, uint _v8, uint _v9) private returns (bool) {\r\n    uint set = addToSet(0, _v1);\r\n    if (setIncludes(set, _v2)) { return false; }\r\n    set = addToSet(set, _v2);\r\n    if (setIncludes(set, _v3)) { return false; }\r\n    set = addToSet(set, _v3);\r\n    if (setIncludes(set, _v4)) { return false; }\r\n    set = addToSet(set, _v4);\r\n    if (setIncludes(set, _v5)) { return false; }\r\n    set = addToSet(set, _v5);\r\n    if (setIncludes(set, _v6)) { return false; }\r\n    set = addToSet(set, _v6);\r\n    if (setIncludes(set, _v7)) { return false; }\r\n    set = addToSet(set, _v7);\r\n    if (setIncludes(set, _v8)) { return false; }\r\n    set = addToSet(set, _v8);\r\n    if (setIncludes(set, _v9)) { return false; }\r\n    return true;\r\n  }\r\n\r\n  function setIncludes(uint _set, uint _number) private returns (bool success) {\r\n    return _number == 0 || _number > 9 || _set & (1 << _number) != 0;\r\n  }\r\n\r\n  function addToSet(uint _set, uint _number) private returns (uint set) {\r\n    return _set | (1 << _number);\r\n  }\r\n\r\n  // returns reward for the next submitted board, so reward first and then increase boards!\r\n  function nextReward(uint _bNo) constant returns (uint) {\r\n    if (_bNo < 11572) { return 576460752303423488; } // tier 1\r\n    if (_bNo < 23144) { return 288230376151711744; } // tier 2\r\n    if (_bNo < 46288) { return 144115188075855872; } // tier 3\r\n    if (_bNo < 92577) { return 72057594037927936; } // tier 4\r\n    if (_bNo < 185154) { return 36028797018963968; } // tier 5\r\n    if (_bNo < 370309) { return 18014398509481984; } // tier 6\r\n    if (_bNo < 740619) { return 9007199254740992; } // tier 7\r\n    if (_bNo < 1481238) { return 4503599627370496; } // tier 8\r\n    if (_bNo < 2962476) { return 2251799813685248; } // tier 9\r\n    if (_bNo < 5924952) { return 1125899906842624; } // tier 10\r\n    if (_bNo < 11849905) { return 562949953421312; } // tier 11\r\n    if (_bNo < 23699811) { return 281474976710656; } // tier 12\r\n    if (_bNo < 47399622) { return 140737488355328; } // tier 13\r\n    if (_bNo < 94799244) { return 70368744177664; } // tier 14\r\n    if (_bNo < 189598488) { return 35184372088832; } // tier 15\r\n    if (_bNo < 379196976) { return 17592186044416; } // tier 16\r\n    if (_bNo < 758393952) { return 8796093022208; } // tier 17\r\n    if (_bNo < 1516787904) { return 4398046511104; } // tier 18\r\n    if (_bNo < 3033575809) { return 2199023255552; } // tier 19\r\n    if (_bNo < 6067151618) { return 1099511627776; } // tier 20\r\n    if (_bNo < 12134303237) { return 549755813888; } // tier 21\r\n    if (_bNo < 24268606474) { return 274877906944; } // tier 22\r\n    if (_bNo < 48537212948) { return 137438953472; } // tier 23\r\n    if (_bNo < 97074425896) { return 68719476736; } // tier 24\r\n    if (_bNo < 194148851792) { return 34359738368; } // tier 25\r\n    if (_bNo < 388297703584) { return 17179869184; } // tier 26\r\n    if (_bNo < 776595407168) { return 8589934592; } // tier 27\r\n    if (_bNo < 1553190814336) { return 4294967296; } // tier 28\r\n    if (_bNo < 3106381628672) { return 2147483648; } // tier 29\r\n    if (_bNo < 6212763257344) { return 1073741824; } // tier 30\r\n    if (_bNo < 12425526514688) { return 536870912; } // tier 31\r\n    if (_bNo < 24851053029377) { return 268435456; } // tier 32\r\n    if (_bNo < 49702106058754) { return 134217728; } // tier 33\r\n    if (_bNo < 99404212117509) { return 67108864; } // tier 34\r\n    if (_bNo < 198808424235018) { return 33554432; } // tier 35\r\n    if (_bNo < 397616848470036) { return 16777216; } // tier 36\r\n    if (_bNo < 795233696940073) { return 8388608; } // tier 37\r\n    if (_bNo < 1590467393880146) { return 4194304; } // tier 38\r\n    if (_bNo < 3180934787760292) { return 2097152; } // tier 39\r\n    if (_bNo < 6361869575520585) { return 1048576; } // tier 40\r\n    if (_bNo < 12723739151041170) { return 524288; } // tier 41\r\n    if (_bNo < 25447478302082340) { return 262144; } // tier 42\r\n    if (_bNo < 50894956604164680) { return 131072; } // tier 43\r\n    if (_bNo < 101789913208329360) { return 65536; } // tier 44\r\n    if (_bNo < 203579826416658720) { return 32768; } // tier 45\r\n    if (_bNo < 407159652833317440) { return 16384; } // tier 46\r\n    if (_bNo < 814319305666634880) { return 8192; } // tier 47\r\n    if (_bNo < 1628638611333269760) { return 4096; } // tier 48\r\n    if (_bNo < 3257277222666539520) { return 2048; } // tier 49\r\n    if (_bNo < 6514554445333079040) { return 1024; } // tier 50\r\n    if (_bNo < 13029108890666158080) { return 512; } // tier 51\r\n    if (_bNo < 26058217781332316160) { return 256; } // tier 52\r\n    if (_bNo < 52116435562664632320) { return 128; } // tier 53\r\n    if (_bNo < 104232871125329264640) { return 64; } // tier 54\r\n    if (_bNo < 208465742250658529280) { return 32; } // tier 55\r\n    if (_bNo < 416931484501317058560) { return 16; } // tier 56\r\n    if (_bNo < 833862969002634117120) { return 8; } // tier 57\r\n    if (_bNo < 1667725938005268234240) { return 4; } // tier 58\r\n    if (_bNo < 3335451876010536468480) { return 2; } // tier 59\r\n    if (_bNo < 6670903752021072936960) { return 1; } // tier 60\r\n    return 0;\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"claimedBoards\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_b\",\"type\":\"uint256[81]\"}],\"name\":\"compressBoard\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_b\",\"type\":\"uint256[81]\"}],\"name\":\"claimBoard\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_bNo\",\"type\":\"uint256\"}],\"name\":\"nextReward\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_b\",\"type\":\"uint256[81]\"}],\"name\":\"validateBoard\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"boards\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_board\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_no\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_by\",\"type\":\"address\"}],\"name\":\"BoardClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"Sudokoin","CompilerVersion":"v0.4.13+commit.fb4cb1a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://a6fa6d9791af5e3e7e068f1efe7190b231c764ffea06597b2cb64fe03bfb277d"}]}