{"status":"1","message":"OK","result":[{"SourceCode":"// <ORACLIZE_API>\r\n/*\r\nCopyright (c) 2015-2016 Oraclize SRL\r\nCopyright (c) 2016 Oraclize LTD\r\n\r\n\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\n\r\n\r\nThe above copyright notice and this permission notice shall be included in\r\nall copies or substantial portions of the Software.\r\n\r\n\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\nTHE SOFTWARE.\r\n*/\r\n\r\n// This api is currently targeted at 0.4.18, please import oraclizeAPI_pre0.4.sol or oraclizeAPI_0.4 where necessary\r\npragma solidity ^0.4.18;\r\n\r\ncontract OraclizeI {\r\n    address public cbAddress;\r\n    function query(uint _timestamp, string _datasource, string _arg) external payable returns (bytes32 _id);\r\n    function query_withGasLimit(uint _timestamp, string _datasource, string _arg, uint _gaslimit) external payable returns (bytes32 _id);\r\n    function query2(uint _timestamp, string _datasource, string _arg1, string _arg2) public payable returns (bytes32 _id);\r\n    function query2_withGasLimit(uint _timestamp, string _datasource, string _arg1, string _arg2, uint _gaslimit) external payable returns (bytes32 _id);\r\n    function queryN(uint _timestamp, string _datasource, bytes _argN) public payable returns (bytes32 _id);\r\n    function queryN_withGasLimit(uint _timestamp, string _datasource, bytes _argN, uint _gaslimit) external payable returns (bytes32 _id);\r\n    function getPrice(string _datasource) public returns (uint _dsprice);\r\n    function getPrice(string _datasource, uint gaslimit) public returns (uint _dsprice);\r\n    function setProofType(byte _proofType) external;\r\n    function setCustomGasPrice(uint _gasPrice) external;\r\n    function randomDS_getSessionPubKeyHash() external constant returns (bytes32);\r\n}\r\n\r\ncontract OraclizeAddrResolverI {\r\n    function getAddress() public returns (address _addr);\r\n}\r\n\r\ncontract usingOraclize {\r\n    uint constant day = 60 * 60 * 24;\r\n    uint constant week = 60 * 60 * 24 * 7;\r\n    uint constant month = 60 * 60 * 24 * 30;\r\n    byte constant proofType_NONE = 0x00;\r\n    byte constant proofType_TLSNotary = 0x10;\r\n    byte constant proofType_Android = 0x20;\r\n    byte constant proofType_Ledger = 0x30;\r\n    byte constant proofType_Native = 0xF0;\r\n    byte constant proofStorage_IPFS = 0x01;\r\n    uint8 constant networkID_auto = 0;\r\n    uint8 constant networkID_mainnet = 1;\r\n    uint8 constant networkID_testnet = 2;\r\n    uint8 constant networkID_morden = 2;\r\n    uint8 constant networkID_consensys = 161;\r\n\r\n    OraclizeAddrResolverI OAR;\r\n\r\n    OraclizeI oraclize;\r\n    modifier oraclizeAPI {\r\n        if ((address(OAR) == 0) || (getCodeSize(address(OAR)) == 0))\r\n            oraclize_setNetwork(networkID_auto);\r\n\r\n        if (address(oraclize) != OAR.getAddress())\r\n            oraclize = OraclizeI(OAR.getAddress());\r\n\r\n        _;\r\n    }\r\n    modifier coupon(string code){\r\n        oraclize = OraclizeI(OAR.getAddress());\r\n        _;\r\n    }\r\n\r\n    function oraclize_setNetwork(uint8 networkID) internal returns (bool){\r\n        return oraclize_setNetwork();\r\n        networkID;\r\n        // silence the warning and remain backwards compatible\r\n    }\r\n\r\n    function oraclize_setNetwork() internal returns (bool){\r\n        if (getCodeSize(0x1d3B2638a7cC9f2CB3D298A3DA7a90B67E5506ed) > 0) {//mainnet\r\n            OAR = OraclizeAddrResolverI(0x1d3B2638a7cC9f2CB3D298A3DA7a90B67E5506ed);\r\n            oraclize_setNetworkName(\"eth_mainnet\");\r\n            return true;\r\n        }\r\n        if (getCodeSize(0xc03A2615D5efaf5F49F60B7BB6583eaec212fdf1) > 0) {//ropsten testnet\r\n            OAR = OraclizeAddrResolverI(0xc03A2615D5efaf5F49F60B7BB6583eaec212fdf1);\r\n            oraclize_setNetworkName(\"eth_ropsten3\");\r\n            return true;\r\n        }\r\n        if (getCodeSize(0xB7A07BcF2Ba2f2703b24C0691b5278999C59AC7e) > 0) {//kovan testnet\r\n            OAR = OraclizeAddrResolverI(0xB7A07BcF2Ba2f2703b24C0691b5278999C59AC7e);\r\n            oraclize_setNetworkName(\"eth_kovan\");\r\n            return true;\r\n        }\r\n        if (getCodeSize(0x146500cfd35B22E4A392Fe0aDc06De1a1368Ed48) > 0) {//rinkeby testnet\r\n            OAR = OraclizeAddrResolverI(0x146500cfd35B22E4A392Fe0aDc06De1a1368Ed48);\r\n            oraclize_setNetworkName(\"eth_rinkeby\");\r\n            return true;\r\n        }\r\n        if (getCodeSize(0x6f485C8BF6fc43eA212E93BBF8ce046C7f1cb475) > 0) {//ethereum-bridge\r\n            OAR = OraclizeAddrResolverI(0x6f485C8BF6fc43eA212E93BBF8ce046C7f1cb475);\r\n            return true;\r\n        }\r\n        if (getCodeSize(0x20e12A1F859B3FeaE5Fb2A0A32C18F5a65555bBF) > 0) {//ether.camp ide\r\n            OAR = OraclizeAddrResolverI(0x20e12A1F859B3FeaE5Fb2A0A32C18F5a65555bBF);\r\n            return true;\r\n        }\r\n        if (getCodeSize(0x51efaF4c8B3C9AfBD5aB9F4bbC82784Ab6ef8fAA) > 0) {//browser-solidity\r\n            OAR = OraclizeAddrResolverI(0x51efaF4c8B3C9AfBD5aB9F4bbC82784Ab6ef8fAA);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function __callback(bytes32 myid, string result) public {\r\n        __callback(myid, result, new bytes(0));\r\n    }\r\n\r\n    function __callback(bytes32 myid, string result, bytes proof) public {\r\n        return;\r\n        myid;\r\n        result;\r\n        proof;\r\n        // Silence compiler warnings\r\n    }\r\n\r\n    function oraclize_getPrice(string datasource) oraclizeAPI internal returns (uint){\r\n        return oraclize.getPrice(datasource);\r\n    }\r\n\r\n    function oraclize_getPrice(string datasource, uint gaslimit) oraclizeAPI internal returns (uint){\r\n        return oraclize.getPrice(datasource, gaslimit);\r\n    }\r\n\r\n    function oraclize_query(string datasource, string arg) oraclizeAPI internal returns (bytes32 id){\r\n        uint price = oraclize.getPrice(datasource);\r\n        if (price > 1 ether + tx.gasprice * 200000) return 0;\r\n        // unexpectedly high price\r\n        return oraclize.query.value(price)(0, datasource, arg);\r\n    }\r\n\r\n    function oraclize_query(uint timestamp, string datasource, string arg) oraclizeAPI internal returns (bytes32 id){\r\n        uint price = oraclize.getPrice(datasource);\r\n        if (price > 1 ether + tx.gasprice * 200000) return 0;\r\n        // unexpectedly high price\r\n        return oraclize.query.value(price)(timestamp, datasource, arg);\r\n    }\r\n\r\n    function oraclize_query(uint timestamp, string datasource, string arg, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\r\n        uint price = oraclize.getPrice(datasource, gaslimit);\r\n        if (price > 1 ether + tx.gasprice * gaslimit) return 0;\r\n        // unexpectedly high price\r\n        return oraclize.query_withGasLimit.value(price)(timestamp, datasource, arg, gaslimit);\r\n    }\r\n\r\n    function oraclize_query(string datasource, string arg, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\r\n        uint price = oraclize.getPrice(datasource, gaslimit);\r\n        if (price > 1 ether + tx.gasprice * gaslimit) return 0;\r\n        // unexpectedly high price\r\n        return oraclize.query_withGasLimit.value(price)(0, datasource, arg, gaslimit);\r\n    }\r\n\r\n    function oraclize_query(string datasource, string arg1, string arg2) oraclizeAPI internal returns (bytes32 id){\r\n        uint price = oraclize.getPrice(datasource);\r\n        if (price > 1 ether + tx.gasprice * 200000) return 0;\r\n        // unexpectedly high price\r\n        return oraclize.query2.value(price)(0, datasource, arg1, arg2);\r\n    }\r\n\r\n    function oraclize_query(uint timestamp, string datasource, string arg1, string arg2) oraclizeAPI internal returns (bytes32 id){\r\n        uint price = oraclize.getPrice(datasource);\r\n        if (price > 1 ether + tx.gasprice * 200000) return 0;\r\n        // unexpectedly high price\r\n        return oraclize.query2.value(price)(timestamp, datasource, arg1, arg2);\r\n    }\r\n\r\n    function oraclize_query(uint timestamp, string datasource, string arg1, string arg2, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\r\n        uint price = oraclize.getPrice(datasource, gaslimit);\r\n        if (price > 1 ether + tx.gasprice * gaslimit) return 0;\r\n        // unexpectedly high price\r\n        return oraclize.query2_withGasLimit.value(price)(timestamp, datasource, arg1, arg2, gaslimit);\r\n    }\r\n\r\n    function oraclize_query(string datasource, string arg1, string arg2, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\r\n        uint price = oraclize.getPrice(datasource, gaslimit);\r\n        if (price > 1 ether + tx.gasprice * gaslimit) return 0;\r\n        // unexpectedly high price\r\n        return oraclize.query2_withGasLimit.value(price)(0, datasource, arg1, arg2, gaslimit);\r\n    }\r\n\r\n    function oraclize_query(string datasource, string[] argN) oraclizeAPI internal returns (bytes32 id){\r\n        uint price = oraclize.getPrice(datasource);\r\n        if (price > 1 ether + tx.gasprice * 200000) return 0;\r\n        // unexpectedly high price\r\n        bytes memory args = stra2cbor(argN);\r\n        return oraclize.queryN.value(price)(0, datasource, args);\r\n    }\r\n\r\n    function oraclize_query(uint timestamp, string datasource, string[] argN) oraclizeAPI internal returns (bytes32 id){\r\n        uint price = oraclize.getPrice(datasource);\r\n        if (price > 1 ether + tx.gasprice * 200000) return 0;\r\n        // unexpectedly high price\r\n        bytes memory args = stra2cbor(argN);\r\n        return oraclize.queryN.value(price)(timestamp, datasource, args);\r\n    }\r\n\r\n    function oraclize_query(uint timestamp, string datasource, string[] argN, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\r\n        uint price = oraclize.getPrice(datasource, gaslimit);\r\n        if (price > 1 ether + tx.gasprice * gaslimit) return 0;\r\n        // unexpectedly high price\r\n        bytes memory args = stra2cbor(argN);\r\n        return oraclize.queryN_withGasLimit.value(price)(timestamp, datasource, args, gaslimit);\r\n    }\r\n\r\n    function oraclize_query(string datasource, string[] argN, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\r\n        uint price = oraclize.getPrice(datasource, gaslimit);\r\n        if (price > 1 ether + tx.gasprice * gaslimit) return 0;\r\n        // unexpectedly high price\r\n        bytes memory args = stra2cbor(argN);\r\n        return oraclize.queryN_withGasLimit.value(price)(0, datasource, args, gaslimit);\r\n    }\r\n\r\n    function oraclize_query(string datasource, string[1] args) oraclizeAPI internal returns (bytes32 id) {\r\n        string[] memory dynargs = new string[](1);\r\n        dynargs[0] = args[0];\r\n        return oraclize_query(datasource, dynargs);\r\n    }\r\n\r\n    function oraclize_query(uint timestamp, string datasource, string[1] args) oraclizeAPI internal returns (bytes32 id) {\r\n        string[] memory dynargs = new string[](1);\r\n        dynargs[0] = args[0];\r\n        return oraclize_query(timestamp, datasource, dynargs);\r\n    }\r\n\r\n    function oraclize_query(uint timestamp, string datasource, string[1] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\r\n        string[] memory dynargs = new string[](1);\r\n        dynargs[0] = args[0];\r\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\r\n    }\r\n\r\n    function oraclize_query(string datasource, string[1] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\r\n        string[] memory dynargs = new string[](1);\r\n        dynargs[0] = args[0];\r\n        return oraclize_query(datasource, dynargs, gaslimit);\r\n    }\r\n\r\n    function oraclize_query(string datasource, string[2] args) oraclizeAPI internal returns (bytes32 id) {\r\n        string[] memory dynargs = new string[](2);\r\n        dynargs[0] = args[0];\r\n        dynargs[1] = args[1];\r\n        return oraclize_query(datasource, dynargs);\r\n    }\r\n\r\n    function oraclize_query(uint timestamp, string datasource, string[2] args) oraclizeAPI internal returns (bytes32 id) {\r\n        string[] memory dynargs = new string[](2);\r\n        dynargs[0] = args[0];\r\n        dynargs[1] = args[1];\r\n        return oraclize_query(timestamp, datasource, dynargs);\r\n    }\r\n\r\n    function oraclize_query(uint timestamp, string datasource, string[2] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\r\n        string[] memory dynargs = new string[](2);\r\n        dynargs[0] = args[0];\r\n        dynargs[1] = args[1];\r\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\r\n    }\r\n\r\n    function oraclize_query(string datasource, string[2] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\r\n        string[] memory dynargs = new string[](2);\r\n        dynargs[0] = args[0];\r\n        dynargs[1] = args[1];\r\n        return oraclize_query(datasource, dynargs, gaslimit);\r\n    }\r\n\r\n    function oraclize_query(string datasource, string[3] args) oraclizeAPI internal returns (bytes32 id) {\r\n        string[] memory dynargs = new string[](3);\r\n        dynargs[0] = args[0];\r\n        dynargs[1] = args[1];\r\n        dynargs[2] = args[2];\r\n        return oraclize_query(datasource, dynargs);\r\n    }\r\n\r\n    function oraclize_query(uint timestamp, string datasource, string[3] args) oraclizeAPI internal returns (bytes32 id) {\r\n        string[] memory dynargs = new string[](3);\r\n        dynargs[0] = args[0];\r\n        dynargs[1] = args[1];\r\n        dynargs[2] = args[2];\r\n        return oraclize_query(timestamp, datasource, dynargs);\r\n    }\r\n\r\n    function oraclize_query(uint timestamp, string datasource, string[3] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\r\n        string[] memory dynargs = new string[](3);\r\n        dynargs[0] = args[0];\r\n        dynargs[1] = args[1];\r\n        dynargs[2] = args[2];\r\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\r\n    }\r\n\r\n    function oraclize_query(string datasource, string[3] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\r\n        string[] memory dynargs = new string[](3);\r\n        dynargs[0] = args[0];\r\n        dynargs[1] = args[1];\r\n        dynargs[2] = args[2];\r\n        return oraclize_query(datasource, dynargs, gaslimit);\r\n    }\r\n\r\n    function oraclize_query(string datasource, string[4] args) oraclizeAPI internal returns (bytes32 id) {\r\n        string[] memory dynargs = new string[](4);\r\n        dynargs[0] = args[0];\r\n        dynargs[1] = args[1];\r\n        dynargs[2] = args[2];\r\n        dynargs[3] = args[3];\r\n        return oraclize_query(datasource, dynargs);\r\n    }\r\n\r\n    function oraclize_query(uint timestamp, string datasource, string[4] args) oraclizeAPI internal returns (bytes32 id) {\r\n        string[] memory dynargs = new string[](4);\r\n        dynargs[0] = args[0];\r\n        dynargs[1] = args[1];\r\n        dynargs[2] = args[2];\r\n        dynargs[3] = args[3];\r\n        return oraclize_query(timestamp, datasource, dynargs);\r\n    }\r\n\r\n    function oraclize_query(uint timestamp, string datasource, string[4] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\r\n        string[] memory dynargs = new string[](4);\r\n        dynargs[0] = args[0];\r\n        dynargs[1] = args[1];\r\n        dynargs[2] = args[2];\r\n        dynargs[3] = args[3];\r\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\r\n    }\r\n\r\n    function oraclize_query(string datasource, string[4] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\r\n        string[] memory dynargs = new string[](4);\r\n        dynargs[0] = args[0];\r\n        dynargs[1] = args[1];\r\n        dynargs[2] = args[2];\r\n        dynargs[3] = args[3];\r\n        return oraclize_query(datasource, dynargs, gaslimit);\r\n    }\r\n\r\n    function oraclize_query(string datasource, string[5] args) oraclizeAPI internal returns (bytes32 id) {\r\n        string[] memory dynargs = new string[](5);\r\n        dynargs[0] = args[0];\r\n        dynargs[1] = args[1];\r\n        dynargs[2] = args[2];\r\n        dynargs[3] = args[3];\r\n        dynargs[4] = args[4];\r\n        return oraclize_query(datasource, dynargs);\r\n    }\r\n\r\n    function oraclize_query(uint timestamp, string datasource, string[5] args) oraclizeAPI internal returns (bytes32 id) {\r\n        string[] memory dynargs = new string[](5);\r\n        dynargs[0] = args[0];\r\n        dynargs[1] = args[1];\r\n        dynargs[2] = args[2];\r\n        dynargs[3] = args[3];\r\n        dynargs[4] = args[4];\r\n        return oraclize_query(timestamp, datasource, dynargs);\r\n    }\r\n\r\n    function oraclize_query(uint timestamp, string datasource, string[5] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\r\n        string[] memory dynargs = new string[](5);\r\n        dynargs[0] = args[0];\r\n        dynargs[1] = args[1];\r\n        dynargs[2] = args[2];\r\n        dynargs[3] = args[3];\r\n        dynargs[4] = args[4];\r\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\r\n    }\r\n\r\n    function oraclize_query(string datasource, string[5] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\r\n        string[] memory dynargs = new string[](5);\r\n        dynargs[0] = args[0];\r\n        dynargs[1] = args[1];\r\n        dynargs[2] = args[2];\r\n        dynargs[3] = args[3];\r\n        dynargs[4] = args[4];\r\n        return oraclize_query(datasource, dynargs, gaslimit);\r\n    }\r\n\r\n    function oraclize_query(string datasource, bytes[] argN) oraclizeAPI internal returns (bytes32 id){\r\n        uint price = oraclize.getPrice(datasource);\r\n        if (price > 1 ether + tx.gasprice * 200000) return 0;\r\n        // unexpectedly high price\r\n        bytes memory args = ba2cbor(argN);\r\n        return oraclize.queryN.value(price)(0, datasource, args);\r\n    }\r\n\r\n    function oraclize_query(uint timestamp, string datasource, bytes[] argN) oraclizeAPI internal returns (bytes32 id){\r\n        uint price = oraclize.getPrice(datasource);\r\n        if (price > 1 ether + tx.gasprice * 200000) return 0;\r\n        // unexpectedly high price\r\n        bytes memory args = ba2cbor(argN);\r\n        return oraclize.queryN.value(price)(timestamp, datasource, args);\r\n    }\r\n\r\n    function oraclize_query(uint timestamp, string datasource, bytes[] argN, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\r\n        uint price = oraclize.getPrice(datasource, gaslimit);\r\n        if (price > 1 ether + tx.gasprice * gaslimit) return 0;\r\n        // unexpectedly high price\r\n        bytes memory args = ba2cbor(argN);\r\n        return oraclize.queryN_withGasLimit.value(price)(timestamp, datasource, args, gaslimit);\r\n    }\r\n\r\n    function oraclize_query(string datasource, bytes[] argN, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\r\n        uint price = oraclize.getPrice(datasource, gaslimit);\r\n        if (price > 1 ether + tx.gasprice * gaslimit) return 0;\r\n        // unexpectedly high price\r\n        bytes memory args = ba2cbor(argN);\r\n        return oraclize.queryN_withGasLimit.value(price)(0, datasource, args, gaslimit);\r\n    }\r\n\r\n    function oraclize_query(string datasource, bytes[1] args) oraclizeAPI internal returns (bytes32 id) {\r\n        bytes[] memory dynargs = new bytes[](1);\r\n        dynargs[0] = args[0];\r\n        return oraclize_query(datasource, dynargs);\r\n    }\r\n\r\n    function oraclize_query(uint timestamp, string datasource, bytes[1] args) oraclizeAPI internal returns (bytes32 id) {\r\n        bytes[] memory dynargs = new bytes[](1);\r\n        dynargs[0] = args[0];\r\n        return oraclize_query(timestamp, datasource, dynargs);\r\n    }\r\n\r\n    function oraclize_query(uint timestamp, string datasource, bytes[1] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\r\n        bytes[] memory dynargs = new bytes[](1);\r\n        dynargs[0] = args[0];\r\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\r\n    }\r\n\r\n    function oraclize_query(string datasource, bytes[1] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\r\n        bytes[] memory dynargs = new bytes[](1);\r\n        dynargs[0] = args[0];\r\n        return oraclize_query(datasource, dynargs, gaslimit);\r\n    }\r\n\r\n    function oraclize_query(string datasource, bytes[2] args) oraclizeAPI internal returns (bytes32 id) {\r\n        bytes[] memory dynargs = new bytes[](2);\r\n        dynargs[0] = args[0];\r\n        dynargs[1] = args[1];\r\n        return oraclize_query(datasource, dynargs);\r\n    }\r\n\r\n    function oraclize_query(uint timestamp, string datasource, bytes[2] args) oraclizeAPI internal returns (bytes32 id) {\r\n        bytes[] memory dynargs = new bytes[](2);\r\n        dynargs[0] = args[0];\r\n        dynargs[1] = args[1];\r\n        return oraclize_query(timestamp, datasource, dynargs);\r\n    }\r\n\r\n    function oraclize_query(uint timestamp, string datasource, bytes[2] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\r\n        bytes[] memory dynargs = new bytes[](2);\r\n        dynargs[0] = args[0];\r\n        dynargs[1] = args[1];\r\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\r\n    }\r\n\r\n    function oraclize_query(string datasource, bytes[2] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\r\n        bytes[] memory dynargs = new bytes[](2);\r\n        dynargs[0] = args[0];\r\n        dynargs[1] = args[1];\r\n        return oraclize_query(datasource, dynargs, gaslimit);\r\n    }\r\n\r\n    function oraclize_query(string datasource, bytes[3] args) oraclizeAPI internal returns (bytes32 id) {\r\n        bytes[] memory dynargs = new bytes[](3);\r\n        dynargs[0] = args[0];\r\n        dynargs[1] = args[1];\r\n        dynargs[2] = args[2];\r\n        return oraclize_query(datasource, dynargs);\r\n    }\r\n\r\n    function oraclize_query(uint timestamp, string datasource, bytes[3] args) oraclizeAPI internal returns (bytes32 id) {\r\n        bytes[] memory dynargs = new bytes[](3);\r\n        dynargs[0] = args[0];\r\n        dynargs[1] = args[1];\r\n        dynargs[2] = args[2];\r\n        return oraclize_query(timestamp, datasource, dynargs);\r\n    }\r\n\r\n    function oraclize_query(uint timestamp, string datasource, bytes[3] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\r\n        bytes[] memory dynargs = new bytes[](3);\r\n        dynargs[0] = args[0];\r\n        dynargs[1] = args[1];\r\n        dynargs[2] = args[2];\r\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\r\n    }\r\n\r\n    function oraclize_query(string datasource, bytes[3] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\r\n        bytes[] memory dynargs = new bytes[](3);\r\n        dynargs[0] = args[0];\r\n        dynargs[1] = args[1];\r\n        dynargs[2] = args[2];\r\n        return oraclize_query(datasource, dynargs, gaslimit);\r\n    }\r\n\r\n    function oraclize_query(string datasource, bytes[4] args) oraclizeAPI internal returns (bytes32 id) {\r\n        bytes[] memory dynargs = new bytes[](4);\r\n        dynargs[0] = args[0];\r\n        dynargs[1] = args[1];\r\n        dynargs[2] = args[2];\r\n        dynargs[3] = args[3];\r\n        return oraclize_query(datasource, dynargs);\r\n    }\r\n\r\n    function oraclize_query(uint timestamp, string datasource, bytes[4] args) oraclizeAPI internal returns (bytes32 id) {\r\n        bytes[] memory dynargs = new bytes[](4);\r\n        dynargs[0] = args[0];\r\n        dynargs[1] = args[1];\r\n        dynargs[2] = args[2];\r\n        dynargs[3] = args[3];\r\n        return oraclize_query(timestamp, datasource, dynargs);\r\n    }\r\n\r\n    function oraclize_query(uint timestamp, string datasource, bytes[4] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\r\n        bytes[] memory dynargs = new bytes[](4);\r\n        dynargs[0] = args[0];\r\n        dynargs[1] = args[1];\r\n        dynargs[2] = args[2];\r\n        dynargs[3] = args[3];\r\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\r\n    }\r\n\r\n    function oraclize_query(string datasource, bytes[4] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\r\n        bytes[] memory dynargs = new bytes[](4);\r\n        dynargs[0] = args[0];\r\n        dynargs[1] = args[1];\r\n        dynargs[2] = args[2];\r\n        dynargs[3] = args[3];\r\n        return oraclize_query(datasource, dynargs, gaslimit);\r\n    }\r\n\r\n    function oraclize_query(string datasource, bytes[5] args) oraclizeAPI internal returns (bytes32 id) {\r\n        bytes[] memory dynargs = new bytes[](5);\r\n        dynargs[0] = args[0];\r\n        dynargs[1] = args[1];\r\n        dynargs[2] = args[2];\r\n        dynargs[3] = args[3];\r\n        dynargs[4] = args[4];\r\n        return oraclize_query(datasource, dynargs);\r\n    }\r\n\r\n    function oraclize_query(uint timestamp, string datasource, bytes[5] args) oraclizeAPI internal returns (bytes32 id) {\r\n        bytes[] memory dynargs = new bytes[](5);\r\n        dynargs[0] = args[0];\r\n        dynargs[1] = args[1];\r\n        dynargs[2] = args[2];\r\n        dynargs[3] = args[3];\r\n        dynargs[4] = args[4];\r\n        return oraclize_query(timestamp, datasource, dynargs);\r\n    }\r\n\r\n    function oraclize_query(uint timestamp, string datasource, bytes[5] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\r\n        bytes[] memory dynargs = new bytes[](5);\r\n        dynargs[0] = args[0];\r\n        dynargs[1] = args[1];\r\n        dynargs[2] = args[2];\r\n        dynargs[3] = args[3];\r\n        dynargs[4] = args[4];\r\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\r\n    }\r\n\r\n    function oraclize_query(string datasource, bytes[5] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\r\n        bytes[] memory dynargs = new bytes[](5);\r\n        dynargs[0] = args[0];\r\n        dynargs[1] = args[1];\r\n        dynargs[2] = args[2];\r\n        dynargs[3] = args[3];\r\n        dynargs[4] = args[4];\r\n        return oraclize_query(datasource, dynargs, gaslimit);\r\n    }\r\n\r\n    function oraclize_cbAddress() oraclizeAPI internal returns (address){\r\n        return oraclize.cbAddress();\r\n    }\r\n\r\n    function oraclize_setProof(byte proofP) oraclizeAPI internal {\r\n        return oraclize.setProofType(proofP);\r\n    }\r\n\r\n    function oraclize_setCustomGasPrice(uint gasPrice) oraclizeAPI internal {\r\n        return oraclize.setCustomGasPrice(gasPrice);\r\n    }\r\n\r\n    function oraclize_randomDS_getSessionPubKeyHash() oraclizeAPI internal returns (bytes32){\r\n        return oraclize.randomDS_getSessionPubKeyHash();\r\n    }\r\n\r\n    function getCodeSize(address _addr) constant internal returns (uint _size) {\r\n        assembly {\r\n            _size := extcodesize(_addr)\r\n        }\r\n    }\r\n\r\n    function strConcat(string _a, string _b, string _c, string _d, string _e) internal pure returns (string) {\r\n        bytes memory _ba = bytes(_a);\r\n        bytes memory _bb = bytes(_b);\r\n        bytes memory _bc = bytes(_c);\r\n        bytes memory _bd = bytes(_d);\r\n        bytes memory _be = bytes(_e);\r\n        string memory abcde = new string(_ba.length + _bb.length + _bc.length + _bd.length + _be.length);\r\n        bytes memory babcde = bytes(abcde);\r\n        uint k = 0;\r\n        for (uint i = 0; i < _ba.length; i++) babcde[k++] = _ba[i];\r\n        for (i = 0; i < _bb.length; i++) babcde[k++] = _bb[i];\r\n        for (i = 0; i < _bc.length; i++) babcde[k++] = _bc[i];\r\n        for (i = 0; i < _bd.length; i++) babcde[k++] = _bd[i];\r\n        for (i = 0; i < _be.length; i++) babcde[k++] = _be[i];\r\n        return string(babcde);\r\n    }\r\n\r\n    function strConcat(string _a, string _b, string _c, string _d) internal pure returns (string) {\r\n        return strConcat(_a, _b, _c, _d, \"\");\r\n    }\r\n\r\n    function strConcat(string _a, string _b, string _c) internal pure returns (string) {\r\n        return strConcat(_a, _b, _c, \"\", \"\");\r\n    }\r\n\r\n    function strConcat(string _a, string _b) internal pure returns (string) {\r\n        return strConcat(_a, _b, \"\", \"\", \"\");\r\n    }\r\n\r\n    // parseInt\r\n    function parseInt(string _a) internal pure returns (uint) {\r\n        return parseInt(_a, 0);\r\n    }\r\n\r\n    // parseInt(parseFloat*10^_b)\r\n    function parseInt(string _a, uint _b) internal pure returns (uint) {\r\n        bytes memory bresult = bytes(_a);\r\n        uint mint = 0;\r\n        bool decimals = false;\r\n        for (uint i = 0; i < bresult.length; i++) {\r\n            if ((bresult[i] >= 48) && (bresult[i] <= 57)) {\r\n                if (decimals) {\r\n                    if (_b == 0) break;\r\n                    else _b--;\r\n                }\r\n                mint *= 10;\r\n                mint += uint(bresult[i]) - 48;\r\n            } else if (bresult[i] == 46) decimals = true;\r\n        }\r\n        if (_b > 0) mint *= 10 ** _b;\r\n        return mint;\r\n    }\r\n\r\n    function stra2cbor(string[] arr) internal pure returns (bytes) {\r\n        uint arrlen = arr.length;\r\n\r\n        // get correct cbor output length\r\n        uint outputlen = 0;\r\n        bytes[] memory elemArray = new bytes[](arrlen);\r\n        for (uint i = 0; i < arrlen; i++) {\r\n            elemArray[i] = (bytes(arr[i]));\r\n            outputlen += elemArray[i].length + (elemArray[i].length - 1) / 23 + 3;\r\n            //+3 accounts for paired identifier types\r\n        }\r\n        uint ctr = 0;\r\n        uint cborlen = arrlen + 0x80;\r\n        outputlen += byte(cborlen).length;\r\n        bytes memory res = new bytes(outputlen);\r\n\r\n        while (byte(cborlen).length > ctr) {\r\n            res[ctr] = byte(cborlen)[ctr];\r\n            ctr++;\r\n        }\r\n        for (i = 0; i < arrlen; i++) {\r\n            res[ctr] = 0x5F;\r\n            ctr++;\r\n            for (uint x = 0; x < elemArray[i].length; x++) {\r\n                // if there's a bug with larger strings, this may be the culprit\r\n                if (x % 23 == 0) {\r\n                    uint elemcborlen = elemArray[i].length - x >= 24 ? 23 : elemArray[i].length - x;\r\n                    elemcborlen += 0x40;\r\n                    uint lctr = ctr;\r\n                    while (byte(elemcborlen).length > ctr - lctr) {\r\n                        res[ctr] = byte(elemcborlen)[ctr - lctr];\r\n                        ctr++;\r\n                    }\r\n                }\r\n                res[ctr] = elemArray[i][x];\r\n                ctr++;\r\n            }\r\n            res[ctr] = 0xFF;\r\n            ctr++;\r\n        }\r\n        return res;\r\n    }\r\n\r\n    function ba2cbor(bytes[] arr) internal pure returns (bytes) {\r\n        uint arrlen = arr.length;\r\n\r\n        // get correct cbor output length\r\n        uint outputlen = 0;\r\n        bytes[] memory elemArray = new bytes[](arrlen);\r\n        for (uint i = 0; i < arrlen; i++) {\r\n            elemArray[i] = (bytes(arr[i]));\r\n            outputlen += elemArray[i].length + (elemArray[i].length - 1) / 23 + 3;\r\n            //+3 accounts for paired identifier types\r\n        }\r\n        uint ctr = 0;\r\n        uint cborlen = arrlen + 0x80;\r\n        outputlen += byte(cborlen).length;\r\n        bytes memory res = new bytes(outputlen);\r\n\r\n        while (byte(cborlen).length > ctr) {\r\n            res[ctr] = byte(cborlen)[ctr];\r\n            ctr++;\r\n        }\r\n        for (i = 0; i < arrlen; i++) {\r\n            res[ctr] = 0x5F;\r\n            ctr++;\r\n            for (uint x = 0; x < elemArray[i].length; x++) {\r\n                // if there's a bug with larger strings, this may be the culprit\r\n                if (x % 23 == 0) {\r\n                    uint elemcborlen = elemArray[i].length - x >= 24 ? 23 : elemArray[i].length - x;\r\n                    elemcborlen += 0x40;\r\n                    uint lctr = ctr;\r\n                    while (byte(elemcborlen).length > ctr - lctr) {\r\n                        res[ctr] = byte(elemcborlen)[ctr - lctr];\r\n                        ctr++;\r\n                    }\r\n                }\r\n                res[ctr] = elemArray[i][x];\r\n                ctr++;\r\n            }\r\n            res[ctr] = 0xFF;\r\n            ctr++;\r\n        }\r\n        return res;\r\n    }\r\n\r\n\r\n    string oraclize_network_name;\r\n\r\n    function oraclize_setNetworkName(string _network_name) internal {\r\n        oraclize_network_name = _network_name;\r\n    }\r\n\r\n    function oraclize_getNetworkName() internal view returns (string) {\r\n        return oraclize_network_name;\r\n    }\r\n\r\n    function oraclize_newRandomDSQuery(uint _delay, uint _nbytes, uint _customGasLimit) internal returns (bytes32){\r\n        require((_nbytes > 0) && (_nbytes <= 32));\r\n        bytes memory nbytes = new bytes(1);\r\n        nbytes[0] = byte(_nbytes);\r\n        bytes memory unonce = new bytes(32);\r\n        bytes memory sessionKeyHash = new bytes(32);\r\n        bytes32 sessionKeyHash_bytes32 = oraclize_randomDS_getSessionPubKeyHash();\r\n        assembly {\r\n            mstore(unonce, 0x20)\r\n            mstore(add(unonce, 0x20), xor(blockhash(sub(number, 1)), xor(coinbase, timestamp)))\r\n            mstore(sessionKeyHash, 0x20)\r\n            mstore(add(sessionKeyHash, 0x20), sessionKeyHash_bytes32)\r\n        }\r\n        bytes[3] memory args = [unonce, nbytes, sessionKeyHash];\r\n        bytes32 queryId = oraclize_query(_delay, \"random\", args, _customGasLimit);\r\n        oraclize_randomDS_setCommitment(queryId, keccak256(bytes8(_delay), args[1], sha256(args[0]), args[2]));\r\n        return queryId;\r\n    }\r\n\r\n    function oraclize_randomDS_setCommitment(bytes32 queryId, bytes32 commitment) internal {\r\n        oraclize_randomDS_args[queryId] = commitment;\r\n    }\r\n\r\n    mapping(bytes32 => bytes32) oraclize_randomDS_args;\r\n    mapping(bytes32 => bool) oraclize_randomDS_sessionKeysHashVerified;\r\n\r\n    function verifySig(bytes32 tosignh, bytes dersig, bytes pubkey) internal returns (bool){\r\n        bool sigok;\r\n        address signer;\r\n\r\n        bytes32 sigr;\r\n        bytes32 sigs;\r\n\r\n        bytes memory sigr_ = new bytes(32);\r\n        uint offset = 4 + (uint(dersig[3]) - 0x20);\r\n        sigr_ = copyBytes(dersig, offset, 32, sigr_, 0);\r\n        bytes memory sigs_ = new bytes(32);\r\n        offset += 32 + 2;\r\n        sigs_ = copyBytes(dersig, offset + (uint(dersig[offset - 1]) - 0x20), 32, sigs_, 0);\r\n\r\n        assembly {\r\n            sigr := mload(add(sigr_, 32))\r\n            sigs := mload(add(sigs_, 32))\r\n        }\r\n\r\n\r\n        (sigok, signer) = safer_ecrecover(tosignh, 27, sigr, sigs);\r\n        if (address(keccak256(pubkey)) == signer) return true;\r\n        else {\r\n            (sigok, signer) = safer_ecrecover(tosignh, 28, sigr, sigs);\r\n            return (address(keccak256(pubkey)) == signer);\r\n        }\r\n    }\r\n\r\n    function oraclize_randomDS_proofVerify__sessionKeyValidity(bytes proof, uint sig2offset) internal returns (bool) {\r\n        bool sigok;\r\n\r\n        // Step 6: verify the attestation signature, APPKEY1 must sign the sessionKey from the correct ledger app (CODEHASH)\r\n        bytes memory sig2 = new bytes(uint(proof[sig2offset + 1]) + 2);\r\n        copyBytes(proof, sig2offset, sig2.length, sig2, 0);\r\n\r\n        bytes memory appkey1_pubkey = new bytes(64);\r\n        copyBytes(proof, 3 + 1, 64, appkey1_pubkey, 0);\r\n\r\n        bytes memory tosign2 = new bytes(1 + 65 + 32);\r\n        tosign2[0] = byte(1);\r\n        //role\r\n        copyBytes(proof, sig2offset - 65, 65, tosign2, 1);\r\n        bytes memory CODEHASH = hex\"fd94fa71bc0ba10d39d464d0d8f465efeef0a2764e3887fcc9df41ded20f505c\";\r\n        copyBytes(CODEHASH, 0, 32, tosign2, 1 + 65);\r\n        sigok = verifySig(sha256(tosign2), sig2, appkey1_pubkey);\r\n\r\n        if (sigok == false) return false;\r\n\r\n\r\n        // Step 7: verify the APPKEY1 provenance (must be signed by Ledger)\r\n        bytes memory LEDGERKEY = hex\"7fb956469c5c9b89840d55b43537e66a98dd4811ea0a27224272c2e5622911e8537a2f8e86a46baec82864e98dd01e9ccc2f8bc5dfc9cbe5a91a290498dd96e4\";\r\n\r\n        bytes memory tosign3 = new bytes(1 + 65);\r\n        tosign3[0] = 0xFE;\r\n        copyBytes(proof, 3, 65, tosign3, 1);\r\n\r\n        bytes memory sig3 = new bytes(uint(proof[3 + 65 + 1]) + 2);\r\n        copyBytes(proof, 3 + 65, sig3.length, sig3, 0);\r\n\r\n        sigok = verifySig(sha256(tosign3), sig3, LEDGERKEY);\r\n\r\n        return sigok;\r\n    }\r\n\r\n    modifier oraclize_randomDS_proofVerify(bytes32 _queryId, string _result, bytes _proof) {\r\n        // Step 1: the prefix has to match 'LP\\x01' (Ledger Proof version 1)\r\n        require((_proof[0] == \"L\") && (_proof[1] == \"P\") && (_proof[2] == 1));\r\n\r\n        bool proofVerified = oraclize_randomDS_proofVerify__main(_proof, _queryId, bytes(_result), oraclize_getNetworkName());\r\n        require(proofVerified);\r\n\r\n        _;\r\n    }\r\n\r\n    function oraclize_randomDS_proofVerify__returnCode(bytes32 _queryId, string _result, bytes _proof) internal returns (uint8){\r\n        // Step 1: the prefix has to match 'LP\\x01' (Ledger Proof version 1)\r\n        if ((_proof[0] != \"L\") || (_proof[1] != \"P\") || (_proof[2] != 1)) return 1;\r\n\r\n        bool proofVerified = oraclize_randomDS_proofVerify__main(_proof, _queryId, bytes(_result), oraclize_getNetworkName());\r\n        if (proofVerified == false) return 2;\r\n\r\n        return 0;\r\n    }\r\n\r\n    function matchBytes32Prefix(bytes32 content, bytes prefix) internal pure returns (bool){\r\n        bool match_ = true;\r\n\r\n        for (uint256 i = 0; i < prefix.length; i++) {\r\n            if (content[i] != prefix[i]) match_ = false;\r\n        }\r\n\r\n        return match_;\r\n    }\r\n\r\n    function oraclize_randomDS_proofVerify__main(bytes proof, bytes32 queryId, bytes result, string context_name) internal returns (bool){\r\n        bool checkok;\r\n\r\n\r\n        // Step 2: the unique keyhash has to match with the sha256 of (context name + queryId)\r\n        uint ledgerProofLength = 3 + 65 + (uint(proof[3 + 65 + 1]) + 2) + 32;\r\n        bytes memory keyhash = new bytes(32);\r\n        copyBytes(proof, ledgerProofLength, 32, keyhash, 0);\r\n        checkok = (keccak256(keyhash) == keccak256(sha256(context_name, queryId)));\r\n        if (checkok == false) return false;\r\n\r\n        bytes memory sig1 = new bytes(uint(proof[ledgerProofLength + (32 + 8 + 1 + 32) + 1]) + 2);\r\n        copyBytes(proof, ledgerProofLength + (32 + 8 + 1 + 32), sig1.length, sig1, 0);\r\n\r\n\r\n        // Step 3: we assume sig1 is valid (it will be verified during step 5) and we verify if 'result' is the prefix of sha256(sig1)\r\n        checkok = matchBytes32Prefix(sha256(sig1), result);\r\n        if (checkok == false) return false;\r\n\r\n\r\n        // Step 4: commitment match verification, keccak256(delay, nbytes, unonce, sessionKeyHash) == commitment in storage.\r\n        // This is to verify that the computed args match with the ones specified in the query.\r\n        bytes memory commitmentSlice1 = new bytes(8 + 1 + 32);\r\n        copyBytes(proof, ledgerProofLength + 32, 8 + 1 + 32, commitmentSlice1, 0);\r\n\r\n        bytes memory sessionPubkey = new bytes(64);\r\n        uint sig2offset = ledgerProofLength + 32 + (8 + 1 + 32) + sig1.length + 65;\r\n        copyBytes(proof, sig2offset - 64, 64, sessionPubkey, 0);\r\n\r\n        bytes32 sessionPubkeyHash = sha256(sessionPubkey);\r\n        if (oraclize_randomDS_args[queryId] == keccak256(commitmentSlice1, sessionPubkeyHash)) {//unonce, nbytes and sessionKeyHash match\r\n            delete oraclize_randomDS_args[queryId];\r\n        } else return false;\r\n\r\n\r\n        // Step 5: validity verification for sig1 (keyhash and args signed with the sessionKey)\r\n        bytes memory tosign1 = new bytes(32 + 8 + 1 + 32);\r\n        copyBytes(proof, ledgerProofLength, 32 + 8 + 1 + 32, tosign1, 0);\r\n        checkok = verifySig(sha256(tosign1), sig1, sessionPubkey);\r\n        if (checkok == false) return false;\r\n\r\n        // verify if sessionPubkeyHash was verified already, if not.. let's do it!\r\n        if (oraclize_randomDS_sessionKeysHashVerified[sessionPubkeyHash] == false) {\r\n            oraclize_randomDS_sessionKeysHashVerified[sessionPubkeyHash] = oraclize_randomDS_proofVerify__sessionKeyValidity(proof, sig2offset);\r\n        }\r\n\r\n        return oraclize_randomDS_sessionKeysHashVerified[sessionPubkeyHash];\r\n    }\r\n\r\n\r\n    // the following function has been written by Alex Beregszaszi (@axic), use it under the terms of the MIT license\r\n    function copyBytes(bytes from, uint fromOffset, uint length, bytes to, uint toOffset) internal pure returns (bytes) {\r\n        uint minLength = length + toOffset;\r\n\r\n        // Buffer too small\r\n        require(to.length >= minLength);\r\n        // Should be a better way?\r\n\r\n        // NOTE: the offset 32 is added to skip the `size` field of both bytes variables\r\n        uint i = 32 + fromOffset;\r\n        uint j = 32 + toOffset;\r\n\r\n        while (i < (32 + fromOffset + length)) {\r\n            assembly {\r\n                let tmp := mload(add(from, i))\r\n                mstore(add(to, j), tmp)\r\n            }\r\n            i += 32;\r\n            j += 32;\r\n        }\r\n\r\n        return to;\r\n    }\r\n\r\n    // the following function has been written by Alex Beregszaszi (@axic), use it under the terms of the MIT license\r\n    // Duplicate Solidity's ecrecover, but catching the CALL return value\r\n    function safer_ecrecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal returns (bool, address) {\r\n        bool ret;\r\n        address addr;\r\n\r\n        assembly {\r\n            let size := mload(0x40)\r\n            mstore(size, hash)\r\n            mstore(add(size, 32), v)\r\n            mstore(add(size, 64), r)\r\n            mstore(add(size, 96), s)\r\n\r\n        // NOTE: we can reuse the request memory because we deal with\r\n        //       the return code\r\n            ret := call(3000, 1, 0, size, 128, size, 32)\r\n            addr := mload(size)\r\n        }\r\n\r\n        return (ret, addr);\r\n    }\r\n\r\n    // the following function has been written by Alex Beregszaszi (@axic), use it under the terms of the MIT license\r\n    function ecrecovery(bytes32 hash, bytes sig) internal returns (bool, address) {\r\n        bytes32 r;\r\n        bytes32 s;\r\n        uint8 v;\r\n\r\n        if (sig.length != 65)\r\n            return (false, 0);\r\n\r\n        // The signature format is a compact form of:\r\n        //   {bytes32 r}{bytes32 s}{uint8 v}\r\n        // Compact means, uint8 is not padded to 32 bytes.\r\n        assembly {\r\n            r := mload(add(sig, 32))\r\n            s := mload(add(sig, 64))\r\n\r\n        // Here we are loading the last 32 bytes. We exploit the fact that\r\n        // 'mload' will pad with zeroes if we overread.\r\n        // There is no 'mload8' to do this, but that would be nicer.\r\n            v := byte(0, mload(add(sig, 96)))\r\n\r\n        // Alternative solution:\r\n        // 'byte' is not working due to the Solidity parser, so lets\r\n        // use the second best option, 'and'\r\n        // v := and(mload(add(sig, 65)), 255)\r\n        }\r\n\r\n        // albeit non-transactional signatures are not specified by the YP, one would expect it\r\n        // to match the YP range of [27, 28]\r\n        //\r\n        // geth uses [0, 1] and some clients have followed. This might change, see:\r\n        //  https://github.com/ethereum/go-ethereum/issues/2053\r\n        if (v < 27)\r\n            v += 27;\r\n\r\n        if (v != 27 && v != 28)\r\n            return (false, 0);\r\n\r\n        return safer_ecrecover(hash, v, r, s);\r\n    }\r\n\r\n}\r\n// </ORACLIZE_API>\r\n\r\n\r\n/*\r\n * @title String & slice utility library for Solidity contracts.\r\n * @author Nick Johnson <arachnid@notdot.net>\r\n */\r\n\r\npragma solidity ^0.4.14;\r\n\r\nlibrary strings {\r\n    struct slice {\r\n        uint _len;\r\n        uint _ptr;\r\n    }\r\n\r\n    function memcpy(uint dest, uint src, uint len) private {\r\n        // Copy word-length chunks while possible\r\n        for (; len >= 32; len -= 32) {\r\n            assembly {\r\n                mstore(dest, mload(src))\r\n            }\r\n            dest += 32;\r\n            src += 32;\r\n        }\r\n\r\n        // Copy remaining bytes\r\n        uint mask = 256 ** (32 - len) - 1;\r\n        assembly {\r\n            let srcpart := and(mload(src), not(mask))\r\n            let destpart := and(mload(dest), mask)\r\n            mstore(dest, or(destpart, srcpart))\r\n        }\r\n    }\r\n\r\n    function toSlice(string self) internal returns (slice) {\r\n        uint ptr;\r\n        assembly {\r\n            ptr := add(self, 0x20)\r\n        }\r\n        return slice(bytes(self).length, ptr);\r\n    }\r\n    \r\n    function copy(slice self) internal returns (slice) {\r\n        return slice(self._len, self._ptr);\r\n    }\r\n\r\n    function toString(slice self) internal returns (string) {\r\n        var ret = new string(self._len);\r\n        uint retptr;\r\n        assembly {retptr := add(ret, 32)}\r\n\r\n        memcpy(retptr, self._ptr, self._len);\r\n        return ret;\r\n    }\r\n    \r\n    function beyond(slice self, slice needle) internal returns (slice) {\r\n        if (self._len < needle._len) {\r\n            return self;\r\n        }\r\n\r\n        bool equal = true;\r\n        if (self._ptr != needle._ptr) {\r\n            assembly {\r\n                let length := mload(needle)\r\n                let selfptr := mload(add(self, 0x20))\r\n                let needleptr := mload(add(needle, 0x20))\r\n                equal := eq(sha3(selfptr, length), sha3(needleptr, length))\r\n            }\r\n        }\r\n\r\n        if (equal) {\r\n            self._len -= needle._len;\r\n            self._ptr += needle._len;\r\n        }\r\n\r\n        return self;\r\n    }\r\n\r\n    function until(slice self, slice needle) internal returns (slice) {\r\n        if (self._len < needle._len) {\r\n            return self;\r\n        }\r\n\r\n        var selfptr = self._ptr + self._len - needle._len;\r\n        bool equal = true;\r\n        if (selfptr != needle._ptr) {\r\n            assembly {\r\n                let length := mload(needle)\r\n                let needleptr := mload(add(needle, 0x20))\r\n                equal := eq(keccak256(selfptr, length), keccak256(needleptr, length))\r\n            }\r\n        }\r\n\r\n        if (equal) {\r\n            self._len -= needle._len;\r\n        }\r\n\r\n        return self;\r\n    }\r\n\r\n    // Returns the memory address of the first byte of the first occurrence of\r\n    // `needle` in `self`, or the first byte after `self` if not found.\r\n    function findPtr(uint selflen, uint selfptr, uint needlelen, uint needleptr) private returns (uint) {\r\n        uint ptr;\r\n        uint idx;\r\n\r\n        if (needlelen <= selflen) {\r\n            if (needlelen <= 32) {\r\n                // Optimized assembly for 68 gas per byte on short strings\r\n                assembly {\r\n                    let mask := not(sub(exp(2, mul(8, sub(32, needlelen))), 1))\r\n                    let needledata := and(mload(needleptr), mask)\r\n                    let end := add(selfptr, sub(selflen, needlelen))\r\n                    ptr := selfptr\r\n                    loop :\r\n                    jumpi(exit, eq(and(mload(ptr), mask), needledata))\r\n                    ptr := add(ptr, 1)\r\n                    jumpi(loop, lt(sub(ptr, 1), end))\r\n                    ptr := add(selfptr, selflen)\r\n                    exit :\r\n                }\r\n                return ptr;\r\n            } else {\r\n                // For long needles, use hashing\r\n                bytes32 hash;\r\n                assembly {hash := sha3(needleptr, needlelen)}\r\n                ptr = selfptr;\r\n                for (idx = 0; idx <= selflen - needlelen; idx++) {\r\n                    bytes32 testHash;\r\n                    assembly {testHash := sha3(ptr, needlelen)}\r\n                    if (hash == testHash)\r\n                        return ptr;\r\n                    ptr += 1;\r\n                }\r\n            }\r\n        }\r\n        return selfptr + selflen;\r\n    }\r\n\r\n    function split(slice self, slice needle, slice token) internal returns (slice) {\r\n        uint ptr = findPtr(self._len, self._ptr, needle._len, needle._ptr);\r\n        token._ptr = self._ptr;\r\n        token._len = ptr - self._ptr;\r\n        if (ptr == self._ptr + self._len) {\r\n            // Not found\r\n            self._len = 0;\r\n        } else {\r\n            self._len -= token._len + needle._len;\r\n            self._ptr = ptr + needle._len;\r\n        }\r\n        return token;\r\n    }\r\n    \r\n    function split(slice self, slice needle) internal returns (slice token) {\r\n        split(self, needle, token);\r\n    }\r\n}\r\n\r\ncontract CryptoLotto is usingOraclize {\r\n    using strings for *;\r\n\r\n    address Owner;\r\n\r\n    uint public constant lottoPrice = 10 finney;\r\n    uint public constant duration = 1 days;\r\n\r\n    uint8 public constant lottoLength = 6;\r\n    uint8 public constant lottoLowestNumber = 1;\r\n    uint8 public constant lottoHighestNumber = 15;\r\n\r\n    uint8 public constant sixMatchPayoutInPercent = 77;\r\n    uint8 public constant bonusMatchPayoutInPercent = 11;\r\n    uint8 public constant fiveMatchPayoutInPercent = 11;\r\n    uint8 public constant ownerShareInPercent = 1;\r\n    uint8 public constant numTurnsToRevolve = 10;\r\n\r\n    string constant oraclizedQuery = \"Sort[randomsample [range [1, 15], 7]], randomsample [range [0, 6], 1]\";\r\n    string constant oraclizedQuerySource = \"WolframAlpha\";\r\n\r\n    bool public isLottoStarted = false;\r\n    uint32 public turn = 0;\r\n    uint32 public gasForOraclizedQuery = 600000;\r\n    uint256 public raisedAmount = 0;\r\n\r\n    uint8[] lottoNumbers = new uint8[](lottoLength);\r\n    uint8 bonusNumber;\r\n    enum lottoRank {NONCE, FIVE_MATCH, BONUS_MATCH, SIX_MATCH, DEFAULT}\r\n    uint256 public finishWhen;\r\n    uint256[] bettings;\r\n    uint256[] accNumBettings;\r\n    mapping(address => mapping(uint32 => uint64[])) tickets;\r\n\r\n    uint256[] public raisedAmounts;\r\n    uint256[] public untakenPrizeAmounts;\r\n    uint32[] encodedLottoResults;\r\n    uint32[] numFiveMatchWinners;\r\n    uint32[] numBonusMatchWinners;\r\n    uint32[] numSixMatchWinners;\r\n    uint32[] nonces;\r\n\r\n    uint64[] public timestamps;\r\n\r\n    bytes32 oracleCallbackId;\r\n\r\n    event LottoStart(uint32 turn);\r\n    event FundRaised(address buyer, uint256 value, uint256 raisedAmount);\r\n    event LottoNumbersAnnounced(uint8[] lottoNumbers, uint8 bonusNumber, uint256 raisedAmount, uint32 numFiveMatchWinners, uint32 numBonusMatchWinners, uint32 numSixMatchWinners);\r\n    event SixMatchPrizeTaken(address winner, uint256 prizeAmount);\r\n    event BonusMatchPrizeTaken(address winner, uint256 prizeAmount);\r\n    event FiveMatchPrizeTaken(address winner, uint256 prizeAmount);\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == Owner);\r\n        _;\r\n    }\r\n\r\n    modifier onlyOracle {\r\n        require(msg.sender == oraclize_cbAddress());\r\n        _;\r\n    }\r\n\r\n    modifier onlyWhenLottoNotStarted {\r\n        require(isLottoStarted == false);\r\n        _;\r\n    }\r\n\r\n    modifier onlyWhenLottoStarted {\r\n        require(isLottoStarted == true);\r\n        _;\r\n    }\r\n\r\n    function CryptoLotto() {\r\n        Owner = msg.sender;\r\n    }\r\n\r\n    function launchLotto() onlyOwner {\r\n        oracleCallbackId = oraclize_query(oraclizedQuerySource, oraclizedQuery, gasForOraclizedQuery);\r\n    }\r\n\r\n    // Emergency function to call only when the turn missed oraclized_query becaused of gas management failure and no chance to resume by itself.\r\n    function resumeLotto() onlyOwner {\r\n        require(finishWhen < now);\r\n        oracleCallbackId = oraclize_query(oraclizedQuerySource, oraclizedQuery, gasForOraclizedQuery);\r\n    }\r\n\r\n    function setGasForOraclizedQuery(uint32 _gasLimit) onlyOwner {\r\n        gasForOraclizedQuery = _gasLimit;\r\n    }\r\n\r\n    function __callback(bytes32 myid, string result) onlyOracle {\r\n        require(myid == oracleCallbackId);\r\n        \r\n        if (turn > 0)\r\n            _finishLotto();\r\n        _setLottoNumbers(result);\r\n        _startLotto();\r\n    }\r\n\r\n    function _startLotto() onlyWhenLottoNotStarted internal {\r\n        turn++;\r\n        finishWhen = now + duration;\r\n        oracleCallbackId = oraclize_query(duration, oraclizedQuerySource, oraclizedQuery, gasForOraclizedQuery);\r\n        isLottoStarted = true;\r\n        numFiveMatchWinners.push(0);\r\n        numBonusMatchWinners.push(0);\r\n        numSixMatchWinners.push(0);\r\n        nonces.push(0);\r\n        LottoStart(turn);\r\n    }\r\n\r\n    function _finishLotto() onlyWhenLottoStarted internal {\r\n        isLottoStarted = false;\r\n        _saveLottoResult();\r\n        LottoNumbersAnnounced(lottoNumbers, bonusNumber, raisedAmounts[turn - 1], numFiveMatchWinners[turn - 1], numBonusMatchWinners[turn - 1], numSixMatchWinners[turn - 1]);\r\n    }\r\n\r\n    function _setLottoNumbers(string _strData) onlyWhenLottoNotStarted internal {\r\n        uint8[] memory _lottoNumbers = new uint8[](lottoLength);\r\n        uint8 _bonusNumber;\r\n        var slicedString = _strData.toSlice();\r\n        slicedString.beyond(\"{{\".toSlice()).until(\"}\".toSlice());\r\n        var _strLottoNumbers = slicedString.split('}, {'.toSlice());\r\n\r\n        var _bonusNumberIndex = uint8(parseInt(slicedString.toString()));\r\n        uint8 _lottoLowestNumber = lottoLowestNumber;\r\n        uint8 _lottoHighestNumber = lottoHighestNumber;\r\n        uint8 _nonce = 0;\r\n\r\n        for (uint8 _index = 0; _index < lottoLength + 1; _index++) {\r\n            var splited = _strLottoNumbers.split(', '.toSlice());\r\n            if (_index == _bonusNumberIndex) {\r\n                bonusNumber = uint8(parseInt(splited.toString()));\r\n                _nonce = 1;\r\n                continue;\r\n            }\r\n            _lottoNumbers[_index - _nonce] = uint8(parseInt(splited.toString()));\r\n            require(_lottoNumbers[_index - _nonce] >= _lottoLowestNumber && _lottoNumbers[_index - _nonce] <= _lottoHighestNumber);\r\n            if (_index - _nonce > 0)\r\n                require(_lottoNumbers[_index - _nonce - 1] < _lottoNumbers[_index - _nonce]);\r\n            lottoNumbers[_index - _nonce] = _lottoNumbers[_index - _nonce];\r\n        }\r\n    }\r\n\r\n    function _saveLottoResult() onlyWhenLottoNotStarted internal {\r\n        uint32 _encodedLottoResult = 0;\r\n        var _raisedAmount = raisedAmount;\r\n\r\n        // lottoNumbers[6]          24 bits  [0..23]\r\n        for (uint8 _index = 0; _index < lottoNumbers.length; _index++) {\r\n            _encodedLottoResult |= uint32(lottoNumbers[_index]) << (_index * 4);\r\n        }\r\n\r\n        // bonusNumber               4 bits  [24..27]\r\n        _encodedLottoResult |= uint32(bonusNumber) << (24);\r\n\r\n        uint256 _totalPrizeAmount = 0;\r\n\r\n        if (numFiveMatchWinners[turn - 1] > 0)\r\n            _totalPrizeAmount += _raisedAmount * fiveMatchPayoutInPercent / 100;\r\n\r\n        if (numBonusMatchWinners[turn - 1] > 0)\r\n            _totalPrizeAmount += _raisedAmount * bonusMatchPayoutInPercent / 100;\r\n\r\n        if (numSixMatchWinners[turn - 1] > 0)\r\n            _totalPrizeAmount += _raisedAmount * sixMatchPayoutInPercent / 100;\r\n\r\n        raisedAmounts.push(_raisedAmount);\r\n        untakenPrizeAmounts.push(_totalPrizeAmount);\r\n        encodedLottoResults.push(_encodedLottoResult);\r\n        accNumBettings.push(bettings.length);\r\n        timestamps.push(uint64(now));\r\n\r\n        var _ownerShare = _raisedAmount * ownerShareInPercent / 100;\r\n        Owner.transfer(_ownerShare);\r\n\r\n        uint32 _numTurnsToRevolve = uint32(numTurnsToRevolve);\r\n        uint256 _amountToCarryOver = 0;\r\n        if (turn > _numTurnsToRevolve)\r\n            _amountToCarryOver = untakenPrizeAmounts[turn - _numTurnsToRevolve - 1];\r\n        raisedAmount = _raisedAmount - _totalPrizeAmount - _ownerShare + _amountToCarryOver;\r\n    }\r\n\r\n    function getLottoResult(uint256 _turn) constant returns (uint256, uint256, uint32, uint32, uint32) {\r\n        require(_turn < turn && _turn > 0);\r\n        return (raisedAmounts[_turn - 1], untakenPrizeAmounts[_turn - 1], numFiveMatchWinners[_turn - 1], numBonusMatchWinners[_turn - 1], numSixMatchWinners[_turn - 1]);\r\n    }\r\n\r\n    function getLottoNumbers(uint256 _turn) constant returns (uint8[], uint8) {\r\n        require(_turn < turn && _turn > 0);\r\n        var _encodedLottoResult = encodedLottoResults[_turn - 1];\r\n        uint8[] memory _lottoNumbers = new uint8[](lottoLength);\r\n        uint8 _bonusNumber;\r\n\r\n        for (uint8 _index = 0; _index < _lottoNumbers.length; _index++) {\r\n            _lottoNumbers[_index] = uint8((_encodedLottoResult >> (_index * 4)) & (2 ** 4 - 1));\r\n        }\r\n        _bonusNumber = uint8((_encodedLottoResult >> 24) & (2 ** 4 - 1));\r\n        return (_lottoNumbers, _bonusNumber);\r\n    }\r\n\r\n    function buyTickets(uint _numTickets, uint8[] _betNumbersList, bool _isAutoGenerated) payable onlyWhenLottoStarted {\r\n        require(finishWhen > now);\r\n        var _lottoLength = lottoLength;\r\n        require(_betNumbersList.length == _numTickets * _lottoLength);\r\n        uint _totalPrice = _numTickets * lottoPrice;\r\n        require(msg.value >= _totalPrice);\r\n\r\n        for (uint j = 0; j < _numTickets; j++) {\r\n            require(_betNumbersList[j * _lottoLength] >= lottoLowestNumber && _betNumbersList[(j + 1) * _lottoLength - 1] <= lottoHighestNumber);\r\n            for (uint _index = 0; _index < _lottoLength - 1; _index++) {\r\n                require(_betNumbersList[_index + j * _lottoLength] < _betNumbersList[_index + 1 + j * _lottoLength]);\r\n            }\r\n        }\r\n\r\n        uint8[] memory _betNumbers = new uint8[](lottoLength);\r\n        for (j = 0; j < _numTickets; j++) {\r\n            for (_index = 0; _index < _lottoLength - 1; _index++) {\r\n                _betNumbers[_index] = _betNumbersList[_index + j * _lottoLength];\r\n            }\r\n            _betNumbers[_index] = _betNumbersList[_index + j * _lottoLength];\r\n            _saveBettingAndTicket(_betNumbers, _isAutoGenerated);\r\n        }\r\n\r\n        raisedAmount += _totalPrice;\r\n        Owner.transfer(msg.value - _totalPrice);\r\n        FundRaised(msg.sender, msg.value, raisedAmount);\r\n    }\r\n\r\n    function _getLottoRank(uint8[] _betNumbers) internal constant returns (lottoRank) {\r\n        uint8 _lottoLength = lottoLength;\r\n        uint8[] memory _lottoNumbers = new uint8[](_lottoLength);\r\n        uint8 _indexLotto = 0;\r\n        uint8 _indexBet = 0;\r\n        uint8 _numMatch = 0;\r\n\r\n        for (uint8 i = 0; i < _lottoLength; i++) {\r\n            _lottoNumbers[i] = lottoNumbers[i];\r\n        }\r\n\r\n        while (_indexLotto < _lottoLength && _indexBet < _lottoLength) {\r\n            if (_betNumbers[_indexBet] == _lottoNumbers[_indexLotto]) {\r\n                _numMatch++;\r\n                _indexBet++;\r\n                _indexLotto++;\r\n                if (_numMatch > 4)\r\n                    for (uint8 _burner = 0; _burner < 6; _burner++) {}\r\n                continue;\r\n            }\r\n            else if (_betNumbers[_indexBet] < _lottoNumbers[_indexLotto]) {\r\n                _indexBet++;\r\n                continue;\r\n            }\r\n\r\n            else {\r\n                _indexLotto++;\r\n                continue;\r\n            }\r\n        }\r\n\r\n        if (_numMatch == _lottoLength - 1) {\r\n            uint8 _bonusNumber = bonusNumber;\r\n            for (uint8 _index = 0; _index < lottoLength; _index++) {\r\n                if (_betNumbers[_index] == _bonusNumber) {\r\n                    for (_burner = 0; _burner < 6; _burner++) {}\r\n                    return lottoRank.BONUS_MATCH;\r\n                }\r\n            }\r\n            return lottoRank.FIVE_MATCH;\r\n        }\r\n        else if (_numMatch == _lottoLength) {\r\n            for (_burner = 0; _burner < 12; _burner++) {}\r\n            return lottoRank.SIX_MATCH;\r\n        }\r\n\r\n        return lottoRank.DEFAULT;\r\n    }\r\n\r\n    function _saveBettingAndTicket(uint8[] _betNumbers, bool _isAutoGenerated) internal onlyWhenLottoStarted {\r\n        require(_betNumbers.length == 6 && lottoHighestNumber <= 16);\r\n        uint256 _encodedBetting = 0;\r\n        uint64 _encodedTicket = 0;\r\n        uint256 _nonce256 = 0;\r\n        uint64 _nonce64 = 0;\r\n\r\n        // isTaken                   1 bit      betting[0]                  ticket[0]\r\n        // isAutoGenerated           1 bit      betting[1]                  ticket[1]\r\n        // betNumbers[6]            24 bits     betting[2..25]              ticket[2..25]\r\n        // lottoRank.FIVE_MATCH      1 bit      betting[26]                 ticket[26]\r\n        // lottoRank.BONUS_MATCH     1 bit      betting[27]                 ticket[27]\r\n        // lottoRank.SIX_MATCH       1 bit      betting[28]                 ticket[28]\r\n        // sender address          160 bits     betting[29..188]\r\n        // timestamp                36 bits     betting[189..224]           ticket[29..64]\r\n\r\n        // isAutoGenerated\r\n        if (_isAutoGenerated) {\r\n            _encodedBetting |= uint256(1) << 1;\r\n            _encodedTicket |= uint64(1) << 1;\r\n        }\r\n\r\n        // betNumbers[6]\r\n        for (uint8 _index = 0; _index < _betNumbers.length; _index++) {\r\n            uint256 _betNumber = uint256(_betNumbers[_index]) << (_index * 4 + 2);\r\n            _encodedBetting |= _betNumber;\r\n            _encodedTicket |= uint64(_betNumber);\r\n        }\r\n\r\n        // lottoRank.FIVE_MATCH, lottoRank.BONUS_MATCH, lottoRank.SIX_MATCH\r\n        lottoRank _lottoRank = _getLottoRank(_betNumbers);\r\n        if (_lottoRank == lottoRank.FIVE_MATCH) {\r\n            numFiveMatchWinners[turn - 1]++;\r\n            _encodedBetting |= uint256(1) << 26;\r\n            _encodedTicket |= uint64(1) << 26;\r\n        }\r\n        else if (_lottoRank == lottoRank.BONUS_MATCH) {\r\n            numBonusMatchWinners[turn - 1]++;\r\n            _encodedBetting |= uint256(1) << 27;\r\n            _encodedTicket |= uint64(1) << 27;\r\n        }\r\n        else if (_lottoRank == lottoRank.SIX_MATCH) {\r\n            numSixMatchWinners[turn - 1]++;\r\n            _encodedBetting |= uint256(1) << 28;\r\n            _encodedTicket |= uint64(1) << 28;\r\n        } else {\r\n            nonces[turn - 1]++;\r\n            _nonce256 |= uint256(1) << 29;\r\n            _nonce64 |= uint64(1) << 29;\r\n        }\r\n\r\n        // sender address\r\n        _encodedBetting |= uint256(msg.sender) << 29;\r\n\r\n        // timestamp\r\n        _encodedBetting |= now << 189;\r\n        _encodedTicket |= uint64(now) << 29;\r\n\r\n        // push ticket\r\n        tickets[msg.sender][turn].push(_encodedTicket);\r\n        // push betting\r\n        bettings.push(_encodedBetting);\r\n    }\r\n\r\n    function getNumBettings() constant returns (uint256) {\r\n        return bettings.length;\r\n    }\r\n\r\n    function getTurn(uint256 _bettingId) constant returns (uint32) {\r\n        uint32 _turn = turn;\r\n        require(_turn > 0);\r\n        require(_bettingId < bettings.length);\r\n\r\n        if (_turn == 1 || _bettingId < accNumBettings[0])\r\n            return 1;\r\n        if (_bettingId >= accNumBettings[_turn - 2])\r\n            return _turn;\r\n\r\n        uint32 i = 0;\r\n        uint32 j = _turn - 1;\r\n        uint32 mid = 0;\r\n\r\n        while (i < j) {\r\n            mid = (i + j) / 2;\r\n\r\n            if (accNumBettings[mid] == _bettingId)\r\n                return mid + 2;\r\n\r\n            if (_bettingId < accNumBettings[mid]) {\r\n                if (mid > 0 && _bettingId > accNumBettings[mid - 1])\r\n                    return mid + 1;\r\n                j = mid;\r\n            }\r\n            else {\r\n                if (mid < _turn - 2 && _bettingId < accNumBettings[mid + 1])\r\n                    return mid + 2;\r\n                i = mid + 1;\r\n            }\r\n        }\r\n        return mid + 2;\r\n    }\r\n\r\n    function getBetting(uint256 i) constant returns (bool, bool, uint8[], lottoRank, uint32){\r\n        require(i < bettings.length);\r\n        uint256 _betting = bettings[i];\r\n\r\n        // isTaken                      1 bit      [0]\r\n        bool _isTaken;\r\n        if (_betting & 1 == 1)\r\n            _isTaken = true;\r\n        else\r\n            _isAutoGenerated = false;\r\n\r\n        // _isAutoGenerated             1 bit      [1]\r\n        bool _isAutoGenerated;\r\n        if ((_betting >> 1) & 1 == 1)\r\n            _isAutoGenerated = true;\r\n        else\r\n            _isAutoGenerated = false;\r\n\r\n        // 6 betNumbers                24 bits     [2..25]\r\n        uint8[] memory _betNumbers = new uint8[](lottoLength);\r\n        for (uint8 _index = 0; _index < lottoLength; _index++) {\r\n            _betNumbers[_index] = uint8((_betting >> (_index * 4 + 2)) & (2 ** 4 - 1));\r\n        }\r\n\r\n        //  _timestamp                   bits     [189..255]\r\n        uint128 _timestamp;\r\n        _timestamp = uint128((_betting >> 189) & (2 ** 67 - 1));\r\n\r\n        uint32 _turn = getTurn(i);\r\n        if (_turn == turn && isLottoStarted)\r\n            return (_isTaken, _isAutoGenerated, _betNumbers, lottoRank.NONCE, _turn);\r\n\r\n        // return lottoRank only when the turn is finished\r\n        // lottoRank                    3 bits     [26..28]\r\n        lottoRank _lottoRank = lottoRank.DEFAULT;\r\n        if ((_betting >> 26) & 1 == 1)\r\n            _lottoRank = lottoRank.FIVE_MATCH;\r\n        if ((_betting >> 27) & 1 == 1)\r\n            _lottoRank = lottoRank.BONUS_MATCH;\r\n        if ((_betting >> 28) & 1 == 1)\r\n            _lottoRank = lottoRank.SIX_MATCH;\r\n\r\n        return (_isTaken, _isAutoGenerated, _betNumbers, _lottoRank, _turn);\r\n    }\r\n\r\n    function getBettingExtra(uint256 i) constant returns (address, uint128){\r\n        require(i < bettings.length);\r\n        uint256 _betting = bettings[i];\r\n        uint128 _timestamp = uint128((_betting >> 189) & (2 ** 67 - 1));\r\n        address _beneficiary = address((_betting >> 29) & (2 ** 160 - 1));\r\n        return (_beneficiary, _timestamp);\r\n    }\r\n\r\n    function getMyResult(uint32 _turn) constant returns (uint256, uint32, uint32, uint32, uint256) {\r\n        require(_turn > 0);\r\n        if (_turn == turn)\r\n            require(!isLottoStarted);\r\n        else\r\n            require(_turn < turn);\r\n\r\n        uint256 _numMyTickets = tickets[msg.sender][_turn].length;\r\n        uint256 _totalPrizeAmount = 0;\r\n        uint64 _ticket;\r\n        uint32 _numSixMatchPrizes = 0;\r\n        uint32 _numBonusMatchPrizes = 0;\r\n        uint32 _numFiveMatchPrizes = 0;\r\n\r\n        if (_numMyTickets == 0) {\r\n            return (0, 0, 0, 0, 0);\r\n        }\r\n\r\n        for (uint256 _index = 0; _index < _numMyTickets; _index++) {\r\n            _ticket = tickets[msg.sender][_turn][_index];\r\n            if ((_ticket >> 26) & 1 == 1) {\r\n                _numFiveMatchPrizes++;\r\n                _totalPrizeAmount += _getFiveMatchPrizeAmount(_turn);\r\n            }\r\n            else if ((_ticket >> 27) & 1 == 1) {\r\n                _numBonusMatchPrizes++;\r\n                _totalPrizeAmount += _getBonusMatchPrizeAmount(_turn);\r\n            }\r\n            else if ((_ticket >> 28) & 1 == 1) {\r\n                _numSixMatchPrizes++;\r\n                _totalPrizeAmount += _getSixMatchPrizeAmount(_turn);\r\n            }\r\n        }\r\n        return (_numMyTickets, _numSixMatchPrizes, _numBonusMatchPrizes, _numFiveMatchPrizes, _totalPrizeAmount);\r\n    }\r\n\r\n    function getNumMyTickets(uint32 _turn) constant returns (uint256) {\r\n        require(_turn > 0 && _turn <= turn);\r\n        return tickets[msg.sender][_turn].length;\r\n    }\r\n\r\n    function getMyTicket(uint32 _turn, uint256 i) constant returns (bool, bool, uint8[], lottoRank, uint64){\r\n        require(_turn <= turn);\r\n        require(i < tickets[msg.sender][_turn].length);\r\n        uint64 _ticket = tickets[msg.sender][_turn][i];\r\n\r\n        // isTaken                   1 bit      ticket[0]\r\n        bool _isTaken = false;\r\n        if ((_ticket & 1) == 1)\r\n            _isTaken = true;\r\n\r\n        // isAutoGenerated           1 bit      ticket[1]\r\n        bool _isAutoGenerated = false;\r\n        if ((_ticket >> 1) & 1 == 1)\r\n            _isAutoGenerated = true;\r\n\r\n        // betNumbers[6]            24 bits     ticket[2..25]\r\n        uint8[] memory _betNumbers = new uint8[](lottoLength);\r\n        for (uint8 _index = 0; _index < lottoLength; _index++) {\r\n            _betNumbers[_index] = uint8((_ticket >> (_index * 4 + 2)) & (2 ** 4 - 1));\r\n        }\r\n\r\n        // timestamp                36 bits     ticket[29..64]\r\n        uint64 _timestamp = uint64((_ticket >> 29) & (2 ** 36 - 1));\r\n\r\n        if (_turn == turn)\r\n            return (_isTaken, _isAutoGenerated, _betNumbers, lottoRank.NONCE, _timestamp);\r\n\r\n        // return lottoRank only when the turn is finished\r\n\r\n        // lottoRank.FIVE_MATCH      1 bit      ticket[26]\r\n        // lottoRank.BONUS_MATCH     1 bit      ticket[27]\r\n        // lottoRank.SIX_MATCH       1 bit      ticket[28]\r\n        lottoRank _lottoRank = lottoRank.DEFAULT;\r\n        if ((_ticket >> 26) & 1 == 1)\r\n            _lottoRank = lottoRank.FIVE_MATCH;\r\n        if ((_ticket >> 27) & 1 == 1)\r\n            _lottoRank = lottoRank.BONUS_MATCH;\r\n        if ((_ticket >> 28) & 1 == 1)\r\n            _lottoRank = lottoRank.SIX_MATCH;\r\n\r\n        return (_isTaken, _isAutoGenerated, _betNumbers, _lottoRank, _timestamp);\r\n    }\r\n\r\n    function getMyUntakenPrizes(uint32 _turn) constant returns (uint32[]) {\r\n        require(_turn > 0 && _turn < turn);\r\n        uint256 _numMyTickets = tickets[msg.sender][_turn].length;\r\n\r\n        uint32[] memory _prizes = new uint32[](50);\r\n        uint256 _indexPrizes = 0;\r\n\r\n        for (uint16 _index; _index < _numMyTickets; _index++) {\r\n            uint64 _ticket = tickets[msg.sender][_turn][_index];\r\n            if (((_ticket >> 26) & 1 == 1) && (_ticket & 1 == 0))\r\n                _prizes[_indexPrizes++] = _index;\r\n            else if (((_ticket >> 27) & 1 == 1) && (_ticket & 1 == 0))\r\n                _prizes[_indexPrizes++] = _index;\r\n            else if (((_ticket >> 28) & 1 == 1) && (_ticket & 1 == 0))\r\n                _prizes[_indexPrizes++] = _index;\r\n            if (_indexPrizes >= 50) {\r\n                break;\r\n            }\r\n        }\r\n        uint32[] memory _retPrizes = new uint32[](_indexPrizes);\r\n\r\n        for (_index = 0; _index < _indexPrizes; _index++) {\r\n            _retPrizes[_index] = _prizes[_index];\r\n        }\r\n        return (_retPrizes);\r\n    }\r\n\r\n    function takePrize(uint32 _turn, uint256 i) {\r\n        require(_turn > 0 && _turn < turn);\r\n        if (turn > numTurnsToRevolve)\r\n            require(_turn >= turn - numTurnsToRevolve);\r\n\r\n        require(i < tickets[msg.sender][_turn].length);\r\n        var _ticket = tickets[msg.sender][_turn][i];\r\n\r\n        // isTaken must be false\r\n        require((_ticket & 1) == 0);\r\n\r\n        // lottoRank.FIVE_MATCH      1 bit   [26]\r\n        // lottoRank.BONUS_MATCH     1 bit   [27]\r\n        // lottoRank.SIX_MATCH       1 bit   [28]\r\n        if ((_ticket >> 26) & 1 == 1) {\r\n            uint256 _prizeAmount = _getFiveMatchPrizeAmount(_turn);\r\n            require(_prizeAmount > 0);\r\n            msg.sender.transfer(_prizeAmount);\r\n            FiveMatchPrizeTaken(msg.sender, _prizeAmount);\r\n            tickets[msg.sender][_turn][i] |= 1;\r\n            untakenPrizeAmounts[_turn - 1] -= _prizeAmount;\r\n        } else if ((_ticket >> 27) & 1 == 1) {\r\n            _prizeAmount = _getBonusMatchPrizeAmount(_turn);\r\n            require(_prizeAmount > 0);\r\n            msg.sender.transfer(_prizeAmount);\r\n            BonusMatchPrizeTaken(msg.sender, _prizeAmount);\r\n            tickets[msg.sender][_turn][i] |= 1;\r\n            untakenPrizeAmounts[_turn - 1] -= _prizeAmount;\r\n        } else if ((_ticket >> 28) & 1 == 1) {\r\n            _prizeAmount = _getSixMatchPrizeAmount(_turn);\r\n            require(_prizeAmount > 0);\r\n            msg.sender.transfer(_prizeAmount);\r\n            SixMatchPrizeTaken(msg.sender, _prizeAmount);\r\n            tickets[msg.sender][_turn][i] |= 1;\r\n            untakenPrizeAmounts[_turn - 1] -= _prizeAmount;\r\n        }\r\n    }\r\n\r\n    function _getFiveMatchPrizeAmount(uint256 _turn) internal constant returns (uint256) {\r\n        require(_turn > 0 && _turn < turn);\r\n        uint256 _numFiveMatchWinners = uint256(numFiveMatchWinners[_turn - 1]);\r\n        if (_numFiveMatchWinners == 0)\r\n            return 0;\r\n        return raisedAmounts[_turn - 1] * fiveMatchPayoutInPercent / 100 / _numFiveMatchWinners;\r\n    }\r\n\r\n    function _getBonusMatchPrizeAmount(uint256 _turn) internal constant returns (uint256) {\r\n        require(_turn > 0 && _turn < turn);\r\n        uint256 _numBonusMatchWinners = uint256(numBonusMatchWinners[_turn - 1]);\r\n        if (_numBonusMatchWinners == 0)\r\n            return 0;\r\n        return raisedAmounts[_turn - 1] * bonusMatchPayoutInPercent / 100 / _numBonusMatchWinners;\r\n    }\r\n\r\n    function _getSixMatchPrizeAmount(uint256 _turn) internal constant returns (uint256) {\r\n        require(_turn > 0 && _turn < turn);\r\n        uint256 _numSixMatchWinners = uint256(numSixMatchWinners[_turn - 1]);\r\n        if (_numSixMatchWinners == 0)\r\n            return 0;\r\n        return raisedAmounts[_turn - 1] * sixMatchPayoutInPercent / 100 / _numSixMatchWinners;\r\n    }\r\n\r\n    function() payable {\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"raisedAmounts\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"duration\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"getBettingExtra\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint128\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gasForOraclizedQuery\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numTurnsToRevolve\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"myid\",\"type\":\"bytes32\"},{\"name\":\"result\",\"type\":\"string\"}],\"name\":\"__callback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_gasLimit\",\"type\":\"uint32\"}],\"name\":\"setGasForOraclizedQuery\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fiveMatchPayoutInPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"myid\",\"type\":\"bytes32\"},{\"name\":\"result\",\"type\":\"string\"},{\"name\":\"proof\",\"type\":\"bytes\"}],\"name\":\"__callback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_turn\",\"type\":\"uint32\"},{\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"takePrize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"getBetting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"uint8[]\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lottoPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerShareInPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusMatchPayoutInPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_turn\",\"type\":\"uint32\"}],\"name\":\"getNumMyTickets\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"resumeLotto\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"turn\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"timestamps\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lottoHighestNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_turn\",\"type\":\"uint32\"},{\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"getMyTicket\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"uint8[]\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_numTickets\",\"type\":\"uint256\"},{\"name\":\"_betNumbersList\",\"type\":\"uint8[]\"},{\"name\":\"_isAutoGenerated\",\"type\":\"bool\"}],\"name\":\"buyTickets\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"launchLotto\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sixMatchPayoutInPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"untakenPrizeAmounts\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"finishWhen\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getNumBettings\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_bettingId\",\"type\":\"uint256\"}],\"name\":\"getTurn\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isLottoStarted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"raisedAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_turn\",\"type\":\"uint256\"}],\"name\":\"getLottoResult\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint32\"},{\"name\":\"\",\"type\":\"uint32\"},{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_turn\",\"type\":\"uint32\"}],\"name\":\"getMyUntakenPrizes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lottoLowestNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_turn\",\"type\":\"uint256\"}],\"name\":\"getLottoNumbers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8[]\"},{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lottoLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_turn\",\"type\":\"uint32\"}],\"name\":\"getMyResult\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint32\"},{\"name\":\"\",\"type\":\"uint32\"},{\"name\":\"\",\"type\":\"uint32\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"turn\",\"type\":\"uint32\"}],\"name\":\"LottoStart\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"raisedAmount\",\"type\":\"uint256\"}],\"name\":\"FundRaised\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"lottoNumbers\",\"type\":\"uint8[]\"},{\"indexed\":false,\"name\":\"bonusNumber\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"raisedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"numFiveMatchWinners\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"numBonusMatchWinners\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"numSixMatchWinners\",\"type\":\"uint32\"}],\"name\":\"LottoNumbersAnnounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"prizeAmount\",\"type\":\"uint256\"}],\"name\":\"SixMatchPrizeTaken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"prizeAmount\",\"type\":\"uint256\"}],\"name\":\"BonusMatchPrizeTaken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"prizeAmount\",\"type\":\"uint256\"}],\"name\":\"FiveMatchPrizeTaken\",\"type\":\"event\"}]","ContractName":"CryptoLotto","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://69fd3360e93596e78be8a3795592a4bbda4e2caae1f4b7da067ae5fcd5108fa2"}]}