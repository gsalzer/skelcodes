{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13;\r\n\r\ncontract MoonCatRescue {\r\n  enum Modes { Inactive, Disabled, Test, Live }\r\n\r\n  Modes public mode = Modes.Inactive;\r\n\r\n  address owner;\r\n\r\n  bytes16 public imageGenerationCodeMD5 = 0xdbad5c08ec98bec48490e3c196eec683; // use this to verify mooncatparser.js the cat image data generation javascript file.\r\n\r\n  string public name = \"MoonCats\";\r\n  string public symbol = \"?\"; // unicode cat symbol\r\n  uint8 public decimals = 0;\r\n\r\n  uint256 public totalSupply = 25600;\r\n  uint16 public remainingCats = 25600 - 256; // there will only ever be 25,000 cats\r\n  uint16 public remainingGenesisCats = 256; // there can only be a maximum of 256 genesis cats\r\n  uint16 public rescueIndex = 0;\r\n\r\n  bytes5[25600] public rescueOrder;\r\n\r\n  bytes32 public searchSeed = 0x0; // gets set with the immediately preceding blockhash when the contract is activated to prevent \"premining\"\r\n\r\n  struct AdoptionOffer {\r\n    bool exists;\r\n    bytes5 catId;\r\n    address seller;\r\n    uint price;\r\n    address onlyOfferTo;\r\n  }\r\n\r\n  struct AdoptionRequest{\r\n    bool exists;\r\n    bytes5 catId;\r\n    address requester;\r\n    uint price;\r\n  }\r\n\r\n  mapping (bytes5 => AdoptionOffer) public adoptionOffers;\r\n  mapping (bytes5 => AdoptionRequest) public adoptionRequests;\r\n\r\n  mapping (bytes5 => bytes32) public catNames;\r\n  mapping (bytes5 => address) public catOwners;\r\n  mapping (address => uint256) public balanceOf; //number of cats owned by a given address\r\n  mapping (address => uint) public pendingWithdrawals;\r\n\r\n  /* events */\r\n\r\n  event CatRescued(address indexed to, bytes5 indexed catId);\r\n  event CatNamed(bytes5 indexed catId, bytes32 catName);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event CatAdopted(bytes5 indexed catId, uint price, address indexed from, address indexed to);\r\n  event AdoptionOffered(bytes5 indexed catId, uint price, address indexed toAddress);\r\n  event AdoptionOfferCancelled(bytes5 indexed catId);\r\n  event AdoptionRequested(bytes5 indexed catId, uint price, address indexed from);\r\n  event AdoptionRequestCancelled(bytes5 indexed catId);\r\n  event GenesisCatsAdded(bytes5[16] catIds);\r\n\r\n  function MoonCatRescue() payable {\r\n    owner = msg.sender;\r\n    assert((remainingCats + remainingGenesisCats) == totalSupply);\r\n    assert(rescueOrder.length == totalSupply);\r\n    assert(rescueIndex == 0);\r\n  }\r\n\r\n  /* registers and validates cats that are found */\r\n  function rescueCat(bytes32 seed) activeMode returns (bytes5) {\r\n    require(remainingCats > 0); // cannot register any cats once supply limit is reached\r\n    bytes32 catIdHash = keccak256(seed, searchSeed); // generate the prospective catIdHash\r\n    require(catIdHash[0] | catIdHash[1] | catIdHash[2] == 0x0); // ensures the validity of the catIdHash\r\n    bytes5 catId = bytes5((catIdHash & 0xffffffff) << 216); // one byte to indicate genesis, and the last 4 bytes of the catIdHash\r\n    require(catOwners[catId] == 0x0); // if the cat is already registered, throw an error. All cats are unique.\r\n\r\n    rescueOrder[rescueIndex] = catId;\r\n    rescueIndex++;\r\n\r\n    catOwners[catId] = msg.sender;\r\n    balanceOf[msg.sender]++;\r\n    remainingCats--;\r\n\r\n    CatRescued(msg.sender, catId);\r\n\r\n    return catId;\r\n  }\r\n\r\n  /* assigns a name to a cat, once a name is assigned it cannot be changed */\r\n  function nameCat(bytes5 catId, bytes32 catName) onlyCatOwner(catId) {\r\n    require(catNames[catId] == 0x0); // ensure the current name is empty; cats can only be named once\r\n    require(!adoptionOffers[catId].exists); // cats cannot be named while they are up for adoption\r\n    catNames[catId] = catName;\r\n    CatNamed(catId, catName);\r\n  }\r\n\r\n  /* puts a cat up for anyone to adopt */\r\n  function makeAdoptionOffer(bytes5 catId, uint price) onlyCatOwner(catId) {\r\n    require(price > 0);\r\n    adoptionOffers[catId] = AdoptionOffer(true, catId, msg.sender, price, 0x0);\r\n    AdoptionOffered(catId, price, 0x0);\r\n  }\r\n\r\n  /* puts a cat up for a specific address to adopt */\r\n  function makeAdoptionOfferToAddress(bytes5 catId, uint price, address to) onlyCatOwner(catId) isNotSender(to){\r\n    adoptionOffers[catId] = AdoptionOffer(true, catId, msg.sender, price, to);\r\n    AdoptionOffered(catId, price, to);\r\n  }\r\n\r\n  /* cancel an adoption offer */\r\n  function cancelAdoptionOffer(bytes5 catId) onlyCatOwner(catId) {\r\n    adoptionOffers[catId] = AdoptionOffer(false, catId, 0x0, 0, 0x0);\r\n    AdoptionOfferCancelled(catId);\r\n  }\r\n\r\n  /* accepts an adoption offer  */\r\n  function acceptAdoptionOffer(bytes5 catId) payable {\r\n    AdoptionOffer storage offer = adoptionOffers[catId];\r\n    require(offer.exists);\r\n    require(offer.onlyOfferTo == 0x0 || offer.onlyOfferTo == msg.sender);\r\n    require(msg.value >= offer.price);\r\n    if(msg.value > offer.price) {\r\n      pendingWithdrawals[msg.sender] += (msg.value - offer.price); // if the submitted amount exceeds the price allow the buyer to withdraw the difference\r\n    }\r\n    transferCat(catId, catOwners[catId], msg.sender, offer.price);\r\n  }\r\n\r\n  /* transfer a cat directly without payment */\r\n  function giveCat(bytes5 catId, address to) onlyCatOwner(catId) {\r\n    transferCat(catId, msg.sender, to, 0);\r\n  }\r\n\r\n  /* requests adoption of a cat with an ETH offer */\r\n  function makeAdoptionRequest(bytes5 catId) payable isNotSender(catOwners[catId]) {\r\n    require(catOwners[catId] != 0x0); // the cat must be owned\r\n    AdoptionRequest storage existingRequest = adoptionRequests[catId];\r\n    require(msg.value > 0);\r\n    require(msg.value > existingRequest.price);\r\n\r\n\r\n    if(existingRequest.price > 0) {\r\n      pendingWithdrawals[existingRequest.requester] += existingRequest.price;\r\n    }\r\n\r\n    adoptionRequests[catId] = AdoptionRequest(true, catId, msg.sender, msg.value);\r\n    AdoptionRequested(catId, msg.value, msg.sender);\r\n\r\n  }\r\n\r\n  /* allows the owner of the cat to accept an adoption request */\r\n  function acceptAdoptionRequest(bytes5 catId) onlyCatOwner(catId) {\r\n    AdoptionRequest storage existingRequest = adoptionRequests[catId];\r\n    require(existingRequest.exists);\r\n    address existingRequester = existingRequest.requester;\r\n    uint existingPrice = existingRequest.price;\r\n    adoptionRequests[catId] = AdoptionRequest(false, catId, 0x0, 0); // the adoption request must be cancelled before calling transferCat to prevent refunding the requester.\r\n    transferCat(catId, msg.sender, existingRequester, existingPrice);\r\n  }\r\n\r\n  /* allows the requester to cancel their adoption request */\r\n  function cancelAdoptionRequest(bytes5 catId) {\r\n    AdoptionRequest storage existingRequest = adoptionRequests[catId];\r\n    require(existingRequest.exists);\r\n    require(existingRequest.requester == msg.sender);\r\n\r\n    uint price = existingRequest.price;\r\n\r\n    adoptionRequests[catId] = AdoptionRequest(false, catId, 0x0, 0);\r\n\r\n    msg.sender.transfer(price);\r\n\r\n    AdoptionRequestCancelled(catId);\r\n  }\r\n\r\n\r\n  function withdraw() {\r\n    uint amount = pendingWithdrawals[msg.sender];\r\n    pendingWithdrawals[msg.sender] = 0;\r\n    msg.sender.transfer(amount);\r\n  }\r\n\r\n  /* owner only functions */\r\n\r\n  /* disable contract before activation. A safeguard if a bug is found before the contract is activated */\r\n  function disableBeforeActivation() onlyOwner inactiveMode {\r\n    mode = Modes.Disabled;  // once the contract is disabled it's mode cannot be changed\r\n  }\r\n\r\n  /* activates the contract in *Live* mode which sets the searchSeed and enables rescuing */\r\n  function activate() onlyOwner inactiveMode {\r\n    searchSeed = block.blockhash(block.number - 1); // once the searchSeed is set it cannot be changed;\r\n    mode = Modes.Live; // once the contract is activated it's mode cannot be changed\r\n  }\r\n\r\n  /* activates the contract in *Test* mode which sets the searchSeed and enables rescuing */\r\n  function activateInTestMode() onlyOwner inactiveMode { //\r\n    searchSeed = 0x5713bdf5d1c3398a8f12f881f0f03b5025b6f9c17a97441a694d5752beb92a3d; // once the searchSeed is set it cannot be changed;\r\n    mode = Modes.Test; // once the contract is activated it's mode cannot be changed\r\n  }\r\n\r\n  /* add genesis cats in groups of 16 */\r\n  function addGenesisCatGroup() onlyOwner activeMode {\r\n    require(remainingGenesisCats > 0);\r\n    bytes5[16] memory newCatIds;\r\n    uint256 price = (17 - (remainingGenesisCats / 16)) * 300000000000000000;\r\n    for(uint8 i = 0; i < 16; i++) {\r\n\r\n      uint16 genesisCatIndex = 256 - remainingGenesisCats;\r\n      bytes5 genesisCatId = (bytes5(genesisCatIndex) << 24) | 0xff00000ca7;\r\n\r\n      newCatIds[i] = genesisCatId;\r\n\r\n      rescueOrder[rescueIndex] = genesisCatId;\r\n      rescueIndex++;\r\n      balanceOf[0x0]++;\r\n      remainingGenesisCats--;\r\n\r\n      adoptionOffers[genesisCatId] = AdoptionOffer(true, genesisCatId, owner, price, 0x0);\r\n    }\r\n    GenesisCatsAdded(newCatIds);\r\n  }\r\n\r\n\r\n  /* aggregate getters */\r\n\r\n  function getCatIds() constant returns (bytes5[]) {\r\n    bytes5[] memory catIds = new bytes5[](rescueIndex);\r\n    for (uint i = 0; i < rescueIndex; i++) {\r\n      catIds[i] = rescueOrder[i];\r\n    }\r\n    return catIds;\r\n  }\r\n\r\n\r\n  function getCatNames() constant returns (bytes32[]) {\r\n    bytes32[] memory names = new bytes32[](rescueIndex);\r\n    for (uint i = 0; i < rescueIndex; i++) {\r\n      names[i] = catNames[rescueOrder[i]];\r\n    }\r\n    return names;\r\n  }\r\n\r\n  function getCatOwners() constant returns (address[]) {\r\n    address[] memory owners = new address[](rescueIndex);\r\n    for (uint i = 0; i < rescueIndex; i++) {\r\n      owners[i] = catOwners[rescueOrder[i]];\r\n    }\r\n    return owners;\r\n  }\r\n\r\n  function getCatOfferPrices() constant returns (uint[]) {\r\n    uint[] memory catOffers = new uint[](rescueIndex);\r\n    for (uint i = 0; i < rescueIndex; i++) {\r\n      bytes5 catId = rescueOrder[i];\r\n      if(adoptionOffers[catId].exists && adoptionOffers[catId].onlyOfferTo == 0x0) {\r\n        catOffers[i] = adoptionOffers[catId].price;\r\n      }\r\n    }\r\n    return catOffers;\r\n  }\r\n\r\n  function getCatRequestPrices() constant returns (uint[]) {\r\n    uint[] memory catRequests = new uint[](rescueIndex);\r\n    for (uint i = 0; i < rescueIndex; i++) {\r\n      bytes5 catId = rescueOrder[i];\r\n      catRequests[i] = adoptionRequests[catId].price;\r\n    }\r\n    return catRequests;\r\n  }\r\n\r\n  function getCatDetails(bytes5 catId) constant returns (bytes5 id,\r\n                                                         address owner,\r\n                                                         bytes32 name,\r\n                                                         address onlyOfferTo,\r\n                                                         uint offerPrice,\r\n                                                         address requester,\r\n                                                         uint requestPrice) {\r\n\r\n    return (catId,\r\n            catOwners[catId],\r\n            catNames[catId],\r\n            adoptionOffers[catId].onlyOfferTo,\r\n            adoptionOffers[catId].price,\r\n            adoptionRequests[catId].requester,\r\n            adoptionRequests[catId].price);\r\n  }\r\n\r\n  /* modifiers */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  modifier inactiveMode() {\r\n    require(mode == Modes.Inactive);\r\n    _;\r\n  }\r\n\r\n  modifier activeMode() {\r\n    require(mode == Modes.Live || mode == Modes.Test);\r\n    _;\r\n  }\r\n\r\n  modifier onlyCatOwner(bytes5 catId) {\r\n    require(catOwners[catId] == msg.sender);\r\n    _;\r\n  }\r\n\r\n  modifier isNotSender(address a) {\r\n    require(msg.sender != a);\r\n    _;\r\n  }\r\n\r\n  /* transfer helper */\r\n  function transferCat(bytes5 catId, address from, address to, uint price) private {\r\n    catOwners[catId] = to;\r\n    balanceOf[from]--;\r\n    balanceOf[to]++;\r\n    adoptionOffers[catId] = AdoptionOffer(false, catId, 0x0, 0, 0x0); // cancel any existing adoption offer when cat is transferred\r\n\r\n    AdoptionRequest storage request = adoptionRequests[catId]; //if the recipient has a pending adoption request, cancel it\r\n    if(request.requester == to) {\r\n      pendingWithdrawals[to] += request.price;\r\n      adoptionRequests[catId] = AdoptionRequest(false, catId, 0x0, 0);\r\n    }\r\n\r\n    pendingWithdrawals[from] += price;\r\n\r\n    Transfer(from, to, 1);\r\n    CatAdopted(catId, price, from, to);\r\n  }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"catId\",\"type\":\"bytes5\"},{\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"makeAdoptionOffer\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"activate\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"remainingGenesisCats\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"remainingCats\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"catId\",\"type\":\"bytes5\"}],\"name\":\"acceptAdoptionOffer\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mode\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"catId\",\"type\":\"bytes5\"}],\"name\":\"getCatDetails\",\"outputs\":[{\"name\":\"id\",\"type\":\"bytes5\"},{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"name\",\"type\":\"bytes32\"},{\"name\":\"onlyOfferTo\",\"type\":\"address\"},{\"name\":\"offerPrice\",\"type\":\"uint256\"},{\"name\":\"requester\",\"type\":\"address\"},{\"name\":\"requestPrice\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCatOwners\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes5\"}],\"name\":\"catOwners\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rescueOrder\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes5\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"seed\",\"type\":\"bytes32\"}],\"name\":\"rescueCat\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes5\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"catId\",\"type\":\"bytes5\"}],\"name\":\"cancelAdoptionOffer\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCatIds\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes5[]\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCatNames\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32[]\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"catId\",\"type\":\"bytes5\"},{\"name\":\"catName\",\"type\":\"bytes32\"}],\"name\":\"nameCat\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"activateInTestMode\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes5\"}],\"name\":\"adoptionOffers\",\"outputs\":[{\"name\":\"exists\",\"type\":\"bool\"},{\"name\":\"catId\",\"type\":\"bytes5\"},{\"name\":\"seller\",\"type\":\"address\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"onlyOfferTo\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes5\"}],\"name\":\"catNames\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCatRequestPrices\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"catId\",\"type\":\"bytes5\"}],\"name\":\"cancelAdoptionRequest\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"disableBeforeActivation\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"addGenesisCatGroup\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"catId\",\"type\":\"bytes5\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"to\",\"type\":\"address\"}],\"name\":\"makeAdoptionOfferToAddress\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"searchSeed\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"imageGenerationCodeMD5\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes16\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes5\"}],\"name\":\"adoptionRequests\",\"outputs\":[{\"name\":\"exists\",\"type\":\"bool\"},{\"name\":\"catId\",\"type\":\"bytes5\"},{\"name\":\"requester\",\"type\":\"address\"},{\"name\":\"price\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"catId\",\"type\":\"bytes5\"}],\"name\":\"acceptAdoptionRequest\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCatOfferPrices\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"catId\",\"type\":\"bytes5\"}],\"name\":\"makeAdoptionRequest\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rescueIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"pendingWithdrawals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"catId\",\"type\":\"bytes5\"},{\"name\":\"to\",\"type\":\"address\"}],\"name\":\"giveCat\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":true,\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"catId\",\"type\":\"bytes5\"}],\"name\":\"CatRescued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"catId\",\"type\":\"bytes5\"},{\"indexed\":false,\"name\":\"catName\",\"type\":\"bytes32\"}],\"name\":\"CatNamed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"catId\",\"type\":\"bytes5\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"}],\"name\":\"CatAdopted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"catId\",\"type\":\"bytes5\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"toAddress\",\"type\":\"address\"}],\"name\":\"AdoptionOffered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"catId\",\"type\":\"bytes5\"}],\"name\":\"AdoptionOfferCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"catId\",\"type\":\"bytes5\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"}],\"name\":\"AdoptionRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"catId\",\"type\":\"bytes5\"}],\"name\":\"AdoptionRequestCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"catIds\",\"type\":\"bytes5[16]\"}],\"name\":\"GenesisCatsAdded\",\"type\":\"event\"}]","ContractName":"MoonCatRescue","CompilerVersion":"v0.4.14+commit.c2215d46","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://a4e578d3d7c9a384b5985a5957dd2477a19f9d32052121927063bf9f549c6032"}]}