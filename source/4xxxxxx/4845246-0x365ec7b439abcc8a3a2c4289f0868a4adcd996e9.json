{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.0;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public Master;\r\n\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    function Ownable() public {\r\n        Master = msg.sender;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyMaster() {\r\n        require(msg.sender == Master);\r\n        _;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newMaster.\r\n     * @param newMaster The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newMaster) public onlyMaster {\r\n        if (newMaster != address(0)) {\r\n            Master = newMaster;\r\n        }\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n    event Pause();\r\n    event Unpause();\r\n\r\n    bool public paused = false;\r\n\r\n\r\n    /**\r\n     * @dev modifier to allow actions only when the contract IS paused\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!paused);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev modifier to allow actions only when the contract IS NOT paused\r\n     */\r\n    modifier whenPaused {\r\n        require(paused);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev called by the owner to pause, triggers stopped state\r\n     */\r\n    function pause() public onlyMaster whenNotPaused returns (bool) {\r\n        paused = true;\r\n        Pause();\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev called by the owner to unpause, returns to normal state\r\n     */\r\n    function unpause() public onlyMaster whenPaused returns (bool) {\r\n        paused = false;\r\n        Unpause();\r\n        return true;\r\n    }\r\n}\r\n\r\n//\r\ncontract UpgradeInterface {\r\n\r\n    function isUpgradeInterface() public pure returns (bool) {\r\n        return true;\r\n    }\r\n\r\n    function tryUpgrade(uint32 carID, uint8 upgradeID) public returns (bool);\r\n\r\n}\r\n\r\ncontract EtherRacingCore is Ownable, Pausable {\r\n\r\n    uint64 _seed = 0;\r\n\r\n    function random(uint64 upper) internal returns (uint64) {\r\n        _seed = uint64(keccak256(keccak256(block.blockhash(block.number), _seed), now));\r\n        return _seed % upper;\r\n    }\r\n\r\n    struct CarProduct {\r\n        string name;\r\n        uint32 basePR; // 44.4 * 100 => 4440\r\n        uint32 baseTopSpeed; // 155mph * 100 => 15500\r\n        uint32 baseAcceleration; // 2.70s * 100 => 270\r\n        uint32 baseBraking; // 99ft * 100 => 9900\r\n        uint32 baseGrip; // 1.20g * 100 => 120\r\n\r\n        // variables for auction\r\n        uint256 startPrice;\r\n        uint256 currentPrice;\r\n\r\n        uint256 earning;\r\n        uint256 createdAt;\r\n\r\n        //\r\n        uint32 entityCounter;\r\n        bool sale;\r\n    }\r\n\r\n    struct CarEntity {\r\n        uint32 productID;\r\n        address owner;\r\n        address earner;\r\n        bool selling;\r\n        uint256 auctionID;\r\n\r\n        // Each car has unique stats.\r\n        uint32 level;\r\n        uint32 exp;\r\n        uint64 genes;\r\n        uint8[8] upgrades;\r\n\r\n        //\r\n        uint32 lastCashoutIndex;\r\n    }\r\n\r\n\r\n    struct AuctionEntity {\r\n        uint32 carID;\r\n        uint256 startPrice;\r\n        uint256 finishPrice;\r\n        uint256 startTime;\r\n        uint256 duration;\r\n    }\r\n\r\n    //\r\n    uint32 public newCarID = 1;\r\n    uint32 public newCarProductID = 1;\r\n    uint256 public newAuctionID = 1;\r\n    bool canInit = true;\r\n\r\n    mapping(uint32 => CarEntity) cars;\r\n    mapping(uint32 => CarProduct) carProducts;\r\n    mapping(uint256 => AuctionEntity) auctions;\r\n    mapping(address => uint256) balances;\r\n\r\n    event EventCashOut (\r\n        address indexed player,\r\n        uint256 amount\r\n    );\r\n\r\n    event EventWinReward (\r\n        address indexed player,\r\n        uint256 amount\r\n    );\r\n\r\n    event EventUpgradeCar (\r\n        address indexed player,\r\n        uint32 carID,\r\n        uint8 statID,\r\n        uint8 upgradeLevel\r\n    );\r\n\r\n    event EventLevelUp (\r\n        uint32 carID,\r\n        uint32 level,\r\n        uint32 exp\r\n    );\r\n\r\n    event EventTransfer (\r\n        address indexed player,\r\n        address indexed receiver,\r\n        uint32 carID\r\n    );\r\n\r\n    event EventTransferAction (\r\n        address indexed player,\r\n        address indexed receiver,\r\n        uint32 carID,\r\n        uint8 actionType\r\n    );\r\n\r\n    event EventAuction (\r\n        address indexed player,\r\n        uint32 carID,\r\n        uint256 startPrice,\r\n        uint256 finishPrice,\r\n        uint256 duration,\r\n        uint256 createdAt\r\n    );\r\n\r\n    event EventCancelAuction (\r\n        uint32 carID\r\n    );\r\n\r\n    event EventBid (\r\n        address indexed player,\r\n        uint32 carID\r\n    );\r\n\r\n    event EventProduct (\r\n        uint32 productID,\r\n        string name,\r\n        uint32 basePR,\r\n        uint32 baseTopSpeed,\r\n        uint32 baseAcceleration,\r\n        uint32 baseBraking,\r\n        uint32 baseGrip,\r\n        uint256 price,\r\n        uint256 earning,\r\n        uint256 createdAt\r\n    );\r\n\r\n    event EventProductEndSale (\r\n        uint32 productID\r\n    );\r\n\r\n    event EventBuyCar (\r\n        address indexed player,\r\n        uint32 productID,\r\n        uint32 carID\r\n    );\r\n\r\n\r\n    UpgradeInterface upgradeInterface;\r\n    uint256 public constant upgradePrice = 50 finney;\r\n    uint256 public constant ownerCut = 500;\r\n\r\n    function setUpgradeAddress(address _address) external onlyMaster {\r\n        UpgradeInterface c = UpgradeInterface(_address);\r\n        require(c.isUpgradeInterface());\r\n\r\n        // Set the new contract address\r\n        upgradeInterface = c;\r\n    }\r\n\r\n    function EtherRacingCore() public {\r\n\r\n        addCarProduct(\"ER-1\", 830,  15500, 530, 11200, 90,  10 finney,   0.1 finney);\r\n        addCarProduct(\"ER-2\", 1910, 17100, 509, 10700, 95,  50 finney,   0.5 finney);\r\n        addCarProduct(\"ER-3\", 2820, 18300, 450, 10500, 100, 100 finney,  1 finney);\r\n        addCarProduct(\"ER-4\", 3020, 17700, 419, 10400, 99,  500 finney,  5 finney);\r\n        addCarProduct(\"ER-5\", 4440, 20500, 379, 10100, 99,  1000 finney, 10 finney);\r\n        addCarProduct(\"ER-6\", 4520, 22000, 350, 10400, 104, 1500 finney, 15 finney);\r\n        addCarProduct(\"ER-7\", 4560, 20500, 340, 10200, 104, 2000 finney, 20 finney);\r\n        addCarProduct(\"ER-8\", 6600, 21700, 290, 9100,  139, 2500 finney, 25 finney);\r\n    }\r\n\r\n    function CompleteInit() public onlyMaster {\r\n        canInit = false;\r\n    }\r\n\r\n    function cashOut(uint256 _amount) public whenNotPaused {\r\n        require(_amount >= 0);\r\n        require(_amount == uint256(uint128(_amount)));\r\n        require(this.balance >= _amount);\r\n        require(balances[msg.sender] >= _amount);\r\n\r\n        if (_amount == 0)\r\n            _amount = balances[msg.sender];\r\n\r\n        balances[msg.sender] -= _amount;\r\n\r\n        if (!msg.sender.send(_amount))\r\n            balances[msg.sender] += _amount;\r\n\r\n        EventCashOut(msg.sender, _amount);\r\n    }\r\n\r\n    function cashOutCar(uint32 _carID) public whenNotPaused {\r\n        require(_carID > 0 && _carID < newCarID);\r\n        require(cars[_carID].owner == msg.sender);\r\n        uint256 _amount = getCarEarning(_carID);\r\n        require(this.balance >= _amount);\r\n        require(_amount > 0);\r\n\r\n        var car = cars[_carID];\r\n\r\n        var lastCashoutIndex = car.lastCashoutIndex;\r\n        var limitCashoutIndex = carProducts[car.productID].entityCounter;\r\n\r\n        //\r\n        cars[_carID].lastCashoutIndex = limitCashoutIndex;\r\n\r\n        // if fail, revert.\r\n        if (!car.owner.send(_amount))\r\n            cars[_carID].lastCashoutIndex = lastCashoutIndex;\r\n\r\n        EventCashOut(msg.sender, _amount);\r\n    }\r\n\r\n    function upgradeCar(uint32 _carID, uint8 _statID) public payable whenNotPaused {\r\n        require(_carID > 0 && _carID < newCarID);\r\n        require(cars[_carID].owner == msg.sender);\r\n        require(_statID >= 0 && _statID < 8);\r\n        require(cars[_statID].upgrades[_statID] < 20);\r\n        require(msg.value >= upgradePrice);\r\n        require(upgradeInterface != address(0));\r\n\r\n        //\r\n        if (upgradeInterface.tryUpgrade(_carID, _statID)) {\r\n            cars[_carID].upgrades[_statID]++;\r\n        }\r\n\r\n        //\r\n        balances[msg.sender] += msg.value - upgradePrice;\r\n        balances[Master] += upgradePrice;\r\n\r\n        EventUpgradeCar(msg.sender, _carID, _statID, cars[_carID].upgrades[_statID]);\r\n    }\r\n\r\n    function levelUpCar(uint32 _carID, uint32 _level, uint32 _exp) public onlyMaster {\r\n        require(_carID > 0 && _carID < newCarID);\r\n\r\n        cars[_carID].level = _level;\r\n        cars[_carID].exp = _exp;\r\n\r\n        EventLevelUp(_carID, _level, _exp);\r\n    }\r\n\r\n    function _transfer(uint32 _carID, address _receiver) public whenNotPaused {\r\n        require(_carID > 0 && _carID < newCarID);\r\n        require(cars[_carID].owner == msg.sender);\r\n        require(msg.sender != _receiver);\r\n        require(cars[_carID].selling == false);\r\n        cars[_carID].owner = _receiver;\r\n        cars[_carID].earner = _receiver;\r\n\r\n        EventTransfer(msg.sender, _receiver, _carID);\r\n    }\r\n\r\n    function _transferAction(uint32 _carID, address _receiver, uint8 _ActionType) public whenNotPaused {\r\n        require(_carID > 0 && _carID < newCarID);\r\n        require(cars[_carID].owner == msg.sender);\r\n        require(msg.sender != _receiver);\r\n        require(cars[_carID].selling == false);\r\n        cars[_carID].owner = _receiver;\r\n\r\n        EventTransferAction(msg.sender, _receiver, _carID, _ActionType);\r\n    }\r\n\r\n    function addAuction(uint32 _carID, uint256 _startPrice, uint256 _finishPrice, uint256 _duration) public whenNotPaused {\r\n        require(_carID > 0 && _carID < newCarID);\r\n        require(cars[_carID].owner == msg.sender);\r\n        require(cars[_carID].selling == false);\r\n        require(_startPrice >= _finishPrice);\r\n        require(_startPrice > 0 && _finishPrice >= 0);\r\n        require(_duration > 0);\r\n        require(_startPrice == uint256(uint128(_startPrice)));\r\n        require(_finishPrice == uint256(uint128(_finishPrice)));\r\n\r\n        auctions[newAuctionID] = AuctionEntity(_carID, _startPrice, _finishPrice, now, _duration);\r\n        cars[_carID].selling = true;\r\n        cars[_carID].auctionID = newAuctionID++;\r\n\r\n        EventAuction(msg.sender, _carID, _startPrice, _finishPrice, _duration, now);\r\n    }\r\n\r\n    function bid(uint32 _carID) public payable whenNotPaused {\r\n        require(_carID > 0 && _carID < newCarID);\r\n        require(cars[_carID].selling == true);\r\n\r\n        //\r\n        uint256 currentPrice = getCarCurrentPriceAuction(_carID);\r\n        require(currentPrice >= 0);\r\n        require(msg.value >= currentPrice);\r\n\r\n        //\r\n        uint256 marketFee = currentPrice * ownerCut / 10000;\r\n        balances[cars[_carID].owner] += currentPrice - marketFee;\r\n        balances[Master] += marketFee;\r\n        balances[msg.sender] += msg.value - currentPrice;\r\n\r\n        //\r\n        cars[_carID].owner = msg.sender;\r\n        cars[_carID].selling = false;\r\n        delete auctions[cars[_carID].auctionID];\r\n        cars[_carID].auctionID = 0;\r\n\r\n        //\r\n        EventBid(msg.sender, _carID);\r\n    }\r\n\r\n    // Cancel auction\r\n    function cancelAuction(uint32 _carID) public whenNotPaused {\r\n        require(_carID > 0 && _carID < newCarID);\r\n        require(cars[_carID].selling == true);\r\n        require(cars[_carID].owner == msg.sender);\r\n        // only owner can do this.\r\n        cars[_carID].selling = false;\r\n        delete auctions[cars[_carID].auctionID];\r\n        cars[_carID].auctionID = 0;\r\n\r\n        //\r\n        EventCancelAuction(_carID);\r\n    }\r\n\r\n    function addCarProduct(string _name, uint32 pr,\r\n        uint32 topSpeed, uint32 acceleration, uint32 braking, uint32 grip, uint256 _price, uint256 _earning) public onlyMaster {\r\n        carProducts[newCarProductID++] = CarProduct(_name,\r\n            pr, topSpeed, acceleration, braking, grip, _price, _price, _earning, now, 0, true);\r\n\r\n        EventProduct(newCarProductID - 1, _name,\r\n            pr, topSpeed, acceleration, braking, grip, _price, _earning, now);\r\n    }\r\n\r\n    // car sales are limited\r\n    function endSaleCarProduct(uint32 _carProductID) public onlyMaster {\r\n        require(_carProductID > 0 && _carProductID < newCarProductID);\r\n        carProducts[_carProductID].sale = false;\r\n\r\n        EventProductEndSale(_carProductID);\r\n    }\r\n\r\n    function addCarInit(address owner, uint32 _carProductID, uint32 level, uint32 exp, uint64 genes) public onlyMaster {\r\n        require(canInit == true);\r\n        require(_carProductID > 0 && _carProductID < newCarProductID);\r\n\r\n        //\r\n        carProducts[_carProductID].currentPrice += carProducts[_carProductID].earning;\r\n\r\n        //\r\n        cars[newCarID++] = CarEntity(_carProductID, owner, owner, false, 0,\r\n            level, exp, genes,\r\n            [0, 0, 0, 0, 0, 0, 0, 0], ++carProducts[_carProductID].entityCounter);\r\n\r\n        //\r\n        EventBuyCar(owner, _carProductID, newCarID - 1);\r\n    }\r\n\r\n    function buyCar(uint32 _carProductID) public payable {\r\n        require(_carProductID > 0 && _carProductID < newCarProductID);\r\n        require(carProducts[_carProductID].currentPrice > 0 && msg.value > 0);\r\n        require(msg.value >= carProducts[_carProductID].currentPrice);\r\n        require(carProducts[_carProductID].sale);\r\n\r\n        //\r\n        if (msg.value > carProducts[_carProductID].currentPrice)\r\n            balances[msg.sender] += msg.value - carProducts[_carProductID].currentPrice;\r\n\r\n        carProducts[_carProductID].currentPrice += carProducts[_carProductID].earning;\r\n\r\n        //\r\n        cars[newCarID++] = CarEntity(_carProductID, msg.sender, msg.sender, false, 0,\r\n            1, 0, random(~uint64(0)),\r\n            [0, 0, 0, 0, 0, 0, 0, 0], ++carProducts[_carProductID].entityCounter);\r\n\r\n        // send balance to Master\r\n        balances[Master] += carProducts[_carProductID].startPrice;\r\n\r\n        //\r\n        EventBuyCar(msg.sender, _carProductID, newCarID - 1);\r\n    }\r\n\r\n    function getCarProductName(uint32 _id) public constant returns (string) {\r\n        return carProducts[_id].name;\r\n    }\r\n\r\n    function getCarProduct(uint32 _id) public constant returns (uint32[6]) {\r\n        var carProduct = carProducts[_id];\r\n        return [carProduct.basePR,\r\n        carProduct.baseTopSpeed,\r\n        carProduct.baseAcceleration,\r\n        carProduct.baseBraking,\r\n        carProduct.baseGrip,\r\n        uint32(carProducts[_id].createdAt)];\r\n    }\r\n\r\n    function getCarDetails(uint32 _id) public constant returns (uint64[12]) {\r\n        var car = cars[_id];\r\n        return [uint64(car.productID),\r\n        uint64(car.genes),\r\n        uint64(car.upgrades[0]),\r\n        uint64(car.upgrades[1]),\r\n        uint64(car.upgrades[2]),\r\n        uint64(car.upgrades[3]),\r\n        uint64(car.upgrades[4]),\r\n        uint64(car.upgrades[5]),\r\n        uint64(car.upgrades[6]),\r\n        uint64(car.upgrades[7]),\r\n        uint64(car.level),\r\n        uint64(car.exp)\r\n        ];\r\n    }\r\n\r\n    function getCarOwner(uint32 _id) public constant returns (address) {\r\n        return cars[_id].owner;\r\n    }\r\n\r\n    function getCarSelling(uint32 _id) public constant returns (bool) {\r\n        return cars[_id].selling;\r\n    }\r\n\r\n    function getCarAuctionID(uint32 _id) public constant returns (uint256) {\r\n        return cars[_id].auctionID;\r\n    }\r\n\r\n    function getCarEarning(uint32 _id) public constant returns (uint256) {\r\n        var car = cars[_id];\r\n        var carProduct = carProducts[car.productID];\r\n        var limitCashoutIndex = carProduct.entityCounter;\r\n\r\n        //\r\n        return carProduct.earning *\r\n            (limitCashoutIndex - car.lastCashoutIndex);\r\n    }\r\n\r\n    function getCarCount() public constant returns (uint32) {\r\n        return newCarID-1;\r\n    }\r\n\r\n    function getCarCurrentPriceAuction(uint32 _id) public constant returns (uint256) {\r\n        require(getCarSelling(_id));\r\n        var car = cars[_id];\r\n        var currentAuction = auctions[car.auctionID];\r\n        uint256 currentPrice = currentAuction.startPrice\r\n        - (((currentAuction.startPrice - currentAuction.finishPrice) / (currentAuction.duration)) * (now - currentAuction.startTime));\r\n        if (currentPrice < currentAuction.finishPrice)\r\n            currentPrice = currentAuction.finishPrice;\r\n        return currentPrice;\r\n    }\r\n\r\n    function getCarProductCurrentPrice(uint32 _id) public constant returns (uint256) {\r\n        return carProducts[_id].currentPrice;\r\n    }\r\n\r\n    function getCarProductEarning(uint32 _id) public constant returns (uint256) {\r\n        return carProducts[_id].earning;\r\n    }\r\n\r\n    function getCarProductCount() public constant returns (uint32) {\r\n        return newCarProductID-1;\r\n    }\r\n\r\n    function getPlayerBalance(address _player) public constant returns (uint256) {\r\n        return balances[_player];\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_carProductID\",\"type\":\"uint32\"}],\"name\":\"endSaleCarProduct\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newCarID\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"CompleteInit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint32\"}],\"name\":\"getCarCurrentPriceAuction\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCarCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_carID\",\"type\":\"uint32\"}],\"name\":\"cancelAuction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"upgradePrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint32\"}],\"name\":\"getCarSelling\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint32\"}],\"name\":\"getCarAuctionID\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint32\"}],\"name\":\"getCarOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_carID\",\"type\":\"uint32\"}],\"name\":\"bid\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint32\"}],\"name\":\"getCarProductCurrentPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"cashOut\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setUpgradeAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint32\"}],\"name\":\"getCarProductName\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newAuctionID\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_carID\",\"type\":\"uint32\"},{\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"_transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerCut\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_carID\",\"type\":\"uint32\"},{\"name\":\"_level\",\"type\":\"uint32\"},{\"name\":\"_exp\",\"type\":\"uint32\"}],\"name\":\"levelUpCar\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"_carProductID\",\"type\":\"uint32\"},{\"name\":\"level\",\"type\":\"uint32\"},{\"name\":\"exp\",\"type\":\"uint32\"},{\"name\":\"genes\",\"type\":\"uint64\"}],\"name\":\"addCarInit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint32\"}],\"name\":\"getCarDetails\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64[12]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_carID\",\"type\":\"uint32\"},{\"name\":\"_receiver\",\"type\":\"address\"},{\"name\":\"_ActionType\",\"type\":\"uint8\"}],\"name\":\"_transferAction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_carID\",\"type\":\"uint32\"}],\"name\":\"cashOutCar\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Master\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCarProductCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint32\"}],\"name\":\"getCarProductEarning\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_carProductID\",\"type\":\"uint32\"}],\"name\":\"buyCar\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint32\"}],\"name\":\"getCarProduct\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32[6]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_carID\",\"type\":\"uint32\"},{\"name\":\"_startPrice\",\"type\":\"uint256\"},{\"name\":\"_finishPrice\",\"type\":\"uint256\"},{\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"addAuction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_player\",\"type\":\"address\"}],\"name\":\"getPlayerBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newCarProductID\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint32\"}],\"name\":\"getCarEarning\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"pr\",\"type\":\"uint32\"},{\"name\":\"topSpeed\",\"type\":\"uint32\"},{\"name\":\"acceleration\",\"type\":\"uint32\"},{\"name\":\"braking\",\"type\":\"uint32\"},{\"name\":\"grip\",\"type\":\"uint32\"},{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"_earning\",\"type\":\"uint256\"}],\"name\":\"addCarProduct\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newMaster\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_carID\",\"type\":\"uint32\"},{\"name\":\"_statID\",\"type\":\"uint8\"}],\"name\":\"upgradeCar\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EventCashOut\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EventWinReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"carID\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"statID\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"upgradeLevel\",\"type\":\"uint8\"}],\"name\":\"EventUpgradeCar\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"carID\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"level\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"exp\",\"type\":\"uint32\"}],\"name\":\"EventLevelUp\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"carID\",\"type\":\"uint32\"}],\"name\":\"EventTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"carID\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"actionType\",\"type\":\"uint8\"}],\"name\":\"EventTransferAction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"carID\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"startPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"finishPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"duration\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"createdAt\",\"type\":\"uint256\"}],\"name\":\"EventAuction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"carID\",\"type\":\"uint32\"}],\"name\":\"EventCancelAuction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"carID\",\"type\":\"uint32\"}],\"name\":\"EventBid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"productID\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"basePR\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"baseTopSpeed\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"baseAcceleration\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"baseBraking\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"baseGrip\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"earning\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"createdAt\",\"type\":\"uint256\"}],\"name\":\"EventProduct\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"productID\",\"type\":\"uint32\"}],\"name\":\"EventProductEndSale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"productID\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"carID\",\"type\":\"uint32\"}],\"name\":\"EventBuyCar\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"}]","ContractName":"EtherRacingCore","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://cbff011e3862eb38b2c63d0ff96a43d23ebbe6ea4b562bb7702c7fdf359f973a"}]}