{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\"\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner\r\n   * @param newOwner The address to transfer ownership to\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n}\r\n\r\n/*\r\n * @title Migration Agent interface\r\n */\r\ncontract MigrationAgent {\r\n  function migrateFrom(address _from, uint256 _value);\r\n}\r\n\r\ncontract ERC20 {\r\n    function totalSupply() constant returns (uint256);\r\n    function balanceOf(address who) constant returns (uint256);\r\n    function transfer(address to, uint256 value);\r\n    function transferFrom(address from, address to, uint256 value);\r\n    function approve(address spender, uint256 value);\r\n    function allowance(address owner, address spender) constant returns (uint256);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract Paypite is Ownable, ERC20 {\r\n  using SafeMath for uint256;\r\n\r\n  uint8 private _decimals = 18;\r\n  uint256 private decimalMultiplier = 10**(uint256(_decimals));\r\n\r\n  string private _name = \"Paypite\";\r\n  string private _symbol = \"PIT\";\r\n  uint256 private _totalSupply = 274000000 * decimalMultiplier;\r\n\r\n  bool public tradable = true;\r\n\r\n  // Wallet Address of Token\r\n  address public multisig;\r\n\r\n  // Function to access name of token\r\n  function name() constant returns (string) {\r\n    return _name;\r\n  }\r\n\r\n  // Function to access symbol of token\r\n  function symbol() constant returns (string) {\r\n    return _symbol;\r\n  }\r\n\r\n  // Function to access decimals of token\r\n  function decimals() constant returns (uint8) {\r\n    return _decimals;\r\n  }\r\n\r\n  // Function to access total supply of tokens\r\n  function totalSupply() constant returns (uint256) {\r\n    return _totalSupply;\r\n  }\r\n\r\n  mapping(address => uint256) balances;\r\n  mapping(address => mapping (address => uint256)) allowed;\r\n  mapping(address => uint256) releaseTimes;\r\n  address public migrationAgent;\r\n  uint256 public totalMigrated;\r\n\r\n  event Migrate(address indexed _from, address indexed _to, uint256 _value);\r\n\r\n  // Constructor\r\n  // @notice Paypite Contract\r\n  // @return the transaction address\r\n  function Paypite(address _multisig) {\r\n    require(_multisig != 0x0);\r\n    multisig = _multisig;\r\n    balances[multisig] = _totalSupply;\r\n  }\r\n\r\n  modifier canTrade() {\r\n    require(tradable);\r\n    _;\r\n  }\r\n\r\n  // Standard function transfer similar to ERC20 transfer with no _data\r\n  // Added due to backwards compatibility reasons\r\n  function transfer(address to, uint256 value) canTrade {\r\n    require(!isLocked(msg.sender));\r\n    require (balances[msg.sender] >= value && value > 0);\r\n    balances[msg.sender] = balances[msg.sender].sub(value);\r\n    balances[to] = balances[to].add(value);\r\n    Transfer(msg.sender, to, value);\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the balance of the specified address\r\n   * @param who The address to query the the balance of\r\n   * @return An uint256 representing the amount owned by the passed address\r\n   */\r\n  function balanceOf(address who) constant returns (uint256) {\r\n    return balances[who];\r\n  }\r\n\r\n /**\r\n  * @dev Transfer tokens from one address to another\r\n  * @param from address The address which you want to send tokens from\r\n  * @param to address The address which you want to transfer to\r\n  * @param value uint256 the amount of tokens to be transfered\r\n  */\r\n  function transferFrom(address from, address to, uint256 value) canTrade {\r\n    require(to != 0x0);\r\n    require(!isLocked(from));\r\n    uint256 _allowance = allowed[from][msg.sender];\r\n    require(value > 0 && _allowance >= value);\r\n    balances[from] = balances[from].sub(value);\r\n    balances[to] = balances[to].add(value);\r\n    allowed[from][msg.sender] = _allowance.sub(value);\r\n    Transfer(from, to, value);\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender\r\n   * @param spender The address which will spend the funds\r\n   * @param value The amount of tokens to be spent\r\n   */\r\n  function approve(address spender, uint256 value) canTrade {\r\n    require((value >= 0) && (allowed[msg.sender][spender] >= 0));\r\n    allowed[msg.sender][spender] = value;\r\n    Approval(msg.sender, spender, value);\r\n  }\r\n\r\n  // Check the allowed value for the spender to withdraw from owner\r\n  // @param owner The address of the owner\r\n  // @param spender The address of the spender\r\n  // @return the amount which spender is still allowed to withdraw from owner\r\n  function allowance(address owner, address spender) constant returns (uint256) {\r\n    return allowed[owner][spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Function to update tradable status\r\n   * @param _newTradableState New tradable state\r\n   * @return A boolean that indicates if the operation was successful\r\n   */\r\n  function setTradable(bool _newTradableState) onlyOwner public {\r\n    tradable = _newTradableState;\r\n  }\r\n\r\n  function modifyCap(uint256 _newTotalSupply) onlyOwner public {\r\n    require(_newTotalSupply > 0 && _newTotalSupply != _totalSupply);\r\n    if (_newTotalSupply > _totalSupply) {\r\n      balances[multisig] = balances[multisig].add(_newTotalSupply.sub(_totalSupply));\r\n    } else {\r\n      require(balances[multisig] > _totalSupply.sub(_newTotalSupply));\r\n      balances[multisig] = balances[multisig].sub(_totalSupply.sub(_newTotalSupply));\r\n    }\r\n    _totalSupply = _newTotalSupply;\r\n  }\r\n\r\n  /**\r\n   * Function to lock a given address until the specified date\r\n   * @param spender Address to lock\r\n   * @param date A timestamp specifying when the account will be unlocked\r\n   * @return A boolean that indicates if the operation was successful\r\n   */\r\n  function timeLock(address spender, uint256 date) public onlyOwner returns (bool) {\r\n    releaseTimes[spender] = date;\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Function to check if a given address is locked or not\r\n   * @param _spender Address\r\n   * @return A boolean that indicates if the account is locked or not\r\n   */\r\n  function isLocked(address _spender) public view returns (bool) {\r\n    if (releaseTimes[_spender] == 0 || releaseTimes[_spender] <= block.timestamp) {\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @notice Set address of migration target contract and enable migration process\r\n   * @dev Required state: Operational Normal\r\n   * @dev State transition: -> Operational Migration\r\n   * @param _agent The address of the MigrationAgent contract\r\n   */\r\n  function setMigrationAgent(address _agent) external onlyOwner {\r\n    require(migrationAgent == 0x0 && totalMigrated == 0);\r\n    migrationAgent = _agent;\r\n  }\r\n\r\n  /*\r\n   * @notice Migrate tokens to the new token contract.\r\n   * @dev Required state: Operational Migration\r\n   * @param _value The amount of token to be migrated\r\n   */\r\n  function migrate(uint256 value) external {\r\n    require(migrationAgent != 0x0);\r\n    require(value >= 0);\r\n    require(value <= balances[msg.sender]);\r\n\r\n    balances[msg.sender] -= value;\r\n    _totalSupply = _totalSupply.sub(value);\r\n    totalMigrated = totalMigrated.add(value);\r\n    MigrationAgent(migrationAgent).migrateFrom(msg.sender, value);\r\n    Migrate(msg.sender, migrationAgent, value);\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"migrate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"multisig\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"isLocked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tradable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_agent\",\"type\":\"address\"}],\"name\":\"setMigrationAgent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newTradableState\",\"type\":\"bool\"}],\"name\":\"setTradable\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newTotalSupply\",\"type\":\"uint256\"}],\"name\":\"modifyCap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"migrationAgent\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalMigrated\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"date\",\"type\":\"uint256\"}],\"name\":\"timeLock\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_multisig\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Migrate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Paypite","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000029e6492432fa2f405dfe7d55f83010e3563e9ef1","Library":"","SwarmSource":"bzzr://5dfff855224c1a35cb28dc58f53410c90fb7209648bc5089e9b41b66f49fb2e9"}]}