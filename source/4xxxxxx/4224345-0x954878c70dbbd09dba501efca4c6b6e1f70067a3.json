{"status":"1","message":"OK","result":[{"SourceCode":"library SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner {\r\n    if (newOwner != address(0)) {\r\n      owner = newOwner;\r\n    }\r\n  }\r\n\r\n}\r\n\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) constant returns (uint256);\r\n  function transfer(address to, uint256 value) returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) returns (bool);\r\n  function approve(address spender, uint256 value) returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) returns (bool) {\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of. \r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amout of tokens to be transfered\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\r\n    var _allowance = allowed[_from][msg.sender];\r\n\r\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n    // require (_value <= _allowance);\r\n\r\n    balances[_to] = balances[_to].add(_value);\r\n    balances[_from] = balances[_from].sub(_value);\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) returns (bool) {\r\n\r\n    // To change the approve amount you first have to reduce the addresses`\r\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n    //  already 0 to mitigate the race condition described here:\r\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifing the amount of tokens still avaible for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n}\r\n\r\n\r\ncontract MintableToken is StandardToken, Ownable {\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will recieve the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(address _to, uint256 _amount) onlyOwner canMint returns (bool) {\r\n    totalSupply = totalSupply.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    Mint(_to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() onlyOwner returns (bool) {\r\n    mintingFinished = true;\r\n    MintFinished();\r\n    return true;\r\n  }\r\n}\r\n\r\ncontract Crowdsale {\r\n  using SafeMath for uint256;\r\n\r\n  // The token being sold\r\n  MintableToken public token;\r\n\r\n  // start and end block where investments are allowed (both inclusive)\r\n  uint256 public startBlock;\r\n  uint256 public endBlock;\r\n\r\n  // address where funds are collected\r\n  address public wallet;\r\n\r\n  // how many token units a buyer gets per wei\r\n  uint256 public rate;\r\n\r\n  // amount of raised money in wei\r\n  uint256 public weiRaised;\r\n\r\n  /**\r\n   * event for token purchase logging\r\n   * @param purchaser who paid for the tokens\r\n   * @param beneficiary who got the tokens\r\n   * @param value weis paid for purchase\r\n   * @param amount amount of tokens purchased\r\n   */ \r\n  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n\r\n\r\n  function Crowdsale(uint256 _startBlock, uint256 _endBlock, uint256 _rate, address _wallet) {\r\n    require(_startBlock >= block.number);\r\n    require(_endBlock >= _startBlock);\r\n    require(_rate > 0);\r\n    require(_wallet != 0x0);\r\n\r\n    token = createTokenContract();\r\n    startBlock = _startBlock;\r\n    endBlock = _endBlock;\r\n    rate = _rate;\r\n    wallet = _wallet;\r\n  }\r\n\r\n  // creates the token to be sold. \r\n  // override this method to have crowdsale of a specific mintable token.\r\n  function createTokenContract() internal returns (MintableToken) {\r\n    return new MintableToken();\r\n  }\r\n\r\n\r\n  // fallback function can be used to buy tokens\r\n  function () payable {\r\n    buyTokens(msg.sender);\r\n  }\r\n\r\n  // low level token purchase function\r\n  function buyTokens(address beneficiary) payable {\r\n    require(beneficiary != 0x0);\r\n    require(validPurchase());\r\n\r\n    uint256 weiAmount = msg.value;\r\n\r\n    // calculate token amount to be created\r\n    uint256 tokens = weiAmount.mul(rate);\r\n\r\n    // update state\r\n    weiRaised = weiRaised.add(weiAmount);\r\n\r\n    token.mint(beneficiary, tokens);\r\n    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\r\n\r\n    forwardFunds();\r\n  }\r\n\r\n  // send ether to the fund collection wallet\r\n  // override to create custom fund forwarding mechanisms\r\n  function forwardFunds() internal {\r\n    wallet.transfer(msg.value);\r\n  }\r\n\r\n  // @return true if the transaction can buy tokens\r\n  function validPurchase() internal constant returns (bool) {\r\n    uint256 current = block.number;\r\n    bool withinPeriod = current >= startBlock && current <= endBlock;\r\n    bool nonZeroPurchase = msg.value != 0;\r\n    return withinPeriod && nonZeroPurchase;\r\n  }\r\n\r\n  // @return true if crowdsale event has ended\r\n  function hasEnded() public constant returns (bool) {\r\n    return block.number > endBlock;\r\n  }\r\n\r\n\r\n}\r\n\r\ncontract CappedCrowdsale is Crowdsale {\r\n  using SafeMath for uint256;\r\n\r\n  uint256 public cap;\r\n\r\n  function CappedCrowdsale(uint256 _cap) {\r\n    require(_cap > 0);\r\n    cap = _cap;\r\n  }\r\n\r\n  function buyTokens(address _beneficiary) payable {\r\n    require(_beneficiary != 0x0);\r\n    require(validPurchase());\r\n\r\n    uint256 weiAmount = msg.value;\r\n    \r\n    if (weiRaised.add(weiAmount) > cap) {\r\n        uint256 rest = weiRaised.add(weiAmount).sub(cap);\r\n\r\n        _beneficiary.transfer(rest);\r\n        weiAmount = weiAmount.sub(rest);\r\n    }\r\n\r\n    // calculate token amount to be created\r\n    uint256 tokens = weiAmount.mul(rate);\r\n\r\n    // update state\r\n    weiRaised = weiRaised.add(weiAmount);\r\n\r\n    token.mint(_beneficiary, tokens);\r\n    TokenPurchase(msg.sender, _beneficiary, weiAmount, tokens);\r\n\r\n    forwardFunds(weiAmount);\r\n  }\r\n\r\n  function forwardFunds(uint256 _amount) internal {\r\n    wallet.transfer(_amount);\r\n  }\r\n\r\n  // overriding Crowdsale#validPurchase to add extra cap logic\r\n  // @return true if investors can buy at the moment\r\n  function validPurchase() internal constant returns (bool) {\r\n    bool withinCap = weiRaised < cap;\r\n    return super.validPurchase() && withinCap;\r\n  }\r\n\r\n  // overriding Crowdsale#hasEnded to add cap logic\r\n  // @return true if crowdsale event has ended\r\n  function hasEnded() public constant returns (bool) {\r\n    bool capReached = weiRaised >= cap;\r\n    return super.hasEnded() || capReached;\r\n  }\r\n\r\n}\r\n\r\n\r\ncontract FinalizableCrowdsale is Crowdsale, Ownable {\r\n  using SafeMath for uint256;\r\n\r\n  bool public isFinalized = false;\r\n\r\n  event Finalized();\r\n\r\n  // should be called after crowdsale ends, to do\r\n  // some extra finalization work\r\n  function finalize() onlyOwner {\r\n    require(!isFinalized);\r\n    require(hasEnded());\r\n\r\n    finalization();\r\n    Finalized();\r\n    \r\n    isFinalized = true;\r\n  }\r\n\r\n  // end token minting on finalization\r\n  // override this with custom logic if needed\r\n  function finalization() internal {\r\n    token.finishMinting();\r\n  }\r\n\r\n\r\n\r\n}\r\n\r\ncontract FixedSupplyCrowdsale is FinalizableCrowdsale {\r\n    uint256 targetSupply;\r\n    address beneficiary;\r\n    address advisors;\r\n    uint256 share;\r\n    \r\n    function FixedSupplyCrowdsale(uint256 _targetSupply, address _beneficiary, address _advisors, uint256 _share) {\r\n        require(_targetSupply > 0);\r\n        require(_beneficiary != 0x0);\r\n        require(_advisors != 0x0);\r\n\r\n        targetSupply = _targetSupply;\r\n        beneficiary = _beneficiary;\r\n        advisors = _advisors;\r\n        share = _share;\r\n    }\r\n\r\n    function finalization() internal {\r\n        uint256 mintedSupply = token.totalSupply();\r\n        \r\n        if (mintedSupply < targetSupply) {\r\n            uint256 advisorsTokens = targetSupply.mul(share).div(100);\r\n            uint256 remainingSupply = targetSupply.sub(advisorsTokens).sub(mintedSupply);\r\n\r\n            token.mint(advisors, advisorsTokens);\r\n            token.mint(beneficiary, remainingSupply);\r\n        }\r\n\r\n        token.finishMinting();\r\n    }\r\n}\r\n\r\ncontract TGE is FixedSupplyCrowdsale, CappedCrowdsale {\r\n    using SafeMath for uint256;\r\n    \r\n    function TGE(\r\n        uint256 _start,\r\n        uint256 _end,\r\n        address _beneficiary,\r\n        address _advisors,\r\n        uint256 _share,\r\n        uint256 _cap,\r\n        uint256 _rate,\r\n        MintableToken _token\r\n        )\r\n        FixedSupplyCrowdsale(\r\n            21000000*10**18,\r\n            _beneficiary,\r\n            _advisors,\r\n            _share\r\n        )\r\n        CappedCrowdsale(\r\n            _cap*10**18\r\n        )\r\n        Crowdsale(\r\n            _start,\r\n            _end,\r\n            _rate,\r\n            _beneficiary\r\n        )\r\n    {\r\n        require(targetSupply.mul(share).div(100) <= targetSupply.sub(cap.mul(rate)));\r\n\r\n        token = _token;\r\n    }\r\n\r\n    function createTokenContract() internal returns (MintableToken) {\r\n        return MintableToken(0x0);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"endBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isFinalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_start\",\"type\":\"uint256\"},{\"name\":\"_end\",\"type\":\"uint256\"},{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_advisors\",\"type\":\"address\"},{\"name\":\"_share\",\"type\":\"uint256\"},{\"name\":\"_cap\",\"type\":\"uint256\"},{\"name\":\"_rate\",\"type\":\"uint256\"},{\"name\":\"_token\",\"type\":\"address\"}],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Finalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"}]","ContractName":"TGE","CompilerVersion":"v0.4.15+commit.bbb8e64f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000407c05000000000000000000000000000000000000000000000000000000000040dc35000000000000000000000000d5dade544aadeaaea4ffb2495eaa7a3f9bc49d3c00000000000000000000000028848f2d7c4f5ee44f6bc4e6c95b43b79cf43df2000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000c8000000000000000000000000000000000000000000000000000000000000271000000000000000000000000075d34b30a9a2405b7e2bbff94badcc0ce6c934ad","Library":"","SwarmSource":"bzzr://e66b4a9b507b1fa4eaf4af1728738d61e54aac13277c98dbff89cfce28d108f6"}]}