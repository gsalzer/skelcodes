{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner {\r\n    if (newOwner != address(0)) {\r\n      owner = newOwner;\r\n    }\r\n  }\r\n\r\n}\r\n\r\ncontract BBDToken {\r\n    function totalSupply() constant returns (uint256);\r\n    function balanceOf(address _owner) constant returns (uint256 balance);\r\n    function transfer(address _to, uint256 _value) returns (bool);\r\n\r\n    function creationRateOnTime() constant returns (uint256);\r\n    function creationMinCap() constant returns (uint256);\r\n    function transferToExchange(address _from, uint256 _value) returns (bool);\r\n    function buy(address _beneficiary) payable;\r\n}\r\n\r\n/**\r\n    Exchange for BlockChain Board Of Derivatives Token.\r\n */\r\ncontract BBDExchange is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 public constant startTime = 1506844800; //Sunday, 1 October 2017 08:00:00 GMT\r\n    uint256 public constant endTime = 1509523200;  // Wednesday, 1 November 2017 08:00:00 GMT\r\n\r\n    BBDToken private bbdToken;\r\n\r\n    // Events\r\n    event LogSell(address indexed _seller, uint256 _value, uint256 _amount);\r\n    event LogBuy(address indexed _purchaser, uint256 _value, uint256 _amount);\r\n\r\n    // Check if min cap was archived.\r\n    modifier onlyWhenICOReachedCreationMinCap() {\r\n        require(bbdToken.totalSupply() >= bbdToken.creationMinCap());\r\n        _;\r\n    }\r\n\r\n    function() payable {}\r\n\r\n    function Exchange(address bbdTokenAddress) {\r\n        bbdToken = BBDToken(bbdTokenAddress);\r\n    }\r\n\r\n    // Current exchange rate for BBD\r\n    function exchangeRate() constant returns (uint256){\r\n        return bbdToken.creationRateOnTime().mul(100).div(93); // 93% of price on current contract sale\r\n    }\r\n\r\n    // Number of BBD tokens on exchange\r\n    function exchangeBBDBalance() constant returns (uint256){\r\n        return bbdToken.balanceOf(this);\r\n    }\r\n\r\n    // Max number of BBD tokens on exchange to sell\r\n    function maxSell() constant returns (uint256 valueBbd) {\r\n        valueBbd = this.balance.mul(exchangeRate());\r\n    }\r\n\r\n    // Max value of wei for buy on exchange\r\n    function maxBuy() constant returns (uint256 valueInEthWei) {\r\n        valueInEthWei = exchangeBBDBalance().div(exchangeRate());\r\n    }\r\n\r\n    // Check if sell is possible\r\n    function checkSell(uint256 _valueBbd) constant returns (bool isPossible, uint256 valueInEthWei) {\r\n        valueInEthWei = _valueBbd.div(exchangeRate());\r\n        isPossible = this.balance >= valueInEthWei ? true : false;\r\n    }\r\n\r\n    // Check if buy is possible\r\n    function checkBuy(uint256 _valueInEthWei) constant returns (bool isPossible, uint256 valueBbd) {\r\n        valueBbd = _valueInEthWei.mul(exchangeRate());\r\n        isPossible = exchangeBBDBalance() >= valueBbd ? true : false;\r\n    }\r\n\r\n    // Sell BBD\r\n    function sell(uint256 _valueBbd) onlyWhenICOReachedCreationMinCap external {\r\n        require(_valueBbd > 0);\r\n        require(now >= startTime);\r\n        require(now <= endTime);\r\n        require(_valueBbd <= bbdToken.balanceOf(msg.sender));\r\n\r\n        uint256 checkedEth = _valueBbd.div(exchangeRate());\r\n        require(checkedEth <= this.balance);\r\n\r\n        //Transfer BBD to exchange and ETH to user \r\n        require(bbdToken.transferToExchange(msg.sender, _valueBbd));\r\n        msg.sender.transfer(checkedEth);\r\n\r\n        LogSell(msg.sender, checkedEth, _valueBbd);\r\n    }\r\n\r\n    // Buy BBD\r\n    function buy() onlyWhenICOReachedCreationMinCap payable external {\r\n        require(msg.value != 0);\r\n        require(now >= startTime);\r\n        require(now <= endTime);\r\n\r\n        uint256 checkedBBDTokens = msg.value.mul(exchangeRate());\r\n        require(checkedBBDTokens <= exchangeBBDBalance());\r\n\r\n        //Transfer BBD to user. \r\n        require(bbdToken.transfer(msg.sender, checkedBBDTokens));\r\n\r\n        LogBuy(msg.sender, msg.value, checkedBBDTokens);\r\n    }\r\n\r\n    // Close Exchange\r\n    function close() onlyOwner {\r\n        require(now >= endTime);\r\n\r\n        //Transfer BBD and ETH to owner\r\n        require(bbdToken.transfer(owner, exchangeBBDBalance()));\r\n        owner.transfer(this.balance);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_valueBbd\",\"type\":\"uint256\"}],\"name\":\"checkSell\",\"outputs\":[{\"name\":\"isPossible\",\"type\":\"bool\"},{\"name\":\"valueInEthWei\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"exchangeRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"close\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"bbdTokenAddress\",\"type\":\"address\"}],\"name\":\"Exchange\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxBuy\",\"outputs\":[{\"name\":\"valueInEthWei\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"exchangeBBDBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxSell\",\"outputs\":[{\"name\":\"valueBbd\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_valueBbd\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_valueInEthWei\",\"type\":\"uint256\"}],\"name\":\"checkBuy\",\"outputs\":[{\"name\":\"isPossible\",\"type\":\"bool\"},{\"name\":\"valueBbd\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_seller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"LogSell\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_purchaser\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"LogBuy\",\"type\":\"event\"}]","ContractName":"BBDExchange","CompilerVersion":"v0.4.13+commit.fb4cb1a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://2fdc9b7360d7319ed792cfdd08094eff5a34b417f5af83219dfdd5b0b313f146"}]}