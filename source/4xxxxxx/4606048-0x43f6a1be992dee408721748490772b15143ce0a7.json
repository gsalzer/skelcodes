{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n// Potatoin (or potato coin) is the first of its kind, virtualized vegetable\r\n// crypto-asset resistant to the inevitable crash of the world economy!\r\ncontract Potatoin {\r\n    // name, symbol and decimals implement the ERC20 token standard.\r\n    string public constant name     = \"Potatoin\";\r\n    string public constant symbol   = \"POIN\";\r\n    uint8  public constant decimals = 0;\r\n\r\n    // genesis and relief define the start and duration of the potato relief\r\n    // organized by the Potatoin foundation.\r\n    uint public genesis;\r\n    uint public relief;\r\n\r\n    // donated contains the addresses the foundation already donated to.\r\n    mapping(address => uint) public donated;\r\n\r\n    // rot and grow contains the time intervals in which unsowed potatoes rot\r\n    // away and sowed potatoes double.\r\n    uint public decay;\r\n    uint public growth;\r\n\r\n    // farmers, cellars and recycled track the current unsowed potatoes owned by\r\n    // individual famers and the last time rotten ones were recycled.\r\n    address[]                farmers;\r\n    mapping(address => uint) cellars;\r\n    mapping(address => uint) trashes;\r\n    mapping(address => uint) recycled;\r\n\r\n    // field and fields define the potato fields owned by individual famers,\r\n    // along with the number of potatoes in them and the sowing time/\r\n    struct field {\r\n        uint potatoes;\r\n        uint sowed;\r\n    }\r\n    mapping(address => field[]) public fields;\r\n    mapping(address => uint)    public empties;\r\n\r\n    // Transfer implements ERC20, raising a token transfer event.\r\n    event Transfer(address indexed _from, address indexed _to, uint _value);\r\n\r\n    // Potatoin is the Potatoin foundation constructor. It configures the potato\r\n    // relief and sets up the organizational oversight.\r\n    function Potatoin(uint256 _relief, uint256 _decay, uint256 _growth) public {\r\n        genesis = block.timestamp;\r\n        relief  = _relief;\r\n        decay   = _decay;\r\n        growth  = _growth;\r\n    }\r\n\r\n    // totalSupply returns the total number of potatoes owned by all people,\r\n    // taking into consideration those that already rotted away.\r\n    function totalSupply() constant public returns (uint totalSupply) {\r\n        for (uint i = 0; i < farmers.length; i++) {\r\n            totalSupply += balanceOf(farmers[i]);\r\n        }\r\n        return totalSupply;\r\n    }\r\n\r\n    // balanceOf returns the current number of potatoes owned by a particular\r\n    // account, taking into consideration those that already rotted away.\r\n    function balanceOf(address farmer) constant public returns (uint256 balance) {\r\n       return unsowed(farmer) + sowed(farmer);\r\n    }\r\n\r\n    // unsowed returns the current number of unsowed potatoes owned by a farmer,\r\n    // taking into consideration those that already rotted away.\r\n    function unsowed(address farmer) constant public returns (uint256 balance) {\r\n        // Retrieve the number of non-rotten potatoes from the cellar\r\n        var elapsed = block.timestamp - recycled[farmer];\r\n        if (elapsed < decay) {\r\n            balance = (cellars[farmer] * (decay - elapsed) + decay-1) / decay;\r\n        }\r\n        // Retrieve the number of non-rotten potatoes from the fields\r\n        var list = fields[farmer];\r\n        for (uint i = empties[farmer]; i < list.length; i++) {\r\n            elapsed = block.timestamp - list[i].sowed;\r\n            if (elapsed >= growth && elapsed - growth < decay) {\r\n                balance += (2 * list[i].potatoes * (decay-elapsed+growth) + decay-1) / decay;\r\n            }\r\n        }\r\n        return balance;\r\n    }\r\n\r\n    // sowed returns the current number of sowed potatoes owned by a farmer,\r\n    // taking into consideration those that are currently growing.\r\n    function sowed(address farmer) constant public returns (uint256 balance) {\r\n        var list = fields[farmer];\r\n        for (uint i = empties[farmer]; i < list.length; i++) {\r\n            // If the potatoes are fully grown, assume the field harvested\r\n            var elapsed = block.timestamp - list[i].sowed;\r\n            if (elapsed >= growth) {\r\n                continue;\r\n            }\r\n            // Otherwise calculate the number of potatoes \"in the making\"\r\n            balance += list[i].potatoes + list[i].potatoes * elapsed / growth;\r\n        }\r\n        return balance;\r\n    }\r\n\r\n    // trashed returns the number of potatoes owned by a farmer that rot away,\r\n    // taking into consideration the current storage and fields too.\r\n    function trashed(address farmer) constant public returns (uint256 balance) {\r\n        // Start with all the accounted for trash\r\n        balance = trashes[farmer];\r\n\r\n        // Calculate the rotten potatoes from storage\r\n        var elapsed = block.timestamp - recycled[farmer];\r\n        if (elapsed >= 0) {\r\n            var rotten = cellars[farmer];\r\n            if (elapsed < decay) {\r\n               rotten = cellars[farmer] * elapsed / decay;\r\n            }\r\n            balance += rotten;\r\n        }\r\n        // Calculate the rotten potatoes from the fields\r\n        var list = fields[farmer];\r\n        for (uint i = empties[farmer]; i < list.length; i++) {\r\n            elapsed = block.timestamp - list[i].sowed;\r\n            if (elapsed >= growth) {\r\n                rotten = 2 * list[i].potatoes;\r\n                if  (elapsed - growth < decay) {\r\n                    rotten = 2 * list[i].potatoes * (elapsed - growth) / decay;\r\n                }\r\n                balance += rotten;\r\n            }\r\n        }\r\n        return balance;\r\n    }\r\n\r\n    // request asks the Potatoin foundation for a grant of one potato. Potatoes\r\n    // are available only during the initial hunger relief phase.\r\n    function request() public {\r\n        // Farmers can only request potatoes during the relieve, one per person\r\n        require(block.timestamp < genesis + relief);\r\n        require(donated[msg.sender] == 0);\r\n\r\n        // Farmer is indeed a new one, grant its potato\r\n        donated[msg.sender] = block.timestamp;\r\n\r\n        farmers.push(msg.sender);\r\n        cellars[msg.sender] = 1;\r\n        recycled[msg.sender] = block.timestamp;\r\n\r\n        Transfer(this, msg.sender, 1);\r\n    }\r\n\r\n    // sow creates a new potato field with the requested number of potatoes in\r\n    // it, doubling after the growing period ends. If the farmer doesn't have\r\n    // the requested amount of potatoes, all existing ones will be sowed.\r\n    function sow(uint potatoes) public {\r\n        // Harvest any ripe fields\r\n        harvest(msg.sender);\r\n\r\n        // Make sure we have a meaningful amount to sow\r\n        if (potatoes == 0) {\r\n            return;\r\n        }\r\n        // If any potatoes are left for the farmer, sow them\r\n        if (cellars[msg.sender] > 0) {\r\n            if (potatoes > cellars[msg.sender]) {\r\n                potatoes = cellars[msg.sender];\r\n            }\r\n            fields[msg.sender].push(field(potatoes, block.timestamp));\r\n            cellars[msg.sender] -= potatoes;\r\n\r\n            Transfer(msg.sender, this, potatoes);\r\n        }\r\n    }\r\n\r\n    // harvest gathers all the potatoes of a user that have finished growing.\r\n    // Any rotten ones are deduced from the final counter. The potatoes in the\r\n    // cellar are also accounted for.\r\n    function harvest(address farmer) internal {\r\n        // Recycle any rotted away potatoes to update the recycle timer\r\n        recycle(farmer);\r\n\r\n        // Harvest all the ripe fields\r\n        var list = fields[farmer];\r\n        for (uint i = empties[farmer]; i < list.length; i++) {\r\n            var elapsed = block.timestamp - list[i].sowed;\r\n            if (elapsed >= growth) {\r\n                if (elapsed - growth < decay) {\r\n                    var harvested = (2 * list[i].potatoes * (decay-elapsed+growth) + decay-1) / decay;\r\n                    var rotten    = 2 * list[i].potatoes - harvested;\r\n\r\n                    cellars[farmer] += harvested;\r\n                    Transfer(this, farmer, harvested);\r\n\r\n                    if (rotten > 0) {\r\n                        trashes[farmer] += rotten;\r\n                        Transfer(this, 0, rotten);\r\n                    }\r\n                } else {\r\n                    trashes[farmer] += 2 * list[i].potatoes;\r\n                    Transfer(this, 0, 2 * list[i].potatoes);\r\n                }\r\n                empties[farmer]++;\r\n            }\r\n        }\r\n        // If all the fields were harvested, rewind the accumulators\r\n        if (empties[farmer] > 0 && empties[farmer] == list.length) {\r\n            delete empties[farmer];\r\n            delete fields[farmer];\r\n        }\r\n    }\r\n\r\n    // recycle throws away the potatoes of a user that rotted away.\r\n    function recycle(address farmer) internal {\r\n        var elapsed = block.timestamp - recycled[farmer];\r\n        if (elapsed == 0) {\r\n            return;\r\n        }\r\n        var rotten = cellars[farmer];\r\n        if (elapsed < decay) {\r\n           rotten = cellars[farmer] * elapsed / decay;\r\n        }\r\n        if (rotten > 0) {\r\n            cellars[farmer] -= rotten;\r\n            trashes[farmer] += rotten;\r\n\r\n            Transfer(farmer, 0, rotten);\r\n        }\r\n        recycled[farmer] = block.timestamp;\r\n    }\r\n\r\n    // transfer forwards a number of potatoes to the requested address.\r\n    function transfer(address to, uint potatoes) public returns (bool success) {\r\n        // Harvest own ripe fields and make sure we can transfer\r\n        harvest(msg.sender);\r\n        if (cellars[msg.sender] < potatoes) {\r\n            return false;\r\n        }\r\n        // Recycle the remote rotten ones and execute the transfre\r\n        recycle(to);\r\n        cellars[msg.sender] -= potatoes;\r\n        cellars[to]         += potatoes;\r\n\r\n        Transfer(msg.sender, to, potatoes);\r\n        return true;\r\n    }\r\n\r\n    // transferFrom implements ERC20, but is forbidden.\r\n    function transferFrom(address _from, address _to, uint _value) returns (bool success) {\r\n        return false;\r\n    }\r\n\r\n    // approve implements ERC20, but is forbidden.\r\n    function approve(address _spender, uint _value) returns (bool success) {\r\n        return false;\r\n    }\r\n\r\n    // allowance implements ERC20, but is forbidden.\r\n    function allowance(address _owner, address _spender) constant returns (uint remaining) {\r\n        return 0;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"request\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"potatoes\",\"type\":\"uint256\"}],\"name\":\"sow\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decay\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"farmer\",\"type\":\"address\"}],\"name\":\"unsowed\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"empties\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"farmer\",\"type\":\"address\"}],\"name\":\"trashed\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"farmer\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"growth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"genesis\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"potatoes\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"relief\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"farmer\",\"type\":\"address\"}],\"name\":\"sowed\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"fields\",\"outputs\":[{\"name\":\"potatoes\",\"type\":\"uint256\"},{\"name\":\"sowed\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"donated\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_relief\",\"type\":\"uint256\"},{\"name\":\"_decay\",\"type\":\"uint256\"},{\"name\":\"_growth\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"Potatoin","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000002a30000000000000000000000000000000000000000000000000000000000000278d000000000000000000000000000000000000000000000000000000000000093a80","Library":"","SwarmSource":"bzzr://4de8c36c8eeb32104ba95e462a38d82f78e6cc703d39c64cae9618988ee3e4f0"}]}