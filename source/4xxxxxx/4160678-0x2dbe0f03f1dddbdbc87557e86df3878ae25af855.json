{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\n\r\n\r\n/**\r\n\r\n* @author Jefferson Davis\r\n\r\n* HashRuchICO.sol creates the client's token for crowdsale and allows for subsequent token sales and minting of tokens\r\n\r\n*   Crowdsale contracts edited from original contract code at https://www.ethereum.org/crowdsale#crowdfund-your-idea\r\n\r\n*   Additional crowdsale contracts, functions, libraries from OpenZeppelin\r\n\r\n*       at https://github.com/OpenZeppelin/zeppelin-solidity/tree/master/contracts/token\r\n\r\n*   Token contract edited from original contract code at https://www.ethereum.org/token\r\n\r\n*   ERC20 interface and certain token functions adapted from https://github.com/ConsenSys/Tokens\r\n\r\n**/\r\n\r\n\r\n\r\ncontract ERC20 {\r\n\r\n    //Sets events and functions for ERC20 token\r\n\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint _value);\r\n\r\n    \r\n\r\n    function allowance(address _owner, address _spender) constant returns (uint remaining);\r\n\r\n    function approve(address _spender, uint _value) returns (bool success);\r\n\r\n    function balanceOf(address _owner) constant returns (uint balance);\r\n\r\n    function transfer(address _to, uint _value) returns (bool success);\r\n\r\n    function transferFrom(address _from, address _to, uint _value) returns (bool success);\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\ncontract Owned {\r\n\r\n    //Public variable\r\n\r\n    address public owner;\r\n\r\n\r\n\r\n    //Sets contract creator as the owner\r\n\r\n    function Owned() {\r\n\r\n        owner = msg.sender;\r\n\r\n    }\r\n\r\n    \r\n\r\n    //Sets onlyOwner modifier for specified functions\r\n\r\n    modifier onlyOwner {\r\n\r\n        require(msg.sender == owner);\r\n\r\n        _;\r\n\r\n    }\r\n\r\n\r\n\r\n    //Allows for transfer of contract ownership\r\n\r\n    function transferOwnership(address newOwner) onlyOwner {\r\n\r\n        owner = newOwner;\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal returns (uint256) {\r\n\r\n        uint256 c = a + b;\r\n\r\n        assert(c >= a);\r\n\r\n        return c;\r\n\r\n    }  \r\n\r\n\r\n\r\n    function div(uint256 a, uint256 b) internal returns (uint256) {\r\n\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n\r\n        uint256 c = a / b;\r\n\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n\r\n    }\r\n\r\n\r\n\r\n    function max64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n\r\n        return a >= b ? a : b;\r\n\r\n    }\r\n\r\n\r\n\r\n    function max256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n\r\n        return a >= b ? a : b;\r\n\r\n    }\r\n\r\n\r\n\r\n    function min64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n\r\n        return a < b ? a : b;\r\n\r\n    }\r\n\r\n\r\n\r\n    function min256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n\r\n        return a < b ? a : b;\r\n\r\n    }\r\n\r\n  \r\n\r\n    function mul(uint256 a, uint256 b) internal returns (uint256) {\r\n\r\n        uint256 c = a * b;\r\n\r\n        assert(a == 0 || c / a == b);\r\n\r\n        return c;\r\n\r\n    }\r\n\r\n\r\n\r\n    function sub(uint256 a, uint256 b) internal returns (uint256) {\r\n\r\n        assert(b <= a);\r\n\r\n        return a - b;\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\ncontract HashRush is ERC20, Owned {\r\n\r\n    //Applies SafeMath library to uint256 operations \r\n\r\n    using SafeMath for uint256;\r\n\r\n\r\n\r\n    //Public variables\r\n\r\n    string public name; \r\n\r\n    string public symbol; \r\n\r\n    uint256 public decimals;  \r\n\r\n    uint256 public totalSupply; \r\n\r\n\r\n\r\n    //Variables\r\n\r\n    uint256 multiplier; \r\n\r\n    \r\n\r\n    //Creates arrays for balances\r\n\r\n    mapping (address => uint256) balance;\r\n\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n\r\n\r\n\r\n    //Creates modifier to prevent short address attack\r\n\r\n    modifier onlyPayloadSize(uint size) {\r\n\r\n        if(msg.data.length < size + 4) revert();\r\n\r\n        _;\r\n\r\n    }\r\n\r\n\r\n\r\n    //Constructor\r\n\r\n    function HashRush(string tokenName, string tokenSymbol, uint8 decimalUnits, uint256 decimalMultiplier) {\r\n\r\n        name = tokenName; \r\n\r\n        symbol = tokenSymbol; \r\n\r\n        decimals = decimalUnits; \r\n\r\n        multiplier = decimalMultiplier;  \r\n\r\n    }\r\n\r\n    \r\n\r\n    //Provides the remaining balance of approved tokens from function approve \r\n\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n\r\n      return allowed[_owner][_spender];\r\n\r\n    }\r\n\r\n\r\n\r\n    //Allows for a certain amount of tokens to be spent on behalf of the account owner\r\n\r\n    function approve(address _spender, uint256 _value) returns (bool success) { \r\n\r\n        allowed[msg.sender][_spender] = _value;\r\n\r\n        Approval(msg.sender, _spender, _value);\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n\r\n\r\n    //Returns the account balance \r\n\r\n    function balanceOf(address _owner) constant returns (uint256 remainingBalance) {\r\n\r\n        return balance[_owner];\r\n\r\n    }\r\n\r\n\r\n\r\n    //Allows contract owner to mint new tokens, prevents numerical overflow\r\n\r\n    function mintToken(address target, uint256 mintedAmount) onlyOwner returns (bool success) {\r\n\r\n        require(mintedAmount > 0); \r\n\r\n        uint256 addTokens = mintedAmount; \r\n\r\n        balance[target] += addTokens;\r\n\r\n        totalSupply += addTokens;\r\n\r\n        Transfer(0, target, addTokens);\r\n\r\n        return true; \r\n\r\n    }\r\n\r\n\r\n\r\n    //Sends tokens from sender's account\r\n\r\n    function transfer(address _to, uint256 _value) onlyPayloadSize(2 * 32) returns (bool success) {\r\n\r\n        if ((balance[msg.sender] >= _value) && (balance[_to] + _value > balance[_to])) {\r\n\r\n            balance[msg.sender] -= _value;\r\n\r\n            balance[_to] += _value;\r\n\r\n            Transfer(msg.sender, _to, _value);\r\n\r\n            return true;\r\n\r\n        } else { \r\n\r\n            return false; \r\n\r\n        }\r\n\r\n    }\r\n\r\n    \r\n\r\n    //Transfers tokens from an approved account \r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) onlyPayloadSize(3 * 32) returns (bool success) {\r\n\r\n        if ((balance[_from] >= _value) && (allowed[_from][msg.sender] >= _value) && (balance[_to] + _value > balance[_to])) {\r\n\r\n            balance[_to] += _value;\r\n\r\n            balance[_from] -= _value;\r\n\r\n            allowed[_from][msg.sender] -= _value;\r\n\r\n            Transfer(_from, _to, _value);\r\n\r\n            return true;\r\n\r\n        } else { \r\n\r\n            return false; \r\n\r\n        }\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\ncontract HashRushICO is Owned, HashRush {\r\n\r\n    //Applies SafeMath library to uint256 operations \r\n\r\n    using SafeMath for uint256;\r\n\r\n\r\n\r\n    //Public Variables\r\n\r\n    address public multiSigWallet;                  \r\n\r\n    uint256 public amountRaised; \r\n\r\n    uint256 public startTime; \r\n\r\n    uint256 public stopTime; \r\n\r\n    uint256 public hardcap; \r\n\r\n    uint256 public price;                            \r\n\r\n\r\n\r\n    //Variables\r\n\r\n    bool crowdsaleClosed = true;                    \r\n\r\n    string tokenName = \"HashRush\"; \r\n\r\n    string tokenSymbol = \"RC\"; \r\n\r\n    uint256 multiplier = 100000000; \r\n\r\n    uint8 decimalUnits = 8;  \r\n\r\n\r\n\r\n    \r\n\r\n\r\n\r\n    //Initializes the token\r\n\r\n    function HashRushICO() \r\n\r\n        HashRush(tokenName, tokenSymbol, decimalUnits, multiplier) {  \r\n\r\n            multiSigWallet = msg.sender;        \r\n\r\n            hardcap = 70000000;    \r\n\r\n            hardcap = hardcap.mul(multiplier); \r\n\r\n    }\r\n\r\n\r\n\r\n    //Fallback function creates tokens and sends to investor when crowdsale is open\r\n\r\n    function () payable {\r\n\r\n        require(!crowdsaleClosed \r\n\r\n            && (now < stopTime) \r\n\r\n            && (totalSupply.add(msg.value.mul(getPrice()).mul(multiplier).div(1 ether)) <= hardcap)); \r\n\r\n        address recipient = msg.sender; \r\n\r\n        amountRaised = amountRaised.add(msg.value.div(1 ether)); \r\n\r\n        uint256 tokens = msg.value.mul(getPrice()).mul(multiplier).div(1 ether);\r\n\r\n        totalSupply = totalSupply.add(tokens);\r\n\r\n        balance[recipient] = balance[recipient].add(tokens);\r\n\r\n        require(multiSigWallet.send(msg.value)); \r\n\r\n        Transfer(0, recipient, tokens);\r\n\r\n    }   \r\n\r\n\r\n\r\n    //Returns the current price of the token for the crowdsale\r\n\r\n    function getPrice() returns (uint256 result) {\r\n\r\n        return price;\r\n\r\n    }\r\n\r\n\r\n\r\n    //Returns time remaining on crowdsale\r\n\r\n    function getRemainingTime() constant returns (uint256) {\r\n\r\n        return stopTime; \r\n\r\n    }\r\n\r\n\r\n\r\n    //Set the sale hardcap amount\r\n\r\n    function setHardCapValue(uint256 newHardcap) onlyOwner returns (bool success) {\r\n\r\n        hardcap = newHardcap.mul(multiplier); \r\n\r\n        return true; \r\n\r\n    }\r\n\r\n\r\n\r\n    //Sets the multisig wallet for a crowdsale\r\n\r\n    function setMultiSigWallet(address wallet) onlyOwner returns (bool success) {\r\n\r\n        multiSigWallet = wallet; \r\n\r\n        return true; \r\n\r\n    }\r\n\r\n\r\n\r\n    //Sets the token price \r\n\r\n    function setPrice(uint256 newPriceperEther) onlyOwner returns (uint256) {\r\n\r\n        require(newPriceperEther > 0);  \r\n\r\n        price = newPriceperEther; \r\n\r\n        return price; \r\n\r\n    }\r\n\r\n\r\n\r\n    //Allows owner to start the crowdsale from the time of execution until a specified stopTime\r\n\r\n    function startSale(uint256 saleStart, uint256 saleStop, uint256 salePrice, address setBeneficiary) onlyOwner returns (bool success) {\r\n\r\n        require(saleStop > now);     \r\n\r\n        //startTime = 1502881261; // 16 August 2017, 11:01 AM GMT \r\n\r\n        //stopTime = 1504263601;  // 1 September 2017, 11:00 AM GMT\r\n\r\n        startTime = saleStart; \r\n\r\n        stopTime = saleStop; \r\n\r\n        crowdsaleClosed = false; \r\n\r\n        setPrice(salePrice); \r\n\r\n        setMultiSigWallet(setBeneficiary); \r\n\r\n        return true; \r\n\r\n    }\r\n\r\n\r\n\r\n    //Allows owner to stop the crowdsale immediately\r\n\r\n    function stopSale() onlyOwner returns (bool success) {\r\n\r\n        stopTime = now; \r\n\r\n        crowdsaleClosed = true;\r\n\r\n        return true; \r\n\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"newHardcap\",\"type\":\"uint256\"}],\"name\":\"setHardCapValue\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stopTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"multiSigWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"saleStart\",\"type\":\"uint256\"},{\"name\":\"saleStop\",\"type\":\"uint256\"},{\"name\":\"salePrice\",\"type\":\"uint256\"},{\"name\":\"setBeneficiary\",\"type\":\"address\"}],\"name\":\"startSale\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"remainingBalance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"mintedAmount\",\"type\":\"uint256\"}],\"name\":\"mintToken\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"amountRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newPriceperEther\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getPrice\",\"outputs\":[{\"name\":\"result\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hardcap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stopSale\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRemainingTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"setMultiSigWallet\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"HashRushICO","CompilerVersion":"v0.4.13-nightly.2017.7.3+commit.6e4e627b","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://c25bbf904ec53644f9cf0c4565fe11179151990a459e22e2cff2a19e603969a4"}]}