{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.17;\r\n\r\ncontract PyramidGame\r\n{\r\n    /////////////////////////////////////////////\r\n    // Game parameters\r\n    uint256 private constant BOTTOM_LAYER_BET_AMOUNT = 0.005 ether;\r\n    uint256 private adminFeeDivisor; // e.g. 100 means a 1% fee, 200 means a 0.5% fee\r\n    \r\n    /////////////////////////////////////////////\r\n    // Game owner\r\n    address private administrator;\r\n    \r\n    /////////////////////////////////////////////\r\n    // Pyramid grid data\r\n    //\r\n    // The uint32 is the coordinates.\r\n    // It consists of two uint16's:\r\n    // The x is the most significant 2 bytes (16 bits)\r\n    // The y is the least significant 2 bytes (16 bits)\r\n    // x = coordinates >> 16\r\n    // y = coordinates & 0xFFFF\r\n    // coordinates = (x << 16) | y\r\n    // x is a 16-bit unsigned integer\r\n    // y is a 16-bit unsigned integer\r\n    mapping(uint32 => address) public coordinatesToAddresses;\r\n    uint32[] public allBlockCoordinates;\r\n    \r\n    // In the user interface, the rows of blocks will be\r\n    // progressively shifted more to the right, as y increases\r\n    // \r\n    // For example, these blocks in the contract's coordinate system:\r\n    //         ______\r\n    //      2 |__A__|______\r\n    // /|\\  1 |__B__|__D__|______\r\n    //  |   0 |__C__|__E__|__F__|\r\n    //  y        0     1     2\r\n    // \r\n    //        x -->\r\n    // \r\n    // \r\n    // Become these blocks in the user interface:\r\n    //    __        ______\r\n    //    /|     __|__A__|___\r\n    //   /    __|__B__|__D__|___\r\n    //  y    |__C__|__E__|__F__|\r\n    // \r\n    //   x -->\r\n    // \r\n    // \r\n    \r\n    /////////////////////////////////////////////\r\n    // Address properties\r\n    mapping(address => uint256) public addressesToTotalWeiPlaced;\r\n    mapping(address => uint256) public addressBalances;\r\n    \r\n    ////////////////////////////////////////////\r\n    // Game Constructor\r\n    function PyramidGame() public\r\n    {\r\n        administrator = msg.sender;\r\n        adminFeeDivisor = 200; // Default fee is 0.5%\r\n        \r\n        // The administrator gets a few free chat messages :-)\r\n        addressesToChatMessagesLeft[administrator] += 5;\r\n        \r\n        // Set the first block in the middle of the bottom row\r\n        coordinatesToAddresses[uint32(1 << 15) << 16] = msg.sender;\r\n        allBlockCoordinates.push(uint32(1 << 15) << 16);\r\n    }\r\n    \r\n    ////////////////////////////////////////////\r\n    // Pyramid grid reading functions\r\n    function getBetAmountAtLayer(uint16 y) public pure returns (uint256)\r\n    {\r\n        // The minimum bet doubles every time you go up 1 layer\r\n        return BOTTOM_LAYER_BET_AMOUNT * (uint256(1) << y);\r\n    }\r\n    \r\n    function isThereABlockAtCoordinates(uint16 x, uint16 y) public view returns (bool)\r\n    {\r\n        return coordinatesToAddresses[(uint32(x) << 16) | uint16(y)] != 0;\r\n    }\r\n    \r\n    function getTotalAmountOfBlocks() public view returns (uint256)\r\n    {\r\n        return allBlockCoordinates.length;\r\n    }\r\n    \r\n    ////////////////////////////////////////////\r\n    // Pyramid grid writing functions\r\n    function placeBlock(uint16 x, uint16 y) external payable\r\n    {\r\n        // You may only place a block on an empty spot\r\n        require(!isThereABlockAtCoordinates(x, y));\r\n        \r\n        // Add the transaction amount to the person's balance\r\n        addressBalances[msg.sender] += msg.value;\r\n        \r\n        // Calculate the required bet amount at the specified layer\r\n        uint256 betAmount = getBetAmountAtLayer(y);\r\n\r\n        // If the block is at the lowest layer...\r\n        if (y == 0)\r\n        {\r\n            // There must be a block to the left or to the right of it\r\n            require(isThereABlockAtCoordinates(x-1, y) ||\r\n                    isThereABlockAtCoordinates(x+1, y));\r\n        }\r\n        \r\n        // If the block is NOT at the lowest layer...\r\n        else\r\n        {\r\n            // There must be two existing blocks below it:\r\n            require(isThereABlockAtCoordinates(x  , y-1) &&\r\n                    isThereABlockAtCoordinates(x+1, y-1));\r\n        }\r\n        \r\n        // Subtract the bet amount from the person's balance\r\n        addressBalances[msg.sender] -= betAmount;\r\n        \r\n        // Place the block\r\n        coordinatesToAddresses[(uint32(x) << 16) | y] = msg.sender;\r\n        allBlockCoordinates.push((uint32(x) << 16) | y);\r\n        \r\n        // If the block is at the lowest layer...\r\n        if (y == 0)\r\n        {\r\n            // The bet goes to the administrator\r\n            addressBalances[administrator] += betAmount;\r\n        }\r\n        \r\n        // If the block is NOT at the lowest layer...\r\n        else\r\n        {\r\n            // Calculate the administrator fee\r\n            uint256 adminFee = betAmount / adminFeeDivisor;\r\n            \r\n            // Calculate the bet amount minus the admin fee\r\n            uint256 betAmountMinusAdminFee = betAmount - adminFee;\r\n            \r\n            // Add the money to the balances of the people below\r\n            addressBalances[coordinatesToAddresses[(uint32(x  ) << 16) | (y-1)]] += betAmountMinusAdminFee / 2;\r\n            addressBalances[coordinatesToAddresses[(uint32(x+1) << 16) | (y-1)]] += betAmountMinusAdminFee / 2;\r\n            \r\n            // Give the admin fee to the admin\r\n            addressBalances[administrator] += adminFee;\r\n        }\r\n        \r\n        // The new sender's balance must not have underflowed\r\n        // (this verifies that the sender has enough balance to place the block)\r\n        require(addressBalances[msg.sender] < (1 << 255));\r\n        \r\n        // Give the sender their chat message rights\r\n        addressesToChatMessagesLeft[msg.sender] += uint32(1) << y;\r\n        \r\n        // Register the sender's total bets placed\r\n        addressesToTotalWeiPlaced[msg.sender] += betAmount;\r\n    }\r\n    \r\n    ////////////////////////////////////////////\r\n    // Withdrawing balance\r\n    function withdrawBalance(uint256 amountToWithdraw) external\r\n    {\r\n        require(amountToWithdraw != 0);\r\n        \r\n        // The user must have enough balance to withdraw\r\n        require(addressBalances[msg.sender] >= amountToWithdraw);\r\n        \r\n        // Subtract the withdrawn amount from the user's balance\r\n        addressBalances[msg.sender] -= amountToWithdraw;\r\n        \r\n        // Transfer the amount to the user's address\r\n        // If the transfer() call fails an exception will be thrown,\r\n        // and therefore the user's balance will be automatically restored\r\n        msg.sender.transfer(amountToWithdraw);\r\n    }\r\n    \r\n    /////////////////////////////////////////////\r\n    // Chatbox data\r\n    struct ChatMessage\r\n    {\r\n        address person;\r\n        string message;\r\n    }\r\n    mapping(bytes32 => address) public usernamesToAddresses;\r\n    mapping(address => bytes32) public addressesToUsernames;\r\n    mapping(address => uint32) public addressesToChatMessagesLeft;\r\n    ChatMessage[] public chatMessages;\r\n    mapping(uint256 => bool) public censoredChatMessages;\r\n    \r\n    /////////////////////////////////////////////\r\n    // Chatbox functions\r\n    function registerUsername(bytes32 username) external\r\n    {\r\n        // The username must not already be token\r\n        require(usernamesToAddresses[username] == 0);\r\n        \r\n        // The address must not already have a username\r\n        require(addressesToUsernames[msg.sender] == 0);\r\n        \r\n        // Register the new username & address combination\r\n        usernamesToAddresses[username] = msg.sender;\r\n        addressesToUsernames[msg.sender] = username;\r\n    }\r\n    \r\n    function sendChatMessage(string message) external\r\n    {\r\n        // The sender must have at least 1 chat message allowance\r\n        require(addressesToChatMessagesLeft[msg.sender] >= 1);\r\n        \r\n        // Deduct 1 chat message allowence from the sender\r\n        addressesToChatMessagesLeft[msg.sender]--;\r\n        \r\n        // Add the chat message\r\n        chatMessages.push(ChatMessage(msg.sender, message));\r\n    }\r\n    \r\n    function getTotalAmountOfChatMessages() public view returns (uint256)\r\n    {\r\n        return chatMessages.length;\r\n    }\r\n    \r\n    function getChatMessageAtIndex(uint256 index) public view returns (address, bytes32, string)\r\n    {\r\n        address person = chatMessages[index].person;\r\n        bytes32 username = addressesToUsernames[person];\r\n        return (person, username, chatMessages[index].message);\r\n    }\r\n    \r\n    // In case of chat messages with extremely rude or inappropriate\r\n    // content, the administrator can censor a chat message.\r\n    function censorChatMessage(uint256 chatMessageIndex) public\r\n    {\r\n        require(msg.sender == administrator);\r\n        censoredChatMessages[chatMessageIndex] = true;\r\n    }\r\n    \r\n    /////////////////////////////////////////////\r\n    // Game ownership functions\r\n    function transferOwnership(address newAdministrator) external\r\n    {\r\n        require(msg.sender == administrator);\r\n        administrator = newAdministrator;\r\n    }\r\n    \r\n    function setFeeDivisor(uint256 newFeeDivisor) external\r\n    {\r\n        require(msg.sender == administrator);\r\n        require(newFeeDivisor >= 20); // The fee may never exceed 5%\r\n        adminFeeDivisor = newFeeDivisor;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"coordinatesToAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"y\",\"type\":\"uint16\"}],\"name\":\"getBetAmountAtLayer\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newFeeDivisor\",\"type\":\"uint256\"}],\"name\":\"setFeeDivisor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressesToTotalWeiPlaced\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"x\",\"type\":\"uint16\"},{\"name\":\"y\",\"type\":\"uint16\"}],\"name\":\"isThereABlockAtCoordinates\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalAmountOfBlocks\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"chatMessageIndex\",\"type\":\"uint256\"}],\"name\":\"censorChatMessage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressesToChatMessagesLeft\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"username\",\"type\":\"bytes32\"}],\"name\":\"registerUsername\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressBalances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getChatMessageAtIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressesToUsernames\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"message\",\"type\":\"string\"}],\"name\":\"sendChatMessage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalAmountOfChatMessages\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"chatMessages\",\"outputs\":[{\"name\":\"person\",\"type\":\"address\"},{\"name\":\"message\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amountToWithdraw\",\"type\":\"uint256\"}],\"name\":\"withdrawBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"x\",\"type\":\"uint16\"},{\"name\":\"y\",\"type\":\"uint16\"}],\"name\":\"placeBlock\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allBlockCoordinates\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"censoredChatMessages\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAdministrator\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"usernamesToAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"PyramidGame","CompilerVersion":"v0.4.17+commit.bdeb9e52","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://5e489178c96b9b3e01be40147b005910039149bcdd1130a94b42c7832784c4a5"}]}