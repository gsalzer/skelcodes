{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * @title KYC\r\n * @dev KYC contract handles the white list for ASTCrowdsale contract\r\n * Only accounts registered in KYC contract can buy AST token.\r\n * Admins can register account, and the reason why\r\n */\r\ncontract KYC is Ownable {\r\n  // check the address is registered for token sale\r\n  // first boolean is true if presale else false\r\n  // second boolean is true if registered else false\r\n  mapping (address => mapping (bool => bool)) public registeredAddress;\r\n\r\n  // check the address is admin of kyc contract\r\n  mapping (address => bool) public admin;\r\n\r\n  event Registered(address indexed _addr);\r\n  event Unregistered(address indexed _addr);\r\n  event SetAdmin(address indexed _addr);\r\n\r\n  /**\r\n   * @dev check whether the address is registered for token sale or not.\r\n   * @param _addr address\r\n   * @param _isPresale bool Whether the address is registered to presale or mainsale\r\n   */\r\n  modifier onlyRegistered(address _addr, bool _isPresale) {\r\n    require(registeredAddress[_addr][_isPresale]);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev check whether the msg.sender is admin or not\r\n   */\r\n  modifier onlyAdmin() {\r\n    require(admin[msg.sender]);\r\n    _;\r\n  }\r\n\r\n  function KYC() public {\r\n    admin[msg.sender] = true;\r\n  }\r\n\r\n  /**\r\n   * @dev set new admin as admin of KYC contract\r\n   * @param _addr address The address to set as admin of KYC contract\r\n   */\r\n  function setAdmin(address _addr, bool _value)\r\n    public\r\n    onlyOwner\r\n    returns (bool)\r\n  {\r\n    require(_addr != address(0));\r\n    require(admin[_addr] == !_value);\r\n\r\n    admin[_addr] = _value;\r\n\r\n    SetAdmin(_addr);\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev check the address is register\r\n   * @param _addr address The address to check\r\n   * @param _isPresale bool Whether the address is registered to presale or mainsale\r\n   */\r\n  function isRegistered(address _addr, bool _isPresale)\r\n    public\r\n    view\r\n    returns (bool)\r\n  {\r\n    return registeredAddress[_addr][_isPresale];\r\n  }\r\n\r\n  /**\r\n   * @dev register the address for token sale\r\n   * @param _addr address The address to register for token sale\r\n   * @param _isPresale bool Whether register to presale or mainsale\r\n   */\r\n  function register(address _addr, bool _isPresale)\r\n    public\r\n    onlyAdmin\r\n  {\r\n    require(_addr != address(0) && registeredAddress[_addr][_isPresale] == false);\r\n\r\n    registeredAddress[_addr][_isPresale] = true;\r\n\r\n    Registered(_addr);\r\n  }\r\n\r\n  /**\r\n   * @dev register the addresses for token sale\r\n   * @param _addrs address[] The addresses to register for token sale\r\n   * @param _isPresale bool Whether register to presale or mainsale\r\n   */\r\n  function registerByList(address[] _addrs, bool _isPresale)\r\n    public\r\n    onlyAdmin\r\n  {\r\n    for(uint256 i = 0; i < _addrs.length; i++) {\r\n      register(_addrs[i], _isPresale);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev unregister the registered address\r\n   * @param _addr address The address to unregister for token sale\r\n   * @param _isPresale bool Whether unregister to presale or mainsale\r\n   */\r\n  function unregister(address _addr, bool _isPresale)\r\n    public\r\n    onlyAdmin\r\n    onlyRegistered(_addr, _isPresale)\r\n  {\r\n    registeredAddress[_addr][_isPresale] = false;\r\n\r\n    Unregistered(_addr);\r\n  }\r\n\r\n  /**\r\n   * @dev unregister the registered addresses\r\n   * @param _addrs address[] The addresses to unregister for token sale\r\n   * @param _isPresale bool Whether unregister to presale or mainsale\r\n   */\r\n  function unregisterByList(address[] _addrs, bool _isPresale)\r\n    public\r\n    onlyAdmin\r\n  {\r\n    for(uint256 i = 0; i < _addrs.length; i++) {\r\n      unregister(_addrs[i], _isPresale);\r\n    }\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract PaymentFallbackReceiver {\r\n  BTCPaymentI public payment;\r\n\r\n  enum SaleType { pre, main }\r\n\r\n  function PaymentFallbackReceiver(address _payment) public {\r\n    require(_payment != address(0));\r\n    payment = BTCPaymentI(_payment);\r\n  }\r\n\r\n  modifier onlyPayment() {\r\n    require(msg.sender == address(payment));\r\n    _;\r\n  }\r\n\r\n  event MintByBTC(SaleType _saleType, address indexed _beneficiary, uint256 _tokens);\r\n\r\n  /**\r\n   * @dev paymentFallBack() is called in BTCPayment.addPayment().\r\n   * Presale or Mainsale contract should mint token to beneficiary,\r\n   * and apply corresponding ether amount to max ether cap.\r\n   * @param _beneficiary ethereum address who receives tokens\r\n   * @param _tokens amount of FXT to mint\r\n   */\r\n  function paymentFallBack(address _beneficiary, uint256 _tokens) external onlyPayment();\r\n}\r\n\r\n\r\n\r\ncontract PresaleFallbackReceiver {\r\n  bool public presaleFallBackCalled;\r\n\r\n  function presaleFallBack(uint256 _presaleWeiRaised) public returns (bool);\r\n}\r\n\r\n\r\n\r\ncontract BTCPaymentI is Ownable, PresaleFallbackReceiver {\r\n  PaymentFallbackReceiver public presale;\r\n  PaymentFallbackReceiver public mainsale;\r\n\r\n  function addPayment(address _beneficiary, uint256 _tokens) public;\r\n  function setPresale(address _presale) external;\r\n  function setMainsale(address _mainsale) external;\r\n  function presaleFallBack(uint256) public returns (bool);\r\n}\r\n\r\n\r\ncontract BTCPayment is Ownable, PresaleFallbackReceiver {\r\n  using SafeMath for uint256;\r\n\r\n  PaymentFallbackReceiver public presale;\r\n  PaymentFallbackReceiver public mainsale;\r\n\r\n  event NewPayment(address _beneficiary, uint256 _tokens);\r\n\r\n  function addPayment(address _beneficiary, uint256 _tokens)\r\n    public\r\n    onlyOwner\r\n  {\r\n    if (!presaleFallBackCalled) {\r\n      presale.paymentFallBack(_beneficiary, _tokens);\r\n    } else {\r\n      mainsale.paymentFallBack(_beneficiary, _tokens);\r\n    }\r\n\r\n    NewPayment(_beneficiary, _tokens);\r\n  }\r\n\r\n  function setPresale(address _presale) external onlyOwner {\r\n    require(presale == address(0));\r\n    presale = PaymentFallbackReceiver(_presale); // datatype conversion `address` to `PaymentFallbackReceiver`. not calling constructor `PaymentFallbackReceiver`\r\n  }\r\n\r\n  function setMainsale(address _mainsale) external onlyOwner {\r\n    require(mainsale == address(0));\r\n    mainsale = PaymentFallbackReceiver(_mainsale); // datatype conversion `address` to `PaymentFallbackReceiver`. not calling constructor `PaymentFallbackReceiver`\r\n  }\r\n\r\n  /**\r\n   * @dev Presale should notify that presale is finalized and mainsale\r\n   * is going to start.\r\n   */\r\n  function presaleFallBack(uint256) public returns (bool) {\r\n    require(msg.sender == address(presale));\r\n    if (presaleFallBackCalled) return false;\r\n    presaleFallBackCalled = true;\r\n    return true;\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"presaleFallBackCalled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_mainsale\",\"type\":\"address\"}],\"name\":\"setMainsale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"addPayment\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"presaleFallBack\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_presale\",\"type\":\"address\"}],\"name\":\"setPresale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mainsale\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presale\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"NewPayment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"BTCPayment","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://2a77a321e2340d011f599424f78a75e0e38e2c44e9f66a30254e3ffc7d49ec27"}]}