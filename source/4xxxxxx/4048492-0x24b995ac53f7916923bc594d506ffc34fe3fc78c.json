{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13;\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control \r\n * functions, this simplifies the implementation of \"user permissions\". \r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  /** \r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner. \r\n   */\r\n  modifier onlyOwner() {\r\n    if (msg.sender != owner) {\r\n      throw;\r\n    }\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to. \r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner {\r\n    if (newOwner != address(0)) {\r\n      owner = newOwner;\r\n    }\r\n  }\r\n\r\n}\r\n\r\n\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) constant returns (uint256);\r\n  function transfer(address to, uint256 value) returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) returns (bool);\r\n  function approve(address spender, uint256 value) returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances. \r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) returns (bool) {\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of. \r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amout of tokens to be transfered\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\r\n    var _allowance = allowed[_from][msg.sender];\r\n\r\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n    // if (_value > _allowance) throw;\r\n\r\n    balances[_to] = balances[_to].add(_value);\r\n    balances[_from] = balances[_from].sub(_value);\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) returns (bool) {\r\n\r\n    // To change the approve amount you first have to reduce the addresses`\r\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n    //  already 0 to mitigate the race condition described here:\r\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    if ((_value != 0) && (allowed[msg.sender][_spender] != 0)) throw;\r\n\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifing the amount of tokens still avaible for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n}\r\n\r\n\r\ncontract GenesisToken is StandardToken, Ownable {\r\n  using SafeMath for uint256;\r\n\r\n  // metadata\r\n  string public constant name = 'Genesis';\r\n  string public constant symbol = 'GNS';\r\n  uint256 public constant decimals = 18;\r\n  string public version = '0.0.1';\r\n\r\n  // events\r\n  event EarnedGNS(address indexed contributor, uint256 amount);\r\n  event TransferredGNS(address indexed from, address indexed to, uint256 value);\r\n\r\n  // constructor\r\n  function GenesisToken(\r\n    address _owner,\r\n    uint256 initialBalance)\r\n  {\r\n    owner = _owner;\r\n    totalSupply = initialBalance;\r\n    balances[_owner] = initialBalance;\r\n    EarnedGNS(_owner, initialBalance);\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will recieve the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function giveTokens(address _to, uint256 _amount) onlyOwner returns (bool) {\r\n    totalSupply = totalSupply.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    EarnedGNS(_to, _amount);\r\n    return true;\r\n  }\r\n}\r\n\r\n/**\r\n * This contract holds all the revenues generated by the DAO, and pays out to\r\n * token holders on a periodic basis.\r\n */\r\ncontract CrowdWallet is Ownable {\r\n  using SafeMath for uint;\r\n\r\n  struct Deposit {\r\n    uint amount;\r\n    uint block;\r\n  }\r\n\r\n  struct Payout {\r\n    uint amount;\r\n    uint block;\r\n  }\r\n\r\n  // Genesis Tokens determine the payout for each contributor.\r\n  GenesisToken public token;\r\n\r\n  // Track deposits/payouts by address\r\n  mapping (address => Deposit[]) public deposits;\r\n  mapping (address => Payout[]) public payouts;\r\n\r\n  // Track the sum of all payouts & deposits ever made to this contract.\r\n  uint public lifetimeDeposits;\r\n  uint public lifetimePayouts;\r\n\r\n  // Time between pay periods are defined as a number of blocks.\r\n  uint public blocksPerPayPeriod = 172800; // ~30 days\r\n  uint public previousPayoutBlock;\r\n  uint public nextPayoutBlock;\r\n\r\n  // The balance at the end of each period is saved here and allocated to token\r\n  // holders from the previous period.\r\n  uint public payoutPool;\r\n\r\n  // For doing division. Numerator should be multiplied by this.\r\n  uint multiplier = 10**18;\r\n\r\n  // Set a minimum that a user must have earned in order to withdraw it.\r\n  uint public minWithdrawalThreshold = 100000000000000000; // 0.1 ETH in wei\r\n\r\n  // Events\r\n  event onDeposit(address indexed _from, uint _amount);\r\n  event onPayout(address indexed _to, uint _amount);\r\n  event onPayoutFailure(address indexed _to, uint amount);\r\n\r\n  /**\r\n   * Constructor - set the GNS token address and the initial number of blocks\r\n   * in-between each pay period.\r\n   */\r\n  function CrowdWallet(address _gns, address _owner, uint _blocksPerPayPeriod) {\r\n    token = GenesisToken(_gns);\r\n    owner = _owner;\r\n    blocksPerPayPeriod = _blocksPerPayPeriod;\r\n    nextPayoutBlock = now.add(blocksPerPayPeriod);\r\n  }\r\n\r\n  function setMinimumWithdrawal(uint _weiAmount) onlyOwner {\r\n    minWithdrawalThreshold = _weiAmount;\r\n  }\r\n\r\n  function setBlocksPerPayPeriod(uint _blocksPerPayPeriod) onlyOwner {\r\n    blocksPerPayPeriod = _blocksPerPayPeriod;\r\n  }\r\n\r\n  /**\r\n   * To prevent cheating, when a withdrawal is made, the tokens for that address\r\n   * become immediately locked until the next period. Otherwise, they could send\r\n   * their tokens to another wallet and withdraw again.\r\n   */\r\n  function withdraw() {\r\n    require(previousPayoutBlock > 0);\r\n\r\n    // Ensure the user has not already made a withdrawal this period.\r\n    require(!isAddressLocked(msg.sender));\r\n\r\n    uint payoutAmount = calculatePayoutForAddress(msg.sender);\r\n\r\n    // Ensure user's payout is above the minimum threshold for withdrawals.\r\n    require(payoutAmount > minWithdrawalThreshold);\r\n\r\n    // User qualifies. Save the transaction with the current block number,\r\n    // effectively locking their tokens until the next payout date.\r\n    payouts[msg.sender].push(Payout({ amount: payoutAmount, block: now }));\r\n\r\n    require(this.balance >= payoutAmount);\r\n\r\n    onPayout(msg.sender, payoutAmount);\r\n\r\n    lifetimePayouts += payoutAmount;\r\n\r\n    msg.sender.transfer(payoutAmount);\r\n  }\r\n\r\n  /**\r\n   * Once a user gets paid out for a period, we lock up the tokens they own\r\n   * until the next period. Otherwise, they can send their tokens to a fresh\r\n   * address and then double dip.\r\n   */\r\n  function isAddressLocked(address contributor) constant returns(bool) {\r\n    var paymentHistory = payouts[contributor];\r\n\r\n    if (paymentHistory.length == 0) {\r\n      return false;\r\n    }\r\n\r\n    var lastPayment = paymentHistory[paymentHistory.length - 1];\r\n\r\n    return (lastPayment.block >= previousPayoutBlock) && (lastPayment.block < nextPayoutBlock);\r\n  }\r\n\r\n  /**\r\n   * Check if we are in a new payout cycle.\r\n   */\r\n  function isNewPayoutPeriod() constant returns(bool) {\r\n    return now >= nextPayoutBlock;\r\n  }\r\n\r\n  /**\r\n   * Start a new payout cycle\r\n   */\r\n  function startNewPayoutPeriod() {\r\n    require(isNewPayoutPeriod());\r\n\r\n    previousPayoutBlock = nextPayoutBlock;\r\n    nextPayoutBlock = nextPayoutBlock.add(blocksPerPayPeriod);\r\n    payoutPool = this.balance;\r\n  }\r\n\r\n  /**\r\n   * Determine the amount that should be paid out.\r\n   */\r\n  function calculatePayoutForAddress(address payee) constant returns(uint) {\r\n    uint ownedAmount = token.balanceOf(payee);\r\n    uint totalSupply = token.totalSupply();\r\n    uint percentage = (ownedAmount * multiplier) / totalSupply;\r\n    uint payout = (payoutPool * percentage) / multiplier;\r\n\r\n    return payout;\r\n  }\r\n\r\n  /**\r\n   * Check the contract's ETH balance.\r\n   */\r\n  function ethBalance() constant returns(uint) {\r\n    return this.balance;\r\n  }\r\n\r\n  /**\r\n   * Income should go here.\r\n   */\r\n  function deposit() payable {\r\n    onDeposit(msg.sender, msg.value);\r\n    lifetimeDeposits += msg.value;\r\n    deposits[msg.sender].push(Deposit({ amount: msg.value, block: now }));\r\n  }\r\n\r\n  function () payable {\r\n    deposit();\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"previousPayoutBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minWithdrawalThreshold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lifetimePayouts\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"payoutPool\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"payee\",\"type\":\"address\"}],\"name\":\"calculatePayoutForAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"payouts\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"block\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextPayoutBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isNewPayoutPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lifetimeDeposits\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"deposits\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"block\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"blocksPerPayPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"contributor\",\"type\":\"address\"}],\"name\":\"isAddressLocked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startNewPayoutPeriod\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_blocksPerPayPeriod\",\"type\":\"uint256\"}],\"name\":\"setBlocksPerPayPeriod\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_weiAmount\",\"type\":\"uint256\"}],\"name\":\"setMinimumWithdrawal\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_gns\",\"type\":\"address\"},{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_blocksPerPayPeriod\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"onDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"onPayout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"onPayoutFailure\",\"type\":\"event\"}]","ContractName":"CrowdWallet","CompilerVersion":"v0.4.13+commit.fb4cb1a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000b49e7750b6c4afcba510b2c82ce643116d0b6cd00000000000000000000000002b981863a0fbf4e07c8508623de8bd6d4b28419c000000000000000000000000000000000000000000000000000000000002a300","Library":"","SwarmSource":"bzzr://928514be30cbaafe007bbca07452f4f0fb3e069877736088c25f4fd4a0356a69"}]}