{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\ncontract ETHRoyale {\r\n    address devAccount = 0x50334D202f61F80384C065BE6537DD3d609FF9Ab; //Dev address to send dev fee (0.75%) to.\r\n    uint masterBalance; //uint var for total real balance of contract\r\n    uint masterApparentBalance; //var for total apparent balance of contract (real balance + all fake interest collected)\r\n    \r\n    //Array log of current participants\r\n    address[] public participants;\r\n    mapping (address => uint) participantsArrayLocation;\r\n    uint participantsCount;\r\n    \r\n    //Boolean to check if deposits are enabled\r\n    bool isDisabled;\r\n\tbool hasStarted;\r\n\t\r\n    //Track deposit times\r\n    uint blockHeightStart;\r\n    bool isStart;\r\n    event Deposit(uint _valu);\r\n\t\r\n    //Mappings to link account values and dates of last interest claim with an Ethereum address\r\n    mapping (address => uint) accountBalance;\r\n    mapping (address => uint) realAccountBalance;\r\n    mapping (address => uint) depositBlockheight;\r\n    \r\n    //Check individual account balance and return balance associated with that address\r\n    function checkAccBalance() public view returns (uint) {\r\n        address _owner = msg.sender;\r\n        return (accountBalance[_owner]);\r\n    }\r\n    \r\n    //Check actual balance of all wallets\r\n    function checkGlobalBalance() public view returns (uint) {\r\n        return masterBalance;\r\n    }\r\n    \r\n\t//Check game status\r\n\tfunction checkGameStatus() public view returns (bool) {\r\n        return (isStart);\r\n    }\r\n    function checkDisabledStatus() public view returns (bool) {\r\n        return (isDisabled);\r\n    }\r\n\t\r\n    //Check interest due\r\n    function checkInterest() public view returns (uint) {\r\n        address _owner = msg.sender;\r\n        uint _interest;\r\n        if (isStart) {\r\n            if (blockHeightStart > depositBlockheight[_owner]) {\r\n\t\t        _interest = ((accountBalance[_owner] * (block.number - blockHeightStart) / 2000));\r\n\t\t    } else {\r\n\t\t        _interest = ((accountBalance[_owner] * (block.number - depositBlockheight[_owner]) / 2000));\r\n\t\t    }\r\n\t\treturn _interest;\r\n        }else {\r\n\t\t\treturn 0;\r\n        }\r\n    }\r\n\t\r\n    //Check interest due + balance\r\n    function checkWithdrawalAmount() public view returns (uint) {\r\n        address _owner = msg.sender;\r\n        uint _interest;\r\n\t\tif (isStart) {\r\n\t\t    if (blockHeightStart > depositBlockheight[_owner]) {\r\n\t\t        _interest = ((accountBalance[_owner] * (block.number - blockHeightStart) / 2000));\r\n\t\t    } else {\r\n\t\t        _interest = ((accountBalance[_owner] * (block.number - depositBlockheight[_owner]) / 2000));\r\n\t\t    }\r\n\t    return (accountBalance[_owner] + _interest);\r\n\t\t} else {\r\n\t\t\treturn accountBalance[_owner];\r\n\t\t}\r\n    }\r\n    //check number of participants\r\n    function numberParticipants() public view returns (uint) {\r\n        return participantsCount;\r\n    }\r\n    \r\n    //Take deposit of funds\r\n    function deposit() payable public {\r\n        address _owner = msg.sender;\r\n        uint _amt = msg.value;         \r\n        require (!isDisabled && _amt >= 10000000000000000 && isNotContract(_owner));\r\n        if (accountBalance[_owner] == 0) { //If account is a new player, add them to mappings and arrays\r\n            participants.push(_owner);\r\n            participantsArrayLocation[_owner] = participants.length - 1;\r\n            depositBlockheight[_owner] = block.number;\r\n            participantsCount++;\r\n\t\t\tif (participantsCount > 4) { //If game has 5 or more players, interest can start.\r\n\t\t\t\tisStart = true;\r\n\t\t\t\tblockHeightStart = block.number;\r\n\t\t\t\thasStarted = true;\r\n\t\t\t}\r\n        }\r\n        else {\r\n            isStart = false;\r\n            blockHeightStart = 0;\r\n        }\r\n\t\tDeposit(_amt);\r\n        //add deposit to amounts\r\n        accountBalance[_owner] += _amt;\r\n        realAccountBalance[_owner] += _amt;\r\n        masterBalance += _amt;\r\n        masterApparentBalance += _amt;\r\n    }\r\n    \r\n    //Retrieve interest earned since last interest collection\r\n    function collectInterest(address _owner) internal {\r\n        require (isStart);\r\n        uint blockHeight; \r\n        //Require 5 or more players for interest to be collected to make trolling difficult\r\n        if (depositBlockheight[_owner] < blockHeightStart) {\r\n            blockHeight = blockHeightStart;\r\n        }\r\n        else {\r\n            blockHeight = depositBlockheight[_owner];\r\n        }\r\n        //Add 0.05% interest for every block (approx 14.2 sec https://etherscan.io/chart/blocktime) since last interest collection/deposit\r\n        uint _tempInterest = accountBalance[_owner] * (block.number - blockHeight) / 2000;\r\n        accountBalance[_owner] += _tempInterest;\r\n        masterApparentBalance += _tempInterest;\r\n\t\t//Set time since interest last collected\r\n\t\tdepositBlockheight[_owner] = block.number;\r\n\t}\r\n\r\n    //Allow withdrawal of funds and if funds left in contract are less than withdrawal requested and greater or = to account balance, contract balance will be cleared\r\n    function withdraw(uint _amount) public  {\r\n        address _owner = msg.sender; \r\n\t\tuint _amt = _amount;\r\n        uint _devFee;\r\n        require (accountBalance[_owner] > 0 && _amt > 0 && isNotContract(_owner));\r\n        if (isStart) { //Collect interest due if game has started\r\n        collectInterest(msg.sender);\r\n        }\r\n\t\trequire (_amt <= accountBalance[_owner]);\r\n        if (accountBalance[_owner] == _amount || accountBalance[_owner] - _amount < 10000000000000000) { //Check if sender is withdrawing their entire balance or will leave less than 0.01ETH\r\n\t\t\t_amt = accountBalance[_owner];\r\n\t\t\tif (_amt > masterBalance) { //If contract balance is lower than account balance, withdraw account balance.\r\n\t\t\t\t_amt = masterBalance;\r\n\t\t\t}\t\r\n            _devFee = _amt / 133; //Take 0.75% dev fee\r\n            _amt -= _devFee;\r\n            masterApparentBalance -= _devFee;\r\n            masterBalance -= _devFee;\r\n            accountBalance[_owner] -= _devFee;\r\n            masterBalance -= _amt;\r\n            masterApparentBalance -= _amt;\r\n            //Delete sender address from mappings and arrays if they are withdrawing their entire balance\r\n            delete accountBalance[_owner];\r\n            delete depositBlockheight[_owner];\r\n            delete participants[participantsArrayLocation[_owner]];\r\n\t\t\tdelete participantsArrayLocation[_owner];\r\n            delete realAccountBalance[_owner];\r\n            participantsCount--;\r\n            if (participantsCount < 5) { //If there are less than 5 people, stop the game.\r\n                isStart = false;\r\n\t\t\t\tif (participantsCount < 3 && hasStarted) { //If there are less than 3 players and the game was started earlier, disable deposits until there are no players left\r\n\t\t\t\t\tisDisabled = true;\r\n\t\t\t\t}\r\n\t\t\t\tif (participantsCount == 0) { //Enable deposits if there are no players currently deposited\r\n\t\t\t\t\tisDisabled = false;\r\n\t\t\t\t\thasStarted = false;\r\n\t\t\t\t}\t\r\n            }\r\n        }\r\n        else if (accountBalance[_owner] > _amount){ //Check that account has enough balance to withdraw\r\n\t\t\tif (_amt > masterBalance) {\r\n\t\t\t\t_amt = masterBalance;\r\n\t\t\t}\t\r\n            _devFee = _amt / 133; //Take 0.75% of withdrawal for dev fee and subtract withdrawal amount from all balances\r\n            _amt -= _devFee;\r\n            masterApparentBalance -= _devFee;\r\n            masterBalance -= _devFee;\r\n            accountBalance[_owner] -= _devFee;\r\n            accountBalance[_owner] -= _amt;\r\n            realAccountBalance[_owner] -= _amt;\r\n            masterBalance -= _amt;\r\n            masterApparentBalance -= _amt;\r\n        }\r\n\t\tDeposit(_amt);\r\n        devAccount.transfer(_devFee);\r\n        _owner.transfer(_amt);\r\n    }\r\n\t\r\n\t//Check if sender address is a contract for security purposes.\r\n\tfunction isNotContract(address addr) internal view returns (bool) {\r\n\t\tuint size;\r\n\t\tassembly { size := extcodesize(addr) }\r\n\t\treturn (!(size > 0));\r\n\t}\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"participants\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numberParticipants\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"checkAccBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"checkInterest\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"checkGlobalBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"checkGameStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"checkWithdrawalAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"checkDisabledStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_valu\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"}]","ContractName":"ETHRoyale","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://8b57e08dd5e863ce1403a078d776a881023da7c93681554da10206a20688bd1f"}]}