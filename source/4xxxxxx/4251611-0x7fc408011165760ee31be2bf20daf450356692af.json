{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\n\r\n\r\ncontract owned {\r\n    address public owner;\r\n\r\n    function owned() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) onlyOwner {\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData); }\r\n\r\ncontract ParentToken {\r\n\r\n     /* library used for calculations */\r\n    using SafeMath for uint256; \r\n\r\n    /* Public variables of the token */\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals;\r\n    uint256 public totalSupply;\r\n\r\n    mapping(address => uint) balances;\r\n    mapping(address => mapping(address=>uint)) allowance;        \r\n\r\n\r\n\r\n    /* Initializes contract with initial supply tokens to the creator of the contract */\r\n    function ParentToken(uint256 currentSupply,\r\n        string tokenName,\r\n        uint8 decimalUnits,\r\n        string tokenSymbol){\r\n            \r\n       balances[msg.sender] =  currentSupply;    // Give the creator all initial tokens  \r\n       totalSupply = currentSupply;              // Update total supply \r\n       name = tokenName;                         // Set the name for display purposes\r\n       decimals = decimalUnits;                  // Decimals for the tokens\r\n       symbol = tokenSymbol;\t\t\t\t\t// Set the symbol for display purposes\t\r\n    }\r\n    \r\n    \r\n\r\n   ///@notice Transfer tokens to the beneficiary account\r\n   ///@param  to The beneficiary account\r\n   ///@param  value The amount of tokens to be transfered  \r\n       function transfer(address to, uint value) returns (bool success){\r\n        require(\r\n            balances[msg.sender] >= value \r\n            && value > 0 \r\n            );\r\n            balances[msg.sender] = balances[msg.sender].sub(value);    \r\n            balances[to] = balances[to].add(value);\r\n            return true;\r\n    }\r\n    \r\n\t///@notice Allow another contract to spend some tokens in your behalf\r\n\t///@param  spender The address authorized to spend \r\n\t///@param  value The amount to be approved \r\n    function approve(address spender, uint256 value)\r\n        returns (bool success) {\r\n        allowance[msg.sender][spender] = value;\r\n        return true;\r\n    }\r\n\r\n    ///@notice Approve and then communicate the approved contract in a single tx\r\n\t///@param  spender The address authorized to spend \r\n\t///@param  value The amount to be approved \r\n    function approveAndCall(address spender, uint256 value, bytes extraData)\r\n        returns (bool success) {    \r\n        tokenRecipient recSpender = tokenRecipient(spender);\r\n        if (approve(spender, value)) {\r\n            recSpender.receiveApproval(msg.sender, value, this, extraData);\r\n            return true;\r\n        }\r\n    }\r\n\r\n\r\n\r\n   ///@notice Transfer tokens between accounts\r\n   ///@param  from The benefactor/sender account.\r\n   ///@param  to The beneficiary account\r\n   ///@param  value The amount to be transfered  \r\n    function transferFrom(address from, address to, uint value) returns (bool success){\r\n        \r\n        require(\r\n            allowance[from][msg.sender] >= value\r\n            &&balances[from] >= value\r\n            && value > 0\r\n            );\r\n            \r\n            balances[from] = balances[from].sub(value);\r\n            balances[to] =  balances[to].add(value);\r\n            allowance[from][msg.sender] = allowance[from][msg.sender].sub(value);\r\n            return true;\r\n        }\r\n        \r\n}\r\n\r\n\r\ncontract Mitrav is owned,ParentToken{\r\n\r\n     /* library used for calculations */\r\n    using SafeMath for uint256; \r\n\r\n     /* Public variables of the token */\r\n    string public standard = 'Token 0.1';  \r\n    uint256 public currentSupply= 10000000000000000;\r\n    string public constant symbol = \"MTR\";\r\n    string public constant tokenName = \"Mitrav\";\r\n    uint8 public constant decimals = 8;\r\n\r\n    \r\n\r\n    mapping (address => bool) public frozenAccount;\r\n\r\n\r\n  ///@notice Default function used for any payments made.\r\n    function () payable {\r\n        acceptPayment();    \r\n    }\r\n   \r\n\r\n   ///@notice Accept payment and transfer to owner account. \r\n    function acceptPayment() payable {\r\n        require(msg.value>0);\r\n        \r\n        owner.transfer(msg.value);\r\n    }\r\n\r\n\r\n\r\n    function Mitrav()ParentToken(currentSupply,tokenName,decimals,symbol){}\r\n\r\n\r\n   ///@notice Provides balance of the account requested \r\n   ///@param  add Address of the account for which balance is being enquired\r\n    function balanceOf(address add) constant returns (uint balance){\r\n       return balances[add];\r\n    }\r\n    \r\n    \r\n    \r\n   ///@notice Transfer tokens to the beneficiary account\r\n   ///@param  to The beneficiary account\r\n   ///@param  value The amount of tokens to be transfered \r\n        function transfer(address to, uint value) returns (bool success){\r\n        require(\r\n            balances[msg.sender] >= value \r\n            && value > 0 \r\n            && (!frozenAccount[msg.sender]) \t\t\t\t\t\t\t\t\t\t// Allow transfer only if account is not frozen\r\n            );\r\n            balances[msg.sender] = balances[msg.sender].sub(value);                 \r\n            balances[to] = balances[to].add(value);                               // Update the balance of beneficiary account\r\n\t\t\tTransfer(msg.sender,to,value);\r\n            return true;\r\n    }\r\n    \r\n    \r\n\r\n   ///@notice Transfer tokens between accounts\r\n   ///@param  from The benefactor/sender account.\r\n   ///@param  to The beneficiary account\r\n   ///@param  value The amount to be transfered  \r\n        function transferFrom(address from, address to, uint value) returns (bool success){\r\n        \r\n            require(\r\n            allowance[from][msg.sender] >= value\r\n            &&balances[from] >= value                                                 //Check if the benefactor has sufficient balance\r\n            && value > 0 \r\n            && (!frozenAccount[msg.sender])                                           // Allow transfer only if account is not frozen\r\n            );\r\n            \r\n            balances[from] = balances[from].sub(value);                               // Deduct from the benefactor account\r\n            balances[to] =  balances[to].add(value);                                  // Update the balance of beneficiary account\r\n            allowance[from][msg.sender] = allowance[from][msg.sender].sub(value);\r\n            Transfer(from,to,value);\r\n            return true;\r\n        }\r\n        \r\n    \r\n\r\n   ///@notice Increase the number of coins\r\n   ///@param  target The address of the account where the coins would be added.\r\n   ///@param  mintedAmount The amount of coins to be added\r\n        function mintToken(address target, uint256 mintedAmount) onlyOwner {\r\n        balances[target] = balances[target].add(mintedAmount);      //Add the amount of coins to be increased to the balance\r\n        currentSupply = currentSupply.add(mintedAmount);            //Add the amount of coins to be increased to the supply\r\n        Transfer(0, this, mintedAmount);\r\n        Transfer(this, target, mintedAmount);\r\n    }\r\n\r\n   ///@notice Freeze the account at the target address\r\n   ///@param  target The address of the account to be frozen\r\n    function freezeAccount(address target, bool freeze) onlyOwner {\r\n        require(freeze);                                             //Check if account has to be freezed\r\n        frozenAccount[target] = freeze;                              //Freeze the account  \r\n        FrozenFunds(target, freeze);\r\n    }\r\n\r\n\r\n   /// @notice Remove tokens from the system irreversibly\r\n    /// @param value The amount of money to burn\r\n    function burn(uint256 value) returns (bool success) {\r\n        require (balances[msg.sender] > value && value>0);            // Check if the sender has enough balance\r\n        balances[msg.sender] = balances[msg.sender].sub(value);       // Deduct from the sender\r\n        currentSupply = currentSupply.sub(value);                     // Update currentSupply\r\n        Burn(msg.sender, value);\r\n        return true;\r\n    }\r\n\r\n    function burnFrom(address from, uint256 value) returns (bool success) {\r\n        require(balances[from] >= value);                                         // Check if the targeted balance is enough\r\n        require(value <= allowance[from][msg.sender]);                            // Check allowance\r\n        balances[from] = balances[from].sub(value);                               // Deduct from the targeted balance\r\n        allowance[from][msg.sender] = allowance[from][msg.sender].sub(value);     // Deduct from the sender's allowance\r\n        currentSupply = currentSupply.sub(value);                                 // Update currentSupply\r\n        Burn(from, value);\r\n        return true;\r\n    }\r\n\r\n\r\n\r\n  /* This notifies clients about the amount transfered */\r\n\tevent Transfer(address indexed _from, address indexed _to,uint256 _value);     \r\n\r\n  /* This notifies clients about the amount approved */\r\n\tevent Approval(address indexed _owner, address indexed _spender,uint256 _value);\r\n\r\n  /* This notifies clients about the account freeze */\r\n\tevent FrozenFunds(address target, bool frozen);\r\n    \r\n  /* This notifies clients about the amount burnt */\r\n   event Burn(address indexed from, uint256 value);\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"standard\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenName\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"add\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"mintedAmount\",\"type\":\"uint256\"}],\"name\":\"mintToken\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptPayment\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"freeze\",\"type\":\"bool\"}],\"name\":\"freezeAccount\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"FrozenFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"}]","ContractName":"Mitrav","CompilerVersion":"v0.4.11+commit.68ef5810","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://ad969a205b6695937e265b3236162face0fb92725373ac920222fcfca08ebad9"}]}