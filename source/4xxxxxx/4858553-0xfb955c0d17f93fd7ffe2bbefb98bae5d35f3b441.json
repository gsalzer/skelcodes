{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.15;\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Ownable {\r\n\r\n    //Variables\r\n    address public owner;\r\n\r\n    address public newOwner;\r\n\r\n    //    Modifiers\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    function Ownable() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param _newOwner The address to transfer ownership to.\r\n     */\r\n\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        require(_newOwner != address(0));\r\n        newOwner = _newOwner;\r\n    }\r\n\r\n    function acceptOwnership() public {\r\n        if (msg.sender == newOwner) {\r\n            owner = newOwner;\r\n        }\r\n    }\r\n}\r\n\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public constant returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract BasicToken is ERC20Basic {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) balances;\r\n\r\n    /**\r\n    * @dev transfer token for a specified address\r\n    * @param _to The address to transfer to.\r\n    * @param _value The amount to be transferred.\r\n    */\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[msg.sender]);\r\n\r\n        // SafeMath.sub will throw if there is not enough balance.\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the balance of the specified address.\r\n    * @param _owner The address to query the the balance of.\r\n    * @return An uint256 representing the amount owned by the passed address.\r\n    */\r\n    function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   */\r\n  function increaseApproval (address _spender, uint _addedValue) public returns (bool success) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  function decreaseApproval (address _spender, uint _subtractedValue) public returns (bool success) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\ncontract MintableToken is StandardToken, Ownable {\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\r\n    totalSupply = totalSupply.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    Mint(_to, _amount);\r\n    Transfer(0x0, _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() onlyOwner public returns (bool) {\r\n    mintingFinished = true;\r\n    MintFinished();\r\n    return true;\r\n  }\r\n}\r\n\r\ncontract LamdenTau is MintableToken {\r\n    string public constant name = \"Lamden Tau\";\r\n    string public constant symbol = \"TAU\";\r\n    uint8 public constant decimals = 18;\r\n}\r\n\r\ncontract Bounty is Ownable {\r\n\r\n   LamdenTau public lamdenTau;\r\n\r\n   function Bounty(address _tokenContractAddress) public {\r\n      require(_tokenContractAddress != address(0));\r\n      lamdenTau = LamdenTau(_tokenContractAddress);\r\n      \r\n      \r\n   }\r\n\r\n   function returnTokens() onlyOwner {\r\n      uint256 balance = lamdenTau.balanceOf(this);\r\n      lamdenTau.transfer(msg.sender, balance);\r\n   }\r\n\r\n   function issueTokens() onlyOwner  {\r\n      \r\n    lamdenTau.transfer(0x9beb089842e82f4d8ecf75cb5f36b461b452a93d, 2136860000000000000000);\r\n    lamdenTau.transfer(0x7f436de083a59aae8ac39762a3014e6d28a69bfa, 14958020000000000000000);\r\n    lamdenTau.transfer(0x7f436de083a59aae8ac39762a3014e6d28a69bfa, 384634800000000000000);\r\n    lamdenTau.transfer(0x7f436de083a59aae8ac39762a3014e6d28a69bfa, 256423200000000000000);\r\n    lamdenTau.transfer(0x1d4b6e4aa86d48c464c9adf83940d4e00df8affc, 4348510100000000000000);\r\n    lamdenTau.transfer(0x79dc4b068820508655ad6cde9d9d4aa5dd6915bd, 27779180000000000000000);\r\n    lamdenTau.transfer(0x9beb089842e82f4d8ecf75cb5f36b461b452a93d, 29061296000000000000000);\r\n    lamdenTau.transfer(0xab0cb1d483910f6013707d6d9f4842b45df125c7, 21368600000000000000000);\r\n    lamdenTau.transfer(0x724c104cae8c00f35b30fd577baf6d263da06bd8, 8547440000000000000000);\r\n    lamdenTau.transfer(0x7c0d6febb5afb1aee8ae1a45ebf92100c3696769, 31940714850000000000000);\r\n    lamdenTau.transfer(0xd7da4b7c0d8054e5755a811334fb223f3f5e0f23, 77995390000000000000000);\r\n    lamdenTau.transfer(0x69cc9ed0c0966ca0805f8cbe08bac11d0ef90963, 5342150000000000000000);\r\n    lamdenTau.transfer(0x7c0d6febb5afb1aee8ae1a45ebf92100c3696769, 15946755079767600000000);\r\n    lamdenTau.transfer(0xaaf757b3c4e6d61fdac0766b5f07fe0e3bef7092, 149580200000000000000000);\r\n    lamdenTau.transfer(0x69cc9ed0c0966ca0805f8cbe08bac11d0ef90963, 21368600000000000000000);\r\n    lamdenTau.transfer(0x30acb3594ae3e4b10475e7974d51dc2be1873825, 21368600000000000000000);\r\n    lamdenTau.transfer(0xa36ce14ef9e04d76800ce2844b1dca31f4235139, 4284728795012160000000);\r\n    lamdenTau.transfer(0x9166bc0307a6ec0a930b26699656523aff4392b5, 213686000000000000000000);\r\n    lamdenTau.transfer(0x30acb3594ae3e4b10475e7974d51dc2be1873825, 21368600000000000000000);\r\n    lamdenTau.transfer(0x3adec3914dd83885347f58c76ac194c1e19b3dbe, 21368600000000000000000);\r\n    lamdenTau.transfer(0x3adec3914dd83885347f58c76ac194c1e19b3dbe, 290612960000000000000000);\r\n    lamdenTau.transfer(0xa36ce14ef9e04d76800ce2844b1dca31f4235139, 2564232000000000000000);\r\n    lamdenTau.transfer(0x9731b0c8436c63cb018a9d81465ede49ecb0390e, 213686000000000000000000);\r\n    lamdenTau.transfer(0x949b82dfc04558bc4d3ca033a1b194915a3a3bee, 213686000000000000000000);\r\n    lamdenTau.transfer(0x0edd2edb158bc49ee48aa7271dc8329bbd8b3aa5, 64105800000000000000000);\r\n    lamdenTau.transfer(0x48a557d538231ee0a0835725bd1cd97a239cc298, 6410580000000000000000);\r\n    lamdenTau.transfer(0x30acb3594ae3e4b10475e7974d51dc2be1873825, 21368600000000000000000);\r\n    lamdenTau.transfer(0xc2953129fafe219c125fe16b14c10d18ed1efc37, 1986868155289600000000);\r\n    lamdenTau.transfer(0xc80fe8ef956b276fbaf507faf1555a2ae103f36f, 147393978534000000000);\r\n    lamdenTau.transfer(0xd5482163b7680a375409e7703a8b194e3a589e25, 6196894000000000000000);\r\n    lamdenTau.transfer(0xc2953129fafe219c125fe16b14c10d18ed1efc37, 83277847927067200000000);\r\n    lamdenTau.transfer(0x036df03d4176651b919e58fec510eda1c60a43ec, 491477800000000000000);\r\n    lamdenTau.transfer(0xacf141fba61e182006c80a2b170cb21190033614, 106843000000000000000000);\r\n    lamdenTau.transfer(0xfee34f6a86da7a059c4a6b37eb7001e7fcd05bd0, 2136860000000000000000);\r\n    lamdenTau.transfer(0x552cfa09a682a2f02e50be11a51bb02bfaed0139, 10684300000000000000000);\r\n    lamdenTau.transfer(0x552cfa09a682a2f02e50be11a51bb02bfaed0139, 33257435160840000000000);\r\n    lamdenTau.transfer(0x07ffad50741cb4dc0486426f58ae9b71c1bf9b33, 6410580000000000000000);\r\n    lamdenTau.transfer(0x4646993112b01f4ddd95987be83f0230794299ff, 3205290000000000000000);\r\n    lamdenTau.transfer(0xac4ad1f81aafd8f9bba53d2f525c4b85862005b1, 6410580000000000000000);\r\n    lamdenTau.transfer(0x3f61df4dcb879519137ecec907b1f1027f246f8c, 42737200000000000000000);\r\n    lamdenTau.transfer(0x4646993112b01f4ddd95987be83f0230794299ff, 49147780000000000000000);\r\n    lamdenTau.transfer(0x4e21795d0d5136d3893e95db7b2171bfcccc93bd, 359906628708000000000);\r\n    lamdenTau.transfer(0x5a792cec3bea929a50db44623407223d80347533, 277791800000000000000000);\r\n    lamdenTau.transfer(0xd5482163b7680a375409e7703a8b194e3a589e25, 5555836000000000000000);\r\n    lamdenTau.transfer(0x30acb3594ae3e4b10475e7974d51dc2be1873825, 21368600000000000000000);\r\n    lamdenTau.transfer(0xa783d021f9d2d852fa07ec74a9090f5956c4d29b, 41313032107360200000000);\r\n    lamdenTau.transfer(0xd81daa00a75970af35331c67adc08ad098d2ce91, 21411337200000000000000);\r\n    lamdenTau.transfer(0xec852d93806a0e5c93e506c804717530ac26bb8d, 106843000000000000000000);\r\n    lamdenTau.transfer(0x5bcc44d6962ad2e35b54a8d0614f6307768d8eb1, 21368600000000000000000);\r\n    lamdenTau.transfer(0xef27333bdc75c0d4d42e4b3948bd5743c4572a1a, 22679379327193600000000);\r\n\r\n      uint256 balance = lamdenTau.balanceOf(this);\r\n      lamdenTau.transfer(msg.sender, balance);\r\n   }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"lamdenTau\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"issueTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"returnTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tokenContractAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"Bounty","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000c27a2f05fa577a83ba0fdb4c38443c0718356501","Library":"","SwarmSource":"bzzr://1c0ebda8024b9f45420005a5dafc052749047afa980a799885c6c2c3d61e6dfe"}]}