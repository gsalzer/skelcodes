{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    function Ownable() public {\r\n        owner = msg.sender;\r\n    }\r\n    \r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function changeOwner(address newOwner) onlyOwner public {\r\n        require(newOwner != address(0));\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract Withdrawable {\r\n\r\n    mapping (address => uint) public pendingWithdrawals;\r\n\r\n    function withdraw() public {\r\n        uint amount = pendingWithdrawals[msg.sender];\r\n        \r\n        require(amount > 0);\r\n        require(this.balance >= amount);\r\n\r\n        pendingWithdrawals[msg.sender] = 0;\r\n        msg.sender.transfer(amount);\r\n    }\r\n}\r\n\r\n/**\r\n * @title EthLottery\r\n */\r\ncontract EthLottery is Withdrawable, Ownable {\r\n\r\n    event onTicketPurchase(uint32 lotteryId, address buyer, uint16[] tickets);\r\n    event onLotteryCompleted(uint32 lotteryId);\r\n    event onLotteryFinalized(uint32 lotteryId);\r\n    event onLotteryInsurance(address claimer);\r\n\r\n    uint32 public lotteryId;\r\n    \r\n    struct Lottery {        \r\n        uint8 ownerCut;\r\n\r\n        uint ticketPrice;\r\n        uint16 numTickets;\r\n        uint16 winningTicket;\r\n        \r\n        mapping (uint16 => address) tickets;\r\n        mapping (address => uint16) ticketsPerAddress;\r\n        \r\n        address winner;\r\n        \r\n        uint16[] ticketsSold;\r\n        address[] ticketOwners;\r\n\r\n        bytes32 serverHash;\r\n        bytes32 serverSalt;\r\n        uint serverRoll; \r\n\r\n        uint lastSaleTimestamp;\r\n    }\r\n\r\n    mapping (uint32 => Lottery) lotteries;\r\n    \r\n    // Init Lottery. \r\n    function initLottery(uint16 numTickets, uint ticketPrice, uint8 ownerCut, bytes32 serverHash) onlyOwner public {\r\n        require(ownerCut < 100);\r\n                \r\n        lotteryId += 1;\r\n\r\n        lotteries[lotteryId].ownerCut = ownerCut;\r\n        lotteries[lotteryId].ticketPrice = ticketPrice;\r\n        lotteries[lotteryId].numTickets = numTickets;\r\n        lotteries[lotteryId].serverHash = serverHash;\r\n    }\r\n\r\n    function getLotteryDetails(uint16 lottId) public constant returns (\r\n        uint8 ownerCut,\r\n        uint ticketPrice,\r\n        //\r\n        uint16 numTickets, \r\n        uint16 winningTicket,\r\n        //\r\n        bytes32 serverHash,\r\n        bytes32 serverSalt,\r\n        uint serverRoll,\r\n        //\r\n        uint lastSaleTimestamp,\r\n        //\r\n        address winner,\r\n        uint16[] ticketsSold, \r\n        address[] ticketOwners\r\n    ) {\r\n        ownerCut = lotteries[lottId].ownerCut;\r\n        ticketPrice = lotteries[lottId].ticketPrice;\r\n        //\r\n        numTickets = lotteries[lottId].numTickets;\r\n        winningTicket = lotteries[lottId].winningTicket;\r\n        //\r\n        serverHash = lotteries[lottId].serverHash;\r\n        serverSalt = lotteries[lottId].serverSalt;\r\n        serverRoll = lotteries[lottId].serverRoll; \r\n        //\r\n        lastSaleTimestamp = lotteries[lottId].lastSaleTimestamp;\r\n        //\r\n        winner = lotteries[lottId].winner;\r\n        ticketsSold = lotteries[lottId].ticketsSold;\r\n        ticketOwners = lotteries[lottId].ticketOwners;\r\n    }\r\n\r\n    function purchaseTicket(uint16 lottId, uint16[] tickets) public payable {\r\n\r\n        // Checks on Lottery\r\n        require(lotteries[lottId].winner == address(0));\r\n        require(lotteries[lottId].ticketsSold.length < lotteries[lottId].numTickets);\r\n\r\n        // Checks on tickets\r\n        require(tickets.length > 0);\r\n        require(tickets.length <= lotteries[lottId].numTickets);\r\n        require(tickets.length * lotteries[lottId].ticketPrice == msg.value);\r\n\r\n        for (uint16 i = 0; i < tickets.length; i++) {\r\n            \r\n            uint16 ticket = tickets[i];\r\n\r\n            // Check number is OK and not Sold\r\n            require(lotteries[lottId].numTickets > ticket);\r\n            require(lotteries[lottId].tickets[ticket] == 0);\r\n            \r\n            // Ticket checks passed OK\r\n            lotteries[lottId].ticketsSold.push(ticket);\r\n            lotteries[lottId].ticketOwners.push(msg.sender);\r\n\r\n            // Save who's buying this ticket\r\n            lotteries[lottId].tickets[ticket] = msg.sender;\r\n        }\r\n\r\n        // Add amount of tickets bought to this address\r\n        lotteries[lottId].ticketsPerAddress[msg.sender] += uint16(tickets.length);\r\n\r\n        // Save last timestamp of sale\r\n        lotteries[lottId].lastSaleTimestamp = now;\r\n\r\n        onTicketPurchase(lottId, msg.sender, tickets);\r\n\r\n        // Send event on all tickets sold. \r\n        if (lotteries[lottId].ticketsSold.length == lotteries[lottId].numTickets) {\r\n            onLotteryCompleted(lottId);\r\n        }\r\n    }\r\n\r\n    function finalizeLottery(uint16 lottId, bytes32 serverSalt, uint serverRoll) onlyOwner public {\r\n        \r\n        // Check lottery not Closed and completed\r\n        require(lotteries[lottId].winner == address(0));\r\n        require(lotteries[lottId].ticketsSold.length == lotteries[lottId].numTickets);\r\n\r\n        // If it's been less than two hours from the sale of the last ticket.\r\n        require((lotteries[lottId].lastSaleTimestamp + 2 hours) >= now);\r\n\r\n        // Check fairness of server roll here\r\n        require(keccak256(serverSalt, serverRoll) == lotteries[lottId].serverHash);\r\n        \r\n        // Final Number is based on server roll and lastSaleTimestamp. \r\n        uint16 winningTicket = uint16(\r\n            addmod(serverRoll, lotteries[lottId].lastSaleTimestamp, lotteries[lottId].numTickets)\r\n        );\r\n        address winner = lotteries[lottId].tickets[winningTicket];\r\n        \r\n        lotteries[lottId].winner = winner;\r\n        lotteries[lottId].winningTicket = winningTicket;\r\n\r\n        // Send funds to owner and winner\r\n        uint vol = lotteries[lottId].numTickets * lotteries[lottId].ticketPrice;\r\n\r\n        pendingWithdrawals[owner] += (vol * lotteries[lottId].ownerCut) / 100;\r\n        pendingWithdrawals[winner] += (vol * (100 - lotteries[lottId].ownerCut)) / 100;\r\n\r\n        onLotteryFinalized(lottId);\r\n    }\r\n\r\n    function lotteryCloseInsurance(uint16 lottId) public {\r\n        \r\n        // Check lottery is still open and all tickets were sold. \r\n        require(lotteries[lottId].winner == address(0));\r\n        require(lotteries[lottId].ticketsSold.length == lotteries[lottId].numTickets);\r\n        \r\n        // If it's been more than two hours from the sale of the last ticket.\r\n        require((lotteries[lottId].lastSaleTimestamp + 2 hours) < now);\r\n            \r\n        // Check caller hash bought tickets for this lottery\r\n        require(lotteries[lottId].ticketsPerAddress[msg.sender] > 0);\r\n\r\n        uint16 numTickets = lotteries[lottId].ticketsPerAddress[msg.sender];\r\n\r\n        // Send ticket refund to caller\r\n        lotteries[lottId].ticketsPerAddress[msg.sender] = 0;\r\n        pendingWithdrawals[msg.sender] += (lotteries[lottId].ticketPrice * numTickets);\r\n\r\n        onLotteryInsurance(msg.sender);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"numTickets\",\"type\":\"uint16\"},{\"name\":\"ticketPrice\",\"type\":\"uint256\"},{\"name\":\"ownerCut\",\"type\":\"uint8\"},{\"name\":\"serverHash\",\"type\":\"bytes32\"}],\"name\":\"initLottery\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"lottId\",\"type\":\"uint16\"}],\"name\":\"getLotteryDetails\",\"outputs\":[{\"name\":\"ownerCut\",\"type\":\"uint8\"},{\"name\":\"ticketPrice\",\"type\":\"uint256\"},{\"name\":\"numTickets\",\"type\":\"uint16\"},{\"name\":\"winningTicket\",\"type\":\"uint16\"},{\"name\":\"serverHash\",\"type\":\"bytes32\"},{\"name\":\"serverSalt\",\"type\":\"bytes32\"},{\"name\":\"serverRoll\",\"type\":\"uint256\"},{\"name\":\"lastSaleTimestamp\",\"type\":\"uint256\"},{\"name\":\"winner\",\"type\":\"address\"},{\"name\":\"ticketsSold\",\"type\":\"uint16[]\"},{\"name\":\"ticketOwners\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"lottId\",\"type\":\"uint16\"}],\"name\":\"lotteryCloseInsurance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"lottId\",\"type\":\"uint16\"},{\"name\":\"tickets\",\"type\":\"uint16[]\"}],\"name\":\"purchaseTicket\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lotteryId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"lottId\",\"type\":\"uint16\"},{\"name\":\"serverSalt\",\"type\":\"bytes32\"},{\"name\":\"serverRoll\",\"type\":\"uint256\"}],\"name\":\"finalizeLottery\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"pendingWithdrawals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"lotteryId\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tickets\",\"type\":\"uint16[]\"}],\"name\":\"onTicketPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"lotteryId\",\"type\":\"uint32\"}],\"name\":\"onLotteryCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"lotteryId\",\"type\":\"uint32\"}],\"name\":\"onLotteryFinalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"claimer\",\"type\":\"address\"}],\"name\":\"onLotteryInsurance\",\"type\":\"event\"}]","ContractName":"EthLottery","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://a3b514d6a7eb1103276149b18966c5d4e967d321afc4609330a929d2a7835e84"}]}