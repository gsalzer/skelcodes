{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\n/**\r\n * Provides methods to safely add, subtract and multiply uint256 numbers.\r\n */\r\ncontract SafeMath {\r\n  uint256 constant private MAX_UINT256 =\r\n    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n\r\n  /**\r\n   * Add two uint256 values, revert in case of overflow.\r\n   *\r\n   * @param x first value to add\r\n   * @param y second value to add\r\n   * @return x + y\r\n   */\r\n  function safeAdd (uint256 x, uint256 y) \r\n internal pure returns (uint256 z) {\r\n    require (x <= MAX_UINT256 - y);\r\n    return x + y;\r\n  }\r\n\r\n  /**\r\n   * Subtract one uint256 value from another, throw in case of underflow.\r\n   *\r\n   * @param x value to subtract from\r\n   * @param y value to subtract\r\n   * @return x - y\r\n   */\r\n  function safeSub (uint256 x, uint256 y)\r\n   internal pure\r\n  returns (uint256 z) {\r\n    require(x >= y);\r\n    return x - y;\r\n  }\r\n\r\n  /**\r\n   * Multiply two uint256 values, throw in case of overflow.\r\n   *\r\n   * @param x first value to multiply\r\n   * @param y second value to multiply\r\n   * @return x * y\r\n   */\r\n  function safeMul (uint256 x, uint256 y)\r\ninternal pure returns (uint256 z) {\r\n    if (y == 0) return 0; // Prevent division by zero at the next line\r\n    require (x <= MAX_UINT256 / y);\r\n    return x * y;\r\n  }\r\n}\r\n\r\n/**\r\n * ERC-20 standard token interface, as defined\r\n * <a href=\"http://github.com/ethereum/EIPs/issues/20\">here</a>.\r\n */\r\ncontract Token {\r\n  /**\r\n   * Get total number of tokens in circulation.\r\n   *\r\n   * @return total number of tokens in circulation\r\n   */\r\n  function totalSupply() public constant returns (uint256 supply);\r\n\r\n  /**\r\n   * Get number of tokens currently belonging to given owner.\r\n   *\r\n   * @param _owner address to get number of tokens currently belonging to the\r\n   *        owner of\r\n   * @return number of tokens currently belonging to the owner of given address\r\n   */\r\n  function balanceOf (address _owner) public constant returns (uint256 balance);\r\n\r\n  /**\r\n   * Transfer given number of tokens from message sender to given recipient.\r\n   *\r\n   * @param _to address to transfer tokens to the owner of\r\n   * @param _value number of tokens to transfer to the owner of given address\r\n   * @return true if tokens were transferred successfully, false otherwise\r\n   */\r\n  function transfer (address _to, uint256 _value) public  returns (bool success);\r\n\r\n  /**\r\n   * Transfer given number of tokens from given owner to given recipient.\r\n   *\r\n   * @param _from address to transfer tokens from the owner of\r\n   * @param _to address to transfer tokens to the owner of\r\n   * @param _value number of tokens to transfer from given owner to given\r\n   *        recipient\r\n   * @return true if tokens were transferred successfully, false otherwise\r\n   */\r\n  function transferFrom (address _from, address _to, uint256 _value) public \r\n  returns (bool success);\r\n\r\n  /**\r\n   * Allow given spender to transfer given number of tokens from message sender.\r\n   *\r\n   * @param _spender address to allow the owner of to transfer tokens from\r\n   *        message sender\r\n   * @param _value number of tokens to allow to transfer\r\n   * @return true if token transfer was successfully approved, false otherwise\r\n   */\r\n  function approve (address _spender, uint256 _value) public  returns (bool success);\r\n\r\n  /**\r\n   * Tell how many tokens given spender is currently allowed to transfer from\r\n   * given owner.\r\n   *\r\n   * @param _owner address to get number of tokens allowed to be transferred\r\n   *        from the owner of\r\n   * @param _spender address to get number of tokens allowed to be transferred\r\n   *        by the owner of\r\n   * @return number of tokens given spender is currently allowed to transfer\r\n   *         from given owner\r\n   */\r\n  function allowance (address _owner, address _spender) public constant\r\n  returns (uint256 remaining);\r\n\r\n  /**\r\n   * Logged when tokens were transferred from one owner to another.\r\n   *\r\n   * @param _from address of the owner, tokens were transferred from\r\n   * @param _to address of the owner, tokens were transferred to\r\n   * @param _value number of tokens transferred\r\n   */\r\n  event Transfer (address indexed _from, address indexed _to, uint256 _value);\r\n\r\n  /**\r\n   * Logged when owner approved his tokens to be transferred by some spender.\r\n   *\r\n   * @param _owner owner who approved his tokens to be transferred\r\n   * @param _spender spender who were allowed to transfer the tokens belonging\r\n   *        to the owner\r\n   * @param _value number of tokens belonging to the owner, approved to be\r\n   *        transferred by the spender\r\n   */\r\n  event Approval (\r\n    address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\n/**\r\n * Abstract Token Smart Contract that could be used as a base contract for\r\n * ERC-20 token contracts.\r\n */\r\ncontract AbstractToken is Token, SafeMath {\r\n\r\n  /**\r\n   * Address of the fund of this smart contract.\r\n   */\r\n  address fund;\r\n\r\n  /**\r\n   * Create new Abstract Token contract.\r\n   */\r\n  function AbstractToken () public  {\r\n    // Do nothing\r\n  }\r\n\r\n\r\n  /**\r\n   * Get number of tokens currently belonging to given owner.\r\n   *\r\n   * @param _owner address to get number of tokens currently belonging to the\r\n   *        owner of\r\n   * @return number of tokens currently belonging to the owner of given address\r\n   */\r\n   function balanceOf (address _owner) public constant returns (uint256 balance) {\r\n    return accounts [_owner];\r\n  }\r\n\r\n  /**\r\n   * Transfer given number of tokens from message sender to given recipient.\r\n   *\r\n   * @param _to address to transfer tokens to the owner of\r\n   * @param _value number of tokens to transfer to the owner of given address\r\n   * @return true if tokens were transferred successfully, false otherwise\r\n   */\r\n  function transfer (address _to, uint256 _value) public returns (bool success) {\r\n    uint256 feeTotal = fee();\r\n\r\n    if (accounts [msg.sender] < _value) return false;\r\n    if (_value > feeTotal && msg.sender != _to) {\r\n      accounts [msg.sender] = safeSub (accounts [msg.sender], _value);\r\n      \r\n      accounts [_to] = safeAdd (accounts [_to], safeSub(_value, feeTotal));\r\n\r\n      processFee(feeTotal);\r\n\r\n      Transfer (msg.sender, _to, safeSub(_value, feeTotal));\r\n      \r\n    }\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Transfer given number of tokens from given owner to given recipient.\r\n   *\r\n   * @param _from address to transfer tokens from the owner of\r\n   * @param _to address to transfer tokens to the owner of\r\n   * @param _value number of tokens to transfer from given owner to given\r\n   *        recipient\r\n   * @return true if tokens were transferred successfully, false otherwise\r\n   */\r\n  function transferFrom (address _from, address _to, uint256 _value) public\r\n  returns (bool success) {\r\n    uint256 feeTotal = fee();\r\n\r\n    if (allowances [_from][msg.sender] < _value) return false;\r\n    if (accounts [_from] < _value) return false;\r\n\r\n    allowances [_from][msg.sender] =\r\n      safeSub (allowances [_from][msg.sender], _value);\r\n\r\n    if (_value > feeTotal && _from != _to) {\r\n      accounts [_from] = safeSub (accounts [_from], _value);\r\n\r\n      \r\n      accounts [_to] = safeAdd (accounts [_to], safeSub(_value, feeTotal));\r\n\r\n      processFee(feeTotal);\r\n\r\n      Transfer (_from, _to, safeSub(_value, feeTotal));\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  function fee () public  constant returns (uint256);\r\n\r\n  function processFee(uint256 feeTotal) internal returns (bool);\r\n\r\n  /**\r\n   * Allow given spender to transfer given number of tokens from message sender.\r\n   *\r\n   * @param _spender address to allow the owner of to transfer tokens from\r\n   *        message sender\r\n   * @param _value number of tokens to allow to transfer\r\n   * @return true if token transfer was successfully approved, false otherwise\r\n   */\r\n  function approve (address _spender, uint256 _value) public  returns (bool success) {\r\n    allowances [msg.sender][_spender] = _value;\r\n    Approval (msg.sender, _spender, _value);\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Tell how many tokens given spender is currently allowed to transfer from\r\n   * given owner.\r\n   *\r\n   * @param _owner address to get number of tokens allowed to be transferred\r\n   *        from the owner of\r\n   * @param _spender address to get number of tokens allowed to be transferred\r\n   *        by the owner of\r\n   * @return number of tokens given spender is currently allowed to transfer\r\n   *         from given owner\r\n   */\r\n  function allowance (address _owner, address _spender) public constant\r\n  returns (uint256 remaining) {\r\n    return allowances [_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * Mapping from addresses of token holders to the numbers of tokens belonging\r\n   * to these token holders.\r\n   */\r\n  mapping (address => uint256) accounts;\r\n\r\n  /**\r\n   * Mapping from addresses of token holders to the mapping of addresses of\r\n   * spenders to the allowances set by these token holders to these spenders.\r\n   */\r\n  mapping (address => mapping (address => uint256)) allowances;\r\n}\r\n\r\ncontract TradeBTC is AbstractToken {\r\n  /**\r\n   * Initial number of tokens.\r\n   */\r\n  uint256 constant INITIAL_TOKENS_COUNT = 210000000e6;\r\n\r\n  /**\r\n   * Address of the owner of this smart contract.\r\n   */\r\n  address owner;\r\n\r\n \r\n\r\n  /**\r\n   * Total number of tokens ins circulation.\r\n   */\r\n  uint256 tokensCount;\r\n\r\n  /**\r\n   * Create new TradeBTC Token Smart Contract, make message sender to be the\r\n   * owner of smart contract, issue given number of tokens and give them to\r\n   * message sender.\r\n   */\r\n  function TradeBTC (address fundAddress) public  {\r\n    tokensCount = INITIAL_TOKENS_COUNT;\r\n    accounts [msg.sender] = INITIAL_TOKENS_COUNT;\r\n    owner = msg.sender;\r\n    fund = fundAddress;\r\n  }\r\n\r\n  /**\r\n   * Get name of this token.\r\n   *\r\n   * @return name of this token\r\n   */\r\n  function name () public pure returns (string) {\r\n    return \"TradeBTC\";\r\n  }\r\n\r\n  /**\r\n   * Get symbol of this token.\r\n   *\r\n   * @return symbol of this token\r\n   */\r\n  function symbol ()  public pure returns (string) {\r\n    return \"tBTC\";\r\n  }\r\n\r\n\r\n  /**\r\n   * Get number of decimals for this token.\r\n   *\r\n   * @return number of decimals for this token\r\n   */\r\n  function decimals () public pure returns (uint8) {\r\n    return 6;\r\n  }\r\n\r\n  /**\r\n   * Get total number of tokens in circulation.\r\n   *\r\n   * @return total number of tokens in circulation\r\n   */\r\n  function totalSupply () public constant returns (uint256 supply) {\r\n    return tokensCount;\r\n  }\r\n\r\n  \r\n\r\n  /**\r\n   * Transfer given number of tokens from message sender to given recipient.\r\n   *\r\n   * @param _to address to transfer tokens to the owner of\r\n   * @param _value number of tokens to transfer to the owner of given address\r\n   * @return true if tokens were transferred successfully, false otherwise\r\n   */\r\n  function transfer (address _to, uint256 _value) public returns (bool success) {\r\n    return AbstractToken.transfer (_to, _value);\r\n  }\r\n\r\n  /**\r\n   * Transfer given number of tokens from given owner to given recipient.\r\n   *\r\n   * @param _from address to transfer tokens from the owner of\r\n   * @param _to address to transfer tokens to the owner of\r\n   * @param _value number of tokens to transfer from given owner to given\r\n   *        recipient\r\n   * @return true if tokens were transferred successfully, false otherwise\r\n   */\r\n  function transferFrom (address _from, address _to, uint256 _value) public\r\n  returns (bool success) {\r\n    return AbstractToken.transferFrom (_from, _to, _value);\r\n  }\r\n\r\n  function fee ()public constant returns (uint256)  {\r\n    return safeAdd(safeMul(tokensCount, 5)/1e11, 25000);\r\n  }\r\n\r\n  function processFee(uint256 feeTotal) internal returns (bool) {\r\n      uint256 burnFee = feeTotal/2;\r\n      uint256 fundFee = safeSub(feeTotal, burnFee);\r\n\r\n      accounts [fund] = safeAdd (accounts [fund], fundFee);\r\n      tokensCount = safeSub (tokensCount, burnFee); // ledger burned toke\r\n\r\n      Transfer (msg.sender, fund, fundFee);\r\n\r\n      return true;\r\n  }\r\n\r\n  /**\r\n   * Change how many tokens given spender is allowed to transfer from message\r\n   * spender.  In order to prevent double spending of allowance, this method\r\n   * receives assumed current allowance value as an argument.  If actual\r\n   * allowance differs from an assumed one, this method just returns false.\r\n   *\r\n   * @param _spender address to allow the owner of to transfer tokens from\r\n   *        message sender\r\n   * @param _currentValue assumed number of tokens currently allowed to be\r\n   *        transferred\r\n   * @param _newValue number of tokens to allow to transfer\r\n   * @return true if token transfer was successfully approved, false otherwise\r\n   */\r\n  function approve (address _spender, uint256 _currentValue, uint256 _newValue)\r\n  public returns (bool success) {\r\n    if (allowance (msg.sender, _spender) == _currentValue)\r\n      return approve (_spender, _newValue);\r\n    else return false;\r\n  }\r\n\r\n  /**\r\n   * Burn given number of tokens belonging to message sender.\r\n   *\r\n   * @param _value number of tokens to burn\r\n   * @return true on success, false on error\r\n   */\r\n  function burnTokens (uint256 _value) public returns (bool success) {\r\n    if (_value > accounts [msg.sender]) return false;\r\n    else if (_value > 0) {\r\n      accounts [msg.sender] = safeSub (accounts [msg.sender], _value);\r\n      tokensCount = safeSub (tokensCount, _value);\r\n      return true;\r\n    } else return true;\r\n  }\r\n\r\n  /**\r\n   * Set new owner for the smart contract.\r\n   * May only be called by smart contract owner.\r\n   *\r\n   * @param _newOwner address of new owner of the smart contract\r\n   */\r\n  function setOwner (address _newOwner) public {\r\n    require (msg.sender == owner);\r\n\r\n    owner = _newOwner;\r\n  }\r\n\r\n  \r\n  /**\r\n   * Set new fund address for the smart contract.\r\n   * May only be called by smart contract owner.\r\n   *\r\n   * @param _newFund new fund address of the smart contract\r\n   */\r\n  function setFundAddress (address _newFund) public {\r\n    require (msg.sender == owner);\r\n\r\n    fund = _newFund;\r\n  }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"supply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_currentValue\",\"type\":\"uint256\"},{\"name\":\"_newValue\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnTokens\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newFund\",\"type\":\"address\"}],\"name\":\"setFundAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"fundAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"TradeBTC","CompilerVersion":"v0.4.20-nightly.2017.12.20+commit.efc198d5","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000168b1b8a34e1c4c67c9ee05faea56e7ce2718449","Library":"","SwarmSource":"bzzr://42d4b5a1155857ff3ba9a1393adf02b87f35461c23d289a2cc3a702c9b387971"}]}