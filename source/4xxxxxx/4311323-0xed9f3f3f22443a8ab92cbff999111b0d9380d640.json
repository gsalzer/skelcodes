{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\ncontract PricingStrategy {\r\n\r\n    using SafeMath for uint;\r\n\r\n    uint public newRateTime;\r\n    uint public rate1;\r\n    uint public rate2;\r\n    uint public minimumWeiAmount;\r\n\r\n    function PricingStrategy(\r\n        uint _newRateTime,\r\n        uint _rate1,\r\n        uint _rate2,\r\n        uint _minimumWeiAmount\r\n    ) {\r\n        require(_newRateTime > 0);\r\n        require(_rate1 > 0);\r\n        require(_rate2 > 0);\r\n        require(_minimumWeiAmount > 0);\r\n\r\n        newRateTime = _newRateTime;\r\n        rate1 = _rate1;\r\n        rate2 = _rate2;\r\n        minimumWeiAmount = _minimumWeiAmount;\r\n    }\r\n\r\n    /** Interface declaration. */\r\n    function isPricingStrategy() public constant returns (bool) {\r\n        return true;\r\n    }\r\n\r\n    /** Calculate the current price for buy in amount. */\r\n    function calculateTokenAmount(uint weiAmount) public constant returns (uint tokenAmount) {\r\n        uint bonusRate = 0;\r\n\r\n        if (weiAmount >= minimumWeiAmount) {\r\n            if (now < newRateTime) {\r\n                bonusRate = rate1;\r\n            } else {\r\n                bonusRate = rate2;\r\n            }\r\n        }\r\n\r\n        return weiAmount.mul(bonusRate);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"isPricingStrategy\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimumWeiAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newRateTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"weiAmount\",\"type\":\"uint256\"}],\"name\":\"calculateTokenAmount\",\"outputs\":[{\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate1\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_newRateTime\",\"type\":\"uint256\"},{\"name\":\"_rate1\",\"type\":\"uint256\"},{\"name\":\"_rate2\",\"type\":\"uint256\"},{\"name\":\"_minimumWeiAmount\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"constructor\"}]","ContractName":"PricingStrategy","CompilerVersion":"v0.4.15+commit.bbb8e64f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000059e2a50000000000000000000000000000000000000000000000000000000000000030d40000000000000000000000000000000000000000000000000000000000002cec0000000000000000000000000000000000000000000000000000000000000001","Library":"","SwarmSource":"bzzr://8b82b2e0637b4cab2200cf6e4455a4b9687257766b3b454ae2c171d067014927"}]}