{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\n\r\n\r\n\r\ncontract kkICOTest80 {\r\n    \r\n    string public name;\r\n    string public symbol;\r\n    \r\n    uint256 public decimals;\r\n    uint256 public INITIAL_SUPPLY;\r\n    \r\n    uint256 public rate;\r\n  \r\n    address public owner;\t\t\t\t\t\t    //init owner address\r\n\t\r\n\tuint256 public amount;\r\n\t\r\n\t\r\n\tfunction kkICOTest80() {\r\n        name = \"kkTEST80\";\r\n        symbol = \"kkTST80\";\r\n        \r\n        decimals = 0;\r\n        INITIAL_SUPPLY = 30000000;                  //Starting coin supply\r\n        \r\n        rate = 5000;                                //How many tokens per ETH given\r\n\t\t\r\n\t\towner = msg.sender;\t\t\t                //Make owner of contract the creator\r\n\t\t\r\n\t\tbalances[msg.sender] = INITIAL_SUPPLY;\t\t//Send owner of contract all starting tokens\r\n\t}\r\n\t\r\n\t\r\n\t//This function is called when Ether is sent to the contract address\r\n\t//Even if 0 ether is sent.\r\n\tfunction () payable {\r\n\t    \r\n\t    uint256 tryAmount = div((mul(msg.value, rate)), 1 ether);                   //Don't let people buy more tokens than there are.\r\n\t    \r\n\t\tif (msg.value == 0 || msg.value < 0 || balanceOf(owner) < tryAmount) {\t\t//If zero ether is sent, kill. Do nothing. \r\n\t\t\tthrow;\r\n\t\t}\r\n\t\t\r\n\t    amount = 0;\t\t\t\t\t\t\t\t\t                //set the 'amount' var back to zero\r\n\t\tamount = div((mul(msg.value, rate)), 1 ether);\t\t\t\t//take sent ether, multiply it by the rate then divide by 1 ether.\r\n\t\ttransferFrom(owner, msg.sender, amount);                    //Send tokens to buyer\r\n\t\tamount = 0;\t\t\t\t\t\t\t\t\t                //set the 'amount' var back to zero\r\n\t\t\r\n\t\t\r\n\t\towner.transfer(msg.value);\t\t\t\t\t                //Send the ETH to contract owner.\r\n\r\n\t}\t\r\n\t\r\n\t\r\n\t\r\n  \r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  \r\n  \r\n  mapping(address => uint256) balances;\r\n\r\n\r\n  function transfer(address _to, uint256 _value) returns (bool) {\r\n    balances[msg.sender] = sub(balances[msg.sender], _value);\r\n    balances[_to] = add(balances[_to], _value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n\r\n\r\n  function balanceOf(address _owner) constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\r\n    balances[_to] = add(balances[_to], _value);\r\n    balances[_from] = sub(balances[_from], _value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n\t\r\n\t\r\n\r\n\t\r\n\t\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n\t\r\n\t\r\n\t\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INITIAL_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"amount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"kkICOTest80","CompilerVersion":"v0.4.11+commit.68ef5810","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://5535f9cb0fe00866fba86dcbce1416a8d3049458c9fad77f8d24ad35c83f718e"}]}