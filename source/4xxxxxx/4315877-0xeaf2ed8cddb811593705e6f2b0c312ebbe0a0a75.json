{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.4;\r\n\r\ncontract PreTgeExperty {\r\n\r\n  // TGE\r\n  struct Contributor {\r\n    address addr;\r\n    uint256 amount;\r\n    uint256 timestamp;\r\n    bool rejected;\r\n  }\r\n  Contributor[] public contributors;\r\n  mapping(address => bool) public isWhitelisted;\r\n  address public managerAddr;\r\n\r\n  // wallet\r\n  struct Tx {\r\n    address founder;\r\n    address destAddr;\r\n    bool active;\r\n  }\r\n  mapping (address => bool) public founders;\r\n  Tx[] public txs;\r\n  \r\n  // preICO constructor\r\n  function PreTgeExperty() public {\r\n    managerAddr = 0x71e2f5362fdf6A48ab726E1D3ef1Cd4B087436fC;\r\n    founders[0xCE05A8Aa56E1054FAFC214788246707F5258c0Ae] = true;\r\n    founders[0xBb62A710BDbEAF1d3AD417A222d1ab6eD08C37f5] = true;\r\n    founders[0x009A55A3c16953A359484afD299ebdC444200EdB] = true;\r\n  }\r\n  \r\n  // whitelist address\r\n  function whitelist(address addr) public isManager {\r\n    isWhitelisted[addr] = true;\r\n  }\r\n\r\n  function reject(uint256 idx) public isManager {\r\n    // contributor must exist\r\n    assert(contributors[idx].addr != 0);\r\n    // contribution cant be rejected\r\n    assert(!contributors[idx].rejected);\r\n\r\n    // de-whitelist address\r\n    isWhitelisted[contributors[idx].addr] = false;\r\n\r\n    // reject contribution\r\n    contributors[idx].rejected = true;\r\n\r\n    // return ETH to contributor\r\n    contributors[idx].addr.transfer(contributors[idx].amount);\r\n  }\r\n\r\n  // contribute function\r\n  function() public payable {\r\n    // allow to contribute only whitelisted KYC addresses\r\n    assert(isWhitelisted[msg.sender]);\r\n\r\n    // save contributor for further use\r\n    contributors.push(Contributor({\r\n      addr: msg.sender,\r\n      amount: msg.value,\r\n      timestamp: block.timestamp,\r\n      rejected: false\r\n    }));\r\n  }\r\n\r\n  // one of founders can propose destination address for ethers\r\n  function proposeTx(address destAddr) public isFounder {\r\n    txs.push(Tx({\r\n      founder: msg.sender,\r\n      destAddr: destAddr,\r\n      active: true\r\n    }));\r\n  }\r\n\r\n  // another founder can approve specified tx and send it to destAddr\r\n  function approveTx(uint8 txIdx) public isFounder {\r\n    assert(txs[txIdx].founder != msg.sender);\r\n    assert(txs[txIdx].active);\r\n    \r\n    txs[txIdx].active = false;\r\n    txs[txIdx].destAddr.transfer(this.balance);\r\n  }\r\n\r\n  // isManager modifier\r\n  modifier isManager() {\r\n    if (msg.sender == managerAddr) {\r\n      _;\r\n    }\r\n  }\r\n  \r\n  // check if msg.sender is founder\r\n  modifier isFounder() {\r\n    require(founders[msg.sender]);\r\n    _;\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"managerAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"txIdx\",\"type\":\"uint8\"}],\"name\":\"approveTx\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"contributors\",\"outputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"timestamp\",\"type\":\"uint256\"},{\"name\":\"rejected\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"destAddr\",\"type\":\"address\"}],\"name\":\"proposeTx\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"idx\",\"type\":\"uint256\"}],\"name\":\"reject\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"founders\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"txs\",\"outputs\":[{\"name\":\"founder\",\"type\":\"address\"},{\"name\":\"destAddr\",\"type\":\"address\"},{\"name\":\"active\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"PreTgeExperty","CompilerVersion":"v0.4.17+commit.bdeb9e52","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://73f9d025814e518495464386b7aa7cf6564a8d23393604a5217e66ec77d0eb0e"}]}