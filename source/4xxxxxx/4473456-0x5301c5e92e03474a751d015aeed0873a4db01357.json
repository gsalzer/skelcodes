{"status":"1","message":"OK","result":[{"SourceCode":"contract ReentrancyGuard {\r\n\r\n  /**\r\n   * @dev We use a single lock for the whole contract.\r\n   */\r\n  bool private rentrancy_lock = false;\r\n\r\n  /**\r\n   * @dev Prevents a contract from calling itself, directly or indirectly.\r\n   * @notice If you mark a function `nonReentrant`, you should also\r\n   * mark it `external`. Calling one nonReentrant function from\r\n   * another is not supported. Instead, you can implement a\r\n   * `private` function doing the actual work, and a `external`\r\n   * wrapper marked as `nonReentrant`.\r\n   */\r\n  modifier nonReentrant() {\r\n    require(!rentrancy_lock);\r\n    rentrancy_lock = true;\r\n    _;\r\n    rentrancy_lock = false;\r\n  }\r\n\r\n}\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\ncontract Claimable is Ownable {\r\n  address public pendingOwner;\r\n\r\n  /**\r\n   * @dev Modifier throws if called by any account other than the pendingOwner.\r\n   */\r\n  modifier onlyPendingOwner() {\r\n    require(msg.sender == pendingOwner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to set the pendingOwner address.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    pendingOwner = newOwner;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the pendingOwner address to finalize the transfer.\r\n   */\r\n  function claimOwnership() onlyPendingOwner public {\r\n    OwnershipTransferred(owner, pendingOwner);\r\n    owner = pendingOwner;\r\n    pendingOwner = 0x0;\r\n  }\r\n}\r\n\r\ncontract HasNoContracts is Ownable {\r\n\r\n  /**\r\n   * @dev Reclaim ownership of Ownable contracts\r\n   * @param contractAddr The address of the Ownable to be reclaimed.\r\n   */\r\n  function reclaimContract(address contractAddr) external onlyOwner {\r\n    Ownable contractInst = Ownable(contractAddr);\r\n    contractInst.transferOwnership(owner);\r\n  }\r\n}\r\n\r\ncontract HasNoEther is Ownable {\r\n\r\n  /**\r\n  * @dev Constructor that rejects incoming Ether\r\n  * @dev The `payable` flag is added so we can access `msg.value` without compiler warning. If we\r\n  * leave out payable, then Solidity will allow inheriting contracts to implement a payable\r\n  * constructor. By doing it this way we prevent a payable constructor from working. Alternatively\r\n  * we could use assembly to access msg.value.\r\n  */\r\n  function HasNoEther() payable {\r\n    require(msg.value == 0);\r\n  }\r\n\r\n  /**\r\n   * @dev Disallows direct send by settings a default function without the `payable` flag.\r\n   */\r\n  function() external {\r\n  }\r\n\r\n  /**\r\n   * @dev Transfer all Ether held by the contract to the owner.\r\n   */\r\n  function reclaimEther() external onlyOwner {\r\n    assert(owner.send(this.balance));\r\n  }\r\n}\r\n\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public constant returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeERC20 {\r\n  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\r\n    assert(token.transfer(to, value));\r\n  }\r\n\r\n  function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\r\n    assert(token.transferFrom(from, to, value));\r\n  }\r\n\r\n  function safeApprove(ERC20 token, address spender, uint256 value) internal {\r\n    assert(token.approve(spender, value));\r\n  }\r\n}\r\n\r\ncontract CanReclaimToken is Ownable {\r\n  using SafeERC20 for ERC20Basic;\r\n\r\n  /**\r\n   * @dev Reclaim all ERC20Basic compatible tokens\r\n   * @param token ERC20Basic The address of the token contract\r\n   */\r\n  function reclaimToken(ERC20Basic token) external onlyOwner {\r\n    uint256 balance = token.balanceOf(this);\r\n    token.safeTransfer(owner, balance);\r\n  }\r\n\r\n}\r\n\r\ncontract HasNoTokens is CanReclaimToken {\r\n\r\n /**\r\n  * @dev Reject all ERC23 compatible tokens\r\n  * @param from_ address The address that is transferring the tokens\r\n  * @param value_ uint256 the amount of the specified token\r\n  * @param data_ Bytes The data passed from the caller.\r\n  */\r\n  function tokenFallback(address from_, uint256 value_, bytes data_) external {\r\n    revert();\r\n  }\r\n\r\n}\r\n\r\ncontract NoOwner is HasNoEther, HasNoTokens, HasNoContracts {\r\n}\r\n\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n\r\n    uint256 _allowance = allowed[_from][msg.sender];\r\n\r\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n    // require (_value <= _allowance);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   */\r\n  function increaseApproval (address _spender, uint _addedValue)\r\n    returns (bool success) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  function decreaseApproval (address _spender, uint _subtractedValue)\r\n    returns (bool success) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\ncontract MintableToken is StandardToken, Ownable {\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\r\n    totalSupply = totalSupply.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    Mint(_to, _amount);\r\n    Transfer(0x0, _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() onlyOwner public returns (bool) {\r\n    mintingFinished = true;\r\n    MintFinished();\r\n    return true;\r\n  }\r\n}\r\n\r\ncontract Campaign is Claimable, HasNoTokens, ReentrancyGuard {\r\n    using SafeMath for uint256;\r\n\r\n    string constant public version = \"1.0.0\";\r\n\r\n    string public id;\r\n\r\n    string public name;\r\n\r\n    string public website;\r\n\r\n    bytes32 public whitePaperHash;\r\n\r\n    uint256 public fundingThreshold;\r\n\r\n    uint256 public fundingGoal;\r\n\r\n    uint256 public tokenPrice;\r\n\r\n    enum TimeMode {\r\n        Block,\r\n        Timestamp\r\n    }\r\n\r\n    TimeMode public timeMode;\r\n\r\n    uint256 public startTime;\r\n\r\n    uint256 public finishTime;\r\n\r\n    enum BonusMode {\r\n        Flat,\r\n        Block,\r\n        Timestamp,\r\n        AmountRaised,\r\n        ContributionAmount\r\n    }\r\n\r\n    BonusMode public bonusMode;\r\n\r\n    uint256[] public bonusLevels;\r\n\r\n    uint256[] public bonusRates; // coefficients in ether\r\n\r\n    address public beneficiary;\r\n\r\n    uint256 public amountRaised;\r\n\r\n    uint256 public minContribution;\r\n\r\n    uint256 public earlySuccessTimestamp;\r\n\r\n    uint256 public earlySuccessBlock;\r\n\r\n    mapping (address => uint256) public contributions;\r\n\r\n    Token public token;\r\n\r\n    enum Stage {\r\n        Init,\r\n        Ready,\r\n        InProgress,\r\n        Failure,\r\n        Success\r\n    }\r\n\r\n    function stage()\r\n    public\r\n    constant\r\n    returns (Stage)\r\n    {\r\n        if (token == address(0)) {\r\n            return Stage.Init;\r\n        }\r\n\r\n        var _time = timeMode == TimeMode.Timestamp ? block.timestamp : block.number;\r\n\r\n        if (_time < startTime) {\r\n            return Stage.Ready;\r\n        }\r\n\r\n        if (finishTime <= _time) {\r\n            if (amountRaised < fundingThreshold) {\r\n                return Stage.Failure;\r\n            }\r\n            return Stage.Success;\r\n        }\r\n\r\n        if (fundingGoal <= amountRaised) {\r\n            return Stage.Success;\r\n        }\r\n\r\n        return Stage.InProgress;\r\n    }\r\n\r\n    modifier atStage(Stage _stage) {\r\n        require(stage() == _stage);\r\n        _;\r\n    }\r\n\r\n    event Contribution(address sender, uint256 amount);\r\n\r\n    event Refund(address recipient, uint256 amount);\r\n\r\n    event Payout(address recipient, uint256 amount);\r\n\r\n    event EarlySuccess();\r\n\r\n    function Campaign(\r\n        string _id,\r\n        address _beneficiary,\r\n        string _name,\r\n        string _website,\r\n        bytes32 _whitePaperHash\r\n    )\r\n    public\r\n    {\r\n        id = _id;\r\n        beneficiary = _beneficiary;\r\n        name = _name;\r\n        website = _website;\r\n        whitePaperHash = _whitePaperHash;\r\n    }\r\n\r\n    function setParams(\r\n        // Params are combined to the array to avoid the “Stack too deep” error\r\n        uint256[] _fundingThreshold_fundingGoal_tokenPrice_startTime_finishTime,\r\n        uint8[] _timeMode_bonusMode,\r\n        uint256[] _bonusLevels,\r\n        uint256[] _bonusRates\r\n    )\r\n    public\r\n    onlyOwner\r\n    atStage(Stage.Init)\r\n    {\r\n        assert(fundingGoal == 0);\r\n\r\n        fundingThreshold = _fundingThreshold_fundingGoal_tokenPrice_startTime_finishTime[0];\r\n        fundingGoal = _fundingThreshold_fundingGoal_tokenPrice_startTime_finishTime[1];\r\n        tokenPrice = _fundingThreshold_fundingGoal_tokenPrice_startTime_finishTime[2];\r\n        timeMode = TimeMode(_timeMode_bonusMode[0]);\r\n        startTime = _fundingThreshold_fundingGoal_tokenPrice_startTime_finishTime[3];\r\n        finishTime = _fundingThreshold_fundingGoal_tokenPrice_startTime_finishTime[4];\r\n        bonusMode = BonusMode(_timeMode_bonusMode[1]);\r\n        bonusLevels = _bonusLevels;\r\n        bonusRates = _bonusRates;\r\n\r\n        require(fundingThreshold > 0);\r\n        require(fundingThreshold <= fundingGoal);\r\n        require(startTime < finishTime);\r\n        require((timeMode == TimeMode.Block ? block.number : block.timestamp) < startTime);\r\n        require(bonusLevels.length == bonusRates.length);\r\n    }\r\n\r\n    function createToken(\r\n        string _tokenName,\r\n        string _tokenSymbol,\r\n        uint8 _tokenDecimals,\r\n        address[] _distributionRecipients,\r\n        uint256[] _distributionAmounts,\r\n        uint256[] _releaseTimes\r\n    )\r\n    public\r\n    onlyOwner\r\n    atStage(Stage.Init)\r\n    {\r\n        assert(fundingGoal > 0);\r\n\r\n        token = new Token(\r\n            _tokenName,\r\n            _tokenSymbol,\r\n            _tokenDecimals,\r\n            _distributionRecipients,\r\n            _distributionAmounts,\r\n            _releaseTimes,\r\n            uint8(timeMode)\r\n        );\r\n\r\n        minContribution = tokenPrice.div(10 ** uint256(token.decimals()));\r\n        if (minContribution < 1 wei) {\r\n            minContribution = 1 wei;\r\n        }\r\n    }\r\n\r\n    function()\r\n    public\r\n    payable\r\n    atStage(Stage.InProgress)\r\n    {\r\n        require(minContribution <= msg.value);\r\n\r\n        contributions[msg.sender] = contributions[msg.sender].add(msg.value);\r\n\r\n        // Calculate bonus\r\n        uint256 _level;\r\n        uint256 _tokensAmount;\r\n        uint i;\r\n        if (bonusMode == BonusMode.AmountRaised) {\r\n            _level = amountRaised;\r\n            uint256 _value = msg.value;\r\n            uint256 _weightedRateSum = 0;\r\n            uint256 _stepAmount;\r\n            for (i = 0; i < bonusLevels.length; i++) {\r\n                if (_level <= bonusLevels[i]) {\r\n                    _stepAmount = bonusLevels[i].sub(_level);\r\n                    if (_value <= _stepAmount) {\r\n                        _level = _level.add(_value);\r\n                        _weightedRateSum = _weightedRateSum.add(_value.mul(bonusRates[i]));\r\n                        _value = 0;\r\n                        break;\r\n                    } else {\r\n                        _level = _level.add(_stepAmount);\r\n                        _weightedRateSum = _weightedRateSum.add(_stepAmount.mul(bonusRates[i]));\r\n                        _value = _value.sub(_stepAmount);\r\n                    }\r\n                }\r\n            }\r\n            _weightedRateSum = _weightedRateSum.add(_value.mul(1 ether));\r\n\r\n            _tokensAmount = _weightedRateSum.div(1 ether).mul(10 ** uint256(token.decimals())).div(tokenPrice);\r\n        } else {\r\n            _tokensAmount = msg.value.mul(10 ** uint256(token.decimals())).div(tokenPrice);\r\n\r\n            if (bonusMode == BonusMode.Block) {\r\n                _level = block.number;\r\n            }\r\n            if (bonusMode == BonusMode.Timestamp) {\r\n                _level = block.timestamp;\r\n            }\r\n            if (bonusMode == BonusMode.ContributionAmount) {\r\n                _level = msg.value;\r\n            }\r\n\r\n            for (i = 0; i < bonusLevels.length; i++) {\r\n                if (_level <= bonusLevels[i]) {\r\n                    _tokensAmount = _tokensAmount.mul(bonusRates[i]).div(1 ether);\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        amountRaised = amountRaised.add(msg.value);\r\n\r\n        // We don’t want more than the funding goal\r\n        require(amountRaised <= fundingGoal);\r\n\r\n        require(token.mint(msg.sender, _tokensAmount));\r\n\r\n        Contribution(msg.sender, msg.value);\r\n\r\n        if (fundingGoal <= amountRaised) {\r\n            earlySuccessTimestamp = block.timestamp;\r\n            earlySuccessBlock = block.number;\r\n            token.finishMinting();\r\n            EarlySuccess();\r\n        }\r\n    }\r\n\r\n    function withdrawPayout()\r\n    public\r\n    atStage(Stage.Success)\r\n    {\r\n        require(msg.sender == beneficiary);\r\n\r\n        if (!token.mintingFinished()) {\r\n            token.finishMinting();\r\n        }\r\n\r\n        var _amount = this.balance;\r\n        require(beneficiary.call.value(_amount)());\r\n        Payout(beneficiary, _amount);\r\n    }\r\n\r\n    // Anyone can make tokens available when the campaign is successful\r\n    function releaseTokens()\r\n    public\r\n    atStage(Stage.Success)\r\n    {\r\n        require(!token.mintingFinished());\r\n        token.finishMinting();\r\n    }\r\n\r\n    function withdrawRefund()\r\n    public\r\n    atStage(Stage.Failure)\r\n    nonReentrant\r\n    {\r\n        var _amount = contributions[msg.sender];\r\n\r\n        require(_amount > 0);\r\n\r\n        contributions[msg.sender] = 0;\r\n\r\n        msg.sender.transfer(_amount);\r\n        Refund(msg.sender, _amount);\r\n    }\r\n}\r\n\r\ncontract Token is MintableToken, NoOwner {\r\n    string constant public version = \"1.0.0\";\r\n\r\n    string public name;\r\n\r\n    string public symbol;\r\n\r\n    uint8 public decimals;\r\n\r\n    enum TimeMode {\r\n        Block,\r\n        Timestamp\r\n    }\r\n\r\n    TimeMode public timeMode;\r\n\r\n    mapping (address => uint256) public releaseTimes;\r\n\r\n    function Token(\r\n        string _name,\r\n        string _symbol,\r\n        uint8 _decimals,\r\n        address[] _recipients,\r\n        uint256[] _amounts,\r\n        uint256[] _releaseTimes,\r\n        uint8 _timeMode\r\n    )\r\n    public\r\n    {\r\n        require(_recipients.length == _amounts.length);\r\n        require(_recipients.length == _releaseTimes.length);\r\n\r\n        name = _name;\r\n        symbol = _symbol;\r\n        decimals = _decimals;\r\n        timeMode = TimeMode(_timeMode);\r\n\r\n        // Mint pre-distributed tokens\r\n        for (uint256 i = 0; i < _recipients.length; i++) {\r\n            mint(_recipients[i], _amounts[i]);\r\n            if (_releaseTimes[i] > 0) {\r\n                releaseTimes[_recipients[i]] = _releaseTimes[i];\r\n            }\r\n        }\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value)\r\n    public\r\n    returns (bool)\r\n    {\r\n        // Transfer is forbidden until minting is finished\r\n        require(mintingFinished);\r\n\r\n        // Transfer of time-locked funds is forbidden\r\n        require(!timeLocked(msg.sender));\r\n\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value)\r\n    public\r\n    returns (bool)\r\n    {\r\n        // Transfer is forbidden until minting is finished\r\n        require(mintingFinished);\r\n\r\n        // Transfer of time-locked funds is forbidden\r\n        require(!timeLocked(_from));\r\n\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n    // Checks if funds of a given address are time-locked\r\n    function timeLocked(address _spender)\r\n    public\r\n    constant\r\n    returns (bool)\r\n    {\r\n        if (releaseTimes[_spender] == 0) {\r\n            return false;\r\n        }\r\n\r\n        // If time-lock is expired, delete it\r\n        var _time = timeMode == TimeMode.Timestamp ? block.timestamp : block.number;\r\n        if (releaseTimes[_spender] <= _time) {\r\n            delete releaseTimes[_spender];\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"timeMode\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"reclaimToken\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"contractAddr\",\"type\":\"address\"}],\"name\":\"reclaimContract\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"timeLocked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"reclaimEther\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from_\",\"type\":\"address\"},{\"name\":\"value_\",\"type\":\"uint256\"},{\"name\":\"data_\",\"type\":\"bytes\"}],\"name\":\"tokenFallback\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"releaseTimes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_decimals\",\"type\":\"uint8\"},{\"name\":\"_recipients\",\"type\":\"address[]\"},{\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"name\":\"_releaseTimes\",\"type\":\"uint256[]\"},{\"name\":\"_timeMode\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"constructor\"},{\"payable\":false,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"Token","CompilerVersion":"v0.4.15+commit.bbb8e64f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000002e0000000000000000000000000000000000000000000000000000000000000046000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000009436f6e66696465616c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000343444c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b0000000000000000000000005fa36ae3b240604173d7eb582ddf6a0a2ca748ad00000000000000000000000076d1d06e8e2440cf9bc744427fd2a84a8017dcce00000000000000000000000004a41b202dcf65bf4352ba4ca854f7c12491cd43000000000000000000000000332875675a1b2f2e2dfc91dcf0cfe7e7abdeedae000000000000000000000000d0ba452859438b0316c8e8a52e0fdb7eb1d552f1000000000000000000000000b2e7e04526e87f841649faa50234c387614d1c08000000000000000000000000538b1cc35970b04692845f7837666bf23d5226ec0000000000000000000000007b719a5a72b8abb416fa6c5051adeeee18eb0db7000000000000000000000000006251c4ba8aa698d8f27ee2886056c9c6035ede0000000000000000000000000a1666e428322c52cc6dea08d7421967439022a00000000000000000000000005a78987ec6f20cd292e0b7a4485ef5971ca001f6000000000000000000000000000000000000000000000000000000000000000b000000000000000000000000000000000000000000084595161401484a00000000000000000000000000000000000000000000000001067566ff37fa43120400000000000000000000000000000000000000000000004dbe50bd3f51df4bd40000000000000000000000000000000000000000000000595caa74742cfbc00000000000000000000000000000000000000000000000008c984869c4c97524a60000000000000000000000000000000000000000000001b8fc9a2d9578e71d82000000000000000000000000000000000000000000000069e10de76676d0800000000000000000000000000000000000000000000000034f086f3b33b6840000000000000000000000000000000000000000000000000084595161401484a0000000000000000000000000000000000000000000000003251ad53eccac5440000000000000000000000000000000000000000000000001a784379d99db42000000000000000000000000000000000000000000000000000000000000000000000b000000000000000000000000000000000000000000000000000000005b03fibrary":"","SwarmSource":"bzzr://b44a9cd9c96905f34c94be0411283ce5f90ab7a9ab0319669074e90760bd83e4"}]}