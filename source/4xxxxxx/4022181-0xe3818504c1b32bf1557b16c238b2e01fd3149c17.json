{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\n\r\n/**\r\n * Math operations with safety checks\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint a, uint b) internal returns (uint) {\r\n    uint c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint a, uint b) internal returns (uint) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint a, uint b) internal returns (uint) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint a, uint b) internal returns (uint) {\r\n    uint c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n\r\n  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n    return a < b ? a : b;\r\n  }\r\n\r\n  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    return a < b ? a : b;\r\n  }\r\n\r\n  function assert(bool assertion) internal {\r\n    if (!assertion) {\r\n      throw;\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control \r\n * functions, this simplifies the implementation of \"user permissions\". \r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  /** \r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner. \r\n   */\r\n  modifier onlyOwner() {\r\n    if (msg.sender != owner) {\r\n      throw;\r\n    }\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to. \r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner {\r\n    if (newOwner != address(0)) {\r\n      owner = newOwner;\r\n    }\r\n  }\r\n\r\n}\r\n\r\ncontract TeamAllocation is Ownable {\r\n  using SafeMath for uint;\r\n  //uint public constant lockedTeamAllocationTokens = 16000000;\r\n  uint public unlockedAt;\r\n  PillarToken plr;\r\n  mapping (address => uint) allocations;\r\n  uint tokensCreated = 0;\r\n  uint constant public lockedTeamAllocationTokens = 16000000e18;\r\n  //address of the team storage vault\r\n  address public teamStorageVault = 0x3f5D90D5Cc0652AAa40519114D007Bf119Afe1Cf;\r\n\r\n  function TeamAllocation() {\r\n    plr = PillarToken(msg.sender);\r\n    // Locked time of approximately 9 months before team members are able to redeeem tokens.\r\n    uint nineMonths = 9 * 30 days;\r\n    unlockedAt = now.add(nineMonths);\r\n    //2% tokens from the Marketing bucket which are locked for 9 months\r\n    allocations[teamStorageVault] = lockedTeamAllocationTokens;\r\n  }\r\n\r\n  function getTotalAllocation() returns (uint){\r\n      return lockedTeamAllocationTokens;\r\n  }\r\n\r\n  function unlock() external payable {\r\n    if (now < unlockedAt) throw;\r\n\r\n    if (tokensCreated == 0) {\r\n      tokensCreated = plr.balanceOf(this);\r\n    }\r\n    //transfer the locked tokens to the teamStorageAddress\r\n    plr.transfer(teamStorageVault, tokensCreated);\r\n  }\r\n}\r\n\r\ncontract UnsoldAllocation is Ownable {\r\n  using SafeMath for uint;\r\n  uint unlockedAt;\r\n  uint allocatedTokens;\r\n  PillarToken plr;\r\n  mapping (address => uint) allocations;\r\n\r\n  uint tokensCreated = 0;\r\n\r\n  /*\r\n    Split among team members\r\n    Tokens reserved for Team: 1,000,000\r\n    Tokens reserved for 20|30 projects: 1,000,000\r\n    Tokens reserved for future sale: 1,000,000\r\n  */\r\n\r\n  function UnsoldAllocation(uint _lockTime, address _owner, uint _tokens) {\r\n    if(_lockTime == 0) throw;\r\n\r\n    if(_owner == address(0)) throw;\r\n\r\n    plr = PillarToken(msg.sender);\r\n    uint lockTime = _lockTime * 1 years;\r\n    unlockedAt = now.add(lockTime);\r\n    allocatedTokens = _tokens;\r\n    allocations[_owner] = _tokens;\r\n  }\r\n\r\n  function getTotalAllocation()returns(uint){\r\n      return allocatedTokens;\r\n  }\r\n\r\n  function unlock() external payable {\r\n    if (now < unlockedAt) throw;\r\n\r\n    if (tokensCreated == 0) {\r\n      tokensCreated = plr.balanceOf(this);\r\n    }\r\n\r\n    var allocation = allocations[msg.sender];\r\n    allocations[msg.sender] = 0;\r\n    var toTransfer = (tokensCreated.mul(allocation)).div(allocatedTokens);\r\n    plr.transfer(msg.sender, toTransfer);\r\n  }\r\n}\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev modifier to allow actions only when the contract IS paused\r\n   */\r\n  modifier whenNotPaused() {\r\n    if (paused) throw;\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev modifier to allow actions only when the contract IS NOT paused\r\n   */\r\n  modifier whenPaused {\r\n    if (!paused) throw;\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused returns (bool) {\r\n    paused = true;\r\n    Pause();\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused returns (bool) {\r\n    paused = false;\r\n    Unpause();\r\n    return true;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20Basic {\r\n  uint public totalSupply;\r\n  function balanceOf(address who) constant returns (uint);\r\n  function transfer(address to, uint value);\r\n  event Transfer(address indexed from, address indexed to, uint value);\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances. \r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint;\r\n\r\n  mapping(address => uint) balances;\r\n\r\n  /**\r\n   * @dev Fix for the ERC20 short address attack.\r\n   */\r\n  modifier onlyPayloadSize(uint size) {\r\n     if(msg.data.length < size + 4) {\r\n       throw;\r\n     }\r\n     _;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint _value) onlyPayloadSize(2 * 32) {\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of. \r\n  * @return An uint representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) constant returns (uint balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) constant returns (uint);\r\n  function transferFrom(address from, address to, uint value);\r\n  function approve(address spender, uint value);\r\n  event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implemantation of the basic standart token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is BasicToken, ERC20 {\r\n\r\n  mapping (address => mapping (address => uint)) allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint the amout of tokens to be transfered\r\n   */\r\n  function transferFrom(address _from, address _to, uint _value) onlyPayloadSize(3 * 32) {\r\n    var _allowance = allowed[_from][msg.sender];\r\n\r\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n    // if (_value > _allowance) throw;\r\n\r\n    balances[_to] = balances[_to].add(_value);\r\n    balances[_from] = balances[_from].sub(_value);\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    Transfer(_from, _to, _value);\r\n  }\r\n\r\n  /**\r\n   * @dev Aprove the passed address to spend the specified amount of tokens on beahlf of msg.sender.\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint _value) {\r\n\r\n    // To change the approve amount you first have to reduce the addresses`\r\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n    //  already 0 to mitigate the race condition described here:\r\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    if ((_value != 0) && (allowed[msg.sender][_spender] != 0)) throw;\r\n\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens than an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint specifing the amount of tokens still avaible for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) constant returns (uint remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n}\r\n\r\n/// @title PillarToken - Crowdfunding code for the Pillar Project\r\n/// @author Parthasarathy Ramanujam, Gustavo Guimaraes, Ronak Thacker\r\ncontract PillarToken is StandardToken, Ownable {\r\n\r\n    using SafeMath for uint;\r\n    string public constant name = \"PILLAR\";\r\n    string public constant symbol = \"PLR\";\r\n    uint public constant decimals = 18;\r\n\r\n    TeamAllocation public teamAllocation;\r\n    UnsoldAllocation public unsoldTokens;\r\n    UnsoldAllocation public twentyThirtyAllocation;\r\n    UnsoldAllocation public futureSaleAllocation;\r\n\r\n    uint constant public minTokensForSale  = 32000000e18;\r\n\r\n    uint constant public maxPresaleTokens             =  48000000e18;\r\n    uint constant public totalAvailableForSale        = 528000000e18;\r\n    uint constant public futureTokens                 = 120000000e18;\r\n    uint constant public twentyThirtyTokens           =  80000000e18;\r\n    uint constant public lockedTeamAllocationTokens   =  16000000e18;\r\n    uint constant public unlockedTeamAllocationTokens =   8000000e18;\r\n\r\n    address public unlockedTeamStorageVault = 0x4162Ad6EEc341e438eAbe85f52a941B078210819;\r\n    address public twentyThirtyVault = 0xe72bA5c6F63Ddd395DF9582800E2821cE5a05D75;\r\n    address public futureSaleVault = 0xf0231160Bd1a2a2D25aed2F11B8360EbF56F6153;\r\n    address unsoldVault;\r\n\r\n    //Storage years\r\n    uint constant coldStorageYears = 10;\r\n    uint constant futureStorageYears = 3;\r\n\r\n    uint totalPresale = 0;\r\n\r\n    // Funding amount in ether\r\n    uint public constant tokenPrice  = 0.0005 ether;\r\n\r\n    // Multisigwallet where the proceeds will be stored.\r\n    address public pillarTokenFactory;\r\n\r\n    uint fundingStartBlock;\r\n    uint fundingStopBlock;\r\n\r\n    // flags whether ICO is afoot.\r\n    bool fundingMode;\r\n\r\n    //total used tokens\r\n    uint totalUsedTokens;\r\n\r\n    event Refund(address indexed _from,uint256 _value);\r\n    event Migrate(address indexed _from, address indexed _to, uint256 _value);\r\n    event MoneyAddedForRefund(address _from, uint256 _value,uint256 _total);\r\n\r\n    modifier isNotFundable() {\r\n        if (fundingMode) throw;\r\n        _;\r\n    }\r\n\r\n    modifier isFundable() {\r\n        if (!fundingMode) throw;\r\n        _;\r\n    }\r\n\r\n    //@notice  Constructor of PillarToken\r\n    //@param `_pillarTokenFactory` - multisigwallet address to store proceeds.\r\n    //@param `_icedWallet` - Multisigwallet address to which unsold tokens are assigned\r\n    function PillarToken(address _pillarTokenFactory, address _icedWallet) {\r\n      if(_pillarTokenFactory == address(0)) throw;\r\n      if(_icedWallet == address(0)) throw;\r\n\r\n      pillarTokenFactory = _pillarTokenFactory;\r\n      totalUsedTokens = 0;\r\n      totalSupply = 800000000e18;\r\n      unsoldVault = _icedWallet;\r\n\r\n      //allot 8 million of the 24 million marketing tokens to an address\r\n      balances[unlockedTeamStorageVault] = unlockedTeamAllocationTokens;\r\n\r\n      //allocate tokens for 2030 wallet locked in for 3 years\r\n      futureSaleAllocation = new UnsoldAllocation(futureStorageYears,futureSaleVault,futureTokens);\r\n      balances[address(futureSaleAllocation)] = futureTokens;\r\n\r\n      //allocate tokens for future wallet locked in for 3 years\r\n      twentyThirtyAllocation = new UnsoldAllocation(futureStorageYears,twentyThirtyVault,twentyThirtyTokens);\r\n      balances[address(twentyThirtyAllocation)] = twentyThirtyTokens;\r\n\r\n      fundingMode = false;\r\n    }\r\n\r\n    //@notice Fallback function that accepts the ether and allocates tokens to\r\n    //the msg.sender corresponding to msg.value\r\n    function() payable isFundable external {\r\n      purchase();\r\n    }\r\n\r\n    //@notice function that accepts the ether and allocates tokens to\r\n    //the msg.sender corresponding to msg.value\r\n    function purchase() payable isFundable {\r\n      if(block.number < fundingStartBlock) throw;\r\n      if(block.number > fundingStopBlock) throw;\r\n      if(totalUsedTokens >= totalAvailableForSale) throw;\r\n\r\n      if (msg.value < tokenPrice) throw;\r\n\r\n      uint numTokens = msg.value.div(tokenPrice);\r\n      if(numTokens < 1) throw;\r\n      //transfer money to PillarTokenFactory MultisigWallet\r\n      pillarTokenFactory.transfer(msg.value);\r\n\r\n      uint tokens = numTokens.mul(1e18);\r\n      totalUsedTokens = totalUsedTokens.add(tokens);\r\n      if (totalUsedTokens > totalAvailableForSale) throw;\r\n\r\n      balances[msg.sender] = balances[msg.sender].add(tokens);\r\n\r\n      //fire the event notifying the transfer of tokens\r\n      Transfer(0, msg.sender, tokens);\r\n    }\r\n\r\n    //@notice Function reports the number of tokens available for sale\r\n    function numberOfTokensLeft() constant returns (uint256) {\r\n      uint tokensAvailableForSale = totalAvailableForSale.sub(totalUsedTokens);\r\n      return tokensAvailableForSale;\r\n    }\r\n\r\n    //@notice Finalize the ICO, send team allocation tokens\r\n    //@notice send any remaining balance to the MultisigWallet\r\n    //@notice unsold tokens will be sent to icedwallet\r\n    function finalize() isFundable onlyOwner external {\r\n      if (block.number <= fundingStopBlock) throw;\r\n\r\n      if (totalUsedTokens < minTokensForSale) throw;\r\n\r\n      if(unsoldVault == address(0)) throw;\r\n\r\n      // switch funding mode off\r\n      fundingMode = false;\r\n\r\n      //Allot team tokens to a smart contract which will frozen for 9 months\r\n      teamAllocation = new TeamAllocation();\r\n      balances[address(teamAllocation)] = lockedTeamAllocationTokens;\r\n\r\n      //allocate unsold tokens to iced storage\r\n      uint totalUnSold = numberOfTokensLeft();\r\n      if(totalUnSold > 0) {\r\n        unsoldTokens = new UnsoldAllocation(coldStorageYears,unsoldVault,totalUnSold);\r\n        balances[address(unsoldTokens)] = totalUnSold;\r\n      }\r\n\r\n      //transfer any balance available to Pillar Multisig Wallet\r\n      pillarTokenFactory.transfer(this.balance);\r\n    }\r\n\r\n    //@notice Function that can be called by purchasers to refund\r\n    //@notice Used only in case the ICO isn't successful.\r\n    function refund() isFundable external {\r\n      if(block.number <= fundingStopBlock) throw;\r\n      if(totalUsedTokens >= minTokensForSale) throw;\r\n\r\n      uint plrValue = balances[msg.sender];\r\n      if(plrValue == 0) throw;\r\n\r\n      balances[msg.sender] = 0;\r\n\r\n      uint ethValue = plrValue.mul(tokenPrice).div(1e18);\r\n      msg.sender.transfer(ethValue);\r\n      Refund(msg.sender, ethValue);\r\n    }\r\n\r\n    //@notice Function used for funding in case of refund.\r\n    //@notice Can be called only by the Owner\r\n    function allocateForRefund() external payable onlyOwner returns (uint){\r\n      //does nothing just accepts and stores the ether\r\n      MoneyAddedForRefund(msg.sender,msg.value,this.balance);\r\n      return this.balance;\r\n    }\r\n\r\n    //@notice Function to allocate tokens to an user.\r\n    //@param `_to` the address of an user\r\n    //@param `_tokens` number of tokens to be allocated.\r\n    //@notice Can be called only when funding is not active and only by the owner\r\n    function allocateTokens(address _to,uint _tokens) isNotFundable onlyOwner external {\r\n      uint numOfTokens = _tokens.mul(1e18);\r\n      totalPresale = totalPresale.add(numOfTokens);\r\n\r\n      if(totalPresale > maxPresaleTokens) throw;\r\n\r\n      balances[_to] = balances[_to].add(numOfTokens);\r\n    }\r\n\r\n    //@notice Function to unPause the contract.\r\n    //@notice Can be called only when funding is active and only by the owner\r\n    function unPauseTokenSale() onlyOwner isNotFundable external returns (bool){\r\n      fundingMode = true;\r\n      return fundingMode;\r\n    }\r\n\r\n    //@notice Function to pause the contract.\r\n    //@notice Can be called only when funding is active and only by the owner\r\n    function pauseTokenSale() onlyOwner isFundable external returns (bool){\r\n      fundingMode = false;\r\n      return !fundingMode;\r\n    }\r\n\r\n    //@notice Function to start the contract.\r\n    //@param `_fundingStartBlock` - block from when ICO commences\r\n    //@param `_fundingStopBlock` - block from when ICO ends.\r\n    //@notice Can be called only when funding is not active and only by the owner\r\n    function startTokenSale(uint _fundingStartBlock, uint _fundingStopBlock) onlyOwner isNotFundable external returns (bool){\r\n      if(_fundingStopBlock <= _fundingStartBlock) throw;\r\n\r\n      fundingStartBlock = _fundingStartBlock;\r\n      fundingStopBlock = _fundingStopBlock;\r\n      fundingMode = true;\r\n      return fundingMode;\r\n    }\r\n\r\n    //@notice Function to get the current funding status.\r\n    function fundingStatus() external constant returns (bool){\r\n      return fundingMode;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"futureSaleVault\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxPresaleTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numberOfTokensLeft\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundingStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockedTeamAllocationTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minTokensForSale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refund\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"twentyThirtyTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"purchase\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamAllocation\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"unlockedTeamStorageVault\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"allocateTokens\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"futureTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"twentyThirtyVault\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"twentyThirtyAllocation\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"allocateForRefund\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"unsoldTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unPauseTokenSale\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"unlockedTeamAllocationTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pillarTokenFactory\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"futureSaleAllocation\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalAvailableForSale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fundingStartBlock\",\"type\":\"uint256\"},{\"name\":\"_fundingStopBlock\",\"type\":\"uint256\"}],\"name\":\"startTokenSale\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pauseTokenSale\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_pillarTokenFactory\",\"type\":\"address\"},{\"name\":\"_icedWallet\",\"type\":\"address\"}],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Refund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Migrate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_total\",\"type\":\"uint256\"}],\"name\":\"MoneyAddedForRefund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"PillarToken","CompilerVersion":"v0.4.11+commit.68ef5810","OptimizationUsed":"1","Runs":"0","ConstructorArguments":"00000000000000000000000005a9afd79a05c3e1afefa282ef8d58f9366b160b000000000000000000000000ff678a624472fe0d195e3cac47dec2375dc2d8be","Library":"","SwarmSource":"bzzr://c4ae36a7545c31672d946cd91cf7a40cd2f28581238d70d2980c389d2add4afa"}]}