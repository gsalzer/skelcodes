{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner {\r\n    if (newOwner != address(0)) {\r\n      owner = newOwner;\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) constant returns (uint256);\r\n  function transfer(address to, uint256 value) returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) returns (bool);\r\n  function approve(address spender, uint256 value) returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract FollowCoin is Ownable, ERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    // Public variables of the token\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals;\r\n    \r\n    // This creates an array with all balances\r\n    mapping (address => uint256) public balances;\r\n    mapping (address => bool) public allowedAccount;\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n    mapping (address => bool) public isHolder;\r\n    address [] public holders;\r\n\r\n    // This notifies clients about the amount burnt\r\n    event Burn(address indexed from, uint256 value);\r\n\r\n    bool public contributorsLockdown = true;\r\n\r\n    function disableLockDown() onlyOwner {\r\n      contributorsLockdown = false;\r\n    }\r\n\r\n    modifier coinsLocked() {\r\n      require(!contributorsLockdown || msg.sender == owner || allowedAccount[msg.sender]);\r\n      _;\r\n    }\r\n\r\n    /**\r\n     * Constructor function\r\n     *\r\n     * Initializes contract with initial supply tokens to the creator of the contract\r\n     */\r\n    function FollowCoin(\r\n        \r\n        address multiSigWallet,\r\n        uint256 initialSupply,\r\n        string tokenName,\r\n        uint8 decimalUnits,\r\n        string tokenSymbol\r\n        \r\n    ) {\r\n\r\n        owner = multiSigWallet;\r\n        totalSupply = initialSupply;                        // Update total supply\r\n        name = tokenName;                                   // Set the name for display purposes\r\n        symbol = tokenSymbol;                               // Set the symbol for display purposes\r\n        decimals = decimalUnits;                            // Amount of decimals for display purposes\r\n        balances[owner] = totalSupply;                   // Give the creator all initial tokens\r\n\r\n        if (isHolder[owner] != true) {\r\n            holders[holders.length++] = owner;\r\n            isHolder[owner] = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Internal transfer, only can be called by this contract\r\n     */\r\n    function _transfer(address _from, address _to, uint _value) internal coinsLocked {\r\n        require(_to != 0x0);                               // Prevent transfer to 0x0 address. Use burn() instead\r\n\r\n        require(balanceOf(_from) >= _value);                // Check if the sender has enough\r\n        require(balanceOf(_to).add(_value) > balanceOf(_to)); // Check for overflows\r\n        balances[_from] = balanceOf(_from).sub(_value);                         // Subtract from the sender\r\n        balances[_to] = balanceOf(_to).add(_value);                           // Add the same to the recipient\r\n\r\n        if (isHolder[_to] != true) {\r\n            holders[holders.length++] = _to;\r\n            isHolder[_to] = true;\r\n        }\r\n        Transfer(_from, _to, _value);\r\n    }\r\n    \r\n    /**\r\n     * Transfer tokens\r\n     *\r\n     * Send `_value` tokens to `_to` from your account\r\n     *\r\n     * @param _to The address of the recipient\r\n     * @param _value the amount to send\r\n     */\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool)  {\r\n        require(_to != address(this));\r\n        _transfer(msg.sender, _to, _value);\r\n    }\r\n\r\n    /**\r\n     * Transfer tokens from other address\r\n     *\r\n     * Send `_value` tokens to `_to` in behalf of `_from`\r\n     *\r\n     * @param _from The address of the sender\r\n     * @param _to The address of the recipient\r\n     * @param _value the amount to send\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\r\n        require(_value <= allowance[_from][msg.sender]);     // Check allowance\r\n        allowance[_from][msg.sender] -= _value;\r\n        _transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    /**\r\n     * Set allowance for other address\r\n     *\r\n     * Allows `_spender` to spend no more than `_value` tokens in your behalf\r\n     *\r\n     * @param _spender The address authorized to spend\r\n     * @param _value the max amount they can spend\r\n     */\r\n    function approve(address _spender, uint256 _value) public\r\n        returns (bool success) {\r\n        allowance[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n         return allowance[_owner][_spender];\r\n    }\r\n\r\n\r\n    function allowAccount(address _target, bool allow) onlyOwner returns (bool success) {\r\n\r\n         allowedAccount[_target] = allow;\r\n         return true;\r\n    }\r\n\r\n    function mint(uint256 mintedAmount) onlyOwner {\r\n        balances[msg.sender] = balanceOf(msg.sender).add(mintedAmount);\r\n        totalSupply  = totalSupply.add(mintedAmount);\r\n        Transfer(0, owner, mintedAmount);\r\n    }\r\n\r\n    /**\r\n     * Destroy tokens\r\n     *\r\n     * Remove `_value` tokens from the system irreversibly\r\n     *\r\n     * @param _value the amount of money to burn\r\n     */\r\n    function burn(uint256 _value) onlyOwner returns (bool success) {\r\n        require(balanceOf(msg.sender) >= _value);   // Check if the sender has enough\r\n        balances[msg.sender] = balanceOf(msg.sender).sub(_value);            // Subtract from the sender\r\n        totalSupply = totalSupply.sub(_value);                      // Updates totalSupply\r\n        Burn(msg.sender, _value);\r\n        return true;\r\n    }\r\n}\r\n\r\n\r\n/*\r\n * Haltable\r\n *\r\n * Abstract contract that allows children to implement an\r\n * emergency stop mechanism. Differs from Pausable by requiring a state.\r\n *\r\n *\r\n * Originally envisioned in FirstBlood ICO contract.\r\n */\r\n contract Haltable is Ownable {\r\n   bool public halted;\r\n\r\n   modifier inNormalState {\r\n     assert(!halted);\r\n     _;\r\n   }\r\n\r\n   modifier inEmergencyState {\r\n     assert(halted);\r\n     _;\r\n   }\r\n\r\n   // called by the owner on emergency, triggers stopped state\r\n   function halt() external onlyOwner inNormalState {\r\n     halted = true;\r\n   }\r\n\r\n   // called by the owner on end of emergency, returns to normal state\r\n   function unhalt() external onlyOwner inEmergencyState {\r\n     halted = false;\r\n   }\r\n\r\n }\r\n\r\ncontract FollowCoinTokenSale is Haltable {\r\n    using SafeMath for uint256;\r\n\r\n    address public beneficiary;\r\n    address public multisig;\r\n    uint public tokenLimitPerWallet;\r\n    uint public hardCap;\r\n    uint public amountRaised;\r\n    uint public totalTokens;\r\n    uint public tokensSold = 0;\r\n    uint public investorCount = 0;\r\n    uint public startTimestamp;\r\n    uint public deadline;\r\n    uint public tokensPerEther;\r\n    FollowCoin public tokenReward;\r\n    mapping(address => uint256) public balances;\r\n\r\n    event FundTransfer(address backer, uint amount, bool isContribution);\r\n\r\n    /**\r\n     * Constructor function\r\n     *\r\n     * Setup the owner\r\n     */\r\n    function FollowCoinTokenSale(\r\n        address multiSigWallet,\r\n        uint icoTokensLimitPerWallet,\r\n        uint icoHardCap,\r\n        uint icoStartTimestamp,\r\n        uint durationInDays,\r\n        uint icoTotalTokens,\r\n        uint icoTokensPerEther,\r\n        address addressOfTokenUsedAsReward\r\n        \r\n    ) {\r\n        multisig = multiSigWallet;\r\n        owner = multiSigWallet;\r\n        hardCap = icoHardCap;\r\n        deadline = icoStartTimestamp + durationInDays * 1 days;\r\n        startTimestamp = icoStartTimestamp;\r\n        totalTokens = icoTotalTokens;\r\n        tokenLimitPerWallet = icoTokensLimitPerWallet;\r\n        tokensPerEther = icoTokensPerEther;\r\n        tokenReward = FollowCoin(addressOfTokenUsedAsReward);\r\n        beneficiary = multisig;\r\n    }\r\n\r\n    function changeMultisigWallet(address _multisig) onlyOwner {\r\n        require(_multisig != address(0));\r\n        multisig = _multisig;\r\n    }\r\n\r\n    function changeTokenReward(address _token) onlyOwner {\r\n        require(_token != address(0));\r\n        tokenReward = FollowCoin(_token);\r\n        beneficiary = tokenReward.owner();\r\n    }\r\n\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    /**\r\n     * Fallback function\r\n     *\r\n     * The function without name is the default function that is called whenever anyone sends funds to a contract\r\n     */\r\n    function () payable preSaleActive inNormalState {\r\n        buyTokens();\r\n    }\r\n\r\n    function buyTokens() payable preSaleActive inNormalState {\r\n        require(msg.value > 0);\r\n       \r\n        uint amount = msg.value;\r\n        require(balanceOf(msg.sender).add(amount) <= tokenLimitPerWallet);\r\n\r\n        uint tokens =  calculateTokenAmount(amount);\r\n        require(totalTokens >= tokens);\r\n        require(tokensSold.add(tokens) <= hardCap); // hardCap limit\r\n        \r\n        balances[msg.sender] = balances[msg.sender].add(amount);\r\n        amountRaised = amountRaised.add(amount);\r\n\r\n        tokensSold = tokensSold.add(tokens);\r\n        totalTokens = totalTokens.sub(tokens);\r\n\r\n        if (tokenReward.balanceOf(msg.sender) == 0) investorCount++;\r\n\r\n        tokenReward.transfer(msg.sender, tokens);\r\n        multisig.transfer(amount);\r\n        FundTransfer(msg.sender, amount, true);\r\n    }\r\n\r\n    modifier preSaleActive() {\r\n      require(now >= startTimestamp);\r\n      require(now < deadline);\r\n      _;\r\n    }\r\n\r\n    function setSold(uint tokens) onlyOwner {\r\n      tokensSold = tokensSold.add(tokens);\r\n    }\r\n\r\n\r\n    function sendTokensBackToWallet() onlyOwner {\r\n      totalTokens = 0;\r\n      tokenReward.transfer(multisig, tokenReward.balanceOf(address(this)));\r\n    }\r\n\r\n    function getTokenBalance(address _from) constant returns(uint) {\r\n      return tokenReward.balanceOf(_from);\r\n    }\r\n\r\n    function calculateTokenAmount(uint256 amount) constant returns(uint256) {\r\n        return amount.mul(tokensPerEther);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"deadline\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"changeTokenReward\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"}],\"name\":\"getTokenBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"multisig\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"setSold\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"sendTokensBackToWallet\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"halt\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenReward\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"amountRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"calculateTokenAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"halted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenLimitPerWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unhalt\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"investorCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_multisig\",\"type\":\"address\"}],\"name\":\"changeMultisigWallet\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensPerEther\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hardCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"multiSigWallet\",\"type\":\"address\"},{\"name\":\"icoTokensLimitPerWallet\",\"type\":\"uint256\"},{\"name\":\"icoHardCap\",\"type\":\"uint256\"},{\"name\":\"icoStartTimestamp\",\"type\":\"uint256\"},{\"name\":\"durationInDays\",\"type\":\"uint256\"},{\"name\":\"icoTotalTokens\",\"type\":\"uint256\"},{\"name\":\"icoTokensPerEther\",\"type\":\"uint256\"},{\"name\":\"addressOfTokenUsedAsReward\",\"type\":\"address\"}],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"backer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"isContribution\",\"type\":\"bool\"}],\"name\":\"FundTransfer\",\"type\":\"event\"}]","ContractName":"FollowCoinTokenSale","CompilerVersion":"v0.4.15+commit.bbb8e64f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000003df11efa1149b7518f0bab20d616d9f73c99b4e700000000000000000000000000000000000000000000003635c9adc5dea0000000000000000000000000000000000000000000000195518939d43ed62a0000000000000000000000000000000000000000000000000000000000000059f35800000000000000000000000000000000000000000000000000000000000000001c00000000000000000000000000000000000000000195518939d43ed62a0000000000000000000000000000000000000000000000000000000000000000002710000000000000000000000000a25d01d15fc0e3cdede1bebee4124394aae0db33","Library":"","SwarmSource":"bzzr://4529089486e5cdaa6a7f84310c52ce39009fd65b34923be45f3de030d76f372c"}]}