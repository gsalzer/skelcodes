{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.18;\r\n\r\n\r\n/*\r\n * https://github.com/OpenZeppelin/zeppelin-solidity\r\n *\r\n * The MIT License (MIT)\r\n * Copyright (c) 2016 Smart Contract Solutions, Inc.\r\n */\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\n/*\r\n * https://github.com/OpenZeppelin/zeppelin-solidity\r\n *\r\n * The MIT License (MIT)\r\n * Copyright (c) 2016 Smart Contract Solutions, Inc.\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    function Ownable() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title Mintable token interface\r\n * @author Jakub Stefanski (https://github.com/jstefanski)\r\n *\r\n * https://github.com/OnLivePlatform/onlive-contracts\r\n *\r\n * The BSD 3-Clause Clear License\r\n * Copyright (c) 2018 OnLive LTD\r\n */\r\ncontract Mintable {\r\n    function mint(address to, uint256 amount) public;\r\n}\r\n\r\n\r\n/**\r\n * @title Crowdsale for off-chain payment methods\r\n * @author Jakub Stefanski (https://github.com/jstefanski)\r\n *\r\n * https://github.com/OnLivePlatform/onlive-contracts\r\n *\r\n * The BSD 3-Clause Clear License\r\n * Copyright (c) 2018 OnLive LTD\r\n */\r\ncontract ExternalCrowdsale is Ownable {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    /**\r\n     * @dev Address of mintable token instance\r\n     */\r\n    Mintable public token;\r\n\r\n    /**\r\n     * @dev Start block of active sale (inclusive). Zero if not scheduled.\r\n     */\r\n    uint256 public startBlock;\r\n\r\n    /**\r\n     * @dev End block of active sale (inclusive). Zero if not scheduled.\r\n     */\r\n    uint256 public endBlock;\r\n\r\n    /**\r\n     * @dev Indicates whether payment identified by bytes32 id is already registered\r\n     */\r\n    mapping (bytes32 => bool) public isPaymentRegistered;\r\n\r\n    /**\r\n     * @dev Current amount of tokens available for sale\r\n     */\r\n    uint256 public availableAmount;\r\n\r\n    function ExternalCrowdsale(Mintable _token, uint256 _availableAmount)\r\n        public\r\n        onlyValid(_token)\r\n        onlyNotZero(_availableAmount)\r\n    {\r\n        token = _token;\r\n        availableAmount = _availableAmount;\r\n    }\r\n\r\n    /**\r\n     * @dev Purchase with given payment id registered\r\n     * @param paymentId bytes32 A unique payment id\r\n     * @param purchaser address The recipient of the tokens\r\n     * @param amount uint256 The amount of tokens\r\n     */\r\n    event PurchaseRegistered(bytes32 indexed paymentId, address indexed purchaser, uint256 amount);\r\n\r\n    /**\r\n     * @dev Sale scheduled on the given blocks\r\n     * @param startBlock uint256 The first block of active sale\r\n     * @param endBlock uint256 The last block of active sale\r\n     */\r\n    event SaleScheduled(uint256 startBlock, uint256 endBlock);\r\n\r\n    modifier onlySufficientAvailableTokens(uint256 amount) {\r\n        require(availableAmount >= amount);\r\n        _;\r\n    }\r\n\r\n    modifier onlyUniquePayment(bytes32 paymentId) {\r\n        require(!isPaymentRegistered[paymentId]);\r\n        _;\r\n    }\r\n\r\n    modifier onlyValid(address addr) {\r\n        require(addr != address(0));\r\n        _;\r\n    }\r\n\r\n    modifier onlyNotZero(uint256 value) {\r\n        require(value != 0);\r\n        _;\r\n    }\r\n\r\n    modifier onlyNotScheduled() {\r\n        require(startBlock == 0);\r\n        require(endBlock == 0);\r\n        _;\r\n    }\r\n\r\n    modifier onlyActive() {\r\n        require(isActive());\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Schedule sale for given block range\r\n     * @param _startBlock uint256 The first block of sale\r\n     * @param _endBlock uint256 The last block of sale\r\n     */\r\n    function scheduleSale(uint256 _startBlock, uint256 _endBlock)\r\n        public\r\n        onlyOwner\r\n        onlyNotScheduled\r\n        onlyNotZero(_startBlock)\r\n        onlyNotZero(_endBlock)\r\n    {\r\n        require(_startBlock < _endBlock);\r\n\r\n        startBlock = _startBlock;\r\n        endBlock = _endBlock;\r\n\r\n        SaleScheduled(_startBlock, _endBlock);\r\n    }\r\n\r\n    /**\r\n     * @dev Register purchase with given payment id\r\n     * @param paymentId bytes32 A unique payment id\r\n     * @param purchaser address The recipient of the tokens\r\n     * @param amount uint256 The amount of tokens\r\n     */\r\n    function registerPurchase(bytes32 paymentId, address purchaser, uint256 amount)\r\n        public\r\n        onlyOwner\r\n        onlyActive\r\n        onlyValid(purchaser)\r\n        onlyNotZero(amount)\r\n        onlyUniquePayment(paymentId)\r\n        onlySufficientAvailableTokens(amount)\r\n    {\r\n        isPaymentRegistered[paymentId] = true;\r\n\r\n        availableAmount = availableAmount.sub(amount);\r\n\r\n        token.mint(purchaser, amount);\r\n\r\n        PurchaseRegistered(paymentId, purchaser, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Check whether sale is currently active\r\n     */\r\n    function isActive() public view returns (bool) {\r\n        return block.number >= startBlock && block.number <= endBlock;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"endBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isActive\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"paymentId\",\"type\":\"bytes32\"},{\"name\":\"purchaser\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"registerPurchase\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"availableAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"isPaymentRegistered\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_startBlock\",\"type\":\"uint256\"},{\"name\":\"_endBlock\",\"type\":\"uint256\"}],\"name\":\"scheduleSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_availableAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"paymentId\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PurchaseRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"startBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"endBlock\",\"type\":\"uint256\"}],\"name\":\"SaleScheduled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"ExternalCrowdsale","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000005ecc6c247b385d097d5d81c8bb7e879889905589000000000000000000000000000000000000000000034f086f3b33b684000000","Library":"","SwarmSource":"bzzr://b8fecb9b8ce6751f7a57681995bec2eebb17e9382965afdbe175c83c09b02499"}]}