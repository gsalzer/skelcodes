{"status":"1","message":"OK","result":[{"SourceCode":"/*! ppmt.sol | (c) 2018 Develop by BelovITLab LLC (smartcontract.ru), author my.life.cookie | License: MIT */\r\n\r\npragma solidity 0.4.18;\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        if(a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    modifier onlyOwner() { require(msg.sender == owner); _; }\r\n\r\n    function Ownable() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        owner = newOwner;\r\n        OwnershipTransferred(owner, newOwner);\r\n    }\r\n}\r\n\r\ncontract Pausable is Ownable {\r\n    bool public paused = false;\r\n\r\n    event Pause();\r\n    event Unpause();\r\n\r\n    modifier whenNotPaused() { require(!paused); _; }\r\n    modifier whenPaused() { require(paused); _; }\r\n\r\n    function pause() onlyOwner whenNotPaused public {\r\n        paused = true;\r\n        Pause();\r\n    }\r\n\r\n    function unpause() onlyOwner whenPaused public {\r\n        paused = false;\r\n        Unpause();\r\n    }\r\n}\r\n\r\ncontract ERC20 {\r\n    uint256 public totalSupply;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    function balanceOf(address who) public view returns(uint256);\r\n    function transfer(address to, uint256 value) public returns(bool);\r\n    function transferFrom(address from, address to, uint256 value) public returns(bool);\r\n    function allowance(address owner, address spender) public view returns(uint256);\r\n    function approve(address spender, uint256 value) public returns(bool);\r\n}\r\n\r\ncontract StandardToken is ERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals;\r\n\r\n    mapping(address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n    function StandardToken(string _name, string _symbol, uint8 _decimals) public {\r\n        name = _name;\r\n        symbol = _symbol;\r\n        decimals = _decimals;\r\n    }\r\n\r\n    function balanceOf(address _owner) public view returns(uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public returns(bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[msg.sender]);\r\n\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n\r\n        Transfer(msg.sender, _to, _value);\r\n\r\n        return true;\r\n    }\r\n    \r\n    function multiTransfer(address[] _to, uint256[] _value) public returns(bool) {\r\n        require(_to.length == _value.length);\r\n\r\n        for(uint i = 0; i < _to.length; i++) {\r\n            transfer(_to[i], _value[i]);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns(bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[_from]);\r\n        require(_value <= allowed[_from][msg.sender]);\r\n\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n\r\n        Transfer(_from, _to, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) public view returns(uint256) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public returns(bool) {\r\n        allowed[msg.sender][_spender] = _value;\r\n\r\n        Approval(msg.sender, _spender, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n    function increaseApproval(address _spender, uint _addedValue) public returns(bool) {\r\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n\r\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n\r\n        return true;\r\n    }\r\n\r\n    function decreaseApproval(address _spender, uint _subtractedValue) public returns(bool) {\r\n        uint oldValue = allowed[msg.sender][_spender];\r\n\r\n        if(_subtractedValue > oldValue) {\r\n            allowed[msg.sender][_spender] = 0;\r\n        } else {\r\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n        }\r\n\r\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract MintableToken is StandardToken, Ownable {\r\n    event Mint(address indexed to, uint256 amount);\r\n    event MintFinished();\r\n\r\n    bool public mintingFinished = false;\r\n\r\n    modifier canMint() { require(!mintingFinished); _; }\r\n\r\n    function mint(address _to, uint256 _amount) onlyOwner canMint public returns(bool) {\r\n        totalSupply = totalSupply.add(_amount);\r\n        balances[_to] = balances[_to].add(_amount);\r\n\r\n        Mint(_to, _amount);\r\n        Transfer(address(0), _to, _amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    function finishMinting() onlyOwner canMint public returns(bool) {\r\n        mintingFinished = true;\r\n\r\n        MintFinished();\r\n\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract CappedToken is MintableToken {\r\n    uint256 public cap;\r\n\r\n    function CappedToken(uint256 _cap) public {\r\n        require(_cap > 0);\r\n        cap = _cap;\r\n    }\r\n\r\n    function mint(address _to, uint256 _amount) onlyOwner canMint public returns(bool) {\r\n        require(totalSupply.add(_amount) <= cap);\r\n\r\n        return super.mint(_to, _amount);\r\n    }\r\n}\r\n\r\ncontract BurnableToken is StandardToken {\r\n    event Burn(address indexed burner, uint256 value);\r\n\r\n    function burn(uint256 _value) public {\r\n        require(_value <= balances[msg.sender]);\r\n\r\n        address burner = msg.sender;\r\n\r\n        balances[burner] = balances[burner].sub(_value);\r\n        totalSupply = totalSupply.sub(_value);\r\n\r\n        Burn(burner, _value);\r\n    }\r\n}\r\n\r\ncontract RewardToken is StandardToken, Ownable {\r\n    struct Payment {\r\n        uint time;\r\n        uint amount;\r\n    }\r\n\r\n    Payment[] public repayments;\r\n    mapping(address => Payment[]) public rewards;\r\n\r\n    event Reward(address indexed to, uint256 amount);\r\n\r\n    function repayment() onlyOwner payable public {\r\n        require(msg.value >= 0.01 * 1 ether);\r\n\r\n        repayments.push(Payment({time : now, amount : msg.value}));\r\n    }\r\n\r\n    function _reward(address _to) private returns(bool) {\r\n        if(rewards[_to].length < repayments.length) {\r\n            uint sum = 0;\r\n            for(uint i = rewards[_to].length; i < repayments.length; i++) {\r\n                uint amount = balances[_to] > 0 ? (repayments[i].amount * balances[_to] / totalSupply) : 0;\r\n                rewards[_to].push(Payment({time : now, amount : amount}));\r\n                sum += amount;\r\n            }\r\n\r\n            if(sum > 0) {\r\n                _to.transfer(sum);\r\n                Reward(_to, sum);\r\n            }\r\n\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function reward() public returns(bool) {\r\n        return _reward(msg.sender);\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public returns(bool) {\r\n        _reward(msg.sender);\r\n        _reward(_to);\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n    function multiTransfer(address[] _to, uint256[] _value) public returns(bool) {\r\n        _reward(msg.sender);\r\n        for(uint i = 0; i < _to.length; i++) {\r\n            _reward(_to[i]);\r\n        }\r\n\r\n        return super.multiTransfer(_to, _value);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns(bool) {\r\n        _reward(_from);\r\n        _reward(_to);\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n}\r\n\r\n/*\r\n    ICO Patriot Project Mall\r\n    - Эмиссия токенов ограничена (всего 1 800 000 токенов, токены выпускаются во время Crowdsale)\r\n    - Цена токена во время старта: 1 ETH = 140 токенов (цену можно изменить во время ICO)\r\n    - Минимальная сумма покупки: 0.01 ETH\r\n    - Токенов на продажу 1 791 000\r\n    - Средства от покупки токенов остаются на контракте\r\n    - Закрытие Crowdsale происходит с помощью функции `closeCrowdsale()`: управление токеном и не раскупленные токены передаются бенефициару, средства с контракта передаются бенефициару\r\n    - Возрат происходит функцией `refundCrowdsale()` Crowdsale закрывается а вкладчики могут вернуть свои вклады функцией `refund()` управление токеном остается Crowdsale\r\n    - Измение цены токена происходит функцией `setTokenRate(_value)`, где `_value` - кол-во токенов покумаемое за 1 Ether, смена стоимости токена доступно только во время паузы администратору, после завершения Crowdsale функция становится недоступной\r\n    - Измение размера бонуса происходит функцией `setBonusPercent(_value)`, где `_value` - % начисляемых бонусов при покупке токенов, смена стоимости токена доступно только во время паузы администратору, после завершения Crowdsale функция становится недоступной\r\n    - На Token могут быть начислены дивиденды функцией `repayment()`\r\n    - Чтобы забрать дивиденды держателю токенов необходимо вызвать у Token функцию `reward()`\r\n*/\r\ncontract Token is CappedToken, BurnableToken, RewardToken {\r\n    function Token() CappedToken(1800000 * 1 ether) StandardToken(\"Patriot Project Mall Token\", \"PPMT\", 18) public {\r\n        \r\n    }\r\n}\r\n\r\ncontract Crowdsale is Pausable {\r\n    using SafeMath for uint;\r\n\r\n    Token public token;\r\n    address public beneficiary = 0x9028233131d986484293eEde62507E3d75d6284e;\r\n\r\n    uint public collectedWei;\r\n    uint public refundedWei;\r\n    uint public tokensSold;\r\n\r\n    uint public tokensForSale = 1791000 * 1 ether;\r\n    uint public priceTokenWei = 7142857142857142;\r\n    uint public bonusPercent = 0;\r\n\r\n    bool public crowdsaleClosed = false;\r\n    bool public crowdsaleRefund = false;\r\n\r\n    mapping(address => uint256) public purchaseBalances; \r\n\r\n    event Rurchase(address indexed holder, uint256 tokenAmount, uint256 etherAmount);\r\n    event Refund(address indexed holder, uint256 etherAmount);\r\n    event CrowdsaleClose();\r\n    event CrowdsaleRefund();\r\n\r\n    function Crowdsale() public {\r\n        token = new Token();\r\n    }\r\n\r\n    function() payable public {\r\n        purchase();\r\n    }\r\n\r\n    function setTokenRate(uint _value) onlyOwner whenPaused public {\r\n        require(!crowdsaleClosed);\r\n        priceTokenWei = 1 ether / _value;\r\n    }\r\n\r\n    function setBonusPercent(uint _value) onlyOwner whenPaused public {\r\n        require(!crowdsaleClosed);\r\n        bonusPercent = _value;\r\n    }\r\n    \r\n    function purchase() whenNotPaused payable public {\r\n        require(!crowdsaleClosed);\r\n        require(tokensSold < tokensForSale);\r\n        require(msg.value >= 0.01 ether);\r\n\r\n        uint sum = msg.value;\r\n        uint amount = sum.mul(1 ether).div(priceTokenWei);\r\n        uint retSum = 0;\r\n\r\n        if(bonusPercent > 0) {\r\n            amount = amount.div(100).mul(bonusPercent);\r\n        }\r\n        \r\n        if(tokensSold.add(amount) > tokensForSale) {\r\n            uint retAmount = tokensSold.add(amount).sub(tokensForSale);\r\n            retSum = retAmount.mul(priceTokenWei).div(1 ether);\r\n\r\n            amount = amount.sub(retAmount);\r\n            sum = sum.sub(retSum);\r\n        }\r\n\r\n        tokensSold = tokensSold.add(amount);\r\n        collectedWei = collectedWei.add(sum);\r\n        purchaseBalances[msg.sender] = purchaseBalances[msg.sender].add(sum);\r\n\r\n        token.mint(msg.sender, amount);\r\n\r\n        if(retSum > 0) {\r\n            msg.sender.transfer(retSum);\r\n        }\r\n\r\n        Rurchase(msg.sender, amount, sum);\r\n    }\r\n\r\n    function refund() public {\r\n        require(crowdsaleRefund);\r\n        require(purchaseBalances[msg.sender] > 0);\r\n\r\n        uint sum = purchaseBalances[msg.sender];\r\n\r\n        purchaseBalances[msg.sender] = 0;\r\n        refundedWei = refundedWei.add(sum);\r\n\r\n        msg.sender.transfer(sum);\r\n        \r\n        Refund(msg.sender, sum);\r\n    }\r\n\r\n    function closeCrowdsale() onlyOwner public {\r\n        require(!crowdsaleClosed);\r\n        \r\n        beneficiary.transfer(this.balance);\r\n        token.mint(beneficiary, token.cap().sub(token.totalSupply()));\r\n        token.transferOwnership(beneficiary);\r\n\r\n        crowdsaleClosed = true;\r\n\r\n        CrowdsaleClose();\r\n    }\r\n\r\n    function refundCrowdsale() onlyOwner public {\r\n        require(!crowdsaleClosed);\r\n\r\n        crowdsaleRefund = true;\r\n        crowdsaleClosed = true;\r\n\r\n        CrowdsaleRefund();\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"priceTokenWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"purchaseBalances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensForSale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"refundedWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleRefund\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setTokenRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setBonusPercent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"purchase\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"closeCrowdsale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleClosed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refundCrowdsale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"collectedWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"etherAmount\",\"type\":\"uint256\"}],\"name\":\"Rurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"etherAmount\",\"type\":\"uint256\"}],\"name\":\"Refund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"CrowdsaleClose\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"CrowdsaleRefund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Crowdsale","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://299ce51725b840a36bf20fb2d5e7ce7fdee0ef30327f277c96def154968be4fa"}]}