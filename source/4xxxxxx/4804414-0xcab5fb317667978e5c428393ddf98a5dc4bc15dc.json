{"status":"1","message":"OK","result":[{"SourceCode":"contract Powerball {\r\n    struct Round {\r\n        uint endTime;\r\n        uint drawBlock;\r\n        uint[6] winningNumbers;\r\n        mapping(address => uint[6][]) tickets;\r\n    }\r\n\r\n    uint public constant TICKET_PRICE = 2e15;\r\n    uint public constant MAX_NUMBER = 69;\r\n    uint public constant MAX_POWERBALL_NUMBER = 26;\r\n    uint public constant ROUND_LENGTH = 3 days;\r\n\r\n    uint public round;\r\n    mapping(uint => Round) public rounds;\r\n\r\n    function Powerball () public {\r\n        round = 1;\r\n        rounds[round].endTime = now + ROUND_LENGTH;\r\n    }\r\n\r\n    function buy (uint[6][] numbers) payable public {\r\n        require(numbers.length * TICKET_PRICE == msg.value);\r\n\r\n        for (uint i=0; i < numbers.length; i++) {\r\n            for (uint j=0; j < 6; j++)\r\n                require(numbers[i][j] > 0);\r\n            for (j=0; j < 5; j++)\r\n                require(numbers[i][j] <= MAX_NUMBER);\r\n            require(numbers[i][5] <= MAX_POWERBALL_NUMBER);\r\n        }\r\n\r\n        // check for round expiry\r\n        if (now > rounds[round].endTime) {\r\n            rounds[round].drawBlock = block.number + 5;\r\n            round += 1;\r\n            rounds[round].endTime = now + ROUND_LENGTH;\r\n        }\r\n\r\n        for (i=0; i < numbers.length; i++)\r\n            rounds[round].tickets[msg.sender].push(numbers[i]);\r\n    }\r\n\r\n    function drawNumbers (uint _round) public {\r\n        uint drawBlock = rounds[_round].drawBlock;\r\n        require(now > rounds[_round].endTime);\r\n        require(block.number >= drawBlock);\r\n        require(rounds[_round].winningNumbers[0] == 0);\r\n\r\n        for (uint i=0; i < 5; i++) {\r\n            bytes32 rand = keccak256(block.blockhash(drawBlock), i);\r\n            uint numberDraw = uint(rand) % MAX_NUMBER + 1;\r\n            rounds[_round].winningNumbers[i] = numberDraw;\r\n        }\r\n        rand = keccak256(block.blockhash(drawBlock), uint(5));\r\n        uint powerballDraw = uint(rand) % MAX_POWERBALL_NUMBER + 1;\r\n        rounds[_round].winningNumbers[5] = powerballDraw;\r\n    }\r\n\r\n    function claim (uint _round) public {\r\n        require(rounds[_round].tickets[msg.sender].length > 0);\r\n        require(rounds[_round].winningNumbers[0] != 0);\r\n\r\n        uint[6][] storage myNumbers = rounds[_round].tickets[msg.sender];\r\n        uint[6] storage winningNumbers = rounds[_round].winningNumbers;\r\n\r\n        uint payout = 0;\r\n        for (uint i=0; i < myNumbers.length; i++) {\r\n            uint numberMatches = 0;\r\n            for (uint j=0; j < 5; j++) {\r\n                for (uint k=0; k < 5; k++) {\r\n                    if (myNumbers[i][j] == winningNumbers[k])\r\n                        numberMatches += 1;\r\n                }\r\n            }\r\n            bool powerballMatches = (myNumbers[i][5] == winningNumbers[5]);\r\n\r\n            // win conditions\r\n            if (numberMatches == 5 && powerballMatches) {\r\n                payout = this.balance;\r\n                break;\r\n            }\r\n            else if (numberMatches == 5)\r\n                payout += 1000 ether;\r\n            else if (numberMatches == 4 && powerballMatches)\r\n                payout += 50 ether;\r\n            else if (numberMatches == 4)\r\n                payout += 1e17; // .1 ether\r\n            else if (numberMatches == 3 && powerballMatches)\r\n                payout += 1e17; // .1 ether\r\n            else if (numberMatches == 3)\r\n                payout += 7e15; // .007 ether\r\n            else if (numberMatches == 2 && powerballMatches)\r\n                payout += 7e15; // .007 ether\r\n            else if (powerballMatches)\r\n                payout += 4e15; // .004 ether\r\n        }\r\n\r\n        msg.sender.transfer(payout);\r\n        delete rounds[_round].tickets[msg.sender];\r\n    }\r\n\r\n    function ticketsFor(uint _round, address user) public view \r\n      returns (uint[6][] tickets) {\r\n        return rounds[_round].tickets[user];\r\n    }\r\n\r\n    function winningNumbersFor(uint _round) public view\r\n      returns (uint[6] winningNumbers) {\r\n        return rounds[_round].winningNumbers;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"numbers\",\"type\":\"uint256[6][]\"}],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"round\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TICKET_PRICE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_round\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_round\",\"type\":\"uint256\"}],\"name\":\"winningNumbersFor\",\"outputs\":[{\"name\":\"winningNumbers\",\"type\":\"uint256[6]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rounds\",\"outputs\":[{\"name\":\"endTime\",\"type\":\"uint256\"},{\"name\":\"drawBlock\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ROUND_LENGTH\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_round\",\"type\":\"uint256\"},{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"ticketsFor\",\"outputs\":[{\"name\":\"tickets\",\"type\":\"uint256[6][]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_round\",\"type\":\"uint256\"}],\"name\":\"drawNumbers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_POWERBALL_NUMBER\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_NUMBER\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"Powerball","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://c7328067219a280b027eb036f419ba3b26e857800941424bb9f5e8bdf6550020"}]}