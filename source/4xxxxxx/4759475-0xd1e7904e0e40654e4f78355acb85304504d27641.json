{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev Adds onlyOwner modifier. Subcontracts should implement checkOwner to check if caller is owner.\r\n */\r\ncontract Ownable {\r\n    modifier onlyOwner() {\r\n        checkOwner();\r\n        _;\r\n    }\r\n\r\n    function checkOwner() internal;\r\n}\r\n\r\n/**\r\n * @title OwnableImpl\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract OwnableImpl is Ownable {\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    function OwnableImpl() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    function checkOwner() internal {\r\n        require(msg.sender == owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) onlyOwner public {\r\n        require(newOwner != address(0));\r\n        OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Read-only ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ReadOnlyToken {\r\n    uint256 public totalSupply;\r\n    function balanceOf(address who) public constant returns (uint256);\r\n    function allowance(address owner, address spender) public constant returns (uint256);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract Token is ReadOnlyToken {\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract MintableToken is Token {\r\n    event Mint(address indexed to, uint256 amount);\r\n\r\n    function mint(address _to, uint256 _amount) public returns (bool);\r\n}\r\n\r\n/**\r\n * @title Sale contract for Daonomic platform should implement this\r\n */\r\ncontract Sale {\r\n    /**\r\n     * @dev This event should be emitted when user buys something\r\n     */\r\n    event Purchase(address indexed buyer, address token, uint256 value, uint256 sold, uint256 bonus);\r\n    /**\r\n     * @dev Should be emitted if new payment method added\r\n     */\r\n    event RateAdd(address token);\r\n    /**\r\n     * @dev Should be emitted if payment method removed\r\n     */\r\n    event RateRemove(address token);\r\n\r\n    /**\r\n     * @dev Calculate rate for specified payment method\r\n     */\r\n    function getRate(address token) constant public returns (uint256);\r\n    /**\r\n     * @dev Calculate current bonus in tokens\r\n     */\r\n    function getBonus(uint256 sold) constant public returns (uint256);\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n * @dev this version copied from zeppelin-solidity, constant changed to pure\r\n */\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Token represents some external value (for example, BTC, USD etc)\r\n */\r\ncontract ExternalToken is Token {\r\n    event Mint(address indexed to, uint256 value, bytes data);\r\n    event Burn(address indexed burner, uint256 value, bytes data);\r\n\r\n    function burn(uint256 _value, bytes _data) public;\r\n}\r\n\r\n/**\r\n * @dev This adapter helps to receive tokens. It has some subcontracts for different tokens:\r\n *   ERC20ReceiveAdapter - for receiving simple ERC20 tokens\r\n *   ERC223ReceiveAdapter - for receiving ERC223 tokens\r\n *   ReceiveApprovalAdapter - for receiving ERC20 tokens when token notifies receiver with receiveApproval\r\n *   EtherReceiveAdapter - for receiving ether (onReceive callback will be used). this is needed for handling ether like tokens\r\n *   CompatReceiveApproval - implements all these adapters\r\n */\r\ncontract ReceiveAdapter {\r\n\r\n    /**\r\n     * @dev Receive tokens from someone. Owner of the tokens should approve first\r\n     */\r\n    function onReceive(address _token, address _from, uint256 _value, bytes _data) internal;\r\n}\r\n\r\n/**\r\n * @dev Helps to receive ERC20-complaint tokens. Owner should call token.approve first\r\n */\r\ncontract ERC20ReceiveAdapter is ReceiveAdapter {\r\n    function receive(address _token, uint256 _value, bytes _data) public {\r\n        Token token = Token(_token);\r\n        token.transferFrom(msg.sender, this, _value);\r\n        onReceive(_token, msg.sender, _value, _data);\r\n    }\r\n}\r\n\r\n/**\r\n * @title ERC223 TokenReceiver interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/223\r\n */\r\ncontract TokenReceiver {\r\n    function onTokenTransfer(address _from, uint256 _value, bytes _data) public;\r\n}\r\n\r\n/**\r\n * @dev Helps to receive ERC223-complaint tokens. ERC223 Token contract should notify receiver.\r\n */\r\ncontract ERC223ReceiveAdapter is TokenReceiver, ReceiveAdapter {\r\n    function tokenFallback(address _from, uint256 _value, bytes _data) public {\r\n        onReceive(msg.sender, _from, _value, _data);\r\n    }\r\n\r\n    function onTokenTransfer(address _from, uint256 _value, bytes _data) public {\r\n        onReceive(msg.sender, _from, _value, _data);\r\n    }\r\n}\r\n\r\ncontract EtherReceiveAdapter is ReceiveAdapter {\r\n    function () payable public {\r\n        receiveEtherAndData(\"\");\r\n    }\r\n\r\n    function receiveEtherAndData(bytes _data) payable public {\r\n        onReceive(address(0), msg.sender, msg.value, _data);\r\n    }\r\n}\r\n\r\n/**\r\n * @dev This ReceiveAdapter supports all possible tokens\r\n */\r\ncontract CompatReceiveAdapter is ERC20ReceiveAdapter, ERC223ReceiveAdapter, EtherReceiveAdapter {\r\n\r\n}\r\n\r\ncontract AbstractSale is Sale, CompatReceiveAdapter, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    event Withdraw(address token, address to, uint256 value);\r\n    event Burn(address token, uint256 value, bytes data);\r\n\r\n    function onReceive(address _token, address _from, uint256 _value, bytes _data) internal {\r\n        uint256 sold = getSold(_token, _value);\r\n        require(sold > 0);\r\n        uint256 bonus = getBonus(sold);\r\n        address buyer;\r\n        if (_data.length == 20) {\r\n            buyer = address(toBytes20(_data, 0));\r\n        } else {\r\n            require(_data.length == 0);\r\n            buyer = _from;\r\n        }\r\n        checkPurchaseValid(buyer, sold, bonus);\r\n        doPurchase(buyer, sold, bonus);\r\n        Purchase(buyer, _token, _value, sold, bonus);\r\n        onPurchase(buyer, _token, _value, sold, bonus);\r\n    }\r\n\r\n    function getSold(address _token, uint256 _value) constant public returns (uint256) {\r\n        uint256 rate = getRate(_token);\r\n        require(rate > 0);\r\n        return _value.mul(rate).div(10**18);\r\n    }\r\n\r\n    function getBonus(uint256 sold) constant public returns (uint256);\r\n\r\n    function getRate(address _token) constant public returns (uint256);\r\n\r\n    function doPurchase(address buyer, uint256 sold, uint256 bonus) internal;\r\n\r\n    function checkPurchaseValid(address /*buyer*/, uint256 /*sold*/, uint256 /*bonus*/) internal {\r\n\r\n    }\r\n\r\n    function onPurchase(address /*buyer*/, address /*token*/, uint256 /*value*/, uint256 /*sold*/, uint256 /*bonus*/) internal {\r\n\r\n    }\r\n\r\n    function toBytes20(bytes b, uint256 _start) pure internal returns (bytes20 result) {\r\n        require(_start + 20 <= b.length);\r\n        assembly {\r\n            let from := add(_start, add(b, 0x20))\r\n            result := mload(from)\r\n        }\r\n    }\r\n\r\n    function withdraw(address _token, address _to, uint256 _value) onlyOwner public {\r\n        require(_to != address(0));\r\n        verifyCanWithdraw(_token, _to, _value);\r\n        if (_token == address(0)) {\r\n            _to.transfer(_value);\r\n        } else {\r\n            Token(_token).transfer(_to, _value);\r\n        }\r\n        Withdraw(_token, _to, _value);\r\n    }\r\n\r\n    function verifyCanWithdraw(address token, address to, uint256 amount) internal;\r\n\r\n    function burnWithData(address _token, uint256 _value, bytes _data) onlyOwner public {\r\n        ExternalToken(_token).burn(_value, _data);\r\n        Burn(_token, _value, _data);\r\n    }\r\n}\r\n\r\n/**\r\n * @title This sale mints token when user sends accepted payments\r\n */\r\ncontract MintingSale is AbstractSale {\r\n    MintableToken public token;\r\n\r\n    function MintingSale(address _token) public {\r\n        token = MintableToken(_token);\r\n    }\r\n\r\n    function doPurchase(address buyer, uint256 sold, uint256 bonus) internal {\r\n        token.mint(buyer, sold.add(bonus));\r\n    }\r\n\r\n    function verifyCanWithdraw(address, address, uint256) internal {\r\n\r\n    }\r\n}\r\n\r\ncontract CappedSale is AbstractSale {\r\n    uint256 public cap;\r\n    uint256 public initialCap;\r\n\r\n    function CappedSale(uint256 _cap) public {\r\n        cap = _cap;\r\n        initialCap = _cap;\r\n    }\r\n\r\n    function checkPurchaseValid(address buyer, uint256 sold, uint256 bonus) internal {\r\n        super.checkPurchaseValid(buyer, sold, bonus);\r\n        require(cap >= sold);\r\n    }\r\n\r\n    function onPurchase(address buyer, address token, uint256 value, uint256 sold, uint256 bonus) internal {\r\n        super.onPurchase(buyer, token, value, sold, bonus);\r\n        cap = cap.sub(sold);\r\n    }\r\n}\r\n\r\ncontract EthBtcSale is MintingSale, OwnableImpl, CappedSale {\r\n    address public btcToken;\r\n    uint256 public start;\r\n    uint256 public end;\r\n    uint256 public customBonus;\r\n\r\n    function EthBtcSale(address _mintableToken, address _btcToken, uint256 _start, uint256 _end, uint256 _cap) MintingSale(_mintableToken) CappedSale(_cap) {\r\n        btcToken = _btcToken;\r\n        start = _start;\r\n        end = _end;\r\n        RateAdd(address(0));\r\n        RateAdd(_btcToken);\r\n    }\r\n\r\n    function getBonus(uint sold) constant public returns (uint256) {\r\n        if (customBonus != 0) {\r\n            return sold.mul(customBonus).div(1000);\r\n        } else {\r\n            return getTimeBonus(sold) + getAmountBonus(sold);\r\n        }\r\n    }\r\n\r\n    function getTimeBonus(uint256 sold) internal returns (uint256) {\r\n        uint256 week = (now - start) / (86400 * 7);\r\n        if (50 >= week * 5) {\r\n            return sold.mul(50 - week * 5).div(100);\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    function getAmountBonus(uint256 sold) internal returns (uint256) {\r\n        if (sold > 20000 * 10**18) {\r\n            return sold.mul(150).div(1000);\r\n        } else if (sold > 15000 * 10**18) {\r\n            return sold.mul(125).div(1000);\r\n        } else if (sold > 10000 * 10**18) {\r\n            return sold.mul(100).div(1000);\r\n        } else if (sold > 5000 * 10**18) {\r\n            return sold.mul(75).div(1000);\r\n        } else if (sold > 1000 * 10**18) {\r\n            return sold.mul(50).div(1000);\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    function checkPurchaseValid(address buyer, uint256 sold, uint256 bonus) internal {\r\n        super.checkPurchaseValid(buyer, sold, bonus);\r\n        require(now > start && now < end);\r\n    }\r\n\r\n    function getRate(address _token) constant public returns (uint256) {\r\n        if (_token == btcToken) {\r\n            return 150000000000000000000000000000000;\r\n        } else if (_token == address(0)) {\r\n            return 500000000000000000000;\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    function setCustomBonus(uint256 _customBonus) onlyOwner public {\r\n        customBonus = _customBonus;\r\n    }\r\n\r\n    function withdrawEth(address _to, uint256 _value) onlyOwner public {\r\n        withdraw(address(0), _to, _value);\r\n    }\r\n\r\n    function withdrawBtc(bytes _to, uint256 _value) onlyOwner public {\r\n        burnWithData(btcToken, _value, _to);\r\n    }\r\n\r\n    function transferTokenOwnership(address newOwner) onlyOwner public {\r\n        OwnableImpl(token).transferOwnership(newOwner);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"btcToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"withdrawEth\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"customBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferTokenOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"receive\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"bytes\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"withdrawBtc\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"sold\",\"type\":\"uint256\"}],\"name\":\"getBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"getSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"burnWithData\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"onTokenTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"receiveEtherAndData\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"start\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"tokenFallback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_customBonus\",\"type\":\"uint256\"}],\"name\":\"setCustomBonus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"end\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_mintableToken\",\"type\":\"address\"},{\"name\":\"_btcToken\",\"type\":\"address\"},{\"name\":\"_start\",\"type\":\"uint256\"},{\"name\":\"_end\",\"type\":\"uint256\"},{\"name\":\"_cap\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"sold\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"bonus\",\"type\":\"uint256\"}],\"name\":\"Purchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"}],\"name\":\"RateAdd\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"}],\"name\":\"RateRemove\",\"type\":\"event\"}]","ContractName":"EthBtcSale","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000043ddf6cc0ad563f57dd538bed452b09009078ca9000000000000000000000000f876c67ce21a03a848dbae562d583296ee5a8449000000000000000000000000000000000000000000000000000000005A497A00000000000000000000000000000000000000000000000000000000005A974280000000000000000000000000000000000000000000027b46536c66c8e3000000","Library":"","SwarmSource":"bzzr://92a2c745fdc6e07b45df5ba8cbbc9a7c80d61d1b0db73faa45c99ec96e6e07bc"}]}