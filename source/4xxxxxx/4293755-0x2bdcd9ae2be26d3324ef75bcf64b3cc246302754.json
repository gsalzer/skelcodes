{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\n/**\r\n * Math operations with safety checks\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    if ((a == 0) || (c / a == b)) {\r\n      return c;\r\n    }\r\n    revert();\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a / b;\r\n    if (a == b * c + a % b) {\r\n      return c;\r\n    }\r\n    revert();\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    if (b <= a) {\r\n      return a - b;\r\n    }\r\n    revert();\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    if (c >= a) {\r\n      return c;\r\n    }\r\n    revert();\r\n  }\r\n\r\n  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    return a < b ? a : b;\r\n  }\r\n\r\n}\r\n\r\n/*\r\n * Ownable\r\n *\r\n * Base contract with an owner.\r\n * Provides onlyOwner modifier, which prevents function from running if it is called by anyone other than the owner.\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    if (msg.sender != owner) {\r\n      revert();\r\n    }\r\n    _;\r\n  }\r\n\r\n  function transferOwnership(address newOwner) onlyOwner {\r\n    if (newOwner != address(0)) {\r\n      owner = newOwner;\r\n    }\r\n  }\r\n\r\n}\r\n\r\n/*\r\n * Haltable\r\n *\r\n * Abstract contract that allows children to implement an\r\n * emergency stop mechanism. Differs from Pausable by causing a revert() when in halt mode.\r\n *\r\n *\r\n * Originally envisioned in FirstBlood ICO contract.\r\n */\r\ncontract Haltable is Ownable {\r\n  bool public halted;\r\n\r\n  event Halted(uint256 _time);\r\n  event Unhalted(uint256 _time);\r\n  \r\n  modifier stopInEmergency {\r\n    if (halted) revert();\r\n    _;\r\n  }\r\n\r\n  modifier onlyInEmergency {\r\n    if (!halted) revert();\r\n    _;\r\n  }\r\n\r\n  // called by the owner on emergency, triggers stopped state\r\n  function halt() external onlyOwner {\r\n    halted = true;\r\n    Halted( now );\r\n  }\r\n\r\n  // called by the owner on end of emergency, returns to normal state\r\n  function unhalt() external onlyOwner onlyInEmergency {\r\n    halted = false;\r\n    Unhalted( now );\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface - no allowances\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) constant returns (uint256);\r\n  function transfer(address to, uint256 value);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev ERC20Basic with allowances\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value);\r\n  function approve(address spender, uint256 value);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev realisation of ERC20Basic interface\r\n * @dev Basic version of StandardToken, with no allowances. \r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n   * @dev Fix for the ERC20 short address attack.\r\n   */\r\n  modifier onlyPayloadSize(uint256 size) {\r\n     if(msg.data.length < size + 4) {\r\n       revert();\r\n     }\r\n     _;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) onlyPayloadSize(2 * 32) {\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of. \r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implemantation of the basic standart token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is BasicToken, ERC20 {\r\n  using SafeMath for uint256;\r\n  \r\n  mapping (address => mapping (address => uint256)) allowed;\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amout of tokens to be transfered\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) onlyPayloadSize(3 * 32) {\r\n    var _allowance = allowed[_from][msg.sender];\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    \r\n    Transfer(_from, _to, _value);\r\n  }\r\n\r\n  /**\r\n   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) onlyPayloadSize(2 * 32) {  //not letting anybody hit himself with short address attack\r\n\r\n    // To change the approve amount you first have to reduce the addresses`\r\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n    //  already 0 to mitigate the race condition described here:\r\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    if ((_value != 0) && (allowed[msg.sender][_spender] != 0)) revert();\r\n\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifing the amount of tokens still avaible for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title EtalonToken\r\n * @dev Base Etalon ERC20 Token, where all tokens are pre-assigned to the creator. \r\n * Note they can later distribute these tokens as they wish using `transfer` and other\r\n * `StandardToken` functions.\r\n */\r\ncontract EtalonToken is StandardToken, Haltable {\r\n  using SafeMath for uint256;\r\n  \r\n  string  public name        = \"Etalon Token\";\r\n  string  public symbol      = \"ETL\";\r\n  uint256 public decimals    = 0;\r\n  uint256 public INITIAL     = 4000000;\r\n  \r\n  event MoreTokensMinted(uint256 _minted, string reason);\r\n\r\n  /**\r\n   * @dev Contructor that gives msg.sender all of existing tokens. \r\n   */\r\n  function EtalonToken() {\r\n    totalSupply = INITIAL;\r\n    balances[msg.sender] = INITIAL;\r\n  }\r\n  \r\n  /**\r\n   * @dev Function that creates new tokens by owner\r\n   * @param _amount - how many tokens mint\r\n   * @param reason  - for which reason minted\r\n   */\r\n  function mint( uint256 _amount, string reason ) onlyOwner {\r\n    totalSupply = totalSupply.add(_amount);\r\n    balances[msg.sender] = balances[msg.sender].add(_amount);\r\n    MoreTokensMinted(_amount, reason);\r\n  }\r\n}\r\n\r\n/**\r\n * @title Etalon Token Presale\r\n * @dev Presale contract\r\n */\r\ncontract EtalonTokenPresale is Haltable {\r\n  using SafeMath for uint256;\r\n\r\n  string public name = \"Etalon Token Presale\";\r\n\r\n  EtalonToken public token;\r\n  address public beneficiary;\r\n\r\n  uint256 public hardCap;\r\n  uint256 public softCap;\r\n  uint256 public collected;\r\n  uint256 public price;\r\n\r\n  uint256 public tokensSold = 0;\r\n  uint256 public weiRaised = 0;\r\n  uint256 public investorCount = 0;\r\n  uint256 public weiRefunded = 0;\r\n\r\n  uint256 public startTime;\r\n  uint256 public endTime;\r\n  uint256 public duration;\r\n\r\n  bool public softCapReached = false;\r\n  bool public crowdsaleFinished = false;\r\n\r\n  mapping (address => bool) refunded;\r\n\r\n  event CrowdsaleStarted(uint256 _time, uint256 _softCap, uint256 _hardCap, uint256 _price );\r\n  event CrowdsaleFinished(uint256 _time);\r\n  event CrowdsaleExtended(uint256 _endTime);\r\n  event GoalReached(uint256 _amountRaised);\r\n  event SoftCapReached(uint256 _softCap);\r\n  event NewContribution(address indexed _holder, uint256 _tokenAmount, uint256 _etherAmount);\r\n  event Refunded(address indexed _holder, uint256 _amount);\r\n\r\n  modifier onlyAfter(uint256 time) {\r\n    if (now < time) revert();\r\n    _;\r\n  }\r\n\r\n  modifier onlyBefore(uint256 time) {\r\n    if (now > time) revert();\r\n    _;\r\n  }\r\n  \r\n  /**\r\n   * @dev Constructor\r\n   * @param _token       - address of ETL contract\r\n   * @param _beneficiary - address, which gets all profits\r\n   */\r\n  function EtalonTokenPresale(\r\n    address _token,\r\n    address _beneficiary\r\n  ) {\r\n    hardCap = 0;\r\n    softCap = 0;\r\n    price   = 0;\r\n  \r\n    token = EtalonToken(_token);\r\n    beneficiary = _beneficiary;\r\n\r\n    startTime = 0;\r\n    endTime   = 0;\r\n  }\r\n  \r\n  /**\r\n   * @dev Function that starts sales\r\n   * @param _hardCap     - in ethers (not wei/gwei/finney)\r\n   * @param _softCap     - in ethers (not wei/gwei/finney)\r\n   * @param _duration - length of presale in hours\r\n   * @param _price       - tokens per 1 ether\r\n   * TRANSFER ENOUGH TOKENS TO THIS CONTRACT FIRST OR IT WONT BE ABLE TO SELL THEM\r\n   */  \r\n  function start(\r\n    uint256 _hardCap,\r\n    uint256 _softCap,\r\n    uint256 _duration,\r\n    uint256 _price ) onlyOwner\r\n  {\r\n    if (startTime > 0) revert();\r\n    hardCap = _hardCap * 1 ether;\r\n    softCap = _softCap * 1 ether;\r\n    price   = _price;\r\n    startTime = now;\r\n    endTime   = startTime + _duration * 1 hours;\r\n    duration  = _duration;\r\n    CrowdsaleStarted(now, softCap, hardCap, price );\r\n  }\r\n\r\n  /**\r\n   * @dev Function that ends sales\r\n   * Made to insure finishing of sales - starts refunding\r\n   */ \r\n  function finish() onlyOwner onlyAfter(endTime) {\r\n    crowdsaleFinished = true;\r\n    CrowdsaleFinished( now );\r\n  }\r\n\r\n  /**\r\n   * @dev Function to extend period of presale\r\n   * @param _duration - length of prolongation period\r\n   * limited by 1/2 of year\r\n   */\r\n  function extend( uint256 _duration ) onlyOwner {\r\n    endTime  = endTime + _duration * 1 hours;\r\n    duration = duration + _duration;\r\n    if ((startTime + 4500 hours) < endTime) revert();\r\n    CrowdsaleExtended( endTime );\r\n  }\r\n\r\n  /**\r\n   * fallback function - to recieve ethers and send tokens\r\n   */\r\n  function () payable stopInEmergency {\r\n    if ( msg.value < uint256( 1 ether ).div( price ) ) revert();\r\n    doPurchase(msg.sender, msg.value);\r\n  }\r\n\r\n  /**\r\n   * @dev Function to get your ether back if presale failed \r\n   */\r\n  function refund() external onlyAfter(endTime) stopInEmergency {  //public???\r\n    if (!crowdsaleFinished) revert();\r\n    if (softCapReached) revert();\r\n    if (refunded[msg.sender]) revert();\r\n\r\n    uint256 balance = token.balanceOf(msg.sender);\r\n    if (balance == 0) revert();\r\n\r\n    uint256 to_refund = balance.mul(1 ether).div(price);\r\n    if (to_refund > this.balance) {\r\n      to_refund = this.balance;  // if refunding is more than all, that contract hold - return all holded ether\r\n    }\r\n\r\n    msg.sender.transfer( to_refund ); // transfer throws on failure\r\n    refunded[msg.sender] = true;\r\n    weiRefunded = weiRefunded.add( to_refund );\r\n    Refunded( msg.sender, to_refund );\r\n  }\r\n\r\n  /**\r\n   * @dev Function to send profits and unsold tokens to beneficiary\r\n   */\r\n  function withdraw() onlyOwner {\r\n    if (!softCapReached) revert();\r\n    beneficiary.transfer( collected );\r\n    token.transfer(beneficiary, token.balanceOf(this));\r\n    crowdsaleFinished = true;\r\n  }\r\n\r\n  /**\r\n   * @dev Get ether and transfer tokens\r\n   * @param _buyer  - address of ethers sender\r\n   * @param _amount - ethers sended\r\n   */\r\n  function doPurchase(address _buyer, uint256 _amount) private onlyAfter(startTime) onlyBefore(endTime) stopInEmergency {\r\n    \r\n    if (crowdsaleFinished) revert();\r\n\r\n    if (collected.add(_amount) > hardCap) revert();\r\n\r\n    if ((!softCapReached) && (collected < softCap) && (collected.add(_amount) >= softCap)) {\r\n      softCapReached = true;\r\n      SoftCapReached(softCap);\r\n    }\r\n\r\n    uint256 tokens = _amount.mul( price ).div( 1 ether ); //div(1 ether) - because _amount measured in weis\r\n    if (tokens == 0) revert();\r\n\r\n    if (token.balanceOf(_buyer) == 0) investorCount++;\r\n    \r\n    collected = collected.add(_amount);\r\n\r\n    token.transfer(_buyer, tokens);\r\n\r\n    weiRaised = weiRaised.add(_amount);\r\n    tokensSold = tokensSold.add(tokens);\r\n\r\n    NewContribution(_buyer, tokens, _amount);\r\n\r\n    if (collected == hardCap) {\r\n      GoalReached(hardCap);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Making contract burnable\r\n   * Added for testing reasons\r\n   * onlyInEmergency - fools protection\r\n   */\r\n  function burn() onlyOwner onlyInEmergency { selfdestruct(owner); }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"duration\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"softCapReached\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRefunded\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"halt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_hardCap\",\"type\":\"uint256\"},{\"name\":\"_softCap\",\"type\":\"uint256\"},{\"name\":\"_duration\",\"type\":\"uint256\"},{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"start\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"collected\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"softCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"extend\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"halted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unhalt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finish\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"investorCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hardCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_time\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_softCap\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_hardCap\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"CrowdsaleStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"CrowdsaleFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_endTime\",\"type\":\"uint256\"}],\"name\":\"CrowdsaleExtended\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_amountRaised\",\"type\":\"uint256\"}],\"name\":\"GoalReached\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_softCap\",\"type\":\"uint256\"}],\"name\":\"SoftCapReached\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_holder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_etherAmount\",\"type\":\"uint256\"}],\"name\":\"NewContribution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_holder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Refunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"Halted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"Unhalted\",\"type\":\"event\"}]","ContractName":"EtalonTokenPresale","CompilerVersion":"v0.4.16+commit.d7661dd9","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000e4E56E144ba462052C30A096BfE4dcF3EaE40Ce3000000000000000000000000259e8363186aB3B9e826AD5BE3bf1ce69e192672","Library":"","SwarmSource":"bzzr://4d312d7ee539e99253aab37fd870f96e12678525bb91b4c1c4e5466d161dbcbc"}]}