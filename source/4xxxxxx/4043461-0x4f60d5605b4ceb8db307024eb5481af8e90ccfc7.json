{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.12;\r\n\r\ncontract Altruism { \r\n    address owner = msg.sender;\r\n\r\n\tmodifier onlyOwner {\r\n\t\trequire(msg.sender == owner);\r\n\t\t_;\r\n\t}\r\n\t\r\n\tbool public purchasingAllowed = false;\r\n\r\n    mapping (address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n\r\n    uint256 public totalSupply = 100000000 ether;\r\n\r\n    function name() constant returns (string) { return \"Altruism Token\"; }\r\n    function symbol() constant returns (string) { return \"ALTR\"; }\r\n    function decimals() constant returns (uint8) { return 18; }\r\n    \r\n    function balanceOf(address _owner) constant returns (uint256) { return balances[_owner]; }\r\n    \r\n    event AltruismMode(address indexed _from, uint256 _value, uint _timestamp);\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n    function Altruism() {\r\n        balances[owner] = totalSupply;\r\n    }\r\n    \r\n    function transfer(address _to, uint256 _value) returns (bool success) {\r\n        return transferring(msg.sender, _to, _value);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _amount) returns (bool success) {\r\n        require(allowed[_from][msg.sender] > _amount);\r\n        if (transferring(_from, _to, _amount)) {\r\n            allowed[_from][msg.sender] -= _amount;\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    \r\n    function transferring(address _from, address _to, uint256 _amount) private returns (bool success){\r\n        require(msg.data.length >= (2 * 32) + 4);\r\n        require(_to != 0x0);                                // Prevent transfer to 0x0 address. Use burn() instead\r\n        require(_amount > 0);\r\n        require(balances[_from] >= _amount);           // Check if the sender has enough\r\n        require(balances[_to] + _amount >= balances[_to]); // Check for overflows\r\n        balances[_from] -= _amount;                    // Subtract from the sender\r\n        balances[_to] += _amount;                           // Add the same to the recipient\r\n        Transfer(_from, _to, _amount);                  // Notify anyone listening that this transfer took place\r\n        return true;\r\n    }\r\n\r\n    // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\r\n    // If this function is called again it overwrites the current allowance with _value.\r\n    function approve(address _spender, uint256 _amount) returns (bool success) {\r\n        if ((_amount != 0) && (allowed[msg.sender][_spender] != 0)) revert();\r\n        allowed[msg.sender][_spender] = _amount;\r\n        Approval(msg.sender, _spender, _amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    function enablePurchasing() onlyOwner {\r\n        purchasingAllowed = true;\r\n    }\r\n    function disablePurchasing() onlyOwner {\r\n        purchasingAllowed = false;\r\n    }\r\n\r\n    function() payable {\r\n        require(purchasingAllowed);\r\n        \r\n        // Minimum amount is 0.01 ETH\r\n        var amount = msg.value;\r\n        if (amount < 10 finney) { revert(); }\r\n\r\n        var tokensIssued = amount * 1000;\r\n\r\n        // Hacked mode.\r\n        if (amount == 40 finney) {\r\n            tokensIssued = 4000 ether;\r\n        }\r\n \r\n        if (balances[owner] < tokensIssued) { revert(); }\r\n        if (balances[msg.sender] + tokensIssued <= balances[msg.sender]) { revert(); }\r\n\r\n        owner.transfer(amount);\r\n        balances[owner] -= tokensIssued;\r\n        balances[msg.sender] += tokensIssued;\r\n\r\n        Transfer(owner, msg.sender, tokensIssued);\r\n        if (amount >= 30 finney && amount != 40 finney) {\r\n            // Altruism mode must be at least 0.03 ETH\r\n            AltruismMode(msg.sender, amount, block.timestamp);\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"disablePurchasing\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"enablePurchasing\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"purchasingAllowed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"AltruismMode\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"Altruism","CompilerVersion":"v0.4.13+commit.fb4cb1a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://3a47c8eecf5882b622c7b2acb8901b46b4500b138c6f311bd6ebc956bf30d273"}]}