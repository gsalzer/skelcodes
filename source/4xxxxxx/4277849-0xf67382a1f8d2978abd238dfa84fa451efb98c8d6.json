{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13;\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    function Ownable() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) onlyOwner {\r\n        if (newOwner != address(0)) {\r\n            owner = newOwner;\r\n        }\r\n    }\r\n\r\n}\r\n\r\ncontract ERC20Basic {\r\n    uint256 public totalSupply;\r\n    function balanceOf(address who) constant returns (uint256);\r\n    function transfer(address to, uint256 value) returns (bool);\r\n\r\n    // KYBER-NOTE! code changed to comply with ERC20 standard\r\n    event Transfer(address indexed _from, address indexed _to, uint _value);\r\n    //event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract BasicToken is ERC20Basic {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) balances;\r\n\r\n    /**\r\n    * @dev transfer token for a specified address\r\n    * @param _to The address to transfer to.\r\n    * @param _value The amount to be transferred.\r\n    */\r\n    function transfer(address _to, uint256 _value) returns (bool) {\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the balance of the specified address.\r\n    * @param _owner The address to query the the balance of. \r\n    * @return An uint256 representing the amount owned by the passed address.\r\n    */\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n    function allowance(address owner, address spender) constant returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value) returns (bool);\r\n    function approve(address spender, uint256 value) returns (bool);\r\n\r\n    // KYBER-NOTE! code changed to comply with ERC20 standard\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n    //event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another\r\n     * @param _from address The address which you want to send tokens from\r\n     * @param _to address The address which you want to transfer to\r\n     * @param _value uint256 the amout of tokens to be transfered\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\r\n        var _allowance = allowed[_from][msg.sender];\r\n\r\n        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n        // require (_value <= _allowance);\r\n\r\n        // KYBER-NOTE! code changed to comply with ERC20 standard\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        //balances[_from] = balances[_from].sub(_value); // this was removed\r\n        allowed[_from][msg.sender] = _allowance.sub(_value);\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _value The amount of tokens to be spent.\r\n     */\r\n    function approve(address _spender, uint256 _value) returns (bool) {\r\n\r\n        // To change the approve amount you first have to reduce the addresses`\r\n        //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n        //  already 0 to mitigate the race condition described here:\r\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n        require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n     * @param _owner address The address which owns the funds.\r\n     * @param _spender address The address which will spend the funds.\r\n     * @return A uint256 specifing the amount of tokens still avaible for the spender.\r\n     */\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n}\r\n\r\ncontract REKTTokenSale {\r\n    using SafeMath for uint;\r\n\r\n    address             public admin;\r\n    address             public REKTMultiSigWallet;\r\n    REKT                public token;\r\n    bool                public haltSale;\r\n\r\n    function REKTTokenSale( address _admin,\r\n    address _REKTMultiSigWallet,\r\n    uint _totalTokenSupply)\r\n    {\r\n        admin = _admin;\r\n        REKTMultiSigWallet = _REKTMultiSigWallet;\r\n\r\n        token = new REKT( _totalTokenSupply, _admin );\r\n    }\r\n\r\n    function setHaltSale( bool halt ) {\r\n        require( msg.sender == admin );\r\n        haltSale = halt;\r\n    }\r\n\r\n    function() payable {\r\n        buy( msg.sender );\r\n    }\r\n\r\n    event Buy( address _buyer, uint _tokens, uint _payedWei );\r\n    function buy( address recipient ) payable returns(uint){\r\n        require( ! haltSale );\r\n\r\n        // send payment to wallet\r\n        sendETHToMultiSig( msg.value );\r\n        uint receivedTokens = msg.value.mul( 1000 );\r\n\r\n        assert( token.transfer( recipient, receivedTokens ) );\r\n\r\n\r\n        Buy( recipient, receivedTokens, msg.value );\r\n\r\n        return msg.value;\r\n    }\r\n\r\n    function sendETHToMultiSig( uint value ) internal {\r\n        REKTMultiSigWallet.transfer( value );\r\n    }\r\n\r\n    // ETH balance is always expected to be 0.\r\n    // but in case something went wrong, we use this function to extract the eth.\r\n    function emergencyDrain(ERC20 anyToken) returns(bool){\r\n        require( msg.sender == admin );\r\n\r\n        if( this.balance > 0 ) {\r\n            sendETHToMultiSig( this.balance );\r\n        }\r\n\r\n        if( anyToken != address(0x0) ) {\r\n            assert( anyToken.transfer(REKTMultiSigWallet, anyToken.balanceOf(this)) );\r\n        }\r\n\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract REKT is StandardToken, Ownable {\r\n    string  public  constant name = \"REKT\";\r\n    string  public  constant symbol = \"REKT\";\r\n    uint    public  constant decimals = 18;\r\n\r\n    address public  tokenSaleContract;\r\n\r\n    modifier validDestination( address to ) {\r\n        require(to != address(0x0));\r\n        require(to != address(this) );\r\n        _;\r\n    }\r\n\r\n    function REKT( uint tokenTotalAmount, address admin ) {\r\n        // Mint all tokens. Then disable minting forever.\r\n        balances[msg.sender] = tokenTotalAmount.div(2);\r\n        balances[admin] = tokenTotalAmount.div(2);\r\n        totalSupply = tokenTotalAmount;\r\n        Transfer(address(0x0), msg.sender, tokenTotalAmount);\r\n\r\n        tokenSaleContract = msg.sender;\r\n        transferOwnership(admin); // admin could drain tokens that were sent here by mistake\r\n    }\r\n\r\n    function transfer(address _to, uint _value)\r\n    validDestination(_to)\r\n    returns (bool) {\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint _value)\r\n    validDestination(_to)\r\n    returns (bool) {\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n    event Burn(address indexed _burner, uint _value);\r\n\r\n    function burn(uint _value)\r\n    returns (bool){\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        totalSupply = totalSupply.sub(_value);\r\n        Burn(msg.sender, _value);\r\n        Transfer(msg.sender, address(0x0), _value);\r\n        return true;\r\n    }\r\n\r\n    // save some gas by making only one contract call\r\n    function burnFrom(address _from, uint256 _value)\r\n    returns (bool) {\r\n        assert( transferFrom( _from, msg.sender, _value ) );\r\n        return burn(_value);\r\n    }\r\n\r\n    function emergencyERC20Drain( ERC20 token, uint amount ) onlyOwner {\r\n        token.transfer( owner, amount );\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"haltSale\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"halt\",\"type\":\"bool\"}],\"name\":\"setHaltSale\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"anyToken\",\"type\":\"address\"}],\"name\":\"emergencyDrain\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"buy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"REKTMultiSigWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_admin\",\"type\":\"address\"},{\"name\":\"_REKTMultiSigWallet\",\"type\":\"address\"},{\"name\":\"_totalTokenSupply\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokens\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_payedWei\",\"type\":\"uint256\"}],\"name\":\"Buy\",\"type\":\"event\"}]","ContractName":"REKTTokenSale","CompilerVersion":"v0.4.13+commit.fb4cb1a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000006ca0ac547f23073b2d9461518407d1c97c02ea020000000000000000000000002e05d891201e008b3f57145cef017058673d520800000000000000000000000000000000000000000000d3c21bcecceda1000000","Library":"","SwarmSource":"bzzr://465fbd40cd6ce6287e41eca424f8d7818b6bf9db39b8d2ad3e4ddfad0c603f46"}]}