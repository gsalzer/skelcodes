{"status":"1","message":"OK","result":[{"SourceCode":"contract Ownable {\r\n  address public owner;\r\n\r\n\r\n  \r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  \r\n  modifier onlyOwner() {\r\n    if (msg.sender != owner) {\r\n      throw;\r\n    }\r\n    _;\r\n  }\r\n\r\n\r\n \r\n  function transferOwnership(address newOwner) onlyOwner {\r\n    if (newOwner != address(0)) {\r\n      owner = newOwner;\r\n    }\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\ncontract ERC20Basic {\r\n  uint public totalSupply;\r\n  function balanceOf(address who) constant returns (uint);\r\n  function transfer(address to, uint value);\r\n  event Transfer(address indexed from, address indexed to, uint value);\r\n}\r\n\r\n\r\n\r\n\r\n\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) constant returns (uint);\r\n  function transferFrom(address from, address to, uint value);\r\n  function approve(address spender, uint value);\r\n  event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\n\r\n\r\n\r\n\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint;\r\n\r\n  mapping(address => uint) balances;\r\n\r\n \r\n  modifier onlyPayloadSize(uint size) {\r\n     if(msg.data.length < size + 4) {\r\n       throw;\r\n     }\r\n     _;\r\n  }\r\n\r\n \r\n  function transfer(address _to, uint _value) onlyPayloadSize(2 * 32) {\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n  }\r\n\r\n \r\n  function balanceOf(address _owner) constant returns (uint balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n\r\ncontract StandardToken is BasicToken, ERC20 {\r\n\r\n  mapping (address => mapping (address => uint)) allowed;\r\n\r\n\r\n  function transferFrom(address _from, address _to, uint _value) onlyPayloadSize(3 * 32) {\r\n    var _allowance = allowed[_from][msg.sender];\r\n\r\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n    // if (_value > _allowance) throw;\r\n\r\n    balances[_to] = balances[_to].add(_value);\r\n    balances[_from] = balances[_from].sub(_value);\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    Transfer(_from, _to, _value);\r\n  }\r\n\r\n\r\n  function approve(address _spender, uint _value) {\r\n\r\n    // To change the approve amount you first have to reduce the addresses`\r\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n    //  already 0 to mitigate the race condition described here:\r\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    if ((_value != 0) && (allowed[msg.sender][_spender] != 0)) throw;\r\n\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n  }\r\n\r\n \r\n  function allowance(address _owner, address _spender) constant returns (uint remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n}\r\n\r\ncontract Authorizable {\r\n\r\n  address[] authorizers;\r\n  mapping(address => uint) authorizerIndex;\r\n\r\n \r\n  modifier onlyAuthorized {\r\n    require(isAuthorized(msg.sender));\r\n    _;\r\n  }\r\n\r\n \r\n  function Authorizable() {\r\n    authorizers.length = 2;\r\n    authorizers[1] = msg.sender;\r\n    authorizerIndex[msg.sender] = 1;\r\n  }\r\n\r\n \r\n  function getAuthorizer(uint authorizerIndex) external constant returns(address) {\r\n    return address(authorizers[authorizerIndex + 1]);\r\n  }\r\n\r\n  \r\n  function isAuthorized(address _addr) constant returns(bool) {\r\n    return authorizerIndex[_addr] > 0;\r\n  }\r\n\r\n \r\n  function addAuthorized(address _addr) external onlyAuthorized {\r\n    authorizerIndex[_addr] = authorizers.length;\r\n    authorizers.length++;\r\n    authorizers[authorizers.length - 1] = _addr;\r\n  }\r\n\r\n}\r\n\r\n\r\ncontract ExchangeRate is Ownable {\r\n\r\n  event RateUpdated(uint timestamp, bytes32 symbol, uint rate);\r\n\r\n  mapping(bytes32 => uint) public rates;\r\n\r\n \r\n  function updateRate(string _symbol, uint _rate) public onlyOwner {\r\n    rates[sha3(_symbol)] = _rate;\r\n    RateUpdated(now, sha3(_symbol), _rate);\r\n  }\r\n\r\n \r\n  function updateRates(uint[] data) public onlyOwner {\r\n    if (data.length % 2 > 0)\r\n      throw;\r\n    uint i = 0;\r\n    while (i < data.length / 2) {\r\n      bytes32 symbol = bytes32(data[i * 2]);\r\n      uint rate = data[i * 2 + 1];\r\n      rates[symbol] = rate;\r\n      RateUpdated(now, symbol, rate);\r\n      i++;\r\n    }\r\n  }\r\n\r\n  \r\n  function getRate(string _symbol) public constant returns(uint) {\r\n    return rates[sha3(_symbol)];\r\n  }\r\n\r\n}\r\n\r\n\r\nlibrary SafeMath {\r\n  function mul(uint a, uint b) internal returns (uint) {\r\n    uint c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint a, uint b) internal returns (uint) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint a, uint b) internal returns (uint) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint a, uint b) internal returns (uint) {\r\n    uint c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n\r\n  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n    return a < b ? a : b;\r\n  }\r\n\r\n  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    return a < b ? a : b;\r\n  }\r\n\r\n  function assert(bool assertion) internal {\r\n    if (!assertion) {\r\n      throw;\r\n    }\r\n  }\r\n}\r\n\r\n\r\n\r\ncontract MintableToken is StandardToken, Ownable {\r\n  event Mint(address indexed to, uint value);\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n  uint public totalSupply = 0;\r\n\r\n\r\n  modifier canMint() {\r\n    if(mintingFinished) throw;\r\n    _;\r\n  }\r\n\r\n \r\n  function mint(address _to, uint _amount) onlyOwner canMint returns (bool) {\r\n    totalSupply = totalSupply.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    Mint(_to, _amount);\r\n    return true;\r\n  }\r\n\r\n \r\n  function finishMinting() onlyOwner returns (bool) {\r\n    mintingFinished = true;\r\n    MintFinished();\r\n    return true;\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\ninterface token {\r\n    function transfer(address receiver, uint amount);\r\n}\r\n\r\n\r\n\r\ncontract PrompToken is MintableToken {\r\n\r\n  string public name = \"PrompToken\";\r\n  string public symbol = \"PROMPT\";\r\n  uint public decimals = 2;\r\n\r\n  bool public tradingStarted = false;\r\n\r\n \r\n  modifier hasStartedTrading() {\r\n    require(tradingStarted);\r\n    _;\r\n  }\r\n\r\n  \r\n  function startTrading() onlyOwner {\r\n    tradingStarted = true;\r\n  }\r\n\r\n  \r\n  function transfer(address _to, uint _value) hasStartedTrading {\r\n    super.transfer(_to, _value);\r\n  }\r\n\r\n \r\n  function transferFrom(address _from, address _to, uint _value) hasStartedTrading {\r\n    super.transferFrom(_from, _to, _value);\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\ncontract MainSale is Ownable, Authorizable {\r\n  using SafeMath for uint;\r\n  event TokenSold(address recipient, uint ether_amount, uint pay_amount, uint exchangerate);\r\n  event AuthorizedCreate(address recipient, uint pay_amount);\r\n  event MainSaleClosed();\r\n\r\n  PrompToken public token = new PrompToken();\r\n\r\n  address public multisigVault;\r\n\r\n  uint hardcap = 314159 ether;\r\n  ExchangeRate public exchangeRate;\r\n\r\n  uint public altDeposits = 0;\r\n  uint public start = 1000000000; //new Date(\"Jan 01 2018 12:00:00 GMT\").getTime() / 1000\r\n\r\n \r\n  modifier saleIsOn() {\r\n    require(now > start && now < start + 29 days);\r\n    _;\r\n  }\r\n\r\n  \r\n  modifier isUnderHardCap() {\r\n    require(multisigVault.balance + altDeposits <= hardcap);\r\n    _;\r\n  }\r\n\r\n \r\n  function createTokens(address recipient) public isUnderHardCap saleIsOn payable {\r\n    uint rate = exchangeRate.getRate(\"ETH\");\r\n    uint tokens = rate.mul(msg.value).div(1 ether);\r\n    token.mint(recipient, tokens);\r\n    require(multisigVault.send(msg.value));\r\n    TokenSold(recipient, msg.value, tokens, rate);\r\n  }\r\n\r\n\r\n  function setAltDeposit(uint totalAltDeposits) public onlyOwner {\r\n    altDeposits = totalAltDeposits;\r\n  }\r\n\r\n  \r\n  function authorizedCreateTokens(address recipient, uint tokens) public onlyAuthorized {\r\n    token.mint(recipient, tokens);\r\n    AuthorizedCreate(recipient, tokens);\r\n  }\r\n\r\n \r\n  function setHardCap(uint _hardcap) public onlyOwner {\r\n    hardcap = _hardcap;\r\n  }\r\n\r\n \r\n  function setStart(uint _start) public onlyOwner {\r\n    start = _start;\r\n  }\r\n\r\n  \r\n  function setMultisigVault(address _multisigVault) public onlyOwner {\r\n    if (_multisigVault != address(0)) {\r\n      multisigVault = _multisigVault;\r\n    }\r\n  }\r\n\r\n  \r\n  function setExchangeRate(address _exchangeRate) public onlyOwner {\r\n    exchangeRate = ExchangeRate(_exchangeRate);\r\n  }\r\n\r\n \r\n  function finishMinting() public onlyOwner {\r\n    uint issuedTokenSupply = token.totalSupply();\r\n    uint restrictedTokens = issuedTokenSupply.mul(49).div(51);\r\n    token.mint(multisigVault, restrictedTokens);\r\n    token.finishMinting();\r\n    token.transferOwnership(owner);\r\n    MainSaleClosed();\r\n  }\r\n\r\n  \r\n  function retrieveTokens(address _token) public onlyOwner {\r\n    ERC20 token = ERC20(_token);\r\n    token.transfer(multisigVault, token.balanceOf(this));\r\n  }\r\n  \r\n  function() external payable {\r\n    createTokens(msg.sender);\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startTrading\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tradingStarted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"PrompToken","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://37d13438b33a0ba0aaa2bba47db3c2c2e620d42e11d5cf74d7fb92d37415f504"}]}