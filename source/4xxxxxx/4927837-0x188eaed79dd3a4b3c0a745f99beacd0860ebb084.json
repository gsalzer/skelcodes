{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\ninterface ERC20 {\r\n    function balanceOf(address _owner) public constant returns (uint256 balance);\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n}\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    require(c / a == b);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Distribution {\r\n  using SafeMath for uint256;\r\n\r\n  enum State {\r\n    AwaitingTokens,\r\n    DistributingNormally,\r\n    DistributingProRata,\r\n    Done\r\n  }\r\n \r\n  address admin;\r\n  ERC20 tokenContract;\r\n  State state;\r\n  uint256 actualTotalTokens;\r\n  uint256 tokensTransferred;\r\n\r\n  bytes32[] contributionHashes;\r\n  uint256 expectedTotalTokens;\r\n\r\n  function Distribution(address _admin, ERC20 _tokenContract,\r\n                        bytes32[] _contributionHashes, uint256 _expectedTotalTokens) public {\r\n    expectedTotalTokens = _expectedTotalTokens;\r\n    contributionHashes = _contributionHashes;\r\n    tokenContract = _tokenContract;\r\n    admin = _admin;\r\n\r\n    state = State.AwaitingTokens;\r\n  }\r\n\r\n  function handleTokensReceived() public {\r\n    require(state == State.AwaitingTokens);\r\n    uint256 totalTokens = tokenContract.balanceOf(this);\r\n    require(totalTokens > 0);\r\n\r\n    tokensTransferred = 0;\r\n    if (totalTokens == expectedTotalTokens) {\r\n      state = State.DistributingNormally;\r\n    } else {\r\n      actualTotalTokens = totalTokens;\r\n      state = State.DistributingProRata;\r\n    }\r\n  }\r\n\r\n  function _numTokensForContributor(uint256 contributorExpectedTokens,\r\n                                    uint256 _tokensTransferred, State _state)\r\n      internal view returns (uint256) {\r\n    if (_state == State.DistributingNormally) {\r\n      return contributorExpectedTokens;\r\n    } else if (_state == State.DistributingProRata) {\r\n      uint256 tokens = actualTotalTokens.mul(contributorExpectedTokens) / expectedTotalTokens;\r\n\r\n      // Handle roundoff on last contributor.\r\n      uint256 tokensRemaining = actualTotalTokens - _tokensTransferred;\r\n      if (tokens < tokensRemaining) {\r\n        return tokens;\r\n      } else {\r\n        return tokensRemaining;\r\n      }\r\n    } else {\r\n      revert();\r\n    }\r\n  }\r\n\r\n  function doDistribution(uint256 contributorIndex, address contributor,\r\n                          uint256 contributorExpectedTokens)\r\n      public {\r\n    // Make sure the arguments match the compressed storage.\r\n    require(contributionHashes[contributorIndex] == keccak256(contributor, contributorExpectedTokens));\r\n\r\n    uint256 numTokens = _numTokensForContributor(contributorExpectedTokens,\r\n                                                 tokensTransferred, state);\r\n    contributionHashes[contributorIndex] = 0x00000000000000000000000000000000;\r\n    tokensTransferred += numTokens;\r\n    if (tokensTransferred == actualTotalTokens) {\r\n      state = State.Done;\r\n    }\r\n\r\n    require(tokenContract.transfer(contributor, numTokens));\r\n  }\r\n\r\n  function doDistributionRange(uint256 start, address[] contributors,\r\n                               uint256[] contributorExpectedTokens) public {\r\n    require(contributors.length == contributorExpectedTokens.length);\r\n\r\n    uint256 tokensTransferredSoFar = tokensTransferred;\r\n    uint256 end = start + contributors.length;\r\n    State _state = state;\r\n    for (uint256 i = start; i < end; ++i) {\r\n      address contributor = contributors[i];\r\n      uint256 expectedTokens = contributorExpectedTokens[i];\r\n      require(contributionHashes[i] == keccak256(contributor, expectedTokens));\r\n      contributionHashes[i] = 0x00000000000000000000000000000000;\r\n\r\n      uint256 numTokens = _numTokensForContributor(expectedTokens, tokensTransferredSoFar, _state);\r\n      tokensTransferredSoFar += numTokens;\r\n      require(tokenContract.transfer(contributor, numTokens));\r\n    }\r\n\r\n    tokensTransferred = tokensTransferredSoFar;\r\n    if (tokensTransferred == actualTotalTokens) {\r\n      state = State.Done;\r\n    }\r\n  }\r\n\r\n  function numTokensForContributor(uint256 contributorExpectedTokens)\r\n      public view returns (uint256) {\r\n    return _numTokensForContributor(contributorExpectedTokens, tokensTransferred, state);\r\n  }\r\n\r\n  function temporaryEscapeHatch(address to, uint256 value, bytes data) public {\r\n    require(msg.sender == admin);\r\n    require(to.call.value(value)(data));\r\n  }\r\n\r\n  function temporaryKill(address to) public {\r\n    require(msg.sender == admin);\r\n    require(tokenContract.balanceOf(this) == 0);\r\n    selfdestruct(to);\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"start\",\"type\":\"uint256\"},{\"name\":\"contributors\",\"type\":\"address[]\"},{\"name\":\"contributorExpectedTokens\",\"type\":\"uint256[]\"}],\"name\":\"doDistributionRange\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"contributorExpectedTokens\",\"type\":\"uint256\"}],\"name\":\"numTokensForContributor\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"temporaryEscapeHatch\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"}],\"name\":\"temporaryKill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"contributorIndex\",\"type\":\"uint256\"},{\"name\":\"contributor\",\"type\":\"address\"},{\"name\":\"contributorExpectedTokens\",\"type\":\"uint256\"}],\"name\":\"doDistribution\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"handleTokensReceived\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_admin\",\"type\":\"address\"},{\"name\":\"_tokenContract\",\"type\":\"address\"},{\"name\":\"_contributionHashes\",\"type\":\"bytes32[]\"},{\"name\":\"_expectedTotalTokens\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"Distribution","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000d45c5d3078df6fbb8f95bf1957c165ceb91138dc000000000000000000000000687174f8c49ceb7729d925c3a961507ea4ac7b2800000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000001647eb759b68e170568b5f000000000000000000000000000000000000000000000000000000000000002eca8678684df3badd789dd63fbfba456af39b5ebb7db27b713708f78ec19188bcc59a02f17bffc323151f710cb2bd0993f1422bd0ce9f1b4274cf0627c219264f7808c4aa2fd3e23686ab19e356124bdace743e85a505b00419c83cd6d979e5ef6b10d7925620649fffd40d422e7e091c116e7718ebdac211eb4c38b7693f3c7628e9882e12ced46af899d6eceb75e570647508a4abd17d426987d72fcf3f07a291c8e064e8f213c08f0cc55788a6a3c4de46c5a08c0310c0dd037f07799281c0c6a806348df38c08ec403f1486f8d6a42831a0f08cd3422b8d92e6fe701798b1f7a264ab7841b7022d4155b2a4cfd20ac36cf714fd801238f43c2f7531eefe9535f4c30ede6720610b5fe384a6d1df666db04a9b0abfd8d356e60c070c02a179c3c9da6d6de4da2dc3a8ef7bf2c8fbe02aed54ee5f68ce6dadbdfe704be4468d253b181e589dd9d9fe12a5b48dfebbd89ca86dcf48ecc2b7178f7cd4e0d42089f9effcbd5b7c059592e1db9bbb5b2eab3d01f1d65732272c9a1bcccebd217cea34c0b5d20a2c7d4672f3d9ef85bae9e5f78712f22377f5e3c2014f2672aa187efb99348619e6cea91fea3a978bfcdbf394c08f56901c6ef97756cb8cbb9ffc2cb0a89b39eb50d58ca13804993d4a42f0cc05561c9ac0430a4950c2807e524e08b3a09571d5480b7b17529b20502010db0a374f28bccbd789a98ce634cb3dd527d1d746b0057e8261a64ff50ca607c78e9be4237ae49c0615673d5cad8cd9614a4a2e7260bfc21bfbe7fcc6fac40415ae40a0536365a03ce871e8e3d5f7ebeb2f93bb8b769f78f10b1236b477d5d6c5245170b628f7b545f9ef6f871b8537d0db5a20a3241657e56160739412549d42956587cf77755dee5b70a453f409520851657828f778de392eeea971ef97ef0c094c7be06f2e22f1e19ebbc3a044bdef99598a71f911ba6823c3bd3d80d6b098d0857669c479af42f32733259fda6fcf503fd2f26df40475efc4b045c08da86abaab2f98669e7cf7b1a2aab3f2e83f9a4ef06cfe930158bf792b857fb5ba858e4261af7919c7905798623abcf3fa0792ef2009b56e0f40781378408e04de2cfede0eb38ccbc96cc500112198baf64446a0449d6aeb3edc40338f71403c4820c293204fcd40945f769674424465a71ebb56a95b23db898ad00645f7b92fc1ad0dc0b835260fb2e282525b6f3e995ca6ee13a43355cb3785135c8a7969a244fa3611b648c766092a73372b7b5f2a354617f2e68e6de671e381bd734878bc726fe87c1869457fa1b216d6360ce1c62a85b786d734203968b441bbb50d94d4c5f95e373bb003f0b7e60c0e5482de5133f663f8bb40da8bfe3f060c89365e77caa21f74e4e0a4263cecf6a8fd3a7843a8ee9283e7eca512eb87eb4719080e73d095db7664d1f41bd356a9a4dff0af10a6523e191490e73dad3a217a335a4754e6ba98b7e7bf7a3e109ee2e65fe8e10be460bbc9f70c0747eda695fa5e3fa71efd742e391661f088d70ae035b3b4a40315e62a1079fa16e96795b6ed6cf7fb364914835ae6fdfc41ba4e2101bc064443747845e5fd15ce4c961ff5fdace46603c4a0a5ede7c3a83d5e880e0823dcb77637cbee1e8fd52ed691952d83aac7fd18b851c4e6806d5912838a0706053b2f2b261cc785b325ef83ee3855d2ae3cc75a2185d06469f9d34fa00e268de12fbc1c51c49decba47706e68d8a26962b4b60bfbe8135c1035ad1d7997f5a62267badb7f4aeb51bbf47089f56556a77d8654f89fb96d6a8a9b23c9832f708e1628414c68decf680d97c686cef21e95afcb1ff4a508174fd6272df2656b252229a513789c9666b0006431e6ca43ff4742f6686ce3f28debc35d1823b906e122aff94202dc1ec813e8be2fc09d84ae042e5d3ff87798d2b7f604b95f5aab19340f18c157ea06b324775e0ffff96c8cae22ad43c2927ceca795d6e93ebdbb29b68df0f213f368753cb2cc491a5bbcfaf541c2cd9bbd080768cf6c8d48eacc378efe1a6434fe6911e26f3fd55ed36f48bebc2d1cdaa2acd6554f71ea17eb3fa6d100a04e7080a4d63e","Library":"","SwarmSource":"bzzr://2dcae1a82377c9a4fba5b6a76697ecc9831bc8971f06447e98331a2b191f1f8d"}]}