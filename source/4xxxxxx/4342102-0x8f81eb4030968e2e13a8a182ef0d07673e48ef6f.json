{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.2;\r\n\r\n\r\n// Etheroll Functions\r\ncontract DSSafeAddSub {\r\n    function safeToAdd(uint a, uint b) internal returns (bool) {\r\n        return (a + b >= a);\r\n    }\r\n    function safeAdd(uint a, uint b) internal returns (uint) {\r\n        require(safeToAdd(a, b));\r\n        return a + b;\r\n    }\r\n\r\n    function safeToSubtract(uint a, uint b) internal returns (bool) {\r\n        return (b <= a);\r\n    }\r\n\r\n    function safeSub(uint a, uint b) internal returns (uint) {\r\n        require(safeToSubtract(a, b));\r\n        return a - b;\r\n    }\r\n}\r\n\r\ncontract MyDice is DSSafeAddSub {\r\n\r\n    /*\r\n     * checks player profit and number is within range\r\n    */\r\n    modifier betIsValid(uint _betSize, uint _playerNumber) {\r\n\t\t\r\n    require(((((_betSize * (10000-(safeSub(_playerNumber,1)))) / (safeSub(_playerNumber,1))+_betSize))*houseEdge/houseEdgeDivisor)-_betSize <= maxProfit);\r\n\r\n    require(_playerNumber < maxNumber);\r\n    require(_betSize >= minBet);\r\n    _;\r\n    }\r\n\r\n    /*\r\n     * checks game is currently active\r\n    */\r\n    modifier gameIsActive {\r\n      require(gamePaused == false);\r\n\t\t_;\r\n    }\r\n\r\n    /*\r\n     * checks payouts are currently active\r\n    */\r\n    modifier payoutsAreActive {\r\n\t\trequire(payoutsPaused == false);\r\n        _;\r\n    }\r\n\r\n \r\n    /*\r\n     * checks only owner address is calling\r\n    */\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n         _;\r\n    }\r\n\r\n    /*\r\n     * game vars\r\n    */\r\n\r\n    uint constant public maxBetDivisor = 1000000;\r\n    uint constant public houseEdgeDivisor = 1000;\r\n\tbool public gamePaused;\r\n    address public owner;\r\n    bool public payoutsPaused;\r\n    uint public contractBalance;\r\n    uint public houseEdge;\r\n    uint public maxProfit;\r\n    uint public maxProfitAsPercentOfHouse;\r\n    uint public minBet;\r\n    uint public totalBets;\r\n    uint public totalUserProfit;\r\n\r\n\r\n    uint private randomNumber;  //上一次的randomNumber会参与到下一次的随机数产生\r\n    uint public  nonce;         //计数器，也是随机数生成的种子\r\n    uint private maxNumber = 10000;\r\n    uint public  underNumber = 5000;\r\n\r\n    mapping (address => uint) playerPendingWithdrawals;\r\n\r\n    /*\r\n     * events\r\n    */\r\n    /* Status: 0=lose, 1=win, 2=win + failed send,*/\r\n\tevent LogResult(uint indexed BetID, address indexed PlayerAddress, uint indexed PlayerNumber, uint DiceResult, uint Value, int Status,uint BetValue,uint targetNumber);\r\n    /* log owner transfers */\r\n    event LogOwnerTransfer(address indexed SentToAddress, uint indexed AmountTransferred);\r\n\r\n    /*\r\n     * init\r\n    */\r\n    function MyDice() {\r\n\r\n        owner = msg.sender;\r\n\r\n        ownerSetHouseEdge(935);\r\n\r\n        ownerSetMaxProfitAsPercentOfHouse(20000);\r\n     \r\n        ownerSetMinBet(10000000000000000);\r\n    }\r\n\r\n    function GetRandomNumber() internal \r\n        returns(uint randonmNumber)\r\n    {\r\n        nonce++;\r\n        randomNumber = randomNumber % block.timestamp + uint256(block.blockhash(block.number - 1));\r\n        randomNumber = randomNumber + block.timestamp * block.difficulty * block.number + 1;\r\n        randomNumber = randomNumber % 80100011001110010011000010110111001101011011110017;\r\n\r\n        randomNumber = uint(sha3(randomNumber,nonce,10 + 10*1000000000000000000/msg.value));\r\n\r\n        return (maxNumber - randomNumber % maxNumber);\r\n    }\r\n\r\n    /*\r\n     * public function\r\n     * player submit bet\r\n     * only if game is active & bet is valid can query and set player vars\r\n    */\r\n    function playerRollDice() public\r\n        payable\r\n        gameIsActive\r\n        betIsValid(msg.value, underNumber)\r\n\t{\r\n        totalBets += 1;\r\n\r\n        uint randReuslt = GetRandomNumber();\r\n\r\n        /*\r\n        * pay winner\r\n        * update contract balance to calculate new max bet\r\n        * send reward\r\n        * if send of reward fails save value to playerPendingWithdrawals\r\n        */\r\n        if(randReuslt < underNumber){\r\n\r\n            uint playerProfit = ((((msg.value * (maxNumber-(safeSub(underNumber,1)))) / (safeSub(underNumber,1))+msg.value))*houseEdge/houseEdgeDivisor)-msg.value;\r\n\r\n            /* safely reduce contract balance by player profit */\r\n            contractBalance = safeSub(contractBalance, playerProfit);\r\n\r\n            /* safely calculate total payout as player profit plus original wager */\r\n            uint reward = safeAdd(playerProfit, msg.value);\r\n\r\n            totalUserProfit = totalUserProfit + playerProfit; // total profits\r\n\r\n            LogResult(totalBets, msg.sender, underNumber, randReuslt, reward, 1, msg.value,underNumber);\r\n\r\n            /* update maximum profit */\r\n            setMaxProfit();\r\n\r\n            /*\r\n            * send win - external call to an untrusted contract\r\n            * if send fails map reward value to playerPendingWithdrawals[address]\r\n            * for withdrawal later via playerWithdrawPendingTransactions\r\n            */\r\n            if(!msg.sender.send(reward)){\r\n                LogResult(totalBets, msg.sender, underNumber, randReuslt, reward, 2, msg.value,underNumber);\r\n\r\n                /* if send failed let player withdraw via playerWithdrawPendingTransactions */\r\n                playerPendingWithdrawals[msg.sender] = safeAdd(playerPendingWithdrawals[msg.sender], reward);\r\n            }\r\n\r\n            return;\r\n        }\r\n\r\n        /*\r\n        * no win\r\n        * send 1 wei to a losing bet\r\n        * update contract balance to calculate new max bet\r\n        */\r\n        if(randReuslt >= underNumber){\r\n\r\n            LogResult(totalBets, msg.sender, underNumber, randReuslt, msg.value, 0, msg.value,underNumber);\r\n\r\n            /*\r\n            *  safe adjust contractBalance\r\n            *  setMaxProfit\r\n            *  send 1 wei to losing bet\r\n            */\r\n            contractBalance = safeAdd(contractBalance, msg.value-1);\r\n\r\n            /* update maximum profit */\r\n            setMaxProfit();\r\n\r\n            /*\r\n            * send 1 wei - external call to an untrusted contract\r\n            */\r\n            if(!msg.sender.send(1)){\r\n                /* if send failed let player withdraw via playerWithdrawPendingTransactions */\r\n               playerPendingWithdrawals[msg.sender] = safeAdd(playerPendingWithdrawals[msg.sender], 1);\r\n            }\r\n\r\n            return;\r\n\r\n        }\r\n    }\r\n\r\n\r\n    /*\r\n    * public function\r\n    * in case of a failed refund or win send\r\n    */\r\n    function playerWithdrawPendingTransactions() public\r\n        payoutsAreActive\r\n        returns (bool)\r\n     {\r\n        uint withdrawAmount = playerPendingWithdrawals[msg.sender];\r\n        playerPendingWithdrawals[msg.sender] = 0;\r\n        /* external call to untrusted contract */\r\n        if (msg.sender.call.value(withdrawAmount)()) {\r\n            return true;\r\n        } else {\r\n            /* if send failed revert playerPendingWithdrawals[msg.sender] = 0; */\r\n            /* player can try to withdraw again later */\r\n            playerPendingWithdrawals[msg.sender] = withdrawAmount;\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /* check for pending withdrawals  */\r\n    function playerGetPendingTxByAddress(address addressToCheck) public constant returns (uint) {\r\n        return playerPendingWithdrawals[addressToCheck];\r\n    }\r\n\r\n    /*\r\n    * internal function\r\n    * sets max profit\r\n    */\r\n    function setMaxProfit() internal {\r\n        maxProfit = (contractBalance*maxProfitAsPercentOfHouse)/maxBetDivisor;\r\n    }\r\n\r\n    /*\r\n    * owner address only functions\r\n    */\r\n    function ()\r\n        payable\r\n    {\r\n        playerRollDice();\r\n    }\r\n\r\n    function setNonce(uint value) public\r\n        onlyOwner\r\n    {\r\n        nonce = value;\r\n    }\r\n\r\n    function ownerAddBankroll()\r\n    payable\r\n    onlyOwner\r\n    {\r\n        /* safely update contract balance */\r\n        contractBalance = safeAdd(contractBalance, msg.value);\r\n        /* update the maximum profit */\r\n        setMaxProfit();\r\n    }\r\n\r\n    function getcontractBalance() public \r\n    onlyOwner \r\n    returns(uint)\r\n    {\r\n        return contractBalance;\r\n    }\r\n\r\n    function getTotalBets() public\r\n    onlyOwner\r\n    returns(uint)\r\n    {\r\n        return totalBets;\r\n    }\r\n\r\n    /* only owner address can set houseEdge */\r\n    function ownerSetHouseEdge(uint newHouseEdge) public\r\n\t\tonlyOwner\r\n    {\r\n        houseEdge = newHouseEdge;\r\n    }\r\n\r\n    function getHouseEdge() public \r\n    onlyOwner \r\n    returns(uint)\r\n    {\r\n        return houseEdge;\r\n    }\r\n\r\n    /* only owner address can set maxProfitAsPercentOfHouse */\r\n    function ownerSetMaxProfitAsPercentOfHouse(uint newMaxProfitAsPercent) public\r\n\t\tonlyOwner\r\n    {\r\n        /* restrict to maximum profit of 5% of total house balance*/\r\n        require(newMaxProfitAsPercent <= 50000);\r\n        maxProfitAsPercentOfHouse = newMaxProfitAsPercent;\r\n        setMaxProfit();\r\n    }\r\n\r\n    function getMaxProfitAsPercentOfHouse() public \r\n    onlyOwner \r\n    returns(uint)\r\n    {\r\n        return maxProfitAsPercentOfHouse;\r\n    }\r\n\r\n    /* only owner address can set minBet */\r\n    function ownerSetMinBet(uint newMinimumBet) public\r\n\t\tonlyOwner\r\n    {\r\n        minBet = newMinimumBet;\r\n    }\r\n\r\n    function getMinBet() public \r\n    onlyOwner \r\n    returns(uint)\r\n    {\r\n        return minBet;\r\n    }\r\n\r\n    /* only owner address can transfer ether */\r\n    function ownerTransferEther(address sendTo, uint amount) public\r\n\t\tonlyOwner\r\n    {\r\n        /* safely update contract balance when sending out funds*/\r\n        contractBalance = safeSub(contractBalance, amount);\r\n        /* update max profit */\r\n        setMaxProfit();\r\n        require(sendTo.send(amount));\r\n        LogOwnerTransfer(sendTo, amount);\r\n    }\r\n\r\n    /* only owner address can set emergency pause #1 */\r\n    function ownerPauseGame(bool newStatus) public\r\n\t\tonlyOwner\r\n    {\r\n\t\tgamePaused = newStatus;\r\n    }\r\n\r\n    /* only owner address can set emergency pause #2 */\r\n    function ownerPausePayouts(bool newPayoutStatus) public\r\n\t\tonlyOwner\r\n    {\r\n\t\tpayoutsPaused = newPayoutStatus;\r\n    }\r\n\r\n\r\n    /* only owner address can set owner address */\r\n    function ownerChangeOwner(address newOwner) public\r\n\t\tonlyOwner\r\n\t{\r\n        owner = newOwner;\r\n    }\r\n\r\n    /* only owner address can suicide - emergency */\r\n    function ownerkill() public\r\n\t\tonlyOwner\r\n\t{\r\n\t\tsuicide(owner);\r\n\t}\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"getMaxProfitAsPercentOfHouse\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxProfitAsPercentOfHouse\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getMinBet\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newHouseEdge\",\"type\":\"uint256\"}],\"name\":\"ownerSetHouseEdge\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"payoutsPaused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"ownerAddBankroll\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxBetDivisor\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addressToCheck\",\"type\":\"address\"}],\"name\":\"playerGetPendingTxByAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newPayoutStatus\",\"type\":\"bool\"}],\"name\":\"ownerPausePayouts\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getHouseEdge\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"ownerChangeOwner\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"underNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newMaxProfitAsPercent\",\"type\":\"uint256\"}],\"name\":\"ownerSetMaxProfitAsPercentOfHouse\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newMinimumBet\",\"type\":\"uint256\"}],\"name\":\"ownerSetMinBet\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newStatus\",\"type\":\"bool\"}],\"name\":\"ownerPauseGame\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sendTo\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ownerTransferEther\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getcontractBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minBet\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getTotalBets\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"playerWithdrawPendingTransactions\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nonce\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxProfit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalUserProfit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalBets\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gamePaused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"ownerkill\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"houseEdge\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"playerRollDice\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"houseEdgeDivisor\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setNonce\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"BetID\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"PlayerAddress\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"PlayerNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"DiceResult\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"Value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"Status\",\"type\":\"int256\"},{\"indexed\":false,\"name\":\"BetValue\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"targetNumber\",\"type\":\"uint256\"}],\"name\":\"LogResult\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"SentToAddress\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"AmountTransferred\",\"type\":\"uint256\"}],\"name\":\"LogOwnerTransfer\",\"type\":\"event\"}]","ContractName":"MyDice","CompilerVersion":"v0.4.15+commit.bbb8e64f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://510ba2a771741a32702eaa0301de03b3cacbe05c75d06cdea0264627e0af16ed"}]}