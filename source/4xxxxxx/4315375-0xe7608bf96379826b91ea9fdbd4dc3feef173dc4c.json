{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.15;\r\n\r\ninterface STQToken {\r\n    function mint(address _to, uint256 _amount) external;\r\n}\r\n\r\n/**\r\n * @title Helps contracts guard agains rentrancy attacks.\r\n * @author Remco Bloemen <remco@2Ï€.com>\r\n * @notice If you mark a function `nonReentrant`, you should also\r\n * mark it `external`.\r\n */\r\ncontract ReentrancyGuard {\r\n\r\n  /**\r\n   * @dev We use a single lock for the whole contract.\r\n   */\r\n  bool private rentrancy_lock = false;\r\n\r\n  /**\r\n   * @dev Prevents a contract from calling itself, directly or indirectly.\r\n   * @notice If you mark a function `nonReentrant`, you should also\r\n   * mark it `external`. Calling one nonReentrant function from\r\n   * another is not supported. Instead, you can implement a\r\n   * `private` function doing the actual work, and a `external`\r\n   * wrapper marked as `nonReentrant`.\r\n   */\r\n  modifier nonReentrant() {\r\n    require(!rentrancy_lock);\r\n    rentrancy_lock = true;\r\n    _;\r\n    rentrancy_lock = false;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner {\r\n    if (newOwner != address(0)) {\r\n      owner = newOwner;\r\n    }\r\n  }\r\n\r\n}\r\n\r\n\r\n/// @title Storiqa pre-sale contract\r\ncontract STQPreSale is Ownable, ReentrancyGuard {\r\n    using SafeMath for uint256;\r\n\r\n    event FundTransfer(address backer, uint amount, bool isContribution);\r\n\r\n    function STQPreSale(address token, address funds) {\r\n        require(address(0) != address(token) && address(0) != address(funds));\r\n\r\n        m_token = STQToken(token);\r\n        m_funds = funds;\r\n    }\r\n\r\n\r\n    // PUBLIC interface: payments\r\n\r\n    // fallback function as a shortcut\r\n    function() payable {\r\n        require(0 == msg.data.length);\r\n        buy();  // only internal call here!\r\n    }\r\n\r\n    /// @notice ICO participation\r\n    /// @return number of STQ tokens bought (with all decimal symbols)\r\n    function buy()\r\n        public\r\n        payable\r\n        nonReentrant\r\n        returns (uint)\r\n    {\r\n        address investor = msg.sender;\r\n        uint256 payment = msg.value;\r\n        require(payment >= c_MinInvestment);\r\n        require(now < 1507766400);\r\n\r\n        // issue tokens\r\n        uint stq = payment.mul(c_STQperETH);\r\n        m_token.mint(investor, stq);\r\n\r\n        // record payment\r\n        m_funds.transfer(payment);\r\n        FundTransfer(investor, payment, true);\r\n\r\n        return stq;\r\n    }\r\n\r\n    /// @notice Tests ownership of the current caller.\r\n    /// @return true if it's an owner\r\n    // It's advisable to call it by new owner to make sure that the same erroneous address is not copy-pasted to\r\n    // addOwner/changeOwner and to isOwner.\r\n    function amIOwner() external constant onlyOwner returns (bool) {\r\n        return true;\r\n    }\r\n\r\n\r\n    // FIELDS\r\n\r\n    /// @notice starting exchange rate of STQ\r\n    uint public constant c_STQperETH = 150000;\r\n\r\n    /// @notice minimum investment\r\n    uint public constant c_MinInvestment = 10 finney;\r\n\r\n    /// @dev contract responsible for token accounting\r\n    STQToken public m_token;\r\n\r\n    /// @dev address responsible for investments accounting\r\n    address public m_funds;\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"amIOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"m_funds\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"c_STQperETH\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"m_token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"c_MinInvestment\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"funds\",\"type\":\"address\"}],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"backer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"isContribution\",\"type\":\"bool\"}],\"name\":\"FundTransfer\",\"type\":\"event\"}]","ContractName":"STQPreSale","CompilerVersion":"v0.4.15+commit.bbb8e64f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000002bd1f12269c1ff80042c8d354bba4c1ca52e20610000000000000000000000000eed5de3487aec55ba585212daedf35104c27baf","Library":"","SwarmSource":"bzzr://c68862974a74dc15435d49496f25623864d12dcebaece6606b9be8750a6c3edb"}]}