{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.15;\r\n\r\nlibrary SafeMath {\r\n\r\n  function mul(uint a, uint b) internal constant returns (uint) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint a, uint b) internal constant returns(uint) {\r\n    assert(b > 0);\r\n    uint c = a / b;\r\n    assert(a == b * c + a % b);\r\n    return c;\r\n  }\r\n\r\n  function sub(uint a, uint b) internal constant returns(uint) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint a, uint b) internal constant returns(uint) {\r\n    uint c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract ERC20 {\r\n    uint public totalSupply = 0;\r\n\r\n    mapping(address => uint256) balances;\r\n    mapping(address => mapping (address => uint256)) allowed;\r\n\r\n    function balanceOf(address _owner) constant returns (uint);\r\n    function transfer(address _to, uint _value) returns (bool);\r\n    function transferFrom(address _from, address _to, uint _value) returns (bool);\r\n    function approve(address _spender, uint _value) returns (bool);\r\n    function allowance(address _owner, address _spender) constant returns (uint);\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n\r\n} // Functions of ERC20 standard\r\n\r\n\r\n\r\ncontract DatariusICO {\r\n    using SafeMath for uint;\r\n\r\n    uint public constant Tokens_For_Sale = 146000000*1e18; // Tokens for Sale without bonuses(HardCap)\r\n    uint public constant Total_Amount = 200000000*1e18; // Fixed total supply\r\n    uint public Sold = 0;\r\n\r\n    uint CONST_DEL = 1000;\r\n\r\n    uint public Tokens_Per_Dollar = 2179;\r\n    uint public Rate_Eth = 446; // Rate USD per ETH\r\n    uint public Token_Price = Tokens_Per_Dollar * Rate_Eth / CONST_DEL; // DAT per ETH\r\n\r\n    event LogStartPreICO();\r\n    event LogStartICO();\r\n    event LogPause();\r\n    event LogFinishPreICO();\r\n    event LogFinishICO(address ReserveFund);\r\n    event LogBuyForInvestor(address investor, uint datValue, string txHash);\r\n\r\n    DAT public dat = new DAT(this);\r\n\r\n    address public Company;\r\n    address public BountyFund;\r\n    address public SupportFund;\r\n    address public ReserveFund;\r\n    address public TeamFund;\r\n\r\n    address public Manager; // Manager controls contract\r\n    address public Controller_Address1; // First address that is used to buy tokens for other cryptos\r\n    address public Controller_Address2; // Second address that is used to buy tokens for other cryptos\r\n    address public Controller_Address3; // Third address that is used to buy tokens for other cryptos\r\n    modifier managerOnly { require(msg.sender == Manager); _; }\r\n    modifier controllersOnly {\r\n      require((msg.sender == Controller_Address1) || (msg.sender == Controller_Address2) || (msg.sender == Controller_Address3));\r\n      _;\r\n    }\r\n\r\n    uint startTime = 0;\r\n    uint bountyAmount = 4000000*1e18;\r\n    uint supportAmount = 10000000*1e18;\r\n    uint reserveAmount = 24000000*1e18;\r\n    uint teamAmount = 16000000*1e18;\r\n\r\n    enum Status {\r\n                  Created,\r\n                  PreIcoStarted,\r\n                  PreIcoFinished,\r\n                  PreIcoPaused,\r\n                  IcoPaused,\r\n                  IcoStarted,\r\n                  IcoFinished\r\n                  }\r\n    Status status = Status.Created;\r\n\r\n    function DatariusICO(\r\n                          address _Company,\r\n                          address _BountyFund,\r\n                          address _SupportFund,\r\n                          address _ReserveFund,\r\n                          address _TeamFund,\r\n                          address _Manager,\r\n                          address _Controller_Address1,\r\n                          address _Controller_Address2,\r\n                          address _Controller_Address3\r\n                          ) public {\r\n       Company = _Company;\r\n       BountyFund = _BountyFund;\r\n       SupportFund = _SupportFund;\r\n       ReserveFund = _ReserveFund;\r\n       TeamFund = _TeamFund;\r\n       Manager = _Manager;\r\n       Controller_Address1 = _Controller_Address1;\r\n       Controller_Address2 = _Controller_Address2;\r\n       Controller_Address3 = _Controller_Address3;\r\n    }\r\n\r\n// function for changing rate of ETH and price of token\r\n\r\n\r\n    function setRate(uint _RateEth) external managerOnly {\r\n       Rate_Eth = _RateEth;\r\n       Token_Price = Tokens_Per_Dollar*Rate_Eth/CONST_DEL;\r\n    }\r\n\r\n\r\n//ICO status functions\r\n\r\n    function startPreIco() external managerOnly {\r\n       require(status == Status.Created || status == Status.PreIcoPaused);\r\n       if(status == Status.Created) {\r\n           dat.mint(BountyFund, bountyAmount);\r\n           dat.mint(SupportFund, supportAmount);\r\n           dat.mint(ReserveFund, reserveAmount);\r\n           dat.mint(TeamFund, teamAmount);\r\n       }\r\n       status = Status.PreIcoStarted;\r\n       LogStartPreICO();\r\n    }\r\n\r\n    function finishPreIco() external managerOnly { // Funds for minting of tokens\r\n       require(status == Status.PreIcoStarted || status == Status.PreIcoPaused);\r\n\r\n       status = Status.PreIcoFinished;\r\n       LogFinishPreICO();\r\n    }\r\n\r\n\r\n    function startIco() external managerOnly {\r\n       require(status == Status.PreIcoFinished || status == Status.IcoPaused);\r\n       if(status == Status.PreIcoFinished) {\r\n         startTime = now;\r\n       }\r\n       status = Status.IcoStarted;\r\n       LogStartICO();\r\n    }\r\n\r\n    function finishIco() external managerOnly { // Funds for minting of tokens\r\n\r\n       require(status == Status.IcoStarted || status == Status.IcoPaused);\r\n\r\n       uint alreadyMinted = dat.totalSupply(); //=PublicICO+PrivateOffer\r\n\r\n       dat.mint(ReserveFund, Total_Amount.sub(alreadyMinted)); //\r\n\r\n       dat.defrost();\r\n\r\n       status = Status.IcoFinished;\r\n       LogFinishICO(ReserveFund);\r\n    }\r\n\r\n    function pauseIco() external managerOnly {\r\n       require(status == Status.IcoStarted);\r\n       status = Status.IcoPaused;\r\n       LogPause();\r\n    }\r\n    function pausePreIco() external managerOnly {\r\n       require(status == Status.PreIcoStarted);\r\n       status = Status.PreIcoPaused;\r\n       LogPause();\r\n    }\r\n\r\n// function that buys tokens when investor sends ETH to address of ICO\r\n    function() external payable {\r\n\r\n       buy(msg.sender, msg.value * Token_Price);\r\n    }\r\n\r\n// function for buying tokens to investors who paid in other cryptos\r\n\r\n    function buyForInvestor(address _investor, uint _datValue, string _txHash) external controllersOnly {\r\n       buy(_investor, _datValue);\r\n       LogBuyForInvestor(_investor, _datValue, _txHash);\r\n    }\r\n\r\n// internal function for buying tokens\r\n\r\n    function buy(address _investor, uint _datValue) internal {\r\n       require((status == Status.PreIcoStarted) || (status == Status.IcoStarted));\r\n       require(_datValue > 0);\r\n\r\n       uint bonus = getBonus(_datValue);\r\n\r\n       uint total = _datValue.add(bonus);\r\n\r\n       require(Sold + total <= Tokens_For_Sale);\r\n       dat.mint(_investor, total);\r\n       Sold = Sold.add(_datValue);\r\n    }\r\n\r\n// function that calculates bonus\r\n    function getBonus(uint _value) public constant returns (uint) {\r\n       uint bonus = 0;\r\n       uint time = now;\r\n       if(status == Status.PreIcoStarted) {\r\n            bonus = _value.mul(35).div(100);\r\n            return bonus;\r\n       } else {\r\n            if(time <= startTime + 6 hours)\r\n            {\r\n\r\n                  bonus = _value.mul(30).div(100);\r\n                  return bonus;\r\n            }\r\n\r\n            if(time <= startTime + 12 hours)\r\n            {\r\n                  bonus = _value.mul(25).div(100);\r\n                  return bonus;\r\n            }\r\n\r\n            if(time <= startTime + 24 hours)\r\n            {\r\n\r\n                  bonus = _value.mul(20).div(100);\r\n                  return bonus;\r\n            }\r\n\r\n            if(time <= startTime + 48 hours)\r\n            {\r\n\r\n                  bonus = _value.mul(10).div(100);\r\n                  return bonus;\r\n            }\r\n       }\r\n       return bonus;\r\n    }\r\n\r\n//function to withdraw ETH from smart contract\r\n\r\n    function withdrawEther(uint256 _value) external managerOnly {\r\n       require((status == Status.PreIcoFinished) || (status == Status.IcoFinished));\r\n       Company.transfer(_value);\r\n    }\r\n\r\n}\r\n\r\ncontract DAT  is ERC20 {\r\n    using SafeMath for uint;\r\n\r\n    string public name = \"Datarius Token\";\r\n    string public symbol = \"DAT\";\r\n    uint public decimals = 18;\r\n\r\n    address public ico;\r\n\r\n    event Burn(address indexed from, uint256 value);\r\n\r\n    bool public tokensAreFrozen = true;\r\n\r\n    modifier icoOnly { require(msg.sender == ico); _; }\r\n\r\n    function DAT(address _ico) public {\r\n       ico = _ico;\r\n    }\r\n\r\n\r\n    function mint(address _holder, uint _value) external icoOnly {\r\n       require(_value > 0);\r\n       balances[_holder] = balances[_holder].add(_value);\r\n       totalSupply = totalSupply.add(_value);\r\n       Transfer(0x0, _holder, _value);\r\n    }\r\n\r\n\r\n    function defrost() external icoOnly {\r\n       tokensAreFrozen = false;\r\n    }\r\n\r\n    function burn(uint256 _value) {\r\n       require(!tokensAreFrozen);\r\n       balances[msg.sender] = balances[msg.sender].sub(_value);\r\n       totalSupply = totalSupply.sub(_value);\r\n       Burn(msg.sender, _value);\r\n    }\r\n\r\n\r\n    function balanceOf(address _owner) constant returns (uint256) {\r\n         return balances[_owner];\r\n    }\r\n\r\n\r\n    function transfer(address _to, uint256 _amount) public returns (bool) {\r\n        require(!tokensAreFrozen);\r\n        balances[msg.sender] = balances[msg.sender].sub(_amount);\r\n        balances[_to] = balances[_to].add(_amount);\r\n        Transfer(msg.sender, _to, _amount);\r\n        return true;\r\n    }\r\n\r\n\r\n    function transferFrom(address _from, address _to, uint256 _amount) public returns (bool) {\r\n        require(!tokensAreFrozen);\r\n        balances[_from] = balances[_from].sub(_amount);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\r\n        balances[_to] = balances[_to].add(_amount);\r\n        Transfer(_from, _to, _amount);\r\n        return true;\r\n     }\r\n\r\n\r\n    function approve(address _spender, uint256 _amount) public returns (bool) {\r\n        // To change the approve amount you first have to reduce the addresses`\r\n        //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n        //  already 0 to mitigate the race condition described here:\r\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n        require((_amount == 0) || (allowed[msg.sender][_spender] == 0));\r\n\r\n        allowed[msg.sender][_spender] = _amount;\r\n        Approval(msg.sender, _spender, _amount);\r\n        return true;\r\n    }\r\n\r\n\r\n    function allowance(address _owner, address _spender) constant returns (uint256) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_investor\",\"type\":\"address\"},{\"name\":\"_datValue\",\"type\":\"uint256\"},{\"name\":\"_txHash\",\"type\":\"string\"}],\"name\":\"buyForInvestor\",\"outputs\":[],\"payable\":false,\"statemutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Tokens_For_Sale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"statemutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SupportFund\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"statemutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Controller_Address1\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"statemutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Total_Amount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"statemutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pausePreIco\",\"outputs\":[],\"payable\":false,\"statemutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishPreIco\",\"outputs\":[],\"payable\":false,\"statemutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_RateEth\",\"type\":\"uint256\"}],\"name\":\"setRate\",\"outputs\":[],\"payable\":false,\"statemutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Controller_Address3\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"statemutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"withdrawEther\",\"outputs\":[],\"payable\":false,\"statemutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BountyFund\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"statemutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TeamFund\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"statemutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"getBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"statemutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Company\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"statemutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Token_Price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"statemutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dat\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"statemutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Manager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"statemutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startIco\",\"outputs\":[],\"payable\":false,\"statemutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Tokens_Per_Dollar\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"statemutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startPreIco\",\"outputs\":[],\"payable\":false,\"statemutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Controller_Address2\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"statemutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pauseIco\",\"outputs\":[],\"payable\":false,\"statemutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ReserveFund\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"statemutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Sold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"statemutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Rate_Eth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"statemutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishIco\",\"outputs\":[],\"payable\":false,\"statemutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_Company\",\"type\":\"address\"},{\"name\":\"_BountyFund\",\"type\":\"address\"},{\"name\":\"_SupportFund\",\"type\":\"address\"},{\"name\":\"_ReserveFund\",\"type\":\"address\"},{\"name\":\"_TeamFund\",\"type\":\"address\"},{\"name\":\"_Manager\",\"type\":\"address\"},{\"name\":\"_Controller_Address1\",\"type\":\"address\"},{\"name\":\"_Controller_Address2\",\"type\":\"address\"},{\"name\":\"_Controller_Address3\",\"type\":\"address\"}],\"payable\":false,\"statemutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"statemutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"LogStartPreICO\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"LogStartICO\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"LogPause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"LogFinishPreICO\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ReserveFund\",\"type\":\"address\"}],\"name\":\"LogFinishICO\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"datValue\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"txHash\",\"type\":\"string\"}],\"name\":\"LogBuyForInvestor\",\"type\":\"event\"}]","ContractName":"DatariusICO","CompilerVersion":"v0.4.16-nightly.2017.8.24+commit.78c2dcac","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000aba90731e25458947513ae9ca877d714be87b0eb0000000000000000000000007afee661277cb711d6018034332121e3f56fd4640000000000000000000000004617b7e80cd6f60a78f5614923e407f4aed33dc2000000000000000000000000efa6fc288a7607aa5169de4ee5f3ef9403701f8c0000000000000000000000008979e5e36bd46f00a5d6817cb31fc697a9a37bbf000000000000000000000000d4761a243eacec6f6b20a5828dd351a953599f94000000000000000000000000c748cda1ebd6d51367b8763460a6467370f7b7af000000000000000000000000c3fbb2d527f5707321521633c897745b6200799a000000000000000000000000cdaf42550802d26ef29db46a3f5c9b651386fe58","Library":"","SwarmSource":"bzzr://3cb525f4b3f7c6a747413cdafc23604521a8e4b2457921f9af6985cffa9cc8e6"}]}