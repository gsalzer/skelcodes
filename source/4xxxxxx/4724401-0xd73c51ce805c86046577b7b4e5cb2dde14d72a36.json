{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.15;\r\n\r\ncontract ERC20 {\r\n  function balanceOf(address who) constant returns (uint256);\r\n  function transfer(address to, uint256 value) returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  function allowance(address owner, address spender) constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) returns (bool);\r\n  function approve(address spender, uint256 value) returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);  \r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract BasicToken is ERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n\r\n    /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n\r\n    function transfer(address _to, uint256 _value) returns (bool) {\r\n        if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\r\n            balances[msg.sender] = balances[msg.sender].sub(_value);\r\n            balances[_to] = balances[_to].add(_value);\r\n            Transfer(msg.sender, _to, _value);\r\n            return true;\r\n        }else {\r\n            return false;\r\n        }\r\n    }\r\n    \r\n\r\n    /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amout of tokens to be transfered\r\n   */\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\r\n      if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\r\n        uint256 _allowance = allowed[_from][msg.sender];\r\n        allowed[_from][msg.sender] = _allowance.sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        balances[_from] = balances[_from].sub(_value);\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n      } else {\r\n        return false;\r\n      }\r\n}\r\n\r\n\r\n    /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of. \r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n  function approve(address _spender, uint256 _value) returns (bool) {\r\n\r\n    // To change the approve amount you first have to reduce the addresses`\r\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n    //  already 0 to mitigate the race condition described here:\r\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifing the amount of tokens still avaible for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n\r\n}\r\n\r\ncontract EPTToken is BasicToken {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    string public name = \"e-Pocket Token\";                      //name of the token\r\n    string public symbol = \"EPT\";                               //symbol of the token\r\n    uint8 public decimals = 18;                                 //decimals\r\n    uint256 public initialSupply = 64000000 * 10**18;           //total supply of Tokens\r\n\r\n    //variables\r\n    uint256 public totalAllocatedTokens;                         //variable to keep track of funds allocated\r\n    uint256 public tokensAllocatedToCrowdFund;                   //funds allocated to crowdfund\r\n    uint256 public foundersAllocation;                           //funds allocated to founder\r\n\r\n    //addresses\r\n    address public founderMultiSigAddress;                       //Multi sign address of founder\r\n    address public crowdFundAddress;                             //Address of crowdfund contract\r\n\r\n    //events\r\n    event ChangeFoundersWalletAddress(uint256 _blockTimeStamp, address indexed _foundersWalletAddress);\r\n    \r\n    //modifierss\r\n\r\n    modifier nonZeroAddress(address _to){\r\n        require(_to != 0x0);\r\n        _;\r\n    }\r\n\r\n    modifier onlyFounders(){\r\n        require(msg.sender == founderMultiSigAddress);\r\n        _;\r\n    }\r\n\r\n    modifier onlyCrowdfund(){\r\n        require(msg.sender == crowdFundAddress);\r\n        _;\r\n    }\r\n\r\n    /**\r\n        @dev EPTToken Constructor to initiate the variables with some input argument\r\n        @param _crowdFundAddress This is the address of the crowdfund which leads the distribution of tokens\r\n        @param _founderMultiSigAddress This is the address of the founder which have the hold over the contract.\r\n    \r\n     */\r\n    \r\n    function EPTToken(address _crowdFundAddress, address _founderMultiSigAddress) {\r\n        crowdFundAddress = _crowdFundAddress;\r\n        founderMultiSigAddress = _founderMultiSigAddress;\r\n    \r\n        //token allocation\r\n        tokensAllocatedToCrowdFund = 32 * 10**24;\r\n        foundersAllocation = 32 * 10**24;\r\n\r\n        // Assigned balances\r\n        balances[crowdFundAddress] = tokensAllocatedToCrowdFund;\r\n        balances[founderMultiSigAddress] = foundersAllocation;\r\n\r\n        totalAllocatedTokens = balances[founderMultiSigAddress];\r\n    }\r\n\r\n    /**\r\n        @dev changeTotalSupply is the function used to variate the variable totalAllocatedTokens\r\n        @param _amount amount of tokens are sold out to increase the value of totalAllocatedTokens\r\n     */\r\n\r\n    function changeTotalSupply(uint256 _amount) onlyCrowdfund {\r\n        totalAllocatedTokens += _amount;\r\n    }\r\n\r\n\r\n    /**\r\n        @dev changeFounderMultiSigAddress function use to change the ownership of the contract\r\n        @param _newFounderMultiSigAddress New address which will take the ownership of the contract\r\n     */\r\n    \r\n    function changeFounderMultiSigAddress(address _newFounderMultiSigAddress) onlyFounders nonZeroAddress(_newFounderMultiSigAddress) {\r\n        founderMultiSigAddress = _newFounderMultiSigAddress;\r\n        ChangeFoundersWalletAddress(now, founderMultiSigAddress);\r\n    }\r\n\r\n  \r\n}\r\n\r\n\r\ncontract EPTCrowdfund {\r\n    \r\n    using SafeMath for uint256;\r\n\r\n    EPTToken public token;                                      // Token contract reference\r\n    \r\n    address public beneficiaryAddress;                          // Address where all funds get allocated \r\n    address public founderAddress;                              // Founders address\r\n    uint256 public crowdfundStartTime = 1516579201;             // Monday, 22-Jan-18 00:00:01 UTC\r\n    uint256 public crowdfundEndTime = 1518998399;               // Sunday, 18-Feb-18 23:59:59 UTC\r\n    uint256 public presaleStartTime = 1513123201;               // Wednesday, 13-Dec-17 00:00:01\r\n    uint256 public presaleEndTime = 1516579199;                 // Sunday, 21-Jan-18 23:59:59\r\n    uint256 public ethRaised;                                   // Counter to track the amount raised\r\n    bool private tokenDeployed = false;                         // Flag to track the token deployment -- only can be set once\r\n    uint256 public tokenSold;                                   // Counter to track the amount of token sold\r\n    uint256 private ethRate;\r\n    \r\n    \r\n    //events\r\n    event ChangeFounderAddress(address indexed _newFounderAddress , uint256 _timestamp);\r\n    event TokenPurchase(address indexed _beneficiary, uint256 _value, uint256 _amount);\r\n    event CrowdFundClosed(uint256 _timestamp);\r\n    \r\n    enum State {PreSale, CrowdSale, Finish}\r\n    \r\n    //Modifiers\r\n    modifier onlyfounder() {\r\n        require(msg.sender == founderAddress);\r\n        _;\r\n    }\r\n\r\n    modifier nonZeroAddress(address _to) {\r\n        require(_to != 0x0);\r\n        _;\r\n    }\r\n\r\n    modifier onlyPublic() {\r\n        require(msg.sender != founderAddress);\r\n        _;\r\n    }\r\n\r\n    modifier nonZeroEth() {\r\n        require(msg.value != 0);\r\n        _;\r\n    }\r\n\r\n    modifier isTokenDeployed() {\r\n        require(tokenDeployed == true);\r\n        _;\r\n    }\r\n\r\n    modifier isBetween() {\r\n        require(now >= presaleStartTime && now <= crowdfundEndTime);\r\n        _;\r\n    }\r\n\r\n    /**\r\n        @dev EPTCrowdfund Constructor used to initialize the required variable.\r\n        @param _founderAddress Founder address \r\n        @param _ethRate Rate of ether in dollars at the time of deployment.\r\n        @param _beneficiaryAddress Address that hold all funds collected from investors\r\n\r\n     */\r\n\r\n    function EPTCrowdfund(address _founderAddress, address _beneficiaryAddress, uint256 _ethRate) {\r\n        beneficiaryAddress = _beneficiaryAddress;\r\n        founderAddress = _founderAddress;\r\n        ethRate = uint256(_ethRate);\r\n    }\r\n   \r\n    /**\r\n        @dev setToken Function used to set the token address into the contract.\r\n        @param _tokenAddress variable that contains deployed token address \r\n     */\r\n\r\n    function setToken(address _tokenAddress) nonZeroAddress(_tokenAddress) onlyfounder {\r\n         require(tokenDeployed == false);\r\n         token = EPTToken(_tokenAddress);\r\n         tokenDeployed = true;\r\n    }\r\n    \r\n    \r\n    /**\r\n        @dev changeFounderWalletAddress used to change the wallet address or change the ownership\r\n        @param _newAddress new founder wallet address\r\n     */\r\n\r\n    function changeFounderWalletAddress(address _newAddress) onlyfounder nonZeroAddress(_newAddress) {\r\n         founderAddress = _newAddress;\r\n         ChangeFounderAddress(founderAddress,now);\r\n    }\r\n\r\n    \r\n    /**\r\n        @dev buyTokens function used to buy the tokens using ethers only. sale \r\n            is only processed between start time and end time. \r\n        @param _beneficiary address of the investor\r\n        @return bool \r\n     */\r\n\r\n    function buyTokens (address _beneficiary)\r\n    isBetween\r\n    onlyPublic\r\n    nonZeroAddress(_beneficiary)\r\n    nonZeroEth\r\n    isTokenDeployed\r\n    payable\r\n    public\r\n    returns (bool)\r\n    {\r\n         uint256 amount = msg.value.mul(((ethRate.mul(100)).div(getRate())));\r\n    \r\n        if (token.transfer(_beneficiary, amount)) {\r\n            fundTransfer(msg.value);\r\n            \r\n            ethRaised = ethRaised.add(msg.value);\r\n            tokenSold = tokenSold.add(amount);\r\n            token.changeTotalSupply(amount); \r\n            TokenPurchase(_beneficiary, msg.value, amount);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n        @dev setEthRate function used to set the ether Rate\r\n        @param _newEthRate latest eth rate\r\n        @return bool\r\n     \r\n     */\r\n\r\n    function setEthRate(uint256 _newEthRate) onlyfounder returns (bool) {\r\n        require(_newEthRate > 0);\r\n        ethRate = _newEthRate;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n        @dev getRate used to get the price of each token on weekly basis\r\n        @return uint256 price of each tokens in dollar\r\n    \r\n     */\r\n\r\n    function getRate() internal returns(uint256) {\r\n\r\n        if (getState() == State.PreSale) {\r\n            return 10;\r\n        } \r\n        if(getState() == State.CrowdSale) {\r\n            if (now >= crowdfundStartTime + 3 weeks && now <= crowdfundEndTime) {\r\n                return 30;\r\n             }\r\n            if (now >= crowdfundStartTime + 2 weeks) {\r\n                return 25;\r\n            }\r\n            if (now >= crowdfundStartTime + 1 weeks) {\r\n                return 20;\r\n            }\r\n            if (now >= crowdfundStartTime) {\r\n                return 15;\r\n            }  \r\n        } else {\r\n            return 0;\r\n        }\r\n              \r\n    }  \r\n\r\n    /**\r\n        @dev `getState` used to findout the state of the crowdfund\r\n        @return State \r\n     */\r\n\r\n    function getState() private returns(State) {\r\n        if (now >= crowdfundStartTime && now <= crowdfundEndTime) {\r\n            return State.CrowdSale;\r\n        }\r\n        if (now >= presaleStartTime && now <= presaleEndTime) {\r\n            return State.PreSale;\r\n        } else {\r\n            return State.Finish;\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n        @dev endCrowdFund called only after the end time of crowdfund . use to end the sale.\r\n        @return bool\r\n     */\r\n\r\n    function endCrowdFund() onlyfounder returns(bool) {\r\n        require(now > crowdfundEndTime);\r\n        uint256 remainingtoken = token.balanceOf(this);\r\n\r\n        if (remainingtoken != 0) {\r\n            token.transfer(founderAddress,remainingtoken);\r\n            CrowdFundClosed(now);\r\n            return true;\r\n        }\r\n        CrowdFundClosed(now);\r\n        return false;    \r\n } \r\n\r\n    /**\r\n        @dev fundTransfer used to transfer collected ether into the beneficary address\r\n     */\r\n\r\n    function fundTransfer(uint256 _funds) private {\r\n        beneficiaryAddress.transfer(_funds);\r\n    }\r\n\r\n    // Crowdfund entry\r\n    // send ether to the contract address\r\n    // gas used 200000\r\n    function () payable {\r\n        buyTokens(msg.sender);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalAllocatedTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"foundersAllocation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"founderMultiSigAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdFundAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"changeTotalSupply\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newFounderMultiSigAddress\",\"type\":\"address\"}],\"name\":\"changeFounderMultiSigAddress\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensAllocatedToCrowdFund\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_crowdFundAddress\",\"type\":\"address\"},{\"name\":\"_founderMultiSigAddress\",\"type\":\"address\"}],\"payable\":false,\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_blockTimeStamp\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_foundersWalletAddress\",\"type\":\"address\"}],\"name\":\"ChangeFoundersWalletAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"EPTToken","CompilerVersion":"v0.4.15+commit.bbb8e64f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000449684cec6727d7240ecc6f29a0ebff9c5b27e590000000000000000000000008072097fa6ea0f06ea140fed01e137b0c1963d00","Library":"","SwarmSource":"bzzr://989f37b7a5870903319e94ea50d58592dbb8683306fd7d2a7462eef5588b6075"}]}