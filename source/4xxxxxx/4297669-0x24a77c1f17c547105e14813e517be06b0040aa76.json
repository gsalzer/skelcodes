{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13;\r\n\r\n/**\r\n * @title SafeMath\r\n * Math operations with safety checks\r\n */\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal returns (uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n\r\n    function max64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    function min64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    function max256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    function min256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * Base contract with an owner.\r\n * Provides onlyOwner modifier, which prevents function from running if it is called by anyone other than the owner.\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    function Ownable() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) onlyOwner {\r\n        if (newOwner != address(0)) {\r\n            owner = newOwner;\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @title Haltable\r\n * Abstract contract that allows children to implement an\r\n * emergency stop mechanism. Differs from Pausable by causing a throw when in halt mode.\r\n */\r\ncontract Haltable is Ownable {\r\n    bool public halted;\r\n\r\n    modifier stopInEmergency {\r\n        require(!halted);\r\n        _;\r\n    }\r\n\r\n    modifier onlyInEmergency {\r\n        require(halted);\r\n        _;\r\n    }\r\n\r\n    // called by the owner on emergency, triggers stopped state\r\n    function halt() external onlyOwner {\r\n        halted = true;\r\n    }\r\n\r\n    // called by the owner on end of emergency, returns to normal state\r\n    function unhalt() external onlyOwner onlyInEmergency {\r\n        halted = false;\r\n    }\r\n}\r\n\r\n/**\r\n * @title ERC20\r\n * ERC20 interface\r\n */\r\ncontract ERC20 {\r\n    uint256 public totalSupply;\r\n\r\n    function balanceOf(address _owner) constant returns (uint balance);\r\n    function transfer(address _to, uint _value);\r\n    function transferFrom(address _from, address _to, uint _value);\r\n    function approve(address _spender, uint _value);\r\n    function allowance(address _owner, address _spender) constant returns (uint remaining);\r\n    event Transfer(address indexed _from, address indexed _to, uint _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n}\r\n\r\n/**\r\n * @title StandardToken\r\n * Standard ERC20-compliant token\r\n * https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract StandardToken is ERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) balances;\r\n    mapping(address => mapping(address => uint256)) allowed;\r\n\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    /**\r\n     * fix for ERC20 short address attack\r\n     */\r\n    modifier onlyPayloadSize(uint256 size) {\r\n        require(msg.data.length >= size + 4);\r\n        _;\r\n    }\r\n\r\n    function transfer(address _to, uint _value) onlyPayloadSize(2 * 32) {\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        Transfer(msg.sender, _to, _value);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint _value) onlyPayloadSize(3 * 32) {\r\n        var _allowance = allowed[_from][msg.sender];\r\n\r\n        balances[_to] = balances[_to].add(_value);\r\n        balances[_from] = balances[_from].sub(_value);\r\n        allowed[_from][msg.sender] = _allowance.sub(_value);\r\n        Transfer(_from, _to, _value);\r\n    }\r\n\r\n    function approve(address _spender, uint _value) {\r\n        /**\r\n         * Allowed amount should be first set to 0\r\n         * by calling approve(_spender, 0) in order to avoid this:\r\n         * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n         */\r\n        require(_value == 0 || allowed[msg.sender][_spender] == 0);\r\n\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n}\r\n\r\ncontract LiveStarsToken is StandardToken {\r\n    string public name = \"Live Stars Token\";\r\n    string public symbol = \"LIVE\";\r\n    uint256 public decimals = 18;\r\n    uint256 public INITIAL_SUPPLY = 200000000 * 1 ether;\r\n\r\n    /**\r\n     * All tokens are allocated to creator.\r\n     */\r\n    function LiveStarsToken() {\r\n        totalSupply = INITIAL_SUPPLY;\r\n        balances[msg.sender] = INITIAL_SUPPLY;\r\n    }\r\n}\r\n\r\ncontract LiveStarsTokenPresale is Haltable {\r\n    using SafeMath for uint;\r\n\r\n    string public name = \"Live Stars Token Presale\";\r\n\r\n    LiveStarsToken public token;\r\n    address public beneficiary;\r\n\r\n    uint public hardCap;\r\n    uint public collected;\r\n    uint public price;\r\n    uint public purchaseLimit;\r\n\r\n    uint public currentBalance;\r\n\r\n    uint public tokensSold = 0;\r\n    uint public investorCount = 0;\r\n\r\n    uint public startTime;\r\n    uint public endTime;\r\n\r\n    event GoalReached(uint amountRaised);\r\n    event NewContribution(address indexed holder, uint256 tokenAmount, uint256 etherAmount);\r\n\r\n    modifier onlyAfter(uint time) {\r\n        require(now >= time);\r\n        _;\r\n    }\r\n\r\n    modifier onlyBefore(uint time) {\r\n        require(now <= time);\r\n        _;\r\n    }\r\n\r\n    function LiveStarsTokenPresale(\r\n        uint _hardCapUSD,\r\n        address _token,\r\n        address _beneficiary,\r\n        uint _totalTokens,\r\n        uint _priceETH,\r\n        uint _purchaseLimitUSD,\r\n\r\n        uint _startTime,\r\n        uint _duration\r\n    ) {\r\n        hardCap = _hardCapUSD  * 1 ether / _priceETH;\r\n        price = _totalTokens * 1 ether / hardCap;\r\n\r\n        purchaseLimit = _purchaseLimitUSD * 1 ether / _priceETH * price;\r\n        token = LiveStarsToken(_token);\r\n        beneficiary = _beneficiary;\r\n\r\n        startTime = _startTime;\r\n        endTime = _startTime + _duration * 1 hours;\r\n    }\r\n\r\n    function () payable stopInEmergency{\r\n        require(msg.value >= 0.01 * 1 ether);\r\n        doPurchase(msg.sender);\r\n    }\r\n\r\n    function withdraw() onlyOwner {\r\n        require(beneficiary.send(currentBalance));\r\n        currentBalance = 0;\r\n    }\r\n\r\n    function finalWithdraw() onlyOwner onlyAfter(endTime) {\r\n        if (currentBalance > 0) {\r\n            require(beneficiary.send(currentBalance));\r\n        }\r\n\r\n        token.transfer(beneficiary, token.balanceOf(this));\r\n    }\r\n\r\n    function doPurchase(address _owner) private onlyAfter(startTime) onlyBefore(endTime) {\r\n        assert(collected.add(msg.value) <= hardCap);\r\n\r\n        uint tokens = msg.value * price;\r\n        assert(token.balanceOf(msg.sender) + tokens <= purchaseLimit);\r\n\r\n        if (token.balanceOf(msg.sender) == 0) investorCount++;\r\n\r\n        collected = collected.add(msg.value);\r\n        currentBalance = currentBalance.add(msg.value);\r\n        token.transfer(msg.sender, tokens);\r\n        tokensSold = tokensSold.add(tokens);\r\n\r\n        NewContribution(_owner, tokens, msg.value);\r\n\r\n        if (collected == hardCap) {\r\n            GoalReached(hardCap);\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INITIAL_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"LiveStarsToken","CompilerVersion":"v0.4.13+commit.fb4cb1a","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://3fa4f82b2b0e7bcf66ef6c95eecf4f285a68e7b7a2397261aff297e8e68aa449"}]}