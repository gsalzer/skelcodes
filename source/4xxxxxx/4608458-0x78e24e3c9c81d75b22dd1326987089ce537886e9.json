{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public constant returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n\r\n    uint256 _allowance = allowed[_from][msg.sender];\r\n\r\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n    // require (_value <= _allowance);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   */\r\n  function increaseApproval (address _spender, uint _addedValue)\r\n    returns (bool success) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  function decreaseApproval (address _spender, uint _subtractedValue)\r\n    returns (bool success) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\ncontract MintableToken is StandardToken, Ownable {\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\r\n    totalSupply = totalSupply.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    Mint(_to, _amount);\r\n    Transfer(0x0, _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() onlyOwner public returns (bool) {\r\n    mintingFinished = true;\r\n    MintFinished();\r\n    return true;\r\n  }\r\n}\r\n\r\ncontract MultiOwners {\r\n\r\n    event AccessGrant(address indexed owner);\r\n    event AccessRevoke(address indexed owner);\r\n    \r\n    mapping(address => bool) owners;\r\n    address public publisher;\r\n\r\n\r\n    function MultiOwners() {\r\n        owners[msg.sender] = true;\r\n        publisher = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() { \r\n        require(owners[msg.sender] == true);\r\n        _; \r\n    }\r\n\r\n    function isOwner() constant returns (bool) {\r\n        return owners[msg.sender] ? true : false;\r\n    }\r\n\r\n    function checkOwner(address maybe_owner) constant returns (bool) {\r\n        return owners[maybe_owner] ? true : false;\r\n    }\r\n\r\n\r\n    function grant(address _owner) onlyOwner {\r\n        owners[_owner] = true;\r\n        AccessGrant(_owner);\r\n    }\r\n\r\n    function revoke(address _owner) onlyOwner {\r\n        require(_owner != publisher);\r\n        require(msg.sender != _owner);\r\n\r\n        owners[_owner] = false;\r\n        AccessRevoke(_owner);\r\n    }\r\n}\r\n\r\ncontract Haltable is MultiOwners {\r\n    bool public halted;\r\n\r\n    modifier stopInEmergency {\r\n        require(!halted);\r\n        _;\r\n    }\r\n\r\n    modifier onlyInEmergency {\r\n        require(halted);\r\n        _;\r\n    }\r\n\r\n    // called by the owner on emergency, triggers stopped state\r\n    function halt() external onlyOwner {\r\n        halted = true;\r\n    }\r\n\r\n    // called by the owner on end of emergency, returns to normal state\r\n    function unhalt() external onlyOwner onlyInEmergency {\r\n        halted = false;\r\n    }\r\n\r\n}\r\n\r\ncontract TripleAlphaCrowdsale is MultiOwners, Haltable {\r\n    using SafeMath for uint256;\r\n\r\n    // Global\r\n    // ETHUSD change rate\r\n    uint256 public rateETHUSD = 300e2;\r\n\r\n    // minimal token selled per time\r\n    uint256 public minimalTokens = 1e18;\r\n\r\n    // Sale token\r\n    TripleAlphaToken public token;\r\n\r\n    // Withdraw wallet\r\n    address public wallet;\r\n\r\n\r\n    // Pre-ICO\r\n    // Maximum possible cap in USD on periodPreITO\r\n    uint256 public periodPreITO_mainCapInUSD = 1000000e2;\r\n\r\n    // Maximum possible cap in USD on periodPreITO\r\n    uint256 public periodPreITO_hardCapInUSD = periodPreITO_mainCapInUSD;\r\n\r\n    // PreITO period in days\r\n    uint256 public periodPreITO_period = 30 days;\r\n\r\n    // Token Price in USD\r\n    uint256 public periodPreITO_tokenPriceUSD = 50;\r\n\r\n    // WEI per token\r\n    uint256 public periodPreITO_weiPerToken = periodPreITO_tokenPriceUSD.mul(1 ether).div(rateETHUSD);\r\n    \r\n    // start and end timestamp where investments are allowed (both inclusive)\r\n    uint256 public periodPreITO_startTime;\r\n    uint256 public periodPreITO_endTime;\r\n\r\n    // total wei received during phase one\r\n    uint256 public periodPreITO_wei;\r\n\r\n    // Maximum possible cap in wei for phase one\r\n    uint256 public periodPreITO_mainCapInWei = periodPreITO_mainCapInUSD.mul(1 ether).div(rateETHUSD);\r\n    // Maximum possible cap in wei\r\n    uint256 public periodPreITO_hardCapInWei = periodPreITO_mainCapInWei;\r\n\r\n\r\n    // ICO\r\n    // Minimal possible cap in USD on periodITO\r\n    uint256 public periodITO_softCapInUSD = 1000000e2;\r\n\r\n    // Maximum possible cap in USD on periodITO\r\n    uint256 public periodITO_mainCapInUSD = 8000000e2;\r\n\r\n    uint256 public periodITO_period = 60 days;\r\n\r\n    // Maximum possible cap in USD on periodITO\r\n    uint256 public periodITO_hardCapInUSD = periodITO_softCapInUSD + periodITO_mainCapInUSD;\r\n\r\n    // Token Price in USD\r\n    uint256 public periodITO_tokenPriceUSD = 100;\r\n\r\n    // WEI per token\r\n    uint256 public periodITO_weiPerToken = periodITO_tokenPriceUSD.mul(1 ether).div(rateETHUSD);\r\n\r\n    // start and end timestamp where investments are allowed (both inclusive)\r\n    uint256 public periodITO_startTime;\r\n    uint256 public periodITO_endTime;\r\n\r\n    // total wei received during phase two\r\n    uint256 public periodITO_wei;\r\n    \r\n    // refund if softCap is not reached\r\n    bool public refundAllowed = false;\r\n\r\n    // need for refund\r\n    mapping(address => uint256) public received_ethers;\r\n\r\n\r\n    // Hard possible cap - soft cap in wei for phase two\r\n    uint256 public periodITO_mainCapInWei = periodITO_mainCapInUSD.mul(1 ether).div(rateETHUSD);\r\n\r\n    // Soft cap in wei\r\n    uint256 public periodITO_softCapInWei = periodITO_softCapInUSD.mul(1 ether).div(rateETHUSD);\r\n\r\n    // Hard possible cap - soft cap in wei for phase two\r\n    uint256 public periodITO_hardCapInWei = periodITO_softCapInWei + periodITO_mainCapInWei;\r\n\r\n\r\n    // Events\r\n    event TokenPurchase(address indexed beneficiary, uint256 value, uint256 amount);\r\n    event OddMoney(address indexed beneficiary, uint256 value);\r\n    event SetPeriodPreITO_startTime(uint256 new_startTimePeriodPreITO);\r\n    event SetPeriodITO_startTime(uint256 new_startTimePeriodITO);\r\n\r\n    modifier validPurchase() {\r\n        bool nonZeroPurchase = msg.value != 0;\r\n\r\n        require(withinPeriod() && nonZeroPurchase);\r\n\r\n        _;        \r\n    }\r\n\r\n    modifier isExpired() {\r\n        require(now > periodITO_endTime);\r\n\r\n        _;        \r\n    }\r\n\r\n    /**\r\n     * @return true if in period or false if not\r\n     */\r\n    function withinPeriod() constant returns(bool res) {\r\n        bool withinPeriodPreITO = (now >= periodPreITO_startTime && now <= periodPreITO_endTime);\r\n        bool withinPeriodITO = (now >= periodITO_startTime && now <= periodITO_endTime);\r\n        return (withinPeriodPreITO || withinPeriodITO);\r\n    }\r\n    \r\n\r\n    /**\r\n     * @param _periodPreITO_startTime Pre-ITO start time\r\n     * @param _periodITO_startTime ITO start time\r\n     * @param _wallet destination fund address (i hope it will be multi-sig)\r\n     */\r\n    function TripleAlphaCrowdsale(uint256 _periodPreITO_startTime, uint256 _periodITO_startTime, address _wallet) {\r\n        require(_periodPreITO_startTime >= now);\r\n        require(_periodITO_startTime > _periodPreITO_startTime);\r\n        require(_wallet != 0x0);\r\n\r\n        token = new TripleAlphaToken();\r\n        wallet = _wallet;\r\n\r\n        setPeriodPreITO_startTime(_periodPreITO_startTime);\r\n        setPeriodITO_startTime(_periodITO_startTime);\r\n    }\r\n\r\n    /**\r\n     * @dev Human readable period Name \r\n     * @return current stage name\r\n     */\r\n    function stageName() constant public returns (string) {\r\n        bool beforePreITO = (now < periodPreITO_startTime);\r\n        bool withinPreITO = (now >= periodPreITO_startTime && now <= periodPreITO_endTime);\r\n        bool betweenPreITOAndITO = (now >= periodPreITO_endTime && now <= periodITO_startTime);\r\n        bool withinITO = (now >= periodITO_startTime && now <= periodITO_endTime);\r\n\r\n        if(beforePreITO) {\r\n            return 'Not started';\r\n        }\r\n\r\n        if(withinPreITO) {\r\n            return 'Pre-ITO';\r\n        } \r\n\r\n        if(betweenPreITOAndITO) {\r\n            return 'Between Pre-ITO and ITO';\r\n        }\r\n\r\n        if(withinITO) {\r\n            return 'ITO';\r\n        }\r\n\r\n        return 'Finished';\r\n    }\r\n\r\n    /**\r\n     * @dev Human readable period Name \r\n     * @return current stage name\r\n     */\r\n    function totalWei() public constant returns(uint256) {\r\n        return periodPreITO_wei + periodITO_wei;\r\n    }\r\n    \r\n    function totalEther() public constant returns(uint256) {\r\n        return totalWei().div(1e18);\r\n    }\r\n\r\n    /*\r\n     * @dev update PreITO start time\r\n     * @param _at new start date\r\n     */\r\n    function setPeriodPreITO_startTime(uint256 _at) onlyOwner {\r\n        require(periodPreITO_startTime == 0 || block.timestamp < periodPreITO_startTime); // forbid change time when first phase is active\r\n        require(block.timestamp < _at); // should be great than current block timestamp\r\n        require(periodITO_startTime == 0 || _at < periodITO_startTime); // should be lower than start of second phase\r\n\r\n        periodPreITO_startTime = _at;\r\n        periodPreITO_endTime = periodPreITO_startTime.add(periodPreITO_period);\r\n        SetPeriodPreITO_startTime(_at);\r\n    }\r\n\r\n    /*\r\n     * @dev update ITO start date\r\n     * @param _at new start date\r\n     */\r\n    function setPeriodITO_startTime(uint256 _at) onlyOwner {\r\n        require(periodITO_startTime == 0 || block.timestamp < periodITO_startTime); // forbid change time when second phase is active\r\n        require(block.timestamp < _at); // should be great than current block timestamp\r\n        require(periodPreITO_endTime < _at); // should be great than end first phase\r\n\r\n        periodITO_startTime = _at;\r\n        periodITO_endTime = periodITO_startTime.add(periodITO_period);\r\n        SetPeriodITO_startTime(_at);\r\n    }\r\n\r\n    function periodITO_softCapReached() internal returns (bool) {\r\n        return periodITO_wei >= periodITO_softCapInWei;\r\n    }\r\n\r\n    /*\r\n     * @dev fallback for processing ether\r\n     */\r\n    function() payable {\r\n        return buyTokens(msg.sender);\r\n    }\r\n\r\n    /*\r\n     * @dev amount calculation, depends of current period\r\n     * @param _value ETH in wei\r\n     * @param _at time\r\n     */\r\n    function calcAmountAt(uint256 _value, uint256 _at) constant public returns (uint256, uint256) {\r\n        uint256 estimate;\r\n        uint256 odd;\r\n\r\n        if(_at < periodPreITO_endTime) {\r\n            if(_value.add(periodPreITO_wei) > periodPreITO_hardCapInWei) {\r\n                odd = _value.add(periodPreITO_wei).sub(periodPreITO_hardCapInWei);\r\n                _value = periodPreITO_hardCapInWei.sub(periodPreITO_wei);\r\n            } \r\n            estimate = _value.mul(1 ether).div(periodPreITO_weiPerToken);\r\n            require(_value + periodPreITO_wei <= periodPreITO_hardCapInWei);\r\n        } else {\r\n            if(_value.add(periodITO_wei) > periodITO_hardCapInWei) {\r\n                odd = _value.add(periodITO_wei).sub(periodITO_hardCapInWei);\r\n                _value = periodITO_hardCapInWei.sub(periodITO_wei);\r\n            }             \r\n            estimate = _value.mul(1 ether).div(periodITO_weiPerToken);\r\n            require(_value + periodITO_wei <= periodITO_hardCapInWei);\r\n        }\r\n\r\n        return (estimate, odd);\r\n    }\r\n\r\n    /*\r\n     * @dev sell token and send to contributor address\r\n     * @param contributor address\r\n     */\r\n    function buyTokens(address contributor) payable stopInEmergency validPurchase public {\r\n        uint256 amount;\r\n        uint256 odd_ethers;\r\n        bool transfer_allowed = true;\r\n        \r\n        (amount, odd_ethers) = calcAmountAt(msg.value, now);\r\n  \r\n        require(contributor != 0x0) ;\r\n        require(minimalTokens <= amount);\r\n\r\n        token.mint(contributor, amount);\r\n        TokenPurchase(contributor, msg.value, amount);\r\n\r\n        if(now < periodPreITO_endTime) {\r\n            // Pre-ITO\r\n            periodPreITO_wei = periodPreITO_wei.add(msg.value);\r\n\r\n        } else {\r\n            // ITO\r\n            if(periodITO_softCapReached()) {\r\n                periodITO_wei = periodITO_wei.add(msg.value).sub(odd_ethers);\r\n            } else if(this.balance >= periodITO_softCapInWei) {\r\n                periodITO_wei = this.balance.sub(odd_ethers);\r\n            } else {\r\n                received_ethers[contributor] = received_ethers[contributor].add(msg.value);\r\n                transfer_allowed = false;\r\n            }\r\n        }\r\n\r\n        if(odd_ethers > 0) {\r\n            require(odd_ethers < msg.value);\r\n            OddMoney(contributor, odd_ethers);\r\n            contributor.transfer(odd_ethers);\r\n        }\r\n\r\n        if(transfer_allowed) {\r\n            wallet.transfer(this.balance);\r\n        }\r\n    }\r\n\r\n    /*\r\n     * @dev sell token and send to contributor address\r\n     * @param contributor address\r\n     */\r\n    function refund() isExpired public {\r\n        require(refundAllowed);\r\n        require(!periodITO_softCapReached());\r\n        require(received_ethers[msg.sender] > 0);\r\n        require(token.balanceOf(msg.sender) > 0);\r\n\r\n        uint256 current_balance = received_ethers[msg.sender];\r\n        received_ethers[msg.sender] = 0;\r\n        token.burn(msg.sender);\r\n        msg.sender.transfer(current_balance);\r\n    }\r\n\r\n    /*\r\n     * @dev finish crowdsale\r\n     */\r\n    function finishCrowdsale() onlyOwner public {\r\n        require(now > periodITO_endTime || periodITO_wei == periodITO_hardCapInWei);\r\n        require(!token.mintingFinished());\r\n\r\n        if(periodITO_softCapReached()) {\r\n            token.finishMinting(true);\r\n        } else {\r\n            refundAllowed = true;\r\n            token.finishMinting(false);\r\n        }\r\n   }\r\n\r\n    // @return true if crowdsale event has ended\r\n    function running() constant public returns (bool) {\r\n        return withinPeriod() && !token.mintingFinished();\r\n    }\r\n}\r\n\r\ncontract TripleAlphaToken is MintableToken {\r\n\r\n    string public constant name = 'Triple Alpha Token';\r\n    string public constant symbol = 'TRIA';\r\n    uint8 public constant decimals = 18;\r\n    bool public transferAllowed;\r\n\r\n    event Burn(address indexed from, uint256 value);\r\n    event TransferAllowed(bool);\r\n\r\n    modifier canTransfer() {\r\n        require(mintingFinished && transferAllowed);\r\n        _;        \r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 value) canTransfer returns (bool) {\r\n        return super.transferFrom(from, to, value);\r\n    }\r\n\r\n    function transfer(address to, uint256 value) canTransfer returns (bool) {\r\n        return super.transfer(to, value);\r\n    }\r\n\r\n    function finishMinting(bool _transferAllowed) onlyOwner returns (bool) {\r\n        transferAllowed = _transferAllowed;\r\n        TransferAllowed(_transferAllowed);\r\n        return super.finishMinting();\r\n    }\r\n\r\n    function burn(address from) onlyOwner returns (bool) {\r\n        Transfer(from, 0x0, balances[from]);\r\n        Burn(from, balances[from]);\r\n\r\n        balances[0x0] += balances[from];\r\n        balances[from] = 0;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"withinPeriod\",\"outputs\":[{\"name\":\"res\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"periodITO_mainCapInWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"periodITO_softCapInUSD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"periodPreITO_startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"received_ethers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"refundAllowed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_at\",\"type\":\"uint256\"}],\"name\":\"setPeriodITO_startTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_at\",\"type\":\"uint256\"}],\"name\":\"setPeriodPreITO_startTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"periodITO_hardCapInWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"periodITO_startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stageName\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rateETHUSD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimalTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"periodITO_softCapInWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"halt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"periodITO_mainCapInUSD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"grant\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"revoke\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"periodITO_hardCapInUSD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"periodITO_wei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"publisher\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"periodPreITO_wei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"periodPreITO_hardCapInUSD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"periodPreITO_weiPerToken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"periodPreITO_hardCapInWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalEther\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishCrowdsale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"halted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"periodITO_tokenPriceUSD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_at\",\"type\":\"uint256\"}],\"name\":\"calcAmountAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"periodPreITO_tokenPriceUSD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unhalt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"periodPreITO_endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"periodPreITO_mainCapInUSD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"periodPreITO_mainCapInWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"periodITO_weiPerToken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"running\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"maybe_owner\",\"type\":\"address\"}],\"name\":\"checkOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"contributor\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"periodPreITO_period\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"periodITO_endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"periodITO_period\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_periodPreITO_startTime\",\"type\":\"uint256\"},{\"name\":\"_periodITO_startTime\",\"type\":\"uint256\"},{\"name\":\"_wallet\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"OddMoney\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"new_startTimePeriodPreITO\",\"type\":\"uint256\"}],\"name\":\"SetPeriodPreITO_startTime\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"new_startTimePeriodITO\",\"type\":\"uint256\"}],\"name\":\"SetPeriodITO_startTime\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"AccessGrant\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"AccessRevoke\",\"type\":\"event\"}]","ContractName":"TripleAlphaCrowdsale","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000005a1728c0000000000000000000000000000000000000000000000000000000005a679440000000000000000000000000008290b1f0c771984ec459c8836a245ecca95797","Library":"","SwarmSource":"bzzr://3fcdd58e1211cc78e546edf35b6d14a0d6b4a588277d7e140f0b2b5bdb59c0f1"}]}