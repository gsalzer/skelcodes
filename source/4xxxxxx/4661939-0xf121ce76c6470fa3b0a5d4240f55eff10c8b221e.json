{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.15;\r\n\r\ncontract owned {\r\n    address public owner;\r\n\r\n    function owned() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        if (msg.sender != owner) throw;\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) onlyOwner {\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\ncontract tokenSPERT {\r\n    /* Public variables of the token */\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals;\r\n    uint256 public totalSupply = 0;\r\n\r\n\r\n    function tokenSPERT (string _name, string _symbol, uint8 _decimals){\r\n        name = _name;\r\n        symbol = _symbol;\r\n        decimals = _decimals;\r\n        \r\n    }\r\n    /* This creates an array with all balances */\r\n    mapping (address => uint256) public balanceOf;\r\n\r\n\r\n    /* This unnamed function is called whenever someone tries to send ether to it */\r\n    function () {\r\n        throw;     // Prevents accidental sending of ether\r\n    }\r\n}\r\n\r\ncontract Presale is owned, tokenSPERT {\r\n\r\n        string name = 'Pre-sale Eristica Token';\r\n        string symbol = 'SPERT';\r\n        uint8 decimals = 18;\r\n        \r\n        \r\nfunction Presale ()\r\n        tokenSPERT (name, symbol, decimals){}\r\n    \r\n    event Transfer(address _from, address _to, uint256 amount); \r\n    event Burned(address _from, uint256 amount);\r\n        \r\n    function mintToken(address investor, uint256 mintedAmount) public onlyOwner {\r\n        balanceOf[investor] += mintedAmount;\r\n        totalSupply += mintedAmount;\r\n        Transfer(this, investor, mintedAmount);\r\n        \r\n    }\r\n\r\n function burnTokens(address _owner) public\r\n        onlyOwner\r\n    {   \r\n        uint  tokens = balanceOf[_owner];\r\n        if(balanceOf[_owner] == 0) throw;\r\n        balanceOf[_owner] = 0;\r\n        totalSupply -= tokens;\r\n        Burned(_owner, tokens);\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    function div(uint a, uint b) internal returns (uint) {\r\n        assert(b > 0);\r\n        uint c = a / b;\r\n        assert(a == b * c + a % b);\r\n        return c;\r\n    }\r\n    function sub(uint a, uint b) internal returns (uint) {\r\n        assert(b <= a);\r\n        return a - b;\r\n     }\r\n    function add(uint a, uint b) internal returns (uint) {\r\n         uint c = a + b;\r\n         assert(c >= a);\r\n         return c;\r\n     }\r\n}\r\n\r\n\r\ncontract ERC20 {\r\n    uint public totalSupply = 0;\r\n\r\n    mapping(address => uint256) balances;\r\n    mapping(address => mapping (address => uint256)) allowed;\r\n\r\n    function balanceOf(address _owner) constant returns (uint);\r\n    function transfer(address _to, uint _value) returns (bool);\r\n    function transferFrom(address _from, address _to, uint _value) returns (bool);\r\n    function approve(address _spender, uint _value) returns (bool);\r\n    function allowance(address _owner, address _spender) constant returns (uint);\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n\r\n} // Functions of ERC20 standard\r\n\r\n\r\n\r\ncontract EristicaICO {\r\n    using SafeMath for uint;\r\n\r\n    uint public constant Tokens_For_Sale = 482500000*1e18; // Tokens for Sale (HardCap)\r\n\r\n    uint public Rate_Eth = 458; // Rate USD per ETH\r\n    uint public Token_Price = 50 * Rate_Eth; // ERT per ETH\r\n    uint public Sold = 0; //Sold tokens\r\n\r\n\r\n    event LogStartICO();\r\n    event LogPauseICO();\r\n    event LogFinishICO(address bountyFund, address advisorsFund, address teamFund, address challengeFund);\r\n    event LogBuyForInvestor(address investor, uint ertValue, string txHash);\r\n    event LogReplaceToken(address investor, uint ertValue);\r\n\r\n    ERT public ert = new ERT(this);\r\n    Presale public presale;\r\n\r\n    address public Company;\r\n    address public BountyFund;\r\n    address public AdvisorsFund;\r\n    address public TeamFund;\r\n    address public ChallengeFund;\r\n\r\n    address public Manager; // Manager controls contract\r\n    address public Controller_Address1; // First address that is used to buy tokens for other cryptos\r\n    address public Controller_Address2; // Second address that is used to buy tokens for other cryptos\r\n    address public Controller_Address3; // Third address that is used to buy tokens for other cryptos\r\n    modifier managerOnly { require(msg.sender == Manager); _; }\r\n    modifier controllersOnly { require((msg.sender == Controller_Address1) || (msg.sender == Controller_Address2) || (msg.sender == Controller_Address3)); _; }\r\n\r\n    uint bountyPart = 150; // 1.5% of TotalSupply for BountyFund\r\n    uint advisorsPart = 389; //3,89% of TotalSupply for AdvisorsFund\r\n    uint teamPart = 1000; //10% of TotalSupply for TeamFund\r\n    uint challengePart = 1000; //10% of TotalSupply for ChallengeFund\r\n    uint icoAndPOfPart = 7461; // 74,61% of TotalSupply for PublicICO and PrivateOffer\r\n    enum StatusICO { Created, Started, Paused, Finished }\r\n    StatusICO statusICO = StatusICO.Created;\r\n\r\n\r\n    function EristicaICO(address _presale, address _Company, address _BountyFund, address _AdvisorsFund, address _TeamFund, address _ChallengeFund, address _Manager, address _Controller_Address1, address _Controller_Address2, address _Controller_Address3){\r\n       presale = Presale(_presale);\r\n       Company = _Company;\r\n       BountyFund = _BountyFund;\r\n       AdvisorsFund = _AdvisorsFund;\r\n       TeamFund = _TeamFund;\r\n       ChallengeFund = _ChallengeFund;\r\n       Manager = _Manager;\r\n       Controller_Address1 = _Controller_Address1;\r\n       Controller_Address2 = _Controller_Address2;\r\n       Controller_Address3 = _Controller_Address3;\r\n    }\r\n\r\n// function for changing rate of ETH and price of token\r\n\r\n\r\n    function setRate(uint _RateEth) external managerOnly {\r\n       Rate_Eth = _RateEth;\r\n       Token_Price = 50*Rate_Eth;\r\n    }\r\n\r\n\r\n//ICO status functions\r\n\r\n    function startIco() external managerOnly {\r\n       require(statusICO == StatusICO.Created || statusICO == StatusICO.Paused);\r\n       LogStartICO();\r\n       statusICO = StatusICO.Started;\r\n    }\r\n\r\n    function pauseIco() external managerOnly {\r\n       require(statusICO == StatusICO.Started);\r\n       statusICO = StatusICO.Paused;\r\n       LogPauseICO();\r\n    }\r\n\r\n\r\n    function finishIco() external managerOnly { // Funds for minting of tokens\r\n\r\n       require(statusICO == StatusICO.Started);\r\n\r\n       uint alreadyMinted = ert.totalSupply(); //=PublicICO+PrivateOffer\r\n       uint totalAmount = alreadyMinted * 10000 / icoAndPOfPart;\r\n\r\n\r\n       ert.mint(BountyFund, bountyPart * totalAmount / 10000); // 1.5% for Bounty\r\n       ert.mint(AdvisorsFund, advisorsPart * totalAmount / 10000); // 3.89% for Advisors\r\n       ert.mint(TeamFund, teamPart * totalAmount / 10000); // 10% for Eristica team\r\n       ert.mint(ChallengeFund, challengePart * totalAmount / 10000); // 10% for Challenge Fund\r\n\r\n       ert.defrost();\r\n\r\n       statusICO = StatusICO.Finished;\r\n       LogFinishICO(BountyFund, AdvisorsFund, TeamFund, ChallengeFund);\r\n    }\r\n\r\n// function that buys tokens when investor sends ETH to address of ICO\r\n    function() external payable {\r\n\r\n       buy(msg.sender, msg.value * Token_Price);\r\n    }\r\n\r\n// function for buying tokens to investors who paid in other cryptos\r\n\r\n    function buyForInvestor(address _investor, uint _ertValue, string _txHash) external controllersOnly {\r\n       buy(_investor, _ertValue);\r\n       LogBuyForInvestor(_investor, _ertValue, _txHash);\r\n    }\r\n\r\n//function for buying tokens for presale investors\r\n\r\n    function replaceToken(address _investor) managerOnly{\r\n         require(statusICO != StatusICO.Finished);\r\n         uint spertTokens = presale.balanceOf(_investor);\r\n         require(spertTokens > 0);\r\n         presale.burnTokens(_investor);\r\n         ert.mint(_investor, spertTokens);\r\n\r\n         LogReplaceToken(_investor, spertTokens);\r\n    }\r\n// internal function for buying tokens\r\n\r\n    function buy(address _investor, uint _ertValue) internal {\r\n       require(statusICO == StatusICO.Started);\r\n       require(_ertValue > 0);\r\n       require(Sold + _ertValue <= Tokens_For_Sale);\r\n       ert.mint(_investor, _ertValue);\r\n       Sold = Sold.add(_ertValue);\r\n    }\r\n\r\n\r\n\r\n//function to withdraw ETH from smart contract\r\n\r\n    function withdrawEther(uint256 _value) external managerOnly {\r\n       require(statusICO == StatusICO.Finished);\r\n       Company.transfer(_value);\r\n    }\r\n\r\n}\r\n\r\ncontract ERT  is ERC20 {\r\n    using SafeMath for uint;\r\n\r\n    string public name = \"Eristica TOKEN\";\r\n    string public symbol = \"ERT\";\r\n    uint public decimals = 18;\r\n\r\n    address public ico;\r\n\r\n    event Burn(address indexed from, uint256 value);\r\n\r\n    bool public tokensAreFrozen = true;\r\n\r\n    modifier icoOnly { require(msg.sender == ico); _; }\r\n\r\n    function ERT(address _ico) {\r\n       ico = _ico;\r\n    }\r\n\r\n\r\n    function mint(address _holder, uint _value) external icoOnly {\r\n       require(_value != 0);\r\n       balances[_holder] = balances[_holder].add(_value);\r\n       totalSupply = totalSupply.add(_value);\r\n       Transfer(0x0, _holder, _value);\r\n    }\r\n\r\n\r\n    function defrost() external icoOnly {\r\n       tokensAreFrozen = false;\r\n    }\r\n\r\n    function burn(uint256 _value) {\r\n       require(!tokensAreFrozen);\r\n       balances[msg.sender] = balances[msg.sender].sub(_value);\r\n       totalSupply = totalSupply.sub(_value);\r\n       Burn(msg.sender, _value);\r\n    }\r\n\r\n\r\n    function balanceOf(address _owner) constant returns (uint256) {\r\n         return balances[_owner];\r\n    }\r\n\r\n\r\n    function transfer(address _to, uint256 _amount) returns (bool) {\r\n        require(!tokensAreFrozen);\r\n        balances[msg.sender] = balances[msg.sender].sub(_amount);\r\n        balances[_to] = balances[_to].add(_amount);\r\n        Transfer(msg.sender, _to, _amount);\r\n        return true;\r\n    }\r\n\r\n\r\n    function transferFrom(address _from, address _to, uint256 _amount) returns (bool) {\r\n        require(!tokensAreFrozen);\r\n        balances[_from] = balances[_from].sub(_amount);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\r\n        balances[_to] = balances[_to].add(_amount);\r\n        Transfer(_from, _to, _amount);\r\n        return true;\r\n     }\r\n\r\n\r\n    function approve(address _spender, uint256 _amount) returns (bool) {\r\n        // To change the approve amount you first have to reduce the addresses`\r\n        //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n        //  already 0 to mitigate the race condition described here:\r\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n        require((_amount == 0) || (allowed[msg.sender][_spender] == 0));\r\n\r\n        allowed[msg.sender][_spender] = _amount;\r\n        Approval(msg.sender, _spender, _amount);\r\n        return true;\r\n    }\r\n\r\n\r\n    function allowance(address _owner, address _spender) constant returns (uint256) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_investor\",\"type\":\"address\"},{\"name\":\"_ertValue\",\"type\":\"uint256\"},{\"name\":\"_txHash\",\"type\":\"string\"}],\"name\":\"buyForInvestor\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Tokens_For_Sale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Controller_Address1\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_RateEth\",\"type\":\"uint256\"}],\"name\":\"setRate\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Controller_Address3\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"withdrawEther\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BountyFund\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TeamFund\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Company\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Token_Price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Manager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startIco\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ert\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Controller_Address2\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pauseIco\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_investor\",\"type\":\"address\"}],\"name\":\"replaceToken\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Sold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Rate_Eth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishIco\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ChallengeFund\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"AdvisorsFund\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presale\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_presale\",\"type\":\"address\"},{\"name\":\"_Company\",\"type\":\"address\"},{\"name\":\"_BountyFund\",\"type\":\"address\"},{\"name\":\"_AdvisorsFund\",\"type\":\"address\"},{\"name\":\"_TeamFund\",\"type\":\"address\"},{\"name\":\"_ChallengeFund\",\"type\":\"address\"},{\"name\":\"_Manager\",\"type\":\"address\"},{\"name\":\"_Controller_Address1\",\"type\":\"address\"},{\"name\":\"_Controller_Address2\",\"type\":\"address\"},{\"name\":\"_Controller_Address3\",\"type\":\"address\"}],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"LogStartICO\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"LogPauseICO\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"bountyFund\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"advisorsFund\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"teamFund\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"challengeFund\",\"type\":\"address\"}],\"name\":\"LogFinishICO\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ertValue\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"txHash\",\"type\":\"string\"}],\"name\":\"LogBuyForInvestor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ertValue\",\"type\":\"uint256\"}],\"name\":\"LogReplaceToken\",\"type\":\"event\"}]","ContractName":"EristicaICO","CompilerVersion":"v0.4.15+commit.bbb8e64f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000965c341c76c29dc233d18a467d72824546a3687b000000000000000000000000c421d988b3a87b32236cc607d388cd129b9041cf0000000000000000000000005b0d39a7b6d9ef681dab9d6a829752ee33981762000000000000000000000000ffb0c89c6bb31ce064a7480c0d79baaefc153e0600000000000000000000000059dd7f6829b46c339b81a26656c76ec66032d1be000000000000000000000000d88dff2a7c5ea9d275834f60cea5d1ef1dde804b0000000000000000000000003fa135a58eced0ca69f9783c40ee50a50b5f33cd000000000000000000000000ac092f6a7462edf8768dad69b5bf102cffdbd30d00000000000000000000000021cf69a2b023b644241e5e93f5848ee602d1e7b5000000000000000000000000df1dcc376c94c1e64c20a04f1891c29563e294e1","Library":"","SwarmSource":"bzzr://d3f2de1968c4e6c3ee5fc0de6d8d7952c0c7610d844c27b91e5b54bf6f7b0236"}]}