{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.16;\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20 {\r\n    uint256 public totalSupply;\r\n    function balanceOf(address who) public constant returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    function allowance(address owner, address spender) public constant returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    mapping(address => bool)  internal owners;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    function Ownable() {\r\n        owners[msg.sender] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owners[msg.sender] == true);\r\n        _;\r\n    }\r\n\r\n    function addOwner(address newAllowed) onlyOwner public {\r\n        owners[newAllowed] = true;\r\n    }\r\n\r\n    function removeOwner(address toRemove) onlyOwner public {\r\n        owners[toRemove] = false;\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BigToken is ERC20, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    string public name = \"Big Token\";\r\n    string public symbol = \"BIG\";\r\n    uint256 public decimals = 18;\r\n    uint256 public mintPerBlock = 333333333333333;\r\n\r\n    struct BigTransaction {\r\n        uint blockNumber;\r\n        uint256 amount;\r\n    }\r\n\r\n    uint public commissionPercent = 10;\r\n    uint256 public totalTransactions = 0;\r\n    bool public enabledMint = true;\r\n    uint256 public totalMembers;\r\n\r\n    mapping(address => mapping (address => uint256)) internal allowed;\r\n    mapping(uint256 => BigTransaction) public transactions;\r\n    mapping(address => uint256) public balances;\r\n    mapping(address => uint) public lastMint;\r\n    mapping(address => bool) invested;\r\n    mapping(address => bool) public confirmed;\r\n    mapping(address => bool) public members;\r\n\r\n    event Mint(address indexed to, uint256 amount);\r\n    event Commission(uint256 amount);\r\n\r\n    /**\r\n     * @dev transfer token for a specified address\r\n     * @param _to The address to transfer to.\r\n     * @param _value The amount to be transferred.\r\n     */\r\n    function transfer(address _to, uint256 _value) public returns (bool)  {\r\n        require(_to != address(0));\r\n\r\n        uint256 currentBalance = balances[msg.sender];\r\n        uint256 balanceToMint = getBalanceToMint(msg.sender);\r\n        uint256 commission = _value * commissionPercent / 100;\r\n        require((_value + commission) <= (currentBalance + balanceToMint));\r\n\r\n        if(balanceToMint > 0){\r\n            currentBalance = currentBalance.add(balanceToMint);\r\n            Mint(msg.sender, balanceToMint);\r\n            lastMint[msg.sender] = block.number;\r\n            totalSupply = totalSupply.add(balanceToMint);\r\n        }\r\n        \r\n        \r\n\r\n        if(block.number == transactions[totalTransactions - 1].blockNumber) {\r\n            transactions[totalTransactions - 1].amount = transactions[totalTransactions - 1].amount + (commission / totalMembers);\r\n        } else {\r\n            uint transactionID = totalTransactions++;\r\n            transactions[transactionID] = BigTransaction(block.number, commission / totalMembers);\r\n        }\r\n        \r\n        balances[msg.sender] = currentBalance.sub(_value + commission);\r\n        balances[_to] = balances[_to].add(_value);\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another\r\n     * @param _from address The address which you want to send tokens from\r\n     * @param _to address The address which you want to transfer to\r\n     * @param _value uint256 the amount of tokens to be transferred\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= allowed[_from][msg.sender]);\r\n\r\n        uint256 currentBalance = balances[_from];\r\n        uint256 balanceToMint = getBalanceToMint(_from);\r\n        uint256 commission = _value * commissionPercent / 100;\r\n        require((_value + commission) <= (currentBalance + balanceToMint));\r\n\r\n        if(balanceToMint > 0){\r\n            currentBalance = currentBalance.add(balanceToMint);\r\n            Mint(_from, balanceToMint);\r\n            lastMint[_from] = block.number;\r\n            totalSupply = totalSupply.add(balanceToMint);\r\n        }\r\n        \r\n        \r\n        if(block.number == transactions[totalTransactions - 1].blockNumber) {\r\n            transactions[totalTransactions - 1].amount = transactions[totalTransactions - 1].amount + (commission / totalMembers);\r\n        } else {\r\n            uint transactionID = totalTransactions++;\r\n            transactions[transactionID] = BigTransaction(block.number, commission / totalMembers);\r\n        }\r\n\r\n        balances[_from] = currentBalance.sub(_value + commission);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Gets the balance of the specified address.\r\n     * @param _owner The address to query the the balance of.\r\n     * @return An uint256 representing the amount owned by the passed address.\r\n     */\r\n    function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n        if(lastMint[_owner] != 0){\r\n            return balances[_owner] + getBalanceToMint(_owner);\r\n        } else {\r\n            return balances[_owner];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n     *\r\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _value The amount of tokens to be spent.\r\n     */\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n     * @param _owner address The address which owns the funds.\r\n     * @param _spender address The address which will spend the funds.\r\n     * @return A uint256 specifying the amount of tokens still available for the spender.\r\n     */\r\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    /**\r\n     * approve should be called when allowed[_spender] == 0. To increment\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     */\r\n    function increaseApproval(address _spender, uint _addedValue) public returns (bool success) {\r\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool success) {\r\n        uint oldValue = allowed[msg.sender][_spender];\r\n        if (_subtractedValue > oldValue) {\r\n            allowed[msg.sender][_spender] = 0;\r\n        } else {\r\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n        }\r\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n    function refreshBalance(address _address) public returns (uint256){\r\n        if(!members[_address]) return;\r\n        \r\n        uint256 balanceToMint = getBalanceToMint(_address);\r\n        totalSupply = totalSupply.add(balanceToMint);\r\n        balances[_address] = balances[_address] + balanceToMint;\r\n        lastMint[_address] = block.number;\r\n    }\r\n\r\n    function mint(address _to, uint256 _amount) onlyOwner public returns (bool) {\r\n        totalSupply = totalSupply.add(_amount);\r\n        balances[_to] = balances[_to].add(_amount);\r\n        Mint(_to, _amount);\r\n        Transfer(0x0, _to, _amount);\r\n        return true;\r\n    }\r\n\r\n    function getBalanceToMint(address _address) public constant returns (uint256){\r\n        if(!enabledMint) return 0;\r\n        if(!members[_address]) return 0;\r\n        if(lastMint[_address] == 0) return 0;\r\n\r\n        uint256 balanceToMint = (block.number - lastMint[_address]) * mintPerBlock;\r\n        \r\n        for(uint i = totalTransactions - 1; i >= 0; i--){\r\n            if(block.number == transactions[i].blockNumber) continue;\r\n            if(transactions[i].blockNumber < lastMint[_address]) return balanceToMint;\r\n            if(transactions[i].amount > mintPerBlock) {\r\n                balanceToMint = balanceToMint.add(transactions[i].amount - mintPerBlock);\r\n            }\r\n        }\r\n\r\n        return balanceToMint;\r\n    }\r\n\r\n    function stopMint() public onlyOwner{\r\n        enabledMint = false;\r\n    }\r\n\r\n    function startMint() public onlyOwner{\r\n        enabledMint = true;\r\n    }\r\n\r\n    function confirm(address _address) onlyOwner public {\r\n        confirmed[_address] = true;\r\n        if(!members[_address] && invested[_address]){\r\n            members[_address] = true;\r\n            totalMembers = totalMembers.add(1);\r\n            setLastMint(_address, block.number);\r\n        }\r\n    }\r\n\r\n    function unconfirm(address _address) onlyOwner public {\r\n        confirmed[_address] = false;\r\n        if(members[_address]){\r\n            members[_address] = false;\r\n            totalMembers = totalMembers.sub(1);\r\n        }\r\n    }\r\n    \r\n    function setLastMint(address _address, uint _block) onlyOwner public{\r\n        lastMint[_address] = _block;\r\n    }\r\n\r\n    function setCommission(uint _commission) onlyOwner public{\r\n        commissionPercent = _commission;\r\n    }\r\n\r\n    function setMintPerBlock(uint256 _mintPerBlock) onlyOwner public{\r\n        mintPerBlock = _mintPerBlock;\r\n    }\r\n\r\n    function setInvested(address _address) onlyOwner public{\r\n        invested[_address] = true;\r\n        if(confirmed[_address] && !members[_address]){\r\n            members[_address] = true;\r\n            totalMembers = totalMembers.add(1);\r\n            refreshBalance(_address);\r\n        }\r\n    }\r\n\r\n    function isMember(address _address) public constant returns(bool){\r\n        return members[_address];\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract Crowdsale is Ownable{\r\n\r\n    using SafeMath for uint;\r\n\r\n    BigToken public token;\r\n    uint public collected;\r\n    address public benefeciar;\r\n\r\n    function Crowdsale(address _token, address _benefeciar){\r\n        token = BigToken(_token);\r\n        benefeciar = _benefeciar;\r\n        owners[msg.sender] = true;\r\n    }\r\n\r\n    function () payable {\r\n        require(msg.value >= 0.01 ether);\r\n        uint256 amount = msg.value / 0.01 ether * 1 ether;\r\n\r\n        if(msg.value >= 100 ether && msg.value < 500 ether) amount = amount * 11 / 10;\r\n        if(msg.value >= 500 ether && msg.value < 1000 ether) amount = amount * 12 / 10;\r\n        if(msg.value >= 1000 ether && msg.value < 5000 ether) amount = amount * 13 / 10;\r\n        if(msg.value >= 5000 ether && msg.value < 10000 ether) amount = amount * 14 / 10;\r\n        if(msg.value >= 10000 ether) amount = amount * 15 / 10;\r\n\r\n        collected = collected.add(msg.value);\r\n\r\n        token.mint(msg.sender, amount);\r\n        token.setInvested(msg.sender);\r\n    }\r\n\r\n\r\n    function confirmAddress(address _address) public onlyOwner{\r\n        token.confirm(_address);\r\n    }\r\n\r\n    function unconfirmAddress(address _address) public onlyOwner{\r\n        token.unconfirm(_address);\r\n    }\r\n\r\n    function setBenefeciar(address _benefeciar) public onlyOwner{\r\n        benefeciar = _benefeciar;\r\n    }\r\n\r\n    function withdraw() public onlyOwner{\r\n        benefeciar.transfer(this.balance);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_benefeciar\",\"type\":\"address\"}],\"name\":\"setBenefeciar\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"confirmAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"toRemove\",\"type\":\"address\"}],\"name\":\"removeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"benefeciar\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAllowed\",\"type\":\"address\"}],\"name\":\"addOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"collected\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"unconfirmAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_benefeciar\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Crowdsale","CompilerVersion":"v0.4.17+commit.bdeb9e52","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000007e76a4c93ea197cb578fef37d046972890df61b000000000000000000000000b40060deae8fd58acc4ad97ef28e924a9dfd0be3","Library":"","SwarmSource":"bzzr://83c941dcdf336b9a53e22fc19d97da89f0286ffd04190de23b486c6304c2e566"}]}