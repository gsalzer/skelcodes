{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n// File: zeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/lifecycle/Pausable.sol\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    Unpause();\r\n  }\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/ERC20Basic.sol\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/BasicToken.sol\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/ERC20.sol\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/StandardToken.sol\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/PausableToken.sol\r\n\r\n/**\r\n * @title Pausable token\r\n *\r\n * @dev StandardToken modified with pausable transfers.\r\n **/\r\n\r\ncontract PausableToken is StandardToken, Pausable {\r\n\r\n  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\r\n    return super.transfer(_to, _value);\r\n  }\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\r\n    return super.transferFrom(_from, _to, _value);\r\n  }\r\n\r\n  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\r\n    return super.approve(_spender, _value);\r\n  }\r\n\r\n  function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\r\n    return super.increaseApproval(_spender, _addedValue);\r\n  }\r\n\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\r\n    return super.decreaseApproval(_spender, _subtractedValue);\r\n  }\r\n}\r\n\r\n// File: contracts/BearToken.sol\r\n\r\n/// @title BearToken Contract\r\n/// Just For Fun\r\n/// @author xiaohong(http://xiaohong.me)\r\ncontract BearToken is PausableToken {\r\n    using SafeMath for uint;\r\n\r\n    /// Constant token specific fields\r\n    string public constant name = \"BearToken\";\r\n    string public constant symbol = \"BBC\";\r\n    uint public constant decimals = 18;\r\n\r\n    /// bear total tokens supply\r\n    uint public maxTotalSupply;\r\n\r\n    /// Fields that are only changed in constructor\r\n    address public minter; \r\n\r\n    /*\r\n     * MODIFIERS\r\n     */\r\n    modifier onlyMinter {\r\n        assert(msg.sender == minter);\r\n        _;\r\n    }\r\n\r\n    modifier isLaterThan (uint x){\r\n        assert(now > x);\r\n        _;\r\n    }\r\n\r\n    modifier maxTokenAmountNotReached (uint amount){\r\n        assert(totalSupply.add(amount) <= maxTotalSupply);\r\n        _;\r\n    }\r\n\r\n    modifier validAddress( address addr ) {\r\n        require(addr != address(0x0));\r\n        require(addr != address(this));\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * CONSTRUCTOR \r\n     * \r\n     * @dev Initialize the Bear Token\r\n     * @param _minter The BearCrowdSale Contract \r\n     * @param _admin owner of the contract\r\n     * @param _maxTotalSupply total supply token    \r\n     */\r\n    function BearToken(address _minter, address _admin, uint _maxTotalSupply) \r\n        public \r\n        validAddress(_admin)\r\n        validAddress(_minter)\r\n        {\r\n        minter = _minter;\r\n        maxTotalSupply = _maxTotalSupply;\r\n        transferOwnership(_admin);\r\n    }\r\n\r\n    /**\r\n     * EXTERNAL FUNCTION \r\n     * \r\n     * @dev BearCrowdSale contract instance mint token\r\n     * @param receipent The destination account owned mint tokens    \r\n     * @param amount The amount of mint token\r\n     * be sent to this address.\r\n     */\r\n    function mint(address receipent, uint amount)\r\n        external\r\n        onlyMinter\r\n        maxTokenAmountNotReached(amount)\r\n        returns (bool)\r\n    {\r\n        balances[receipent] = balances[receipent].add(amount);\r\n        totalSupply = totalSupply.add(amount);\r\n        return true;\r\n    }\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/SafeERC20.sol\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\r\n    assert(token.transfer(to, value));\r\n  }\r\n\r\n  function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\r\n    assert(token.transferFrom(from, to, value));\r\n  }\r\n\r\n  function safeApprove(ERC20 token, address spender, uint256 value) internal {\r\n    assert(token.approve(spender, value));\r\n  }\r\n}\r\n\r\n// File: contracts/TokenTimelock.sol\r\n\r\n/**\r\n * @title TokenTimelock\r\n * @dev TokenTimelock is a token holder contract that will allow a\r\n * beneficiary to extract the tokens after a given release time\r\n */\r\ncontract TokenTimelock {\r\n  using SafeERC20 for ERC20Basic;\r\n\r\n  // ERC20 basic token contract being held\r\n  ERC20Basic public token;\r\n\r\n  // beneficiary of tokens after they are released\r\n  address public beneficiary;\r\n\r\n  // timestamp when token release is enabled\r\n  uint public releaseTime;\r\n\r\n  function TokenTimelock(ERC20Basic _token, address _beneficiary, uint _releaseTime) public {\r\n    require(_releaseTime > now);\r\n    token = _token;\r\n    beneficiary = _beneficiary;\r\n    releaseTime = _releaseTime;\r\n  }\r\n\r\n  /**\r\n   * @notice Transfers tokens held by timelock to beneficiary.\r\n   */\r\n  function release() public {\r\n    require(now >= releaseTime);\r\n\r\n    uint256 amount = token.balanceOf(this);\r\n    require(amount > 0);\r\n\r\n    token.safeTransfer(beneficiary, amount);\r\n  }\r\n}\r\n\r\n// File: contracts/BearCrowdSale.sol\r\n\r\n/// @title BearCrowdSale Contract\r\n/// Just For Fun\r\n/// @author xiaohong(http://xiaohong.me)\r\ncontract BearCrowdSale is Pausable {\r\n    using SafeMath for uint;\r\n\r\n    /// Constant fields\r\n    /// total tokens supply\r\n    uint public constant TOTAL_SUPPLY = 1000000000000 ether;\r\n    uint public constant MAX_SALE_DURATION = 3 years;\r\n\r\n    // release lock token after time\r\n    uint public constant LOCK_TIME =  1 days;\r\n\r\n    /// Exchange rates for first phase\r\n    uint public constant PRICE_RATE_FIRST = 10000000;\r\n    /// Exchange rates for second phase\r\n    uint public constant PRICE_RATE_SECOND = 5000000;\r\n    /// Exchange rates for last phase\r\n    uint public constant PRICE_RATE_LAST = 2500000;\r\n\r\n\r\n    uint256 public minBuyLimit = 0.01 ether;\r\n    uint256 public maxBuyLimit = 100 ether;\r\n\r\n    uint public constant LOCK_STAKE = 50;            \r\n    uint public constant OPEN_SALE_STAKE = 25;\r\n    uint public constant TEAM_STAKE = 25;\r\n    uint public constant DIVISOR_STAKE = 100;\r\n\r\n    // max open sale tokens\r\n    uint public constant MAX_OPEN_SOLD = TOTAL_SUPPLY * OPEN_SALE_STAKE / DIVISOR_STAKE;\r\n    uint public constant STAKE_MULTIPLIER = TOTAL_SUPPLY / DIVISOR_STAKE;\r\n\r\n    /// All deposited ETH will be instantly forwarded to this address.\r\n    address public wallet;\r\n    address public lockAddress;\r\n    address public teamAddress;\r\n    /// Contribution start time\r\n    uint public startTime;\r\n    /// Contribution end time\r\n    uint public endTime;\r\n\r\n    /// Fields that can be changed by functions\r\n    /// Accumulator for open sold tokens\r\n    uint public openSoldTokens;\r\n    /// ERC20 compilant bear token contact instance\r\n    BearToken public bearToken; \r\n\r\n    // lock token\r\n    TokenTimelock public tokenTimelock; \r\n\r\n    /*\r\n     * EVENTS\r\n     */\r\n    event NewSale(address indexed destAddress, uint ethCost, uint gotTokens);\r\n    event NewWallet(address onwer, address oldWallet, address newWallet);\r\n\r\n    modifier notEarlierThan(uint x) {\r\n        require(now >= x);\r\n        _;\r\n    }\r\n\r\n    modifier earlierThan(uint x) {\r\n        require(now < x);\r\n        _;\r\n    }\r\n\r\n    modifier ceilingNotReached() {\r\n        require(openSoldTokens < MAX_OPEN_SOLD);\r\n        _;\r\n    }  \r\n\r\n    modifier isSaleEnded() {\r\n        require(now > endTime || openSoldTokens >= MAX_OPEN_SOLD);\r\n        _;\r\n    }\r\n\r\n    modifier validAddress( address addr ) {\r\n        require(addr != address(0x0));\r\n        require(addr != address(this));\r\n        _;\r\n    }\r\n\r\n    function BearCrowdSale (address _admin, \r\n        address _wallet, \r\n        address _lockAddress,\r\n        address _teamAddress\r\n        ) public \r\n        validAddress(_admin) \r\n        validAddress(_wallet) \r\n        validAddress(_lockAddress) \r\n        validAddress(_teamAddress)\r\n        {\r\n\r\n        wallet = _wallet;\r\n        lockAddress = _lockAddress;  \r\n        teamAddress = _teamAddress;\r\n        startTime = now;\r\n        endTime = startTime + MAX_SALE_DURATION;\r\n\r\n        openSoldTokens = 0;\r\n        /// Create bear token contract instance\r\n        bearToken = new BearToken(this, _admin, TOTAL_SUPPLY);\r\n\r\n        tokenTimelock = new TokenTimelock(bearToken, lockAddress, now + LOCK_TIME);\r\n\r\n        /// Reserve tokens according bear rules\r\n        bearToken.mint(tokenTimelock, LOCK_STAKE * STAKE_MULTIPLIER);\r\n        bearToken.mint(teamAddress, TEAM_STAKE * STAKE_MULTIPLIER);\r\n\r\n        transferOwnership(_admin);\r\n    }\r\n\r\n    function setMaxBuyLimit(uint256 limit)\r\n        public\r\n        onlyOwner\r\n        earlierThan(endTime)\r\n    {\r\n        maxBuyLimit = limit;\r\n    }\r\n\r\n    function setMinBuyLimit(uint256 limit)\r\n        public\r\n        onlyOwner\r\n        earlierThan(endTime)\r\n    {\r\n        minBuyLimit = limit;\r\n    }\r\n\r\n    /// @dev Emergency situation\r\n    function setWallet(address newAddress)  external onlyOwner { \r\n        NewWallet(owner, wallet, newAddress);\r\n        wallet = newAddress; \r\n    }\r\n\r\n    /// @return true if sale not ended, false otherwise.\r\n    function saleNotEnd() constant internal returns (bool) {\r\n        return now < endTime && openSoldTokens < MAX_OPEN_SOLD;\r\n    }\r\n\r\n    /**\r\n     * Fallback function \r\n     * \r\n     * @dev If anybody sends Ether directly to this  contract, consider he is getting bear token\r\n     */\r\n    function () public payable {\r\n      buyBBC(msg.sender);\r\n    }\r\n\r\n    /*\r\n     * PUBLIC FUNCTIONS\r\n     */\r\n    /// @dev Exchange msg.value ether to bear for account recepient\r\n    /// @param receipient bear tokens receiver\r\n    function buyBBC(address receipient) \r\n        public \r\n        payable \r\n        whenNotPaused  \r\n        ceilingNotReached \r\n        earlierThan(endTime)\r\n        validAddress(receipient)\r\n        returns (bool) \r\n    {\r\n        require(msg.value >= minBuyLimit);\r\n        require(msg.value <= maxBuyLimit);\r\n        // Do not allow contracts to game the system\r\n        require(!isContract(msg.sender));        \r\n\r\n        require(tx.gasprice <= 50000000000 wei);\r\n        \r\n        doBuy(receipient);\r\n\r\n        return true;\r\n    }\r\n\r\n\r\n    /// @dev Buy bear token normally\r\n    function doBuy(address receipient) internal {\r\n        // protect partner quota in stage one\r\n        uint tokenAvailable = MAX_OPEN_SOLD.sub(openSoldTokens);\r\n        require(tokenAvailable > 0);\r\n        uint toFund;\r\n        uint toCollect;\r\n        (toFund, toCollect) = costAndBuyTokens(tokenAvailable);\r\n        if (toFund > 0) {\r\n            require(bearToken.mint(receipient, toCollect));         \r\n            wallet.transfer(toFund);\r\n            openSoldTokens = openSoldTokens.add(toCollect);\r\n            NewSale(receipient, toFund, toCollect);             \r\n        }\r\n\r\n        // not enough token sale, just return eth\r\n        uint toReturn = msg.value.sub(toFund);\r\n        if (toReturn > 0) {\r\n            msg.sender.transfer(toReturn);\r\n        }\r\n    }\r\n\r\n    /// CONSTANT METHODS\r\n    /// @dev Get current exchange rate\r\n    function priceRate() public view returns (uint) {\r\n        if (startTime <= now && now < startTime + 1 years ) {\r\n            return  PRICE_RATE_FIRST;\r\n        }else if (startTime + 1 years <= now && now < startTime + 2 years ) {\r\n            return PRICE_RATE_SECOND;\r\n        }else if (startTime + 2 years <= now && now < endTime) {\r\n            return PRICE_RATE_LAST;\r\n        }else {\r\n            assert(false);\r\n        }\r\n        return now;\r\n    }\r\n\r\n    /// @dev Utility function for calculate available tokens and cost ethers\r\n    function costAndBuyTokens(uint availableToken) constant internal returns (uint costValue, uint getTokens) {\r\n        // all conditions has checked in the caller functions\r\n        uint exchangeRate = priceRate();\r\n        getTokens = exchangeRate * msg.value;\r\n\r\n        if (availableToken >= getTokens) {\r\n            costValue = msg.value;\r\n        } else {\r\n            costValue = availableToken / exchangeRate;\r\n            getTokens = availableToken;\r\n        }\r\n    }\r\n\r\n    /// @dev Internal function to determine if an address is a contract\r\n    /// @param _addr The address being queried\r\n    /// @return True if `_addr` is a contract\r\n    function isContract(address _addr) constant internal returns(bool) {\r\n        uint size;\r\n        if (_addr == 0) {\r\n            return false;\r\n        }\r\n\r\n        assembly {\r\n            size := extcodesize(_addr)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    // release lock token \r\n    function releaseLockToken()  external onlyOwner {\r\n        tokenTimelock.release();\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"PRICE_RATE_LAST\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"LOCK_STAKE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_OPEN_SOLD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TEAM_STAKE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"releaseLockToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DIVISOR_STAKE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"LOCK_TIME\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxBuyLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"setMaxBuyLimit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRICE_RATE_SECOND\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOTAL_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"OPEN_SALE_STAKE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"setMinBuyLimit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bearToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"openSoldTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minBuyLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenTimelock\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRICE_RATE_FIRST\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"priceRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"setWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_SALE_DURATION\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"receipient\",\"type\":\"address\"}],\"name\":\"buyBBC\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"STAKE_MULTIPLIER\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_admin\",\"type\":\"address\"},{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_lockAddress\",\"type\":\"address\"},{\"name\":\"_teamAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"destAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ethCost\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"gotTokens\",\"type\":\"uint256\"}],\"name\":\"NewSale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"onwer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"oldWallet\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"NewWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"BearCrowdSale","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000596c3ff477f6069e4c9fff48e0767661be0fee4300000000000000000000000000a15056034ceffe6b0f3b8ac9c5d75fd20a704600000000000000000000000000a49ba5e0ca4feb95855e54554a52f080554b1b00000000000000000000000000461d3fae7a25d748f7adaaa504d1a590d35dbe","Library":"","SwarmSource":"bzzr://7523a0b1045adf047b00eebcc59ca672810522a184d4a5ae3b02bc6750d6a6d5"}]}