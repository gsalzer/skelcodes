{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.18;\r\n\r\n\r\ncontract CrowdsaleParameters {\r\n    // Vesting time stamps:\r\n    // 1534672800 = August 19, 2018. 180 days from February 20, 2018. 10:00:00 GMT\r\n    // 1526896800 = May 21, 2018. 90 days from February 20, 2018. 10:00:00 GMT\r\n    uint32 internal vestingTime90Days = 1526896800;\r\n    uint32 internal vestingTime180Days = 1534672800;\r\n\r\n    uint256 internal constant presaleStartDate = 1513072800; // Dec-12-2017 10:00:00 GMT\r\n    uint256 internal constant presaleEndDate = 1515751200; // Jan-12-2018 10:00:00 GMT\r\n    uint256 internal constant generalSaleStartDate = 1516442400; // Jan-20-2018 00:00:00 GMT\r\n    uint256 internal constant generalSaleEndDate = 1519120800; // Feb-20-2018 00:00:00 GMT\r\n\r\n    struct AddressTokenAllocation {\r\n        address addr;\r\n        uint256 amount;\r\n        uint256 vestingTS;\r\n    }\r\n\r\n    AddressTokenAllocation internal presaleWallet       = AddressTokenAllocation(0x43C5FB6b419E6dF1a021B9Ad205A18369c19F57F, 100e6, 0);\r\n    AddressTokenAllocation internal generalSaleWallet   = AddressTokenAllocation(0x0635c57CD62dA489f05c3dC755bAF1B148FeEdb0, 550e6, 0);\r\n    AddressTokenAllocation internal wallet1             = AddressTokenAllocation(0xae46bae68D0a884812bD20A241b6707F313Cb03a,  20e6, vestingTime180Days);\r\n    AddressTokenAllocation internal wallet2             = AddressTokenAllocation(0xfe472389F3311e5ea19B4Cd2c9945b6D64732F13,  20e6, vestingTime180Days);\r\n    AddressTokenAllocation internal wallet3             = AddressTokenAllocation(0xE37dfF409AF16B7358Fae98D2223459b17be0B0B,  20e6, vestingTime180Days);\r\n    AddressTokenAllocation internal wallet4             = AddressTokenAllocation(0x39482f4cd374D0deDD68b93eB7F3fc29ae7105db,  10e6, vestingTime180Days);\r\n    AddressTokenAllocation internal wallet5             = AddressTokenAllocation(0x03736d5B560fE0784b0F5c2D0eA76A7F15E5b99e,   5e6, vestingTime180Days);\r\n    AddressTokenAllocation internal wallet6             = AddressTokenAllocation(0xD21726226c32570Ab88E12A9ac0fb2ed20BE88B9,   5e6, vestingTime180Days);\r\n    AddressTokenAllocation internal foundersWallet      = AddressTokenAllocation(0xC66Cbb7Ba88F120E86920C0f85A97B2c68784755,  30e6, vestingTime90Days);\r\n    AddressTokenAllocation internal wallet7             = AddressTokenAllocation(0x24ce108d1975f79B57c6790B9d4D91fC20DEaf2d,   6e6, 0);\r\n    AddressTokenAllocation internal wallet8genesis      = AddressTokenAllocation(0x0125c6Be773bd90C0747012f051b15692Cd6Df31,   5e6, 0);\r\n    AddressTokenAllocation internal wallet9             = AddressTokenAllocation(0xFCF0589B6fa8A3f262C4B0350215f6f0ed2F630D,   5e6, 0);\r\n    AddressTokenAllocation internal wallet10            = AddressTokenAllocation(0x0D016B233e305f889BC5E8A0fd6A5f99B07F8ece,   4e6, 0);\r\n    AddressTokenAllocation internal wallet11bounty      = AddressTokenAllocation(0x68433cFb33A7Fdbfa74Ea5ECad0Bc8b1D97d82E9,  19e6, 0);\r\n    AddressTokenAllocation internal wallet12            = AddressTokenAllocation(0xd620A688adA6c7833F0edF48a45F3e39480149A6,   4e6, 0);\r\n    AddressTokenAllocation internal wallet13rsv         = AddressTokenAllocation(0x8C393F520f75ec0F3e14d87d67E95adE4E8b16B1, 100e6, 0);\r\n    AddressTokenAllocation internal wallet14partners    = AddressTokenAllocation(0x6F842b971F0076C4eEA83b051523d76F098Ffa52,  96e6, 0);\r\n    AddressTokenAllocation internal wallet15lottery     = AddressTokenAllocation(0xcaA48d91D49f5363B2974bb4B2DBB36F0852cf83,   1e6, 0);\r\n\r\n    uint256 public minimumICOCap = 3333;\r\n}\r\n\r\ncontract Owned {\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n    *  Constructor\r\n    *\r\n    *  Sets contract owner to address of constructor caller\r\n    */\r\n    function Owned() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    *  Change Owner\r\n    *\r\n    *  Changes ownership of this contract. Only owner can call this method.\r\n    *\r\n    * @param newOwner - new owner's address\r\n    */\r\n    function changeOwner(address newOwner) onlyOwner public {\r\n        require(newOwner != address(0));\r\n        require(newOwner != owner);\r\n        OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract TKLNToken is Owned, CrowdsaleParameters {\r\n    string public standard = 'Token 0.1';\r\n    string public name = 'Taklimakan';\r\n    string public symbol = 'TKLN';\r\n    uint8 public decimals = 18;\r\n    uint256 public totalSupply = 0;\r\n    bool public transfersEnabled = true;\r\n\r\n    function approveCrowdsale(address _crowdsaleAddress) external;\r\n    function approvePresale(address _presaleAddress) external;\r\n    function balanceOf(address _address) public constant returns (uint256 balance);\r\n    function vestedBalanceOf(address _address) public constant returns (uint256 balance);\r\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n    function approve(address _spender, uint256 _value) public returns (bool success);\r\n    function approve(address _spender, uint256 _currentValue, uint256 _value) public returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n    function toggleTransfers(bool _enable) external;\r\n    function closePresale() external;\r\n    function closeGeneralSale() external;\r\n}\r\n\r\ncontract TaklimakanCrowdsale is Owned, CrowdsaleParameters {\r\n    /* ICO and Pre-ICO Parameters */\r\n    address internal saleWalletAddress;\r\n    uint private tokenMultiplier = 10;\r\n    uint public saleStartTimestamp;\r\n    uint public saleStopTimestamp;\r\n    uint public saleGoal;\r\n    uint8 public stageBonus;\r\n    bool public goalReached = false;\r\n\r\n    /* Token and records */\r\n    TKLNToken private token;\r\n    uint public totalCollected = 0;\r\n    mapping (address => uint256) private investmentRecords;\r\n\r\n    /* Events */\r\n    event TokenSale(address indexed tokenReceiver, uint indexed etherAmount, uint indexed tokenAmount, uint tokensPerEther);\r\n    event FundTransfer(address indexed from, address indexed to, uint indexed amount);\r\n    event Refund(address indexed backer, uint amount);\r\n\r\n    /**\r\n    * Constructor\r\n    *\r\n    * @param _tokenAddress - address of token (deployed before this contract)\r\n    */\r\n    function TaklimakanCrowdsale(address _tokenAddress) public {\r\n        token = TKLNToken(_tokenAddress);\r\n        tokenMultiplier = tokenMultiplier ** token.decimals();\r\n        saleWalletAddress = CrowdsaleParameters.generalSaleWallet.addr;\r\n\r\n        saleStartTimestamp = CrowdsaleParameters.generalSaleStartDate;\r\n        saleStopTimestamp = CrowdsaleParameters.generalSaleEndDate;\r\n\r\n        // Initialize sale goal\r\n        saleGoal = CrowdsaleParameters.generalSaleWallet.amount;\r\n        stageBonus = 1;\r\n    }\r\n\r\n    /**\r\n    * Is sale active\r\n    *\r\n    * @return active - True, if sale is active\r\n    */\r\n    function isICOActive() public constant returns (bool active) {\r\n        active = ((saleStartTimestamp <= now) && (now < saleStopTimestamp) && (!goalReached));\r\n        return active;\r\n    }\r\n\r\n    /**\r\n    *  Process received payment\r\n    *\r\n    *  Determine the integer number of tokens that was purchased considering current\r\n    *  stage, tier bonus, and remaining amount of tokens in the sale wallet.\r\n    *  Transfer purchased tokens to bakerAddress and return unused portion of\r\n    *  ether (change)\r\n    *\r\n    * @param bakerAddress - address that ether was sent from\r\n    * @param amount - amount of Wei received\r\n    */\r\n    function processPayment(address bakerAddress, uint amount) internal {\r\n        require(isICOActive());\r\n\r\n        // Before Metropolis update require will not refund gas, but\r\n        // for some reason require statement around msg.value always throws\r\n        assert(msg.value > 0 finney);\r\n\r\n        // Tell everyone about the transfer\r\n        FundTransfer(bakerAddress, address(this), amount);\r\n\r\n        // Calculate tokens per ETH for this tier\r\n        uint tokensPerEth = 16500;\r\n\r\n        if (amount < 3 ether)\r\n            tokensPerEth = 15000;\r\n        else if (amount < 7 ether)\r\n            tokensPerEth = 15150;\r\n        else if (amount < 15 ether)\r\n            tokensPerEth = 15300;\r\n        else if (amount < 30 ether)\r\n            tokensPerEth = 15450;\r\n        else if (amount < 75 ether)\r\n            tokensPerEth = 15600;\r\n        else if (amount < 150 ether)\r\n            tokensPerEth = 15750;\r\n        else if (amount < 250 ether)\r\n            tokensPerEth = 15900;\r\n        else if (amount < 500 ether)\r\n            tokensPerEth = 16050;\r\n        else if (amount < 750 ether)\r\n            tokensPerEth = 16200;\r\n        else if (amount < 1000 ether)\r\n            tokensPerEth = 16350;\r\n\r\n        tokensPerEth = tokensPerEth * stageBonus;\r\n\r\n        // Calculate token amount that is purchased,\r\n        // truncate to integer\r\n        uint tokenAmount = amount * tokensPerEth / 1e18;\r\n\r\n        // Check that stage wallet has enough tokens. If not, sell the rest and\r\n        // return change.\r\n        uint remainingTokenBalance = token.balanceOf(saleWalletAddress) / tokenMultiplier;\r\n        if (remainingTokenBalance < tokenAmount) {\r\n            tokenAmount = remainingTokenBalance;\r\n            goalReached = true;\r\n        }\r\n\r\n        // Calculate Wei amount that was received in this transaction\r\n        // adjusted to rounding and remaining token amount\r\n        uint acceptedAmount = tokenAmount * 1e18 / tokensPerEth;\r\n\r\n        // Transfer tokens to baker and return ETH change\r\n        token.transferFrom(saleWalletAddress, bakerAddress, tokenAmount * tokenMultiplier);\r\n        TokenSale(bakerAddress, amount, tokenAmount, tokensPerEth);\r\n\r\n        // Return change\r\n        uint change = amount - acceptedAmount;\r\n        if (change > 0) {\r\n            if (bakerAddress.send(change)) {\r\n                FundTransfer(address(this), bakerAddress, change);\r\n            }\r\n            else revert();\r\n        }\r\n\r\n        // Update crowdsale performance\r\n        investmentRecords[bakerAddress] += acceptedAmount;\r\n        totalCollected += acceptedAmount;\r\n    }\r\n\r\n    /**\r\n    *  Transfer ETH amount from contract to owner's address.\r\n    *  Can only be used if ICO is closed\r\n    *\r\n    * @param amount - ETH amount to transfer in Wei\r\n    */\r\n    function safeWithdrawal(uint amount) external onlyOwner {\r\n        require(this.balance >= amount);\r\n        require(!isICOActive());\r\n\r\n        if (owner.send(amount)) {\r\n            FundTransfer(address(this), msg.sender, amount);\r\n        }\r\n    }\r\n\r\n    /**\r\n    *  Default method\r\n    *\r\n    *  Processes all ETH that it receives and credits TKLN tokens to sender\r\n    *  according to current stage bonus\r\n    */\r\n    function () external payable {\r\n        processPayment(msg.sender, msg.value);\r\n    }\r\n\r\n    /**\r\n    *  Kill method\r\n    *\r\n    *  Destructs this contract\r\n    */\r\n    function kill() external onlyOwner {\r\n        require(!isICOActive());\r\n        selfdestruct(owner);\r\n    }\r\n\r\n    /**\r\n    *  Refund\r\n    *\r\n    *  Sends a refund to the sender who calls this method.\r\n    */\r\n    function refund() external {\r\n        require((now > saleStopTimestamp) && (totalCollected < CrowdsaleParameters.minimumICOCap * 1e18));\r\n        require(investmentRecords[msg.sender] > 0);\r\n\r\n        var amountToReturn = investmentRecords[msg.sender];\r\n\r\n        require(this.balance >= amountToReturn);\r\n\r\n        investmentRecords[msg.sender] = 0;\r\n        msg.sender.transfer(amountToReturn);\r\n        Refund(msg.sender, amountToReturn);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"saleStopTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stageBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleStartTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"safeWithdrawal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"goalReached\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimumICOCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleGoal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalCollected\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isICOActive\",\"outputs\":[{\"name\":\"active\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenReceiver\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"etherAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokensPerEther\",\"type\":\"uint256\"}],\"name\":\"TokenSale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FundTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"backer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Refund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"TaklimakanCrowdsale","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000000675DAa94725A528b05A3A88635C03EA964BFA7E","Library":"","SwarmSource":"bzzr://71d98fbfa5b90eb86d074762ca31e800a95dd74eb918299797847789cdf45239"}]}