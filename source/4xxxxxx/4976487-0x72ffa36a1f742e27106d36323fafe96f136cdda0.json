{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks\r\n */\r\ncontract SafeMath {\r\n    function safeMul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a * b;\r\n        require(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function safeDiv(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        require(a == b * c + a % b);\r\n        return c;\r\n    }\r\n\r\n    function safeSub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function safeAdd(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c>=a && c>=b);\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 {\r\n    uint256 public totalSupply;\r\n    function balanceOf(address _owner) public constant returns (uint256 _balance);\r\n    function allowance(address _owner, address _spender) public constant returns (uint256 _allowance);\r\n    function transfer(address _to, uint256 _value) public returns (bool _succes);\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool _succes);\r\n    function approve(address _spender, uint256 _value) public returns (bool _succes);\r\n    \r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n */\r\ncontract StandardToken is ERC20, SafeMath {\r\n    \r\n    mapping (address => uint256) public balanceOf;\r\n    mapping (address => mapping (address => uint256)) public allowance; \r\n    \r\n    function balanceOf(address _owner) public constant returns (uint256){\r\n        return balanceOf[_owner];\r\n    }\r\n    \r\n    function allowance(address _owner, address _spender) public constant returns (uint256){\r\n        return allowance[_owner][_spender];\r\n    }\r\n    \r\n    /**\r\n    * Fix for the ERC20 short address attack\r\n    *\r\n    * http://vessenes.com/the-erc20-short-address-attack-explained/\r\n    */\r\n    modifier onlyPayloadSize(uint size) {\r\n        require(!(msg.data.length < size + 4));\r\n        _;\r\n    }\r\n    \r\n    /*\r\n     * Internal transfer with security checks, \r\n     * only can be called by this contract\r\n     */\r\n    function safeTransfer(address _from, address _to, uint256 _value) internal {\r\n            // Prevent transfer to 0x0 address.\r\n            require(_to != 0x0);\r\n            // Prevent transfer to this contract\r\n            require(_to != address(this));\r\n            // Check if the sender has enough and subtract from the sender by using safeSub\r\n            balanceOf[_from] = safeSub(balanceOf[_from], _value);\r\n            // check for overflows and add the same value to the recipient by using safeAdd\r\n            balanceOf[_to] = safeAdd(balanceOf[_to], _value);\r\n            Transfer(_from, _to, _value);\r\n    }\r\n\r\n    /**\r\n     * @dev Send `_value` tokens to `_to` from your account\r\n     * @param _to address The address which you want to transfer to\r\n     * @param _value uint the amout of tokens to be transfered\r\n     */\r\n    function transfer(address _to, uint256 _value) onlyPayloadSize(2 * 32) public returns (bool) {\r\n        safeTransfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another\r\n     * @param _from address The address which you want to send tokens from\r\n     * @param _to address The address which you want to transfer to\r\n     * @param _value uint the amout of tokens to be transfered\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) onlyPayloadSize(3 * 32) public returns (bool) {\r\n        uint256 _allowance = allowance[_from][msg.sender];\r\n        \r\n        // Check (_value > _allowance) is already done in safeSub(_allowance, _value)\r\n        allowance[_from][msg.sender] = safeSub(_allowance, _value);\r\n        safeTransfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _value The amount of tokens to be spent.\r\n     */\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        // To change the approve amount you first have to reduce the addresses`\r\n        // allowance to zero by calling `approve(_spender, 0)` if it is not\r\n        // already 0 to mitigate the race condition described here:\r\n        // https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n        require((_value == 0) || (allowance[msg.sender][_spender] == 0));\r\n        allowance[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n}\r\n\r\n/**\r\n * Upgrade agent interface inspired by Lunyr.\r\n * \r\n * Upgrade agent transfers tokens to a new contract.\r\n * Upgrade agent itself can be the token contract, or just a middle man contract \r\n * doing the heavy lifting.\r\n */\r\ncontract UpgradeAgent {\r\n\r\n    uint256 public originalSupply;\r\n\r\n    /** Interface marker */\r\n    function isUpgradeAgent() public pure returns (bool) {\r\n        return true;\r\n    }\r\n\r\n    function upgradeFrom(address _from, uint256 _value) public;\r\n}\r\n\r\n/**\r\n * A token upgrade mechanism where users can opt-in amount of tokens to the next \r\n * smart contract revision.\r\n *\r\n * First envisioned by Golem and Lunyr projects.\r\n *\r\n */\r\ncontract UpgradeableToken is StandardToken {\r\n\r\n    /**\r\n     * Contract / person who can set the upgrade path. \r\n     * This can be the same as team multisig wallet, as what it is with its default value. \r\n     */\r\n    address public upgradeMaster;\r\n\r\n    /** The next contract where the tokens will be migrated. */\r\n    UpgradeAgent public upgradeAgent;\r\n\r\n    /** How many tokens we have upgraded by now. */\r\n    uint256 public totalUpgraded;\r\n    \r\n    /**\r\n     * Upgrade states.\r\n     *\r\n     * - NotAllowed: The child contract has not reached a condition where the upgrade can bgun\r\n     * - WaitingForAgent: Token allows upgrade, but we don't have a new agent yet\r\n     * - ReadyToUpgrade: The agent is set, but not a single token has been upgraded yet\r\n     * - Upgrading: Upgrade agent is set and the balance holders can upgrade their tokens\r\n     *\r\n     */\r\n    enum UpgradeState {Unknown, NotAllowed, WaitingForAgent, ReadyToUpgrade, Upgrading}\r\n\r\n    /**\r\n     * Somebody has upgraded some of his tokens.\r\n     */\r\n    event Upgrade(address indexed _from, address indexed _to, uint256 _value);\r\n\r\n    /**\r\n     * New upgrade agent available.\r\n     */\r\n    event UpgradeAgentSet(address agent);\r\n\r\n    /**\r\n     * Do not allow construction without upgrade master set.\r\n     */\r\n    function UpgradeableToken(address _upgradeMaster) public {\r\n        upgradeMaster = _upgradeMaster;\r\n    }\r\n\r\n    /**\r\n     * Allow the token holder to upgrade some of their tokens to a new contract.\r\n     */\r\n    function upgrade(uint256 value) public {\r\n\r\n        UpgradeState state = getUpgradeState();\r\n        // bad state not allowed\r\n        require(state == UpgradeState.ReadyToUpgrade || state == UpgradeState.Upgrading);\r\n\r\n        // Validate input value.\r\n        require(value != 0);\r\n\r\n        balanceOf[msg.sender] = safeSub(balanceOf[msg.sender], value);\r\n\r\n        // Take tokens out from circulation\r\n        totalSupply = safeSub(totalSupply, value);\r\n        totalUpgraded = safeAdd(totalUpgraded, value);\r\n\r\n        // Upgrade agent reissues the tokens\r\n        upgradeAgent.upgradeFrom(msg.sender, value);\r\n        Upgrade(msg.sender, upgradeAgent, value);\r\n    }\r\n\r\n    /**\r\n     * Set an upgrade agent that handles\r\n     */\r\n    function setUpgradeAgent(address agent) external {\r\n\r\n        require(canUpgrade());\r\n        require(agent != 0x0);\r\n        // Only a master can designate the next agent\r\n        require(msg.sender == upgradeMaster);\r\n        // Upgrade has already begun for an agent\r\n        require(getUpgradeState() != UpgradeState.Upgrading);\r\n\r\n        upgradeAgent = UpgradeAgent(agent);\r\n\r\n        // Bad interface\r\n        require(upgradeAgent.isUpgradeAgent());\r\n        // Make sure that token supplies match in source and target\r\n        require(upgradeAgent.originalSupply() == totalSupply);\r\n\r\n        UpgradeAgentSet(upgradeAgent);\r\n    }\r\n\r\n    /**\r\n     * Get the state of the token upgrade.\r\n     */\r\n    function getUpgradeState() public constant returns (UpgradeState) {\r\n        if(!canUpgrade()) return UpgradeState.NotAllowed;\r\n        else if(address(upgradeAgent) == 0x00) return UpgradeState.WaitingForAgent;\r\n        else if(totalUpgraded == 0) return UpgradeState.ReadyToUpgrade;\r\n        else return UpgradeState.Upgrading;\r\n    }\r\n\r\n    /**\r\n     * Change the upgrade master.\r\n     *\r\n     * This allows us to set a new owner for the upgrade mechanism.\r\n     */\r\n    function setUpgradeMaster(address master) public {\r\n        require(master != 0x0);\r\n        require(msg.sender == upgradeMaster);\r\n        upgradeMaster = master;\r\n    }\r\n\r\n    /**\r\n     * Child contract can enable to provide the condition when the upgrade can begun.\r\n     */\r\n    function canUpgrade() public pure returns (bool) {\r\n        return true;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev Ownable contract with two owner addresses\r\n */\r\ncontract Ownable {\r\n    address public ownerOne;\r\n    address public ownerTwo;\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets one of the owners of the contract to the sender\r\n     * account.\r\n     */\r\n    function Ownable() public {\r\n        ownerOne = msg.sender;\r\n        ownerTwo = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Can only be called by the owners.\r\n     */\r\n    modifier onlyOwner {\r\n        require(msg.sender == ownerOne || msg.sender == ownerTwo);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owners to transfer control of the contract to a new owner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     * @param replaceOwnerOne Replace 'ownerOne'?\r\n     * @param replaceOwnerTwo Replace 'ownerTwo'?\r\n     */\r\n    function transferOwnership(address newOwner, bool replaceOwnerOne, bool replaceOwnerTwo) onlyOwner public {\r\n        require(newOwner != 0x0);\r\n        require(replaceOwnerOne || replaceOwnerTwo);\r\n        if(replaceOwnerOne) ownerOne = newOwner;\r\n        if(replaceOwnerTwo) ownerTwo = newOwner;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Allows an emergency stop mechanism.\r\n * See https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts/lifecycle/Pausable.sol\r\n */\r\ncontract Pausable is Ownable {\r\n    event Pause();\r\n    event Unpause();\r\n\r\n    bool public paused = false;\r\n\r\n    /**\r\n     * @dev modifier to allow actions only when the contract IS paused\r\n     */\r\n    modifier whenNotPaused {\r\n        require(!paused);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev modifier to allow actions only when the contract IS NOT paused\r\n     */\r\n    modifier whenPaused {\r\n        require(paused);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev called by the owner to pause, triggers stopped state\r\n     */\r\n    function pause() onlyOwner whenNotPaused public returns (bool) {\r\n        paused = true;\r\n        Pause();\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev called by the owner to unpause, returns to normal state\r\n     */\r\n    function unpause() onlyOwner whenPaused public returns (bool) {\r\n        paused = false;\r\n        Unpause();\r\n        return true;\r\n    }\r\n}\r\n\r\n/**\r\n * @title PausableToken\r\n * @dev StandardToken with pausable transfers\r\n */\r\ncontract PausableToken is StandardToken, Pausable {\r\n    function transfer(address _to, uint256 _value) whenNotPaused public returns (bool) {\r\n        super.transfer(_to, _value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) whenNotPaused public returns (bool) {\r\n        super.transferFrom(_from, _to, _value);\r\n        return true;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title PurchasableToken\r\n * @dev Allows buying IPC token from this contract\r\n */\r\ncontract PurchasableToken is PausableToken {\r\n    event PurchaseUnlocked();\r\n    event PurchaseLocked();\r\n    event UpdatedExchangeRate(uint256 newPrice);\r\n    event Purchase(address buyer, uint256 etherAmount, uint256 tokenAmount);\r\n    \r\n    bool public purchasable = false;\r\n    // minimum amount of ether you have to spend to buy some tokens\r\n    uint256 public minimumEtherAmount;\r\n    address public vendorWallet;\r\n    uint256 public exchangeRate; // 'exchangeRate' tokens = 1 ether\r\n    \r\n    /** @dev modifier to allow token purchase only when purchase is unlocked and rate > 0 */\r\n    modifier isPurchasable {\r\n        require(purchasable && exchangeRate > 0 && minimumEtherAmount > 0);\r\n        _;\r\n    }\r\n    \r\n    /** @dev called by the owner to lock purchase of ipc token */\r\n    function lockPurchase() onlyOwner public returns (bool) {\r\n        require(purchasable == true);\r\n        purchasable = false;\r\n        PurchaseLocked();\r\n        return true;\r\n    }\r\n    \r\n    /** @dev called by the owner to release purchase of ipc token */\r\n    function unlockPurchase() onlyOwner public returns (bool) {\r\n        require(purchasable == false);\r\n        purchasable = true;\r\n        PurchaseUnlocked();\r\n        return true;\r\n    }\r\n\r\n    /** @dev called by the owner to set a new rate */\r\n    function setExchangeRate(uint256 newExchangeRate) onlyOwner public returns (bool) {\r\n        require(newExchangeRate > 0);\r\n        exchangeRate = newExchangeRate;\r\n        UpdatedExchangeRate(newExchangeRate);\r\n        return true;\r\n    }\r\n    \r\n    /** @dev called by the owner to set the minimum ether amount to buy some token */\r\n    function setMinimumEtherAmount(uint256 newMinimumEtherAmount) onlyOwner public returns (bool) {\r\n        require(newMinimumEtherAmount > 0);\r\n        minimumEtherAmount = newMinimumEtherAmount;\r\n        return true;\r\n    }\r\n    \r\n    /** @dev called by the owner to set a new vendor */\r\n    function setVendorWallet(address newVendorWallet) onlyOwner public returns (bool) {\r\n        require(newVendorWallet != 0x0);\r\n        vendorWallet = newVendorWallet;\r\n        return true;\r\n    }\r\n    \r\n    /** @dev buy ipc token by sending at least 'minimumEtherAmount' */\r\n    function buyIPC() payable isPurchasable whenNotPaused public returns (uint256) {\r\n        require(msg.value >= minimumEtherAmount);\r\n        uint256 tokenAmount = safeMul(msg.value, exchangeRate);\r\n        tokenAmount = safeDiv(tokenAmount, 1 ether);\r\n        require(allowance[vendorWallet][this] >= tokenAmount);\r\n        balanceOf[msg.sender] = safeAdd(balanceOf[msg.sender], tokenAmount);\r\n        balanceOf[vendorWallet] = safeSub(balanceOf[vendorWallet], tokenAmount);\r\n        Purchase(msg.sender, msg.value, tokenAmount);\r\n        return tokenAmount;\r\n    }\r\n    \r\n    function () payable public {\r\n        buyIPC();\r\n    }\r\n}\r\n\r\n/**\r\n * @title Withdrawable\r\n * @dev Contract allows to withdraw ether and ERC20 token\r\n */\r\ncontract Withdrawable is Ownable {\r\n    \r\n    /** @dev withdraw ERC20 token from this contract */\r\n    function withdrawToken(address beneficiary, address _token) onlyOwner public {\r\n        ERC20 token = ERC20(_token);\r\n        uint256 amount = token.balanceOf(this);\r\n        require(amount>0);\r\n        token.transfer(beneficiary, amount);\r\n    }\r\n    \r\n    /** @dev called by the owner to transfer 'etherAmount' to 'beneficiary' */\r\n    function withdrawEther(address beneficiary, uint256 etherAmount) onlyOwner public {\r\n        beneficiary.transfer(etherAmount);\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title IPCToken\r\n * @dev IPC Token contract\r\n * @author Paysura - <contact@paysura.com>\r\n */\r\ncontract IPCToken is UpgradeableToken, PurchasableToken, Withdrawable {\r\n\r\n    // Public variables of the token\r\n    string public name = \"International PayReward Coin\";\r\n    string public symbol = \"IPC\";\r\n    uint8 public decimals = 12;\r\n    // Distributions of the total supply\r\n    // 264 mio for crowdsale\r\n    uint256 public cr = 264000000 * (10 ** uint256(decimals));\r\n    // 110 mio reserved for community / reward program\r\n    uint256 public rew = 110000000 * (10 ** uint256(decimals));\r\n    // 66 mio for advisors and partners\r\n    uint256 public dev = 66000000 * (10 ** uint256(decimals));\r\n    // total supply of 440 mio\r\n    uint256 public totalSupply = cr + dev + rew;    \r\n\r\n    event UpdatedTokenInformation(string newName, string newSymbol);\r\n   \r\n    /**\r\n     * Constructor of ipc token\r\n     * \r\n     * @param addressOfCrBen beneficiary of crowdsale\r\n     * @param addressOfRew reserve for community / reward program\r\n     * @param addressOfDev reserve remaining amount of ipc for development, partners and advisors\r\n     */\r\n    function IPCToken (\r\n        address addressOfCrBen, \r\n        address addressOfRew,\r\n        address addressOfDev\r\n        ) public UpgradeableToken(msg.sender) {\r\n        // Assign the initial tokens to the addresses\r\n        balanceOf[addressOfCrBen] = cr;\r\n        balanceOf[addressOfRew] = rew;\r\n        balanceOf[addressOfDev] = dev;\r\n    }\r\n    \r\n    /**\r\n     * Owner can update token information\r\n     * \r\n     * @param _name new token name\r\n     * @param _symbol new token symbol\r\n     */\r\n    function setTokenInformation(string _name, string _symbol) onlyOwner public {\r\n        name = _name;\r\n        symbol = _symbol;\r\n\r\n        UpdatedTokenInformation(name, symbol);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"},{\"name\":\"replaceOwnerOne\",\"type\":\"bool\"},{\"name\":\"replaceOwnerTwo\",\"type\":\"bool\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vendorWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rew\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyIPC\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"},{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"exchangeRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"purchasable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"upgrade\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"setTokenInformation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"},{\"name\":\"etherAmount\",\"type\":\"uint256\"}],\"name\":\"withdrawEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"upgradeAgent\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"upgradeMaster\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"lockPurchase\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cr\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newMinimumEtherAmount\",\"type\":\"uint256\"}],\"name\":\"setMinimumEtherAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newVendorWallet\",\"type\":\"address\"}],\"name\":\"setVendorWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimumEtherAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerTwo\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getUpgradeState\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dev\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canUpgrade\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalUpgraded\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unlockPurchase\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"agent\",\"type\":\"address\"}],\"name\":\"setUpgradeAgent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newExchangeRate\",\"type\":\"uint256\"}],\"name\":\"setExchangeRate\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerOne\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"master\",\"type\":\"address\"}],\"name\":\"setUpgradeMaster\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"addressOfCrBen\",\"type\":\"address\"},{\"name\":\"addressOfRew\",\"type\":\"address\"},{\"name\":\"addressOfDev\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newName\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"newSymbol\",\"type\":\"string\"}],\"name\":\"UpdatedTokenInformation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"PurchaseUnlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"PurchaseLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"UpdatedExchangeRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"etherAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"Purchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Upgrade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"agent\",\"type\":\"address\"}],\"name\":\"UpgradeAgentSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"IPCToken","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000b8f4f08d1f66e1f65670ff83e4682e42045ff80d00000000000000000000000073ad0c32cf534ecdc06c7a782669e39b88adade70000000000000000000000005a89ed14ac22718566376a8cd6dc366c1e5b4201","Library":"","SwarmSource":"bzzr://6d8a8baa8a06514cf2f06ea850d491f07645cf006c1061ff59a343d7ab09f6c8"}]}