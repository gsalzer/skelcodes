{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\n/**\r\n * @title Owned contract with safe ownership pass.\r\n *\r\n * Note: all the non constant functions return false instead of throwing in case if state change\r\n * didn't happen yet.\r\n */\r\ncontract Owned {\r\n    /**\r\n     * Contract owner address\r\n     */\r\n    address public contractOwner;\r\n\r\n    /**\r\n     * Contract owner address\r\n     */\r\n    address public pendingContractOwner;\r\n\r\n    function Owned() {\r\n        contractOwner = msg.sender;\r\n    }\r\n\r\n    /**\r\n    * @dev Owner check modifier\r\n    */\r\n    modifier onlyContractOwner() {\r\n        if (contractOwner == msg.sender) {\r\n            _;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Destroy contract and scrub a data\r\n     * @notice Only owner can call it\r\n     */\r\n    function destroy() onlyContractOwner {\r\n        suicide(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * Prepares ownership pass.\r\n     *\r\n     * Can only be called by current owner.\r\n     *\r\n     * @param _to address of the next owner. 0x0 is not allowed.\r\n     *\r\n     * @return success.\r\n     */\r\n    function changeContractOwnership(address _to) onlyContractOwner() returns(bool) {\r\n        if (_to  == 0x0) {\r\n            return false;\r\n        }\r\n\r\n        pendingContractOwner = _to;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Finalize ownership pass.\r\n     *\r\n     * Can only be called by pending owner.\r\n     *\r\n     * @return success.\r\n     */\r\n    function claimContractOwnership() returns(bool) {\r\n        if (pendingContractOwner != msg.sender) {\r\n            return false;\r\n        }\r\n\r\n        contractOwner = pendingContractOwner;\r\n        delete pendingContractOwner;\r\n\r\n        return true;\r\n    }\r\n}\r\n\r\n\r\ncontract ERC20Interface {\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed from, address indexed spender, uint256 value);\r\n    string public symbol;\r\n\r\n    function totalSupply() constant returns (uint256 supply);\r\n    function balanceOf(address _owner) constant returns (uint256 balance);\r\n    function transfer(address _to, uint256 _value) returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\r\n    function approve(address _spender, uint256 _value) returns (bool success);\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\r\n}\r\n\r\n/**\r\n * @title Generic owned destroyable contract\r\n */\r\ncontract Object is Owned {\r\n    /**\r\n    *  Common result code. Means everything is fine.\r\n    */\r\n    uint constant OK = 1;\r\n    uint constant OWNED_ACCESS_DENIED_ONLY_CONTRACT_OWNER = 8;\r\n\r\n    function withdrawnTokens(address[] tokens, address _to) onlyContractOwner returns(uint) {\r\n        for(uint i=0;i<tokens.length;i++) {\r\n            address token = tokens[i];\r\n            uint balance = ERC20Interface(token).balanceOf(this);\r\n            if(balance != 0)\r\n                ERC20Interface(token).transfer(_to,balance);\r\n        }\r\n        return OK;\r\n    }\r\n\r\n    function checkOnlyContractOwner() internal constant returns(uint) {\r\n        if (contractOwner == msg.sender) {\r\n            return OK;\r\n        }\r\n\r\n        return OWNED_ACCESS_DENIED_ONLY_CONTRACT_OWNER;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title General MultiEventsHistory user.\r\n *\r\n */\r\ncontract MultiEventsHistoryAdapter {\r\n\r\n    /**\r\n    *   @dev It is address of MultiEventsHistory caller assuming we are inside of delegate call.\r\n    */\r\n    function _self() constant internal returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\ncontract DelayedPaymentsEmitter is MultiEventsHistoryAdapter {\r\n    event Error(bytes32 message);\r\n\r\n    function emitError(bytes32 _message) {\r\n        Error(_message);\r\n    }\r\n}\r\n\r\ncontract DelayedPayments is Object {\r\n   \r\n    uint constant DELAYED_PAYMENTS_SCOPE = 52000;\r\n    uint constant DELAYED_PAYMENTS_INVALID_INVOCATION = DELAYED_PAYMENTS_SCOPE + 17;\r\n\r\n    /// @dev `Payment` is a public structure that describes the details of\r\n    ///  each payment making it easy to track the movement of funds\r\n    ///  transparently\r\n    struct Payment {\r\n        address spender;        // Who is sending the funds\r\n        uint earliestPayTime;   // The earliest a payment can be made (Unix Time)\r\n        bool canceled;         // If True then the payment has been canceled\r\n        bool paid;              // If True then the payment has been paid\r\n        address recipient;      // Who is receiving the funds\r\n        uint amount;            // The amount of wei sent in the payment\r\n        uint securityGuardDelay;// The seconds `securityGuard` can delay payment\r\n    }\r\n\r\n    Payment[] public authorizedPayments;\r\n\r\n    address public securityGuard;\r\n    uint public absoluteMinTimeLock;\r\n    uint public timeLock;\r\n    uint public maxSecurityGuardDelay;\r\n\r\n    // Should use interface of the emitter, but address of events history.\r\n    address public eventsHistory;\r\n\r\n    /// @dev The white list of approved addresses allowed to set up && receive\r\n    ///  payments from this vault\r\n    mapping (address => bool) public allowedSpenders;\r\n\r\n    /// @dev The address assigned the role of `securityGuard` is the only\r\n    ///  addresses that can call a function with this modifier\r\n    modifier onlySecurityGuard { if (msg.sender != securityGuard) throw; _; }\r\n\r\n    // @dev Events to make the payment movements easy to find on the blockchain\r\n    event PaymentAuthorized(uint indexed idPayment, address indexed recipient, uint amount);\r\n    event PaymentExecuted(uint indexed idPayment, address indexed recipient, uint amount);\r\n    event PaymentCanceled(uint indexed idPayment);\r\n    event EtherReceived(address indexed from, uint amount);\r\n    event SpenderAuthorization(address indexed spender, bool authorized);\r\n\r\n/////////\r\n// Constructor\r\n/////////\r\n\r\n    /// @notice The Constructor creates the Vault on the blockchain\r\n    /// @param _absoluteMinTimeLock The minimum number of seconds `timelock` can\r\n    ///  be set to, if set to 0 the `owner` can remove the `timeLock` completely\r\n    /// @param _timeLock Initial number of seconds that payments are delayed\r\n    ///  after they are authorized (a security precaution)\r\n    /// @param _maxSecurityGuardDelay The maximum number of seconds in total\r\n    ///   that `securityGuard` can delay a payment so that the owner can cancel\r\n    ///   the payment if needed\r\n    function DelayedPayments(\r\n        uint _absoluteMinTimeLock,\r\n        uint _timeLock,\r\n        uint _maxSecurityGuardDelay) \r\n    {\r\n        absoluteMinTimeLock = _absoluteMinTimeLock;\r\n        timeLock = _timeLock;\r\n        securityGuard = msg.sender;\r\n        maxSecurityGuardDelay = _maxSecurityGuardDelay;\r\n    }\r\n\r\n    /**\r\n     * Emits Error event with specified error message.\r\n     *\r\n     * Should only be used if no state changes happened.\r\n     *\r\n     * @param _errorCode code of an error\r\n     * @param _message error message.\r\n     */\r\n    function _error(uint _errorCode, bytes32 _message) internal returns(uint) {\r\n        DelayedPaymentsEmitter(eventsHistory).emitError(_message);\r\n        return _errorCode;\r\n    }\r\n\r\n    /**\r\n     * Sets EventsHstory contract address.\r\n     *\r\n     * Can be set only once, and only by contract owner.\r\n     *\r\n     * @param _eventsHistory MultiEventsHistory contract address.\r\n     *\r\n     * @return success.\r\n     */\r\n    function setupEventsHistory(address _eventsHistory) returns(uint errorCode) {\r\n        errorCode = checkOnlyContractOwner();\r\n        if (errorCode != OK) {\r\n            return errorCode;\r\n        }\r\n        if (eventsHistory != 0x0 && eventsHistory != _eventsHistory) {\r\n            return DELAYED_PAYMENTS_INVALID_INVOCATION;\r\n        }\r\n        eventsHistory = _eventsHistory;\r\n        return OK;\r\n    }\r\n\r\n/////////\r\n// Helper functions\r\n/////////\r\n\r\n    /// @notice States the total number of authorized payments in this contract\r\n    /// @return The number of payments ever authorized even if they were canceled\r\n    function numberOfAuthorizedPayments() constant returns (uint) {\r\n        return authorizedPayments.length;\r\n    }\r\n\r\n//////\r\n// Receive Ether\r\n//////\r\n\r\n    /// @notice Called anytime ether is sent to the contract && creates an event\r\n    /// to more easily track the incoming transactions\r\n    function receiveEther() payable {\r\n        EtherReceived(msg.sender, msg.value);\r\n    }\r\n\r\n    /// @notice The fall back function is called whenever ether is sent to this\r\n    ///  contract\r\n    function () payable {\r\n        receiveEther();\r\n    }\r\n\r\n////////\r\n// Spender Interface\r\n////////\r\n\r\n    /// @notice only `allowedSpenders[]` Creates a new `Payment`\r\n    /// @param _recipient Destination of the payment\r\n    /// @param _amount Amount to be paid in wei\r\n    /// @param _paymentDelay Number of seconds the payment is to be delayed, if\r\n    ///  this value is below `timeLock` then the `timeLock` determines the delay\r\n    /// @return The Payment ID number for the new authorized payment\r\n    function authorizePayment(\r\n        address _recipient,\r\n        uint _amount,\r\n        uint _paymentDelay\r\n    ) returns(uint) {\r\n\r\n        // Fail if you arent on the `allowedSpenders` white list\r\n        if (!allowedSpenders[msg.sender]) throw;\r\n        uint idPayment = authorizedPayments.length;       // Unique Payment ID\r\n        authorizedPayments.length++;\r\n\r\n        // The following lines fill out the payment struct\r\n        Payment p = authorizedPayments[idPayment];\r\n        p.spender = msg.sender;\r\n\r\n        // Overflow protection\r\n        if (_paymentDelay > 10**18) throw;\r\n\r\n        // Determines the earliest the recipient can receive payment (Unix time)\r\n        p.earliestPayTime = _paymentDelay >= timeLock ?\r\n                                now + _paymentDelay :\r\n                                now + timeLock;\r\n        p.recipient = _recipient;\r\n        p.amount = _amount;\r\n        PaymentAuthorized(idPayment, p.recipient, p.amount);\r\n        return idPayment;\r\n    }\r\n\r\n    /// @notice only `allowedSpenders[]` The recipient of a payment calls this\r\n    ///  function to send themselves the ether after the `earliestPayTime` has\r\n    ///  expired\r\n    /// @param _idPayment The payment ID to be executed\r\n    function collectAuthorizedPayment(uint _idPayment) {\r\n\r\n        // Check that the `_idPayment` has been added to the payments struct\r\n        if (_idPayment >= authorizedPayments.length) return;\r\n\r\n        Payment p = authorizedPayments[_idPayment];\r\n\r\n        // Checking for reasons not to execute the payment\r\n        if (msg.sender != p.recipient) return;\r\n        if (now < p.earliestPayTime) return;\r\n        if (p.canceled) return;\r\n        if (p.paid) return;\r\n        if (this.balance < p.amount) return;\r\n\r\n        p.paid = true; // Set the payment to being paid\r\n        if (!p.recipient.send(p.amount)) {  // Make the payment\r\n            return;\r\n        }\r\n        PaymentExecuted(_idPayment, p.recipient, p.amount);\r\n     }\r\n\r\n/////////\r\n// SecurityGuard Interface\r\n/////////\r\n\r\n    /// @notice `onlySecurityGuard` Delays a payment for a set number of seconds\r\n    /// @param _idPayment ID of the payment to be delayed\r\n    /// @param _delay The number of seconds to delay the payment\r\n    function delayPayment(uint _idPayment, uint _delay) onlySecurityGuard {\r\n        if (_idPayment >= authorizedPayments.length) throw;\r\n\r\n        // Overflow test\r\n        if (_delay > 10**18) throw;\r\n\r\n        Payment p = authorizedPayments[_idPayment];\r\n\r\n        if ((p.securityGuardDelay + _delay > maxSecurityGuardDelay) ||\r\n            (p.paid) ||\r\n            (p.canceled))\r\n            throw;\r\n\r\n        p.securityGuardDelay += _delay;\r\n        p.earliestPayTime += _delay;\r\n    }\r\n\r\n////////\r\n// Owner Interface\r\n///////\r\n\r\n    /// @notice `onlyOwner` Cancel a payment all together\r\n    /// @param _idPayment ID of the payment to be canceled.\r\n    function cancelPayment(uint _idPayment) onlyContractOwner {\r\n        if (_idPayment >= authorizedPayments.length) throw;\r\n\r\n        Payment p = authorizedPayments[_idPayment];\r\n\r\n\r\n        if (p.canceled) throw;\r\n        if (p.paid) throw;\r\n\r\n        p.canceled = true;\r\n        PaymentCanceled(_idPayment);\r\n    }\r\n\r\n    /// @notice `onlyOwner` Adds a spender to the `allowedSpenders[]` white list\r\n    /// @param _spender The address of the contract being authorized/unauthorized\r\n    /// @param _authorize `true` if authorizing and `false` if unauthorizing\r\n    function authorizeSpender(address _spender, bool _authorize) onlyContractOwner {\r\n        allowedSpenders[_spender] = _authorize;\r\n        SpenderAuthorization(_spender, _authorize);\r\n    }\r\n\r\n    /// @notice `onlyOwner` Sets the address of `securityGuard`\r\n    /// @param _newSecurityGuard Address of the new security guard\r\n    function setSecurityGuard(address _newSecurityGuard) onlyContractOwner {\r\n        securityGuard = _newSecurityGuard;\r\n    }\r\n\r\n    /// @notice `onlyOwner` Changes `timeLock`; the new `timeLock` cannot be\r\n    ///  lower than `absoluteMinTimeLock`\r\n    /// @param _newTimeLock Sets the new minimum default `timeLock` in seconds;\r\n    ///  pending payments maintain their `earliestPayTime`\r\n    function setTimelock(uint _newTimeLock) onlyContractOwner {\r\n        if (_newTimeLock < absoluteMinTimeLock) throw;\r\n        timeLock = _newTimeLock;\r\n    }\r\n\r\n    /// @notice `onlyOwner` Changes the maximum number of seconds\r\n    /// `securityGuard` can delay a payment\r\n    /// @param _maxSecurityGuardDelay The new maximum delay in seconds that\r\n    ///  `securityGuard` can delay the payment's execution in total\r\n    function setMaxSecurityGuardDelay(uint _maxSecurityGuardDelay) onlyContractOwner {\r\n        maxSecurityGuardDelay = _maxSecurityGuardDelay;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_eventsHistory\",\"type\":\"address\"}],\"name\":\"setupEventsHistory\",\"outputs\":[{\"name\":\"errorCode\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxSecurityGuardDelay\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newTimeLock\",\"type\":\"uint256\"}],\"name\":\"setTimelock\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimContractOwnership\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"changeContractOwnership\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingContractOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numberOfAuthorizedPayments\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_authorize\",\"type\":\"bool\"}],\"name\":\"authorizeSpender\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"destroy\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_idPayment\",\"type\":\"uint256\"}],\"name\":\"cancelPayment\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_idPayment\",\"type\":\"uint256\"},{\"name\":\"_delay\",\"type\":\"uint256\"}],\"name\":\"delayPayment\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_idPayment\",\"type\":\"uint256\"}],\"name\":\"collectAuthorizedPayment\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"authorizedPayments\",\"outputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"earliestPayTime\",\"type\":\"uint256\"},{\"name\":\"canceled\",\"type\":\"bool\"},{\"name\":\"paid\",\"type\":\"bool\"},{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"securityGuardDelay\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"receiveEther\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"securityGuard\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newSecurityGuard\",\"type\":\"address\"}],\"name\":\"setSecurityGuard\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipient\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_paymentDelay\",\"type\":\"uint256\"}],\"name\":\"authorizePayment\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"timeLock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowedSpenders\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokens\",\"type\":\"address[]\"},{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdrawnTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_maxSecurityGuardDelay\",\"type\":\"uint256\"}],\"name\":\"setMaxSecurityGuardDelay\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"absoluteMinTimeLock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"eventsHistory\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_absoluteMinTimeLock\",\"type\":\"uint256\"},{\"name\":\"_timeLock\",\"type\":\"uint256\"},{\"name\":\"_maxSecurityGuardDelay\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"idPayment\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PaymentAuthorized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"idPayment\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PaymentExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"idPayment\",\"type\":\"uint256\"}],\"name\":\"PaymentCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EtherReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"authorized\",\"type\":\"bool\"}],\"name\":\"SpenderAuthorization\",\"type\":\"event\"}]","ContractName":"DelayedPayments","CompilerVersion":"v0.4.15+commit.bbb8e64f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000A000000000000000000000000000000000000000000000000000000000000000A","Library":"","SwarmSource":"bzzr://f0e4f0a656ad9b7514b6590be5896e31a5b27aa9346560717b66141b46c07e58"}]}