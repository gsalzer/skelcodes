{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    function Ownable() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) onlyOwner public {\r\n        require(newOwner != address(0));\r\n        OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        uint256 c = a * b;\r\n        if (a != 0 && c / a != b) revert();\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        if (b > a) revert();\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        uint256 c = a + b;\r\n        if (c < a) revert();\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\n\r\ncontract VLBBonusStore is Ownable {\r\n    mapping(address => uint8) public rates;\r\n\r\n    function collectRate(address investor) onlyOwner public returns (uint8) {\r\n        require(investor != address(0));\r\n        uint8 rate = rates[investor];\r\n        if (rate != 0) {\r\n            delete rates[investor];\r\n        }\r\n        return rate;\r\n    }\r\n\r\n    function addRate(address investor, uint8 rate) onlyOwner public {\r\n        require(investor != address(0));\r\n        rates[investor] = rate;\r\n    }\r\n}\r\ncontract VLBRefundVault is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    enum State {Active, Refunding, Closed}\r\n    State public state;\r\n\r\n    mapping (address => uint256) public deposited;\r\n\r\n    address public wallet;\r\n\r\n    event Closed();\r\n    event FundsDrained(uint256 weiAmount);\r\n    event RefundsEnabled();\r\n    event Refunded(address indexed beneficiary, uint256 weiAmount);\r\n\r\n    function VLBRefundVault(address _wallet) public {\r\n        require(_wallet != address(0));\r\n        wallet = _wallet;\r\n        state = State.Active;\r\n    }\r\n\r\n    function deposit(address investor) onlyOwner public payable {\r\n        require(state == State.Active);\r\n        deposited[investor] = deposited[investor].add(msg.value);\r\n    }\r\n\r\n    function unhold() onlyOwner public {\r\n        require(state == State.Active);\r\n        FundsDrained(this.balance);\r\n        wallet.transfer(this.balance);\r\n    }\r\n\r\n    function close() onlyOwner public {\r\n        require(state == State.Active);\r\n        state = State.Closed;\r\n        Closed();\r\n        FundsDrained(this.balance);\r\n        wallet.transfer(this.balance);\r\n    }\r\n\r\n    function enableRefunds() onlyOwner public {\r\n        require(state == State.Active);\r\n        state = State.Refunding;\r\n        RefundsEnabled();\r\n    }\r\n\r\n    function refund(address investor) public {\r\n        require(state == State.Refunding);\r\n        uint256 depositedValue = deposited[investor];\r\n        deposited[investor] = 0;\r\n        investor.transfer(depositedValue);\r\n        Refunded(investor, depositedValue);\r\n    }\r\n}\r\n\r\n\r\ninterface Token {\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n    function tokensWallet() public returns (address);\r\n}\r\n\r\n/**\r\n * @title VLBCrowdsale\r\n * @dev VLB crowdsale contract borrows Zeppelin Finalized, Capped and Refundable crowdsales implementations\r\n */\r\ncontract VLBCrowdsale is Ownable {\r\n    using SafeMath for uint;\r\n\r\n    /**\r\n     * @dev escrow address\r\n     */\r\n    address public escrow;\r\n\r\n    /**\r\n     * @dev token contract\r\n     */\r\n    Token public token;\r\n\r\n    /**\r\n     * @dev refund vault used to hold funds while crowdsale is running\r\n     */\r\n    VLBRefundVault public vault;\r\n\r\n    /**\r\n     * @dev refund vault used to hold funds while crowdsale is running\r\n     */\r\n    VLBBonusStore public bonuses;\r\n\r\n    /**\r\n     * @dev tokensale start time: Dec 17, 2017 12:00:00 UTC (1513512000)\r\n     */\r\n    uint startTime = 1513512000;\r\n\r\n    /**\r\n     * @dev tokensale end time: Apr 09, 2018 12:00:00 UTC (1523275200)\r\n     */\r\n    uint endTime = 1523275200;\r\n\r\n    /**\r\n     * @dev minimum purchase amount for presale\r\n     */\r\n    uint256 public constant MIN_SALE_AMOUNT = 5 * 10**17; // 0.5 ether\r\n\r\n    /**\r\n     * @dev minimum and maximum amount of funds to be raised in USD\r\n     */\r\n    uint256 public constant USD_GOAL = 4 * 10**6;  // $4M\r\n    uint256 public constant USD_CAP  = 12 * 10**6; // $12M\r\n\r\n    /**\r\n     * @dev amount of raised money in wei\r\n     */\r\n    uint256 public weiRaised;\r\n\r\n    /**\r\n     * @dev tokensale finalization flag\r\n     */\r\n    bool public isFinalized = false;\r\n\r\n    /**\r\n     * @dev tokensale pause flag\r\n     */\r\n    bool public paused = false;\r\n\r\n    /**\r\n     * @dev refunding satge flag\r\n     */\r\n    bool public refunding = false;\r\n\r\n    /**\r\n     * @dev min cap reach flag\r\n     */\r\n    bool public isMinCapReached = false;\r\n\r\n    /**\r\n     * @dev ETH x USD exchange rate\r\n     */\r\n    uint public ETHUSD;\r\n\r\n    /**\r\n     * @dev event for token purchase logging\r\n     * @param purchaser who paid for the tokens\r\n     * @param beneficiary who got the tokens\r\n     * @param value weis paid for purchase\r\n     * @param amount amount of tokens purchased\r\n     */\r\n    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n\r\n    /**\r\n     * @dev event for tokensale final logging\r\n    */\r\n    event Finalized();\r\n\r\n    /**\r\n     * @dev event for tokensale pause logging\r\n    */    \r\n    event Pause();\r\n\r\n    /**\r\n     * @dev event for tokensale uppause logging\r\n    */    \r\n    event Unpause();\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!paused);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(paused);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when its called by escrow.\r\n     */\r\n    modifier onlyEscrow() {\r\n        require(msg.sender == escrow);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Crowdsale in the constructor takes addresses of\r\n     *      the just deployed VLBToken and VLBRefundVault contracts\r\n     * @param _tokenAddress address of the VLBToken deployed contract\r\n     */\r\n    function VLBCrowdsale(address _tokenAddress, address _wallet, address _escrow, uint rate) public {\r\n        require(_tokenAddress != address(0));\r\n        require(_wallet != address(0));\r\n        require(_escrow != address(0));\r\n\r\n        escrow = _escrow;\r\n\r\n        // Set initial exchange rate\r\n        ETHUSD = rate;\r\n\r\n        // VLBTokenwas deployed separately\r\n        token = Token(_tokenAddress);\r\n\r\n        vault = new VLBRefundVault(_wallet);\r\n        bonuses = new VLBBonusStore();\r\n    }\r\n\r\n    /**\r\n     * @dev fallback function can be used to buy tokens\r\n     */\r\n    function() public payable {\r\n        buyTokens(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev main function to buy tokens\r\n     * @param beneficiary target wallet for tokens can vary from the sender one\r\n     */\r\n    function buyTokens(address beneficiary) whenNotPaused public payable {\r\n        require(beneficiary != address(0));\r\n        require(validPurchase(msg.value));\r\n\r\n        uint256 weiAmount = msg.value;\r\n\r\n        // buyer and beneficiary could be two different wallets\r\n        address buyer = msg.sender;\r\n\r\n        weiRaised = weiRaised.add(weiAmount);\r\n\r\n        // calculate token amount to be created\r\n        uint256 tokens = weiAmount.mul(getConversionRate());\r\n\r\n        uint8 rate = bonuses.collectRate(beneficiary);\r\n        if (rate != 0) {\r\n            tokens = tokens.mul(rate).div(100);\r\n        }\r\n\r\n        if (!token.transferFrom(token.tokensWallet(), beneficiary, tokens)) {\r\n            revert();\r\n        }\r\n\r\n        TokenPurchase(buyer, beneficiary, weiAmount, tokens);\r\n\r\n        vault.deposit.value(weiAmount)(buyer);\r\n    }\r\n\r\n    /**\r\n     * @dev check if the current purchase valid based on time and amount of passed ether\r\n     * @param _value amount of passed ether\r\n     * @return true if investors can buy at the moment\r\n     */\r\n    function validPurchase(uint256 _value) internal constant returns (bool) {\r\n        bool nonZeroPurchase = _value != 0;\r\n        bool withinPeriod = now >= startTime && now <= endTime;\r\n        bool withinCap = !capReached(weiRaised.add(_value));\r\n\r\n        // For presale we want to decline all payments less then minPresaleAmount\r\n        bool withinAmount = msg.value >= MIN_SALE_AMOUNT;\r\n\r\n        return nonZeroPurchase && withinPeriod && withinCap && withinAmount;\r\n    }\r\n\r\n    /**\r\n     * @dev finish presale stage and move vault to\r\n     *      refund state if GOAL was not reached\r\n     */\r\n    function unholdFunds() onlyOwner public {\r\n        if (goalReached()) {\r\n            isMinCapReached = true;\r\n            vault.unhold();\r\n        } else {\r\n            revert();\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * @dev check if crowdsale still active based on current time and cap\r\n     * @return true if crowdsale event has ended\r\n     */\r\n    function hasEnded() public constant returns (bool) {\r\n        bool timeIsUp = now > endTime;\r\n        return timeIsUp || capReached();\r\n    }\r\n\r\n    /**\r\n     * @dev finalize crowdsale. this method triggers vault and token finalization\r\n     */\r\n    function finalize() onlyOwner public {\r\n        require(!isFinalized);\r\n        require(hasEnded());\r\n\r\n        if (goalReached()) {\r\n            vault.close();\r\n        } else {\r\n            refunding = true;\r\n            vault.enableRefunds();\r\n        }\r\n\r\n        isFinalized = true;\r\n        Finalized();\r\n    }\r\n\r\n    /**\r\n     * @dev add previous investor compensaton rate\r\n     */\r\n    function addRate(address investor, uint8 rate) onlyOwner public {\r\n        require(investor != address(0));\r\n        bonuses.addRate(investor, rate);\r\n    }\r\n\r\n    /**\r\n     * @dev check if soft cap goal is reached in USD\r\n     */\r\n    function goalReached() public view returns (bool) {        \r\n        return isMinCapReached || weiRaised.mul(ETHUSD).div(10**20) >= USD_GOAL;\r\n    }\r\n\r\n    /**\r\n     * @dev check if hard cap goal is reached in USD\r\n     */\r\n    function capReached() internal view returns (bool) {\r\n        return weiRaised.mul(ETHUSD).div(10**20) >= USD_CAP;\r\n    }\r\n\r\n    /**\r\n     * @dev check if hard cap goal is reached in USD\r\n     */\r\n    function capReached(uint256 raised) internal view returns (bool) {\r\n        return raised.mul(ETHUSD).div(10**20) >= USD_CAP;\r\n    }\r\n\r\n    /**\r\n     * @dev if crowdsale is unsuccessful, investors can claim refunds here\r\n     */\r\n    function claimRefund() public {\r\n        require(isFinalized && refunding);\r\n\r\n        vault.refund(msg.sender);\r\n    }    \r\n\r\n    /**\r\n     * @dev called by the owner to pause, triggers stopped state\r\n     */\r\n    function pause() onlyOwner whenNotPaused public {\r\n        paused = true;\r\n        Pause();\r\n    }\r\n\r\n    /**\r\n     * @dev called by the owner to unpause, returns to normal state\r\n     */\r\n    function unpause() onlyOwner whenPaused public {\r\n        paused = false;\r\n        Unpause();\r\n    }\r\n    \r\n    /**\r\n     * @dev called by the escrow to update current ETH x USD exchange rate\r\n     */\r\n    function updateExchangeRate(uint rate) onlyEscrow public {\r\n        ETHUSD = rate;\r\n    } \r\n\r\n    /**\r\n     * @dev returns current token price based on current presale time frame\r\n     */\r\n    function getConversionRate() public constant returns (uint256) {\r\n        if (now >= startTime + 106 days) {\r\n            return 650;\r\n        } else if (now >= startTime + 99 days) {\r\n            return 676;\r\n        } else if (now >= startTime + 92 days) {\r\n            return 715;\r\n        } else if (now >= startTime + 85 days) {\r\n            return 780;\r\n        } else if (now >= startTime) {\r\n            return 845;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * @dev killer method that can bu used by owner to\r\n     *      kill the contract and send funds to owner\r\n     */\r\n    function kill() onlyOwner whenPaused public {\r\n        selfdestruct(owner);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"USD_CAP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"USD_GOAL\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MIN_SALE_AMOUNT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unholdFunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ETHUSD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"goalReached\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"investor\",\"type\":\"address\"},{\"name\":\"rate\",\"type\":\"uint8\"}],\"name\":\"addRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isFinalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonuses\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimRefund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"updateExchangeRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isMinCapReached\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"escrow\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getConversionRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"refunding\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_escrow\",\"type\":\"address\"},{\"name\":\"rate\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Finalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"VLBCrowdsale","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"0","ConstructorArguments":"000000000000000000000000973e57923da9c67670b52a95eeb93697113da27600000000000000000000000023F4C3611b9710C85966d6239978706c010239a3000000000000000000000000A0fC7A70496F6bE1730cB3E05d66F052817A32060000000000000000000000000000000000000000000000000000000000010b7d","Library":"","SwarmSource":"bzzr://3adcef1b994ba074369cff6fcb6bd6e0127538979f950280e61b98acab5a0021"}]}