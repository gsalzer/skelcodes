{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13;\r\n\r\ncontract Math {\r\n  function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n    assert((z = x + y) >= x);\r\n  }\r\n\r\n  function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n    assert((z = x - y) <= x);\r\n  }\r\n\r\n  function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n    assert((z = x * y) >= x);\r\n  }\r\n\r\n  function div(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n    z = x / y;\r\n  }\r\n}\r\n\r\ncontract Token {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address _owner) public constant returns (uint256 balance);\r\n  function transfer(address _to, uint256 _value) public returns (bool success);\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n  function approve(address _spender, uint256 _value) public returns (bool success);\r\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\r\n  event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\n/*  ERC 20 token */\r\ncontract ERC20 is Token {\r\n\r\n  function name() public pure returns (string) { name; }\r\n  function symbol() public pure returns (string) { symbol; }\r\n  function decimals() public pure returns (uint8) { decimals; }\r\n\r\n  function transfer(address _to, uint256 _value) public returns (bool success) {\r\n    if (balances[msg.sender] >= _value && _value > 0) {\r\n      balances[msg.sender] -= _value;\r\n      balances[_to] += _value;\r\n      Transfer(msg.sender, _to, _value);\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n    if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\r\n      balances[_to] += _value;\r\n      balances[_from] -= _value;\r\n      allowed[_from][msg.sender] -= _value;\r\n      Transfer(_from, _to, _value);\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n  function approve(address _spender, uint256 _value) public returns (bool success) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  mapping (address => uint256) balances;\r\n  mapping (address => mapping (address => uint256)) allowed;\r\n}\r\n\r\ncontract owned {\r\n  address public owner;\r\n\r\n  function owned() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  modifier onlyOwner {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    owner = newOwner;\r\n  }\r\n}\r\n\r\ncontract EPCToken is ERC20, Math, owned {\r\n  // metadata\r\n  string public name;\r\n  string public symbol;\r\n  uint8 public decimals = 18;\r\n  string public version;\r\n\r\n  // events\r\n  event Reward(address indexed _to, uint256 _value);\r\n  event MintToken(address indexed _to, uint256 _value);\r\n  event Burn(address indexed _to, uint256 _value);\r\n\r\n  // constructor\r\n  function EPCToken(\r\n   string _name,\r\n   string _symbol,\r\n   string _version\r\n  ) public {\r\n    name = _name;\r\n    symbol = _symbol;\r\n    version = _version;\r\n  }\r\n\r\n  /*\r\n   * mint token\r\n   */\r\n  function mintToken(address target, uint256 mintedAmount) public onlyOwner {\r\n    balances[target] += mintedAmount;\r\n    totalSupply += mintedAmount;\r\n    MintToken(target, mintedAmount);\r\n  }\r\n\r\n  /*\r\n   * burn the tokens, cant never get back\r\n   */\r\n  function burn(uint256 amount) public returns (bool success) {\r\n    require(balances[msg.sender] >= amount);\r\n    balances[msg.sender] -= amount;\r\n    totalSupply -= amount;\r\n    Burn(msg.sender, amount);\r\n    return true;\r\n  }\r\n\r\n  /*\r\n   * reward token\r\n   */\r\n  function reward(address target, uint256 amount) public onlyOwner {\r\n    balances[target] += amount;\r\n    Reward(target, amount);\r\n  }\r\n\r\n  /*\r\n   * kill the contract from the blockchain\r\n   * and send the balance to the owner\r\n   */\r\n  function kill() public onlyOwner {\r\n    selfdestruct(owner);\r\n  }\r\n}\r\n\r\ncontract EPCSale is Math, owned {\r\n  EPCToken public epc;\r\n  uint256 public constant decimals = 18;\r\n  // crowdsale parameters\r\n  bool public isFinalized;  // switched to true in operational state\r\n  uint256 public fundingStartBlock;\r\n  uint256 public fundingEndBlock;\r\n  uint256 public funded;\r\n  uint256 public constant totalCap = 250 * (10**6) * 10**decimals; // 250m epc\r\n\r\n  // constructor\r\n  function EPCSale(\r\n   EPCToken _epc,\r\n   uint256 _fundingStartBlock,\r\n   uint256 _fundingEndBlock\r\n  )\r\n  public {\r\n    isFinalized = false; //controls pre through crowdsale state\r\n    epc = EPCToken(_epc);\r\n    fundingStartBlock = _fundingStartBlock;\r\n    fundingEndBlock = _fundingEndBlock;\r\n  }\r\n\r\n  /*\r\n   * crowdsale\r\n   */\r\n  function crowdSale() public payable {\r\n    require(!isFinalized);\r\n    assert(block.number >= fundingStartBlock);\r\n    assert(block.number <= fundingEndBlock);\r\n    require(msg.value > 0);\r\n    uint256 tokens = mul(msg.value, exchangeRate()); // check that we're not over totals\r\n    funded = add(funded, tokens);\r\n    assert(funded <= totalCap);\r\n    assert(epc.transfer(msg.sender, tokens));\r\n  }\r\n\r\n  /*\r\n   * caculate the crowdsale rate per eth\r\n   */\r\n  function exchangeRate() public constant returns(uint256) {\r\n    if (block.number<=fundingStartBlock+43200) return 10000; // early price\r\n    if (block.number<=fundingStartBlock+2*43200) return 8000; // crowdsale price\r\n    return 7000; // default price\r\n  }\r\n\r\n  /*\r\n   * unit test for crowdsale exchange rate\r\n   */\r\n  function testExchangeRate(uint blockNumber) public constant returns(uint256) {\r\n    if (blockNumber <= fundingStartBlock+43200) return 10000; // early price\r\n    if (blockNumber <= fundingStartBlock+2*43200) return 8000; // crowdsale price\r\n    return 7000; // default price\r\n  }\r\n\r\n  /*\r\n   * unit test for calculate funded amount\r\n   */\r\n  function testFunded(uint256 amount) public constant returns(uint256) {\r\n    uint256 tokens = mul(amount, exchangeRate());\r\n    return add(funded, tokens);\r\n  }\r\n\r\n  /*\r\n   * unamed function for crowdsale\r\n   */\r\n  function () public payable {\r\n    crowdSale();\r\n  }\r\n\r\n  /*\r\n   * withrawal the crowd eth\r\n   */\r\n  function withdrawal() public onlyOwner {\r\n    msg.sender.transfer(this.balance);\r\n  }\r\n\r\n  /*\r\n   * stop the crowdsale\r\n   */\r\n  function stop() public onlyOwner {\r\n    isFinalized = true;\r\n  }\r\n\r\n  /*\r\n   * start the crowdsale\r\n   */\r\n  function start() public onlyOwner {\r\n    isFinalized = false;\r\n  }\r\n\r\n  /*\r\n   * retrieve tokens from the contract\r\n   */\r\n  function retrieveTokens(uint256 amount) public onlyOwner {\r\n    assert(epc.transfer(owner, amount));\r\n  }\r\n\r\n  /*\r\n   * kill the contract from the blockchain\r\n   * and retrieve the tokens and balance to the owner\r\n   */\r\n  function kill() public onlyOwner {\r\n    epc.transfer(owner, epc.balanceOf(this));\r\n    selfdestruct(owner);\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"reward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"mintedAmount\",\"type\":\"uint256\"}],\"name\":\"mintToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_version\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Reward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"MintToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"EPCToken","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000000845502d436861696e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000445504343000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005312e302e30000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://4319ea2627f9e057f9a4f62ab41351da9013845daf23f754b6fcba20585a8973"}]}