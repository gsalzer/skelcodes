{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n/**\r\n *\r\n * Version: B\r\n * @author  <newtwist@protonmail.com>\r\n *\r\n * Overview:\r\n * Divides all incoming funds among various `activity` accounts. The division cannot be changed\r\n * after the contract is locked.\r\n */\r\n\r\ncontract OrganizeFunds {\r\n\r\n  struct ActivityAccount {\r\n    uint credited;   // total funds credited to this account\r\n    uint balance;    // current balance = credited - amount withdrawn\r\n    uint pctx10;     // percent allocation times ten\r\n    address addr;    // payout addr of this acct\r\n    string name;\r\n  }\r\n\r\n  uint constant TENHUNDWEI = 1000;                     // need gt. 1000 wei to distribute\r\n  uint constant MAX_ACCOUNTS = 10;                     // max accounts this contract can handle\r\n\r\n  event MessageEvent(string message);\r\n  event MessageEventI(string message, uint val);\r\n\r\n\r\n  bool public isLocked;\r\n  string public name;\r\n  address public owner;                                // deployer executor\r\n  mapping (uint => ActivityAccount) activityAccounts;  // accounts by index\r\n  uint public activityCount;                           // how many activity accounts\r\n  uint public totalFundsReceived;                      // amount received since begin of time\r\n  uint public totalFundsDistributed;                   // amount distributed since begin of time\r\n  uint public totalFundsWithdrawn;                     // amount withdrawn since begin of time\r\n  uint public withdrawGas = 100000;                    // gas for withdrawals\r\n\r\n  modifier ownerOnly {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  modifier unlockedOnly {\r\n    require(!isLocked);\r\n    _;\r\n  }\r\n\r\n\r\n\r\n  //\r\n  // constructor\r\n  //\r\n  function OrganizeFunds() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  function lock() public ownerOnly {\r\n    isLocked = true;\r\n  }\r\n\r\n  function setName(string _name) public ownerOnly {\r\n    name = _name;\r\n  }\r\n\r\n  //\r\n  // reset\r\n  // reset all activity accounts\r\n  // in case we have any funds that have not been withdrawn, they become  newly received and undistributed.\r\n  //\r\n  function reset() public ownerOnly unlockedOnly {\r\n    totalFundsReceived = this.balance;\r\n    totalFundsDistributed = 0;\r\n    totalFundsWithdrawn = 0;\r\n    activityCount = 0;\r\n    MessageEvent(\"ok: all accts reset\");\r\n  }\r\n\r\n\r\n  //\r\n  // set withdrawal gas\r\n  // nonstandard gas is necessary to support push-withdrawals to other contract\r\n  //\r\n  function setWitdrawGas(uint256 _withdrawGas) public ownerOnly unlockedOnly {\r\n    withdrawGas = _withdrawGas;\r\n    MessageEventI(\"ok: withdraw gas set\", withdrawGas);\r\n  }\r\n\r\n\r\n  //\r\n  // add a new activity account\r\n  //\r\n  function addActivityAccount(address _addr, uint256 _pctx10, string _name) public ownerOnly unlockedOnly {\r\n    if (activityCount >= MAX_ACCOUNTS) {\r\n      MessageEvent(\"err: max accounts\");\r\n      return;\r\n    }\r\n    activityAccounts[activityCount].addr = _addr;\r\n    activityAccounts[activityCount].pctx10 = _pctx10;\r\n    activityAccounts[activityCount].credited = 0;\r\n    activityAccounts[activityCount].balance = 0;\r\n    activityAccounts[activityCount].name = _name;\r\n    ++activityCount;\r\n    MessageEvent(\"ok: acct added\");\r\n  }\r\n\r\n\r\n  // ----------------------------\r\n  // get acct info\r\n  // ----------------------------\r\n  function getActivityAccountInfo(address _addr) public constant returns(uint _idx, uint _pctx10, string _name, uint _credited, uint _balance) {\r\n    for (uint i = 0; i < activityCount; i++ ) {\r\n      address addr = activityAccounts[i].addr;\r\n      if (addr == _addr) {\r\n        _idx = i;\r\n        _pctx10 = activityAccounts[i].pctx10;\r\n        _name = activityAccounts[i].name;\r\n        _credited = activityAccounts[i].credited;\r\n        _balance = activityAccounts[i].balance;\r\n        return;\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  //\r\n  // get total percentages x10\r\n  //\r\n  function getTotalPctx10() public constant returns(uint _totalPctx10) {\r\n    _totalPctx10 = 0;\r\n    for (uint i = 0; i < activityCount; i++ ) {\r\n      _totalPctx10 += activityAccounts[i].pctx10;\r\n    }\r\n  }\r\n\r\n\r\n  //\r\n  // default payable function.\r\n  // call us with plenty of gas, or catastrophe will ensue\r\n  //\r\n  function () public payable {\r\n    totalFundsReceived += msg.value;\r\n    MessageEventI(\"ok: received\", msg.value);\r\n  }\r\n\r\n\r\n  //\r\n  // distribute funds to all activities\r\n  //\r\n  function distribute() public {\r\n    //only payout if we have more than 1000 wei\r\n    if (this.balance < TENHUNDWEI) {\r\n      return;\r\n    }\r\n    //each account gets their prescribed percentage of this holdover.\r\n    uint i;\r\n    uint pctx10;\r\n    uint acctDist;\r\n    for (i = 0; i < activityCount; i++ ) {\r\n      pctx10 = activityAccounts[i].pctx10;\r\n      acctDist = totalFundsReceived * pctx10 / TENHUNDWEI;\r\n      //we also double check to ensure that the amount credited cannot exceed the total amount due to this acct\r\n      if (activityAccounts[i].credited >= acctDist) {\r\n        acctDist = 0;\r\n      } else {\r\n        acctDist = acctDist - activityAccounts[i].credited;\r\n      }\r\n      activityAccounts[i].credited += acctDist;\r\n      activityAccounts[i].balance += acctDist;\r\n      totalFundsDistributed += acctDist;\r\n    }\r\n    MessageEvent(\"ok: distributed funds\");\r\n  }\r\n\r\n\r\n  //\r\n  // withdraw actvity balance\r\n  // can be called by owner to push funds to another contract\r\n  //\r\n  function withdraw() public {\r\n    for (uint i = 0; i < activityCount; i++ ) {\r\n      address addr = activityAccounts[i].addr;\r\n      if (addr == msg.sender || msg.sender == owner) {\r\n        uint amount = activityAccounts[i].balance;\r\n        if (amount > 0) {\r\n          activityAccounts[i].balance = 0;\r\n          totalFundsWithdrawn += amount;\r\n          if (!addr.call.gas(withdrawGas).value(amount)()) {\r\n            //put back funds in case of err\r\n            activityAccounts[i].balance = amount;\r\n            totalFundsWithdrawn -= amount;\r\n            MessageEvent(\"err: error sending funds\");\r\n            return;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  //\r\n  // suicide\r\n  //\r\n  function hariKari() public ownerOnly unlockedOnly {\r\n    selfdestruct(owner);\r\n  }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"withdrawGas\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalFundsDistributed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalPctx10\",\"outputs\":[{\"name\":\"_totalPctx10\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_pctx10\",\"type\":\"uint256\"},{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"addActivityAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalFundsWithdrawn\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getActivityAccountInfo\",\"outputs\":[{\"name\":\"_idx\",\"type\":\"uint256\"},{\"name\":\"_pctx10\",\"type\":\"uint256\"},{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_credited\",\"type\":\"uint256\"},{\"name\":\"_balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isLocked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"hariKari\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalFundsReceived\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"setName\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_withdrawGas\",\"type\":\"uint256\"}],\"name\":\"setWitdrawGas\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"reset\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"distribute\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"activityCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"lock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"message\",\"type\":\"string\"}],\"name\":\"MessageEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"message\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"MessageEventI\",\"type\":\"event\"}]","ContractName":"OrganizeFunds","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://ddbdbb0af0d3003e2ae0497ab2d95ab687d9a7ee34ba9cf68ef73b0b8934e72b"}]}