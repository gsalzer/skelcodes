{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal constant returns(uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal constant returns(uint256) {\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal constant returns(uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal constant returns(uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    modifier onlyOwner() { require(msg.sender == owner); _; }\r\n\r\n    function Ownable() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) onlyOwner {\r\n        require(newOwner != address(0));\r\n        OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract Pausable is Ownable {\r\n    bool public paused = false;\r\n\r\n    event Pause();\r\n    event Unpause();\r\n\r\n    modifier whenNotPaused() { require(!paused); _; }\r\n    modifier whenPaused() { require(paused); _; }\r\n\r\n    function pause() onlyOwner whenNotPaused {\r\n        paused = true;\r\n        Pause();\r\n    }\r\n    \r\n    function unpause() onlyOwner whenPaused {\r\n        paused = false;\r\n        Unpause();\r\n    }\r\n}\r\n\r\ncontract ERC20 {\r\n    uint256 public totalSupply;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    function balanceOf(address who) constant returns (uint256);\r\n    function transfer(address to, uint256 value) returns (bool);\r\n    function transferFrom(address from, address to, uint256 value) returns (bool);\r\n    function allowance(address owner, address spender) constant returns (uint256);\r\n    function approve(address spender, uint256 value) returns (bool);\r\n}\r\n\r\ncontract StandardToken is ERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) balances;\r\n    mapping(address => mapping(address => uint256)) allowed;\r\n\r\n    function balanceOf(address _owner) constant returns(uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) returns(bool success) {\r\n        require(_to != address(0));\r\n\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n\r\n        Transfer(msg.sender, _to, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {\r\n        require(_to != address(0));\r\n\r\n        var _allowance = allowed[_from][msg.sender];\r\n\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = _allowance.sub(_value);\r\n\r\n        Transfer(_from, _to, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) constant returns(uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) returns(bool success) {\r\n        require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n\r\n        allowed[msg.sender][_spender] = _value;\r\n\r\n        Approval(msg.sender, _spender, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n    function increaseApproval(address _spender, uint _addedValue) returns(bool success) {\r\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n\r\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n\r\n        return true;\r\n    }\r\n\r\n    function decreaseApproval(address _spender, uint _subtractedValue) returns(bool success) {\r\n        uint oldValue = allowed[msg.sender][_spender];\r\n\r\n        if(_subtractedValue > oldValue) {\r\n            allowed[msg.sender][_spender] = 0;\r\n        } else {\r\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n        }\r\n\r\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        \r\n        return true;\r\n    }\r\n}\r\n\r\ncontract BurnableToken is StandardToken {\r\n    event Burn(address indexed burner, uint256 value);\r\n\r\n    function burn(uint256 _value) public {\r\n        require(_value > 0);\r\n\r\n        address burner = msg.sender;\r\n\r\n        balances[burner] = balances[burner].sub(_value);\r\n        totalSupply = totalSupply.sub(_value);\r\n\r\n        Burn(burner, _value);\r\n    }\r\n}\r\n\r\ncontract MintableToken is StandardToken, Ownable {\r\n    event Mint(address indexed to, uint256 amount);\r\n    event MintFinished();\r\n\r\n    bool public mintingFinished = false;\r\n\r\n    modifier canMint() { require(!mintingFinished); _; }\r\n\r\n    function mint(address _to, uint256 _amount) onlyOwner canMint public returns(bool success) {\r\n        totalSupply = totalSupply.add(_amount);\r\n        balances[_to] = balances[_to].add(_amount);\r\n\r\n        Mint(_to, _amount);\r\n        Transfer(address(0), _to, _amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    function finishMinting() onlyOwner public returns(bool success) {\r\n        mintingFinished = true;\r\n\r\n        MintFinished();\r\n\r\n        return true;\r\n    }\r\n}\r\n\r\n/*\r\n    ICO Bloomzed Token\r\n    - Эмиссия токенов ограничена (всего 100 000 000 токенов, токены выпускаются во время ICO и PreICO)\r\n    - Цена токена фиксированная: 1 ETH = 500 токенов\r\n    - Токенов на продажу 50 000 000 (50%)\r\n    - 50 000 000 (50%) токенов передается команде во время создания токена\r\n    - Бонусы на PreICO: +50% токенов\r\n    - Бонусы на ICO: +25% первый день, +20% с 2 по 3 день, +15% с 4 по 5 день, +10% с 6 по 7 день, +7% с 8 по 9 день, +5% с 10 по 11 день\r\n    - Бонусы на ICO: +3% при покупке >= 3 000 токенов, +5% при покупке > 5 000 токенов, +7% при покупке > 10 000 токенов, +10% при покупке > 15 000 токенов\r\n    - Бонусы расчитываются на начальную сумму, бонусы сумируются\r\n    - Минимальная и максимальная сумма покупки: 0.5 ETH и 10000 ETH\r\n    - Средства от покупки токенов передаются бенефициару\r\n    - Crowdsale ограничен по времени\r\n    - Закрытие Crowdsale происходит с помощью функции \"withdraw()\", минтинг закрывается, управление токеном передаются бенефициару\r\n*/\r\ncontract Token is BurnableToken, MintableToken {\r\n    string public name = \"Bloomzed Token\";\r\n    string public symbol = \"BZT\";\r\n    uint256 public decimals = 18;\r\n\r\n    function Token() {\r\n        mint(0x3c64B86cEE4E60EDdA517521b46Ac74134442058, 50000000 * 1 ether);       // Command mint\r\n    }\r\n}\r\n\r\ncontract Crowdsale is Pausable {\r\n    using SafeMath for uint;\r\n\r\n    Token public token;\r\n    address public beneficiary = 0x86fABfdBB9B5BFDbec3975aECdDee54b28bDeA45;        // Beneficiary\r\n    address public manager = 0xD9e4a8fCb4357Dfd14861Bc9E4170e43C14062A4;            // Manager\r\n\r\n    uint public collectedWei;\r\n    uint public tokensSold;\r\n\r\n    uint public priceTokenWei = 1 ether / 500;\r\n\r\n    uint public piTokensForSale = 5000000 * 1 ether;                                // Amount tokens for sale on PreICO\r\n    uint public tokensForSale = 50000000 * 1 ether;                                 // Amount tokens for sale\r\n\r\n    uint public piStartTime = 1513674000;                                           // Date start   19.12.2017 12:00 +03\r\n    uint public piEndTime = 1514278800;                                             // Date end     26.12.2017 12:00 +03\r\n    uint public startTime = 1516179600;                                             // Date start   17.01.2018 12:00 +03\r\n    uint public endTime = 1518858000;                                               // Date end     17.02.2018 12:00 +03\r\n    bool public crowdsaleFinished = false;\r\n\r\n    event NewContribution(address indexed holder, uint256 tokenAmount, uint256 etherAmount);\r\n    event Withdraw();\r\n\r\n    modifier onlyManager() { require(msg.sender == manager); _; }\r\n\r\n    function Crowdsale() {\r\n        token = new Token();\r\n    }\r\n\r\n    function() payable {\r\n        purchase();\r\n    }\r\n    \r\n    function purchase() whenNotPaused payable {\r\n        require(!crowdsaleFinished);\r\n        require((now >= piStartTime && now < piEndTime && tokensSold < piTokensForSale) || (now >= startTime && now < endTime));\r\n        require(tokensSold < tokensForSale);\r\n        require(msg.value >= 0.5 * 1 ether && msg.value <= 10000 * 1 ether);\r\n\r\n        uint sum = msg.value;\r\n        uint amount = sum.div(priceTokenWei).mul(1 ether);\r\n        uint retSum = 0;\r\n\r\n        // ICO\r\n        if(now > piEndTime) {\r\n            uint bonus = 0;\r\n\r\n            // Day bonus\r\n            if(tokensSold.add(amount) < piTokensForSale) {\r\n                bonus.add(\r\n                    now < startTime + 1 days ? 25\r\n                        : (now < startTime + 3 days ? 20\r\n                            : (now < startTime + 5 days ? 15\r\n                                : (now < startTime + 7 days ? 10\r\n                                    : (now < startTime + 9 days ? 7\r\n                                        : (now < startTime + 11 days ? 5 : 0\r\n                ))))));\r\n\r\n                // Amount bonus\r\n                if(amount >= 3000 * 1 ether) {\r\n                    bonus.add(\r\n                        amount > 15000 * 1 ether ? 10 : \r\n                            (amount > 10000 * 1 ether ? 7 : \r\n                                (amount > 5000 * 1 ether ? 5 : 3\r\n                    )));\r\n                }\r\n            }\r\n\r\n            if(bonus > 0) {\r\n                amount = amount.add(amount.div(100).mul(bonus));\r\n            }\r\n\r\n            if(tokensSold.add(amount) > piTokensForSale) {\r\n                uint retAmount = tokensSold.add(amount).sub(piTokensForSale);\r\n                retSum = retAmount.mul(price).div(1 ether);\r\n\r\n                amount = amount.sub(retAmount);\r\n                sum = sum.sub(retSum);\r\n            }\r\n        }\r\n        // PreICO\r\n        else {\r\n            uint price = priceTokenWei.mul(100).div(150);\r\n            amount = sum.div(price).mul(1 ether);\r\n            \r\n            if(tokensSold.add(amount) > piTokensForSale) {\r\n                retAmount = tokensSold.add(amount).sub(piTokensForSale);\r\n                retSum = retAmount.mul(price).div(1 ether);\r\n\r\n                amount = amount.sub(retAmount);\r\n                sum = sum.sub(retSum);\r\n            }\r\n        }\r\n\r\n        tokensSold = tokensSold.add(amount);\r\n        collectedWei = collectedWei.add(sum);\r\n\r\n        beneficiary.transfer(sum);\r\n        token.mint(msg.sender, amount);\r\n\r\n        if(retSum > 0) {\r\n            msg.sender.transfer(retSum);\r\n        }\r\n\r\n        NewContribution(msg.sender, amount, sum);\r\n    }\r\n\r\n    function externalPurchase(address _to, uint _value) whenNotPaused onlyManager {\r\n        require(!crowdsaleFinished);\r\n        require(tokensSold < tokensForSale);\r\n\r\n        uint amount = _value.mul(1 ether);\r\n\r\n        tokensSold = tokensSold.add(amount);\r\n\r\n        token.mint(_to, amount);\r\n\r\n        NewContribution(_to, amount, 0);\r\n    }\r\n\r\n    function withdraw() onlyOwner {\r\n        require(!crowdsaleFinished);\r\n        \r\n        token.finishMinting();\r\n        token.transferOwnership(beneficiary);\r\n\r\n        crowdsaleFinished = true;\r\n\r\n        Withdraw();\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"priceTokenWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"piEndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensForSale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"externalPurchase\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"purchase\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"piTokensForSale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"piStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"collectedWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"etherAmount\",\"type\":\"uint256\"}],\"name\":\"NewContribution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Crowdsale","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://0b8c3f7f87a5047f234c322d7d7504a6c87bf56dee544a28f1a90c1d604a7c43"}]}