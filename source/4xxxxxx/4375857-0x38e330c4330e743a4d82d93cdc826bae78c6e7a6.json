{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.17;\r\n\r\n// ----------------------------------------------------------------------------\r\n// Devery Presale Whitelist\r\n//\r\n// Deployed to : 0x38E330C4330e743a4D82D93cdC826bAe78C6E7A6\r\n//\r\n// Enjoy.\r\n//\r\n// (c) BokkyPooBah / Bok Consulting Pty Ltd for Devery 2017. The MIT Licence.\r\n// ----------------------------------------------------------------------------\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// Owned contract\r\n// ----------------------------------------------------------------------------\r\ncontract Owned {\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Current owner, and proposed new owner\r\n    // ------------------------------------------------------------------------\r\n    address public owner;\r\n    address public newOwner;\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Constructor - assign creator as the owner\r\n    // ------------------------------------------------------------------------\r\n    function Owned() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Modifier to mark that a function can only be executed by the owner\r\n    // ------------------------------------------------------------------------\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Owner can initiate transfer of contract to a new owner\r\n    // ------------------------------------------------------------------------\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        newOwner = _newOwner;\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // New owner has to accept transfer of contract\r\n    // ------------------------------------------------------------------------\r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner);\r\n        OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = 0x0;\r\n    }\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// Administrators\r\n// ----------------------------------------------------------------------------\r\ncontract Admined is Owned {\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Mapping of administrators\r\n    // ------------------------------------------------------------------------\r\n    mapping (address => bool) public admins;\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Add and delete adminstrator events\r\n    // ------------------------------------------------------------------------\r\n    event AdminAdded(address addr);\r\n    event AdminRemoved(address addr);\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Modifier for functions that can only be executed by adminstrator\r\n    // ------------------------------------------------------------------------\r\n    modifier onlyAdmin() {\r\n        require(admins[msg.sender] || owner == msg.sender);\r\n        _;\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Owner can add a new administrator\r\n    // ------------------------------------------------------------------------\r\n    function addAdmin(address addr) public onlyOwner {\r\n        admins[addr] = true;\r\n        AdminAdded(addr);\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Owner can remove an administrator\r\n    // ------------------------------------------------------------------------\r\n    function removeAdmin(address addr) public onlyOwner {\r\n        delete admins[addr];\r\n        AdminRemoved(addr);\r\n    }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// Devery Presale Whitelist\r\n// ----------------------------------------------------------------------------\r\ncontract DeveryPresaleWhitelist is Admined {\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Administrators can add until sealed\r\n    // ------------------------------------------------------------------------\r\n    bool public sealed;\r\n\r\n    // ------------------------------------------------------------------------\r\n    // The whitelist of accounts and max contribution\r\n    // ------------------------------------------------------------------------\r\n    mapping(address => uint) public whitelist;\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Events\r\n    // ------------------------------------------------------------------------\r\n    event Whitelisted(address indexed addr, uint max);\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Constructor\r\n    // ------------------------------------------------------------------------\r\n    function DeveryPresaleWhitelist() public {\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Add to whitelist\r\n    // ------------------------------------------------------------------------\r\n    function add(address addr, uint max) public onlyAdmin {\r\n        require(!sealed);\r\n        require(addr != 0x0);\r\n        whitelist[addr] = max;\r\n        Whitelisted(addr, max);\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Add batch to whitelist\r\n    // ------------------------------------------------------------------------\r\n    function multiAdd(address[] addresses, uint[] max) public onlyAdmin {\r\n        require(!sealed);\r\n        require(addresses.length != 0);\r\n        require(addresses.length == max.length);\r\n        for (uint i = 0; i < addresses.length; i++) {\r\n            require(addresses[i] != 0x0);\r\n            whitelist[addresses[i]] = max[i];\r\n            Whitelisted(addresses[i], max[i]);\r\n        }\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // After sealing, no more whitelisting is possible\r\n    // ------------------------------------------------------------------------\r\n    function seal() public onlyOwner {\r\n        require(!sealed);\r\n        sealed = true;\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Don't accept ethers - no payable modifier\r\n    // ------------------------------------------------------------------------\r\n    function () public {\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"removeAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"seal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"admins\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sealed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addresses\",\"type\":\"address[]\"},{\"name\":\"max\",\"type\":\"uint256[]\"}],\"name\":\"multiAdd\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"add\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"Whitelisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"AdminAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"AdminRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"DeveryPresaleWhitelist","CompilerVersion":"v0.4.17+commit.bdeb9e52","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://7ca0cb7b2bcd1f7415620e3c4a2ea9bdcb14a5eaeeaa6860243290049f72a6e9"}]}