{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\ncontract SafeMath {\r\n    //internals\r\n\r\n    function safeMul(uint a, uint b) internal returns(uint) {\r\n        uint c = a * b;\r\n        Assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function safeSub(uint a, uint b) internal returns(uint) {\r\n        Assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function safeAdd(uint a, uint b) internal returns(uint) {\r\n        uint c = a + b;\r\n        Assert(c >= a && c >= b);\r\n        return c;\r\n    }\r\n\r\n    function Assert(bool assertion) internal {\r\n        if (!assertion) {\r\n            revert();\r\n        }\r\n    }\r\n}\r\n\r\ncontract BAP is SafeMath {\r\n    /* Public variables of the token */\r\n    string public standard = 'ERC20';\r\n    string public name = 'BAP token';\r\n    string public symbol = 'BAP';\r\n    uint8 public decimals = 0;\r\n    uint256 public totalSupply;\r\n    address public owner;\r\n    uint public tokensSoldToInvestors = 0;\r\n    uint public maxGoalInICO = 2100000000;\r\n    /* From this time on tokens may be transfered (after ICO 23h59 10/11/2017)*/\r\n    uint256 public startTime = 1509008400;\r\n    /* Tells if tokens have been burned already */\r\n    bool burned;\r\n    bool hasICOStarted;\r\n    /* This wallet will hold tokens after ICO*/\r\n    address tokensHolder = 0x12bF8E198A6474FC65cEe0e1C6f1C7f23324C8D5;\r\n    /* This creates an array with all balances */\r\n    mapping (address => uint256) public balanceOf;\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n\r\n\r\n    /* This generates a public event on the blockchain that will notify clients */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event TransferToReferral(address indexed referralAddress, uint256 value);\r\n    event Approval(address indexed Owner, address indexed spender, uint256 value);\r\n    event Burned(uint amount);\r\n\r\n    /* Initializes contract with initial supply tokens to the creator of the contract */\r\n    function BAP() {\r\n        owner = 0xB27590b9d328bA0396271303e24db44132531411;\r\n        // Give the owner all initial tokens\r\n        balanceOf[owner] = 2205000000;\r\n        // Update total supply\r\n        totalSupply      = 2205000000;\r\n    }\r\n\r\n    /* Send some of your tokens to a given address */\r\n    function transfer(address _to, uint256 _value) returns(bool success) {\r\n        //check if the crowdsale is already over\r\n        if (now < startTime) {\r\n            revert();\r\n        }\r\n\r\n        //prevent owner transfer all tokens immediately after ICO ended\r\n        if (msg.sender == owner && !burned) {\r\n            burn();\r\n            return;\r\n        }\r\n\r\n        // Subtract from the sender\r\n        balanceOf[msg.sender] = safeSub(balanceOf[msg.sender], _value);\r\n        // Add the same to the recipient\r\n        balanceOf[_to] = safeAdd(balanceOf[_to], _value);\r\n        // Notify anyone listening that this transfer took place\r\n        Transfer(msg.sender, _to, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n\r\n    /* Allow another contract or person to spend some tokens in your behalf */\r\n    function approve(address _spender, uint256 _value) returns(bool success) {\r\n        if( now < startTime && hasICOStarted) { // during ICO only allow execute this function one time\r\n            revert();\r\n        }\r\n        hasICOStarted = true;\r\n        allowance[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n    /* A contract or  person attempts to get the tokens of somebody else.\r\n    *  This is only allowed if the token holder approved. */\r\n    function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {\r\n        if (now < startTime && _from != owner) revert(); //check if the crowdsale is already over\r\n        //prevent the owner of spending his share of tokens so that owner has to burn the token left after ICO\r\n        if (_from == owner && now >= startTime && !burned) {\r\n            burn();\r\n            return;\r\n        }\r\n        if (now < startTime){\r\n            if(_value < maxGoalInICO ) {\r\n                tokensSoldToInvestors = safeAdd(tokensSoldToInvestors, _value);\r\n            } else {\r\n                _value = safeSub(_value, maxGoalInICO);\r\n            }\r\n        }\r\n        var _allowance = allowance[_from][msg.sender];\r\n        // Subtract from the sender\r\n        balanceOf[_from] = safeSub(balanceOf[_from], _value);\r\n        // Add the same to the recipient\r\n        balanceOf[_to] = safeAdd(balanceOf[_to], _value);\r\n        allowance[_from][msg.sender] = safeSub(_allowance, _value);\r\n        Transfer(_from, _to, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n    function burn(){\r\n        // if tokens have not been burned already and the ICO ended or Tokens have been sold out before ICO end.\r\n        if(!burned && ( now > startTime || tokensSoldToInvestors >= maxGoalInICO) ) {\r\n            // checked for overflow above\r\n            totalSupply = safeSub(totalSupply, balanceOf[owner]) + 900000000;\r\n            uint tokensLeft = balanceOf[owner];\r\n            balanceOf[owner] = 0;\r\n            balanceOf[tokensHolder] = 900000000;\r\n            startTime = now;\r\n            burned = true;\r\n            Burned(tokensLeft);\r\n        }\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"standard\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensSoldToInvestors\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxGoalInICO\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"referralAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferToReferral\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"Owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Burned\",\"type\":\"event\"}]","ContractName":"BAP","CompilerVersion":"v0.4.11+commit.68ef5810","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://a922d09334659abc5eceba9a3e8bfca5961dc8c16e3f11604a3e9ffa2d35c3b8"}]}