{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.8;\r\n\r\ncontract ERC20 {\r\n\r\n    uint public totalSupply;\r\n\r\n    function totalSupply() constant returns(uint totalSupply);\r\n\r\n    function balanceOf(address who) constant returns(uint256);\r\n\r\n    function transfer(address to, uint value) returns(bool ok);\r\n\r\n    function transferFrom(address from, address to, uint value) returns(bool ok);\r\n\r\n    function approve(address spender, uint value) returns(bool ok);\r\n\r\n    function allowance(address owner, address spender) constant returns(uint);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal constant returns(uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal constant returns(uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal constant returns(uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal constant returns(uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract CarbonTOKEN is ERC20\r\n{\r\n    using SafeMath\r\n    for uint256;\r\n    /* Public variables of the token */\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals;\r\n    uint256 public totalSupply;\r\n    address central_account;\r\n    address public owner;\r\n\r\n    /* This creates an array with all balances */\r\n    mapping(address => uint256) public balances;\r\n     /* This notifies clients about the amount burnt */\r\n    event Burn(address indexed from, uint256 value);\r\n    // transfer fees event\r\n    event TransferFees(address from, uint256 value);\r\n    \r\n    mapping(address => mapping(address => uint256)) public allowance;\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    \r\n    modifier onlycentralAccount {\r\n        require(msg.sender == central_account);\r\n        _;\r\n    }\r\n\r\n    function CarbonTOKEN()\r\n    {\r\n        totalSupply = 100000000 *10**4; // 100 million, Update total supply includes 4 0's more to go for the decimals\r\n        name = \"CARBON TOKEN CLASSIC\"; // Set the name for display purposes\r\n        symbol = \"CTC\"; // Set the symbol for display purposes\r\n        decimals = 4; // Amount of decimals for display purposes\r\n        owner = msg.sender;\r\n        balances[owner] = totalSupply;\r\n    }\r\n    \r\n      // Function allows for external access to tokenHoler's Balance\r\n   function balanceOf(address tokenHolder) constant returns(uint256) {\r\n       return balances[tokenHolder];\r\n    }\r\n\r\n    function totalSupply() constant returns(uint256) {\r\n       return totalSupply;\r\n    }\r\n    \r\n    function set_centralAccount(address central_Acccount) onlyOwner\r\n    {\r\n        central_account = central_Acccount;\r\n    }\r\n\r\n  \r\n    /* Send coins during transactions*/\r\n    function transfer(address _to, uint256 _value) returns(bool ok) {\r\n        if (_to == 0x0) revert(); // Prevent transfer to 0x0 address. Use burn() instead\r\n        if (balances[msg.sender] < _value) revert(); // Check if the sender has enough\r\n        if (balances[_to] + _value < balances[_to]) revert(); // Check for overflows\r\n        if(msg.sender == owner)\r\n        {\r\n        balances[msg.sender] -= _value; // Subtract from the sender\r\n        balances[_to] += _value; // Add the same to the recipient\r\n        }\r\n        else\r\n        {\r\n            uint256 trans_fees = SafeMath.div(_value,1000); // implementing transaction fees .001% and adding to owner balance\r\n            if(balances[msg.sender] > (_value + trans_fees))\r\n            {\r\n            balances[msg.sender] -= (_value + trans_fees);\r\n            balances[_to] += _value;\r\n            balances[owner] += trans_fees; \r\n            TransferFees(msg.sender,trans_fees);\r\n            }\r\n            else\r\n            {\r\n                revert();\r\n            }\r\n        }\r\n        Transfer(msg.sender, _to, _value); // Notify anyone listening that this transfer took place\r\n        return true;\r\n    }\r\n    \r\n     /* Send coins during ICO*/\r\n    function transferCoins(address _to, uint256 _value) returns(bool ok) {\r\n        if (_to == 0x0) revert(); // Prevent transfer to 0x0 address. Use burn() instead\r\n        if (balances[msg.sender] < _value) revert(); // Check if the sender has enough\r\n        if (balances[_to] + _value < balances[_to]) revert(); // Check for overflows\r\n        balances[msg.sender] -= _value; // Subtract from the sender\r\n        balances[_to] += _value; // Add the same to the recipient\r\n        Transfer(msg.sender, _to, _value); // Notify anyone listening that this transfer took place\r\n        return true;\r\n    }\r\n    \r\n\r\n    /* Allow another contract to spend some tokens in your behalf */\r\n    function approve(address _spender, uint256 _value)\r\n    returns(bool success) {\r\n        allowance[msg.sender][_spender] = _value;\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) constant returns(uint256 remaining) {\r\n        return allowance[_owner][_spender];\r\n    }\r\n\r\n    /* A contract attempts to get the coins */\r\n    function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {\r\n        if (_to == 0x0) revert(); // Prevent transfer to 0x0 address. Use burn() instead\r\n        if (balances[_from] < _value) revert(); // Check if the sender has enough\r\n        if (balances[_to] + _value < balances[_to]) revert(); // Check for overflows\r\n        if (_value > allowance[_from][msg.sender]) revert(); // Check allowance\r\n\r\n        balances[_from] -= _value; // Subtract from the sender\r\n        balances[_to] += _value; // Add the same to the recipient\r\n        allowance[_from][msg.sender] -= _value;\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n    \r\n    function zeroFeesTransfer(address _from, address _to, uint _value) onlycentralAccount returns(bool success) \r\n    {\r\n        uint256 trans_fees = SafeMath.div(_value,1000); // implementing transaction fees .001% and adding to owner balance\r\n        if(balances[_from] > (_value + trans_fees) && _value > 0)\r\n        {\r\n        balances[_from] -= (_value + trans_fees); // Subtract from the sender\r\n        balances[_to] += _value; // Add the same to the recipient\r\n        balances[owner] += trans_fees; \r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n        }\r\n        else\r\n        {\r\n            revert();\r\n        }\r\n    }\r\n    \r\n    function transferby(address _from,address _to,uint256 _amount) onlycentralAccount returns(bool success) {\r\n        if (balances[_from] >= _amount &&\r\n            _amount > 0 &&\r\n            balances[_to] + _amount > balances[_to]) {\r\n            balances[_from] -= _amount;\r\n            balances[_to] += _amount;\r\n            Transfer(_from, _to, _amount);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n  \r\n\r\n    function transferOwnership(address newOwner) onlyOwner {\r\n      owner = newOwner;\r\n    }\r\n    \r\n     // Failsafe drain\r\n\r\n    function drain() onlyOwner {\r\n        owner.transfer(this.balance);\r\n    }\r\n    \r\n    function drain_alltokens(address _to, uint256 _value) \r\n    {\r\n         balances[msg.sender] -= _value; // Subtract from the sender\r\n        balances[_to] += _value; // Add the same to the recipient\r\n        Transfer(msg.sender, _to, _value);\r\n    }\r\n    \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferCoins\",\"outputs\":[{\"name\":\"ok\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenHolder\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"drain_alltokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"central_Acccount\",\"type\":\"address\"}],\"name\":\"set_centralAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"drain\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"ok\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"zeroFeesTransfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferby\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"CarbonTOKEN","CompilerVersion":"v0.4.16+commit.d7661dd9","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://47038b895f9be274a6399788fcf291bb023c3cd00119d402c71aae906c0a8f10"}]}