{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.15;\r\n \r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) constant returns (uint256);\r\n  function transfer(address to, uint256 value) returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) returns (bool);\r\n  function approve(address spender, uint256 value) returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\nlibrary SafeMath {\r\n    \r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n \r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n \r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n \r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract BasicToken is ERC20Basic {\r\n    \r\n  using SafeMath for uint256;\r\n \r\n  mapping(address => uint256) balances;\r\n\r\n  event ShowTestB(bool _bool);\r\n  event ShowTestU(string _string, uint _uint);\r\n\r\n  //uint256 ico_finish = 1512565200;\r\n  uint256 ico_finish = 1513774800;\r\n\r\n  struct FreezePhases {\r\n    uint256 firstPhaseTime;\r\n    uint256 secondPhaseTime;\r\n    uint256 thirdPhaseTime;\r\n    uint256 fourPhaseTime;\r\n\r\n    uint256 countTokens;\r\n\r\n    uint256 firstPhaseCount;\r\n    uint256 secondPhaseCount;\r\n    uint256 thirdPhaseCount;\r\n    uint256 fourPhaseCount;\r\n  }\r\n\r\n  mapping(address => FreezePhases) founding_tokens;\r\n  mapping(address => FreezePhases) angel_tokens;\r\n  mapping(address => FreezePhases) team_core_tokens;\r\n  mapping(address => FreezePhases) pe_investors_tokens;\r\n\r\n  mapping(address => bool) forceFreeze;\r\n\r\n  address[] founding_addresses;\r\n  address[] angel_addresses;\r\n  address[] team_core_addresses;\r\n  address[] pe_investors_addresses;\r\n\r\n  function isFreeze(address _addr, uint256 _value) public {\r\n    require(!forceFreeze[_addr]);\r\n\r\n    if (now < ico_finish) {\r\n      revert();\r\n    }\r\n\r\n    bool isFounder = false;\r\n    bool isAngel = false;\r\n    bool isTeam = false;\r\n    bool isPE = false;\r\n\r\n    //for founding\r\n    //-----------------------------------------------------//\r\n\r\n    isFounder = findAddress(founding_addresses, _addr);\r\n\r\n    if (isFounder) {\r\n      if (now > founding_tokens[_addr].firstPhaseTime && now < founding_tokens[_addr].secondPhaseTime) {\r\n        if (_value <= founding_tokens[_addr].firstPhaseCount) {\r\n          founding_tokens[_addr].firstPhaseCount = founding_tokens[_addr].firstPhaseCount - _value;\r\n        } else {\r\n          revert();\r\n        }\r\n      } else {\r\n        founding_tokens[_addr].secondPhaseCount = founding_tokens[_addr].secondPhaseCount + founding_tokens[_addr].firstPhaseCount;\r\n        founding_tokens[_addr].firstPhaseCount = 0;\r\n      }\r\n\r\n      if (now > founding_tokens[_addr].secondPhaseTime && now < founding_tokens[_addr].thirdPhaseTime) {\r\n        if (_value <= founding_tokens[_addr].secondPhaseCount) {\r\n          founding_tokens[_addr].secondPhaseCount = founding_tokens[_addr].secondPhaseCount - _value;\r\n        } else {\r\n          revert();\r\n        }\r\n      } else {\r\n        founding_tokens[_addr].thirdPhaseCount = founding_tokens[_addr].thirdPhaseCount + founding_tokens[_addr].secondPhaseCount;\r\n        founding_tokens[_addr].secondPhaseCount = 0;\r\n      }\r\n\r\n      if (now > founding_tokens[_addr].thirdPhaseTime && now < founding_tokens[_addr].fourPhaseTime) {\r\n        if (_value <= founding_tokens[_addr].thirdPhaseCount) {\r\n          founding_tokens[_addr].thirdPhaseCount = founding_tokens[_addr].thirdPhaseCount - _value;\r\n        } else {\r\n          revert();\r\n        }\r\n      } else {\r\n        founding_tokens[_addr].fourPhaseCount = founding_tokens[_addr].fourPhaseCount + founding_tokens[_addr].thirdPhaseCount;\r\n        founding_tokens[_addr].thirdPhaseCount = 0;\r\n      }\r\n\r\n      if (now > founding_tokens[_addr].fourPhaseTime) {\r\n        if (_value <= founding_tokens[_addr].fourPhaseCount) {\r\n          founding_tokens[_addr].fourPhaseCount = founding_tokens[_addr].fourPhaseCount - _value;\r\n        } else {\r\n          revert();\r\n        }\r\n      }\r\n    }\r\n    //-----------------------------------------------------//\r\n\r\n    //for angel\r\n    //-----------------------------------------------------//\r\n\r\n    isAngel = findAddress(angel_addresses, _addr);\r\n\r\n    ShowTestB(isAngel);\r\n    ShowTestU(\"firstPhaseCount\", angel_tokens[_addr].firstPhaseCount);\r\n    ShowTestB(_value <= angel_tokens[_addr].firstPhaseCount);\r\n\r\n    if (isAngel) {\r\n      if (now > angel_tokens[_addr].firstPhaseTime && now < angel_tokens[_addr].secondPhaseTime) {\r\n        if (_value <= angel_tokens[_addr].firstPhaseCount) {\r\n          angel_tokens[_addr].firstPhaseCount = angel_tokens[_addr].firstPhaseCount - _value;\r\n        } else {\r\n          revert();\r\n        }\r\n      } else {\r\n        angel_tokens[_addr].secondPhaseCount = angel_tokens[_addr].secondPhaseCount + angel_tokens[_addr].firstPhaseCount;\r\n        angel_tokens[_addr].firstPhaseCount = 0;\r\n      }\r\n\r\n      if (now > angel_tokens[_addr].secondPhaseTime && now < angel_tokens[_addr].thirdPhaseTime) {\r\n        if (_value <= angel_tokens[_addr].secondPhaseCount) {\r\n          angel_tokens[_addr].secondPhaseCount = angel_tokens[_addr].secondPhaseCount - _value;\r\n        } else {\r\n          revert();\r\n        }\r\n      } else {\r\n        angel_tokens[_addr].thirdPhaseCount = angel_tokens[_addr].thirdPhaseCount + angel_tokens[_addr].secondPhaseCount;\r\n        angel_tokens[_addr].secondPhaseCount = 0;\r\n      }\r\n\r\n      if (now > angel_tokens[_addr].thirdPhaseTime && now < angel_tokens[_addr].fourPhaseTime) {\r\n        if (_value <= angel_tokens[_addr].thirdPhaseCount) {\r\n          angel_tokens[_addr].thirdPhaseCount = angel_tokens[_addr].thirdPhaseCount - _value;\r\n        } else {\r\n          revert();\r\n        }\r\n      } else {\r\n        angel_tokens[_addr].fourPhaseCount = angel_tokens[_addr].fourPhaseCount + angel_tokens[_addr].thirdPhaseCount;\r\n        angel_tokens[_addr].thirdPhaseCount = 0;\r\n      }\r\n\r\n      if (now > angel_tokens[_addr].fourPhaseTime) {\r\n        if (_value <= angel_tokens[_addr].fourPhaseCount) {\r\n          angel_tokens[_addr].fourPhaseCount = angel_tokens[_addr].fourPhaseCount - _value;\r\n        } else {\r\n          revert();\r\n        }\r\n      }\r\n    }\r\n    //-----------------------------------------------------//\r\n\r\n    //for Team Core\r\n    //-----------------------------------------------------//\r\n\r\n    isTeam = findAddress(team_core_addresses, _addr);\r\n\r\n    if (isTeam) {\r\n      if (now > team_core_tokens[_addr].firstPhaseTime && now < team_core_tokens[_addr].secondPhaseTime) {\r\n        if (_value <= team_core_tokens[_addr].firstPhaseCount) {\r\n          team_core_tokens[_addr].firstPhaseCount = team_core_tokens[_addr].firstPhaseCount - _value;\r\n        } else {\r\n          revert();\r\n        }\r\n      } else {\r\n        team_core_tokens[_addr].secondPhaseCount = team_core_tokens[_addr].secondPhaseCount + team_core_tokens[_addr].firstPhaseCount;\r\n        team_core_tokens[_addr].firstPhaseCount = 0;\r\n      }\r\n\r\n      if (now > team_core_tokens[_addr].secondPhaseTime && now < team_core_tokens[_addr].thirdPhaseTime) {\r\n        if (_value <= team_core_tokens[_addr].secondPhaseCount) {\r\n          team_core_tokens[_addr].secondPhaseCount = team_core_tokens[_addr].secondPhaseCount - _value;\r\n        } else {\r\n          revert();\r\n        }\r\n      } else {\r\n        team_core_tokens[_addr].thirdPhaseCount = team_core_tokens[_addr].thirdPhaseCount + team_core_tokens[_addr].secondPhaseCount;\r\n        team_core_tokens[_addr].secondPhaseCount = 0;\r\n      }\r\n\r\n      if (now > team_core_tokens[_addr].thirdPhaseTime && now < team_core_tokens[_addr].fourPhaseTime) {\r\n        if (_value <= team_core_tokens[_addr].thirdPhaseCount) {\r\n          team_core_tokens[_addr].thirdPhaseCount = team_core_tokens[_addr].thirdPhaseCount - _value;\r\n        } else {\r\n          revert();\r\n        }\r\n      } else {\r\n        team_core_tokens[_addr].fourPhaseCount = team_core_tokens[_addr].fourPhaseCount + team_core_tokens[_addr].thirdPhaseCount;\r\n        team_core_tokens[_addr].thirdPhaseCount = 0;\r\n      }\r\n\r\n      if (now > team_core_tokens[_addr].fourPhaseTime) {\r\n        if (_value <= team_core_tokens[_addr].fourPhaseCount) {\r\n          team_core_tokens[_addr].fourPhaseCount = team_core_tokens[_addr].fourPhaseCount - _value;\r\n        } else {\r\n          revert();\r\n        }\r\n      }\r\n    }\r\n    //-----------------------------------------------------//\r\n\r\n    //for PE Investors\r\n    //-----------------------------------------------------//\r\n\r\n    isPE = findAddress(pe_investors_addresses, _addr);\r\n\r\n    if (isPE) {\r\n      if (now > pe_investors_tokens[_addr].firstPhaseTime && now < pe_investors_tokens[_addr].secondPhaseTime) {\r\n        if (_value <= pe_investors_tokens[_addr].firstPhaseCount) {\r\n          pe_investors_tokens[_addr].firstPhaseCount = pe_investors_tokens[_addr].firstPhaseCount - _value;\r\n        } else {\r\n          revert();\r\n        }\r\n      } else {\r\n        pe_investors_tokens[_addr].secondPhaseCount = pe_investors_tokens[_addr].secondPhaseCount + pe_investors_tokens[_addr].firstPhaseCount;\r\n        pe_investors_tokens[_addr].firstPhaseCount = 0;\r\n      }\r\n\r\n      if (now > pe_investors_tokens[_addr].secondPhaseTime && now < pe_investors_tokens[_addr].thirdPhaseTime) {\r\n        if (_value <= pe_investors_tokens[_addr].secondPhaseCount) {\r\n          pe_investors_tokens[_addr].secondPhaseCount = pe_investors_tokens[_addr].secondPhaseCount - _value;\r\n        } else {\r\n          revert();\r\n        }\r\n      } else {\r\n        pe_investors_tokens[_addr].thirdPhaseCount = pe_investors_tokens[_addr].thirdPhaseCount + pe_investors_tokens[_addr].secondPhaseCount;\r\n        pe_investors_tokens[_addr].secondPhaseCount = 0;\r\n      }\r\n\r\n      if (now > pe_investors_tokens[_addr].thirdPhaseTime && now < pe_investors_tokens[_addr].fourPhaseTime) {\r\n        if (_value <= pe_investors_tokens[_addr].thirdPhaseCount) {\r\n          pe_investors_tokens[_addr].thirdPhaseCount = pe_investors_tokens[_addr].thirdPhaseCount - _value;\r\n        } else {\r\n          revert();\r\n        }\r\n      } else {\r\n        pe_investors_tokens[_addr].fourPhaseCount = pe_investors_tokens[_addr].fourPhaseCount + pe_investors_tokens[_addr].thirdPhaseCount;\r\n        pe_investors_tokens[_addr].thirdPhaseCount = 0;\r\n      }\r\n\r\n      if (now > pe_investors_tokens[_addr].fourPhaseTime) {\r\n        if (_value <= pe_investors_tokens[_addr].fourPhaseCount) {\r\n          pe_investors_tokens[_addr].fourPhaseCount = pe_investors_tokens[_addr].fourPhaseCount - _value;\r\n        } else {\r\n          revert();\r\n        }\r\n      }\r\n    }\r\n    //-----------------------------------------------------//\r\n\r\n\r\n  }\r\n\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(balances[msg.sender] >= _value);\r\n    isFreeze(msg.sender, _value);\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  function newTransfer(address _from, address _to, uint256 _value) internal returns (bool) {\r\n    require(balances[_from] >= _value);\r\n    isFreeze(_from, _value);\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n \r\n  function balanceOf(address _owner) constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n  function findAddress(address[] _addresses, address _addr) private returns(bool) {\r\n    for (uint256 i = 0; i < _addresses.length; i++) {\r\n      if (_addresses[i] == _addr) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n \r\n}\r\ncontract Ownable {\r\n    \r\n  address public owner;\r\n \r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  function transferOwnership(address newOwner) onlyOwner {\r\n    require(newOwner != address(0));      \r\n    owner = newOwner;\r\n  }\r\n \r\n}\r\ncontract StandardToken is ERC20, BasicToken {\r\n \r\n  mapping (address => mapping (address => uint256)) allowed;\r\n \r\n  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\r\n    isFreeze(_from, _value);\r\n    var _allowance = allowed[_from][msg.sender];\r\n \r\n    balances[_to] = balances[_to].add(_value);\r\n    balances[_from] = balances[_from].sub(_value);\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n}\r\ncontract MintableToken is StandardToken, Ownable {\r\n\r\n  using SafeMath for uint256;\r\n\r\n  bool mintingFinished = false;\r\n\r\n  bool private initialize = false;\r\n\r\n  // when ICO Finish\r\n  uint256 firstPhaseTime = 0;\r\n  // when 3 months Finish\r\n  uint256 secondPhaseTime = 0;\r\n  // when 6 months Finish\r\n  uint256 thirdPhaseTime = 0;\r\n  // when 9 months Finish\r\n  uint256 fourPhaseTime = 0;\r\n\r\n  uint256 countTokens = 0;\r\n\r\n  uint256 firstPart = 0;\r\n  uint256 secondPart = 0;\r\n  uint256 thirdPart = 0;\r\n\r\n  // 25%\r\n  uint256 firstPhaseCount = 0;\r\n  // 25%\r\n  uint256 secondPhaseCount = 0;\r\n  // 25%\r\n  uint256 thirdPhaseCount = 0;\r\n  // 25%\r\n  uint256 fourPhaseCount = 0;\r\n\r\n  uint256 totalAmount = 500000000E18;         // 500 000 000;  // with 18 decimals\r\n\r\n  address poolAddress;\r\n\r\n  bool unsoldMove = false;\r\n\r\n  event Mint(address indexed to, uint256 amount);\r\n\r\n    modifier isInitialize() {\r\n    require(!initialize);\r\n    _;\r\n  }\r\n\r\n  function setTotalSupply(address _addr) public onlyOwner isInitialize {\r\n    totalSupply = totalAmount;\r\n    poolAddress = _addr;\r\n    mint(_addr, totalAmount);\r\n    initialize = true;\r\n  }\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  function tokenTransferOwnership(address _address) public onlyOwner {\r\n    transferOwnership(_address);\r\n  }\r\n\r\n  function finishMinting() public onlyOwner {\r\n    mintingFinished = true;\r\n  }\r\n  \r\n  function mint(address _address, uint256 _tokens) canMint onlyOwner public {\r\n\r\n    Mint(_address, _tokens);\r\n\r\n    balances[_address] = balances[_address].add(_tokens);\r\n  }\r\n\r\n  function transferTokens(address _to, uint256 _amount, uint256 freezeTime, uint256 _type) public onlyOwner {\r\n    require(balances[poolAddress] >= _amount);\r\n\r\n    Transfer(poolAddress, _to, _amount);\r\n\r\n    ShowTestU(\"Before condition\",_amount);\r\n\r\n    if (_type == 0) {\r\n      setFreezeForAngel(freezeTime, _to, _amount);\r\n    ShowTestU(\"Inside\", _amount);      \r\n      balances[poolAddress] = balances[poolAddress] - _amount;\r\n      balances[_to] = balances[_to] + _amount;\r\n    }\r\n\r\n    if (_type == 1) {\r\n      setFreezeForFounding(freezeTime, _to, _amount);\r\n      balances[poolAddress] = balances[poolAddress] - _amount;\r\n      balances[_to] = balances[_to] + _amount;\r\n    }\r\n\r\n    if (_type == 2) {\r\n      setFreezeForPEInvestors(freezeTime, _to, _amount);\r\n      balances[poolAddress] = balances[poolAddress] - _amount;\r\n      balances[_to] = balances[_to] + _amount;\r\n    }\r\n  }\r\n\r\n  function transferTokens(address _from, address _to, uint256 _amount, uint256 freezeTime, uint256 _type) public onlyOwner {\r\n    require(balances[_from] >= _amount);\r\n\r\n    Transfer(_from, _to, _amount);\r\n\r\n    if (_type == 3) {\r\n      setFreezeForCoreTeam(freezeTime, _to, _amount);\r\n      balances[_from] = balances[_from] - _amount;\r\n      balances[_to] = balances[_to] + _amount;\r\n    }\r\n  }\r\n\r\n  // 0\r\n  function setFreezeForAngel(uint256 _time, address _address, uint256 _tokens) onlyOwner public {\r\n    ico_finish = _time;\r\n    \r\n    if (angel_tokens[_address].firstPhaseTime != ico_finish) {\r\n      angel_addresses.push(_address);\r\n    }\r\n\r\n    // when ICO Finish\r\n    firstPhaseTime = ico_finish;\r\n    // when 3 months Finish\r\n    secondPhaseTime = ico_finish + 90 days;\r\n    // when 6 months Finish\r\n    thirdPhaseTime = ico_finish + 180 days;\r\n    // when 9 months Finish\r\n    fourPhaseTime = ico_finish + 270 days;\r\n\r\n    countTokens = angel_tokens[_address].countTokens + _tokens;\r\n\r\n    firstPart = _tokens.mul(25).div(100);\r\n\r\n    // 25%\r\n    firstPhaseCount = angel_tokens[_address].firstPhaseCount + firstPart;\r\n    // 25%\r\n    secondPhaseCount = angel_tokens[_address].secondPhaseCount + firstPart;\r\n    // 25%\r\n    thirdPhaseCount = angel_tokens[_address].thirdPhaseCount + firstPart;\r\n    // 25%\r\n    fourPhaseCount = angel_tokens[_address].fourPhaseCount + firstPart;\r\n\r\n    ShowTestU(\"setFreezeForAngel: firstPhaseCount\", firstPhaseCount);\r\n\r\n    FreezePhases memory freezePhase = FreezePhases({firstPhaseTime: firstPhaseTime, secondPhaseTime: secondPhaseTime, thirdPhaseTime: thirdPhaseTime, fourPhaseTime: fourPhaseTime, countTokens: countTokens, firstPhaseCount: firstPhaseCount, secondPhaseCount: secondPhaseCount, thirdPhaseCount: thirdPhaseCount, fourPhaseCount: fourPhaseCount});\r\n    \r\n    angel_tokens[_address] = freezePhase;\r\n\r\n    ShowTestU(\"setFreezeForAngel: angel_tokens[_address].firstPhaseCount\", angel_tokens[_address].firstPhaseCount);\r\n  }\r\n  // 1\r\n  function setFreezeForFounding(uint256 _time, address _address, uint256 _tokens) onlyOwner public {\r\n    ico_finish = _time;\r\n\r\n    if (founding_tokens[_address].firstPhaseTime != ico_finish) {\r\n      founding_addresses.push(_address);\r\n    }\r\n\r\n    // when ICO Finish\r\n    firstPhaseTime = ico_finish;\r\n    // when 3 months Finish\r\n    secondPhaseTime = ico_finish + 180 days;\r\n    // when 6 months Finish\r\n    thirdPhaseTime = ico_finish + 360 days;\r\n    // when 9 months Finish\r\n    fourPhaseTime = ico_finish + 540 days;\r\n\r\n    countTokens = founding_tokens[_address].countTokens + _tokens;\r\n\r\n    firstPart = _tokens.mul(20).div(100);\r\n    secondPart = _tokens.mul(30).div(100);\r\n\r\n    // 20%\r\n    firstPhaseCount = founding_tokens[_address].firstPhaseCount + firstPart;\r\n    // 20%\r\n    secondPhaseCount = founding_tokens[_address].secondPhaseCount + firstPart;\r\n    // 30%\r\n    thirdPhaseCount = founding_tokens[_address].thirdPhaseCount + secondPart;\r\n    // 30%\r\n    fourPhaseCount = founding_tokens[_address].fourPhaseCount + secondPart;\r\n\r\n    FreezePhases memory freezePhase = FreezePhases(firstPhaseTime, secondPhaseTime, thirdPhaseTime, fourPhaseTime, countTokens, firstPhaseCount, secondPhaseCount, thirdPhaseCount, fourPhaseCount);\r\n    \r\n    angel_tokens[_address] = freezePhase;\r\n\r\n  }\r\n  // 2\r\n  function setFreezeForPEInvestors(uint256 _time, address _address, uint256 _tokens) onlyOwner public {\r\n    ico_finish = _time;\r\n\r\n    if (pe_investors_tokens[_address].firstPhaseTime != ico_finish) {\r\n      pe_investors_addresses.push(_address);\r\n    }\r\n\r\n    // when ICO Finish\r\n    firstPhaseTime = ico_finish;\r\n    // when 3 months Finish\r\n    secondPhaseTime = ico_finish + 180 days;\r\n    // when 6 months Finish\r\n    thirdPhaseTime = ico_finish + 360 days;\r\n    // when 9 months Finish\r\n    fourPhaseTime = ico_finish + 540 days;\r\n\r\n    countTokens = pe_investors_tokens[_address].countTokens + _tokens;\r\n\r\n    firstPart = _tokens.mul(20).div(100);\r\n    secondPart = _tokens.mul(30).div(100);\r\n\r\n    // 20%\r\n    firstPhaseCount = pe_investors_tokens[_address].firstPhaseCount + firstPart;\r\n    // 20%\r\n    secondPhaseCount = pe_investors_tokens[_address].secondPhaseCount + firstPart;\r\n    // 30%\r\n    thirdPhaseCount = pe_investors_tokens[_address].thirdPhaseCount + secondPart;\r\n    // 30%\r\n    fourPhaseCount = pe_investors_tokens[_address].fourPhaseCount + secondPart;\r\n  }\r\n  // 3\r\n  function setFreezeForCoreTeam(uint256 _time, address _address, uint256 _tokens) onlyOwner public {\r\n    ico_finish = _time;\r\n\r\n    if (team_core_tokens[_address].firstPhaseTime != ico_finish) {\r\n      team_core_addresses.push(_address);\r\n    }\r\n\r\n    // when ICO Finish\r\n    firstPhaseTime = ico_finish;\r\n    // when 6 months Finish\r\n    secondPhaseTime = ico_finish + 180 days;\r\n    // when 12 months Finish\r\n    thirdPhaseTime = ico_finish + 360 days;\r\n    // when 18 months Finish\r\n    fourPhaseTime = ico_finish + 540 days;\r\n\r\n    countTokens = team_core_tokens[_address].countTokens + _tokens;\r\n\r\n    firstPart = _tokens.mul(5).div(100);\r\n    secondPart = _tokens.mul(10).div(100);\r\n    thirdPart = _tokens.mul(75).div(100);\r\n\r\n    // 5%\r\n    firstPhaseCount = team_core_tokens[_address].firstPhaseCount + firstPart;\r\n    // 10%\r\n    secondPhaseCount = team_core_tokens[_address].secondPhaseCount + secondPart;\r\n    // 10%\r\n    thirdPhaseCount = team_core_tokens[_address].thirdPhaseCount + secondPart;\r\n    // 75%\r\n    fourPhaseCount = team_core_tokens[_address].fourPhaseCount + thirdPart;\r\n  }\r\n\r\n  function withdrowTokens(address _address, uint256 _tokens) onlyOwner public {\r\n    balances[poolAddress] = balances[poolAddress] - _tokens;\r\n    balances[_address] = balances[_address].add(_tokens);\r\n  }\r\n\r\n  function getOwnerToken() public constant returns(address) {\r\n    return owner;\r\n  }\r\n\r\n  function setFreeze(address _addr) public onlyOwner {\r\n    forceFreeze[_addr] = true;\r\n  }\r\n\r\n  function removeFreeze(address _addr) public onlyOwner {\r\n    forceFreeze[_addr] = false;\r\n  }\r\n\r\n  function moveUnsold(address _addr) public onlyOwner {\r\n    require(!unsoldMove);\r\n    \r\n    balances[_addr] = balances[_addr].add(balances[poolAddress]);\r\n\r\n    unsoldMove = true;\r\n  }\r\n\r\n  function newTransferManualTokensnewTransfer(address _from, address _to, uint256 _value) onlyOwner returns (bool) {\r\n    return newTransfer(_from, _to, _value);\r\n  }\r\n\r\n  function approve(address _spender, uint256 _value) returns (bool) {\r\n \r\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n \r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n \r\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n \r\n}\r\ncontract SingleTokenCoin is MintableToken {\r\n    \r\n    string public constant name = \"ADD Token\";\r\n    \r\n    string public constant symbol = \"ADD\";\r\n    \r\n    uint32 public constant decimals = 18;\r\n    \r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_time\",\"type\":\"uint256\"},{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"setFreezeForAngel\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"tokenTransferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_time\",\"type\":\"uint256\"},{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"setFreezeForCoreTeam\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setFreeze\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"isFreeze\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_time\",\"type\":\"uint256\"},{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"setFreezeForPEInvestors\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"freezeTime\",\"type\":\"uint256\"},{\"name\":\"_type\",\"type\":\"uint256\"}],\"name\":\"transferTokens\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setTotalSupply\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"newTransferManualTokensnewTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"withdrowTokens\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"removeFreeze\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_time\",\"type\":\"uint256\"},{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"setFreezeForFounding\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"freezeTime\",\"type\":\"uint256\"},{\"name\":\"_type\",\"type\":\"uint256\"}],\"name\":\"transferTokens\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwnerToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"moveUnsold\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_bool\",\"type\":\"bool\"}],\"name\":\"ShowTestB\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_string\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_uint\",\"type\":\"uint256\"}],\"name\":\"ShowTestU\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"SingleTokenCoin","CompilerVersion":"v0.4.15+commit.bbb8e64f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://262b4251a840a20148e203a46551615dfc513e718869019de35ef459e937bb8f"}]}