{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.16;\r\n\r\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public; }\r\n\r\ncontract MANToken {\r\n    string public name; // MAN\r\n    string public symbol; // MAN\r\n    uint256 public decimals = 18;\r\n    uint256 DECIMALSFACTOR = 10**decimals;\r\n    uint256 constant weiDECIMALS = 18; \r\n    uint256 weiFACTOR =  10 ** weiDECIMALS; \r\n    \r\n    address ethFundAddress  = 0xdF039a39899eC1Bc571eBcb7944B3b3A0A30C36d; \r\n\r\n    address address1 = 0x75C6CBe2cd50932D1E565A9B1Aea9F7671c7fEbc; \r\n    address address2 = 0xD94D499685bDdC28477f394bf3d7e4Ba729077f6; \r\n    address address3 = 0x11786422E7dF7A88Ea47C2dA76EE0a94aD2c5c64; \r\n    address address4 = 0xb1Df8C1a78582Db6CeEbFe6aAE3E01617198322e; \r\n    address address5 = 0x7eCc05F2da74036a9152dB3a4891f0AFDBB4eCc2; \r\n    address address6 = 0x39aC1d06EA941E2A41113F54737D49d9dD2c5022; \r\n    address address7 = 0x371895F2000053a61216011Aa43542cdd0dEb750; \r\n    address address8 = 0xf6a5F686bAd809b2Eb163fBE7Df646c472458852; \r\n    address address9 = 0xD21eF6388b232E5ceb6c2a43F93D7337dEb63274; \r\n    address address10 = 0xE92fFe240773E1F60fe17db7fAF8a3CdCD7bC6EC;\r\n\r\n    uint256 public startTime; \r\n    uint256 public endTime; \r\n    uint256 lockedDuration = 3 * 24 * 60 * 60; \r\n    uint256 tokenPerETH = 3780; \r\n\r\n    address contractOwner; \r\n    uint256 ethRaised; \r\n    uint256 tokenDistributed; \r\n    uint256 donationCount; \r\n    uint256 public currentTokenPerETH = tokenPerETH;     \r\n\r\n    uint256 public totalSupply = 250 * (10**6) * DECIMALSFACTOR;\r\n    uint256 softCap = 20 * (10**6) * DECIMALSFACTOR; \r\n    uint256 reservedAmountPerAddress = 20 * (10**6) * DECIMALSFACTOR;\r\n    uint256 minimumDonation = 5 * 10 ** (weiDECIMALS - 1); \r\n    \r\n    uint256 public availableSupply = totalSupply; \r\n    uint8 public currentStage = 0;\r\n    bool public isInLockStage = true;\r\n    bool public finalised = false;\r\n\r\n    mapping (address => uint256) public balanceOf;\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n\r\n    // This generates a public event on the blockchain that will notify clients\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    // This notifies clients about the amount burnt\r\n    event Burn(address indexed from, uint256 value);\r\n\r\n    function MANToken(\r\n        string tokenName,\r\n        string tokenSymbol,\r\n        uint256 _startTimestamp,\r\n        uint256 _endTimestamp) \r\n    public {\r\n        contractOwner = msg.sender;\r\n\r\n        name = tokenName; \r\n        symbol = tokenSymbol; \r\n        startTime = _startTimestamp;\r\n        endTime = _endTimestamp; \r\n\r\n        balanceOf[address1] += reservedAmountPerAddress;\r\n        availableSupply -= reservedAmountPerAddress;\r\n\r\n        balanceOf[address2] += reservedAmountPerAddress;\r\n        availableSupply -= reservedAmountPerAddress;\r\n\r\n        balanceOf[address3] += reservedAmountPerAddress;\r\n        availableSupply -= reservedAmountPerAddress;\r\n\r\n        balanceOf[address4] += reservedAmountPerAddress;\r\n        availableSupply -= reservedAmountPerAddress;\r\n\r\n        balanceOf[address5] += reservedAmountPerAddress;\r\n        availableSupply -= reservedAmountPerAddress;\r\n\r\n        balanceOf[address6] += reservedAmountPerAddress;\r\n        availableSupply -= reservedAmountPerAddress;\r\n\r\n        balanceOf[address7] += reservedAmountPerAddress;\r\n        availableSupply -= reservedAmountPerAddress;\r\n\r\n        balanceOf[address8] += reservedAmountPerAddress;\r\n        availableSupply -= reservedAmountPerAddress;\r\n\r\n        balanceOf[address9] += reservedAmountPerAddress;\r\n        availableSupply -= reservedAmountPerAddress;\r\n\r\n        balanceOf[address10] += reservedAmountPerAddress;\r\n        availableSupply -= reservedAmountPerAddress;\r\n\r\n        balanceOf[contractOwner] = availableSupply;\r\n    }\r\n\r\n\r\n    function () payable public {\r\n        require(!finalised);\r\n\r\n        require(block.timestamp >= startTime);\r\n        require(block.timestamp <= endTime);\r\n\r\n        require(availableSupply > 0);\r\n\r\n        mintMAN(); \r\n    }\r\n\r\n    function mintMAN() payable public {\r\n        require(msg.value >= minimumDonation); \r\n\r\n        uint256 preLockedTime = startTime + lockedDuration;\r\n        \r\n        if (block.timestamp <= preLockedTime) { \r\n            currentStage = 0;\r\n            isInLockStage = true;\r\n        }else if (block.timestamp > preLockedTime && tokenDistributed <= softCap) { \r\n            currentStage = 1;\r\n            isInLockStage = true;\r\n        }else if (block.timestamp > preLockedTime && tokenDistributed <= 35 * (10**6) * DECIMALSFACTOR) { \r\n            currentTokenPerETH = 3430;\r\n            currentStage = 2;\r\n            isInLockStage = false;\r\n        }else if (block.timestamp > preLockedTime && tokenDistributed >= 35 * (10**6) * DECIMALSFACTOR) { \r\n            currentTokenPerETH = 3150;\r\n            currentStage = 3;\r\n            isInLockStage = false;\r\n        }\r\n\r\n        uint256 tokenValue = currentTokenPerETH * msg.value / 10 ** (weiDECIMALS - decimals);\r\n        uint256 etherValue = msg.value;\r\n\r\n        if (tokenValue > availableSupply) {\r\n            tokenValue = availableSupply;\r\n            \r\n            etherValue = weiFACTOR * availableSupply / currentTokenPerETH / DECIMALSFACTOR;\r\n\r\n            require(msg.sender.send(msg.value - etherValue));\r\n        }\r\n\r\n        ethRaised += etherValue;\r\n        donationCount += 1;\r\n        availableSupply -= tokenValue;\r\n\r\n        _transfer(contractOwner, msg.sender, tokenValue);\r\n        tokenDistributed += tokenValue;\r\n\r\n        require(ethFundAddress.send(etherValue));\r\n    }\r\n\r\n    /**\r\n     * Internal transfer, only can be called by this contract\r\n     */\r\n    function _transfer(address _from, address _to, uint _value) internal {\r\n        // Prevent transfer to 0x0 address. Use burn() instead\r\n        require(_to != 0x0);\r\n        // Check if the sender has enough\r\n        require(balanceOf[_from] >= _value);\r\n        // Check for overflows\r\n        require(balanceOf[_to] + _value > balanceOf[_to]);\r\n        // Save this for an assertion in the future\r\n        uint previousBalances = balanceOf[_from] + balanceOf[_to];\r\n        // Subtract from the sender\r\n        balanceOf[_from] -= _value;\r\n        // Add the same to the recipient\r\n        balanceOf[_to] += _value;\r\n        Transfer(_from, _to, _value);\r\n        // Asserts are used to use static analysis to find bugs in your code. They should never fail\r\n        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public {\r\n        require(!isInLockStage);\r\n        _transfer(msg.sender, _to, _value);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        require(_value <= allowance[_from][msg.sender]);     // Check allowance\r\n        allowance[_from][msg.sender] -= _value;\r\n        _transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public\r\n        returns (bool success) {\r\n        allowance[msg.sender][_spender] = _value;\r\n        return true;\r\n    }\r\n\r\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\r\n        public\r\n        returns (bool success) {\r\n        tokenRecipient spender = tokenRecipient(_spender);\r\n        if (approve(_spender, _value)) {\r\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\r\n            return true;\r\n        }\r\n    }\r\n\r\n    function burn(uint256 _value) public returns (bool success) {\r\n        require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\r\n        balanceOf[msg.sender] -= _value;            // Subtract from the sender\r\n        totalSupply -= _value;                      // Updates totalSupply\r\n        Burn(msg.sender, _value);\r\n        return true;\r\n    }\r\n\r\n    function burnFrom(address _from, uint256 _value) public returns (bool success) {\r\n        require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\r\n        require(_value <= allowance[_from][msg.sender]);    // Check allowance\r\n        balanceOf[_from] -= _value;                         // Subtract from the targeted balance\r\n        allowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance\r\n        totalSupply -= _value;                              // Update totalSupply\r\n        Burn(_from, _value);\r\n        return true;\r\n    }\r\n\r\n    function finalise() public {\r\n        require( msg.sender == contractOwner );\r\n        require(!finalised);\r\n\r\n        finalised = true;\r\n    } \r\n\r\n\tfunction unlockTokens() public {\r\n        require(msg.sender == contractOwner);\r\n        isInLockStage = false;\r\n    }\r\n\r\n    function tokenHasDistributed() public constant returns (uint256) {\r\n        return tokenDistributed;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"mintMAN\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"finalised\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentStage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentTokenPerETH\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"availableSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalise\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isInLockStage\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenHasDistributed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unlockTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"tokenName\",\"type\":\"string\"},{\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"name\":\"_startTimestamp\",\"type\":\"uint256\"},{\"name\":\"_endTimestamp\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"}]","ContractName":"MANToken","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000005a5ebc30000000000000000000000000000000000000000000000000000000005a8505c000000000000000000000000000000000000000000000000000000000000000114d4154524958204149204e6574776f726b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034d414e0000000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://b2e70bb7b9a6d34850f4732447711b3047a9b34c8336ba7592021dfee7aa8ee3"}]}