{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13;\r\n\r\ncontract DSAuthority {\r\n    function canCall(\r\n        address src, address dst, bytes4 sig\r\n    ) public view returns (bool);\r\n}\r\n\r\ncontract DSAuthEvents {\r\n    event LogSetAuthority (address indexed authority);\r\n    event LogSetOwner     (address indexed owner);\r\n}\r\n\r\ncontract DSAuth is DSAuthEvents {\r\n    DSAuthority  public  authority;\r\n    address      public  owner;\r\n\r\n    function DSAuth() public {\r\n        owner = msg.sender;\r\n        LogSetOwner(msg.sender);\r\n    }\r\n\r\n    function setOwner(address owner_)\r\n        public\r\n        auth\r\n    {\r\n        owner = owner_;\r\n        LogSetOwner(owner);\r\n    }\r\n\r\n    function setAuthority(DSAuthority authority_)\r\n        public\r\n        auth\r\n    {\r\n        authority = authority_;\r\n        LogSetAuthority(authority);\r\n    }\r\n\r\n    modifier auth {\r\n        require(isAuthorized(msg.sender, msg.sig));\r\n        _;\r\n    }\r\n\r\n    function isAuthorized(address src, bytes4 sig) internal view returns (bool) {\r\n        if (src == address(this)) {\r\n            return true;\r\n        } else if (src == owner) {\r\n            return true;\r\n        } else if (authority == DSAuthority(0)) {\r\n            return false;\r\n        } else {\r\n            return authority.canCall(src, this, sig);\r\n        }\r\n    }\r\n}\r\n\r\ncontract DSNote {\r\n    event LogNote(\r\n        bytes4   indexed  sig,\r\n        address  indexed  guy,\r\n        bytes32  indexed  foo,\r\n        bytes32  indexed  bar,\r\n        uint              wad,\r\n        bytes             fax\r\n    ) anonymous;\r\n\r\n    modifier note {\r\n        bytes32 foo;\r\n        bytes32 bar;\r\n\r\n        assembly {\r\n            foo := calldataload(4)\r\n            bar := calldataload(36)\r\n        }\r\n\r\n        LogNote(msg.sig, msg.sender, foo, bar, msg.value, msg.data);\r\n\r\n        _;\r\n    }\r\n}\r\n\r\n// Token standard API\r\n// https://github.com/ethereum/EIPs/issues/20\r\n\r\ncontract ERC20 {\r\n    function totalSupply() public view returns (uint supply);\r\n    function balanceOf( address who ) public view returns (uint value);\r\n    function allowance( address owner, address spender ) public view returns (uint _allowance);\r\n\r\n    function transfer( address to, uint value) public returns (bool ok);\r\n    function transferFrom( address from, address to, uint value) public returns (bool ok);\r\n    function approve( address spender, uint value ) public returns (bool ok);\r\n\r\n    event Transfer( address indexed from, address indexed to, uint value);\r\n    event Approval( address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\ncontract DSStop is DSNote, DSAuth {\r\n\r\n    bool public stopped;\r\n\r\n    modifier stoppable {\r\n        require(!stopped);\r\n        _;\r\n    }\r\n    function stop() public auth note {\r\n        stopped = true;\r\n    }\r\n    function start() public auth note {\r\n        stopped = false;\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * Math operations with safety checks\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint a, uint b) internal returns (uint) {\r\n    uint c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint a, uint b) internal returns (uint) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint a, uint b) internal returns (uint) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint a, uint b) internal returns (uint) {\r\n    uint c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n\r\n  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n    return a < b ? a : b;\r\n  }\r\n\r\n  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    return a < b ? a : b;\r\n  }\r\n}\r\n\r\ncontract TokenTransferGuard {\r\n    function onTokenTransfer(address _from, address _to, uint _amount) public returns (bool);\r\n}\r\n\r\ncontract RewardSharedPool is DSStop {\r\n    using SafeMath for uint256;\r\n\r\n    uint public maxReward      = 1000000 ether;\r\n\r\n    uint public consumed   = 0;\r\n\r\n    mapping(address => bool) public consumers;\r\n\r\n    modifier onlyConsumer {\r\n        require(msg.sender == owner || consumers[msg.sender]);\r\n        _;\r\n    }\r\n\r\n    function RewardSharedPool()\r\n    {\r\n    }\r\n\r\n    function consume(uint amount) onlyConsumer public returns (bool)\r\n    {\r\n        require(available(amount));\r\n\r\n        consumed = consumed.add(amount);\r\n\r\n        Consume(msg.sender, amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    function available(uint amount) constant public returns (bool)\r\n    {\r\n        return consumed.add(amount) <= maxReward;\r\n    }\r\n\r\n    function changeMaxReward(uint _maxReward) auth public\r\n    {\r\n        maxReward = _maxReward;\r\n    }\r\n\r\n    function addConsumer(address consumer) public auth\r\n    {\r\n        consumers[consumer] = true;\r\n\r\n        ConsumerAddition(consumer);\r\n    }\r\n\r\n    function removeConsumer(address consumer) public auth\r\n    {\r\n        consumers[consumer] = false;\r\n\r\n        ConsumerRemoval(consumer);\r\n    }\r\n\r\n    event Consume(address indexed _sender, uint _value);\r\n    event ConsumerAddition(address indexed _consumer);\r\n    event ConsumerRemoval(address indexed _consumer);\r\n}\r\n\r\ncontract ATNLongTermHolding is DSStop, TokenTransferGuard {\r\n    using SafeMath for uint256;\r\n\r\n    uint public constant DEPOSIT_WINDOW                 = 60 days;\r\n\r\n    // There are three kinds of options: 1. {105, 120 days}, 2. {110, 240 days}, 3. {115, 360 days}\r\n    uint public rate = 105;\r\n    uint public withdrawal_delay    = 120 days;\r\n\r\n    uint public agtAtnReceived      = 0;\r\n    uint public atnSent             = 0;\r\n\r\n    uint public depositStartTime    = 0;\r\n    uint public depositStopTime     = 0;\r\n\r\n    RewardSharedPool public pool;\r\n\r\n    struct Record {\r\n        uint agtAtnAmount;\r\n        uint timestamp;\r\n    }\r\n\r\n    mapping (address => Record) public records;\r\n\r\n    ERC20 public AGT;\r\n    ERC20 public ATN;\r\n\r\n    uint public gasRequired;\r\n\r\n    function ATNLongTermHolding(address _agt, address _atn, address _poolAddress, uint _rate, uint _delayDays)\r\n    {\r\n        AGT = ERC20(_agt);\r\n        ATN = ERC20(_atn);\r\n\r\n        pool = RewardSharedPool(_poolAddress);\r\n\r\n        require(_rate > 100);\r\n\r\n        rate = _rate;\r\n        withdrawal_delay = _delayDays * 1 days;\r\n    }\r\n\r\n    function start() public auth {\r\n        require(depositStartTime == 0);\r\n\r\n        depositStartTime = now;\r\n        depositStopTime  = now + DEPOSIT_WINDOW;\r\n\r\n        Started(depositStartTime);\r\n    }\r\n\r\n    function changeDepositStopTimeFromNow(uint _daysFromNow) public auth {\r\n        depositStopTime = now + _daysFromNow * 1 days;\r\n    }\r\n\r\n    function tokenFallback(address _from, uint256 _value, bytes _data) public\r\n    {\r\n        tokenFallback(_from, _value);\r\n    }\r\n\r\n    // TODO: To test the stoppable can work or not\r\n    function tokenFallback(address _from, uint256 _value) public stoppable\r\n    {\r\n        if (msg.sender == address(AGT) || msg.sender == address(ATN))\r\n        {\r\n            // the owner is not count in the statistics\r\n            // Only owner can use to deposit the ATN reward things.\r\n            if (_from == owner)\r\n            {\r\n                return;\r\n            }\r\n\r\n            require(now <= depositStopTime);\r\n\r\n            var record = records[_from];\r\n\r\n            record.agtAtnAmount += _value;\r\n            record.timestamp = now;\r\n            records[_from] = record;\r\n\r\n            agtAtnReceived += _value;\r\n\r\n            pool.consume( _value.mul(rate - 100 ).div(100) );\r\n\r\n            Deposit(depositId++, _from, _value);\r\n        }\r\n    }\r\n\r\n    function onTokenTransfer(address _from, address _to, uint _amount) public returns (bool)\r\n    {\r\n        if (_to == address(this) && _from != owner)\r\n        {\r\n            if (msg.gas < gasRequired) return false;\r\n            \r\n            if (stopped) return false;\r\n            if (now > depositStopTime) return false;\r\n\r\n            // each address can only deposit once.\r\n            if (records[_from].timestamp > 0 ) return false;\r\n\r\n            // can not over the limit of maximum reward amount\r\n            if ( !pool.available( _amount.mul(rate - 100 ).div(100) ) ) return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function withdrawATN() public stoppable {\r\n        require(msg.sender != owner);\r\n\r\n        Record record = records[msg.sender];\r\n\r\n        require(record.timestamp > 0);\r\n\r\n        require(now >= record.timestamp + withdrawal_delay);\r\n\r\n        withdrawFor(msg.sender);\r\n    }\r\n\r\n    function withdrawATN(address _addr) public stoppable {\r\n        require(_addr != owner);\r\n\r\n        Record record = records[_addr];\r\n\r\n        require(record.timestamp > 0);\r\n\r\n        require(now >= record.timestamp + withdrawal_delay);\r\n\r\n        withdrawFor(_addr);\r\n    }\r\n\r\n    function withdrawFor(address _addr) internal {\r\n        Record record = records[_addr];\r\n        \r\n        uint atnAmount = record.agtAtnAmount.mul(rate).div(100);\r\n\r\n        require(ATN.transfer(_addr, atnAmount));\r\n\r\n        atnSent += atnAmount;\r\n\r\n        delete records[_addr];\r\n\r\n        Withdrawal(\r\n                   withdrawId++,\r\n                   _addr,\r\n                   atnAmount\r\n                   );\r\n    }\r\n\r\n    function batchWithdraw(address[] _addrList) public stoppable {\r\n        for (uint i = 0; i < _addrList.length; i++) {\r\n            if (records[_addrList[i]].timestamp > 0 && now >= records[_addrList[i]].timestamp + withdrawal_delay)\r\n            {\r\n                withdrawFor(_addrList[i]);\r\n            }\r\n        }\r\n    }\r\n\r\n    function changeGasRequired(uint _gasRequired) public auth {\r\n        gasRequired = _gasRequired;\r\n        ChangeGasRequired(_gasRequired);\r\n    }\r\n\r\n    /// @notice This method can be used by the controller to extract mistakenly\r\n    ///  sent tokens to this contract.\r\n    /// @param _token The address of the token contract that you want to recover\r\n    ///  set to 0 in case you want to extract ether.\r\n    function claimTokens(address _token) public auth {\r\n        if (_token == 0x0) {\r\n            owner.transfer(this.balance);\r\n            return;\r\n        }\r\n        \r\n        ERC20 token = ERC20(_token);\r\n        \r\n        uint256 balance = token.balanceOf(this);\r\n        \r\n        token.transfer(owner, balance);\r\n        ClaimedTokens(_token, owner, balance);\r\n    }\r\n\r\n    event ClaimedTokens(address indexed _token, address indexed _controller, uint256 _amount);\r\n\r\n    /*\r\n     * EVENTS\r\n     */\r\n    /// Emitted when program starts.\r\n    event Started(uint _time);\r\n\r\n    /// Emitted for each sucuessful deposit.\r\n    uint public depositId = 0;\r\n    event Deposit(uint _depositId, address indexed _addr, uint agtAtnAmount);\r\n\r\n    /// Emitted for each sucuessful withdrawal.\r\n    uint public withdrawId = 0;\r\n    event Withdrawal(uint _withdrawId, address indexed _addr, uint _atnAmount);\r\n\r\n    event ChangeGasRequired(uint _gasRequired);\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"DEPOSIT_WINDOW\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawATN\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"AGT\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ATN\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"withdrawId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_daysFromNow\",\"type\":\"uint256\"}],\"name\":\"changeDepositStopTimeFromNow\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"tokenFallback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addrList\",\"type\":\"address[]\"}],\"name\":\"batchWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"records\",\"outputs\":[{\"name\":\"agtAtnAmount\",\"type\":\"uint256\"},{\"name\":\"timestamp\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"depositStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"atnSent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"withdrawATN\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"onTokenTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_gasRequired\",\"type\":\"uint256\"}],\"name\":\"changeGasRequired\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"depositStopTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stopped\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"authority_\",\"type\":\"address\"}],\"name\":\"setAuthority\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"depositId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gasRequired\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"agtAtnReceived\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"start\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"authority\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"tokenFallback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"claimTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"withdrawal_delay\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_agt\",\"type\":\"address\"},{\"name\":\"_atn\",\"type\":\"address\"},{\"name\":\"_poolAddress\",\"type\":\"address\"},{\"name\":\"_rate\",\"type\":\"uint256\"},{\"name\":\"_delayDays\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_controller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"ClaimedTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"Started\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_depositId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"agtAtnAmount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_withdrawId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_atnAmount\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_gasRequired\",\"type\":\"uint256\"}],\"name\":\"ChangeGasRequired\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"LogSetAuthority\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"LogSetOwner\",\"type\":\"event\"},{\"anonymous\":true,\"inputs\":[{\"indexed\":true,\"name\":\"sig\",\"type\":\"bytes4\"},{\"indexed\":true,\"name\":\"guy\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"foo\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"bar\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"wad\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"fax\",\"type\":\"bytes\"}],\"name\":\"LogNote\",\"type\":\"event\"}]","ContractName":"ATNLongTermHolding","CompilerVersion":"v0.4.17+commit.bdeb9e52","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000ed1eba8b87cd7e04e9389f65f7aeca750c85a010000000000000000000000000461733c17b0755ca5649b6db08b3e213fcf225460000000000000000000000008df49dcf9cc6fca7c530db05147ab8e0305c7c8200000000000000000000000000000000000000000000000000000000000000690000000000000000000000000000000000000000000000000000000000000078","Library":"","SwarmSource":"bzzr://d3354f163b4a8b6bb65ae4992b405a554b2bd405a77f5c24ac6c290352a5e11c"}]}