{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n        return 0;\r\n    }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract Owned {\r\n    address public Owner;\r\n    \r\n    event OwnershipTransferred(address indexed previousOwner, address indexed NewOwner);\r\n\r\n    function Owned() public {\r\n        Owner = msg.sender;\r\n    }\r\n\r\n    modifier OnlyOwner() {\r\n        require(msg.sender == Owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address NewOwner) public OnlyOwner {\r\n        require(NewOwner != address(0));\r\n        OwnershipTransferred(Owner, NewOwner);\r\n        Owner = NewOwner;\r\n    }\r\n}\r\n\r\ncontract RYC is Owned {\r\n    mapping (address => mapping (bool => bool)) public registeredAddress;\r\n\r\n    mapping (address => bool) public admin;\r\n\r\n    event Registered(address indexed _addr);\r\n    event Unregistered(address indexed _addr);\r\n    event SetAdmin(address indexed _addr);\r\n\r\n    modifier onlyRegistered(address _addr, bool _isPresale) {\r\n        require(registeredAddress[_addr][_isPresale]);\r\n        _;\r\n    }\r\n\r\n    modifier onlyAdmin() {\r\n        require(admin[msg.sender]);\r\n        _;\r\n    }\r\n\r\n    function RYC() public {\r\n        admin[msg.sender] = true;\r\n    }\r\n\r\n    function setAdmin(address _addr, bool _value)\r\n        public\r\n        OnlyOwner\r\n        returns (bool) {\r\n        require(_addr != address(0));\r\n        require(admin[_addr] == !_value);\r\n\r\n        admin[_addr] = _value;\r\n\r\n        SetAdmin(_addr);\r\n\r\n        return true;\r\n    }\r\n\r\n    function isRegistered(address _addr, bool _isPresale)\r\n        public\r\n        view\r\n        returns (bool) {\r\n        return registeredAddress[_addr][_isPresale];\r\n    }\r\n\r\n    function register(address _addr, bool _isPresale)\r\n        public\r\n        onlyAdmin {\r\n        require(_addr != address(0) && registeredAddress[_addr][_isPresale] == false);\r\n\r\n        registeredAddress[_addr][_isPresale] = true;\r\n\r\n        Registered(_addr);\r\n    }\r\n\r\n    function registerByList(address[] _addrs, bool _isPresale)\r\n        public\r\n        onlyAdmin {\r\n        for(uint256 i = 0; i < _addrs.length; i++) {\r\n        register(_addrs[i], _isPresale);\r\n        }\r\n    }\r\n\r\n    function unregister(address _addr, bool _isPresale)\r\n        public\r\n        onlyAdmin\r\n        onlyRegistered(_addr, _isPresale) {\r\n        registeredAddress[_addr][_isPresale] = false;\r\n        Unregistered(_addr);\r\n    }\r\n\r\n    function unregisterByList(address[] _addrs, bool _isPresale)\r\n        public\r\n        onlyAdmin {\r\n        for(uint256 i = 0; i < _addrs.length; i++) {\r\n            unregister(_addrs[i], _isPresale);\r\n        }\r\n    }\r\n}\r\n\r\ncontract PaymentFallbackReceiver {\r\n    BTCPaymentI public payment;\r\n\r\n    enum SaleType { pre, main }\r\n\r\n    function PaymentFallbackReceiver(address _payment) public {\r\n        require(_payment != address(0));\r\n        payment = BTCPaymentI(_payment);\r\n    }\r\n\r\n    modifier onlyPayment() {\r\n        require(msg.sender == address(payment));\r\n        _;\r\n    }\r\n\r\n    event MintByBTC(SaleType _saleType, address indexed _beneficiary, uint256 _tokens);\r\n\r\n    function paymentFallBack(address _beneficiary, uint256 _tokens) external onlyPayment();\r\n}\r\n\r\ncontract PresaleFallbackReceiver {\r\n    bool public presaleFallBackCalled;\r\n\r\n    function presaleFallBack(uint256 _presaleWeiRaised) public returns (bool);\r\n}\r\n\r\ncontract BTCPaymentI is Owned, PresaleFallbackReceiver {\r\n    PaymentFallbackReceiver public presale;\r\n    PaymentFallbackReceiver public mainsale;\r\n\r\n    function addPayment(address _beneficiary, uint256 _tokens) public;\r\n    function setPresale(address _presale) external;\r\n    function setMainsale(address _mainsale) external;\r\n    function presaleFallBack(uint256) public returns (bool);\r\n}\r\n\r\ncontract BTCPaymentR is Owned, PresaleFallbackReceiver {\r\n    using SafeMath for uint256;\r\n\r\n    PaymentFallbackReceiver public presale;\r\n    PaymentFallbackReceiver public mainsale;\r\n\r\n    event NewPayment(address _beneficiary, uint256 _tokens);\r\n\r\n    function addPayment(address _beneficiary, uint256 _tokens)\r\n        public\r\n        OnlyOwner {\r\n        if (!presaleFallBackCalled) {\r\n            presale.paymentFallBack(_beneficiary, _tokens);\r\n        } else {\r\n            mainsale.paymentFallBack(_beneficiary, _tokens);\r\n        }\r\n        NewPayment(_beneficiary, _tokens);\r\n    }\r\n\r\n    function setPresale(address _presale) external OnlyOwner {\r\n        require(presale == address(0));\r\n        presale = PaymentFallbackReceiver(_presale);\r\n    }\r\n\r\n    function setMainsale(address _mainsale) external OnlyOwner {\r\n        require(mainsale == address(0));\r\n        mainsale = PaymentFallbackReceiver(_mainsale);\r\n    }\r\n\r\n    function presaleFallBack(uint256) public returns (bool) {\r\n        require(msg.sender == address(presale));\r\n        if (presaleFallBackCalled) return false;\r\n        presaleFallBackCalled = true;\r\n        return true;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"presaleFallBackCalled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_mainsale\",\"type\":\"address\"}],\"name\":\"setMainsale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"addPayment\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"presaleFallBack\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_presale\",\"type\":\"address\"}],\"name\":\"setPresale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"NewOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mainsale\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presale\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"NewPayment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"NewOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"BTCPaymentR","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://7196501997a493794668d7e8197bf282cc281b7daee1500e5c02263e348eb2e4"}]}