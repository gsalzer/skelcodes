{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.15;\r\n\r\n/**\r\n * @title Ownable contract - base contract with an owner\r\n */\r\ncontract Ownable {\r\n  \r\n  address public owner;\r\n  address public newOwner;\r\n\r\n  event OwnershipTransferred(address indexed _from, address indexed _to);\r\n  \r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    assert(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    assert(_newOwner != address(0));      \r\n    newOwner = _newOwner;\r\n  }\r\n\r\n  /**\r\n   * @dev Accept transferOwnership.\r\n   */\r\n  function acceptOwnership() public {\r\n    if (msg.sender == newOwner) {\r\n      OwnershipTransferred(owner, newOwner);\r\n      owner = newOwner;\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\ncontract SafeMath {\r\n\r\n  function sub(uint256 x, uint256 y) internal constant returns (uint256) {\r\n    uint256 z = x - y;\r\n    assert(z <= x);\r\n\t  return z;\r\n  }\r\n\r\n  function add(uint256 x, uint256 y) internal constant returns (uint256) {\r\n    uint256 z = x + y;\r\n\t  assert(z >= x);\r\n\t  return z;\r\n  }\r\n\t\r\n  function div(uint256 x, uint256 y) internal constant returns (uint256) {\r\n    uint256 z = x / y;\r\n    return z;\r\n  }\r\n\t\r\n  function mul(uint256 x, uint256 y) internal constant returns (uint256) {\r\n    uint256 z = x * y;\r\n    assert(x == 0 || z / x == y);\r\n    return z;\r\n  }\r\n\r\n  function min(uint256 x, uint256 y) internal constant returns (uint256) {\r\n    uint256 z = x <= y ? x : y;\r\n    return z;\r\n  }\r\n\r\n  function max(uint256 x, uint256 y) internal constant returns (uint256) {\r\n    uint256 z = x >= y ? x : y;\r\n    return z;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 {\r\n\tfunction totalSupply() public constant returns (uint);\r\n\tfunction balanceOf(address owner) public constant returns (uint);\r\n\tfunction allowance(address owner, address spender) public constant returns (uint);\r\n\tfunction transfer(address to, uint value) public returns (bool success);\r\n\tfunction transferFrom(address from, address to, uint value) public returns (bool success);\r\n\tfunction approve(address spender, uint value) public returns (bool success);\r\n\tfunction mint(address to, uint value) public returns (bool success);\r\n\tevent Transfer(address indexed from, address indexed to, uint value);\r\n\tevent Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, SafeMath, Ownable{\r\n\t\r\n  uint256 _totalSupply;\r\n  mapping (address => uint256) balances;\r\n  mapping (address => mapping (address => uint256)) approvals;\r\n  address public crowdsaleAgent;\r\n  bool public released = false;  \r\n  \r\n  /**\r\n   * @dev Fix for the ERC20 short address attack http://vessenes.com/the-erc20-short-address-attack-explained/\r\n   * @param numwords payload size  \r\n   */\r\n  modifier onlyPayloadSize(uint numwords) {\r\n    assert(msg.data.length == numwords * 32 + 4);\r\n    _;\r\n  }\r\n  \r\n  /**\r\n   * @dev The function can be called only by crowdsale agent.\r\n   */\r\n  modifier onlyCrowdsaleAgent() {\r\n    assert(msg.sender == crowdsaleAgent);\r\n    _;\r\n  }\r\n\r\n  /** Limit token mint after finishing crowdsale\r\n   * @dev Make sure we are not done yet.\r\n   */\r\n  modifier canMint() {\r\n    assert(!released);\r\n    _;\r\n  }\r\n  \r\n  /**\r\n   * @dev Limit token transfer until the crowdsale is over.\r\n   */\r\n  modifier canTransfer() {\r\n    assert(released);\r\n    _;\r\n  } \r\n  \r\n  /** \r\n   * @dev Total Supply\r\n   * @return _totalSupply \r\n   */  \r\n  function totalSupply() public constant returns (uint256) {\r\n    return _totalSupply;\r\n  }\r\n  \r\n  /** \r\n   * @dev Tokens balance\r\n   * @param _owner holder address\r\n   * @return balance amount \r\n   */\r\n  function balanceOf(address _owner) public constant returns (uint256) {\r\n    return balances[_owner];\r\n  }\r\n  \r\n  /** \r\n   * @dev Token allowance\r\n   * @param _owner holder address\r\n   * @param _spender spender address\r\n   * @return remain amount\r\n   */   \r\n  function allowance(address _owner, address _spender) public constant returns (uint256) {\r\n    return approvals[_owner][_spender];\r\n  }\r\n\r\n  /** \r\n   * @dev Tranfer tokens to address\r\n   * @param _to dest address\r\n   * @param _value tokens amount\r\n   * @return transfer result\r\n   */   \r\n  function transfer(address _to, uint _value) public canTransfer onlyPayloadSize(2) returns (bool success) {\r\n    assert(balances[msg.sender] >= _value);\r\n    balances[msg.sender] = sub(balances[msg.sender], _value);\r\n    balances[_to] = add(balances[_to], _value);\r\n    \r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n  \r\n  /**    \r\n   * @dev Tranfer tokens from one address to other\r\n   * @param _from source address\r\n   * @param _to dest address\r\n   * @param _value tokens amount\r\n   * @return transfer result\r\n   */    \r\n  function transferFrom(address _from, address _to, uint _value) public canTransfer onlyPayloadSize(3) returns (bool success) {\r\n    assert(balances[_from] >= _value);\r\n    assert(approvals[_from][msg.sender] >= _value);\r\n    approvals[_from][msg.sender] = sub(approvals[_from][msg.sender], _value);\r\n    balances[_from] = sub(balances[_from], _value);\r\n    balances[_to] = add(balances[_to], _value);\r\n    \r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n  \r\n  /** \r\n   * @dev Approve transfer\r\n   * @param _spender holder address\r\n   * @param _value tokens amount\r\n   * @return result  \r\n   */\r\n  function approve(address _spender, uint _value) public onlyPayloadSize(2) returns (bool success) {\r\n    // To change the approve amount you first have to reduce the addresses`\r\n    //  approvals to zero by calling `approve(_spender, 0)` if it is not\r\n    //  already 0 to mitigate the race condition described here:\r\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    assert((_value == 0) || (approvals[msg.sender][_spender] == 0));\r\n    approvals[msg.sender][_spender] = _value;\r\n    \r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n  \r\n  /** \r\n   * @dev Create new tokens and allocate them to an address. Only callably by a crowdsale contract\r\n   * @param _to dest address\r\n   * @param _value tokens amount\r\n   * @return mint result\r\n   */ \r\n  function mint(address _to, uint _value) public onlyCrowdsaleAgent canMint onlyPayloadSize(2) returns (bool success) {\r\n    _totalSupply = add(_totalSupply, _value);\r\n    balances[_to] = add(balances[_to], _value);\r\n    \r\n    Transfer(0, _to, _value);\r\n    return true;\r\n\t\r\n  }\r\n  \r\n  /**\r\n   * @dev Set the contract that can call release and make the token transferable.\r\n   * @param _crowdsaleAgent crowdsale contract address\r\n   */\r\n  function setCrowdsaleAgent(address _crowdsaleAgent) public onlyOwner {\r\n    assert(!released);\r\n    crowdsaleAgent = _crowdsaleAgent;\r\n  }\r\n  \r\n  /**\r\n   * @dev One way function to release the tokens to the wild. Can be called only from the release agent that is the final ICO contract. \r\n   */\r\n  function releaseTokenTransfer() public onlyCrowdsaleAgent {\r\n    released = true;\r\n  }\r\n\r\n}\r\n\r\n/** \r\n * @title DAOPlayMarket2.0 contract - standard ERC20 token with Short Hand Attack and approve() race condition mitigation.\r\n */\r\ncontract DAOPlayMarketToken is StandardToken {\r\n  \r\n  string public name;\r\n  string public symbol;\r\n  uint public decimals;\r\n  \r\n  /** Name and symbol were updated. */\r\n  event UpdatedTokenInformation(string newName, string newSymbol);\r\n\r\n  /**\r\n   * Construct the token.\r\n   *\r\n   * This token must be created through a team multisig wallet, so that it is owned by that wallet.\r\n   *\r\n   * @param _name Token name\r\n   * @param _symbol Token symbol - should be all caps\r\n   * @param _initialSupply How many tokens we start with\r\n   * @param _decimals Number of decimal places\r\n   * @param _addr Address for team's tokens\r\n   */\r\n   \r\n  function DAOPlayMarketToken(string _name, string _symbol, uint _initialSupply, uint _decimals, address _addr) public {\r\n    require(_addr != 0x0);\r\n    name = _name;\r\n    symbol = _symbol;\r\n    decimals = _decimals;\r\n\t\r\n    _totalSupply = _initialSupply*10**_decimals;\r\n\r\n    // Creating initial tokens\r\n    balances[_addr] = _totalSupply;\r\n  }   \r\n  \r\n   /**\r\n   * Owner can update token information here.\r\n   *\r\n   * It is often useful to conceal the actual token association, until\r\n   * the token operations, like central issuance or reissuance have been completed.\r\n   *\r\n   * This function allows the token owner to rename the token after the operations\r\n   * have been completed and then point the audience to use the token contract.\r\n   */\r\n  function setTokenInformation(string _name, string _symbol) public onlyOwner {\r\n    name = _name;\r\n    symbol = _symbol;\r\n\r\n    UpdatedTokenInformation(name, symbol);\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title Haltable\r\n * @dev Abstract contract that allows children to implement an\r\n * emergency stop mechanism. Differs from Pausable by causing a throw when in halt mode.\r\n */\r\ncontract Haltable is Ownable {\r\n  bool public halted;\r\n\r\n  modifier stopInEmergency {\r\n    assert(!halted);\r\n    _;\r\n  }\r\n\r\n  modifier onlyInEmergency {\r\n    assert(halted);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   *@dev Called by the owner on emergency, triggers stopped state\r\n   */\r\n  function halt() external onlyOwner {\r\n    halted = true;\r\n  }\r\n\r\n  /**\r\n   * @dev Called by the owner on end of emergency, returns to normal state\r\n   */\r\n  function unhalt() external onlyOwner onlyInEmergency {\r\n    halted = false;\r\n  }\r\n}\r\n\r\n\r\n/** \r\n * @title Killable DAOPlayMarketTokenCrowdsale contract\r\n */\r\ncontract Killable is Ownable {\r\n  function kill() onlyOwner {\r\n    selfdestruct(owner);\r\n  }\r\n}\r\n\r\n/** \r\n * @title DAOPlayMarketTokenCrowdsale contract - contract for token sales.\r\n */\r\ncontract DAOPlayMarketTokenCrowdsale is Haltable, SafeMath, Killable {\r\n  \r\n  /* The token we are selling */\r\n  DAOPlayMarketToken public token;\r\n\r\n  /* tokens will be transfered from this address */\r\n  address public multisigWallet;\r\n\r\n  /* the UNIX timestamp start date of the crowdsale */\r\n  uint public startsAt;\r\n  \r\n  /* the UNIX timestamp end date of the crowdsale */\r\n  uint public endsAt;\r\n  \r\n  /* the number of tokens already sold through this contract*/\r\n  uint public tokensSold = 0;\r\n  \r\n  /* How many wei of funding we have raised */\r\n  uint public weiRaised = 0;\r\n  \r\n  /* How many unique addresses that have invested */\r\n  uint public investorCount = 0;\r\n  \r\n  /* Has this crowdsale been finalized */\r\n  bool public finalized;\r\n  \r\n  /* Cap of tokens */\r\n  uint public CAP;\r\n  \r\n  /* How much ETH each address has invested to this crowdsale */\r\n  mapping (address => uint256) public investedAmountOf;\r\n  \r\n  /* How much tokens this crowdsale has credited for each investor address */\r\n  mapping (address => uint256) public tokenAmountOf;\r\n  \r\n  /* Contract address that can call invest other crypto */\r\n  address public cryptoAgent;\r\n  \r\n  /** How many tokens he charged for each investor's address in a particular period */\r\n  mapping (uint => mapping (address => uint256)) public tokenAmountOfPeriod;\r\n  \r\n  struct Stage {\r\n    // UNIX timestamp when the stage begins\r\n    uint start;\r\n    // UNIX timestamp when the stage is over\r\n    uint end;\r\n    // Number of period\r\n    uint period;\r\n    // Price#1 token in WEI\r\n    uint price1;\r\n    // Price#2 token in WEI\r\n    uint price2;\r\n    // Price#3 token in WEI\r\n    uint price3;\r\n    // Price#4 token in WEI\r\n    uint price4;\r\n    // Cap of period\r\n    uint cap;\r\n    // Token sold in period\r\n    uint tokenSold;\r\n  }\r\n  \r\n  /** Stages **/\r\n  Stage[] public stages;\r\n  uint public periodStage;\r\n  uint public stage;\r\n  \r\n  /** State machine\r\n   *\r\n   * - Preparing: All contract initialization calls and variables have not been set yet\r\n   * - Funding: Active crowdsale\r\n   * - Success: Minimum funding goal reached\r\n   * - Failure: Minimum funding goal not reached before ending time\r\n   * - Finalized: The finalized has been called and succesfully executed\r\n   */\r\n  enum State{Unknown, Preparing, Funding, Success, Failure, Finalized}\r\n  \r\n  // A new investment was made\r\n  event Invested(address investor, uint weiAmount, uint tokenAmount);\r\n  \r\n  // A new investment was made\r\n  event InvestedOtherCrypto(address investor, uint weiAmount, uint tokenAmount);\r\n\r\n  // Crowdsale end time has been changed\r\n  event EndsAtChanged(uint _endsAt);\r\n  \r\n  // New distributions were made\r\n  event DistributedTokens(address investor, uint tokenAmount);\r\n  \r\n  /** \r\n   * @dev Modified allowing execution only if the crowdsale is currently running\r\n   */\r\n  modifier inState(State state) {\r\n    require(getState() == state);\r\n    _;\r\n  }\r\n  \r\n  /**\r\n   * @dev The function can be called only by crowdsale agent.\r\n   */\r\n  modifier onlyCryptoAgent() {\r\n    assert(msg.sender == cryptoAgent);\r\n    _;\r\n  }\r\n  \r\n  /**\r\n   * @dev Constructor\r\n   * @param _token DAOPlayMarketToken token address\r\n   * @param _multisigWallet team wallet\r\n   * @param _start token ICO start date\r\n   * @param _cap token ICO \r\n   * @param _price array of price \r\n   * @param _periodStage period of stage\r\n   * @param _capPeriod cap of period\r\n   */\r\n  function DAOPlayMarketTokenCrowdsale(address _token, address _multisigWallet, uint _start, uint _cap, uint[20] _price, uint _periodStage, uint _capPeriod) public {\r\n  \r\n    require(_multisigWallet != 0x0);\r\n    require(_start >= block.timestamp);\r\n    require(_cap > 0);\r\n    require(_periodStage > 0);\r\n    require(_capPeriod > 0);\r\n\t\r\n    token = DAOPlayMarketToken(_token);\r\n    multisigWallet = _multisigWallet;\r\n    startsAt = _start;\r\n    CAP = _cap*10**token.decimals();\r\n\t\r\n    periodStage = _periodStage*1 days;\r\n    uint capPeriod = _capPeriod*10**token.decimals();\r\n    uint j = 0;\r\n    for(uint i=0; i<_price.length; i=i+4) {\r\n      stages.push(Stage(startsAt+j*periodStage, startsAt+(j+1)*periodStage, j, _price[i], _price[i+1], _price[i+2], _price[i+3], capPeriod, 0));\r\n      j++;\r\n    }\r\n    endsAt = stages[stages.length-1].end;\r\n    stage = 0;\r\n  }\r\n  \r\n  /**\r\n   * Buy tokens from the contract\r\n   */\r\n  function() public payable {\r\n    investInternal(msg.sender);\r\n  }\r\n\r\n  /**\r\n   * Make an investment.\r\n   *\r\n   * Crowdsale must be running for one to invest.\r\n   * We must have not pressed the emergency brake.\r\n   *\r\n   * @param receiver The Ethereum address who receives the tokens\r\n   *\r\n   */\r\n  function investInternal(address receiver) private stopInEmergency {\r\n    require(msg.value > 0);\r\n\t\r\n    assert(getState() == State.Funding);\r\n\r\n    // Determine in what period we hit\r\n    stage = getStage();\r\n\t\r\n    uint weiAmount = msg.value;\r\n\r\n    // Account presale sales separately, so that they do not count against pricing tranches\r\n    uint tokenAmount = calculateToken(weiAmount, stage, token.decimals());\r\n\r\n    assert(tokenAmount > 0);\r\n\r\n\t// Check that we did not bust the cap in the period\r\n    assert(stages[stage].cap >= add(tokenAmount, stages[stage].tokenSold));\r\n\t\r\n    tokenAmountOfPeriod[stage][receiver]=add(tokenAmountOfPeriod[stage][receiver],tokenAmount);\r\n\t\r\n    stages[stage].tokenSold = add(stages[stage].tokenSold,tokenAmount);\r\n\t\r\n    if (stages[stage].cap == stages[stage].tokenSold){\r\n      updateStage(stage);\r\n      endsAt = stages[stages.length-1].end;\r\n    }\r\n\t\r\n\t// Check that we did not bust the cap\r\n    //assert(!isBreakingCap(tokenAmount, tokensSold));\r\n\t\r\n    if(investedAmountOf[receiver] == 0) {\r\n       // A new investor\r\n       investorCount++;\r\n    }\r\n\r\n    // Update investor\r\n    investedAmountOf[receiver] = add(investedAmountOf[receiver],weiAmount);\r\n    tokenAmountOf[receiver] = add(tokenAmountOf[receiver],tokenAmount);\r\n\r\n    // Update totals\r\n    weiRaised = add(weiRaised,weiAmount);\r\n    tokensSold = add(tokensSold,tokenAmount);\r\n\r\n    assignTokens(receiver, tokenAmount);\r\n\r\n    // send ether to the fund collection wallet\r\n    multisigWallet.transfer(weiAmount);\r\n\r\n    // Tell us invest was success\r\n    Invested(receiver, weiAmount, tokenAmount);\r\n\t\r\n  }\r\n  \r\n  /**\r\n   * Make an investment.\r\n   *\r\n   * Crowdsale must be running for one to invest.\r\n   * We must have not pressed the emergency brake.\r\n   *\r\n   * @param receiver The Ethereum address who receives the tokens\r\n   * @param _weiAmount amount in Eth\r\n   *\r\n   */\r\n  function investOtherCrypto(address receiver, uint _weiAmount) public onlyCryptoAgent stopInEmergency {\r\n    require(_weiAmount > 0);\r\n\t\r\n    assert(getState() == State.Funding);\r\n\r\n    // Determine in what period we hit\r\n    stage = getStage();\r\n\t\r\n    uint weiAmount = _weiAmount;\r\n\r\n    // Account presale sales separately, so that they do not count against pricing tranches\r\n    uint tokenAmount = calculateToken(weiAmount, stage, token.decimals());\r\n\r\n    assert(tokenAmount > 0);\r\n\r\n\t// Check that we did not bust the cap in the period\r\n    assert(stages[stage].cap >= add(tokenAmount, stages[stage].tokenSold));\r\n\t\r\n    tokenAmountOfPeriod[stage][receiver]=add(tokenAmountOfPeriod[stage][receiver],tokenAmount);\r\n\t\r\n    stages[stage].tokenSold = add(stages[stage].tokenSold,tokenAmount);\r\n\t\r\n    if (stages[stage].cap == stages[stage].tokenSold){\r\n      updateStage(stage);\r\n      endsAt = stages[stages.length-1].end;\r\n    }\r\n\t\r\n\t// Check that we did not bust the cap\r\n    //assert(!isBreakingCap(tokenAmount, tokensSold));\r\n\t\r\n    if(investedAmountOf[receiver] == 0) {\r\n       // A new investor\r\n       investorCount++;\r\n    }\r\n\r\n    // Update investor\r\n    investedAmountOf[receiver] = add(investedAmountOf[receiver],weiAmount);\r\n    tokenAmountOf[receiver] = add(tokenAmountOf[receiver],tokenAmount);\r\n\r\n    // Update totals\r\n    weiRaised = add(weiRaised,weiAmount);\r\n    tokensSold = add(tokensSold,tokenAmount);\r\n\r\n    assignTokens(receiver, tokenAmount);\r\n\t\r\n    // Tell us invest was success\r\n    InvestedOtherCrypto(receiver, weiAmount, tokenAmount);\r\n  }\r\n  \r\n  /**\r\n   * Create new tokens or transfer issued tokens to the investor depending on the cap model.\r\n   */\r\n  function assignTokens(address receiver, uint tokenAmount) private {\r\n     token.mint(receiver, tokenAmount);\r\n  }\r\n   \r\n  /**\r\n   * Check if the current invested breaks our cap rules.\r\n   *\r\n   * Called from invest().\r\n   *\r\n   * @param tokenAmount The amount of tokens we try to give to the investor in the current transaction\r\n   * @param tokensSoldTotal What would be our total sold tokens count after this transaction\r\n   *\r\n   * @return true if taking this investment would break our cap rules\r\n   */\r\n  function isBreakingCap(uint tokenAmount, uint tokensSoldTotal) public constant returns (bool limitBroken){\r\n\tif(add(tokenAmount,tokensSoldTotal) <= CAP){\r\n\t  return false;\r\n\t}\r\n\treturn true;\r\n  }\r\n\r\n  /**\r\n   * @dev Distribution of remaining tokens.\r\n   */\r\n  function distributionOfTokens() public stopInEmergency {\r\n    require(block.timestamp >= endsAt);\r\n    require(!finalized);\r\n    uint amount;\r\n    for(uint i=0; i<stages.length; i++) {\r\n      if(tokenAmountOfPeriod[stages[i].period][msg.sender] != 0){\r\n        amount = add(amount,div(mul(sub(stages[i].cap,stages[i].tokenSold),tokenAmountOfPeriod[stages[i].period][msg.sender]),stages[i].tokenSold));\r\n        tokenAmountOfPeriod[stages[i].period][msg.sender] = 0;\r\n      }\r\n    }\r\n    assert(amount > 0);\r\n    assignTokens(msg.sender, amount);\r\n\t\r\n    // Tell us distributed was success\r\n    DistributedTokens(msg.sender, amount);\r\n  }\r\n  \r\n  /**\r\n   * @dev Finalize a succcesful crowdsale.\r\n   */\r\n  function finalize() public inState(State.Success) onlyOwner stopInEmergency {\r\n    require(block.timestamp >= (endsAt+periodStage));\r\n    require(!finalized);\r\n\t\r\n    finalizeCrowdsale();\r\n    finalized = true;\r\n  }\r\n  \r\n  /**\r\n   * @dev Finalize a succcesful crowdsale.\r\n   */\r\n  function finalizeCrowdsale() internal {\r\n    token.releaseTokenTransfer();\r\n  }\r\n  \r\n  /**\r\n   * @dev Check if the ICO goal was reached.\r\n   * @return true if the crowdsale has raised enough money to be a success\r\n   */\r\n  function isCrowdsaleFull() public constant returns (bool) {\r\n    if(tokensSold >= CAP || block.timestamp >= endsAt){\r\n      return true;  \r\n    }\r\n    return false;\r\n  }\r\n  \r\n  /** \r\n   * @dev Allow crowdsale owner to close early or extend the crowdsale.\r\n   * @param time timestamp\r\n   */\r\n  function setEndsAt(uint time) public onlyOwner {\r\n    require(!finalized);\r\n    require(time >= block.timestamp);\r\n    endsAt = time;\r\n    EndsAtChanged(endsAt);\r\n  }\r\n  \r\n   /**\r\n   * @dev Allow to change the team multisig address in the case of emergency.\r\n   */\r\n  function setMultisig(address addr) public onlyOwner {\r\n    require(addr != 0x0);\r\n    multisigWallet = addr;\r\n  }\r\n  \r\n  /**\r\n   * @dev Allow crowdsale owner to change the token address.\r\n   */\r\n  function setToken(address addr) public onlyOwner {\r\n    require(addr != 0x0);\r\n    token = DAOPlayMarketToken(addr);\r\n  }\r\n  \r\n  /** \r\n   * @dev Crowdfund state machine management.\r\n   * @return State current state\r\n   */\r\n  function getState() public constant returns (State) {\r\n    if (finalized) return State.Finalized;\r\n    else if (address(token) == 0 || address(multisigWallet) == 0 || block.timestamp < startsAt) return State.Preparing;\r\n    else if (block.timestamp <= endsAt && block.timestamp >= startsAt && !isCrowdsaleFull()) return State.Funding;\r\n    else if (isCrowdsaleFull()) return State.Success;\r\n    else return State.Failure;\r\n  }\r\n  \r\n  /** \r\n   * @dev Set base price for ICO.\r\n   */\r\n  function setBasePrice(uint[20] _price, uint _startDate, uint _periodStage, uint _cap, uint _decimals) public onlyOwner {\r\n    periodStage = _periodStage*1 days;\r\n    uint cap = _cap*10**_decimals;\r\n    uint j = 0;\r\n    delete stages;\r\n    for(uint i=0; i<_price.length; i=i+4) {\r\n      stages.push(Stage(_startDate+j*periodStage, _startDate+(j+1)*periodStage, j, _price[i], _price[i+1], _price[i+2], _price[i+3], cap, 0));\r\n      j++;\r\n    }\r\n    endsAt = stages[stages.length-1].end;\r\n    stage =0;\r\n  }\r\n  \r\n  /** \r\n   * @dev Updates the ICO steps if the cap is reached.\r\n   */\r\n  function updateStage(uint number) private {\r\n    require(number>=0);\r\n    uint time = block.timestamp;\r\n    uint j = 0;\r\n    stages[number].end = time;\r\n    for (uint i = number+1; i < stages.length; i++) {\r\n      stages[i].start = time+periodStage*j;\r\n      stages[i].end = time+periodStage*(j+1);\r\n      j++;\r\n    }\r\n  }\r\n  \r\n  /** \r\n   * @dev Gets the current stage.\r\n   * @return uint current stage\r\n   */\r\n  function getStage() private constant returns (uint){\r\n    for (uint i = 0; i < stages.length; i++) {\r\n      if (block.timestamp >= stages[i].start && block.timestamp < stages[i].end) {\r\n        return stages[i].period;\r\n      }\r\n    }\r\n    return stages[stages.length-1].period;\r\n  }\r\n  \r\n  /** \r\n   * @dev Gets the cap of amount.\r\n   * @return uint cap of amount\r\n   */\r\n  function getAmountCap(uint value) private constant returns (uint ) {\r\n    if(value <= 10*10**18){\r\n      return 0;\r\n    }else if (value <= 50*10**18){\r\n      return 1;\r\n    }else if (value <= 300*10**18){\r\n      return 2;\r\n    }else {\r\n      return 3;\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * When somebody tries to buy tokens for X eth, calculate how many tokens they get.\r\n   * @param value - The value of the transaction send in as wei\r\n   * @param _stage - The stage of ICO\r\n   * @param decimals - How many decimal places the token has\r\n   * @return Amount of tokens the investor receives\r\n   */\r\n   \r\n  function calculateToken(uint value, uint _stage, uint decimals) private constant returns (uint){\r\n    uint tokenAmount = 0;\r\n    uint saleAmountCap = getAmountCap(value); \r\n\t\r\n    if(saleAmountCap == 0){\r\n      tokenAmount = div(value*10**decimals,stages[_stage].price1);\r\n    }else if(saleAmountCap == 1){\r\n      tokenAmount = div(value*10**decimals,stages[_stage].price2);\r\n    }else if(saleAmountCap == 2){\r\n      tokenAmount = div(value*10**decimals,stages[_stage].price3);\r\n    }else{\r\n      tokenAmount = div(value*10**decimals,stages[_stage].price4);\r\n    }\r\n    return tokenAmount;\r\n  }\r\n \r\n  /**\r\n   * @dev Set the contract that can call the invest other crypto function.\r\n   * @param _cryptoAgent crowdsale contract address\r\n   */\r\n  function setCryptoAgent(address _cryptoAgent) public onlyOwner {\r\n    require(!finalized);\r\n    cryptoAgent = _cryptoAgent;\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"endsAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"receiver\",\"type\":\"address\"},{\"name\":\"_weiAmount\",\"type\":\"uint256\"}],\"name\":\"investOtherCrypto\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getState\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"investedAmountOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cryptoAgent\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_price\",\"type\":\"uint256[20]\"},{\"name\":\"_startDate\",\"type\":\"uint256\"},{\"name\":\"_periodStage\",\"type\":\"uint256\"},{\"name\":\"_cap\",\"type\":\"uint256\"},{\"name\":\"_decimals\",\"type\":\"uint256\"}],\"name\":\"setBasePrice\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"halt\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"setEndsAt\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"name\":\"tokensSoldTotal\",\"type\":\"uint256\"}],\"name\":\"isBreakingCap\",\"outputs\":[{\"name\":\"limitBroken\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"distributionOfTokens\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"periodStage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stages\",\"outputs\":[{\"name\":\"start\",\"type\":\"uint256\"},{\"name\":\"end\",\"type\":\"uint256\"},{\"name\":\"period\",\"type\":\"uint256\"},{\"name\":\"price1\",\"type\":\"uint256\"},{\"name\":\"price2\",\"type\":\"uint256\"},{\"name\":\"price3\",\"type\":\"uint256\"},{\"name\":\"price4\",\"type\":\"uint256\"},{\"name\":\"cap\",\"type\":\"uint256\"},{\"name\":\"tokenSold\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"multisigWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenAmountOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenAmountOfPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startsAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"finalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"halted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_cryptoAgent\",\"type\":\"address\"}],\"name\":\"setCryptoAgent\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unhalt\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isCrowdsaleFull\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"investorCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setMultisig\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_multisigWallet\",\"type\":\"address\"},{\"name\":\"_start\",\"type\":\"uint256\"},{\"name\":\"_cap\",\"type\":\"uint256\"},{\"name\":\"_price\",\"type\":\"uint256[20]\"},{\"name\":\"_periodStage\",\"type\":\"uint256\"},{\"name\":\"_capPeriod\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"weiAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"Invested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"weiAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"InvestedOtherCrypto\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_endsAt\",\"type\":\"uint256\"}],\"name\":\"EndsAtChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"DistributedTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"DAOPlayMarketTokenCrowdsale","CompilerVersion":"v0.4.15+commit.bbb8e64f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000fa81b792cafe81301a24dad70f7d9e580f409a5d0000000000000000000000009b9b6be27fc36033f5b5b67900f64d36470523e5000000000000000000000000000000000000000000000000000000005a033810000000000000000000000000000000000000000000000000000000000022551000000000000000000000000000000000000000000000000001aa535d3d0c0000000000000000000000000000000000000000000000000000013fbe85edc9000000000000000000000000000000000000000000000000000000d529ae9e86000000000000000000000000000000000000000000000000000000aa87bee538000000000000000000000000000000000000000000000000000001f161421c8e0000000000000000000000000000000000000000000000000000017508f1956a800000000000000000000000000000000000000000000000000000f8b0a10e47000000000000000000000000000000000000000000000000000000c6f3b40b6c000000000000000000000000000000000000000000000000000002386f26fc10000000000000000000000000000000000000000000000000000001aa535d3d0c0000000000000000000000000000000000000000000000000000011c37937e08000000000000000000000000000000000000000000000000000000e35fa931a00000000000000000000000000000000000000000000000000000027f7d0bdb92000000000000000000000000000000000000000000000000000001df9dc8e4ad8000000000000000000000000000000000000000000000000000013fbe85edc9000000000000000000000000000000000000000000000000000000ffcb9e57d4000000000000000000000000000000000000000000000000000002c68af0bb1400000000000000000000000000000000000000000000000000000214e8348c4f0000000000000000000000000000000000000000000000000000016345785d8a0000000000000000000000000000000000000000000000000000011c37937e080000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000006ddd0","Library":"","SwarmSource":"bzzr://9abf9bcb6beb773b8c991ed5fc3569d1d415ad7957d10c62e2790ee8cedf0e20"}]}