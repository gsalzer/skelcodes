{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n /// @title SafeMath contract - math operations with safety checks\r\ncontract SafeMath {\r\n  function safeMul(uint a, uint b) internal pure  returns (uint) {\r\n    uint c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function safeDiv(uint a, uint b) internal pure returns (uint) {\r\n    assert(b > 0);\r\n    uint c = a / b;\r\n    assert(a == b * c + a % b);\r\n    return c;\r\n  }\r\n\r\n  function safeSub(uint a, uint b) internal pure returns (uint) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function safeAdd(uint a, uint b) internal pure returns (uint) {\r\n    uint c = a + b;\r\n    assert(c>=a && c>=b);\r\n    return c;\r\n  }\r\n\r\n  function max64(uint64 a, uint64 b) internal pure returns (uint64) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min64(uint64 a, uint64 b) internal pure returns (uint64) {\r\n    return a < b ? a : b;\r\n  }\r\n\r\n  function max256(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min256(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return a < b ? a : b;\r\n  }\r\n}\r\n\r\n /// @title ERC20 interface see https://github.com/ethereum/EIPs/issues/20\r\ncontract ERC20 {\r\n  uint public totalSupply;\r\n  function balanceOf(address who) public constant returns (uint);\r\n  function allowance(address owner, address spender) public constant returns (uint);  \r\n  function transfer(address to, uint value) public returns (bool ok);\r\n  function transferFrom(address from, address to, uint value) public returns (bool ok);\r\n  function approve(address spender, uint value) public returns (bool ok);\r\n  function decimals() public constant returns (uint value);\r\n  event Transfer(address indexed from, address indexed to, uint value);\r\n  event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\n /// @title Ownable contract - base contract with an owner\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    if (newOwner != address(0)) {\r\n      owner = newOwner;\r\n    }\r\n  }\r\n}\r\n\r\n /// @title SilentNotary token sale contract\r\ncontract SilentNotaryTokenSale is Ownable, SafeMath {\r\n\r\n   /// State machine\r\n   /// Preparing: Waiting for ICO start\r\n   /// Selling: Active sale\r\n   /// ProlongedSelling: Prolonged active sale\r\n   /// TokenShortage: ICO period isn't over yet, but there are no tokens on the contract\r\n   /// Finished: ICO has finished\r\n  enum Status {Unknown, Preparing, Selling, ProlongedSelling, TokenShortage, Finished}\r\n\r\n  /// A new investment was made\r\n  event Invested(address investor, uint weiAmount, uint tokenAmount);\r\n\r\n  /// Contract owner withdrew some tokens to team wallet\r\n  event Withdraw(uint tokenAmount);\r\n\r\n  /// Token unit price changed\r\n  event TokenPriceChanged(uint newTokenPrice);\r\n\r\n  /// SNTR token address\r\n  ERC20 public token;\r\n\r\n  /// wallet address to transfer invested ETH\r\n  address public ethMultisigWallet;\r\n\r\n  /// wallet address to withdraw unused tokens\r\n  address public tokenMultisigWallet;\r\n\r\n  /// ICO start time\r\n  uint public startTime;\r\n\r\n  /// ICO duration in seconds\r\n  uint public duration;\r\n\r\n  /// Prolonged ICO duration in seconds, 0 if no prolongation is planned\r\n  uint public prolongedDuration;\r\n\r\n  /// Token price in wei\r\n  uint public tokenPrice;\r\n\r\n  /// Minimal investment amount in wei\r\n  uint public minInvestment;\r\n\r\n  /// List of addresses allowed to send ETH to this contract, empty if anyone is allowed\r\n  address[] public allowedSenders;\r\n\r\n  /// The number of tokens already sold through this contract\r\n  uint public tokensSoldAmount = 0;\r\n\r\n  ///  How many wei of funding we have raised\r\n  uint public weiRaisedAmount = 0;\r\n\r\n  ///  How many distinct addresses have invested\r\n  uint public investorCount = 0;\r\n\r\n  ///  Was prolongation permitted by owner or not\r\n  bool public prolongationPermitted;\r\n\r\n  ///  How much ETH each address has invested to this crowdsale\r\n  mapping (address => uint256) public investedAmountOf;\r\n\r\n  ///  How much tokens this crowdsale has credited for each investor address\r\n  mapping (address => uint256) public tokenAmountOf;\r\n\r\n  /// Multiplier for token value\r\n  uint public tokenValueMultiplier;\r\n\r\n  /// Stop trigger in excess\r\n  bool public stopped;\r\n\r\n  /// @dev Constructor\r\n  /// @param _token SNTR token address\r\n  /// @param _ethMultisigWallet wallet address to transfer invested ETH\r\n  /// @param _tokenMultisigWallet wallet address to withdraw unused tokens\r\n  /// @param _startTime ICO start time\r\n  /// @param _duration ICO duration in seconds\r\n  /// @param _prolongedDuration Prolonged ICO duration in seconds, 0 if no prolongation is planned\r\n  /// @param _tokenPrice Token price in wei\r\n  /// @param _minInvestment Minimal investment amount in wei\r\n  /// @param _allowedSenders List of addresses allowed to send ETH to this contract, empty if anyone is allowed\r\n  function SilentNotaryTokenSale(address _token, address _ethMultisigWallet, address _tokenMultisigWallet,\r\n            uint _startTime, uint _duration, uint _prolongedDuration, uint _tokenPrice, uint _minInvestment, address[] _allowedSenders) public {\r\n    require(_token != 0);\r\n    require(_ethMultisigWallet != 0);\r\n    require(_tokenMultisigWallet != 0);\r\n    require(_duration > 0);\r\n    require(_tokenPrice > 0);\r\n    require(_minInvestment > 0);\r\n\r\n    token = ERC20(_token);\r\n    ethMultisigWallet = _ethMultisigWallet;\r\n    tokenMultisigWallet = _tokenMultisigWallet;\r\n    startTime = _startTime;\r\n    duration = _duration;\r\n    prolongedDuration = _prolongedDuration;\r\n    tokenPrice = _tokenPrice;\r\n    minInvestment = _minInvestment;\r\n    allowedSenders = _allowedSenders;\r\n    tokenValueMultiplier = 10 ** token.decimals();\r\n  }\r\n\r\n  /// @dev Sell tokens to ETH sender\r\n  function() public payable {\r\n    require(!stopped);\r\n    require(getCurrentStatus() == Status.Selling || getCurrentStatus() == Status.ProlongedSelling);\r\n    require(msg.value >= minInvestment);\r\n    address receiver = msg.sender;\r\n\r\n    // Check if current sender is allowed to participate in this crowdsale\r\n    var senderAllowed = false;\r\n    if (allowedSenders.length > 0) {\r\n      for (uint i = 0; i < allowedSenders.length; i++)\r\n        if (allowedSenders[i] == receiver){\r\n          senderAllowed = true;\r\n          break;\r\n        }\r\n    }\r\n    else\r\n      senderAllowed = true;\r\n\r\n    assert(senderAllowed);\r\n\r\n    uint weiAmount = msg.value;\r\n    uint tokenAmount = safeDiv(safeMul(weiAmount, tokenValueMultiplier), tokenPrice);\r\n    assert(tokenAmount > 0);\r\n\r\n    uint changeWei = 0;\r\n    var currentContractTokens = token.balanceOf(address(this));\r\n    if (currentContractTokens < tokenAmount) {\r\n      var changeTokenAmount = safeSub(tokenAmount, currentContractTokens);\r\n      changeWei = safeDiv(safeMul(changeTokenAmount, tokenPrice), tokenValueMultiplier);\r\n      tokenAmount = currentContractTokens;\r\n      weiAmount = safeSub(weiAmount, changeWei);\r\n    }\r\n\r\n    if(investedAmountOf[receiver] == 0) {\r\n       // A new investor\r\n       investorCount++;\r\n    }\r\n    // Update investor-amount mappings\r\n    investedAmountOf[receiver] = safeAdd(investedAmountOf[receiver], weiAmount);\r\n    tokenAmountOf[receiver] = safeAdd(tokenAmountOf[receiver], tokenAmount);\r\n    // Update totals\r\n    weiRaisedAmount = safeAdd(weiRaisedAmount, weiAmount);\r\n    tokensSoldAmount = safeAdd(tokensSoldAmount, tokenAmount);\r\n\r\n    // Transfer the invested ETH to the multisig wallet;\r\n    ethMultisigWallet.transfer(weiAmount);\r\n\r\n    // Transfer the bought tokens to the ETH sender\r\n    var transferSuccess = token.transfer(receiver, tokenAmount);\r\n    assert(transferSuccess);\r\n\r\n    // Return change if any\r\n    if (changeWei > 0) {\r\n      receiver.transfer(changeWei);\r\n    }\r\n\r\n    // Tell us the investment succeeded\r\n    Invested(receiver, weiAmount, tokenAmount);\r\n  }\r\n\r\n   /// @dev Token sale state machine management.\r\n   /// @return Status current status\r\n  function getCurrentStatus() public constant returns (Status) {\r\n    if (startTime > now)\r\n      return Status.Preparing;\r\n    if (now > startTime + duration + prolongedDuration)\r\n      return Status.Finished;\r\n    if (now > startTime + duration && !prolongationPermitted)\r\n      return Status.Finished;\r\n    if (token.balanceOf(address(this)) <= 0)\r\n      return Status.TokenShortage;\r\n    if (now > startTime + duration)\r\n      return Status.ProlongedSelling;\r\n    if (now >= startTime)\r\n        return Status.Selling;\r\n    return Status.Unknown;\r\n  }\r\n\r\n  /// @dev Withdraw remaining tokens to the team wallet\r\n  /// @param value Amount of tokens to withdraw\r\n  function withdrawTokens(uint value) public onlyOwner {\r\n    require(value <= token.balanceOf(address(this)));\r\n    // Return the specified amount of tokens to team wallet\r\n    token.transfer(tokenMultisigWallet, value);\r\n    Withdraw(value);\r\n  }\r\n\r\n  /// @dev Change current token price\r\n  /// @param newTokenPrice New token unit price in wei\r\n  function changeTokenPrice(uint newTokenPrice) public onlyOwner {\r\n    require(newTokenPrice > 0);\r\n\r\n    tokenPrice = newTokenPrice;\r\n    TokenPriceChanged(newTokenPrice);\r\n  }\r\n\r\n  /// @dev Prolong ICO if owner decides to do it\r\n  function prolong() public onlyOwner {\r\n    require(!prolongationPermitted && prolongedDuration > 0);\r\n    prolongationPermitted = true;\r\n  }\r\n\r\n  /// @dev Called by the owner on excess, triggers stopped state\r\n  function stopSale() public onlyOwner {\r\n    stopped = true;\r\n  }\r\n\r\n  /// @dev Called by the owner on end of excess, returns to normal state\r\n  function resumeSale() public onlyOwner {\r\n    require(stopped);\r\n    stopped = false;\r\n  }\r\n\r\n  /// @dev Called by the owner to destroy contract\r\n  function kill() public onlyOwner {\r\n    selfdestruct(owner);\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"prolong\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"duration\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"prolongedDuration\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"investedAmountOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaisedAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"resumeSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allowedSenders\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stopped\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethMultisigWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minInvestment\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenAmountOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensSoldAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"prolongationPermitted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenMultisigWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"investorCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenValueMultiplier\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stopSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newTokenPrice\",\"type\":\"uint256\"}],\"name\":\"changeTokenPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_ethMultisigWallet\",\"type\":\"address\"},{\"name\":\"_tokenMultisigWallet\",\"type\":\"address\"},{\"name\":\"_startTime\",\"type\":\"uint256\"},{\"name\":\"_duration\",\"type\":\"uint256\"},{\"name\":\"_prolongedDuration\",\"type\":\"uint256\"},{\"name\":\"_tokenPrice\",\"type\":\"uint256\"},{\"name\":\"_minInvestment\",\"type\":\"uint256\"},{\"name\":\"_allowedSenders\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"weiAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"Invested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newTokenPrice\",\"type\":\"uint256\"}],\"name\":\"TokenPriceChanged\",\"type\":\"event\"}]","ContractName":"SilentNotaryTokenSale","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000002df8286c9396f52e17dfee75d2e41e52609cf8970000000000000000000000000f30c808069315b3b7dfbfe149c87448b50c6d8b000000000000000000000000abfe9ee7512e2291b95666f5f0e9de1b43659e560000000000000000000000000000000000000000000000000000000059f6bfe00000000000000000000000000000000000000000000000000000000000b892000000000000000000000000000000000000000000000000000000000000b8920000000000000000000000000000000000000000000000000000000022ecb25c00000000000000000000000000000000000000000000000000016345785d8a000000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://f09d1a9d7e55cc929c2963557b00890eb01f9070894d789f2344ececd4a6bd6f"}]}