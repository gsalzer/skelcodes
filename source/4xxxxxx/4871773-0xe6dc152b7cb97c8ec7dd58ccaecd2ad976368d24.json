{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\ncontract OsherCrowdsale {\r\n    \r\n    function crowdSaleStartTime() returns (uint);\r\n    function preicostarted() returns (uint);\r\n    \r\n}\r\n\r\n\r\ncontract OsherCoinPricing is Ownable {\r\n    \r\n   \r\n    \r\n    OsherCoinCrowdsaleCore oshercoincrowdsalecore;\r\n    uint public preicostarted;\r\n    uint public icostarted;\r\n    uint public price;\r\n    address oshercrowdsaleaddress; \r\n    \r\n    \r\n    \r\n    function OsherCoinPricing() {\r\n        \r\n        \r\n        price =.00000000001 ether;\r\n        oshercrowdsaleaddress = 0x2Ef8DcDeCd124660C8CC8E55114f615C2e657da6;  // add crowdsale address\r\n        \r\n    }\r\n    \r\n    \r\n    \r\n    \r\n    function crowdsalepricing( address tokenholder, uint amount  )  returns ( uint , uint ) {\r\n        \r\n        uint award;\r\n        uint bonus;\r\n        \r\n        return ( OsherCoinAward ( amount ) , bonus );\r\n        \r\n    }\r\n    \r\n    \r\n    function precrowdsalepricing( address tokenholder, uint amount )   returns ( uint, uint )  {\r\n        \r\n       \r\n        uint award;\r\n        uint bonus;\r\n        \r\n        ( award, bonus ) = OsherCoinPresaleAward ( amount  );\r\n        \r\n        return ( award, bonus );\r\n        \r\n    }\r\n    \r\n    \r\n    function OsherCoinPresaleAward ( uint amount  ) public constant  returns ( uint, uint  ){\r\n        \r\n        \r\n        uint divisions = (amount / price) / 20;\r\n        uint bonus =   ( currentpreicobonus()/5 ) * divisions;\r\n        return ( (amount / price) , bonus );\r\n       \r\n    }\r\n    \r\n    \r\n    function currentpreicobonus() public constant returns ( uint) {\r\n        \r\n        uint bonus;\r\n        OsherCrowdsale oshercrowdsale =  OsherCrowdsale ( oshercrowdsaleaddress ); \r\n        \r\n        if ( now < ( oshercrowdsale.preicostarted() +   7 days ) ) bonus =   35; \r\n        if ( now > ( oshercrowdsale.preicostarted() +   7 days ) ) bonus =   30;\r\n        if ( now > ( oshercrowdsale.preicostarted() +  12 days ) ) bonus =   25;\r\n        if ( now > ( oshercrowdsale.preicostarted() +  17 days ) ) bonus =   20;\r\n        if ( now > ( oshercrowdsale.preicostarted() +  22 days ) ) bonus =   15;\r\n        if ( now > ( oshercrowdsale.preicostarted() +  27 days ) ) bonus =   10;\r\n        \r\n        return bonus;\r\n        \r\n    }\r\n    \r\n    function OsherCoinAward ( uint amount ) public constant returns ( uint ){\r\n        \r\n        return amount /  OsherCurrentICOPrice();\r\n       \r\n    }\r\n  \r\n  \r\n    function OsherCurrentICOPrice() public constant returns ( uint ){\r\n        \r\n        uint priceincrease;\r\n        OsherCrowdsale oshercrowdsale =  OsherCrowdsale ( oshercrowdsaleaddress ); \r\n        uint spotprice;\r\n        uint dayspassed = now - oshercrowdsale.crowdSaleStartTime();\r\n        //uint todays = dayspassed/86400;\r\n        uint todays = dayspassed/60; // delete\r\n        \r\n        if ( todays > 20 ) todays = 20;\r\n        \r\n        spotprice = (todays * .0000000000005 ether) + price;\r\n        \r\n        return spotprice;\r\n       \r\n    }  \r\n    \r\n    function setFirstRoundPricing ( uint _pricing ) onlyOwner {\r\n        \r\n        price = _pricing;\r\n        \r\n    }\r\n    \r\n    \r\n    \r\n}\r\n\r\ncontract OsherCoin {\r\n    function transfer(address receiver, uint amount)returns(bool ok);\r\n    function balanceOf( address _address )returns(uint256);\r\n}\r\n\r\n\r\n\r\n\r\n\r\ncontract OsherCoinCrowdsaleCore is Ownable, OsherCoinPricing {\r\n    \r\n    using SafeMath for uint;\r\n    \r\n    address public beneficiary;\r\n    address public front;\r\n    uint public tokensSold;\r\n    uint public etherRaised;\r\n    uint public presold;\r\n    \r\n    \r\n    OsherCoin public tokenReward;\r\n    \r\n    \r\n    event ShowBool ( bool );\r\n    \r\n    \r\n    \r\n    \r\n    modifier onlyFront() {\r\n        if (msg.sender != front) {\r\n            throw;\r\n        }\r\n        _;\r\n    }\r\n\r\n\r\n    \r\n    \r\n    \r\n    function OsherCoinCrowdsaleCore(){\r\n        \r\n        tokenReward = OsherCoin(  0xa8a07e3fa28bd207e405c482ce8d02402cd60d92 ); // OsherCoin Address\r\n        owner = msg.sender;\r\n        beneficiary = msg.sender;\r\n        preicostarted = now;\r\n        front = 0x2Ef8DcDeCd124660C8CC8E55114f615C2e657da6; // front crowdsale address\r\n        \r\n       \r\n       \r\n    }\r\n    \r\n   \r\n    // runs during precrowdsale\r\n    function precrowdsale ( address tokenholder ) onlyFront payable {\r\n        \r\n        uint award;  // amount of oshercoins to credit to tokenholder\r\n        uint bonus;  // amount of oshercoins to credit to tokenholder\r\n        \r\n        OsherCoinPricing pricingstructure = new OsherCoinPricing();\r\n        ( award, bonus ) = pricingstructure.precrowdsalepricing( tokenholder , msg.value ); \r\n        \r\n       \r\n        presold = presold.add( award + bonus ); //add number of tokens sold in presale\r\n        tokenReward.transfer ( tokenholder , award + bonus ); // immediate transfer of oshercoins to token buyer\r\n        \r\n        beneficiary.transfer ( msg.value ); \r\n          \r\n        etherRaised = etherRaised.add( msg.value ); // tallies ether raised\r\n        tokensSold = tokensSold.add( award + bonus ); // tallies total osher sold\r\n        \r\n    }\r\n    \r\n    // runs when crowdsale is active\r\n    function crowdsale ( address tokenholder  ) onlyFront payable {\r\n        \r\n        uint award;  // amount of oshercoins to send to tokenholder\r\n        uint bonus;  // amount of oshercoin bonus\r\n     \r\n        OsherCoinPricing pricingstructure = new OsherCoinPricing();\r\n        ( award , bonus ) = pricingstructure.crowdsalepricing( tokenholder, msg.value ); \r\n    \r\n        tokenReward.transfer ( tokenholder , award ); // immediate transfer to token holders\r\n        beneficiary.transfer ( msg.value ); \r\n        \r\n        etherRaised = etherRaised.add( msg.value );  //etherRaised += msg.value; // tallies ether raised\r\n        tokensSold = tokensSold.add( award ); //tokensSold  += award; // tallies total osher sold\r\n       \r\n    }\r\n    \r\n    \r\n    // use this to set the crowdsale beneficiary address\r\n    function transferBeneficiary ( address _newbeneficiary ) onlyOwner {\r\n        \r\n        beneficiary = _newbeneficiary;\r\n        \r\n    }\r\n    \r\n    // use this to set the charity address\r\n    \r\n    // sets crowdsale address\r\n    function setFront ( address _front ) onlyOwner {\r\n        \r\n        front = _front;\r\n        \r\n    }\r\n    \r\n   \r\n        \r\n    //empty the crowdsale contract of Dragons and forward balance to beneficiary\r\n    function withdrawCrowdsaleOsherCoins() onlyOwner{\r\n        \r\n        uint256 balance = tokenReward.balanceOf( address( this ) );\r\n        tokenReward.transfer( beneficiary, balance );\r\n        \r\n        \r\n    }\r\n   \r\n   \r\n    \r\n    \r\n    \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"currentpreicobonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newbeneficiary\",\"type\":\"address\"}],\"name\":\"transferBeneficiary\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenholder\",\"type\":\"address\"}],\"name\":\"precrowdsale\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenholder\",\"type\":\"address\"}],\"name\":\"crowdsale\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenholder\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"precrowdsalepricing\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preicostarted\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icostarted\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenReward\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_pricing\",\"type\":\"uint256\"}],\"name\":\"setFirstRoundPricing\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"front\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenholder\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"crowdsalepricing\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"OsherCurrentICOPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"etherRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_front\",\"type\":\"address\"}],\"name\":\"setFront\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawCrowdsaleOsherCoins\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"OsherCoinAward\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"OsherCoinPresaleAward\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"\",\"type\":\"bool\"}],\"name\":\"ShowBool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"OsherCoinCrowdsaleCore","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://ed98b73a7b36b07e7e63f1b0af1a13248cb6a5ea111ed8cf84ec402add081782"}]}