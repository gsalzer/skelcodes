{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n// File: contracts/land/LANDStorage.sol\r\n\r\ncontract LANDStorage {\r\n\r\n  mapping (address => uint) latestPing;\r\n\r\n  uint256 constant clearLow = 0xffffffffffffffffffffffffffffffff00000000000000000000000000000000;\r\n  uint256 constant clearHigh = 0x00000000000000000000000000000000ffffffffffffffffffffffffffffffff;\r\n  uint256 constant factor = 0x100000000000000000000000000000000;\r\n\r\n  mapping (address => bool) authorizedDeploy;\r\n\r\n}\r\n\r\n// File: contracts/upgradable/OwnableStorage.sol\r\n\r\ncontract OwnableStorage {\r\n\r\n  address public owner;\r\n\r\n  function OwnableStorage() internal {\r\n    owner = msg.sender;\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/upgradable/ProxyStorage.sol\r\n\r\ncontract ProxyStorage {\r\n\r\n  /**\r\n   * Current contract to which we are proxing\r\n   */\r\n  address public currentContract;\r\n  address public proxyOwner;\r\n}\r\n\r\n// File: erc821/contracts/AssetRegistryStorage.sol\r\n\r\ncontract AssetRegistryStorage {\r\n\r\n  string internal _name;\r\n  string internal _symbol;\r\n  string internal _description;\r\n\r\n  /**\r\n   * Stores the total count of assets managed by this registry\r\n   */\r\n  uint256 internal _count;\r\n\r\n  /**\r\n   * Stores an array of assets owned by a given account\r\n   */\r\n  mapping(address => uint256[]) internal _assetsOf;\r\n\r\n  /**\r\n   * Stores the current holder of an asset\r\n   */\r\n  mapping(uint256 => address) internal _holderOf;\r\n\r\n  /**\r\n   * Stores the index of an asset in the `_assetsOf` array of its holder\r\n   */\r\n  mapping(uint256 => uint256) internal _indexOfAsset;\r\n\r\n  /**\r\n   * Stores the data associated with an asset\r\n   */\r\n  mapping(uint256 => string) internal _assetData;\r\n\r\n  /**\r\n   * For a given account, for a given opperator, store whether that operator is\r\n   * allowed to transfer and modify assets on behalf of them.\r\n   */\r\n  mapping(address => mapping(address => bool)) internal _operators;\r\n\r\n  /**\r\n   * Simple reentrancy lock\r\n   */\r\n  bool internal _reentrancy;\r\n}\r\n\r\n// File: contracts/Storage.sol\r\n\r\ncontract Storage is ProxyStorage, OwnableStorage, AssetRegistryStorage, LANDStorage {\r\n}\r\n\r\n// File: contracts/upgradable/IApplication.sol\r\n\r\ncontract IApplication {\r\n  function initialize(bytes data) public;\r\n}\r\n\r\n// File: contracts/upgradable/Ownable.sol\r\n\r\ncontract Ownable is Storage {\r\n\r\n  event OwnerUpdate(address _prevOwner, address _newOwner);\r\n\r\n  function bytesToAddress (bytes b) pure public returns (address) {\r\n    uint result = 0;\r\n    for (uint i = b.length-1; i+1 > 0; i--) {\r\n      uint c = uint(b[i]);\r\n      uint to_inc = c * ( 16 ** ((b.length - i-1) * 2));\r\n      result += to_inc;\r\n    }\r\n    return address(result);\r\n  }\r\n\r\n  modifier onlyOwner {\r\n    assert(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  function initialize(bytes data) public {\r\n    owner = bytesToAddress(data);\r\n  }\r\n\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    require(_newOwner != owner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n// File: contracts/land/ILANDRegistry.sol\r\n\r\ninterface ILANDRegistry {\r\n\r\n  // LAND can be assigned by the owner\r\n  function assignNewParcel(int x, int y, address beneficiary) public;\r\n  function assignMultipleParcels(int[] x, int[] y, address beneficiary) public;\r\n\r\n  // After one year, land can be claimed from an inactive public key\r\n  function ping() public;\r\n  function clearLand(int[] x, int[] y) public;\r\n\r\n  // LAND-centric getters\r\n  function encodeTokenId(int x, int y) view public returns (uint256);\r\n  function decodeTokenId(uint value) view public returns (int, int);\r\n  function exists(int x, int y) view public returns (bool);\r\n  function ownerOfLand(int x, int y) view public returns (address);\r\n  function ownerOfLandMany(int[] x, int[] y) view public returns (address[]);\r\n  function landOf(address owner) view public returns (int[], int[]);\r\n  function landData(int x, int y) view public returns (string);\r\n\r\n  // Transfer LAND\r\n  function transferLand(int x, int y, address to) public;\r\n  function transferManyLand(int[] x, int[] y, address to) public;\r\n\r\n  // Update LAND\r\n  function updateLandData(int x, int y, string data) public;\r\n  function updateManyLandData(int[] x, int[] y, string data) public;\r\n}\r\n\r\n// File: erc821/contracts/IAssetHolder.sol\r\n\r\ninterface IAssetHolder {\r\n  function onAssetReceived(\r\n    /* address _assetRegistry == msg.sender */\r\n    uint256 _assetId,\r\n    address _previousHolder,\r\n    address _currentHolder,\r\n    bytes   _userData,\r\n    address _operator,\r\n    bytes   _operatorData\r\n  ) public;\r\n}\r\n\r\n// File: erc821/contracts/IAssetRegistry.sol\r\n\r\ninterface IAssetRegistry {\r\n\r\n  /**\r\n   * Global Registry getter functions\r\n   */\r\n  function name() public view returns (string);\r\n  function symbol() public view returns (string);\r\n  function description() public view returns (string);\r\n  function totalSupply() public view returns (uint256);\r\n\r\n  /**\r\n   * Asset-centric getter functions\r\n   */\r\n  function exists(uint256 assetId) public view returns (bool);\r\n\r\n  function holderOf(uint256 assetId) public view returns (address);\r\n  function safeHolderOf(uint256 assetId) public view returns (address);\r\n\r\n  function assetData(uint256 assetId) public view returns (string);\r\n\r\n  /**\r\n   * Holder-centric getter functions\r\n   */\r\n  function assetCount(address holder) public view returns (uint256);\r\n  function assetByIndex(address holder, uint256 index) public view returns (uint256);\r\n  function assetsOf(address holder) external view returns (uint256[]);\r\n\r\n  /**\r\n   * Transfer Operations\r\n   */\r\n  function transfer(address to, uint256 assetId) public;\r\n  function transfer(address to, uint256 assetId, bytes userData) public;\r\n  function transfer(address to, uint256 assetId, bytes userData, bytes operatorData) public;\r\n\r\n  /**\r\n   * Authorization operations\r\n   */\r\n  function authorizeOperator(address operator, bool authorized) public;\r\n\r\n  /**\r\n   * Authorization getters\r\n   */\r\n  function isOperatorAuthorizedFor(address operator, address assetHolder)\r\n    public view returns (bool);\r\n\r\n  /**\r\n   * Events\r\n   */\r\n  event Transfer(\r\n    address indexed from,\r\n    address indexed to,\r\n    uint256 indexed assetId,\r\n    address operator,\r\n    bytes userData,\r\n    bytes operatorData\r\n  );\r\n  event Update(\r\n    uint256 indexed assetId,\r\n    address indexed holder,\r\n    address indexed operator,\r\n    string data\r\n  );\r\n  event AuthorizeOperator(\r\n    address indexed operator,\r\n    address indexed holder,\r\n    bool authorized\r\n  );\r\n}\r\n\r\n// File: eip820/contracts/InterfaceImplementationRegistry.sol\r\n\r\ncontract InterfaceImplementationRegistry {\r\n\r\n    mapping (address => mapping(bytes32 => address)) interfaces;\r\n    mapping (address => address) public managers;\r\n\r\n    modifier canManage(address addr) {\r\n        require(msg.sender == addr || msg.sender == managers[addr]);\r\n        _;\r\n    }\r\n\r\n    function interfaceHash(string interfaceName) public pure returns(bytes32) {\r\n        return keccak256(interfaceName);\r\n    }\r\n\r\n\r\n    /// @notice Query if an address implements an interface and thru which contract\r\n    /// @param addr Address that is being queried for the implementation of an interface\r\n    /// @param iHash SHA3 of the name of the interface as a string\r\n    ///  Example `web3.utils.sha3('Ierc777`')`\r\n    /// @return The address of the contract that implements a speficic interface\r\n    ///  or 0x0 if `addr` does not implement this interface\r\n    function getInterfaceImplementer(address addr, bytes32 iHash) public constant returns (address) {\r\n        return interfaces[addr][iHash];\r\n    }\r\n\r\n    /// @notice Sets the contract that will handle a specific interface; only\r\n    ///  the address itself or a `manager` defined for that address can set it\r\n    /// @param addr Address that you want to define the interface for\r\n    /// @param iHash SHA3 of the name of the interface as a string\r\n    ///  For example `web3.utils.sha3('Ierc777')` for the Ierc777\r\n    function setInterfaceImplementer(address addr, bytes32 iHash, address implementer) public canManage(addr)  {\r\n        interfaces[addr][iHash] = implementer;\r\n        InterfaceImplementerSet(addr, iHash, implementer);\r\n    }\r\n\r\n    /// @notice Sets an external `manager` that will be able to call `setInterfaceImplementer()`\r\n    ///  on behalf of the address.\r\n    /// @param addr Address that you are defining the manager for.\r\n    /// @param newManager The address of the manager for the `addr` that will replace\r\n    ///  the old one.  Set to 0x0 if you want to remove the manager.\r\n    function changeManager(address addr, address newManager) public canManage(addr) {\r\n        managers[addr] = newManager;\r\n        ManagerChanged(addr, newManager);\r\n    }\r\n\r\n    event InterfaceImplementerSet(address indexed addr, bytes32 indexed interfaceHash, address indexed implementer);\r\n    event ManagerChanged(address indexed addr, address indexed newManager);\r\n}\r\n\r\n// File: eip820/contracts/EIP820.sol\r\n\r\ncontract EIP820 {\r\n    InterfaceImplementationRegistry interfaceImplementationRegistry = InterfaceImplementationRegistry(0x94405C3223089A942B7597dB96Dc60FcA17B0E3A);\r\n\r\n    function setInterfaceImplementation(string ifaceLabel, address impl) internal {\r\n        interfaceImplementationRegistry.setInterfaceImplementer(this, keccak256(ifaceLabel), impl);\r\n    }\r\n\r\n    function interfaceAddr(address addr, string ifaceLabel) internal constant returns(address) {\r\n        return interfaceImplementationRegistry.getInterfaceImplementer(addr, keccak256(ifaceLabel));\r\n    }\r\n\r\n    function delegateManagement(address newManager) internal {\r\n        interfaceImplementationRegistry.changeManager(this, newManager);\r\n    }\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: erc821/contracts/StandardAssetRegistry.sol\r\n\r\ncontract StandardAssetRegistry is AssetRegistryStorage, IAssetRegistry, EIP820 {\r\n  using SafeMath for uint256;\r\n\r\n  //\r\n  // Global Getters\r\n  //\r\n\r\n  function name() public view returns (string) {\r\n    return _name;\r\n  }\r\n\r\n  function symbol() public view returns (string) {\r\n    return _symbol;\r\n  }\r\n\r\n  function description() public view returns (string) {\r\n    return _description;\r\n  }\r\n\r\n  function totalSupply() public view returns (uint256) {\r\n    return _count;\r\n  }\r\n\r\n  //\r\n  // Asset-centric getter functions\r\n  //\r\n\r\n  function exists(uint256 assetId) public view returns (bool) {\r\n    return _holderOf[assetId] != 0;\r\n  }\r\n\r\n  function holderOf(uint256 assetId) public view returns (address) {\r\n    return _holderOf[assetId];\r\n  }\r\n\r\n  function safeHolderOf(uint256 assetId) public view returns (address) {\r\n    address holder = _holderOf[assetId];\r\n    require(holder != 0);\r\n    return holder;\r\n  }\r\n\r\n  function assetData(uint256 assetId) public view returns (string) {\r\n    return _assetData[assetId];\r\n  }\r\n\r\n  function safeAssetData(uint256 assetId) public view returns (string) {\r\n    require(_holderOf[assetId] != 0);\r\n    return _assetData[assetId];\r\n  }\r\n\r\n  //\r\n  // Holder-centric getter functions\r\n  //\r\n\r\n  function assetCount(address holder) public view returns (uint256) {\r\n    return _assetsOf[holder].length;\r\n  }\r\n\r\n  function assetByIndex(address holder, uint256 index) public view returns (uint256) {\r\n    require(index < _assetsOf[holder].length);\r\n    require(index < (1<<127));\r\n    return _assetsOf[holder][index];\r\n  }\r\n\r\n  function assetsOf(address holder) external view returns (uint256[]) {\r\n    return _assetsOf[holder];\r\n  }\r\n\r\n  //\r\n  // Authorization getters\r\n  //\r\n\r\n  function isOperatorAuthorizedFor(address operator, address assetHolder)\r\n    public view returns (bool)\r\n  {\r\n    return _operators[assetHolder][operator];\r\n  }\r\n\r\n  function authorizeOperator(address operator, bool authorized) public {\r\n    if (authorized) {\r\n      require(!isOperatorAuthorizedFor(operator, msg.sender));\r\n      _addAuthorization(operator, msg.sender);\r\n    } else {\r\n      require(isOperatorAuthorizedFor(operator, msg.sender));\r\n      _clearAuthorization(operator, msg.sender);\r\n    }\r\n    AuthorizeOperator(operator, msg.sender, authorized);\r\n  }\r\n\r\n  function _addAuthorization(address operator, address holder) private {\r\n    _operators[holder][operator] = true;\r\n  }\r\n\r\n  function _clearAuthorization(address operator, address holder) private {\r\n    _operators[holder][operator] = false;\r\n  }\r\n\r\n  //\r\n  // Internal Operations\r\n  //\r\n\r\n  function _addAssetTo(address to, uint256 assetId) internal {\r\n    _holderOf[assetId] = to;\r\n\r\n    uint256 length = assetCount(to);\r\n\r\n    _assetsOf[to].push(assetId);\r\n\r\n    _indexOfAsset[assetId] = length;\r\n\r\n    _count = _count.add(1);\r\n  }\r\n\r\n  function _addAssetTo(address to, uint256 assetId, string data) internal {\r\n    _addAssetTo(to, assetId);\r\n\r\n    _assetData[assetId] = data;\r\n  }\r\n\r\n  function _removeAssetFrom(address from, uint256 assetId) internal {\r\n    uint256 assetIndex = _indexOfAsset[assetId];\r\n    uint256 lastAssetIndex = assetCount(from).sub(1);\r\n    uint256 lastAssetId = _assetsOf[from][lastAssetIndex];\r\n\r\n    _holderOf[assetId] = 0;\r\n\r\n    // Insert the last asset into the position previously occupied by the asset to be removed\r\n    _assetsOf[from][assetIndex] = lastAssetId;\r\n\r\n    // Resize the array\r\n    _assetsOf[from][lastAssetIndex] = 0;\r\n    _assetsOf[from].length--;\r\n\r\n    // Remove the array if no more assets are owned to prevent pollution\r\n    if (_assetsOf[from].length == 0) {\r\n      delete _assetsOf[from];\r\n    }\r\n\r\n    // Update the index of positions for the asset\r\n    _indexOfAsset[assetId] = 0;\r\n    _indexOfAsset[lastAssetId] = assetIndex;\r\n\r\n    _count = _count.sub(1);\r\n  }\r\n\r\n  function _removeAssetData(uint256 assetId) internal {\r\n    _assetData[assetId] = '';\r\n  }\r\n\r\n  //\r\n  // Supply-altering functions\r\n  //\r\n\r\n  function _generate(uint256 assetId, address beneficiary, string data) internal {\r\n    require(_holderOf[assetId] == 0);\r\n\r\n    _addAssetTo(beneficiary, assetId, data);\r\n\r\n    Transfer(0, beneficiary, assetId, msg.sender, bytes(data), '');\r\n  }\r\n\r\n  function _destroy(uint256 assetId) internal {\r\n    address holder = _holderOf[assetId];\r\n    require(holder != 0);\r\n\r\n    _removeAssetFrom(holder, assetId);\r\n    _removeAssetData(assetId);\r\n\r\n    Transfer(holder, 0, assetId, msg.sender, '', '');\r\n  }\r\n\r\n  //\r\n  // Transaction related operations\r\n  //\r\n\r\n  modifier onlyHolder(uint256 assetId) {\r\n    require(_holderOf[assetId] == msg.sender);\r\n    _;\r\n  }\r\n\r\n  modifier onlyOperatorOrHolder(uint256 assetId) {\r\n    require(_holderOf[assetId] == msg.sender\r\n         || isOperatorAuthorizedFor(msg.sender, _holderOf[assetId]));\r\n    _;\r\n  }\r\n\r\n  modifier isDestinataryDefined(address destinatary) {\r\n    require(destinatary != 0);\r\n    _;\r\n  }\r\n\r\n  modifier destinataryIsNotHolder(uint256 assetId, address to) {\r\n    require(_holderOf[assetId] != to);\r\n    _;\r\n  }\r\n\r\n  function transfer(address to, uint256 assetId) public {\r\n    return _doTransfer(to, assetId, '', 0, '');\r\n  }\r\n\r\n  function transfer(address to, uint256 assetId, bytes userData) public {\r\n    return _doTransfer(to, assetId, userData, 0, '');\r\n  }\r\n\r\n  function transfer(address to, uint256 assetId, bytes userData, bytes operatorData) public {\r\n    return _doTransfer(to, assetId, userData, msg.sender, operatorData);\r\n  }\r\n\r\n  function _doTransfer(\r\n    address to, uint256 assetId, bytes userData, address operator, bytes operatorData\r\n  )\r\n    isDestinataryDefined(to)\r\n    destinataryIsNotHolder(assetId, to)\r\n    onlyOperatorOrHolder(assetId)\r\n    internal\r\n  {\r\n    return _doSend(to, assetId, userData, operator, operatorData);\r\n  }\r\n\r\n\r\n  function _doSend(\r\n    address to, uint256 assetId, bytes userData, address operator, bytes operatorData\r\n  )\r\n    internal\r\n  {\r\n    address holder = _holderOf[assetId];\r\n    _removeAssetFrom(holder, assetId);\r\n    _addAssetTo(to, assetId);\r\n\r\n    if (_isContract(to)) {\r\n      require(!_reentrancy);\r\n      _reentrancy = true;\r\n\r\n      address recipient = interfaceAddr(to, 'IAssetHolder');\r\n      require(recipient != 0);\r\n\r\n      IAssetHolder(recipient).onAssetReceived(assetId, holder, to, userData, operator, operatorData);\r\n\r\n      _reentrancy = false;\r\n    }\r\n\r\n    Transfer(holder, to, assetId, operator, userData, operatorData);\r\n  }\r\n\r\n  //\r\n  // Update related functions\r\n  //\r\n\r\n  function _update(uint256 assetId, string data) internal {\r\n    require(exists(assetId));\r\n    _assetData[assetId] = data;\r\n    Update(assetId, _holderOf[assetId], msg.sender, data);\r\n  }\r\n\r\n  //\r\n  // Utilities\r\n  //\r\n\r\n  function _isContract(address addr) internal view returns (bool) {\r\n    uint size;\r\n    assembly { size := extcodesize(addr) }\r\n    return size > 0;\r\n  }\r\n}\r\n\r\n// File: contracts/land/LANDRegistry.sol\r\n\r\ncontract LANDRegistry is Storage,\r\n  Ownable, StandardAssetRegistry,\r\n  ILANDRegistry\r\n{\r\n\r\n  function initialize(bytes data) public {\r\n    _name = 'Decentraland LAND';\r\n    _symbol = 'LAND';\r\n    _description = 'Contract that stores the Decentraland LAND registry';\r\n    super.initialize(data);\r\n  }\r\n\r\n  function authorizeDeploy(address beneficiary) public onlyOwner {\r\n    authorizedDeploy[beneficiary] = true;\r\n  }\r\n  function forbidDeploy(address beneficiary) public onlyOwner {\r\n    authorizedDeploy[beneficiary] = false;\r\n  }\r\n\r\n  function assignNewParcel(int x, int y, address beneficiary) public {\r\n    require(authorizedDeploy[msg.sender]);\r\n    _generate(encodeTokenId(x, y), beneficiary, '');\r\n  }\r\n\r\n  function assignMultipleParcels(int[] x, int[] y, address beneficiary) public {\r\n    require(authorizedDeploy[msg.sender]);\r\n    for (uint i = 0; i < x.length; i++) {\r\n      _generate(encodeTokenId(x[i], y[i]), beneficiary, '');\r\n    }\r\n  }\r\n\r\n  function destroy(uint256 assetId) onlyOwner public {\r\n    _destroy(assetId);\r\n  }\r\n\r\n  //\r\n  // Inactive keys after 1 year lose ownership\r\n  //\r\n\r\n  function ping() public {\r\n    latestPing[msg.sender] = now;\r\n  }\r\n\r\n  function setLatestToNow(address user) onlyOwner public {\r\n    latestPing[user] = now;\r\n  }\r\n\r\n  function clearLand(int[] x, int[] y) public {\r\n    require(x.length == y.length);\r\n    for (uint i = 0; i < x.length; i++) {\r\n      uint landId = encodeTokenId(x[i], y[i]);\r\n      address holder = holderOf(landId);\r\n      if (latestPing[holder] < now - 1 years) {\r\n        _destroy(landId);\r\n      }\r\n    }\r\n  }\r\n\r\n  //\r\n  // LAND Getters\r\n  //\r\n\r\n  function encodeTokenId(int x, int y) view public returns (uint) {\r\n    return ((uint(x) * factor) & clearLow) | (uint(y) & clearHigh);\r\n  }\r\n\r\n  function decodeTokenId(uint value) view public returns (int, int) {\r\n    uint x = (value & clearLow) >> 128;\r\n    uint y = (value & clearHigh);\r\n    return (expandNegative128BitCast(x), expandNegative128BitCast(y));\r\n  }\r\n\r\n  function expandNegative128BitCast(uint value) view public returns (int) {\r\n    if (value & (1<<127) != 0) {\r\n      return int(value | clearLow);\r\n    }\r\n    return int(value);\r\n  }\r\n\r\n  function exists(int x, int y) view public returns (bool) {\r\n    return exists(encodeTokenId(x, y));\r\n  }\r\n\r\n  function ownerOfLand(int x, int y) view public returns (address) {\r\n    return holderOf(encodeTokenId(x, y));\r\n  }\r\n\r\n  function ownerOfLandMany(int[] x, int[] y) view public returns (address[]) {\r\n    require(x.length > 0);\r\n    require(x.length == y.length);\r\n\r\n    address[] memory addrs = new address[](x.length);\r\n    for (uint i = 0; i < x.length; i++) {\r\n      addrs[i] = ownerOfLand(x[i], y[i]);\r\n    }\r\n\r\n    return addrs;\r\n  }\r\n\r\n  function landOf(address owner) public view returns (int[], int[]) {\r\n    int[] memory x = new int[](_assetsOf[owner].length);\r\n    int[] memory y = new int[](_assetsOf[owner].length);\r\n\r\n    int assetX;\r\n    int assetY;\r\n    uint length = _assetsOf[owner].length;\r\n    for (uint i = 0; i < length; i++) {\r\n      (assetX, assetY) = decodeTokenId(_assetsOf[owner][i]);\r\n      x[i] = assetX;\r\n      y[i] = assetY;\r\n    }\r\n\r\n    return (x, y);\r\n  }\r\n\r\n  function landData(int x, int y) view public returns (string) {\r\n    return assetData(encodeTokenId(x, y));\r\n  }\r\n\r\n  //\r\n  // Transfer LAND\r\n  //\r\n\r\n  function transferLand(int x, int y, address to) public {\r\n    transfer(to, encodeTokenId(x, y));\r\n  }\r\n\r\n  function transferManyLand(int[] x, int[] y, address to) public {\r\n    require(x.length == y.length);\r\n    for (uint i = 0; i < x.length; i++) {\r\n      transfer(to, encodeTokenId(x[i], y[i]));\r\n    }\r\n  }\r\n\r\n  //\r\n  // Update LAND\r\n  //\r\n\r\n  function updateLandData(int x, int y, string data) public onlyOperatorOrHolder(encodeTokenId(x, y)) {\r\n    return _update(encodeTokenId(x, y), data);\r\n  }\r\n\r\n  function updateManyLandData(int[] x, int[] y, string data) public {\r\n    require(x.length == y.length);\r\n    for (uint i = 0; i < x.length; i++) {\r\n      updateLandData(x[i], y[i], data);\r\n    }\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"proxyOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"x\",\"type\":\"int256\"},{\"name\":\"y\",\"type\":\"int256\"}],\"name\":\"ownerOfLand\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"setLatestToNow\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"x\",\"type\":\"int256\"},{\"name\":\"y\",\"type\":\"int256\"},{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"assignNewParcel\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"x\",\"type\":\"int256[]\"},{\"name\":\"y\",\"type\":\"int256[]\"}],\"name\":\"ownerOfLandMany\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"x\",\"type\":\"int256[]\"},{\"name\":\"y\",\"type\":\"int256[]\"},{\"name\":\"data\",\"type\":\"string\"}],\"name\":\"updateManyLandData\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"assetsOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"assetId\",\"type\":\"uint256\"}],\"name\":\"safeHolderOf\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"authorizeDeploy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"x\",\"type\":\"int256\"},{\"name\":\"y\",\"type\":\"int256\"},{\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferLand\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"b\",\"type\":\"bytes\"}],\"name\":\"bytesToAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"expandNegative128BitCast\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"x\",\"type\":\"int256\"},{\"name\":\"y\",\"type\":\"int256\"}],\"name\":\"landData\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"x\",\"type\":\"int256[]\"},{\"name\":\"y\",\"type\":\"int256[]\"},{\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferManyLand\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"assetId\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"operator\",\"type\":\"address\"},{\"name\":\"assetHolder\",\"type\":\"address\"}],\"name\":\"isOperatorAuthorizedFor\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"ping\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"x\",\"type\":\"int256\"},{\"name\":\"y\",\"type\":\"int256\"}],\"name\":\"encodeTokenId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"decodeTokenId\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"},{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"x\",\"type\":\"int256[]\"},{\"name\":\"y\",\"type\":\"int256[]\"},{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"assignMultipleParcels\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"landOf\",\"outputs\":[{\"name\":\"\",\"type\":\"int256[]\"},{\"name\":\"\",\"type\":\"int256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"x\",\"type\":\"int256[]\"},{\"name\":\"y\",\"type\":\"int256[]\"}],\"name\":\"clearLand\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"assetId\",\"type\":\"uint256\"}],\"name\":\"destroy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"x\",\"type\":\"int256\"},{\"name\":\"y\",\"type\":\"int256\"}],\"name\":\"exists\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"assetId\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"assetId\",\"type\":\"uint256\"}],\"name\":\"assetData\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"operator\",\"type\":\"address\"},{\"name\":\"authorized\",\"type\":\"bool\"}],\"name\":\"authorizeOperator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"assetId\",\"type\":\"uint256\"}],\"name\":\"safeAssetData\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"assetId\",\"type\":\"uint256\"},{\"name\":\"userData\",\"type\":\"bytes\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"assetCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"holder\",\"type\":\"address\"},{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"assetByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"x\",\"type\":\"int256\"},{\"name\":\"y\",\"type\":\"int256\"},{\"name\":\"data\",\"type\":\"string\"}],\"name\":\"updateLandData\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"assetId\",\"type\":\"uint256\"}],\"name\":\"holderOf\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"assetId\",\"type\":\"uint256\"},{\"name\":\"userData\",\"type\":\"bytes\"},{\"name\":\"operatorData\",\"type\":\"bytes\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"forbidDeploy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"assetId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"userData\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"operatorData\",\"type\":\"bytes\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"assetId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"data\",\"type\":\"string\"}],\"name\":\"Update\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"authorized\",\"type\":\"bool\"}],\"name\":\"AuthorizeOperator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_prevOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"OwnerUpdate\",\"type\":\"event\"}]","ContractName":"LANDRegistry","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://019f996e10636487090009a916f1e1b4b81707530c9da1bcbeda830598399258"}]}