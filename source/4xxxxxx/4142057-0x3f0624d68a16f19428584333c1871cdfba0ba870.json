{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.14;\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) constant returns (uint256);\r\n  function transfer(address to, uint256 value) returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) returns (bool);\r\n  function approve(address spender, uint256 value) returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances. \r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) returns (bool) {\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of. \r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amout of tokens to be transfered\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\r\n    var _allowance = allowed[_from][msg.sender];\r\n\r\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n    // require (_value <= _allowance);\r\n\r\n    balances[_to] = balances[_to].add(_value);\r\n    balances[_from] = balances[_from].sub(_value);\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) returns (bool) {\r\n\r\n    // To change the approve amount you first have to reduce the addresses`\r\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n    //  already 0 to mitigate the race condition described here:\r\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifing the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner {\r\n    require(newOwner != address(0));      \r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title DatumGenesisToken\r\n * @dev Very simple ERC20 Token example, where all tokens are pre-assigned to the creator. \r\n * Note they can later distribute these tokens as they wish using `transfer` and other\r\n * `StandardToken` functions.\r\n */\r\ncontract DatumGenesisToken is StandardToken, Ownable {\r\n\r\n  string public name = \"DAT Genesis Token\";           //The Token's name: e.g. Dat Genesis Tokens\r\n  uint8 public decimals = 18;                         //Number of decimals of the smallest unit\r\n  string public symbol = \"DATG\";                             //An identifier: e.g. REP\r\n                                           \r\n  uint256 public constant INITIAL_SUPPLY = 75000000 ether;\r\n\r\n  // Flag that determines if the token is transferable or not.\r\n  bool public transfersEnabled = false;\r\n\r\n  /**\r\n   * @dev Contructor that gives msg.sender all of existing tokens. \r\n   */\r\n  function DatumGenesisToken() {\r\n    totalSupply = INITIAL_SUPPLY;\r\n    balances[msg.sender] = INITIAL_SUPPLY;\r\n  }\r\n\r\n\r\n   /// @notice Enables token holders to transfer their tokens freely if true\r\n   /// @param _transfersEnabled True if transfers are allowed in the clone\r\n   function enableTransfers(bool _transfersEnabled) onlyOwner {\r\n      transfersEnabled = _transfersEnabled;\r\n   }\r\n\r\n  function transferFromContract(address _to, uint256 _value) onlyOwner returns (bool success) {\r\n    return super.transfer(_to, _value);\r\n  }\r\n\r\n  function transfer(address _to, uint256 _value) returns (bool success) {\r\n    require(transfersEnabled);\r\n    return super.transfer(_to, _value);\r\n  }\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\r\n    require(transfersEnabled);\r\n    return super.transferFrom(_from, _to, _value);\r\n  }\r\n\r\n  function approve(address _spender, uint256 _value) returns (bool) {\r\n      require(transfersEnabled);\r\n      return super.approve(_spender, _value);\r\n  }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title  \r\n * @dev DatCrowdSale is a contract for managing a token crowdsale.\r\n * DatCrowdSale have a start and end date, where investors can make\r\n * token purchases and the crowdsale will assign them tokens based\r\n * on a token per ETH rate. Funds collected are forwarded to a refundable valut \r\n * as they arrive.\r\n */\r\ncontract DatCrowdPreSale is Ownable {\r\n  using SafeMath for uint256;\r\n\r\n  // The token being sold\r\n  DatumGenesisToken public token;\r\n\r\n  // start and end date where investments are allowed (both inclusive)\r\n  uint256 public startDate = 1502460000; //Fri, 11 Aug 2017 14:00:00 +00:00\r\n  uint256 public endDate = 1505138400; //Mon, 11 Sep 2017 14:00:00 +00:00\r\n\r\n  // Minimum amount to participate\r\n  uint256 public minimumParticipationAmount = 100000000000000000 wei; //0.1 ether\r\n\r\n  // Maximum amount to participate\r\n  uint256 public maximalParticipationAmount = 1000000000000000000000 wei; //1000 ether\r\n\r\n  // address where funds are collected\r\n  address wallet;\r\n\r\n  // how many token units a buyer gets per ether\r\n  uint256 rate = 15000;\r\n\r\n  // amount of raised money in wei\r\n  uint256 public weiRaised;\r\n\r\n  //flag for final of crowdsale\r\n  bool public isFinalized = false;\r\n\r\n  //cap for the sale\r\n  uint256 public cap = 5000000000000000000000 wei; //5000 ether\r\n \r\n\r\n\r\n\r\n  event Finalized();\r\n\r\n  /**\r\n   * event for token purchase logging\r\n   * @param purchaser who paid for the tokens\r\n   * @param beneficiary who got the tokens\r\n   * @param value weis paid for purchase\r\n   * @param amount amount of tokens purchased\r\n   */ \r\n  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n\r\n\r\n\r\n  /**\r\n  * @notice Log an event for each funding contributed during the public phase\r\n  * @notice Events are not logged when the constructor is being executed during\r\n  *         deployment, so the preallocations will not be logged\r\n  */\r\n  event LogParticipation(address indexed sender, uint256 value, uint256 timestamp);\r\n\r\n\r\n  \r\n  function DatCrowdPreSale(address _wallet) {\r\n    token = createTokenContract();\r\n    wallet = _wallet;\r\n  }\r\n\r\n\r\n// creates the token to be sold. \r\n  // override this method to have crowdsale of a specific datum token.\r\n  function createTokenContract() internal returns (DatumGenesisToken) {\r\n    return new DatumGenesisToken();\r\n}\r\n\r\n  // fallback function can be used to buy tokens\r\n  function () payable {\r\n    buyTokens(msg.sender);\r\n  }\r\n\r\n  // low level token purchase function\r\n  function buyTokens(address beneficiary) payable {\r\n    require(beneficiary != 0x0);\r\n    require(validPurchase());\r\n\r\n    //get ammount in wei\r\n    uint256 weiAmount = msg.value;\r\n\r\n    // calculate token amount to be created\r\n    uint256 tokens = weiAmount.mul(rate);\r\n\r\n    //purchase tokens and transfer to beneficiary\r\n    token.transferFromContract(beneficiary, tokens);\r\n\r\n    // update state\r\n    weiRaised = weiRaised.add(weiAmount);\r\n\r\n    //Token purchase event\r\n    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\r\n\r\n    //forward funds to wallet\r\n    forwardFunds();\r\n  }\r\n\r\n  //send tokens to the given address used for investors with other conditions, only contract owner can call this\r\n  function transferTokensManual(address beneficiary, uint256 amount) onlyOwner {\r\n    require(beneficiary != 0x0);\r\n    require(amount != 0);\r\n    require(weiRaised.add(amount) <= cap);\r\n\r\n    //transfer tokens\r\n    token.transferFromContract(beneficiary, amount);\r\n\r\n    // update state\r\n    weiRaised = weiRaised.add(amount);\r\n\r\n    //Token purchase event\r\n    TokenPurchase(wallet, beneficiary, 0, amount);\r\n\r\n  }\r\n\r\n   /// @notice Enables token holders to transfer their tokens freely if true\r\n   /// @param _transfersEnabled True if transfers are allowed in the clone\r\n   function enableTransfers(bool _transfersEnabled) onlyOwner {\r\n      token.enableTransfers(_transfersEnabled);\r\n   }\r\n\r\n  // send ether to the fund collection wallet\r\n  // override to create custom fund forwarding mechanisms\r\n  function forwardFunds() internal {\r\n    wallet.transfer(msg.value);\r\n  }\r\n\r\n  // should be called after crowdsale ends or to emergency stop the sale\r\n  function finalize() onlyOwner {\r\n    require(!isFinalized);\r\n    Finalized();\r\n    isFinalized = true;\r\n  }\r\n\r\n\r\n  // @return true if the transaction can buy tokens\r\n  // check for valid time period, min amount and within cap\r\n  function validPurchase() internal constant returns (bool) {\r\n    bool withinPeriod = startDate <= now && endDate >= now;\r\n    bool nonZeroPurchase = msg.value != 0;\r\n    bool minAmount = msg.value >= minimumParticipationAmount;\r\n    bool withinCap = weiRaised.add(msg.value) <= cap;\r\n\r\n    return withinPeriod && nonZeroPurchase && minAmount && !isFinalized && withinCap;\r\n  }\r\n\r\n    // @return true if the goal is reached\r\n  function capReached() public constant returns (bool) {\r\n    return weiRaised >= cap;\r\n  }\r\n\r\n  // @return true if crowdsale event has ended\r\n  function hasEnded() public constant returns (bool) {\r\n    return isFinalized;\r\n  }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"maximalParticipationAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimumParticipationAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferTokensManual\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"capReached\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isFinalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_transfersEnabled\",\"type\":\"bool\"}],\"name\":\"enableTransfers\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"}],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Finalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"LogParticipation\",\"type\":\"event\"}]","ContractName":"DatCrowdPreSale","CompilerVersion":"v0.4.16-nightly.2017.8.9+commit.81887bc7","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000009119524b01f785e043a7044e3418fd287b3937ce","Library":"","SwarmSource":"bzzr://77bfd995884a01c09e4142b7e75553f4821c83363011ac16e09b5403418f1f1c"}]}