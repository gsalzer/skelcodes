{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner {\r\n    if (newOwner != address(0)) {\r\n      owner = newOwner;\r\n    }\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract PreIco is Ownable {\r\n    using SafeMath for uint;\r\n\r\n    uint public decimals = 18;\r\n\r\n    uint256 public initialSupply = 4000000 * 10 ** decimals;  // 4 milions XCC\r\n\r\n    uint256 public remainingSupply = initialSupply;\r\n\r\n    uint256 public tokenValue;  // value in wei\r\n\r\n    address public updater;  // account in charge of updating the token value\r\n\r\n    uint256 public startBlock;  // block number of contract deploy\r\n\r\n    uint256 public endTime;  // seconds from 1970-01-01T00:00:00Z\r\n\r\n    function PreIco(uint256 initialValue, address initialUpdater, uint256 end) {\r\n        tokenValue = initialValue;\r\n        updater = initialUpdater;\r\n        startBlock = block.number;\r\n        endTime = end;\r\n    }\r\n\r\n    event UpdateValue(uint256 newValue);\r\n\r\n    function updateValue(uint256 newValue) {\r\n        require(msg.sender == updater || msg.sender == owner);\r\n        tokenValue = newValue;\r\n        UpdateValue(newValue);\r\n    }\r\n\r\n    function updateUpdater(address newUpdater) onlyOwner {\r\n        updater = newUpdater;\r\n    }\r\n\r\n    function updateEndTime(uint256 newEnd) onlyOwner {\r\n        endTime = newEnd;\r\n    }\r\n\r\n    event Withdraw(address indexed to, uint value);\r\n\r\n    function withdraw(address to, uint256 value) onlyOwner {\r\n        to.transfer(value);\r\n        Withdraw(to, value);\r\n    }\r\n\r\n    modifier beforeEndTime() {\r\n        require(now < endTime);\r\n        _;\r\n    }\r\n\r\n    event AssignToken(address indexed to, uint value);\r\n\r\n    function () payable beforeEndTime {\r\n        require(remainingSupply > 0);\r\n        address sender = msg.sender;\r\n        uint256 value = msg.value.mul(10 ** decimals).div(tokenValue);\r\n        if (remainingSupply >= value) {\r\n            AssignToken(sender, value);\r\n            remainingSupply = remainingSupply.sub(value);\r\n        } else {\r\n            AssignToken(sender, remainingSupply);\r\n            remainingSupply = 0;\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"tokenValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateValue\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newUpdater\",\"type\":\"address\"}],\"name\":\"updateUpdater\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newEnd\",\"type\":\"uint256\"}],\"name\":\"updateEndTime\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"remainingSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"updater\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"initialValue\",\"type\":\"uint256\"},{\"name\":\"initialUpdater\",\"type\":\"address\"},{\"name\":\"end\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"UpdateValue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"AssignToken\",\"type\":\"event\"}]","ContractName":"PreIco","CompilerVersion":"v0.4.13+commit.fb4cb1a","OptimizationUsed":"1","Runs":"0","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000059a8a300","Library":"","SwarmSource":"bzzr://4203f036d36f47e243b8cf9ff0cd35b6e5a6bf3f271924c4c4ac0000f0c77220"}]}