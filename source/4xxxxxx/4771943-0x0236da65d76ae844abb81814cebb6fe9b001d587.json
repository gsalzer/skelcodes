{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Claimable\r\n * @dev Extension for the Ownable contract, where the ownership needs to be claimed.\r\n * This allows the new owner to accept the transfer.\r\n */\r\ncontract Claimable is Ownable {\r\n    address public pendingOwner;\r\n\r\n    /**\r\n     * @dev Modifier throws if called by any account other than the pendingOwner.\r\n     */\r\n    modifier onlyPendingOwner() {\r\n        require(msg.sender == pendingOwner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to set the pendingOwner address.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) onlyOwner public {\r\n        pendingOwner = newOwner;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the pendingOwner address to finalize the transfer.\r\n     */\r\n    function claimOwnership() onlyPendingOwner public {\r\n        OwnershipTransferred(owner, pendingOwner);\r\n        owner = pendingOwner;\r\n        pendingOwner = address(0);\r\n    }\r\n}\r\n\r\n/*\r\n    ERC20 Standard Token interface\r\n*/\r\ncontract IERC20Token {\r\n    // these functions aren't abstract since the compiler emits automatically generated getter functions as external\r\n    function name() public constant returns (string) {}\r\n    function symbol() public constant returns (string) {}\r\n    function decimals() public constant returns (uint8) {}\r\n    function totalSupply() public constant returns (uint256) {}\r\n    function balanceOf(address _owner) public constant returns (uint256) { _owner; }\r\n    function allowance(address _owner, address _spender) public constant returns (uint256) { _owner; _spender; }\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n    function approve(address _spender, uint256 _value) public returns (bool success);\r\n}\r\n\r\n/*\r\n    Token Holder interface\r\n*/\r\ncontract ITokenHolder is Ownable {\r\n    function withdrawTokens(IERC20Token _token, address _to, uint256 _amount) public;\r\n}\r\n\r\n/*\r\n    We consider every contract to be a 'token holder' since it's currently not possible\r\n    for a contract to deny receiving tokens.\r\n\r\n    The TokenHolder's contract sole purpose is to provide a safety mechanism that allows\r\n    the owner to send tokens that were sent to the contract by mistake back to their sender.\r\n*/\r\ncontract TokenHolder is ITokenHolder {\r\n    /**\r\n        @dev constructor\r\n    */\r\n    function TokenHolder() {\r\n    }\r\n\r\n    /**\r\n        @dev withdraws tokens held by the contract and sends them to an account\r\n        can only be called by the owner\r\n\r\n        @param _token   ERC20 token contract address\r\n        @param _to      account to receive the new amount\r\n        @param _amount  amount to withdraw\r\n    */\r\n    function withdrawTokens(IERC20Token _token, address _to, uint256 _amount)\r\n    public\r\n    onlyOwner\r\n    {\r\n        require(_token != address(0x0));\r\n        require(_to != address(0x0));\r\n        require(_to != address(this));\r\n        assert(_token.transfer(_to, _amount));\r\n    }\r\n}\r\n\r\n\r\n\r\ncontract CrowdFunding is Claimable, TokenHolder {\r\n    using SafeMath for uint256;\r\n\r\n    // =================================================================================================================\r\n    //                                      Members\r\n    // =================================================================================================================\r\n\r\n    // the wallet of the beneficiary\r\n    address public walletBeneficiary;\r\n\r\n    // amount of raised money in wei\r\n    uint256 public weiRaised;\r\n\r\n    // indicate if the crowd funding is ended\r\n    bool public isFinalized = false;\r\n\r\n    // =================================================================================================================\r\n    //                                      Modifiers\r\n    // =================================================================================================================\r\n\r\n    modifier isNotFinalized() {\r\n        require(!isFinalized);\r\n        _;\r\n    }\r\n\r\n    // =================================================================================================================\r\n    //                                      Events\r\n    // =================================================================================================================\r\n\r\n    event DonateAdded(address indexed _from, address indexed _to,uint256 _amount);\r\n\r\n    event DonationMatched(address indexed _from, address indexed _to,uint256 _amount);\r\n\r\n    event Finalized();\r\n\r\n    event ClaimBalance(address indexed _grantee, uint256 _amount);\r\n\r\n    // =================================================================================================================\r\n    //                                      Constructors\r\n    // =================================================================================================================\r\n\r\n    function CrowdFunding(address _walletBeneficiary) public {\r\n        require(_walletBeneficiary != address(0));\r\n        walletBeneficiary = _walletBeneficiary;\r\n    }\r\n\r\n    // =================================================================================================================\r\n    //                                      Public Methods\r\n    // =================================================================================================================\r\n\r\n    function deposit() onlyOwner isNotFinalized external payable {\r\n    }\r\n\r\n    function() isNotFinalized external payable {\r\n        donate();\r\n    }\r\n\r\n    function donate() isNotFinalized public payable {\r\n        require(msg.value > 0);\r\n\r\n        uint256 weiAmount = msg.value;\r\n        \r\n        // transfering the donator funds to the beneficiary\r\n        weiRaised = weiRaised.add(weiAmount);\r\n        walletBeneficiary.transfer(weiAmount);\r\n        DonateAdded(msg.sender, walletBeneficiary, weiAmount);\r\n\r\n        // transfering the owner funds to the beneficiary with the same amount of the donator\r\n        if(this.balance >= weiAmount) {\r\n            weiRaised = weiRaised.add(weiAmount);\r\n            walletBeneficiary.transfer(weiAmount);\r\n            DonationMatched(address(this), walletBeneficiary, weiAmount);\r\n        } else {\r\n\r\n            weiRaised = weiRaised.add(this.balance);\r\n            // if not enough funds in the owner contract - transfer the remaining balance\r\n            walletBeneficiary.transfer(this.balance);\r\n            DonationMatched(address(this), walletBeneficiary, this.balance);\r\n        }\r\n    }\r\n\r\n    function finalizeDonation(address beneficiary) onlyOwner isNotFinalized public {\r\n        require(beneficiary != address(0));\r\n\r\n        uint256 weiAmount = this.balance;\r\n        beneficiary.transfer(weiAmount);\r\n\r\n        ClaimBalance(beneficiary, weiAmount);\r\n\r\n        isFinalized = true;\r\n\r\n        Finalized();\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"finalizeDonation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"walletBeneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isFinalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"donate\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_walletBeneficiary\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"DonateAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"DonationMatched\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Finalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_grantee\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"ClaimBalance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"CrowdFunding","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000002e63194afa073e2e0b829b4d3d0719efffccc7a6","Library":"","SwarmSource":"bzzr://d0d07d17977b70b1d82b024273aa641f264c58356bf765ca0159d984a526ec6c"}]}