{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\n\r\n/// @title Interface for contracts conforming to ERC-721: Non-Fungible Tokens\r\n/// @author Dieter Shirley <dete@axiomzen.co> (https://github.com/dete)\r\ncontract ERC721 {\r\n    // Required methods\r\n    function totalSupply() public view returns (uint256 total);\r\n    function balanceOf(address _owner) public view returns (uint256 balance);\r\n    function ownerOf(uint256 _tokenId) external view returns (address owner);\r\n    function approve(address _to, uint256 _tokenId) external;\r\n    function transfer(address _to, uint256 _tokenId) external;\r\n    function transferFrom(address _from, address _to, uint256 _tokenId) external;\r\n\r\n    // Events\r\n    event Transfer(address from, address to, uint256 tokenId);\r\n    event Approval(address owner, address approved, uint256 tokenId);\r\n\r\n    // Optional\r\n    // function name() public view returns (string name);\r\n    // function symbol() public view returns (string symbol);\r\n    // function tokensOfOwner(address _owner) external view returns (uint256[] tokenIds);\r\n    // function tokenMetadata(uint256 _tokenId, string _preferredTransport) public view returns (string infoUrl);\r\n\r\n    // ERC-165 Compatibility (https://github.com/ethereum/EIPs/issues/165)\r\n    function supportsInterface(bytes4 _interfaceID) external view returns (bool);\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    function Ownable() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        if (newOwner != address(0)) {\r\n            owner = newOwner;\r\n        }\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n    event Pause();\r\n    event Unpause();\r\n\r\n    bool public paused = false;\r\n\r\n\r\n    /**\r\n     * @dev modifier to allow actions only when the contract IS paused\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!paused);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev modifier to allow actions only when the contract IS NOT paused\r\n     */\r\n    modifier whenPaused {\r\n        require(paused);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev called by the owner to pause, triggers stopped state\r\n     */\r\n    function pause() public onlyOwner whenNotPaused returns (bool) {\r\n        paused = true;\r\n        Pause();\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev called by the owner to unpause, returns to normal state\r\n     */\r\n    function unpause() public onlyOwner whenPaused returns (bool) {\r\n        paused = false;\r\n        Unpause();\r\n        return true;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n/// @title Auction Core\r\n/// @dev Contains models, variables, and internal methods for the auction.\r\n/// @notice We omit a fallback function to prevent accidental sends to this contract.\r\ncontract ClockAuctionBase {\r\n\r\n    // Represents an auction on an NFT\r\n    struct Auction {\r\n        // Current owner of NFT\r\n        address seller;\r\n        // Price (in wei) at beginning of auction\r\n        uint128 startingPrice;\r\n        // Price (in wei) at end of auction\r\n        uint128 endingPrice;\r\n        // Duration (in seconds) of auction\r\n        uint64 duration;\r\n        // Time when auction started\r\n        // NOTE: 0 if this auction has been concluded\r\n        uint64 startedAt;\r\n    }\r\n\r\n    // Reference to contract tracking NFT ownership\r\n    ERC721 public nonFungibleContract;\r\n\r\n    // Cut owner takes on each auction, measured in basis points (1/100 of a percent).\r\n    // Values 0-10,000 map to 0%-100%\r\n    uint256 public ownerCut;\r\n\r\n    // Map from token ID to their corresponding auction.\r\n    mapping (uint256 => Auction) tokenIdToAuction;\r\n\r\n    event AuctionCreated(uint256 tokenId, uint256 startingPrice, uint256 endingPrice, uint256 duration);\r\n    event AuctionSuccessful(uint256 tokenId, uint256 totalPrice, address winner);\r\n    event AuctionCancelled(uint256 tokenId);\r\n\r\n    /// @dev Returns true if the claimant owns the token.\r\n    /// @param _claimant - Address claiming to own the token.\r\n    /// @param _tokenId - ID of token whose ownership to verify.\r\n    function _owns(address _claimant, uint256 _tokenId) internal view returns (bool) {\r\n        return (nonFungibleContract.ownerOf(_tokenId) == _claimant);\r\n    }\r\n\r\n    /// @dev Escrows the NFT, assigning ownership to this contract.\r\n    /// Throws if the escrow fails.\r\n    /// @param _owner - Current owner address of token to escrow.\r\n    /// @param _tokenId - ID of token whose approval to verify.\r\n    function _escrow(address _owner, uint256 _tokenId) internal {\r\n        // it will throw if transfer fails\r\n        nonFungibleContract.transferFrom(_owner, this, _tokenId);\r\n    }\r\n\r\n    /// @dev Transfers an NFT owned by this contract to another address.\r\n    /// Returns true if the transfer succeeds.\r\n    /// @param _receiver - Address to transfer NFT to.\r\n    /// @param _tokenId - ID of token to transfer.\r\n    function _transfer(address _receiver, uint256 _tokenId) internal {\r\n        // it will throw if transfer fails\r\n        nonFungibleContract.transfer(_receiver, _tokenId);\r\n    }\r\n\r\n    /// @dev Adds an auction to the list of open auctions. Also fires the\r\n    ///  AuctionCreated event.\r\n    /// @param _tokenId The ID of the token to be put on auction.\r\n    /// @param _auction Auction to add.\r\n    function _addAuction(uint256 _tokenId, Auction _auction) internal {\r\n        // Require that all auctions have a duration of\r\n        // at least one minute. (Keeps our math from getting hairy!)\r\n        require(_auction.duration >= 1 minutes);\r\n\r\n        tokenIdToAuction[_tokenId] = _auction;\r\n\r\n        AuctionCreated(\r\n            uint256(_tokenId),\r\n            uint256(_auction.startingPrice),\r\n            uint256(_auction.endingPrice),\r\n            uint256(_auction.duration)\r\n        );\r\n    }\r\n\r\n    /// @dev Cancels an auction unconditionally.\r\n    function _cancelAuction(uint256 _tokenId, address _seller) internal {\r\n        _removeAuction(_tokenId);\r\n        _transfer(_seller, _tokenId);\r\n        AuctionCancelled(_tokenId);\r\n    }\r\n\r\n    /// @dev Computes the price and transfers winnings.\r\n    /// Does NOT transfer ownership of token.\r\n    function _bid(uint256 _tokenId, uint256 _bidAmount)\r\n    internal\r\n    returns (uint256)\r\n    {\r\n        // Get a reference to the auction struct\r\n        Auction storage auction = tokenIdToAuction[_tokenId];\r\n\r\n        // Explicitly check that this auction is currently live.\r\n        // (Because of how Ethereum mappings work, we can't just count\r\n        // on the lookup above failing. An invalid _tokenId will just\r\n        // return an auction object that is all zeros.)\r\n        require(_isOnAuction(auction));\r\n\r\n        // Check that the bid is greater than or equal to the current price\r\n        uint256 price = _currentPrice(auction);\r\n        require(_bidAmount >= price);\r\n\r\n        // Grab a reference to the seller before the auction struct\r\n        // gets deleted.\r\n        address seller = auction.seller;\r\n\r\n        // The bid is good! Remove the auction before sending the fees\r\n        // to the sender so we can't have a reentrancy attack.\r\n        _removeAuction(_tokenId);\r\n\r\n        // Transfer proceeds to seller (if there are any!)\r\n        if (price > 0) {\r\n            // Calculate the auctioneer's cut.\r\n            // (NOTE: _computeCut() is guaranteed to return a\r\n            // value <= price, so this subtraction can't go negative.)\r\n            uint256 auctioneerCut = _computeCut(price);\r\n            uint256 sellerProceeds = price - auctioneerCut;\r\n\r\n            // NOTE: Doing a transfer() in the middle of a complex\r\n            // method like this is generally discouraged because of\r\n            // reentrancy attacks and DoS attacks if the seller is\r\n            // a contract with an invalid fallback function. We explicitly\r\n            // guard against reentrancy attacks by removing the auction\r\n            // before calling transfer(), and the only thing the seller\r\n            // can DoS is the sale of their own asset! (And if it's an\r\n            // accident, they can call cancelAuction(). )\r\n            seller.transfer(sellerProceeds);\r\n        }\r\n\r\n        // Calculate any excess funds included with the bid. If the excess\r\n        // is anything worth worrying about, transfer it back to bidder.\r\n        // NOTE: We checked above that the bid amount is greater than or\r\n        // equal to the price so this cannot underflow.\r\n        uint256 bidExcess = _bidAmount - price;\r\n\r\n        // Return the funds. Similar to the previous transfer, this is\r\n        // not susceptible to a re-entry attack because the auction is\r\n        // removed before any transfers occur.\r\n        msg.sender.transfer(bidExcess);\r\n\r\n        // Tell the world!\r\n        AuctionSuccessful(_tokenId, price, msg.sender);\r\n\r\n        return price;\r\n    }\r\n\r\n    /// @dev Removes an auction from the list of open auctions.\r\n    /// @param _tokenId - ID of NFT on auction.\r\n    function _removeAuction(uint256 _tokenId) internal {\r\n        delete tokenIdToAuction[_tokenId];\r\n    }\r\n\r\n    /// @dev Returns true if the NFT is on auction.\r\n    /// @param _auction - Auction to check.\r\n    function _isOnAuction(Auction storage _auction) internal view returns (bool) {\r\n        return (_auction.startedAt > 0);\r\n    }\r\n\r\n    /// @dev Returns current price of an NFT on auction. Broken into two\r\n    ///  functions (this one, that computes the duration from the auction\r\n    ///  structure, and the other that does the price computation) so we\r\n    ///  can easily test that the price computation works correctly.\r\n    function _currentPrice(Auction storage _auction)\r\n    internal\r\n    view\r\n    returns (uint256)\r\n    {\r\n        uint256 secondsPassed = 0;\r\n\r\n        // A bit of insurance against negative values (or wraparound).\r\n        // Probably not necessary (since Ethereum guarnatees that the\r\n        // now variable doesn't ever go backwards).\r\n        if (now > _auction.startedAt) {\r\n            secondsPassed = now - _auction.startedAt;\r\n        }\r\n\r\n        return _computeCurrentPrice(\r\n            _auction.startingPrice,\r\n            _auction.endingPrice,\r\n            _auction.duration,\r\n            secondsPassed\r\n        );\r\n    }\r\n\r\n    /// @dev Computes the current price of an auction. Factored out\r\n    ///  from _currentPrice so we can run extensive unit tests.\r\n    ///  When testing, make this function public and turn on\r\n    ///  `Current price computation` test suite.\r\n    function _computeCurrentPrice(\r\n        uint256 _startingPrice,\r\n        uint256 _endingPrice,\r\n        uint256 _duration,\r\n        uint256 _secondsPassed\r\n    )\r\n    internal\r\n    pure\r\n    returns (uint256)\r\n    {\r\n        // NOTE: We don't use SafeMath (or similar) in this function because\r\n        //  all of our public functions carefully cap the maximum values for\r\n        //  time (at 64-bits) and currency (at 128-bits). _duration is\r\n        //  also known to be non-zero (see the require() statement in\r\n        //  _addAuction())\r\n        if (_secondsPassed >= _duration) {\r\n            // We've reached the end of the dynamic pricing portion\r\n            // of the auction, just return the end price.\r\n            return _endingPrice;\r\n        } else {\r\n            // Starting price can be higher than ending price (and often is!), so\r\n            // this delta can be negative.\r\n            int256 totalPriceChange = int256(_endingPrice) - int256(_startingPrice);\r\n\r\n            // This multiplication can't overflow, _secondsPassed will easily fit within\r\n            // 64-bits, and totalPriceChange will easily fit within 128-bits, their product\r\n            // will always fit within 256-bits.\r\n            int256 currentPriceChange = totalPriceChange * int256(_secondsPassed) / int256(_duration);\r\n\r\n            // currentPriceChange can be negative, but if so, will have a magnitude\r\n            // less that _startingPrice. Thus, this result will always end up positive.\r\n            int256 currentPrice = int256(_startingPrice) + currentPriceChange;\r\n\r\n            return uint256(currentPrice);\r\n        }\r\n    }\r\n\r\n    /// @dev Computes owner's cut of a sale.\r\n    /// @param _price - Sale price of NFT.\r\n    function _computeCut(uint256 _price) internal view returns (uint256) {\r\n        // NOTE: We don't use SafeMath (or similar) in this function because\r\n        //  all of our entry functions carefully cap the maximum values for\r\n        //  currency (at 128-bits), and ownerCut <= 10000 (see the require()\r\n        //  statement in the ClockAuction constructor). The result of this\r\n        //  function is always guaranteed to be <= _price.\r\n        return _price * ownerCut / 10000;\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n/// @title Clock auction for non-fungible tokens.\r\n/// @notice We omit a fallback function to prevent accidental sends to this contract.\r\ncontract ClockAuction is Pausable, ClockAuctionBase {\r\n\r\n    /// @dev The ERC-165 interface signature for ERC-721.\r\n    ///  Ref: https://github.com/ethereum/EIPs/issues/165\r\n    ///  Ref: https://github.com/ethereum/EIPs/issues/721\r\n    bytes4 constant InterfaceSignature_ERC721 = bytes4(0x9a20483d);\r\n\r\n    /// @dev Constructor creates a reference to the NFT ownership contract\r\n    ///  and verifies the owner cut is in the valid range.\r\n    /// @param _nftAddress - address of a deployed contract implementing\r\n    ///  the Nonfungible Interface.\r\n    /// @param _cut - percent cut the owner takes on each auction, must be\r\n    ///  between 0-10,000.\r\n    function ClockAuction(address _nftAddress, uint256 _cut) public {\r\n        require(_cut <= 10000);\r\n        ownerCut = _cut;\r\n\r\n        ERC721 candidateContract = ERC721(_nftAddress);\r\n        require(candidateContract.supportsInterface(InterfaceSignature_ERC721));\r\n        nonFungibleContract = candidateContract;\r\n    }\r\n\r\n    /// @dev Remove all Ether from the contract, which is the owner's cuts\r\n    ///  as well as any Ether sent directly to the contract address.\r\n    ///  Always transfers to the NFT contract, but can be called either by\r\n    ///  the owner or the NFT contract.\r\n    function withdrawBalance() external {\r\n        address nftAddress = address(nonFungibleContract);\r\n\r\n        require(\r\n            msg.sender == owner ||\r\n            msg.sender == nftAddress\r\n        );\r\n        // We are using this boolean method to make sure that even if one fails it will still work\r\n        nftAddress.transfer(this.balance);\r\n    }\r\n\r\n    /// @dev Creates and begins a new auction.\r\n    /// @param _tokenId - ID of token to auction, sender must be owner.\r\n    /// @param _startingPrice - Price of item (in wei) at beginning of auction.\r\n    /// @param _endingPrice - Price of item (in wei) at end of auction.\r\n    /// @param _duration - Length of time to move between starting\r\n    ///  price and ending price (in seconds).\r\n    /// @param _seller - Seller, if not the message sender\r\n    function createAuction(\r\n        uint256 _tokenId,\r\n        uint256 _startingPrice,\r\n        uint256 _endingPrice,\r\n        uint256 _duration,\r\n        address _seller\r\n    )\r\n    external\r\n    whenNotPaused\r\n    {\r\n        // Sanity check that no inputs overflow how many bits we've allocated\r\n        // to store them in the auction struct.\r\n        require(_startingPrice == uint256(uint128(_startingPrice)));\r\n        require(_endingPrice == uint256(uint128(_endingPrice)));\r\n        require(_duration == uint256(uint64(_duration)));\r\n\r\n        require(_owns(msg.sender, _tokenId));\r\n        _escrow(msg.sender, _tokenId);\r\n        Auction memory auction = Auction(\r\n            _seller,\r\n            uint128(_startingPrice),\r\n            uint128(_endingPrice),\r\n            uint64(_duration),\r\n            uint64(now)\r\n        );\r\n        _addAuction(_tokenId, auction);\r\n    }\r\n\r\n    /// @dev Bids on an open auction, completing the auction and transferring\r\n    ///  ownership of the NFT if enough Ether is supplied.\r\n    /// @param _tokenId - ID of token to bid on.\r\n    function bid(uint256 _tokenId)\r\n    external\r\n    payable\r\n    whenNotPaused\r\n    {\r\n        // _bid will throw if the bid or funds transfer fails\r\n        _bid(_tokenId, msg.value);\r\n        _transfer(msg.sender, _tokenId);\r\n    }\r\n\r\n    /// @dev Cancels an auction that hasn't been won yet.\r\n    ///  Returns the NFT to original owner.\r\n    /// @notice This is a state-modifying function that can\r\n    ///  be called while the contract is paused.\r\n    /// @param _tokenId - ID of token on auction\r\n    function cancelAuction(uint256 _tokenId)\r\n    external\r\n    {\r\n        Auction storage auction = tokenIdToAuction[_tokenId];\r\n        require(_isOnAuction(auction));\r\n        address seller = auction.seller;\r\n        require(msg.sender == seller);\r\n        _cancelAuction(_tokenId, seller);\r\n    }\r\n\r\n    /// @dev Cancels an auction when the contract is paused.\r\n    ///  Only the owner may do this, and NFTs are returned to\r\n    ///  the seller. This should only be used in emergencies.\r\n    /// @param _tokenId - ID of the NFT on auction to cancel.\r\n    function cancelAuctionWhenPaused(uint256 _tokenId)\r\n    whenPaused\r\n    onlyOwner\r\n    external\r\n    {\r\n        Auction storage auction = tokenIdToAuction[_tokenId];\r\n        require(_isOnAuction(auction));\r\n        _cancelAuction(_tokenId, auction.seller);\r\n    }\r\n\r\n    /// @dev Returns auction info for an NFT on auction.\r\n    /// @param _tokenId - ID of NFT on auction.\r\n    function getAuction(uint256 _tokenId)\r\n    external\r\n    view\r\n    returns\r\n    (\r\n        address seller,\r\n        uint256 startingPrice,\r\n        uint256 endingPrice,\r\n        uint256 duration,\r\n        uint256 startedAt\r\n    ) {\r\n        Auction storage auction = tokenIdToAuction[_tokenId];\r\n        require(_isOnAuction(auction));\r\n        return (\r\n        auction.seller,\r\n        auction.startingPrice,\r\n        auction.endingPrice,\r\n        auction.duration,\r\n        auction.startedAt\r\n        );\r\n    }\r\n\r\n    /// @dev Returns the current price of an auction.\r\n    /// @param _tokenId - ID of the token price we are checking.\r\n    function getCurrentPrice(uint256 _tokenId)\r\n    external\r\n    view\r\n    returns (uint256)\r\n    {\r\n        Auction storage auction = tokenIdToAuction[_tokenId];\r\n        require(_isOnAuction(auction));\r\n        return _currentPrice(auction);\r\n    }\r\n\r\n}\r\n\r\n//\r\ncontract GeneScience {\r\n\r\n    uint64 _seed = 0;\r\n\r\n    /// @dev simply a boolean to indicate this is the contract we expect to be\r\n    /// pure means \"they promise not to read from or modify the state.\"\r\n    function isGeneScience() public pure returns (bool) {\r\n        return true;\r\n    }\r\n\r\n    // return a pseudo random number between lower and upper bounds\r\n    // given the number of previous blocks it should hash.\r\n    function random(uint64 upper) internal returns (uint64) {\r\n        _seed = uint64(keccak256(keccak256(block.blockhash(block.number), _seed), now));\r\n        return _seed % upper;\r\n    }\r\n\r\n    function randomBetween(uint32 a, uint32 b) internal returns (uint32) {\r\n        uint32 min;\r\n        uint32 max;\r\n        if(a < b) {\r\n            min = a;\r\n            max = b;\r\n        } else {\r\n            min = b;\r\n            max = a;\r\n        }\r\n\r\n        return min + uint32(random(max - min + 1));\r\n    }\r\n\r\n    function randomCode() internal returns (uint8) {\r\n        //\r\n        uint64 r = random(1000000);\r\n\r\n        if (r <= 163) return 151;\r\n        if (r <= 327) return 251;\r\n        if (r <= 490) return 196;\r\n        if (r <= 654) return 197;\r\n        if (r <= 817) return 238;\r\n        if (r <= 981) return 240;\r\n        if (r <= 1144) return 239;\r\n        if (r <= 1308) return 173;\r\n        if (r <= 1471) return 175;\r\n        if (r <= 1635) return 174;\r\n        if (r <= 1798) return 236;\r\n        if (r <= 1962) return 172;\r\n        if (r <= 2289) return 250;\r\n        if (r <= 2616) return 249;\r\n        if (r <= 2943) return 244;\r\n        if (r <= 3270) return 243;\r\n        if (r <= 3597) return 245;\r\n        if (r <= 4087) return 145;\r\n        if (r <= 4577) return 146;\r\n        if (r <= 5068) return 144;\r\n        if (r <= 5885) return 248;\r\n        if (r <= 6703) return 149;\r\n        if (r <= 7520) return 143;\r\n        if (r <= 8337) return 112;\r\n        if (r <= 9155) return 242;\r\n        if (r <= 9972) return 212;\r\n        if (r <= 10790) return 160;\r\n        if (r <= 11607) return 6;\r\n        if (r <= 12424) return 157;\r\n        if (r <= 13242) return 131;\r\n        if (r <= 14059) return 3;\r\n        if (r <= 14877) return 233;\r\n        if (r <= 15694) return 9;\r\n        if (r <= 16511) return 154;\r\n        if (r <= 17329) return 182;\r\n        if (r <= 18146) return 176;\r\n        if (r <= 19127) return 150;\r\n        if (r <= 20762) return 130;\r\n        if (r <= 22397) return 68;\r\n        if (r <= 24031) return 65;\r\n        if (r <= 25666) return 59;\r\n        if (r <= 27301) return 94;\r\n        if (r <= 28936) return 199;\r\n        if (r <= 30571) return 169;\r\n        if (r <= 32205) return 208;\r\n        if (r <= 33840) return 230;\r\n        if (r <= 35475) return 186;\r\n        if (r <= 37110) return 36;\r\n        if (r <= 38744) return 38;\r\n        if (r <= 40379) return 192;\r\n        if (r <= 42014) return 26;\r\n        if (r <= 43649) return 237;\r\n        if (r <= 45284) return 148;\r\n        if (r <= 46918) return 247;\r\n        if (r <= 48553) return 2;\r\n        if (r <= 50188) return 5;\r\n        if (r <= 51823) return 8;\r\n        if (r <= 53785) return 134;\r\n        if (r <= 55746) return 232;\r\n        if (r <= 57708) return 76;\r\n        if (r <= 59670) return 136;\r\n        if (r <= 61632) return 135;\r\n        if (r <= 63593) return 181;\r\n        if (r <= 65555) return 62;\r\n        if (r <= 67517) return 34;\r\n        if (r <= 69479) return 31;\r\n        if (r <= 71440) return 221;\r\n        if (r <= 73402) return 71;\r\n        if (r <= 75364) return 185;\r\n        if (r <= 77325) return 18;\r\n        if (r <= 79287) return 15;\r\n        if (r <= 81249) return 12;\r\n        if (r <= 83211) return 159;\r\n        if (r <= 85172) return 189;\r\n        if (r <= 87134) return 219;\r\n        if (r <= 89096) return 156;\r\n        if (r <= 91058) return 153;\r\n        if (r <= 93510) return 217;\r\n        if (r <= 95962) return 139;\r\n        if (r <= 98414) return 229;\r\n        if (r <= 100866) return 141;\r\n        if (r <= 103319) return 210;\r\n        if (r <= 105771) return 45;\r\n        if (r <= 108223) return 205;\r\n        if (r <= 110675) return 78;\r\n        if (r <= 113127) return 224;\r\n        if (r <= 115580) return 171;\r\n        if (r <= 118032) return 164;\r\n        if (r <= 120484) return 178;\r\n        if (r <= 122936) return 195;\r\n        if (r <= 125388) return 105;\r\n        if (r <= 127840) return 162;\r\n        if (r <= 130293) return 168;\r\n        if (r <= 132745) return 184;\r\n        if (r <= 135197) return 166;\r\n        if (r <= 138467) return 103;\r\n        if (r <= 141736) return 89;\r\n        if (r <= 145006) return 99;\r\n        if (r <= 148275) return 142;\r\n        if (r <= 151545) return 80;\r\n        if (r <= 154814) return 91;\r\n        if (r <= 158084) return 115;\r\n        if (r <= 161354) return 106;\r\n        if (r <= 164623) return 73;\r\n        if (r <= 167893) return 28;\r\n        if (r <= 171162) return 241;\r\n        if (r <= 174432) return 121;\r\n        if (r <= 177701) return 55;\r\n        if (r <= 180971) return 126;\r\n        if (r <= 184241) return 82;\r\n        if (r <= 187510) return 125;\r\n        if (r <= 190780) return 110;\r\n        if (r <= 194049) return 85;\r\n        if (r <= 197319) return 57;\r\n        if (r <= 200589) return 107;\r\n        if (r <= 203858) return 97;\r\n        if (r <= 207128) return 119;\r\n        if (r <= 210397) return 227;\r\n        if (r <= 213667) return 117;\r\n        if (r <= 216936) return 49;\r\n        if (r <= 220206) return 40;\r\n        if (r <= 223476) return 101;\r\n        if (r <= 226745) return 87;\r\n        if (r <= 230015) return 215;\r\n        if (r <= 233284) return 42;\r\n        if (r <= 236554) return 22;\r\n        if (r <= 239823) return 207;\r\n        if (r <= 243093) return 24;\r\n        if (r <= 246363) return 93;\r\n        if (r <= 249632) return 47;\r\n        if (r <= 252902) return 20;\r\n        if (r <= 256171) return 53;\r\n        if (r <= 259441) return 113;\r\n        if (r <= 262710) return 198;\r\n        if (r <= 265980) return 51;\r\n        if (r <= 269250) return 108;\r\n        if (r <= 272519) return 190;\r\n        if (r <= 275789) return 158;\r\n        if (r <= 279058) return 95;\r\n        if (r <= 282328) return 1;\r\n        if (r <= 285598) return 225;\r\n        if (r <= 288867) return 4;\r\n        if (r <= 292137) return 155;\r\n        if (r <= 295406) return 7;\r\n        if (r <= 298676) return 152;\r\n        if (r <= 301945) return 25;\r\n        if (r <= 305215) return 132;\r\n        if (r <= 309302) return 67;\r\n        if (r <= 313389) return 64;\r\n        if (r <= 317476) return 75;\r\n        if (r <= 321563) return 70;\r\n        if (r <= 325650) return 180;\r\n        if (r <= 329737) return 61;\r\n        if (r <= 333824) return 33;\r\n        if (r <= 337911) return 30;\r\n        if (r <= 341998) return 17;\r\n        if (r <= 346085) return 202;\r\n        if (r <= 350172) return 188;\r\n        if (r <= 354259) return 11;\r\n        if (r <= 358346) return 14;\r\n        if (r <= 362433) return 235;\r\n        if (r <= 367337) return 214;\r\n        if (r <= 372241) return 127;\r\n        if (r <= 377146) return 124;\r\n        if (r <= 382050) return 128;\r\n        if (r <= 386954) return 123;\r\n        if (r <= 391859) return 226;\r\n        if (r <= 396763) return 234;\r\n        if (r <= 401667) return 122;\r\n        if (r <= 406572) return 211;\r\n        if (r <= 411476) return 203;\r\n        if (r <= 416381) return 200;\r\n        if (r <= 421285) return 206;\r\n        if (r <= 426189) return 44;\r\n        if (r <= 431094) return 193;\r\n        if (r <= 435998) return 222;\r\n        if (r <= 440902) return 58;\r\n        if (r <= 445807) return 83;\r\n        if (r <= 450711) return 35;\r\n        if (r <= 455615) return 201;\r\n        if (r <= 460520) return 37;\r\n        if (r <= 465424) return 218;\r\n        if (r <= 470329) return 220;\r\n        if (r <= 475233) return 213;\r\n        if (r <= 481772) return 114;\r\n        if (r <= 488311) return 137;\r\n        if (r <= 494850) return 77;\r\n        if (r <= 501390) return 138;\r\n        if (r <= 507929) return 140;\r\n        if (r <= 514468) return 209;\r\n        if (r <= 521007) return 228;\r\n        if (r <= 527546) return 170;\r\n        if (r <= 534085) return 204;\r\n        if (r <= 540624) return 92;\r\n        if (r <= 547164) return 133;\r\n        if (r <= 553703) return 104;\r\n        if (r <= 560242) return 177;\r\n        if (r <= 566781) return 246;\r\n        if (r <= 573320) return 147;\r\n        if (r <= 579859) return 46;\r\n        if (r <= 586399) return 194;\r\n        if (r <= 594573) return 111;\r\n        if (r <= 602746) return 98;\r\n        if (r <= 610920) return 88;\r\n        if (r <= 619094) return 79;\r\n        if (r <= 627268) return 66;\r\n        if (r <= 635442) return 27;\r\n        if (r <= 643616) return 74;\r\n        if (r <= 651790) return 216;\r\n        if (r <= 659964) return 231;\r\n        if (r <= 668138) return 63;\r\n        if (r <= 676312) return 102;\r\n        if (r <= 684486) return 109;\r\n        if (r <= 692660) return 81;\r\n        if (r <= 700834) return 84;\r\n        if (r <= 709008) return 118;\r\n        if (r <= 717182) return 56;\r\n        if (r <= 725356) return 96;\r\n        if (r <= 733530) return 54;\r\n        if (r <= 741703) return 90;\r\n        if (r <= 749877) return 72;\r\n        if (r <= 758051) return 120;\r\n        if (r <= 766225) return 116;\r\n        if (r <= 774399) return 69;\r\n        if (r <= 782573) return 48;\r\n        if (r <= 790747) return 86;\r\n        if (r <= 798921) return 179;\r\n        if (r <= 807095) return 100;\r\n        if (r <= 815269) return 23;\r\n        if (r <= 823443) return 223;\r\n        if (r <= 831617) return 32;\r\n        if (r <= 839791) return 29;\r\n        if (r <= 847965) return 39;\r\n        if (r <= 856139) return 60;\r\n        if (r <= 864313) return 167;\r\n        if (r <= 872487) return 21;\r\n        if (r <= 880660) return 165;\r\n        if (r <= 888834) return 163;\r\n        if (r <= 897008) return 52;\r\n        if (r <= 905182) return 19;\r\n        if (r <= 913356) return 16;\r\n        if (r <= 921530) return 41;\r\n        if (r <= 929704) return 161;\r\n        if (r <= 937878) return 187;\r\n        if (r <= 946052) return 50;\r\n        if (r <= 954226) return 183;\r\n        if (r <= 962400) return 13;\r\n        if (r <= 970574) return 10;\r\n        if (r <= 978748) return 191;\r\n        if (r <= 988556) return 43;\r\n        if (r <= 1000000) return 129;\r\n\r\n        return 129;\r\n    }\r\n\r\n    function getBaseStats(uint8 id) public pure returns (uint32 ra, uint32 rd, uint32 rs) {\r\n        if (id == 151) return (210, 210, 200);\r\n        if (id == 251) return (210, 210, 200);\r\n        if (id == 196) return (261, 194, 130);\r\n        if (id == 197) return (126, 250, 190);\r\n        if (id == 238) return (153, 116, 90);\r\n        if (id == 240) return (151, 108, 90);\r\n        if (id == 239) return (135, 110, 90);\r\n        if (id == 173) return (75, 91, 100);\r\n        if (id == 175) return (67, 116, 70);\r\n        if (id == 174) return (69, 34, 180);\r\n        if (id == 236) return (64, 64, 70);\r\n        if (id == 172) return (77, 63, 40);\r\n        if (id == 250) return (239, 274, 193);\r\n        if (id == 249) return (193, 323, 212);\r\n        if (id == 244) return (235, 176, 230);\r\n        if (id == 243) return (241, 210, 180);\r\n        if (id == 245) return (180, 235, 200);\r\n        if (id == 145) return (253, 188, 180);\r\n        if (id == 146) return (251, 184, 180);\r\n        if (id == 144) return (192, 249, 180);\r\n        if (id == 248) return (251, 212, 200);\r\n        if (id == 149) return (263, 201, 182);\r\n        if (id == 143) return (190, 190, 320);\r\n        if (id == 112) return (222, 206, 210);\r\n        if (id == 242) return (129, 229, 510);\r\n        if (id == 212) return (236, 191, 140);\r\n        if (id == 160) return (205, 197, 170);\r\n        if (id == 6) return (223, 176, 156);\r\n        if (id == 157) return (223, 176, 156);\r\n        if (id == 131) return (165, 180, 260);\r\n        if (id == 3) return (198, 198, 160);\r\n        if (id == 233) return (198, 183, 170);\r\n        if (id == 9) return (171, 210, 158);\r\n        if (id == 154) return (168, 202, 160);\r\n        if (id == 182) return (169, 189, 150);\r\n        if (id == 176) return (139, 191, 110);\r\n        if (id == 150) return (300, 182, 193);\r\n        if (id == 130) return (237, 197, 190);\r\n        if (id == 68) return (234, 162, 180);\r\n        if (id == 65) return (271, 194, 110);\r\n        if (id == 59) return (227, 166, 180);\r\n        if (id == 94) return (261, 156, 120);\r\n        if (id == 199) return (177, 194, 190);\r\n        if (id == 169) return (194, 178, 170);\r\n        if (id == 208) return (148, 333, 150);\r\n        if (id == 230) return (194, 194, 150);\r\n        if (id == 186) return (174, 192, 180);\r\n        if (id == 36) return (178, 171, 190);\r\n        if (id == 38) return (169, 204, 146);\r\n        if (id == 192) return (185, 148, 150);\r\n        if (id == 26) return (193, 165, 120);\r\n        if (id == 237) return (173, 214, 100);\r\n        if (id == 148) return (163, 138, 122);\r\n        if (id == 247) return (155, 133, 140);\r\n        if (id == 2) return (151, 151, 120);\r\n        if (id == 5) return (158, 129, 116);\r\n        if (id == 8) return (126, 155, 118);\r\n        if (id == 134) return (205, 177, 260);\r\n        if (id == 232) return (214, 214, 180);\r\n        if (id == 76) return (211, 229, 160);\r\n        if (id == 136) return (246, 204, 130);\r\n        if (id == 135) return (232, 201, 130);\r\n        if (id == 181) return (211, 172, 180);\r\n        if (id == 62) return (182, 187, 180);\r\n        if (id == 34) return (204, 157, 162);\r\n        if (id == 31) return (180, 174, 180);\r\n        if (id == 221) return (181, 147, 200);\r\n        if (id == 71) return (207, 138, 160);\r\n        if (id == 185) return (167, 198, 140);\r\n        if (id == 18) return (166, 157, 166);\r\n        if (id == 15) return (169, 150, 130);\r\n        if (id == 12) return (167, 151, 120);\r\n        if (id == 159) return (150, 151, 130);\r\n        if (id == 189) return (118, 197, 150);\r\n        if (id == 219) return (139, 209, 100);\r\n        if (id == 156) return (158, 129, 116);\r\n        if (id == 153) return (122, 155, 120);\r\n        if (id == 217) return (236, 144, 180);\r\n        if (id == 139) return (207, 227, 140);\r\n        if (id == 229) return (224, 159, 150);\r\n        if (id == 141) return (220, 203, 120);\r\n        if (id == 210) return (212, 137, 180);\r\n        if (id == 45) return (202, 170, 150);\r\n        if (id == 205) return (161, 242, 150);\r\n        if (id == 78) return (207, 167, 130);\r\n        if (id == 224) return (197, 141, 150);\r\n        if (id == 171) return (146, 146, 250);\r\n        if (id == 164) return (145, 179, 200);\r\n        if (id == 178) return (192, 146, 130);\r\n        if (id == 195) return (152, 152, 190);\r\n        if (id == 105) return (144, 200, 120);\r\n        if (id == 162) return (148, 130, 170);\r\n        if (id == 168) return (161, 128, 140);\r\n        if (id == 184) return (112, 152, 200);\r\n        if (id == 166) return (107, 209, 110);\r\n        if (id == 103) return (233, 158, 190);\r\n        if (id == 89) return (190, 184, 210);\r\n        if (id == 99) return (240, 214, 110);\r\n        if (id == 142) return (221, 164, 160);\r\n        if (id == 80) return (177, 194, 190);\r\n        if (id == 91) return (186, 323, 100);\r\n        if (id == 115) return (181, 165, 210);\r\n        if (id == 106) return (224, 211, 100);\r\n        if (id == 73) return (166, 237, 160);\r\n        if (id == 28) return (182, 202, 150);\r\n        if (id == 241) return (157, 211, 190);\r\n        if (id == 121) return (210, 184, 120);\r\n        if (id == 55) return (191, 163, 160);\r\n        if (id == 126) return (206, 169, 130);\r\n        if (id == 82) return (223, 182, 100);\r\n        if (id == 125) return (198, 173, 130);\r\n        if (id == 110) return (174, 221, 130);\r\n        if (id == 85) return (218, 145, 120);\r\n        if (id == 57) return (207, 144, 130);\r\n        if (id == 107) return (193, 212, 100);\r\n        if (id == 97) return (144, 215, 170);\r\n        if (id == 119) return (175, 154, 160);\r\n        if (id == 227) return (148, 260, 130);\r\n        if (id == 117) return (187, 182, 110);\r\n        if (id == 49) return (179, 150, 140);\r\n        if (id == 40) return (156, 93, 280);\r\n        if (id == 101) return (173, 179, 120);\r\n        if (id == 87) return (139, 184, 180);\r\n        if (id == 215) return (189, 157, 110);\r\n        if (id == 42) return (161, 153, 150);\r\n        if (id == 22) return (182, 135, 130);\r\n        if (id == 207) return (143, 204, 130);\r\n        if (id == 24) return (167, 158, 120);\r\n        if (id == 93) return (223, 112, 90);\r\n        if (id == 47) return (165, 146, 120);\r\n        if (id == 20) return (161, 144, 110);\r\n        if (id == 53) return (150, 139, 130);\r\n        if (id == 113) return (60, 176, 500);\r\n        if (id == 198) return (175, 87, 120);\r\n        if (id == 51) return (167, 147, 70);\r\n        if (id == 108) return (108, 137, 180);\r\n        if (id == 190) return (136, 112, 110);\r\n        if (id == 158) return (117, 116, 100);\r\n        if (id == 95) return (85, 288, 70);\r\n        if (id == 1) return (118, 118, 90);\r\n        if (id == 225) return (128, 90, 90);\r\n        if (id == 4) return (116, 96, 78);\r\n        if (id == 155) return (116, 96, 78);\r\n        if (id == 7) return (94, 122, 88);\r\n        if (id == 152) return (92, 122, 90);\r\n        if (id == 25) return (112, 101, 70);\r\n        if (id == 132) return (91, 91, 96);\r\n        if (id == 67) return (177, 130, 160);\r\n        if (id == 64) return (232, 138, 80);\r\n        if (id == 75) return (164, 196, 110);\r\n        if (id == 70) return (172, 95, 130);\r\n        if (id == 180) return (145, 112, 140);\r\n        if (id == 61) return (130, 130, 130);\r\n        if (id == 33) return (137, 112, 122);\r\n        if (id == 30) return (117, 126, 140);\r\n        if (id == 17) return (117, 108, 126);\r\n        if (id == 202) return (60, 106, 380);\r\n        if (id == 188) return (91, 127, 110);\r\n        if (id == 11) return (45, 94, 100);\r\n        if (id == 14) return (46, 86, 90);\r\n        if (id == 235) return (40, 88, 110);\r\n        if (id == 214) return (234, 189, 160);\r\n        if (id == 127) return (238, 197, 130);\r\n        if (id == 124) return (223, 182, 130);\r\n        if (id == 128) return (198, 197, 150);\r\n        if (id == 123) return (218, 170, 140);\r\n        if (id == 226) return (148, 260, 130);\r\n        if (id == 234) return (192, 132, 146);\r\n        if (id == 122) return (192, 233, 80);\r\n        if (id == 211) return (184, 148, 130);\r\n        if (id == 203) return (182, 133, 140);\r\n        if (id == 200) return (167, 167, 120);\r\n        if (id == 206) return (131, 131, 200);\r\n        if (id == 44) return (153, 139, 120);\r\n        if (id == 193) return (154, 94, 130);\r\n        if (id == 222) return (118, 156, 110);\r\n        if (id == 58) return (136, 96, 110);\r\n        if (id == 83) return (124, 118, 104);\r\n        if (id == 35) return (107, 116, 140);\r\n        if (id == 201) return (136, 91, 96);\r\n        if (id == 37) return (96, 122, 76);\r\n        if (id == 218) return (118, 71, 80);\r\n        if (id == 220) return (90, 74, 100);\r\n        if (id == 213) return (17, 396, 40);\r\n        if (id == 114) return (183, 205, 130);\r\n        if (id == 137) return (153, 139, 130);\r\n        if (id == 77) return (170, 132, 100);\r\n        if (id == 138) return (155, 174, 70);\r\n        if (id == 140) return (148, 162, 60);\r\n        if (id == 209) return (137, 89, 120);\r\n        if (id == 228) return (152, 93, 90);\r\n        if (id == 170) return (106, 106, 150);\r\n        if (id == 204) return (108, 146, 100);\r\n        if (id == 92) return (186, 70, 60);\r\n        if (id == 133) return (104, 121, 110);\r\n        if (id == 104) return (90, 165, 100);\r\n        if (id == 177) return (134, 89, 80);\r\n        if (id == 246) return (115, 93, 100);\r\n        if (id == 147) return (119, 94, 82);\r\n        if (id == 46) return (121, 99, 70);\r\n        if (id == 194) return (75, 75, 110);\r\n        if (id == 111) return (140, 157, 160);\r\n        if (id == 98) return (181, 156, 60);\r\n        if (id == 88) return (135, 90, 160);\r\n        if (id == 79) return (109, 109, 180);\r\n        if (id == 66) return (137, 88, 140);\r\n        if (id == 27) return (126, 145, 100);\r\n        if (id == 74) return (132, 163, 80);\r\n        if (id == 216) return (142, 93, 120);\r\n        if (id == 231) return (107, 107, 180);\r\n        if (id == 63) return (195, 103, 50);\r\n        if (id == 102) return (107, 140, 120);\r\n        if (id == 109) return (119, 164, 80);\r\n        if (id == 81) return (165, 128, 50);\r\n        if (id == 84) return (158, 88, 70);\r\n        if (id == 118) return (123, 115, 90);\r\n        if (id == 56) return (148, 87, 80);\r\n        if (id == 96) return (89, 158, 120);\r\n        if (id == 54) return (122, 96, 100);\r\n        if (id == 90) return (116, 168, 60);\r\n        if (id == 72) return (97, 182, 80);\r\n        if (id == 120) return (137, 112, 60);\r\n        if (id == 116) return (129, 125, 60);\r\n        if (id == 69) return (139, 64, 100);\r\n        if (id == 48) return (100, 102, 120);\r\n        if (id == 86) return (85, 128, 130);\r\n        if (id == 179) return (114, 82, 110);\r\n        if (id == 100) return (109, 114, 80);\r\n        if (id == 23) return (110, 102, 70);\r\n        if (id == 223) return (127, 69, 70);\r\n        if (id == 32) return (105, 76, 92);\r\n        if (id == 29) return (86, 94, 110);\r\n        if (id == 39) return (80, 44, 230);\r\n        if (id == 60) return (101, 82, 80);\r\n        if (id == 167) return (105, 73, 80);\r\n        if (id == 21) return (112, 61, 80);\r\n        if (id == 165) return (72, 142, 80);\r\n        if (id == 163) return (67, 101, 120);\r\n        if (id == 52) return (92, 81, 80);\r\n        if (id == 19) return (103, 70, 60);\r\n        if (id == 16) return (85, 76, 80);\r\n        if (id == 41) return (83, 76, 80);\r\n        if (id == 161) return (79, 77, 70);\r\n        if (id == 187) return (67, 101, 70);\r\n        if (id == 50) return (109, 88, 20);\r\n        if (id == 183) return (37, 93, 140);\r\n        if (id == 13) return (63, 55, 80);\r\n        if (id == 10) return (55, 62, 90);\r\n        if (id == 191) return (55, 55, 60);\r\n        if (id == 43) return (131, 116, 90);\r\n        if (id == 129) return (29, 102, 40);\r\n        return (0, 0, 0);\r\n\r\n    }\r\n\r\n    function sqrt(uint256 x) public pure returns (uint256 y) {\r\n        uint256 z = (x + 1) / 2;\r\n        y = x;\r\n        while (z < y) {\r\n            y = z;\r\n            z = (x / z + z) / 2;\r\n        }\r\n    }\r\n\r\n    function maxCP(uint256 genes, uint16 generation) public pure returns (uint32 max_cp) {\r\n        var code = uint8(genes & 0xFF);\r\n        var a = uint32((genes >> 8) & 0xFF);\r\n        var d = uint32((genes >> 16) & 0xFF);\r\n        var s = uint32((genes >> 24) & 0xFF);\r\n//      var gender = uint32((genes >> 32) & 0x1);\r\n        var bgColor = uint8((genes >> 33) & 0xFF);\r\n        var (ra, rd, rs) = getBaseStats(code);\r\n\r\n\r\n        max_cp = uint32(sqrt(uint256(ra + a) * uint256(ra + a) * uint256(rd + d) * uint256(rs + s) * 3900927938993281/10000000000000000 / 100));\r\n        if(max_cp < 10)\r\n            max_cp = 10;\r\n\r\n        if(generation < 10)\r\n            max_cp += (10 - generation) * 50;\r\n\r\n        // bgColor\r\n        if(bgColor >= 8)\r\n            bgColor = 0;\r\n\r\n        max_cp += bgColor * 25;\r\n        return max_cp;\r\n    }\r\n\r\n    function getCode(uint256 genes) pure public returns (uint8) {\r\n        return uint8(genes & 0xFF);\r\n    }\r\n\r\n    function getAttack(uint256 genes) pure public returns (uint8) {\r\n        return uint8((genes >> 8) & 0xFF);\r\n    }\r\n\r\n    function getDefense(uint256 genes) pure public returns (uint8) {\r\n        return uint8((genes >> 16) & 0xFF);\r\n    }\r\n\r\n    function getStamina(uint256 genes) pure public returns (uint8) {\r\n        return uint8((genes >> 24) & 0xFF);\r\n    }\r\n\r\n    /// @dev given genes of kitten 1 & 2, return a genetic combination - may have a random factor\r\n    /// @param genes1 genes of mom\r\n    /// @param genes2 genes of sire\r\n    /// @return the genes that are supposed to be passed down the child\r\n    function mixGenes(uint256 genes1, uint256 genes2, uint256 targetBlock) public returns (uint256) {\r\n\r\n        uint8 code;\r\n        var r = random(10);\r\n\r\n        // 20% percent of parents DNA\r\n        if(r == 0)\r\n            code = getCode(genes1);\r\n        else if(r == 1)\r\n            code = getCode(genes2);\r\n        else\r\n            code = randomCode();\r\n\r\n        // 70% percent of parents DNA\r\n        var attack = random(3) == 0 ? uint8(random(32)) : uint8(randomBetween(getAttack(genes1), getAttack(genes2)));\r\n        var defense = random(3) == 0 ? uint8(random(32)) : uint8(randomBetween(getDefense(genes1), getDefense(genes2)));\r\n        var stamina = random(3) == 0 ? uint8(random(32)) : uint8(randomBetween(getStamina(genes1), getStamina(genes2)));\r\n        var gender = uint8(random(2));\r\n        var bgColor = uint8(random(8));\r\n        var rand = random(~uint64(0));\r\n\r\n        return uint256(code) // 8\r\n        | (uint256(attack) << 8) // 8\r\n        | (uint256(defense) << 16) // 8\r\n        | (uint256(stamina) << 24) // 8\r\n        | (uint256(gender) << 32) // 1\r\n        | (uint256(bgColor) << 33) // 8\r\n        | (uint256(rand) << 41) // 64\r\n        ;\r\n    }\r\n\r\n    function randomGenes() public returns (uint256) {\r\n        var code = randomCode();\r\n        var attack = uint8(random(32));\r\n        var defense = uint8(random(32));\r\n        var stamina = uint8(random(32));\r\n        var gender = uint8(random(2));\r\n        var bgColor = uint8(random(8));\r\n        var rand = random(~uint64(0));\r\n\r\n        return uint256(code) // 8\r\n        | (uint256(attack) << 8) // 8\r\n        | (uint256(defense) << 16) // 8\r\n        | (uint256(stamina) << 24) // 8\r\n        | (uint256(gender) << 32) // 1\r\n        | (uint256(bgColor) << 33) // 8\r\n        | (uint256(rand) << 41) // 64\r\n        ;\r\n    }\r\n}\r\n\r\n/// @title Clock auction modified for sale of monsters\r\n/// @notice We omit a fallback function to prevent accidental sends to this contract.\r\ncontract SaleClockAuction is ClockAuction {\r\n\r\n    // @dev Sanity check that allows us to ensure that we are pointing to the\r\n    //  right auction in our setSaleAuctionAddress() call.\r\n    bool public isSaleClockAuction = true;\r\n\r\n    // Tracks last 5 sale price of gen0 monster sales\r\n    uint256 public gen0SaleCount;\r\n    uint256[5] public lastGen0SalePrices;\r\n\r\n    // Delegate constructor\r\n    function SaleClockAuction(address _nftAddr, uint256 _cut) public\r\n    ClockAuction(_nftAddr, _cut) {}\r\n\r\n    /// @dev Creates and begins a new auction.\r\n    /// @param _tokenId - ID of token to auction, sender must be owner.\r\n    /// @param _startingPrice - Price of item (in wei) at beginning of auction.\r\n    /// @param _endingPrice - Price of item (in wei) at end of auction.\r\n    /// @param _duration - Length of auction (in seconds).\r\n    /// @param _seller - Seller, if not the message sender\r\n    function createAuction(\r\n        uint256 _tokenId,\r\n        uint256 _startingPrice,\r\n        uint256 _endingPrice,\r\n        uint256 _duration,\r\n        address _seller\r\n    )\r\n    external\r\n    {\r\n        // Sanity check that no inputs overflow how many bits we've allocated\r\n        // to store them in the auction struct.\r\n        require(_startingPrice == uint256(uint128(_startingPrice)));\r\n        require(_endingPrice == uint256(uint128(_endingPrice)));\r\n        require(_duration == uint256(uint64(_duration)));\r\n\r\n        require(msg.sender == address(nonFungibleContract));\r\n        _escrow(_seller, _tokenId);\r\n        Auction memory auction = Auction(\r\n            _seller,\r\n            uint128(_startingPrice),\r\n            uint128(_endingPrice),\r\n            uint64(_duration),\r\n            uint64(now)\r\n        );\r\n        _addAuction(_tokenId, auction);\r\n    }\r\n\r\n    /// @dev Updates lastSalePrice if seller is the nft contract\r\n    /// Otherwise, works the same as default bid method.\r\n    function bid(uint256 _tokenId)\r\n    external\r\n    payable\r\n    {\r\n        // _bid verifies token ID size\r\n        address seller = tokenIdToAuction[_tokenId].seller;\r\n        uint256 price = _bid(_tokenId, msg.value);\r\n        _transfer(msg.sender, _tokenId);\r\n\r\n        // If not a gen0 auction, exit\r\n        if (seller == address(nonFungibleContract)) {\r\n            // Track gen0 sale prices\r\n            lastGen0SalePrices[gen0SaleCount % 5] = price;\r\n            gen0SaleCount++;\r\n        }\r\n    }\r\n\r\n    function averageGen0SalePrice() external view returns (uint256) {\r\n        uint256 sum = 0;\r\n        for (uint256 i = 0; i < 5; i++) {\r\n            sum += lastGen0SalePrices[i];\r\n        }\r\n        return sum / 5;\r\n    }\r\n\r\n}\r\n\r\n/// @title Reverse auction modified for siring\r\n/// @notice We omit a fallback function to prevent accidental sends to this contract.\r\ncontract SiringClockAuction is ClockAuction {\r\n\r\n    // @dev Sanity check that allows us to ensure that we are pointing to the\r\n    //  right auction in our setSiringAuctionAddress() call.\r\n    bool public isSiringClockAuction = true;\r\n\r\n    // Delegate constructor\r\n    function SiringClockAuction(address _nftAddr, uint256 _cut) public\r\n    ClockAuction(_nftAddr, _cut) {}\r\n\r\n    /// @dev Creates and begins a new auction. Since this function is wrapped,\r\n    /// require sender to be MonsterCore contract.\r\n    /// @param _tokenId - ID of token to auction, sender must be owner.\r\n    /// @param _startingPrice - Price of item (in wei) at beginning of auction.\r\n    /// @param _endingPrice - Price of item (in wei) at end of auction.\r\n    /// @param _duration - Length of auction (in seconds).\r\n    /// @param _seller - Seller, if not the message sender\r\n    function createAuction(\r\n        uint256 _tokenId,\r\n        uint256 _startingPrice,\r\n        uint256 _endingPrice,\r\n        uint256 _duration,\r\n        address _seller\r\n    )\r\n    external\r\n    {\r\n        // Sanity check that no inputs overflow how many bits we've allocated\r\n        // to store them in the auction struct.\r\n        require(_startingPrice == uint256(uint128(_startingPrice)));\r\n        require(_endingPrice == uint256(uint128(_endingPrice)));\r\n        require(_duration == uint256(uint64(_duration)));\r\n\r\n        require(msg.sender == address(nonFungibleContract));\r\n        _escrow(_seller, _tokenId);\r\n        Auction memory auction = Auction(\r\n            _seller,\r\n            uint128(_startingPrice),\r\n            uint128(_endingPrice),\r\n            uint64(_duration),\r\n            uint64(now)\r\n        );\r\n        _addAuction(_tokenId, auction);\r\n    }\r\n\r\n    /// @dev Places a bid for siring. Requires the sender\r\n    /// is the MonsterCore contract because all bid methods\r\n    /// should be wrapped. Also returns the monster to the\r\n    /// seller rather than the winner.\r\n    function bid(uint256 _tokenId)\r\n    external\r\n    payable\r\n    {\r\n        require(msg.sender == address(nonFungibleContract));\r\n        address seller = tokenIdToAuction[_tokenId].seller;\r\n        // _bid checks that token ID is valid and will throw if bid fails\r\n        _bid(_tokenId, msg.value);\r\n        // We transfer the monster back to the seller, the winner will get\r\n        // the offspring\r\n        _transfer(seller, _tokenId);\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n/// @title A facet of MonsterCore that manages special access privileges.\r\n/// @author Axiom Zen (https://www.axiomzen.co)\r\n/// @dev See the MonsterCore contract documentation to understand how the various contract facets are arranged.\r\ncontract MonsterAccessControl {\r\n    // This facet controls access control for CryptoMonsters. There are four roles managed here:\r\n    //\r\n    //     - The CEO: The CEO can reassign other roles and change the addresses of our dependent smart\r\n    //         contracts. It is also the only role that can unpause the smart contract. It is initially\r\n    //         set to the address that created the smart contract in the MonsterCore constructor.\r\n    //\r\n    //     - The CFO: The CFO can withdraw funds from MonsterCore and its auction contracts.\r\n    //\r\n    //     - The COO: The COO can release gen0 monsters to auction, and mint promo monsters.\r\n    //\r\n    // It should be noted that these roles are distinct without overlap in their access abilities, the\r\n    // abilities listed for each role above are exhaustive. In particular, while the CEO can assign any\r\n    // address to any role, the CEO address itself doesn't have the ability to act in those roles. This\r\n    // restriction is intentional so that we aren't tempted to use the CEO address frequently out of\r\n    // convenience. The less we use an address, the less likely it is that we somehow compromise the\r\n    // account.\r\n\r\n    /// @dev Emited when contract is upgraded - See README.md for updgrade plan\r\n    event ContractUpgrade(address newContract);\r\n\r\n    // The addresses of the accounts (or contracts) that can execute actions within each roles.\r\n    address public ceoAddress;\r\n    address public cfoAddress;\r\n    address public cooAddress;\r\n\r\n    // @dev Keeps track whether the contract is paused. When that is true, most actions are blocked\r\n    bool public paused = false;\r\n\r\n    /// @dev Access modifier for CEO-only functionality\r\n    modifier onlyCEO() {\r\n        require(msg.sender == ceoAddress);\r\n        _;\r\n    }\r\n\r\n    /// @dev Access modifier for CFO-only functionality\r\n    modifier onlyCFO() {\r\n        require(msg.sender == cfoAddress);\r\n        _;\r\n    }\r\n\r\n    /// @dev Access modifier for COO-only functionality\r\n    modifier onlyCOO() {\r\n        require(msg.sender == cooAddress);\r\n        _;\r\n    }\r\n\r\n    modifier onlyCLevel() {\r\n        require(\r\n            msg.sender == cooAddress ||\r\n            msg.sender == ceoAddress ||\r\n            msg.sender == cfoAddress\r\n        );\r\n        _;\r\n    }\r\n\r\n    /// @dev Assigns a new address to act as the CEO. Only available to the current CEO.\r\n    /// @param _newCEO The address of the new CEO\r\n    function setCEO(address _newCEO) external onlyCEO {\r\n        require(_newCEO != address(0));\r\n\r\n        ceoAddress = _newCEO;\r\n    }\r\n\r\n    /// @dev Assigns a new address to act as the CFO. Only available to the current CEO.\r\n    /// @param _newCFO The address of the new CFO\r\n    function setCFO(address _newCFO) external onlyCEO {\r\n        require(_newCFO != address(0));\r\n\r\n        cfoAddress = _newCFO;\r\n    }\r\n\r\n    /// @dev Assigns a new address to act as the COO. Only available to the current CEO.\r\n    /// @param _newCOO The address of the new COO\r\n    function setCOO(address _newCOO) external onlyCEO {\r\n        require(_newCOO != address(0));\r\n\r\n        cooAddress = _newCOO;\r\n    }\r\n\r\n    /*** Pausable functionality adapted from OpenZeppelin ***/\r\n\r\n    /// @dev Modifier to allow actions only when the contract IS NOT paused\r\n    modifier whenNotPaused() {\r\n        require(!paused);\r\n        _;\r\n    }\r\n\r\n    /// @dev Modifier to allow actions only when the contract IS paused\r\n    modifier whenPaused {\r\n        require(paused);\r\n        _;\r\n    }\r\n\r\n    /// @dev Called by any \"C-level\" role to pause the contract. Used only when\r\n    ///  a bug or exploit is detected and we need to limit damage.\r\n    function pause() external onlyCLevel whenNotPaused {\r\n        paused = true;\r\n    }\r\n\r\n    /// @dev Unpauses the smart contract. Can only be called by the CEO, since\r\n    ///  one reason we may pause the contract is when CFO or COO accounts are\r\n    ///  compromised.\r\n    /// @notice This is public rather than external so it can be called by\r\n    ///  derived contracts.\r\n    function unpause() public onlyCEO whenPaused {\r\n        // can't unpause if contract was upgraded\r\n        paused = false;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n/// @title Base contract for CryptoMonsters. Holds all common structs, events and base variables.\r\n/// @author Axiom Zen (https://www.axiomzen.co)\r\n/// @dev See the MonsterCore contract documentation to understand how the various contract facets are arranged.\r\ncontract MonsterBase is MonsterAccessControl {\r\n    /*** EVENTS ***/\r\n\r\n    /// @dev The Birth event is fired whenever a new monster comes into existence. This obviously\r\n    ///  includes any time a monster is created through the giveBirth method, but it is also called\r\n    ///  when a new gen0 monster is created.\r\n    event Birth(address owner, uint256 monsterId, uint256 matronId, uint256 sireId, uint256 genes, uint16 generation);\r\n\r\n    /// @dev Transfer event as defined in current draft of ERC721. Emitted every time a monster\r\n    ///  ownership is assigned, including births.\r\n    event Transfer(address from, address to, uint256 tokenId);\r\n\r\n    /*** DATA TYPES ***/\r\n\r\n    /// @dev The main Monster struct. Every monster in CryptoMonsters is represented by a copy\r\n    ///  of this structure, so great care was taken to ensure that it fits neatly into\r\n    ///  exactly two 256-bit words. Note that the order of the members in this structure\r\n    ///  is important because of the byte-packing rules used by Ethereum.\r\n    ///  Ref: http://solidity.readthedocs.io/en/develop/miscellaneous.html\r\n    struct Monster {\r\n        // The Monster's genetic code is packed into these 256-bits, the format is\r\n        // sooper-sekret! A monster's genes never change.\r\n        uint256 genes;\r\n\r\n        // The timestamp from the block when this monster came into existence.\r\n        uint64 birthTime;\r\n\r\n        // The minimum timestamp after which this monster can engage in breeding\r\n        // activities again. This same timestamp is used for the pregnancy\r\n        // timer (for matrons) as well as the siring cooldown.\r\n        uint64 cooldownEndBlock;\r\n\r\n        // The ID of the parents of this monster, set to 0 for gen0 monsters.\r\n        // Note that using 32-bit unsigned integers limits us to a \"mere\"\r\n        // 4 billion monsters. This number might seem small until you realize\r\n        // that Ethereum currently has a limit of about 500 million\r\n        // transactions per year! So, this definitely won't be a problem\r\n        // for several years (even as Ethereum learns to scale).\r\n        uint32 matronId;\r\n        uint32 sireId;\r\n\r\n        // Set to the ID of the sire monster for matrons that are pregnant,\r\n        // zero otherwise. A non-zero value here is how we know a monster\r\n        // is pregnant. Used to retrieve the genetic material for the new\r\n        // monster when the birth transpires.\r\n        uint32 siringWithId;\r\n\r\n        // Set to the index in the cooldown array (see below) that represents\r\n        // the current cooldown duration for this Monster. This starts at zero\r\n        // for gen0 monsters, and is initialized to floor(generation/2) for others.\r\n        // Incremented by one for each successful breeding action, regardless\r\n        // of whether this monster is acting as matron or sire.\r\n        uint16 cooldownIndex;\r\n\r\n        // The \"generation number\" of this monster. Monsters minted by the CK contract\r\n        // for sale are called \"gen0\" and have a generation number of 0. The\r\n        // generation number of all other monsters is the larger of the two generation\r\n        // numbers of their parents, plus one.\r\n        // (i.e. max(matron.generation, sire.generation) + 1)\r\n        uint16 generation;\r\n    }\r\n\r\n    /*** CONSTANTS ***/\r\n\r\n    /// @dev A lookup table indimonstering the cooldown duration after any successful\r\n    ///  breeding action, called \"pregnancy time\" for matrons and \"siring cooldown\"\r\n    ///  for sires. Designed such that the cooldown roughly doubles each time a monster\r\n    ///  is bred, encouraging owners not to just keep breeding the same monster over\r\n    ///  and over again. Caps out at one week (a monster can breed an unbounded number\r\n    ///  of times, and the maximum cooldown is always seven days).\r\n    uint32[14] public cooldowns = [\r\n    uint32(1 minutes),\r\n    uint32(2 minutes),\r\n    uint32(5 minutes),\r\n    uint32(10 minutes),\r\n    uint32(30 minutes),\r\n    uint32(1 hours),\r\n    uint32(2 hours),\r\n    uint32(4 hours),\r\n    uint32(8 hours),\r\n    uint32(16 hours),\r\n    uint32(1 days),\r\n    uint32(2 days),\r\n    uint32(4 days),\r\n    uint32(7 days)\r\n    ];\r\n\r\n    // An approximation of currently how many seconds are in between blocks.\r\n    uint256 public secondsPerBlock = 15;\r\n\r\n    /*** STORAGE ***/\r\n\r\n    /// @dev An array containing the Monster struct for all Monsters in existence. The ID\r\n    ///  of each monster is actually an index into this array. Note that ID 0 is a negamonster,\r\n    ///  the unMonster, the mythical beast that is the parent of all gen0 monsters. A bizarre\r\n    ///  creature that is both matron and sire... to itself! Has an invalid genetic code.\r\n    ///  In other words, monster ID 0 is invalid... ;-)\r\n    Monster[] monsters;\r\n\r\n    /// @dev A mapping from monster IDs to the address that owns them. All monsters have\r\n    ///  some valid owner address, even gen0 monsters are created with a non-zero owner.\r\n    mapping(uint256 => address) public monsterIndexToOwner;\r\n\r\n    // @dev A mapping from owner address to count of tokens that address owns.\r\n    //  Used internally inside balanceOf() to resolve ownership count.\r\n    mapping(address => uint256) ownershipTokenCount;\r\n\r\n    /// @dev A mapping from MonsterIDs to an address that has been approved to call\r\n    ///  transferFrom(). Each Monster can only have one approved address for transfer\r\n    ///  at any time. A zero value means no approval is outstanding.\r\n    mapping(uint256 => address) public monsterIndexToApproved;\r\n\r\n    /// @dev A mapping from MonsterIDs to an address that has been approved to use\r\n    ///  this Monster for siring via breedWith(). Each Monster can only have one approved\r\n    ///  address for siring at any time. A zero value means no approval is outstanding.\r\n    mapping(uint256 => address) public sireAllowedToAddress;\r\n\r\n    /// @dev The address of the ClockAuction contract that handles sales of Monsters. This\r\n    ///  same contract handles both peer-to-peer sales as well as the gen0 sales which are\r\n    ///  initiated every 15 minutes.\r\n    SaleClockAuction public saleAuction;\r\n\r\n    /// @dev The address of a custom ClockAuction subclassed contract that handles siring\r\n    ///  auctions. Needs to be separate from saleAuction because the actions taken on success\r\n    ///  after a sales and siring auction are quite different.\r\n    SiringClockAuction public siringAuction;\r\n\r\n    GeneScience public geneScience;\r\n\r\n    /// @dev Assigns ownership of a specific Monster to an address.\r\n    function _transfer(address _from, address _to, uint256 _tokenId) internal {\r\n        // Since the number of monsters is capped to 2^32 we can't overflow this\r\n        ownershipTokenCount[_to]++;\r\n        // transfer ownership\r\n        monsterIndexToOwner[_tokenId] = _to;\r\n\r\n        // When creating new monsters _from is 0x0, but we can't account that address.\r\n        if (_from != address(0)) {\r\n            ownershipTokenCount[_from]--;\r\n            // once the monster is transferred also clear sire allowances\r\n            delete sireAllowedToAddress[_tokenId];\r\n            // clear any previously approved ownership exchange\r\n            delete monsterIndexToApproved[_tokenId];\r\n        }\r\n        // Emit the transfer event.\r\n        Transfer(_from, _to, _tokenId);\r\n    }\r\n\r\n    /// @dev An internal method that creates a new monster and stores it. This\r\n    ///  method doesn't do any checking and should only be called when the\r\n    ///  input data is known to be valid. Will generate both a Birth event\r\n    ///  and a Transfer event.\r\n    /// @param _matronId The monster ID of the matron of this monster (zero for gen0)\r\n    /// @param _sireId The monster ID of the sire of this monster (zero for gen0)\r\n    /// @param _generation The generation number of this monster, must be computed by caller.\r\n    /// @param _genes The monster's genetic code.\r\n    /// @param _owner The inital owner of this monster, must be non-zero (except for the unMonster, ID 0)\r\n    function _createMonster(\r\n        uint256 _matronId,\r\n        uint256 _sireId,\r\n        uint256 _generation,\r\n        uint256 _genes,\r\n        address _owner\r\n    )\r\n    internal\r\n    returns (uint)\r\n    {\r\n        // These requires are not strictly necessary, our calling code should make\r\n        // sure that these conditions are never broken. However! _createMonster() is already\r\n        // an expensive call (for storage), and it doesn't hurt to be especially careful\r\n        // to ensure our data structures are always valid.\r\n        require(_matronId == uint256(uint32(_matronId)));\r\n        require(_sireId == uint256(uint32(_sireId)));\r\n        require(_generation == uint256(uint16(_generation)));\r\n\r\n        // New monster starts with the same cooldown as parent gen/2\r\n        uint16 cooldownIndex = uint16(_generation / 2);\r\n        if (cooldownIndex > 13) {\r\n            cooldownIndex = 13;\r\n        }\r\n\r\n        Monster memory _monster = Monster({\r\n            genes : _genes,\r\n            birthTime : uint64(now),\r\n            cooldownEndBlock : 0,\r\n            matronId : uint32(_matronId),\r\n            sireId : uint32(_sireId),\r\n            siringWithId : 0,\r\n            cooldownIndex : cooldownIndex,\r\n            generation : uint16(_generation)\r\n            });\r\n        uint256 newKittenId = monsters.push(_monster) - 1;\r\n\r\n        // It's probably never going to happen, 4 billion monsters is A LOT, but\r\n        // let's just be 100% sure we never let this happen.\r\n        require(newKittenId == uint256(uint32(newKittenId)));\r\n\r\n        // emit the birth event\r\n        Birth(\r\n            _owner,\r\n            newKittenId,\r\n            uint256(_monster.matronId),\r\n            uint256(_monster.sireId),\r\n            _monster.genes,\r\n            uint16(_generation)\r\n        );\r\n\r\n        // This will assign ownership, and also emit the Transfer event as\r\n        // per ERC721 draft\r\n        _transfer(0, _owner, newKittenId);\r\n\r\n        return newKittenId;\r\n    }\r\n\r\n    // Any C-level can fix how many seconds per blocks are currently observed.\r\n    function setSecondsPerBlock(uint256 secs) external onlyCLevel {\r\n        require(secs < cooldowns[0]);\r\n        secondsPerBlock = secs;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n/// @title The external contract that is responsible for generating metadata for the monsters,\r\n///  it has one function that will return the data as bytes.\r\ncontract ERC721Metadata {\r\n    /// @dev Given a token Id, returns a byte array that is supposed to be converted into string.\r\n    function getMetadata(uint256 _tokenId, string) public view returns (bytes32[4] buffer, uint256 count) {\r\n        if (_tokenId == 1) {\r\n            buffer[0] = \"Hello World! :D\";\r\n            count = 15;\r\n        } else if (_tokenId == 2) {\r\n            buffer[0] = \"I would definitely choose a medi\";\r\n            buffer[1] = \"um length string.\";\r\n            count = 49;\r\n        } else if (_tokenId == 3) {\r\n            buffer[0] = \"Lorem ipsum dolor sit amet, mi e\";\r\n            buffer[1] = \"st accumsan dapibus augue lorem,\";\r\n            buffer[2] = \" tristique vestibulum id, libero\";\r\n            buffer[3] = \" suscipit varius sapien aliquam.\";\r\n            count = 128;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n/// @title The facet of the CryptoMonsters core contract that manages ownership, ERC-721 (draft) compliant.\r\n/// @author Axiom Zen (https://www.axiomzen.co)\r\n/// @dev Ref: https://github.com/ethereum/EIPs/issues/721\r\n///  See the MonsterCore contract documentation to understand how the various contract facets are arranged.\r\ncontract MonsterOwnership is MonsterBase, ERC721 {\r\n\r\n    /// @notice Name and symbol of the non fungible token, as defined in ERC721.\r\n    string public constant name = \"Ethermon\";\r\n    string public constant symbol = \"EM\";\r\n\r\n    // The contract that will return monster metadata\r\n    ERC721Metadata public erc721Metadata;\r\n\r\n    bytes4 constant InterfaceSignature_ERC165 =\r\n    bytes4(keccak256('supportsInterface(bytes4)'));\r\n\r\n    bytes4 constant InterfaceSignature_ERC721 =\r\n    bytes4(keccak256('name()')) ^\r\n    bytes4(keccak256('symbol()')) ^\r\n    bytes4(keccak256('totalSupply()')) ^\r\n    bytes4(keccak256('balanceOf(address)')) ^\r\n    bytes4(keccak256('ownerOf(uint256)')) ^\r\n    bytes4(keccak256('approve(address,uint256)')) ^\r\n    bytes4(keccak256('transfer(address,uint256)')) ^\r\n    bytes4(keccak256('transferFrom(address,address,uint256)')) ^\r\n    bytes4(keccak256('tokensOfOwner(address)')) ^\r\n    bytes4(keccak256('tokenMetadata(uint256,string)'));\r\n\r\n    /// @notice Introspection interface as per ERC-165 (https://github.com/ethereum/EIPs/issues/165).\r\n    ///  Returns true for any standardized interfaces implemented by this contract. We implement\r\n    ///  ERC-165 (obviously!) and ERC-721.\r\n    function supportsInterface(bytes4 _interfaceID) external view returns (bool)\r\n    {\r\n        // DEBUG ONLY\r\n        //require((InterfaceSignature_ERC165 == 0x01ffc9a7) && (InterfaceSignature_ERC721 == 0x9a20483d));\r\n\r\n        return ((_interfaceID == InterfaceSignature_ERC165) || (_interfaceID == InterfaceSignature_ERC721));\r\n    }\r\n\r\n    /// @dev Set the address of the sibling contract that tracks metadata.\r\n    ///  CEO only.\r\n    function setMetadataAddress(address _contractAddress) public onlyCEO {\r\n        erc721Metadata = ERC721Metadata(_contractAddress);\r\n    }\r\n\r\n    // Internal utility functions: These functions all assume that their input arguments\r\n    // are valid. We leave it to public methods to sanitize their inputs and follow\r\n    // the required logic.\r\n\r\n    /// @dev Checks if a given address is the current owner of a particular Monster.\r\n    /// @param _claimant the address we are validating against.\r\n    /// @param _tokenId monster id, only valid when > 0\r\n    function _owns(address _claimant, uint256 _tokenId) internal view returns (bool) {\r\n        return monsterIndexToOwner[_tokenId] == _claimant;\r\n    }\r\n\r\n    /// @dev Checks if a given address currently has transferApproval for a particular Monster.\r\n    /// @param _claimant the address we are confirming monster is approved for.\r\n    /// @param _tokenId monster id, only valid when > 0\r\n    function _approvedFor(address _claimant, uint256 _tokenId) internal view returns (bool) {\r\n        return monsterIndexToApproved[_tokenId] == _claimant;\r\n    }\r\n\r\n    /// @dev Marks an address as being approved for transferFrom(), overwriting any previous\r\n    ///  approval. Setting _approved to address(0) clears all transfer approval.\r\n    ///  NOTE: _approve() does NOT send the Approval event. This is intentional because\r\n    ///  _approve() and transferFrom() are used together for putting Monsters on auction, and\r\n    ///  there is no value in spamming the log with Approval events in that case.\r\n    function _approve(uint256 _tokenId, address _approved) internal {\r\n        monsterIndexToApproved[_tokenId] = _approved;\r\n    }\r\n\r\n    /// @notice Returns the number of Monsters owned by a specific address.\r\n    /// @param _owner The owner address to check.\r\n    /// @dev Required for ERC-721 compliance\r\n    function balanceOf(address _owner) public view returns (uint256 count) {\r\n        return ownershipTokenCount[_owner];\r\n    }\r\n\r\n    /// @notice Transfers a Monster to another address. If transferring to a smart\r\n    ///  contract be VERY CAREFUL to ensure that it is aware of ERC-721 (or\r\n    ///  CryptoMonsters specifically) or your Monster may be lost forever. Seriously.\r\n    /// @param _to The address of the recipient, can be a user or contract.\r\n    /// @param _tokenId The ID of the Monster to transfer.\r\n    /// @dev Required for ERC-721 compliance.\r\n    function transfer(\r\n        address _to,\r\n        uint256 _tokenId\r\n    )\r\n    external\r\n    whenNotPaused\r\n    {\r\n        // Safety check to prevent against an unexpected 0x0 default.\r\n        require(_to != address(0));\r\n        // Disallow transfers to this contract to prevent accidental misuse.\r\n        // The contract should never own any monsters (except very briefly\r\n        // after a gen0 monster is created and before it goes on auction).\r\n        require(_to != address(this));\r\n        // Disallow transfers to the auction contracts to prevent accidental\r\n        // misuse. Auction contracts should only take ownership of monsters\r\n        // through the allow + transferFrom flow.\r\n        require(_to != address(saleAuction));\r\n        require(_to != address(siringAuction));\r\n\r\n        // You can only send your own monster.\r\n        require(_owns(msg.sender, _tokenId));\r\n\r\n            // Reassign ownership, clear pending approvals, emit Transfer event.\r\n        _transfer(msg.sender, _to, _tokenId);\r\n    }\r\n\r\n    /// @notice Grant another address the right to transfer a specific Monster via\r\n    ///  transferFrom(). This is the preferred flow for transfering NFTs to contracts.\r\n    /// @param _to The address to be granted transfer approval. Pass address(0) to\r\n    ///  clear all approvals.\r\n    /// @param _tokenId The ID of the Monster that can be transferred if this call succeeds.\r\n    /// @dev Required for ERC-721 compliance.\r\n    function approve(\r\n        address _to,\r\n        uint256 _tokenId\r\n    )\r\n    external\r\n    whenNotPaused\r\n    {\r\n        // Only an owner can grant transfer approval.\r\n        require(_owns(msg.sender, _tokenId));\r\n\r\n        // Register the approval (replacing any previous approval).\r\n        _approve(_tokenId, _to);\r\n\r\n        // Emit approval event.\r\n        Approval(msg.sender, _to, _tokenId);\r\n    }\r\n\r\n    /// @notice Transfer a Monster owned by another address, for which the calling address\r\n    ///  has previously been granted transfer approval by the owner.\r\n    /// @param _from The address that owns the Monster to be transfered.\r\n    /// @param _to The address that should take ownership of the Monster. Can be any address,\r\n    ///  including the caller.\r\n    /// @param _tokenId The ID of the Monster to be transferred.\r\n    /// @dev Required for ERC-721 compliance.\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _tokenId\r\n    )\r\n    external\r\n    whenNotPaused\r\n    {\r\n        // Safety check to prevent against an unexpected 0x0 default.\r\n        require(_to != address(0));\r\n        // Disallow transfers to this contract to prevent accidental misuse.\r\n        // The contract should never own any monsters (except very briefly\r\n        // after a gen0 monster is created and before it goes on auction).\r\n        require(_to != address(this));\r\n        // Check for approval and valid ownership\r\n        require(_approvedFor(msg.sender, _tokenId));\r\n        require(_owns(_from, _tokenId));\r\n\r\n        // Reassign ownership (also clears pending approvals and emits Transfer event).\r\n        _transfer(_from, _to, _tokenId);\r\n    }\r\n\r\n    /// @notice Returns the total number of Monsters currently in existence.\r\n    /// @dev Required for ERC-721 compliance.\r\n    function totalSupply() public view returns (uint) {\r\n        return monsters.length - 1;\r\n    }\r\n\r\n    /// @notice Returns the address currently assigned ownership of a given Monster.\r\n    /// @dev Required for ERC-721 compliance.\r\n    function ownerOf(uint256 _tokenId)\r\n    external\r\n    view\r\n    returns (address owner)\r\n    {\r\n        owner = monsterIndexToOwner[_tokenId];\r\n\r\n        require(owner != address(0));\r\n    }\r\n\r\n    /// @notice Returns a list of all Monster IDs assigned to an address.\r\n    /// @param _owner The owner whose Monsters we are interested in.\r\n    /// @dev This method MUST NEVER be called by smart contract code. First, it's fairly\r\n    ///  expensive (it walks the entire Monster array looking for monsters belonging to owner),\r\n    ///  but it also returns a dynamic array, which is only supported for web3 calls, and\r\n    ///  not contract-to-contract calls.\r\n    function tokensOfOwner(address _owner) external view returns (uint256[] ownerTokens) {\r\n        uint256 tokenCount = balanceOf(_owner);\r\n\r\n        if (tokenCount == 0) {\r\n            // Return an empty array\r\n            return new uint256[](0);\r\n        } else {\r\n            uint256[] memory result = new uint256[](tokenCount);\r\n            uint256 totalMonsters = totalSupply();\r\n            uint256 resultIndex = 0;\r\n\r\n            // We count on the fact that all monsters have IDs starting at 1 and increasing\r\n            // sequentially up to the totalMonster count.\r\n            uint256 monsterId;\r\n\r\n            for (monsterId = 1; monsterId <= totalMonsters; monsterId++) {\r\n                if (monsterIndexToOwner[monsterId] == _owner) {\r\n                    result[resultIndex] = monsterId;\r\n                    resultIndex++;\r\n                }\r\n            }\r\n\r\n            return result;\r\n        }\r\n    }\r\n\r\n    /// @dev Adapted from memcpy() by @arachnid (Nick Johnson <arachnid@notdot.net>)\r\n    ///  This method is licenced under the Apache License.\r\n    ///  Ref: https://github.com/Arachnid/solidity-stringutils/blob/2f6ca9accb48ae14c66f1437ec50ed19a0616f78/strings.sol\r\n    function _memcpy(uint _dest, uint _src, uint _len) private view {\r\n        // Copy word-length chunks while possible\r\n        for (; _len >= 32; _len -= 32) {\r\n            assembly {\r\n                mstore(_dest, mload(_src))\r\n            }\r\n            _dest += 32;\r\n            _src += 32;\r\n        }\r\n\r\n        // Copy remaining bytes\r\n        uint256 mask = 256 ** (32 - _len) - 1;\r\n        assembly {\r\n            let srcpart := and(mload(_src), not(mask))\r\n            let destpart := and(mload(_dest), mask)\r\n            mstore(_dest, or(destpart, srcpart))\r\n        }\r\n    }\r\n\r\n    /// @dev Adapted from toString(slice) by @arachnid (Nick Johnson <arachnid@notdot.net>)\r\n    ///  This method is licenced under the Apache License.\r\n    ///  Ref: https://github.com/Arachnid/solidity-stringutils/blob/2f6ca9accb48ae14c66f1437ec50ed19a0616f78/strings.sol\r\n    function _toString(bytes32[4] _rawBytes, uint256 _stringLength) private view returns (string) {\r\n        var outputString = new string(_stringLength);\r\n        uint256 outputPtr;\r\n        uint256 bytesPtr;\r\n\r\n        assembly {\r\n            outputPtr := add(outputString, 32)\r\n            bytesPtr := _rawBytes\r\n        }\r\n\r\n        _memcpy(outputPtr, bytesPtr, _stringLength);\r\n\r\n        return outputString;\r\n    }\r\n\r\n    /// @notice Returns a URI pointing to a metadata package for this token conforming to\r\n    ///  ERC-721 (https://github.com/ethereum/EIPs/issues/721)\r\n    /// @param _tokenId The ID number of the Monster whose metadata should be returned.\r\n    function tokenMetadata(uint256 _tokenId, string _preferredTransport) external view returns (string infoUrl) {\r\n        require(erc721Metadata != address(0));\r\n        bytes32[4] memory buffer;\r\n        uint256 count;\r\n        (buffer, count) = erc721Metadata.getMetadata(_tokenId, _preferredTransport);\r\n\r\n        return _toString(buffer, count);\r\n    }\r\n}\r\n\r\n\r\n\r\n/// @title A facet of MonsterCore that manages Monster siring, gestation, and birth.\r\n/// @author Axiom Zen (https://www.axiomzen.co)\r\n/// @dev See the MonsterCore contract documentation to understand how the various contract facets are arranged.\r\ncontract MonsterBreeding is MonsterOwnership {\r\n\r\n    /// @dev The Pregnant event is fired when two monsters successfully breed and the pregnancy\r\n    ///  timer begins for the matron.\r\n    event Pregnant(address owner, uint256 matronId, uint256 sireId, uint256 cooldownEndBlock);\r\n\r\n    /// @notice The minimum payment required to use breedWithAuto(). This fee goes towards\r\n    ///  the gas cost paid by whatever calls giveBirth(), and can be dynamically updated by\r\n    ///  the COO role as the gas price changes.\r\n    uint256 public autoBirthFee = 8 finney;\r\n\r\n    // Keeps track of number of pregnant monsters.\r\n    uint256 public pregnantMonsters;\r\n\r\n    /// @dev The address of the sibling contract that is used to implement the sooper-sekret\r\n    ///  genetic combination algorithm.\r\n\r\n    /// @dev Update the address of the genetic contract, can only be called by the CEO.\r\n    /// @param _address An address of a GeneScience contract instance to be used from this point forward.\r\n    function setGeneScienceAddress(address _address) external onlyCEO {\r\n        GeneScience candidateContract = GeneScience(_address);\r\n\r\n        require(candidateContract.isGeneScience());\r\n\r\n        // Set the new contract address\r\n        geneScience = candidateContract;\r\n    }\r\n\r\n    /// @dev Checks that a given monster is able to breed. Requires that the\r\n    ///  current cooldown is finished (for sires) and also checks that there is\r\n    ///  no pending pregnancy.\r\n    function _isReadyToBreed(Monster _monster) internal view returns (bool) {\r\n        // In addition to checking the cooldownEndBlock, we also need to check to see if\r\n        // the monster has a pending birth; there can be some period of time between the end\r\n        // of the pregnacy timer and the birth event.\r\n        return (_monster.siringWithId == 0) && (_monster.cooldownEndBlock <= uint64(block.number));\r\n    }\r\n\r\n    /// @dev Check if a sire has authorized breeding with this matron. True if both sire\r\n    ///  and matron have the same owner, or if the sire has given siring permission to\r\n    ///  the matron's owner (via approveSiring()).\r\n    function _isSiringPermitted(uint256 _sireId, uint256 _matronId) internal view returns (bool) {\r\n        address matronOwner = monsterIndexToOwner[_matronId];\r\n        address sireOwner = monsterIndexToOwner[_sireId];\r\n\r\n        // Siring is okay if they have same owner, or if the matron's owner was given\r\n        // permission to breed with this sire.\r\n        return (matronOwner == sireOwner || sireAllowedToAddress[_sireId] == matronOwner);\r\n    }\r\n\r\n    /// @dev Set the cooldownEndTime for the given Monster, based on its current cooldownIndex.\r\n    ///  Also increments the cooldownIndex (unless it has hit the cap).\r\n    /// @param _monster A reference to the Monster in storage which needs its timer started.\r\n    function _triggerCooldown(Monster storage _monster) internal {\r\n        // Compute an estimation of the cooldown time in blocks (based on current cooldownIndex).\r\n        _monster.cooldownEndBlock = uint64((cooldowns[_monster.cooldownIndex] / secondsPerBlock) + block.number);\r\n\r\n        // Increment the breeding count, clamping it at 13, which is the length of the\r\n        // cooldowns array. We could check the array size dynamically, but hard-coding\r\n        // this as a constant saves gas. Yay, Solidity!\r\n        if (_monster.cooldownIndex < 13) {\r\n            _monster.cooldownIndex += 1;\r\n        }\r\n    }\r\n\r\n    /// @notice Grants approval to another user to sire with one of your Monsters.\r\n    /// @param _addr The address that will be able to sire with your Monster. Set to\r\n    ///  address(0) to clear all siring approvals for this Monster.\r\n    /// @param _sireId A Monster that you own that _addr will now be able to sire with.\r\n    /// KERNYS 외부에서 아빠가 호출할 수 있다. (meta mask로)\r\n    function approveSiring(address _addr, uint256 _sireId)\r\n    external\r\n    whenNotPaused\r\n    {\r\n        require(_owns(msg.sender, _sireId));\r\n        sireAllowedToAddress[_sireId] = _addr;\r\n    }\r\n\r\n    /// @dev Updates the minimum payment required for calling giveBirthAuto(). Can only\r\n    ///  be called by the COO address. (This fee is used to offset the gas cost incurred\r\n    ///  by the autobirth daemon).\r\n    function setAutoBirthFee(uint256 val) external onlyCOO {\r\n        autoBirthFee = val;\r\n    }\r\n\r\n    /// @dev Checks to see if a given Monster is pregnant and (if so) if the gestation\r\n    ///  period has passed.\r\n    function _isReadyToGiveBirth(Monster _matron) private view returns (bool) {\r\n        return (_matron.siringWithId != 0) && (_matron.cooldownEndBlock <= uint64(block.number));\r\n    }\r\n\r\n    /// @notice Checks that a given monster is able to breed (i.e. it is not pregnant or\r\n    ///  in the middle of a siring cooldown).\r\n    /// @param _monsterId reference the id of the monster, any user can inquire about it\r\n    function isReadyToBreed(uint256 _monsterId)\r\n    public\r\n    view\r\n    returns (bool)\r\n    {\r\n        require(_monsterId > 0);\r\n        Monster storage monster = monsters[_monsterId];\r\n        return _isReadyToBreed(monster);\r\n    }\r\n\r\n    /// @dev Checks whether a monster is currently pregnant.\r\n    /// @param _monsterId reference the id of the monster, any user can inquire about it\r\n    function isPregnant(uint256 _monsterId)\r\n    public\r\n    view\r\n    returns (bool)\r\n    {\r\n        require(_monsterId > 0);\r\n        // A monster is pregnant if and only if this field is set\r\n        return monsters[_monsterId].siringWithId != 0;\r\n    }\r\n\r\n    /// @dev Internal check to see if a given sire and matron are a valid mating pair. DOES NOT\r\n    ///  check ownership permissions (that is up to the caller).\r\n    /// @param _matron A reference to the Monster struct of the potential matron.\r\n    /// @param _matronId The matron's ID.\r\n    /// @param _sire A reference to the Monster struct of the potential sire.\r\n    /// @param _sireId The sire's ID\r\n    function _isValidMatingPair(\r\n        Monster storage _matron,\r\n        uint256 _matronId,\r\n        Monster storage _sire,\r\n        uint256 _sireId\r\n    )\r\n    private\r\n    view\r\n    returns (bool)\r\n    {\r\n        // A Monster can't breed with itself!\r\n        if (_matronId == _sireId) {\r\n            return false;\r\n        }\r\n\r\n        // Monsters can't breed with their parents.\r\n        if (_matron.matronId == _sireId || _matron.sireId == _sireId) {\r\n            return false;\r\n        }\r\n        if (_sire.matronId == _matronId || _sire.sireId == _matronId) {\r\n            return false;\r\n        }\r\n\r\n        // We can short circuit the sibling check (below) if either monster is\r\n        // gen zero (has a matron ID of zero).\r\n        if (_sire.matronId == 0 || _matron.matronId == 0) {\r\n            return true;\r\n        }\r\n\r\n        // Monsters can't breed with full or half siblings.\r\n        if (_sire.matronId == _matron.matronId || _sire.matronId == _matron.sireId) {\r\n            return false;\r\n        }\r\n        if (_sire.sireId == _matron.matronId || _sire.sireId == _matron.sireId) {\r\n            return false;\r\n        }\r\n\r\n        // Everything seems cool! Let's get DTF.\r\n        return true;\r\n    }\r\n\r\n    /// @dev Internal check to see if a given sire and matron are a valid mating pair for\r\n    ///  breeding via auction (i.e. skips ownership and siring approval checks).\r\n    function _canBreedWithViaAuction(uint256 _matronId, uint256 _sireId)\r\n    internal\r\n    view\r\n    returns (bool)\r\n    {\r\n        Monster storage matron = monsters[_matronId];\r\n        Monster storage sire = monsters[_sireId];\r\n        return _isValidMatingPair(matron, _matronId, sire, _sireId);\r\n    }\r\n\r\n    /// @notice Checks to see if two monsters can breed together, including checks for\r\n    ///  ownership and siring approvals. Does NOT check that both monsters are ready for\r\n    ///  breeding (i.e. breedWith could still fail until the cooldowns are finished).\r\n    ///  TODO: Shouldn't this check pregnancy and cooldowns?!?\r\n    /// @param _matronId The ID of the proposed matron.\r\n    /// @param _sireId The ID of the proposed sire.\r\n    function canBreedWith(uint256 _matronId, uint256 _sireId)\r\n    external\r\n    view\r\n    returns (bool)\r\n    {\r\n        require(_matronId > 0);\r\n        require(_sireId > 0);\r\n        Monster storage matron = monsters[_matronId];\r\n        Monster storage sire = monsters[_sireId];\r\n        return _isValidMatingPair(matron, _matronId, sire, _sireId) &&\r\n        _isSiringPermitted(_sireId, _matronId);\r\n    }\r\n\r\n    /// @dev Internal utility function to initiate breeding, assumes that all breeding\r\n    ///  requirements have been checked.\r\n    function _breedWith(uint256 _matronId, uint256 _sireId) internal {\r\n        // Grab a reference to the Monsters from storage.\r\n        Monster storage sire = monsters[_sireId];\r\n        Monster storage matron = monsters[_matronId];\r\n\r\n        // Mark the matron as pregnant, keeping track of who the sire is.\r\n        matron.siringWithId = uint32(_sireId);\r\n\r\n        // Trigger the cooldown for both parents.\r\n        _triggerCooldown(sire);\r\n        _triggerCooldown(matron);\r\n\r\n        // Clear siring permission for both parents. This may not be strictly necessary\r\n        // but it's likely to avoid confusion!\r\n        delete sireAllowedToAddress[_matronId];\r\n        delete sireAllowedToAddress[_sireId];\r\n\r\n        // Every time a monster gets pregnant, counter is incremented.\r\n        pregnantMonsters++;\r\n\r\n        // Emit the pregnancy event.\r\n        Pregnant(monsterIndexToOwner[_matronId], _matronId, _sireId, matron.cooldownEndBlock);\r\n    }\r\n\r\n    /// @notice Breed a Monster you own (as matron) with a sire that you own, or for which you\r\n    ///  have previously been given Siring approval. Will either make your monster pregnant, or will\r\n    ///  fail entirely. Requires a pre-payment of the fee given out to the first caller of giveBirth()\r\n    /// @param _matronId The ID of the Monster acting as matron (will end up pregnant if successful)\r\n    /// @param _sireId The ID of the Monster acting as sire (will begin its siring cooldown if successful)\r\n    function breedWithAuto(uint256 _matronId, uint256 _sireId)\r\n    external\r\n    payable\r\n    whenNotPaused\r\n    {\r\n        // Checks for payment.\r\n        require(msg.value >= autoBirthFee);\r\n\r\n        // Caller must own the matron.\r\n        require(_owns(msg.sender, _matronId));\r\n\r\n        // Neither sire nor matron are allowed to be on auction during a normal\r\n        // breeding operation, but we don't need to check that explicitly.\r\n        // For matron: The caller of this function can't be the owner of the matron\r\n        //   because the owner of a Monster on auction is the auction house, and the\r\n        //   auction house will never call breedWith().\r\n        // For sire: Similarly, a sire on auction will be owned by the auction house\r\n        //   and the act of transferring ownership will have cleared any oustanding\r\n        //   siring approval.\r\n        // Thus we don't need to spend gas explicitly checking to see if either monster\r\n        // is on auction.\r\n\r\n        // Check that matron and sire are both owned by caller, or that the sire\r\n        // has given siring permission to caller (i.e. matron's owner).\r\n        // Will fail for _sireId = 0\r\n        require(_isSiringPermitted(_sireId, _matronId));\r\n\r\n        // Grab a reference to the potential matron\r\n        Monster storage matron = monsters[_matronId];\r\n\r\n        // Make sure matron isn't pregnant, or in the middle of a siring cooldown\r\n        require(_isReadyToBreed(matron));\r\n\r\n        // Grab a reference to the potential sire\r\n        Monster storage sire = monsters[_sireId];\r\n\r\n        // Make sure sire isn't pregnant, or in the middle of a siring cooldown\r\n        require(_isReadyToBreed(sire));\r\n\r\n        // Test that these monsters are a valid mating pair.\r\n        require(_isValidMatingPair(\r\n                matron,\r\n                _matronId,\r\n                sire,\r\n                _sireId\r\n            ));\r\n\r\n        // All checks passed, monster gets pregnant!\r\n        _breedWith(_matronId, _sireId);\r\n    }\r\n\r\n    /// @notice Have a pregnant Monster give birth!\r\n    /// @param _matronId A Monster ready to give birth.\r\n    /// @return The Monster ID of the new monster.\r\n    /// @dev Looks at a given Monster and, if pregnant and if the gestation period has passed,\r\n    ///  combines the genes of the two parents to create a new monster. The new Monster is assigned\r\n    ///  to the current owner of the matron. Upon successful completion, both the matron and the\r\n    ///  new monster will be ready to breed again. Note that anyone can call this function (if they\r\n    ///  are willing to pay the gas!), but the new monster always goes to the mother's owner.\r\n    function giveBirth(uint256 _matronId)\r\n    external\r\n    onlyCOO\r\n    whenNotPaused\r\n    returns (uint256)\r\n    {\r\n        // Grab a reference to the matron in storage.\r\n        Monster storage matron = monsters[_matronId];\r\n\r\n        // Check that the matron is a valid monster.\r\n        require(matron.birthTime != 0);\r\n\r\n        // Check that the matron is pregnant, and that its time has come!\r\n        require(_isReadyToGiveBirth(matron));\r\n\r\n        // Grab a reference to the sire in storage.\r\n        uint256 sireId = matron.siringWithId;\r\n        Monster storage sire = monsters[sireId];\r\n\r\n        // Determine the higher generation number of the two parents\r\n        uint16 parentGen = matron.generation;\r\n        if (sire.generation > matron.generation) {\r\n            parentGen = sire.generation;\r\n        }\r\n\r\n        // Call the sooper-sekret gene mixing operation.\r\n        // targetBlock\r\n        uint256 childGenes = geneScience.mixGenes(matron.genes, sire.genes, matron.cooldownEndBlock - 1);\r\n\r\n        // Make the new monster!\r\n        address owner = monsterIndexToOwner[_matronId];\r\n        uint256 monsterId = _createMonster(_matronId, matron.siringWithId, parentGen + 1, childGenes, owner);\r\n\r\n        // Clear the reference to sire from the matron (REQUIRED! Having siringWithId\r\n        // set is what marks a matron as being pregnant.)\r\n        delete matron.siringWithId;\r\n\r\n        // Every time a monster gives birth counter is decremented.\r\n        pregnantMonsters--;\r\n\r\n        // Send the balance fee to the person who made birth happen.\r\n        msg.sender.send(autoBirthFee);\r\n\r\n        // return the new monster's ID\r\n        return monsterId;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/// @title Handles creating auctions for sale and siring of monsters.\r\n///  This wrapper of ReverseAuction exists only so that users can create\r\n///  auctions with only one transaction.\r\ncontract MonsterAuction is MonsterBreeding {\r\n\r\n    // @notice The auction contract variables are defined in MonsterBase to allow\r\n    //  us to refer to them in MonsterOwnership to prevent accidental transfers.\r\n    // `saleAuction` refers to the auction for gen0 and p2p sale of monsters.\r\n    // `siringAuction` refers to the auction for siring rights of monsters.\r\n\r\n    /// @dev Sets the reference to the sale auction.\r\n    /// @param _address - Address of sale contract.\r\n    function setSaleAuctionAddress(address _address) external onlyCEO {\r\n        SaleClockAuction candidateContract = SaleClockAuction(_address);\r\n\r\n        // NOTE: verify that a contract is what we expect - https://github.com/Lunyr/crowdsale-contracts/blob/cfadd15986c30521d8ba7d5b6f57b4fefcc7ac38/contracts/LunyrToken.sol#L117\r\n        require(candidateContract.isSaleClockAuction());\r\n\r\n        // Set the new contract address\r\n        saleAuction = candidateContract;\r\n    }\r\n\r\n    /// @dev Sets the reference to the siring auction.\r\n    /// @param _address - Address of siring contract.\r\n    function setSiringAuctionAddress(address _address) external onlyCEO {\r\n        SiringClockAuction candidateContract = SiringClockAuction(_address);\r\n\r\n        // NOTE: verify that a contract is what we expect - https://github.com/Lunyr/crowdsale-contracts/blob/cfadd15986c30521d8ba7d5b6f57b4fefcc7ac38/contracts/LunyrToken.sol#L117\r\n        require(candidateContract.isSiringClockAuction());\r\n\r\n        // Set the new contract address\r\n        siringAuction = candidateContract;\r\n    }\r\n\r\n    /// @dev Put a monster up for auction.\r\n    ///  Does some ownership trickery to create auctions in one tx.\r\n    function createSaleAuction(\r\n        uint256 _monsterId,\r\n        uint256 _startingPrice,\r\n        uint256 _endingPrice,\r\n        uint256 _duration\r\n    )\r\n    external\r\n    whenNotPaused\r\n    {\r\n        // Auction contract checks input sizes\r\n        // If monster is already on any auction, this will throw\r\n        // because it will be owned by the auction contract.\r\n        require(_owns(msg.sender, _monsterId));\r\n        // Ensure the monster is not pregnant to prevent the auction\r\n        // contract accidentally receiving ownership of the child.\r\n        // NOTE: the monster IS allowed to be in a cooldown.\r\n        require(!isPregnant(_monsterId));\r\n        _approve(_monsterId, saleAuction);\r\n        // Sale auction throws if inputs are invalid and clears\r\n        // transfer and sire approval after escrowing the monster.\r\n        saleAuction.createAuction(\r\n            _monsterId,\r\n            _startingPrice,\r\n            _endingPrice,\r\n            _duration,\r\n            msg.sender\r\n        );\r\n    }\r\n\r\n    /// @dev Put a monster up for auction to be sire.\r\n    ///  Performs checks to ensure the monster can be sired, then\r\n    ///  delegates to reverse auction.\r\n    function createSiringAuction(\r\n        uint256 _monsterId,\r\n        uint256 _startingPrice,\r\n        uint256 _endingPrice,\r\n        uint256 _duration\r\n    )\r\n    external\r\n    whenNotPaused\r\n    {\r\n        // Auction contract checks input sizes\r\n        // If monster is already on any auction, this will throw\r\n        // because it will be owned by the auction contract.\r\n        require(_owns(msg.sender, _monsterId));\r\n        require(isReadyToBreed(_monsterId));\r\n        _approve(_monsterId, siringAuction);\r\n        // Siring auction throws if inputs are invalid and clears\r\n        // transfer and sire approval after escrowing the monster.\r\n        siringAuction.createAuction(\r\n            _monsterId,\r\n            _startingPrice,\r\n            _endingPrice,\r\n            _duration,\r\n            msg.sender\r\n        );\r\n    }\r\n\r\n    /// @dev Completes a siring auction by bidding.\r\n    ///  Immediately breeds the winning matron with the sire on auction.\r\n    /// @param _sireId - ID of the sire on auction.\r\n    /// @param _matronId - ID of the matron owned by the bidder.\r\n    function bidOnSiringAuction(\r\n        uint256 _sireId,\r\n        uint256 _matronId\r\n    )\r\n    external\r\n    payable\r\n    whenNotPaused\r\n    {\r\n        // Auction contract checks input sizes\r\n        require(_owns(msg.sender, _matronId));\r\n        require(isReadyToBreed(_matronId));\r\n        require(_canBreedWithViaAuction(_matronId, _sireId));\r\n\r\n        // Define the current price of the auction.\r\n        uint256 currentPrice = siringAuction.getCurrentPrice(_sireId);\r\n        require(msg.value >= currentPrice + autoBirthFee);\r\n\r\n        // Siring auction will throw if the bid fails.\r\n        siringAuction.bid.value(msg.value - autoBirthFee)(_sireId);\r\n        _breedWith(uint32(_matronId), uint32(_sireId));\r\n    }\r\n\r\n    /// @dev Transfers the balance of the sale auction contract\r\n    /// to the MonsterCore contract. We use two-step withdrawal to\r\n    /// prevent two transfer calls in the auction bid function.\r\n    function withdrawAuctionBalances() external onlyCLevel {\r\n        saleAuction.withdrawBalance();\r\n        siringAuction.withdrawBalance();\r\n    }\r\n}\r\n\r\n\r\n/// @title all functions related to creating monsters\r\ncontract MonsterMinting is MonsterAuction {\r\n\r\n    // Limits the number of monsters the contract owner can ever create.\r\n    uint256 public constant PROMO_CREATION_LIMIT = 5000;\r\n    uint256 public constant GEN0_CREATION_LIMIT = 45000;\r\n\r\n    // Constants for gen0 auctions.\r\n    uint256 public constant GEN0_STARTING_PRICE = 10 finney;\r\n    uint256 public constant GEN0_AUCTION_DURATION = 1 days;\r\n\r\n    // Counts the number of monsters the contract owner has created.\r\n    uint256 public promoCreatedCount;\r\n    uint256 public gen0CreatedCount;\r\n\r\n    /// @dev we can create promo monsters, up to a limit. Only callable by COO\r\n    /// @param _genes the encoded genes of the monster to be created, any value is accepted\r\n    /// @param _owner the future owner of the created monsters. Default to contract COO\r\n    function createPromoMonster(uint256 _genes, address _owner) external onlyCOO {\r\n        address monsterOwner = _owner;\r\n        if (monsterOwner == address(0)) {\r\n            monsterOwner = cooAddress;\r\n        }\r\n        require(promoCreatedCount < PROMO_CREATION_LIMIT);\r\n\r\n        promoCreatedCount++;\r\n        _createMonster(0, 0, 0, _genes, monsterOwner);\r\n    }\r\n\r\n    /// @dev Creates a new gen0 monster with the given genes and\r\n    ///  creates an auction for it.\r\n    function createGen0Auction(uint256 _genes) external onlyCOO {\r\n        require(gen0CreatedCount < GEN0_CREATION_LIMIT);\r\n\r\n        uint256 genes = _genes;\r\n        if(genes == 0)\r\n            genes = geneScience.randomGenes();\r\n\r\n        uint256 monsterId = _createMonster(0, 0, 0, genes, address(this));\r\n        _approve(monsterId, saleAuction);\r\n\r\n        saleAuction.createAuction(\r\n            monsterId,\r\n            _computeNextGen0Price(),\r\n            0,\r\n            GEN0_AUCTION_DURATION,\r\n            address(this)\r\n        );\r\n\r\n        gen0CreatedCount++;\r\n    }\r\n\r\n    /// @dev Computes the next gen0 auction starting price, given\r\n    ///  the average of the past 5 prices + 50%.\r\n    function _computeNextGen0Price() internal view returns (uint256) {\r\n        uint256 avePrice = saleAuction.averageGen0SalePrice();\r\n\r\n        // Sanity check to ensure we don't overflow arithmetic\r\n        require(avePrice == uint256(uint128(avePrice)));\r\n\r\n        uint256 nextPrice = avePrice + (avePrice / 2);\r\n\r\n        // We never auction for less than starting price\r\n        if (nextPrice < GEN0_STARTING_PRICE) {\r\n            nextPrice = GEN0_STARTING_PRICE;\r\n        }\r\n\r\n        return nextPrice;\r\n    }\r\n}\r\n\r\n\r\n/// @title CryptoMonsters: Collectible, breedable, and oh-so-adorable monsters on the Ethereum blockchain.\r\n/// @author Axiom Zen (https://www.axiomzen.co)\r\n/// @dev The main CryptoMonsters contract, keeps track of monsters so they don't wander around and get lost.\r\ncontract MonsterCore is MonsterMinting {\r\n\r\n    // This is the main CryptoMonsters contract. In order to keep our code seperated into logical sections,\r\n    // we've broken it up in two ways. First, we have several seperately-instantiated sibling contracts\r\n    // that handle auctions and our super-top-secret genetic combination algorithm. The auctions are\r\n    // seperate since their logic is somewhat complex and there's always a risk of subtle bugs. By keeping\r\n    // them in their own contracts, we can upgrade them without disrupting the main contract that tracks\r\n    // monster ownership. The genetic combination algorithm is kept seperate so we can open-source all of\r\n    // the rest of our code without making it _too_ easy for folks to figure out how the genetics work.\r\n    // Don't worry, I'm sure someone will reverse engineer it soon enough!\r\n    //\r\n    // Secondly, we break the core contract into multiple files using inheritence, one for each major\r\n    // facet of functionality of CK. This allows us to keep related code bundled together while still\r\n    // avoiding a single giant file with everything in it. The breakdown is as follows:\r\n    //\r\n    //      - MonsterBase: This is where we define the most fundamental code shared throughout the core\r\n    //             functionality. This includes our main data storage, constants and data types, plus\r\n    //             internal functions for managing these items.\r\n    //\r\n    //      - MonsterAccessControl: This contract manages the various addresses and constraints for operations\r\n    //             that can be executed only by specific roles. Namely CEO, CFO and COO.\r\n    //\r\n    //      - MonsterOwnership: This provides the methods required for basic non-fungible token\r\n    //             transactions, following the draft ERC-721 spec (https://github.com/ethereum/EIPs/issues/721).\r\n    //\r\n    //      - MonsterBreeding: This file contains the methods necessary to breed monsters together, including\r\n    //             keeping track of siring offers, and relies on an external genetic combination contract.\r\n    //\r\n    //      - MonsterAuctions: Here we have the public methods for auctioning or bidding on monsters or siring\r\n    //             services. The actual auction functionality is handled in two sibling contracts (one\r\n    //             for sales and one for siring), while auction creation and bidding is mostly mediated\r\n    //             through this facet of the core contract.\r\n    //\r\n    //      - MonsterMinting: This final facet contains the functionality we use for creating new gen0 monsters.\r\n    //             We can make up to 5000 \"promo\" monsters that can be given away (especially important when\r\n    //             the community is new), and all others can only be created and then immediately put up\r\n    //             for auction via an algorithmically determined starting price. Regardless of how they\r\n    //             are created, there is a hard limit of 50k gen0 monsters. After that, it's all up to the\r\n    //             community to breed, breed, breed!\r\n\r\n    // Set in case the core contract is broken and an upgrade is required\r\n    address public newContractAddress;\r\n\r\n    /// @notice Creates the main CryptoMonsters smart contract instance.\r\n    function MonsterCore() public {\r\n        // Starts paused.\r\n        paused = false;\r\n\r\n        // the creator of the contract is the initial CEO\r\n        ceoAddress = msg.sender;\r\n\r\n        // the creator of the contract is also the initial COO\r\n        cooAddress = msg.sender;\r\n\r\n        //\r\n        cfoAddress = msg.sender;\r\n\r\n        // start with the mythical monster 0 - so we don't have generation-0 parent issues\r\n        _createMonster(0, 0, 0, uint256(57896044618658097711785492504343953926634992332820282019728792004021511462807), address(0));\r\n    }\r\n\r\n    /// @dev Used to mark the smart contract as upgraded, in case there is a serious\r\n    ///  breaking bug. This method does nothing but keep track of the new contract and\r\n    ///  emit a message indimonstering that the new address is set. It's up to clients of this\r\n    ///  contract to update to the new contract address in that case. (This contract will\r\n    ///  be paused indefinitely if such an upgrade takes place.)\r\n    /// @param _v2Address new address\r\n    function setNewAddress(address _v2Address) external onlyCEO whenPaused {\r\n        // See README.md for updgrade plan\r\n        newContractAddress = _v2Address;\r\n        ContractUpgrade(_v2Address);\r\n    }\r\n\r\n    /// @notice No tipping!\r\n    /// @dev Reject all Ether from being sent here, unless it's from one of the\r\n    ///  two auction contracts. (Hopefully, we can prevent user accidents.)\r\n    function() external payable {\r\n        require(\r\n            msg.sender == address(saleAuction) ||\r\n            msg.sender == address(siringAuction)\r\n        );\r\n    }\r\n\r\n    /// @notice Returns all the relevant information about a specific monster.\r\n    /// @param _id The ID of the monster of interest.\r\n    function getMonster(uint256 _id)\r\n    external\r\n    view\r\n    returns (\r\n        bool isGestating,\r\n        bool isReady,\r\n        uint256 cooldownIndex,\r\n        uint256 nextActionAt,\r\n        uint256 siringWithId,\r\n        uint256 birthTime,\r\n        uint256 matronId,\r\n        uint256 sireId,\r\n        uint256 generation,\r\n        uint256 genes\r\n    ) {\r\n        Monster storage monster = monsters[_id];\r\n\r\n        // if this variable is 0 then it's not gestating\r\n        isGestating = (monster.siringWithId != 0);\r\n        isReady = (monster.cooldownEndBlock <= block.number);\r\n        cooldownIndex = uint256(monster.cooldownIndex);\r\n        nextActionAt = uint256(monster.cooldownEndBlock);\r\n        siringWithId = uint256(monster.siringWithId);\r\n        birthTime = uint256(monster.birthTime);\r\n        matronId = uint256(monster.matronId);\r\n        sireId = uint256(monster.sireId);\r\n        generation = uint256(monster.generation);\r\n        genes = monster.genes;\r\n    }\r\n\r\n    /// @dev Override unpause so it requires all external contract addresses\r\n    ///  to be set before contract can be unpaused. Also, we can't have\r\n    ///  newContractAddress set either, because then the contract was upgraded.\r\n    /// @notice This is public rather than external so we can call super.unpause\r\n    ///  without using an expensive CALL.\r\n    function unpause() public onlyCEO whenPaused {\r\n        require(saleAuction != address(0));\r\n        require(siringAuction != address(0));\r\n        require(geneScience != address(0));\r\n        require(newContractAddress == address(0));\r\n\r\n        // Actually unpause the contract.\r\n        super.unpause();\r\n    }\r\n\r\n    // @dev Allows the CFO to capture the balance available to the contract.\r\n    function withdrawBalance() external onlyCFO {\r\n        uint256 balance = this.balance;\r\n        // Subtract all the currently pregnant monsters we have, plus 1 of margin.\r\n        uint256 subtractFees = (pregnantMonsters + 1) * autoBirthFee;\r\n\r\n        if (balance > subtractFees) {\r\n            cfoAddress.send(balance - subtractFees);\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cfoAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_preferredTransport\",\"type\":\"string\"}],\"name\":\"tokenMetadata\",\"outputs\":[{\"name\":\"infoUrl\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"promoCreatedCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ceoAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GEN0_STARTING_PRICE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setSiringAuctionAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_monsterId\",\"type\":\"uint256\"}],\"name\":\"isPregnant\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GEN0_AUCTION_DURATION\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"siringAuction\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setGeneScienceAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCEO\",\"type\":\"address\"}],\"name\":\"setCEO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCOO\",\"type\":\"address\"}],\"name\":\"setCOO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_monsterId\",\"type\":\"uint256\"},{\"name\":\"_startingPrice\",\"type\":\"uint256\"},{\"name\":\"_endingPrice\",\"type\":\"uint256\"},{\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"createSaleAuction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"sireAllowedToAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_matronId\",\"type\":\"uint256\"},{\"name\":\"_sireId\",\"type\":\"uint256\"}],\"name\":\"canBreedWith\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_monsterId\",\"type\":\"uint256\"},{\"name\":\"_startingPrice\",\"type\":\"uint256\"},{\"name\":\"_endingPrice\",\"type\":\"uint256\"},{\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"createSiringAuction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"setAutoBirthFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_sireId\",\"type\":\"uint256\"}],\"name\":\"approveSiring\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCFO\",\"type\":\"address\"}],\"name\":\"setCFO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"secs\",\"type\":\"uint256\"}],\"name\":\"setSecondsPerBlock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getMonster\",\"outputs\":[{\"name\":\"isGestating\",\"type\":\"bool\"},{\"name\":\"isReady\",\"type\":\"bool\"},{\"name\":\"cooldownIndex\",\"type\":\"uint256\"},{\"name\":\"nextActionAt\",\"type\":\"uint256\"},{\"name\":\"siringWithId\",\"type\":\"uint256\"},{\"name\":\"birthTime\",\"type\":\"uint256\"},{\"name\":\"matronId\",\"type\":\"uint256\"},{\"name\":\"sireId\",\"type\":\"uint256\"},{\"name\":\"generation\",\"type\":\"uint256\"},{\"name\":\"genes\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GEN0_CREATION_LIMIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newContractAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setSaleAuctionAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"count\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_v2Address\",\"type\":\"address\"}],\"name\":\"setNewAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"secondsPerBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"monsterIndexToApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"tokensOfOwner\",\"outputs\":[{\"name\":\"ownerTokens\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_matronId\",\"type\":\"uint256\"}],\"name\":\"giveBirth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_genes\",\"type\":\"uint256\"},{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"createPromoMonster\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawAuctionBalances\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cooldowns\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"monsterIndexToOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cooAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"autoBirthFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"erc721Metadata\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_genes\",\"type\":\"uint256\"}],\"name\":\"createGen0Auction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pregnantMonsters\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_monsterId\",\"type\":\"uint256\"}],\"name\":\"isReadyToBreed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PROMO_CREATION_LIMIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contractAddress\",\"type\":\"address\"}],\"name\":\"setMetadataAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleAuction\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sireId\",\"type\":\"uint256\"},{\"name\":\"_matronId\",\"type\":\"uint256\"}],\"name\":\"bidOnSiringAuction\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gen0CreatedCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"geneScience\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_matronId\",\"type\":\"uint256\"},{\"name\":\"_sireId\",\"type\":\"uint256\"}],\"name\":\"breedWithAuto\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"matronId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"sireId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"cooldownEndBlock\",\"type\":\"uint256\"}],\"name\":\"Pregnant\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"monsterId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"matronId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"sireId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"genes\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"generation\",\"type\":\"uint16\"}],\"name\":\"Birth\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newContract\",\"type\":\"address\"}],\"name\":\"ContractUpgrade\",\"type\":\"event\"}]","ContractName":"MonsterCore","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://dccaf423b4effc94d7ec78d79851dc46c27f8950e720cd1e93b2e96747d3c9b7"}]}