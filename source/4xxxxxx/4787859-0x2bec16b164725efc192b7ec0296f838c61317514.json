{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n/// @title Abstract token contract - Functions to be implemented by token contracts.\r\ncontract Token {\r\n    function transfer(address to, uint256 value) returns (bool success);\r\n    function transferFrom(address from, address to, uint256 value) returns (bool success);\r\n    function approve(address spender, uint256 value) returns (bool success);\r\n\r\n    // This is not an abstract function, because solc won't recognize generated getter functions for public variables as functions.\r\n    function totalSupply() constant returns (uint256 supply) {}\r\n    function balanceOf(address owner) constant returns (uint256 balance);\r\n    function allowance(address owner, address spender) constant returns (uint256 remaining);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n/// @title Standard token contract - Standard token interface implementation.\r\ncontract StandardToken is Token {\r\n\r\n    /*\r\n     *  Data structures\r\n     */\r\n    mapping (address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n    uint256 public totalSupply;\r\n\r\n    /*\r\n     *  Public functions\r\n     */\r\n    /// @dev Transfers sender's tokens to a given address. Returns success.\r\n    /// @param _to Address of token receiver.\r\n    /// @param _value Number of tokens to transfer.\r\n    /// @return Returns success of function call.\r\n    function transfer(address _to, uint256 _value)\r\n        public\r\n        returns (bool)\r\n    {\r\n        if (balances[msg.sender] < _value) {\r\n            // Balance too low\r\n            throw;\r\n        }\r\n        balances[msg.sender] -= _value;\r\n        balances[_to] += _value;\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /// @dev Allows allowed third party to transfer tokens from one address to another. Returns success.\r\n    /// @param _from Address from where tokens are withdrawn.\r\n    /// @param _to Address to where tokens are sent.\r\n    /// @param _value Number of tokens to transfer.\r\n    /// @return Returns success of function call.\r\n    function transferFrom(address _from, address _to, uint256 _value)\r\n        public\r\n        returns (bool)\r\n    {\r\n        if (balances[_from] < _value || allowed[_from][msg.sender] < _value) {\r\n            // Balance or allowance too low\r\n            throw;\r\n        }\r\n        balances[_to] += _value;\r\n        balances[_from] -= _value;\r\n        allowed[_from][msg.sender] -= _value;\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /// @dev Sets approved amount of tokens for spender. Returns success.\r\n    /// @param _spender Address of allowed account.\r\n    /// @param _value Number of approved tokens.\r\n    /// @return Returns success of function call.\r\n    function approve(address _spender, uint256 _value)\r\n        public\r\n        returns (bool)\r\n    {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /*\r\n     * Read functions\r\n     */\r\n    /// @dev Returns number of allowed tokens for given address.\r\n    /// @param _owner Address of token owner.\r\n    /// @param _spender Address of token spender.\r\n    /// @return Returns remaining allowance for spender.\r\n    function allowance(address _owner, address _spender)\r\n        constant\r\n        public\r\n        returns (uint256)\r\n    {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    /// @dev Returns number of tokens owned by given address.\r\n    /// @param _owner Address of token owner.\r\n    /// @return Returns balance of owner.\r\n    function balanceOf(address _owner)\r\n        constant\r\n        public\r\n        returns (uint256)\r\n    {\r\n        return balances[_owner];\r\n    }\r\n}\r\n\r\n\r\n/// @title Gnosis token contract\r\n/// @author Stefan George - <stefan.george@consensys.net>\r\ncontract GnosisToken is StandardToken {\r\n\r\n    /*\r\n     *  Token meta data\r\n     */\r\n    string constant public name = \"Gnosis Token\";\r\n    string constant public symbol = \"GNO\";\r\n    uint8 constant public decimals = 18;\r\n\r\n    /*\r\n     *  Public functions\r\n     */\r\n    /// @dev Contract constructor function sets dutch auction contract address and assigns all tokens to dutch auction.\r\n    /// @param dutchAuction Address of dutch auction contract.\r\n    /// @param owners Array of addresses receiving preassigned tokens.\r\n    /// @param tokens Array of preassigned token amounts.\r\n    function GnosisToken(address dutchAuction, address[] owners, uint[] tokens)\r\n        public\r\n    {\r\n        if (dutchAuction == 0)\r\n            // Address should not be null.\r\n            throw;\r\n        totalSupply = 10000000 * 10**18;\r\n        balances[dutchAuction] = 9000000 * 10**18;\r\n        Transfer(0, dutchAuction, balances[dutchAuction]);\r\n        uint assignedTokens = balances[dutchAuction];\r\n        for (uint i=0; i<owners.length; i++) {\r\n            if (owners[i] == 0)\r\n                // Address should not be null.\r\n                throw;\r\n            balances[owners[i]] += tokens[i];\r\n            Transfer(0, owners[i], tokens[i]);\r\n            assignedTokens += tokens[i];\r\n        }\r\n        if (assignedTokens != totalSupply)\r\n            throw;\r\n    }\r\n}\r\n\r\ncontract eda {\r\n\t// 1491955200 = 12. 4. 2017\r\n\tuint edaBirthday = 1491955200;\r\n\r\n\taddress dom = 0xC5c83A12501C6470B002E54409B024C02624AaAA;\r\n\taddress majaALubo = 0x67f38b53c3aD78F045F75C805deFeA7086711e75;\r\n\r\n\taddress GNO = 0x6810e776880C02933D47DB1b9fc05908e5386b96;\r\n\r\n\tbool domEarlyWithdrawApproval;\r\n\tbool majaALuboEarlyWithdrawApproval;\r\n\r\n\tfunction withdrawEarly(address to)\r\n\t\tpublic\r\n\t{\r\n\t\tif (msg.sender == dom) {\r\n\t\t\tif (majaALuboEarlyWithdrawApproval == true) {\r\n\t\t\t\twithdraw(to);\r\n\t\t\t} else {\r\n\t\t\t\tdomEarlyWithdrawApproval = true;\r\n\t\t\t}\r\n\t\t} else if (msg.sender == majaALubo) {\r\n\t\t\tif (domEarlyWithdrawApproval == true) {\r\n\t\t\t\twithdraw(to);\r\n\t\t\t} else {\r\n\t\t\t\tmajaALuboEarlyWithdrawApproval = true;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tfunction withdraw(address to)\r\n\t\tinternal\r\n\t{\r\n\t\tuint balance = GnosisToken(GNO).balanceOf(this);\r\n\t\tGnosisToken(GNO).transfer(to, balance);\r\n\t}\r\n\r\n\tfunction withdrawAfter18Years(address to)\r\n\t\tpublic\r\n\t{\r\n\t\t// 567,648,000 = 18 years in s\t\r\n\t\trequire(now >= edaBirthday + 567648000);\r\n\r\n\t\trequire(msg.sender == dom || msg.sender == majaALubo);\r\n\r\n\t\twithdraw(to);\r\n\t}\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdrawEarly\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdrawAfter18Years\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"eda","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://07ed3dbcb711718b0bf88aa3be88c4087fde1dc38489809329d0f03d6296ad49"}]}