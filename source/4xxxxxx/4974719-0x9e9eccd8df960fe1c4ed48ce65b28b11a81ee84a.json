{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\nlibrary SafeERC20 {\r\n  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\r\n    assert(token.transfer(to, value));\r\n  }\r\n\r\n  function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\r\n    assert(token.transferFrom(from, to, value));\r\n  }\r\n\r\n  function safeApprove(ERC20 token, address spender, uint256 value) internal {\r\n    assert(token.approve(spender, value));\r\n  }\r\n}\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  \r\n}\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\ncontract HasWallet is Ownable {\r\n    address public wallet;\r\n\r\n    function setWallet(address walletAddress) public onlyOwner {\r\n        require(walletAddress != address(0));\r\n        wallet = walletAddress;\r\n    }\r\n\r\n\r\n}\r\ncontract WalletUsage is HasWallet {\r\n\r\n\r\n    /**\r\n      * 合约自己是否保留eth.\r\n      */\r\n    bool public keepEth;\r\n\r\n\r\n    /**\r\n      * 为避免默认方法被占用，特别开指定方法接受以太坊\r\n      */\r\n    function depositEth() public payable {\r\n    }\r\n\r\n    function withdrawEth2Wallet(uint256 weiAmount) public onlyOwner {\r\n        require(wallet != address(0));\r\n        require(weiAmount > 0);\r\n        wallet.transfer(weiAmount);\r\n    }\r\n\r\n    function setKeepEth(bool _keepEth) public onlyOwner {\r\n        keepEth = _keepEth;\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract PublicBatchTransfer is WalletUsage {\r\n    using SafeERC20 for ERC20;\r\n\r\n    uint256 public fee;\r\n\r\n    function PublicBatchTransfer(address walletAddress,uint256 _fee){\r\n        require(walletAddress != address(0));\r\n        setWallet(walletAddress);\r\n        setFee(_fee);\r\n    }\r\n\r\n    function batchTransfer(address tokenAddress, address[] beneficiaries, uint256[] tokenAmount) payable public returns (bool) {\r\n        require(msg.value >= fee);\r\n        require(tokenAddress != address(0));\r\n        require(beneficiaries.length > 0 && beneficiaries.length == tokenAmount.length);\r\n        ERC20 ERC20Contract = ERC20(tokenAddress);\r\n        for (uint256 i = 0; i < beneficiaries.length; i++) {\r\n            ERC20Contract.safeTransferFrom(msg.sender, beneficiaries[i], tokenAmount[i]);\r\n        }\r\n        if (!keepEth) {\r\n            wallet.transfer(msg.value);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function setFee(uint256 _fee) onlyOwner public {\r\n        fee = _fee;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"beneficiaries\",\"type\":\"address[]\"},{\"name\":\"tokenAmount\",\"type\":\"uint256[]\"}],\"name\":\"batchTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"depositEth\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"weiAmount\",\"type\":\"uint256\"}],\"name\":\"withdrawEth2Wallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_keepEth\",\"type\":\"bool\"}],\"name\":\"setKeepEth\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"keepEth\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"walletAddress\",\"type\":\"address\"}],\"name\":\"setWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"walletAddress\",\"type\":\"address\"},{\"name\":\"_fee\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"PublicBatchTransfer","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000b3ae3c2a966e62a91438c61b3ddf365307971f9500000000000000000000000000000000000000000000000000038d7ea4c68000","Library":"","SwarmSource":"bzzr://d65dbb280bdecf45ff2b9cbdb12a6b7c0ffe73887eb267438c5880e6075b3a94"}]}