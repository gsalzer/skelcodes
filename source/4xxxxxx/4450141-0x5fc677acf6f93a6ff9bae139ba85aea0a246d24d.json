{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.15;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract ERC20 {\r\n  function balanceOf(address who) constant returns (uint256);\r\n  function transfer(address to, uint256 value) returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  function allowance(address owner, address spender) constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) returns (bool);\r\n  function approve(address spender, uint256 value) returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    \r\n}\r\n\r\n\r\ncontract BasicToken is ERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n\r\n    /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n\r\n    function transfer(address _to, uint256 _value) returns (bool) {\r\n        if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\r\n            balances[msg.sender] = balances[msg.sender].sub(_value);\r\n            balances[_to] = balances[_to].add(_value);\r\n            Transfer(msg.sender, _to, _value);\r\n            return true;\r\n        }else {\r\n            return false;\r\n        }\r\n    }\r\n    \r\n\r\n    /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amout of tokens to be transfered\r\n   */\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\r\n      if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\r\n        uint256 _allowance = allowed[_from][msg.sender];\r\n        allowed[_from][msg.sender] = _allowance.sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        balances[_from] = balances[_from].sub(_value);\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n      } else {\r\n        return false;\r\n      }\r\n}\r\n\r\n\r\n    /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of. \r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n  function approve(address _spender, uint256 _value) returns (bool) {\r\n\r\n    // To change the approve amount you first have to reduce the addresses`\r\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n    //  already 0 to mitigate the race condition described here:\r\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifing the amount of tokens still avaible for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n\r\n}\r\n\r\ncontract HRAToken is BasicToken {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    string public name = \"HERA\";                                //name of the token\r\n    string public symbol = \"HRA\";                               //symbol of the token\r\n    uint8 public decimals = 10;                                 //decimals\r\n    uint256 public initialSupply = 30000000 * 10**10;           //total supply of Tokens\r\n\r\n    //variables\r\n    uint256 public totalAllocatedTokens;                         //variable to keep track of funds allocated\r\n    uint256 public tokensAllocatedToCrowdFund;                   //funds allocated to crowdfund\r\n\r\n    //addresses\r\n    address public founderMultiSigAddress;                      //Multi sign address of founder\r\n    address public crowdFundAddress;                            //Address of crowdfund contract\r\n\r\n    //events\r\n    event ChangeFoundersWalletAddress(uint256 _blockTimeStamp, address indexed _foundersWalletAddress);\r\n    \r\n    //modifierss\r\n\r\n    modifier nonZeroAddress(address _to){\r\n        require(_to != 0x0);\r\n        _;\r\n    }\r\n\r\n    modifier onlyFounders(){\r\n        require(msg.sender == founderMultiSigAddress);\r\n        _;\r\n    }\r\n\r\n    modifier onlyCrowdfund(){\r\n        require(msg.sender == crowdFundAddress);\r\n        _;\r\n    }\r\n\r\n    //creation of token contract\r\n    function HRAToken(address _crowdFundAddress, address _founderMultiSigAddress) {\r\n        crowdFundAddress = _crowdFundAddress;\r\n        founderMultiSigAddress = _founderMultiSigAddress;\r\n\r\n        // Assigned balances to crowdfund\r\n        balances[crowdFundAddress] = initialSupply;\r\n    }\r\n\r\n    //function to keep track of the total token allocation\r\n    function changeTotalSupply(uint256 _amount) onlyCrowdfund {\r\n        totalAllocatedTokens += _amount;\r\n    }\r\n\r\n    //function to change founder Multisig wallet address\r\n    function changeFounderMultiSigAddress(address _newFounderMultiSigAddress) onlyFounders nonZeroAddress(_newFounderMultiSigAddress) {\r\n        founderMultiSigAddress = _newFounderMultiSigAddress;\r\n        ChangeFoundersWalletAddress(now, founderMultiSigAddress);\r\n    }\r\n\r\n}\r\n\r\ncontract HRACrowdfund {\r\n    \r\n    using SafeMath for uint256;\r\n\r\n    HRAToken public token;                                    // Token contract reference\r\n    \r\n    address public founderMulSigAddress;                      // Founders multisig address\r\n    uint256 public exchangeRate;                              // Use to find token value against one ether\r\n    uint256 public ethRaised;                                 // Counter to track the amount raised\r\n    bool private tokenDeployed = false;                       // Flag to track the token deployment -- only can be set once\r\n    uint256 public tokenSold;                                 // Counter to track the amount of token sold\r\n    uint256 public manualTransferToken;                       // Counter to track the amount of manually tranfer token\r\n    uint256 public tokenDistributeInDividend;                 // Counter to track the amount of token shared to investors\r\n    uint8 internal EXISTS = 1;                                // Flag to track the existing investors\r\n    uint8 internal NEW = 0;                                   // Flag to track the non existing investors\r\n\r\n    address[] public investors;                               // Investors address \r\n\r\n    mapping (address => uint8) internal previousInvestor;\r\n    //events\r\n    event ChangeFounderMulSigAddress(address indexed _newFounderMulSigAddress , uint256 _timestamp);\r\n    event ChangeRateOfToken(uint256 _timestamp, uint256 _newRate);\r\n    event TokenPurchase(address indexed _beneficiary, uint256 _value, uint256 _amount);\r\n    event AdminTokenSent(address indexed _to, uint256 _value);\r\n    event SendDividend(address indexed _to , uint256 _value, uint256 _timestamp);\r\n    \r\n    //Modifiers\r\n    modifier onlyfounder() {\r\n        require(msg.sender == founderMulSigAddress);\r\n        _;\r\n    }\r\n\r\n    modifier nonZeroAddress(address _to) {\r\n        require(_to != 0x0);\r\n        _;\r\n    }\r\n\r\n    modifier onlyPublic() {\r\n        require(msg.sender != founderMulSigAddress);\r\n        _;\r\n    }\r\n\r\n    modifier nonZeroEth() {\r\n        require(msg.value != 0);\r\n        _;\r\n    }\r\n\r\n    modifier isTokenDeployed() {\r\n        require(tokenDeployed == true);\r\n        _;\r\n    }\r\n    \r\n    // Constructor to initialize the local variables \r\n    function HRACrowdfund(address _founderMulSigAddress) {\r\n        founderMulSigAddress = _founderMulSigAddress;\r\n        exchangeRate = 320;\r\n    }\r\n   \r\n   // Attach the token contract, can only be done once   \r\n    function setToken(address _tokenAddress) nonZeroAddress(_tokenAddress) onlyfounder {\r\n         require(tokenDeployed == false);\r\n         token = HRAToken(_tokenAddress);\r\n         tokenDeployed = true;\r\n    }\r\n    \r\n    // Function to change the exchange rate\r\n    function changeExchangeRate(uint256 _rate) onlyfounder returns (bool) {\r\n        if(_rate != 0){\r\n            exchangeRate = _rate;\r\n            ChangeRateOfToken(now,_rate);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    \r\n    // Function to change the founders multisig address\r\n    function ChangeFounderWalletAddress(address _newAddress) onlyfounder nonZeroAddress(_newAddress) {\r\n         founderMulSigAddress = _newAddress;\r\n         ChangeFounderMulSigAddress(founderMulSigAddress,now);\r\n    }\r\n\r\n    // Buy token function \r\n    function buyTokens (address _beneficiary)\r\n    onlyPublic\r\n    nonZeroAddress(_beneficiary)\r\n    nonZeroEth\r\n    isTokenDeployed\r\n    payable\r\n    public\r\n    returns (bool)\r\n    {\r\n        uint256 amount = (msg.value.mul(exchangeRate)).div(10 ** 8);\r\n       \r\n        require(checkExistence(_beneficiary));\r\n\r\n        if (token.transfer(_beneficiary, amount)) {\r\n            fundTransfer(msg.value);\r\n            previousInvestor[_beneficiary] = EXISTS;\r\n            ethRaised = ethRaised.add(msg.value);\r\n            tokenSold = tokenSold.add(amount);\r\n            token.changeTotalSupply(amount); \r\n            TokenPurchase(_beneficiary, msg.value, amount);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    // Function to send token to user address\r\n    function sendToken (address _to, uint256 _value)\r\n    onlyfounder \r\n    nonZeroAddress(_to) \r\n    isTokenDeployed\r\n    returns (bool)\r\n    {\r\n        if (_value == 0)\r\n            return false;\r\n\r\n        require(checkExistence(_to));\r\n        \r\n        uint256 _tokenAmount= _value * 10 ** uint256(token.decimals());\r\n\r\n        if (token.transfer(_to, _tokenAmount)) {\r\n            previousInvestor[_to] = EXISTS;\r\n            manualTransferToken = manualTransferToken.add(_tokenAmount);\r\n            token.changeTotalSupply(_tokenAmount); \r\n            AdminTokenSent(_to, _tokenAmount);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    \r\n    // Function to check the existence of investor\r\n    function checkExistence(address _beneficiary) internal returns (bool) {\r\n         if (token.balanceOf(_beneficiary) == 0 && previousInvestor[_beneficiary] == NEW) {\r\n            investors.push(_beneficiary);\r\n        }\r\n        return true;\r\n    }\r\n    \r\n    // Function to calculate the percentage of token share to the existing investors\r\n    function provideDividend(uint256 _dividend) \r\n    onlyfounder \r\n    isTokenDeployed\r\n    {\r\n        uint256 _supply = token.totalAllocatedTokens();\r\n        uint256 _dividendValue = _dividend.mul(10 ** uint256(token.decimals()));\r\n        for (uint8 i = 0 ; i < investors.length ; i++) {\r\n            \r\n            uint256 _value = ((token.balanceOf(investors[i])).mul(_dividendValue)).div(_supply);\r\n            dividendTransfer(investors[i], _value);\r\n        }\r\n    }\r\n    \r\n    // Function to send the calculated tokens amount to the investor\r\n    function dividendTransfer(address _to, uint256 _value) private {\r\n        if (token.transfer(_to,_value)) {\r\n            token.changeTotalSupply(_value);\r\n            tokenDistributeInDividend = tokenDistributeInDividend.add(_value);\r\n            SendDividend(_to,_value,now);\r\n        }\r\n    }\r\n    \r\n    // Function to transfer the funds to founders account\r\n    function fundTransfer(uint256 _funds) private {\r\n        founderMulSigAddress.transfer(_funds);\r\n    }\r\n    \r\n    // Crowdfund entry\r\n    // send ether to the contract address\r\n    function () payable {\r\n        buyTokens(msg.sender);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"founderMulSigAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"ChangeFounderWalletAddress\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"changeExchangeRate\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"manualTransferToken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"exchangeRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"investors\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"sendToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenDistributeInDividend\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_dividend\",\"type\":\"uint256\"}],\"name\":\"provideDividend\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_founderMulSigAddress\",\"type\":\"address\"}],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_newFounderMulSigAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"ChangeFounderMulSigAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_newRate\",\"type\":\"uint256\"}],\"name\":\"ChangeRateOfToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"AdminTokenSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"SendDividend\",\"type\":\"event\"}]","ContractName":"HRACrowdfund","CompilerVersion":"v0.4.15+commit.bbb8e64f","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000b3de746d56c652ea0390233a135a4011cacd9be5","Library":"","SwarmSource":"bzzr://3c4ce3380b38064d13ff06f7268eec4795fd722717551cd8666e43f4799735e4"}]}