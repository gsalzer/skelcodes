{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13;\r\n\r\ncontract ERC20Basic {\r\n\r\n  function balanceOf(address who) public constant returns (uint256);\r\n\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n\r\n  function allowance(address owner, address spender) public constant returns (uint256);\r\n\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n}\r\n\r\ncontract ERC223 is ERC20 {\r\n\r\n\r\n\r\n    function name() constant returns (string _name);\r\n\r\n    function symbol() constant returns (string _symbol);\r\n\r\n    function decimals() constant returns (uint8 _decimals);\r\n\r\n\r\n\r\n    function transfer(address to, uint256 value, bytes data) returns (bool);\r\n\r\n\r\n\r\n}\r\n\r\ncontract ERC223ReceivingContract {\r\n\r\n    function tokenFallback(address _from, uint256 _value, bytes _data);\r\n\r\n}\r\n\r\ncontract KnowledgeTokenInterface is ERC223{\r\n\r\n    event Mint(address indexed to, uint256 amount);\r\n\r\n\r\n\r\n    function changeMinter(address newAddress) returns (bool);\r\n\r\n    function mint(address _to, uint256 _amount) returns (bool);\r\n\r\n}\r\n\r\ncontract Ownable {\r\n\r\n  address public owner;\r\n\r\n\r\n\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n\r\n\r\n\r\n  /**\r\n\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n\r\n   * account.\r\n\r\n   */\r\n\r\n  function Ownable() {\r\n\r\n    owner = msg.sender;\r\n\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n  /**\r\n\r\n   * @dev Throws if called by any account other than the owner.\r\n\r\n   */\r\n\r\n  modifier onlyOwner() {\r\n\r\n    require(msg.sender == owner);\r\n\r\n    _;\r\n\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n  /**\r\n\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n\r\n   * @param newOwner The address to transfer ownership to.\r\n\r\n   */\r\n\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n\r\n    require(newOwner != address(0));\r\n\r\n    OwnershipTransferred(owner, newOwner);\r\n\r\n    owner = newOwner;\r\n\r\n  }\r\n\r\n\r\n\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n\r\n    uint256 c = a * b;\r\n\r\n    assert(a == 0 || c / a == b);\r\n\r\n    return c;\r\n\r\n  }\r\n\r\n\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n\r\n    uint256 c = a / b;\r\n\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n    return c;\r\n\r\n  }\r\n\r\n\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n\r\n    assert(b <= a);\r\n\r\n    return a - b;\r\n\r\n  }\r\n\r\n\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n\r\n    uint256 c = a + b;\r\n\r\n    assert(c >= a);\r\n\r\n    return c;\r\n\r\n  }\r\n\r\n}\r\n\r\ncontract ERC20BasicToken is ERC20Basic {\r\n\r\n  using SafeMath for uint256;\r\n\r\n\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  uint256 public totalSupply;\r\n\r\n\r\n\r\n  /**\r\n\r\n  * @dev transfer token for a specified address\r\n\r\n  * @param _to The address to transfer to.\r\n\r\n  * @param _value The amount to be transferred.\r\n\r\n  */\r\n\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n\r\n    require(_to != address(0));\r\n\r\n\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n\r\n    balances[_to] = balances[_to].add(_value);\r\n\r\n    Transfer(msg.sender, _to, _value);\r\n\r\n    return true;\r\n\r\n  }\r\n\r\n\r\n\r\n  /**\r\n\r\n  * @dev Gets the balance of the specified address.\r\n\r\n  * @param _owner The address to query the the balance of.\r\n\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n\r\n  */\r\n\r\n  function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n\r\n    return balances[_owner];\r\n\r\n  }\r\n\r\n\r\n\r\n  function totalSupply() constant returns (uint256 _totalSupply) {\r\n\r\n    return totalSupply;\r\n\r\n  }\r\n\r\n\r\n\r\n}\r\n\r\ncontract ERC20Token is ERC20, ERC20BasicToken {\r\n\r\n\r\n\r\n  mapping (address => mapping (address => uint256)) allowed;\r\n\r\n\r\n\r\n  /**\r\n\r\n   * @dev Transfer tokens from one address to another\r\n\r\n   * @param _from address The address which you want to send tokens from\r\n\r\n   * @param _to address The address which you want to transfer to\r\n\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n\r\n   */\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n\r\n    require(_to != address(0));\r\n\r\n\r\n\r\n    uint256 _allowance = allowed[_from][msg.sender];\r\n\r\n\r\n\r\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n\r\n    // require (_value <= _allowance);\r\n\r\n\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n\r\n    balances[_to] = balances[_to].add(_value);\r\n\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n\r\n    Transfer(_from, _to, _value);\r\n\r\n    return true;\r\n\r\n  }\r\n\r\n\r\n\r\n  /**\r\n\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n\r\n   *\r\n\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n\r\n   * @param _spender The address which will spend the funds.\r\n\r\n   * @param _value The amount of tokens to be spent.\r\n\r\n   */\r\n\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n\r\n    allowed[msg.sender][_spender] = _value;\r\n\r\n    Approval(msg.sender, _spender, _value);\r\n\r\n    return true;\r\n\r\n  }\r\n\r\n\r\n\r\n  /**\r\n\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n\r\n   * @param _owner address The address which owns the funds.\r\n\r\n   * @param _spender address The address which will spend the funds.\r\n\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n\r\n   */\r\n\r\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n\r\n    return allowed[_owner][_spender];\r\n\r\n  }\r\n\r\n\r\n\r\n  /**\r\n\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n\r\n   * the first transaction is mined)\r\n\r\n   * From MonolithDAO Token.sol\r\n\r\n   */\r\n\r\n  function increaseApproval (address _spender, uint _addedValue)\r\n\r\n    returns (bool success) {\r\n\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n\r\n    return true;\r\n\r\n  }\r\n\r\n\r\n\r\n  function decreaseApproval (address _spender, uint _subtractedValue)\r\n\r\n    returns (bool success) {\r\n\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n\r\n    if (_subtractedValue > oldValue) {\r\n\r\n      allowed[msg.sender][_spender] = 0;\r\n\r\n    } else {\r\n\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n\r\n    }\r\n\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n\r\n    return true;\r\n\r\n  }\r\n\r\n\r\n\r\n}\r\n\r\ncontract ERC223Token is ERC223, ERC20Token {\r\n\r\n    using SafeMath for uint256;\r\n\r\n\r\n\r\n    string public name;\r\n\r\n\r\n\r\n    string public symbol;\r\n\r\n\r\n\r\n    uint8 public decimals;\r\n\r\n\r\n\r\n\r\n\r\n    // Function to access name of token .\r\n\r\n    function name() constant returns (string _name) {\r\n\r\n        return name;\r\n\r\n    }\r\n\r\n    // Function to access symbol of token .\r\n\r\n    function symbol() constant returns (string _symbol) {\r\n\r\n        return symbol;\r\n\r\n    }\r\n\r\n    // Function to access decimals of token .\r\n\r\n    function decimals() constant returns (uint8 _decimals) {\r\n\r\n        return decimals;\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    // Function that is called when a user or another contract wants to transfer funds .\r\n\r\n    function transfer(address _to, uint256 _value, bytes _data) returns (bool success) {\r\n\r\n        if (isContract(_to)) {\r\n\r\n            ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\r\n\r\n            receiver.tokenFallback(msg.sender, _value, _data);\r\n\r\n        }\r\n\r\n        return super.transfer(_to, _value);\r\n\r\n    }\r\n\r\n\r\n\r\n    // Standard function transfer similar to ERC20 transfer with no _data .\r\n\r\n    // Added due to backwards compatibility reasons .\r\n\r\n    function transfer(address _to, uint256 _value) returns (bool success) {\r\n\r\n        if (isContract(_to)) {\r\n\r\n            bytes memory empty;\r\n\r\n            ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\r\n\r\n            receiver.tokenFallback(msg.sender, _value, empty);\r\n\r\n        }\r\n\r\n        return super.transfer(_to, _value);\r\n\r\n    }\r\n\r\n\r\n\r\n    //assemble the given address bytecode. If bytecode exists then the _addr is a contract.\r\n\r\n    function isContract(address _addr) private returns (bool is_contract) {\r\n\r\n        uint length;\r\n\r\n        assembly {\r\n\r\n            length := extcodesize(_addr)\r\n\r\n        }\r\n\r\n        return (length > 0);\r\n\r\n    }\r\n\r\n\r\n\r\n}\r\n\r\ncontract KnowledgeToken is KnowledgeTokenInterface, Ownable, ERC223Token {\r\n\r\n\r\n\r\n    address public minter;\r\n\r\n\r\n\r\n    modifier onlyMinter() {\r\n\r\n        // Only minter is allowed to proceed.\r\n\r\n        require (msg.sender == minter);\r\n\r\n        _;\r\n\r\n    }\r\n\r\n\r\n\r\n    function mint(address _to, uint256 _amount) onlyMinter public returns (bool) {\r\n\r\n        totalSupply = totalSupply.add(_amount);\r\n\r\n        balances[_to] = balances[_to].add(_amount);\r\n\r\n        Transfer(0x0, _to, _amount);\r\n\r\n        Mint(_to, _amount);\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n\r\n\r\n    function changeMinter(address newAddress) public onlyOwner returns (bool)\r\n\r\n    {\r\n\r\n        minter = newAddress;\r\n\r\n    }\r\n\r\n}\r\n\r\ncontract WitCoin is KnowledgeToken{\r\n\r\n\r\n\r\n    function WitCoin() {\r\n\r\n        totalSupply = 0;\r\n\r\n        name = \"Witcoin\";\r\n\r\n        symbol = \"WIT\";\r\n\r\n        decimals = 8;\r\n\r\n    }\r\n\r\n\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minter\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"_totalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"changeMinter\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"_decimals\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"_symbol\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"WitCoin","CompilerVersion":"v0.4.15+commit.bbb8e64f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://ab2dca2afbaea5cd2f7373beac905099432a12b62330529165ae2148e0fff82f"}]}