{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public constant returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n\r\n    uint256 _allowance = allowed[_from][msg.sender];\r\n\r\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n    // require (_value <= _allowance);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   */\r\n  function increaseApproval (address _spender, uint _addedValue)\r\n    returns (bool success) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  function decreaseApproval (address _spender, uint _subtractedValue)\r\n    returns (bool success) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\ncontract Announceable is Ownable {\r\n\r\n  string public announcement;\r\n\r\n  function setAnnouncement(string value) public onlyOwner {\r\n    announcement = value;\r\n  }\r\n\r\n}\r\n\r\ncontract Withdrawable {\r\n\r\n  address public withdrawOwner;\r\n\r\n  function Withdrawable(address _withdrawOwner) public {\r\n    require(_withdrawOwner != address(0));\r\n    withdrawOwner = _withdrawOwner;\r\n  }\r\n\r\n  /**\r\n   * Transfers all the funs on this contract to the sender which must be withdrawOwner.\r\n   */\r\n  function withdraw() public {\r\n    withdrawTo(msg.sender, this.balance);\r\n  }\r\n\r\n  /**\r\n   * Transfers the given amount of funds to given beneficiary address. Must be called by the withdrawOwner.\r\n   */\r\n  function withdrawTo(address _beneficiary, uint _amount) public {\r\n    require(msg.sender == withdrawOwner);\r\n    require(_beneficiary != address(0));\r\n    require(_amount > 0);\r\n    _beneficiary.transfer(_amount);\r\n  }\r\n\r\n  /**\r\n   * Transfer withdraw ownership to another account.\r\n   */\r\n  function setWithdrawOwner(address _newOwner) public {\r\n    require(msg.sender == withdrawOwner);\r\n    require(_newOwner != address(0));\r\n    withdrawOwner = _newOwner;\r\n  }\r\n\r\n}\r\n\r\ncontract Cryptoverse is StandardToken, Ownable, Announceable, Withdrawable {\r\n  using SafeMath for uint;\r\n\r\n  string public constant name = \"Cryptoverse Sector\";\r\n  string public constant symbol = \"CVS\";\r\n  uint8 public constant decimals = 0;\r\n\r\n  /**\r\n   * Raised whenever grid sector is updated. The event will be raised for any update operation, even when nothing\r\n   * effectively changes.\r\n   */\r\n  event SectorUpdated(\r\n    uint16 indexed offset,\r\n    address indexed owner,\r\n    string link,\r\n    string content,\r\n    string title,\r\n    bool nsfw\r\n  );\r\n\r\n  /** Structure holding the information about the sector state. */\r\n  struct Sector {\r\n    address owner;\r\n    string link;\r\n    string content;\r\n    string title;\r\n    bool nsfw;\r\n    bool forceNsfw;\r\n  }\r\n\r\n  /** Time of the last purchase (or contract creation time). */\r\n  uint public lastPurchaseTimestamp = now;\r\n\r\n  /** Whether owner is allowed to claim free sectors. */\r\n  bool public allowClaiming = true;\r\n\r\n  /** The pricing */\r\n  uint[13] public prices = [1000 finney, 800 finney, 650 finney, 550 finney, 500 finney, 450 finney, 400 finney, 350 finney, 300 finney, 250 finney, 200 finney, 150 finney, 100 finney];\r\n\r\n  uint8 public constant width = 125;\r\n  uint8 public constant height = 80;\r\n  uint16 public constant length = 10000;\r\n\r\n  /**\r\n   * The current state of the grid is stored here.\r\n   *\r\n   * The grid has coordinates like screenspace/contentspace has: The [0;0] coordinate is at the top left corner. X axis\r\n   * goes from top to bottom, Y axis goes from left to right.\r\n   *\r\n   * The coordinates are stored as grid[transform(x, y)] = grid[x + 125 * y], .\r\n   */\r\n  Sector[10000] public grid;\r\n\r\n  function Cryptoverse() Withdrawable(msg.sender) public { }\r\n\r\n  function () public payable {\r\n    // how many sectors is sender going to buy\r\n    // NOTE: purchase via fallback is at flat price\r\n    uint sectorCount = msg.value / 1000 finney;\r\n    require(sectorCount > 0);\r\n\r\n    // fire transfer event ahead of update event\r\n    Transfer(address(0), msg.sender, sectorCount);\r\n\r\n    // now find as many free sectors\r\n    for (uint16 offset = 0; offset < length; offset++) {\r\n      Sector storage sector = grid[offset];\r\n\r\n      if (sector.owner == address(0)) {\r\n        // free sector\r\n        setSectorOwnerInternal(offset, msg.sender, false);\r\n        sectorCount--;\r\n\r\n        if (sectorCount == 0) {\r\n          return;\r\n        }\r\n      }\r\n    }\r\n\r\n    // not enough available free sectors\r\n    revert();\r\n  }\r\n\r\n  /**\r\n   * Purchases the sectors at given offsets. The array length must be even and the bounds must be within grid size.\r\n   */\r\n  function buy(uint16[] memory _offsets) public payable {\r\n    require(_offsets.length > 0);\r\n    uint cost = _offsets.length * currentPrice();\r\n    require(msg.value >= cost);\r\n\r\n    // fire transfer event ahead of update event\r\n    Transfer(address(0), msg.sender, _offsets.length);\r\n\r\n    for (uint i = 0; i < _offsets.length; i++) {\r\n      setSectorOwnerInternal(_offsets[i], msg.sender, false);\r\n    }\r\n  }\r\n\r\n  /**\r\n  * !override\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint _value) public returns (bool result) {\r\n    result = super.transfer(_to, _value);\r\n\r\n    if (result && _value > 0) {\r\n      transferSectorOwnerInternal(_value, msg.sender, _to);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * !override\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint _value) public returns (bool result) {\r\n    result = super.transferFrom(_from, _to, _value);\r\n\r\n    if (result && _value > 0) {\r\n      transferSectorOwnerInternal(_value, _from, _to);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Allows to transfer the sectors at given coordinates to a new owner.\r\n   */\r\n  function transferSectors(uint16[] memory _offsets, address _to) public returns (bool result) {\r\n    result = super.transfer(_to, _offsets.length);\r\n\r\n    if (result) {\r\n      for (uint i = 0; i < _offsets.length; i++) {\r\n        Sector storage sector = grid[_offsets[i]];\r\n        require(sector.owner == msg.sender);\r\n        setSectorOwnerInternal(_offsets[i], _to, true);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sets the state of the sector by its rightful owner.\r\n   */\r\n  function set(uint16[] memory _offsets, string _link, string _content, string _title, bool _nsfw) public {\r\n    require(_offsets.length > 0);\r\n    for (uint i = 0; i < _offsets.length; i++) {\r\n      Sector storage sector = grid[_offsets[i]];\r\n      require(msg.sender == sector.owner);\r\n\r\n      sector.link = _link;\r\n      sector.content = _content;\r\n      sector.title = _title;\r\n      sector.nsfw = _nsfw;\r\n\r\n      onUpdatedInternal(_offsets[i], sector);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sets the owner of the sector.\r\n   *\r\n   * - Does not check whether caller is allowed to do that.\r\n   * - Does not manipulate balances upon transfer (ensure to call appropriate parent functions).\r\n   */\r\n  function setSectorOwnerInternal(uint16 _offset, address _to, bool _canTransfer) internal {\r\n    require(_to != address(0));\r\n\r\n    // coordinate checks is done by an array type\r\n    Sector storage sector = grid[_offset];\r\n\r\n    // sector must be empty (not purchased yet)\r\n    address from = sector.owner;\r\n    bool isTransfer = (from != address(0));\r\n    require(_canTransfer || !isTransfer);\r\n\r\n    // variable is a reference to the storage, this will persist the info\r\n    sector.owner = _to;\r\n\r\n    // NOTE: do not manipulate balance on transfer, only on initial purchase\r\n    if (!isTransfer) {\r\n      // initial sector purchase\r\n      totalSupply = totalSupply.add(1);\r\n      balances[_to] = balances[_to].add(1);\r\n      lastPurchaseTimestamp = now;\r\n    }\r\n\r\n    onUpdatedInternal(_offset, sector);\r\n  }\r\n\r\n  /**\r\n   * Transfers the owner of _value implicit sectors.\r\n   *\r\n   * !throws Reverts when the _from does not own as many as _value sectors.\r\n   */\r\n  function transferSectorOwnerInternal(uint _value, address _from, address _to) internal {\r\n    require(_value > 0);\r\n    require(_from != address(0));\r\n    require(_to != address(0));\r\n\r\n    uint sectorCount = _value;\r\n\r\n    for (uint16 offsetPlusOne = length; offsetPlusOne > 0; offsetPlusOne--) {\r\n      Sector storage sector = grid[offsetPlusOne - 1];\r\n\r\n      if (sector.owner == _from) {\r\n        setSectorOwnerInternal(offsetPlusOne - 1, _to, true);\r\n        sectorCount--;\r\n\r\n        if (sectorCount == 0) {\r\n          // we have transferred exactly _value ownerships\r\n          return;\r\n        }\r\n      }\r\n    }\r\n\r\n    // _from does not own at least _value sectors\r\n    revert();\r\n  }\r\n\r\n  function setForceNsfw(uint16[] memory _offsets, bool _nsfw) public onlyOwner {\r\n    require(_offsets.length > 0);\r\n    for (uint i = 0; i < _offsets.length; i++) {\r\n      Sector storage sector = grid[_offsets[i]];\r\n      sector.forceNsfw = _nsfw;\r\n\r\n      onUpdatedInternal(_offsets[i], sector);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gets the current price in wei.\r\n   */\r\n  function currentPrice() public view returns (uint) {\r\n    uint sinceLastPurchase = (block.timestamp - lastPurchaseTimestamp);\r\n\r\n    for (uint i = 0; i < prices.length - 1; i++) {\r\n      if (sinceLastPurchase < (i + 1) * 1 days) {\r\n        return prices[i];\r\n      }\r\n    }\r\n\r\n    return prices[prices.length - 1];\r\n  }\r\n\r\n  function transform(uint8 _x, uint8 _y) public pure returns (uint16) {\r\n    uint16 offset = _y;\r\n    offset = offset * width;\r\n    offset = offset + _x;\r\n    return offset;\r\n  }\r\n\r\n  function untransform(uint16 _offset) public pure returns (uint8, uint8) {\r\n    uint8 y = uint8(_offset / width);\r\n    uint8 x = uint8(_offset - y * width);\r\n    return (x, y);\r\n  }\r\n\r\n  function claimA() public { claimInternal(60, 37, 5, 5); }\r\n  function claimB1() public { claimInternal(0, 0, 62, 1); }\r\n  function claimB2() public { claimInternal(62, 0, 63, 1); }\r\n  function claimC1() public { claimInternal(0, 79, 62, 1); }\r\n  function claimC2() public { claimInternal(62, 79, 63, 1); }\r\n  function claimD() public { claimInternal(0, 1, 1, 78); }\r\n  function claimE() public { claimInternal(124, 1, 1, 78); }\r\n  function claimF() public { claimInternal(20, 20, 8, 8); }\r\n  function claimG() public { claimInternal(45, 10, 6, 10); }\r\n  function claimH1() public { claimInternal(90, 50, 8, 10); }\r\n  function claimH2() public { claimInternal(98, 50, 7, 10); }\r\n  function claimI() public { claimInternal(94, 22, 7, 7); }\r\n  function claimJ() public { claimInternal(48, 59, 12, 8); }\r\n\r\n  /**\r\n   * Closes the opportunity to claim free blocks for the owner for good.\r\n   */\r\n  function closeClaims() public onlyOwner {\r\n    allowClaiming = false;\r\n  }\r\n\r\n  function claimInternal(uint8 _left, uint8 _top, uint8 _width, uint8 _height) internal {\r\n    require(allowClaiming);\r\n\r\n    // NOTE: SafeMath not needed, we operate on safe numbers\r\n    uint8 _right = _left + _width;\r\n    uint8 _bottom = _top + _height;\r\n\r\n    uint area = _width;\r\n    area = area * _height;\r\n    Transfer(address(0), owner, area);\r\n\r\n    for (uint8 x = _left; x < _right; x++) {\r\n      for (uint8 y = _top; y < _bottom; y++) {\r\n        setSectorOwnerInternal(transform(x, y), owner, false);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Raises SectorUpdated event.\r\n   */\r\n  function onUpdatedInternal(uint16 _offset, Sector storage _sector) internal {\r\n    SectorUpdated(\r\n      _offset,\r\n      _sector.owner,\r\n      _sector.link,\r\n      _sector.content,\r\n      _sector.title,\r\n      _sector.nsfw || _sector.forceNsfw\r\n    );\r\n  }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimH1\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"height\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimF\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"length\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawTo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"result\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_offsets\",\"type\":\"uint16[]\"},{\"name\":\"_nsfw\",\"type\":\"bool\"}],\"name\":\"setForceNsfw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimD\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_offsets\",\"type\":\"uint16[]\"},{\"name\":\"_link\",\"type\":\"string\"},{\"name\":\"_content\",\"type\":\"string\"},{\"name\":\"_title\",\"type\":\"string\"},{\"name\":\"_nsfw\",\"type\":\"bool\"}],\"name\":\"set\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimE\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"grid\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"link\",\"type\":\"string\"},{\"name\":\"content\",\"type\":\"string\"},{\"name\":\"title\",\"type\":\"string\"},{\"name\":\"nsfw\",\"type\":\"bool\"},{\"name\":\"forceNsfw\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimG\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimB1\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimH2\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_offsets\",\"type\":\"uint16[]\"}],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimC2\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_offsets\",\"type\":\"uint16[]\"},{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"transferSectors\",\"outputs\":[{\"name\":\"result\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"width\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"announcement\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"result\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"string\"}],\"name\":\"setAnnouncement\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimC1\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimI\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"prices\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastPurchaseTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"setWithdrawOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_x\",\"type\":\"uint8\"},{\"name\":\"_y\",\"type\":\"uint8\"}],\"name\":\"transform\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"closeClaims\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimA\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimJ\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_offset\",\"type\":\"uint16\"}],\"name\":\"untransform\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allowClaiming\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"withdrawOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimB2\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"offset\",\"type\":\"uint16\"},{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"link\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"content\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"title\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"nsfw\",\"type\":\"bool\"}],\"name\":\"SectorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"Cryptoverse","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://2a02106ac6662d9199539b663f353023f2a39a0746a4489539e362264eae6d72"}]}