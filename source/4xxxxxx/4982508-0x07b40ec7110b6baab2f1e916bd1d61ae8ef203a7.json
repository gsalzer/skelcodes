{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.17;\r\n\r\ncontract CryptoRoses {\r\n  address constant DESTINATION_ADDRESS = 0x19Ed10db2960B9B21283FdFDe464e7bF3a87D05D;\r\n  address owner;\r\n  bytes32 name;\r\n\r\n  enum Rose { Gold, White, Pink, Red }\r\n\r\n  struct RoseOwner {\r\n      bool hasRose;\r\n      Rose roseType;\r\n      string memo;\r\n  }\r\n\r\n  mapping (bytes32 => RoseOwner) roseOwners;\r\n  mapping (address => bool) addrWhitelist;\r\n\r\n  function CryptoRoses(bytes32 _name) public {\r\n      owner = msg.sender;\r\n      name = _name;\r\n  }\r\n\r\n  function addAddWhitelist(address s) public {      \r\n      require(msg.sender == owner);\r\n\r\n      addrWhitelist[s] = true;\r\n  }\r\n\r\n  // 0.25 ETH (250000000000000000 wei) for a Gold Rose\r\n  // 50 Garlicoin for a Gold Rose\r\n\r\n  // 0.05 ETH (50000000000000000 wei) for a White Rose\r\n  // 10 Garlicoin for a White Rose\r\n\r\n  // 0.02 ETH (20000000000000000 wei) for a Pink rose\r\n  // 4 Garlicoin for a Pink Rose\r\n\r\n  // 0.01 ETH (10000000000000000 wei) for a Red Rose\r\n  // 2 Garlicoin for a Red Rose\r\n\r\n  uint constant ETH_GOLD_ROSE_PRICE = 250000000000000000;\r\n  uint constant ETH_WHITE_ROSE_PRICE = 50000000000000000;\r\n  uint constant ETH_PINK_ROSE_PRICE = 20000000000000000;\r\n  uint constant ETH_RED_ROSE_PRICE = 10000000000000000;\r\n\r\n  // Buy Rose with ETH\r\n  function buyRoseETH(string memo) public payable {\r\n      uint amntSent = msg.value;\r\n      address sender = msg.sender;\r\n      bytes32 senderHash = keccak256(sender);\r\n\r\n      Rose roseType;\r\n\r\n      // Assign rose \r\n      if (amntSent >= ETH_GOLD_ROSE_PRICE) {\r\n          roseType = Rose.Gold;\r\n      } else if (amntSent >= ETH_WHITE_ROSE_PRICE) {\r\n          roseType = Rose.White;\r\n      } else if (amntSent >= ETH_PINK_ROSE_PRICE) {\r\n          roseType = Rose.Pink;\r\n      } else if (amntSent >= ETH_RED_ROSE_PRICE) {\r\n          roseType = Rose.Pink;\r\n      } else {\r\n          sender.transfer(amntSent);\r\n          return;\r\n      }\r\n\r\n      // No double buying roses\r\n      if (roseOwners[senderHash].hasRose) {\r\n          sender.transfer(amntSent);\r\n          return;\r\n      }\r\n\r\n      roseOwners[senderHash].hasRose = true;\r\n      roseOwners[senderHash].roseType = roseType;\r\n      roseOwners[senderHash].memo = memo;\r\n\r\n      DESTINATION_ADDRESS.transfer(amntSent);\r\n  }\r\n\r\n  uint constant GRLC_GOLD_ROSE_PRICE = 50;\r\n  uint constant GRLC_WHITE_ROSE_PRICE = 10;\r\n  uint constant GRLC_PINK_ROSE_PRICE = 4;\r\n  uint constant GRLC_RED_ROSE_PRICE = 2;\r\n\r\n  function buyRoseGRLC(bytes32 gaddrHash, string memo, uint amntSent) public {\r\n      // Only a trusted oracle can call this function\r\n      require(addrWhitelist[msg.sender] || owner == msg.sender);\r\n\r\n      Rose roseType;\r\n\r\n      // Assign rose \r\n      if (amntSent >= GRLC_GOLD_ROSE_PRICE) {\r\n          roseType = Rose.Gold;\r\n      } else if (amntSent >= GRLC_WHITE_ROSE_PRICE) {\r\n          roseType = Rose.White;\r\n      } else if (amntSent >= GRLC_PINK_ROSE_PRICE) {\r\n          roseType = Rose.Pink;\r\n      } else if (amntSent >= GRLC_RED_ROSE_PRICE) {\r\n          roseType = Rose.Pink;\r\n      } else {          \r\n          return;\r\n      }\r\n\r\n      // No double buying roses\r\n      if (roseOwners[gaddrHash].hasRose) {          \r\n          return;\r\n      }\r\n\r\n      roseOwners[gaddrHash].hasRose = true;\r\n      roseOwners[gaddrHash].roseType = roseType;\r\n      roseOwners[gaddrHash].memo = memo;\r\n  }\r\n\r\n  // No refunds fam soz not soz\r\n  function checkRose(bytes32 h) public constant returns (bool, uint, string) {\r\n      return (roseOwners[h].hasRose, uint(roseOwners[h].roseType), roseOwners[h].memo);\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"s\",\"type\":\"address\"}],\"name\":\"addAddWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"gaddrHash\",\"type\":\"bytes32\"},{\"name\":\"memo\",\"type\":\"string\"},{\"name\":\"amntSent\",\"type\":\"uint256\"}],\"name\":\"buyRoseGRLC\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"h\",\"type\":\"bytes32\"}],\"name\":\"checkRose\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"memo\",\"type\":\"string\"}],\"name\":\"buyRoseETH\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_name\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"CryptoRoses","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://221392c84881a4807d5a10b127484280e998f94b053614ec61dfb0f26ba9d4d3"}]}