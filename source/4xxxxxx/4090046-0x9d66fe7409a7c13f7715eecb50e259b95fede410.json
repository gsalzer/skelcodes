{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13;\r\n\r\ncontract AbstractENS{\r\n    function owner(bytes32 node) constant returns(address);\r\n    function setOwner(bytes32 node, address owner);\r\n    function setSubnodeOwner(bytes32 node, bytes32 label, address owner);\r\n}\r\n\r\ncontract Registrar {\r\n  function transfer(bytes32 _hash, address newOwner);\r\n  function entries(bytes32 _hash) constant returns (uint, Deed, uint, uint, uint);\r\n}\r\n\r\ncontract Deed {\r\n  address public owner;\r\n  address public previousOwner;\r\n}\r\n\r\ncontract subdomainSale{\r\n  AbstractENS ens = AbstractENS(0x314159265dD8dbb310642f98f50C066173C1259b);\r\n  Registrar registrar = Registrar(0x6090A6e47849629b7245Dfa1Ca21D94cd15878Ef);  \r\n  address admin = 0x8301Fb8945760Fa2B3C669e8F420B8795Dc03766;\r\n\r\n\r\n  struct Domain{\r\n    address originalOwner;\r\n    uint commitPeriod;\r\n    uint regPeriod;\r\n    bool subSale;\r\n    uint subPrice;\r\n    uint subExpiry;\r\n  }\r\n\r\n  mapping(bytes32=>Domain) records;\r\n\r\n  modifier deed_check(bytes32 label){\r\n     Deed deed;\r\n     (,deed,,,) = registrar.entries(label); \r\n     if(deed.owner() != address(this)) throw;\r\n     _;\r\n  }\r\n \r\n  modifier prevOwn_check(bytes32 label){\r\n    Deed deed;\r\n     (,deed,,,) = registrar.entries(label); \r\n     if(deed.previousOwner() != msg.sender) throw;\r\n     _;\r\n  }\r\n\r\n  modifier ens_check(bytes32 node){\r\n    if(ens.owner(node) != address(this)) throw;\r\n    _;\r\n  }\r\n\r\n\r\n  modifier recorded_owner(bytes32 node){\r\n    if (records[node].originalOwner != msg.sender) throw;\r\n    _;\r\n  }\r\n\r\n  function subdomainSale() {}\r\n\r\n  function listSubName(bytes32 label,bytes32 node,uint commit, uint price,uint expiry) prevOwn_check(label) deed_check(label) ens_check(node){\r\n    require(records[node].subSale == false); \r\n    require(expiry>=604800);   \r\n    require(expiry<=commit);\r\n\r\n    records[node].originalOwner=msg.sender;\r\n    records[node].subSale=true;\r\n    records[node].subPrice=price;\r\n    records[node].subExpiry=expiry;\r\n    records[node].commitPeriod=now + commit + 86400;\r\n  }\r\n\r\n  function unlistSubName(bytes32 label,bytes32 node) recorded_owner(node) ens_check(node) deed_check(label){\r\n    require(records[node].commitPeriod <= now);    \r\n\r\n    ens.setOwner(node,records[node].originalOwner);\r\n    registrar.transfer(label,records[node].originalOwner);\r\n \r\n    records[node].originalOwner=address(0x0);\r\n    records[node].subSale=false;\r\n    records[node].subPrice = 0;\r\n    records[node].subExpiry = 0;\r\n    records[node].commitPeriod=0;\r\n  }\r\n\r\n  function nodeCheck(bytes32 node) returns(address){\r\n    return ens.owner(node);\r\n  }\r\n\r\n  function subRegistrationPeriod(bytes32 node) returns(uint){\r\n    return records[node].subExpiry;\r\n  }\r\n\r\n  function checkSubAvailability(bytes32 node) returns(bool){\r\n    return records[node].subSale;\r\n  }\r\n\r\n  function checkSubPrice(bytes32 node) returns(uint){\r\n    return records[node].subPrice;\r\n  }\r\n\r\n  function checkCommitPeriod(bytes32 node) returns(uint){\r\n    return records[node].commitPeriod;\r\n  }\r\n\r\n  function checkRegPeriod(bytes32 node) returns(uint){\r\n    return records[node].regPeriod;\r\n  }\r\n\r\n  function subBuy(bytes32 ensName,bytes32 subNode,bytes32 newNode,address newOwner) payable ens_check(ensName) {\r\n    require( (records[ensName].subExpiry + now + 5) < records[ensName].commitPeriod );\r\n    require(records[ensName].subSale == true);\r\n    require(msg.value >= records[ensName].subPrice);\r\n    \r\n    require(records[newNode].regPeriod < now);\r\n\r\n    uint fee = msg.value/20;\r\n    uint netPrice = msg.value - fee;\r\n\r\n    admin.transfer(fee);\r\n    records[ensName].originalOwner.transfer(netPrice);\r\n\r\n    records[newNode].regPeriod = now + records[ensName].subExpiry;\r\n    records[newNode].subSale = false;\r\n    records[newNode].subPrice = 0;\r\n    records[newNode].subExpiry = 0;\r\n    records[newNode].commitPeriod=0;\r\n\r\n    ens.setSubnodeOwner(ensName,subNode,newOwner);\r\n  }\r\n\r\n function() payable{\r\n    admin.transfer(msg.value);\r\n  }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"ensName\",\"type\":\"bytes32\"},{\"name\":\"subNode\",\"type\":\"bytes32\"},{\"name\":\"newNode\",\"type\":\"bytes32\"},{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"subBuy\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"label\",\"type\":\"bytes32\"},{\"name\":\"node\",\"type\":\"bytes32\"},{\"name\":\"commit\",\"type\":\"uint256\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"expiry\",\"type\":\"uint256\"}],\"name\":\"listSubName\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"checkCommitPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"label\",\"type\":\"bytes32\"},{\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"unlistSubName\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"subRegistrationPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"nodeCheck\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"checkSubPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"checkSubAvailability\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"checkRegPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"}]","ContractName":"subdomainSale","CompilerVersion":"v0.4.13+commit.fb4cb1a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://1ff2e77fbda47d3b3cff777b41c0e31c3bf5b49bd4c4aa8717c4c6c895335f33"}]}