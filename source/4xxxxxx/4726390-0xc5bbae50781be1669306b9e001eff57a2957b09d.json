{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n// ----------------------------------------------------------------------------------------------\r\n// Gifto Token by Gifto Limited.\r\n// An ERC20 standard\r\n//\r\n// author: Gifto Team\r\n// Contact: datwhnguyen@gmail.com\r\n\r\ncontract ERC20Interface {\r\n    // Get the total token supply\r\n    function totalSupply() public constant returns (uint256 _totalSupply);\r\n \r\n    // Get the account balance of another account with address _owner\r\n    function balanceOf(address _owner) public constant returns (uint256 balance);\r\n \r\n    // Send _value amount of tokens to address _to\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n    \r\n    // transfer _value amount of token approved by address _from\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n\r\n    // approve an address with _value amount of tokens\r\n    function approve(address _spender, uint256 _value) public returns (bool success);\r\n\r\n    // get remaining token approved by _owner to _spender\r\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\r\n  \r\n    // Triggered when tokens are transferred.\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n \r\n    // Triggered whenever approve(address _spender, uint256 _value) is called.\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n \r\ncontract Gifto is ERC20Interface {\r\n    uint256 public constant decimals = 5;\r\n\r\n    string public constant symbol = \"GTO\";\r\n    string public constant name = \"Gifto\";\r\n\r\n    bool public _selling = true;//initial selling\r\n    uint256 public _totalSupply = 10 ** 14; // total supply is 10^14 unit, equivalent to 10^9 Gifto\r\n    uint256 public _originalBuyPrice = 43 * 10**7; // original buy 1ETH = 4300 Gifto = 43 * 10**7 unit\r\n\r\n    // Owner of this contract\r\n    address public owner;\r\n \r\n    // Balances Gifto for each account\r\n    mapping(address => uint256) private balances;\r\n    \r\n    // Owner of account approves the transfer of an amount to another account\r\n    mapping(address => mapping (address => uint256)) private allowed;\r\n\r\n    // List of approved investors\r\n    mapping(address => bool) private approvedInvestorList;\r\n    \r\n    // deposit\r\n    mapping(address => uint256) private deposit;\r\n    \r\n    // icoPercent\r\n    uint256 public _icoPercent = 10;\r\n    \r\n    // _icoSupply is the avalable unit. Initially, it is _totalSupply\r\n    uint256 public _icoSupply = _totalSupply * _icoPercent / 100;\r\n    \r\n    // minimum buy 0.3 ETH\r\n    uint256 public _minimumBuy = 3 * 10 ** 17;\r\n    \r\n    // maximum buy 25 ETH\r\n    uint256 public _maximumBuy = 25 * 10 ** 18;\r\n\r\n    // totalTokenSold\r\n    uint256 public totalTokenSold = 0;\r\n    \r\n    // tradable\r\n    bool public tradable = false;\r\n    \r\n    /**\r\n     * Functions with this modifier can only be executed by the owner\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * Functions with this modifier check on sale status\r\n     * Only allow sale if _selling is on\r\n     */\r\n    modifier onSale() {\r\n        require(_selling);\r\n        _;\r\n    }\r\n    \r\n    /**\r\n     * Functions with this modifier check the validity of address is investor\r\n     */\r\n    modifier validInvestor() {\r\n        require(approvedInvestorList[msg.sender]);\r\n        _;\r\n    }\r\n    \r\n    /**\r\n     * Functions with this modifier check the validity of msg value\r\n     * value must greater than equal minimumBuyPrice\r\n     * total deposit must less than equal maximumBuyPrice\r\n     */\r\n    modifier validValue(){\r\n        // require value >= _minimumBuy AND total deposit of msg.sender <= maximumBuyPrice\r\n        require ( (msg.value >= _minimumBuy) &&\r\n                ( (deposit[msg.sender] + msg.value) <= _maximumBuy) );\r\n        _;\r\n    }\r\n    \r\n    /**\r\n     * \r\n     */\r\n    modifier isTradable(){\r\n        require(tradable == true || msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /// @dev Fallback function allows to buy ether.\r\n    function()\r\n        public\r\n        payable {\r\n        buyGifto();\r\n    }\r\n    \r\n    /// @dev buy function allows to buy ether. for using optional data\r\n    function buyGifto()\r\n        public\r\n        payable\r\n        onSale\r\n        validValue\r\n        validInvestor {\r\n        uint256 requestedUnits = (msg.value * _originalBuyPrice) / 10**18;\r\n        require(balances[owner] >= requestedUnits);\r\n        // prepare transfer data\r\n        balances[owner] -= requestedUnits;\r\n        balances[msg.sender] += requestedUnits;\r\n        \r\n        // increase total deposit amount\r\n        deposit[msg.sender] += msg.value;\r\n        \r\n        // check total and auto turnOffSale\r\n        totalTokenSold += requestedUnits;\r\n        if (totalTokenSold >= _icoSupply){\r\n            _selling = false;\r\n        }\r\n        \r\n        // submit transfer\r\n        Transfer(owner, msg.sender, requestedUnits);\r\n        owner.transfer(msg.value);\r\n    }\r\n\r\n    /// @dev Constructor\r\n    function Gifto() \r\n        public {\r\n        owner = msg.sender;\r\n        setBuyPrice(_originalBuyPrice);\r\n        balances[owner] = _totalSupply;\r\n        Transfer(0x0, owner, _totalSupply);\r\n    }\r\n    \r\n    /// @dev Gets totalSupply\r\n    /// @return Total supply\r\n    function totalSupply()\r\n        public \r\n        constant \r\n        returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n    \r\n    /// @dev Enables sale \r\n    function turnOnSale() onlyOwner \r\n        public {\r\n        _selling = true;\r\n    }\r\n\r\n    /// @dev Disables sale\r\n    function turnOffSale() onlyOwner \r\n        public {\r\n        _selling = false;\r\n    }\r\n    \r\n    function turnOnTradable() \r\n        public\r\n        onlyOwner{\r\n        tradable = true;\r\n    }\r\n    \r\n    /// @dev set new icoPercent\r\n    /// @param newIcoPercent new value of icoPercent\r\n    function setIcoPercent(uint256 newIcoPercent)\r\n        public \r\n        onlyOwner {\r\n        _icoPercent = newIcoPercent;\r\n        _icoSupply = _totalSupply * _icoPercent / 100;\r\n    }\r\n    \r\n    /// @dev set new _maximumBuy\r\n    /// @param newMaximumBuy new value of _maximumBuy\r\n    function setMaximumBuy(uint256 newMaximumBuy)\r\n        public \r\n        onlyOwner {\r\n        _maximumBuy = newMaximumBuy;\r\n    }\r\n\r\n    /// @dev Updates buy price (owner ONLY)\r\n    /// @param newBuyPrice New buy price (in unit)\r\n    function setBuyPrice(uint256 newBuyPrice) \r\n        onlyOwner \r\n        public {\r\n        require(newBuyPrice>0);\r\n        _originalBuyPrice = newBuyPrice; // 3000 Gifto = 3000 00000 unit\r\n        // control _maximumBuy_USD = 10,000 USD, Gifto price is 0.1USD\r\n        // maximumBuy_Gifto = 100,000 Gifto = 100,000,00000 unit\r\n        // 3000 Gifto = 1ETH => maximumETH = 100,000,00000 / _originalBuyPrice\r\n        // 100,000,00000/3000 0000 ~ 33ETH => change to wei\r\n        _maximumBuy = 10**18 * 10000000000 /_originalBuyPrice;\r\n    }\r\n        \r\n    /// @dev Gets account's balance\r\n    /// @param _addr Address of the account\r\n    /// @return Account balance\r\n    function balanceOf(address _addr) \r\n        public\r\n        constant \r\n        returns (uint256) {\r\n        return balances[_addr];\r\n    }\r\n    \r\n    /// @dev check address is approved investor\r\n    /// @param _addr address\r\n    function isApprovedInvestor(address _addr)\r\n        public\r\n        constant\r\n        returns (bool) {\r\n        return approvedInvestorList[_addr];\r\n    }\r\n    \r\n    /// @dev get ETH deposit\r\n    /// @param _addr address get deposit\r\n    /// @return amount deposit of an buyer\r\n    function getDeposit(address _addr)\r\n        public\r\n        constant\r\n        returns(uint256){\r\n        return deposit[_addr];\r\n}\r\n    \r\n    /// @dev Adds list of new investors to the investors list and approve all\r\n    /// @param newInvestorList Array of new investors addresses to be added\r\n    function addInvestorList(address[] newInvestorList)\r\n        onlyOwner\r\n        public {\r\n        for (uint256 i = 0; i < newInvestorList.length; i++){\r\n            approvedInvestorList[newInvestorList[i]] = true;\r\n        }\r\n    }\r\n\r\n    /// @dev Removes list of investors from list\r\n    /// @param investorList Array of addresses of investors to be removed\r\n    function removeInvestorList(address[] investorList)\r\n        onlyOwner\r\n        public {\r\n        for (uint256 i = 0; i < investorList.length; i++){\r\n            approvedInvestorList[investorList[i]] = false;\r\n        }\r\n    }\r\n \r\n    /// @dev Transfers the balance from msg.sender to an account\r\n    /// @param _to Recipient address\r\n    /// @param _amount Transfered amount in unit\r\n    /// @return Transfer status\r\n    function transfer(address _to, uint256 _amount)\r\n        public \r\n        isTradable\r\n        returns (bool) {\r\n        // if sender's balance has enough unit and amount >= 0, \r\n        //      and the sum is not overflow,\r\n        // then do transfer \r\n        if ( (balances[msg.sender] >= _amount) &&\r\n             (_amount >= 0) && \r\n             (balances[_to] + _amount > balances[_to]) ) {  \r\n\r\n            balances[msg.sender] -= _amount;\r\n            balances[_to] += _amount;\r\n            Transfer(msg.sender, _to, _amount);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n     \r\n    // Send _value amount of tokens from address _from to address _to\r\n    // The transferFrom method is used for a withdraw workflow, allowing contracts to send\r\n    // tokens on your behalf, for example to \"deposit\" to a contract address and/or to charge\r\n    // fees in sub-currencies; the command should fail unless the _from account has\r\n    // deliberately authorized the sender of the message via some mechanism; we propose\r\n    // these standardized APIs for approval:\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _amount\r\n    )\r\n    public\r\n    isTradable\r\n    returns (bool success) {\r\n        if (balances[_from] >= _amount\r\n            && allowed[_from][msg.sender] >= _amount\r\n            && _amount > 0\r\n            && balances[_to] + _amount > balances[_to]) {\r\n            balances[_from] -= _amount;\r\n            allowed[_from][msg.sender] -= _amount;\r\n            balances[_to] += _amount;\r\n            Transfer(_from, _to, _amount);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n    \r\n    // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\r\n    // If this function is called again it overwrites the current allowance with _value.\r\n    function approve(address _spender, uint256 _amount) \r\n        public\r\n        isTradable\r\n        returns (bool success) {\r\n        allowed[msg.sender][_spender] = _amount;\r\n        Approval(msg.sender, _spender, _amount);\r\n        return true;\r\n    }\r\n    \r\n    // get allowance\r\n    function allowance(address _owner, address _spender) \r\n        public\r\n        constant \r\n        returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n    \r\n    /// @dev Withdraws Ether in contract (Owner only)\r\n    /// @return Status of withdrawal\r\n    function withdraw() onlyOwner \r\n        public \r\n        returns (bool) {\r\n        return owner.send(this.balance);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"newMaximumBuy\",\"type\":\"uint256\"}],\"name\":\"setMaximumBuy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"turnOffSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"turnOnTradable\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newIcoPercent\",\"type\":\"uint256\"}],\"name\":\"setIcoPercent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_icoSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyGifto\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_icoPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tradable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newBuyPrice\",\"type\":\"uint256\"}],\"name\":\"setBuyPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_minimumBuy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_originalBuyPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_maximumBuy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"isApprovedInvestor\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"investorList\",\"type\":\"address[]\"}],\"name\":\"removeInvestorList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalTokenSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newInvestorList\",\"type\":\"address[]\"}],\"name\":\"addInvestorList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getDeposit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"turnOnSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_selling\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"Gifto","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://28550519de6b92c153df0e1238e0c64fb6b7fcd6602017e074ab41f07bd77753"}]}