{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\ncontract EtherDelta {\r\n\r\n  function deposit() payable {\r\n\r\n  }\r\n\r\n  function withdraw(uint amount) {\r\n\r\n  }\r\n\r\n  function depositToken(address token, uint amount) {\r\n  \r\n  }\r\n\r\n  function withdrawToken(address token, uint amount) {\r\n\r\n  }\r\n\r\n  function trade(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, address user, uint8 v, bytes32 r, bytes32 s, uint amount) {\r\n   \r\n  }\r\n}\r\n\r\ncontract ArbStation {\r\n    address deltaContract = 0x8d12A197cB00D4747a1fe03395095ce2A5CC6819;\r\n    EtherDelta delta;\r\n    \r\n    address owner;\r\n    \r\n    modifier onlyOwner {\r\n        require (msg.sender == owner);\r\n        _;\r\n    }\r\n    \r\n    function ArbStation() public {\r\n        delta = EtherDelta(deltaContract);\r\n        owner = msg.sender;\r\n    }\r\n    \r\n    function withdraw() external onlyOwner {\r\n        owner.transfer(this.balance);\r\n    }\r\n    \r\n    function depositDelta() payable external onlyOwner {\r\n        delta.deposit.value(msg.value)();\r\n    }\r\n    \r\n    function withdrawDelta(uint amount) external onlyOwner {\r\n        delta.withdraw(amount);\r\n    }\r\n    \r\n    function withdrawAtOnce(uint amount) external onlyOwner {\r\n        delta.withdraw(amount);\r\n        owner.transfer(this.balance);\r\n    }\r\n    \r\n    function arbTrade(address[] addressList, uint[] uintList, uint8[] uint8List, bytes32[] bytes32List) external {\r\n        //first trade\r\n        //tokenGet = addressList[0]\r\n        //amountGet = uintList[0]\r\n        //tokenGive = addressList[1]\r\n        //amountGive = uintList[1]\r\n        //expires = uintList[2]\r\n        //nonce = uintList[3]\r\n        //user = addressList[2]\r\n        //v = uint8List[0]\r\n        //r = bytes32List[0]\r\n        //s = bytes32List[1]\r\n        //amount = uintList[4]\r\n        \r\n        //second trade\r\n        //tokenGet = addressList[3]\r\n        //amountGet = uintList[5]\r\n        //tokenGive = addressList[4]\r\n        //amountGive = uintList[6]\r\n        //expires = uintList[7]\r\n        //nonce = uintList[8]\r\n        //user = addressList[5]\r\n        //v = uint8List[1]\r\n        //r = bytes32List[2]\r\n        //s = bytes32List[3]\r\n        //amount = uintList[9]\r\n        internalTrade(addressList, uintList, uint8List, bytes32List, 0);\r\n        internalTrade(addressList, uintList, uint8List, bytes32List, 1);\r\n    }\r\n    \r\n    function internalTrade(address[] addressList, uint[] uintList, uint8[] uint8List, bytes32[] bytes32List, uint flag) private {\r\n        delta.trade(addressList[0 + 3*flag], uintList[0 + 5*flag], addressList[1 + 3*flag], uintList[1 + 5*flag], uintList[2 + 5*flag], uintList[3 + 5*flag], addressList[2 + 3*flag], uint8List[0 + 1*flag], bytes32List[0 + 2*flag], bytes32List[1 + 2*flag], uintList[4 + 5*flag]);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawAtOnce\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"depositDelta\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawDelta\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addressList\",\"type\":\"address[]\"},{\"name\":\"uintList\",\"type\":\"uint256[]\"},{\"name\":\"uint8List\",\"type\":\"uint8[]\"},{\"name\":\"bytes32List\",\"type\":\"bytes32[]\"}],\"name\":\"arbTrade\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"ArbStation","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://10d321e94339fbb08ab53526ea09e1589dff85bfba5992d9ad0167e5b3e1c578"}]}