{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.0;\r\n\r\n/// ETH sent to the contract address will be split by half and sent to 2 addresses.\r\ncontract SplitIt {\r\n    struct SplitAgreement {\r\n        address from;\r\n        address to1;\r\n        address to2;\r\n    }\r\n\r\n    address private owner;\r\n\r\n    // Sender -> Agreement Owner\r\n    mapping (address => address) private senderToOwner;\r\n    // Agreement Owner -> SplitAgreement\r\n    mapping (address => SplitAgreement) private splitAgreements;\r\n\r\n    // Split sent\r\n    event Sent(address from, address to, uint amount);\r\n    // Sent failed, sender refunded\r\n    event Refunded(address from, address to, uint amount);\r\n    // Refund failed, 'agreement owner' refunded\r\n    event OwnerRefunded(address agreementOwner, address from, address to, uint amount);\r\n    // All refunds failed, the balance will be kept by the Contract Owner.\r\n    event Penalty(address agreementOwner, uint amount);\r\n\r\n    modifier onlyExecuteBy(address _account)\r\n    {\r\n        require(msg.sender == _account);\r\n        _;\r\n    }\r\n\r\n    function SplitIt() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function() payable public {\r\n        require(msg.value > 0);\r\n        // if odd number, the contract keep the difference as fee.\r\n        uint splitValue = msg.value / 2;\r\n        processSplit(msg.sender, splitValue);\r\n    }\r\n\r\n    function createSplitAgreement(address from, address to1, address to2) public {\r\n        // Require the sender address to not be in use.\r\n        require(senderToOwner[from] == address(0));\r\n        splitAgreements[msg.sender].from = from;\r\n        splitAgreements[msg.sender].to1 = to1;\r\n        splitAgreements[msg.sender].to2 = to2;\r\n        senderToOwner[from] = msg.sender;\r\n    }\r\n\r\n    function endSplitAgreement() public {\r\n        address from = splitAgreements[msg.sender].from;\r\n        senderToOwner[from] = address(0);\r\n        splitAgreements[msg.sender].from = address(0);\r\n        splitAgreements[msg.sender].to1 = address(0);\r\n        splitAgreements[msg.sender].to2 = address(0);\r\n    }\r\n\r\n    function collectFees() public onlyExecuteBy(owner) {\r\n        msg.sender.transfer(this.balance);\r\n    }\r\n\r\n    function processSplit(address from, uint amount) private {\r\n        address agreementOwner = senderToOwner[from];\r\n        require(agreementOwner != address(0));\r\n        processSend(from, splitAgreements[agreementOwner].to1, amount);\r\n        processSend(from, splitAgreements[agreementOwner].to2, amount);\r\n    }\r\n\r\n    function processSend(address from, address to, uint amount) private {\r\n        if (to.send(amount)) { // Try to send\r\n            Sent(from, to, amount);\r\n        } else if(from.send(amount)) { // Try to refund the sender\r\n            Refunded(from, to, amount);\r\n        } else if(senderToOwner[from].send(amount)) { // Try to refund the agreement owner\r\n            OwnerRefunded(senderToOwner[from], from, to, amount);\r\n        } else { // The contract owner keeps the funds.\r\n            Penalty(senderToOwner[from], amount);\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"endSplitAgreement\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"collectFees\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to1\",\"type\":\"address\"},{\"name\":\"to2\",\"type\":\"address\"}],\"name\":\"createSplitAgreement\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Sent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Refunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"agreementOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"OwnerRefunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"agreementOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Penalty\",\"type\":\"event\"}]","ContractName":"SplitIt","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://1d0412e64e621627dd0a8a75acc4c3f69bd2bfe1a29ccff72b96ff489a1adc70"}]}