{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\n/**\r\n *  MXL PRE SALE CONTRACTS\r\n * \r\n *  Adapted from SIKOBA PRE SALE CONTRACTS\r\n *\r\n**/\r\n\r\n/**\r\n * SIKOBA PRE SALE CONTRACTS\r\n *\r\n * Version 0.1\r\n *\r\n * Author Roland Kofler, Alex Kampa, Bok 'BokkyPooBah' Khoo\r\n *\r\n * MIT LICENSE Copyright 2017 Sikoba Ltd\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n **/\r\n\r\n/**\r\n *\r\n * Important information about the MXL Token pre sale\r\n *\r\n * For details about the MXL token pre sale, and in particular to find out\r\n * about risks and limitations, please visit:\r\n *\r\n * https://marketxl.io/en/pre-sale/\r\n *\r\n **/\r\n\r\n\r\ncontract Owned {\r\n    address public owner;\r\n\r\n    function Owned() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        if (msg.sender != owner) {\r\n            revert();\r\n        }\r\n        _;\r\n    }\r\n}\r\n\r\n/// ----------------------------------------------------------------------------------------\r\n/// @title MXL PRE SALE CONTRACT\r\n/// @author Carlos Afonso\r\n/// @dev Changes to this contract will invalidate any security audits done before.\r\n/// It is MANDATORY to protocol audits in the \"Security reviews done\" section\r\n///  # Security checklists to use in each review:\r\n///  - Consensys checklist https://github.com/ConsenSys/smart-contract-best-practices\r\n///  - Roland Kofler's checklist https://github.com/rolandkofler/ether-security\r\n///  - Read all of the code and use creative and lateral thinking to discover bugs\r\n///  # Security reviews done:\r\n///  Date         Auditors       Short summary of the review executed\r\n///  Mar 03 2017 - Roland Kofler  - NO SECURITY REVIEW DONE\r\n///  Mar 07 2017 - Roland Kofler, - Informal Security Review; added overflow protections;\r\n///                Alex Kampa       fixed wrong inequality operators; added maximum amount\r\n///                                 per transactions\r\n///  Mar 07 2017 - Alex Kampa     - Some code clean up; removed restriction of\r\n///                                 MINIMUM_PARTICIPATION_AMOUNT for preallocations\r\n///  Mar 08 2017 - Bok Khoo       - Complete security review and modifications\r\n///  Mar 09 2017 - Roland Kofler  - Check the diffs between MAR 8 and MAR 7 versions\r\n///  Mar 12 2017 - Bok Khoo       - Renamed TOTAL_PREALLOCATION_IN_WEI\r\n///                                 to TOTAL_PREALLOCATION.\r\n///                                 Removed isPreAllocation from addBalance(...)\r\n///  Mar 13 2017 - Bok Khoo       - Made dates in comments consistent\r\n///  Apr 05 2017 - Roland Kofler  - removed the necessity of pre sale end before withdrawing\r\n///                                 thus price drops during pre sale can be mitigated\r\n///  Apr 24 2017 - Alex Kampa     - edited constants and added pre allocation amounts\r\n///\r\n///  Dec 22 2017 - Carlos Afonso  - edited constants removed pre allocation amounts\r\n///                                 \r\n/// ----------------------------------------------------------------------------------------\r\ncontract MXLPresale is Owned {\r\n    // -------------------------------------------------------------------------------------\r\n    // TODO Before deployment of contract to Mainnet\r\n    // 1. Confirm MINIMUM_PARTICIPATION_AMOUNT and MAXIMUM_PARTICIPATION_AMOUNT below\r\n    // 2. Adjust PRESALE_MINIMUM_FUNDING and PRESALE_MAXIMUM_FUNDING to desired EUR\r\n    //    equivalents\r\n    // 3. Adjust PRESALE_START_DATE and confirm the presale period\r\n    // 4. Test the deployment to a dev blockchain or Testnet to confirm the constructor\r\n    //    will not run out of gas as this will vary with the number of preallocation\r\n    //    account entries\r\n    // 5. A stable version of Solidity has been used. Check for any major bugs in the\r\n    //    Solidity release announcements after this version.    \r\n    // -------------------------------------------------------------------------------------\r\n\r\n    // Keep track of the total funding amount\r\n    uint256 public totalFunding;\r\n\r\n    // Minimum and maximum amounts per transaction for public participants\r\n    uint256 public constant MINIMUM_PARTICIPATION_AMOUNT = 0.009 ether; \r\n    uint256 public constant MAXIMUM_PARTICIPATION_AMOUNT = 90 ether;\r\n\r\n    // Minimum and maximum goals of the pre sale\r\n\t// Based on Budget of 300k€ to 450k€ at 614€ per ETH on 2018-12-28\r\n    uint256 public constant PRESALE_MINIMUM_FUNDING = 486 ether;\r\n    uint256 public constant PRESALE_MAXIMUM_FUNDING = 720 ether;\r\n\t\r\n\r\n    // Total preallocation in wei\r\n    //uint256 public constant TOTAL_PREALLOCATION = 999.999 ether; // no preallocation\r\n\r\n    // Public pre sale periods  \r\n\t// Starts 2018-01-03T00:00:00+00:00 in ISO 8601\r\n    uint256 public constant PRESALE_START_DATE = 1514937600;\r\n\t\r\n\t// Ends 2018-03-27T18:00:00+00:00 in ISO 8601\r\n    uint256 public constant PRESALE_END_DATE = 1522173600;\r\n\t\r\n\t// Limit 30% Bonus 2018-02-18T00:00:00+00:00 in ISO 8601\r\n\t//uint256 public constant PRESALE_30BONUS_END = 1518912000;  // for reference only\r\n\t// Limit 15% Bonus 2018-03-09T00:00:00+00:00 in ISO 8601\r\n\t//uint256 public constant PRESALE_15BONUS_END = 1520553000;  // for reference only\r\n\t\r\n\r\n    // Owner can clawback after a date in the future, so no ethers remain\r\n    // trapped in the contract. This will only be relevant if the\r\n    // minimum funding level is not reached\r\n    // 2018-04-27T00:00:00+00:00 in ISO 8601\r\n    uint256 public constant OWNER_CLAWBACK_DATE = 1524787200; \r\n\r\n    /// @notice Keep track of all participants contributions, including both the\r\n    ///         preallocation and public phases\r\n    /// @dev Name complies with ERC20 token standard, etherscan for example will recognize\r\n    ///      this and show the balances of the address\r\n    mapping (address => uint256) public balanceOf;\r\n\r\n    /// @notice Log an event for each funding contributed during the public phase\r\n    /// @notice Events are not logged when the constructor is being executed during\r\n    ///         deployment, so the preallocations will not be logged\r\n    event LogParticipation(address indexed sender, uint256 value, uint256 timestamp);\r\n\r\n    function MXLPresale () public payable {\r\n\t\t// no preallocated \r\n        //assertEquals(TOTAL_PREALLOCATION, msg.value);\r\n        // Pre-allocations\r\n        //addBalance(0xe902741cD4666E4023b7E3AB46D3DE2985c996f1, 0.647 ether);\r\n        //addBalance(0x98aB52E249646cA2b013aF8F2E411bB90C1c9b4d, 66.98333494 ether);\r\n        //addBalance(0x96050f871811344Dd44C2F5b7bc9741Dff296f5e, 10 ether);\r\n        //assertEquals(TOTAL_PREALLOCATION, totalFunding);\r\n    }\r\n\r\n    /// @notice A participant sends a contribution to the contract's address\r\n    ///         between the PRESALE_STATE_DATE and the PRESALE_END_DATE\r\n    /// @notice Only contributions between the MINIMUM_PARTICIPATION_AMOUNT and\r\n    ///         MAXIMUM_PARTICIPATION_AMOUNT are accepted. Otherwise the transaction\r\n    ///         is rejected and contributed amount is returned to the participant's\r\n    ///         account\r\n    /// @notice A participant's contribution will be rejected if the pre sale\r\n    ///         has been funded to the maximum amount\r\n    function () public payable {\r\n        // A participant cannot send funds before the pre sale start date\r\n        if (now < PRESALE_START_DATE) revert();\r\n        // A participant cannot send funds after the pre sale end date\r\n        if (now > PRESALE_END_DATE) revert();\r\n        // A participant cannot send less than the minimum amount\r\n        if (msg.value < MINIMUM_PARTICIPATION_AMOUNT) revert();\r\n        // A participant cannot send more than the maximum amount\r\n        if (msg.value > MAXIMUM_PARTICIPATION_AMOUNT) revert();\r\n        // A participant cannot send funds if the pres ale has been reached the maximum\r\n        // funding amount\r\n        if (safeIncrement(totalFunding, msg.value) > PRESALE_MAXIMUM_FUNDING) revert();\r\n        // Register the participant's contribution\r\n        addBalance(msg.sender, msg.value);\r\n    }\r\n\r\n    /// @notice The owner can withdraw ethers already during pre sale,\r\n    ///         only if the minimum funding level has been reached\r\n    function ownerWithdraw(uint256 _value) external onlyOwner {\r\n        // The owner cannot withdraw if the pre sale did not reach the minimum funding amount\r\n        if (totalFunding < PRESALE_MINIMUM_FUNDING) revert();\r\n        // Withdraw the amount requested\r\n        if (!owner.send(_value)) revert();\r\n    }\r\n\r\n    /// @notice The participant will need to withdraw their funds from this contract if\r\n    ///         the pre sale has not achieved the minimum funding level\r\n    function participantWithdrawIfMinimumFundingNotReached(uint256 _value) external {\r\n        // Participant cannot withdraw before the pre sale ends\r\n        if (now <= PRESALE_END_DATE) revert();\r\n        // Participant cannot withdraw if the minimum funding amount has been reached\r\n        if (totalFunding >= PRESALE_MINIMUM_FUNDING) revert();\r\n        // Participant can only withdraw an amount up to their contributed balance\r\n        if (balanceOf[msg.sender] < _value) revert();\r\n        // Participant's balance is reduced by the claimed amount.\r\n        balanceOf[msg.sender] = safeDecrement(balanceOf[msg.sender], _value);\r\n        // Send ethers back to the participant's account\r\n        if (!msg.sender.send(_value)) revert();\r\n    }\r\n\r\n    /// @notice The owner can clawback any ethers after a date in the future, so no\r\n    ///         ethers remain trapped in this contract. This will only be relevant\r\n    ///         if the minimum funding level is not reached\r\n    function ownerClawback() external onlyOwner {\r\n        // The owner cannot withdraw before the clawback date\r\n        if (now < OWNER_CLAWBACK_DATE) revert();\r\n        // Send remaining funds back to the owner\r\n        if (!owner.send(this.balance)) revert();\r\n    }\r\n\r\n    /// @dev Keep track of participants contributions and the total funding amount\r\n    function addBalance(address participant, uint256 value) private {\r\n        // Participant's balance is increased by the sent amount\r\n        balanceOf[participant] = safeIncrement(balanceOf[participant], value);\r\n        // Keep track of the total funding amount\r\n        totalFunding = safeIncrement(totalFunding, value);\r\n        // Log an event of the participant's contribution\r\n        LogParticipation(participant, value, now);\r\n    }\r\n\r\n    /// @dev Throw an exception if the amounts are not equal\r\n    function assertEquals(uint256 expectedValue, uint256 actualValue) private pure {\r\n        if (expectedValue != actualValue) revert();\r\n    }\r\n\r\n    /// @dev Add a number to a base value. Detect overflows by checking the result is larger\r\n    ///      than the original base value.\r\n    function safeIncrement(uint256 base, uint256 increment) private pure returns (uint256) {\r\n        uint256 result = base + increment;\r\n        if (result < base) revert();\r\n        return result;\r\n    }\r\n\r\n    /// @dev Subtract a number from a base value. Detect underflows by checking that the result\r\n    ///      is smaller than the original base value\r\n    function safeDecrement(uint256 base, uint256 increment) private pure returns (uint256) {\r\n        uint256 result = base - increment;\r\n        if (result > base) revert();\r\n        return result;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"participantWithdrawIfMinimumFundingNotReached\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MINIMUM_PARTICIPATION_AMOUNT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"ownerWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRESALE_MINIMUM_FUNDING\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"OWNER_CLAWBACK_DATE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRESALE_MAXIMUM_FUNDING\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAXIMUM_PARTICIPATION_AMOUNT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"ownerClawback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRESALE_END_DATE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRESALE_START_DATE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalFunding\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"LogParticipation\",\"type\":\"event\"}]","ContractName":"MXLPresale","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://0dbdf79c098964494b72ba8fbf7f4b84733be3398dc7dda05947a00b7f6fbb75"}]}