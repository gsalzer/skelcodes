{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\ncontract ERC20 {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    \r\n}\r\n\r\n\r\ncontract BasicToken is ERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n\r\n    /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\r\n            balances[msg.sender] = balances[msg.sender].sub(_value);\r\n            balances[_to] = balances[_to].add(_value);\r\n            Transfer(msg.sender, _to, _value);\r\n            return true;\r\n        }else {\r\n            return false;\r\n        }\r\n    }\r\n    \r\n\r\n    /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amout of tokens to be transfered\r\n   */\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n      if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\r\n        uint256 _allowance = allowed[_from][msg.sender];\r\n        allowed[_from][msg.sender] = _allowance.sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        balances[_from] = balances[_from].sub(_value);\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n      } else {\r\n        return false;\r\n      }\r\n}\r\n\r\n\r\n    /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of. \r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n\r\n    function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n\r\n    // To change the approve amount you first have to reduce the addresses`\r\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n    //  already 0 to mitigate the race condition described here:\r\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifing the amount of tokens still avaible for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n\r\n}\r\n\r\ncontract ANOToken is BasicToken {\r\n\r\nusing SafeMath for uint256;\r\n\r\nstring public name = \"Anonium\";                                 // Name of the token\r\nstring public symbol = \"ANO\";                                   // Symbol of the token\r\nuint8 public decimals = 18;                                     // Decimals\r\nuint256 public totalSupply = 21000000000 * 10**18;              // Total supply of SPC Tokens  \r\n\r\n//Variables\r\nuint256 public tokensAllocatedToCrowdFund;                      // variable to track the allocations of the token to crowdfund\r\nuint256 public totalAllocatedTokens;                            // variable to track the supply in to the market\r\n\r\n//Address\r\naddress public crowdFundAddress;                                // Address of the crowdfund\r\naddress public founderMultiSigAddress;                          // Address of the founder\r\n\r\n//events\r\nevent ChangeFoundersWalletAddress(uint256  _blockTimeStamp, address indexed _foundersWalletAddress);\r\n\r\n//modifiers\r\n\r\n  modifier onlyCrowdFundAddress() {\r\n    require(msg.sender == crowdFundAddress);\r\n    _;\r\n  }\r\n\r\n  modifier nonZeroAddress(address _to) {\r\n    require(_to != 0x0);\r\n    _;\r\n  }\r\n\r\n  modifier onlyFounders() {\r\n    require(msg.sender == founderMultiSigAddress);\r\n    _;\r\n  }\r\n\r\n\r\n  \r\n   // creation of the token contract \r\n   function ANOToken (address _crowdFundAddress) public {\r\n    crowdFundAddress = _crowdFundAddress;\r\n    founderMultiSigAddress = msg.sender;\r\n\r\n    tokensAllocatedToCrowdFund = totalSupply;                   // 100 % allocation of totalSupply\r\n\r\n    // Assigned balances to respective stakeholders\r\n    balances[crowdFundAddress] = tokensAllocatedToCrowdFund;\r\n  \r\n  }\r\n\r\n// function to keep track of the total token allocation\r\n  function changeSupply(uint256 _amount) public onlyCrowdFundAddress {\r\n    totalAllocatedTokens += _amount;\r\n  }\r\n\r\n// function to change founder multisig wallet address            \r\n  function changeFounderMultiSigAddress(address _newFounderMultiSigAddress) public onlyFounders nonZeroAddress(_newFounderMultiSigAddress) {\r\n    founderMultiSigAddress = _newFounderMultiSigAddress;\r\n    ChangeFoundersWalletAddress(now, founderMultiSigAddress);\r\n  }\r\n\r\n  /**\r\n    @dev `burnToken` used to burn the remianing token after the end of crowdsale\r\n    it only be called by the crowdfund address only \r\n   */\r\n\r\n  function burnToken() public onlyCrowdFundAddress returns (bool) {\r\n    totalSupply = totalSupply.sub(balances[msg.sender]);\r\n    balances[msg.sender] = 0;\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\ncontract ANOCrowdsale {\r\n\r\nusing SafeMath for uint256;\r\n\r\nANOToken token;                                                  // Token variable\r\n\r\nuint256 public startDate;                                        // Start date of the crowdsale\r\nuint256 public endDate;                                          // End date of crowdsale\r\nuint256 private weekNo = 0;                                       // Flag variable to track the week no.\r\nuint256 public allocatedToken = 21000000000 * 10 ** 18;          // Total tokens allocated to crowdsale \r\nuint256 private tokenAllocatedForWeek;                           // Variable to track the allocation per week\r\nuint256 private tokenSoldForWeek;                                // Token sold per week\r\nuint256 public ethRaised;                                        // Public variable to track the amount of ETH raised\r\nuint32 public tokenRate = 6078;                                  // Initialization of token rate \r\nuint32 public appreciationRate = 1216;                           // The rate of token will increased by that much amount\r\nbool private isTokenSet = false;                                 // Flag variable to track the token address\r\n\r\naddress public founderAddress;                                   // Founder address which will control the operations of the crowdsale\r\naddress public beneficiaryAddress;                               // Address where ETH get trasferred  \r\n\r\n/**\r\n    @note structure for keeping the weekly data to track\r\n    the week rate of the crowdsale\r\n */\r\nstruct weeklyData {\r\n    uint256 startTime;\r\n    uint256 endTime;\r\n    uint32 weekRate;\r\n}\r\n\r\n// mapping is used to store the weeklyData corresponds to integer\r\nmapping(uint256 => weeklyData) public weeklyRate;\r\n\r\n//Event \r\nevent LogWeekRate(uint32 _weekRate, uint256 _timestamp);\r\n\r\n// Modifier for validating the time lapse should between in start and end date\r\nmodifier isBetween() {\r\n    require(now >= startDate && now <= endDate);\r\n    _;\r\n}\r\n\r\n// Modifier for validating the msg.sender should be founder address\r\nmodifier onlyFounder() {\r\n    require(msg.sender == founderAddress);\r\n    _;\r\n}\r\n\r\n//Event \r\nevent TokenBought(address indexed _investor, uint256 _tokenQuantity);\r\n\r\n/**\r\n    @dev Fallback function\r\n    minimum 2,00,000 gas should be used at the time calling this function \r\n */\r\n\r\nfunction () public payable {\r\n    buyTokens(msg.sender);\r\n}\r\n\r\n/**\r\n    @dev Private function to set the weekly rate it called only once\r\n    in the constructor.\r\n    @return bool\r\n */\r\n\r\nfunction setWeeklyRate() private returns (bool) {\r\n    for (uint32 i = 0; i < 40; ++i) {\r\n        uint32 weekRate = tokenRate + appreciationRate * i;\r\n        uint256 weekStartTime = now + i * 1 weeks;\r\n        uint256 weekEndTime = now + (i+1) * 1 weeks;\r\n        weeklyRate[i] = weeklyData(weekStartTime, weekEndTime, weekRate);\r\n    }\r\n    return true;\r\n}\r\n\r\n/**\r\n    @dev Private function to get the weekly rate \r\n    as per the week no.\r\n    @return uint32\r\n */\r\n\r\nfunction getWeeklyRate() private returns (uint32) {\r\n   if (now <= weeklyRate[weekNo].endTime && now >= weeklyRate[weekNo].startTime) {\r\n       return weeklyRate[weekNo].weekRate;\r\n   } if (now <= weeklyRate[weekNo + 1].endTime && now >= weeklyRate[weekNo + 1].startTime ) {\r\n        weekNo = weekNo + 1;\r\n        setWeeklyAllocation();\r\n        return weeklyRate[weekNo + 1].weekRate;\r\n   } else {\r\n       uint256 increasedBy = now - startDate;\r\n       uint256 weekIncreasedBy = increasedBy.div(604800);    // 7 days seconds 7 * 24 * 60 * 60\r\n       setWeeklyAllocation();\r\n       weekNo = weekNo.add(weekIncreasedBy);\r\n       LogWeekRate(weeklyRate[weekNo].weekRate, now);\r\n       return weeklyRate[weekNo].weekRate;\r\n   }\r\n}\r\n\r\n// function to transfer the funds to founders account\r\nfunction fundTransfer(uint256 weiAmount) internal {\r\n        beneficiaryAddress.transfer(weiAmount);\r\n    }\r\n\r\n/**\r\n    @dev Simple function to track the token allocation for a week\r\n */\r\nfunction setWeeklyAllocation() private {\r\n    tokenAllocatedForWeek = (tokenAllocatedForWeek + (tokenAllocatedForWeek - tokenSoldForWeek)).div(2);\r\n    tokenSoldForWeek = 0;\r\n}\r\n\r\n/**\r\n    @dev ANOCrowdsale constructor to set the founder and beneficiary\r\n    as well as to set start & end date.\r\n    @param _founderAddress address which operates all the admin functionality of the contract\r\n    @param _beneficiaryAddress address where all invested amount get transferred \r\n */\r\n\r\nfunction ANOCrowdsale (address _founderAddress, address _beneficiaryAddress) public {\r\n    startDate = now;\r\n    endDate = now + 40 weeks;\r\n    founderAddress = _founderAddress;\r\n    beneficiaryAddress = _beneficiaryAddress;\r\n    require(setWeeklyRate());\r\n    tokenAllocatedForWeek = allocatedToken.div(2);\r\n}\r\n\r\n/**\r\n    @dev `setTokenAddress` used to assign the token address into the variable\r\n    only be called by founder and called only once.\r\n    @param _tokenAddress address of the token which will be distributed using this crowdsale\r\n    @return bool\r\n */\r\n\r\nfunction setTokenAddress (address _tokenAddress) public onlyFounder returns (bool) {\r\n    require(isTokenSet == false);\r\n    token = ANOToken(_tokenAddress);\r\n    isTokenSet = !isTokenSet;\r\n    return true;\r\n}\r\n\r\n/**\r\n    @dev `buyTokens` function used to buy the token\r\n    @param _investor address of the investor where ROI will transferred\r\n    @return bool\r\n */\r\n\r\nfunction buyTokens(address _investor) \r\npublic \r\nisBetween\r\npayable\r\nreturns (bool) \r\n{\r\n   require(isTokenSet == true);\r\n   require(_investor != address(0));\r\n   uint256 rate = uint256(getWeeklyRate());\r\n   uint256 tokenAmount = (msg.value.div(rate)).mul(10 ** 8);\r\n   require(tokenAllocatedForWeek >= tokenSoldForWeek + tokenAmount);\r\n   fundTransfer(msg.value);\r\n   require(token.transfer(_investor, tokenAmount));\r\n   tokenSoldForWeek = tokenSoldForWeek.add(tokenAmount);\r\n   token.changeSupply(tokenAmount);\r\n   ethRaised = ethRaised.add(msg.value);\r\n   TokenBought(_investor, tokenAmount);\r\n   return true;\r\n}\r\n\r\n/**\r\n    @dev `getWeekNo` public function to get the current week no\r\n */\r\n\r\nfunction getWeekNo() public view returns (uint256) {\r\n    return weekNo;\r\n}\r\n\r\n/**\r\n    @dev `endCrowdfund` function used to end the crowdfund\r\n    called only by the founder and remiaining tokens get burned \r\n */\r\n\r\nfunction endCrowdfund() public onlyFounder returns (bool) {\r\n    require(isTokenSet == true);\r\n    require(now > endDate);\r\n    require(token.burnToken());\r\n    return true;\r\n}\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"startDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"setTokenAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"endCrowdfund\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"founderAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getWeekNo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"appreciationRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"weeklyRate\",\"outputs\":[{\"name\":\"startTime\",\"type\":\"uint256\"},{\"name\":\"endTime\",\"type\":\"uint256\"},{\"name\":\"weekRate\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beneficiaryAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allocatedToken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_investor\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_founderAddress\",\"type\":\"address\"},{\"name\":\"_beneficiaryAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_weekRate\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"LogWeekRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenQuantity\",\"type\":\"uint256\"}],\"name\":\"TokenBought\",\"type\":\"event\"}]","ContractName":"ANOCrowdsale","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000040fbf20f764ee93517ddf311cc068818d37946330000000000000000000000001c58b32029219834d4d488039eaae5270e937adf","Library":"","SwarmSource":"bzzr://486fe17658679c50e3e9224fff77b52bbbca54f6403e88227fc5f3cb329d38a0"}]}