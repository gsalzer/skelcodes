{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\ninterface token {\r\n    function transfer(address receiver, uint amount) public;\r\n    function balanceOf(address _owner) public constant returns (uint balance);\r\n}\r\n\r\ncontract Crowdsale {\r\n    address public beneficiary = msg.sender;\r\n    uint public price;\r\n    token public tokenReward;\r\n    bool crowdsaleClosed = false;\r\n\r\n    event FundTransfer(address indexed backer, uint amount, bool isContribution);\r\n\r\n    modifier onlyBy(address _account) { require(msg.sender == _account); _; }\r\n\r\n\r\n    function Crowdsale(\r\n        uint szaboCostOfEachToken,\r\n        address addressOfTokenUsedAsReward\r\n    ) public {\r\n        price = szaboCostOfEachToken * 1 szabo;\r\n        tokenReward = token(addressOfTokenUsedAsReward);\r\n    }\r\n\r\n    /**\r\n     * Fallback function\r\n     *\r\n     * The function without name is the default function that is called whenever anyone sends funds to a contract\r\n     */\r\n    function () payable public{\r\n        require(!crowdsaleClosed);\r\n        uint amount = msg.value;\r\n        uint tokenAmount = 1 ether * amount / price;\r\n        tokenReward.transfer(msg.sender, tokenAmount);\r\n        FundTransfer(msg.sender, amount, true);\r\n    }\r\n\r\n    function endCrowdsale() onlyBy(beneficiary) public{\r\n        crowdsaleClosed = true;\r\n    }\r\n\r\n    function withdrawEther() onlyBy(beneficiary) public {\r\n        beneficiary.transfer(this.balance);\r\n    }\r\n\r\n    function withdrawTokens() onlyBy(beneficiary) public {\r\n        uint tokenBalance = tokenReward.balanceOf(this);\r\n\r\n        tokenReward.transfer(beneficiary, tokenBalance);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"endCrowdsale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenReward\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"szaboCostOfEachToken\",\"type\":\"uint256\"},{\"name\":\"addressOfTokenUsedAsReward\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"backer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"isContribution\",\"type\":\"bool\"}],\"name\":\"FundTransfer\",\"type\":\"event\"}]","ContractName":"Crowdsale","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000003e8000000000000000000000000b7fe7b2b723020cf668db4f78992d10f81990fc4","Library":"","SwarmSource":"bzzr://35ddb1cd52ec7e55637c36c30579acccce1f2e63e76af2c2f9296bbe4c8138da"}]}