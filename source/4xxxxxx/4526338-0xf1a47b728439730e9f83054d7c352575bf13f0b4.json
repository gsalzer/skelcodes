{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.15;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract ERC20 {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) constant returns (uint256);\r\n  function transfer(address to, uint256 value) returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  function allowance(address owner, address spender) constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) returns (bool);\r\n  function approve(address spender, uint256 value) returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    \r\n}\r\n\r\ncontract BasicToken is ERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n    \r\n    modifier nonZeroEth(uint _value) {\r\n      require(_value > 0);\r\n      _;\r\n    }\r\n\r\n    modifier onlyPayloadSize() {\r\n      require(msg.data.length >= 68);\r\n      _;\r\n    }\r\n    /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n\r\n    function transfer(address _to, uint256 _value) nonZeroEth(_value) onlyPayloadSize returns (bool) {\r\n        if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]){\r\n            balances[msg.sender] = balances[msg.sender].sub(_value);\r\n            balances[_to] = balances[_to].add(_value);\r\n            Transfer(msg.sender, _to, _value);\r\n            return true;\r\n        }else{\r\n            return false;\r\n        }\r\n    }\r\n    \r\n\r\n    /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amout of tokens to be transfered\r\n   */\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) nonZeroEth(_value) onlyPayloadSize returns (bool) {\r\n      if(balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]){\r\n        uint256 _allowance = allowed[_from][msg.sender];\r\n        allowed[_from][msg.sender] = _allowance.sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        balances[_from] = balances[_from].sub(_value);\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n      }else{\r\n        return false;\r\n      }\r\n}\r\n\r\n\r\n    /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of. \r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n  function approve(address _spender, uint256 _value) returns (bool) {\r\n\r\n    // To change the approve amount you first have to reduce the addresses`\r\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n    //  already 0 to mitigate the race condition described here:\r\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifing the amount of tokens still avaible for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n}\r\n\r\n\r\ncontract RPTToken is BasicToken {\r\n\r\nusing SafeMath for uint256;\r\n\r\nstring public name = \"RPT Token\";                  //name of the token\r\nstring public symbol = \"RPT\";                      // symbol of the token\r\nuint8 public decimals = 18;                        // decimals\r\nuint256 public totalSupply = 1000000000 * 10**18;  // total supply of RPT Tokens  \r\n\r\n// variables\r\nuint256 public keyEmployeeAllocation;               // fund allocated to key employee\r\nuint256 public totalAllocatedTokens;                // variable to regulate the funds allocation\r\nuint256 public tokensAllocatedToCrowdFund;          // funds allocated to crowdfund\r\n\r\n// addresses\r\naddress public founderMultiSigAddress = 0xf96E905091d38ca25e06C014fE67b5CA939eE83D;    // multi sign address of founders which hold \r\naddress public crowdFundAddress;                    // address of crowdfund contract\r\n\r\n//events\r\nevent ChangeFoundersWalletAddress(uint256  _blockTimeStamp, address indexed _foundersWalletAddress);\r\nevent TransferPreAllocatedFunds(uint256  _blockTimeStamp , address _to , uint256 _value);\r\n\r\n//modifiers\r\n  modifier onlyCrowdFundAddress() {\r\n    require(msg.sender == crowdFundAddress);\r\n    _;\r\n  }\r\n\r\n  modifier nonZeroAddress(address _to) {\r\n    require(_to != 0x0);\r\n    _;\r\n  }\r\n\r\n  modifier onlyFounders() {\r\n    require(msg.sender == founderMultiSigAddress);\r\n    _;\r\n  }\r\n\r\n   // creation of the token contract \r\n   function RPTToken (address _crowdFundAddress) {\r\n    crowdFundAddress = _crowdFundAddress;\r\n\r\n    // Token Distribution  \r\n    tokensAllocatedToCrowdFund = 70 * 10 ** 25;        // 70 % allocation of totalSupply\r\n    keyEmployeeAllocation = 30 * 10 ** 25;             // 30 % allocation of totalSupply\r\n\r\n    // Assigned balances to respective stakeholders\r\n    balances[founderMultiSigAddress] = keyEmployeeAllocation;\r\n    balances[crowdFundAddress] = tokensAllocatedToCrowdFund;\r\n\r\n    totalAllocatedTokens = balances[founderMultiSigAddress];\r\n  }\r\n\r\n// function to keep track of the total token allocation\r\n  function changeTotalSupply(uint256 _amount) onlyCrowdFundAddress {\r\n    totalAllocatedTokens = totalAllocatedTokens.add(_amount);\r\n  }\r\n\r\n// function to change founder multisig wallet address            \r\n  function changeFounderMultiSigAddress(address _newFounderMultiSigAddress) onlyFounders nonZeroAddress(_newFounderMultiSigAddress) {\r\n    founderMultiSigAddress = _newFounderMultiSigAddress;\r\n    ChangeFoundersWalletAddress(now, founderMultiSigAddress);\r\n  }\r\n \r\n\r\n}\r\n\r\n\r\ncontract RPTCrowdsale {\r\n\r\n    using SafeMath for uint256;\r\n    \r\n    RPTToken public token;                                          // Token variable\r\n    //variables\r\n   \r\n    uint256 public totalWeiRaised;                                  // Flag to track the amount raised\r\n    uint32 public exchangeRate = 3000;                              // calculated using priceOfEtherInUSD/priceOfRPTToken \r\n    uint256 public preDistriToAcquiantancesStartTime = 1510876801;  // Friday, 17-Nov-17 00:00:01 UTC\r\n    uint256 public preDistriToAcquiantancesEndTime = 1511827199;    // Monday, 27-Nov-17 23:59:59 UTC\r\n    uint256 public presaleStartTime = 1511827200;                   // Tuesday, 28-Nov-17 00:00:00 UTC\r\n    uint256 public presaleEndTime = 1513036799;                     // Monday, 11-Dec-17 23:59:59 UTC\r\n    uint256 public crowdfundStartTime = 1513036800;                 // Tuesday, 12-Dec-17 00:00:00 UTC\r\n    uint256 public crowdfundEndTime = 1515628799;                   // Wednesday, 10-Jan-18 23:59:59 UTC\r\n    bool internal isTokenDeployed = false;                          // Flag to track the token deployment\r\n    \r\n    // addresses\r\n    address public founderMultiSigAddress;                          // Founders multi sign address\r\n    address public remainingTokenHolder;                            // Address to hold the remaining tokens after crowdfund end\r\n    address public beneficiaryAddress;                              // All funds are transferred to this address\r\n    \r\n\r\n    enum State { Acquiantances, PreSale, CrowdFund, Closed }\r\n\r\n    //events\r\n    event TokenPurchase(address indexed beneficiary, uint256 value, uint256 amount); \r\n    event CrowdFundClosed(uint256 _blockTimeStamp);\r\n    event ChangeFoundersWalletAddress(uint256 _blockTimeStamp, address indexed _foundersWalletAddress);\r\n   \r\n    //Modifiers\r\n    modifier tokenIsDeployed() {\r\n        require(isTokenDeployed == true);\r\n        _;\r\n    }\r\n     modifier nonZeroEth() {\r\n        require(msg.value > 0);\r\n        _;\r\n    }\r\n\r\n    modifier nonZeroAddress(address _to) {\r\n        require(_to != 0x0);\r\n        _;\r\n    }\r\n\r\n    modifier onlyFounders() {\r\n        require(msg.sender == founderMultiSigAddress);\r\n        _;\r\n    }\r\n\r\n    modifier onlyPublic() {\r\n        require(msg.sender != founderMultiSigAddress);\r\n        _;\r\n    }\r\n\r\n    modifier inState(State state) {\r\n        require(getState() == state); \r\n        _;\r\n    }\r\n\r\n    modifier inBetween() {\r\n        require(now >= preDistriToAcquiantancesStartTime && now <= crowdfundEndTime);\r\n        _;\r\n    }\r\n\r\n    // Constructor to initialize the local variables \r\n    function RPTCrowdsale (address _founderWalletAddress, address _remainingTokenHolder, address _beneficiaryAddress) {\r\n        founderMultiSigAddress = _founderWalletAddress;\r\n        remainingTokenHolder = _remainingTokenHolder;\r\n        beneficiaryAddress = _beneficiaryAddress;\r\n    }\r\n\r\n    // Function to change the founders multi sign address \r\n     function setFounderMultiSigAddress(address _newFounderAddress) onlyFounders  nonZeroAddress(_newFounderAddress) {\r\n        founderMultiSigAddress = _newFounderAddress;\r\n        ChangeFoundersWalletAddress(now, founderMultiSigAddress);\r\n    }\r\n    \r\n    // Attach the token contract     \r\n    function setTokenAddress(address _tokenAddress) external onlyFounders nonZeroAddress(_tokenAddress) {\r\n        require(isTokenDeployed == false);\r\n        token = RPTToken(_tokenAddress);\r\n        isTokenDeployed = true;\r\n    }\r\n\r\n\r\n    // function call after crowdFundEndTime it transfers the remaining tokens to remainingTokenHolder address\r\n    function endCrowdfund() onlyFounders returns (bool) {\r\n        require(now > crowdfundEndTime);\r\n        uint256 remainingToken = token.balanceOf(this);  // remaining tokens\r\n\r\n        if (remainingToken != 0) {\r\n          token.transfer(remainingTokenHolder, remainingToken); \r\n          CrowdFundClosed(now);\r\n          return true; \r\n        } else {\r\n            CrowdFundClosed(now);\r\n            return false;\r\n        }\r\n       \r\n    }\r\n\r\n    // Buy token function call only in duration of crowdfund active \r\n    function buyTokens(address beneficiary)\r\n    nonZeroEth \r\n    tokenIsDeployed \r\n    onlyPublic \r\n    nonZeroAddress(beneficiary) \r\n    inBetween\r\n    payable \r\n    public \r\n    returns(bool) \r\n    {\r\n            fundTransfer(msg.value);\r\n\r\n            uint256 amount = getNoOfTokens(exchangeRate, msg.value);\r\n            \r\n            if (token.transfer(beneficiary, amount)) {\r\n                token.changeTotalSupply(amount); \r\n                totalWeiRaised = totalWeiRaised.add(msg.value);\r\n                TokenPurchase(beneficiary, msg.value, amount);\r\n                return true;\r\n            } \r\n            return false;\r\n        \r\n    }\r\n\r\n\r\n    // function to transfer the funds to founders account\r\n    function fundTransfer(uint256 weiAmount) internal {\r\n        beneficiaryAddress.transfer(weiAmount);\r\n    }\r\n\r\n// Get functions \r\n\r\n    // function to get the current state of the crowdsale\r\n    function getState() internal constant returns(State) {\r\n        if (now >= preDistriToAcquiantancesStartTime && now <= preDistriToAcquiantancesEndTime) {\r\n            return State.Acquiantances;\r\n        } if (now >= presaleStartTime && now <= presaleEndTime) {\r\n            return State.PreSale;\r\n        } if (now >= crowdfundStartTime && now <= crowdfundEndTime) {\r\n            return State.CrowdFund;\r\n        } else {\r\n            return State.Closed;\r\n        }\r\n        \r\n    }\r\n\r\n\r\n   // function to calculate the total no of tokens with bonus multiplication\r\n    function getNoOfTokens(uint32 _exchangeRate, uint256 _amount) internal returns (uint256) {\r\n         uint256 noOfToken = _amount.mul(uint256(_exchangeRate));\r\n         uint256 noOfTokenWithBonus = ((uint256(100 + getCurrentBonusRate())).mul(noOfToken)).div(100);\r\n         return noOfTokenWithBonus;\r\n    }\r\n\r\n    \r\n\r\n    // function provide the current bonus rate\r\n    function getCurrentBonusRate() internal returns (uint8) {\r\n        \r\n        if (getState() == State.Acquiantances) {\r\n            return 40;\r\n        }\r\n        if (getState() == State.PreSale) {\r\n            return 20;\r\n        }\r\n        if (getState() == State.CrowdFund) {\r\n            return 0;\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    // provides the bonus % \r\n    function getBonus() constant returns (uint8) {\r\n        return getCurrentBonusRate();\r\n    }\r\n\r\n    // send ether to the contract address\r\n    // With at least 200 000 gas\r\n    function() public payable {\r\n        buyTokens(msg.sender);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"crowdfundEndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newFounderAddress\",\"type\":\"address\"}],\"name\":\"setFounderMultiSigAddress\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presaleEndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"setTokenAddress\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"endCrowdfund\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"founderMultiSigAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"exchangeRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"remainingTokenHolder\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalWeiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preDistriToAcquiantancesEndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presaleStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdfundStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preDistriToAcquiantancesStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beneficiaryAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_founderWalletAddress\",\"type\":\"address\"},{\"name\":\"_remainingTokenHolder\",\"type\":\"address\"},{\"name\":\"_beneficiaryAddress\",\"type\":\"address\"}],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_blockTimeStamp\",\"type\":\"uint256\"}],\"name\":\"CrowdFundClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_blockTimeStamp\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_foundersWalletAddress\",\"type\":\"address\"}],\"name\":\"ChangeFoundersWalletAddress\",\"type\":\"event\"}]","ContractName":"RPTCrowdsale","CompilerVersion":"v0.4.15+commit.bbb8e64f","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000005960099c92b4c4c8f92380242aaa519e1b62ddb0000000000000000000000000143fec4319eff8872af88c23e5b3627ae49da487000000000000000000000000420dd18baeca041ab3ddc32e067b81c5199b0c8c","Library":"","SwarmSource":"bzzr://b38dcb7f73a12531b3bb087ad720026604280e47b92cd06f5ba6f0211e4c0acd"}]}