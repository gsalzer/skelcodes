{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\ncontract Owned {\r\n    address public owner;\r\n\r\n    function Owned() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function withdraw() public onlyOwner {\r\n        owner.transfer(this.balance);\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner == msg.sender);\r\n        _;\r\n    }\r\n}\r\n\r\ncontract ERC20Basic {\r\n    uint256 public totalSupply;\r\n    function balanceOf(address who) public view returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n    function allowance(address owner, address spender) public view returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract Distributor is Owned {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    ERC20 public token;\r\n    uint256 public eligibleTokens;\r\n    mapping(address => uint256) public distributed;\r\n    uint256 public totalDistributionAmountInWei;\r\n\r\n    event Dividend(address holder, uint256 amountDistributed);\r\n\r\n    function Distributor(address _targetToken, uint256 _eligibleTokens) public payable {\r\n        require(msg.value > 0);\r\n\r\n        token = ERC20(_targetToken);\r\n        assert(_eligibleTokens <= token.totalSupply());\r\n        eligibleTokens = _eligibleTokens;\r\n        totalDistributionAmountInWei = msg.value;\r\n    }\r\n\r\n    function percent(uint numerator, uint denominator, uint precision) internal pure returns (uint quotient) {\r\n        uint _numerator = numerator * 10 ** (precision + 1);\r\n        quotient = ((_numerator / denominator) + 5) / 10;\r\n    }\r\n\r\n    function distribute(address holder) public onlyOwner returns (uint256 amountDistributed) {\r\n        require(distributed[holder] == 0);\r\n\r\n        uint256 holderBalance = token.balanceOf(holder);\r\n        uint256 portion = percent(holderBalance, eligibleTokens, uint256(18));\r\n        amountDistributed = totalDistributionAmountInWei.mul(portion).div(1000000000000000000);\r\n\r\n        distributed[holder] = amountDistributed;\r\n        Dividend(holder, amountDistributed);\r\n        holder.transfer(amountDistributed);\r\n    }\r\n\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"eligibleTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"distributed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"distribute\",\"outputs\":[{\"name\":\"amountDistributed\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalDistributionAmountInWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_targetToken\",\"type\":\"address\"},{\"name\":\"_eligibleTokens\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amountDistributed\",\"type\":\"uint256\"}],\"name\":\"Dividend\",\"type\":\"event\"}]","ContractName":"Distributor","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000ac3da587eac229c9896d919abc235ca4fd7f72c10000000000000000000000000000000000000000000000000000000008fb6704","Library":"","SwarmSource":"bzzr://2ca56dee23845d0849ecc45f95607ccc24f5e7c21b30bb0a290571b77b39be1a"}]}