{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public constant returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) allowed;\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n\r\n    uint256 _allowance = allowed[_from][msg.sender];\r\n\r\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n    // require (_value <= _allowance);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   */\r\n  function increaseApproval (address _spender, uint _addedValue) public returns (bool success) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  function decreaseApproval (address _spender, uint _subtractedValue) public returns (bool success) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n}\r\n\r\n\r\n/*****\r\n* @title The DADI Presale Contract\r\n*/\r\ncontract DadiPreSale is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    StandardToken public token;                         // The DADI ERC20 token */\r\n    address public owner;\r\n    address[] public preSaleWallets;\r\n\r\n    struct WhitelistUser {\r\n      uint256 pledged;\r\n      uint index;\r\n    }\r\n\r\n    struct Investor {\r\n      uint256 tokens;\r\n      uint256 contribution;\r\n      uint index;\r\n    }\r\n\r\n    uint256 public tokenSupply;\r\n    uint256 public tokensPurchased = 0;\r\n    uint256 public individualCap = 10000 * 1000;        // USD$10,000\r\n    uint256 public preSaleTokenPrice = 400;             // USD$0.40\r\n    uint256 public ethRate;                             // ETH to USD Rate, set by owner: 1 ETH = ethRate USD\r\n \r\n    mapping(address => WhitelistUser) private whitelisted;\r\n    address[] private whitelistedIndex;\r\n    mapping(address => Investor) private investors;\r\n    address[] private investorIndex;\r\n\r\n    /*****\r\n    * State for Sale Modes\r\n    *  0 - Preparing:            All contract initialization calls\r\n    *  1 - PreSale:              Contract is in the Presale Period\r\n    *  2 - PreSaleFinalized      Presale period is finalized, no more payments are allowed\r\n    *  3 - Success:              Presale Successful\r\n    *  4 - TokenDistribution:    Presale finished, tokens can be distributed\r\n    *  5 - Closed:               Presale closed, no tokens more can be distributed\r\n    */\r\n    enum SaleState { Preparing, PreSale, PreSaleFinalized, Success, TokenDistribution, Closed }\r\n    SaleState public state = SaleState.Preparing;\r\n\r\n    /*****\r\n    * State for Purchase Periods\r\n    *  0 - Preparing:            All contract initialization calls\r\n    *  1 - Whitelist:            Only whitelisted users can make payments\r\n    *  2 - WhitelistApplicant:   Only whitelisted users and whitelist applicants can make payments\r\n    *  3 - Public:               Sale open to all\r\n    */\r\n    enum PurchasePeriod { Preparing, Whitelist, WhitelistApplicant, Public }\r\n    PurchasePeriod public purchasePeriod = PurchasePeriod.Preparing;\r\n\r\n    /**\r\n    * event for token purchase logging\r\n    * @param purchaser who paid for the tokens\r\n    * @param beneficiary who got the tokens\r\n    * @param value weis paid for purchase\r\n    * @param tokens amount of tokens purchased\r\n    */\r\n    event LogTokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 tokens);\r\n    event LogTokenDistribution(address recipient, uint256 tokens);\r\n    event LogRedistributeTokens(address recipient, SaleState _state, uint256 tokens);\r\n    event LogFundTransfer(address wallet, uint256 value);\r\n    event LogRefund(address wallet, uint256 value);\r\n    event LogStateChange(SaleState _state);\r\n    event LogNewWhitelistUser(address indexed userAddress, uint index, uint256 value);\r\n\r\n    /*****\r\n    * @dev Modifier to check that amount transferred is not 0\r\n    */\r\n    modifier nonZero() {\r\n        require(msg.value != 0);\r\n        _;\r\n    }\r\n\r\n    /*****\r\n    * @dev The constructor function to initialize the Presale\r\n    * @param _token                         address   the address of the ERC20 token for the sale\r\n    * @param _tokenSupply                   uint256   the amount of tokens available\r\n    */\r\n    function DadiPreSale (StandardToken _token,uint256 _tokenSupply) public {\r\n        require(_token != address(0));\r\n        require(_tokenSupply != 0);\r\n\r\n        owner = msg.sender;\r\n\r\n        token = StandardToken(_token);\r\n        tokenSupply = _tokenSupply * (uint256(10) ** 18);\r\n    }\r\n\r\n    /*****\r\n    * @dev Fallback Function to buy the tokens\r\n    */\r\n    function () public nonZero payable {\r\n        require(state == SaleState.PreSale);\r\n        buyTokens(msg.sender, msg.value);\r\n    }\r\n\r\n    /*****\r\n    * @dev Allows the contract owner to add a new PreSale wallet, used to hold funds safely\r\n    * @param _wallet        address     The address of the wallet\r\n    * @return success       bool        Returns true if executed successfully\r\n    */\r\n    function addPreSaleWallet (address _wallet) public onlyOwner returns (bool) {\r\n        require(_wallet != address(0));\r\n        preSaleWallets.push(_wallet);\r\n        return true;\r\n    }\r\n\r\n    /*****\r\n    * @dev Allows the contract owner to add multiple whitelist users, each with a wallet address and a pledged contribution\r\n    * @param userAddresses   address[]     The array of whitelist wallet addresses\r\n    * @param pledges         uint256[]     The array of whitelist pledges\r\n    */\r\n    function addWhitelistUsers(address[] userAddresses, uint256[] pledges) public onlyOwner {\r\n        for (uint i = 0; i < userAddresses.length; i++) {\r\n            addWhitelistUser(userAddresses[i], pledges[i]);\r\n        }\r\n    }\r\n\r\n    /*****\r\n    * @dev Allows the contract owner to a single whitelist user\r\n    * @param userAddress     address      The wallet address to whitelist\r\n    * @param pledged         uint256      The amount pledged by the user\r\n    */\r\n    function addWhitelistUser(address userAddress, uint256 pledged) public onlyOwner {\r\n        if (!isWhitelisted(userAddress)) {\r\n            whitelisted[userAddress].pledged = pledged * 1000;\r\n            whitelisted[userAddress].index = whitelistedIndex.push(userAddress) - 1;\r\n          \r\n            LogNewWhitelistUser(userAddress, whitelisted[userAddress].index, pledged);\r\n        }\r\n    }\r\n\r\n    /*****\r\n    * @dev Calculates the number of tokens that can be bought for the amount of Wei transferred\r\n    * @param _amount    uint256     The amount of money invested by the investor\r\n    * @return tokens    uint256     The number of tokens purchased for the amount invested\r\n    */\r\n    function calculateTokens (uint256 _amount) public constant returns (uint256 tokens) {\r\n        tokens = _amount * ethRate / preSaleTokenPrice;\r\n        return tokens;\r\n    }\r\n\r\n    /*****\r\n    * @dev Called by the owner of the contract to modify the sale state\r\n    */\r\n    function setState (uint256 _state) public onlyOwner {\r\n        state = SaleState(uint(_state));\r\n        LogStateChange(state);\r\n    }\r\n\r\n    /*****\r\n    * @dev Called by the owner of the contract to open the WhitelistApplicant/Public periods\r\n    */\r\n    function setPurchasePeriod (uint256 phase) public onlyOwner {\r\n        purchasePeriod = PurchasePeriod(uint(phase));\r\n    }\r\n\r\n    /*****\r\n    * @dev Called by the owner of the contract to start the Presale\r\n    * @param rate   uint256  the current ETH USD rate, multiplied by 1000\r\n    */\r\n    function startPreSale (uint256 rate) public onlyOwner {\r\n        state = SaleState.PreSale;\r\n        purchasePeriod = PurchasePeriod.Whitelist;\r\n        updateEthRate(rate);\r\n        LogStateChange(state);\r\n    }\r\n\r\n    /*****\r\n    * @dev Allow updating the ETH USD exchange rate\r\n    * @param rate   uint256  the current ETH USD rate, multiplied by 1000\r\n    * @return bool  Return true if the contract is in PartnerSale Period\r\n    */\r\n    function updateEthRate (uint256 rate) public onlyOwner returns (bool) {\r\n        require(rate >= 100000);\r\n        \r\n        ethRate = rate;\r\n        return true;\r\n    }\r\n\r\n    /*****\r\n    * @dev Allows transfer of tokens to a recipient who has purchased offline, during the PreSale\r\n    * @param _recipient     address     The address of the recipient of the tokens\r\n    * @param _tokens        uint256     The number of tokens purchased by the recipient\r\n    * @return success       bool        Returns true if executed successfully\r\n    */\r\n    function offlineTransaction (address _recipient, uint256 _tokens) public onlyOwner returns (bool) {\r\n        require(_tokens > 0);\r\n\r\n        // Convert to a token with decimals \r\n        uint256 tokens = _tokens * (uint256(10) ** uint8(18));\r\n\r\n        // if the number of tokens is greater than available, reject tx\r\n        if (tokens >= getTokensAvailable()) {\r\n            revert();\r\n        }\r\n\r\n        addToInvestor(_recipient, 0, tokens);\r\n\r\n        // Increase the count of tokens purchased in the sale\r\n        updateSaleParameters(tokens);\r\n\r\n        LogTokenPurchase(msg.sender, _recipient, 0, tokens);\r\n\r\n        return true;\r\n    }\r\n\r\n    /*****\r\n    * @dev Called by the owner of the contract to finalize the ICO\r\n    *      and redistribute funds (if any)\r\n    */\r\n    function finalizeSale () public onlyOwner {\r\n        state = SaleState.Success;\r\n        LogStateChange(state);\r\n\r\n        // Transfer any ETH to one of the Presale wallets\r\n        if (this.balance > 0) {\r\n            forwardFunds(this.balance);\r\n        }\r\n    }\r\n\r\n    /*****\r\n    * @dev Called by the owner of the contract to close the Sale and redistribute any crumbs.\r\n    * @param recipient     address     The address of the recipient of the tokens\r\n    */\r\n    function closeSale (address recipient) public onlyOwner {\r\n        state = SaleState.Closed;\r\n        LogStateChange(state);\r\n\r\n        // redistribute unsold tokens to DADI ecosystem\r\n        uint256 remaining = getTokensAvailable();\r\n        updateSaleParameters(remaining);\r\n\r\n        if (remaining > 0) {\r\n            token.transfer(recipient, remaining);\r\n            LogRedistributeTokens(recipient, state, remaining);\r\n        }\r\n    }\r\n\r\n    /*****\r\n    * @dev Called by the owner of the contract to allow tokens to be distributed\r\n    */\r\n    function setTokenDistribution () public onlyOwner {\r\n        state = SaleState.TokenDistribution;\r\n        LogStateChange(state);\r\n    }\r\n\r\n    /*****\r\n    * @dev Called by the owner of the contract to distribute tokens to investors\r\n    * @param _address       address     The address of the investor for which to distribute tokens\r\n    * @return success       bool        Returns true if executed successfully\r\n    */\r\n    function distributeTokens (address _address) public onlyOwner returns (bool) {\r\n        require(state == SaleState.TokenDistribution);\r\n        \r\n        // get the tokens available for the investor\r\n        uint256 tokens = investors[_address].tokens;\r\n        require(tokens > 0);\r\n\r\n        investors[_address].tokens = 0;\r\n        investors[_address].contribution = 0;\r\n\r\n        token.transfer(_address, tokens);\r\n      \r\n        LogTokenDistribution(_address, tokens);\r\n        return true;\r\n    }\r\n\r\n    /*****\r\n    * @dev Called by the owner of the contract to distribute tokens to investors who used a non-ERC20 wallet address\r\n    * @param _purchaseAddress        address     The address the investor used to buy tokens\r\n    * @param _tokenAddress           address     The address to send the tokens to\r\n    * @return success                bool        Returns true if executed successfully\r\n    */\r\n    function distributeToAlternateAddress (address _purchaseAddress, address _tokenAddress) public onlyOwner returns (bool) {\r\n        require(state == SaleState.TokenDistribution);\r\n        \r\n        // get the tokens available for the investor\r\n        uint256 tokens = investors[_purchaseAddress].tokens;\r\n        require(tokens > 0);\r\n\r\n        investors[_purchaseAddress].tokens = 0;\r\n\r\n        token.transfer(_tokenAddress, tokens);\r\n      \r\n        LogTokenDistribution(_tokenAddress, tokens);\r\n        return true;\r\n    }\r\n\r\n    /*****\r\n    * @dev Called by the owner of the contract to redistribute tokens if an investor has been refunded offline\r\n    * @param investorAddress         address     The address the investor used to buy tokens\r\n    * @param recipient               address     The address to send the tokens to\r\n    */\r\n    function redistributeTokens (address investorAddress, address recipient) public onlyOwner {\r\n        uint256 tokens = investors[investorAddress].tokens;\r\n        require(tokens > 0);\r\n        \r\n        // remove tokens, so they can't be redistributed\r\n        investors[investorAddress].tokens = 0;\r\n        token.transfer(recipient, tokens);\r\n\r\n        LogRedistributeTokens(recipient, state, tokens);\r\n    }\r\n\r\n    /*****\r\n    * @dev Get the amount of PreSale tokens left for purchase\r\n    * @return uint256 the count of tokens available\r\n    */\r\n    function getTokensAvailable () public constant returns (uint256) {\r\n        return tokenSupply - tokensPurchased;\r\n    }\r\n\r\n    /*****\r\n    * @dev Get the total count of tokens purchased in all the Sale periods\r\n    * @return uint256 the count of tokens purchased\r\n    */\r\n    function getTokensPurchased () public constant returns (uint256) {\r\n        return tokensPurchased;\r\n    }\r\n\r\n    /*****\r\n    * @dev Get the balance sent to the contract\r\n    * @return uint256 the amount sent to this contract, in Wei\r\n    */\r\n    function getBalance () public constant returns (uint256) {\r\n        return this.balance;\r\n    }\r\n\r\n    /*****\r\n    * @dev Converts an amount sent in Wei to the equivalent in USD\r\n    * @param _amount      uint256       the amount sent to the contract, in Wei\r\n    * @return uint256  the amount sent to this contract, in USD\r\n    */\r\n    function ethToUsd (uint256 _amount) public constant returns (uint256) {\r\n        return (_amount * ethRate) / (uint256(10) ** 18);\r\n    }\r\n\r\n    /*****\r\n    * @dev Get the overall success state of the ICO\r\n    * @return bool whether the state is successful, or not\r\n    */\r\n    function isSuccessful () public constant returns (bool) {\r\n        return state == SaleState.Success;\r\n    }\r\n\r\n    /*****\r\n    * @dev Get a whitelisted user\r\n    * @param userAddress      address       the wallet address of the user\r\n    * @return uint256  the amount pledged by the user\r\n    * @return uint     the index of the user\r\n    */\r\n    function getWhitelistUser (address userAddress) public constant returns (uint256 pledged, uint index) {\r\n        require(isWhitelisted(userAddress));\r\n        return(whitelisted[userAddress].pledged, whitelisted[userAddress].index);\r\n    }\r\n\r\n    /*****\r\n    * @dev Get count of contributors\r\n    * @return uint     the number of unique contributors\r\n    */\r\n    function getInvestorCount () public constant returns (uint count) {\r\n        return investorIndex.length;\r\n    }\r\n\r\n\r\n    /*****\r\n    * @dev Get an investor\r\n    * @param _address      address       the wallet address of the investor\r\n    * @return uint256  the amount contributed by the user\r\n    * @return uint256  the number of tokens assigned to the user\r\n    * @return uint     the index of the user\r\n    */\r\n    function getInvestor (address _address) public constant returns (uint256 contribution, uint256 tokens, uint index) {\r\n        require(isInvested(_address));\r\n        return(investors[_address].contribution, investors[_address].tokens, investors[_address].index);\r\n    }\r\n\r\n    /*****\r\n    * @dev Get a user's whitelisted state\r\n    * @param userAddress      address       the wallet address of the user\r\n    * @return bool  true if the user is in the whitelist\r\n    */\r\n    function isWhitelisted (address userAddress) internal constant returns (bool isIndeed) {\r\n        if (whitelistedIndex.length == 0) return false;\r\n        return (whitelistedIndex[whitelisted[userAddress].index] == userAddress);\r\n    }\r\n\r\n    /*****\r\n    * @dev Get a user's invested state\r\n    * @param _address      address       the wallet address of the user\r\n    * @return bool  true if the user has already contributed\r\n    */\r\n    function isInvested (address _address) internal constant returns (bool isIndeed) {\r\n        if (investorIndex.length == 0) return false;\r\n        return (investorIndex[investors[_address].index] == _address);\r\n    }\r\n\r\n    /*****\r\n    * @dev Update a user's invested state\r\n    * @param _address      address       the wallet address of the user\r\n    * @param _value        uint256       the amount contributed in this transaction\r\n    * @param _tokens       uint256       the number of tokens assigned in this transaction\r\n    */\r\n    function addToInvestor(address _address, uint256 _value, uint256 _tokens) internal {\r\n        // add the user to the investorIndex if this is their first contribution\r\n        if (!isInvested(_address)) {\r\n            investors[_address].index = investorIndex.push(_address) - 1;\r\n        }\r\n      \r\n        investors[_address].tokens = investors[_address].tokens.add(_tokens);\r\n        investors[_address].contribution = investors[_address].contribution.add(_value);\r\n    }\r\n\r\n    /*****\r\n    * @dev Send ether to the presale collection wallets\r\n    */\r\n    function forwardFunds (uint256 _value) internal {\r\n        uint accountNumber;\r\n        address account;\r\n\r\n        // move funds to a random preSaleWallet\r\n        if (preSaleWallets.length > 0) {\r\n            accountNumber = getRandom(preSaleWallets.length) - 1;\r\n            account = preSaleWallets[accountNumber];\r\n            account.transfer(_value);\r\n            LogFundTransfer(account, _value);\r\n        }\r\n    }\r\n\r\n    /*****\r\n    * @dev Internal function to assign tokens to the contributor\r\n    * @param _address       address     The address of the contributing investor\r\n    * @param _value         uint256     The amount invested \r\n    * @return success       bool        Returns true if executed successfully\r\n    */\r\n    function buyTokens (address _address, uint256 _value) internal returns (bool) {\r\n        require(isBelowCap(_value));\r\n\r\n        if (isWhitelistPeriod()) {\r\n            require(isWhitelisted(_address));\r\n        }\r\n\r\n        require(isValidContribution(_address, _value));\r\n\r\n        uint256 boughtTokens = calculateTokens(_value);\r\n        require(boughtTokens != 0);\r\n\r\n        // if the number of tokens calculated for the given value is \r\n        // greater than the tokens available, reject the payment\r\n        if (boughtTokens >= getTokensAvailable()) {\r\n            revert();\r\n        }\r\n\r\n        // update investor state\r\n        addToInvestor(_address, _value, boughtTokens);\r\n\r\n        LogTokenPurchase(msg.sender, _address, _value, boughtTokens);\r\n\r\n        forwardFunds(_value);\r\n\r\n        updateSaleParameters(boughtTokens);\r\n\r\n        return true;\r\n    }\r\n\r\n    /*****\r\n    * @dev Check that the amount sent in the transaction is below the individual cap, or below the pledged\r\n    * amount if the user is whitelisted and the sale is in the whitelist period. Factors in previous\r\n    * transaction by the same user\r\n    * @param _address         address     The address of the user making the transaction\r\n    * @param _amount          uint256     The amount sent in the transaction\r\n    * @return        bool        Returns true if the amount is valid\r\n    */\r\n    function isValidContribution (address _address, uint256 _amount) internal constant returns (bool valid) {\r\n        if (isWhitelistPeriod() && isWhitelisted(_address)) {\r\n            return ethToUsd(_amount + investors[_address].contribution) <= whitelisted[_address].pledged;\r\n        }\r\n\r\n        return isBelowCap(_amount + investors[_address].contribution); \r\n    }\r\n\r\n    /*****\r\n    * @dev Check that the amount sent in the transaction is below the individual cap\r\n    * @param _amount         uint256     The amount sent in the transaction\r\n    * @return        bool        Returns true if the amount is below the individual cap\r\n    */\r\n    function isBelowCap (uint256 _amount) internal constant returns (bool) {\r\n        return ethToUsd(_amount) < individualCap;\r\n    }\r\n\r\n    /*****\r\n    * @dev Generates a random number from 1 to max based on the last block hash\r\n    * @param max     uint  the maximum value \r\n    * @return a random number\r\n    */\r\n    function getRandom(uint max) internal constant returns (uint randomNumber) {\r\n        return (uint(keccak256(block.blockhash(block.number - 1))) % max) + 1;\r\n    }\r\n\r\n    /*****\r\n    * @dev Internal function to modify parameters based on tokens bought\r\n    * @param _tokens        uint256     The number of tokens purchased\r\n    */\r\n    function updateSaleParameters (uint256 _tokens) internal {\r\n        tokensPurchased = tokensPurchased.add(_tokens);\r\n    }\r\n\r\n    /*****\r\n    * @dev Check the state of the contract\r\n    * @return bool  Return true if the contract is in the Whitelist period\r\n    */\r\n    function isWhitelistPeriod () private constant returns (bool) {\r\n        return purchasePeriod == PurchasePeriod.Whitelist;\r\n    }\r\n\r\n    /*****\r\n    * @dev Check the state of the contract\r\n    * @return bool  Return true if the contract is in the WhitelistApplicant period\r\n    */\r\n    function isWhitelistApplicantPeriod () private constant returns (bool) {\r\n        return purchasePeriod == PurchasePeriod.WhitelistApplicant;\r\n    }\r\n\r\n    /*****\r\n    * @dev Check the state of the contract\r\n    * @return bool  Return true if the contract is in the Public period\r\n    */\r\n    function isPublicPeriod () private constant returns (bool) {\r\n        return purchasePeriod == PurchasePeriod.Public;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"individualCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"investorAddress\",\"type\":\"address\"},{\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"redistributeTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"updateEthRate\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalizeSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"startPreSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_purchaseAddress\",\"type\":\"address\"},{\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"distributeToAlternateAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"phase\",\"type\":\"uint256\"}],\"name\":\"setPurchasePeriod\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"calculateTokens\",\"outputs\":[{\"name\":\"tokens\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preSaleTokenPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"closeSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"},{\"name\":\"pledged\",\"type\":\"uint256\"}],\"name\":\"addWhitelistUser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getInvestor\",\"outputs\":[{\"name\":\"contribution\",\"type\":\"uint256\"},{\"name\":\"tokens\",\"type\":\"uint256\"},{\"name\":\"index\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTokensPurchased\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"ethToUsd\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getInvestorCount\",\"outputs\":[{\"name\":\"count\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setTokenDistribution\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_state\",\"type\":\"uint256\"}],\"name\":\"setState\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTokensAvailable\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"distributeTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getWhitelistUser\",\"outputs\":[{\"name\":\"pledged\",\"type\":\"uint256\"},{\"name\":\"index\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"preSaleWallets\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensPurchased\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"purchasePeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"addPreSaleWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isSuccessful\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"userAddresses\",\"type\":\"address[]\"},{\"name\":\"pledges\",\"type\":\"uint256[]\"}],\"name\":\"addWhitelistUsers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipient\",\"type\":\"address\"},{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"offlineTransaction\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_tokenSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"LogTokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"LogTokenDistribution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_state\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"LogRedistributeTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"LogFundTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"LogRefund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_state\",\"type\":\"uint8\"}],\"name\":\"LogStateChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"LogNewWhitelistUser\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"DadiPreSale","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000fb2f26f266fb2805a387230f2aa0a331b4d96fba0000000000000000000000000000000000000000000000000000000000989680","Library":"","SwarmSource":"bzzr://31f0f524ada83e60eaa8366139b70f02d7ec18aa896b88952e26028c5978748a"}]}