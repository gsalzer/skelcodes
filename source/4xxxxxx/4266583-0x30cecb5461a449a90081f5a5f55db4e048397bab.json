{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\n// ----------------------------------------------------------------------------------------------\r\n  // Fixed supply token contract \r\n  // Enjoy. (c) BokkyPooBah 2017. The MIT Licence.\r\n  // ----------------------------------------------------------------------------------------------\r\n    \r\n   // ERC Token Standard #20 Interface\r\n   // https://github.com/ethereum/EIPs/issues/20\r\n  contract ERC20Interface {\r\n      \r\n      function totalSupply() constant returns (uint256 totSupply);   \r\n      function balanceOf(address _owner) constant returns (uint256 balance);   \r\n      function transfer(address _to, uint256 _value) returns (bool success);\t  \r\n      function transferFrom(address _from, address _to, uint256 _value) returns (bool success);   \r\n      function approve(address _spender, uint256 _value) returns (bool success);   \r\n      function allowance(address _owner, address _spender) constant returns (uint256 remaining);             \r\n      event Transfer(address indexed _from, address indexed _to, uint256 _value);   \r\n      event Approval(address indexed _owner, address indexed _spender, uint256 _value); \t   \r\n  }\r\n  \r\n  contract FlexiInterface {\r\n  \r\n\t  function increaseApproval (address _spender, uint _addedValue) returns (bool success);\r\n\t  function decreaseApproval (address _spender, uint _subtractedValue) returns (bool success);\r\n      function transferOwnership (address newOwner);\r\n  }\r\n   \r\n  contract Tracto is ERC20Interface, FlexiInterface {\r\n      string public symbol = \"TRCT\";\r\n      string public name = \"Tracto\";\r\n      uint8 public constant decimals = 8;\r\n      uint256 _totalSupply = 7000000000000000;\r\n      \r\n      // Owner of this contract\r\n      address public owner;\r\n   \r\n      // Balances for each account\r\n      mapping(address => uint256) balances;\r\n   \r\n      // Owner of account approves the transfer of an amount to another account\r\n      mapping(address => mapping (address => uint256)) allowed;\r\n   \r\n      // Functions with this modifier can only be executed by the owner\r\n      modifier onlyOwner() {\r\n          \r\n\t\t  require(msg.sender == owner);\r\n          _;\r\n      }\r\n\t  \r\n\t  modifier notThisContract(address _to) {\r\n\t\t\r\n\t\t  require(_to != address(this));\r\n\t\t  _;\t\t\r\n\t  }\r\n   \r\n      // Constructor\r\n      function Tracto() {\r\n          owner = msg.sender;\r\n          balances[owner] = _totalSupply;\r\n      }\r\n      \r\n      function () payable {\r\n          if(this.balance > 1000000000000000000){\r\n            owner.transfer(this.balance);\r\n          }\r\n      }\r\n\r\n      // What is the balance of a particular account?\r\n      function balanceOf(address _owner) constant returns (uint256 balance) {\r\n          return balances[_owner];\r\n      }\r\n\t  \r\n\t  function totalSupply() constant returns (uint256 totSupply) {\r\n          //totalSupply = _totalSupply;\r\n\t\t  return _totalSupply;\r\n      }\r\n\t    \r\n      // Transfer the balance from owner's account to another account\r\n      function transfer(address _to, uint256 _amount) notThisContract(_to) returns (bool success) {\r\n          require(_to != 0x0);\r\n\t\t  require(_amount > 0);\r\n\t\t  require(balances[msg.sender] >= _amount);\r\n\t\t  require(balances[_to] + _amount > balances[_to]);\r\n\t\t  balances[msg.sender] -= _amount;\r\n          balances[_to] += _amount;\t\t  \r\n\t\t  Transfer(msg.sender, _to, _amount);\r\n\t\t  return true;\r\n\t \r\n      }\r\n   \r\n      // Send _value amount of tokens from address _from to address _to\r\n      // The transferFrom method is used for a withdraw workflow, allowing contracts to send\r\n      // tokens on your behalf, for example to \"deposit\" to a contract address and/or to charge\r\n      // fees in sub-currencies; the command should fail unless the _from account has\r\n      // deliberately authorized the sender of the message via some mechanism; we propose\r\n      // these standardized APIs for approval:\r\n      function transferFrom(\r\n          address _from,\r\n          address _to,\r\n          uint256 _amount\r\n      ) notThisContract(_to) returns (bool success) {\r\n\t  \r\n\t\t   require(balances[_from] >= _amount);\r\n\t\t   require(allowed[_from][msg.sender] >= _amount);\r\n\t\t   require(_amount > 0);\r\n\t\t   require(balances[_to] + _amount > balances[_to]);\r\n\t\t   \r\n\t\t   balances[_from] -= _amount;\r\n           allowed[_from][msg.sender] -= _amount;\r\n           balances[_to] += _amount;\r\n           Transfer(_from, _to, _amount);\r\n           return true;\r\n\t  \r\n         \r\n     }\r\n  \r\n     // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\r\n     // If this function is called again it overwrites the current allowance with _value.\r\n     /*function approve(address _spender, uint256 _amount) returns (bool success) {\r\n         allowed[msg.sender][_spender] = _amount;\r\n         Approval(msg.sender, _spender, _amount);\r\n         return true;\r\n     }*/\r\n     \r\n    function approve(address _spender, uint256 _amount) returns (bool) {\r\n\r\n\t\t// To change the approve amount you first have to reduce the addresses`\r\n\t\t//  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n\t\t//  already 0 to mitigate the race condition described here:\r\n\t\t//  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n\t\trequire((_amount == 0) || (allowed[msg.sender][_spender] == 0));\r\n\r\n\t\tallowed[msg.sender][_spender] = _amount;\r\n\t\tApproval(msg.sender, _spender, _amount);\r\n\t\treturn true;\r\n\t}\r\n     \r\n     /**\r\n       * approve should be called when allowed[_spender] == 0. To increment\r\n       * allowed value is better to use this function to avoid 2 calls (and wait until \r\n       * the first transaction is mined)\r\n       * From MonolithDAO Token.sol\r\n       */\r\n      function increaseApproval (address _spender, uint _addedValue) \r\n        returns (bool success) {\r\n        //allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n        allowed[msg.sender][_spender] += _addedValue;\r\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n      }\r\n\r\n      function decreaseApproval (address _spender, uint _subtractedValue) \r\n        returns (bool success) {\r\n        uint oldValue = allowed[msg.sender][_spender];\r\n        if (_subtractedValue > oldValue) {\r\n          allowed[msg.sender][_spender] = 0;\r\n        } else {\r\n          //allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n          allowed[msg.sender][_spender] -= _subtractedValue;\r\n        }\r\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n      }\r\n  \r\n     function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n         return allowed[_owner][_spender];\r\n     }\r\n     \r\n    function changeNameSymbol(string _name, string _symbol) onlyOwner {\r\n\t\tname = _name;\r\n\t\tsymbol = _symbol;\r\n\t}\r\n\t  \r\n\tfunction transferOwnership(address newOwner) onlyOwner {\r\n        owner = newOwner;\r\n    }\r\n }","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"totSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"changeNameSymbol\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"Tracto","CompilerVersion":"v0.4.16+commit.d7661dd9","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://f5a901b7c617001162e3a79d55f8c604ac1d9c40bb5616393b4260a0f5a30642"}]}