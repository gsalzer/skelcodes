{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.10;\r\n\r\n// The Timereum Project\r\n\r\n// TimereumDelta\r\n// ERC-20 token snapshot of TME (\"TMED\"). TMEX will be a layer on top of this contract.\r\n// Will provide base for TMEX\r\n// If you are an address pair owner, use this contract to produce batches.\r\n// Then convert to timereumX\r\n\r\ncontract timereumDelta {\r\n    \r\nstring public name; \r\nstring public symbol; \r\nuint8 public decimals; \r\nuint256 public startTime;\r\nuint256 public totalSupply;\r\n\r\nbool public balanceImportsComplete;\r\n\r\nmapping (address => bool) public numRewardsAvailableSetForChildAddress;\r\n\r\nmapping (address => bool) public isNewParent;\r\nmapping (address => address) public returnChildForParentNew;\r\n\r\nbool public genesisImportsComplete;\r\n\r\n// Until contract is locked, devs can freeze the system if anything arises.\r\n// Then deploy a contract that interfaces with the state of this one.\r\nbool public frozen;\r\nbool public freezeProhibited;\r\n\r\naddress public devAddress; // For doing imports\r\n\r\nbool importsComplete; // Locked when devs have updated all balances\r\n\r\nmapping (address => uint256) public burnAmountAllowed;\r\n\r\nmapping(address => mapping (address => uint256)) allowed;\r\n\r\n// Balances for each account\r\nmapping(address => uint256) balances;\r\n\r\nmapping (address => uint256) public numRewardsAvailable;\r\n\r\n// TMEX address info\r\nbool public TMEXAddressSet;\r\naddress public TMEXAddress;\r\n\r\nbool devTestBalanceAdded;\r\n\r\nevent Transfer(address indexed from, address indexed to, uint256 value);\r\n// Triggered whenever approve(address _spender, uint256 _value) is called.\r\nevent Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\nfunction timereumDelta() {\r\nname = \"tmed\";\r\nsymbol = \"TMED\";\r\ndecimals = 18;\r\nstartTime=1500307354; //Time contract went online.\r\ndevAddress=0x85196Da9269B24bDf5FfD2624ABB387fcA05382B; // Set the dev import address\r\nif (!devTestBalanceAdded)  {\r\n    devTestBalanceAdded=true;\r\n    // Dev will create 10 batches as test using 1 TMED in dev address (which is a child)\r\n    // Also will send tiny amounts to several random addresses to make sure parent-child auth works.\r\n    // Then set numRewardsAvailable to 0\r\n    balances[devAddress]+=1000000000000000000;\r\n    totalSupply+=1000000000000000000;\r\n    numRewardsAvailable[devAddress]=10;\r\n}\r\n}\r\n\r\n// Returns balance of particular account\r\nfunction balanceOf(address _owner) constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n}\r\n\r\nfunction transfer(address _to, uint256 _value) { \r\nif (!frozen){\r\n    \r\n    if (balances[msg.sender] < _value) revert();\r\n    if (balances[_to] + _value < balances[_to]) revert();\r\n\r\n    if (returnIsParentAddress(_to) || isNewParent[_to])     {\r\n        if ((msg.sender==returnChildAddressForParent(_to)) || (returnChildForParentNew[_to]==msg.sender))  {\r\n            \r\n            if (numRewardsAvailableSetForChildAddress[msg.sender]==false)  {\r\n                setNumRewardsAvailableForAddress(msg.sender);\r\n            }\r\n\r\n            if (numRewardsAvailable[msg.sender]>0)    {\r\n                uint256 currDate=block.timestamp;\r\n                uint256 returnMaxPerBatchGenerated=5000000000000000000000; //max 5000 coins per batch\r\n                uint256 deployTime=10*365*86400; //10 years\r\n                uint256 secondsSinceStartTime=currDate-startTime;\r\n                uint256 maximizationTime=deployTime+startTime;\r\n                uint256 coinsPerBatchGenerated;\r\n                if (currDate>=maximizationTime)  {\r\n                    coinsPerBatchGenerated=returnMaxPerBatchGenerated;\r\n                } else  {\r\n                    uint256 b=(returnMaxPerBatchGenerated/4);\r\n                    uint256 m=(returnMaxPerBatchGenerated-b)/deployTime;\r\n                    coinsPerBatchGenerated=secondsSinceStartTime*m+b;\r\n                }\r\n                numRewardsAvailable[msg.sender]-=1;\r\n                balances[msg.sender]+=coinsPerBatchGenerated;\r\n                totalSupply+=coinsPerBatchGenerated;\r\n            }\r\n        }\r\n    }\r\n    \r\n    if (_to==TMEXAddress)   {\r\n        //They want to convert to TMEX\r\n        convertToTMEX(_value,msg.sender);\r\n    }\r\n    \r\n    balances[msg.sender] -= _value;\r\n    balances[_to] += _value;\r\n    Transfer(msg.sender, _to, _value);\r\n}\r\n}\r\n\r\nfunction transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _amount\r\n) returns (bool success) {\r\n    if (!frozen){\r\n    if (balances[_from] >= _amount\r\n        && allowed[_from][msg.sender] >= _amount\r\n        && _amount > 0\r\n        && balances[_to] + _amount > balances[_to]) {\r\n        balances[_from] -= _amount;\r\n        allowed[_from][msg.sender] -= _amount;\r\n\r\n    if (_to==TMEXAddress)   {\r\n        //They want to convert to TMEX\r\n        convertToTMEX(_amount,msg.sender);\r\n    }\r\n\r\n        balances[_to] += _amount;\r\n        return true;\r\n    } else {\r\n        return false;\r\n    }\r\n    }\r\n}\r\n  \r\n// Allow _spender to withdraw from your account, multiple times, up to the _value amount.\r\n// If this function is called again it overwrites the current allowance with _value.\r\nfunction approve(address _spender, uint256 _amount) returns (bool success) {\r\n    allowed[msg.sender][_spender] = _amount;\r\n    Approval(msg.sender, _spender, _amount);\r\n    return true;\r\n}\r\n\r\n// Allows devs to set num rewards used. Locked up when system online.\r\nfunction setNumRewardsAvailableForAddresses(uint256[] numRewardsAvailableForAddresses,address[] addressesToSetFor)    {\r\n    if (tx.origin==devAddress) { // Dev address\r\n       if (!importsComplete)  {\r\n           for (uint256 i=0;i<addressesToSetFor.length;i++)  {\r\n               address addressToSet=addressesToSetFor[i];\r\n               numRewardsAvailable[addressToSet]=numRewardsAvailableForAddresses[i];\r\n           }\r\n       }\r\n    }\r\n}\r\n\r\n// Freezes the entire system\r\nfunction freezeTransfers() {\r\n    if (tx.origin==devAddress) { // Dev address\r\n        if (!freezeProhibited)  {\r\n               frozen=true;\r\n        }\r\n    }\r\n}\r\n\r\n// Prevent Freezing (Once system is ready to be locked)\r\nfunction prohibitFreeze()   {\r\n    if (tx.origin==devAddress) { // Dev address\r\n        freezeProhibited=true;\r\n    }\r\n}\r\n\r\n// Get whether address is genesis parent\r\nfunction returnIsParentAddress(address possibleParent) returns(bool)  {\r\n    return tme(0xEe22430595aE400a30FFBA37883363Fbf293e24e).parentAddress(possibleParent);\r\n}\r\n\r\n// Return child address for parent\r\nfunction returnChildAddressForParent(address parent) returns(address)  {\r\n    return tme(0xEe22430595aE400a30FFBA37883363Fbf293e24e).returnChildAddressForParent(parent);\r\n}\r\n\r\n//Allows dev to set TMEX Address\r\nfunction setTMEXAddress(address TMEXAddressToSet)   {\r\n    if (tx.origin==devAddress) { // Dev address\r\n        if (!TMEXAddressSet)  {\r\n                TMEXAddressSet=true;\r\n               TMEXAddress=TMEXAddressToSet;\r\n        }\r\n    }\r\n}\r\n\r\n// Conversion to TMEX function\r\nfunction convertToTMEX(uint256 amount,address sender) private   {\r\n    totalSupply-=amount;\r\n    burnAmountAllowed[sender]=amount;\r\n    timereumX(TMEXAddress).createAmountFromTmedForAddress(amount,sender);\r\n    burnAmountAllowed[sender]=0;\r\n}\r\n\r\nfunction returnAmountOfTmexAddressCanProduce(address producingAddress) public returns(uint256)   {\r\n    return burnAmountAllowed[producingAddress];\r\n}\r\n\r\n// Locks up all changes to balances\r\nfunction lockBalanceChanges() {\r\n    if (tx.origin==devAddress) { // Dev address\r\n       balanceImportsComplete=true;\r\n   }\r\n}\r\n\r\nfunction importGenesisPairs(address[] parents,address[] children) public {\r\n    if (tx.origin==devAddress) { // Dev address\r\n        if (!genesisImportsComplete)    {\r\n            for (uint256 i=0;i<parents.length;i++)  {\r\n                address child=children[i];\r\n                address parent=parents[i];\r\n                // Set the parent as parent address\r\n                isNewParent[parent]=true; // Exciting\r\n                // Set the child of that parent\r\n                returnChildForParentNew[parent]=child;\r\n                balances[child]+=1000000000000000000;\r\n                totalSupply+=1000000000000000000;\r\n                numRewardsAvailable[child]=10;\r\n                numRewardsAvailableSetForChildAddress[child]=true;\r\n            }\r\n        }\r\n   }\r\n\r\n}\r\n\r\nfunction lockGenesisImports() public    {\r\n    if (tx.origin==devAddress) {\r\n        genesisImportsComplete=true;\r\n    }\r\n}\r\n\r\n// Devs will upload balances snapshot of blockchain via this function.\r\nfunction importAmountForAddresses(uint256[] amounts,address[] addressesToAddTo) public {\r\n   if (tx.origin==devAddress) { // Dev address\r\n       if (!balanceImportsComplete)  {\r\n           for (uint256 i=0;i<addressesToAddTo.length;i++)  {\r\n                address addressToAddTo=addressesToAddTo[i];\r\n                uint256 amount=amounts[i];\r\n                balances[addressToAddTo]+=amount;\r\n                totalSupply+=amount;\r\n           }\r\n       }\r\n   }\r\n}\r\n\r\n// Extra balance removal in case any issues arise. Do not anticipate using this function.\r\nfunction removeAmountForAddresses(uint256[] amounts,address[] addressesToRemoveFrom) public {\r\n   if (tx.origin==devAddress) { // Dev address\r\n       if (!balanceImportsComplete)  {\r\n           for (uint256 i=0;i<addressesToRemoveFrom.length;i++)  {\r\n                address addressToRemoveFrom=addressesToRemoveFrom[i];\r\n                uint256 amount=amounts[i];\r\n                balances[addressToRemoveFrom]-=amount;\r\n                totalSupply-=amount;\r\n           }\r\n       }\r\n   }\r\n}\r\n\r\nfunction setNumRewardsAvailableForAddress(address addressToSet) private {\r\n    //Get the number of rewards used in the old contract\r\n    tme tmeContract=tme(0xEe22430595aE400a30FFBA37883363Fbf293e24e);\r\n    uint256 numRewardsUsed=tmeContract.numRewardsUsed(addressToSet);\r\n    numRewardsAvailable[addressToSet]=10-numRewardsUsed;\r\n    numRewardsAvailableSetForChildAddress[addressToSet]=true;\r\n}\r\n\r\n}\r\n\r\n// Pulling info about parent-children from the original contract\r\ncontract tme    {\r\n    function parentAddress(address possibleParent) public returns(bool);\r\n    function returnChildAddressForParent(address parentAddressOfChild) public returns(address);\r\n    function numRewardsUsed(address childAddress) public returns(uint256);\r\n}\r\n\r\ncontract timereumX {\r\n    function createAmountFromTmedForAddress(uint256 amount,address sender);\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"freezeTransfers\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"returnChildForParentNew\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"frozen\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"name\":\"addressesToAddTo\",\"type\":\"address[]\"}],\"name\":\"importAmountForAddresses\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"numRewardsAvailable\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"TMEXAddressToSet\",\"type\":\"address\"}],\"name\":\"setTMEXAddress\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"name\":\"addressesToRemoveFrom\",\"type\":\"address[]\"}],\"name\":\"removeAmountForAddresses\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"producingAddress\",\"type\":\"address\"}],\"name\":\"returnAmountOfTmexAddressCanProduce\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"devAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"freezeProhibited\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"possibleParent\",\"type\":\"address\"}],\"name\":\"returnIsParentAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"numRewardsAvailableSetForChildAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"numRewardsAvailableForAddresses\",\"type\":\"uint256[]\"},{\"name\":\"addressesToSetFor\",\"type\":\"address[]\"}],\"name\":\"setNumRewardsAvailableForAddresses\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TMEXAddressSet\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isNewParent\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TMEXAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"burnAmountAllowed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"lockBalanceChanges\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"parents\",\"type\":\"address[]\"},{\"name\":\"children\",\"type\":\"address[]\"}],\"name\":\"importGenesisPairs\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"prohibitFreeze\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"parent\",\"type\":\"address\"}],\"name\":\"returnChildAddressForParent\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"lockGenesisImports\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"genesisImportsComplete\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balanceImportsComplete\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"timereumDelta","CompilerVersion":"v0.4.15+commit.bbb8e64f","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://795d1a4625fa96cda7d65b18e04d321220b4836aee91d73cc38b901e0163c1ec"}]}