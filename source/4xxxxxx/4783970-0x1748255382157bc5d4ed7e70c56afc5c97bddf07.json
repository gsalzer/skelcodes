{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) constant returns (uint256);\r\n  function transfer(address to, uint256 value) returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) returns (bool);\r\n  function approve(address spender, uint256 value) returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) returns (bool) {\r\n    require(_to != address(0));\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n}\r\n\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\r\n    require(_to != address(0));\r\n\r\n    var _allowance = allowed[_from][msg.sender];\r\n\r\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n    // require (_value <= _allowance);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) returns (bool) {\r\n\r\n    // To change the approve amount you first have to reduce the addresses`\r\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n    //  already 0 to mitigate the race condition described here:\r\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   */\r\n  function increaseApproval (address _spender, uint _addedValue)\r\n    returns (bool success) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  function decreaseApproval (address _spender, uint _subtractedValue)\r\n    returns (bool success) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n}\r\n\r\ncontract Santacoin is StandardToken {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    // Santa Coin meta data\r\n    string constant public name = \"SCS\";\r\n    string constant public symbol = \"SCS\";\r\n    uint8 constant public decimals = 0; // 1 SCS = 1 SCS\r\n\r\n    // North Pole Address\r\n    address public NorthPoleAddress;\r\n\r\n    // North Pole\r\n    uint256 public NorthPoleAF = 1000000000000000;\r\n\r\n    // Santa Coin Holder ETH Balances\r\n    mapping(address => uint256) private ETHAmounts;\r\n\r\n    // Rewards per contributing address\r\n    mapping(address => uint256) private SantaCoinRewardsInETH;\r\n\r\n    // Total amount held to date by North Pole\r\n    uint256 public TotalETHGivenToNorthPole = 0;\r\n\r\n    // Total amount of santa coins issued to date\r\n    uint256 public TotalSantaCoinsGivenByNorthPole = 0;\r\n\r\n    // Max Sata Reward (will be set once north pole stops minting)\r\n    uint256 public MaxSantaRewardPerToken = 0;\r\n\r\n    // Santa Coin minimum\r\n    uint256 private minimumSantaCoinContribution = 0.01 ether;\r\n\r\n    // Santa Coin Minting Range\r\n    uint256 private santaCoinMinterLowerBound = 1;\r\n    uint256 private santaCoinMinterUpperBound = 5;\r\n\r\n    // Allows the north pole to issue santa coins\r\n    // to boys and girls around the world\r\n    bool public NorthPoleMintingEnabled = true;\r\n\r\n    // Make sure either Santa or an Elf is\r\n    // performing this task\r\n    modifier onlySantaOrElf()\r\n    {\r\n        require (msg.sender == NorthPoleAddress);\r\n        _;\r\n    }\r\n\r\n    // Determines random number between range\r\n    function determineRandomNumberBetween(uint min, uint max)\r\n        private\r\n        returns (uint256)\r\n    {\r\n        return (uint256(keccak256(block.blockhash(block.number-min), min ))%max);\r\n    }\r\n\r\n    // Determines amount of Santa Coins to issue (alias)\r\n    function askSantaForCoinAmountBetween(uint min, uint max)\r\n        private\r\n        returns (uint256)\r\n    {\r\n        return determineRandomNumberBetween(min, max);\r\n    }\r\n\r\n    // Determines amount of Santa Coins to issue (alias)\r\n    function askSantaForPresent(uint min, uint max)\r\n        private\r\n        returns (uint256)\r\n    {\r\n        return determineRandomNumberBetween(min, max);\r\n    }\r\n\r\n    // Allows North Pole to issue Santa Coins\r\n    function setNorthPoleAddress(address newNorthPoleAddress)\r\n        public\r\n        onlySantaOrElf\r\n    {\r\n        NorthPoleAddress = newNorthPoleAddress;\r\n    }\r\n\r\n    // Allows North Pole to issue Santa Coins\r\n    function allowNorthPoleMinting()\r\n        public\r\n        onlySantaOrElf\r\n    {\r\n        require(NorthPoleMintingEnabled == false);\r\n        NorthPoleMintingEnabled = true;\r\n    }\r\n\r\n    // Prevents North Pole from issuing Santa Coins\r\n    function disallowNorthPoleMinting()\r\n        public\r\n        onlySantaOrElf\r\n    {\r\n        require(NorthPoleMintingEnabled == true);\r\n        NorthPoleMintingEnabled = false;\r\n\r\n        if (this.balance > 0 && totalSupply > 0) {\r\n            MaxSantaRewardPerToken = this.balance.div(totalSupply);\r\n        }\r\n    }\r\n\r\n    function hasSantaCoins(address holderAddress)\r\n      public\r\n      returns (bool)\r\n    {\r\n        return balances[holderAddress] > 0;\r\n    }\r\n\r\n    function openGiftFromSanta(address holderAddress)\r\n      public\r\n      returns (uint256)\r\n    {\r\n        return SantaCoinRewardsInETH[holderAddress];\r\n    }\r\n\r\n    function haveIBeenNaughty(address holderAddress)\r\n      public\r\n      returns (bool)\r\n    {\r\n        return (ETHAmounts[holderAddress] > 0 && SantaCoinRewardsInETH[holderAddress] == 0);\r\n    }\r\n\r\n    // Initializes Santa coin\r\n    function Santacoin()\r\n    {\r\n        totalSupply = uint256(0);\r\n        NorthPoleAddress = msg.sender;\r\n    }\r\n\r\n    // Used to get Santa Coins or\r\n    function () payable {\r\n\r\n        // Open gifts if user has coins\r\n        if (msg.value == 0 && hasSantaCoins(msg.sender) == true && NorthPoleMintingEnabled == false && MaxSantaRewardPerToken > 0) {\r\n            balances[msg.sender] -= 1;\r\n            totalSupply -= 1;\r\n            uint256 santasGift = MaxSantaRewardPerToken-NorthPoleAF;\r\n            uint256 santaSecret = determineRandomNumberBetween(1, 20);\r\n            uint256 senderSantaSecretGuess = determineRandomNumberBetween(1, 20);\r\n            if (santaSecret == senderSantaSecretGuess) {\r\n                msg.sender.transfer(santasGift);\r\n                NorthPoleAddress.transfer(NorthPoleAF);\r\n                SantaCoinRewardsInETH[msg.sender] += santasGift;\r\n            }\r\n        }\r\n\r\n        // Get SantaCoins\r\n        else if (msg.value >= minimumSantaCoinContribution && NorthPoleMintingEnabled == true) {\r\n            uint256 tokensToCredit = askSantaForCoinAmountBetween(santaCoinMinterLowerBound, santaCoinMinterUpperBound);\r\n            tokensToCredit = tokensToCredit == 0 ? 1 : tokensToCredit;\r\n\r\n            totalSupply += tokensToCredit;\r\n            ETHAmounts[msg.sender] += msg.value;\r\n            TotalETHGivenToNorthPole += msg.value;\r\n            balances[msg.sender] += tokensToCredit;\r\n            TotalSantaCoinsGivenByNorthPole += balances[msg.sender];\r\n        }\r\n\r\n        else {\r\n            revert();\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TotalETHGivenToNorthPole\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"disallowNorthPoleMinting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"NorthPoleMintingEnabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TotalSantaCoinsGivenByNorthPole\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"holderAddress\",\"type\":\"address\"}],\"name\":\"openGiftFromSanta\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newNorthPoleAddress\",\"type\":\"address\"}],\"name\":\"setNorthPoleAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"holderAddress\",\"type\":\"address\"}],\"name\":\"haveIBeenNaughty\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MaxSantaRewardPerToken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"NorthPoleAF\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"holderAddress\",\"type\":\"address\"}],\"name\":\"hasSantaCoins\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"NorthPoleAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"allowNorthPoleMinting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"Santacoin","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://ec51f663277fb18de9659c14ad2adecaa674a7340f98fe46cf2ef8281a718e49"}]}