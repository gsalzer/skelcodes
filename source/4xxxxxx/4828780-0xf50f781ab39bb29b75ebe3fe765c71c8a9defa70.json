{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.17;\r\n\r\n/*\r\n-----------------------------------\r\nSignals Society Membership Contract\r\n-----------------------------------\r\n*/\r\n\r\n/**\r\n * @title Ownable\r\n * @dev Ownership functionality\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n  address public bot;\r\n  // constructor, sets original owner address\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n  // modifier to restruct function use to the owner\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }    \r\n  // modifier to restruct function use to the bot\r\n  modifier onlyBot() {\r\n    require(msg.sender == bot);\r\n    _;\r\n  }\r\n  // lets owner change his address\r\n  function changeOwner(address addr) public onlyOwner {\r\n      owner = addr;\r\n  }\r\n  // lets owner change the bot's address    \r\n  function changeBot(address addr) public onlyOwner {\r\n      bot = addr;\r\n  }\r\n  // allows destruction of contract only if balance is empty\r\n  function kill() public onlyOwner {\r\n\t\trequire(this.balance == 0);\r\n\t\tselfdestruct(owner);\r\n\t}\r\n}\r\n\r\n /**\r\n * @title Memberships\r\n * @dev anages membership prices\r\n */\r\ncontract Memberships is Ownable {\r\n  // enumerates memberships (0, 1, 2)\r\n  enum Membership { Day, Month, Lifetime }\r\n  // holds the prices for the memberships\r\n  mapping (uint => uint) internal prices;\r\n  // returns the price for a single membership\r\n  function getMembershipPrice(Membership membership) public view returns(uint) {\r\n    return prices[uint(membership)];\r\n  }\r\n  // lets the owner set the price for a single membership\r\n  function setMembershipPrice(Membership membership, uint amount) public onlyOwner {    \r\n\t\trequire(amount > 0);\r\n    prices[uint(membership)] = amount;\r\n  }\r\n}\r\n\r\n /**\r\n * @title MembSignalsSociety Contract\r\n */\r\ncontract SignalsSociety is Ownable, Memberships {\r\n\r\n  // lets the bot know a deposit was made\r\n  event Deposited(address account, uint amount, uint balance, uint timestamp);\r\n  // lets the bot know a membership was paid\r\n  event MembershipPaid(address account, Membership membership, uint timestamp);\r\n\r\n  // store the amount of ETH deposited by each account.\r\n  mapping (address => uint) public balances;\r\n\r\n  // allows user to withdraw his balance\r\n  function withdraw() public {\r\n    uint amount = balances[msg.sender];\r\n    // zero the pending refund before sending to prevent re-entrancy attacks\r\n    balances[msg.sender] = 0;\r\n    msg.sender.transfer(amount);\r\n  }\r\n  // deposits ETH to a user's account\r\n  function deposit(address account, uint amount) public {\r\n    // deposit the amount to the user's account\r\n    balances[account] += amount;\r\n    // let the bot know something was deposited\r\n    Deposited(account, amount, balances[account], now);\r\n  }\r\n  // accepts the membership payment by moving eth from the user's account\r\n  // to the owner's account\r\n  function acceptMembership(address account, Membership membership, uint discount, address reseller, uint comission) public onlyBot {\r\n    // get the price for the membership they selected minus any discounts for special promotions\r\n    uint price = getMembershipPrice(membership) - discount;\r\n    // make sure they have enough balance to pay for it\r\n    require(balances[account] >= price);\r\n    // remove the payment from the user's account\r\n    balances[account] -= price;\r\n    // if this comes from a reseller\r\n    if (reseller != 0x0) {\r\n      // give the reseller his comission\r\n      balances[reseller] += comission;\r\n      // and put the rest in the signalsociety account\r\n      balances[owner] += price - comission;\r\n    } else {\r\n      // otherwise put it all in the signalsociety account\r\n      balances[owner] += price;\r\n    }    \r\n    // let the bot know the membership was paid\r\n    MembershipPaid(account, membership, now);\r\n  }\r\n  // default function.  Called when a user sends ETH to the contract.\r\n  // deposits the eth to their bank account\r\n  function () public payable {\r\n    deposit(msg.sender, msg.value);\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"membership\",\"type\":\"uint8\"},{\"name\":\"discount\",\"type\":\"uint256\"},{\"name\":\"reseller\",\"type\":\"address\"},{\"name\":\"comission\",\"type\":\"uint256\"}],\"name\":\"acceptMembership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bot\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"changeBot\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"membership\",\"type\":\"uint8\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setMembershipPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"membership\",\"type\":\"uint8\"}],\"name\":\"getMembershipPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"balance\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"membership\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"MembershipPaid\",\"type\":\"event\"}]","ContractName":"SignalsSociety","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://52cafe1fb700eba21c2363e0e7463d8d41a0cd732350b44b83fb752dd0ee3c3f"}]}