{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract ERC20 {\r\n\tusing SafeMath for uint256;\r\n\tuint256 public totalSupply;\r\n\taddress public contractHolder;\r\n\tstring public constant name = \"LITMUS\";\r\n\tstring public constant symbol = \"LIT\";\r\n\tuint8 public constant decimals = 0;\r\n\t\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\tevent Approval(address indexed owner, address indexed spender, uint256 value);\r\n\t\r\n\tmapping(address => uint256) balances;\r\n\tmapping (address => mapping (address => uint256)) internal allowed;\r\n\t\r\n\r\n\tfunction ERC20 (){\r\n\tcontractHolder = msg.sender;\r\n\t\r\n\t}\r\n\t\r\n    modifier ifHolder(){\r\n    require(contractHolder == msg.sender);\r\n    _;\r\n    }\r\n\t\r\n\tfunction allocate(address _to, uint256 _amount)  ifHolder public returns (bool) {\r\n    totalSupply = totalSupply.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    Transfer(0x0, _to, _amount);\r\n    return true;\r\n\t}\r\n\t\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n\t}\r\n  \r\n    function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n\t}\r\n\r\n\tfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n\r\n    uint256 _allowance = allowed[_from][msg.sender];\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n\t}\r\n\r\n\r\n\tfunction approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n\t}\r\n\r\n\r\n\tfunction allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n\t}\r\n  \r\n\r\n\tfunction increaseApproval (address _spender, uint _addedValue) public returns (bool success) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n\t}\r\n\r\n\tfunction decreaseApproval (address _spender, uint _subtractedValue) public returns (bool success) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n\t}\r\n\t\r\n\t\r\n}\r\n\r\n\r\ncontract LitmusCrowdsale {\r\n\tusing SafeMath for uint256;\r\n\tuint256 public weiRaised = 0;\r\n\tuint256 public rate = 1000000000000000;\r\n\tuint256 public goal = 1000000000000000000000;\r\n\tuint256 public cap = 5000000000000000000000;\r\n\t\r\n\tuint256 public startTime =  1506556800;\r\n\tuint256 public bonusTime = 1507248000;\r\n\tuint256 public endTime =  1509235200;\r\n\r\n\tbool public fundersClaimed = false;\r\n\taddress public issuer;\r\n\t\r\n    ERC20 public token;\r\n\tmapping (address => uint256) contributions;\r\n\tevent TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n\t\r\n\tfunction LitmusCrowdsale (){\t\r\n\tissuer = msg.sender;\r\n\ttoken = createTokenContract();\r\n\t}\r\n\t\r\n\tmodifier ifIssuer(){\r\n    require(issuer == msg.sender);\r\n    _;\r\n    }\r\n\r\n    function createTokenContract() internal returns (ERC20) {\r\n    return new ERC20();\r\n\t}\r\n    \r\n\tfunction timeElapsed() internal constant returns (bool) {\r\n\tbool assertTime = now > endTime;\r\n\treturn assertTime;\r\n\t}\r\n\t\r\n\t\r\n    function goalReached() internal constant returns (bool) {\r\n    return weiRaised >= goal;\r\n\t}\r\n\t\r\n\tfunction icoFunded() internal constant returns (bool) {\r\n    bool softCap = goalReached() && timeElapsed();\r\n\tbool hardCap = weiRaised >= cap;\r\n\treturn softCap || hardCap;\r\n\t}\r\n\t\r\n\tfunction validPurchase() internal constant returns (bool) {\r\n    bool withinPeriod = now >= startTime && now <= endTime;\r\n\tbool withinCap = weiRaised.add(msg.value) <= cap;\r\n    return withinPeriod && withinCap;\r\n\t}\r\n\t\r\n\tfunction accruedBonus(uint256 senderWei, uint256 _tokens) internal constant returns (uint256 bonus) {\r\n    require(_tokens != 0);\r\n\tif (now <= bonusTime || senderWei >= 1 ether) {\r\n\t\treturn _tokens.div(20);\r\n\t\t}\r\n\t\treturn 0;\r\n\t}\r\n\t\r\n\tfunction buyTokens() public payable {\r\n    require(msg.value >= 50 finney);\r\n\trequire(validPurchase());\r\n\taddress backer =  msg.sender;\r\n    uint256 weiAmount = msg.value;\r\n    uint256 tokens = weiAmount.div(rate);\r\n\ttokens = tokens.add(accruedBonus(weiAmount,tokens));\r\n    weiRaised = weiRaised.add(weiAmount);\r\n    token.allocate(backer, tokens);\r\n\tcontributions[backer] = contributions[backer].add(weiAmount);\r\n\tTokenPurchase(msg.sender, msg.sender, weiAmount, tokens);\r\n    }\r\n\t\r\n\tfunction claimRefund() public {\r\n\trequire(!goalReached() && timeElapsed());\t\t\r\n\taddress investor = msg.sender;\r\n\tuint256 invested = contributions[investor];\r\n\trequire(invested > 0);\r\n\tcontributions[investor] = 0;\r\n\tinvestor.transfer(invested);\r\n\t}\r\n\t\r\n\tfunction finalise() ifIssuer public {\t\t\r\n\trequire(icoFunded());\r\n\tissuer.transfer(this.balance);\r\n\t}\r\n  \r\n\tfunction init() ifIssuer public {\t\r\n\trequire(!fundersClaimed);\r\n\tfundersClaimed = true;\r\n\ttoken.allocate(issuer, 5750000);\r\n\t}\r\n\t\r\n\tfunction mop() ifIssuer public {\r\n\trequire(now > endTime + 31 days);\r\n\tissuer.transfer(this.balance);\r\n\t} \r\n    \r\n    function verifyYourBalance(address _YourWallet) public constant returns (uint256 balance) {\r\n\treturn token.balanceOf(_YourWallet);\r\n    }\r\n\r\n\tfunction () payable {\r\n    buyTokens();\r\n\t}\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"issuer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"goal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"mop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_YourWallet\",\"type\":\"address\"}],\"name\":\"verifyYourBalance\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalise\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundersClaimed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimRefund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"init\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"}]","ContractName":"LitmusCrowdsale","CompilerVersion":"v0.4.17+commit.bdeb9e52","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://287161927c17408f7c73e8092505bb234b55b6e3bd6bca1324beeef3134abadb"}]}