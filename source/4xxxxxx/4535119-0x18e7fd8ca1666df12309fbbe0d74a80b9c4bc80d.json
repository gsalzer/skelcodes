{"status":"1","message":"OK","result":[{"SourceCode":"contract Constants {\r\n\tuint256 public constant PRE_ICO_RISK_PERCENTAGE = 5;\r\n\tuint256 public constant TEAM_SHARE_PERCENTAGE = 16;\r\n\tuint256 public constant blocksByDay = 6306;\r\n\tuint256 public constant coinMultiplayer = (10**18);\r\n\t\r\n\tuint256 public constant PRICE_PREICO = 50000;\r\n\tuint256 public constant PRICE_ICO1 = 33333;\r\n\tuint256 public constant PRICE_ICO2 = 25000;\r\n\tuint256 public constant PRICE_ICO4 = 20000;\r\n\t\r\n\tuint256 public constant delayOfPreICO = blocksByDay*23;\r\n\tuint256 public constant delayOfICO1 = blocksByDay*46;\r\n\tuint256 public constant delayOfICO2 = blocksByDay*69;\r\n\tuint256 public constant delayOfICOEND = blocksByDay*90;\r\n   uint256 public constant minimumGoal = coinMultiplayer*(10**6)*178 ;\r\n  uint256 public constant maxTokenSupplyPreICO = coinMultiplayer*(10**6)*357 ; \r\n  uint256 public constant maxTokenSupplyICO1 = coinMultiplayer*(10**6)*595 ; \r\n  uint256 public constant maxTokenSupplyICO2 = coinMultiplayer*(10**6)*833 ; \r\n  uint256 public constant maxTokenSupplyICOEND =coinMultiplayer*(10**6)*1000 ; \r\n}\r\n\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) constant public returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) constant public returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) constant public returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) constant public returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract DevTeamContractI{\r\n\tfunction recieveFunds() payable public;\r\n}\r\n\r\ncontract CABCoinI{\r\n  address public owner;\r\n  uint256 public totalSupply;\r\n  bool public mintingFinished = false;\r\n  modifier onlyOwner() {\r\n    if(msg.sender == owner){\r\n      _;\r\n    }\r\n    else{\r\n      revert();\r\n    }\r\n  }\r\n  \r\n  modifier canMint() {\r\n    if(!mintingFinished){\r\n      _;\r\n    }\r\n    else{\r\n      revert();\r\n    }\r\n  }\r\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool);\r\n  function getMaxTokenAvaliable() constant public  returns(uint256);\r\n  function finishMinting() onlyOwner public returns (bool);\r\n}\r\n\r\ncontract CABCoinICO is Constants{\r\n  using SafeMath for uint256;\r\n  mapping(address => bool) public preICOHolders ;\r\n  mapping(address => uint256) public ethGiven ;\r\n\taddress public tokenAddress = 0;\r\n\tDevTeamContractI public devTeam;\r\n\tuint256 public _startBlock ;\r\n\tCABCoinI public coin;\r\n\t\r\n\t\r\n\tevent AmountToLittle();\r\n\tevent SendAllFunds();\r\n\tevent Buy(address who,uint256 amount);\r\n\tevent Refund(address who,uint256 amount);\r\n\t\r\n  modifier canMint() {\r\n    if(coin.mintingFinished()==false){\r\n    \t_;\r\n    }\r\n    else{\r\n    \t\r\n    }\r\n  }\r\n  \r\n  bool private isRunned = false;\r\n  \r\n  modifier runOnce() {\r\n  \tif(isRunned){\r\n  \t\trevert();\r\n  \t}\r\n  \telse{\r\n  \t\tisRunned = true;\r\n  \t\t_;\r\n  \t}\r\n  }\r\n  \r\n\tuint256 public currBlock = 1;\r\n\t\r\n\tfunction GetTime() public constant returns(uint256) {\r\n\t  return block.number;\r\n\t}\r\n\t\r\n\tfunction getAllTimes() public constant returns(uint256,uint256,uint256){\r\n\t\tif(GetTime()<_startBlock){\r\n\t\t\treturn(_startBlock.sub(GetTime()),0,0);\r\n\t\t}\r\n\t\tif(GetTime()<=_startBlock.add(delayOfICOEND))\r\n\t\t{\r\n\t\t\tuint256 currentStageTime = 0;\r\n\t\t\tif(GetTime()<_startBlock.add(delayOfPreICO)){\r\n\t\t\t\tcurrentStageTime = _startBlock.add(delayOfPreICO) - GetTime();\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tif(GetTime()<_startBlock.add(delayOfICO1)){\r\n\t\t\t\t\tcurrentStageTime = _startBlock.add(delayOfICO1) - GetTime();\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tif(GetTime()<_startBlock.add(delayOfICO2)){\r\n\t\t\t\t\t\tcurrentStageTime = _startBlock.add(delayOfICO2) - GetTime();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(GetTime()>=_startBlock){\r\n\t\t\t\treturn(0,currentStageTime,_startBlock.add(delayOfICOEND)-GetTime());\r\n\t\t\t}\r\n\t\t}\r\n\t\telse{\r\n\t\t\treturn(0,0,0);\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction CABCoinICO(uint256 sBlock) public {\r\n\t\tif(sBlock==0){\r\n\t    \t_startBlock = GetTime();\r\n\t\t}\r\n\t\telse{\r\n\t    \t_startBlock = sBlock;\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction SetContracts(address coinAdr, address dev) runOnce() public{\r\n\t\t\r\n  \t\tif(tokenAddress == address(0)){\r\n  \t\t\ttokenAddress = coinAdr;\r\n\t\t    coin = CABCoinI(coinAdr);\r\n\t\t    devTeam =  DevTeamContractI(dev);\r\n  \t\t}\r\n\t}\r\n\t\r\n\tfunction getMaxEther() constant public  returns(uint256) {\r\n\t\tuint256 maxAv = coin.getMaxTokenAvaliable();\r\n\t\tuint256 price = getCabCoinsAmount();\r\n\t\tvar maxEth = maxAv.div(price);\r\n\t\treturn maxEth;\r\n\t}\r\n\t\r\n\tfunction isAfterICO()  public constant returns(bool) {\r\n\t  return (getCabCoinsAmount() == 0); \r\n\t}\r\n\t\r\n\tfunction getCabCoinsAmount()  public constant returns(uint256) {\r\n\t\tif(GetTime()<_startBlock){\r\n\t\t\treturn 0;\t\r\n\t\t}\r\n\t    if(GetTime()<_startBlock.add(delayOfPreICO)){\r\n\t    \tif(maxTokenSupplyPreICO>coin.totalSupply()){\r\n\t        \treturn PRICE_PREICO;\r\n\t    \t}\r\n\t    }\r\n\t    if(GetTime()<_startBlock.add(delayOfICO1) ){\r\n\t\t    if(maxTokenSupplyICO1>coin.totalSupply()){\r\n\t\t        return PRICE_ICO1;\r\n\t\t    }\t\r\n\t    } \r\n\t    if(GetTime()<_startBlock.add(delayOfICO2)){\r\n\t    \tif(maxTokenSupplyICO2>coin.totalSupply()){\r\n\t        \treturn PRICE_ICO2;\r\n\t    \t}\r\n\t    }\r\n\t    if(GetTime()<=_startBlock.add(delayOfICOEND)){\r\n\t    \tif(maxTokenSupplyICOEND>=coin.totalSupply()){\r\n\t        \treturn PRICE_ICO4;\r\n\t    \t}\r\n\t    }\r\n\t\treturn 0; \r\n\t}\r\n\t\r\n\tfunction() payable public{\r\n\t\t\r\n\t  if(isAfterICO() && coin.totalSupply()<minimumGoal){\r\n\t\tthis.refund.value(msg.value)(msg.sender);\r\n\t  }else{\r\n\t  \tif(msg.value==0){\r\n\t  \t\tsendAllFunds();\r\n\t  \t}else{\r\n\t  \t\t\r\n\t\t  \tif(isAfterICO() == false){\r\n\t\t\t\tthis.buy.value(msg.value)(msg.sender);\r\n\t\t  \t}else{\r\n\t  \t\t\trevert();\t\r\n\t\t  \t}\r\n\t  \t}\r\n\t  }\r\n\t}\r\n\t\r\n\tfunction buy(address owner) payable public{\r\n\t\t\r\n\t  bool isMintedDev ;\r\n\t  bool isMinted ;\r\n\t  Buy(owner,msg.value);\r\n\t  uint256 tokensAmountPerEth = getCabCoinsAmount();\r\n\t  \r\n\t\tif(GetTime()<_startBlock){\r\n\t\t\trevert();\r\n\t\t}\r\n\t\telse{\r\n\t\t\t\r\n\t\t\tif(tokensAmountPerEth==0){\r\n\t\t\t  coin.finishMinting();\r\n\t\t\t  msg.sender.transfer(msg.value);\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\r\n\t\t\t\tuint256 tokensAvailable = coin.getMaxTokenAvaliable() ;\r\n\t\t  \t\tuint256 val = tokensAmountPerEth.mul(msg.value) ;\r\n\t\t  \t\t\r\n\t\t  \t\tuint256 valForTeam = val.mul(TEAM_SHARE_PERCENTAGE).div(100-TEAM_SHARE_PERCENTAGE);\r\n\t\t  \t\t\r\n\t\t  \t\tif(tokensAvailable<val+valForTeam){\r\n\t\t  \t\t\tAmountToLittle();\r\n\t\t  \t\t\tval = val.mul(tokensAvailable).div(val.add(valForTeam));\r\n\t\t  \t\t\tvalForTeam = val.mul(TEAM_SHARE_PERCENTAGE).div(100-TEAM_SHARE_PERCENTAGE);\r\n\t\t\t  \t\tisMintedDev =coin.mint(owner,val);\r\n\t\t\t  \t\tisMinted =  coin.mint(devTeam,valForTeam);\r\n\t\t\t  \t\t\r\n\t\t\t     \tethGiven[owner] = ethGiven[owner].add(msg.value);\r\n\t\t\t  \t\tif(isMintedDev==false){\r\n\t\t\t  \t\t  revert();\r\n\t\t\t  \t\t}\r\n\t\t\t  \t\tif(isMinted==false){\r\n\t\t\t  \t\t  revert();\r\n\t\t\t  \t\t}\r\n\t\t\t\t\tcoin.finishMinting();\r\n\t\t  \t\t}\r\n\t\t  \t\telse\r\n\t\t  \t\t{\r\n\t\t  \t\t\t\r\n\t\t\t  \t\tif(IsPreICO()){\r\n\t\t\t  \t\t  preICOHolders[owner] = true;\r\n\t\t\t  \t\t  devTeam.recieveFunds.value(msg.value.mul(PRE_ICO_RISK_PERCENTAGE).div(100))();\r\n\t\t\t  \t\t}\r\n\t\t\t  \t\r\n\t\t\t  \t\tisMintedDev =coin.mint(owner,val);\r\n\t\t\t  \t\tisMinted =  coin.mint(devTeam,valForTeam);\r\n\t\t\t  \t\t\r\n\t\t\t     \tethGiven[owner] = ethGiven[owner].add(msg.value);\r\n\t\t\t  \t\tif(isMintedDev==false){\r\n\t\t\t  \t\t  revert();\r\n\t\t\t  \t\t}\r\n\t\t\t  \t\tif(isMinted==false){\r\n\t\t\t  \t\t  revert();\r\n\t\t\t  \t\t}\r\n\t\t\t  \t\t\r\n\t\t  \t\t}\r\n\t\t\t\r\n\t\t\t}\r\n\t\t \r\n\t\t}\r\n\t\t\r\n\t}\r\n\t\r\n\tfunction IsPreICO() returns(bool){\r\n\t  if(GetTime()<_startBlock.add(delayOfPreICO)){\r\n\t    return true;\r\n\t  }\r\n\t  else{\r\n\t    return false;\r\n\t  }\r\n\t}\r\n\t\r\n\tfunction sendAllFunds() public {\r\n\t  SendAllFunds();\r\n\t  if(coin.totalSupply()>=minimumGoal){ // goal reached money Goes to devTeam\r\n\t    \r\n\t\tdevTeam.recieveFunds.value(this.balance)();\r\n\t  }\r\n\t  else\r\n\t  {\r\n\t    revert();\r\n\t  }\r\n\t}\r\n\t\r\n\t\r\n\tfunction refund(address sender) payable public {\r\n\t  Refund(sender,ethGiven[sender]);\r\n\t  if(isAfterICO() && coin.totalSupply()<minimumGoal){ // goal not reached\r\n\t    var sumToReturn = ethGiven[sender];\r\n\t     ethGiven[sender] =0;\r\n\t    if(preICOHolders[msg.sender]){\r\n\t    \tsumToReturn = sumToReturn.mul(100-PRE_ICO_RISK_PERCENTAGE).div(100);\r\n\t    }\r\n\t    sumToReturn = sumToReturn.add(msg.value);\r\n\t    if(sumToReturn>this.balance){\r\n\t    \tsender.transfer(this.balance);\r\n\t    }\r\n\t    else{\r\n\t    \tsender.transfer(sumToReturn.add(msg.value));\r\n\t    }\r\n\t  }\r\n\t  else\r\n\t  {\r\n\t  \tif(msg.value>0){\r\n\t  \t\tsender.transfer(msg.value);\r\n\t  \t}\r\n\t  }\r\n\t}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"TEAM_SHARE_PERCENTAGE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"delayOfICO2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"blocksByDay\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"coin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxTokenSupplyICO2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRICE_ICO4\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxTokenSupplyICOEND\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"coinAdr\",\"type\":\"address\"},{\"name\":\"dev\",\"type\":\"address\"}],\"name\":\"SetContracts\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"delayOfICOEND\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_startBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCabCoinsAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRICE_ICO1\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"preICOHolders\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMaxEther\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAllTimes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"sendAllFunds\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRICE_ICO2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"coinMultiplayer\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRICE_PREICO\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRE_ICO_RISK_PERCENTAGE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"IsPreICO\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimumGoal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"devTeam\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isAfterICO\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"delayOfPreICO\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxTokenSupplyICO1\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"delayOfICO1\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxTokenSupplyPreICO\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"refund\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"ethGiven\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"sBlock\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"AmountToLittle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"SendAllFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Buy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Refund\",\"type\":\"event\"}]","ContractName":"CABCoinICO","CompilerVersion":"v0.4.15+commit.bbb8e64f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000004608e6","Library":":SafeMath:5f43fb5f69c97c5a31633bdf4e3f10d5b775902a","SwarmSource":"bzzr://236996033b6213958b69ccf10f98bf2d162fdf2162d325118b013edc3cfd5533"}]}