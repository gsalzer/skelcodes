{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\n/**\r\n * Math operations with safety checks\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n\r\n  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n    return a < b ? a : b;\r\n  }\r\n\r\n  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    return a < b ? a : b;\r\n  }\r\n\r\n}\r\n\r\n/*\r\n * Ownable\r\n *\r\n * Base contract with an owner.\r\n * Provides onlyOwner modifier, which prevents function from running if it is called by anyone other than the owner.\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  function transferOwnership(address newOwner) onlyOwner {\r\n    if (newOwner != address(0)) {\r\n      owner = newOwner;\r\n    }\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) constant returns (uint256);\r\n  function transfer(address to, uint256 value);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value);\r\n  function approve(address spender, uint256 value);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n   * @dev Fix for the ERC20 short address attack.\r\n   */\r\n  modifier onlyPayloadSize(uint256 size) {\r\n     require(msg.data.length >= size + 4);\r\n     _;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) onlyPayloadSize(2 * 32) {\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implemantation of the basic standart token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is BasicToken, ERC20 {\r\n\r\n  mapping (address => mapping (address => uint256)) allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amout of tokens to be transfered\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) onlyPayloadSize(3 * 32) {\r\n    var _allowance = allowed[_from][msg.sender];\r\n\r\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n    // if (_value > _allowance) throw;\r\n\r\n    balances[_to] = balances[_to].add(_value);\r\n    balances[_from] = balances[_from].sub(_value);\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    Transfer(_from, _to, _value);\r\n  }\r\n\r\n  /**\r\n   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) {\r\n\r\n    // To change the approve amount you first have to reduce the addresses`\r\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n    //  already 0 to mitigate the race condition described here:\r\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifing the amount of tokens still avaible for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n}\r\n\r\n/// @title Migration Agent interface\r\ncontract MigrationAgent {\r\n  function migrateFrom(address _from, uint256 _value);\r\n}\r\n\r\n/// @title Votes Platform Token\r\ncontract VotesPlatformToken is StandardToken, Ownable {\r\n\r\n  string public name = \"Votes Platform Token\";\r\n  string public symbol = \"VOTES\";\r\n  uint256 public decimals = 2;\r\n  uint256 public INITIAL_SUPPLY = 100000000 * 100;\r\n\r\n  mapping(address => bool) refundAllowed;\r\n\r\n  address public migrationAgent;\r\n  uint256 public totalMigrated;\r\n\r\n  /**\r\n   * @dev Contructor that gives msg.sender all of existing tokens.\r\n   */\r\n  function VotesPlatformToken() {\r\n    totalSupply = INITIAL_SUPPLY;\r\n    balances[msg.sender] = INITIAL_SUPPLY;\r\n  }\r\n\r\n  /**\r\n   * Allow refund from given presale contract address.\r\n   * Only token owner may do that.\r\n   */\r\n  function allowRefund(address _contractAddress) onlyOwner {\r\n    refundAllowed[_contractAddress] = true;\r\n  }\r\n\r\n  /**\r\n   * Refund _count presale tokens from _from to msg.sender.\r\n   * msg.sender must be a trusted presale contract.\r\n   */\r\n  function refundPresale(address _from, uint _count) {\r\n    require(refundAllowed[msg.sender]);\r\n    balances[_from] = balances[_from].sub(_count);\r\n    balances[msg.sender] = balances[msg.sender].add(_count);\r\n  }\r\n\r\n  function setMigrationAgent(address _agent) external onlyOwner {\r\n    migrationAgent = _agent;\r\n  }\r\n\r\n  function migrate(uint256 _value) external {\r\n    // Abort if not in Operational Migration state.\r\n    require(migrationAgent != 0);\r\n\r\n    // Validate input value.\r\n    require(_value > 0);\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    balances[msg.sender] -= _value;\r\n    totalSupply -= _value;\r\n    totalMigrated += _value;\r\n    MigrationAgent(migrationAgent).migrateFrom(msg.sender, _value);\r\n  }\r\n}\r\n\r\n/**\r\n * Workflow:\r\n * 1) owner: create token contract\r\n * 2) owner: create presale contract\r\n * 3) owner: transfer required amount of tokens to presale contract\r\n * 4) owner: allow refund from presale contract by calling token.allowRefund\r\n * 5) <wait for start time>\r\n * 6) everyone sends ether to the presale contract and receives tokens in exchange\r\n * 7) <wait until end time or until hard cap is reached>\r\n * 8) if soft cap is reached:\r\n * 8.1) beneficiary calls withdraw() and receives\r\n * 8.2) beneficiary calls withdrawTokens() and receives the rest of non-sold tokens\r\n * 9) if soft cap is not reached:\r\n * 9.1) everyone calls refund() and receives their ether back in exchange for tokens\r\n * 9.2) owner calls withdrawTokens() and receives the refunded tokens\r\n */\r\ncontract VotesPlatformTokenPreSale is Ownable {\r\n    using SafeMath for uint;\r\n\r\n    string public name = \"Votes Platform Token ICO\";\r\n\r\n    VotesPlatformToken public token;\r\n    address public beneficiary;\r\n\r\n    uint public hardCap;\r\n    uint public softCap;\r\n    uint public tokenPrice;\r\n    uint public purchaseLimit;\r\n\r\n    uint public tokensSold = 0;\r\n    uint public weiRaised = 0;\r\n    uint public investorCount = 0;\r\n    uint public weiRefunded = 0;\r\n\r\n    uint public startTime;\r\n    uint public endTime;\r\n\r\n    bool public softCapReached = false;\r\n    bool public crowdsaleFinished = false;\r\n\r\n    mapping(address => uint) sold;\r\n\r\n    event GoalReached(uint amountRaised);\r\n    event SoftCapReached(uint softCap1);\r\n    event NewContribution(address indexed holder, uint256 tokenAmount, uint256 etherAmount);\r\n    event Refunded(address indexed holder, uint256 amount);\r\n\r\n    modifier onlyAfter(uint time) {\r\n        require(now >= time);\r\n        _;\r\n    }\r\n\r\n    modifier onlyBefore(uint time) {\r\n        require(now <= time);\r\n        _;\r\n    }\r\n\r\n    function VotesPlatformTokenPreSale(\r\n        uint _hardCapUSD,       // maximum allowed fundraising in USD\r\n        uint _softCapUSD,       // minimum amount in USD required for withdrawal by beneficiary\r\n        address _token,         // token contract address\r\n        address _beneficiary,   // beneficiary address\r\n        uint _totalTokens,      // in token-wei. i.e. number of presale tokens * 10^18\r\n        uint _priceETH,         // ether price in USD\r\n        uint _purchaseLimitUSD, // purchase limit in USD\r\n        uint _startTime,        // start time (unix time, in seconds since 1970-01-01)\r\n        uint _duration          // presale duration in hours\r\n    ) {\r\n        hardCap = _hardCapUSD * 1 ether / _priceETH;\r\n        softCap = _softCapUSD * 1 ether / _priceETH;\r\n        tokenPrice = hardCap / _totalTokens;\r\n\r\n        purchaseLimit = _purchaseLimitUSD * 1 ether / _priceETH / tokenPrice;\r\n        token = VotesPlatformToken(_token);\r\n        beneficiary = _beneficiary;\r\n\r\n        startTime = _startTime;\r\n        endTime = _startTime + _duration * 1 hours;\r\n    }\r\n\r\n    function () payable {\r\n        require(msg.value / tokenPrice > 0);\r\n        doPurchase(msg.sender);\r\n    }\r\n\r\n    function refund() external onlyAfter(endTime) {\r\n        require(!softCapReached);\r\n        uint balance = sold[msg.sender];\r\n        require(balance > 0);\r\n        uint refund = balance * tokenPrice;\r\n        msg.sender.transfer(refund);\r\n        delete sold[msg.sender];\r\n        weiRefunded = weiRefunded.add(refund);\r\n        token.refundPresale(msg.sender, balance);\r\n        Refunded(msg.sender, refund);\r\n    }\r\n\r\n    function withdrawTokens() onlyOwner onlyAfter(endTime) {\r\n        token.transfer(beneficiary, token.balanceOf(this));\r\n    }\r\n\r\n    function withdraw() onlyOwner {\r\n        require(softCapReached);\r\n        beneficiary.transfer(weiRaised);\r\n        token.transfer(beneficiary, token.balanceOf(this));\r\n        crowdsaleFinished = true;\r\n    }\r\n\r\n    function doPurchase(address _to) private onlyAfter(startTime) onlyBefore(endTime) {\r\n        assert(crowdsaleFinished == false);\r\n\r\n        require(weiRaised.add(msg.value) <= hardCap);\r\n\r\n        if (!softCapReached && weiRaised < softCap && weiRaised.add(msg.value) >= softCap) {\r\n            softCapReached = true;\r\n            SoftCapReached(softCap);\r\n        }\r\n\r\n        uint tokens = msg.value / tokenPrice;\r\n        require(token.balanceOf(_to) + tokens <= purchaseLimit);\r\n\r\n        if (sold[_to] == 0)\r\n            investorCount++;\r\n\r\n        token.transfer(_to, tokens);\r\n        sold[_to] += tokens;\r\n        tokensSold = tokensSold.add(tokens);\r\n\r\n        weiRaised = weiRaised.add(msg.value);\r\n\r\n        NewContribution(_to, tokens, msg.value);\r\n\r\n        if (weiRaised == hardCap) {\r\n            GoalReached(hardCap);\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INITIAL_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"migrate\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_agent\",\"type\":\"address\"}],\"name\":\"setMigrationAgent\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"migrationAgent\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalMigrated\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_count\",\"type\":\"uint256\"}],\"name\":\"refundPresale\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contractAddress\",\"type\":\"address\"}],\"name\":\"allowRefund\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"VotesPlatformToken","CompilerVersion":"v0.4.12+commit.194ff033","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://484fce4aadd8ca76f10e19e958c7f286a84bc32df910a7c5fa2c231096d3618a"}]}