{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n * This reservation contract accepts investments, which will be sent to the ICO contract as soon as it starts buy calling buyTokens().\r\n * Investors may withdraw their funds anytime if they change their mind as long as the tokens have not yet been purchased.\r\n * Author: Julia Altenried\r\n * Internal audit: Alex Bazhanau, Andrej Ruckij\r\n * Audit: Blockchain & Smart Contract Security Group\r\n **/\r\n\r\npragma solidity ^0.4.15;\r\n\r\ncontract ICO {\r\n\tfunction invest(address receiver) payable {}\r\n}\r\n\r\ncontract SafeMath {\r\n\r\n\tfunction safeAdd(uint a, uint b) internal returns(uint) {\r\n\t\tuint c = a + b;\r\n\t\tassert(c >= a && c >= b);\r\n\t\treturn c;\r\n\t}\r\n\r\n\tfunction safeMul(uint a, uint b) internal returns(uint) {\r\n\t\tuint c = a * b;\r\n\t\tassert(a == 0 || c / a == b);\r\n\t\treturn c;\r\n\t}\r\n}\r\n\r\ncontract owned {\r\n  address public owner;\r\n  modifier onlyOwner {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  function owned() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  function changeOwner(address newOwner) onlyOwner {\r\n    owner = newOwner;\r\n  }\r\n}\r\n\r\ncontract mortal is owned {\r\n  function close() onlyOwner {\r\n\t\trequire(address(this).balance == 0);\r\n    selfdestruct(owner);\r\n  }\r\n}\r\n\r\ncontract Reservation2 is mortal, SafeMath {\r\n\tICO public ico;\r\n\taddress[] public investors;\r\n\tmapping(address => uint) public balanceOf;\r\n\tmapping(address => bool) invested;\r\n\tuint public weiCap;\r\n\r\n\r\n\t/** constructs an investment contract for an ICO contract **/\r\n\tfunction Reservation2(address _icoAddr, uint _etherCap) {\r\n\t\tico = ICO(_icoAddr);\r\n\t\tweiCap = safeMul(_etherCap, 1 ether);\r\n\t}\r\n\r\n\t/** make an investment **/\r\n\tfunction() payable {\r\n\t\trequire(msg.value > 0);\r\n\r\n\t\trequire(weiCap == 0 || this.balance <= weiCap);\r\n\r\n\t\tif (!invested[msg.sender]) {\r\n\t\t\tinvestors.push(msg.sender);\r\n\t\t\tinvested[msg.sender] = true;\r\n\t\t}\r\n\t\tbalanceOf[msg.sender] = safeAdd(balanceOf[msg.sender], msg.value);\r\n\t}\r\n\r\n\t/** buys tokens in behalf of the investors by calling the ico contract\r\n\t *   starting with the investor at index from and ending with investor at index to.\r\n\t *   This function will be called as soon as the ICO starts and as often as necessary, until all investments were made. **/\r\n\tfunction buyTokens(uint _from, uint _to) onlyOwner {\r\n\t\trequire(address(ico)!=0x0);//would fail anyway below, but to be sure\r\n\t\tuint amount;\r\n\t\tif (_to > investors.length)\r\n\t\t\t_to = investors.length;\r\n\t\tfor (uint i = _from; i < _to; i++) {\r\n\t\t\tif (balanceOf[investors[i]] > 0) {\r\n\t\t\t\tamount = balanceOf[investors[i]];\r\n\t\t\t\tdelete balanceOf[investors[i]];\r\n\t\t\t\tico.invest.value(amount)(investors[i]);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/** In case an investor wants to retrieve his or her funds he or she can call this function.\r\n\t *   (only possible before tokens are bought) **/\r\n\tfunction withdraw() {\r\n\t\tuint amount = balanceOf[msg.sender];\r\n\t\trequire(amount > 0);\r\n\t\t\r\n\t\tbalanceOf[msg.sender] = 0;\r\n\t\tmsg.sender.transfer(amount);\r\n\t}\r\n\r\n\t/** returns the number of investors **/\r\n\tfunction getNumInvestors() constant returns(uint) {\r\n\t\treturn investors.length;\r\n\t}\r\n\t\r\n\tfunction setICO(address _icoAddr) onlyOwner {\r\n\t\tico = ICO(_icoAddr);\r\n\t}\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"investors\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"close\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ico\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getNumInvestors\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"uint256\"},{\"name\":\"_to\",\"type\":\"uint256\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_icoAddr\",\"type\":\"address\"}],\"name\":\"setICO\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_icoAddr\",\"type\":\"address\"},{\"name\":\"_etherCap\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"}]","ContractName":"Reservation2","CompilerVersion":"v0.4.15+commit.bbb8e64f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000188c0929a5849140000","Library":"","SwarmSource":"bzzr://6dc8ef5c3da7ae4ba6150d95fbdab3df4cdb73e8d136990cf789a5e0e89d75df"}]}