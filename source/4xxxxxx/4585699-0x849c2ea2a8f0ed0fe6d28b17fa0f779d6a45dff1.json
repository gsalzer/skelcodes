{"status":"1","message":"OK","result":[{"SourceCode":"library SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public constant returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n}\r\n\r\n\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) allowed;\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n\r\n    uint256 _allowance = allowed[_from][msg.sender];\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  function increaseApproval (address _spender, uint _addedValue)\r\n    returns (bool success) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  function decreaseApproval (address _spender, uint _subtractedValue)\r\n    returns (bool success) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\ncontract Certifier {\r\n    event Confirmed(address indexed who);\r\n    event Revoked(address indexed who);\r\n    function certified(address) public constant returns (bool);\r\n    function get(address, string) public constant returns (bytes32);\r\n    function getAddress(address, string) public constant returns (address);\r\n    function getUint(address, string) public constant returns (uint);\r\n}\r\n\r\ncontract EDUToken is StandardToken {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    Certifier public certifier;\r\n\r\n    // EVENTS\r\n    event CreatedEDU(address indexed _creator, uint256 _amountOfEDU);\r\n    event Transfer(address indexed _from, address indexed _to, uint _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n\r\n    // GENERAL INFORMATION ABOUT THE TOKEN\r\n    string public constant name = \"EDU Token\";\r\n    string public constant symbol = \"EDU\";\r\n    uint256 public constant decimals = 4;\r\n    string public version = \"1.0\";\r\n\r\n    // CONSTANTS\r\n    // Purchase limits\r\n    uint256 public constant TotalEDUSupply = 48000000*10000;                    // MAX TOTAL EDU TOKENS 48 million\r\n    uint256 public constant maxEarlyPresaleEDUSupply = 2601600*10000;           // Maximum EDU tokens early presale supply (Presale Stage 1)\r\n    uint256 public constant maxPresaleEDUSupply = 2198400*10000;                // Maximum EDU tokens presale supply (Presale Stage 2)\r\n    uint256 public constant OSUniEDUSupply = 8400000*10000;                     // Open Source University EDU tokens supply\r\n    uint256 public constant SaleEDUSupply = 30000000*10000;                     // Allocated EDU tokens for crowdsale\r\n    uint256 public constant sigTeamAndAdvisersEDUSupply = 3840000*10000;        // EDU tokens supply allocated for team and advisers\r\n    uint256 public constant sigBountyProgramEDUSupply = 960000*10000;           // EDU tokens supply allocated for bounty program\r\n\r\n    //ASSIGNED IN INITIALIZATION\r\n    // Time limits\r\n    uint256 public preSaleStartTime;                                            // Start presale time\r\n    uint256 public preSaleEndTime;                                              // End presale time\r\n    uint256 public saleStartTime;                                               // Start sale time (start crowdsale)\r\n    uint256 public saleEndTime;                                                 // End crowdsale\r\n\r\n    // Purchase limits\r\n    uint256 public earlyPresaleEDUSupply;\r\n    uint256 public PresaleEDUSupply;\r\n\r\n    // Refund in EDU tokens because of the KYC procedure\r\n    uint256 public EDU_KYC_BONUS = 50*10000;                                    // Bonus 50 EDU tokens for the KYC procedure\r\n\r\n    // Lock EDU tokens\r\n    uint256 public LockEDUTeam;                                                 // Lock EDU tokens relocated for the team\r\n\r\n    // Token bonuses\r\n    uint256 public EDU_PER_ETH_EARLY_PRE_SALE = 1350;                           // 1350 EDU = 1 ETH  presale stage 1  until the quantities are exhausted\r\n    uint256 public EDU_PER_ETH_PRE_SALE = 1200;                                 // 1200 EDU = 1 ETH  presale stage 2\r\n\r\n    // Token sale\r\n    uint256 public EDU_PER_ETH_SALE;                                            // Crowdsale price which will be anaunced after the alpha version of the OSUni platform\r\n\r\n    // Addresses\r\n    address public ownerAddress;                                                // Address used by Open Source University\r\n    address public presaleAddress;                                              // Address used in the presale period\r\n    address public saleAddress;                                                 // Address used in the crowdsale period\r\n    address public sigTeamAndAdvisersAddress;                                   // EDU tokens for the team and advisers\r\n    address public sigBountyProgramAddress;                                     // EDU tokens bounty program\r\n    address public contributionsAddress;                                        // Address used for contributions\r\n\r\n    // Contribution indicator\r\n    bool public allowContribution = true;                                       // Flag to change if transfering is allowed\r\n\r\n    // Running totals\r\n    uint256 public totalWEIInvested = 0;                                        // Total WEI invested\r\n    uint256 public totalEDUSLeft = 0;                                           // Total EDU left\r\n    uint256 public totalEDUSAllocated = 0;                                      // Total EDU allocated\r\n    mapping (address => uint256) public WEIContributed;                         // Total WEI Per Account\r\n\r\n    // Owner of account approves the transfer of an amount to another account\r\n    mapping(address => mapping (address => uint256)) allowed;\r\n\r\n    // Functions with this modifier can only be executed by the owner of following smart contract\r\n    modifier onlyOwner() {\r\n        if (msg.sender != ownerAddress) {\r\n            revert();\r\n        }\r\n        _;\r\n    }\r\n\r\n    // Minimal contribution which will be processed is 0.5 ETH\r\n    modifier minimalContribution() {\r\n        require(500000000000000000 <= msg.value);\r\n        _;\r\n    }\r\n\r\n    // Freeze all EDU token transfers during sale period\r\n    modifier freezeDuringEDUtokenSale() {\r\n        if ( (msg.sender == ownerAddress) ||\r\n             (msg.sender == contributionsAddress) ||\r\n             (msg.sender == presaleAddress) ||\r\n             (msg.sender == saleAddress) ||\r\n             (msg.sender == sigBountyProgramAddress) ) {\r\n            _;\r\n        } else {\r\n            if((block.timestamp > preSaleStartTime && block.timestamp < preSaleEndTime) || (block.timestamp > saleStartTime && block.timestamp < saleEndTime)) {\r\n                revert();\r\n            } else {\r\n                _;\r\n            }\r\n        }\r\n    }\r\n\r\n    // Freeze EDU tokens for TeamAndAdvisers for 1 year after the end of the presale\r\n    modifier freezeTeamAndAdvisersEDUTokens(address _address) {\r\n        if (_address == sigTeamAndAdvisersAddress) {\r\n            if (LockEDUTeam > block.timestamp) { revert(); }\r\n        }\r\n        _;\r\n    }\r\n\r\n    // INITIALIZATIONS FUNCTION\r\n    function EDUToken(\r\n        address _presaleAddress,\r\n        address _saleAddress,\r\n        address _sigTeamAndAdvisersAddress,\r\n        address _sigBountyProgramAddress,\r\n        address _contributionsAddress\r\n    ) {\r\n        certifier = Certifier(0x1e2F058C43ac8965938F6e9CA286685A3E63F24E);\r\n        ownerAddress = msg.sender;                                                               // Store owners address\r\n        presaleAddress = _presaleAddress;                                                        // Store presale address\r\n        saleAddress = _saleAddress;\r\n        sigTeamAndAdvisersAddress = _sigTeamAndAdvisersAddress;                                  // Store sale address\r\n        sigBountyProgramAddress = _sigBountyProgramAddress;\r\n        contributionsAddress = _contributionsAddress;\r\n\r\n        preSaleStartTime = 1511179200;                                                           // Start of presale right after end of early presale period\r\n        preSaleEndTime = 1514764799;                                                             // End of the presale period 1 week after end of early presale\r\n        LockEDUTeam = preSaleEndTime + 1 years;                                                  // EDU tokens allocated for the team will be freezed for one year\r\n\r\n        earlyPresaleEDUSupply = maxEarlyPresaleEDUSupply;                                        // MAX TOTAL DURING EARLY PRESALE (2 601 600 EDU Tokens)\r\n        PresaleEDUSupply = maxPresaleEDUSupply;                                                  // MAX TOTAL DURING PRESALE (2 198 400 EDU Tokens)\r\n\r\n        balances[contributionsAddress] = OSUniEDUSupply;                                         // Allocating EDU tokens for Open Source University             // Allocating EDU tokens for early presale\r\n        balances[presaleAddress] = SafeMath.add(maxPresaleEDUSupply, maxEarlyPresaleEDUSupply);  // Allocating EDU tokens for presale\r\n        balances[saleAddress] = SaleEDUSupply;                                                   // Allocating EDU tokens for sale\r\n        balances[sigTeamAndAdvisersAddress] = sigTeamAndAdvisersEDUSupply;                       // Allocating EDU tokens for team and advisers\r\n        balances[sigBountyProgramAddress] = sigBountyProgramEDUSupply;                           // Bounty program address\r\n\r\n\r\n        totalEDUSAllocated = OSUniEDUSupply + sigTeamAndAdvisersEDUSupply + sigBountyProgramEDUSupply;\r\n        totalEDUSLeft = SafeMath.sub(TotalEDUSupply, totalEDUSAllocated);                        // EDU Tokens left for sale\r\n\r\n        totalSupply = TotalEDUSupply;                                                            // Total EDU Token supply\r\n    }\r\n\r\n    // FALL BACK FUNCTION TO ALLOW ETHER CONTRIBUTIONS\r\n    function()\r\n        payable\r\n        minimalContribution\r\n    {\r\n        require(allowContribution);\r\n\r\n        // Only PICOPS certified addresses will be allowed to participate\r\n        if (!certifier.certified(msg.sender)) {\r\n            revert();\r\n        }\r\n\r\n        // Transaction value in Wei\r\n        uint256 amountInWei = msg.value;\r\n\r\n        // Initial amounts\r\n        uint256 amountOfEDU = 0;\r\n\r\n        if (block.timestamp > preSaleStartTime && block.timestamp < preSaleEndTime) {\r\n            amountOfEDU = amountInWei.mul(EDU_PER_ETH_EARLY_PRE_SALE).div(100000000000000);\r\n            if(!(WEIContributed[msg.sender] > 0)) {\r\n                amountOfEDU += EDU_KYC_BONUS;  // Bonus for KYC procedure\r\n            }\r\n            if (earlyPresaleEDUSupply > 0 && earlyPresaleEDUSupply >= amountOfEDU) {\r\n                require(updateEDUBalanceFunc(presaleAddress, amountOfEDU));\r\n                earlyPresaleEDUSupply = earlyPresaleEDUSupply.sub(amountOfEDU);\r\n            } else if (PresaleEDUSupply > 0) {\r\n                if (earlyPresaleEDUSupply != 0) {\r\n                    PresaleEDUSupply = PresaleEDUSupply.add(earlyPresaleEDUSupply);\r\n                    earlyPresaleEDUSupply = 0;\r\n                }\r\n                amountOfEDU = amountInWei.mul(EDU_PER_ETH_PRE_SALE).div(100000000000000);\r\n                if(!(WEIContributed[msg.sender] > 0)) {\r\n                    amountOfEDU += EDU_KYC_BONUS;\r\n                }\r\n                require(PresaleEDUSupply >= amountOfEDU);\r\n                require(updateEDUBalanceFunc(presaleAddress, amountOfEDU));\r\n                PresaleEDUSupply = PresaleEDUSupply.sub(amountOfEDU);\r\n            } else {\r\n                revert();\r\n            }\r\n        } else if (block.timestamp > saleStartTime && block.timestamp < saleEndTime) {\r\n            // Sale period\r\n            amountOfEDU = amountInWei.mul(EDU_PER_ETH_SALE).div(100000000000000);\r\n            require(totalEDUSLeft >= amountOfEDU);\r\n            require(updateEDUBalanceFunc(saleAddress, amountOfEDU));\r\n        } else {\r\n            // Outside contribution period\r\n            revert();\r\n        }\r\n\r\n        // Update total WEI Invested\r\n        totalWEIInvested = totalWEIInvested.add(amountInWei);\r\n        assert(totalWEIInvested > 0);\r\n        // Update total WEI Invested by account\r\n        uint256 contributedSafe = WEIContributed[msg.sender].add(amountInWei);\r\n        assert(contributedSafe > 0);\r\n        WEIContributed[msg.sender] = contributedSafe;\r\n\r\n        // Transfer contributions to Open Source University\r\n        contributionsAddress.transfer(amountInWei);\r\n\r\n        // CREATE EVENT FOR SENDER\r\n        CreatedEDU(msg.sender, amountOfEDU);\r\n    }\r\n\r\n    /**\r\n     * @dev Function for updating the balance and double checks allocated EDU tokens\r\n     * @param _from The address that will send EDU tokens.\r\n     * @param _amountOfEDU The amount of tokens which will be send to contributor.\r\n     * @return A boolean that indicates if the operation was successful.\r\n     */\r\n    function updateEDUBalanceFunc(address _from, uint256 _amountOfEDU) internal returns (bool) {\r\n        // Update total EDU balance\r\n        totalEDUSLeft = totalEDUSLeft.sub(_amountOfEDU);\r\n        totalEDUSAllocated += _amountOfEDU;\r\n\r\n        // Validate EDU allocation\r\n        if (totalEDUSAllocated <= TotalEDUSupply && totalEDUSAllocated > 0) {\r\n            // Update user EDU balance\r\n            uint256 balanceSafe = balances[msg.sender].add(_amountOfEDU);\r\n            assert(balanceSafe > 0);\r\n            balances[msg.sender] = balanceSafe;\r\n            uint256 balanceDiv = balances[_from].sub(_amountOfEDU);\r\n            balances[_from] = balanceDiv;\r\n            return true;\r\n        } else {\r\n            totalEDUSLeft = totalEDUSLeft.add(_amountOfEDU);\r\n            totalEDUSAllocated -= _amountOfEDU;\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Set contribution flag status\r\n     * @param _allowContribution This is additional parmition for the contributers\r\n     * @return A boolean that indicates if the operation was successful.\r\n     */\r\n    function setAllowContributionFlag(bool _allowContribution) public returns (bool success) {\r\n        require(msg.sender == ownerAddress);\r\n        allowContribution = _allowContribution;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Set the sale period\r\n     * @param _saleStartTime Sets the starting time of the sale period\r\n     * @param _saleEndTime Sets the end time of the sale period\r\n     * @return A boolean that indicates if the operation was successful.\r\n     */\r\n    function setSaleTimes(uint256 _saleStartTime, uint256 _saleEndTime) public returns (bool success) {\r\n        require(msg.sender == ownerAddress);\r\n        saleStartTime = _saleStartTime;\r\n        saleEndTime = _saleEndTime;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Set change the presale period if necessary\r\n     * @param _preSaleStartTime Sets the starting time of the presale period\r\n     * @param _preSaleEndTime Sets the end time of the presale period\r\n     * @return A boolean that indicates if the operation was successful.\r\n     */\r\n    function setPresaleTime(uint256 _preSaleStartTime, uint256 _preSaleEndTime) public returns (bool success) {\r\n        require(msg.sender == ownerAddress);\r\n        preSaleStartTime = _preSaleStartTime;\r\n        preSaleEndTime = _preSaleEndTime;\r\n        return true;\r\n    }\r\n\r\n    function setEDUPrice(\r\n        uint256 _valEarlyPresale,\r\n        uint256 _valPresale,\r\n        uint256 _valSale\r\n    ) public returns (bool success) {\r\n        require(msg.sender == ownerAddress);\r\n        EDU_PER_ETH_EARLY_PRE_SALE = _valEarlyPresale;\r\n        EDU_PER_ETH_PRE_SALE = _valPresale;\r\n        EDU_PER_ETH_SALE = _valSale;\r\n        return true;\r\n    }\r\n\r\n    function updateCertifier(address _address) public returns (bool success) {\r\n        certifier = Certifier(_address);\r\n        return true;\r\n    }\r\n\r\n    // Balance of a specific account\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    // Transfer the balance from owner's account to another account\r\n    function transfer(address _to, uint256 _amount) freezeDuringEDUtokenSale freezeTeamAndAdvisersEDUTokens(msg.sender) returns (bool success) {\r\n        if (balances[msg.sender] >= _amount && _amount > 0 && balances[_to] + _amount > balances[_to]) {\r\n            balances[msg.sender] -= _amount;\r\n            balances[_to] += _amount;\r\n            Transfer(msg.sender, _to, _amount);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    // Send _value amount of tokens from address _from to address _to\r\n    // The transferFrom method is used for a withdraw workflow, allowing contracts to send\r\n    // tokens on your behalf, for example to \"deposit\" to a contract address and/or to charge\r\n    // fees in sub-currencies; the command should fail unless the _from account has\r\n    // deliberately authorized the sender of the message via some mechanism; we propose\r\n    // these standardized APIs for approval:\r\n    function transferFrom(address _from, address _to, uint256 _amount) freezeDuringEDUtokenSale freezeTeamAndAdvisersEDUTokens(_from) returns (bool success) {\r\n        if (balances[_from] >= _amount\r\n             && allowed[_from][msg.sender] >= _amount\r\n             && _amount > 0\r\n             && balances[_to] + _amount > balances[_to]) {\r\n            balances[_from] -= _amount;\r\n            allowed[_from][msg.sender] -= _amount;\r\n            balances[_to] += _amount;\r\n            Transfer(_from, _to, _amount);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\r\n    // If this function is called again it overwrites the current allowance with _value.\r\n    function approve(address _spender, uint256 _amount) freezeDuringEDUtokenSale freezeTeamAndAdvisersEDUTokens(msg.sender) returns (bool success) {\r\n        allowed[msg.sender][_spender] = _amount;\r\n        Approval(msg.sender, _spender, _amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"preSaleStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sigBountyProgramEDUSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"EDU_PER_ETH_SALE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"certifier\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presaleAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PresaleEDUSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxPresaleEDUSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"EDU_PER_ETH_PRE_SALE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"EDU_PER_ETH_EARLY_PRE_SALE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"earlyPresaleEDUSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"LockEDUTeam\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"WEIContributed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sigTeamAndAdvisersEDUSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sigTeamAndAdvisersAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalEDUSAllocated\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contributionsAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_preSaleStartTime\",\"type\":\"uint256\"},{\"name\":\"_preSaleEndTime\",\"type\":\"uint256\"}],\"name\":\"setPresaleTime\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"updateCertifier\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxEarlyPresaleEDUSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SaleEDUSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalEDUSLeft\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_saleStartTime\",\"type\":\"uint256\"},{\"name\":\"_saleEndTime\",\"type\":\"uint256\"}],\"name\":\"setSaleTimes\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_valEarlyPresale\",\"type\":\"uint256\"},{\"name\":\"_valPresale\",\"type\":\"uint256\"},{\"name\":\"_valSale\",\"type\":\"uint256\"}],\"name\":\"setEDUPrice\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allowContribution\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalWEIInvested\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TotalEDUSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preSaleEndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"EDU_KYC_BONUS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_allowContribution\",\"type\":\"bool\"}],\"name\":\"setAllowContributionFlag\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleEndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sigBountyProgramAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"OSUniEDUSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_presaleAddress\",\"type\":\"address\"},{\"name\":\"_saleAddress\",\"type\":\"address\"},{\"name\":\"_sigTeamAndAdvisersAddress\",\"type\":\"address\"},{\"name\":\"_sigBountyProgramAddress\",\"type\":\"address\"},{\"name\":\"_contributionsAddress\",\"type\":\"address\"}],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_creator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amountOfEDU\",\"type\":\"uint256\"}],\"name\":\"CreatedEDU\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"EDUToken","CompilerVersion":"v0.4.15+commit.bbb8e64f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000001663ad6a0f4281559464a1beb59207919b0105e6000000000000000000000000c4f4f0c68f3dd0460ac9209a6454b99a79ab029b000000000000000000000000c40e3221e358a342289db22ac77667b980f8d3350000000000000000000000004a38281bd87a319ab66e9ba218fc5104a8477370000000000000000000000000269d55ef8acfdf0b83ccd08278ab440f87f9e9d8","Library":"","SwarmSource":"bzzr://ef47a3086c06b66b75e725810eca241c15b108ec03c16de5218ece44cb6d11d5"}]}