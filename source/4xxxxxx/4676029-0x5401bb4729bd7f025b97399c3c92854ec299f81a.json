{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public constant returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n\r\n    uint256 _allowance = allowed[_from][msg.sender];\r\n\r\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n    // require (_value <= _allowance);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   */\r\n  function increaseApproval (address _spender, uint _addedValue)\r\n    returns (bool success) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  function decreaseApproval (address _spender, uint _subtractedValue)\r\n    returns (bool success) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title Contactable token\r\n * @dev Basic version of a contactable contract, allowing the owner to provide a string with their\r\n * contact information.\r\n */\r\ncontract Contactable is Ownable{\r\n\r\n    string public contactInformation;\r\n\r\n    /**\r\n     * @dev Allows the owner to set a string with their contact information.\r\n     * @param info The contact information to attach to the contract.\r\n     */\r\n    function setContactInformation(string info) onlyOwner public {\r\n         contactInformation = info;\r\n     }\r\n}\r\n\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    Unpause();\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract IRefundHandler {\r\n    function handleRefundRequest(address _contributor) external;\r\n}\r\n\r\n\r\ncontract LOCIcoin is StandardToken, Ownable, Contactable {\r\n    string public name = \"\";\r\n    string public symbol = \"\";\r\n    uint256 public constant decimals = 18;\r\n\r\n    mapping (address => bool) internal allowedOverrideAddresses;\r\n\r\n    bool public tokenActive = false;\r\n\r\n    modifier onlyIfTokenActiveOrOverride() {\r\n        // owner or any addresses listed in the overrides\r\n        // can perform token transfers while inactive\r\n        require(tokenActive || msg.sender == owner || allowedOverrideAddresses[msg.sender]);\r\n        _;\r\n    }\r\n\r\n    modifier onlyIfTokenInactive() {\r\n        require(!tokenActive);\r\n        _;\r\n    }\r\n\r\n    modifier onlyIfValidAddress(address _to) {\r\n        // prevent 'invalid' addresses for transfer destinations\r\n        require(_to != 0x0);\r\n        // don't allow transferring to this contract's address\r\n        require(_to != address(this));\r\n        _;\r\n    }\r\n\r\n    event TokenActivated();\r\n\r\n    function LOCIcoin(uint256 _totalSupply, string _contactInformation ) public {\r\n        totalSupply = _totalSupply;\r\n        contactInformation = _contactInformation;\r\n\r\n        // msg.sender == owner of the contract\r\n        balances[msg.sender] = _totalSupply;\r\n    }\r\n\r\n    /// @dev Same ERC20 behavior, but reverts if not yet active.\r\n    /// @param _spender address The address which will spend the funds.\r\n    /// @param _value uint256 The amount of tokens to be spent.\r\n    function approve(address _spender, uint256 _value) public onlyIfTokenActiveOrOverride onlyIfValidAddress(_spender) returns (bool) {\r\n        return super.approve(_spender, _value);\r\n    }\r\n\r\n    /// @dev Same ERC20 behavior, but reverts if not yet active.\r\n    /// @param _to address The address to transfer to.\r\n    /// @param _value uint256 The amount to be transferred.\r\n    function transfer(address _to, uint256 _value) public onlyIfTokenActiveOrOverride onlyIfValidAddress(_to) returns (bool) {\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n    function ownerSetOverride(address _address, bool enable) external onlyOwner {\r\n        allowedOverrideAddresses[_address] = enable;\r\n    }\r\n\r\n    function ownerSetVisible(string _name, string _symbol) external onlyOwner onlyIfTokenInactive {        \r\n\r\n        // By holding back on setting these, it prevents the token\r\n        // from being a duplicate in ERC token searches if the need to\r\n        // redeploy arises prior to the crowdsale starts.\r\n        // Mainly useful during testnet deployment/testing.\r\n        name = _name;\r\n        symbol = _symbol;\r\n    }\r\n\r\n    function ownerActivateToken() external onlyOwner onlyIfTokenInactive {\r\n        require(bytes(symbol).length > 0);\r\n\r\n        tokenActive = true;\r\n        TokenActivated();\r\n    }\r\n\r\n    function claimRefund(IRefundHandler _refundHandler) external {\r\n        uint256 _balance = balances[msg.sender];\r\n\r\n        // Positive token balance required to perform a refund\r\n        require(_balance > 0);\r\n\r\n        // this mitigates re-entrancy concerns\r\n        balances[msg.sender] = 0;\r\n\r\n        // Attempt to transfer wei back to msg.sender from the\r\n        // crowdsale contract\r\n        // Note: re-entrancy concerns are also addressed within\r\n        // `handleRefundRequest`\r\n        // this will throw an exception if any\r\n        // problems or if refunding isn't enabled\r\n        _refundHandler.handleRefundRequest(msg.sender);\r\n\r\n        // If we've gotten here, then the wei transfer above\r\n        // worked (didn't throw an exception) and it confirmed\r\n        // that `msg.sender` had an ether balance on the contract.\r\n        // Now do token transfer from `msg.sender` back to\r\n        // `owner` completes the refund.\r\n        balances[owner] = balances[owner].add(_balance);\r\n        Transfer(msg.sender, owner, _balance);\r\n    }\r\n}\r\n\r\n\r\ncontract LOCIsale is Ownable, Pausable, IRefundHandler {\r\n    using SafeMath for uint256;\r\n\r\n    // this sale contract is creating the LOCIcoin\r\n    // contract, and so will own it\r\n    LOCIcoin internal token;\r\n\r\n    // UNIX timestamp (UTC) based start and end, inclusive\r\n    uint256 public start;               /* UTC of timestamp that the sale will start based on the value passed in at the time of construction */\r\n    uint256 public end;                 /* UTC of computed time that the sale will end based on the hours passed in at time of construction */\r\n\r\n    bool public isPresale;              /* For LOCI this will be false. We raised pre-ICO offline. */\r\n    bool public isRefunding = false;    /* No plans to refund. */\r\n\r\n    uint256 public minFundingGoalWei;   /* we can set this to zero, but we might want to raise at least 20000 Ether */\r\n    uint256 public minContributionWei;  /* individual contribution min. we require at least a 0.1 Ether investment, for example. */\r\n    uint256 public maxContributionWei;  /* individual contribution max. probably don't want someone to buy more than 60000 Ether */\r\n\r\n    uint256 public weiRaised;       /* total of all weiContributions */\r\n    uint256 public weiRaisedAfterDiscounts; /* wei raised after the discount periods end */\r\n    uint256 internal weiForRefund;  /* only applicable if we enable refunding, if we don't meet our expected raise */\r\n\r\n    uint256 public peggedETHUSD;    /* In whole dollars. $300 means use 300 */\r\n    uint256 public hardCap;         /* In wei. Example: 64,000 cap = 64,000,000,000,000,000,000,000 */\r\n    uint256 public reservedTokens;  /* In wei. Example: 54 million tokens, use 54000000 with 18 more zeros. then it would be 54000000 * Math.pow(10,18) */\r\n    uint256 public baseRateInCents; /* $2.50 means use 250 */\r\n    uint256 internal startingTokensAmount; // this will be set once, internally\r\n\r\n    mapping (address => uint256) public contributions;\r\n\r\n    struct DiscountTranche {\r\n        // this will be a timestamp that is calculated based on\r\n        // the # of hours a tranche rate is to be active for\r\n        uint256 end;\r\n        // should be a % number between 0 and 100\r\n        uint8 discount;\r\n        // should be 1, 2, 3, 4, etc...\r\n        uint8 round;\r\n        // amount raised during tranche in wei\r\n        uint256 roundWeiRaised;\r\n        // amount sold during tranche in wei\r\n        uint256 roundTokensSold;\r\n    }\r\n    DiscountTranche[] internal discountTranches;\r\n    uint8 internal currentDiscountTrancheIndex = 0;\r\n    uint8 internal discountTrancheLength = 0;\r\n\r\n    event ContributionReceived(address indexed buyer, bool presale, uint8 rate, uint256 value, uint256 tokens);\r\n    event RefundsEnabled();\r\n    event Refunded(address indexed buyer, uint256 weiAmount);\r\n    event ToppedUp();\r\n    event PegETHUSD(uint256 pegETHUSD);\r\n\r\n    function LOCIsale(\r\n        address _token,                /* LOCIcoin contract address */\r\n        uint256 _peggedETHUSD,          /* 300 = 300 USD */\r\n        uint256 _hardCapETHinWei,       /* In wei. Example: 64,000 cap = 64,000,000,000,000,000,000,000 */\r\n        uint256 _reservedTokens,        /* In wei. Example: 54 million tokens, use 54000000 with 18 more zeros. then it would be 54000000 * Math.pow(10,18) */\r\n        bool _isPresale,                /* For LOCI this will be false. Presale offline, and accounted for in reservedTokens */\r\n        uint256 _minFundingGoalWei,     /* If we are looking to raise a minimum amount of wei, put it here */\r\n        uint256 _minContributionWei,    /* For LOCI this will be 0.1 ETH */\r\n        uint256 _maxContributionWei,    /* Advisable to not let a single contributor go over the max alloted, say 63333 * Math.pow(10,18) wei. */\r\n        uint256 _start,                 /* For LOCI this will be Dec 6th 0:00 UTC in seconds */\r\n        uint256 _durationHours,         /* Total length of the sale, in hours */\r\n        uint256 _baseRateInCents,       /* Base rate in cents. $2.50 would be 250 */\r\n        uint256[] _hourBasedDiscounts   /* Single dimensional array of pairs [hours, rateInCents, hours, rateInCents, hours, rateInCents, ... ] */\r\n    ) public {\r\n        require(_token != 0x0);\r\n        // either have NO max contribution or the max must be more than the min\r\n        require(_maxContributionWei == 0 || _maxContributionWei > _minContributionWei);\r\n        // sale must have a duration!\r\n        require(_durationHours > 0);\r\n\r\n        token = LOCIcoin(_token);\r\n\r\n        peggedETHUSD = _peggedETHUSD;\r\n        hardCap = _hardCapETHinWei;\r\n        reservedTokens = _reservedTokens;\r\n\r\n        isPresale = _isPresale;\r\n\r\n        start = _start;\r\n        end = start.add(_durationHours.mul(1 hours));\r\n\r\n        minFundingGoalWei = _minFundingGoalWei;\r\n        minContributionWei = _minContributionWei;\r\n        maxContributionWei = _maxContributionWei;\r\n\r\n        baseRateInCents = _baseRateInCents;\r\n\r\n        // this will throw if the # of hours and\r\n        // discount % don't come in pairs\r\n        uint256 _end = start;\r\n\r\n        uint _tranche_round = 0;\r\n\r\n        for (uint i = 0; i < _hourBasedDiscounts.length; i += 2) {\r\n            // calculate the timestamp where the discount rate will end\r\n            _end = _end.add(_hourBasedDiscounts[i].mul(1 hours));\r\n\r\n            // the calculated tranche end cannot go past the crowdsale end\r\n            require(_end <= end);\r\n\r\n            _tranche_round += 1;\r\n\r\n            discountTranches.push(DiscountTranche({ end:_end,\r\n                                                    discount:uint8(_hourBasedDiscounts[i + 1]),\r\n                                                    round:uint8(_tranche_round),\r\n                                                    roundWeiRaised:0,\r\n                                                    roundTokensSold:0}));\r\n\r\n            discountTrancheLength = uint8(i+1);\r\n        }\r\n    }\r\n\r\n    function determineDiscountTranche() internal returns (uint256, uint8, uint8) {\r\n        if (currentDiscountTrancheIndex >= discountTranches.length) {\r\n            return(0, 0, 0);\r\n        }\r\n\r\n        DiscountTranche storage _dt = discountTranches[currentDiscountTrancheIndex];\r\n        if (_dt.end < now) {\r\n            // find the next applicable tranche\r\n            while (++currentDiscountTrancheIndex < discountTranches.length) {\r\n                _dt = discountTranches[currentDiscountTrancheIndex];\r\n                if (_dt.end > now) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        // Example: there are 4 rounds, and we want to divide rounds 2-4 equally based on (starting-round1)/(discountTranches.length-1), move to next tranche\r\n        // But don't move past the last round. Note, the last round should not be capped. That's why we check for round < # tranches\r\n        if (_dt.round > 1 && _dt.roundTokensSold > 0 && _dt.round < discountTranches.length) {\r\n            uint256 _trancheCountExceptForOne = discountTranches.length-1;\r\n            uint256 _tokensSoldFirstRound = discountTranches[0].roundTokensSold;\r\n            uint256 _allowedTokensThisRound = (startingTokensAmount.sub(_tokensSoldFirstRound)).div(_trancheCountExceptForOne);\r\n\r\n            if (_dt.roundTokensSold > _allowedTokensThisRound) {\r\n                currentDiscountTrancheIndex = currentDiscountTrancheIndex + 1;\r\n                _dt = discountTranches[currentDiscountTrancheIndex];\r\n            }\r\n        }\r\n\r\n        uint256 _end = 0;\r\n        uint8 _rate = 0;\r\n        uint8 _round = 0;\r\n\r\n        // if the index is still valid, then we must have\r\n        // a valid tranche, so return discount rate\r\n        if (currentDiscountTrancheIndex < discountTranches.length) {\r\n            _end = _dt.end;\r\n            _rate = _dt.discount;\r\n            _round = _dt.round;\r\n        } else {\r\n            _end = end;\r\n            _rate = 0;\r\n            _round = discountTrancheLength + 1;\r\n        }\r\n\r\n        return (_end, _rate, _round);\r\n    }\r\n\r\n    function() public payable whenNotPaused {\r\n        require(!isRefunding);\r\n        require(msg.sender != 0x0);\r\n        require(msg.value >= minContributionWei);\r\n        require(start <= now && end >= now);\r\n\r\n        // prevent anything more than maxContributionWei per contributor address\r\n        uint256 _weiContributionAllowed = maxContributionWei > 0 ? maxContributionWei.sub(contributions[msg.sender]) : msg.value;\r\n        if (maxContributionWei > 0) {\r\n            require(_weiContributionAllowed > 0);\r\n        }\r\n\r\n        // are limited by the number of tokens remaining\r\n        uint256 _tokensRemaining = token.balanceOf(address(this)).sub( reservedTokens );\r\n        require(_tokensRemaining > 0);\r\n\r\n        if (startingTokensAmount == 0) {\r\n            startingTokensAmount = _tokensRemaining; // set this once.\r\n        }\r\n\r\n        // limit contribution's value based on max/previous contributions\r\n        uint256 _weiContribution = msg.value;\r\n        if (_weiContribution > _weiContributionAllowed) {\r\n            _weiContribution = _weiContributionAllowed;\r\n        }\r\n\r\n        // limit contribution's value based on hard cap of hardCap\r\n        if (hardCap > 0 && weiRaised.add(_weiContribution) > hardCap) {\r\n            _weiContribution = hardCap.sub( weiRaised );\r\n        }\r\n\r\n        // calculate token amount to be created\r\n        uint256 _tokens = _weiContribution.mul(peggedETHUSD).mul(100).div(baseRateInCents);\r\n        var (, _rate, _round) = determineDiscountTranche();\r\n        if (_rate > 0) {\r\n            _tokens = _weiContribution.mul(peggedETHUSD).mul(100).div(_rate);\r\n        }\r\n\r\n        if (_tokens > _tokensRemaining) {\r\n            // there aren't enough tokens to fill the contribution amount, so recalculate the contribution amount\r\n            _tokens = _tokensRemaining;\r\n            if (_rate > 0) {\r\n                _weiContribution = _tokens.mul(_rate).div(100).div(peggedETHUSD);\r\n            } else {\r\n                _weiContribution = _tokens.mul(baseRateInCents).div(100).div(peggedETHUSD);\r\n            }\r\n        }\r\n\r\n        // add the contributed wei to any existing value for the sender\r\n        contributions[msg.sender] = contributions[msg.sender].add(_weiContribution);\r\n        ContributionReceived(msg.sender, isPresale, _rate, _weiContribution, _tokens);\r\n\r\n        require(token.transfer(msg.sender, _tokens));\r\n\r\n        weiRaised = weiRaised.add(_weiContribution); //total of all weiContributions\r\n\r\n        if (discountTrancheLength > 0 && _round > 0 && _round <= discountTrancheLength) {\r\n            discountTranches[_round-1].roundWeiRaised = discountTranches[_round-1].roundWeiRaised.add(_weiContribution);\r\n            discountTranches[_round-1].roundTokensSold = discountTranches[_round-1].roundTokensSold.add(_tokens);\r\n        }\r\n        if (discountTrancheLength > 0 && _round > discountTrancheLength) {\r\n            weiRaisedAfterDiscounts = weiRaisedAfterDiscounts.add(_weiContribution);\r\n        }\r\n\r\n        uint256 _weiRefund = msg.value.sub(_weiContribution);\r\n        if (_weiRefund > 0) {\r\n            msg.sender.transfer(_weiRefund);\r\n        }\r\n    }\r\n\r\n    // in case we need to return funds to this contract\r\n    function ownerTopUp() external payable {}\r\n\r\n    function setReservedTokens( uint256 _reservedTokens ) onlyOwner public {\r\n        reservedTokens = _reservedTokens;        \r\n    }\r\n\r\n    function pegETHUSD(uint256 _peggedETHUSD) onlyOwner public {\r\n        peggedETHUSD = _peggedETHUSD;\r\n        PegETHUSD(peggedETHUSD);\r\n    }\r\n\r\n    function setHardCap( uint256 _hardCap ) onlyOwner public {\r\n        hardCap = _hardCap;\r\n    }\r\n\r\n    function peggedETHUSD() constant onlyOwner public returns(uint256) {\r\n        return peggedETHUSD;\r\n    }\r\n\r\n    function hardCapETHInWeiValue() constant onlyOwner public returns(uint256) {\r\n        return hardCap;\r\n    }\r\n\r\n    function weiRaisedDuringRound(uint8 round) constant onlyOwner public returns(uint256) {\r\n        require( round > 0 && round <= discountTrancheLength );\r\n        return discountTranches[round-1].roundWeiRaised;\r\n    }\r\n\r\n    function tokensRaisedDuringRound(uint8 round) constant onlyOwner public returns(uint256) {\r\n        require( round > 0 && round <= discountTrancheLength );\r\n        return discountTranches[round-1].roundTokensSold;\r\n    }\r\n\r\n    function weiRaisedAfterDiscountRounds() constant onlyOwner public returns(uint256) {\r\n        return weiRaisedAfterDiscounts;\r\n    }\r\n\r\n    function totalWeiRaised() constant onlyOwner public returns(uint256) {\r\n        return weiRaised;\r\n    }\r\n\r\n    function setStartingTokensAmount(uint256 _startingTokensAmount) onlyOwner public {\r\n        startingTokensAmount = _startingTokensAmount;\r\n    }\r\n\r\n    function ownerEnableRefunds() external onlyOwner {\r\n        // a little protection against human error;\r\n        // sale must be ended OR it must be paused\r\n        require(paused || now > end);\r\n        require(!isRefunding);\r\n\r\n        weiForRefund = this.balance;\r\n        isRefunding = true;\r\n        RefundsEnabled();\r\n    }\r\n\r\n    function ownerTransferWei(address _beneficiary, uint256 _value) external onlyOwner {\r\n        require(_beneficiary != 0x0);\r\n        require(_beneficiary != address(token));\r\n        // we cannot withdraw if we didn't reach the minimum funding goal\r\n        require(minFundingGoalWei == 0 || weiRaised >= minFundingGoalWei);\r\n\r\n        // if zero requested, send the entire amount, otherwise the amount requested\r\n        uint256 _amount = _value > 0 ? _value : this.balance;\r\n\r\n        _beneficiary.transfer(_amount);\r\n    }\r\n\r\n    function ownerRecoverTokens(address _beneficiary) external onlyOwner {\r\n        require(_beneficiary != 0x0);\r\n        require(_beneficiary != address(token));\r\n        require(paused || now > end);\r\n\r\n        uint256 _tokensRemaining = token.balanceOf(address(this));\r\n        if (_tokensRemaining > 0) {\r\n            token.transfer(_beneficiary, _tokensRemaining);\r\n        }\r\n    }\r\n\r\n    function handleRefundRequest(address _contributor) external {\r\n        // Note that this method can only ever called by\r\n        // the token contract's `claimRefund()` method;\r\n        // everything that happens in here will only\r\n        // succeed if `claimRefund()` works as well.\r\n\r\n        require(isRefunding);\r\n        // this can only be called by the token contract;\r\n        // it is the entry point for the refund flow\r\n        require(msg.sender == address(token));\r\n\r\n        uint256 _wei = contributions[_contributor];\r\n\r\n        // if this is zero, then `_contributor` didn't\r\n        // contribute or they've already been refunded\r\n        require(_wei > 0);\r\n\r\n        // prorata the amount if necessary\r\n        if (weiRaised > weiForRefund) {\r\n            uint256 _n  = weiForRefund.mul(_wei).div(weiRaised);\r\n            require(_n < _wei);\r\n            _wei = _n;\r\n        }\r\n\r\n        // zero out their contribution, so they cannot\r\n        // claim another refund; it's important (for\r\n        // avoiding re-entrancy attacks) that this zeroing\r\n        // happens before the transfer below\r\n        contributions[_contributor] = 0;\r\n\r\n        // give them their ether back; throws on failure\r\n        _contributor.transfer(_wei);\r\n\r\n        Refunded(_contributor, _wei);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"baseRateInCents\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_reservedTokens\",\"type\":\"uint256\"}],\"name\":\"setReservedTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reservedTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"contributions\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalWeiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hardCapETHInWeiValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"round\",\"type\":\"uint8\"}],\"name\":\"weiRaisedDuringRound\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"peggedETHUSD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"round\",\"type\":\"uint8\"}],\"name\":\"tokensRaisedDuringRound\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"ownerTransferWei\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"ownerEnableRefunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minFundingGoalWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minContributionWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"ownerRecoverTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isPresale\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isRefunding\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaisedAfterDiscounts\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contributor\",\"type\":\"address\"}],\"name\":\"handleRefundRequest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"start\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_peggedETHUSD\",\"type\":\"uint256\"}],\"name\":\"pegETHUSD\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_hardCap\",\"type\":\"uint256\"}],\"name\":\"setHardCap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxContributionWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"ownerTopUp\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"end\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaisedAfterDiscountRounds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hardCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_startingTokensAmount\",\"type\":\"uint256\"}],\"name\":\"setStartingTokensAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_peggedETHUSD\",\"type\":\"uint256\"},{\"name\":\"_hardCapETHinWei\",\"type\":\"uint256\"},{\"name\":\"_reservedTokens\",\"type\":\"uint256\"},{\"name\":\"_isPresale\",\"type\":\"bool\"},{\"name\":\"_minFundingGoalWei\",\"type\":\"uint256\"},{\"name\":\"_minContributionWei\",\"type\":\"uint256\"},{\"name\":\"_maxContributionWei\",\"type\":\"uint256\"},{\"name\":\"_start\",\"type\":\"uint256\"},{\"name\":\"_durationHours\",\"type\":\"uint256\"},{\"name\":\"_baseRateInCents\",\"type\":\"uint256\"},{\"name\":\"_hourBasedDiscounts\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"presale\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"rate\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"ContributionReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"RefundsEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"weiAmount\",\"type\":\"uint256\"}],\"name\":\"Refunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ToppedUp\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"pegETHUSD\",\"type\":\"uint256\"}],\"name\":\"PegETHUSD\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"LOCIsale","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"0","ConstructorArguments":"0000000000000000000000009c23d67aea7b95d80942e3836bcdf7e708a747c200000000000000000000000000000000000000000000000000000000000001cd0000000000000000000000000000000000000000000008375a2abcca244000000000000000000000000000000000000000000000000422ca8b0a00a42500000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000016345785d8a00000000000000000000000000000000000000000000000008375a2abcca24400000000000000000000000000000000000000000000000000000000000005a273300000000000000000000000000000000000000000000000000000000000000025800000000000000000000000000000000000000000000000000000000000000fa000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000002100000000000000000000000000000000000000000000000000000000000000a8000000000000000000000000000000000000000000000000000000000000002c00000000000000000000000000000000000000000000000000000000000000a8000000000000000000000000000000000000000000000000000000000000003900000000000000000000000000000000000000000000000000000000000000d8000000000000000000000000000000000000000000000000000000000000004b","Library":"","SwarmSource":"bzzr://f03f4e4861aae2e1e9338fe6d7149adeb5eb417da6f11710aaae0f505b0b5951"}]}