{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\ncontract Owner {\r\n    address public owner;\r\n    //添加断路器\r\n    bool public stopped = false;\r\n\r\n    function Owner() internal {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n       require (msg.sender == owner);\r\n       _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) external onlyOwner {\r\n        require (newOwner != 0x0);\r\n        require (newOwner != owner);\r\n        OwnerUpdate(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n    function toggleContractActive() onlyOwner public {\r\n        //可以预置改变状态的条件，如基于投票人数\r\n        stopped = !stopped;\r\n    }\r\n\r\n    modifier stopInEmergency {\r\n        require(stopped == false);\r\n        _;\r\n    }\r\n\r\n    modifier onlyInEmergency {\r\n        require(stopped == true);\r\n        _;\r\n    }\r\n\r\n    event OwnerUpdate(address _prevOwner, address _newOwner);\r\n}\r\n\r\ncontract Mortal is Owner {\r\n    //销毁合约\r\n    function close() external onlyOwner {\r\n        selfdestruct(owner);\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Token is Owner, Mortal {\r\n    using SafeMath for uint256;\r\n\r\n    string public name; //代币名称\r\n    string public symbol; //代币符号\r\n    uint8 public decimals; //显示多少小数点\r\n    uint256 public totalSupply; //总供应量\r\n\r\n    //冻结的基金,解锁的数量根据时间动态计算出来\r\n    struct Fund{\r\n        uint amount;            //总冻结数量，固定值\r\n\r\n        uint unlockStartTime;   //从什么时候开始解锁\r\n        uint unlockInterval;    //每次解锁的周期，单位 秒\r\n        uint unlockPercent;     //每次解锁的百分比 50 为50%\r\n\r\n        bool isValue; // exist value\r\n    }\r\n\r\n    //所有的账户数据\r\n    mapping (address => uint) public balances;\r\n    //代理\r\n    mapping(address => mapping(address => uint)) approved;\r\n\r\n    //所有的账户冻结数据，时间，到期自动解冻，同时只支持一次冻结\r\n    mapping (address => Fund) public frozenAccount;\r\n\r\n    //事件日志\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    event FrozenFunds(address indexed target, uint value, uint unlockStartTime, uint unlockIntervalUnit, uint unlockInterval, uint unlockPercent);\r\n    event Approval(address indexed accountOwner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n    *\r\n    * Fix for the ERC20 short address attack\r\n    *\r\n    * http://vessenes.com/the-erc20-short-address-attack-explained/\r\n    */\r\n    modifier onlyPayloadSize(uint256 size) {\r\n        require(msg.data.length == size + 4);\r\n        _;\r\n    }\r\n\r\n    //冻结固定时间\r\n    function freezeAccount(address target, uint value, uint unlockStartTime, uint unlockIntervalUnit, uint unlockInterval, uint unlockPercent) external onlyOwner freezeOutCheck(target, 0) {\r\n        require (value > 0);\r\n        require (frozenAccount[target].isValue == false);\r\n        require (balances[msg.sender] >= value);\r\n        require (unlockStartTime > now);\r\n        require (unlockInterval > 0);\r\n        require (unlockPercent > 0 && unlockPercent <= 100);\r\n\r\n        uint unlockIntervalSecond = toSecond(unlockIntervalUnit, unlockInterval);\r\n\r\n        frozenAccount[target] = Fund(value, unlockStartTime, unlockIntervalSecond, unlockPercent, true);\r\n        FrozenFunds(target, value, unlockStartTime, unlockIntervalUnit, unlockInterval, unlockPercent);\r\n    }\r\n\r\n    //转账并冻结\r\n    function transferAndFreeze(address target, uint256 value, uint unlockStartTime, uint unlockIntervalUnit, uint unlockInterval, uint unlockPercent) external onlyOwner freezeOutCheck(target, 0) {\r\n        require (value > 0);\r\n        require (frozenAccount[target].isValue == false);\r\n        require (unlockStartTime > now);\r\n        require (unlockInterval > 0);\r\n        require (unlockPercent > 0 && unlockPercent <= 100);\r\n\r\n        _transfer(msg.sender, target, value);\r\n\r\n        uint unlockIntervalSecond = toSecond(unlockIntervalUnit, unlockInterval);\r\n        frozenAccount[target] = Fund(value, unlockStartTime, unlockIntervalSecond, unlockPercent, true);\r\n        FrozenFunds(target, value, unlockStartTime, unlockIntervalUnit, unlockInterval, unlockPercent);\r\n    }\r\n\r\n    //转换单位时间到秒\r\n    function toSecond(uint unitType, uint value) internal pure returns (uint256 Seconds) {\r\n        uint _seconds;\r\n        if (unitType == 5){\r\n            _seconds = value.mul(1 years);\r\n        }else if(unitType == 4){\r\n            _seconds = value.mul(1 days);\r\n        }else if (unitType == 3){\r\n            _seconds = value.mul(1 hours);\r\n        }else if (unitType == 2){\r\n            _seconds = value.mul(1 minutes);\r\n        }else if (unitType == 1){\r\n            _seconds = value;\r\n        }else{\r\n            revert();\r\n        }\r\n        return _seconds;\r\n    }\r\n\r\n    modifier freezeOutCheck(address sender, uint value) {\r\n        require ( getAvailableBalance(sender) >= value);\r\n        _;\r\n    }\r\n\r\n    //计算可用余额 去除冻结部分\r\n    function getAvailableBalance(address sender) internal returns(uint balance) {\r\n        if (frozenAccount[sender].isValue) {\r\n            //未开始解锁\r\n            if (now < frozenAccount[sender].unlockStartTime){\r\n                return balances[sender] - frozenAccount[sender].amount;\r\n            }else{\r\n                //计算解锁了多少数量\r\n                uint unlockPercent = ((now - frozenAccount[sender].unlockStartTime ) / frozenAccount[sender].unlockInterval + 1) * frozenAccount[sender].unlockPercent;\r\n                if (unlockPercent > 100){\r\n                    unlockPercent = 100;\r\n                }\r\n\r\n                //计算可用余额 = 总额 - 冻结总额\r\n                assert(frozenAccount[sender].amount <= balances[sender]);\r\n                uint available = balances[sender] - (100 - unlockPercent) * frozenAccount[sender].amount / 100;\r\n                if ( unlockPercent >= 100){\r\n                    //release\r\n                    frozenAccount[sender].isValue = false;\r\n                    delete frozenAccount[sender];\r\n                }\r\n\r\n                return available;\r\n            }\r\n        }\r\n        return balances[sender];\r\n    }\r\n\r\n    function balanceOf(address sender) constant external returns (uint256 balance){\r\n        return balances[sender];\r\n    }\r\n\r\n    /* 代币转移的函数 */\r\n    function transfer(address to, uint256 value) external stopInEmergency onlyPayloadSize(2 * 32) {\r\n        _transfer(msg.sender, to, value);\r\n    }\r\n\r\n    function _transfer(address _from, address _to, uint _value) internal freezeOutCheck(_from, _value) {\r\n        require(_to != 0x0);\r\n        require(_from != _to);\r\n        require(_value > 0);\r\n\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n\r\n        Transfer(_from, _to, _value);\r\n    }\r\n\r\n    //设置代理交易\r\n    //允许spender多次取出您的帐户，最高达value金额。value可以设置超过账户余额\r\n    function approve(address spender, uint value) external returns (bool success) {\r\n        approved[msg.sender][spender] = value;\r\n        Approval(msg.sender, spender, value);\r\n\r\n        return true;\r\n    }\r\n\r\n    //返回spender仍然被允许从accountOwner提取的金额\r\n    function allowance(address accountOwner, address spender) constant external returns (uint remaining) {\r\n        return approved[accountOwner][spender];\r\n    }\r\n\r\n    //使用代理交易\r\n    //0值的传输必须被视为正常传输并触发传输事件\r\n    //代理交易不自动为对方补充gas\r\n    function transferFrom(address from, address to, uint256 value) external stopInEmergency freezeOutCheck(from, value)  returns (bool success) {\r\n        require(value > 0);\r\n        require(value <= approved[from][msg.sender]);\r\n        require(value <= balances[from]);\r\n\r\n        approved[from][msg.sender] = approved[from][msg.sender].sub(value);\r\n        _transfer(from, to, value);\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract MigrationAgent {\r\n  function migrateFrom(address from, uint256 value) public;\r\n}\r\n\r\ncontract UpgradeableToken is Owner, Token {\r\n  address public migrationAgent;\r\n\r\n  /**\r\n   * Somebody has upgraded some of his tokens.\r\n   */\r\n  event Upgrade(address indexed from, address indexed to, uint256 value);\r\n\r\n  /**\r\n   * New upgrade agent available.\r\n   */\r\n  event UpgradeAgentSet(address agent);\r\n\r\n  // Migrate tokens to the new token contract\r\n  function migrate() public {\r\n    require(migrationAgent != 0);\r\n    uint value = balances[msg.sender];\r\n    balances[msg.sender] = balances[msg.sender].sub(value);\r\n    totalSupply = totalSupply.sub(value);\r\n    MigrationAgent(migrationAgent).migrateFrom(msg.sender, value);\r\n    Upgrade(msg.sender, migrationAgent, value);\r\n  }\r\n\r\n  function () public payable {\r\n    require(migrationAgent != 0);\r\n    require(balances[msg.sender] > 0);\r\n    migrate();\r\n    msg.sender.transfer(msg.value);\r\n  }\r\n\r\n  function setMigrationAgent(address _agent) onlyOwner external {\r\n    migrationAgent = _agent;\r\n    UpgradeAgentSet(_agent);\r\n  }\r\n}\r\n\r\ncontract VIPToken is UpgradeableToken {\r\n\r\n  function VIPToken() public {\r\n    name = \"VIP Tokens\";\r\n    symbol = \"VIP\";\r\n    decimals = 18;\r\n\r\n    owner = msg.sender;\r\n    uint initialSupply = 300000000;\r\n\r\n    totalSupply = initialSupply * 10 ** uint256(decimals);\r\n    require (totalSupply >= initialSupply);\r\n\r\n    balances[msg.sender] = totalSupply;\r\n    Transfer(0x0, msg.sender, totalSupply);\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"toggleContractActive\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"close\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_agent\",\"type\":\"address\"}],\"name\":\"setMigrationAgent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stopped\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"migrationAgent\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"migrate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"unlockStartTime\",\"type\":\"uint256\"},{\"name\":\"unlockIntervalUnit\",\"type\":\"uint256\"},{\"name\":\"unlockInterval\",\"type\":\"uint256\"},{\"name\":\"unlockPercent\",\"type\":\"uint256\"}],\"name\":\"freezeAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccount\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"unlockStartTime\",\"type\":\"uint256\"},{\"name\":\"unlockInterval\",\"type\":\"uint256\"},{\"name\":\"unlockPercent\",\"type\":\"uint256\"},{\"name\":\"isValue\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"unlockStartTime\",\"type\":\"uint256\"},{\"name\":\"unlockIntervalUnit\",\"type\":\"uint256\"},{\"name\":\"unlockInterval\",\"type\":\"uint256\"},{\"name\":\"unlockPercent\",\"type\":\"uint256\"}],\"name\":\"transferAndFreeze\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"accountOwner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Upgrade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"agent\",\"type\":\"address\"}],\"name\":\"UpgradeAgentSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"unlockStartTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"unlockIntervalUnit\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"unlockInterval\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"unlockPercent\",\"type\":\"uint256\"}],\"name\":\"FrozenFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"accountOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_prevOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"OwnerUpdate\",\"type\":\"event\"}]","ContractName":"VIPToken","CompilerVersion":"v0.4.20-nightly.2017.12.20+commit.efc198d5","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://e197b727aaee90ec27a0fbad77f518072c72ec2432579715f568d646c3ef0d3e"}]}