{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\n\t//\tHUNT Crowdsale Token Contract \r\n\t//\tAqua Commerce LTD Company #194644 (Republic of Seychelles)\r\n\t//\tThe MIT Licence .\r\n\r\n\r\ncontract SafeMath {\r\n\t\r\n    function sub(uint256 x, uint256 y) constant internal returns (uint256 z) {\r\n        assert((z = x - y) <= x);\r\n    }\r\n\r\n    function add(uint256 x, uint256 y) constant internal returns (uint256 z) {\r\n        assert((z = x + y) >= x);\r\n    }\r\n\t\r\n\tfunction div(uint256 x, uint256 y) constant internal returns (uint256 z) {\r\n        z = x / y;\r\n    }\r\n\t\r\n\tfunction min(uint256 x, uint256 y) constant internal returns (uint256 z) {\r\n        z = x <= y ? x : y;\r\n    }\r\n}\r\n\r\n\r\ncontract Owned {\r\n    \r\n\taddress public owner;\r\n    address public newOwner;\r\n\t\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    function Owned() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        assert (msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) onlyOwner {\r\n        newOwner = _newOwner;\r\n    }\r\n \r\n    function acceptOwnership() {\r\n        if (msg.sender == newOwner) {\r\n            OwnershipTransferred(owner, newOwner);\r\n            owner = newOwner;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n//\tERC20 interface\r\n//\tsee https://github.com/ethereum/EIPs/issues/20\r\ncontract ERC20 {\r\n\t\r\n\tfunction totalSupply() constant returns (uint totalSupply);\r\n\tfunction balanceOf(address who) constant returns (uint);\r\n\tfunction allowance(address owner, address spender) constant returns (uint);\r\n\t\r\n\tfunction transfer(address to, uint value) returns (bool ok);\r\n\tfunction transferFrom(address from, address to, uint value) returns (bool ok);\r\n\tfunction approve(address spender, uint value) returns (bool ok);\r\n  \r\n\tevent Transfer(address indexed from, address indexed to, uint value);\r\n\tevent Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\n\r\ncontract StandardToken is ERC20, SafeMath {\r\n\t\r\n\tuint256                                            _totalSupply;\r\n    mapping (address => uint256)                       _balances;\r\n    mapping (address => mapping (address => uint256))  _approvals;\r\n    \r\n    modifier onlyPayloadSize(uint numwords) {\r\n\t\tassert(msg.data.length == numwords * 32 + 4);\r\n        _;\r\n   }\r\n   \r\n    function totalSupply() constant returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n    function balanceOf(address _who) constant returns (uint256) {\r\n        return _balances[_who];\r\n    }\r\n    function allowance(address _owner, address _spender) constant returns (uint256) {\r\n        return _approvals[_owner][_spender];\r\n    }\r\n    \r\n    function transfer(address _to, uint _value) onlyPayloadSize(2) returns (bool success) {\r\n        assert(_balances[msg.sender] >= _value);\r\n        \r\n        _balances[msg.sender] = sub(_balances[msg.sender], _value);\r\n        _balances[_to] = add(_balances[_to], _value);\r\n        \r\n        Transfer(msg.sender, _to, _value);\r\n        \r\n        return true;\r\n    }\r\n    \r\n    function transferFrom(address _from, address _to, uint _value) onlyPayloadSize(3) returns (bool success) {\r\n        assert(_balances[_from] >= _value);\r\n        assert(_approvals[_from][msg.sender] >= _value);\r\n        \r\n        _approvals[_from][msg.sender] = sub(_approvals[_from][msg.sender], _value);\r\n        _balances[_from] = sub(_balances[_from], _value);\r\n        _balances[_to] = add(_balances[_to], _value);\r\n        \r\n        Transfer(_from, _to, _value);\r\n        \r\n        return true;\r\n    }\r\n    \r\n    function approve(address _spender, uint256 _value) onlyPayloadSize(2) returns (bool success) {\r\n        _approvals[msg.sender][_spender] = _value;\r\n        \r\n        Approval(msg.sender, _spender, _value);\r\n        \r\n        return true;\r\n    }\r\n\r\n}\r\n\r\ncontract HUNT is StandardToken, Owned {\r\n\r\n    // Token information\r\n\tstring public constant name = \"HUNT\";\r\n    string public constant symbol = \"HT\";\r\n    uint8 public constant decimals = 18;\r\n\t\r\n    // Initial contract data\r\n\tuint256 public capTokens;\r\n    uint256 public startDate;\r\n    uint256 public endDate;\r\n    uint public curs;\r\n\t\r\n\taddress addrcnt;\r\n\tuint256 public totalTokens;\r\n\tuint256 public totalEthers;\r\n\tmapping (address => uint256) _userBonus;\r\n\t\r\n    event BoughtTokens(address indexed buyer, uint256 ethers,uint256 newEtherBalance, uint256 tokens, uint _buyPrice);\r\n\tevent Collect(address indexed addrcnt,uint256 amount);\r\n\t\r\n    function HUNT(uint256 _start, uint256 _end, uint256 _capTokens, uint _curs, address _addrcnt) {\r\n        startDate\t= _start;\r\n\t\tendDate\t\t= _end;\r\n        capTokens   = _capTokens;\r\n        addrcnt  \t= _addrcnt;\r\n\t\tcurs\t\t= _curs;\r\n    }\r\n\r\n\tfunction time() internal constant returns (uint) {\r\n        return block.timestamp;\r\n    }\r\n\t\r\n    // Cost of one token\r\n    // Day  1-2  : 1 USD = 1 HUNT\r\n    // Days 3–5  : 1.2 USD = 1 HUNT\r\n    // Days 6–10 : 1.3 USD = 1 HUNT\r\n    // Days 11–15: 1.4 USD = 1 HUNT\r\n    // Days 16–22: 1.5 USD = 1 HUNT\r\n    \r\n    \r\n    function buyPrice() constant returns (uint256) {\r\n        return buyPriceAt(time());\r\n    }\r\n\r\n\tfunction buyPriceAt(uint256 at) constant returns (uint256) {\r\n        if (at < startDate) {\r\n            return 0;\r\n        } else if (at < (startDate + 2 days)) {\r\n            return div(curs,100);\r\n        } else if (at < (startDate + 5 days)) {\r\n            return div(curs,120);\r\n        } else if (at < (startDate + 10 days)) {\r\n            return div(curs,130);\r\n        } else if (at < (startDate + 15 days)) {\r\n            return div(curs,140);\r\n        } else if (at <= endDate) {\r\n            return div(curs,150);\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    // Buy tokens from the contract\r\n    function () payable {\r\n        buyTokens(msg.sender);\r\n    }\r\n\r\n    // Exchanges can buy on behalf of participant\r\n    function buyTokens(address participant) payable {\r\n        \r\n\t\t// No contributions before the start of the crowdsale\r\n        require(time() >= startDate);\r\n        \r\n\t\t// No contributions after the end of the crowdsale\r\n        require(time() <= endDate);\r\n        \r\n\t\t// No 0 contributions\r\n        require(msg.value > 0);\r\n\r\n        // Add ETH raised to total\r\n        totalEthers = add(totalEthers, msg.value);\r\n        \r\n\t\t// What is the HUNT to ETH rate\r\n        uint256 _buyPrice = buyPrice();\r\n\t\t\r\n        // Calculate #HUNT - this is safe as _buyPrice is known\r\n        // and msg.value is restricted to valid values\r\n        uint tokens = msg.value * _buyPrice;\r\n\r\n        // Check tokens > 0\r\n        require(tokens > 0);\r\n\r\n\t\tif ((time() >= (startDate + 15 days)) && (time() <= endDate)){\r\n\t\t\tuint leftTokens=sub(capTokens,add(totalTokens, tokens));\r\n\t\t\tleftTokens = (leftTokens>0)? leftTokens:0;\r\n\t\t\tuint bonusTokens = min(_userBonus[participant],min(tokens,leftTokens));\r\n\t\t\t\r\n\t\t\t// Check bonusTokens >= 0\r\n\t\t\trequire(bonusTokens >= 0);\r\n\t\t\t\r\n\t\t\ttokens = add(tokens,bonusTokens);\r\n        }\r\n\t\t\r\n\t\t// Cannot exceed capTokens\r\n\t\ttotalTokens = add(totalTokens, tokens);\r\n        require(totalTokens <= capTokens);\r\n\r\n\t\t// Compute tokens for foundation 38%\r\n        // Number of tokens restricted so maths is safe\r\n        uint ownerTokens = div(tokens,50)*19;\r\n\r\n\t\t// Add to total supply\r\n        _totalSupply = add(_totalSupply, tokens);\r\n\t\t_totalSupply = add(_totalSupply, ownerTokens);\r\n\t\t\r\n        // Add to balances\r\n        _balances[participant] = add(_balances[participant], tokens);\r\n\t\t_balances[owner] = add(_balances[owner], ownerTokens);\r\n\r\n\t\t// Add to user bonus\r\n\t\tif (time() < (startDate + 2 days)){\r\n\t\t\tuint bonus = div(tokens,2);\r\n\t\t\t_userBonus[participant] = add(_userBonus[participant], bonus);\r\n        }\r\n\t\t\r\n\t\t// Log events\r\n        BoughtTokens(participant, msg.value, totalEthers, tokens, _buyPrice);\r\n        Transfer(0x0, participant, tokens);\r\n\t\tTransfer(0x0, owner, ownerTokens);\r\n\r\n    }\r\n\r\n    // Transfer the balance from owner's account to another account, with a\r\n    // check that the crowdsale is finalised \r\n    function transfer(address _to, uint _amount) returns (bool success) {\r\n        // Cannot transfer before crowdsale ends + 7 days\r\n        require((time() > endDate + 7 days ));\r\n        // Standard transfer\r\n        return super.transfer(_to, _amount);\r\n    }\r\n\r\n    // Spender of tokens transfer an amount of tokens from the token owner's\r\n    // balance to another account, with a check that the crowdsale is\r\n    // finalised \r\n    function transferFrom(address _from, address _to, uint _amount) returns (bool success) {\r\n        // Cannot transfer before crowdsale ends + 7 days\r\n        require((time() > endDate + 7 days ));\r\n        // Standard transferFrom\r\n        return super.transferFrom(_from, _to, _amount);\r\n    }\r\n\r\n    function mint(uint256 _amount) onlyOwner {\r\n        require((time() > endDate + 7 days ));\r\n        require(_amount > 0);\r\n        _balances[owner] = add(_balances[owner], _amount);\r\n        _totalSupply = add(_totalSupply, _amount);\r\n        Transfer(0x0, owner, _amount);\r\n    }\r\n\r\n    function burn(uint256 _amount) onlyOwner {\r\n\t\trequire((time() > endDate + 7 days ));\r\n        require(_amount > 0);\r\n        _balances[owner] = sub(_balances[owner],_amount);\r\n        _totalSupply = sub(_totalSupply,_amount);\r\n\t\tTransfer(owner, 0x0 , _amount);\r\n    }\r\n    \r\n\tfunction setCurs(uint _curs) onlyOwner {\r\n        require(_curs > 0);\r\n        curs = _curs;\r\n    }\r\n\r\n  \t// Crowdsale owners can collect ETH any number of times\r\n    function collect() onlyOwner {\r\n\t\trequire(addrcnt.call.value(this.balance)(0));\r\n\t\tCollect(addrcnt,this.balance);\r\n\t}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalEthers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"at\",\"type\":\"uint256\"}],\"name\":\"buyPriceAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_curs\",\"type\":\"uint256\"}],\"name\":\"setCurs\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"capTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"curs\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"collect\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"participant\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_start\",\"type\":\"uint256\"},{\"name\":\"_end\",\"type\":\"uint256\"},{\"name\":\"_capTokens\",\"type\":\"uint256\"},{\"name\":\"_curs\",\"type\":\"uint256\"},{\"name\":\"_addrcnt\",\"type\":\"address\"}],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ethers\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newEtherBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_buyPrice\",\"type\":\"uint256\"}],\"name\":\"BoughtTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addrcnt\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Collect\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"HUNT","CompilerVersion":"v0.4.13+commit.fb4cb1a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000598d3c280000000000000000000000000000000000000000000000000000000059aa3d280000000000000000000000000000000000000000000c685fa11e01ec6f00000000000000000000000000000000000000000000000000000000000000000076130000000000000000000000009fbb355cf6c2064e4dc7efa1f5b5f214ff7cdb26","Library":"","SwarmSource":"bzzr://9170203e2be824cd5df1bc562c182be31a7ada4130fb72bc199788889d9f2787"}]}