{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.2;\r\ncontract token { \r\n    function transfer(address, uint256){  }\r\n    function balanceOf(address) constant returns (uint256) { }\r\n}\r\n\r\n/// @title FairAuction contract\r\n/// @author Christopher Grant - <christopher@delphi.markets>\r\ncontract FairAuction {\r\n    /* State */\r\n    address public beneficiary;\r\n    uint public amountRaised; uint public startTime; uint public deadline; uint public memberCount; uint public crowdsaleCap;\r\n    uint256 public tokenSupply;\r\n    token public tokenReward;\r\n    mapping(address => uint256) public balanceOf;\r\n    mapping (uint => address) accountIndex;\r\n    bool public finalized;\r\n\r\n    /* Events */\r\n    event TokenAllocation(address recipient, uint amount);\r\n    event Finalized(address beneficiary, uint amountRaised);\r\n    event FundTransfer(address backer, uint amount);\r\n    event FundClaim(address claimant, uint amount);\r\n\r\n    /* Initialize relevant crowdsale contract details */\r\n    function FairAuction(\r\n        address fundedAddress,\r\n        uint epochStartTime,\r\n        uint durationInMinutes,\r\n        uint256 capOnCrowdsale,\r\n        token contractAddressOfRewardToken\r\n    ) {\r\n        beneficiary = fundedAddress;\r\n        startTime = epochStartTime;\r\n        deadline = startTime + (durationInMinutes * 1 minutes);\r\n        tokenReward = token(contractAddressOfRewardToken);\r\n        crowdsaleCap = capOnCrowdsale * 1 ether;\r\n        finalized = false;\r\n    }\r\n\r\n    /* default function (called whenever funds are sent to the FairAuction) */\r\n    function () payable {\r\n        /* Ensure that auction is ongoing */\r\n        if (now < startTime) throw;\r\n        if (now >= deadline) throw;\r\n\r\n        uint amount = msg.value;\r\n\r\n        /* Ensure that we do not pass the cap */\r\n        if (amountRaised + amount > crowdsaleCap) throw;\r\n\r\n        uint256 existingBalance = balanceOf[msg.sender];\r\n\r\n        /* Tally new members (helps iteration later) */\r\n        if (existingBalance == 0) {\r\n            accountIndex[memberCount] = msg.sender;\r\n            memberCount += 1;\r\n        } \r\n        \r\n        /* Track contribution amount */\r\n        balanceOf[msg.sender] = existingBalance + amount;\r\n        amountRaised += amount;\r\n\r\n        /* Fire FundTransfer event */\r\n        FundTransfer(msg.sender, amount);\r\n    }\r\n\r\n    /* finalize() can be called once the FairAuction has ended, which will allow withdrawals */\r\n    function finalize() {\r\n        /* Nothing to finalize */\r\n        if (amountRaised == 0) throw;\r\n\r\n        /* Auction still ongoing */\r\n        if (now < deadline) {\r\n            /* Don't terminate auction before cap is reached */\r\n            if (amountRaised < crowdsaleCap) throw;\r\n        }\r\n\r\n        /* Snapshot available supply of reward tokens */\r\n        tokenSupply = tokenReward.balanceOf(this);\r\n\r\n        /* Mark the FairAuction as finalized */\r\n        finalized = true;\r\n        /* Fire Finalized event */\r\n        Finalized(beneficiary, amountRaised);\r\n    }\r\n\r\n    /* individualClaim() can be called by any auction participant once the FairAuction is finalized, to claim the tokens they are owed from the auction */\r\n    function individualClaim() {\r\n        /* Only allow once auction has been finalized */\r\n        if (!finalized) throw;\r\n\r\n        /* Grant tokens due */\r\n        tokenReward.transfer(msg.sender, (balanceOf[msg.sender] * tokenSupply / amountRaised));\r\n        /* Fire TokenAllocation event */\r\n        TokenAllocation(msg.sender, (balanceOf[msg.sender] * tokenSupply / amountRaised));\r\n        /* Prevent repeat-withdrawals */\r\n        balanceOf[msg.sender] = 0;\r\n    }\r\n\r\n    /* beneficiarySend() can be called once the FairAuction is finalized, to send the crowdsale proceeds to their destination address */\r\n    function beneficiarySend() {\r\n        /* Only allow once auction has been finalized */\r\n        if (!finalized) throw;\r\n\r\n        /* Send proceeds to beneficiary */\r\n        if (beneficiary.send(amountRaised)) {\r\n            /* Fire FundClaim event */\r\n            FundClaim(beneficiary, amountRaised);\r\n        }\r\n    }\r\n\r\n    /* automaticWithdrawLoop() can be called once the FairAuction is finalized to automatically allocate a batch of auctioned tokens */\r\n    function automaticWithdrawLoop(uint startIndex, uint endIndex) {\r\n        /* Only allow once auction has been finalized */\r\n        if (!finalized) throw;\r\n        \r\n        /* Distribute auctioned tokens fairly among a batch of participants. */\r\n        for (uint i=startIndex; i<=endIndex && i<memberCount; i++) {\r\n            /* Should not occur */\r\n            if (accountIndex[i] == 0)\r\n                continue;\r\n            /* Grant tokens due */\r\n            tokenReward.transfer(accountIndex[i], (balanceOf[accountIndex[i]] * tokenSupply / amountRaised));\r\n            /* Fire TokenAllocation event */\r\n            TokenAllocation(accountIndex[i], (balanceOf[accountIndex[i]] * tokenSupply / amountRaised));\r\n            /* Prevent repeat-withdrawals */\r\n            balanceOf[accountIndex[i]] = 0;\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"memberCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"individualClaim\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"deadline\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"beneficiarySend\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenReward\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"amountRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"finalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"startIndex\",\"type\":\"uint256\"},{\"name\":\"endIndex\",\"type\":\"uint256\"}],\"name\":\"automaticWithdrawLoop\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"fundedAddress\",\"type\":\"address\"},{\"name\":\"epochStartTime\",\"type\":\"uint256\"},{\"name\":\"durationInMinutes\",\"type\":\"uint256\"},{\"name\":\"capOnCrowdsale\",\"type\":\"uint256\"},{\"name\":\"contractAddressOfRewardToken\",\"type\":\"address\"}],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenAllocation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amountRaised\",\"type\":\"uint256\"}],\"name\":\"Finalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"backer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FundTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"claimant\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FundClaim\",\"type\":\"event\"}]","ContractName":"FairAuction","CompilerVersion":"v0.4.11+commit.68ef5810","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000048bc0647c9abff55a367f97860502e8b1a68ee8a00000000000000000000000000000000000000000000000000000000596a03c00000000000000000000000000000000000000000000000000000000000005460000000000000000000000000000000000000000000000000000000000003d090000000000000000000000000346c3be6aebebaf5cb766a75adc9827efbb7e41a","Library":"","SwarmSource":"bzzr://53550973bb1c600f33d7d3f34f7b2dbab377a12963250335231a1999eefa5caa"}]}