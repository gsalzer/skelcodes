{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\n/**\r\n\t* @title SafeMath\r\n\t* @dev Math operations with safety checks that throw on error\r\n*/\r\nlibrary SafeMath {\r\n\tfunction mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n\t\tuint256 c = a * b;\r\n\t\tassert(a == 0 || c / a == b);\r\n\t\treturn c;\r\n\t}\r\n\t\r\n\tfunction div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n\t\t// assert(b > 0); // Solidity automatically throws when dividing by 0\r\n\t\tuint256 c = a / b;\r\n\t\t// assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\t\treturn c;\r\n\t}\r\n\t\r\n\tfunction sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n\t\tassert(b <= a);\r\n\t\treturn a - b;\r\n\t}\r\n\t\r\n\tfunction add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n\t\tuint256 c = a + b;\r\n\t\tassert(c >= a);\r\n\t\treturn c;\r\n\t}\r\n\t\r\n\tfunction toUINT112(uint256 a) internal constant returns(uint112) {\r\n\t\tassert(uint112(a) == a);\r\n\t\treturn uint112(a);\r\n\t}\r\n\t\r\n\tfunction toUINT120(uint256 a) internal constant returns(uint120) {\r\n\t\tassert(uint120(a) == a);\r\n\t\treturn uint120(a);\r\n\t}\r\n\t\r\n\tfunction toUINT128(uint256 a) internal constant returns(uint128) {\r\n\t\tassert(uint128(a) == a);\r\n\t\treturn uint128(a);\r\n\t}\r\n\t\r\n\tfunction percent(uint256 a, uint256 b) internal constant returns (uint256) {\r\n\t\tuint256 c = (b*a/100) ;\r\n\t\tassert(c <= a);\r\n\t\treturn c;\r\n\t}\r\n}\r\n\r\ncontract Owned {\r\n\t\r\n\taddress public owner;\r\n\t\r\n\tfunction Owned() {\r\n\t\towner = msg.sender;\r\n\t}\r\n\t\r\n\tmodifier onlyOwner() {\r\n\t\trequire(msg.sender == owner);\r\n\t\t_;\r\n\t}\r\n\t\r\n\tfunction setOwner(address _newOwner) onlyOwner {\r\n\t\towner = _newOwner;\r\n\t}\r\n}\r\n\r\n/**\r\n\t* @title ERC20Basic\r\n\t* @dev Simpler version of ERC20 interface\r\n\t* @dev see https://github.com/ethereum/EIPs/issues/179\r\n*/\r\ncontract ERC20Basic {\r\n\tfunction balanceOf(address who) public constant returns (uint256);\r\n\tfunction transfer(address to, uint256 value) public returns (bool);\r\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n\t* @title ERC20 interface\r\n\t* @dev see https://github.com/ethereum/EIPs/issues/20\r\n*/\r\ncontract ERC20 is ERC20Basic {\r\n\tfunction allowance(address owner, address spender) public constant returns (uint256);\r\n\tfunction transferFrom(address from, address to, uint256 value) public returns (bool);\r\n\tfunction approve(address spender, uint256 value) public returns (bool);\r\n\tevent Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n\t* @title Basic token\r\n\t* @dev Basic version of StandardToken, with no allowances.\r\n*/\r\ncontract BasicToken is ERC20Basic {\r\n\tusing SafeMath for uint256;\r\n\t\r\n\tstruct Account {\r\n\t\tuint256 balances;\r\n\t\tuint256 rawTokens;\r\n\t\tuint32 lastMintedTimestamp;\r\n\t}\r\n\t\r\n\t// Balances for each account\r\n\tmapping(address => Account) accounts;\r\n\t\r\n\t\r\n\t/**\r\n\t\t* @dev transfer token for a specified address\r\n\t\t* @param _to The address to transfer to.\r\n\t\t* @param _value The amount to be transferred.\r\n\t*/\r\n\tfunction transfer(address _to, uint256 _value) public returns (bool) {\r\n\t\trequire(_to != address(0));\r\n\t\trequire(_value <= accounts[msg.sender].balances);\r\n\t\t\r\n\t\t// SafeMath.sub will throw if there is not enough balance.\r\n\t\taccounts[msg.sender].balances = accounts[msg.sender].balances.sub(_value);\r\n\t\taccounts[_to].balances = accounts[_to].balances.add(_value);\r\n\t\tTransfer(msg.sender, _to, _value);\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\t/**\r\n\t\t* @dev Gets the balance of the specified address.\r\n\t\t* @param _owner The address to query the the balance of.\r\n\t\t* @return An uint256 representing the amount owned by the passed address.\r\n\t*/\r\n\tfunction balanceOf(address _owner) public constant returns (uint256 balance) {\r\n\t\treturn accounts[_owner].balances;\r\n\t}\r\n\t\r\n}\r\n\r\n/**\r\n\t* @title Standard ERC20 token\r\n\t*\r\n\t* @dev Implementation of the basic standard token.\r\n\t* @dev https://github.com/ethereum/EIPs/issues/20\r\n\t* @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n*/\r\ncontract StandardToken is ERC20, BasicToken {\r\n\t\r\n\tmapping (address => mapping (address => uint256)) internal allowed;\r\n\t\r\n\t\r\n\t/**\r\n\t\t* @dev Transfer tokens from one address to another\r\n\t\t* @param _from address The address which you want to send tokens from\r\n\t\t* @param _to address The address which you want to transfer to\r\n\t\t* @param _value uint256 the amount of tokens to be transferred\r\n\t*/\r\n\tfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n\t\trequire(_to != address(0));\r\n\t\trequire(_value <= accounts[_from].balances);\r\n\t\trequire(_value <= allowed[_from][msg.sender]);\r\n\t\t\r\n\t\taccounts[_from].balances = accounts[_from].balances.sub(_value);\r\n\t\taccounts[_to].balances = accounts[_to].balances.add(_value);\r\n\t\tallowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n\t\tTransfer(_from, _to, _value);\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\t/**\r\n\t\t* @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n\t\t*\r\n\t\t* Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n\t\t* and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n\t\t* race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n\t\t* https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n\t\t* @param _spender The address which will spend the funds.\r\n\t\t* @param _value The amount of tokens to be spent.\r\n\t*/\r\n\tfunction approve(address _spender, uint256 _value) public returns (bool) {\r\n\t\tallowed[msg.sender][_spender] = _value;\r\n\t\tApproval(msg.sender, _spender, _value);\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\t/**\r\n\t\t* @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n\t\t* @param _owner address The address which owns the funds.\r\n\t\t* @param _spender address The address which will spend the funds.\r\n\t\t* @return A uint256 specifying the amount of tokens still available for the spender.\r\n\t*/\r\n\tfunction allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n\t\treturn allowed[_owner][_spender];\r\n\t}\r\n\t\r\n\t/**\r\n\t\t* approve should be called when allowed[_spender] == 0. To increment\r\n\t\t* allowed value is better to use this function to avoid 2 calls (and wait until\r\n\t\t* the first transaction is mined)\r\n\t\t* From MonolithDAO Token.sol\r\n\t*/\r\n\tfunction increaseApproval (address _spender, uint _addedValue) public returns (bool success) {\r\n\t\tallowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n\t\tApproval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\tfunction decreaseApproval (address _spender, uint _subtractedValue) public returns (bool success) {\r\n\t\tuint oldValue = allowed[msg.sender][_spender];\r\n\t\tif (_subtractedValue > oldValue) {\r\n\t\t\tallowed[msg.sender][_spender] = 0;\r\n\t\t\t} else {\r\n\t\t\tallowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n\t\t}\r\n\t\tApproval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n\t\treturn true;\r\n\t}\r\n\t\r\n}\r\n\r\ncontract TTC is StandardToken, Owned {\r\n\tstring public constant name    = \"TECHTRADECOIN\";  \r\n\tuint8 public constant decimals = 8;               \r\n\tstring public constant symbol  = \"TTC\";\r\n\tbool public canClaimToken = false;\r\n\tuint256 public constant maxSupply  = 300000000*10**uint256(decimals);\r\n\tuint256 public constant dateInit=1516924800 ;\r\n\t\r\n\t/*          50 days     12months   12months\r\n\t\t|------------------|--x--x--x--|--x--x--x--|------------>\r\n\t\t01-26-18    ICO         LEND(*)       ECO    FINALIZED\r\n\t\t                        DEV\r\n\t\t                        MARK\r\n\t\t                        ADMIN\r\n\t\t(*): 100% tokens\r\n\t*/\r\n\tuint256 public constant dateICO=dateInit + 50 days;\r\n\tuint256 public constant dateRelease3=dateICO + 90 days;\r\n\tuint256 public constant dateRelease6=dateRelease3 + 90 days;\r\n\tuint256 public constant dateRelease9=dateRelease6 + 90 days;\r\n\tuint256 public constant dateRelease12=dateRelease9 + 90 days;\r\n\t\r\n\tuint256 public constant dateEcoRelease3=dateRelease12 + 90 days;\r\n\tuint256 public constant dateEcoRelease6=dateEcoRelease3 + 90 days;\r\n\tuint256 public constant dateEcoRelease9=dateEcoRelease6 + 90 days;\r\n\tuint256 public constant dateEcoRelease12=dateEcoRelease9 + 90 days;\r\n\r\n\tbool public isAllocatedICO=false;\r\n\t\r\n\tbool public isAllocatedLending=false;\r\n\t\r\n\tbool public isAllocated3=false;\r\n\tbool public isAllocated6=false;\r\n\tbool public isAllocated9=false;\r\n\tbool public isAllocated12=false;\r\n\t\r\n\tbool public isEcoAllocated3=false;\r\n\tbool public isEcoAllocated6=false;\r\n\tbool public isEcoAllocated9=false;\r\n\tbool public isEcoAllocated12=false;\r\n\t\r\n\tenum Stage {\r\n\t\tFinalized,\r\n\t\tICO,\r\n\t\tRelease3,\r\n\t\tRelease6,\r\n\t\tRelease9,\r\n\t\tRelease12,\r\n\t\tEco3,\r\n\t\tEco6,\r\n\t\tEco9,\r\n\t\tEco12\r\n\t}\r\n\t\r\n\tstruct Supplies {\r\n\t\tuint256 total;\r\n\t\tuint256 rawTokens;\r\n\t}\r\n\t\r\n\t//the stage for releasing Tokens\r\n\tstruct StageRelease {\r\n\t\tuint256 rawTokens;\r\n\t\tuint256 totalRawTokens;\r\n\t}\r\n\t\r\n\tSupplies supplies;\r\n\tStageRelease public stageICO=StageRelease(maxSupply.percent(21),maxSupply.percent(21));\r\n\tStageRelease public stageLending=StageRelease(maxSupply.percent(25),maxSupply.percent(25));\r\n\tStageRelease public stageDevelop=StageRelease(maxSupply.percent(35),maxSupply.percent(35));\r\n\tStageRelease public stageMarketing=StageRelease(maxSupply.percent(5),maxSupply.percent(5));\r\n\tStageRelease public stageAdmin=StageRelease(maxSupply.percent(2), maxSupply.percent(2));\r\n\tStageRelease public stageEco=StageRelease(maxSupply.percent(12), maxSupply.percent(12));\r\n\t\r\n\t// Send back ether \r\n\tfunction () {\r\n\t\trevert();\r\n\t}\r\n\t//getter totalSupply\r\n\tfunction totalSupply() public constant returns (uint256 total) {\r\n\t\treturn supplies.total;\r\n\t}\r\n\t\r\n\tfunction mintToken(address _owner, uint256 _amount, bool _isRaw) onlyOwner internal {\r\n\t\trequire(_amount.add(supplies.total)<=maxSupply);\r\n\t\tif (_isRaw) {\r\n\t\t\taccounts[_owner].rawTokens=_amount.add(accounts[_owner].rawTokens);\r\n\t\t\tsupplies.rawTokens=_amount.add(supplies.rawTokens);\r\n\t\t\t} else {\r\n\t\t\taccounts[_owner].balances=_amount.add(accounts[_owner].balances);\r\n\t\t}\r\n\t\tsupplies.total=_amount.add(supplies.total);\r\n\t\tTransfer(0, _owner, _amount);\r\n\t}\r\n\t\r\n\tfunction transferRaw(address _to, uint256 _value) public returns (bool) {\r\n\t\trequire(_to != address(0));\r\n\t\trequire(_value <= accounts[msg.sender].rawTokens);\r\n\t\t\r\n\t\t\r\n\t\t// SafeMath.sub will throw if there is not enough balance.\r\n\t\taccounts[msg.sender].rawTokens = accounts[msg.sender].rawTokens.sub(_value);\r\n\t\taccounts[_to].rawTokens = accounts[_to].rawTokens.add(_value);\r\n\t\tTransfer(msg.sender, _to, _value);\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\tfunction setClaimToken(bool approve) onlyOwner public returns (bool) {\r\n\t\tcanClaimToken=true;\r\n\t\treturn canClaimToken;\r\n\t}\r\n\t\r\n\tfunction claimToken(address _owner) public returns (bool amount) {\r\n\t\trequire(accounts[_owner].rawTokens!=0);\r\n\t\trequire(canClaimToken);\r\n\t\t\r\n\t\tuint256 amountToken = accounts[_owner].rawTokens;\r\n\t\taccounts[_owner].rawTokens = 0;\r\n\t\taccounts[_owner].balances = amountToken + accounts[_owner].balances;\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\tfunction balanceOfRaws(address _owner) public constant returns (uint256 balance) {\r\n\t\treturn accounts[_owner].rawTokens;\r\n\t}\r\n\t\r\n\tfunction blockTime() constant returns (uint32) {\r\n\t\treturn uint32(block.timestamp);\r\n\t}\r\n\t\r\n\tfunction stage() constant returns (Stage) {\r\n\t\t\r\n\t\tif(blockTime()<=dateICO) {\r\n\t\t\treturn Stage.ICO;\r\n\t\t}\r\n\t\t\r\n\t\tif(blockTime()<=dateRelease3) {\r\n\t\t\treturn Stage.Release3;\r\n\t\t}\r\n\t\t\r\n\t\tif(blockTime()<=dateRelease6) {\r\n\t\t\treturn Stage.Release6;\r\n\t\t}\r\n\t\t\r\n\t\tif(blockTime()<=dateRelease9) {\r\n\t\t\treturn Stage.Release9;\r\n\t\t}\r\n\t\t\r\n\t\tif(blockTime()<=dateRelease12) {\r\n\t\t\treturn Stage.Release12;\r\n\t\t}\r\n\t\t\r\n\t\tif(blockTime()<=dateEcoRelease3) {\r\n\t\t\treturn Stage.Eco3;\r\n\t\t}\r\n\t\t\r\n\t\tif(blockTime()<=dateEcoRelease6) {\r\n\t\t\treturn Stage.Eco6;\r\n\t\t}\r\n\t\t\r\n\t\tif(blockTime()<=dateEcoRelease9) {\r\n\t\t\treturn Stage.Eco9;\r\n\t\t}\r\n\t\t\r\n\t\tif(blockTime()<=dateEcoRelease12) {\r\n\t\t\treturn Stage.Eco12;\r\n\t\t}\r\n\t\t\r\n\t\treturn Stage.Finalized;\r\n\t}\r\n\t\r\n\tfunction releaseStage (uint256 amount, StageRelease storage stageRelease, bool isRaw) internal returns (uint256) {\r\n\t\tif(stageRelease.rawTokens>0) {\r\n\t\t\tint256 remain=int256(stageRelease.rawTokens - amount);\r\n\t\t\tif(remain<0)\r\n\t\t\tamount=stageRelease.rawTokens;\r\n\t\t\tstageRelease.rawTokens=stageRelease.rawTokens.sub(amount);\r\n\t\t\tmintToken(owner, amount, isRaw);\r\n\t\t\treturn amount;\r\n\t\t}\r\n\t\treturn 0;\r\n\t}\r\n\t\r\n\tfunction releaseNotEco(uint256 percent, bool isRaw) internal returns (uint256) {\r\n\t\t\r\n\t\tuint256 amountDevelop = stageDevelop.totalRawTokens.percent(percent);\r\n\t\tuint256 amountMarketing = stageMarketing.totalRawTokens.percent(percent);\r\n\t\tuint256 amountAdmin = stageAdmin.totalRawTokens.percent(percent);\r\n\t\tuint256 amountSum = amountDevelop+amountMarketing+amountAdmin;\r\n\t\t\r\n\t\treleaseStage(amountDevelop, stageDevelop, isRaw);\r\n\t\treleaseStage(amountMarketing, stageMarketing, isRaw);\r\n\t\treleaseStage(amountAdmin, stageAdmin, isRaw);\r\n\t\treturn amountSum;\r\n\t}\r\n\t\r\n\tfunction releaseEco(uint256 percent, bool isRaw) internal returns (uint256) {\r\n\t\tuint256 amountEco = stageEco.totalRawTokens.percent(percent);\r\n\t\treleaseStage(amountEco, stageEco, isRaw);      \r\n\t\treturn amountEco;\r\n\t}\r\n\t\r\n\tfunction release100Percent(bool isRaw, StageRelease storage stageRelease) internal returns (uint256) {\r\n\t\tuint256 amount = stageRelease.totalRawTokens.percent(100);\r\n\t\treleaseStage(amount, stageRelease, isRaw);      \r\n\t\treturn amount;\r\n\t}\r\n\t\r\n\t//main function, must run for releasing.\r\n\t//##################################################################33\r\n\tfunction release(bool isRaw) onlyOwner public returns (uint256) {\r\n\t\tuint256 amountSum=0;\r\n\t\t\r\n\t\tif(stage()==Stage.ICO && isAllocatedICO==false) {\r\n\t\t\tuint256 amountICO=release100Percent(isRaw, stageICO);\r\n\t\t\tamountSum=amountSum.add(amountICO);\r\n\t\t\tisAllocatedICO=true;\r\n\t\t\treturn amountSum;\r\n\t\t}\r\n\t\t\r\n\t\tif(stage()==Stage.Release3 && isAllocated3==false) {\r\n\t\t\tuint256 amountRelease3=releaseNotEco(30, isRaw);\r\n\t\t\tamountSum=amountSum.add(amountRelease3);\r\n\t\t\t//for lending\r\n\t\t\tamountRelease3=release100Percent(isRaw, stageLending);\r\n\t\t\tamountSum=amountSum.add(amountRelease3);\r\n\t\t\tisAllocated3=true;\r\n\t\t\treturn amountSum;\r\n\t\t}\r\n\t\t\r\n\t\tif(stage()==Stage.Release6 && isAllocated6==false) {\r\n\t\t\tuint256 amountRelease6=releaseNotEco(20, isRaw);\r\n\t\t\tamountSum=amountSum.add(amountRelease6);\r\n\t\t\tisAllocated6=true;\r\n\t\t\treturn amountSum;\r\n\t\t}\r\n\t\t\r\n\t\tif(stage()==Stage.Release9 && isAllocated9==false) {\r\n\t\t\tuint256 amountRelease9=releaseNotEco(28, isRaw);\r\n\t\t\tamountSum=amountSum.add(amountRelease9);\r\n\t\t\tisAllocated9=true;\r\n\t\t\treturn amountSum;\r\n\t\t}\r\n\t\t\r\n\t\tif(stage()==Stage.Release12 && isAllocated12==false) {\r\n\t\t\tuint256 amountRelease12=releaseNotEco(22, isRaw);\r\n\t\t\tamountSum=amountSum.add(amountRelease12);\r\n\t\t\tisAllocated12=true;\r\n\t\t\treturn amountSum;\r\n\t\t}\r\n\t\t\r\n\t\tif(stage()==Stage.Eco3 && isEcoAllocated3==false) {\r\n\t\t\tuint256 amountEcoRelease3=releaseEco(30, isRaw);\r\n\t\t\tamountSum=amountSum.add(amountEcoRelease3);\r\n\t\t\tisEcoAllocated3=true;\r\n\t\t\treturn amountSum;\r\n\t\t}\r\n\t\t\r\n\t\tif(stage()==Stage.Eco6 && isEcoAllocated6==false) {\r\n\t\t\tuint256 amountEcoRelease6=releaseEco(20, isRaw);\r\n\t\t\tamountSum=amountSum.add(amountEcoRelease6);\r\n\t\t\tisEcoAllocated6=true;\r\n\t\t\treturn amountSum;\r\n\t\t}\r\n\t\t\r\n\t\tif(stage()==Stage.Eco9 && isEcoAllocated9==false) {\r\n\t\t\tuint256 amountEcoRelease9=releaseEco(28, isRaw);\r\n\t\t\tamountSum=amountSum.add(amountEcoRelease9);\r\n\t\t\tisEcoAllocated9=true;\r\n\t\t\treturn amountSum;\r\n\t\t}\r\n\t\tif(stage()==Stage.Eco12 && isEcoAllocated12==false) {\r\n\t\t\tuint256 amountEcoRelease12=releaseEco(22, isRaw);\r\n\t\t\tamountSum=amountSum.add(amountEcoRelease12);\r\n\t\t\tisEcoAllocated12=true;\r\n\t\t\treturn amountSum;\r\n\t\t}\r\n\t\treturn amountSum;\r\n\t}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isEcoAllocated3\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"total\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"approve\",\"type\":\"bool\"}],\"name\":\"setClaimToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isAllocatedLending\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isAllocatedICO\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"claimToken\",\"outputs\":[{\"name\":\"amount\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dateICO\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dateRelease3\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stageLending\",\"outputs\":[{\"name\":\"rawTokens\",\"type\":\"uint256\"},{\"name\":\"totalRawTokens\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"blockTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stageEco\",\"outputs\":[{\"name\":\"rawTokens\",\"type\":\"uint256\"},{\"name\":\"totalRawTokens\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stageMarketing\",\"outputs\":[{\"name\":\"rawTokens\",\"type\":\"uint256\"},{\"name\":\"totalRawTokens\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stageAdmin\",\"outputs\":[{\"name\":\"rawTokens\",\"type\":\"uint256\"},{\"name\":\"totalRawTokens\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dateRelease12\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"isRaw\",\"type\":\"bool\"}],\"name\":\"release\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dateEcoRelease3\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isEcoAllocated9\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferRaw\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dateEcoRelease9\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isAllocated3\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stageDevelop\",\"outputs\":[{\"name\":\"rawTokens\",\"type\":\"uint256\"},{\"name\":\"totalRawTokens\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stageICO\",\"outputs\":[{\"name\":\"rawTokens\",\"type\":\"uint256\"},{\"name\":\"totalRawTokens\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dateRelease9\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dateRelease6\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dateEcoRelease12\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isAllocated12\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dateInit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isAllocated9\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dateEcoRelease6\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isEcoAllocated6\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isAllocated6\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOfRaws\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canClaimToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isEcoAllocated12\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"payable\":false,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"TTC","CompilerVersion":"v0.4.11+commit.68ef5810","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://d33762b4b5a070eec7917a193fd5025df2e5c73038b3367d130e2d5096a3fc3d"}]}