{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.16;\r\n/**\r\n * @title SafeMath by OpenZeppelin\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract token {\r\n\r\n    function balanceOf(address _owner) public constant returns (uint256 balance);\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n\r\n    }\r\n\r\ncontract ICO {\r\n    using SafeMath for uint256;\r\n    //This ico have 3 stages\r\n    enum State {\r\n        Ongoin,\r\n        SoftCap,\r\n        Successful\r\n    }\r\n    //public variables\r\n    State public state = State.Ongoin; //Set initial stage\r\n    uint256 public startTime = now; //block-time when it was deployed\r\n    uint256 public delay;\r\n    //List of prices, as both, eth and token have 18 decimal, its a direct factor\r\n    uint[2] public tablePrices = [\r\n    2500, //for first 10million tokens\r\n    2000\r\n    ];\r\n    uint256 public SoftCap = 40000000 * (10 ** 18); //40 million tokens\r\n    uint256 public HardCap = 80000000 * (10 ** 18); //80 million tokens\r\n    uint256 public totalRaised; //eth in wei\r\n    uint256 public totalDistributed; //tokens\r\n    uint256 public ICOdeadline = startTime.add(21 days);//21 days deadline\r\n    uint256 public completedAt;\r\n    uint256 public closedAt;\r\n    token public tokenReward;\r\n    address public creator;\r\n    address public beneficiary;\r\n    string public campaignUrl;\r\n    uint8 constant version = 1;\r\n\r\n    //events for log\r\n    event LogFundingReceived(address _addr, uint _amount, uint _currentTotal);\r\n    event LogBeneficiaryPaid(address _beneficiaryAddress);\r\n    event LogFundingSuccessful(uint _totalRaised);\r\n    event LogFunderInitialized(\r\n        address _creator,\r\n        address _beneficiary,\r\n        string _url,\r\n        uint256 _ICOdeadline);\r\n    event LogContributorsPayout(address _addr, uint _amount);\r\n\r\n    modifier notFinished() {\r\n        require(state != State.Successful);\r\n        _;\r\n    }\r\n    /**\r\n    * @notice ICO constructor\r\n    * @param _campaignUrl is the ICO _url\r\n    * @param _addressOfTokenUsedAsReward is the token totalDistributed\r\n    */\r\n    function ICO (string _campaignUrl, token _addressOfTokenUsedAsReward, uint256 _delay) public {\r\n        creator = msg.sender;\r\n        beneficiary = msg.sender;\r\n        campaignUrl = _campaignUrl;\r\n        tokenReward = token(_addressOfTokenUsedAsReward);\r\n        delay = startTime.add(_delay * 1 hours);\r\n        LogFunderInitialized(\r\n            creator,\r\n            beneficiary,\r\n            campaignUrl,\r\n            ICOdeadline);\r\n    }\r\n\r\n    /**\r\n    * @notice contribution handler\r\n    */\r\n    function contribute() public notFinished payable {\r\n        require(now > delay);\r\n        uint tokenBought;\r\n        totalRaised = totalRaised.add(msg.value);\r\n\r\n        if(totalDistributed < 10000000 * (10 ** 18)){ //if on the first 10M\r\n            tokenBought = msg.value.mul(tablePrices[0]);\r\n        }\r\n        else {\r\n            tokenBought = msg.value.mul(tablePrices[1]);\r\n        }\r\n\r\n        totalDistributed = totalDistributed.add(tokenBought);\r\n        tokenReward.transfer(msg.sender, tokenBought);\r\n        \r\n        LogFundingReceived(msg.sender, msg.value, totalRaised);\r\n        LogContributorsPayout(msg.sender, tokenBought);\r\n        \r\n        checkIfFundingCompleteOrExpired();\r\n    }\r\n\r\n    /**\r\n    * @notice check status\r\n    */\r\n    function checkIfFundingCompleteOrExpired() public {\r\n        \r\n        if(now < ICOdeadline && state!=State.Successful){ //if we are on ICO period and its not Successful\r\n            if(state == State.Ongoin && totalRaised >= SoftCap){ //if we are Ongoin and we pass the SoftCap\r\n                state = State.SoftCap; //We are on SoftCap state\r\n                completedAt = now; //ICO is complete and will finish in 24h\r\n            }\r\n            else if (state == State.SoftCap && now > completedAt.add(24 hours)){ //if we are on SoftCap state and 24hrs have passed\r\n                state == State.Successful; //the ico becomes Successful\r\n                closedAt = now; //we finish now\r\n                LogFundingSuccessful(totalRaised); //we log the finish\r\n                finished(); //and execute closure\r\n            }\r\n        }\r\n        else if(now > ICOdeadline && state!=State.Successful ) { //if we reach ico deadline and its not Successful yet\r\n            state = State.Successful; //ico becomes Successful\r\n\r\n            if(completedAt == 0){  //if not completed previously\r\n                completedAt = now; //we complete now\r\n            }\r\n\r\n            closedAt = now; //we finish now\r\n            LogFundingSuccessful(totalRaised); //we log the finish\r\n            finished(); //and execute closure\r\n        }\r\n    }\r\n\r\n    function payOut() public {\r\n        require(msg.sender == beneficiary);\r\n        require(beneficiary.send(this.balance));\r\n        LogBeneficiaryPaid(beneficiary);\r\n    }\r\n\r\n   /**\r\n    * @notice closure handler\r\n    */\r\n    function finished() public { //When finished eth are transfered to beneficiary\r\n        require(state == State.Successful);\r\n        uint256 remanent = tokenReward.balanceOf(this);\r\n\r\n        require(beneficiary.send(this.balance));\r\n        tokenReward.transfer(beneficiary,remanent);\r\n\r\n        LogBeneficiaryPaid(beneficiary);\r\n        LogContributorsPayout(beneficiary, remanent);\r\n    }\r\n\r\n    function () public payable {\r\n        contribute();\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"completedAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tablePrices\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"HardCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"delay\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenReward\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"checkIfFundingCompleteOrExpired\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ICOdeadline\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"closedAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finished\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"payOut\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"contribute\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalDistributed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SoftCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"campaignUrl\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_campaignUrl\",\"type\":\"string\"},{\"name\":\"_addressOfTokenUsedAsReward\",\"type\":\"address\"},{\"name\":\"_delay\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_currentTotal\",\"type\":\"uint256\"}],\"name\":\"LogFundingReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_beneficiaryAddress\",\"type\":\"address\"}],\"name\":\"LogBeneficiaryPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_totalRaised\",\"type\":\"uint256\"}],\"name\":\"LogFundingSuccessful\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_creator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_url\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_ICOdeadline\",\"type\":\"uint256\"}],\"name\":\"LogFunderInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"LogContributorsPayout\",\"type\":\"event\"}]","ContractName":"ICO","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000600000000000000000000000001e35c3200e564be5af35aff8d1bb5a16a4390a790000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000001968747470733a2f2f7777772e7261666c2e6e6574776f726b2f00000000000000","Library":"","SwarmSource":"bzzr://c88e6c86c5d5d525c62c06fdc846916deaaf397ad00bf1eb394991d9d3c73ac2"}]}