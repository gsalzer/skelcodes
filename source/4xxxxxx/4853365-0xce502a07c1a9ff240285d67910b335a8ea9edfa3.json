{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.17;\r\n\r\n/// @title Manages special access privileges of BankCore.\r\n/*** LoveBankAccessControl Contract adapted from CryptoKitty ***/\r\ncontract LoveBankAccessControl {\r\n\r\n    // This facet controls access control for LoveBank. There are four roles managed here:\r\n    //\r\n    //     - The CEO: The CEO can reassign other roles and change the addresses of our dependent smart\r\n    //         contracts. It is also the only role that can unpause the smart contract. It is initially\r\n    //         set to the address that created the smart contract in the BankCore constructor.\r\n    //\r\n    //     - The CFO: The CFO can withdraw funds from BankCore contract.\r\n    //\r\n    //     - The COO: The COO can set Free-Fee-Time.\r\n    //\r\n    // It should be noted that these roles are distinct without overlap in their access abilities, the\r\n    // abilities listed for each role above are exhaustive. In particular, while the CEO can assign any\r\n    // address to any role, the CEO address itself doesn't have the ability to act in those roles. This\r\n    // restriction is intentional so that we aren't tempted to use the CEO address frequently out of\r\n    // convenience. The less we use an address, the less likely it is that we somehow compromise the\r\n    // account.\r\n\r\n    /// @dev Emited when contract is upgraded\r\n    event ContractUpgrade(address newVerseContract);\r\n\r\n    // The addresses of the accounts (or contracts) that can execute actions within each roles.\r\n    address public ceoAddress;\r\n    address public cfoAddress;\r\n    address public cooAddress;\r\n\r\n    // @dev Keeps track whether the contract is paused. When that is true, most actions are blocked\r\n    bool public paused=false;\r\n\r\n    /// @dev Access modifier for CEO-only functionality\r\n    modifier onlyCEO() {\r\n        require(msg.sender == ceoAddress);\r\n        _;\r\n    }\r\n\r\n    /// @dev Access modifier for CFO-only functionality\r\n    modifier onlyCFO() {\r\n        require(msg.sender == cfoAddress);\r\n        _;\r\n    }\r\n\r\n    /// @dev Access modifier for COO-only functionality\r\n    modifier onlyCOO() {\r\n        require(msg.sender == cooAddress);\r\n        _;\r\n    }\r\n\r\n    modifier onlyCLevel() {\r\n        require(\r\n            msg.sender == cooAddress ||\r\n            msg.sender == ceoAddress ||\r\n            msg.sender == cfoAddress\r\n        );\r\n        _;\r\n    }\r\n    \r\n    /// @dev Assigns a new address to act as the CEO. Only available to the current CEO.\r\n    /// @param _newCEO is the address of the new CEO\r\n    function setCEO(address _newCEO) external onlyCEO {\r\n        require(_newCEO != address(0));\r\n        ceoAddress = _newCEO;\r\n    }\r\n\r\n    /// @dev Assigns a new address to act as the CFO. Only available to the current CEO.\r\n    /// @param _newCFO is the address of the new CFO\r\n    function setCFO(address _newCFO) external onlyCEO {\r\n        require(_newCFO != address(0));\r\n        cfoAddress = _newCFO;\r\n    }\r\n\r\n    /// @dev Assigns a new address to act as the COO. Only available to the current CEO.\r\n    /// @param _newCOO is the address of the new COO\r\n    function setCOO(address _newCOO) external onlyCEO {\r\n        require(_newCOO != address(0));\r\n        cooAddress = _newCOO;\r\n    }\r\n    \r\n    /*** Pausable functionality adapted from OpenZeppelin ***/\r\n\r\n    /// @dev Modifier to allow actions only when the contract IS NOT paused\r\n    modifier whenNotPaused() {\r\n        require(!paused);\r\n        _;\r\n    }\r\n\r\n    /// @dev Modifier to allow actions only when the contract IS paused\r\n    modifier whenPaused() {\r\n        require(paused);\r\n        _;\r\n    }\r\n\r\n    /// @dev Called by any \"C-level\" role to pause the contract. Used only when\r\n    ///  a bug or exploit is detected and we need to limit damage.\r\n    function pause() external onlyCLevel whenNotPaused {\r\n        paused = true;\r\n    }\r\n\r\n    /// @dev Unpauses the smart contract. Can only be called by the CEO, since\r\n    ///  one reason we may pause the contract is when CFO or COO accounts are\r\n    ///  compromised.\r\n    /// @notice This is public rather than external so it can be called by\r\n    ///  derived contracts.\r\n    function unpause() public onlyCEO whenPaused {\r\n        // can't unpause if contract was upgraded\r\n        paused = false;\r\n    }\r\n}\r\n\r\n/// @title Love Account Base Contract for LoveBank. Holds all common structs, events and base \r\n///  variables for love accounts.\r\n/// @author Diana Kudrow <https://github.com/lovebankcrypto>\r\n/// @dev Create new account by couple ,deposit or bless by all, withdraw with both sides' confirmation\r\n\r\ncontract LoveAccountBase{\r\n\r\n    // An individual new contrat is build whenever a new couple create a new love account through the \r\n    // BankCore Contract. The love account contract plays seceral roles:\r\n    //\r\n    //     - Information Storage: owners names, wallet addresses, love-ID, their milestones in \r\n    //        relationship, diary……\r\n    //\r\n    //     - Balance Storage: each account keep their deposit in seperate contrat for safety and \r\n    //        privilege concern\r\n    //\r\n    //     - Access Control: only receive message from one of owners, triggered by bank for safety \r\n    //        reason\r\n    //     \r\n    //     - Deposit/Bless(fallback), Withdraw, BreakUp, MileStone, Diary: 5 main function of our \r\n    //        love bank\r\n\r\n    /*** EVENTS ***/\r\n    \r\n    /// @dev The Deposit event is fired whenever a value>0 ether is transfered into loveaccount\r\n    event Deposit(address _from, uint _value);\r\n    \r\n    /*** DATA TYPES ***/\r\n    /// @dev choices of all account status and milestones\r\n    enum Status{BreakUp, Active, RequestPending, FirstMet,  //0-3\r\n        FirstKiss, FirstConfess, InRelationship,FirstDate, //4-7\r\n        Proposal, Engage, WeddingDay, Anniversary, Trip,  //8-12\r\n        NewFamilyMember, FirstSex, Birthday,             //13-15\r\n        special1, special2, special3                  // 16-18\r\n    }\r\n\r\n    struct StonePage {\r\n    \tuint64 logtime;\r\n    \tStatus contant;\r\n    }\r\n\r\n    struct DiaryPage {\r\n    \tuint64 logtime;\r\n    \tbytes contant;\r\n    }\r\n\r\n    /*** STORAGE ***/\r\n    \r\n    /// @dev Nicename of the FOUNDER of this love account\r\n    bytes32 public name1;\r\n\r\n    /// @dev Nicename of the FOUNDER's lover\r\n    bytes32 public name2;\r\n\r\n    /// @dev Address of the FOUNDER of this love account\r\n    address public owner1;\r\n\r\n    /// @dev Address of the FOUNDER's lover\r\n    address public owner2;\r\n\r\n    /// @dev contract address of Love Bank, for access control\r\n    address BANKACCOUNT;\r\n\r\n    /// @dev Keep track of who is withdrawing money during double-sig pending time\r\n    address withdrawer;\r\n\r\n    /// @dev Keep track of how much is withdrawing money during double-sig pending time\r\n    uint256 request_amount;\r\n\r\n    /// @dev Keep track of service charge during double-sig pending time\r\n    uint256 request_fee;\r\n\r\n    /// @dev One and unique LoveID of this account, smaller if sign up early\r\n    uint64 public loveID;\r\n\r\n    /// @dev Time stamp of found moment\r\n    uint64 public foundTime=uint64(now);\r\n\r\n    /// @dev diary index log, public\r\n    uint64 public next_diary_id=0;\r\n\r\n    /// @dev milestone index log, public\r\n    uint64 public next_stone_id=0;\r\n\r\n    /// @dev Status of the account: BreakUp, Active(defult), RequestPending\r\n    Status public status=Status.Active;\r\n    \r\n    /// @dev A mapping from timestamp to Status. Keep track of all Memory Moment for lovers\r\n    mapping (uint64=>StonePage) public milestone;\r\n\r\n    /// @dev A mapping from timestamp to bytes. Lovers can keep whatever words on ethereum eternally\r\n    mapping (uint64=>DiaryPage) public diary;\r\n\r\n    /// @dev Initiate love account when first found\r\n    function LoveAccountBase (\r\n        bytes32 _name1,\r\n        bytes32 _name2,\r\n        address _address1,\r\n        address _address2,\r\n        uint64 _loveID) public {\r\n            name1 = _name1;\r\n            name2 = _name2;\r\n            owner1 = _address1;\r\n            owner2 = _address2;\r\n            loveID = _loveID;\r\n            BANKACCOUNT = msg.sender;\r\n    }\r\n    /// @dev Modifier to allow actions only when the account is not Breakup\r\n    modifier notBreakup() {require(uint(status)!=0);_;}\r\n\r\n    /// @dev Modifier to allow actions only when the call was sent by one of owners\r\n    modifier oneOfOwners(address _address) {\r\n        require (_address==owner1 || _address==owner2);_;\r\n    }\r\n\r\n    /// @dev Modifier to allow actions only when message sender is Bank\r\n    modifier callByBank() {require(msg.sender == BANKACCOUNT);_;}\r\n    \r\n    /// @dev Rarely used! Only happen when extreme circumstances\r\n    function changeBankAccount(address newBank) external callByBank{\r\n        require(newBank!=address(0));\r\n        BANKACCOUNT = newBank;\r\n    }\r\n\r\n    /// @dev THINK TWICE! If you breakup with your lover, all your balance will transfer to your\r\n    ///  lover's account, AND you cannot re-activate this very account! Think about your sweet\r\n    ///  moments before you hurt someone's heart!!\r\n    function breakup(\r\n        address _breaker, uint256 _fee) external payable \r\n        notBreakup oneOfOwners(_breaker) callByBank{\r\n        if(_fee!=0){BankCore(BANKACCOUNT).receiveFee.value(_fee)();}\r\n        if(_breaker==owner1) {owner2.transfer(this.balance);}\r\n        if(_breaker==owner2) {owner1.transfer(this.balance);}\r\n        status=Status.BreakUp;\r\n    }\r\n    \r\n    /// @dev Log withdraw info when first receice request \r\n    function withdraw(uint256 amount, \r\n        address _to, uint256 _fee) external notBreakup oneOfOwners(_to) callByBank{\r\n        require(this.balance>=amount);\r\n        // change status to pending\r\n        status =Status.RequestPending;\r\n        request_amount = amount;\r\n        withdrawer = _to;\r\n        request_fee = _fee;\r\n    }\r\n\r\n    /// @dev Confirm request and send money; erase info logs\r\n    function withdrawConfirm(\r\n        uint256 _amount, \r\n        address _confirmer) external payable notBreakup oneOfOwners(_confirmer) callByBank{\r\n        // check for matching withdraw request\r\n        require(uint(status)==2);\r\n        require(_amount==request_amount);\r\n        require(_confirmer!=withdrawer);\r\n        require(this.balance>=request_amount);\r\n        \r\n        // send service fee to bank\r\n        if(request_fee!=0){BankCore(BANKACCOUNT).receiveFee.value(request_fee)();}\r\n        withdrawer.transfer(request_amount-request_fee);\r\n\r\n        // clean pending log informations\r\n        status=Status.Active;\r\n        withdrawer=address(0);\r\n        request_amount=0;\r\n        request_fee=0;\r\n    }\r\n    \r\n    /// @dev Log big events(pre-set-choice) in relationship, time stamp is required\r\n    function mileStone(address _sender, uint64 _time, uint8 _choice) external notBreakup oneOfOwners(_sender) callByBank {\r\n        milestone[next_stone_id]=StonePage({\r\n        \tlogtime: _time,\r\n        \tcontant: Status(_choice)\r\n        });\r\n        next_stone_id++;\r\n    }\r\n\r\n    /// @dev Log diary, time stamp is now\r\n    function Diary(address _sender, bytes _diary) external notBreakup oneOfOwners(_sender) callByBank {\r\n        diary[next_diary_id]=DiaryPage({\r\n        \tlogtime: uint64(now),\r\n        \tcontant: _diary\r\n        });\r\n        next_diary_id++;  \r\n    }\r\n    \r\n    // @dev Fallback function for deposit and blessing income\r\n    function() external payable notBreakup {\r\n        require(msg.value>0);\r\n        Deposit(msg.sender, msg.value);\r\n    }\r\n}\r\n\r\n\r\n/// @title Basic contract of LoveBank that defines the Creating, Saving, and Using of love \r\n/// accounts under the protect of one Bank contract.\r\n/// @author Diana Kudrow <https://github.com/lovebankcrypto>\r\ncontract Bank is LoveBankAccessControl{\r\n\r\n    /*** EVENTS ***/\r\n\r\n    /// @dev Create event is fired whenever a new love account is created, and a new contract\r\n    ///  address is created \r\n    event Create(bytes32 _name1, bytes32 _name2, address _conadd, \r\n                address _address1, address _address2, uint64 _loveID);\r\n    /// @dev Breakup event is fired when someone breakup with another\r\n    event Breakup(uint _time);\r\n    /// @dev StoneLog event returns when love account log a milestone\r\n    event StoneLog(uint _time, uint _choice);\r\n    /// @dev DiaryLog event returns when love account log a diary\r\n    event DiaryLog(uint _time, bytes _contant);\r\n    /// @dev Withdraw event returns when a user trigger a withdrow demand\r\n    event Withdraw(uint _amount, uint _endTime);\r\n    /// @dev WithdrawConfirm event returns when a withdraw demand is confirmed and accomplished\r\n    event WithdrawConfirm(uint _amount, uint _confirmTime);\r\n\r\n    /*** DATA TYPES ***/\r\n    \r\n    struct pending {\r\n        bool pending;\r\n        address withdrawer;\r\n        uint256 amount;\r\n        uint256 fee;\r\n        uint64 endTime;\r\n    }\r\n\r\n    /*** CONSTANTS ***/\r\n\r\n    /// @dev constant variables\r\n    uint256 STONE_FEE=4000000000000000;\r\n    uint256 OPEN_FEE=20000000000000000;\r\n    uint64 FREE_START=0;\r\n    uint64 FREE_END=0;\r\n    uint64 WD_FEE_VERSE=100;  // 1% service fee\r\n    uint64 BU_FEE_VERSE=50;   // 2% service fee\r\n    uint32 public CONFIRM_LIMIT = 900; //15mins\r\n\r\n    /*** STORAGE ***/\r\n\r\n    /// @dev The ID of the next signing couple, also the number of current signed accounts\r\n    uint64 public next_id=0; \r\n    /// @dev A mapping from owers addresses' sha256 to love account address\r\n    mapping (bytes16 => address)  public sig_to_add;\r\n    /// @dev A mapping from love account address to withdraw demand detail\r\n    mapping (address => pending) public pendingList;\r\n    \r\n    /// @dev Create a new love account and log in Bank\r\n    /// @param name1 is nicename of the FOUNDER of this love account\r\n    /// @param name2 is nicename of the FOUNDER's lover\r\n    /// @param address1 is address of the FOUNDER of this love account, need to be msg.sender\r\n    /// @param address2 is address of the FOUNDER's lover\r\n    function createAccount(\r\n        bytes32 name1,\r\n        bytes32 name2,\r\n        address address1,\r\n        address address2) external payable whenNotPaused {\r\n        uint fee;\r\n        // calculate open account service fee\r\n        if (_ifFree()){fee=0;} else{fee=OPEN_FEE;}\r\n        require(msg.sender==address1   &&\r\n                address1!=address2     && \r\n                address1!=address(0)   &&\r\n                address2!=address(0)   &&\r\n                msg.value>=fee);\r\n        require(_ifFree() || msg.value >= OPEN_FEE);\r\n        // Same couple can only created love account once. Addresses' keccak256 is logged\r\n        bytes16 sig = bytes16(keccak256(address1))^bytes16(keccak256(address2));\r\n        require(sig_to_add[sig]==0);\r\n        // New contract created\r\n        address newContract = (new LoveAccountBase)(name1, name2, address1, address2, next_id);\r\n        sig_to_add[sig]=newContract;\r\n        Create(name1, name2, newContract, address1, address2, next_id);\r\n        // First deposit\r\n        if(msg.value>fee){\r\n            newContract.transfer(msg.value-fee);\r\n        }\r\n        next_id++;\r\n    }\r\n    \r\n    /// @dev Calculate service fee; to avoid ufixed data type, dev=(1/charge rate)\r\n    /// @param _dev is inverse of charging rate. If service fee is 1%, _dev=100\r\n    function _calculate(uint256 _amount, uint _dev) internal pure returns(uint256 _int){\r\n        _int = _amount/uint256(_dev);\r\n    }\r\n\r\n    /// @dev If now is during service-free promotion, return true; else return false\r\n    function _ifFree() view internal returns(bool) {\r\n        if(uint64(now)<FREE_START || uint64(now)>FREE_END\r\n            ) {return false;\r\n        } else {return true;}\r\n    }\r\n\r\n    /// @dev THINK TWICE! If you breakup with your lover, all your balance will transfer \r\n    ///  to your lover's account, AND you cannot re-activate this very account! Think about \r\n    ///  your sweet moments before you hurt someone's heart!!\r\n    /// @param _conadd is contract address of love account\r\n    function sendBreakup(address _conadd) external whenNotPaused {\r\n        if (_ifFree()){\r\n            // Call function in love account contract\r\n            LoveAccountBase(_conadd).breakup(msg.sender,0);}\r\n        else{\r\n            uint _balance = _conadd.balance;\r\n            uint _fee = _calculate(_balance, BU_FEE_VERSE);\r\n            // Call function in love account contract\r\n            LoveAccountBase(_conadd).breakup(msg.sender,_fee);}\r\n        Breakup(now);\r\n     }\r\n\r\n    /// @dev Log big events(pre-set-choice) in relationship, time stamp is required\r\n    /// @param _conadd is contract address of love account\r\n    /// @param _time is time stamp of the time of event\r\n    /// @param _choice is uint of enum. See Love Account Base to understand how milestone work\r\n    function sendMileStone(\r\n        address _conadd, uint _time, \r\n        uint _choice) external payable whenNotPaused {\r\n        require(msg.value >= STONE_FEE);\r\n        uint8 _choice8 = uint8(_choice);\r\n        require(_choice8>2 && _choice8<=18);\r\n        // Call function in love account contract\r\n        LoveAccountBase(_conadd).mileStone(msg.sender, uint64(_time), _choice8);\r\n        StoneLog(_time, _choice8);\r\n    }\r\n    \r\n    /// @dev Log diary, time stamp is now\r\n    /// @param _conadd is contract address of love account\r\n    function sendDiary(address _conadd, bytes _diary) external whenNotPaused{\r\n        LoveAccountBase(_conadd).Diary(msg.sender, _diary);\r\n        DiaryLog(now, _diary);\r\n    }\r\n    \r\n    /// @dev Log withdraw info when first receice request\r\n    /// @param _conadd is contract address of love account\r\n    /// @param _amount is the amount of money to withdraw in unit wei\r\n    function bankWithdraw(address _conadd, uint _amount) external whenNotPaused{\r\n        // Make sure no valid withdraw is pending\r\n        require(!pendingList[_conadd].pending || now>pendingList[_conadd].endTime);\r\n        uint256 _fee;\r\n        uint256 _amount256 = uint256(_amount); \r\n        require(_amount256==_amount);\r\n\r\n        // Fee calculation\r\n        if (_ifFree()){_fee=0;}else{_fee=_calculate(_amount, WD_FEE_VERSE);}\r\n\r\n        // Call function in love account contract\r\n        LoveAccountBase _conA = LoveAccountBase(_conadd);\r\n        _conA.withdraw(_amount, msg.sender, _fee);\r\n\r\n        // Log detail info for latter check\r\n        uint64 _end = uint64(now)+CONFIRM_LIMIT;\r\n        pendingList[_conadd] = pending({\r\n                    pending:true,\r\n                    withdrawer:msg.sender,\r\n                    amount: _amount256,\r\n                    fee:_fee,\r\n                    endTime: _end});\r\n        Withdraw(_amount256, _end);\r\n    }\r\n\r\n    /// @dev Confirm request and send money; erase info logs\r\n    /// @param _conadd is contract address of love account \r\n    /// @param _amount is the amount of money to withdraw in unit wei\r\n    function bankConfirm(address _conadd, uint _amount) external whenNotPaused{\r\n        // Confirm matching request\r\n        uint256 _amount256 = uint256(_amount); \r\n        require(_amount256==_amount);\r\n        require(pendingList[_conadd].pending && now<pendingList[_conadd].endTime);\r\n        require(pendingList[_conadd].withdrawer != msg.sender);\r\n        require(pendingList[_conadd].amount == _amount);\r\n\r\n        // Call function in love account contract\r\n        LoveAccountBase(_conadd).withdrawConfirm(_amount, msg.sender);\r\n\r\n        // Clean pending information\r\n        delete pendingList[_conadd];\r\n        WithdrawConfirm(_amount, now);\r\n    }\r\n}\r\n\r\n/// @title Promotion contract of LoveBank. \r\n/// @author Diana Kudrow <https://github.com/lovebankcrypto>\r\n/// @dev All CLevel OPs, for promotion. CFO can define free-of-charge time, and CEO can lower the \r\n///  service fee. (Yeah, we won't raise charge for sure, it's in the contrat!) \r\ncontract LovePromo is Bank{\r\n\r\n    /// @dev Withdraw your money for FREEEEEE! Or too if you wanna break up\r\n    /// @param _start is time stamp of free start time\r\n    /// @param _end is time stamp of free end time\r\n    function setFreeTime(uint _start, uint _end) external onlyCOO {\r\n        require(_end>=_start && _start>uint64(now));\r\n        FREE_START = uint64(_start);\r\n        FREE_END = uint64(_end);\r\n    }\r\n\r\n\r\n    /// @dev Set new charging rate\r\n    /// @param _withdrawFee is inverse of charging rate to avoid ufixed data type. \r\n    ///  _withdrawFee=(1/x). If withdraw fee is 1%, _withdrawFee=100\r\n    /// @param _breakupFee is inverse of charging rate to avoid ufixed data type. \r\n    ///  _breakupFee=(1/x). If breakup fee is 2%, _breakupFee=50\r\n    /// @param _stone is Milestone logging fee, wei (diary is free of charge, cost only gas)\r\n    /// @param _open is Open account fee, wei\r\n\r\n    function setFee(\r\n        uint _withdrawFee, \r\n        uint _breakupFee, \r\n        uint _stone, \r\n        uint _open) external onlyCEO {\r\n\r\n        /// Service fee of withdraw NO HIGHER THAN 1%\r\n        require(_withdrawFee>=100);\r\n        /// Service fee of breakup NO HIGHER THAN 2%\r\n        require(_breakupFee>=50);\r\n\r\n        WD_FEE_VERSE = uint64(_withdrawFee);\r\n        BU_FEE_VERSE = uint64(_breakupFee);\r\n        STONE_FEE = _stone;\r\n        OPEN_FEE = _open;\r\n    }\r\n\r\n    /// @dev CEO might extend the confirm time limit when Etherum Network is blocked\r\n    /// @param _newlimit uses second as a unit\r\n    function setConfirm(uint _newlimit) external onlyCEO {\r\n        CONFIRM_LIMIT = uint32(_newlimit);\r\n    }\r\n\r\n    /// @dev Just for checking\r\n    function getFreeTime() external view onlyCLevel returns(uint64 _start, uint64 _end){\r\n        _start = uint64(FREE_START);\r\n        _end = uint64(FREE_END);\r\n    }\r\n    \r\n    /// @dev Just for checking\r\n    function getFee() external view onlyCLevel returns(\r\n        uint64 _withdrawFee, \r\n        uint64 _breakupFee, \r\n        uint _stone, \r\n        uint _open){\r\n\r\n        _withdrawFee = WD_FEE_VERSE;\r\n        _breakupFee = BU_FEE_VERSE;\r\n        _stone = STONE_FEE;\r\n        _open = OPEN_FEE;\r\n    }\r\n}\r\n\r\n/// @title Love Bank, a safe place for lovers to save money money for future and get bless from\r\n///  strangers and keep eternally on Etherum blockchain\r\n/// @author Diana Kudrow <https://github.com/lovebankcrypto>\r\n/// @dev The main LoveBank contract, keep track of all love accounts and their contracts, double\r\n///  security check before any operations\r\ncontract BankCore is LovePromo {\r\n\r\n    // This is the main LoveBank contract. The function of our DApp is quite straight forward:\r\n    //  to create a account for couple, which is displayed on our website. Owers can put money in \r\n    //  as well as strangers. Withdraw request can only be done with both owners permission.\r\n    //  In honor of eternal love, the party who puts forward a breakup will transfer all the remain\r\n    //  balance to the other party by default.\r\n    // \r\n    //  To make the contract more logical, we simple seperate our contract in following parts:\r\n    //\r\n    //      - LoveBankAccessControl: This contract manages the various addresses and constraints for \r\n    //             operations that can be executed only by specific roles. Namely CEO, CFO and COO.\r\n    //\r\n    //      - Bank is LoveBankAccessControl: In this contract we define the main stucture of our \r\n    //              Love Bank and the methord to create accounts. Also, all the operations of users are\r\n    //              defined here, like money withdraw, breakup, diary, milestones. Lots of modifiers\r\n    //              are used to protect user's safety.\r\n    //\r\n    //      - LovePromo is Bank: Here are some simple operations for COO to set free-charge time and for CEO\r\n    //              to lower the charge rate.\r\n    //\r\n    //      - BankCore is LovePromo: inherit all previous contract. Contains all the big moves, like: \r\n    //              creating a bank, set defult C-Level users, unpause, update (only when hugh bug happens),\r\n    //              withdraw money, etc.\r\n    //\r\n    //      - LoveAccountBase: This contract is the contract of a love account. Holds all common structs,\r\n    //              events and base variables for love accounts.\r\n\r\n\r\n    // Set in case the core contract is broken and an upgrade is required\r\n    address public newContractAddress;\r\n\r\n    /// @dev DepositBank is fired when ether is received from CLevel to BankCore Contract\r\n    event DepositBank(address _sender, uint _value);\r\n\r\n    function BankCore() public {\r\n        // Starts paused.\r\n        paused = true;\r\n        // the creator of the contract is the initial CEO\r\n        ceoAddress = msg.sender;\r\n        // the creator of the contract is also the initial COO\r\n        cooAddress = msg.sender;\r\n        // the creator of the contract is also the initial COO\r\n        cfoAddress = msg.sender;\r\n    }\r\n\r\n    /// @dev Used to mark the smart contract as upgraded, in case there is a serious\r\n    ///  breaking bug. This method does nothing but keep track of the new contract and\r\n    ///  emit a message indicating that the new address is set. It's up to clients of this\r\n    ///  contract to update to the new contract address in that case. (This contract will\r\n    ///  be paused indefinitely if such an upgrade takes place.)\r\n    /// @param _v2Address new address\r\n    /*** setNewAddress adapted from CryptoKitty ***/\r\n    function setNewAddress(address _v2Address) external onlyCEO whenPaused {\r\n        newContractAddress = _v2Address;\r\n        ContractUpgrade(_v2Address);\r\n    }\r\n\r\n    /// @dev Override unpause so it requires all external contract addresses\r\n    ///  to be set before contract can be unpaused. Also, we can't have\r\n    ///  newContractAddress set either, because then the contract was upgraded.\r\n    function unpause() public onlyCEO whenPaused {\r\n        require(newContractAddress == address(0));\r\n        // Actually unpause the contract.\r\n        super.unpause();\r\n    }\r\n    \r\n    /// @dev Rarely used! Only happen when extreme circumstances\r\n    /// @param _conadd is contract address of love account\r\n    /// @param newBank is newBank contract addess if updated\r\n    function changeBank(address _conadd, address newBank) external whenPaused onlyCEO{\r\n        require(newBank != address(0));\r\n        LoveAccountBase(_conadd).changeBankAccount(newBank);\r\n    }\r\n\r\n    /// @dev Allows the CFO to capture the balance of Bank contract\r\n    function withdrawBalance() external onlyCFO {\r\n        // Subtract all the currently pregnant kittens we have, plus 1 of margin.\r\n        if (this.balance > 0) {\r\n            cfoAddress.transfer(this.balance);\r\n        }\r\n    }\r\n    \r\n    /// @dev Get Love account contrat address through Bank contract index\r\n    function getContract(address _add1, address _add2) external view returns(address){\r\n        bytes16 _sig = bytes16(keccak256(_add1))^bytes16(keccak256(_add2));\r\n        return sig_to_add[_sig];\r\n    }\r\n    \r\n    /// @dev Receive service fee from sub contracts\r\n    function receiveFee() external payable{}\r\n    \r\n    /// @dev Reject all deposit from outside CLevel accounts\r\n    function() external payable onlyCLevel {\r\n        require(msg.value>0);\r\n        DepositBank(msg.sender, msg.value);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_conadd\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"bankConfirm\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cfoAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ceoAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getFreeTime\",\"outputs\":[{\"name\":\"_start\",\"type\":\"uint64\"},{\"name\":\"_end\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_conadd\",\"type\":\"address\"},{\"name\":\"_diary\",\"type\":\"bytes\"}],\"name\":\"sendDiary\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCEO\",\"type\":\"address\"}],\"name\":\"setCEO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCOO\",\"type\":\"address\"}],\"name\":\"setCOO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCFO\",\"type\":\"address\"}],\"name\":\"setCFO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_conadd\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"bankWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_add1\",\"type\":\"address\"},{\"name\":\"_add2\",\"type\":\"address\"}],\"name\":\"getContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"name1\",\"type\":\"bytes32\"},{\"name\":\"name2\",\"type\":\"bytes32\"},{\"name\":\"address1\",\"type\":\"address\"},{\"name\":\"address2\",\"type\":\"address\"}],\"name\":\"createAccount\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newContractAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_conadd\",\"type\":\"address\"}],\"name\":\"sendBreakup\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_v2Address\",\"type\":\"address\"}],\"name\":\"setNewAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newlimit\",\"type\":\"uint256\"}],\"name\":\"setConfirm\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes16\"}],\"name\":\"sig_to_add\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_conadd\",\"type\":\"address\"},{\"name\":\"_time\",\"type\":\"uint256\"},{\"name\":\"_choice\",\"type\":\"uint256\"}],\"name\":\"sendMileStone\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CONFIRM_LIMIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_withdrawFee\",\"type\":\"uint256\"},{\"name\":\"_breakupFee\",\"type\":\"uint256\"},{\"name\":\"_stone\",\"type\":\"uint256\"},{\"name\":\"_open\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cooAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getFee\",\"outputs\":[{\"name\":\"_withdrawFee\",\"type\":\"uint64\"},{\"name\":\"_breakupFee\",\"type\":\"uint64\"},{\"name\":\"_stone\",\"type\":\"uint256\"},{\"name\":\"_open\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"receiveFee\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"next_id\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_start\",\"type\":\"uint256\"},{\"name\":\"_end\",\"type\":\"uint256\"}],\"name\":\"setFreeTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"pendingList\",\"outputs\":[{\"name\":\"pending\",\"type\":\"bool\"},{\"name\":\"withdrawer\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"fee\",\"type\":\"uint256\"},{\"name\":\"endTime\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_conadd\",\"type\":\"address\"},{\"name\":\"newBank\",\"type\":\"address\"}],\"name\":\"changeBank\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"DepositBank\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_name1\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_name2\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_conadd\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_address1\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_address2\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_loveID\",\"type\":\"uint64\"}],\"name\":\"Create\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"Breakup\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_time\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_choice\",\"type\":\"uint256\"}],\"name\":\"StoneLog\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_time\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_contant\",\"type\":\"bytes\"}],\"name\":\"DiaryLog\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_endTime\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_confirmTime\",\"type\":\"uint256\"}],\"name\":\"WithdrawConfirm\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newVerseContract\",\"type\":\"address\"}],\"name\":\"ContractUpgrade\",\"type\":\"event\"}]","ContractName":"BankCore","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://6ca15316b7eebf0bb96dd99cc03f4a247c0d81ffcebad7688b5b92dccd7786ed"}]}