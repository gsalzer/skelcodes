{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.15;\r\n\r\ncontract Fibonzi{\r\n\r\n    address owner;\r\n    \r\n    uint8 public poolCount = 0;\r\n    uint8 public playersCount = 0;\r\n    uint8 public transactionsCount = 0;\r\n    uint8 public fibonacciIndex = 0;\r\n    uint8 public fibokenCreatedCount = 0;\r\n    uint8 public fibokenUsedCount = 0;\r\n    uint fibonacciMax = 18;\r\n    uint public poolsToCreate = 0;\r\n    address[] public playersList;\r\n    \r\n    struct Player{\r\n        address wallet;\r\n        uint balance;\r\n    }\r\n    \r\n    struct Pool{\r\n        uint8 poolId;\r\n        uint price;\r\n        address owner;\r\n    }\r\n    \r\n    struct Fiboken{\r\n        uint8 fibokenId;\r\n        address owner;\r\n        bool isUsed;\r\n    }\r\n    \r\n    mapping(address => Player) players;\r\n    mapping(address => Fiboken[]) playersFibokens;\r\n    mapping(address => uint) playersBalance;\r\n    mapping(uint8 => Pool) pools;\r\n    \r\n    event PlayerCreated(address indexed wallet, uint timestamp);\r\n    event PlayerBalance(address playerWallet, uint playerBalance, uint timestamp);\r\n    event FibokenCreated(uint8 tokenId, address wallet, uint timestamp);\r\n    event FibokenUsed(uint8 tokenId,address wallet, uint timestamp);\r\n    event PoolCreated(uint8 indexed poolId,uint price,uint timestamp);\r\n    event PoolJoined(uint8 indexed poolId, address indexed wallet,uint price,uint timestamp);\r\n    \r\n    \r\n    function Fibonzi(){\r\n        owner = msg.sender;\r\n        createPlayer();\r\n        createPool();\r\n        fibonacciIndex++;\r\n    }\r\n    \r\n    function openPool(uint8 poolId) payable{\r\n        assert(poolCount >= poolId);\r\n        assert(isPlayer());\r\n        assert(msg.value >= pools[poolId].price);\r\n        assert(getUsablePlayerFibokens(msg.sender) > 0);\r\n        assert(usePlayerFiboken());\r\n        \r\n        uint price = pools[poolId].price;\r\n        owner.transfer(price);\r\n        pools[poolId].owner = msg.sender;\r\n        \r\n        if(msg.value > pools[poolId].price){\r\n            msg.sender.transfer(msg.value - pools[poolId].price);\r\n        }\r\n        \r\n        pools[poolId].price = 4*price;\r\n        PoolJoined(poolId,msg.sender,pools[poolId].price,now);\r\n        ++transactionsCount;\r\n        \r\n        if(fibonacciIndex <= fibonacciMax){\r\n            createPoolsIfNeeded();\r\n        }\r\n        getPoolPrices();\r\n    }\r\n    \r\n    function joinPool(uint8 poolId) payable{\r\n        assert(poolCount >= poolId);\r\n        assert(msg.sender != pools[poolId].owner);\r\n        assert(msg.value >= pools[poolId].price);\r\n        assert( ( pools[poolId].owner == owner && poolCount == 1) || (pools[poolId].owner != owner) );\r\n        \r\n        //Register the player if not registered\r\n        if(!isPlayer()){\r\n            createPlayer();   \r\n        }\r\n        \r\n        if(msg.value > pools[poolId].price){\r\n            msg.sender.transfer(msg.value - pools[poolId].price);\r\n        }\r\n        \r\n        uint price = pools[poolId].price;\r\n        pools[poolId].owner.transfer((price * 80)/100);\r\n        \r\n        splitComissions((price *20)/100);\r\n        pools[poolId].owner = msg.sender;\r\n        pools[poolId].price = 2*price;\r\n        \r\n        PoolJoined(poolId,msg.sender,pools[poolId].price,now);\r\n        ++transactionsCount;\r\n        \r\n        if(fibonacciIndex <= fibonacciMax){\r\n            createPoolsIfNeeded();\r\n        }\r\n        \r\n        rewardFiboken();\r\n        getPoolPrices();\r\n    }\r\n    \r\n    function withdrawComission(){\r\n        assert(isPlayer());\r\n        assert(players[msg.sender].balance > 0);\r\n        assert(getUsablePlayerFibokens(msg.sender) >= 10);\r\n        \r\n        for(uint i=0;i<10;i++){\r\n            usePlayerFiboken();\r\n        }\r\n        \r\n        msg.sender.transfer(players[msg.sender].balance);\r\n        players[msg.sender].balance = 0;\r\n        PlayerBalance(msg.sender,players[msg.sender].balance,now);\r\n    }\r\n    \r\n    function isPlayer() internal returns (bool){\r\n        bool isPlayerFlag = false;\r\n        for(uint8 i=0; i< playersCount;i++){\r\n            if(playersList[i] == msg.sender){\r\n                isPlayerFlag = true;\r\n            }\r\n        }\r\n        return isPlayerFlag;\r\n    }\r\n    \r\n    function createPlayer() internal{\r\n        if(!isPlayer()){\r\n            playersCount++;\r\n            players[msg.sender] = Player(msg.sender,0);\r\n            PlayerCreated(msg.sender,now);\r\n            playersList.push(msg.sender);\r\n        }\r\n        getFibonziPlayers();   \r\n    }\r\n    \r\n    function createPool() internal{\r\n        poolCount++;\r\n        pools[poolCount] = Pool(poolCount, 1e15,owner);\r\n        PoolCreated(poolCount,1e15,now);\r\n    }\r\n    \r\n    function createPoolsIfNeeded() internal{\r\n        uint currentFibonacci = getFibonacci(fibonacciIndex);\r\n        if(transactionsCount == currentFibonacci){\r\n            if(currentFibonacci > poolCount){\r\n                poolsToCreate = currentFibonacci - poolCount;\r\n                for(uint8 i =0; i < poolsToCreate; i++ ){\r\n                    createPool();\r\n                    rewardFiboken();\r\n                }\r\n            }\r\n        }\r\n        else if(transactionsCount > currentFibonacci){\r\n            fibonacciIndex++;\r\n            createPoolsIfNeeded();\r\n        }\r\n    }\r\n    \r\n    function splitComissions(uint price) internal{\r\n        if(fibokenCreatedCount > fibokenUsedCount){\r\n            uint share = price/(fibokenCreatedCount - fibokenUsedCount);\r\n            for(uint8 i=0; i< playersCount;i++){\r\n                uint8 usableTokens = getUsablePlayerFibokens(playersList[i]);\r\n                if(usableTokens > 0){\r\n                    players[playersList[i]].balance += share*usableTokens;\r\n                    PlayerBalance(playersList[i],players[playersList[i]].balance,now);\r\n                }\r\n            }\r\n        }\r\n        else{\r\n            players[owner].balance += price;\r\n            PlayerBalance(owner,players[owner].balance,now);\r\n        }\r\n    }\r\n    \r\n    function rewardFiboken() internal{\r\n        fibokenCreatedCount++;\r\n        playersFibokens[msg.sender].push(Fiboken(fibokenCreatedCount,msg.sender,false));\r\n        FibokenCreated(fibokenCreatedCount,msg.sender,now);\r\n        if(fibokenCreatedCount % 9 == 0){\r\n            ++fibokenCreatedCount;\r\n            playersFibokens[owner].push(Fiboken(fibokenCreatedCount,owner,false));\r\n            FibokenCreated(fibokenCreatedCount,owner,now);\r\n        }\r\n    }\r\n    \r\n    function usePlayerFiboken() internal returns (bool){\r\n        var used = false;\r\n        for(uint8 i=0; i<playersFibokens[msg.sender].length;i++){\r\n            if(!playersFibokens[msg.sender][i].isUsed && !used){\r\n                playersFibokens[msg.sender][i].isUsed = true;\r\n                used = true;\r\n                ++fibokenUsedCount;\r\n                FibokenUsed(playersFibokens[msg.sender][i].fibokenId,msg.sender,now);\r\n            }\r\n        }\r\n        \r\n        return used;\r\n    }\r\n    \r\n    function getUsablePlayerFibokens(address someAddress) internal returns (uint8){\r\n        uint8 playerFibokens = 0;\r\n        for(uint8 i=0; i< playersFibokens[someAddress].length;i++){\r\n            if(!playersFibokens[someAddress][i].isUsed){\r\n                ++playerFibokens;       \r\n            }\r\n        }\r\n        return playerFibokens;\r\n    }\r\n    \r\n    function getFibonacci(uint n) internal returns (uint){\r\n        if(n<=1){\r\n            return n;\r\n        }\r\n        else{\r\n            return getFibonacci(n-1) + getFibonacci(n-2);\r\n        }\r\n    }\r\n    \r\n    function getPoolIds() constant returns(uint8[]){\r\n        uint8[] memory poolIds = new uint8[](poolCount);\r\n        for(uint8 i = 1; i< poolCount+1; i++){\r\n            poolIds[i-1] = pools[i].poolId;\r\n        }\r\n        return poolIds;\r\n    }\r\n    \r\n    function getPoolPrices() constant returns(uint[]){\r\n        uint[] memory poolPrices = new uint[](poolCount);\r\n        for(uint8 i = 1; i< poolCount+1; i++){\r\n            poolPrices[i-1] = pools[i].price;\r\n        }\r\n        return poolPrices;\r\n    }\r\n    \r\n    function getPoolOwners() constant returns(address[]){\r\n        address[] memory poolOwners = new address[](poolCount);\r\n        for(uint8 i = 1; i< poolCount+1; i++){\r\n            poolOwners[i-1] = pools[i].owner;\r\n        }\r\n        return poolOwners;\r\n    }\r\n    \r\n    function getFibonziPlayers() constant returns(address[]){\r\n        address[] memory fibonziPlayers = new address[](playersCount);\r\n        for(uint8 i = 0; i< playersCount ; i++){\r\n            fibonziPlayers[i] = playersList[i];\r\n        }\r\n        return fibonziPlayers;\r\n    }\r\n    \r\n    function getPlayersBalances() constant returns(uint[]){\r\n        uint[] memory playersBalances = new uint[](playersCount);\r\n        for(uint8 i = 0; i< playersCount ; i++){\r\n            playersBalances[i] = players[playersList[i]].balance;\r\n        }\r\n        return playersBalances;\r\n    }\r\n    \r\n    function getPlayersFibokens() constant returns(uint[]){\r\n        uint[] memory playersTokens = new uint[](playersCount);\r\n        for(uint8 i = 0; i< playersCount ; i++){\r\n            uint sum = 0;\r\n            for(uint j = 0; j <playersFibokens[playersList[i]].length;j++){\r\n                if(!playersFibokens[playersList[i]][j].isUsed){\r\n                    sum++;\r\n                }\r\n            }\r\n            playersTokens[i] = sum;\r\n        }\r\n        return playersTokens;\r\n    }\r\n    \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"fibonacciIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPlayersFibokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPoolPrices\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawComission\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"playersList\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fibokenCreatedCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getFibonziPlayers\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fibokenUsedCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"playersCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"poolId\",\"type\":\"uint8\"}],\"name\":\"joinPool\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPoolIds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8[]\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"poolsToCreate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"poolId\",\"type\":\"uint8\"}],\"name\":\"openPool\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPlayersBalances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"poolCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPoolOwners\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transactionsCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"PlayerCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"playerWallet\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"playerBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"PlayerBalance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"FibokenCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"FibokenUsed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"poolId\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"PoolCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"poolId\",\"type\":\"uint8\"},{\"indexed\":true,\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"PoolJoined\",\"type\":\"event\"}]","ContractName":"Fibonzi","CompilerVersion":"v0.4.15+commit.bbb8e64f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://523afcf86c2b0f878ce79a0cc65651888d886e92502e2f91b2a4f713923fffc1"}]}