{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.4;\r\ncontract XG4KCrowdFunding {\r\n    // data structure to hold information about campaign contributors\r\n    struct Funder {\r\n        address addr;\r\n        uint amount;\r\n    }\r\n    // Campaign data structure\r\n    struct Campaign {\r\n        address beneficiary;\r\n        uint fundingGoal;\r\n        uint numFunders;\r\n        uint amount;\r\n        uint deadline;\r\n        mapping (uint => Funder) funders;\r\n    }\r\n    //Declares a state variable 'numCampaigns'\r\n    uint numCampaigns;\r\n    //Creates a mapping of Campaign datatypes\r\n    mapping (uint => Campaign) campaigns;\r\n    //first function sets up a new campaign\r\n    function newCampaign(address beneficiary, uint goal, uint deadline) returns (uint campaignID) {\r\n        campaignID = numCampaigns++; // campaignID is return variable\r\n        Campaign c = campaigns[campaignID]; // assigns reference\r\n        c.beneficiary = beneficiary;\r\n        c.fundingGoal = goal;\r\n        c.deadline = block.number + deadline;\r\n    }\r\n    //function to contributes to the campaign\r\n    function contribute(uint campaignID) {\r\n        Campaign c = campaigns[campaignID];\r\n        Funder f = c.funders[c.numFunders++];\r\n        f.addr = msg.sender;\r\n        f.amount = msg.value;\r\n        c.amount += f.amount;\r\n    }\r\n    // checks if the goal or time limit has been reached and ends the campaign\r\n    function checkGoalReached(uint campaignID) returns (bool reached) {\r\n        Campaign c = campaigns[campaignID];\r\n        if (c.amount >= c.fundingGoal){\r\n            c.beneficiary.send(c.amount);\r\n            clean(campaignID);\r\n        \treturn true;\r\n        }\r\n        if (c.deadline <= block.number){\r\n            uint j = 0;\r\n            uint n = c.numFunders;\r\n            while (j <= n){\r\n                c.funders[j].addr.send(c.funders[j].amount);\r\n                j++;\r\n            }\r\n            clean(campaignID);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    function clean(uint id) private{\r\n    \tCampaign c = campaigns[id];\r\n    \tuint i = 0;\r\n    \tuint n = c.numFunders;\r\n    \tc.amount = 0;\r\n        c.beneficiary = 0;\r\n        c.fundingGoal = 0;\r\n        c.deadline = 0;\r\n        c.numFunders = 0;\r\n        while (i <= n){\r\n            c.funders[i].addr = 0;\r\n            c.funders[i].amount = 0;\r\n            i++;\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"campaignID\",\"type\":\"uint256\"}],\"name\":\"checkGoalReached\",\"outputs\":[{\"name\":\"reached\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"campaignID\",\"type\":\"uint256\"}],\"name\":\"contribute\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"},{\"name\":\"goal\",\"type\":\"uint256\"},{\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"newCampaign\",\"outputs\":[{\"name\":\"campaignID\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"XG4KCrowdFunding","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://950cf94f46e6c688a77ac798163b11d2b477adf67af1061185ca8fd50929fcb6"}]}