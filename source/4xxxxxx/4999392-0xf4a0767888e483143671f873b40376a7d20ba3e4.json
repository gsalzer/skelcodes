{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.15;\r\n\r\n// File: zeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/ERC20Basic.sol\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public constant returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/BasicToken.sol\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/ERC20.sol\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/StandardToken.sol\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n\r\n    uint256 _allowance = allowed[_from][msg.sender];\r\n\r\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n    // require (_value <= _allowance);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   */\r\n  function increaseApproval (address _spender, uint _addedValue)\r\n    returns (bool success) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  function decreaseApproval (address _spender, uint _subtractedValue)\r\n    returns (bool success) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/BurnableToken.sol\r\n\r\n/**\r\n* @title Customized Burnable Token\r\n* @dev Token that can be irreversibly burned (destroyed).\r\n*/\r\ncontract BurnableToken is StandardToken, Ownable {\r\n\r\n    event Burn(address indexed burner, uint256 amount);\r\n\r\n    /**\r\n    * @dev Anybody can burn a specific amount of their tokens.\r\n    * @param _amount The amount of token to be burned.\r\n    */\r\n    function burn(uint256 _amount) public {\r\n        require(_amount > 0);\r\n        require(_amount <= balances[msg.sender]);\r\n        // no need to require _amount <= totalSupply, since that would imply the\r\n        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\r\n\r\n        address burner = msg.sender;\r\n        balances[burner] = balances[burner].sub(_amount);\r\n        totalSupply = totalSupply.sub(_amount);\r\n        Transfer(burner, address(0), _amount);\r\n        Burn(burner, _amount);\r\n    }\r\n\r\n    /**\r\n    * @dev Owner can burn a specific amount of tokens of other token holders.\r\n    * @param _from The address of token holder whose tokens to be burned.\r\n    * @param _amount The amount of token to be burned.\r\n    */\r\n    function burnFrom(address _from, uint256 _amount) onlyOwner public {\r\n        require(_from != address(0));\r\n        require(_amount > 0);\r\n        require(_amount <= balances[_from]);\r\n        // no need to require _amount <= totalSupply, since that would imply the\r\n        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\r\n\r\n        balances[_from] = balances[_from].sub(_amount);\r\n        totalSupply = totalSupply.sub(_amount);\r\n        Transfer(_from, address(0), _amount);\r\n        Burn(_from, _amount);\r\n    }\r\n\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/lifecycle/Pausable.sol\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    Unpause();\r\n  }\r\n}\r\n\r\n// File: contracts/GiftToken.sol\r\n\r\ncontract GiftToken is BurnableToken, Pausable {\r\n    string constant public name = \"Giftcoin\";\r\n    string constant public symbol = \"GIFT\";\r\n    uint8 constant public decimals = 18;\r\n\r\n    uint256 constant public INITIAL_TOTAL_SUPPLY = 1e8 * (uint256(10) ** decimals);\r\n\r\n    address private addressIco;\r\n\r\n    modifier onlyIco() {\r\n        require(msg.sender == addressIco);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Create GiftToken contract and set pause\r\n    * @param _ico The address of ICO contract.\r\n    */\r\n    function GiftToken (address _ico) {\r\n        require(_ico != address(0));\r\n\r\n        addressIco = _ico;\r\n\r\n        totalSupply = totalSupply.add(INITIAL_TOTAL_SUPPLY);\r\n        balances[_ico] = balances[_ico].add(INITIAL_TOTAL_SUPPLY);\r\n        Transfer(address(0), _ico, INITIAL_TOTAL_SUPPLY);\r\n\r\n        pause();\r\n    }\r\n\r\n    /**\r\n    * @dev Transfer token for a specified address with pause feature for owner.\r\n    * @dev Only applies when the transfer is allowed by the owner.\r\n    * @param _to The address to transfer to.\r\n    * @param _value The amount to be transferred.\r\n    */\r\n    function transfer(address _to, uint256 _value) whenNotPaused public returns (bool) {\r\n        super.transfer(_to, _value);\r\n    }\r\n\r\n    /**\r\n    * @dev Transfer tokens from one address to another with pause feature for owner.\r\n    * @dev Only applies when the transfer is allowed by the owner.\r\n    * @param _from address The address which you want to send tokens from\r\n    * @param _to address The address which you want to transfer to\r\n    * @param _value uint256 the amount of tokens to be transferred\r\n    */\r\n    function transferFrom(address _from, address _to, uint256 _value) whenNotPaused public returns (bool) {\r\n        super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n    /**\r\n    * @dev Transfer tokens from ICO address to another address.\r\n    * @param _to The address to transfer to.\r\n    * @param _value The amount to be transferred.\r\n    */\r\n    function transferFromIco(address _to, uint256 _value) onlyIco public returns (bool) {\r\n        super.transfer(_to, _value);\r\n    }\r\n}\r\n\r\n// File: contracts/Whitelist.sol\r\n\r\n/**\r\n * @title Whitelist contract\r\n * @dev Whitelist for wallets, with additional data for every wallet.\r\n*/\r\ncontract Whitelist is Ownable {\r\n    struct WalletInfo {\r\n        string data;\r\n        bool whitelisted;\r\n        uint256 createdTimestamp;\r\n    }\r\n\r\n    address private addressApi;\r\n\r\n    mapping(address => WalletInfo) public whitelist;\r\n\r\n    uint256 public whitelistLength = 0;\r\n\r\n    modifier onlyPrivilegeAddresses {\r\n        require(msg.sender == addressApi || msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Set backend Api address.\r\n    * @dev Accept request from owner only.\r\n    * @param _api The address of backend API.\r\n    */\r\n    function setApiAddress(address _api) onlyOwner public {\r\n        require(_api != address(0));\r\n\r\n        addressApi = _api;\r\n    }\r\n\r\n    /**\r\n    * @dev Add wallet to whitelist.\r\n    * @dev Accept request from privilege adresses only.\r\n    * @param _wallet The address of wallet to add.\r\n    * @param _data The checksum of additional wallet data.\r\n    */  \r\n    function addWallet(address _wallet, string _data) onlyPrivilegeAddresses public {\r\n        require(_wallet != address(0));\r\n        require(!isWhitelisted(_wallet));\r\n        whitelist[_wallet].data = _data;\r\n        whitelist[_wallet].whitelisted = true;\r\n        whitelist[_wallet].createdTimestamp = now;\r\n        whitelistLength++;\r\n    }\r\n\r\n    /**\r\n    * @dev Update additional data for whitelisted wallet.\r\n    * @dev Accept request from privilege adresses only.\r\n    * @param _wallet The address of whitelisted wallet to update.\r\n    * @param _data The checksum of new additional wallet data.\r\n    */      \r\n    function updateWallet(address _wallet, string _data) onlyPrivilegeAddresses public {\r\n        require(_wallet != address(0));\r\n        require(isWhitelisted(_wallet));\r\n        whitelist[_wallet].data = _data;\r\n    }\r\n\r\n    /**\r\n    * @dev Remove wallet from whitelist.\r\n    * @dev Accept request from privilege adresses only.\r\n    * @param _wallet The address of whitelisted wallet to remove.\r\n    */  \r\n    function removeWallet(address _wallet) onlyPrivilegeAddresses public {\r\n        require(_wallet != address(0));\r\n        require(isWhitelisted(_wallet));\r\n        delete whitelist[_wallet];\r\n        whitelistLength--;\r\n    }\r\n\r\n    /**\r\n    * @dev Check the specified wallet whether it is in the whitelist.\r\n    * @param _wallet The address of wallet to check.\r\n    */ \r\n    function isWhitelisted(address _wallet) constant public returns (bool) {\r\n        return whitelist[_wallet].whitelisted;\r\n    }\r\n\r\n    /**\r\n    * @dev Get the checksum of additional data for the specified whitelisted wallet.\r\n    * @param _wallet The address of wallet to get.\r\n    */ \r\n    function walletData(address _wallet) constant public returns (string) {\r\n        return whitelist[_wallet].data;\r\n    }\r\n\r\n    /**\r\n    * @dev Get the creation timestamp for the specified whitelisted wallet.\r\n    * @param _wallet The address of wallet to get.\r\n    */\r\n    function walletCreatedTimestamp(address _wallet) constant public returns (uint256) {\r\n        return whitelist[_wallet].createdTimestamp;\r\n    }\r\n}\r\n\r\n// File: contracts/Whitelistable.sol\r\n\r\ncontract Whitelistable {\r\n    Whitelist public whitelist;\r\n\r\n    modifier whenWhitelisted(address _wallet) {\r\n        require(whitelist.isWhitelisted(_wallet));\r\n        _;\r\n    }\r\n\r\n    function Whitelistable () public {\r\n        whitelist = new Whitelist();\r\n\r\n        whitelist.transferOwnership(msg.sender);\r\n    }\r\n}\r\n\r\n// File: contracts/GiftCrowdsale.sol\r\n\r\ncontract GiftCrowdsale is Pausable, Whitelistable {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 public startTimestamp = 0;\r\n\r\n    uint256 public endTimestamp = 0;\r\n\r\n    uint256 public exchangeRate = 0;\r\n\r\n    uint256 public tokensSold = 0;\r\n\r\n    uint256 constant public minimumInvestment = 25e16; // 0.25 ETH\r\n\r\n    uint256 public minCap = 0;\r\n\r\n    uint256 public endFirstPeriodTimestamp = 0;\r\n    uint256 public endSecondPeriodTimestamp = 0;\r\n    uint256 public endThirdPeriodTimestamp = 0;\r\n\r\n    GiftToken public token = new GiftToken(this);\r\n\r\n    mapping(address => uint256) public investments;\r\n\r\n    modifier whenSaleIsOpen () {\r\n        require(now >= startTimestamp && now < endTimestamp);\r\n        _;\r\n    }\r\n\r\n    modifier whenSaleHasEnded () {\r\n        require(now >= endTimestamp);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Constructor for GiftCrowdsale contract.\r\n    * @dev Set first owner who can manage whitelist.\r\n    * @param _startTimestamp uint256 The start time ico.\r\n    * @param _endTimestamp uint256 The end time ico.\r\n    * @param _exchangeRate uint256 The price of the Gift token.\r\n    * @param _minCap The minimum amount of tokens sold required for the ICO to be considered successful.\r\n    */\r\n    function GiftCrowdsale (\r\n        uint256 _startTimestamp,\r\n        uint256 _endTimestamp,\r\n        uint256 _exchangeRate,\r\n        uint256 _minCap\r\n    ) public\r\n    {\r\n        require(_startTimestamp >= now && _endTimestamp > _startTimestamp);\r\n        require(_exchangeRate > 0);\r\n\r\n        startTimestamp = _startTimestamp;\r\n        endTimestamp = _endTimestamp;\r\n\r\n        exchangeRate = _exchangeRate;\r\n\r\n        endFirstPeriodTimestamp = _startTimestamp.add(1 days);\r\n        endSecondPeriodTimestamp = _startTimestamp.add(1 weeks);\r\n        endThirdPeriodTimestamp = _startTimestamp.add(2 weeks);\r\n\r\n        minCap = _minCap;\r\n    }\r\n\r\n    function discount() constant public returns (uint256) {\r\n        if (now > endThirdPeriodTimestamp)\r\n            return 0;\r\n        if (now > endSecondPeriodTimestamp)\r\n            return 5;\r\n        if (now > endFirstPeriodTimestamp)\r\n            return 15;\r\n        return 25;\r\n    }\r\n\r\n    function bonus(address _wallet) constant public returns (uint256) {\r\n        uint256 _created = whitelist.walletCreatedTimestamp(_wallet);\r\n        if (_created > 0 && _created < startTimestamp) {\r\n            return 10;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n    * @dev Function for sell tokens.\r\n    * @dev Sells tokens only for wallets from Whitelist while ICO lasts\r\n    */\r\n    function sellTokens () whenSaleIsOpen whenWhitelisted(msg.sender) whenNotPaused public payable {\r\n        require(msg.value > minimumInvestment);\r\n        uint256 _bonus = bonus(msg.sender);\r\n        uint256 _discount = discount();\r\n        uint256 tokensAmount = (msg.value).mul(exchangeRate).mul(_bonus.add(100)).div((100 - _discount));\r\n\r\n        token.transferFromIco(msg.sender, tokensAmount);\r\n\r\n        tokensSold = tokensSold.add(tokensAmount);\r\n\r\n        addInvestment(msg.sender, msg.value);\r\n    }\r\n\r\n    /**\r\n    * @dev Fallback function allowing the contract to receive funds\r\n    */\r\n    function () public payable {\r\n        sellTokens();\r\n    }\r\n\r\n    /**\r\n    * @dev Function for funds withdrawal\r\n    * @dev transfers funds to specified wallet once ICO is ended\r\n    * @param _wallet address wallet address, to  which funds  will be transferred\r\n    */\r\n    function withdrawal (address _wallet) onlyOwner whenSaleHasEnded external {\r\n        require(_wallet != address(0));\r\n        _wallet.transfer(this.balance);\r\n\r\n        token.transferOwnership(msg.sender);\r\n    }\r\n\r\n    /**\r\n    * @dev Function for manual token assignment (token transfer from ICO to requested wallet)\r\n    * @param _to address The address which you want transfer to\r\n    * @param _value uint256 the amount of tokens to be transferred\r\n    */\r\n    function assignTokens (address _to, uint256 _value) onlyOwner external {\r\n        token.transferFromIco(_to, _value);\r\n    }\r\n\r\n    /**\r\n    * @dev Add new investment to the ICO investments storage.\r\n    * @param _from The address of a ICO investor.\r\n    * @param _value The investment received from a ICO investor.\r\n    */\r\n    function addInvestment(address _from, uint256 _value) internal {\r\n        investments[_from] = investments[_from].add(_value);\r\n    }\r\n\r\n    /**\r\n    * @dev Function to return money to one customer, if mincap has not been reached\r\n    */\r\n    function refundPayment() whenWhitelisted(msg.sender) whenSaleHasEnded external {\r\n        require(tokensSold < minCap);\r\n        require(investments[msg.sender] > 0);\r\n\r\n        token.burnFrom(msg.sender, token.balanceOf(msg.sender));\r\n\r\n        uint256 investment = investments[msg.sender];\r\n        investments[msg.sender] = 0;\r\n        (msg.sender).transfer(investment);\r\n    }\r\n\r\n    /**\r\n    * @dev Allows the current owner to transfer control of the token contract from ICO to a newOwner.\r\n    * @param _newOwner The address to transfer ownership to.\r\n    */\r\n    function transferTokenOwnership(address _newOwner) onlyOwner public {\r\n        token.transferOwnership(_newOwner);\r\n    }\r\n\r\n    function updateIcoEnding(uint256 _endTimestamp) onlyOwner public {\r\n        endTimestamp = _endTimestamp;\r\n    }\r\n}\r\n\r\n// File: contracts/GiftFactory.sol\r\n\r\ncontract GiftFactory {\r\n    GiftCrowdsale public crowdsale;\r\n\r\n    function createCrowdsale (\r\n        uint256 _startTimestamp,\r\n        uint256 _endTimestamp,\r\n        uint256 _exchangeRate,\r\n        uint256 _minCap\r\n    ) public\r\n    {\r\n        crowdsale = new GiftCrowdsale(\r\n            _startTimestamp,\r\n            _endTimestamp,\r\n            _exchangeRate,\r\n            _minCap\r\n        );\r\n\r\n        Whitelist whitelist = crowdsale.whitelist();\r\n\r\n        crowdsale.transferOwnership(msg.sender);\r\n        whitelist.transferOwnership(msg.sender);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferTokenOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimumInvestment\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"exchangeRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endThirdPeriodTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"assignTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"discount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endSecondPeriodTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"whitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"withdrawal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"investments\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"sellTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_endTimestamp\",\"type\":\"uint256\"}],\"name\":\"updateIcoEnding\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refundPayment\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endFirstPeriodTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"bonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_startTimestamp\",\"type\":\"uint256\"},{\"name\":\"_endTimestamp\",\"type\":\"uint256\"},{\"name\":\"_exchangeRate\",\"type\":\"uint256\"},{\"name\":\"_minCap\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"GiftCrowdsale","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000005ab10cd8000000000000000000000000000000000000000000000000000000005ad85388000000000000000000000000000000000000000000000000000000000000271000000000000000000000000000000000000000000014adf4b7320334b9000000","Library":"","SwarmSource":"bzzr://81d306c8952e5f36daa8ee7dbd5ce21d812908c9c0483638653d059a41c7ae3d"}]}