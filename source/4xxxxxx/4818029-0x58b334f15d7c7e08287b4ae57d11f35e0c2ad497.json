{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/* The authentication manager details user accounts that have access to certain priviledges and keeps a permanent ledger of who has and has had these rights. */\r\ncontract AuthenticationManager {\r\n   \r\n    /* Map addresses to admins */\r\n    mapping (address => bool) adminAddresses;\r\n\r\n    /* Map addresses to account readers */\r\n    mapping (address => bool) accountReaderAddresses;\r\n\r\n    /* Map addresses to account minters */\r\n    mapping (address => bool) accountMinterAddresses;\r\n\r\n    /* Details of all admins that have ever existed */\r\n    address[] adminAudit;\r\n\r\n    /* Details of all account readers that have ever existed */\r\n    address[] accountReaderAudit;\r\n\r\n    /* Details of all account minters that have ever existed */\r\n    address[] accountMinterAudit;\r\n\r\n    /* Fired whenever an admin is added to the contract. */\r\n    event AdminAdded(address addedBy, address admin);\r\n\r\n    /* Fired whenever an admin is removed from the contract. */\r\n    event AdminRemoved(address removedBy, address admin);\r\n\r\n    /* Fired whenever an account-reader contract is added. */\r\n    event AccountReaderAdded(address addedBy, address account);\r\n\r\n    /* Fired whenever an account-reader contract is removed. */\r\n    event AccountReaderRemoved(address removedBy, address account);\r\n\r\n    /* Fired whenever an account-minter contract is added. */\r\n    event AccountMinterAdded(address addedBy, address account);\r\n\r\n    /* Fired whenever an account-minter contract is removed. */\r\n    event AccountMinterRemoved(address removedBy, address account);\r\n\r\n    /* When this contract is first setup we use the creator as the first admin */    \r\n    function AuthenticationManager() {\r\n        /* Set the first admin to be the person creating the contract */\r\n        adminAddresses[msg.sender] = true;\r\n        AdminAdded(0, msg.sender);\r\n        adminAudit.length++;\r\n        adminAudit[adminAudit.length - 1] = msg.sender;\r\n    }\r\n\r\n    /* Gets whether or not the specified address is currently an admin */\r\n    function isCurrentAdmin(address _address) constant returns (bool) {\r\n        return adminAddresses[_address];\r\n    }\r\n\r\n    /* Gets whether or not the specified address has ever been an admin */\r\n    function isCurrentOrPastAdmin(address _address) constant returns (bool) {\r\n        for (uint256 i = 0; i < adminAudit.length; i++)\r\n            if (adminAudit[i] == _address)\r\n                return true;\r\n        return false;\r\n    }\r\n\r\n    /* Gets whether or not the specified address is currently an account reader */\r\n    function isCurrentAccountReader(address _address) constant returns (bool) {\r\n        return accountReaderAddresses[_address];\r\n    }\r\n\r\n    /* Gets whether or not the specified address has ever been an admin */\r\n    function isCurrentOrPastAccountReader(address _address) constant returns (bool) {\r\n        for (uint256 i = 0; i < accountReaderAudit.length; i++)\r\n            if (accountReaderAudit[i] == _address)\r\n                return true;\r\n        return false;\r\n    }\r\n\r\n    /* Gets whether or not the specified address is currently an account minter */\r\n    function isCurrentAccountMinter(address _address) constant returns (bool) {\r\n        return accountMinterAddresses[_address];\r\n    }\r\n\r\n    /* Gets whether or not the specified address has ever been an admin */\r\n    function isCurrentOrPastAccountMinter(address _address) constant returns (bool) {\r\n        for (uint256 i = 0; i < accountMinterAudit.length; i++)\r\n            if (accountMinterAudit[i] == _address)\r\n                return true;\r\n        return false;\r\n    }\r\n\r\n    /* Adds a user to our list of admins */\r\n    function addAdmin(address _address) {\r\n        /* Ensure we're an admin */\r\n        if (!isCurrentAdmin(msg.sender))\r\n            throw;\r\n\r\n        // Fail if this account is already admin\r\n        if (adminAddresses[_address])\r\n            throw;\r\n        \r\n        // Add the user\r\n        adminAddresses[_address] = true;\r\n        AdminAdded(msg.sender, _address);\r\n        adminAudit.length++;\r\n        adminAudit[adminAudit.length - 1] = _address;\r\n\r\n    }\r\n\r\n    /* Removes a user from our list of admins but keeps them in the history audit */\r\n    function removeAdmin(address _address) {\r\n        /* Ensure we're an admin */\r\n        if (!isCurrentAdmin(msg.sender))\r\n            throw;\r\n\r\n        /* Don't allow removal of self */\r\n        if (_address == msg.sender)\r\n            throw;\r\n\r\n        // Fail if this account is already non-admin\r\n        if (!adminAddresses[_address])\r\n            throw;\r\n\r\n        /* Remove this admin user */\r\n        adminAddresses[_address] = false;\r\n        AdminRemoved(msg.sender, _address);\r\n    }\r\n\r\n    /* Adds a user/contract to our list of account readers */\r\n    function addAccountReader(address _address) {\r\n        /* Ensure we're an admin */\r\n        if (!isCurrentAdmin(msg.sender))\r\n            throw;\r\n\r\n        // Fail if this account is already in the list\r\n        if (accountReaderAddresses[_address])\r\n            throw;\r\n        \r\n        // Add the account reader\r\n        accountReaderAddresses[_address] = true;\r\n        AccountReaderAdded(msg.sender, _address);\r\n        accountReaderAudit.length++;\r\n        accountReaderAudit[accountReaderAudit.length - 1] = _address;\r\n    }\r\n\r\n    /* Removes a user/contracts from our list of account readers but keeps them in the history audit */\r\n    function removeAccountReader(address _address) {\r\n        /* Ensure we're an admin */\r\n        if (!isCurrentAdmin(msg.sender))\r\n            throw;\r\n\r\n        // Fail if this account is already not in the list\r\n        if (!accountReaderAddresses[_address])\r\n            throw;\r\n\r\n        /* Remove this account reader */\r\n        accountReaderAddresses[_address] = false;\r\n        AccountReaderRemoved(msg.sender, _address);\r\n    }\r\n\r\n    /* Add a contract to our list of account minters */\r\n    function addAccountMinter(address _address) {\r\n        /* Ensure we're an admin */\r\n        if (!isCurrentAdmin(msg.sender))\r\n            throw;\r\n\r\n        // Fail if this account is already in the list\r\n        if (accountMinterAddresses[_address])\r\n            throw;\r\n        \r\n        // Add the minter\r\n        accountMinterAddresses[_address] = true;\r\n        AccountMinterAdded(msg.sender, _address);\r\n        accountMinterAudit.length++;\r\n        accountMinterAudit[accountMinterAudit.length - 1] = _address;\r\n    }\r\n\r\n    /* Removes a user/contracts from our list of account readers but keeps them in the history audit */\r\n    function removeAccountMinter(address _address) {\r\n        /* Ensure we're an admin */\r\n        if (!isCurrentAdmin(msg.sender))\r\n            throw;\r\n\r\n        // Fail if this account is already not in the list\r\n        if (!accountMinterAddresses[_address])\r\n            throw;\r\n\r\n        /* Remove this minter account */\r\n        accountMinterAddresses[_address] = false;\r\n        AccountMinterRemoved(msg.sender, _address);\r\n    }\r\n}\r\n\r\n/* The Token itself is a simple extension of the ERC20 that allows for granting other Token contracts special rights to act on behalf of all transfers. */\r\ncontract Token {\r\n    using SafeMath for uint256;\r\n\r\n    /* Map all our our balances for issued tokens */\r\n    mapping (address => uint256) public balances;\r\n\r\n    /* Map between users and their approval addresses and amounts */\r\n    mapping(address => mapping (address => uint256)) allowed;\r\n\r\n    /* List of all token holders */\r\n    address[] allTokenHolders;\r\n\r\n    /* The name of the contract */\r\n    string public name;\r\n\r\n    /* The symbol for the contract */\r\n    string public symbol;\r\n\r\n    /* How many DPs are in use in this contract */\r\n    uint8 public decimals;\r\n\r\n    /* Defines the current supply of the token in its own units */\r\n    uint256 totalSupplyAmount = 0;\r\n    \r\n    /* Defines the address of the Refund Manager contract which is the only contract to destroy tokens. */\r\n    address public refundManagerContractAddress;\r\n\r\n    /* Defines the admin contract we interface with for credentails. */\r\n    AuthenticationManager authenticationManager;\r\n\r\n    /* Instance of lockin contract */\r\n    LockinManager lockinManager;\r\n\r\n    /** @dev Returns the balance that a given address has available for transfer.\r\n      * @param _owner The address of the token owner.\r\n      */\r\n    function availableBalance(address _owner) constant returns(uint256) {\r\n        \r\n        uint256 length =  lockinManager.getLocks(_owner);\r\n    \r\n        uint256 lockedValue = 0;\r\n        \r\n        for(uint256 i = 0; i < length; i++) {\r\n\r\n            if(lockinManager.getLocksUnlockDate(_owner, i) > now) {\r\n                uint256 _value = lockinManager.getLocksAmount(_owner, i);    \r\n                lockedValue = lockedValue.add(_value);                \r\n            }\r\n        }\r\n        \r\n        return balances[_owner].sub(lockedValue);\r\n    }\r\n\r\n    /* Fired when the fund is eventually closed. */\r\n    event FundClosed();\r\n    \r\n    /* Our transfer event to fire whenever we shift SMRT around */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    \r\n    /* Our approval event when one user approves another to control */\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n    /* Create a new instance of this fund with links to other contracts that are required. */\r\n    function Token(address _authenticationManagerAddress) {\r\n        // Setup defaults\r\n        name = \"PIE (Authorito Capital)\";\r\n        symbol = \"PIE\";\r\n        decimals = 18;\r\n\r\n        /* Setup access to our other contracts */\r\n        authenticationManager = AuthenticationManager(_authenticationManagerAddress);        \r\n    }\r\n\r\n    modifier onlyPayloadSize(uint numwords) {\r\n        assert(msg.data.length == numwords * 32 + 4);\r\n        _;\r\n    }\r\n\r\n    /* This modifier allows a method to only be called by account readers */\r\n    modifier accountReaderOnly {\r\n        if (!authenticationManager.isCurrentAccountReader(msg.sender)) throw;\r\n        _;\r\n    }\r\n\r\n    /* This modifier allows a method to only be called by current admins */\r\n    modifier adminOnly {\r\n        if (!authenticationManager.isCurrentAdmin(msg.sender)) throw;\r\n        _;\r\n    }   \r\n    \r\n    function setLockinManagerAddress(address _lockinManager) adminOnly {\r\n        lockinManager = LockinManager(_lockinManager);\r\n    }\r\n\r\n    function setRefundManagerContract(address _refundManagerContractAddress) adminOnly {\r\n        refundManagerContractAddress = _refundManagerContractAddress;\r\n    }\r\n\r\n    /* Transfer funds between two addresses that are not the current msg.sender - this requires approval to have been set separately and follows standard ERC20 guidelines */\r\n    function transferFrom(address _from, address _to, uint256 _amount) onlyPayloadSize(3) returns (bool) {\r\n        \r\n        if (availableBalance(_from) >= _amount && allowed[_from][msg.sender] >= _amount && _amount > 0 && balances[_to].add(_amount) > balances[_to]) {\r\n            bool isNew = balances[_to] == 0;\r\n            balances[_from] = balances[_from].sub(_amount);\r\n            allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\r\n            balances[_to] = balances[_to].add(_amount);\r\n            if (isNew)\r\n                tokenOwnerAdd(_to);\r\n            if (balances[_from] == 0)\r\n                tokenOwnerRemove(_from);\r\n            Transfer(_from, _to, _amount);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /* Returns the total number of holders of this currency. */\r\n    function tokenHolderCount() accountReaderOnly constant returns (uint256) {\r\n        return allTokenHolders.length;\r\n    }\r\n\r\n    /* Gets the token holder at the specified index. */\r\n    function tokenHolder(uint256 _index) accountReaderOnly constant returns (address) {\r\n        return allTokenHolders[_index];\r\n    }\r\n \r\n    /* Adds an approval for the specified account to spend money of the message sender up to the defined limit */\r\n    function approve(address _spender, uint256 _amount) onlyPayloadSize(2) returns (bool success) {\r\n        allowed[msg.sender][_spender] = _amount;\r\n        Approval(msg.sender, _spender, _amount);\r\n        return true;\r\n    }\r\n\r\n    /* Gets the current allowance that has been approved for the specified spender of the owner address */\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    /* Gets the total supply available of this token */\r\n    function totalSupply() constant returns (uint256) {\r\n        return totalSupplyAmount;\r\n    }\r\n\r\n    /* Gets the balance of a specified account */\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    /* Transfer the balance from owner's account to another account */\r\n    function transfer(address _to, uint256 _amount) onlyPayloadSize(2) returns (bool) {\r\n                \r\n        /* Check if sender has balance and for overflows */\r\n        if (availableBalance(msg.sender) < _amount || balances[_to].add(_amount) < balances[_to])\r\n            return false;\r\n\r\n        /* Do a check to see if they are new, if so we'll want to add it to our array */\r\n        bool isRecipientNew = balances[_to] == 0;\r\n\r\n        /* Add and subtract new balances */\r\n        balances[msg.sender] = balances[msg.sender].sub(_amount);\r\n        balances[_to] = balances[_to].add(_amount);\r\n        \r\n        /* Consolidate arrays if they are new or if sender now has empty balance */\r\n        if (isRecipientNew)\r\n            tokenOwnerAdd(_to);\r\n        if (balances[msg.sender] <= 0)\r\n            tokenOwnerRemove(msg.sender);\r\n\r\n        /* Fire notification event */\r\n        Transfer(msg.sender, _to, _amount);\r\n        return true; \r\n    }\r\n\r\n    /* If the specified address is not in our owner list, add them - this can be called by descendents to ensure the database is kept up to date. */\r\n    function tokenOwnerAdd(address _addr) internal {\r\n        /* First check if they already exist */\r\n        uint256 tokenHolderCount = allTokenHolders.length;\r\n        for (uint256 i = 0; i < tokenHolderCount; i++)\r\n            if (allTokenHolders[i] == _addr)\r\n                /* Already found so we can abort now */\r\n                return;\r\n        \r\n        /* They don't seem to exist, so let's add them */\r\n        allTokenHolders.length++;\r\n        allTokenHolders[allTokenHolders.length - 1] = _addr;\r\n    }\r\n\r\n    /* If the specified address is in our owner list, remove them - this can be called by descendents to ensure the database is kept up to date. */\r\n    function tokenOwnerRemove(address _addr) internal {\r\n        /* Find out where in our array they are */\r\n        uint256 tokenHolderCount = allTokenHolders.length;\r\n        uint256 foundIndex = 0;\r\n        bool found = false;\r\n        uint256 i;\r\n        for (i = 0; i < tokenHolderCount; i++)\r\n            if (allTokenHolders[i] == _addr) {\r\n                foundIndex = i;\r\n                found = true;\r\n                break;\r\n            }\r\n        \r\n        /* If we didn't find them just return */\r\n        if (!found)\r\n            return;\r\n        \r\n        /* We now need to shuffle down the array */\r\n        for (i = foundIndex; i < tokenHolderCount - 1; i++)\r\n            allTokenHolders[i] = allTokenHolders[i + 1];\r\n        allTokenHolders.length--;\r\n    }\r\n\r\n    /* Mint new tokens - this can only be done by special callers (i.e. the ICO management) during the ICO phase. */\r\n    function mintTokens(address _address, uint256 _amount) onlyPayloadSize(2) {\r\n\r\n        /* if it is comming from account minter */\r\n        if ( ! authenticationManager.isCurrentAccountMinter(msg.sender))\r\n            throw;\r\n\r\n        /* Mint the tokens for the new address*/\r\n        bool isNew = balances[_address] == 0;\r\n        totalSupplyAmount = totalSupplyAmount.add(_amount);\r\n        balances[_address] = balances[_address].add(_amount);\r\n\r\n        lockinManager.defaultLockin(_address, _amount);        \r\n\r\n        if (isNew)\r\n            tokenOwnerAdd(_address);\r\n        Transfer(0, _address, _amount);\r\n    }\r\n\r\n    /** This will destroy the tokens of the investor and called by sale contract only at the time of refund. */\r\n    function destroyTokens(address _investor, uint256 tokenCount) returns (bool) {\r\n        \r\n        /* Can only be called by refund manager, also refund manager address must not be empty */\r\n        if ( refundManagerContractAddress  == 0x0 || msg.sender != refundManagerContractAddress)\r\n            throw;\r\n\r\n        uint256 balance = availableBalance(_investor);\r\n\r\n        if (balance < tokenCount) {\r\n            return false;\r\n        }\r\n\r\n        balances[_investor] -= tokenCount;\r\n        totalSupplyAmount -= tokenCount;\r\n\r\n        if(balances[_investor] <= 0)\r\n            tokenOwnerRemove(_investor);\r\n\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract LockinManager {\r\n    using SafeMath for uint256;\r\n\r\n    /*Defines the structure for a lock*/\r\n    struct Lock {\r\n        uint256 amount;\r\n        uint256 unlockDate;\r\n        uint256 lockedFor;\r\n    }\r\n    \r\n    /*Object of Lock*/    \r\n    Lock lock;\r\n\r\n    /*Value of default lock days*/\r\n    uint256 defaultAllowedLock = 7;\r\n\r\n    /* mapping of list of locked address with array of locks for a particular address */\r\n    mapping (address => Lock[]) public lockedAddresses;\r\n\r\n    /* mapping of valid contracts with their lockin timestamp */\r\n    mapping (address => uint256) public allowedContracts;\r\n\r\n    /* list of locked days mapped with their locked timestamp*/\r\n    mapping (uint => uint256) public allowedLocks;\r\n\r\n    /* Defines our interface to the token contract */\r\n    Token token;\r\n\r\n    /* Defines the admin contract we interface with for credentails. */\r\n    AuthenticationManager authenticationManager;\r\n\r\n     /* Fired whenever lock day is added by the admin. */\r\n    event LockedDayAdded(address _admin, uint256 _daysLocked, uint256 timestamp);\r\n\r\n     /* Fired whenever lock day is removed by the admin. */\r\n    event LockedDayRemoved(address _admin, uint256 _daysLocked, uint256 timestamp);\r\n\r\n     /* Fired whenever valid contract is added by the admin. */\r\n    event ValidContractAdded(address _admin, address _validAddress, uint256 timestamp);\r\n\r\n     /* Fired whenever valid contract is removed by the admin. */\r\n    event ValidContractRemoved(address _admin, address _validAddress, uint256 timestamp);\r\n\r\n    /* Create a new instance of this fund with links to other contracts that are required. */\r\n    function LockinManager(address _token, address _authenticationManager) {\r\n      \r\n        /* Setup access to our other contracts and validate their versions */\r\n        token  = Token(_token);\r\n        authenticationManager = AuthenticationManager(_authenticationManager);\r\n    }\r\n   \r\n    /* This modifier allows a method to only be called by current admins */\r\n    modifier adminOnly {\r\n        if (!authenticationManager.isCurrentAdmin(msg.sender)) throw;\r\n        _;\r\n    }\r\n\r\n    /* This modifier allows a method to only be called by token contract */\r\n    modifier validContractOnly {\r\n        require(allowedContracts[msg.sender] != 0);\r\n\r\n        _;\r\n    }\r\n\r\n    /* Gets the length of locked values for an account */\r\n    function getLocks(address _owner) validContractOnly constant returns (uint256) {\r\n        return lockedAddresses[_owner].length;\r\n    }\r\n\r\n    function getLock(address _owner, uint256 count) validContractOnly returns(uint256 amount, uint256 unlockDate, uint256 lockedFor) {\r\n        amount     = lockedAddresses[_owner][count].amount;\r\n        unlockDate = lockedAddresses[_owner][count].unlockDate;\r\n        lockedFor  = lockedAddresses[_owner][count].lockedFor;\r\n    }\r\n    \r\n    /* Gets amount for which an address is locked with locked index */\r\n    function getLocksAmount(address _owner, uint256 count) validContractOnly returns(uint256 amount) {        \r\n        amount = lockedAddresses[_owner][count].amount;\r\n    }\r\n\r\n    /* Gets unlocked timestamp for which an address is locked with locked index */\r\n    function getLocksUnlockDate(address _owner, uint256 count) validContractOnly returns(uint256 unlockDate) {\r\n        unlockDate = lockedAddresses[_owner][count].unlockDate;\r\n    }\r\n\r\n    /* Gets days for which an address is locked with locked index */\r\n    function getLocksLockedFor(address _owner, uint256 count) validContractOnly returns(uint256 lockedFor) {\r\n        lockedFor = lockedAddresses[_owner][count].lockedFor;\r\n    }\r\n\r\n    /* Locks tokens for an address for the default number of days */\r\n    function defaultLockin(address _address, uint256 _value) validContractOnly\r\n    {\r\n        lockIt(_address, _value, defaultAllowedLock);\r\n    }\r\n\r\n    /* Locks tokens for sender for n days*/\r\n    function lockForDays(uint256 _value, uint256 _days) \r\n    {\r\n        require( ! ifInAllowedLocks(_days));        \r\n\r\n        require(token.availableBalance(msg.sender) >= _value);\r\n        \r\n        lockIt(msg.sender, _value, _days);     \r\n    }\r\n\r\n    function lockIt(address _address, uint256 _value, uint256 _days) internal {\r\n        // expiry will be calculated as 24 * 60 * 60\r\n        uint256 _expiry = now + _days.mul(86400);\r\n        lockedAddresses[_address].push(Lock(_value, _expiry, _days));        \r\n    }\r\n\r\n    /* Check if input day is present in locked days */\r\n    function ifInAllowedLocks(uint256 _days) constant returns(bool) {\r\n        return allowedLocks[_days] == 0;\r\n    }\r\n\r\n    /* Adds a day to our list of allowedLocks */\r\n    function addAllowedLock(uint _day) adminOnly {\r\n\r\n        // Fail if day is already present in locked days\r\n        if (allowedLocks[_day] != 0)\r\n            throw;\r\n        \r\n        // Add day in locked days \r\n        allowedLocks[_day] = now;\r\n        LockedDayAdded(msg.sender, _day, now);\r\n    }\r\n\r\n    /* Remove allowed Lock */\r\n    function removeAllowedLock(uint _day) adminOnly {\r\n\r\n        // Fail if day doesnot exist in allowedLocks\r\n        if ( allowedLocks[_day] ==  0)\r\n            throw;\r\n\r\n        /* Remove locked day  */\r\n        allowedLocks[_day] = 0;\r\n        LockedDayRemoved(msg.sender, _day, now);\r\n    }\r\n\r\n    /* Adds a address to our list of allowedContracts */\r\n    function addValidContract(address _address) adminOnly {\r\n\r\n        // Fail if address is already present in valid contracts\r\n        if (allowedContracts[_address] != 0)\r\n            throw;\r\n        \r\n        // add an address in allowedContracts\r\n        allowedContracts[_address] = now;\r\n\r\n        ValidContractAdded(msg.sender, _address, now);\r\n    }\r\n\r\n    /* Removes allowed contract from the list of allowedContracts */\r\n    function removeValidContract(address _address) adminOnly {\r\n\r\n        // Fail if address doesnot exist in allowedContracts\r\n        if ( allowedContracts[_address] ==  0)\r\n            throw;\r\n\r\n        /* Remove allowed contract from allowedContracts  */\r\n        allowedContracts[_address] = 0;\r\n\r\n        ValidContractRemoved(msg.sender, _address, now);\r\n    }\r\n\r\n    /* Set default allowed lock */\r\n    function setDefaultAllowedLock(uint _days) adminOnly {\r\n        defaultAllowedLock = _days;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"getLocksAmount\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"getLock\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"unlockDate\",\"type\":\"uint256\"},{\"name\":\"lockedFor\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allowedLocks\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_days\",\"type\":\"uint256\"}],\"name\":\"setDefaultAllowedLock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowedContracts\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"defaultLockin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeValidContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getLocks\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"getLocksUnlockDate\",\"outputs\":[{\"name\":\"unlockDate\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"getLocksLockedFor\",\"outputs\":[{\"name\":\"lockedFor\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_day\",\"type\":\"uint256\"}],\"name\":\"removeAllowedLock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_days\",\"type\":\"uint256\"}],\"name\":\"ifInAllowedLocks\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addValidContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_day\",\"type\":\"uint256\"}],\"name\":\"addAllowedLock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_days\",\"type\":\"uint256\"}],\"name\":\"lockForDays\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lockedAddresses\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"unlockDate\",\"type\":\"uint256\"},{\"name\":\"lockedFor\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_authenticationManager\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_admin\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_daysLocked\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"LockedDayAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_admin\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_daysLocked\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"LockedDayRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_admin\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_validAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ValidContractAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_admin\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_validAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ValidContractRemoved\",\"type\":\"event\"}]","ContractName":"LockinManager","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000c9935cec15431e00aff915762e47edfcf23bd76b00000000000000000000000064c14e2c286918803de6d965174ca6bc9048eafa","Library":"","SwarmSource":"bzzr://b2ec9c94c23fa515b73a836c6171d193a4fec2954cb83ab44da1789b628f21d3"}]}