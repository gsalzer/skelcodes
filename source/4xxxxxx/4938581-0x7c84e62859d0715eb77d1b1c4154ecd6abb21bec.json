{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.16;\r\n\r\ncontract ShpingCoin {\r\n\r\n    string public name = \"Shping Coin\"; \r\n    string public symbol = \"SHPING\";\r\n    uint8 public decimals = 18;\r\n    uint256 public coinsaleDeadline = 1521845940; // 23/03/2018, 22:59:00 GMT | 23/03/2018, 23:59:00 CET | Saturday, 24 March 2018 9:59:00 AM GMT+11:00\r\n\r\n    uint256 public totalSupply;\r\n    mapping(address => uint256) balances; \r\n    mapping(address => mapping (address => uint256)) allowed; \r\n\r\n    mapping(address => mapping(string => bool)) platinumUsers;\r\n    mapping(address => mapping(string => uint256)) campaigns; // Requests for a campaign activation \r\n    mapping(address => uint256) budgets; // Account budget for rewards campaigns\r\n\r\n    address public owner;\r\n    address public operator;\r\n\r\n    function ShpingCoin() public {\r\n        owner = msg.sender;\r\n        totalSupply = 10000000000 * (10 ** uint256(decimals));\r\n        balances[msg.sender] = totalSupply;\r\n        operator = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    modifier onlyOperator() {\r\n        require(msg.sender == operator);\r\n        _;\r\n    }\r\n\r\n    function changeOperator(address newOperator) public onlyOwner {\r\n        require(newOperator != address(0));\r\n        require(newOperator != operator);\r\n        require(balances[newOperator]+balances[operator] >= balances[newOperator]);\r\n        require(budgets[newOperator]+budgets[operator] >= budgets[newOperator]);\r\n\r\n        if (operator != owner) {\r\n            balances[newOperator] += balances[operator];\r\n            budgets[newOperator] += budgets[operator];\r\n            NewBudget(newOperator, budgets[newOperator]);\r\n            Transfer(operator, newOperator, balances[operator]);\r\n            balances[operator] = 0;\r\n            budgets[operator] = 0;\r\n            NewBudget(operator, 0);\r\n        }\r\n        operator = newOperator;\r\n    }\r\n\r\n    //Permanent platinum level\r\n\r\n    function isPlatinumLevel(address user, string hashedID) public constant returns (bool) {\r\n        return platinumUsers[user][hashedID];\r\n    }\r\n\r\n    function setPermanentPlatinumLevel(address user, string hashedID) public onlyOwner returns (bool) {\r\n        require(!isPlatinumLevel(user, hashedID));\r\n        platinumUsers[user][hashedID] = true;\r\n        return true;\r\n    }\r\n\r\n    //Rewards campaigns\r\n    function activateCampaign(string campaign, uint256 budget) public returns (bool) {\r\n        require(campaigns[msg.sender][campaign] == 0);\r\n        require(budget != 0);\r\n        require(balances[msg.sender] >= budgets[msg.sender]);\r\n        require(balances[msg.sender] - budgets[msg.sender] >= budget);\r\n        campaigns[msg.sender][campaign] = budget;\r\n        Activate(msg.sender, budget, campaign);\r\n        return true;\r\n    }\r\n\r\n    function getBudget(address account) public constant returns (uint256) {\r\n        return budgets[account];\r\n    }\r\n\r\n    function rejectCampaign(address account, string campaign) public onlyOperator returns (bool) {\r\n        require(account != address(0));\r\n        campaigns[account][campaign] = 0;\r\n        Reject(account, campaign);\r\n        return true;\r\n    }\r\n\r\n    function setBudget(address account, string campaign) public onlyOperator returns (bool) {\r\n        require(account != address(0));\r\n        require(campaigns[account][campaign] != 0);\r\n        require(balances[account] >= budgets[account]);\r\n        require(balances[account] - budgets[account] >= campaigns[account][campaign]);\r\n        require(budgets[account] + campaigns[account][campaign] > budgets[account]);\r\n\r\n        budgets[account] += campaigns[account][campaign];\r\n        campaigns[account][campaign] = 0;\r\n        NewBudget(account, budgets[account]);\r\n        return true;\r\n    }\r\n\r\n    function releaseBudget(address account, uint256 budget) public onlyOperator returns (bool) {\r\n        require(account != address(0));\r\n        require(budget != 0);\r\n        require(budgets[account] >= budget);\r\n        require(balances[account] >= budget);\r\n        require(balances[operator] + budget > balances[operator]);\r\n\r\n        budgets[account] -= budget;\r\n        balances[account] -= budget;\r\n        balances[operator] += budget;\r\n        Released(account, budget);\r\n        NewBudget(account, budgets[account]);\r\n        return true;\r\n    }\r\n\r\n    function clearBudget(address account) public onlyOperator returns (bool) {\r\n        budgets[account] = 0;\r\n        NewBudget(account, 0);\r\n        return true;\r\n    }\r\n\r\n    event Activate(address indexed account, uint256 indexed budget, string campaign);\r\n    event NewBudget(address indexed account, uint256 budget);\r\n    event Reject(address indexed account, string campaign);\r\n    event Released(address indexed account, uint256 value);\r\n\r\n    //ERC20 interface\r\n    function balanceOf(address account) public constant returns (uint256) {\r\n        return balances[account];\r\n    }\r\n\r\n    function transfer(address to, uint256 value) public returns (bool) {\r\n        require(msg.sender == owner || msg.sender == operator || now > coinsaleDeadline);\r\n        require(balances[msg.sender] - budgets[msg.sender] >= value);\r\n        require(balances[to] + value >= balances[to]);\r\n        \r\n        balances[msg.sender] -= value;\r\n        balances[to] += value;\r\n        Transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\r\n        require(from == owner || from == operator || msg.sender == owner || msg.sender == operator || now > coinsaleDeadline);\r\n        require(balances[from] - budgets[from] >= value);\r\n        require(allowed[from][msg.sender] >= value);\r\n        require(balances[to] + value >= balances[to]);\r\n\r\n        balances[from] -= value;\r\n        allowed[from][msg.sender] -= value;\r\n        balances[to] += value;\r\n        Transfer(from, to, value);\r\n        return true;\r\n    }\r\n\r\n    function approve(address spender, uint256 value) public returns (bool) {\r\n        allowed[msg.sender][spender] = value;\r\n        Approval(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address account, address spender) public constant returns (uint256) {\r\n        return allowed[account][spender];\r\n    }\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"newOperator\",\"type\":\"address\"}],\"name\":\"changeOperator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getBudget\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"coinsaleDeadline\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"hashedID\",\"type\":\"string\"}],\"name\":\"setPermanentPlatinumLevel\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"campaign\",\"type\":\"string\"},{\"name\":\"budget\",\"type\":\"uint256\"}],\"name\":\"activateCampaign\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"hashedID\",\"type\":\"string\"}],\"name\":\"isPlatinumLevel\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"budget\",\"type\":\"uint256\"}],\"name\":\"releaseBudget\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"campaign\",\"type\":\"string\"}],\"name\":\"setBudget\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"clearBudget\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"campaign\",\"type\":\"string\"}],\"name\":\"rejectCampaign\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"budget\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"campaign\",\"type\":\"string\"}],\"name\":\"Activate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"budget\",\"type\":\"uint256\"}],\"name\":\"NewBudget\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"campaign\",\"type\":\"string\"}],\"name\":\"Reject\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Released\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"ShpingCoin","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://71321fce1d3b000927054aaab1c62affdf21c8207d865df6cf1c2c49af74c9ad"}]}