{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n}\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n  mapping(address => uint256) balances;\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n}\r\ncontract StandardToken is ERC20, BasicToken {\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n}\r\n\r\ncontract BurnableToken is StandardToken {\r\n  event Burn(address indexed burner, uint256 value);\r\n  function burn(uint256 _value) public {\r\n    require(_value > 0);\r\n    require(_value <= balances[msg.sender]);\r\n    address burner = msg.sender;\r\n    balances[burner] = balances[burner].sub(_value);\r\n    totalSupply = totalSupply.sub(_value);\r\n    Burn(burner, _value);\r\n  }\r\n}\r\ncontract SpaceKIMToken is BurnableToken {\r\n  string public constant name = \"Space KIM Token\";\r\n  string public constant symbol = \"KIM\";\r\n  uint32 public constant decimals = 0;\r\n  uint256 public constant INITIAL_SUPPLY = 37900000;\r\n  function SpaceKIMToken() public {\r\n    totalSupply = INITIAL_SUPPLY;\r\n    balances[msg.sender] = INITIAL_SUPPLY;\r\n  }\r\n}\r\n\r\ncontract Crowdsale is Ownable {\r\n\r\n  using SafeMath for uint;\r\n\r\n  SpaceKIMToken public token = new SpaceKIMToken();\r\n\r\n  address multisig;\r\n  address restricted;\r\n\r\n  uint statusPreSale = 0;\r\n\r\n  uint rate;\r\n  uint minAmount;\r\n\r\n  uint saleStartDate;\r\n  uint saleFinishDate;\r\n\r\n  uint olympStartDate;\r\n  uint olympEndDate;\r\n\r\n  uint percentsTeamTokens;\r\n  uint percentsPreSaleTokens;\r\n  uint percentsBountySecondTokens;\r\n  uint percentsOlympicTokens;\r\n\r\n  uint endCrowdsaleDate;\r\n\r\n  modifier saleIsOn() {\r\n    uint curState = getStatus();\r\n    require(curState != 0 && curState != 5 && curState != 3);\r\n    _;\r\n  }\r\n\r\n  modifier isUnderHardCap() {\r\n    uint _availableTokens = token.balanceOf(this);\r\n    uint _tokens = calculateTokens(msg.value);\r\n    uint _minTokens = holdTokensOnStage();\r\n    require(_availableTokens.sub(_tokens) >= _minTokens);\r\n    _;\r\n  }\r\n\r\n  modifier checkMinAmount() {\r\n    require(msg.value >= minAmount);\r\n    _;\r\n  }\r\n  function Crowdsale() public {\r\n    multisig = 0x381b16397eF8fB8FFF65F6d3B6E5979C9d38fe40;\r\n    restricted = 0x381b16397eF8fB8FFF65F6d3B6E5979C9d38fe40;\r\n    minAmount = 0.01 * 1 ether;\r\n    rate = 10000;\r\n\r\n    saleStartDate = 1515974400; // 15.01.2018 00:00 GMT Main START\r\n    saleFinishDate = 1517961600; // 07.02.2017 00:00 GMT Main END\r\n    //Bounty first\r\n    olympStartDate = 1518134400; // 09.02.2018 00:00 GMT Olymp START\r\n    olympEndDate = 1519516800; // 25.02.2018 00:00 GMT Olymp END\r\n    //Bounty second\r\n    endCrowdsaleDate = 1519948800; // 02.03.2018 00:00 GMT Close Contract\r\n\r\n    percentsTeamTokens = 20;\r\n    percentsBountySecondTokens = 5;\r\n    percentsPreSaleTokens = 30;\r\n    percentsOlympicTokens = 15;\r\n  }\r\n\r\n  function calculateTokens(uint value) internal constant returns (uint) {\r\n    uint tokens = rate.mul(value).div(1 ether);\r\n    if(getStatus() == 1){\r\n      tokens += tokens.div(2);\r\n    }\r\n    return tokens;\r\n  }\r\n\r\n  // 0 - stop\r\n  // 1 - preSale\r\n  // 2 - sale\r\n  // 3 - Bounty First\r\n  // 4 - Olympic games\r\n  // 5 - Bounty Second\r\n  function getStatus() internal constant returns (uint8) {\r\n    if(now > endCrowdsaleDate) {\r\n      return 0;\r\n    } else if(now > olympEndDate && now < endCrowdsaleDate) {\r\n      return 5;\r\n    } else if(now > olympStartDate && now < olympEndDate) {\r\n      return 4;\r\n    } else if(now > saleFinishDate && now < olympStartDate) {\r\n      return 3;\r\n    } else if(now > saleStartDate && now < saleFinishDate) {\r\n      return 2;\r\n    } else if(statusPreSale == 1){\r\n      return 1;\r\n    } else {\r\n      return 0;\r\n    }\r\n  }\r\n\r\n  function holdTokensOnStage() public view returns (uint) {\r\n    uint _totalSupply = token.totalSupply();\r\n    uint _percents = 100;\r\n    uint curState = getStatus();\r\n    if(curState == 5) {\r\n      _percents = percentsTeamTokens;//20\r\n    } else if(curState == 4) {\r\n      _percents = percentsTeamTokens.add(percentsBountySecondTokens);//20+5\r\n    } else if(curState == 3) {\r\n      _percents = percentsTeamTokens.add(percentsBountySecondTokens).add(percentsOlympicTokens);//20+5+15\r\n    } else if(curState == 2) {\r\n      _percents = percentsTeamTokens.add(percentsBountySecondTokens).add(percentsOlympicTokens);//20+5+15\r\n    } else if(curState == 1) {\r\n      _percents = _percents.sub(percentsPreSaleTokens);//70\r\n    }\r\n    return _totalSupply.mul(_percents).div(100);\r\n  }\r\n\r\n  function onBalance() public view returns (uint) {\r\n    return token.balanceOf(this);\r\n  }\r\n\r\n  function availableTokensOnCurrentStage() public view returns (uint) {\r\n    uint _currentHolder = token.balanceOf(this);\r\n    uint _minTokens = holdTokensOnStage();\r\n    return _currentHolder.sub(_minTokens);\r\n  }\r\n\r\n  function getStatusInfo() public view returns (string) {\r\n    uint curState = getStatus();\r\n    if(now > endCrowdsaleDate) {\r\n      return \"Crowdsale is over\";\r\n    } else if(curState == 5) {\r\n      return \"Now Bounty #2 token distribution is active\";\r\n    } else if(curState == 4) {\r\n      return \"Now Olympic Special (ICO #2) is active\";\r\n    } else if(curState == 3) {\r\n      return \"Now Bounty #1 token distribution is active\";\r\n    } else if(curState == 2) {\r\n      return \"Now ICO #1 is active\";\r\n    } else if(curState == 1) {\r\n      return \"Now Pre-ICO is active\";\r\n    } else {\r\n      return \"The sale of tokens is stopped\";\r\n    }\r\n  }\r\n\r\n  function setStatus(uint8 newStatus) public onlyOwner {\r\n    require(newStatus == 1 || newStatus == 0);\r\n    statusPreSale = newStatus;\r\n  }\r\n\r\n  function burnTokens() public onlyOwner {\r\n    require(now > endCrowdsaleDate);\r\n    uint _totalSupply = token.totalSupply();\r\n    uint _teamTokens = _totalSupply.mul(percentsTeamTokens).div(100);\r\n    token.transfer(restricted, _teamTokens);\r\n    uint _burnTokens = token.balanceOf(this);\r\n    token.burn(_burnTokens);\r\n  }\r\n\r\n  function sendTokens(address to, uint tokens) public onlyOwner {\r\n    uint curState = getStatus();\r\n    require(curState == 5 || curState == 3);\r\n    uint _minTokens = holdTokensOnStage();\r\n    require(token.balanceOf(this).sub(tokens) >=  _minTokens);\r\n    token.transfer(to, tokens);\r\n  }\r\n\r\n  function createTokens() public saleIsOn isUnderHardCap checkMinAmount payable {\r\n    uint tokens = calculateTokens(msg.value);\r\n    multisig.transfer(msg.value);\r\n    token.transfer(msg.sender, tokens);\r\n  }\r\n\r\n  function() external payable {\r\n    createTokens();\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"sendTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"burnTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newStatus\",\"type\":\"uint8\"}],\"name\":\"setStatus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"availableTokensOnCurrentStage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"createTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"onBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"holdTokensOnStage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getStatusInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Crowdsale","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://87b487cc2e141f215d1e9dfa7008fadbfc0fc0463f99df22ef50b35462e9a53f"}]}