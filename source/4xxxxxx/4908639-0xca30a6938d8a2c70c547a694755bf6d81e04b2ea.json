{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\ncontract Ownable {\r\n\r\n  address public owner;\r\n\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    owner = newOwner;\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n}\r\n\r\ncontract LotsData is Ownable {\r\n\r\n    struct Property {\r\n        string parcel;\r\n        string street;\r\n        string city;\r\n        string state;\r\n        string zip;\r\n        uint64 creationTime;\r\n    }\r\n\r\n    struct Auction {\r\n        address seller;\r\n        uint128 startingPriceWei;\r\n        uint128 endingPriceWei;\r\n        uint64 duration;\r\n        uint64 creationTime;\r\n    }\r\n\r\n    struct Escrow {\r\n        address seller;\r\n        address buyer;\r\n        uint128 amount;\r\n    }\r\n\r\n    event Transfer(address from, address to, uint256 propertyId);\r\n    event AuctionCreated(uint256 propertyId, uint256 startingPriceWei, uint256 endingPriceWei, uint256 duration);\r\n    event AuctionCompleted(uint256 propertyId, uint256 priceWei, address winner);\r\n    event AuctionCancelled(uint256 propertyId);\r\n        \r\n    Property[] properties;\r\n\r\n    mapping (uint256 => address) public propertyIdToOwner;\r\n    mapping (uint256 => Auction) public propertyIdToAuction;\r\n    mapping (uint256 => Escrow) public propertyIdToEscrow;\r\n    \r\n}\r\n\r\ncontract LotsApis is LotsData {\r\n\r\n    function getProperty(uint256 _id) external view returns (string parcel, string street, string city, string state, string zip) {\r\n        Property storage property = properties[_id];\r\n        parcel = property.parcel;\r\n        street = property.street;\r\n        city = property.city;\r\n        state = property.state;\r\n        zip = property.zip;\r\n    }\r\n    \r\n    function registerProperty(string parcel, string street, string city, string state, string zip) external onlyOwner {        \r\n        _registerProperty(parcel, street, city, state, zip);\r\n    } \r\n\r\n    function _registerProperty(string parcel, string street, string city, string state, string zip) internal {        \r\n        Property memory _property = Property({\r\n            parcel: parcel,\r\n            street: street,\r\n            city: city,\r\n            state: state,\r\n            zip: zip,\r\n            creationTime: uint64(now)\r\n        });\r\n\r\n        uint256 newPropertyId = properties.push(_property) - 1;\r\n        _transfer(0, msg.sender, newPropertyId);\r\n    }\r\n    \r\n    function transfer(address _to, uint256 _propertyId) external {\r\n        require(_to != address(0));\r\n        require(_to != address(this));\r\n        require(propertyIdToOwner[_propertyId] == msg.sender);\r\n        Auction storage auction = propertyIdToAuction[_propertyId];\r\n        require(auction.creationTime == 0);\r\n        _transfer(msg.sender, _to, _propertyId);\r\n    }\r\n\r\n    function ownerOf(uint256 _propertyId) external view returns (address owner) {\r\n        owner = propertyIdToOwner[_propertyId];\r\n        require(owner != address(0));\r\n    }\r\n    \r\n    function createAuction(uint256 _propertyId, uint256 _startingPriceWei, uint256 _endingPriceWei, uint256 _duration) external onlyOwner {\r\n        require(_startingPriceWei > _endingPriceWei);\r\n        require(_startingPriceWei > 0);\r\n        require(_startingPriceWei == uint256(uint128(_startingPriceWei)));\r\n        require(_endingPriceWei == uint256(uint128(_endingPriceWei)));\r\n        require(_duration == uint256(uint64(_duration)));\r\n        require(propertyIdToOwner[_propertyId] == msg.sender);\r\n\r\n        Auction memory auction = Auction(\r\n            msg.sender,\r\n            uint128(_startingPriceWei),\r\n            uint128(_endingPriceWei),\r\n            uint64(_duration),\r\n            uint64(now)\r\n        );\r\n\r\n        propertyIdToAuction[_propertyId] = auction;\r\n\r\n        AuctionCreated(_propertyId, _startingPriceWei, _endingPriceWei, _duration);\r\n    }\r\n    \r\n    function bid(uint256 _propertyId) external payable {\r\n        Auction storage auction = propertyIdToAuction[_propertyId];\r\n        require(auction.startingPriceWei > 0);\r\n\r\n        uint256 price = _getAuctionPrice(auction);\r\n        require(msg.value >= price);\r\n\r\n        Escrow memory escrow = Escrow({\r\n                seller: auction.seller,\r\n                buyer: msg.sender,\r\n                amount: uint128(price)\r\n        });\r\n\r\n        delete propertyIdToAuction[_propertyId];\r\n        propertyIdToEscrow[_propertyId] = escrow;\r\n\r\n        msg.sender.transfer(msg.value - price);        \r\n        AuctionCompleted(_propertyId, price, msg.sender);\r\n    }\r\n\r\n    function cancelEscrow(uint256 _propertyId) external onlyOwner {\r\n        Escrow storage escrow = propertyIdToEscrow[_propertyId];\r\n        require(escrow.amount > 0);\r\n\r\n        escrow.buyer.transfer(escrow.amount);\r\n        delete propertyIdToEscrow[_propertyId];\r\n    }\r\n\r\n    function closeEscrow(uint256 _propertyId) external onlyOwner {\r\n        Escrow storage escrow = propertyIdToEscrow[_propertyId];\r\n        require(escrow.amount > 0);\r\n\r\n        escrow.seller.transfer(escrow.amount);\r\n         _transfer(escrow.seller, escrow.buyer, _propertyId);\r\n        delete propertyIdToEscrow[_propertyId];\r\n    }\r\n\r\n    function cancelAuction(uint256 _propertyId) external {\r\n        Auction storage auction = propertyIdToAuction[_propertyId];\r\n        require(auction.startingPriceWei > 0);\r\n\r\n        require(msg.sender == auction.seller);\r\n        delete propertyIdToAuction[_propertyId];\r\n        AuctionCancelled(_propertyId);\r\n    }\r\n    \r\n    function getAuction(uint256 _propertyId) external view returns(address seller, uint256 startingPriceWei, uint256 endingPriceWei, uint256 duration, uint256 startedAt) {\r\n        Auction storage auction = propertyIdToAuction[_propertyId];\r\n        require(auction.startingPriceWei > 0);\r\n\r\n        return (auction.seller, auction.startingPriceWei, auction.endingPriceWei, auction.duration, auction.creationTime);\r\n    }\r\n\r\n    function getAuctionPrice(uint256 _propertyId) external view returns (uint256) {\r\n        Auction storage auction = propertyIdToAuction[_propertyId];\r\n        require(auction.startingPriceWei > 0);\r\n\r\n        return _getAuctionPrice(auction);\r\n    }\r\n\r\n    function _transfer(address _from, address _to, uint256 _propertyId) internal {\r\n        propertyIdToOwner[_propertyId] = _to;        \r\n        Transfer(_from, _to, _propertyId);\r\n    }\r\n\r\n    function _getAuctionPrice(Auction storage _auction) internal view returns (uint256) {\r\n        uint256 secondsPassed = 0;\r\n\r\n        if (now > _auction.creationTime) {\r\n            secondsPassed = now - _auction.creationTime;\r\n        }\r\n\r\n        uint256 price = _auction.endingPriceWei;\r\n\r\n        if (secondsPassed < _auction.duration) {\r\n            uint256 priceSpread = _auction.startingPriceWei - _auction.endingPriceWei;\r\n            uint256 deltaPrice = priceSpread * secondsPassed / _auction.duration;\r\n            price = _auction.startingPriceWei - deltaPrice;\r\n        }\r\n\r\n        return price;\r\n    }\r\n}\r\n\r\n\r\ncontract LotsMain is LotsApis {\r\n\r\n    function LotsMain() public payable {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function() external payable {\r\n        require(msg.sender == address(0));\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getProperty\",\"outputs\":[{\"name\":\"parcel\",\"type\":\"string\"},{\"name\":\"street\",\"type\":\"string\"},{\"name\":\"city\",\"type\":\"string\"},{\"name\":\"state\",\"type\":\"string\"},{\"name\":\"zip\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_propertyId\",\"type\":\"uint256\"},{\"name\":\"_startingPriceWei\",\"type\":\"uint256\"},{\"name\":\"_endingPriceWei\",\"type\":\"uint256\"},{\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"createAuction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_propertyId\",\"type\":\"uint256\"}],\"name\":\"bid\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"propertyIdToOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_propertyId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_propertyId\",\"type\":\"uint256\"}],\"name\":\"getAuction\",\"outputs\":[{\"name\":\"seller\",\"type\":\"address\"},{\"name\":\"startingPriceWei\",\"type\":\"uint256\"},{\"name\":\"endingPriceWei\",\"type\":\"uint256\"},{\"name\":\"duration\",\"type\":\"uint256\"},{\"name\":\"startedAt\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_propertyId\",\"type\":\"uint256\"}],\"name\":\"getAuctionPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_propertyId\",\"type\":\"uint256\"}],\"name\":\"cancelAuction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_propertyId\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"propertyIdToAuction\",\"outputs\":[{\"name\":\"seller\",\"type\":\"address\"},{\"name\":\"startingPriceWei\",\"type\":\"uint128\"},{\"name\":\"endingPriceWei\",\"type\":\"uint128\"},{\"name\":\"duration\",\"type\":\"uint64\"},{\"name\":\"creationTime\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"propertyIdToEscrow\",\"outputs\":[{\"name\":\"seller\",\"type\":\"address\"},{\"name\":\"buyer\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint128\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_propertyId\",\"type\":\"uint256\"}],\"name\":\"cancelEscrow\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_propertyId\",\"type\":\"uint256\"}],\"name\":\"closeEscrow\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"parcel\",\"type\":\"string\"},{\"name\":\"street\",\"type\":\"string\"},{\"name\":\"city\",\"type\":\"string\"},{\"name\":\"state\",\"type\":\"string\"},{\"name\":\"zip\",\"type\":\"string\"}],\"name\":\"registerProperty\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"propertyId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"propertyId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"startingPriceWei\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"endingPriceWei\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"AuctionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"propertyId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"priceWei\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"AuctionCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"propertyId\",\"type\":\"uint256\"}],\"name\":\"AuctionCancelled\",\"type\":\"event\"}]","ContractName":"LotsMain","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://833369c1867fb5836e607b178a169c26e2642aef202b417940f6bb6583ce30e8"}]}