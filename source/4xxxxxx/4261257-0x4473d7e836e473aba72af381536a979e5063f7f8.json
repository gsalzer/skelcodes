{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13;\r\n\r\n/*\r\n\r\nCobinhood Presale Buyer\r\n========================\r\n\r\nBuys Cobinhood tokens from the crowdsale on your behalf.\r\nAuthor: /u/troythus, @troyth\r\nForked from: /u/Cintix\r\n\r\n*/\r\n\r\n// ERC20 Interface: https://github.com/ethereum/EIPs/issues/20\r\ncontract ERC20 {\r\n  function transfer(address _to, uint256 _value) returns (bool success);\r\n  function balanceOf(address _owner) constant returns (uint256 balance);\r\n}\r\n\r\ncontract CobinhoodBuyer {\r\n  // Store the amount of ETH deposited by each account.\r\n  mapping (address => uint256) public balances;\r\n  // Track whether the contract has received the tokens yet.\r\n  bool public received_tokens;\r\n  // Track whether the contract has sent ETH to the presale contract yet.\r\n  bool public purchased_tokens;\r\n  // Record ETH value of tokens currently held by contract.\r\n  uint256 public contract_eth_value;\r\n  // Emergency kill switch in case a critical bug is found.\r\n  bool public kill_switch;\r\n\r\n  // SHA3 hash of kill switch password.\r\n  bytes32 password_hash = 0xe3ce8892378c33f21165c3fa9b1c106524b2352e16ea561d943008f11f0ecce0;\r\n  // Latest time contract is allowed to buy into the crowdsale.\r\n  uint256 public latest_buy_time = 1505109600;\r\n  // Maximum amount of user ETH contract will accept.  Reduces risk of hard cap related failure.\r\n  uint256 public eth_cap = 299 ether;\r\n  // Minimum amount of user ETH contract will accept.  Reduces risk of hard cap related failure.\r\n  uint256 public eth_min = 149 ether;\r\n  // The developer address.\r\n  address public developer = 0x0575C223f5b87Be4812926037912D45B31270d3B;\r\n  // The fee claimer's address.\r\n  address public fee_claimer = 0x9793661F48b61D0b8B6D39D53CAe694b101ff028;\r\n  // The crowdsale address.\r\n  address public sale = 0x0bb9fc3ba7bcf6e5d6f6fc15123ff8d5f96cee00;\r\n  // The token address.  Settable by the developer once Cobinhood announces it.\r\n  ERC20 public token;\r\n\r\n  // Allows the developer to set the token address because we don't know it yet.\r\n  function set_address(address _token) {\r\n    // Only allow the developer to set the token addresses.\r\n    require(msg.sender == developer);\r\n    // Set the token addresse.\r\n    token = ERC20(_token);\r\n  }\r\n\r\n  // Developer override of received_tokens to make sure tokens aren't stuck.\r\n  function force_received() {\r\n      require(msg.sender == developer);\r\n      received_tokens = true;\r\n  }\r\n\r\n  // Anyone can call to see if tokens have been received, and then set the flag to let withdrawls happen.\r\n  function received_tokens() {\r\n      if( token.balanceOf(address(this)) > 0){\r\n          received_tokens = true;\r\n      }\r\n  }\r\n\r\n  // Allows the developer or anyone with the password to shut down everything except withdrawals in emergencies.\r\n  function activate_kill_switch(string password) {\r\n    // Only activate the kill switch if the sender is the developer or the password is correct.\r\n    require(msg.sender == developer || sha3(password) == password_hash);\r\n\r\n    // Irreversibly activate the kill switch.\r\n    kill_switch = true;\r\n  }\r\n\r\n  // Withdraws all ETH deposited or tokens purchased by the given user.\r\n  function withdraw(address user){\r\n    // Only allow withdrawals after the contract has had a chance to buy in.\r\n    require(received_tokens || now > latest_buy_time);\r\n    // Short circuit to save gas if the user doesn't have a balance.\r\n    if (balances[user] == 0) return;\r\n    // If the contract failed to buy into the sale, withdraw the user's ETH.\r\n    if (!received_tokens || kill_switch) {\r\n      // Store the user's balance prior to withdrawal in a temporary variable.\r\n      uint256 eth_to_withdraw = balances[user];\r\n      // Update the user's balance prior to sending ETH to prevent recursive call.\r\n      balances[user] = 0;\r\n      // Return the user's funds.  Throws on failure to prevent loss of funds.\r\n      user.transfer(eth_to_withdraw);\r\n    }\r\n    // Withdraw the user's tokens if the contract has purchased them.\r\n    else {\r\n      // Retrieve current token balance of contract.\r\n      uint256 contract_token_balance = token.balanceOf(address(this));\r\n      // Disallow token withdrawals if there are no tokens to withdraw.\r\n      require(contract_token_balance != 0);\r\n      // Store the user's token balance in a temporary variable.\r\n      uint256 tokens_to_withdraw = (balances[user] * contract_token_balance) / contract_eth_value;\r\n      // Update the value of tokens currently held by the contract.\r\n      contract_eth_value -= balances[user];\r\n      // Update the user's balance prior to sending to prevent recursive call.\r\n      balances[user] = 0;\r\n      // 1% fee if contract successfully bought tokens.\r\n      uint256 fee = tokens_to_withdraw / 100;\r\n      // Send the fee to the developer.\r\n      require(token.transfer(fee_claimer, fee));\r\n      // Send the funds.  Throws on failure to prevent loss of funds.\r\n      require(token.transfer(user, tokens_to_withdraw - fee));\r\n    }\r\n  }\r\n\r\n  // Send all ETH to the presale contract once total is between [149,299], callable by anyone.\r\n  function purchase(){\r\n    // Short circuit to save gas if the contract has already bought tokens.\r\n    if (purchased_tokens) return;\r\n    // Short circuit to save gas if the earliest buy time hasn't been reached.\r\n    if (now > latest_buy_time) return;\r\n    // Short circuit to save gas if kill switch is active.\r\n    if (kill_switch) return;\r\n    // Short circuit to save gas if the minimum buy in hasn't been achieved.\r\n    if (this.balance < eth_min) return;\r\n    // Record that the contract has bought the tokens.\r\n    purchased_tokens = true;\r\n    // Transfer all the funds to the crowdsale address\r\n    // to buy tokens.  Throws if the crowdsale hasn't started yet or has\r\n    // already completed, preventing loss of funds.\r\n    require(sale.call.value(this.balance)());\r\n  }\r\n\r\n  // Default function.  Called when a user sends ETH to the contract.\r\n  function () payable {\r\n    // Disallow deposits if kill switch is active.\r\n    require(!kill_switch);\r\n    // Only allow deposits if the contract hasn't already purchased the tokens.\r\n    require(!purchased_tokens);\r\n    // Only allow deposits that won't exceed the contract's ETH cap.\r\n    require(this.balance < eth_cap);\r\n    // Update records of deposited ETH to include the received amount.\r\n    balances[msg.sender] += msg.value;\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"force_received\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"set_address\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"latest_buy_time\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"purchased_tokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"received_tokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"purchase\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sale\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kill_switch\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contract_eth_value\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"developer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"password\",\"type\":\"string\"}],\"name\":\"activate_kill_switch\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"eth_cap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"eth_min\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fee_claimer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"CobinhoodBuyer","CompilerVersion":"v0.4.16+commit.d7661dd9","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://b5efbb9e545d9f24ec2807fede3f4296e05a20d440ffae97d729020e5c029b34"}]}