{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract ContractReceiver{\r\n    function tokenFallback(address _from, uint256 _value, bytes  _data) external;\r\n}\r\n\r\n\r\n//Basic ERC23 token, backward compatible with ERC20 transfer function.\r\n//Based in part on code by open-zeppelin: https://github.com/OpenZeppelin/zeppelin-solidity.git\r\ncontract ERC23BasicToken {\r\n    using SafeMath for uint256;\r\n    uint256 public totalSupply;\r\n    mapping(address => uint256) balances;\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Transfer(address indexed from, address indexed to, uint256 value, bytes data);\r\n\r\n    function tokenFallback(address _from, uint256 _value, bytes  _data) external {\r\n        throw;\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value, bytes _data) returns (bool success) {\r\n\r\n        //Standard ERC23 transfer function\r\n\r\n        if(isContract(_to)) {\r\n            transferToContract(_to, _value, _data);\r\n        }\r\n        else {\r\n            transferToAddress(_to, _value, _data);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) {\r\n\r\n        //standard function transfer similar to ERC20 transfer with no _data\r\n        //added due to backwards compatibility reasons\r\n\r\n        bytes memory empty;\r\n        if(isContract(_to)) {\r\n            transferToContract(_to, _value, empty);\r\n        }\r\n        else {\r\n            transferToAddress(_to, _value, empty);\r\n        }\r\n    }\r\n\r\n    function transferToAddress(address _to, uint256 _value, bytes _data) internal {\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        Transfer(msg.sender, _to, _value);\r\n        Transfer(msg.sender, _to, _value, _data);\r\n    }\r\n\r\n    function transferToContract(address _to, uint256 _value, bytes _data) internal {\r\n        balances[msg.sender] = balances[msg.sender].sub( _value);\r\n        balances[_to] = balances[_to].add( _value);\r\n        ContractReceiver receiver = ContractReceiver(_to);\r\n        receiver.tokenFallback(msg.sender, _value, _data);\r\n        Transfer(msg.sender, _to, _value);\r\n        Transfer(msg.sender, _to, _value, _data);\r\n    }\r\n\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    //assemble the given address bytecode. If bytecode exists then the _addr is a contract.\r\n    function isContract(address _addr) returns (bool is_contract) {\r\n          uint256 length;\r\n          assembly {\r\n              //retrieve the size of the code on target address, this needs assembly\r\n              length := extcodesize(_addr)\r\n          }\r\n          if(length>0) {\r\n              return true;\r\n          }\r\n          else {\r\n              return false;\r\n          }\r\n    }\r\n}\r\n\r\n// Standard ERC23 token, backward compatible with ERC20 standards.\r\n// Based on code by open-zeppelin: https://github.com/OpenZeppelin/zeppelin-solidity.git\r\ncontract ERC23StandardToken is ERC23BasicToken {\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n    event Approval (address indexed owner, address indexed spender, uint256 value);\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) {\r\n        var _allowance = allowed[_from][msg.sender];\r\n\r\n        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n        // if (_value > _allowance) throw;\r\n\r\n        balances[_to] = balances[_to].add(_value);\r\n        balances[_from] = balances[_from].sub(_value);\r\n        allowed[_from][msg.sender] = _allowance.sub(_value);\r\n        Transfer(_from, _to, _value);\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) {\r\n\r\n        // To change the approve amount you first have to reduce the addresses`\r\n        //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n        //  already 0 to mitigate the race condition described here:\r\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n        if ((_value != 0) && (allowed[msg.sender][_spender] != 0)) throw;\r\n\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n}\r\n\r\n// Based in part on code by Open-Zeppelin: https://github.com/OpenZeppelin/zeppelin-solidity.git\r\n// Based in part on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n\r\ncontract STRIMToken is ERC23StandardToken {\r\n\r\n    // metadata\r\n    string public constant name = \"STRIM Token\";\r\n    string public constant symbol = \"STR\";\r\n    uint256 public constant decimals = 18;\r\n    uint256 public fundsFromPreSale;\r\n    string public version = \"0.4\";\r\n    bool public halted; //Halt crowdsale in emergency\r\n    bool public isFinalized; // switched to true in operational state\r\n\tmapping(address => uint256) exchangeRate;\r\n    uint256 public fundingStartBlock;\r\n    uint256 public fundingEndBlock;\r\n    uint256 public constant tokenExchangeRatePreSale = 10000; // 10000 STR tokens for 1 eth at the presale\r\n    uint256 public constant tokenExchangeRateMile1 = 3000; // 3000 STR tokens for the 1 eth at first phase\r\n    uint256 public constant tokenExchangeRateMile2 = 2000; // 2000 STR tokens for the 1 eth at second phase\r\n    uint256 public constant tokenExchangeRateMile3 = 1000; // 1000 STR tokens for the 1 eth at third phase   \r\n    uint256 public constant tokenCreationMinMile1 = 10 * (10 ** 6) * 10 ** decimals; //minimum ammount of tokens to be created for the ICO to be succesfull\r\n    uint256 public constant tokenCreationMinMile2 = 78 * (10 ** 6) * 10 ** decimals; //tokens to be created for the ICO for the second milestone \r\n\tuint256 public constant tokenCreationMaxCap = 168 * (10 ** 6) * 10 ** decimals; //max tokens to be created\r\n\r\n    // contracts\r\n    address public ethFundDeposit; // deposit address for ETH for Strim Team\r\n    address public strFundDeposit; // deposit address for Strim Team use and STR User Fund\r\n    address public StrimTeam; //contract owner\r\n\r\n    // events\r\n    event LogRefund(address indexed _to, uint256 _value);\r\n    event CreateSTR(address indexed _to, uint256 _value);\r\n    event Halt(); //Halt event\r\n    event Unhalt(); //Unhalt event\r\n\r\n    modifier onlyTeam() {\r\n        //only do if call is from owner modifier\r\n        require(msg.sender == StrimTeam);\r\n        _;\r\n    }\r\n\r\n    modifier crowdsaleTransferLock() {\r\n        require(isFinalized);\r\n        _;\r\n    }\r\n\r\n    modifier whenNotHalted() {\r\n        // only do when not halted modifier\r\n        require(!halted);\r\n        _;\r\n    }\r\n\r\n    // constructor\r\n    function STRIMToken(\r\n        address _ethFundDeposit,\r\n        address _strFundDeposit,\r\n        uint256 _fundingStartBlock,\r\n        uint256 _fundingEndBlock) {\r\n        isFinalized = false; //controls pre through crowdsale state\r\n        halted = false;\r\n        ethFundDeposit = _ethFundDeposit;\r\n        strFundDeposit = _strFundDeposit;\r\n        fundingStartBlock = _fundingStartBlock;\r\n        fundingEndBlock = _fundingEndBlock;\r\n        totalSupply = 0;\r\n        StrimTeam = msg.sender;\r\n        fundsFromPreSale = 0;\r\n    }\r\n\r\n    //Fallback function when receiving Ether.\r\n    function() payable {\r\n        buy();\r\n    }\r\n\r\n    //Halt ICO in case of emergency.\r\n    function halt() onlyTeam {\r\n        halted = true;\r\n        Halt();\r\n    }\r\n\r\n    function unhalt() onlyTeam {\r\n        halted = false;\r\n        Unhalt();\r\n    }\r\n\r\n    function buy() payable {\r\n        createTokens(msg.sender);\r\n    }\r\n\r\n\r\n\r\n    //mint Tokens. Accepts ether and creates new STR tokens.\r\n    function createTokens(address recipient) public payable whenNotHalted {\r\n        require(!isFinalized);\r\n        require(block.number >= fundingStartBlock);\r\n        require(block.number <= fundingEndBlock);\r\n\t\trequire (totalSupply < tokenCreationMaxCap);\r\n        require(msg.value > 0);\r\n\r\n        uint256 retRate = returnRate();\r\n\r\n        uint256 tokens = msg.value.mul(retRate); //decimals=18, so no need to adjust for unit   \r\n        if (retRate == 10000) {\r\n            fundsFromPreSale = fundsFromPreSale.add(tokens);\r\n\t\t\texchangeRate[recipient]=0;//presale ether is non refundable as it will be used for marketing during the ICO period\r\n        } else {\r\n\t\t    exchangeRate[recipient]=retRate;\r\n\t\t}\r\n        balances[recipient] = balances[recipient].add(tokens);//map tokens to the reciepient address\t\r\n        totalSupply = totalSupply.add(tokens);\r\n\r\n        CreateSTR(msg.sender, tokens); // logs token creation\r\n        Transfer(this, recipient, tokens);\r\n    }\r\n\r\n    //Return rate of token against ether.\r\n    function returnRate() public constant returns(uint256) {\r\n        if (block.number < fundingStartBlock.add(5000)) {\r\n            return tokenExchangeRatePreSale;\r\n        } else if (totalSupply.sub(fundsFromPreSale) < tokenCreationMinMile1) {\r\n            return tokenExchangeRateMile1;\r\n        } else if (totalSupply.sub(fundsFromPreSale) < tokenCreationMinMile2) {\r\n            return tokenExchangeRateMile2;\r\n        } else {\r\n            return tokenExchangeRateMile3;  \r\n        }\r\n    }\r\n\r\n    function finalize() external onlyTeam{\r\n        require(!isFinalized);//check if already ran        \r\n        require(totalSupply >= tokenCreationMinMile1); // have to sell minimum to move to operational\r\n        require(block.number > fundingEndBlock || totalSupply >= tokenCreationMaxCap);//don't end before ico period ends or max cap reached\r\n\r\n        uint256 strVal = totalSupply.div(2);\r\n        balances[strFundDeposit] = strVal; // deposit Strim share\r\n        CreateSTR(msg.sender, strVal); // logs token creation\r\n\r\n        // move to operational        \r\n        if (!ethFundDeposit.send(this.balance)) revert(); // send the eth to Strim Team\r\n        if (!strFundDeposit.send(this.balance)) revert(); // send the str to Strim Team\r\n        isFinalized = true;\r\n    }\r\n\r\n    function sendPreSaleETH() external onlyTeam{        \r\n        require(block.number > fundingStartBlock.add(5000)); //check if the presale passed the 2 day limit \r\n        require(fundsFromPreSale > 0); //make sure that there are funds to transfer\r\n\r\n        uint256 ethFromPreSale = fundsFromPreSale.div(10000); //convert from tokens to ether\r\n        fundsFromPreSale = 0; //revert to initial state so it can't be reused \r\n\r\n        if (!ethFundDeposit.send(ethFromPreSale)) revert(); // send the eth raised for the pre sale to Strim Team\r\n\r\n    }\r\n\r\n    // Allows contributors to recover their ether in the case of a failed funding campaign.\r\n    function refund() external {\r\n        require(!isFinalized); // prevents refund if operational\r\n        require(block.number > fundingEndBlock); // prevents refund until sale period is over\r\n        require(totalSupply < tokenCreationMinMile1); // no refunds if we sold enough\r\n        require(msg.sender != strFundDeposit); // Strim not entitled to a refund\r\n        \r\n        if (exchangeRate[msg.sender] > 0) {  //presale ether is non refundable as it will be used for marketing during the ICO period\r\n\t\t    uint256 strVal = balances[msg.sender];\r\n            balances[msg.sender] = 0; //if refunded delete the users tokens\r\n            totalSupply = totalSupply.sub(strVal); // extra safe\r\n       \t    uint256 ethVal = strVal / exchangeRate[msg.sender]; // should be safe; considering it never reached the first milestone;\r\n            LogRefund(msg.sender, ethVal); // log it \r\n            if (!msg.sender.send(ethVal)) revert(); // if you're using a contract; make sure it works with .send gas limits\r\n\t\t}\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value, bytes _data) public crowdsaleTransferLock returns(bool success) {\r\n        return super.transfer(_to, _value, _data);\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public crowdsaleTransferLock {\r\n        super.transfer(_to, _value);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public crowdsaleTransferLock {\r\n        super.transferFrom(_from, _to, _value);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenExchangeRateMile3\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"isContract\",\"outputs\":[{\"name\":\"is_contract\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"StrimTeam\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenExchangeRateMile1\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"halt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundsFromPreSale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"returnRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"sendPreSaleETH\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenExchangeRatePreSale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isFinalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundingEndBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethFundDeposit\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"halted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenCreationMinMile2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"tokenFallback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"strFundDeposit\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unhalt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenCreationMinMile1\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"createTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundingStartBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenCreationMaxCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenExchangeRateMile2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_ethFundDeposit\",\"type\":\"address\"},{\"name\":\"_strFundDeposit\",\"type\":\"address\"},{\"name\":\"_fundingStartBlock\",\"type\":\"uint256\"},{\"name\":\"_fundingEndBlock\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"LogRefund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"CreateSTR\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Halt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unhalt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"STRIMToken","CompilerVersion":"v0.4.17+commit.bdeb9e52","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000146f1708d8ab639f21edf029adde35c2b15c5e26000000000000000000000000146f1708d8ab639f21edf029adde35c2b15c5e260000000000000000000000000000000000000000000000000000000000422248000000000000000000000000000000000000000000000000000000000043c288","Library":"","SwarmSource":"bzzr://f2e7cb40cde5316218747dc9e7808c758b90694c843f7da6bc93118eed65bb46"}]}