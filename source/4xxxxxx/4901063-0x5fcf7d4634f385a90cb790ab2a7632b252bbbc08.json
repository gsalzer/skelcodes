{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract EtherRacing is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    struct Customer {\r\n        bytes32 name;\r\n        uint256 earned;\r\n        uint16 c_num;\r\n        mapping (uint256 => uint16) garage;\r\n        uint256[] garage_idx;\r\n    }\r\n\r\n    struct Car {\r\n      uint256 id;\r\n      bytes32 name;\r\n      uint256 s_price;\r\n      uint256 c_price;\r\n      uint256 earning;\r\n      uint256 o_earning;\r\n      uint16 s_count;\r\n      uint16 brand;\r\n      uint8 ctype;\r\n      uint8 spd;\r\n      uint8 acc;\r\n      uint8 dur;\r\n      uint8 hndl;\r\n      mapping (address => uint16) c_owners;\r\n    }\r\n\r\n    string public constant name = 'CarToken';\r\n    string public constant symbol = 'CAR';\r\n    uint8 public constant decimals = 18;\r\n    uint256 public constant INITIAL_SUPPLY = 10000 * (10 ** uint256(decimals));\r\n\r\n    uint256 private store_balance;\r\n\r\n    mapping (address => Customer) private customers;\r\n    //mapping (address => uint256) pendingWithdrawals;\r\n    mapping (uint256 => Car) public cars;\r\n    mapping (uint256 => address[]) public yesBuyer;\r\n    mapping (address => uint256) balances;\r\n    uint256[] public carAccts;\r\n\r\n    /* Store Events */\r\n\r\n    event CarRegistered(uint256 carId);\r\n    event CarUpdated(uint256 carId);\r\n    event CarDeregistered(uint256 carId);\r\n    event CarRegistrationFailed(uint256 carId);\r\n    event CarDeregistrationFaled(uint256 carId);\r\n\r\n    event BuyCarCompleted(address customer, uint256 paymentSum);\r\n    event BuyCarFailed(address customer, uint256 customerBalance, uint256 paymentSum);\r\n    event EventCashOut (address indexed player,uint256 amount);\r\n\r\n    function EtherRacing() public payable {\r\n        store_balance = 0;\r\n        balances[tx.origin] = INITIAL_SUPPLY;\r\n    }\r\n\r\n    function() public payable {\r\n\r\n    }\r\n\r\n    function setInsertCar(bytes32 _name,\r\n                          uint256 _s_price,\r\n                          uint256 _earning,\r\n                          uint256 _o_earning,\r\n                          uint16 _brand,\r\n                          uint8 _ctype,\r\n                          uint8 _spd,\r\n                          uint8 _acc,\r\n                          uint8 _dur,\r\n                          uint8 _hndl)\r\n                          onlyOwner public {\r\n        var _id = carAccts.length + 1;\r\n        var car = Car(_id, _name, _s_price, _s_price, _earning, _o_earning,\r\n                      0, _brand, _ctype, _spd, _acc, _dur, _hndl);\r\n        cars[_id] = car;\r\n        carAccts.push(_id);\r\n        CarRegistered(_id);\r\n    }\r\n\r\n    function updateCar(uint256 _id,\r\n                        bytes32 _name,\r\n                        uint256 _s_price,\r\n                        uint256 _earning,\r\n                        uint256 _o_earning,\r\n                        uint16 _brand,\r\n                        uint8 _ctype,\r\n                        uint8 _spd,\r\n                        uint8 _acc,\r\n                        uint8 _dur,\r\n                        uint8 _hndl)\r\n                        onlyOwner public {\r\n        Car storage car = cars[_id];\r\n        car.name = _name;\r\n        car.s_price = _s_price;\r\n        car.earning = _earning;\r\n        car.o_earning = _o_earning;\r\n        car.brand = _brand;\r\n        car.ctype = _ctype;\r\n        car.spd = _spd;\r\n        car.acc = _acc;\r\n        car.dur = _dur;\r\n        car.hndl = _hndl;\r\n        CarUpdated(_id);\r\n    }\r\n\r\n    function getCar(uint256 _id) view public returns (uint256,\r\n                                                      bytes32,\r\n                                                      uint256,\r\n                                                      uint256,\r\n                                                      uint256,\r\n                                                      uint256,\r\n                                                      uint16) {\r\n        Car storage car = cars[_id];\r\n        return (car.id, car.name, car.s_price, car.c_price, car.earning, car.o_earning, car.s_count);\r\n    }\r\n\r\n    function getCars() view public returns(uint256[]) {\r\n        return carAccts;\r\n    }\r\n\r\n    function getCarName(uint256 _id) view public returns (bytes32){\r\n      return cars[_id].name;\r\n    }\r\n\r\n    function countCars() view public returns (uint256) {\r\n        return carAccts.length;\r\n    }\r\n\r\n    function deleteCar(uint256 _id) onlyOwner public returns (bool success) {\r\n      Car storage car = cars[_id];\r\n      if (car.id == _id) {\r\n        delete cars[_id];\r\n        CarDeregistered(_id);\r\n        return true;\r\n      }\r\n      CarDeregistrationFaled(_id);\r\n      return false;\r\n    }\r\n\r\n    function buyCar(uint256 _id) public payable returns (bool success) {\r\n        require(_id > 0);\r\n        require(cars[_id].c_price > 0 && (msg.value + balances[msg.sender]) > 0);\r\n        require((msg.value + balances[msg.sender]) >= cars[_id].c_price);\r\n        Customer storage customer = customers[msg.sender];\r\n        customer.garage[_id] += 1;\r\n        customer.garage_idx.push(_id);\r\n        customer.c_num += 1;\r\n        cars[_id].s_count += 1;\r\n\r\n        if ((msg.value + balances[msg.sender]) > cars[_id].c_price)\r\n            balances[msg.sender] += msg.value - cars[_id].c_price;\r\n\r\n        uint256 f_price = cars[_id].earning * cars[_id].s_count + cars[_id].o_earning;\r\n        if(f_price > cars[_id].s_price){\r\n          cars[_id].c_price = f_price;\r\n        }\r\n        for (uint i = 0; i < yesBuyer[_id].length; ++i){\r\n            address buyer = yesBuyer[_id][i];\r\n            uint16 buy_count = cars[_id].c_owners[buyer];\r\n            uint256 earned = cars[_id].earning * buy_count;\r\n            balances[buyer] += earned;\r\n            customers[buyer].earned += earned;\r\n\r\n        }\r\n        balances[owner] += cars[_id].c_price - cars[_id].earning * cars[_id].s_count;\r\n        cars[_id].c_owners[msg.sender] +=1;\r\n        if(cars[_id].c_owners[msg.sender] == 1){\r\n          yesBuyer[_id].push(msg.sender);\r\n        }\r\n        BuyCarCompleted(msg.sender, cars[_id].c_price);\r\n        return true;\r\n    }\r\n\r\n    function getMyCarsIdx() public view returns (uint256[]){\r\n        Customer storage customer = customers[msg.sender];\r\n        return customer.garage_idx;\r\n    }\r\n\r\n    function getMyCarsIdxCount(uint256 _id) public view returns (uint16){\r\n        Customer storage customer = customers[msg.sender];\r\n        return customer.garage[_id];\r\n    }\r\n\r\n    function getCustomer() public view returns (bytes32 _name,\r\n                                                uint256 _balance,\r\n                                                uint256 _earned,\r\n                                                uint16 _c_num) {\r\n        if (msg.sender != address(0)) {\r\n            _name = customers[msg.sender].name;\r\n            _balance = balances[msg.sender];\r\n            _earned = customers[msg.sender].earned;\r\n            _c_num = customers[msg.sender].c_num;\r\n        }\r\n        return (_name, _balance, _earned, _c_num);\r\n    }\r\n\r\n    function earnedOf(address _address) public view returns (uint256) {\r\n        return customers[_address].earned;\r\n    }\r\n\r\n    function carnumOf(address _address) public view returns (uint16) {\r\n        return customers[_address].c_num;\r\n    }\r\n\r\n    function getBalanceInEth(address addr) public view returns (uint256) {\r\n  \t\treturn convert(getBalance(addr),2);\r\n  \t}\r\n\r\n  \tfunction getBalance(address addr) public view returns(uint256) {\r\n  \t\treturn balances[addr];\r\n  \t}\r\n\r\n    function getStoreBalance() onlyOwner public constant returns (uint256) {\r\n        return this.balance;\r\n    }\r\n\r\n    function withdraw(uint256 _amount) public returns (bool) {\r\n\r\n        require(_amount >= 0);\r\n        require(_amount == uint256(uint128(_amount)));\r\n        require(this.balance >= _amount);\r\n        require(balances[msg.sender] >= _amount);\r\n\r\n        if (_amount == 0)\r\n            _amount = balances[msg.sender];\r\n\r\n        balances[msg.sender] -= _amount;\r\n\r\n        if (!msg.sender.send(_amount))\r\n            balances[msg.sender] += _amount;\r\n            return false;\r\n        return true;\r\n\r\n        EventCashOut(msg.sender, _amount);\r\n    }\r\n\r\n    function convert(uint256 amount,uint256 conversionRate) public pure returns (uint256 convertedAmount)\r\n    {\r\n      return amount * conversionRate;\r\n    }\r\n\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCars\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INITIAL_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"earnedOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_name\",\"type\":\"bytes32\"},{\"name\":\"_s_price\",\"type\":\"uint256\"},{\"name\":\"_earning\",\"type\":\"uint256\"},{\"name\":\"_o_earning\",\"type\":\"uint256\"},{\"name\":\"_brand\",\"type\":\"uint16\"},{\"name\":\"_ctype\",\"type\":\"uint8\"},{\"name\":\"_spd\",\"type\":\"uint8\"},{\"name\":\"_acc\",\"type\":\"uint8\"},{\"name\":\"_dur\",\"type\":\"uint8\"},{\"name\":\"_hndl\",\"type\":\"uint8\"}],\"name\":\"updateCar\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"carAccts\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"countCars\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getCar\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"deleteCar\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCustomer\",\"outputs\":[{\"name\":\"_name\",\"type\":\"bytes32\"},{\"name\":\"_balance\",\"type\":\"uint256\"},{\"name\":\"_earned\",\"type\":\"uint256\"},{\"name\":\"_c_num\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"buyCar\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getBalanceInEth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getMyCarsIdxCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"conversionRate\",\"type\":\"uint256\"}],\"name\":\"convert\",\"outputs\":[{\"name\":\"convertedAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"yesBuyer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getCarName\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"bytes32\"},{\"name\":\"_s_price\",\"type\":\"uint256\"},{\"name\":\"_earning\",\"type\":\"uint256\"},{\"name\":\"_o_earning\",\"type\":\"uint256\"},{\"name\":\"_brand\",\"type\":\"uint16\"},{\"name\":\"_ctype\",\"type\":\"uint8\"},{\"name\":\"_spd\",\"type\":\"uint8\"},{\"name\":\"_acc\",\"type\":\"uint8\"},{\"name\":\"_dur\",\"type\":\"uint8\"},{\"name\":\"_hndl\",\"type\":\"uint8\"}],\"name\":\"setInsertCar\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMyCarsIdx\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"carnumOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getStoreBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cars\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"name\",\"type\":\"bytes32\"},{\"name\":\"s_price\",\"type\":\"uint256\"},{\"name\":\"c_price\",\"type\":\"uint256\"},{\"name\":\"earning\",\"type\":\"uint256\"},{\"name\":\"o_earning\",\"type\":\"uint256\"},{\"name\":\"s_count\",\"type\":\"uint16\"},{\"name\":\"brand\",\"type\":\"uint16\"},{\"name\":\"ctype\",\"type\":\"uint8\"},{\"name\":\"spd\",\"type\":\"uint8\"},{\"name\":\"acc\",\"type\":\"uint8\"},{\"name\":\"dur\",\"type\":\"uint8\"},{\"name\":\"hndl\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"carId\",\"type\":\"uint256\"}],\"name\":\"CarRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"carId\",\"type\":\"uint256\"}],\"name\":\"CarUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"carId\",\"type\":\"uint256\"}],\"name\":\"CarDeregistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"carId\",\"type\":\"uint256\"}],\"name\":\"CarRegistrationFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"carId\",\"type\":\"uint256\"}],\"name\":\"CarDeregistrationFaled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"customer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"paymentSum\",\"type\":\"uint256\"}],\"name\":\"BuyCarCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"customer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"customerBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"paymentSum\",\"type\":\"uint256\"}],\"name\":\"BuyCarFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EventCashOut\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"EtherRacing","CompilerVersion":"v0.4.20-nightly.2018.1.11+commit.c20b6da","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://f3e03de386ee34a73eb68ccdd8e97d92210e6bc1e288abfbda6106416bcf0b37"}]}