{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\n/**\r\n * Copyright (C) VEGIG Crypto\r\n * All rights reserved.\r\n *  *\r\n * This code is adapted from Fixed supply token contract \r\n * (c) BokkyPooBah 2017. The MIT Licence.\r\n *\r\n * MIT License\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy \r\n * of this software and associated documentation files (the \"\"Software\"\"), to \r\n * deal in the Software without restriction, including without limitation the \r\n * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or \r\n * sell copies of the Software, and to permit persons to whom the Software is \r\n * furnished to do so, subject to the following conditions: \r\n *  The above copyright notice and this permission notice shall be included in \r\n *  all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED AS IS, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, \r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN \r\n * THE SOFTWARE.\r\n *\r\n */\r\n \r\n /**\r\n * \t@title SafeMath\r\n * \t@dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n \r\n/*\r\n * \tStandard ERC20 interface. Adapted from https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\r\n *\r\n*/ \r\n\tcontract ERC20Interface {\r\n      \r\n\t\tfunction totalSupply() public constant returns (uint256 totSupply);   \r\n\t    function balanceOf(address _owner) public constant returns (uint256 balance);   \r\n\t\tfunction transfer(address _to, uint256 _amount) public returns (bool success);\t  \r\n\t\tfunction transferFrom(address _from, address _to, uint256 _amount) public returns (bool success);   \r\n\t\tfunction approve(address _spender, uint256 _value) public returns (bool success);   \r\n\t\tfunction allowance(address _owner, address _spender) public constant returns (uint256 remaining);             \r\n\t\tevent Transfer(address indexed _from, address indexed _to, uint256 _value);   \r\n\t\tevent Approval(address indexed _owner, address indexed _spender, uint256 _value); \t\r\n\t  \r\n\t}\r\n\r\n/*\r\n * \tInterface to cater for future requirements (if applicable)\r\n *\r\n*/\r\n\tcontract VEGIGInterface {\r\n  \r\n\t\tfunction send (address _to, uint256 _amount) public returns (bool success);  \r\n\t\tfunction sendFrom(address _from, address _to, uint256 _amount) public returns (bool success);\r\n\t\tfunction increaseApproval (address _spender, uint _addedValue) public returns (bool success);\r\n\t\tfunction decreaseApproval (address _spender, uint _subtractedValue) public returns (bool success);\r\n\t\tfunction transferOwnership (address _newOwner) public;\t\r\n\t}\r\n\r\n/*\r\n * \tVEGIGCrypto contract\r\n *\r\n*/\r\n\tcontract VEGIGCrypto is ERC20Interface, VEGIGInterface {\r\n\t\tusing SafeMath for uint256;\r\n\t\r\n\t\tstring public symbol = \"VGIG\";\r\n\t\tstring public name = \"VEGIG\";\r\n\t\tuint8 public constant decimals = 8;\r\n\t\tuint256 public constant _totalSupply = 19000000000000000;\r\n      \r\n\t\t// Owner of this contract\r\n\t\taddress public owner;\r\n   \r\n\t\t// Balances for each account\r\n\t\tmapping(address => uint256) balances;\r\n   \r\n\t\t// Owner of account approves the transfer of an amount to another account\r\n\t\tmapping(address => mapping (address => uint256)) allowed;\r\n   \r\n\t\t// Functions with this modifier can only be executed by the owner\r\n\t\tmodifier onlyOwner() {          \r\n\t\t\trequire(msg.sender == owner);\r\n\t\t\t_;\t\t  \r\n\t\t}\r\n\t  \r\n\t\t// Functions with this modifier can only be executed not to this contract. This is to avoid sending ERC20 tokens to this contract address\r\n\t\tmodifier notThisContract(address _to) {\t\t\r\n\t\t\trequire(_to != address(this));\r\n\t\t\t_;\t\t\t  \r\n\t\t}\r\n   \r\n\t\t// Constructor\r\n\t\tfunction VEGIGCrypto() public {\t  \r\n\t\t\towner = msg.sender;\r\n\t\t\tbalances[owner] = _totalSupply;\t\t  \r\n\t\t}\r\n      \r\n\t\t// This is safety mechanism to allow ETH (if any) in this contract address to be sent to the contract owner\r\n\t\tfunction () payable public {\r\n\t\t\tif(this.balance > 1000000000000000000){\r\n\t\t\t\towner.transfer(this.balance);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Returns the account balance of another account with address _owner.\r\n\t\tfunction balanceOf(address _owner) public constant returns (uint256 balance) {\r\n\t\t\treturn balances[_owner];\r\n\t\t}\r\n\t  \r\n\t\t// Returns the total token supply.\r\n\t\tfunction totalSupply() public constant returns (uint256 totSupply) {\r\n\t\t\treturn _totalSupply;\r\n\t\t}\r\n\t    \r\n\t\t// Transfer the balance from owner's account to another account\r\n\t\tfunction transfer(address _to, uint256 _amount) public notThisContract(_to) returns (bool success) {\r\n\t\t\trequire(_to != 0x0);\r\n\t\t\trequire(_amount > 0);\r\n\t\t\trequire(balances[msg.sender] >= _amount);\r\n\t\t\trequire(balances[_to] + _amount > balances[_to]);\r\n\t\t\tbalances[msg.sender] -= _amount;\r\n\t\t\tbalances[_to] += _amount;\t\t  \r\n\t\t\tTransfer(msg.sender, _to, _amount);\r\n\t\t\treturn true;\t \r\n\t\t}\r\n   \r\n\t\t// The transferFrom method is used for a withdraw workflow, allowing contracts to transfer tokens on your behalf. \r\n\t\t// This can be used for example to allow a contract to transfer tokens on your behalf and/or to charge fees in sub-currencies. \r\n\t\t// The function SHOULD throw unless the _from account has deliberately authorized the sender of the message via some mechanism.\r\n\t\t// Note Transfers of 0 values MUST be treated as normal transfers and fire the Transfer event.\r\n\t\tfunction transferFrom( address _from, address _to, uint256 _amount) public notThisContract(_to) returns (bool success) {\t\r\n\t\t\r\n\t\t   require(balances[_from] >= _amount);\r\n\t\t   require(allowed[_from][msg.sender] >= _amount);\r\n\t\t   require(_amount > 0);\r\n\t\t   require(balances[_to] + _amount > balances[_to]);\r\n\t\t   \r\n\t\t   balances[_from] -= _amount;\r\n           allowed[_from][msg.sender] -= _amount;\r\n           balances[_to] += _amount;\r\n           Transfer(_from, _to, _amount);\r\n           return true;        \r\n\t\t}\r\n\t \r\n\t\t// Allows _spender to withdraw from your account multiple times, up to the _value amount. \r\n\t\t// If this function is called again it overwrites the current allowance with _value\r\n\t\t// To change the approve amount you first have to reduce the addresses`\r\n\t\t// allowance to zero by calling `approve(_spender, 0)` if it is not\r\n\t\t// already 0 to mitigate the race condition described here:\r\n\t\t// https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729   \t\t\r\n\t\tfunction approve(address _spender, uint256 _amount) public returns (bool) {\t\t\r\n\t\t\r\n\t\t\trequire((_amount == 0) || (allowed[msg.sender][_spender] == 0));\r\n\t\t  \r\n\t\t\tallowed[msg.sender][_spender] = _amount;\r\n\t\t\tApproval(msg.sender, _spender, _amount);\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\t\r\n\t\t// Returns the amount which _spender is still allowed to withdraw from _owner\r\n\t\tfunction allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n\t\t\treturn allowed[_owner][_spender];\r\n\t\t}\r\n\t\t\r\n\t\tfunction send(address _to, uint256 _amount) public notThisContract(_to) returns (bool success) {\r\n\t\t    return transfer(_to, _amount);\r\n\t\t}\r\n\t\t\r\n\t\tfunction sendFrom( address _from, address _to, uint256 _amount) public notThisContract(_to) returns (bool success) {\t\r\n\t\t    return transferFrom(_from, _to, _amount);\r\n\t\t}\r\n\t\t   \r\n\t\t// Approve should be called when allowed[_spender] == 0. To increment\r\n\t\t// allowed value is better to use this function to avoid 2 calls (and wait until \r\n\t\t// the first transaction is mined)\r\n\t\t// From MonolithDAO Token.sol\r\n\t\tfunction increaseApproval (address _spender, uint _addedValue) public \r\n\t\t\treturns (bool success) {\r\n\t\t\t\r\n\t\t\tallowed[msg.sender][_spender] += _addedValue;\r\n\t\t\tApproval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\t// Decrease approval\r\n\t\tfunction decreaseApproval (address _spender, uint _subtractedValue) public\r\n\t\t\treturns (bool success) {\r\n\t\t\t\r\n\t\t\tuint oldValue = allowed[msg.sender][_spender];\r\n\t\t\t\r\n\t\t\tif (_subtractedValue > oldValue) {\r\n\t\t\t\tallowed[msg.sender][_spender] = 0;\r\n\t\t\t} else {\r\n\t\t\t\tallowed[msg.sender][_spender] -= _subtractedValue;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tApproval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\t\t\t\t\t\r\n\t\t// Change the name and symbol assigned to this contract\r\n\t\tfunction changeNameSymbol(string _name, string _symbol) public onlyOwner {\r\n\t\t\tname = _name;\r\n\t\t\tsymbol = _symbol;\r\n\t\t}\r\n\t\t\r\n\t\t// Transfer owner of contract to a new owner\r\n\t\tfunction transferOwnership(address _newOwner) public onlyOwner {\r\n\t\t\towner = _newOwner;\r\n\t\t}\r\n\t}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"totSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"changeNameSymbol\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"sendFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"send\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"VEGIGCrypto","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://5b8ef857d9d723e70e619c9c6ccfa693358aff4a31e212e952ddaab249160ba7"}]}