{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\n/* taking ideas from FirstBlood token */\r\ncontract SafeMath {\r\n\r\nfunction safeAdd(uint256 x, uint256 y) internal returns(uint256) {\r\nuint256 z = x + y;\r\n      assert((z >= x) && (z >= y));\r\n      return z;\r\n    }\r\n\r\n    function safeSubtract(uint256 x, uint256 y) internal returns(uint256) {\r\n      assert(x >= y);\r\n      uint256 z = x - y;\r\n      return z;\r\n    }\r\n\r\n    function safeMult(uint256 x, uint256 y) internal returns(uint256) {\r\n      uint256 z = x * y;\r\n      assert((x == 0)||(z/x == y));\r\n      return z;\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract EvenCoin is SafeMath {\r\n\r\n    // metadata\r\n    string public constant name = \"EvenCoin\";\r\n    string public constant symbol = \"EVN\";\r\n    uint256 public constant decimals = 18;\r\n    string public version = \"1.0\";\r\n\r\n    // contracts\r\n    address public founder;      // deposit address for ETH for EvenCoin\r\n    // crowdsale parameters\r\n    bool public isFinalized;              // switched to true in operational state\r\n    bool public saleStarted; //switched to true during ICO\r\n    uint public firstWeek;\r\n    uint public secondWeek;\r\n    uint public thirdWeek;\r\n    uint256 public soldCoins;\r\n    uint256 public totalGenesisAddresses;\r\n    uint256 public currentGenesisAddresses;\r\n    uint256 public initialSupplyPerAddress;\r\n    uint256 public initialBlockCount;\r\n    uint256 private minedBlocks;\r\n    uint256 public rewardPerBlockPerAddress;\r\n    uint256 private availableAmount;\r\n    uint256 private availableBalance;\r\n    uint256 private totalMaxAvailableAmount;\r\n    uint256 public constant founderFund = 5 * (10**6) * 10**decimals;   // 12.5m EvenCoin reserved for Owners\r\n    uint256 public constant preMinedFund = 10 * (10**6) * 10**decimals;   // 12.5m EvenCoin reserved for Promotion, Exchange etc.\r\n    uint256 public tokenExchangeRate = 2000; //  EvenCoin tokens per 1 ETH\r\n    mapping (address => uint256) balances;\r\n    mapping (address => bool) public genesisAddress;\r\n\r\n\r\n    // events\r\n    event CreateEVN(address indexed _to, uint256 _value);\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n\r\n    // constructor\r\n    function EvenCoin()\r\n    {\r\n      isFinalized = false;                   //controls pre through crowdsale state\r\n      saleStarted = false;\r\n      soldCoins = 0;\r\n      founder = '0x9e8De5BE5B046D2c85db22324260D624E0ddadF4';\r\n      initialSupplyPerAddress = 21250 * 10**decimals;\r\n      rewardPerBlockPerAddress = 898444106206663;\r\n      totalGenesisAddresses = 4000;\r\n      currentGenesisAddresses = 0;\r\n      initialBlockCount = 0;\r\n      balances[founder] = founderFund;    // Deposit tokens for Owners\r\n      CreateEVN(founder, founderFund);  // logs Owners deposit\r\n\r\n\r\n\r\n    }\r\n\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function currentEthBlock() constant returns (uint256 blockNumber)\r\n    {\r\n    \treturn block.number;\r\n    }\r\n\r\n    function currentBlock() constant returns (uint256 blockNumber)\r\n    {\r\n      if(initialBlockCount == 0){\r\n        return 0;\r\n      }\r\n      else{\r\n      return block.number - initialBlockCount;\r\n    }\r\n    }\r\n\r\n    function setGenesisAddressArray(address[] _address) public returns (bool success)\r\n    {\r\n      if(initialBlockCount == 0) throw;\r\n      uint256 tempGenesisAddresses = currentGenesisAddresses + _address.length;\r\n      if (tempGenesisAddresses <= totalGenesisAddresses )\r\n    \t{\r\n    \t\tif (msg.sender == founder)\r\n    \t\t{\r\n          currentGenesisAddresses = currentGenesisAddresses + _address.length;\r\n    \t\t\tfor (uint i = 0; i < _address.length; i++)\r\n    \t\t\t{\r\n    \t\t\t\tbalances[_address[i]] = initialSupplyPerAddress;\r\n    \t\t\t\tgenesisAddress[_address[i]] = true;\r\n    \t\t\t}\r\n    \t\t\treturn true;\r\n    \t\t}\r\n    \t}\r\n    \treturn false;\r\n    }\r\n\r\n    function availableBalanceOf(address _address) constant returns (uint256 Balance)\r\n    {\r\n    \tif (genesisAddress[_address])\r\n    \t{\r\n    \t\tminedBlocks = block.number - initialBlockCount;\r\n        if(minedBlocks % 2 != 0){\r\n          minedBlocks = minedBlocks - 1;\r\n        }\r\n\r\n    \t\tif (minedBlocks >= 23652000) return balances[_address];\r\n    \t\t  availableAmount = rewardPerBlockPerAddress*minedBlocks;\r\n    \t\t  totalMaxAvailableAmount = initialSupplyPerAddress - availableAmount;\r\n          availableBalance = balances[_address] - totalMaxAvailableAmount;\r\n          return availableBalance;\r\n    \t}\r\n    \telse {\r\n    \t\treturn balances[_address];\r\n      }\r\n    }\r\n\r\n    function totalSupply() constant returns (uint256 totalSupply)\r\n    {\r\n      if (initialBlockCount != 0)\r\n      {\r\n      minedBlocks = block.number - initialBlockCount;\r\n      if(minedBlocks % 2 != 0){\r\n        minedBlocks = minedBlocks - 1;\r\n      }\r\n    \tavailableAmount = rewardPerBlockPerAddress*minedBlocks;\r\n    }\r\n    else{\r\n      availableAmount = 0;\r\n    }\r\n    \treturn availableAmount*totalGenesisAddresses+founderFund+preMinedFund;\r\n    }\r\n\r\n    function maxTotalSupply() constant returns (uint256 maxSupply)\r\n    {\r\n    \treturn initialSupplyPerAddress*totalGenesisAddresses+founderFund+preMinedFund;\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value)\r\n    {\r\n      if (genesisAddress[_to]) throw;\r\n\r\n      if (balances[msg.sender] < _value) throw;\r\n\r\n      if (balances[_to] + _value < balances[_to]) throw;\r\n\r\n      if (genesisAddress[msg.sender])\r\n      {\r\n    \t   minedBlocks = block.number - initialBlockCount;\r\n         if(minedBlocks % 2 != 0){\r\n           minedBlocks = minedBlocks - 1;\r\n         }\r\n    \t    if (minedBlocks < 23652000)\r\n    \t     {\r\n    \t\t       availableAmount = rewardPerBlockPerAddress*minedBlocks;\r\n    \t\t       totalMaxAvailableAmount = initialSupplyPerAddress - availableAmount;\r\n    \t\t       availableBalance = balances[msg.sender] - totalMaxAvailableAmount;\r\n    \t\t       if (_value > availableBalance) throw;\r\n    \t     }\r\n      }\r\n      balances[msg.sender] -= _value;\r\n      balances[_to] += _value;\r\n      Transfer(msg.sender, _to, _value);\r\n    }\r\n\r\n    /// @dev Accepts ether and creates new EVN tokens.\r\n    function () payable {\r\n      //bool isPreSale = true;\r\n      if (isFinalized) throw;\r\n      if (!saleStarted) throw;\r\n      if (msg.value == 0) throw;\r\n      //change exchange rate based on duration\r\n      if (now > firstWeek && now < secondWeek){\r\n        tokenExchangeRate = 1500;\r\n      }\r\n      else if (now > secondWeek && now < thirdWeek){\r\n        tokenExchangeRate = 1000;\r\n      }\r\n      else if (now > thirdWeek){\r\n        tokenExchangeRate = 500;\r\n      }\r\n      //create tokens\r\n      uint256 tokens = safeMult(msg.value, tokenExchangeRate); // check that we're not over totals\r\n      uint256 checkedSupply = safeAdd(soldCoins, tokens);\r\n\r\n      // return money if something goes wrong\r\n      if (preMinedFund < checkedSupply) throw;  // odd fractions won't be found\r\n      soldCoins = checkedSupply;\r\n      //All good. start the transfer\r\n      balances[msg.sender] += tokens;  // safeAdd not needed\r\n      CreateEVN(msg.sender, tokens);  // logs token creation\r\n    }\r\n\r\n    /// EvenCoin Ends the funding period and sends the ETH home\r\n    function finalize() external {\r\n      if (isFinalized) throw;\r\n      if (msg.sender != founder) throw; // locks finalize to the ultimate ETH owner\r\n      if (soldCoins < preMinedFund){\r\n        uint256 remainingTokens = safeSubtract(preMinedFund, soldCoins);\r\n        uint256 checkedSupply = safeAdd(soldCoins, remainingTokens);\r\n        if (preMinedFund < checkedSupply) throw;\r\n        soldCoins = checkedSupply;\r\n        balances[msg.sender] += remainingTokens;\r\n        CreateEVN(msg.sender, remainingTokens);\r\n      }\r\n      // move to operational\r\n      if(!founder.send(this.balance)) throw;\r\n      isFinalized = true;  // send the eth to EvenCoin\r\n      if (block.number % 2 != 0){\r\n        initialBlockCount = safeAdd(block.number, 1);\r\n      }\r\n      else{\r\n        initialBlockCount = block.number;\r\n      }\r\n    }\r\n\r\n    function startSale() external {\r\n      if(saleStarted) throw;\r\n      if (msg.sender != founder) throw; // locks start sale to the ultimate ETH owner\r\n      firstWeek = now + 1 weeks; //sets duration of first cutoff\r\n      secondWeek = firstWeek + 1 weeks; //sets duration of second cutoff\r\n      thirdWeek = secondWeek + 1 weeks; //sets duration of third cutoff\r\n      saleStarted = true; //start the sale\r\n    }\r\n\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentEthBlock\",\"outputs\":[{\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialSupplyPerAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalGenesisAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"availableBalanceOf\",\"outputs\":[{\"name\":\"Balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxTotalSupply\",\"outputs\":[{\"name\":\"maxSupply\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenExchangeRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"founder\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleStarted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"founderFund\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"firstWeek\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address[]\"}],\"name\":\"setGenesisAddressArray\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preMinedFund\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isFinalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentGenesisAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"soldCoins\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"secondWeek\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startSale\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"thirdWeek\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"genesisAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardPerBlockPerAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentBlock\",\"outputs\":[{\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialBlockCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"CreateEVN\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"EvenCoin","CompilerVersion":"v0.4.11+commit.68ef5810","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://1cd4d15cf4bccf55185ebaacd1c87f1c14406b39a057562dc9f14697c323344f"}]}