{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13;\r\n\r\n/* \r\n`* is owned\r\n*/\r\ncontract owned {\r\n\r\n    address public owner;\r\n\r\n    function owned() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        if (msg.sender != owner) revert();\r\n        _;\r\n    }\r\n\r\n    function ownerTransferOwnership(address newOwner)\r\n        onlyOwner\r\n    {\r\n        owner = newOwner;\r\n    }\r\n\r\n}\r\n\r\n/* \r\n* safe math\r\n*/\r\ncontract DSSafeAddSub {\r\n\r\n    function safeToAdd(uint a, uint b) internal returns (bool) {\r\n        return (a + b >= a);\r\n    }\r\n    \r\n    function safeAdd(uint a, uint b) internal returns (uint) {\r\n        if (!safeToAdd(a, b)) revert();\r\n        return a + b;\r\n    }\r\n\r\n    function safeToSubtract(uint a, uint b) internal returns (bool) {\r\n        return (b <= a);\r\n    }\r\n\r\n    function safeSub(uint a, uint b) internal returns (uint) {\r\n        if (!safeToSubtract(a, b)) revert();\r\n        return a - b;\r\n    } \r\n\r\n}\r\n\r\n\r\n/**\r\n *\r\n * @title  DoneToken\r\n * \r\n * The official token powering Donation Efficiency.\r\n * DoneToken is a ERC.20 standard token with some custom functionality\r\n *\r\n */ \r\n\r\n\r\ncontract DoneToken is owned, DSSafeAddSub {\r\n\r\n    /* check address */\r\n    modifier onlyBy(address _account) {\r\n        if (msg.sender != _account) revert();\r\n        _;\r\n    }    \r\n\r\n    /* vars */\r\n    string public standard = 'Token 1.0';\r\n    string public name = \"DONE\";\r\n    string public symbol = \"DET\";\r\n    uint8 public decimals = 16;\r\n    uint public totalSupply = 150000000000000000000000; \r\n\r\n    address public priviledgedAddress;  \r\n    bool public tokensFrozen;\r\n    uint public crowdfundDeadline = now + 1 hours;       \r\n    uint public nextFreeze = now + 2 hours;\r\n    uint public nextThaw = now + 3 hours;\r\n   \r\n\r\n    /* map balances */\r\n    mapping (address => uint) public balanceOf;\r\n    mapping (address => mapping (address => uint)) public allowance;  \r\n\r\n    /* events */\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n    event LogTokensFrozen(bool indexed Frozen);    \r\n\r\n    /*\r\n    *  @notice sends all tokens to msg.sender on init    \r\n    */  \r\n    function DoneToken(){\r\n        /* send creator all initial tokens 25,000,000 */\r\n        balanceOf[msg.sender] = 150000000000000000000000;\r\n        /* tokens are not frozen */  \r\n        tokensFrozen = false;                                      \r\n\r\n    }  \r\n\r\n    /*\r\n    *  @notice public function    \r\n    *  @param _to address to send tokens to   \r\n    *  @param _value number of tokens to transfer \r\n    *  @returns boolean success         \r\n    */     \r\n    function transfer(address _to, uint _value) public\r\n        returns (bool success)    \r\n    {\r\n        if(tokensFrozen && msg.sender != priviledgedAddress) return false;  /* transfer only by priviledgedAddress during crowdfund or reward phases */\r\n        if (balanceOf[msg.sender] < _value) return false;                   /* check if the sender has enough */\r\n        if (balanceOf[_to] + _value < balanceOf[_to]) return false;         /* check for overflows */              \r\n        balanceOf[msg.sender] -=  _value;                                   /* subtract from the sender */\r\n        balanceOf[_to] += _value;                                           /* add the same to the recipient */\r\n        Transfer(msg.sender, _to, _value);                                  /* notify anyone listening that this transfer took place */\r\n        return true;\r\n    }      \r\n\r\n    /*\r\n    *  @notice public function    \r\n    *  @param _from address to send tokens from \r\n    *  @param _to address to send tokens to   \r\n    *  @param _value number of tokens to transfer     \r\n    *  @returns boolean success      \r\n    *  another contract attempts to spend tokens on your behalf\r\n    */       \r\n    function transferFrom(address _from, address _to, uint _value) public\r\n        returns (bool success) \r\n    {                \r\n        if(tokensFrozen && msg.sender != priviledgedAddress) return false;  /* transfer only by priviledgedAddress during crowdfund or reward phases */\r\n        if (balanceOf[_from] < _value) return false;                        /* check if the sender has enough */\r\n        if (balanceOf[_to] + _value < balanceOf[_to]) return false;         /* check for overflows */                \r\n        if (_value > allowance[_from][msg.sender]) return false;            /* check allowance */\r\n        balanceOf[_from] -= _value;                                         /* subtract from the sender */\r\n        balanceOf[_to] += _value;                                           /* add the same to the recipient */\r\n        allowance[_from][msg.sender] -= _value;                             /* reduce allowance */\r\n        Transfer(_from, _to, _value);                                       /* notify anyone listening that this transfer took place */\r\n        return true;\r\n    }        \r\n \r\n    /*\r\n    *  @notice public function    \r\n    *  @param _spender address being granted approval to spend on behalf of msg.sender\r\n    *  @param _value number of tokens granted approval for _spender to spend on behalf of msg.sender    \r\n    *  @returns boolean success      \r\n    *  approves another contract to spend some tokens on your behalf\r\n    */      \r\n    function approve(address _spender, uint _value) public\r\n        returns (bool success)\r\n    {\r\n        /* set allowance for _spender on behalf of msg.sender */\r\n        allowance[msg.sender][_spender] = _value;\r\n\r\n        /* log event about transaction */\r\n        Approval(msg.sender, _spender, _value);        \r\n        return true;\r\n    } \r\n  \r\n    /*\r\n    *  @notice address restricted function \r\n    *  crowdfund contract calls this to burn its unsold coins \r\n    */     \r\n    function priviledgedAddressBurnUnsoldCoins() public\r\n        /* only crowdfund contract can call this */\r\n        onlyBy(priviledgedAddress)\r\n    {\r\n        /* totalSupply should equal total tokens in circulation */\r\n        totalSupply = safeSub(totalSupply, balanceOf[priviledgedAddress]); \r\n        /* burns unsold tokens from crowdfund address */\r\n        balanceOf[priviledgedAddress] = 0;\r\n    }\r\n\r\n    /*\r\n    *  @notice public function \r\n    *  locks/unlocks tokens on a recurring cycle\r\n    */         \r\n    function updateTokenStatus() public\r\n    {\r\n        \r\n        /* locks tokens during initial crowdfund period */\r\n        if(now < crowdfundDeadline){                       \r\n            tokensFrozen = true;         \r\n            LogTokensFrozen(tokensFrozen);  \r\n        }  \r\n\r\n        /* locks tokens */\r\n        if(now >= nextFreeze){          \r\n            tokensFrozen = true;\r\n            LogTokensFrozen(tokensFrozen);  \r\n        }\r\n\r\n        /* unlocks tokens */\r\n        if(now >= nextThaw){         \r\n            tokensFrozen = false;\r\n            nextFreeze = now + 2 hours;\r\n            nextThaw = now + 3 hours;              \r\n            LogTokensFrozen(tokensFrozen);  \r\n        }        \r\n      \r\n    }                              \r\n\r\n    /*\r\n    *  @notice owner restricted function\r\n    *  @param _newPriviledgedAddress the address\r\n    *  only this address can burn unsold tokens\r\n    *  transfer tokens only by priviledgedAddress during crowdfund or reward phases\r\n    */      \r\n    function ownerSetPriviledgedAddress(address _newPriviledgedAddress) public \r\n        onlyOwner\r\n    {\r\n        priviledgedAddress = _newPriviledgedAddress;\r\n    }   \r\n                    \r\n    \r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_newPriviledgedAddress\",\"type\":\"address\"}],\"name\":\"ownerSetPriviledgedAddress\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"updateTokenStatus\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensFrozen\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextThaw\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"standard\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"priviledgedAddressBurnUnsoldCoins\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdfundDeadline\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextFreeze\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"priviledgedAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"ownerTransferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"Frozen\",\"type\":\"bool\"}],\"name\":\"LogTokensFrozen\",\"type\":\"event\"}]","ContractName":"DoneToken","CompilerVersion":"v0.4.13+commit.fb4cb1a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://2422b7dc2b4c334bca11f19fd510b12b1585616769b3c7a10ef2e77bb1e50870"}]}