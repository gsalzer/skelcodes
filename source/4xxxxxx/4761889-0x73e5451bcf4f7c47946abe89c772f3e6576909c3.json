{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n\r\ncontract DragonPricing is Ownable {\r\n    \r\n   \r\n    \r\n    DragonCrowdsaleCore dragoncrowdsalecore;\r\n    uint public firstroundprice  = .000000000083333333 ether;\r\n    uint public secondroundprice = .000000000100000000 ether;\r\n    uint public thirdroundprice  = .000000000116686114 ether;\r\n    \r\n    uint public price;\r\n    \r\n    \r\n    function DragonPricing() {\r\n        \r\n        \r\n        price = firstroundprice;\r\n        \r\n        \r\n    }\r\n    \r\n    \r\n    \r\n    \r\n    function crowdsalepricing( address tokenholder, uint amount, uint crowdsaleCounter )  returns ( uint , uint ) {\r\n        \r\n        uint award;\r\n        uint donation = 0;\r\n        return ( DragonAward ( amount, crowdsaleCounter ) ,donation );\r\n        \r\n    }\r\n    \r\n    \r\n    function precrowdsalepricing( address tokenholder, uint amount )   returns ( uint, uint )  {\r\n        \r\n       \r\n        uint award;\r\n        uint donation;\r\n        require ( presalePackage( amount ) == true );\r\n        ( award, donation ) = DragonAwardPresale ( amount );\r\n        \r\n        return ( award, donation );\r\n        \r\n    }\r\n    \r\n    \r\n    function presalePackage ( uint amount ) internal returns ( bool )  {\r\n        \r\n        if( amount != .3333333 ether && amount != 3.3333333 ether && amount != 33.3333333 ether  ) return false;\r\n        return true;\r\n   }\r\n    \r\n    \r\n    function DragonAwardPresale ( uint amount ) internal returns ( uint , uint ){\r\n        \r\n        if ( amount ==   .3333333 ether ) return   (   10800000000 ,   800000000 );\r\n        if ( amount ==  3.3333333 ether ) return   (  108800000000 ,  8800000000 );\r\n        if ( amount == 33.3333333 ether ) return   ( 1088800000000 , 88800000000 );\r\n    \r\n    }\r\n    \r\n    \r\n    \r\n    function DragonAward ( uint amount, uint crowdsaleCounter ) internal returns ( uint  ){\r\n        \r\n       \r\n        //uint crowdsaleCounter  = dragoncrowdsalecore.crowdsaleCounter();\r\n        if ( crowdsaleCounter > 1000000000000000 &&  crowdsaleCounter < 2500000000000000 ) price = secondroundprice;\r\n        if ( crowdsaleCounter >= 2500000000000000 ) price = thirdroundprice;\r\n          \r\n        return ( amount / price );\r\n          \r\n    \r\n    }\r\n    \r\n  \r\n    \r\n    function setFirstRoundPricing ( uint _pricing ) onlyOwner {\r\n        \r\n        firstroundprice = _pricing;\r\n        \r\n    }\r\n    \r\n    function setSecondRoundPricing ( uint _pricing ) onlyOwner {\r\n        \r\n        secondroundprice = _pricing;\r\n        \r\n    }\r\n    \r\n    function setThirdRoundPricing ( uint _pricing ) onlyOwner {\r\n        \r\n        thirdroundprice = _pricing;\r\n        \r\n    }\r\n    \r\n    \r\n}\r\n\r\ncontract Dragon {\r\n    function transfer(address receiver, uint amount)returns(bool ok);\r\n    function balanceOf( address _address )returns(uint256);\r\n}\r\n\r\n\r\n\r\n\r\n\r\ncontract DragonCrowdsaleCore is Ownable, DragonPricing {\r\n    \r\n    using SafeMath for uint;\r\n    \r\n   // address public owner;\r\n    address public beneficiary;\r\n    address public charity;\r\n    address public advisor;\r\n    address public front;\r\n    bool public advisorset;\r\n    \r\n    uint public tokensSold;\r\n    uint public etherRaised;\r\n    uint public presold;\r\n    uint public presoldMax;\r\n    \r\n    uint public crowdsaleCounter;\r\n    \r\n   \r\n    uint public advisorTotal;\r\n    uint public advisorCut;\r\n    \r\n    Dragon public tokenReward;\r\n    \r\n   \r\n    \r\n    mapping ( address => bool ) public alreadyParticipated;\r\n    \r\n    \r\n    \r\n    modifier onlyFront() {\r\n        if (msg.sender != front) {\r\n            throw;\r\n        }\r\n        _;\r\n    }\r\n\r\n\r\n    \r\n    \r\n    \r\n    function DragonCrowdsaleCore(){\r\n        \r\n        tokenReward = Dragon( 0x814f67fa286f7572b041d041b1d99b432c9155ee ); // Dragon Token Address\r\n        owner = msg.sender;\r\n        beneficiary = msg.sender;\r\n        charity = msg.sender;\r\n        advisor = msg.sender;\r\n       \r\n        advisorset = false;\r\n       \r\n        presold = 0;\r\n        presoldMax = 3500000000000000;\r\n        crowdsaleCounter = 0;\r\n        \r\n        advisorCut = 0;\r\n        advisorTotal = 1667 ether;\r\n        \r\n        \r\n    }\r\n    \r\n   \r\n    // runs during precrowdsale - can only be called by main crowdsale contract\r\n    function precrowdsale ( address tokenholder ) onlyFront payable {\r\n        \r\n        \r\n        require ( presold < presoldMax );\r\n        uint award;  // amount of dragons to credit to tokenholder\r\n        uint donation; // donation to charity\r\n        require ( alreadyParticipated[ tokenholder ]  != true ) ;  \r\n        alreadyParticipated[ tokenholder ] = true;\r\n        \r\n        DragonPricing pricingstructure = new DragonPricing();\r\n        ( award, donation ) = pricingstructure.precrowdsalepricing( tokenholder , msg.value ); \r\n        \r\n        tokenReward.transfer ( charity , donation ); // send dragons to charity\r\n        presold = presold.add( award ); //add number of tokens sold in presale\r\n        presold = presold.add( donation ); //add number of tokens sent via charity\r\n        \r\n        tokensSold = tokensSold.add(donation);  //add charity donation to total number of tokens sold \r\n        tokenReward.transfer ( tokenholder , award ); // immediate transfer of dragons to token buyer\r\n        \r\n        if ( advisorCut < advisorTotal ) { advisorSiphon();} \r\n       \r\n        else \r\n          { beneficiary.transfer ( msg.value ); } //send ether to beneficiary\r\n          \r\n       \r\n        etherRaised = etherRaised.add( msg.value ); // tallies ether raised\r\n        tokensSold = tokensSold.add(award); // tallies total dragons sold\r\n        \r\n    }\r\n    \r\n    // runs when crowdsale is active - can only be called by main crowdsale contract\r\n    function crowdsale ( address tokenholder  ) onlyFront payable {\r\n        \r\n        \r\n        uint award;  // amount of dragons to send to tokenholder\r\n        uint donation; // donation to charity\r\n        DragonPricing pricingstructure = new DragonPricing();\r\n        ( award , donation ) = pricingstructure.crowdsalepricing( tokenholder, msg.value, crowdsaleCounter ); \r\n         crowdsaleCounter += award;\r\n        \r\n        tokenReward.transfer ( tokenholder , award ); // immediate transfer to token holders\r\n       \r\n        if ( advisorCut < advisorTotal ) { advisorSiphon();} // send advisor his share\r\n       \r\n        else \r\n          { beneficiary.transfer ( msg.value ); } //send all ether to beneficiary\r\n        \r\n        etherRaised = etherRaised.add( msg.value );  //etherRaised += msg.value; // tallies ether raised\r\n        tokensSold = tokensSold.add(award); //tokensSold  += award; // tallies total dragons sold\r\n       \r\n        \r\n        \r\n    }\r\n    \r\n    \r\n    // pays the advisor part of the incoming ether\r\n    function advisorSiphon() internal {\r\n        \r\n         uint share = msg.value/10;\r\n         uint foradvisor = share;\r\n             \r\n           if ( (advisorCut + share) > advisorTotal ) foradvisor = advisorTotal.sub( advisorCut ); \r\n             \r\n           advisor.transfer ( foradvisor );  // advisor gets 10% of the incoming ether\r\n            \r\n           advisorCut = advisorCut.add( foradvisor );\r\n           beneficiary.transfer( share * 9 ); // the ether balance goes to the benfeciary\r\n           if ( foradvisor != share ) beneficiary.transfer( share.sub(foradvisor) ); // if 10% of the incoming ether exceeds the total advisor is supposed to get , then this gives them a smaller share to not exceed max\r\n        \r\n        \r\n        \r\n    }\r\n    \r\n   \r\n\r\n    \r\n    // use this to set the crowdsale beneficiary address\r\n    function transferBeneficiary ( address _newbeneficiary ) onlyOwner {\r\n        \r\n        beneficiary = _newbeneficiary;\r\n        \r\n    }\r\n    \r\n    // use this to set the charity address\r\n    function transferCharity ( address _charity ) onlyOwner {\r\n        \r\n        charity = _charity;\r\n        \r\n    }\r\n    \r\n    // sets crowdsale address\r\n    function setFront ( address _front ) onlyOwner {\r\n        \r\n        front = _front;\r\n        \r\n    }\r\n    // sets advisors address\r\n    function setAdvisor ( address _advisor ) onlyOwner {\r\n        \r\n        require ( advisorset == false );\r\n        advisorset = true;\r\n        advisor = _advisor;\r\n        \r\n    }\r\n    \r\n   \r\n        \r\n    //empty the crowdsale contract of Dragons and forward balance to beneficiary\r\n    function withdrawCrowdsaleDragons() onlyOwner{\r\n        \r\n        uint256 balance = tokenReward.balanceOf( address( this ) );\r\n        tokenReward.transfer( beneficiary, balance );\r\n        \r\n        \r\n    }\r\n    \r\n    //manually send different dragon packages\r\n    function manualSend ( address tokenholder, uint packagenumber ) onlyOwner {\r\n        \r\n        \r\n          if ( packagenumber != 1 &&  packagenumber != 2 &&  packagenumber != 3 ) revert();\r\n        \r\n          uint award;\r\n          uint donation;\r\n          \r\n          if ( packagenumber == 1 )  { award =   10800000000; donation =   800000000; }\r\n          if ( packagenumber == 2 )  { award =  108800000000; donation =  8800000000; }\r\n          if ( packagenumber == 3 )  { award = 1088800000000; donation = 88800000000; }\r\n          \r\n          \r\n          tokenReward.transfer ( tokenholder , award ); \r\n          tokenReward.transfer ( charity , donation ); \r\n          \r\n          presold = presold.add( award ); //add number of tokens sold in presale\r\n          presold = presold.add( donation ); //add number of tokens sent via charity\r\n          tokensSold = tokensSold.add(award); // tallies total dragons sold\r\n          tokensSold = tokensSold.add(donation); // tallies total dragons sold\r\n        \r\n    }\r\n   \r\n   \r\n    \r\n    \r\n    \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"firstroundprice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_pricing\",\"type\":\"uint256\"}],\"name\":\"setThirdRoundPricing\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_charity\",\"type\":\"address\"}],\"name\":\"transferCharity\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newbeneficiary\",\"type\":\"address\"}],\"name\":\"transferBeneficiary\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenholder\",\"type\":\"address\"}],\"name\":\"precrowdsale\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"thirdroundprice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"advisor\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenholder\",\"type\":\"address\"}],\"name\":\"crowdsale\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenholder\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"precrowdsalepricing\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"alreadyParticipated\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_advisor\",\"type\":\"address\"}],\"name\":\"setAdvisor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenReward\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"secondroundprice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"charity\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenholder\",\"type\":\"address\"},{\"name\":\"packagenumber\",\"type\":\"uint256\"}],\"name\":\"manualSend\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawCrowdsaleDragons\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_pricing\",\"type\":\"uint256\"}],\"name\":\"setFirstRoundPricing\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"front\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_pricing\",\"type\":\"uint256\"}],\"name\":\"setSecondRoundPricing\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presoldMax\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenholder\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"crowdsaleCounter\",\"type\":\"uint256\"}],\"name\":\"crowdsalepricing\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleCounter\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"etherRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"advisorTotal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"advisorCut\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"advisorset\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_front\",\"type\":\"address\"}],\"name\":\"setFront\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"DragonCrowdsaleCore","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://a339afdbcfdf27c7e1ecf21e00cbf2dbf31bb51c9c34ca32bd0854c4a500e9a3"}]}