{"status":"1","message":"OK","result":[{"SourceCode":"contract ESportsConstants {\r\n    uint constant TOKEN_DECIMALS = 18;\r\n    uint8 constant TOKEN_DECIMALS_UINT8 = uint8(TOKEN_DECIMALS);\r\n    uint constant TOKEN_DECIMAL_MULTIPLIER = 10 ** TOKEN_DECIMALS;\r\n\r\n    uint constant RATE = 240; // = 1 ETH\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    function Ownable() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) onlyOwner {\r\n        require(newOwner != address(0));\r\n        OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract ESportsFreezingStorage is Ownable {\r\n    // Timestamp when token release is enabled\r\n    uint64 public releaseTime;\r\n\r\n    // ERC20 basic token contract being held\r\n    // ERC20Basic token;\r\n    ESportsToken token;\r\n    \r\n    function ESportsFreezingStorage(ESportsToken _token, uint64 _releaseTime) { //ERC20Basic\r\n        require(_releaseTime > now);\r\n        \r\n        releaseTime = _releaseTime;\r\n        token = _token;\r\n    }\r\n\r\n    function release(address _beneficiary) onlyOwner returns(uint) {\r\n        //require(now >= releaseTime);\r\n        if (now < releaseTime) return 0;\r\n\r\n        uint amount = token.balanceOf(this);\r\n        //require(amount > 0);\r\n        if (amount == 0)  return 0;\r\n\r\n        // token.safeTransfer(beneficiary, amount);\r\n        //require(token.transfer(_beneficiary, amount));\r\n        bool result = token.transfer(_beneficiary, amount);\r\n        if (!result) return 0;\r\n        \r\n        return amount;\r\n    }\r\n}\r\n\r\n/**\r\n * @title RefundVault\r\n * @dev This contract is used for storing funds while a crowdsale\r\n * is in progress. Supports refunding the money if crowdsale fails,\r\n * and forwarding it if crowdsale is successful.\r\n */\r\ncontract RefundVault is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    enum State {Active, Refunding, Closed}\r\n\r\n    mapping (address => uint256) public deposited;\r\n\r\n    address public wallet;\r\n\r\n    State public state;\r\n\r\n    event Closed();\r\n\r\n    event RefundsEnabled();\r\n\r\n    event Refunded(address indexed beneficiary, uint256 weiAmount);\r\n\r\n    function RefundVault(address _wallet) {\r\n        require(_wallet != 0x0);\r\n        wallet = _wallet;\r\n        state = State.Active;\r\n    }\r\n\r\n    function deposit(address investor) onlyOwner payable {\r\n        require(state == State.Active);\r\n        deposited[investor] = deposited[investor].add(msg.value);\r\n    }\r\n\r\n    function close() onlyOwner {\r\n        require(state == State.Active);\r\n        state = State.Closed;\r\n        Closed();\r\n        wallet.transfer(this.balance);\r\n    }\r\n\r\n    function enableRefunds() onlyOwner {\r\n        require(state == State.Active);\r\n        state = State.Refunding;\r\n        RefundsEnabled();\r\n    }\r\n\r\n    function refund(address investor, uint weiRaised) onlyOwner {\r\n        require(state == State.Refunding);\r\n\r\n        uint256 depositedValue = deposited[investor];\r\n        deposited[investor] = 0;\r\n        investor.transfer(depositedValue);\r\n        \r\n        Refunded(investor, depositedValue);\r\n    }\r\n}\r\n\r\n/**\r\n * @title Crowdsale \r\n * @dev Crowdsale is a base contract for managing a token crowdsale.\r\n *\r\n * Crowdsales have a start and end timestamps, where investors can make\r\n * token purchases and the crowdsale will assign them tokens based\r\n * on a token per ETH rate. Funds collected are forwarded to a wallet \r\n * as they arrive.\r\n */\r\ncontract Crowdsale {\r\n    using SafeMath for uint;\r\n\r\n    // The token being sold\r\n    MintableToken public token;\r\n\r\n    // start and end timestamps where investments are allowed (both inclusive)\r\n    uint32 public startTime;\r\n    uint32 public endTime;\r\n\r\n    // address where funds are collected\r\n    address public wallet;\r\n\r\n    // how many token units a buyer gets per wei\r\n    uint public rate;\r\n\r\n    // amount of raised money in wei\r\n    uint public weiRaised;\r\n\r\n    /**\r\n     * @dev Amount of already sold tokens.\r\n     */\r\n    uint public soldTokens;\r\n\r\n    /**\r\n     * @dev Maximum amount of tokens to mint.\r\n     */\r\n    uint public hardCap;\r\n\r\n    /**\r\n     * event for token purchase logging\r\n     * @param purchaser who paid for the tokens\r\n     * @param beneficiary who got the tokens\r\n     * @param value weis paid for purchase\r\n     * @param amount amount of tokens purchased\r\n     */\r\n    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint value, uint amount);\r\n\r\n    function Crowdsale(uint32 _startTime, uint32 _endTime, uint _rate, uint _hardCap, address _wallet, address _token) {\r\n        require(_startTime >= now);\r\n        require(_endTime >= _startTime);\r\n        require(_rate > 0);\r\n        require(_wallet != 0x0);\r\n        require(_hardCap > _rate);\r\n\r\n        // token = createTokenContract();\r\n        token = MintableToken(_token);\r\n\r\n        startTime = _startTime;\r\n        endTime = _endTime;\r\n        rate = _rate;\r\n        hardCap = _hardCap;\r\n        wallet = _wallet;\r\n    }\r\n\r\n    // creates the token to be sold.\r\n    // override this method to have crowdsale of a specific mintable token.\r\n    // function createTokenContract() internal returns (MintableToken) {\r\n    //     return new MintableToken();\r\n    // }\r\n\r\n    /**\r\n     * @dev this method might be overridden for implementing any sale logic.\r\n     * @return Actual rate.\r\n     */\r\n    function getRate() internal constant returns (uint) {\r\n        return rate;\r\n    }\r\n\r\n    // Fallback function can be used to buy tokens\r\n    function() payable {\r\n        buyTokens(msg.sender, msg.value);\r\n    }\r\n\r\n    // Low level token purchase function\r\n    function buyTokens(address beneficiary, uint amountWei) internal {\r\n        require(beneficiary != 0x0);\r\n\r\n        // Total minted tokens\r\n        uint totalSupply = token.totalSupply();\r\n\r\n        // Actual token minting rate (with considering bonuses and discounts)\r\n        uint actualRate = getRate();\r\n\r\n        require(validPurchase(amountWei, actualRate, totalSupply));\r\n\r\n        // Calculate token amount to be created\r\n        // uint tokens = rate.mul(msg.value).div(1 ether);\r\n        uint tokens = amountWei.mul(actualRate);\r\n\r\n        if (msg.value == 0) { // if it is a btc purchase then check existence all tokens (no change)\r\n            require(tokens.add(totalSupply) <= hardCap);\r\n        }\r\n\r\n        // Change, if minted token would be less\r\n        uint change = 0;\r\n\r\n        // If hard cap reached\r\n        if (tokens.add(totalSupply) > hardCap) {\r\n            // Rest tokens\r\n            uint maxTokens = hardCap.sub(totalSupply);\r\n            uint realAmount = maxTokens.div(actualRate);\r\n\r\n            // Rest tokens rounded by actualRate\r\n            tokens = realAmount.mul(actualRate);\r\n            change = amountWei.sub(realAmount);\r\n            amountWei = realAmount;\r\n        }\r\n\r\n        // Bonuses\r\n        postBuyTokens(beneficiary, tokens);\r\n\r\n        // Update state\r\n        weiRaised = weiRaised.add(amountWei);\r\n        soldTokens = soldTokens.add(tokens);\r\n\r\n        token.mint(beneficiary, tokens);\r\n        TokenPurchase(msg.sender, beneficiary, amountWei, tokens);\r\n\r\n        if (msg.value != 0) {\r\n            if (change != 0) {\r\n                msg.sender.transfer(change);\r\n            }\r\n            forwardFunds(amountWei);\r\n        }\r\n    }\r\n\r\n    // Send ether to the fund collection wallet\r\n    // Override to create custom fund forwarding mechanisms\r\n    function forwardFunds(uint amountWei) internal {\r\n        wallet.transfer(amountWei);\r\n    }\r\n\r\n    // Trasfer bonuses and adding delayed bonuses\r\n    function postBuyTokens(address _beneficiary, uint _tokens) internal {\r\n    }\r\n\r\n    /**\r\n     * @dev Check if the specified purchase is valid.\r\n     * @return true if the transaction can buy tokens\r\n     */\r\n    function validPurchase(uint _amountWei, uint _actualRate, uint _totalSupply) internal constant returns (bool) {\r\n        bool withinPeriod = now >= startTime && now <= endTime;\r\n        bool nonZeroPurchase = _amountWei != 0;\r\n        bool hardCapNotReached = _totalSupply <= hardCap.sub(_actualRate);\r\n\r\n        return withinPeriod && nonZeroPurchase && hardCapNotReached;\r\n    }\r\n\r\n    /**\r\n     * @dev Because of discount hasEnded might be true, but validPurchase returns false.\r\n     * @return true if crowdsale event has ended\r\n     */\r\n    function hasEnded() public constant returns (bool) {\r\n        return now > endTime || token.totalSupply() > hardCap.sub(getRate());\r\n    }\r\n\r\n    /**\r\n     * @return true if crowdsale event has started\r\n     */\r\n    function hasStarted() public constant returns (bool) {\r\n        return now >= startTime;\r\n    }\r\n}\r\n\r\n/**\r\n * @title FinalizableCrowdsale\r\n * @dev Extension of Crowsdale where an owner can do extra work\r\n * after finishing. \r\n */\r\ncontract FinalizableCrowdsale is Crowdsale, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    bool public isFinalized = false;\r\n\r\n    event Finalized();\r\n\r\n    function FinalizableCrowdsale(uint32 _startTime, uint32 _endTime, uint _rate, uint _hardCap, address _wallet, address _token)\r\n            Crowdsale(_startTime, _endTime, _rate, _hardCap, _wallet, _token) {\r\n    }\r\n\r\n    /**\r\n     * @dev Must be called after crowdsale ends, to do some extra finalization\r\n     * work. Calls the contract's finalization function.\r\n     */\r\n    function finalize() onlyOwner {\r\n        require(!isFinalized);\r\n        require(hasEnded());\r\n\r\n        isFinalized = true;\r\n\r\n        finalization();\r\n        Finalized();        \r\n    }\r\n\r\n    /**\r\n     * @dev Can be overriden to add finalization logic. The overriding function\r\n     * should call super.finalization() to ensure the chain of finalization is\r\n     * executed entirely.\r\n     */\r\n    function finalization() internal {\r\n    }\r\n}\r\n\r\n/**\r\n * @title RefundableCrowdsale\r\n * @dev Extension of Crowdsale contract that adds a funding goal, and\r\n * the possibility of users getting a refund if goal is not met.\r\n * Uses a RefundVault as the crowdsale's vault.\r\n */\r\ncontract RefundableCrowdsale is FinalizableCrowdsale {\r\n    using SafeMath for uint256;\r\n\r\n    // minimum amount of funds to be raised in weis\r\n    uint public goal;\r\n\r\n    // refund vault used to hold funds while crowdsale is running\r\n    RefundVault public vault;\r\n\r\n    function RefundableCrowdsale(uint32 _startTime, uint32 _endTime, uint _rate, uint _hardCap, address _wallet, address _token, uint _goal)\r\n            FinalizableCrowdsale(_startTime, _endTime, _rate, _hardCap, _wallet, _token) {\r\n        require(_goal > 0);\r\n        vault = new RefundVault(wallet);\r\n        goal = _goal;\r\n    }\r\n\r\n    // We're overriding the fund forwarding from Crowdsale.\r\n    // In addition to sending the funds, we want to call\r\n    // the RefundVault deposit function\r\n    function forwardFunds(uint amountWei) internal {\r\n        if (goalReached()) {\r\n            wallet.transfer(amountWei);\r\n        }\r\n        else {\r\n            vault.deposit.value(amountWei)(msg.sender);\r\n        }\r\n    }\r\n\r\n    // if crowdsale is unsuccessful, investors can claim refunds here\r\n    function claimRefund() public {\r\n        require(isFinalized);\r\n        require(!goalReached());\r\n\r\n        vault.refund(msg.sender, weiRaised);\r\n    }\r\n\r\n    // vault finalization task, called when owner calls finalize()\r\n    function finalization() internal {\r\n        super.finalization();\r\n\r\n        if (goalReached()) {\r\n            vault.close();\r\n        }\r\n        else {\r\n            vault.enableRefunds();\r\n        }\r\n    }\r\n\r\n    function goalReached() public constant returns (bool) {\r\n        return weiRaised >= goal;\r\n    }\r\n}\r\n\r\ncontract ESportsMainCrowdsale is ESportsConstants, RefundableCrowdsale {\r\n    uint constant OVERALL_AMOUNT_TOKENS = 60000000 * TOKEN_DECIMAL_MULTIPLIER; // overall 100.00%\r\n    uint constant TEAM_BEN_TOKENS = 6000000 * TOKEN_DECIMAL_MULTIPLIER; // 20.00% // Founders\r\n    uint constant TEAM_PHIL_TOKENS = 6000000 * TOKEN_DECIMAL_MULTIPLIER;\r\n    uint constant COMPANY_COLD_STORAGE_TOKENS = 12000000 * TOKEN_DECIMAL_MULTIPLIER; // 20.00%\r\n    uint constant INVESTOR_TOKENS = 3000000 * TOKEN_DECIMAL_MULTIPLIER; // 5.00%\r\n    uint constant BONUS_TOKENS = 3000000 * TOKEN_DECIMAL_MULTIPLIER; // 5.00% // Pre-sale\r\n\tuint constant BUFFER_TOKENS = 6000000 * TOKEN_DECIMAL_MULTIPLIER; // 10.00%\r\n    uint constant PRE_SALE_TOKENS = 12000000 * TOKEN_DECIMAL_MULTIPLIER; // 20.00%\r\n\r\n    // Mainnet addresses\r\n    address constant TEAM_BEN_ADDRESS = 0x2E352Ed15C4321f4dd7EdFc19402666dE8713cd8;\r\n    address constant TEAM_PHIL_ADDRESS = 0x4466de3a8f4f0a0f5470b50fdc9f91fa04e00e34;\r\n    address constant INVESTOR_ADDRESS = 0x14f8d0c41097ca6fddb6aa4fd6a3332af3741847;\r\n    address constant BONUS_ADDRESS = 0x5baee4a9938d8f59edbe4dc109119983db4b7bd6;\r\n    address constant COMPANY_COLD_STORAGE_ADDRESS = 0x700d6ae53be946085bb91f96eb1cf9e420236762;\r\n    address constant PRE_SALE_ADDRESS = 0xcb2809926e615245b3af4ebce5af9fbe1a6a4321;\r\n    \r\n    address btcBuyer = 0x1eee4c7d88aadec2ab82dd191491d1a9edf21e9a;\r\n\r\n    ESportsBonusProvider public bonusProvider;\r\n\r\n    bool private isInit = false;\r\n    \r\n\t/**\r\n     * Constructor function\r\n     */\r\n    function ESportsMainCrowdsale(\r\n        uint32 _startTime,\r\n        uint32 _endTime,\r\n        uint _softCapWei, // 4000000 EUR\r\n        address _wallet,\r\n        address _token\r\n\t) RefundableCrowdsale(\r\n        _startTime,\r\n        _endTime, \r\n        RATE,\r\n        OVERALL_AMOUNT_TOKENS,\r\n        _wallet,\r\n        _token,\r\n        _softCapWei\r\n\t) {\r\n\t}\r\n\r\n    /**\r\n     * @dev Release delayed bonus tokens\r\n     * @return Amount of got bonus tokens\r\n     */\r\n    function releaseBonus() returns(uint) {\r\n        return bonusProvider.releaseBonus(msg.sender, soldTokens);\r\n    }\r\n\r\n    /**\r\n     * @dev Trasfer bonuses and adding delayed bonuses\r\n     * @param _beneficiary Future bonuses holder\r\n     * @param _tokens Amount of bonus tokens\r\n     */\r\n    function postBuyTokens(address _beneficiary, uint _tokens) internal {\r\n        uint bonuses = bonusProvider.getBonusAmount(_beneficiary, soldTokens, _tokens, startTime);\r\n        bonusProvider.addDelayedBonus(_beneficiary, soldTokens, _tokens);\r\n\r\n        if (bonuses > 0) {\r\n            bonusProvider.sendBonus(_beneficiary, bonuses);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Initialization of crowdsale. Starts once after deployment token contract\r\n     * , deployment crowdsale contract and changу token contract's owner \r\n     */\r\n    function init() onlyOwner public returns(bool) {\r\n        require(!isInit);\r\n\r\n        ESportsToken ertToken = ESportsToken(token);\r\n        isInit = true;\r\n\r\n        ESportsBonusProvider bProvider = new ESportsBonusProvider(ertToken, COMPANY_COLD_STORAGE_ADDRESS);\r\n        // bProvider.transferOwnership(owner);\r\n        bonusProvider = bProvider;\r\n\r\n        mintToFounders(ertToken);\r\n\r\n        require(token.mint(INVESTOR_ADDRESS, INVESTOR_TOKENS));\r\n        require(token.mint(COMPANY_COLD_STORAGE_ADDRESS, COMPANY_COLD_STORAGE_TOKENS));\r\n        require(token.mint(PRE_SALE_ADDRESS, PRE_SALE_TOKENS));\r\n\r\n        // bonuses\r\n        require(token.mint(BONUS_ADDRESS, BONUS_TOKENS));\r\n        require(token.mint(bonusProvider, BUFFER_TOKENS)); // mint bonus token to bonus provider\r\n        \r\n        ertToken.addExcluded(INVESTOR_ADDRESS);\r\n        ertToken.addExcluded(BONUS_ADDRESS);\r\n        ertToken.addExcluded(COMPANY_COLD_STORAGE_ADDRESS);\r\n        ertToken.addExcluded(PRE_SALE_ADDRESS);\r\n\r\n        ertToken.addExcluded(address(bonusProvider));\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Mint of tokens in the name of the founders and freeze part of them\r\n     */\r\n    function mintToFounders(ESportsToken ertToken) internal {\r\n        ertToken.mintTimelocked(TEAM_BEN_ADDRESS, TEAM_BEN_TOKENS.mul(20).div(100), startTime + 1 years);\r\n        ertToken.mintTimelocked(TEAM_BEN_ADDRESS, TEAM_BEN_TOKENS.mul(30).div(100), startTime + 3 years);\r\n        ertToken.mintTimelocked(TEAM_BEN_ADDRESS, TEAM_BEN_TOKENS.mul(30).div(100), startTime + 5 years);\r\n        require(token.mint(TEAM_BEN_ADDRESS, TEAM_BEN_TOKENS.mul(20).div(100)));\r\n\r\n        ertToken.mintTimelocked(TEAM_PHIL_ADDRESS, TEAM_PHIL_TOKENS.mul(20).div(100), startTime + 1 years);\r\n        ertToken.mintTimelocked(TEAM_PHIL_ADDRESS, TEAM_PHIL_TOKENS.mul(30).div(100), startTime + 3 years);\r\n        ertToken.mintTimelocked(TEAM_PHIL_ADDRESS, TEAM_PHIL_TOKENS.mul(30).div(100), startTime + 5 years);\r\n        require(token.mint(TEAM_PHIL_ADDRESS, TEAM_PHIL_TOKENS.mul(20).div(100)));\r\n    }\r\n\r\n    /**\r\n     * @dev Purchase for bitcoin. Can start only btc buyer\r\n     */\r\n    function buyForBitcoin(address _beneficiary, uint _amountWei) public returns(bool) {\r\n        require(msg.sender == btcBuyer);\r\n\r\n        buyTokens(_beneficiary, _amountWei);\r\n        \r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Set new address who can buy tokens for bitcoin\r\n     */\r\n    function setBtcBuyer(address _newBtcBuyerAddress) onlyOwner returns(bool) {\r\n        require(_newBtcBuyerAddress != 0x0);\r\n\r\n        btcBuyer = _newBtcBuyerAddress;\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Finish the crowdsale\r\n     */\r\n    function finalization() internal {\r\n        super.finalization();\r\n        token.finishMinting();\r\n\r\n        bonusProvider.releaseThisBonuses();\r\n\r\n        if (goalReached()) {\r\n            ESportsToken(token).allowMoveTokens();\r\n        }\r\n        token.transferOwnership(owner); // change token owner\r\n    }\r\n}\r\n\r\ncontract ESportsBonusProvider is ESportsConstants, Ownable {\r\n    // 1) 10% on your investment during first week\r\n    // 2) 10% to all investors during ICO ( not presale) if we reach 5 000 000 euro investments\r\n\r\n    using SafeMath for uint;\r\n\r\n    ESportsToken public token;\r\n    address public returnAddressBonuses;\r\n    mapping (address => uint256) investorBonuses;\r\n\r\n    uint constant FIRST_WEEK = 7 days;\r\n    uint constant BONUS_THRESHOLD_ETR = 20000 * RATE * TOKEN_DECIMAL_MULTIPLIER; // 5 000 000 EUR -> 20 000 ETH -> ETR\r\n\r\n    function ESportsBonusProvider(ESportsToken _token, address _returnAddressBonuses) {\r\n        token = _token;\r\n        returnAddressBonuses = _returnAddressBonuses;\r\n    }\r\n\r\n    function getBonusAmount(\r\n        address _buyer,\r\n        uint _totalSold,\r\n        uint _amountTokens,\r\n        uint32 _startTime\r\n    ) onlyOwner public constant returns (uint) {\r\n        uint bonus = 0;\r\n        \r\n        // Apply bonus for amount\r\n        if (now < _startTime + FIRST_WEEK && now >= _startTime) {\r\n            bonus = bonus.add(_amountTokens.div(10)); // 1\r\n        }\r\n\r\n        return bonus;\r\n    }\r\n\r\n    function addDelayedBonus(\r\n        address _buyer,\r\n        uint _totalSold,\r\n        uint _amountTokens\r\n    ) onlyOwner public returns (uint) {\r\n        uint bonus = 0;\r\n\r\n        if (_totalSold < BONUS_THRESHOLD_ETR) {\r\n            uint amountThresholdBonus = _amountTokens.div(10); // 2\r\n            investorBonuses[_buyer] = investorBonuses[_buyer].add(amountThresholdBonus); \r\n            bonus = bonus.add(amountThresholdBonus);\r\n        }\r\n\r\n        return bonus;\r\n    }\r\n\r\n    function releaseBonus(address _buyer, uint _totalSold) onlyOwner public returns (uint) {\r\n        require(_totalSold >= BONUS_THRESHOLD_ETR);\r\n        require(investorBonuses[_buyer] > 0);\r\n\r\n        uint amountBonusTokens = investorBonuses[_buyer];\r\n        investorBonuses[_buyer] = 0;\r\n        require(token.transfer(_buyer, amountBonusTokens));\r\n\r\n        return amountBonusTokens;\r\n    }\r\n\r\n    function getDelayedBonusAmount(address _buyer) public constant returns(uint) {\r\n        return investorBonuses[_buyer];\r\n    }\r\n\r\n    function sendBonus(address _buyer, uint _amountBonusTokens) onlyOwner public {\r\n        require(token.transfer(_buyer, _amountBonusTokens));\r\n    }\r\n\r\n    function releaseThisBonuses() onlyOwner public {\r\n        uint remainBonusTokens = token.balanceOf(this); // send all remaining bonuses\r\n        require(token.transfer(returnAddressBonuses, remainBonusTokens));\r\n    }\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n    uint256 public totalSupply;\r\n    function balanceOf(address who) constant returns (uint256);\r\n    function transfer(address to, uint256 value) returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  \tfunction allowance(address owner, address spender) constant returns (uint256);\r\n  \tfunction transferFrom(address from, address to, uint256 value) returns (bool);\r\n  \tfunction approve(address spender, uint256 value) returns (bool);\r\n  \tevent Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances. \r\n */\r\ncontract BasicToken is ERC20Basic {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) balances;\r\n\r\n    /**\r\n    * @dev transfer token for a specified address\r\n    * @param _to The address to transfer to.\r\n    * @param _value The amount to be transferred.\r\n    */\r\n    function transfer(address _to, uint256 _value) returns (bool) {\r\n        require(_to != address(0));\r\n\r\n        // SafeMath.sub will throw if there is not enough balance.\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the balance of the specified address.\r\n    * @param _owner The address to query the the balance of.\r\n    * @return An uint256 representing the amount owned by the passed address.\r\n    */\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another\r\n     * @param _from address The address which you want to send tokens from\r\n     * @param _to address The address which you want to transfer to\r\n     * @param _value uint256 the amount of tokens to be transferred\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\r\n        require(_to != address(0));\r\n\r\n        var _allowance = allowed[_from][msg.sender];\r\n\r\n        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n        // require (_value <= _allowance);\r\n\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = _allowance.sub(_value);\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _value The amount of tokens to be spent.\r\n     */\r\n    function approve(address _spender, uint256 _value) returns (bool) {\r\n\r\n        // To change the approve amount you first have to reduce the addresses`\r\n        //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n        //  already 0 to mitigate the race condition described here:\r\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n        require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n     * @param _owner address The address which owns the funds.\r\n     * @param _spender address The address which will spend the funds.\r\n     * @return A uint256 specifying the amount of tokens still available for the spender.\r\n     */\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    /**\r\n     * approve should be called when allowed[_spender] == 0. To increment\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     */\r\n    function increaseApproval(address _spender, uint _addedValue) returns (bool success) {\r\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n    function decreaseApproval(address _spender, uint _subtractedValue) returns (bool success) {\r\n        uint oldValue = allowed[msg.sender][_spender];\r\n        if (_subtractedValue > oldValue) {\r\n            allowed[msg.sender][_spender] = 0;\r\n        }\r\n        else {\r\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n        }\r\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Mintable token\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\r\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n */\r\ncontract MintableToken is StandardToken, Ownable {\r\n    event Mint(address indexed to, uint256 amount);\r\n\r\n    event MintFinished();\r\n\r\n    bool public mintingFinished = false;\r\n\r\n    modifier canMint() {\r\n        require(!mintingFinished);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to mint tokens\r\n     * @param _to The address that will receive the minted tokens.\r\n     * @param _amount The amount of tokens to mint.\r\n     * @return A boolean that indicates if the operation was successful.\r\n     */\r\n    function mint(address _to, uint256 _amount) onlyOwner canMint returns (bool) {\r\n        totalSupply = totalSupply.add(_amount);\r\n        balances[_to] = balances[_to].add(_amount);\r\n        Mint(_to, _amount);\r\n        Transfer(0x0, _to, _amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to stop minting new tokens.\r\n     * @return True if the operation was successful.\r\n     */\r\n    function finishMinting() onlyOwner returns (bool) {\r\n        mintingFinished = true;\r\n        MintFinished();\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract ESportsToken is ESportsConstants, MintableToken {\r\n    using SafeMath for uint;\r\n\r\n    event Burn(address indexed burner, uint value);\r\n    event MintTimelocked(address indexed beneficiary, uint amount);\r\n\r\n    /**\r\n     * @dev Pause token transfer. After successfully finished crowdsale it becomes false\r\n     */\r\n    bool public paused = true;\r\n    /**\r\n     * @dev Accounts who can transfer token even if paused. Works only during crowdsale\r\n     */\r\n    mapping(address => bool) excluded;\r\n\r\n    mapping (address => ESportsFreezingStorage[]) public frozenFunds;\r\n\r\n    function name() constant public returns (string _name) {\r\n        return \"ESports Token\";\r\n    }\r\n\r\n    function symbol() constant public returns (string _symbol) {\r\n        return \"ERT\";\r\n    }\r\n\r\n    function decimals() constant public returns (uint8 _decimals) {\r\n        return TOKEN_DECIMALS_UINT8;\r\n    }\r\n    \r\n    function allowMoveTokens() onlyOwner {\r\n        paused = false;\r\n    }\r\n\r\n    function addExcluded(address _toExclude) onlyOwner {\r\n        addExcludedInternal(_toExclude);\r\n    }\r\n    \r\n    function addExcludedInternal(address _toExclude) private {\r\n        excluded[_toExclude] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Wrapper of token.transferFrom\r\n     */\r\n    function transferFrom(address _from, address _to, uint _value) returns (bool) {\r\n        require(!paused || excluded[_from]);\r\n\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n    /**\r\n     * @dev Wrapper of token.transfer \r\n     */\r\n    function transfer(address _to, uint _value) returns (bool) {\r\n        require(!paused || excluded[msg.sender]);\r\n\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n    /**\r\n     * @dev Mint timelocked tokens\r\n     */\r\n    function mintTimelocked(address _to, uint _amount, uint32 _releaseTime)\r\n            onlyOwner canMint returns (ESportsFreezingStorage) {\r\n        ESportsFreezingStorage timelock = new ESportsFreezingStorage(this, _releaseTime);\r\n        mint(timelock, _amount);\r\n\r\n        frozenFunds[_to].push(timelock);\r\n        addExcludedInternal(timelock);\r\n\r\n        MintTimelocked(_to, _amount);\r\n\r\n        return timelock;\r\n    }\r\n\r\n    /**\r\n     * @dev Release frozen tokens\r\n     * @return Total amount of released tokens\r\n     */\r\n    function returnFrozenFreeFunds() public returns (uint) {\r\n        uint total = 0;\r\n        ESportsFreezingStorage[] storage frozenStorages = frozenFunds[msg.sender];\r\n        // for (uint x = 0; x < frozenStorages.length; x++) {\r\n        //     uint amount = balanceOf(frozenStorages[x]);\r\n        //     if (frozenStorages[x].call(bytes4(sha3(\"release(address)\")), msg.sender))\r\n        //         total = total.add(amount);\r\n        // }\r\n        for (uint x = 0; x < frozenStorages.length; x++) {\r\n            uint amount = frozenStorages[x].release(msg.sender);\r\n            total = total.add(amount);\r\n        }\r\n        \r\n        return total;\r\n    }\r\n\r\n    /**\r\n     * @dev Burns a specific amount of tokens.\r\n     * @param _value The amount of token to be burned.\r\n     */\r\n    function burn(uint _value) public {\r\n        require(!paused || excluded[msg.sender]);\r\n        require(_value > 0);\r\n\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        totalSupply = totalSupply.sub(_value);\r\n        \r\n        Burn(msg.sender, _value);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"goal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasStarted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newBtcBuyerAddress\",\"type\":\"address\"}],\"name\":\"setBtcBuyer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"soldTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"releaseBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"goalReached\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isFinalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimRefund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_amountWei\",\"type\":\"uint256\"}],\"name\":\"buyForBitcoin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusProvider\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"init\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hardCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_startTime\",\"type\":\"uint32\"},{\"name\":\"_endTime\",\"type\":\"uint32\"},{\"name\":\"_softCapWei\",\"type\":\"uint256\"},{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_token\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Finalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"}]","ContractName":"ESportsMainCrowdsale","CompilerVersion":"v0.4.16+commit.d7661dd9","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000059f9b740000000000000000000000000000000000000000000000000000000005a1ff2c00000000000000000000000000000000000000000000000000de0b6b3a7640000000000000000000000000000433c630737025289075011f6774c4fa061958b8f000000000000000000000000e29c5b523590165795bbd7d52369c2895b18841f","Library":"","SwarmSource":"bzzr://42d9889091e7dd9b5f6daa8a39c138cb8bc653c792bfa2719b8b08090dc7f82b"}]}