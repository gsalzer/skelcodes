{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.16;\r\n\r\n// copyright contact@bytether.com\r\n\r\ncontract BasicAccessControl {\r\n    address public owner;\r\n    address[] public moderators;\r\n\r\n    function BasicAccessControl() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    modifier onlyModerators() {\r\n        if (msg.sender != owner) {\r\n            bool found = false;\r\n            for (uint index = 0; index < moderators.length; index++) {\r\n                if (moderators[index] == msg.sender) {\r\n                    found = true;\r\n                    break;\r\n                }\r\n            }\r\n            require(found);\r\n        }\r\n        _;\r\n    }\r\n\r\n    function ChangeOwner(address _newOwner) onlyOwner public {\r\n        if (_newOwner != address(0)) {\r\n            owner = _newOwner;\r\n        }\r\n    }\r\n\r\n    function Kill() onlyOwner public {\r\n        selfdestruct(owner);\r\n    }\r\n\r\n    function AddModerator(address _newModerator) onlyOwner public {\r\n        if (_newModerator != address(0)) {\r\n            for (uint index = 0; index < moderators.length; index++) {\r\n                if (moderators[index] == _newModerator) {\r\n                    return;\r\n                }\r\n            }\r\n            moderators.push(_newModerator);\r\n        }\r\n    }\r\n    \r\n    function RemoveModerator(address _oldModerator) onlyOwner public {\r\n        uint foundIndex = 0;\r\n        for (; foundIndex < moderators.length; foundIndex++) {\r\n            if (moderators[foundIndex] == _oldModerator) {\r\n                break;\r\n            }\r\n        }\r\n        if (foundIndex < moderators.length) {\r\n            moderators[foundIndex] = moderators[moderators.length-1];\r\n            delete moderators[moderators.length-1];\r\n            moderators.length--;\r\n        }\r\n    }\r\n}\r\n\r\ncontract BytetherOV is BasicAccessControl{\r\n    enum ResultCode { \r\n        SUCCESS,\r\n        ERROR_EXIST,\r\n        ERROR_NOT_EXIST,\r\n        ERROR_PARAM\r\n    }\r\n\r\n    struct OwnerShip {\r\n        address myEther;\r\n        uint verifyCode;\r\n        string referCode;\r\n        uint createTime;\r\n    }\r\n    \r\n    uint public total = 0;\r\n    bool public maintaining = false;\r\n    \r\n    // bitcoin_address -> OwnerShip list\r\n    mapping(string => OwnerShip[]) items;\r\n    \r\n    modifier isActive {\r\n        require(maintaining != true);\r\n        _;\r\n    }\r\n\r\n    function BytetherOV() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function () payable public {}\r\n\r\n    // event\r\n    event LogCreate(bytes32 indexed btcAddress, uint verifyCode, ResultCode result);\r\n    \r\n    // moderators function\r\n    function ToggleMaintenance() onlyModerators public {\r\n        maintaining = !maintaining;\r\n    }\r\n    \r\n    function UnclockVerification(string _btcAddress, uint _verifyCode) onlyModerators public returns(ResultCode) {\r\n        // remove from the verify code list\r\n        var array = items[_btcAddress];\r\n        for (uint i = 0; i<array.length; i++){\r\n            if (array[i].verifyCode == _verifyCode) {\r\n                if (i != array.length-1) {\r\n                    array[i] = array[array.length-1];\r\n                }\r\n                delete array[array.length-1];\r\n                array.length--;\r\n                total--;\r\n                return ResultCode.SUCCESS;\r\n            }\r\n        }\r\n        return ResultCode.ERROR_NOT_EXIST;\r\n    }\r\n    \r\n    // public function\r\n    function GetOwnership(string _btcAddress, uint _verifyCode) constant public returns(address, string) {\r\n        var array = items[_btcAddress];\r\n        for (uint i=0; i<array.length; i++) {\r\n            if (array[i].verifyCode == _verifyCode) {\r\n                var item = array[i];\r\n                return (item.myEther, item.referCode);\r\n            }\r\n        }\r\n        return (0, \"\");\r\n    }\r\n    \r\n    function GetOwnershipByAddress(string _btcAddress, address _etherAddress) constant public returns(uint, string) {\r\n        var array = items[_btcAddress];\r\n        for (uint i=0; i<array.length; i++) {\r\n            if (array[i].myEther == _etherAddress) {\r\n                var item = array[i];\r\n                return (item.verifyCode, item.referCode);\r\n            }\r\n        }\r\n        return (0, \"\");\r\n    }\r\n    \r\n    function AddOwnership(string _btcAddress, uint _verifyCode, string _referCode) isActive public returns(ResultCode) {\r\n        if (bytes(_btcAddress).length == 0 || _verifyCode == 0) {\r\n            LogCreate(0, _verifyCode, ResultCode.ERROR_PARAM);\r\n            return ResultCode.ERROR_PARAM;\r\n        }\r\n        \r\n        bytes32 btcAddressHash = keccak256(_btcAddress);\r\n        var array = items[_btcAddress];\r\n        for (uint i=0; i<array.length; i++) {\r\n            if (array[i].verifyCode == _verifyCode) {\r\n                LogCreate(btcAddressHash, _verifyCode, ResultCode.ERROR_EXIST);\r\n                return ResultCode.ERROR_EXIST;\r\n            }\r\n        }\r\n        OwnerShip memory item;\r\n        item.myEther = msg.sender;\r\n        item.verifyCode = _verifyCode;\r\n        item.referCode = _referCode;\r\n        item.createTime = now;\r\n\r\n        total++;\r\n        array.push(item);\r\n        LogCreate(btcAddressHash, _verifyCode, ResultCode.SUCCESS);\r\n        return ResultCode.SUCCESS;\r\n    }\r\n    \r\n    function GetVerifyCodes(string _btcAddress) constant public returns(uint[]) {\r\n        var array = items[_btcAddress];\r\n        uint[] memory verifyCodes = new uint[](array.length);\r\n        for (uint i=0; i<array.length; i++) {\r\n            verifyCodes[i] = array[i].verifyCode;\r\n        }\r\n        return verifyCodes;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"total\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_btcAddress\",\"type\":\"string\"},{\"name\":\"_verifyCode\",\"type\":\"uint256\"}],\"name\":\"UnclockVerification\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_btcAddress\",\"type\":\"string\"}],\"name\":\"GetVerifyCodes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_btcAddress\",\"type\":\"string\"},{\"name\":\"_verifyCode\",\"type\":\"uint256\"}],\"name\":\"GetOwnership\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newModerator\",\"type\":\"address\"}],\"name\":\"AddModerator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_btcAddress\",\"type\":\"string\"},{\"name\":\"_verifyCode\",\"type\":\"uint256\"},{\"name\":\"_referCode\",\"type\":\"string\"}],\"name\":\"AddOwnership\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"ToggleMaintenance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_btcAddress\",\"type\":\"string\"},{\"name\":\"_etherAddress\",\"type\":\"address\"}],\"name\":\"GetOwnershipByAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_oldModerator\",\"type\":\"address\"}],\"name\":\"RemoveModerator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"moderators\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"Kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"ChangeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maintaining\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"btcAddress\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"verifyCode\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"result\",\"type\":\"uint8\"}],\"name\":\"LogCreate\",\"type\":\"event\"}]","ContractName":"BytetherOV","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://c300190caff462ce1c5a32a8ccfa5e476e38d57d0e95b07f19c39d931ad2e4db"}]}