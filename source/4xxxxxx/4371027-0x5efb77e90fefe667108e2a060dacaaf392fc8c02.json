{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.16;\r\n\r\ncontract owned {\r\n    address public owner;\r\n\r\n    function owned() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) onlyOwner {\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract tokenRecipient {\r\n    event receivedEther(address sender, uint amount);\r\n    event receivedTokens(address _from, uint256 _value, address _token, bytes _extraData);\r\n\r\n    function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData){\r\n        Token t = Token(_token);\r\n        require(t.transferFrom(_from, this, _value));\r\n        receivedTokens(_from, _value, _token, _extraData);\r\n    }\r\n\r\n    function () payable {\r\n        receivedEther(msg.sender, msg.value);\r\n    }\r\n}\r\n\r\ncontract Token {\r\n    mapping (address => uint256) public balanceOf;\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\r\n}\r\n\r\ncontract Oryza is owned, tokenRecipient {\r\n\r\n    uint public minimumQuorum;\r\n    uint public debatingPeriodInMinutes;\r\n    Proposal[] public proposals;\r\n    uint public numProposals;\r\n    Token public sharesTokenAddress;\r\n\r\n    event ProposalAdded(uint proposalID, address recipient, uint amount, string description);\r\n    event Voted(uint proposalID, bool position, address voter);\r\n    event ProposalTallied(uint proposalID, uint result, uint quorum, bool active);\r\n    event ChangeOfRules(uint newMinimumQuorum, uint newDebatingPeriodInMinutes, address newSharesTokenAddress);\r\n\r\n    struct Proposal {\r\n        address recipient;\r\n        uint amount;\r\n        string description;\r\n        uint votingDeadline;\r\n        bool executed;\r\n        bool proposalPassed;\r\n        uint numberOfVotes;\r\n        bytes32 proposalHash;\r\n        Vote[] votes;\r\n        mapping (address => bool) voted;\r\n    }\r\n\r\n    struct Vote {\r\n        bool inSupport;\r\n        address voter;\r\n    }\r\n\r\n    modifier onlyShareholders {\r\n        require(sharesTokenAddress.balanceOf(msg.sender) > 0);\r\n        _;\r\n    }\r\n\r\n    function Oryza(Token sharesAddress, uint minimumSharesToPassAVote, uint minutesForDebate) payable {\r\n        changeVotingRules(sharesAddress, minimumSharesToPassAVote, minutesForDebate);\r\n    }\r\n\r\n    function changeVotingRules(Token sharesAddress, uint minimumSharesToPassAVote, uint minutesForDebate) onlyOwner {\r\n        sharesTokenAddress = Token(sharesAddress);\r\n        if (minimumSharesToPassAVote == 0 ) minimumSharesToPassAVote = 1;\r\n        minimumQuorum = minimumSharesToPassAVote;\r\n        debatingPeriodInMinutes = minutesForDebate;\r\n        ChangeOfRules(minimumQuorum, debatingPeriodInMinutes, sharesTokenAddress);\r\n    }\r\n\r\n    function newProposal(\r\n        address beneficiary,\r\n        uint weiAmount,\r\n        string jobDescription,\r\n        bytes transactionBytecode\r\n    )\r\n        onlyShareholders\r\n        returns (uint proposalID)\r\n    {\r\n        proposalID = proposals.length++;\r\n        Proposal storage p = proposals[proposalID];\r\n        p.recipient = beneficiary;\r\n        p.amount = weiAmount;\r\n        p.description = jobDescription;\r\n        p.proposalHash = sha3(beneficiary, weiAmount, transactionBytecode);\r\n        p.votingDeadline = now + debatingPeriodInMinutes * 1 minutes;\r\n        p.executed = false;\r\n        p.proposalPassed = false;\r\n        p.numberOfVotes = 0;\r\n        ProposalAdded(proposalID, beneficiary, weiAmount, jobDescription);\r\n        numProposals = proposalID+1;\r\n\r\n        return proposalID;\r\n    }\r\n\r\n    function newProposalInEther(\r\n        address beneficiary,\r\n        uint etherAmount,\r\n        string jobDescription,\r\n        bytes transactionBytecode\r\n    )\r\n        onlyShareholders\r\n        returns (uint proposalID)\r\n    {\r\n        return newProposal(beneficiary, etherAmount * 1 ether, jobDescription, transactionBytecode);\r\n    }\r\n\r\n    function checkProposalCode(\r\n        uint proposalNumber,\r\n        address beneficiary,\r\n        uint weiAmount,\r\n        bytes transactionBytecode\r\n    )\r\n        constant\r\n        returns (bool codeChecksOut)\r\n    {\r\n        Proposal storage p = proposals[proposalNumber];\r\n        return p.proposalHash == sha3(beneficiary, weiAmount, transactionBytecode);\r\n    }\r\n\r\n    function vote(\r\n        uint proposalNumber,\r\n        bool supportsProposal\r\n    )\r\n        onlyShareholders\r\n        returns (uint voteID)\r\n    {\r\n        Proposal storage p = proposals[proposalNumber];\r\n        require(p.voted[msg.sender] != true);\r\n\r\n        voteID = p.votes.length++;\r\n        p.votes[voteID] = Vote({inSupport: supportsProposal, voter: msg.sender});\r\n        p.voted[msg.sender] = true;\r\n        p.numberOfVotes = voteID +1;\r\n        Voted(proposalNumber,  supportsProposal, msg.sender);\r\n        return voteID;\r\n    }\r\n\r\n    function executeProposal(uint proposalNumber, bytes transactionBytecode) {\r\n        Proposal storage p = proposals[proposalNumber];\r\n\r\n        require(now > p.votingDeadline && !p.executed && p.proposalHash == sha3(p.recipient, p.amount, transactionBytecode));\r\n\r\n        uint quorum = 0;\r\n        uint yea = 0;\r\n        uint nay = 0;\r\n\r\n        for (uint i = 0; i <  p.votes.length; ++i) {\r\n            Vote storage v = p.votes[i];\r\n            uint voteWeight = sharesTokenAddress.balanceOf(v.voter);\r\n            quorum += voteWeight;\r\n            if (v.inSupport) {\r\n                yea += voteWeight;\r\n            } else {\r\n                nay += voteWeight;\r\n            }\r\n        }\r\n\r\n        require(quorum >= minimumQuorum);\r\n\r\n        if (yea > nay ) {\r\n            p.executed = true;\r\n            require(p.recipient.call.value(p.amount)(transactionBytecode));\r\n\r\n            p.proposalPassed = true;\r\n        } else {\r\n            p.proposalPassed = false;\r\n        }\r\n\r\n        ProposalTallied(proposalNumber, yea - nay, quorum, p.proposalPassed);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proposals\",\"outputs\":[{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"description\",\"type\":\"string\"},{\"name\":\"votingDeadline\",\"type\":\"uint256\"},{\"name\":\"executed\",\"type\":\"bool\"},{\"name\":\"proposalPassed\",\"type\":\"bool\"},{\"name\":\"numberOfVotes\",\"type\":\"uint256\"},{\"name\":\"proposalHash\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"proposalNumber\",\"type\":\"uint256\"},{\"name\":\"transactionBytecode\",\"type\":\"bytes\"}],\"name\":\"executeProposal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sharesTokenAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numProposals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sharesAddress\",\"type\":\"address\"},{\"name\":\"minimumSharesToPassAVote\",\"type\":\"uint256\"},{\"name\":\"minutesForDebate\",\"type\":\"uint256\"}],\"name\":\"changeVotingRules\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"debatingPeriodInMinutes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimumQuorum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"receiveApproval\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"},{\"name\":\"weiAmount\",\"type\":\"uint256\"},{\"name\":\"jobDescription\",\"type\":\"string\"},{\"name\":\"transactionBytecode\",\"type\":\"bytes\"}],\"name\":\"newProposal\",\"outputs\":[{\"name\":\"proposalID\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"},{\"name\":\"etherAmount\",\"type\":\"uint256\"},{\"name\":\"jobDescription\",\"type\":\"string\"},{\"name\":\"transactionBytecode\",\"type\":\"bytes\"}],\"name\":\"newProposalInEther\",\"outputs\":[{\"name\":\"proposalID\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"proposalNumber\",\"type\":\"uint256\"},{\"name\":\"supportsProposal\",\"type\":\"bool\"}],\"name\":\"vote\",\"outputs\":[{\"name\":\"voteID\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"proposalNumber\",\"type\":\"uint256\"},{\"name\":\"beneficiary\",\"type\":\"address\"},{\"name\":\"weiAmount\",\"type\":\"uint256\"},{\"name\":\"transactionBytecode\",\"type\":\"bytes\"}],\"name\":\"checkProposalCode\",\"outputs\":[{\"name\":\"codeChecksOut\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"sharesAddress\",\"type\":\"address\"},{\"name\":\"minimumSharesToPassAVote\",\"type\":\"uint256\"},{\"name\":\"minutesForDebate\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"proposalID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"description\",\"type\":\"string\"}],\"name\":\"ProposalAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"proposalID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"position\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"voter\",\"type\":\"address\"}],\"name\":\"Voted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"proposalID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"result\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"quorum\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"active\",\"type\":\"bool\"}],\"name\":\"ProposalTallied\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newMinimumQuorum\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newDebatingPeriodInMinutes\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newSharesTokenAddress\",\"type\":\"address\"}],\"name\":\"ChangeOfRules\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"receivedEther\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"receivedTokens\",\"type\":\"event\"}]","ContractName":"Oryza","CompilerVersion":"v0.4.16+commit.d7661dd9","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000ad5de4de1a10353126460ead7dfe52e836f4b64d000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000013b0","Library":"","SwarmSource":"bzzr://1b2156ab75edbfd8e2c11c4ae15ecc65ca64df77e4210e08413438261ba6bb54"}]}