{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.12;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// Abstract contract for the full ERC 20 Token standard\r\n// https://github.com/ethereum/EIPs/issues/20\r\n\r\ncontract Token {\r\n    /* This is a slight change to the ERC20 base standard.\r\n    function totalSupply() constant returns (uint256 supply);\r\n    is replaced with:\r\n    uint256 public totalSupply;\r\n    This automatically creates a getter function for the totalSupply.\r\n    This is moved to the base contract since public getter functions are not\r\n    currently recognised as an implementation of the matching abstract\r\n    function by the compiler.\r\n    */\r\n    /// total amount of tokens\r\n    uint256 public totalSupply;\r\n\r\n    /// @param _owner The address from which the balance will be retrieved\r\n    /// @return The balance\r\n    function balanceOf(address _owner) constant returns (uint256 balance);\r\n\r\n    /// @notice send `_value` token to `_to` from `msg.sender`\r\n    /// @param _to The address of the recipient\r\n    /// @param _value The amount of token to be transferred\r\n    /// @return Whether the transfer was successful or not\r\n    function transfer(address _to, uint256 _value) returns (bool success);\r\n\r\n    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\r\n    /// @param _from The address of the sender\r\n    /// @param _to The address of the recipient\r\n    /// @param _value The amount of token to be transferred\r\n    /// @return Whether the transfer was successful or not\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\r\n\r\n    /// @notice `msg.sender` approves `_spender` to spend `_value` tokens\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @param _value The amount of tokens to be approved for transfer\r\n    /// @return Whether the approval was successful or not\r\n    function approve(address _spender, uint256 _value) returns (bool success);\r\n\r\n    /// @notice `msg.sender` approves `_spender` to spend `_value` tokens, after that function `receiveApproval`\r\n    /// @notice will be called on `_spender` address\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @param _value The amount of tokens to be approved for transfer\r\n    /// @param _extraData Some data to pass in callback function\r\n    /// @return Whether the approval was successful or not\r\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData) returns (bool success);\r\n\r\n    /// @param _owner The address of the account owning tokens\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @return Amount of remaining tokens allowed to spent\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n    event Issuance(address indexed _to, uint256 _value);\r\n    event Burn(address indexed _from, uint256 _value);\r\n}\r\n\r\n/*\r\nImplements ERC 20 Token standard: https://github.com/ethereum/EIPs/issues/20\r\n.*/\r\n\r\n\r\ncontract StandardToken is Token {\r\n\r\n    mapping (address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n\r\n    function transfer(address _to, uint256 _value) returns (bool success) {\r\n        //Default assumes totalSupply can't be over max (2^256 - 1).\r\n        //If your token leaves out totalSupply and can issue more tokens as time goes on, you need to check if it doesn't wrap.\r\n        //Replace the if with this one instead.\r\n        //if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\r\n        if (balances[msg.sender] >= _value && _value > 0) {\r\n            balances[msg.sender] -= _value;\r\n            balances[_to] += _value;\r\n            Transfer(msg.sender, _to, _value);\r\n            return true;\r\n        } else { return false; }\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\r\n        //same as above. Replace this line with the following if you want to protect against wrapping uints.\r\n        //if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\r\n        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\r\n            balances[_from] -= _value;\r\n            balances[_to] += _value;\r\n            allowed[_from][msg.sender] -= _value;\r\n            Transfer(_from, _to, _value);\r\n            return true;\r\n        } else { return false; }\r\n    }\r\n\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData) returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n\r\n        string memory signature = \"receiveApproval(address,uint256,address,bytes)\";\r\n\r\n        if (!_spender.call(bytes4(bytes32(sha3(signature))), msg.sender, _value, this, _extraData)) {\r\n            revert();\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n      return allowed[_owner][_spender];\r\n    }\r\n}\r\n\r\n\r\n\r\ncontract LATToken is StandardToken {\r\n    using SafeMath for uint256;\r\n    /* Public variables of the token */\r\n\r\n    address     public founder;\r\n    address     public minter = 0;\r\n    address     public exchanger = 0;\r\n\r\n    string      public name             =       \"LAToken\";\r\n    uint8       public decimals         =       18;\r\n    string      public symbol           =       \"LAToken\";\r\n    string      public version          =       \"0.7.2\";\r\n\r\n\r\n    modifier onlyFounder() {\r\n        if (msg.sender != founder) {\r\n            revert();\r\n        }\r\n        _;\r\n    }\r\n\r\n    modifier onlyMinterAndExchanger() {\r\n        if (msg.sender != minter && msg.sender != exchanger) {\r\n            revert();\r\n        }\r\n        _;\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) returns (bool success) {\r\n\r\n        if (exchanger != 0x0 && _to == exchanger) {\r\n            assert(ExchangeContract(exchanger).exchange(msg.sender, _value));\r\n            return true;\r\n        }\r\n\r\n        if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\r\n\r\n            balances[msg.sender] = balances[msg.sender].sub(_value);\r\n            balances[_to] = balances[_to].add(_value);\r\n\r\n            Transfer(msg.sender, _to, _value);\r\n            return true;\r\n\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function issueTokens(address _for, uint tokenCount)\r\n        external\r\n        onlyMinterAndExchanger\r\n        returns (bool)\r\n    {\r\n        if (tokenCount == 0) {\r\n            return false;\r\n        }\r\n\r\n        totalSupply = totalSupply.add(tokenCount);\r\n        balances[_for] = balances[_for].add(tokenCount);\r\n        Issuance(_for, tokenCount);\r\n        return true;\r\n    }\r\n\r\n    function burnTokens(address _for, uint tokenCount)\r\n        external\r\n        onlyMinterAndExchanger\r\n        returns (bool)\r\n    {\r\n        if (tokenCount == 0) {\r\n            return false;\r\n        }\r\n\r\n        if (totalSupply.sub(tokenCount) > totalSupply) {\r\n            revert();\r\n        }\r\n\r\n        if (balances[_for].sub(tokenCount) > balances[_for]) {\r\n            revert();\r\n        }\r\n\r\n        totalSupply = totalSupply.sub(tokenCount);\r\n        balances[_for] = balances[_for].sub(tokenCount);\r\n        Burn(_for, tokenCount);\r\n        return true;\r\n    }\r\n\r\n    function changeMinter(address newAddress)\r\n        public\r\n        onlyFounder\r\n        returns (bool)\r\n    {\r\n        minter = newAddress;\r\n        return true;\r\n    }\r\n\r\n    function changeFounder(address newAddress)\r\n        public\r\n        onlyFounder\r\n        returns (bool)\r\n    {\r\n        founder = newAddress;\r\n        return true;\r\n    }\r\n\r\n    function changeExchanger(address newAddress)\r\n        public\r\n        onlyFounder\r\n        returns (bool)\r\n    {\r\n        exchanger = newAddress;\r\n        return true;\r\n    }\r\n\r\n    function () payable {\r\n        require(false);\r\n    }\r\n\r\n    function LATToken() {\r\n        founder = msg.sender;\r\n        totalSupply = 0;\r\n    }\r\n}\r\n\r\n\r\n\r\ncontract ExchangeContract {\r\n    using SafeMath for uint256;\r\n\r\n\taddress public founder;\r\n\tuint256 public prevCourse;\r\n\tuint256 public nextCourse;\r\n\r\n\taddress public prevTokenAddress;\r\n\taddress public nextTokenAddress;\r\n\r\n\tmodifier onlyFounder() {\r\n        if (msg.sender != founder) {\r\n            revert();\r\n        }\r\n        _;\r\n    }\r\n\r\n    modifier onlyPreviousToken() {\r\n    \tif (msg.sender != prevTokenAddress) {\r\n            revert();\r\n        }\r\n        _;\r\n    }\r\n\r\n    // sets new conversion rate\r\n\tfunction changeCourse(uint256 _prevCourse, uint256 _nextCourse)\r\n\t\tpublic\r\n\t\tonlyFounder\r\n\t{\r\n\t\tprevCourse = _prevCourse;\r\n\t\tnextCourse = _nextCourse;\r\n\t}\r\n\r\n\tfunction exchange(address _for, uint256 prevTokensAmount)\r\n\t\tpublic\r\n\t\tonlyPreviousToken\r\n\t\treturns (bool)\r\n\t{\r\n\r\n\t\tLATToken prevToken = LATToken(prevTokenAddress);\r\n     \tLATToken nextToken = LATToken(nextTokenAddress);\r\n\r\n\t\t// check if balance is correct\r\n\t\tif (prevToken.balanceOf(_for) >= prevTokensAmount) {\r\n\t\t\tuint256 amount = prevTokensAmount.div(prevCourse);\r\n\r\n\t\t\tassert(prevToken.burnTokens(_for, amount.mul(prevCourse))); // remove previous tokens\r\n\t\t\tassert(nextToken.issueTokens(_for, amount.mul(nextCourse))); // give new ones\r\n\r\n\t\t\treturn true;\r\n\t\t} else {\r\n\t\t\trevert();\r\n\t\t}\r\n\t}\r\n\r\n\tfunction changeFounder(address newAddress)\r\n        external\r\n        onlyFounder\r\n        returns (bool)\r\n    {\r\n        founder = newAddress;\r\n        return true;\r\n    }\r\n\r\n\tfunction ExchangeContract(address _prevTokenAddress, address _nextTokenAddress, uint256 _prevCourse, uint256 _nextCourse) {\r\n\t\tfounder = msg.sender;\r\n\r\n\t\tprevTokenAddress = _prevTokenAddress;\r\n\t\tnextTokenAddress = _nextTokenAddress;\r\n\r\n\t\tchangeCourse(_prevCourse, _nextCourse);\r\n\t}\r\n}\r\n\r\n\r\n\r\ncontract LATokenMinter {\r\n    using SafeMath for uint256;\r\n\r\n    LATToken public token; // Token contract\r\n\r\n    address public founder; // Address of founder\r\n    address public helper;  // Address of helper\r\n\r\n    address public teamPoolInstant; // Address of team pool for instant issuance after token sale end\r\n    address public teamPoolForFrozenTokens; // Address of team pool for smooth unfroze during 5 years after 5 years from token sale start\r\n\r\n    bool public teamInstantSent = false; // Flag to prevent multiple issuance for team pool after token sale\r\n\r\n    uint public startTime;               // Unix timestamp of start\r\n    uint public endTime;                 // Unix timestamp of end\r\n    uint public numberOfDays;            // Number of windows after 0\r\n    uint public unfrozePerDay;           // Tokens sold in each window\r\n    uint public alreadyHarvestedTokens;  // Tokens were already harvested and sent to team pool\r\n\r\n    /*\r\n     *  Modifiers\r\n     */\r\n    modifier onlyFounder() {\r\n        // Only founder is allowed to do this action.\r\n        if (msg.sender != founder) {\r\n            revert();\r\n        }\r\n        _;\r\n    }\r\n\r\n    modifier onlyHelper() {\r\n        // Only helper is allowed to do this action.\r\n        if (msg.sender != helper) {\r\n            revert();\r\n        }\r\n        _;\r\n    }\r\n\r\n    // sends 400 millions of tokens to teamPool at the token sale ending (200m for distribution + 200m for company)\r\n    function fundTeamInstant()\r\n        external\r\n        onlyFounder\r\n        returns (bool)\r\n    {\r\n        require(!teamInstantSent);\r\n\r\n        uint baseValue = 400000000;\r\n        uint totalInstantAmount = baseValue.mul(1000000000000000000); // 400 millions with 18 decimal points\r\n\r\n        require(token.issueTokens(teamPoolInstant, totalInstantAmount));\r\n\r\n        teamInstantSent = true;\r\n        return true;\r\n    }\r\n\r\n    function changeTokenAddress(address newAddress)\r\n        external\r\n        onlyFounder\r\n        returns (bool)\r\n    {\r\n        token = LATToken(newAddress);\r\n        return true;\r\n    }\r\n\r\n    function changeFounder(address newAddress)\r\n        external\r\n        onlyFounder\r\n        returns (bool)\r\n    {\r\n        founder = newAddress;\r\n        return true;\r\n    }\r\n\r\n    function changeHelper(address newAddress)\r\n        external\r\n        onlyFounder\r\n        returns (bool)\r\n    {\r\n        helper = newAddress;\r\n        return true;\r\n    }\r\n\r\n    function changeTeamPoolInstant(address newAddress)\r\n        external\r\n        onlyFounder\r\n        returns (bool)\r\n    {\r\n        teamPoolInstant = newAddress;\r\n        return true;\r\n    }\r\n\r\n    function changeTeamPoolForFrozenTokens(address newAddress)\r\n        external\r\n        onlyFounder\r\n        returns (bool)\r\n    {\r\n        teamPoolForFrozenTokens = newAddress;\r\n        return true;\r\n    }\r\n\r\n    // method which will be called each day after 5 years to get unfrozen tokens\r\n    function harvest()\r\n        external\r\n        onlyHelper\r\n        returns (uint)\r\n    {\r\n        require(teamPoolForFrozenTokens != 0x0);\r\n\r\n        uint currentTimeDiff = getBlockTimestamp().sub(startTime);\r\n        uint secondsPerDay = 24 * 3600;\r\n        uint daysFromStart = currentTimeDiff.div(secondsPerDay);\r\n        uint currentDay = daysFromStart.add(1);\r\n\r\n        if (getBlockTimestamp() >= endTime) {\r\n            currentTimeDiff = endTime.sub(startTime).add(1);\r\n            currentDay = 5 * 365;\r\n        }\r\n\r\n        uint maxCurrentHarvest = currentDay.mul(unfrozePerDay);\r\n        uint wasNotHarvested = maxCurrentHarvest.sub(alreadyHarvestedTokens);\r\n\r\n        require(wasNotHarvested > 0);\r\n        require(token.issueTokens(teamPoolForFrozenTokens, wasNotHarvested));\r\n        alreadyHarvestedTokens = alreadyHarvestedTokens.add(wasNotHarvested);\r\n\r\n        return wasNotHarvested;\r\n    }\r\n\r\n    function LATokenMinter(address _LATTokenAddress, address _helperAddress) {\r\n        founder = msg.sender;\r\n        helper = _helperAddress;\r\n        token = LATToken(_LATTokenAddress);\r\n\r\n        numberOfDays = 5 * 365; // 5 years\r\n        startTime = 1661166000; // 22 august 2022 11:00 GMT+0;\r\n        endTime = numberOfDays.mul(1 days).add(startTime);\r\n\r\n        uint baseValue = 600000000;\r\n        uint frozenTokens = baseValue.mul(1000000000000000000); // 600 millions with 18 decimal points\r\n        alreadyHarvestedTokens = 0;\r\n\r\n        unfrozePerDay = frozenTokens.div(numberOfDays);\r\n    }\r\n\r\n    function () payable {\r\n        require(false);\r\n    }\r\n\r\n    function getBlockTimestamp() returns (uint256) {\r\n        return block.timestamp;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"alreadyHarvestedTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"fundTeamInstant\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"harvest\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"founder\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"helper\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamInstantSent\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"unfrozePerDay\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamPoolInstant\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getBlockTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"changeFounder\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamPoolForFrozenTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"changeTokenAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"changeTeamPoolForFrozenTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numberOfDays\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"changeTeamPoolInstant\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"changeHelper\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_LATTokenAddress\",\"type\":\"address\"},{\"name\":\"_helperAddress\",\"type\":\"address\"}],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"}]","ContractName":"LATokenMinter","CompilerVersion":"v0.4.14+commit.c2215d46","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000e50365f5d679cb98a1dd62d6f6e58e59321bcddf000000000000000000000000e1d46bdf3c8d3c140b3961f4969e830675db99f7","Library":"","SwarmSource":"bzzr://42e533599125e3e74090368a300f4919630c7a7914f76786eb21b42848b36d8a"}]}