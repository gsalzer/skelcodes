{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\ncontract AbstractToken {\r\n    // This is not an abstract function, because solc won't recognize generated getter functions for public variables as functions\r\n    function totalSupply() public constant returns (uint256) {}\r\n    function balanceOf(address owner) public constant returns (uint256 balance);\r\n    function transfer(address to, uint256 value) public returns (bool success);\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool success);\r\n    function approve(address spender, uint256 value) public returns (bool success);\r\n    function allowance(address owner, address spender) public constant returns (uint256 remaining);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event Issuance(address indexed to, uint256 value);\r\n}\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\ncontract SafeMath {\r\n  function mul(uint256 a, uint256 b) constant internal returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) constant internal returns (uint256) {\r\n    assert(b != 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) constant internal returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) constant internal returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n\r\n  function mulByFraction(uint256 number, uint256 numerator, uint256 denominator) internal returns (uint256) {\r\n      return div(mul(number, numerator), denominator);\r\n  }\r\n}\r\n\r\ncontract PreIco is SafeMath {\r\n    /*\r\n     * PreIco meta data\r\n     */\r\n    string public constant name = \"Remechain Presale Token\";\r\n    string public constant symbol = \"iRMC\";\r\n    uint public constant decimals = 18;\r\n\r\n    // addresses of managers\r\n    address public manager;\r\n    address public reserveManager;\r\n    // addresses of escrows\r\n    address public escrow;\r\n    address public reserveEscrow;\r\n\r\n    // BASE = 10^18\r\n    uint constant BASE = 1000000000000000000;\r\n\r\n    // amount of supplied tokens\r\n    uint public tokensSupplied = 0;\r\n    // amount of supplied bounty reward\r\n    uint public bountySupplied = 0;\r\n    // Soft capacity = 6250 ETH\r\n    uint public constant SOFT_CAPACITY = 2000000 * BASE;\r\n    // Hard capacity = 18750 ETH\r\n    uint public constant TOKENS_SUPPLY = 6000000 * BASE;\r\n    // Amount of bounty reward\r\n    uint public constant BOUNTY_SUPPLY = 350000 * BASE;\r\n    // Total supply\r\n    uint public constant totalSupply = TOKENS_SUPPLY + BOUNTY_SUPPLY;\r\n\r\n    // 1 RMC = 0.003125 ETH for  600 000 000 RMC\r\n\r\n    uint public constant TOKEN_PRICE = 3125000000000000;\r\n    uint tokenAmount1 = 6000000 * BASE;\r\n\r\n    uint tokenPriceMultiply1 = 1;\r\n    uint tokenPriceDivide1 = 1;\r\n\r\n    uint[] public tokenPriceMultiplies;\r\n    uint[] public tokenPriceDivides;\r\n    uint[] public tokenAmounts;\r\n\r\n    // ETH balances of accounts\r\n    mapping(address => uint) public ethBalances;\r\n    uint[] public prices;\r\n    uint[] public amounts;\r\n\r\n    mapping(address => uint) private balances;\r\n\r\n    // 2018.02.25 17:00 MSK\r\n    uint public constant defaultDeadline = 1519567200;\r\n    uint public deadline = defaultDeadline;\r\n\r\n    // Is ICO frozen\r\n    bool public isIcoStopped = false;\r\n\r\n    // Addresses of allowed tokens for buying\r\n    address[] public allowedTokens;\r\n    // Amount of token\r\n    mapping(address => uint) public tokenAmount;\r\n    // Price of current token amount\r\n    mapping(address => uint) public tokenPrice;\r\n\r\n    // Full users list\r\n    address[] public usersList;\r\n    mapping(address => bool) isUserInList;\r\n    // Number of users that have returned their money\r\n    uint numberOfUsersReturned = 0;\r\n\r\n    // user => token[]\r\n    mapping(address => address[]) public userTokens;\r\n    //  user => token => amount\r\n    mapping(address => mapping(address => uint)) public userTokensValues;\r\n\r\n    /*\r\n     * Events\r\n     */\r\n\r\n    event BuyTokens(address indexed _user, uint _ethValue, uint _boughtTokens);\r\n    event BuyTokensWithTokens(address indexed _user, address indexed _token, uint _tokenValue, uint _boughtTokens);\r\n    event GiveReward(address indexed _to, uint _value);\r\n\r\n    event IcoStoppedManually();\r\n    event IcoRunnedManually();\r\n\r\n    event WithdrawEther(address indexed _escrow, uint _ethValue);\r\n    event WithdrawToken(address indexed _escrow, address indexed _token, uint _value);\r\n    event ReturnEthersFor(address indexed _user, uint _value);\r\n    event ReturnTokensFor(address indexed _user, address indexed _token, uint _value);\r\n\r\n    event AddToken(address indexed _token, uint _amount, uint _price);\r\n    event RemoveToken(address indexed _token);\r\n\r\n    event MoveTokens(address indexed _from, address indexed _to, uint _value);\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n\r\n    /*\r\n     * Modifiers\r\n     */\r\n\r\n    modifier onlyManager {\r\n        assert(msg.sender == manager || msg.sender == reserveManager);\r\n        _;\r\n    }\r\n    modifier onlyManagerOrContract {\r\n        assert(msg.sender == manager || msg.sender == reserveManager || msg.sender == address(this));\r\n        _;\r\n    }\r\n    modifier IcoIsActive {\r\n        assert(isIcoActive());\r\n        _;\r\n    }\r\n\r\n\r\n    /// @dev Constructor of PreIco.\r\n    /// @param _manager Address of manager\r\n    /// @param _reserveManager Address of reserve manager\r\n    /// @param _escrow Address of escrow\r\n    /// @param _reserveEscrow Address of reserve escrow\r\n    /// @param _deadline ICO deadline timestamp. If is 0, sets 1515679200\r\n    function PreIco(address _manager, address _reserveManager, address _escrow, address _reserveEscrow, uint _deadline) public {\r\n        assert(_manager != 0x0);\r\n        assert(_reserveManager != 0x0);\r\n        assert(_escrow != 0x0);\r\n        assert(_reserveEscrow != 0x0);\r\n\r\n        manager = _manager;\r\n        reserveManager = _reserveManager;\r\n        escrow = _escrow;\r\n        reserveEscrow = _reserveEscrow;\r\n\r\n        if (_deadline != 0) {\r\n            deadline = _deadline;\r\n        }\r\n        tokenPriceMultiplies.push(tokenPriceMultiply1);\r\n        tokenPriceDivides.push(tokenPriceDivide1);\r\n        tokenAmounts.push(tokenAmount1);\r\n    }\r\n\r\n    /// @dev Returns token balance of user. 1 token = 1/10^18 RMC\r\n    /// @param _user Address of user\r\n    function balanceOf(address _user) public returns(uint balance) {\r\n        return balances[_user];\r\n    }\r\n\r\n    /// @dev Returns, is ICO enabled\r\n    function isIcoActive() public returns(bool isActive) {\r\n        return !isIcoStopped && now < deadline;\r\n    }\r\n\r\n    /// @dev Returns, is SoftCap reached\r\n    function isIcoSuccessful() public returns(bool isSuccessful) {\r\n        return tokensSupplied >= SOFT_CAPACITY;\r\n    }\r\n\r\n    /// @dev Calculates number of tokens RMC for buying with custom price of token\r\n    /// @param _amountOfToken Amount of RMC token\r\n    /// @param _priceAmountOfToken Price of amount of RMC\r\n    /// @param _value Amount of custom token\r\n    function getTokensAmount(uint _amountOfToken, uint _priceAmountOfToken,  uint _value) private returns(uint tokensToBuy) {\r\n        uint currentStep;\r\n        uint tokensRemoved = tokensSupplied;\r\n        for (currentStep = 0; currentStep < tokenAmounts.length; currentStep++) {\r\n            if (tokensRemoved >= tokenAmounts[currentStep]) {\r\n                tokensRemoved -= tokenAmounts[currentStep];\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n        assert(currentStep < tokenAmounts.length);\r\n\r\n        uint result = 0;\r\n\r\n        for (; currentStep <= tokenAmounts.length; currentStep++) {\r\n            assert(currentStep < tokenAmounts.length);\r\n\r\n            uint tokenOnStepLeft = tokenAmounts[currentStep] - tokensRemoved;\r\n            tokensRemoved = 0;\r\n            uint howManyTokensCanBuy = _value\r\n                    * _amountOfToken / _priceAmountOfToken\r\n                    * tokenPriceDivides[currentStep] / tokenPriceMultiplies[currentStep];\r\n\r\n            if (howManyTokensCanBuy > tokenOnStepLeft) {\r\n                result = add(result, tokenOnStepLeft);\r\n                uint spent = tokenOnStepLeft\r\n                    * _priceAmountOfToken / _amountOfToken\r\n                    * tokenPriceMultiplies[currentStep] / tokenPriceDivides[currentStep];\r\n                if (_value <= spent) {\r\n                    break;\r\n                }\r\n                _value -= spent;\r\n                tokensRemoved = 0;\r\n            } else {\r\n                result = add(result, howManyTokensCanBuy);\r\n                break;\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /// @dev Calculates number of tokens RMC for buying with ETH\r\n    /// @param _value Amount of ETH token\r\n    function getTokensAmountWithEth(uint _value) private returns(uint tokensToBuy) {\r\n        return getTokensAmount(BASE, TOKEN_PRICE, _value);\r\n    }\r\n\r\n    /// @dev Calculates number of tokens RMC for buying with ERC-20 token\r\n    /// @param _token Address of ERC-20 token\r\n    /// @param _tokenValue Amount of ETH token\r\n    function getTokensAmountByTokens(address _token, uint _tokenValue) private returns(uint tokensToBuy) {\r\n        assert(tokenPrice[_token] > 0);\r\n        return getTokensAmount(tokenPrice[_token], tokenAmount[_token], _tokenValue);\r\n    }\r\n\r\n    /// @dev Solds tokens for user by ETH\r\n    /// @param _user Address of user which buys token\r\n    /// @param _value Amount of ETH. 1 _value = 1/10^18 ETH\r\n    function buyTokens(address _user, uint _value) private IcoIsActive {\r\n        uint boughtTokens = getTokensAmountWithEth(_value);\r\n        burnTokens(boughtTokens);\r\n\r\n        balances[_user] = add(balances[_user], boughtTokens);\r\n        addUserToList(_user);\r\n        BuyTokens(_user, _value, boughtTokens);\r\n    }\r\n\r\n    /// @dev Makes ERC-20 token sellable\r\n    /// @param _token Address of ERC-20 token\r\n    /// @param _amount Amount of current token\r\n    /// @param _price Price of _amount of token\r\n    function addToken(address _token, uint _amount, uint _price) onlyManager public {\r\n        assert(_token != 0x0);\r\n        assert(_amount > 0);\r\n        assert(_price > 0);\r\n\r\n        bool isNewToken = true;\r\n        for (uint i = 0; i < allowedTokens.length; i++) {\r\n            if (allowedTokens[i] == _token) {\r\n                isNewToken = false;\r\n                break;\r\n            }\r\n        }\r\n        if (isNewToken) {\r\n            allowedTokens.push(_token);\r\n        }\r\n\r\n        tokenPrice[_token] = _price;\r\n        tokenAmount[_token] = _amount;\r\n    }\r\n\r\n    /// @dev Makes ERC-20 token not sellable\r\n    /// @param _token Address of ERC-20 token\r\n    function removeToken(address _token) onlyManager public {\r\n        for (uint i = 0; i < allowedTokens.length; i++) {\r\n            if (_token == allowedTokens[i]) {\r\n                if (i < allowedTokens.length - 1) {\r\n                    allowedTokens[i] = allowedTokens[allowedTokens.length - 1];\r\n                }\r\n                allowedTokens[allowedTokens.length - 1] = 0x0;\r\n                allowedTokens.length--;\r\n                break;\r\n            }\r\n        }\r\n\r\n        tokenPrice[_token] = 0;\r\n        tokenAmount[_token] = 0;\r\n    }\r\n\r\n    /// @dev add user to usersList\r\n    /// @param _user Address of user\r\n    function addUserToList(address _user) private {\r\n        if (!isUserInList[_user]) {\r\n            isUserInList[_user] = true;\r\n            usersList.push(_user);\r\n        }\r\n    }\r\n\r\n    /// @dev Makes amount of tokens not purchasable\r\n    /// @param _amount Amount of RMC tokens\r\n    function burnTokens(uint _amount) private {\r\n        assert(add(tokensSupplied, _amount) <= TOKENS_SUPPLY);\r\n        tokensSupplied = add(tokensSupplied, _amount);\r\n    }\r\n\r\n    /// @dev Takes ERC-20 tokens approved by user for using and gives him RMC tokens\r\n    /// @param _token Address of ERC-20 token\r\n    function buyWithTokens(address _token) public {\r\n        buyWithTokensBy(msg.sender, _token);\r\n    }\r\n\r\n    /// @dev Takes ERC-20 tokens approved by user for using and gives him RMC tokens. Can be called by anyone\r\n    /// @param _user Address of user\r\n    /// @param _token Address of ERC-20 token\r\n    function buyWithTokensBy(address _user, address _token) public IcoIsActive {\r\n        // Checks whether the token is allowed\r\n        assert(tokenPrice[_token] > 0);\r\n\r\n        AbstractToken token = AbstractToken(_token);\r\n        uint tokensToSend = token.allowance(_user, address(this));\r\n        assert(tokensToSend > 0);\r\n\r\n        uint boughtTokens = getTokensAmountByTokens(_token, tokensToSend);\r\n        burnTokens(boughtTokens);\r\n        balances[_user] = add(balances[_user], boughtTokens);\r\n\r\n        uint prevBalance = token.balanceOf(address(this));\r\n        assert(token.transferFrom(_user, address(this), tokensToSend));\r\n        assert(token.balanceOf(address(this)) - prevBalance == tokensToSend);\r\n\r\n        userTokensValues[_user][_token] = add(userTokensValues[_user][_token], tokensToSend);\r\n\r\n        addTokenToUser(_user, _token);\r\n        addUserToList(_user);\r\n        BuyTokensWithTokens(_user, _token, tokensToSend, boughtTokens);\r\n    }\r\n\r\n    /// @dev Makes amount of tokens returnable for user. If _buyTokens equals true, buy tokens\r\n    /// @param _user Address of user\r\n    /// @param _token Address of ERC-20 token\r\n    /// @param _tokenValue Amount of ERC-20 token\r\n    /// @param _buyTokens If true, buys tokens for this sum\r\n    function addTokensToReturn(address _user, address _token, uint _tokenValue, bool _buyTokens) public onlyManager {\r\n        // Checks whether the token is allowed\r\n        assert(tokenPrice[_token] > 0);\r\n\r\n        if (_buyTokens) {\r\n            uint boughtTokens = getTokensAmountByTokens(_token, _tokenValue);\r\n            burnTokens(boughtTokens);\r\n            balances[_user] = add(balances[_user], boughtTokens);\r\n            BuyTokensWithTokens(_user, _token, _tokenValue, boughtTokens);\r\n        }\r\n\r\n        userTokensValues[_user][_token] = add(userTokensValues[_user][_token], _tokenValue);\r\n        addTokenToUser(_user, _token);\r\n        addUserToList(_user);\r\n    }\r\n\r\n\r\n    /// @dev Adds ERC-20 tokens to user's token list\r\n    /// @param _user Address of user\r\n    /// @param _token Address of ERC-20 token\r\n    function addTokenToUser(address _user, address _token) private {\r\n        for (uint i = 0; i < userTokens[_user].length; i++) {\r\n            if (userTokens[_user][i] == _token) {\r\n                return;\r\n            }\r\n        }\r\n        userTokens[_user].push(_token);\r\n    }\r\n\r\n    /// @dev Returns ether and tokens to user. Can be called only if ICO is ended and SoftCap is not reached\r\n    function returnFunds() public {\r\n        assert(!isIcoSuccessful() && !isIcoActive());\r\n\r\n        returnFundsFor(msg.sender);\r\n    }\r\n\r\n    /// @dev Moves tokens from one user to another. Can be called only by manager. This function added for users that send ether by stock exchanges\r\n    function moveIcoTokens(address _from, address _to, uint _value) public onlyManager {\r\n        balances[_from] = sub(balances[_from], _value);\r\n        balances[_to] = add(balances[_to], _value);\r\n\r\n        MoveTokens(_from, _to, _value);\r\n    }\r\n\r\n    /// @dev Returns ether and tokens to user. Can be called only by manager or contract\r\n    /// @param _user Address of user\r\n    function returnFundsFor(address _user) public onlyManagerOrContract returns(bool) {\r\n        if (ethBalances[_user] > 0) {\r\n            if (_user.send(ethBalances[_user])) {\r\n                ReturnEthersFor(_user, ethBalances[_user]);\r\n                ethBalances[_user] = 0;\r\n            }\r\n        }\r\n\r\n        for (uint i = 0; i < userTokens[_user].length; i++) {\r\n            address tokenAddress = userTokens[_user][i];\r\n            uint userTokenValue = userTokensValues[_user][tokenAddress];\r\n            if (userTokenValue > 0) {\r\n                AbstractToken token = AbstractToken(tokenAddress);\r\n                if (token.transfer(_user, userTokenValue)) {\r\n                    ReturnTokensFor(_user, tokenAddress, userTokenValue);\r\n                    userTokensValues[_user][tokenAddress] = 0;\r\n                }\r\n            }\r\n        }\r\n\r\n        balances[_user] = 0;\r\n    }\r\n\r\n    /// @dev Returns ether and tokens to list of users. Can be called only by manager\r\n    /// @param _users Array of addresses of users\r\n    function returnFundsForMultiple(address[] _users) public onlyManager {\r\n        for (uint i = 0; i < _users.length; i++) {\r\n            returnFundsFor(_users[i]);\r\n        }\r\n    }\r\n\r\n    /// @dev Returns ether and tokens to 50 users. Can be called only by manager\r\n    function returnFundsForAll() public onlyManager {\r\n        assert(!isIcoActive() && !isIcoSuccessful());\r\n\r\n        uint first = numberOfUsersReturned;\r\n        uint last  = (first + 50 < usersList.length) ? first + 50 : usersList.length;\r\n\r\n        for (uint i = first; i < last; i++) {\r\n            returnFundsFor(usersList[i]);\r\n        }\r\n\r\n        numberOfUsersReturned = last;\r\n    }\r\n\r\n    /// @dev Withdraws ether and tokens to _escrow if SoftCap is reached\r\n    /// @param _escrow Address of escrow\r\n    function withdrawEtherTo(address _escrow) private {\r\n        assert(isIcoSuccessful());\r\n\r\n        if (this.balance > 0) {\r\n            if (_escrow.send(this.balance)) {\r\n                WithdrawEther(_escrow, this.balance);\r\n            }\r\n        }\r\n\r\n        for (uint i = 0; i < allowedTokens.length; i++) {\r\n            AbstractToken token = AbstractToken(allowedTokens[i]);\r\n            uint tokenBalance = token.balanceOf(address(this));\r\n            if (tokenBalance > 0) {\r\n                if (token.transfer(_escrow, tokenBalance)) {\r\n                    WithdrawToken(_escrow, address(token), tokenBalance);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @dev Withdraw ether and tokens to escrow. Can be called only by manager\r\n    function withdrawEther() public onlyManager {\r\n        withdrawEtherTo(escrow);\r\n    }\r\n\r\n    /// @dev Withdraw ether and tokens to reserve escrow. Can be called only by manager\r\n    function withdrawEtherToReserveEscrow() public onlyManager {\r\n        withdrawEtherTo(reserveEscrow);\r\n    }\r\n\r\n    /// @dev Enables disabled ICO. Can be called only by manager\r\n    function runIco() public onlyManager {\r\n        assert(isIcoStopped);\r\n        isIcoStopped = false;\r\n        IcoRunnedManually();\r\n    }\r\n\r\n    /// @dev Disables ICO. Can be called only by manager\r\n    function stopIco() public onlyManager {\r\n        isIcoStopped = true;\r\n        IcoStoppedManually();\r\n    }\r\n\r\n    /// @dev Fallback function. Buy RMC tokens on sending ether\r\n    function () public payable {\r\n        buyTokens(msg.sender, msg.value);\r\n    }\r\n\r\n    /// @dev Gives bounty reward to user. Can be called only by manager\r\n    /// @param _to Address of user\r\n    /// @param _amount Amount of bounty\r\n    function giveReward(address _to, uint _amount) public onlyManager {\r\n        assert(_to != 0x0);\r\n        assert(_amount > 0);\r\n        assert(add(bountySupplied, _amount) <= BOUNTY_SUPPLY);\r\n\r\n        bountySupplied = add(bountySupplied, _amount);\r\n        balances[_to] = add(balances[_to], _amount);\r\n\r\n        GiveReward(_to, _amount);\r\n    }\r\n\r\n    /// Adds other ERC-20 functions\r\n    function transfer(address _to, uint _value) public returns (bool success) {\r\n        return false;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint _value) public returns (bool success) {\r\n        return false;\r\n    }\r\n\r\n    function approve(address _spender, uint _value) public returns (bool success) {\r\n        return false;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\r\n        return 0;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"bountySupplied\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isIcoStopped\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"moveIcoTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenPriceDivides\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"userTokensValues\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"returnFunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"isIcoActive\",\"outputs\":[{\"name\":\"isActive\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"deadline\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_tokenValue\",\"type\":\"uint256\"},{\"name\":\"_buyTokens\",\"type\":\"bool\"}],\"name\":\"addTokensToReturn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SOFT_CAPACITY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"ethBalances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"amounts\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"usersList\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensSupplied\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BOUNTY_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"runIco\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allowedTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"removeToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stopIco\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"defaultDeadline\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"returnFundsFor\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"isIcoSuccessful\",\"outputs\":[{\"name\":\"isSuccessful\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenPriceMultiplies\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenAmounts\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reserveEscrow\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reserveManager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"prices\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_users\",\"type\":\"address[]\"}],\"name\":\"returnFundsForMultiple\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"returnFundsForAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"giveReward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN_PRICE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"addToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"buyWithTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"escrow\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKENS_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"buyWithTokensBy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawEtherToReserveEscrow\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_manager\",\"type\":\"address\"},{\"name\":\"_reserveManager\",\"type\":\"address\"},{\"name\":\"_escrow\",\"type\":\"address\"},{\"name\":\"_reserveEscrow\",\"type\":\"address\"},{\"name\":\"_deadline\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_ethValue\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_boughtTokens\",\"type\":\"uint256\"}],\"name\":\"BuyTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenValue\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_boughtTokens\",\"type\":\"uint256\"}],\"name\":\"BuyTokensWithTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"GiveReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"IcoStoppedManually\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"IcoRunnedManually\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_escrow\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_ethValue\",\"type\":\"uint256\"}],\"name\":\"WithdrawEther\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_escrow\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"WithdrawToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"ReturnEthersFor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"ReturnTokensFor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"AddToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"RemoveToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"MoveTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"PreIco","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000057b22f88eb4aec3ce8d120ca642d5e4f97bb5daf0000000000000000000000005b1d7488cfcb03007f99519ee4118f0196c0162c0000000000000000000000000db878904a0a6960c8d7701455d3bc2b81b5d6d5000000000000000000000000bfa78362f3936927c1fc3dd555b358d8626e88530000000000000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://f200c370a0bf880859958183f2133c430649954f5fba2e00773dce2ba6e1b4cb"}]}