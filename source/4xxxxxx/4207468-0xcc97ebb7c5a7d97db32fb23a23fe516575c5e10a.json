{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\nThis file is part of the NeuroDAO Contract.\r\n\r\nThe NeuroDAO Contract is free software: you can redistribute it and/or\r\nmodify it under the terms of the GNU lesser General Public License as published\r\nby the Free Software Foundation, either version 3 of the License, or\r\n(at your option) any later version.\r\n\r\nThe NeuroDAO Contract is distributed in the hope that it will be useful,\r\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\r\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\nGNU lesser General Public License for more details.\r\n\r\nYou should have received a copy of the GNU lesser General Public License\r\nalong with the NeuroDAO Contract. If not, see <http://www.gnu.org/licenses/>.\r\n\r\n@author Ilya Svirin <i.svirin@nordavind.ru>\r\n\r\nIF YOU ARE ENJOYED IT DONATE TO 0x3Ad38D1060d1c350aF29685B2b8Ec3eDE527452B ! :)\r\n*/\r\n\r\n\r\npragma solidity ^0.4.0;\r\n\r\ncontract owned {\r\n\r\n    address public owner;\r\n    address public newOwner;\r\n\r\n    function owned() payable {\r\n        owner = msg.sender;\r\n    }\r\n    \r\n    modifier onlyOwner {\r\n        require(owner == msg.sender);\r\n        _;\r\n    }\r\n\r\n    function changeOwner(address _owner) onlyOwner public {\r\n        require(_owner != 0);\r\n        newOwner = _owner;\r\n    }\r\n    \r\n    function confirmOwner() public {\r\n        require(newOwner == msg.sender);\r\n        owner = newOwner;\r\n        delete newOwner;\r\n    }\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 {\r\n    uint public totalSupply;\r\n    function balanceOf(address who) constant returns (uint);\r\n    function transfer(address to, uint value);\r\n    function allowance(address owner, address spender) constant returns (uint);\r\n    function transferFrom(address from, address to, uint value);\r\n    function approve(address spender, uint value);\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n}\r\n\r\ncontract ManualMigration is owned, ERC20 {\r\n\r\n    uint    public freezedMoment;\r\n    address public original;\r\n\r\n    modifier enabled {\r\n        require(original == 0);\r\n        _;\r\n    }\r\n    \r\n    struct SpecialTokenHolder {\r\n        uint limit;\r\n        bool isTeam;\r\n    }\r\n    mapping (address => SpecialTokenHolder) public specials;\r\n\r\n    struct TokenHolder {\r\n        uint balance;\r\n        uint balanceBeforeUpdate;\r\n        uint balanceUpdateTime;\r\n    }\r\n    mapping (address => TokenHolder) public holders;\r\n\r\n    function ManualMigration(address _original) payable owned() {\r\n        original = _original;\r\n        totalSupply = ERC20(original).totalSupply();\r\n        holders[this].balance = ERC20(original).balanceOf(original);\r\n        holders[original].balance = totalSupply - holders[this].balance;\r\n        Transfer(this, original, holders[original].balance);\r\n    }\r\n\r\n    function migrateManual(address _who, bool _isTeam) onlyOwner {\r\n        require(original != 0);\r\n        require(holders[_who].balance == 0);\r\n        uint balance = ERC20(original).balanceOf(_who);\r\n        holders[_who].balance = balance;\r\n        specials[_who] = SpecialTokenHolder({limit: balance, isTeam:_isTeam});\r\n        holders[original].balance -= balance;\r\n        Transfer(original, _who, balance);\r\n    }\r\n    \r\n    function sealManualMigration(bool force) onlyOwner {\r\n        require(force || holders[original].balance == 0);\r\n        delete original;\r\n    }\r\n\r\n    function beforeBalanceChanges(address _who) internal {\r\n        if (holders[_who].balanceUpdateTime <= freezedMoment) {\r\n            holders[_who].balanceUpdateTime = now;\r\n            holders[_who].balanceBeforeUpdate = holders[_who].balance;\r\n        }\r\n    }\r\n}\r\n\r\ncontract Crowdsale is ManualMigration {\r\n    \r\n    function Crowdsale(address _original) payable ManualMigration(_original) {}\r\n\r\n    function () payable enabled {\r\n        require(holders[this].balance > 0);\r\n        uint256 tokens = 5000 * msg.value / 1000000000000000000;\r\n        if (tokens > holders[this].balance) {\r\n            tokens = holders[this].balance;\r\n            uint valueWei = tokens * 1000000000000000000 / 5000;\r\n            msg.sender.transfer(msg.value - valueWei);\r\n        }\r\n        require(holders[msg.sender].balance + tokens > holders[msg.sender].balance); // overflow\r\n        require(tokens > 0);\r\n        beforeBalanceChanges(msg.sender);\r\n        beforeBalanceChanges(this);\r\n        holders[msg.sender].balance += tokens;\r\n        specials[msg.sender].limit += tokens;\r\n        holders[this].balance -= tokens;\r\n        Transfer(this, msg.sender, tokens);\r\n    }\r\n}\r\n\r\ncontract Token is Crowdsale {\r\n\r\n    string  public standard    = 'Token 0.1';\r\n    string  public name        = 'NeuroDAO';\r\n    string  public symbol      = \"NDAO\";\r\n    uint8   public decimals    = 0;\r\n\r\n    uint    public startTime;\r\n\r\n    mapping (address => mapping (address => uint256)) public allowed;\r\n\r\n    event Burned(address indexed owner, uint256 value);\r\n\r\n    function Token(address _original, uint _startTime)\r\n        payable Crowdsale(_original) {\r\n        startTime = _startTime;    \r\n    }\r\n\r\n    function availableTokens(address _who) public constant returns (uint _avail) {\r\n        _avail = holders[_who].balance;\r\n        uint limit = specials[_who].limit;\r\n        if (limit != 0) {\r\n            uint blocked;\r\n            uint periods = firstYearPeriods();\r\n            if (specials[_who].isTeam) {\r\n                if (periods != 0) {\r\n                    blocked = limit * (500 - periods) / 500;\r\n                } else {\r\n                    periods = (now - startTime) / 1 years;\r\n                    ++periods;\r\n                    if (periods < 5) {\r\n                        blocked = limit * (100 - periods * 20) / 100;\r\n                    }\r\n                }\r\n            } else {\r\n                if (periods != 0) {\r\n                    blocked = limit * (100 - periods) / 100;\r\n                }\r\n            }\r\n            _avail -= blocked;\r\n        }\r\n    }\r\n    \r\n    function firstYearPeriods() internal constant returns (uint _periods) {\r\n        _periods = 0;\r\n        if (now < startTime + 1 years) {\r\n            uint8[12] memory logic = [1, 2, 3, 4, 4, 4, 5, 6, 7, 8, 9, 10];\r\n            _periods = logic[(now - startTime) / 28 days];\r\n        }\r\n    }\r\n\r\n    function balanceOf(address _who) constant public returns (uint) {\r\n        return holders[_who].balance;\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public enabled {\r\n        require(availableTokens(msg.sender) >= _value);\r\n        require(holders[_to].balance + _value >= holders[_to].balance); // overflow\r\n        beforeBalanceChanges(msg.sender);\r\n        beforeBalanceChanges(_to);\r\n        holders[msg.sender].balance -= _value;\r\n        holders[_to].balance += _value;\r\n        Transfer(msg.sender, _to, _value);\r\n    }\r\n    \r\n    function transferFrom(address _from, address _to, uint256 _value) public enabled {\r\n        require(availableTokens(_from) >= _value);\r\n        require(holders[_to].balance + _value >= holders[_to].balance); // overflow\r\n        require(allowed[_from][msg.sender] >= _value);\r\n        beforeBalanceChanges(_from);\r\n        beforeBalanceChanges(_to);\r\n        holders[_from].balance -= _value;\r\n        holders[_to].balance += _value;\r\n        allowed[_from][msg.sender] -= _value;\r\n        Transfer(_from, _to, _value);\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) public constant\r\n        returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n    \r\n    function burn(uint256 _value) public enabled {\r\n        require(holders[msg.sender].balance >= _value);\r\n        beforeBalanceChanges(msg.sender);\r\n        holders[msg.sender].balance -= _value;\r\n        totalSupply -= _value;\r\n        Burned(msg.sender, _value);\r\n    }\r\n}\r\n\r\ncontract MigrationAgent {\r\n    function migrateFrom(address _from, uint256 _value);\r\n}\r\n\r\ncontract TokenMigration is Token {\r\n    \r\n    address public migrationAgent;\r\n    uint256 public totalMigrated;\r\n\r\n    event Migrate(address indexed from, address indexed to, uint256 value);\r\n\r\n    function TokenMigration(address _original, uint _startTime)\r\n        payable Token(_original, _startTime) {}\r\n\r\n    // Migrate _value of tokens to the new token contract\r\n    function migrate() external {\r\n        require(migrationAgent != 0);\r\n        uint value = holders[msg.sender].balance;\r\n        require(value != 0);\r\n        beforeBalanceChanges(msg.sender);\r\n        beforeBalanceChanges(this);\r\n        holders[msg.sender].balance -= value;\r\n        holders[this].balance += value;\r\n        totalMigrated += value;\r\n        MigrationAgent(migrationAgent).migrateFrom(msg.sender, value);\r\n        Transfer(msg.sender, this, value);\r\n        Migrate(msg.sender, migrationAgent, value);\r\n    }\r\n\r\n    function setMigrationAgent(address _agent) external onlyOwner enabled {\r\n        require(migrationAgent == 0);\r\n        migrationAgent = _agent;\r\n    }\r\n}\r\n\r\ncontract NeuroDAO is TokenMigration {\r\n\r\n    function NeuroDAO(address _original, uint _startTime)\r\n        payable TokenMigration(_original, _startTime) {}\r\n    \r\n    function withdraw() public onlyOwner {\r\n        owner.transfer(this.balance);\r\n    }\r\n    \r\n    function freezeTheMoment() public onlyOwner {\r\n        freezedMoment = now;\r\n    }\r\n\r\n    /** Get balance of _who for freezed moment\r\n     *  freezeTheMoment()\r\n     */\r\n    function freezedBalanceOf(address _who) constant public returns(uint) {\r\n        if (holders[_who].balanceUpdateTime <= freezedMoment) {\r\n            return holders[_who].balance;\r\n        } else {\r\n            return holders[_who].balanceBeforeUpdate;\r\n        }\r\n    }\r\n    \r\n    function killMe() public onlyOwner {\r\n        require(totalSupply == 0);\r\n        selfdestruct(owner);\r\n    }\r\n}\r\n\r\ncontract Adapter is owned {\r\n    \r\n    address public neuroDAO;\r\n    address public erc20contract;\r\n    address public masterHolder;\r\n    \r\n    mapping (address => bool) public alreadyUsed;\r\n    \r\n    function Adapter(address _neuroDAO, address _erc20contract, address _masterHolder)\r\n        payable owned() {\r\n        neuroDAO = _neuroDAO;\r\n        erc20contract = _erc20contract;\r\n        masterHolder = _masterHolder;\r\n    }\r\n    \r\n    function killMe() public onlyOwner {\r\n        selfdestruct(owner);\r\n    }\r\n \r\n    /**\r\n     * Move tokens int erc20contract to NDAO tokens holder\r\n     * \r\n     * # Freeze balances in NeuroDAO smartcontract by calling freezeTheMoment() function.\r\n     * # Allow transferFrom masterHolder in ERC20 smartcontract by calling approve() function\r\n     *   from masterHolder address, gives this contract address as spender parameter.\r\n     * # ERC20 smartcontract must have enougth tokens on masterHolder balance.\r\n     */\r\n    function giveMeTokens() public {\r\n        require(!alreadyUsed[msg.sender]);\r\n        uint balance = NeuroDAO(neuroDAO).freezedBalanceOf(msg.sender);\r\n        ERC20(erc20contract).transferFrom(masterHolder, msg.sender, balance);\r\n        alreadyUsed[msg.sender] = true;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"freezeTheMoment\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"holders\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"},{\"name\":\"balanceBeforeUpdate\",\"type\":\"uint256\"},{\"name\":\"balanceUpdateTime\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"freezedBalanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"specials\",\"outputs\":[{\"name\":\"limit\",\"type\":\"uint256\"},{\"name\":\"isTeam\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"original\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"standard\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_agent\",\"type\":\"address\"}],\"name\":\"setMigrationAgent\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"migrationAgent\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"migrate\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"availableTokens\",\"outputs\":[{\"name\":\"_avail\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalMigrated\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"force\",\"type\":\"bool\"}],\"name\":\"sealManualMigration\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"},{\"name\":\"_isTeam\",\"type\":\"bool\"}],\"name\":\"migrateManual\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"killMe\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"confirmOwner\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"freezedMoment\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_original\",\"type\":\"address\"},{\"name\":\"_startTime\",\"type\":\"uint256\"}],\"payable\":true,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Migrate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"NeuroDAO","CompilerVersion":"v0.4.13+commit.fb4cb1a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000379e2768e0631493dfcc9a560171e66f93cbcc6900000000000000000000000000000000000000000000000000000000599a30cd","Library":"","SwarmSource":"bzzr://9feeaa6bbdc613115b9c333d29f95c571a795db5b9f19d9d021f816ebf9ce6ef"}]}