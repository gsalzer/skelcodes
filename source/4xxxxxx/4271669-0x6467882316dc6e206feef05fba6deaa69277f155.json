{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\n/* taking ideas from FirstBlood token */\r\ncontract SafeMath {\r\n\r\nfunction safeAdd(uint256 x, uint256 y) internal returns(uint256) {\r\nuint256 z = x + y;\r\n      assert((z >= x) && (z >= y));\r\n      return z;\r\n    }\r\n\r\n    function safeSubtract(uint256 x, uint256 y) internal returns(uint256) {\r\n      assert(x >= y);\r\n      uint256 z = x - y;\r\n      return z;\r\n    }\r\n\r\n    function safeMult(uint256 x, uint256 y) internal returns(uint256) {\r\n      uint256 z = x * y;\r\n      assert((x == 0)||(z/x == y));\r\n      return z;\r\n    }\r\n\r\n}\r\n\r\ncontract Token {\r\n    uint256 public totalSupply;\r\n    function balanceOf(address _owner) constant returns (uint256 balance);\r\n    function transfer(address _to, uint256 _value) returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\r\n    function approve(address _spender, uint256 _value) returns (bool success);\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\n\r\n/*  ERC 20 token */\r\ncontract StandardToken is Token {\r\n\r\n    function transfer(address _to, uint256 _value) returns (bool success) {\r\n      if (balances[msg.sender] >= _value && _value > 0) {\r\n        balances[msg.sender] -= _value;\r\n        balances[_to] += _value;\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n      } else {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\r\n      if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\r\n        balances[_to] += _value;\r\n        balances[_from] -= _value;\r\n        allowed[_from][msg.sender] -= _value;\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n      } else {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n      return allowed[_owner][_spender];\r\n    }\r\n\r\n    mapping (address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n}\r\n\r\ncontract FAPcoin is StandardToken, SafeMath {\r\n\r\n    // metadata\r\n    string public constant name = \"FAPcoin\";\r\n    string public constant symbol = \"FAP\";\r\n    uint256 public constant decimals = 18;\r\n    string public version = \"1.0\";\r\n\r\n    // contracts\r\n    address public ethFundDeposit;      // deposit address for ETH for FAP\r\n    address public FAPFounder;\r\n    address public FAPFundDeposit1;      // deposit address for depositing tokens for owners\r\n    address public FAPFundDeposit2;      // deposit address for depositing tokens for owners\r\n    address public FAPFundDeposit3;      // deposit address for depositing tokens for owners\r\n    address public FAPFundDeposit4;      // deposit address for depositing tokens for owners\r\n    address public FAPFundDeposit5;      // deposit address for depositing tokens for owners\r\n\r\n    // crowdsale parameters\r\n    uint public firstStage;\r\n    uint public secondStage;\r\n    uint public thirdStage;\r\n    uint public fourthStage;\r\n    bool public isFinalized;              // switched to true in operational state\r\n    bool public saleStarted; //switched to true during ICO\r\n    uint256 public constant FAPFund = 50 * (10**6) * 10**decimals;   // FAPcoin reserved for Owners\r\n    uint256 public constant FAPFounderFund = 150 * (10**6) * 10**decimals;   // FAPcoin reserved for Owners\r\n    uint256 public tokenExchangeRate = 1500; //  FAPcoin tokens per 1 ETH\r\n    uint256 public constant tokenCreationCap =  500 * (10**6) * 10**decimals;\r\n\r\n\r\n    // events\r\n    event CreateFAP(address indexed _to, uint256 _value);\r\n\r\n    // constructor\r\n    function FAPcoin()\r\n    {\r\n      isFinalized = false;                   //controls pre through crowdsale state\r\n      saleStarted = false;\r\n      FAPFounder = '0x97F5eD1c6af0F45B605f4Ebe62Bae572B2e2198A';\r\n      FAPFundDeposit1 = '0xF946cB03dC53Bfc13a902022C1c37eA830F8E35B';\r\n      FAPFundDeposit2 = '0x19Eb1FE8Fdc51C0f785F455D8aB3BD22Af50cf11';\r\n      FAPFundDeposit3 = '0xaD349885e35657956859c965670c41EE9A044b84';\r\n      FAPFundDeposit4 = '0x4EEbfDEe9141796AaaA65b53A502A6DcFF21d397';\r\n      FAPFundDeposit5 = '0x20a0A5759a56aDE253cf8BF3683923D7934CC84a';\r\n      ethFundDeposit = '0x6404B11A733b8a62Bd4bf3A27d08e40DD13a5686';\r\n      totalSupply = safeMult(FAPFund,5);\r\n      totalSupply = safeAdd(totalSupply,FAPFounderFund);\r\n      balances[FAPFundDeposit1] = FAPFund;    // Deposit tokens for Owners\r\n      balances[FAPFundDeposit2] = FAPFund;    // Deposit tokens for Owners\r\n      balances[FAPFundDeposit3] = FAPFund;    // Deposit tokens for Owners\r\n      balances[FAPFundDeposit4] = FAPFund;    // Deposit tokens for Owners\r\n      balances[FAPFundDeposit5] = FAPFund;    // Deposit tokens for Owners\r\n      balances[FAPFounder] = FAPFounderFund;    // Deposit tokens for Owners\r\n      CreateFAP(FAPFundDeposit1, FAPFund);  // logs Owners deposit\r\n      CreateFAP(FAPFundDeposit2, FAPFund);  // logs Owners deposit\r\n      CreateFAP(FAPFundDeposit3, FAPFund);  // logs Owners deposit\r\n      CreateFAP(FAPFundDeposit4, FAPFund);  // logs Owners deposit\r\n      CreateFAP(FAPFundDeposit5, FAPFund);  // logs Owners deposit\r\n      CreateFAP(FAPFounder, FAPFounderFund);  // logs Owners deposit\r\n    }\r\n\r\n    /// @dev Accepts ether and creates new FAP tokens.\r\n    function () payable {\r\n      if (isFinalized) throw;\r\n      if (!saleStarted) throw;\r\n      if (msg.value == 0) throw;\r\n      //change exchange rate based on duration\r\n      if (now > firstStage && now <= secondStage){\r\n        tokenExchangeRate = 1300;\r\n      }\r\n      else if (now > secondStage && now <= thirdStage){\r\n        tokenExchangeRate = 1100;\r\n      }\r\n      if (now > thirdStage && now <= fourthStage){\r\n        tokenExchangeRate = 1050;\r\n      }\r\n      if (now > fourthStage){\r\n        tokenExchangeRate = 1000;\r\n      }\r\n      //create tokens\r\n      uint256 tokens = safeMult(msg.value, tokenExchangeRate); // check that we're not over totals\r\n      uint256 checkedSupply = safeAdd(totalSupply, tokens);\r\n\r\n      // return money if something goes wrong\r\n      if (tokenCreationCap < checkedSupply) throw;  // odd fractions won't be found\r\n      totalSupply = checkedSupply;\r\n      //All good. start the transfer\r\n      balances[msg.sender] += tokens;  // safeAdd not needed\r\n      CreateFAP(msg.sender, tokens);  // logs token creation\r\n    }\r\n\r\n    /// FAPcoin Ends the funding period and sends the ETH home\r\n    function finalize() external {\r\n      if (isFinalized) throw;\r\n      if (msg.sender != ethFundDeposit) throw; // locks finalize to the ultimate ETH owner\r\n      if (totalSupply < tokenCreationCap){\r\n        uint256 remainingTokens = safeSubtract(tokenCreationCap, totalSupply);\r\n        uint256 checkedSupply = safeAdd(totalSupply, remainingTokens);\r\n        if (tokenCreationCap < checkedSupply) throw;\r\n        totalSupply = checkedSupply;\r\n        balances[msg.sender] += remainingTokens;\r\n        CreateFAP(msg.sender, remainingTokens);\r\n      }\r\n      // move to operational\r\n      if(!ethFundDeposit.send(this.balance)) throw;\r\n      isFinalized = true;  // send the eth to FAPcoin\r\n    }\r\n\r\n    function startSale() external {\r\n      if(saleStarted) throw;\r\n      if (msg.sender != ethFundDeposit) throw; // locks start sale to the ultimate ETH owner\r\n      firstStage = now + 15 days; //sets duration of first cutoff\r\n      secondStage = firstStage + 15 days; //sets duration of second cutoff\r\n      thirdStage = secondStage + 7 days; //sets duration of third cutoff\r\n      fourthStage = thirdStage + 6 days; //sets duration of third cutoff\r\n      saleStarted = true; //start the sale\r\n    }\r\n\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FAPFundDeposit2\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenExchangeRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FAPFounderFund\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FAPFundDeposit5\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleStarted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"thirdStage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenCreationCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"secondStage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FAPFundDeposit3\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isFinalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethFundDeposit\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FAPFund\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startSale\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FAPFundDeposit1\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FAPFounder\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FAPFundDeposit4\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"firstStage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fourthStage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"CreateFAP\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"FAPcoin","CompilerVersion":"v0.4.11+commit.68ef5810","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://9cbede8f261245b32b39a2f94f61627d78802ed3e234bd154ec4d730dac50576"}]}