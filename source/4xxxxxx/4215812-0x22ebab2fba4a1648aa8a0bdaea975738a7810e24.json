{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\nlibrary Math {\r\n  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n    return a < b ? a : b;\r\n  }\r\n\r\n  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    return a < b ? a : b;\r\n  }\r\n}\r\n\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) constant returns (uint256);\r\n  function transfer(address to, uint256 value) returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner {\r\n    if (newOwner != address(0)) {\r\n      owner = newOwner;\r\n    }\r\n  }\r\n\r\n}\r\n\r\ncontract ICOBuyer is Ownable {\r\n\r\n  // Contract allows Ether to be paid into it\r\n  // Contract allows tokens / Ether to be extracted only to owner account\r\n  // Contract allows executor address or owner address to trigger ICO purtchase\r\n\r\n  //Notify on economic events\r\n  event EtherReceived(address indexed _contributor, uint256 _amount);\r\n  event EtherWithdrawn(uint256 _amount);\r\n  event TokensWithdrawn(uint256 _balance);\r\n  event ICOPurchased(uint256 _amount);\r\n\r\n  //Notify on contract updates\r\n  event ICOStartBlockChanged(uint256 _icoStartBlock);\r\n  event ICOStartTimeChanged(uint256 _icoStartTime);\r\n  event ExecutorChanged(address _executor);\r\n  event CrowdSaleChanged(address _crowdSale);\r\n  event TokenChanged(address _token);\r\n  event PurchaseCapChanged(uint256 _purchaseCap);\r\n\r\n  // only owner can change these\r\n  // Earliest block number contract is allowed to buy into the crowdsale.\r\n  uint256 public icoStartBlock;\r\n  // Earliest time contract is allowed to buy into the crowdsale.\r\n  uint256 public icoStartTime;\r\n  // The crowdsale address.\r\n  address public crowdSale;\r\n  // The address that can trigger ICO purchase (may be different to owner)\r\n  address public executor;\r\n  // The amount for each ICO purchase\r\n  uint256 public purchaseCap;\r\n\r\n  modifier onlyExecutorOrOwner() {\r\n    require((msg.sender == executor) || (msg.sender == owner));\r\n    _;\r\n  }\r\n\r\n  function ICOBuyer(address _executor, address _crowdSale, uint256 _icoStartBlock, uint256 _icoStartTime, uint256 _purchaseCap) {\r\n    executor = _executor;\r\n    crowdSale = _crowdSale;\r\n    icoStartBlock = _icoStartBlock;\r\n    icoStartTime = _icoStartTime;\r\n    purchaseCap = _purchaseCap;\r\n  }\r\n\r\n  function changeCrowdSale(address _crowdSale) onlyOwner {\r\n    crowdSale = _crowdSale;\r\n    CrowdSaleChanged(crowdSale);\r\n  }\r\n\r\n  function changeICOStartBlock(uint256 _icoStartBlock) onlyExecutorOrOwner {\r\n    icoStartBlock = _icoStartBlock;\r\n    ICOStartBlockChanged(icoStartBlock);\r\n  }\r\n\r\n  function changeICOStartTime(uint256 _icoStartTime) onlyExecutorOrOwner {\r\n    icoStartTime = _icoStartTime;\r\n    ICOStartTimeChanged(icoStartTime);\r\n  }\r\n\r\n  function changePurchaseCap(uint256 _purchaseCap) onlyOwner {\r\n    purchaseCap = _purchaseCap;\r\n    PurchaseCapChanged(purchaseCap);\r\n  }\r\n\r\n  function changeExecutor(address _executor) onlyOwner {\r\n    executor = _executor;\r\n    ExecutorChanged(_executor);\r\n  }\r\n\r\n  // function allows all Ether to be drained from contract by owner\r\n  function withdrawEther() onlyOwner {\r\n    require(this.balance != 0);\r\n    owner.transfer(this.balance);\r\n    EtherWithdrawn(this.balance);\r\n  }\r\n\r\n  // function allows all tokens to be transferred to owner\r\n  function withdrawTokens(address _token) onlyOwner {\r\n    ERC20Basic token = ERC20Basic(_token);\r\n    // Retrieve current token balance of contract.\r\n    uint256 contractTokenBalance = token.balanceOf(address(this));\r\n    // Disallow token withdrawals if there are no tokens to withdraw.\r\n    require(contractTokenBalance != 0);\r\n    // Send the funds.  Throws on failure to prevent loss of funds.\r\n    assert(token.transfer(owner, contractTokenBalance));\r\n    TokensWithdrawn(contractTokenBalance);\r\n  }\r\n\r\n  // Buys tokens in the crowdsale and rewards the caller, callable by anyone.\r\n  function buyICO() onlyExecutorOrOwner {\r\n    // Short circuit to save gas if the earliest block number hasn't been reached.\r\n    if ((icoStartBlock != 0) && (getBlockNumber() < icoStartBlock)) return;\r\n    // Short circuit to save gas if the earliest buy time hasn't been reached.\r\n    if ((icoStartTime != 0) && (getNow() < icoStartTime)) return;\r\n    // Return if no balance\r\n    if (this.balance == 0) return;\r\n\r\n    // Purchase tokens from ICO contract (assuming call to ICO fallback function)\r\n    uint256 purchaseAmount = Math.min256(this.balance, purchaseCap);\r\n    assert(crowdSale.call.value(purchaseAmount)());\r\n    ICOPurchased(purchaseAmount);\r\n  }\r\n\r\n  // Fallback function accepts ether and logs this.\r\n  // Can be called by anyone to fund contract.\r\n  function () payable {\r\n    EtherReceived(msg.sender, msg.value);\r\n  }\r\n\r\n  //Function is mocked for tests\r\n  function getBlockNumber() internal constant returns (uint256) {\r\n    return block.number;\r\n  }\r\n\r\n  //Function is mocked for tests\r\n  function getNow() internal constant returns (uint256) {\r\n    return now;\r\n  }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"icoStartBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_purchaseCap\",\"type\":\"uint256\"}],\"name\":\"changePurchaseCap\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_crowdSale\",\"type\":\"address\"}],\"name\":\"changeCrowdSale\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawEther\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdSale\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_icoStartTime\",\"type\":\"uint256\"}],\"name\":\"changeICOStartTime\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_executor\",\"type\":\"address\"}],\"name\":\"changeExecutor\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"purchaseCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"executor\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyICO\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_icoStartBlock\",\"type\":\"uint256\"}],\"name\":\"changeICOStartBlock\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_executor\",\"type\":\"address\"},{\"name\":\"_crowdSale\",\"type\":\"address\"},{\"name\":\"_icoStartBlock\",\"type\":\"uint256\"},{\"name\":\"_icoStartTime\",\"type\":\"uint256\"},{\"name\":\"_purchaseCap\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_contributor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"EtherReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"EtherWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_balance\",\"type\":\"uint256\"}],\"name\":\"TokensWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"ICOPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_icoStartBlock\",\"type\":\"uint256\"}],\"name\":\"ICOStartBlockChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_icoStartTime\",\"type\":\"uint256\"}],\"name\":\"ICOStartTimeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_executor\",\"type\":\"address\"}],\"name\":\"ExecutorChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_crowdSale\",\"type\":\"address\"}],\"name\":\"CrowdSaleChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"TokenChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_purchaseCap\",\"type\":\"uint256\"}],\"name\":\"PurchaseCapChanged\",\"type\":\"event\"}]","ContractName":"ICOBuyer","CompilerVersion":"v0.4.11+commit.68ef5810","OptimizationUsed":"1","Runs":"0","ConstructorArguments":"0000000000000000000000001db4d24f48b3cced0cd29591265e78e19952c6b6000000000000000000000000d48e165b0027e8055b3b7016a35078b23527a95d00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000059a56550000000000000000000000000000000000000000000000000016345785d8a0000","Library":"","SwarmSource":"bzzr://5996979106918c2f999835ca8537eddf314f525eb9652f53d442475a94b42a2c"}]}