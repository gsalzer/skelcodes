{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.18;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\ncontract Telcoin {\r\n    using SafeMath for uint256;\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n\r\n    string public constant name = \"Telcoin\";\r\n    string public constant symbol = \"TEL\";\r\n    uint8 public constant decimals = 2;\r\n\r\n    /// The ERC20 total fixed supply of tokens.\r\n    uint256 public constant totalSupply = 100000000000 * (10 ** uint256(decimals));\r\n\r\n    /// Account balances.\r\n    mapping(address => uint256) balances;\r\n\r\n    /// The transfer allowances.\r\n    mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n    /// The initial distributor is responsible for allocating the supply\r\n    /// into the various pools described in the whitepaper. This can be\r\n    /// verified later from the event log.\r\n    function Telcoin(address _distributor) public {\r\n        balances[_distributor] = totalSupply;\r\n        Transfer(0x0, _distributor, totalSupply);\r\n    }\r\n\r\n    /// ERC20 balanceOf().\r\n    function balanceOf(address _owner) public view returns (uint256) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    /// ERC20 transfer().\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[msg.sender]);\r\n\r\n        // SafeMath.sub will throw if there is not enough balance.\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /// ERC20 transferFrom().\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[_from]);\r\n        require(_value <= allowed[_from][msg.sender]);\r\n\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /// ERC20 approve(). Comes with the standard caveat that an approval\r\n    /// meant to limit spending may actually allow more to be spent due to\r\n    /// unfortunate ordering of transactions. For safety, this method\r\n    /// should only be called if the current allowance is 0. Alternatively,\r\n    /// non-ERC20 increaseApproval() and decreaseApproval() can be used.\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /// ERC20 allowance().\r\n    function allowance(address _owner, address _spender) public view returns (uint256) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    /// Not officially ERC20. Allows an allowance to be increased safely.\r\n    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n    /// Not officially ERC20. Allows an allowance to be decreased safely.\r\n    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n        uint oldValue = allowed[msg.sender][_spender];\r\n        if (_subtractedValue > oldValue) {\r\n            allowed[msg.sender][_spender] = 0;\r\n        } else {\r\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n        }\r\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n}\r\n\r\n\r\ncontract TelcoinSaleToken {\r\n    using SafeMath for uint256;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    event Mint(address indexed to, uint256 amount);\r\n    event MintFinished();\r\n    event Redeem(address indexed beneficiary, uint256 sacrificedValue, uint256 grantedValue);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /// The owner of the contract.\r\n    address public owner;\r\n\r\n    /// The total number of minted tokens, excluding destroyed tokens.\r\n    uint256 public totalSupply;\r\n\r\n    /// The token balance and released amount of each address.\r\n    mapping(address => uint256) balances;\r\n    mapping(address => uint256) redeemed;\r\n\r\n    /// Whether the token is still mintable.\r\n    bool public mintingFinished = false;\r\n\r\n    /// Redeemable telcoin.\r\n    Telcoin telcoin;\r\n    uint256 public totalRedeemed;\r\n\r\n    /// Vesting period.\r\n    uint256 vestingStart;\r\n    uint256 vestingDuration;\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function TelcoinSaleToken(\r\n        Telcoin _telcoin,\r\n        uint256 _vestingStart,\r\n        uint256 _vestingDuration\r\n    )\r\n        public\r\n    {\r\n        owner = msg.sender;\r\n        telcoin = _telcoin;\r\n        vestingStart = _vestingStart;\r\n        vestingDuration = _vestingDuration;\r\n    }\r\n\r\n    function finishMinting() onlyOwner public returns (bool) {\r\n        require(!mintingFinished);\r\n\r\n        mintingFinished = true;\r\n        MintFinished();\r\n\r\n        return true;\r\n    }\r\n\r\n    function mint(address _to, uint256 _amount) onlyOwner public returns (bool) {\r\n        require(_to != 0x0);\r\n        require(!mintingFinished);\r\n        require(_amount > 0);\r\n\r\n        totalSupply = totalSupply.add(_amount);\r\n        balances[_to] = balances[_to].add(_amount);\r\n        Mint(_to, _amount);\r\n        Transfer(0x0, _to, _amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    function redeemMany(address[] _beneficiaries) public {\r\n        for (uint256 i = 0; i < _beneficiaries.length; i++) {\r\n            redeem(_beneficiaries[i]);\r\n        }\r\n    }\r\n\r\n    function redeem(address _beneficiary) public returns (uint256) {\r\n        require(mintingFinished);\r\n        require(_beneficiary != 0x0);\r\n\r\n        uint256 balance = redeemableBalance(_beneficiary);\r\n        if (balance == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 totalDistributable = telcoin.balanceOf(this).add(totalRedeemed);\r\n\r\n        // Avoid loss of precision by multiplying and later dividing by\r\n        // a large value.\r\n        uint256 amount = balance.mul(10 ** 18).div(totalSupply).mul(totalDistributable).div(10 ** 18);\r\n\r\n        balances[_beneficiary] = balances[_beneficiary].sub(balance);\r\n        redeemed[_beneficiary] = redeemed[_beneficiary].add(balance);\r\n        balances[telcoin] = balances[telcoin].add(balance);\r\n        totalRedeemed = totalRedeemed.add(amount);\r\n\r\n        Transfer(_beneficiary, telcoin, balance);\r\n        Redeem(_beneficiary, balance, amount);\r\n\r\n        telcoin.transfer(_beneficiary, amount);\r\n\r\n        return amount;\r\n    }\r\n\r\n    function transferOwnership(address _to) onlyOwner public {\r\n        require(_to != address(0));\r\n        OwnershipTransferred(owner, _to);\r\n        owner = _to;\r\n    }\r\n\r\n    function balanceOf(address _owner) public constant returns (uint256) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function redeemableBalance(address _beneficiary) public constant returns (uint256) {\r\n        return vestedBalance(_beneficiary).sub(redeemed[_beneficiary]);\r\n    }\r\n\r\n    function vestedBalance(address _beneficiary) public constant returns (uint256) {\r\n        uint256 currentBalance = balances[_beneficiary];\r\n        uint256 totalBalance = currentBalance.add(redeemed[_beneficiary]);\r\n\r\n        if (now < vestingStart) {\r\n            return 0;\r\n        }\r\n\r\n        if (now >= vestingStart.add(vestingDuration)) {\r\n            return totalBalance;\r\n        }\r\n\r\n        return totalBalance.mul(now.sub(vestingStart)).div(vestingDuration);\r\n    }\r\n}\r\n\r\n\r\ncontract TelcoinSale {\r\n    using SafeMath for uint256;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    event WalletChanged(address indexed previousWallet, address indexed newWallet);\r\n    event TokenPurchase(\r\n        address indexed purchaser,\r\n        address indexed beneficiary,\r\n        uint256 value,\r\n        uint256 amount,\r\n        uint256 bonusAmount\r\n    );\r\n    event TokenAltPurchase(\r\n        address indexed purchaser,\r\n        address indexed beneficiary,\r\n        uint256 value,\r\n        uint256 amount,\r\n        uint256 bonusAmount,\r\n        string symbol,\r\n        string transactionId\r\n    );\r\n    event Pause();\r\n    event Unpause();\r\n    event Withdrawal(address indexed wallet, uint256 weiAmount);\r\n    event Extended(uint256 until);\r\n    event Finalized();\r\n    event Refunding();\r\n    event Refunded(address indexed beneficiary, uint256 weiAmount);\r\n    event Whitelisted(\r\n        address indexed participant,\r\n        uint256 minWeiAmount,\r\n        uint256 maxWeiAmount,\r\n        uint32 bonusRate\r\n    );\r\n    event CapFlexed(uint32 flex);\r\n\r\n    /// The owner of the contract.\r\n    address public owner;\r\n\r\n    /// The temporary token we're selling. Sale tokens can be converted\r\n    /// immediately upon successful completion of the sale. Bonus tokens\r\n    /// are on a separate vesting schedule.\r\n    TelcoinSaleToken public saleToken;\r\n    TelcoinSaleToken public bonusToken;\r\n\r\n    /// The token we'll convert to after the sale ends.\r\n    Telcoin public telcoin;\r\n\r\n    /// The minimum and maximum goals to reach. If the soft cap is not reached\r\n    /// by the end of the sale, the contract will enter refund mode. If the\r\n    /// hard cap is reached, the contract can be finished early.\r\n    ///\r\n    /// Due to our actual soft cap being tied to USD and the assumption that\r\n    /// the value of Ether will continue to increase during the ICO, we\r\n    /// implement a fixed minimum softcap that accounts for a 2.5x value\r\n    /// increase. The capFlex is a scale factor that allows us to scale the\r\n    /// caps above the fixed minimum values. Initially the scale factor will\r\n    /// be set so that our effective soft cap is ~10M USD.\r\n    uint256 public softCap;\r\n    uint256 public hardCap;\r\n    uint32 public capFlex;\r\n\r\n    /// The sale period.\r\n    uint256 public startTime;\r\n    uint256 public endTime;\r\n    uint256 public timeExtension;\r\n\r\n    /// The numnber of tokens to mint per wei.\r\n    uint256 public rate;\r\n\r\n    /// The total number of wei raised. Note that the contract's balance may\r\n    /// differ from this value if someone has decided to forcefully send us\r\n    /// ether.\r\n    uint256 public weiRaised;\r\n\r\n    /// The wallet that will receive the contract's balance once the sale\r\n    /// finishes and the soft cap is reached.\r\n    address public wallet;\r\n\r\n    /// The list of addresses that are allowed to participate in the sale,\r\n    /// up to what amount, and any special rate they may have, provided\r\n    /// that they do in fact participate with at least the minimum value\r\n    /// they agreed to.\r\n    mapping(address => uint256) public whitelistedMin;\r\n    mapping(address => uint256) public whitelistedMax;\r\n    mapping(address => uint32) public bonusRates;\r\n\r\n    /// The amount of wei and wei equivalents invested by each investor.\r\n    mapping(address => uint256) public deposited;\r\n    mapping(address => uint256) public altDeposited;\r\n\r\n    /// An enumerable list of investors.\r\n    address[] public investors;\r\n\r\n    /// Whether the sale is paused.\r\n    bool public paused = false;\r\n\r\n    /// Whether the sale has finished, and when.\r\n    bool public finished = false;\r\n    uint256 public finishedAt;\r\n\r\n    /// Whether we're accepting refunds.\r\n    bool public refunding = false;\r\n\r\n    /// The total number of wei refunded.\r\n    uint256 public weiRefunded;\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    modifier saleOpen() {\r\n        require(!finished);\r\n        require(!paused);\r\n        require(now >= startTime);\r\n        require(now <= endTime + timeExtension);\r\n        _;\r\n    }\r\n\r\n    function TelcoinSale(\r\n        uint256 _softCap,\r\n        uint256 _hardCap,\r\n        uint32 _capFlex,\r\n        uint256 _startTime,\r\n        uint256 _endTime,\r\n        uint256 _rate,\r\n        address _wallet,\r\n        Telcoin _telcoin,\r\n        uint256 _bonusVestingStart,\r\n        uint256 _bonusVestingDuration\r\n    )\r\n        public\r\n        payable\r\n    {\r\n        require(msg.value > 0);\r\n        require(_softCap > 0);\r\n        require(_hardCap >= _softCap);\r\n        require(_startTime >= now);\r\n        require(_endTime >= _startTime);\r\n        require(_rate > 0);\r\n        require(_wallet != 0x0);\r\n\r\n        owner = msg.sender;\r\n        softCap = _softCap;\r\n        hardCap = _hardCap;\r\n        capFlex = _capFlex;\r\n        startTime = _startTime;\r\n        endTime = _endTime;\r\n        rate = _rate;\r\n        wallet = _wallet;\r\n        telcoin = _telcoin;\r\n\r\n        saleToken = new TelcoinSaleToken(telcoin, 0, 0);\r\n        bonusToken = new TelcoinSaleToken(\r\n            telcoin,\r\n            _bonusVestingStart,\r\n            _bonusVestingDuration\r\n        );\r\n\r\n        wallet.transfer(msg.value);\r\n    }\r\n\r\n    function () public payable {\r\n        buyTokens(msg.sender);\r\n    }\r\n\r\n    function buyTokens(address _beneficiary) saleOpen public payable {\r\n        require(_beneficiary != address(0));\r\n\r\n        uint256 weiAmount = msg.value;\r\n        require(weiAmount > 0);\r\n        require(weiRaised.add(weiAmount) <= hardCap);\r\n\r\n        uint256 totalPrior = totalDeposited(_beneficiary);\r\n        uint256 totalAfter = totalPrior.add(weiAmount);\r\n        require(totalAfter <= whitelistedMax[_beneficiary]);\r\n\r\n        uint256 saleTokens;\r\n        uint256 bonusTokens;\r\n\r\n        (saleTokens, bonusTokens) = tokensForPurchase(_beneficiary, weiAmount);\r\n\r\n        uint256 newDeposited = deposited[_beneficiary].add(weiAmount);\r\n        deposited[_beneficiary] = newDeposited;\r\n        investors.push(_beneficiary);\r\n\r\n        weiRaised = weiRaised.add(weiAmount);\r\n\r\n        saleToken.mint(_beneficiary, saleTokens);\r\n        if (bonusTokens > 0) {\r\n            bonusToken.mint(_beneficiary, bonusTokens);\r\n        }\r\n\r\n        TokenPurchase(\r\n            msg.sender,\r\n            _beneficiary,\r\n            weiAmount,\r\n            saleTokens,\r\n            bonusTokens\r\n        );\r\n    }\r\n\r\n    function changeWallet(address _wallet) onlyOwner public payable {\r\n        require(_wallet != 0x0);\r\n        require(msg.value > 0);\r\n\r\n        WalletChanged(wallet, _wallet);\r\n        wallet = _wallet;\r\n\r\n        wallet.transfer(msg.value);\r\n    }\r\n\r\n    function extendTime(uint256 _timeExtension) onlyOwner public {\r\n        require(!finished);\r\n        require(now < endTime + timeExtension);\r\n        require(_timeExtension > 0);\r\n\r\n        timeExtension = timeExtension.add(_timeExtension);\r\n        require(timeExtension <= 7 days);\r\n\r\n        Extended(endTime.add(timeExtension));\r\n    }\r\n\r\n    function finish() onlyOwner public {\r\n        require(!finished);\r\n        require(hardCapReached() || now > endTime + timeExtension);\r\n\r\n        finished = true;\r\n        finishedAt = now;\r\n        saleToken.finishMinting();\r\n        bonusToken.finishMinting();\r\n\r\n        uint256 distributableCoins = telcoin.balanceOf(this);\r\n\r\n        if (softCapReached()) {\r\n            uint256 saleTokens = saleToken.totalSupply();\r\n            uint256 bonusTokens = bonusToken.totalSupply();\r\n            uint256 totalTokens = saleTokens.add(bonusTokens);\r\n\r\n            // Avoid loss of precision by multiplying and later dividing by\r\n            // a large value.\r\n            uint256 bonusPortion = bonusTokens.mul(10 ** 18).div(totalTokens).mul(distributableCoins).div(10 ** 18);\r\n            uint256 salePortion = distributableCoins.sub(bonusPortion);\r\n\r\n            saleToken.transferOwnership(owner);\r\n            bonusToken.transferOwnership(owner);\r\n\r\n            telcoin.transfer(saleToken, salePortion);\r\n            telcoin.transfer(bonusToken, bonusPortion);\r\n\r\n            withdraw();\r\n        } else {\r\n            refunding = true;\r\n            telcoin.transfer(wallet, distributableCoins);\r\n            Refunding();\r\n        }\r\n\r\n        Finalized();\r\n    }\r\n\r\n    function pause() onlyOwner public {\r\n        require(!paused);\r\n        paused = true;\r\n        Pause();\r\n    }\r\n\r\n    function refundMany(address[] _investors) public {\r\n        for (uint256 i = 0; i < _investors.length; i++) {\r\n            refund(_investors[i]);\r\n        }\r\n    }\r\n\r\n    function refund(address _investor) public {\r\n        require(finished);\r\n        require(refunding);\r\n        require(deposited[_investor] > 0);\r\n\r\n        uint256 weiAmount = deposited[_investor];\r\n        deposited[_investor] = 0;\r\n        weiRefunded = weiRefunded.add(weiAmount);\r\n        Refunded(_investor, weiAmount);\r\n\r\n        _investor.transfer(weiAmount);\r\n    }\r\n\r\n    function registerAltPurchase(\r\n        address _beneficiary,\r\n        string _symbol,\r\n        string _transactionId,\r\n        uint256 _weiAmount\r\n    )\r\n        saleOpen\r\n        onlyOwner\r\n        public\r\n    {\r\n        require(_beneficiary != address(0));\r\n        require(totalDeposited(_beneficiary).add(_weiAmount) <= whitelistedMax[_beneficiary]);\r\n\r\n        uint256 saleTokens;\r\n        uint256 bonusTokens;\r\n\r\n        (saleTokens, bonusTokens) = tokensForPurchase(_beneficiary, _weiAmount);\r\n\r\n        uint256 newAltDeposited = altDeposited[_beneficiary].add(_weiAmount);\r\n        altDeposited[_beneficiary] = newAltDeposited;\r\n        investors.push(_beneficiary);\r\n\r\n        weiRaised = weiRaised.add(_weiAmount);\r\n\r\n        saleToken.mint(_beneficiary, saleTokens);\r\n        if (bonusTokens > 0) {\r\n            bonusToken.mint(_beneficiary, bonusTokens);\r\n        }\r\n\r\n        TokenAltPurchase(\r\n            msg.sender,\r\n            _beneficiary,\r\n            _weiAmount,\r\n            saleTokens,\r\n            bonusTokens,\r\n            _symbol,\r\n            _transactionId\r\n        );\r\n    }\r\n\r\n    function transferOwnership(address _to) onlyOwner public {\r\n        require(_to != address(0));\r\n        OwnershipTransferred(owner, _to);\r\n        owner = _to;\r\n    }\r\n\r\n    function unpause() onlyOwner public {\r\n        require(paused);\r\n        paused = false;\r\n        Unpause();\r\n    }\r\n\r\n    function updateCapFlex(uint32 _capFlex) onlyOwner public {\r\n        require(!finished);\r\n        capFlex = _capFlex;\r\n        CapFlexed(capFlex);\r\n    }\r\n\r\n    function whitelistMany(\r\n        address[] _participants,\r\n        uint256 _minWeiAmount,\r\n        uint256 _maxWeiAmount,\r\n        uint32 _bonusRate\r\n    )\r\n        onlyOwner\r\n        public\r\n    {\r\n        for (uint256 i = 0; i < _participants.length; i++) {\r\n            whitelist(\r\n                _participants[i],\r\n                _minWeiAmount,\r\n                _maxWeiAmount,\r\n                _bonusRate\r\n            );\r\n        }\r\n    }\r\n\r\n    function whitelist(\r\n        address _participant,\r\n        uint256 _minWeiAmount,\r\n        uint256 _maxWeiAmount,\r\n        uint32 _bonusRate\r\n    )\r\n        onlyOwner\r\n        public\r\n    {\r\n        require(_participant != 0x0);\r\n        require(_bonusRate <= 400);\r\n\r\n        whitelistedMin[_participant] = _minWeiAmount;\r\n        whitelistedMax[_participant] = _maxWeiAmount;\r\n        bonusRates[_participant] = _bonusRate;\r\n        Whitelisted(\r\n            _participant,\r\n            _minWeiAmount,\r\n            _maxWeiAmount,\r\n            _bonusRate\r\n        );\r\n    }\r\n\r\n    function withdraw() onlyOwner public {\r\n        require(softCapReached() || (finished && now > finishedAt + 14 days));\r\n\r\n        uint256 weiAmount = this.balance;\r\n\r\n        if (weiAmount > 0) {\r\n            wallet.transfer(weiAmount);\r\n            Withdrawal(wallet, weiAmount);\r\n        }\r\n    }\r\n\r\n    function hardCapReached() public constant returns (bool) {\r\n        return weiRaised >= hardCap.mul(1000 + capFlex).div(1000);\r\n    }\r\n\r\n    function tokensForPurchase(\r\n        address _beneficiary,\r\n        uint256 _weiAmount\r\n    )\r\n        public\r\n        constant\r\n        returns (uint256, uint256)\r\n    {\r\n        uint256 baseTokens = _weiAmount.mul(rate);\r\n        uint256 totalPrior = totalDeposited(_beneficiary);\r\n        uint256 totalAfter = totalPrior.add(_weiAmount);\r\n\r\n        // Has the beneficiary passed the assigned minimum purchase level?\r\n        if (totalAfter < whitelistedMin[_beneficiary]) {\r\n            return (baseTokens, 0);\r\n        }\r\n\r\n        uint32 bonusRate = bonusRates[_beneficiary];\r\n        uint256 baseBonus = baseTokens.mul(1000 + bonusRate).div(1000).sub(baseTokens);\r\n\r\n        // Do we pass the minimum purchase level with this purchase?\r\n        if (totalPrior < whitelistedMin[_beneficiary]) {\r\n            uint256 balancePrior = totalPrior.mul(rate);\r\n            uint256 accumulatedBonus = balancePrior.mul(1000 + bonusRate).div(1000).sub(balancePrior);\r\n            return (baseTokens, accumulatedBonus.add(baseBonus));\r\n        }\r\n\r\n        return (baseTokens, baseBonus);\r\n    }\r\n\r\n    function totalDeposited(address _investor) public constant returns (uint256) {\r\n        return deposited[_investor].add(altDeposited[_investor]);\r\n    }\r\n\r\n    function softCapReached() public constant returns (bool) {\r\n        return weiRaised >= softCap.mul(1000 + capFlex).div(1000);\r\n    }\r\n}\r\n\r\n\r\ncontract TelcoinSaleKYCEscrow {\r\n    using SafeMath for uint256;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    event ValuePlaced(address indexed purchaser, address indexed beneficiary, uint256 amount);\r\n    event Approved(address indexed participant);\r\n    event Rejected(address indexed participant);\r\n    event Closed();\r\n\r\n    /// The owner of the contract.\r\n    address public owner;\r\n\r\n    /// The actual sale.\r\n    TelcoinSale public sale;\r\n\r\n    /// Whether the escrow has closed.\r\n    bool public closed = false;\r\n\r\n    /// The amount of wei and wei equivalents invested by each investor.\r\n    mapping(address => uint256) public deposited;\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    modifier escrowOpen() {\r\n        require(!closed);\r\n        _;\r\n    }\r\n\r\n    function TelcoinSaleKYCEscrow(TelcoinSale _sale) public {\r\n        require(_sale != address(0));\r\n\r\n        owner = msg.sender;\r\n        sale = _sale;\r\n    }\r\n\r\n    function () public payable {\r\n        placeValue(msg.sender);\r\n    }\r\n\r\n    function approve(address _participant) onlyOwner public {\r\n        uint256 weiAmount = deposited[_participant];\r\n        require(weiAmount > 0);\r\n\r\n        deposited[_participant] = 0;\r\n        Approved(_participant);\r\n        sale.buyTokens.value(weiAmount)(_participant);\r\n    }\r\n\r\n    function approveMany(address[] _participants) onlyOwner public {\r\n        for (uint256 i = 0; i < _participants.length; i++) {\r\n            approve(_participants[i]);\r\n        }\r\n    }\r\n\r\n    function close() onlyOwner public {\r\n        require(!closed);\r\n\r\n        closed = true;\r\n        Closed();\r\n    }\r\n\r\n    function placeValue(address _beneficiary) escrowOpen public payable {\r\n        require(_beneficiary != address(0));\r\n\r\n        uint256 weiAmount = msg.value;\r\n        require(weiAmount > 0);\r\n\r\n        uint256 newDeposited = deposited[_beneficiary].add(weiAmount);\r\n        deposited[_beneficiary] = newDeposited;\r\n\r\n        ValuePlaced(\r\n            msg.sender,\r\n            _beneficiary,\r\n            weiAmount\r\n        );\r\n    }\r\n\r\n    function reject(address _participant) onlyOwner public {\r\n        uint256 weiAmount = deposited[_participant];\r\n        require(weiAmount > 0);\r\n\r\n        deposited[_participant] = 0;\r\n        Rejected(_participant);\r\n        require(_participant.call.value(weiAmount)());\r\n    }\r\n\r\n    function rejectMany(address[] _participants) onlyOwner public {\r\n        for (uint256 i = 0; i < _participants.length; i++) {\r\n            reject(_participants[i]);\r\n        }\r\n    }\r\n\r\n    function transferOwnership(address _to) onlyOwner public {\r\n        require(_to != address(0));\r\n        OwnershipTransferred(owner, _to);\r\n        owner = _to;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_participants\",\"type\":\"address[]\"}],\"name\":\"rejectMany\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"close\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"closed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sale\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"placeValue\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_participant\",\"type\":\"address\"}],\"name\":\"reject\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_participants\",\"type\":\"address[]\"}],\"name\":\"approveMany\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"deposited\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_participant\",\"type\":\"address\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_sale\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ValuePlaced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"participant\",\"type\":\"address\"}],\"name\":\"Approved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"participant\",\"type\":\"address\"}],\"name\":\"Rejected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Closed\",\"type\":\"event\"}]","ContractName":"TelcoinSaleKYCEscrow","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000078f7ef08b4583f9866d8a98a9f2d9b64d9c02380","Library":"","SwarmSource":"bzzr://25871790f8a41b0fb34900dc5ee5c6233523c34ee5bb5d724cf5f7dcef11b20f"}]}