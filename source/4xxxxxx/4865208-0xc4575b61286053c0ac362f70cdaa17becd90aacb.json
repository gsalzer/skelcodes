{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n/**\r\n * @title SafeMath for performing valid mathematics.\r\n */\r\nlibrary SafeMath {\r\n  function Mul (uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function Div (uint256 a, uint256 b) internal pure returns (uint256) {\r\n    //assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function Sub (uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function Add (uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * Contract \"Ownable\"\r\n * Purpose: Defines Owner for contract\r\n * Status : Complete\r\n * \r\n */\r\ncontract Ownable {\r\n\r\n\t//owner variable to store contract owner account\r\n  address public owner;\r\n\r\n  //Constructor for the contract to store owner's account on deployement\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  //modifier to check transaction initiator is only owner\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n}\r\n\r\n// ERC20 Interface\r\ncontract ERC20 {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title GIZA to implement token\r\n */\r\ncontract GIZAToken is ERC20, Ownable {\r\n\r\n    using SafeMath for uint256;\r\n    //The name of the  token\r\n    bytes32 public name;\r\n    //The token symbol\r\n    bytes32 public symbol;\r\n    //The precision used in the calculations in contract\r\n    uint8 public decimals;   \r\n    //To denote the locking on transfer of tokens among token holders\r\n    bool public locked;\r\n\t// Founder address. Need to froze for 8 moths\r\n\taddress public founder;\r\n\t// Team address. Need to froze for 8 moths\r\n\taddress public team;\r\n\t// Start of Pre-ICO date\r\n\tuint256 public start;\r\n\t\r\n    //Mapping to relate number of  token to the account\r\n    mapping(address => uint256 ) balances;\r\n    //Mapping to relate owner and spender to the tokens allowed to transfer from owner\r\n    mapping(address => mapping(address => uint256)) allowed;\r\n\r\n    event Burn(address indexed burner, uint indexed value);  \r\n\r\n    /**\r\n    * @dev Constructor of GIZA\r\n    */\r\n    function GIZAToken(address _founder, address _team) public {\r\n\t\trequire( _founder != address(0) && _team != address(0) );\r\n        /* Public variables of the token */\r\n        //The name of the  token\r\n        name = \"GIZA Token\";\r\n        //The token symbol\r\n        symbol = \"GIZA\";\r\n        //Number of zeroes to be treated as decimals\r\n        decimals = 18;       \r\n        //initial token supply 0\r\n        totalSupply = 368e23; // 36 800 000 tokens total\r\n        //Transfer of tokens is locked (not allowed) when contract is deployed\r\n        locked = true;\r\n\t\t// Save founder and team address\r\n\t\tfounder = _founder;\r\n\t\tteam = _team;\r\n\t\tbalances[msg.sender] = totalSupply;\r\n\t\tstart = 0;\r\n    }\r\n      \r\n\tfunction startNow() external onlyOwner {\r\n\t\tstart = now;\r\n\t}\r\n\t  \r\n    //To handle ERC20 short address attack\r\n    modifier onlyPayloadSize(uint256 size) {\r\n       require(msg.data.length >= size + 4);\r\n       _;\r\n    }\r\n\r\n    modifier onlyUnlocked() { \r\n      require (!locked); \r\n      _; \r\n    }\r\n\t\r\n    modifier ifNotFroze() { \r\n\t\tif ( \r\n\t\t  (msg.sender == founder || msg.sender == team) && \r\n\t\t  (start == 0 || now < (start + 80 days) ) ) revert();\r\n\t\t_;\r\n    }\r\n    \r\n    //To enable transfer of tokens\r\n    function unlockTransfer() external onlyOwner{\r\n      locked = false;\r\n    }\r\n\r\n    /**\r\n    * @dev Check balance of given account address\r\n    *\r\n    * @param _owner The address account whose balance you want to know\r\n    * @return balance of the account\r\n    */\r\n    function balanceOf(address _owner) public view returns (uint256 _value){\r\n        return balances[_owner];\r\n    }\r\n\r\n    /**\r\n    * @dev Transfer tokens to an address given by sender\r\n    *\r\n    * @param _to The address which you want to transfer to\r\n    * @param _value the amount of tokens to be transferred\r\n    * @return A bool if the transfer was a success or not\r\n    */\r\n    function transfer(address _to, uint256 _value) onlyPayloadSize(2 * 32) onlyUnlocked ifNotFroze public returns(bool _success) {\r\n        require( _to != address(0) );\r\n        if((balances[msg.sender] > _value) && _value > 0){\r\n\t\t\tbalances[msg.sender] = balances[msg.sender].Sub(_value);\r\n\t\t\tbalances[_to] = balances[_to].Add(_value);\r\n\t\t\tTransfer(msg.sender, _to, _value);\r\n\t\t\treturn true;\r\n        }\r\n        else{\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev Transfer tokens from one address to another, for ERC20.\r\n    *\r\n    * @param _from The address which you want to send tokens from\r\n    * @param _to The address which you want to transfer to\r\n    * @param _value the amount of tokens to be transferred\r\n    * @return A bool if the transfer was a success or not\r\n    */\r\n    function transferFrom(address _from, address _to, uint256 _value) onlyPayloadSize(3 * 32) onlyUnlocked ifNotFroze public returns (bool success){\r\n        require( _to != address(0) && (_from != address(0)));\r\n        if((_value > 0)\r\n           && (allowed[_from][msg.sender] > _value )){\r\n            balances[_from] = balances[_from].Sub(_value);\r\n            balances[_to] = balances[_to].Add(_value);\r\n            allowed[_from][msg.sender] = allowed[_from][msg.sender].Sub(_value);\r\n            Transfer(_from, _to, _value);\r\n            return true;\r\n        }\r\n        else{\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev Function to check the amount of tokens that an owner has allowed a spender to recieve from owner.\r\n    *\r\n    * @param _owner address The address which owns the funds.\r\n    * @param _spender address The address which will spend the funds.\r\n    * @return A uint256 specifying the amount of tokens still available for the spender to spend.\r\n    */\r\n    function allowance(address _owner, address _spender) public view returns (uint256){\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    /**\r\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n    *\r\n    * @param _spender The address which will spend the funds.\r\n    * @param _value The amount of tokens to be spent.\r\n    */\r\n    function approve(address _spender, uint256 _value) public returns (bool){\r\n        if( (_value > 0) && (_spender != address(0)) && (balances[msg.sender] >= _value)){\r\n            allowed[msg.sender][_spender] = _value;\r\n            Approval(msg.sender, _spender, _value);\r\n            return true;\r\n        }\r\n        else{\r\n            return false;\r\n        }\r\n    }\r\n    \r\n    // Only owner can burn own tokens\r\n    function burn(uint _value) public onlyOwner {\r\n        require(_value > 0);\r\n        address burner = msg.sender;\r\n        balances[burner] = balances[burner].Sub(_value);\r\n        totalSupply = totalSupply.Sub(_value);\r\n        Burn(burner, _value);\r\n    }\r\n\r\n}\r\n\r\ncontract Crowdsale is Ownable {\r\n    \r\n    using SafeMath for uint256;\r\n    GIZAToken token;\r\n    address public token_address;\r\n    address public owner;\r\n    address founder;\r\n    address team;\r\n    address multisig;\r\n    bool started = false;\r\n    //price of token against 1 ether\r\n    uint256 public dollarsForEther;\r\n    //No of days for which pre ico will be open\r\n    uint256 constant DURATION_PRE_ICO = 30;\r\n    uint256 startBlock = 0; // Start timestamp\r\n    uint256 tokensBought = 0; // Amount of bought tokens\r\n    uint256 totalRaisedEth = 0; // Total raised ETH\r\n\r\n    uint256 constant MAX_TOKENS_FIRST_7_DAYS_PRE_ICO  = 11000000 * 1 ether; // 10 000 000 + 10%\r\n\tuint256 constant MAX_TOKENS_PRE_ICO    \t\t\t\t    = 14850000 * 1 ether; // max 14 850 000 tokens\r\n    uint256 constant MAX_TOKENS_FIRST_5_DAYS_ICO        = 3850000 * 1 ether;   // 3 500 000 + 10%\r\n    uint256 constant MAX_TOKENS_FIRST_10_DAYS_ICO      \t= 10725000 * 1 ether; // 9 750 000 + 10%\r\n    uint256 constant MAX_BOUNTY      \t                \t\t\t= 1390000 * 1 ether;\r\n    uint256 bountySent = 0;\r\n    enum CrowdsaleType { PreICO, ICO }\r\n    CrowdsaleType etype = CrowdsaleType.PreICO;\r\n    \r\n    \r\n    function Crowdsale(address _founder, address _team, address _multisig) public {\r\n        require(_founder != address(0) && _team != address(0) && _multisig != address(0));\r\n        owner = msg.sender;\r\n        team = _team;\r\n        multisig = _multisig;\r\n        founder = _founder;\r\n        token = new GIZAToken(_founder, _team);\r\n        token_address = address(token);\r\n    }\r\n    \r\n    modifier isStarted() {\r\n        require (started == true);\r\n        _;\r\n    }\r\n    \r\n    // Set current price of one Ether in dollars\r\n    function setDollarForOneEtherRate(uint256 _dollars) public onlyOwner {\r\n        dollarsForEther = _dollars;\r\n    }\r\n    \r\n    function sendBounty(address _to, uint256 _amount) public onlyOwner returns(bool){\r\n        require(_amount != 0 && _to != address(0));\r\n        token.unlockTransfer();\r\n        uint256 totalToSend = _amount.Mul(1 ether);\r\n        require(bountySent.Add(totalToSend) < MAX_BOUNTY);\r\n        if ( transferTokens(_to, totalToSend) ){\r\n                bountySent = bountySent.Add(totalToSend);\r\n                return true;\r\n        }else\r\n            return false;        \r\n    }\r\n    \r\n    function sendTokens(address _to, uint256 _amount) public onlyOwner returns(bool){\r\n        require(_amount != 0 && _to != address(0));\r\n        token.unlockTransfer();\r\n        return transferTokens(_to, _amount.Mul(1 ether));\r\n    } \r\n  \r\n    //To start Pre ICO\r\n    function startPreICO(uint256 _dollarForOneEtherRate) public onlyOwner {\r\n        require(startBlock == 0 && _dollarForOneEtherRate > 0);\r\n        //Set block number to current block number\r\n        startBlock = now;\r\n        //to show pre Ico is running\r\n        etype = CrowdsaleType.PreICO;\r\n        started = true;\r\n        dollarsForEther = _dollarForOneEtherRate;\r\n        token.startNow();\r\n        token.unlockTransfer();\r\n    }\r\n\t\r\n\t// Finish pre ICO.\r\n\tfunction endPreICO() public onlyOwner {\r\n\t\tstarted = false;\r\n\t}\r\n  \r\n    //to start ICO\r\n    function startICO(uint256 _dollarForOneEtherRate) public onlyOwner{\r\n        //ico can be started only after the end of pre ico\r\n        require( startBlock != 0 && now > startBlock.Add(DURATION_PRE_ICO) );\r\n        startBlock = now;\r\n        //to show iCO IS running\r\n        etype = CrowdsaleType.ICO;\r\n        started = true;\r\n        dollarsForEther = _dollarForOneEtherRate;\r\n    }\r\n    \r\n    // Get current price of token on current time interval\r\n    function getCurrentTokenPriceInCents() public view returns(uint256){\r\n        require(startBlock != 0);\r\n        uint256 _day = (now - startBlock).Div(1 days);\r\n        // Pre-ICO\r\n        if (etype == CrowdsaleType.PreICO){\r\n            require(_day <= DURATION_PRE_ICO && tokensBought < MAX_TOKENS_PRE_ICO);\r\n            if (_day >= 0 && _day <= 7 && tokensBought < MAX_TOKENS_FIRST_7_DAYS_PRE_ICO)\r\n                return 20; // $0.2\r\n\t\t\telse\r\n                return 30; // $0.3\r\n        // ICO\r\n        } else {\r\n            if (_day >= 0 && _day <= 5 && tokensBought < MAX_TOKENS_FIRST_5_DAYS_ICO)\r\n                return 60; // $0.6 \r\n            else if (_day > 5 && _day <= 10 && tokensBought < MAX_TOKENS_FIRST_10_DAYS_ICO)\r\n                return 80; // $0.8 \r\n            else\r\n                return 100; // $1 \r\n        }        \r\n    }\r\n    \r\n    // Calculate tokens to send\r\n    function calcTokensToSend(uint256 _value) internal view returns (uint256){\r\n        require (_value > 0);\r\n        \r\n        // Current token price in cents\r\n        uint256 currentTokenPrice = getCurrentTokenPriceInCents();\r\n        \r\n        // Calculate value in dollars*100\r\n        // _value in dollars * 100 \r\n        // Example: for $54.38 valueInDollars = 5438        \r\n        uint256 valueInDollars = _value.Mul(dollarsForEther).Div(10**16);\r\n        uint256 tokensToSend = valueInDollars.Div(currentTokenPrice);\r\n        \r\n        // Calculate bonus by purshase\r\n        uint8 bonusPercent = 0;\r\n        _value = _value.Div(1 ether).Mul(dollarsForEther);\r\n        if ( _value >= 35000 ){\r\n            bonusPercent = 10;\r\n        }else if ( _value >= 20000 ){\r\n            bonusPercent = 7;\r\n        }else if ( _value >= 10000 ){\r\n            bonusPercent = 5;\r\n        }\r\n        // Add bonus tokens\r\n        if (bonusPercent > 0) tokensToSend = tokensToSend.Add(tokensToSend.Div(100).Mul(bonusPercent));\r\n        \r\n        return tokensToSend;\r\n    }    \r\n\r\n    // Transfer funds to owner\r\n    function forwardFunds(uint256 _value) internal {\r\n        multisig.transfer(_value);\r\n    }\r\n\r\n    // transfer tokens\r\n    function transferTokens(address _to, uint256 _tokensToSend) internal returns(bool){\r\n        uint256 tot = _tokensToSend.Mul(1222).Div(8778); // 5.43 + 6.79 = 12.22, 10000 - 1222 = 8778 \r\n        uint256 tokensForTeam = tot.Mul(4443).Div(1e4);// 5.43% for Team (44,43% of (5.43 + 6.79) )\r\n        uint256 tokensForFounder = tot.Sub(tokensForTeam);// 6.79% for Founders\r\n        uint256 totalToSend = _tokensToSend.Add(tokensForFounder).Add(tokensForTeam);\r\n        if (token.balanceOf(this) >= totalToSend && \r\n            token.transfer(_to, _tokensToSend) == true){\r\n                token.transfer(founder, tokensForFounder);\r\n                token.transfer(team, tokensForTeam);\r\n                tokensBought = tokensBought.Add(totalToSend);\r\n                return true;\r\n        }else\r\n            return false;\r\n    }\r\n\r\n    function buyTokens(address _beneficiary) public isStarted payable {\r\n        require(_beneficiary != address(0) &&  msg.value != 0 );\r\n        uint256 tokensToSend = calcTokensToSend(msg.value);\r\n        tokensToSend = tokensToSend.Mul(1 ether);\r\n        \r\n        // Pre-ICO\r\n        if (etype == CrowdsaleType.PreICO){\r\n            require(tokensBought.Add(tokensToSend) < MAX_TOKENS_PRE_ICO);\r\n        }      \r\n        \r\n        if (!transferTokens(_beneficiary, tokensToSend)) revert();\r\n        totalRaisedEth = totalRaisedEth.Add( (msg.value).Div(1 ether) );\r\n        forwardFunds(msg.value);\r\n    }\r\n\r\n    // Fallback function\r\n    function () public payable {\r\n        buyTokens(msg.sender);\r\n    }\r\n    \r\n    // Burn unsold tokens\r\n    function burnTokens() public onlyOwner {\r\n        token.burn( token.balanceOf(this) );\r\n        started = false;\r\n    }\r\n    \r\n    // destroy this contract\r\n    function kill() public onlyOwner{\r\n        selfdestruct(multisig);   \r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"sendTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"burnTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"sendBounty\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"endPreICO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_dollars\",\"type\":\"uint256\"}],\"name\":\"setDollarForOneEtherRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token_address\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_dollarForOneEtherRate\",\"type\":\"uint256\"}],\"name\":\"startICO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_dollarForOneEtherRate\",\"type\":\"uint256\"}],\"name\":\"startPreICO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dollarsForEther\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentTokenPriceInCents\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_founder\",\"type\":\"address\"},{\"name\":\"_team\",\"type\":\"address\"},{\"name\":\"_multisig\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"Crowdsale","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000001A836128518533C4aA1a21E178cDEadbA30Addb800000000000000000000000052b622010c2AC7a6BF50F86e3468b6f1510854870000000000000000000000005505b8415A83f8C190c02458bd8Ec0eFeD15642e","Library":"","SwarmSource":"bzzr://04b8e056df031d9770fb58ac4ad28667735d3893bf5a146db71b90f6b6d73a80"}]}