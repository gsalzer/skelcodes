{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n * Investors relations: partners@xrpconnect.co\r\n * \r\n * Ken Brannon\r\n * Contact: ken@xrpconnect.co\r\n**/\r\n\r\npragma solidity ^0.4.11;\r\n\r\n/**\r\n * @title Crowdsale\r\n * @dev Crowdsale is a base contract for managing a token crowdsale.\r\n * Crowdsales have a start and end timestamps, where investors can make\r\n * token purchases and the crowdsale will assign them tokens based\r\n * on a token per ETH rate. Funds collected are forwarded to a wallet\r\n * as they arrive.\r\n */\r\n \r\n \r\n/**\r\n * SafeMath library to support basic mathematical operations \r\n * Used for security of the contract\r\n **/ \r\n \r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * Ownable contract  \r\n * Makes an address the owner of a contract\r\n * Used so that onlyOwner modifier can be Used\r\n * onlyOwner modifier is used so that some functions can only be called by the contract owner\r\n **/\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\ninterface XRPCToken {\r\n    function transfer(address receiver, uint amount) public;\r\n    function balanceOf(address _owner) public returns (uint256 balance);\r\n    function mint(address wallet, address buyer, uint256 tokenAmount) public;\r\n    function showMyTokenBalance(address addr) public;\r\n}\r\n\r\ncontract newCrowdsale is Ownable {\r\n    \r\n    // safe math library imported for safe mathematical operations\r\n    using SafeMath for uint256;\r\n    \r\n    // start and end timestamps where investments are allowed (both inclusive)\r\n    uint256 public startTime;\r\n    uint256 public endTime;\r\n  \r\n    // to maintain a list of owners and their specific equity percentages\r\n    mapping(address=>uint256) public ownerAddresses;  //the first one would always be the major owner\r\n    \r\n    address[] owners;\r\n    \r\n    uint256 public majorOwnerShares = 100;\r\n    uint256 public minorOwnerShares = 10;\r\n    uint256 public coinPercentage = 5;\r\n  \r\n    // how many token units a buyer gets per wei\r\n    uint256 public rate = 650;\r\n\r\n    // amount of raised money in wei\r\n    uint256 public weiRaised;\r\n  \r\n    bool public isCrowdsaleStopped = false;\r\n  \r\n    bool public isCrowdsalePaused = false;\r\n    \r\n    /**\r\n    * event for token purchase logging\r\n    * @param purchaser who paid for the tokens\r\n    * @param beneficiary who got the tokens\r\n    * @param value weis paid for purchase\r\n    * @param amount amount of tokens purchased\r\n    */\r\n    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n\r\n  \r\n    // The token that would be sold using this contract \r\n    XRPCToken public token;\r\n    \r\n    \r\n    function newCrowdsale(uint _daysToStart, address _walletMajorOwner) public \r\n    {\r\n        token = XRPCToken(0xAdb41FCD3DF9FF681680203A074271D3b3Dae526); \r\n        \r\n        _daysToStart = _daysToStart * 1 days;\r\n        \r\n        startTime = now + _daysToStart;   \r\n        endTime = startTime + 90 days;\r\n        \r\n        require(endTime >= startTime);\r\n        require(_walletMajorOwner != 0x0);\r\n        \r\n        ownerAddresses[_walletMajorOwner] = majorOwnerShares;\r\n        \r\n        owners.push(_walletMajorOwner);\r\n        \r\n        owner = _walletMajorOwner;\r\n    }\r\n    \r\n    // fallback function can be used to buy tokens\r\n    function () public payable {\r\n    buy(msg.sender);\r\n    }\r\n    \r\n    function buy(address beneficiary) public payable\r\n    {\r\n        require (isCrowdsaleStopped != true);\r\n        require (isCrowdsalePaused != true);\r\n        \r\n        require(beneficiary != 0x0);\r\n        require(validPurchase());\r\n\r\n        uint256 weiAmount = msg.value;\r\n        uint256 tokens = weiAmount.mul(rate);\r\n\r\n        // update state\r\n        weiRaised = weiRaised.add(weiAmount);\r\n\r\n        token.transfer(beneficiary,tokens);\r\n         uint partnerCoins = tokens.mul(coinPercentage);\r\n        partnerCoins = partnerCoins.div(100);\r\n        \r\n        TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\r\n\r\n        forwardFunds(partnerCoins);\r\n    }\r\n    \r\n     // send ether to the fund collection wallet(s)\r\n    function forwardFunds(uint256 partnerTokenAmount) internal {\r\n      for (uint i=0;i<owners.length;i++)\r\n      {\r\n         uint percent = ownerAddresses[owners[i]];\r\n         uint amountToBeSent = msg.value.mul(percent);\r\n         amountToBeSent = amountToBeSent.div(100);\r\n         owners[i].transfer(amountToBeSent);\r\n         \r\n         if (owners[i]!=owner &&  ownerAddresses[owners[i]]>0)\r\n         {\r\n             token.transfer(owners[i],partnerTokenAmount);\r\n         }\r\n      }\r\n    }\r\n   \r\n     /**\r\n     * function to add a partner\r\n     * can only be called by the major/actual owner wallet\r\n     **/  \r\n    function addPartner(address partner) public onlyOwner {\r\n\r\n        require(partner != 0x0);\r\n        require(ownerAddresses[owner] >=20);\r\n        require(ownerAddresses[partner] == 0);\r\n        owners.push(partner);\r\n        ownerAddresses[partner] = 10;\r\n        uint majorOwnerShare = ownerAddresses[owner];\r\n        ownerAddresses[owner] = majorOwnerShare.sub(10);\r\n    }\r\n    \r\n    /**\r\n     * function to remove a partner\r\n     * can only be called by the major/actual owner wallet\r\n     **/ \r\n    function removePartner(address partner) public onlyOwner  {\r\n        require(partner != 0x0);\r\n        require(ownerAddresses[partner] > 0);\r\n        require(ownerAddresses[owner] <= 90);\r\n        ownerAddresses[partner] = 0;\r\n        uint majorOwnerShare = ownerAddresses[owner];\r\n        ownerAddresses[owner] = majorOwnerShare.add(10);\r\n    }\r\n\r\n    // @return true if the transaction can buy tokens\r\n    function validPurchase() internal constant returns (bool) {\r\n        bool withinPeriod = now >= startTime && now <= endTime;\r\n        bool nonZeroPurchase = msg.value != 0;\r\n        return withinPeriod && nonZeroPurchase;\r\n    }\r\n\r\n    // @return true if crowdsale event has ended\r\n    function hasEnded() public constant returns (bool) {\r\n        return now > endTime;\r\n    }\r\n  \r\n    function showMyTokenBalance(address myAddress) public returns (uint256 tokenBalance) {\r\n       tokenBalance = token.balanceOf(myAddress);\r\n    }\r\n\r\n    /**\r\n     * function to change the end date of the ICO\r\n     **/ \r\n    function setEndDate(uint256 daysToEndFromToday) public onlyOwner returns(bool) {\r\n        daysToEndFromToday = daysToEndFromToday * 1 days;\r\n        endTime = now + daysToEndFromToday;\r\n    }\r\n\r\n    /**\r\n     * function to set the new price \r\n     * can only be called from owner wallet\r\n     **/ \r\n    function setPriceRate(uint256 newPrice) public onlyOwner returns (bool) {\r\n        rate = newPrice;\r\n    }\r\n    \r\n    /**\r\n     * function to pause the crowdsale \r\n     * can only be called from owner wallet\r\n     **/\r\n     \r\n    function pauseCrowdsale() public onlyOwner returns(bool) {\r\n        isCrowdsalePaused = true;\r\n    }\r\n\r\n    /**\r\n     * function to resume the crowdsale if it is paused\r\n     * can only be called from owner wallet\r\n     * if the crowdsale has been stopped, this function would not resume it\r\n     **/ \r\n    function resumeCrowdsale() public onlyOwner returns (bool) {\r\n        isCrowdsalePaused = false;\r\n    }\r\n    \r\n    /**\r\n     * function to stop the crowdsale\r\n     * can only be called from the owner wallet\r\n     **/\r\n    function stopCrowdsale() public onlyOwner returns (bool) {\r\n        isCrowdsaleStopped = true;\r\n    }\r\n    \r\n    /**\r\n     * function to start the crowdsale manually\r\n     * can only be called from the owner wallet\r\n     * this function can be used if the owner wants to start the ICO before the specified start date\r\n     * this function can also be used to undo the stopcrowdsale, in case the crowdsale is stopped due to human error\r\n     **/\r\n    function startCrowdsale() public onlyOwner returns (bool) {\r\n        isCrowdsaleStopped = false;\r\n        startTime = now; \r\n    }\r\n    \r\n    /**\r\n     * Shows the remaining tokens in the contract i.e. tokens remaining for sale\r\n     **/ \r\n    function tokensRemainingForSale(address contractAddress) public returns (uint balance) {\r\n        balance = token.balanceOf(contractAddress);\r\n    }\r\n    \r\n    /**\r\n     * function to show the equity percentage of an owner - major or minor\r\n     * can only be called from the owner wallet\r\n     **/\r\n    function checkOwnerShare (address owner) public onlyOwner constant returns (uint share) {\r\n        share = ownerAddresses[owner];\r\n    }\r\n\r\n    /**\r\n     * function to change the coin percentage awarded to the partners\r\n     * can only be called from the owner wallet\r\n     **/\r\n    function changePartnerCoinPercentage(uint percentage) public onlyOwner {\r\n        coinPercentage = percentage;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"daysToEndFromToday\",\"type\":\"uint256\"}],\"name\":\"setEndDate\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isCrowdsaleStopped\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stopCrowdsale\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"setPriceRate\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"coinPercentage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"percentage\",\"type\":\"uint256\"}],\"name\":\"changePartnerCoinPercentage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"checkOwnerShare\",\"outputs\":[{\"name\":\"share\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"tokensRemainingForSale\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"partner\",\"type\":\"address\"}],\"name\":\"addPartner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"myAddress\",\"type\":\"address\"}],\"name\":\"showMyTokenBalance\",\"outputs\":[{\"name\":\"tokenBalance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minorOwnerShares\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isCrowdsalePaused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"ownerAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startCrowdsale\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pauseCrowdsale\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"majorOwnerShares\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"partner\",\"type\":\"address\"}],\"name\":\"removePartner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"resumeCrowdsale\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_daysToStart\",\"type\":\"uint256\"},{\"name\":\"_walletMajorOwner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"newCrowdsale","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d9acba6f45c7bed110cf7e86406ba2d295e9cc3a","Library":"","SwarmSource":"bzzr://3e3070a0b6474b24c4133dfabfdddbc15acd17e9bd8822643915651ff17ae09a"}]}