{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.15;\r\n\r\ncontract Base {\r\n\r\n    modifier only(address allowed) {\r\n        require(msg.sender == allowed);\r\n        _;\r\n    }\r\n\r\n    // *************************************************\r\n    // *          reentrancy handling                  *\r\n    // *************************************************\r\n    uint private bitlocks = 0;\r\n\r\n    modifier noAnyReentrancy {\r\n        var _locks = bitlocks;\r\n        require(_locks == 0);\r\n        bitlocks = uint(-1);\r\n        _;\r\n        bitlocks = _locks;\r\n    }\r\n}\r\n\r\ncontract IToken {\r\n    function mint(address _to, uint _amount) public;\r\n    function start() public;\r\n    function getTotalSupply()  public returns(uint);\r\n    function balanceOf(address _owner)  public returns(uint);\r\n    function transfer(address _to, uint _amount)  public returns (bool success);\r\n    function transferFrom(address _from, address _to, uint _value)  public returns (bool success);\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Owned is Base {\r\n    address public owner;\r\n    address newOwner;\r\n\r\n    function Owned() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) public only(owner) {\r\n        newOwner = _newOwner;\r\n    }\r\n\r\n    function acceptOwnership() public only(newOwner) {\r\n        OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n}\r\n\r\ncontract Crowdsale is Base, Owned {\r\n    using SafeMath for uint256;\r\n\r\n    enum State { INIT, BOUNTY, PREICO, PREICO_FINISHED, ICO, CLOSED, STOPPED }\r\n    enum SupplyType { BOUNTY, SALE }\r\n\r\n    uint public constant DECIMALS = 10**18;\r\n    uint public constant MAX_PREICO_SUPPLY = 20000000 * DECIMALS;\r\n    uint public constant MAX_ICO_SUPPLY = 70000000 * DECIMALS;\r\n    uint public constant MAX_BOUNTY_SUPPLY = 10000000 * DECIMALS;\r\n\r\n    State public currentState = State.INIT;\r\n    IToken public token;\r\n\r\n    uint public totalPreICOSupply = 0;\r\n    uint public totalICOSupply = 0;\r\n    uint public totalBountySupply = 0;\r\n\r\n    uint public totalFunds = 0;\r\n    uint public tokenPrice = 6000000000000; //wei\r\n    uint public bonus = 2000; //20%\r\n    uint public currentPrice;\r\n    address public beneficiary;\r\n    mapping(address => uint) balances;\r\n    uint public countMembers = 0;\r\n\r\n    uint private bonusBase = 10000; //100%;\r\n\r\n    event Transfer(address indexed _to, uint256 _value);\r\n\r\n    modifier inState(State _state){\r\n        require(currentState == _state);\r\n        _;\r\n    }\r\n\r\n    modifier salesRunning(){\r\n        require(currentState == State.PREICO || currentState == State.ICO);\r\n        _;\r\n    }\r\n\r\n    modifier notStopped(){\r\n        require(currentState != State.STOPPED);\r\n        _;\r\n    }\r\n\r\n    function Crowdsale(address _beneficiary) public {\r\n        beneficiary = _beneficiary;\r\n    }\r\n\r\n    function ()\r\n        public\r\n        payable\r\n        salesRunning\r\n    {\r\n        _receiveFunds();\r\n    }\r\n\r\n    function initialize(address _token)\r\n        public\r\n        only(owner)\r\n        inState(State.INIT)\r\n    {\r\n        require(_token != address(0));\r\n\r\n        token = IToken(_token);\r\n        currentPrice = tokenPrice;\r\n    }\r\n\r\n    function setBonus(uint _bonus) public\r\n        only(owner)\r\n        notStopped\r\n    {\r\n        bonus = _bonus;\r\n    }\r\n\r\n    function getBonus()\r\n        public\r\n        constant\r\n        returns(uint)\r\n    {\r\n        return bonus.mul(100).div(bonusBase);\r\n    }\r\n\r\n    function setTokenPrice(uint _tokenPrice) public\r\n        only(owner)\r\n        notStopped\r\n    {\r\n        currentPrice = _tokenPrice;\r\n    }\r\n\r\n    function setState(State _newState)\r\n        public\r\n        only(owner)\r\n    {\r\n        require(\r\n            currentState != State.STOPPED && (_newState == State.STOPPED ||\r\n            (currentState == State.INIT && _newState == State.BOUNTY\r\n            || currentState == State.BOUNTY && _newState == State.PREICO\r\n            || currentState == State.PREICO && _newState == State.PREICO_FINISHED\r\n            || currentState == State.PREICO_FINISHED && _newState == State.ICO\r\n            || currentState == State.ICO && _newState == State.CLOSED))\r\n        );\r\n\r\n        if(_newState == State.CLOSED){\r\n            _finish();\r\n        }\r\n\r\n        currentState = _newState;\r\n    }\r\n\r\n    function investDirect(address _to, uint _amount)\r\n        public\r\n        only(owner)\r\n        salesRunning\r\n    {\r\n        uint bonusTokens = _amount.mul(bonus).div(bonusBase);\r\n        _amount = _amount.add(bonusTokens);\r\n\r\n        _checkMaxSaleSupply(_amount);\r\n\r\n        _mint(_to, _amount);\r\n    }\r\n    \r\n    function investBounty(address _to, uint _amount)\r\n        public\r\n        only(owner)\r\n        inState(State.BOUNTY)\r\n    {\r\n        _mint(_to, _amount);\r\n    }\r\n\r\n\r\n    function getCountMembers()\r\n    public\r\n    constant\r\n    returns(uint)\r\n    {\r\n        return countMembers;\r\n    }\r\n\r\n    //==================== Internal Methods =================\r\n    function _mint(address _to, uint _amount)\r\n        noAnyReentrancy\r\n        internal\r\n    {\r\n        _increaseSupply(_amount);\r\n        IToken(token).mint(_to, _amount);\r\n        Transfer(_to, _amount);\r\n    }\r\n\r\n    function _finish()\r\n        noAnyReentrancy\r\n        internal\r\n    {\r\n        IToken(token).start();\r\n    }\r\n\r\n    function _receiveFunds()\r\n        internal\r\n    {\r\n        require(msg.value != 0);\r\n        uint weiAmount = msg.value;\r\n        uint transferTokens = weiAmount.mul(DECIMALS).div(currentPrice);\r\n\r\n        uint bonusTokens = transferTokens.mul(bonus).div(bonusBase);\r\n        transferTokens = transferTokens.add(bonusTokens);\r\n\r\n        _checkMaxSaleSupply(transferTokens);\r\n\r\n        if(balances[msg.sender] == 0){\r\n            countMembers = countMembers.add(1);\r\n        }\r\n\r\n        balances[msg.sender] = balances[msg.sender].add(weiAmount);\r\n        totalFunds = totalFunds.add(weiAmount);\r\n\r\n        _mint(msg.sender, transferTokens);\r\n        beneficiary.transfer(weiAmount);\r\n    }\r\n\r\n    function _checkMaxSaleSupply(uint transferTokens)\r\n        internal\r\n    {\r\n        if(currentState == State.PREICO) {\r\n            require(totalPreICOSupply.add(transferTokens) <= MAX_PREICO_SUPPLY);\r\n        } else if(currentState == State.ICO) {\r\n            require(totalICOSupply.add(transferTokens) <= MAX_ICO_SUPPLY);\r\n        }\r\n    }\r\n    \r\n     function _increaseSupply(uint _amount)\r\n        internal\r\n    {\r\n        if(currentState == State.PREICO) {\r\n            totalPreICOSupply = totalPreICOSupply.add(_amount);\r\n        } else if(currentState == State.ICO) {\r\n            totalICOSupply = totalICOSupply.add(_amount);\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_bonus\",\"type\":\"uint256\"}],\"name\":\"setBonus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentState\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_PREICO_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"countMembers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DECIMALS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newState\",\"type\":\"uint8\"}],\"name\":\"setState\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCountMembers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenPrice\",\"type\":\"uint256\"}],\"name\":\"setTokenPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalFunds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalBountySupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_ICO_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"investDirect\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"investBounty\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalICOSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_BOUNTY_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalPreICOSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Crowdsale","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000006394dded2f5a13305e5135d479d4608dfe49592c","Library":"","SwarmSource":"bzzr://d3622326694d36bbcd82b526787eb7e3b57bfdfe6841cb6b9bf685c73d51ee0d"}]}