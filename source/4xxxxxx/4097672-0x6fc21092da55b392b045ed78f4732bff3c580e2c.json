{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.0;\r\n\r\ncontract AbstractENS {\r\n    function owner(bytes32 node) constant returns(address);\r\n    function resolver(bytes32 node) constant returns(address);\r\n    function setOwner(bytes32 node, address owner);\r\n    function setSubnodeOwner(bytes32 node, bytes32 label, address owner);\r\n    function setResolver(bytes32 node, address resolver);\r\n}\r\n\r\ncontract Resolver {\r\n    function setAddr(bytes32 nodeHash, address addr);\r\n}\r\ncontract ReverseRegistrar {\r\n    function claim(address owner) returns (bytes32 node);\r\n}\r\n\r\n\r\n/**\r\n *  FireflyRegistrar\r\n *\r\n *  This registrar allows arbitrary labels below the root node for a fixed minimum fee.\r\n *  Labels must conform to the regex /^[a-z0-9-]{4, 20}$/.\r\n *\r\n *  Admin priviledges:\r\n *    - change the admin\r\n *    - change the fee\r\n *    - change the default resolver\r\n *    - withdrawl funds\r\n *\r\n *  This resolver should is designed to be self-contained, so that in the future\r\n *  switching to a new Resolver should not impact this one.\r\n *\r\n */\r\ncontract FireflyRegistrar {\r\n     // namehash('addr.reverse')\r\n     bytes32 constant RR_NODE = 0x91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e2;\r\n\r\n    // Admin triggered events\r\n    event adminChanged(address oldAdmin, address newAdmin);\r\n    event feeChanged(uint256 oldFee, uint256 newFee);\r\n    event defaultResolverChanged(address oldResolver, address newResolver);\r\n    event didWithdraw(address target, uint256 amount);\r\n\r\n    // Registration\r\n    event nameRegistered(bytes32 indexed nodeHash, address owner, uint256 fee);\r\n\r\n    // Donations\r\n    event donation(bytes32 indexed nodeHash, uint256 amount);\r\n\r\n    AbstractENS _ens;\r\n    Resolver _defaultResolver;\r\n\r\n    address _admin;\r\n    bytes32 _nodeHash;\r\n\r\n    uint256 _fee;\r\n\r\n    uint256 _totalPaid = 0;\r\n    uint256 _nameCount = 0;\r\n\r\n    mapping (bytes32 => uint256) _donations;\r\n\r\n    function FireflyRegistrar(address ens, bytes32 nodeHash, address defaultResolver) {\r\n        _ens = AbstractENS(ens);\r\n        _nodeHash = nodeHash;\r\n        _defaultResolver = Resolver(defaultResolver);\r\n\r\n        _admin = msg.sender;\r\n\r\n        _fee = 0.1 ether;\r\n\r\n        // Give the admin access to the reverse entry\r\n        ReverseRegistrar(_ens.owner(RR_NODE)).claim(_admin);\r\n    }\r\n\r\n    /**\r\n     *  setAdmin(admin)\r\n     *\r\n     *  Change the admin of this contract. This should be used shortly after\r\n     *  deployment and live testing to switch to a multi-sig contract.\r\n     */\r\n    function setAdmin(address admin) {\r\n        if (msg.sender != _admin) { throw; }\r\n\r\n        adminChanged(_admin, admin);\r\n        _admin = admin;\r\n\r\n        // Give the admin access to the reverse entry\r\n        ReverseRegistrar(_ens.owner(RR_NODE)).claim(admin);\r\n\r\n        // Point the resolved addr to the new admin\r\n        Resolver(_ens.resolver(_nodeHash)).setAddr(_nodeHash, _admin);\r\n    }\r\n\r\n    /**\r\n     *  setFee(fee)\r\n     *\r\n     *  This is useful if the price of ether sky-rockets or plummets, but\r\n     *  for the most part should remain unused\r\n     */\r\n    function setFee(uint256 fee) {\r\n        if (msg.sender != _admin) { throw; }\r\n        feeChanged(_fee, fee);\r\n        _fee = fee;\r\n    }\r\n\r\n    /**\r\n     *  setDefaultResolver(resolver)\r\n     *\r\n     *  Allow the admin to change the default resolver that is setup with\r\n     *  new name registrations.\r\n     */\r\n    function setDefaultResolver(address defaultResolver) {\r\n        if (msg.sender != _admin) { throw; }\r\n        defaultResolverChanged(_defaultResolver, defaultResolver);\r\n        _defaultResolver = Resolver(defaultResolver);\r\n    }\r\n\r\n    /**\r\n     *  withdraw(target, amount)\r\n     *\r\n     *  Allow the admin to withdrawl funds.\r\n     */\r\n    function withdraw(address target, uint256 amount) {\r\n        if (msg.sender != _admin) { throw; }\r\n        if (!target.send(amount)) { throw; }\r\n        didWithdraw(target, amount);\r\n    }\r\n\r\n    /**\r\n     *  register(label)\r\n     *\r\n     *  Allows anyone to send *fee* ether to the contract with a name to register.\r\n     *\r\n     *  Note: A name must match the regex /^[a-z0-9-]{4,20}$/\r\n     */\r\n    function register(string label) payable {\r\n\r\n        // Check the label is legal\r\n        uint256 position;\r\n        uint256 length;\r\n        assembly {\r\n            // The first word of a string is its length\r\n            length := mload(label)\r\n\r\n            // The first character position is the beginning of the second word\r\n            position := add(label, 1)\r\n        }\r\n\r\n        // Labels must be at least 4 characters and at most 20 characters\r\n        if (length < 4 || length > 20) { throw; }\r\n\r\n        // Only allow /^[a-z0-9-]*$/\r\n        for (uint256 i = 0; i < length; i++) {\r\n            uint8 c;\r\n            assembly { c := and(mload(position), 0xFF) }\r\n            //       'a'         'z'           '0'         '9'           '-'\r\n            if ((c < 0x61 || c > 0x7a) && (c < 0x30 || c > 0x39) && c != 0x2d) {\r\n                throw;\r\n            }\r\n            position++;\r\n        }\r\n\r\n        // Paid too little; participants may pay more (as a donation)\r\n        if (msg.value < _fee) { throw; }\r\n\r\n        // Compute the label and node hash\r\n        var labelHash = sha3(label);\r\n        var nodeHash = sha3(_nodeHash, labelHash);\r\n\r\n        // This is already owned in ENS\r\n        if (_ens.owner(nodeHash) != address(0)) { throw; }\r\n\r\n        // Make this registrar the owner (so we can set it up before giving it away)\r\n        _ens.setSubnodeOwner(_nodeHash, labelHash, this);\r\n\r\n        // Set up the default resolver and point to the sender\r\n        _ens.setResolver(nodeHash, _defaultResolver);\r\n        _defaultResolver.setAddr(nodeHash, msg.sender);\r\n\r\n        // Now give it to the sender\r\n        _ens.setOwner(nodeHash, msg.sender);\r\n\r\n        _totalPaid += msg.value;\r\n        _nameCount++;\r\n\r\n        _donations[nodeHash] += msg.value;\r\n\r\n        nameRegistered(nodeHash, msg.sender, msg.value);\r\n        donation(nodeHash, msg.value);\r\n    }\r\n\r\n    /**\r\n     *  donate(nodeHash)\r\n     *\r\n     *  Allow a registered name to donate more and get attribution. This may\r\n     *  be useful if special limited edition Firefly devices are awarded to\r\n     *  certain tiers of donors or such.\r\n     */\r\n    function donate(bytes32 nodeHash) payable {\r\n        _donations[nodeHash] += msg.value;\r\n        donation(nodeHash, msg.value);\r\n    }\r\n\r\n    /**\r\n     *  config()\r\n     *\r\n     *  Get the configuration of this registrar.\r\n     */\r\n    function config() constant returns (address ens, bytes32 nodeHash, address admin, uint256 fee, address defaultResolver) {\r\n        ens = _ens;\r\n        nodeHash = _nodeHash;\r\n        admin = _admin;\r\n        fee = _fee;\r\n        defaultResolver = _defaultResolver;\r\n    }\r\n\r\n    /**\r\n     *  stats()\r\n     *\r\n     *  Get some statistics for this registrar.\r\n     */\r\n    function stats() constant returns (uint256 nameCount, uint256 totalPaid, uint256 balance) {\r\n        nameCount = _nameCount;\r\n        totalPaid = _totalPaid;\r\n        balance = this.balance;\r\n    }\r\n\r\n    /**\r\n     *  donations(nodeHash)\r\n     *\r\n     *  Returns the amount of donations a nodeHash has provided.\r\n     */\r\n    function donations(bytes32 nodeHash) constant returns (uint256 donation) {\r\n        return _donations[nodeHash];\r\n    }\r\n\r\n    /**\r\n     *  fee()\r\n     *\r\n     *  The current fee forregistering a name.\r\n     */\r\n    function fee() constant returns (uint256 fee) {\r\n        return _fee;\r\n    }\r\n\r\n    /**\r\n     *  Allow anonymous donations.\r\n     */\r\n    function () payable {\r\n        _donations[0] += msg.value;\r\n        donation(0, msg.value);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"config\",\"outputs\":[{\"name\":\"ens\",\"type\":\"address\"},{\"name\":\"nodeHash\",\"type\":\"bytes32\"},{\"name\":\"admin\",\"type\":\"address\"},{\"name\":\"fee\",\"type\":\"uint256\"},{\"name\":\"defaultResolver\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"nodeHash\",\"type\":\"bytes32\"}],\"name\":\"donations\",\"outputs\":[{\"name\":\"donation\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"nodeHash\",\"type\":\"bytes32\"}],\"name\":\"donate\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"defaultResolver\",\"type\":\"address\"}],\"name\":\"setDefaultResolver\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stats\",\"outputs\":[{\"name\":\"nameCount\",\"type\":\"uint256\"},{\"name\":\"totalPaid\",\"type\":\"uint256\"},{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"name\":\"fee\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"label\",\"type\":\"string\"}],\"name\":\"register\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"ens\",\"type\":\"address\"},{\"name\":\"nodeHash\",\"type\":\"bytes32\"},{\"name\":\"defaultResolver\",\"type\":\"address\"}],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldAdmin\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"adminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldFee\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"feeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldResolver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newResolver\",\"type\":\"address\"}],\"name\":\"defaultResolverChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"didWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"nodeHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"nameRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"nodeHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"donation\",\"type\":\"event\"}]","ContractName":"FireflyRegistrar","CompilerVersion":"v0.4.10+commit.f0d539ae","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000314159265dd8dbb310642f98f50c066173c1259b2cb4cccf14a67aaaa2681ac6672fdf0074d7128cfbf2cfcab889ff4623125e490000000000000000000000005ffc014343cd971b7eb70732021e26c35b744cc4","Library":"","SwarmSource":"bzzr://5c3628c01dc80233f51979d91a76cec2a25d84e86c9838d34672734ca2232b64"}]}