{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.18;\r\n\r\ncontract Token { // ERC20 standard\r\n\r\n    function balanceOf(address _owner) public constant returns (uint256 balance);\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n    function approve(address _spender, uint256 _value) public returns (bool success);\r\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\n/**\r\n * Overflow aware uint math functions.\r\n *\r\n * Inspired by https://github.com/makerdao/maker-otc/blob/master/src/simple_market.sol\r\n */\r\n\r\ncontract SafeMath {\r\n\r\n  function safeMul(uint a, uint b) pure internal returns (uint) {\r\n    uint c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n  function safeSub(uint a, uint b) pure internal returns (uint) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n  function safeAdd(uint a, uint b) pure internal returns (uint) {\r\n    uint c = a + b;\r\n    assert(c>=a && c>=b);\r\n    return c;\r\n  }\r\n  function safeNumDigits(uint number) pure internal returns (uint8) {\r\n    uint8 digits = 0;\r\n    while (number != 0) {\r\n        number /= 10;\r\n        digits++;\r\n    }\r\n    return digits;\r\n}\r\n\r\n  // mitigate short address attack\r\n  // thanks to https://github.com/numerai/contract/blob/c182465f82e50ced8dacb3977ec374a892f5fa8c/contracts/Safe.sol#L30-L34.\r\n  // TODO: doublecheck implication of >= compared to ==\r\n  modifier onlyPayloadSize(uint numWords) {\r\n     assert(msg.data.length >= numWords * 32 + 4);\r\n     _;\r\n  }\r\n\r\n}\r\n/**\r\n * @title GROVesting\r\n * @dev GROVesting is a token holder contract that allows the specified beneficiary\r\n * to claim stored tokens after 6 & 12 month intervals\r\n */\r\n\r\ncontract GROVesting is SafeMath {\r\n\r\n  address public beneficiary;\r\n  uint256 public fundingEndBlock;\r\n\r\n  bool private initClaim = false; // state tracking variables\r\n\r\n  uint256 public firstRelease; // vesting times\r\n  bool private firstDone = false;\r\n  uint256 public secondRelease;\r\n  bool private secondDone = false;\r\n  uint256 public thirdRelease;\r\n\r\n  Token public ERC20Token; // ERC20 basic token contract to hold\r\n\r\n  enum Stages {\r\n    initClaim,\r\n    firstRelease,\r\n    secondRelease,\r\n    thirdRelease\r\n  }\r\n\r\n  Stages public stage = Stages.initClaim;\r\n\r\n  modifier atStage(Stages _stage){\r\n    if (stage == _stage) _;\r\n  }\r\n\r\n  modifier onlyBeneficiary {\r\n    require(msg.sender == beneficiary);\r\n    _;\r\n  }\r\n\r\n  function GROVesting() public {\r\n    beneficiary = msg.sender;\r\n  }\r\n\r\n  // Not all deployment clients support constructor arguments.\r\n  // This function is provided for maximum compatibility. \r\n  function initialiseContract(address _token, uint256 fundingEndBlockInput) external onlyBeneficiary {\r\n    require(_token != address(0));\r\n    fundingEndBlock = fundingEndBlockInput;\r\n    ERC20Token = Token(_token);\r\n  }\r\n    \r\n  function changeBeneficiary(address newBeneficiary) external {\r\n    require(newBeneficiary != address(0));\r\n    require(msg.sender == beneficiary);\r\n    beneficiary = newBeneficiary;\r\n  }\r\n\r\n  function updateFundingEndBlock(uint256 newFundingEndBlock) public {\r\n    require(msg.sender == beneficiary);\r\n    require(currentBlock() < fundingEndBlock);\r\n    require(currentBlock() < newFundingEndBlock);\r\n    fundingEndBlock = newFundingEndBlock;\r\n  }\r\n\r\n  function checkBalance() public constant returns (uint256 tokenBalance) {\r\n    return ERC20Token.balanceOf(this);\r\n  }\r\n\r\n  // in total 40% of GRO tokens will be sent to this contract\r\n  // EXPENSE ALLOCATION: 28%          | TEAM ALLOCATION: 12% (vest over 2 years)\r\n  //   12% - Incentives and bonuses\r\n  //   16% - Bankroll                 \r\n  //                                  \r\n  //   Expenses Breakdown:\r\n  //   50% - Software Development\r\n  //   15% - Operations\r\n  //   15% - Advisors\r\n  //   10% - Marketing\r\n  //   5% - Legal Framework & Finance\r\n  //   5% - Contingencies\r\n  //\r\n  // initial claim is bankroll - 16% = 152000000\r\n  // first release after 6 months - Incentives and bonuses - 12%\r\n  // second release after 12 months - Founders - 6%\r\n  // third release after 24 months - Founders - 6%\r\n\r\n  function claim() external {\r\n    require(msg.sender == beneficiary);\r\n    require(currentBlock() > fundingEndBlock);\r\n    uint256 balance = ERC20Token.balanceOf(this);\r\n    // in reverse order so stages changes don't carry within one claim\r\n    third_release(balance);\r\n    second_release(balance);\r\n    first_release(balance);\r\n    init_claim(balance);\r\n  }\r\n\r\n  function nextStage() private {\r\n    stage = Stages(uint256(stage) + 1);\r\n  }\r\n\r\n  function init_claim(uint256 balance) private atStage(Stages.initClaim) {\r\n    firstRelease = currentTime() + 26 weeks;                          // Incentives and bonuses\r\n    secondRelease = currentTime() + 52 weeks;                         // Founders\r\n    thirdRelease = secondRelease + 52 weeks;                // Founders\r\n    uint256 amountToTransfer = safeMul(balance, 40) / 100;  // send 100% of Bankroll - 40% of Expense Allocation\r\n    ERC20Token.transfer(beneficiary, amountToTransfer);     // now 60% tokens left\r\n    nextStage();\r\n  }\r\n  function first_release(uint256 balance) private atStage(Stages.firstRelease) {\r\n    require(currentTime() > firstRelease);\r\n    uint256 amountToTransfer = safeMul(balance, 30) / 100;  // send 100% of incentives and bonuses - 30% of Expense Allocation\r\n    ERC20Token.transfer(beneficiary, amountToTransfer);     // now 30% tokens left\r\n    nextStage();\r\n  }\r\n  function second_release(uint256 balance) private atStage(Stages.secondRelease) {\r\n    require(currentTime() > secondRelease);\r\n    uint256 amountToTransfer = balance / 2;             // send 50% of founders release - 15% of Expense Allocation\r\n    ERC20Token.transfer(beneficiary, amountToTransfer); // now 15% tokens left\r\n    nextStage();\r\n  }\r\n  function third_release(uint256 balance) private atStage(Stages.thirdRelease) {\r\n    require(currentTime() > thirdRelease);\r\n    uint256 amountToTransfer = balance;                 // send 50% of founders release - 15% of Expense Allocation\r\n    ERC20Token.transfer(beneficiary, amountToTransfer);\r\n    nextStage();\r\n  }\r\n\r\n  function claimOtherTokens(address _token) external {\r\n    require(msg.sender == beneficiary);\r\n    require(_token != address(0));\r\n    Token token = Token(_token);\r\n    require(token != ERC20Token);\r\n    uint256 balance = token.balanceOf(this);\r\n    token.transfer(beneficiary, balance);\r\n  }\r\n\r\n  function currentBlock() private constant returns(uint256 _currentBlock) {\r\n    return block.number;\r\n  }\r\n\r\n  function currentTime() private constant returns(uint256 _currentTime) {\r\n    return now;\r\n  } \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"claimOtherTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"fundingEndBlockInput\",\"type\":\"uint256\"}],\"name\":\"initialiseContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"secondRelease\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ERC20Token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundingEndBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"thirdRelease\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"checkBalance\",\"outputs\":[{\"name\":\"tokenBalance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"firstRelease\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newBeneficiary\",\"type\":\"address\"}],\"name\":\"changeBeneficiary\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newFundingEndBlock\",\"type\":\"uint256\"}],\"name\":\"updateFundingEndBlock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"GROVesting","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://dd0a0186af78b97345a9c7d5392555b1c35d38d77153ee2ccdef7247fa8df9c3"}]}