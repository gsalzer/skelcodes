{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) constant returns (uint256);\r\n  function transfer(address to, uint256 value) returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) returns (bool);\r\n  function approve(address spender, uint256 value) returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner {\r\n    if (newOwner != address(0)) {\r\n      owner = newOwner;\r\n    }\r\n  }\r\n\r\n}\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Crowdsale {\r\n  using SafeMath for uint256;\r\n\r\n  // The token being sold\r\n  MintableToken public token;\r\n\r\n  // start and end block where investments are allowed (both inclusive)\r\n  uint256 public startBlock;\r\n  uint256 public endBlock;\r\n\r\n  // address where funds are collected\r\n  address public wallet;\r\n\r\n  // how many token units a buyer gets per wei\r\n  uint256 public rate;\r\n\r\n  // amount of raised money in wei\r\n  uint256 public weiRaised;\r\n\r\n  /**\r\n   * event for token purchase logging\r\n   * @param purchaser who paid for the tokens\r\n   * @param beneficiary who got the tokens\r\n   * @param value weis paid for purchase\r\n   * @param amount amount of tokens purchased\r\n   */ \r\n  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n\r\n\r\n  function Crowdsale(uint256 _startBlock, uint256 _endBlock, uint256 _rate, address _wallet) {\r\n    require(_startBlock >= block.number);\r\n    require(_endBlock >= _startBlock);\r\n    require(_rate > 0);\r\n    require(_wallet != 0x0);\r\n\r\n    token = createTokenContract();\r\n    startBlock = _startBlock;\r\n    endBlock = _endBlock;\r\n    rate = _rate;\r\n    wallet = _wallet;\r\n  }\r\n\r\n  // creates the token to be sold. \r\n  // override this method to have crowdsale of a specific mintable token.\r\n  function createTokenContract() internal returns (MintableToken) {\r\n    return new MintableToken();\r\n  }\r\n\r\n\r\n  // fallback function can be used to buy tokens\r\n  function () payable {\r\n    buyTokens(msg.sender);\r\n  }\r\n\r\n  // low level token purchase function\r\n  function buyTokens(address beneficiary) payable {\r\n    require(beneficiary != 0x0);\r\n    require(validPurchase());\r\n\r\n    uint256 weiAmount = msg.value;\r\n\r\n    // calculate token amount to be created\r\n    uint256 tokens = weiAmount.mul(rate);\r\n\r\n    // update state\r\n    weiRaised = weiRaised.add(weiAmount);\r\n\r\n    token.mint(beneficiary, tokens);\r\n    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\r\n\r\n    forwardFunds();\r\n  }\r\n\r\n  // send ether to the fund collection wallet\r\n  // override to create custom fund forwarding mechanisms\r\n  function forwardFunds() internal {\r\n    wallet.transfer(msg.value);\r\n  }\r\n\r\n  // @return true if the transaction can buy tokens\r\n  function validPurchase() internal constant returns (bool) {\r\n    uint256 current = block.number;\r\n    bool withinPeriod = current >= startBlock && current <= endBlock;\r\n    bool nonZeroPurchase = msg.value != 0;\r\n    return withinPeriod && nonZeroPurchase;\r\n  }\r\n\r\n  // @return true if crowdsale event has ended\r\n  function hasEnded() public constant returns (bool) {\r\n    return block.number > endBlock;\r\n  }\r\n\r\n\r\n}\r\n\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) returns (bool) {\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of. \r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\ncontract WhitelistedCrowdsale is Crowdsale, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    // list of addresses that can purchase before crowdsale opens\r\n    mapping (address => bool) public whitelist;\r\n\r\n    function addToWhitelist(address buyer) public onlyOwner {\r\n        require(buyer != 0x0);\r\n        whitelist[buyer] = true; \r\n    }\r\n\r\n    // @return true if buyer is whitelisted\r\n    function isWhitelisted(address buyer) public constant returns (bool) {\r\n        return whitelist[buyer];\r\n    }\r\n\r\n    // overriding Crowdsale#validPurchase to add whitelist logic\r\n    // @return true if buyers can buy at the moment\r\n    function validPurchase() internal constant returns (bool) {\r\n        // [TODO] issue with overriding and associativity of logical operators\r\n        return super.validPurchase() || (!hasEnded() && isWhitelisted(msg.sender)); \r\n    }\r\n\r\n}\r\n\r\ncontract ContinuousSale {\r\n    using SafeMath for uint256;\r\n\r\n    // time bucket size\r\n    uint256 public constant BUCKET_SIZE = 12 hours;\r\n\r\n    // the token being sold\r\n    MintableToken public token;\r\n\r\n    // address where funds are collected\r\n    address public wallet;\r\n\r\n    // amount of tokens emitted per wei\r\n    uint256 public rate;\r\n\r\n    // amount of raised money in wei\r\n    uint256 public weiRaised;\r\n\r\n    // max amount of tokens to mint per time bucket\r\n    uint256 public issuance;\r\n\r\n    // last time bucket from which tokens have been purchased\r\n    uint256 public lastBucket = 0;\r\n\r\n    // amount issued in the last bucket\r\n    uint256 public bucketAmount = 0;\r\n\r\n    event TokenPurchase(address indexed investor, address indexed beneficiary, uint256 weiAmount, uint256 tokens);\r\n\r\n    function ContinuousSale(\r\n        uint256 _rate,\r\n        address _wallet,\r\n        MintableToken _token\r\n    ) {\r\n        require(_rate != 0);\r\n        require(_wallet != 0);\r\n        // require(address(token) != 0x0);\r\n\r\n        rate = _rate;\r\n        wallet = _wallet;\r\n        token = _token;\r\n    }\r\n\r\n    function() payable {\r\n        buyTokens(msg.sender);\r\n    }\r\n\r\n    function buyTokens(address beneficiary) public payable {\r\n        require(beneficiary != 0x0);\r\n        require(msg.value != 0);\r\n\r\n        prepareContinuousPurchase();\r\n        uint256 tokens = processPurchase(beneficiary);\r\n        checkContinuousPurchase(tokens);\r\n    }\r\n\r\n    function prepareContinuousPurchase() internal {\r\n        uint256 timestamp = block.timestamp;\r\n        uint256 bucket = timestamp - (timestamp % BUCKET_SIZE);\r\n\r\n        if (bucket > lastBucket) {\r\n            lastBucket = bucket;\r\n            bucketAmount = 0;\r\n        }\r\n    }\r\n\r\n    function checkContinuousPurchase(uint256 tokens) internal {\r\n        uint256 updatedBucketAmount = bucketAmount.add(tokens);\r\n        require(updatedBucketAmount <= issuance);\r\n\r\n        bucketAmount = updatedBucketAmount;\r\n    }\r\n\r\n    function processPurchase(address beneficiary) internal returns(uint256) {\r\n        uint256 weiAmount = msg.value;\r\n\r\n        // calculate token amount to be created\r\n        uint256 tokens = weiAmount.mul(rate);\r\n\r\n        // update state\r\n        weiRaised = weiRaised.add(weiAmount);\r\n\r\n        token.mint(beneficiary, tokens);\r\n        TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\r\n\r\n        forwardFunds();\r\n\r\n        return tokens;\r\n    }\r\n\r\n    function forwardFunds() internal {\r\n        wallet.transfer(msg.value);\r\n    }\r\n}\r\n\r\ncontract CappedCrowdsale is Crowdsale {\r\n  using SafeMath for uint256;\r\n\r\n  uint256 public cap;\r\n\r\n  function CappedCrowdsale(uint256 _cap) {\r\n    require(_cap > 0);\r\n    cap = _cap;\r\n  }\r\n\r\n  // overriding Crowdsale#validPurchase to add extra cap logic\r\n  // @return true if investors can buy at the moment\r\n  function validPurchase() internal constant returns (bool) {\r\n    bool withinCap = weiRaised.add(msg.value) <= cap;\r\n    return super.validPurchase() && withinCap;\r\n  }\r\n\r\n  // overriding Crowdsale#hasEnded to add cap logic\r\n  // @return true if crowdsale event has ended\r\n  function hasEnded() public constant returns (bool) {\r\n    bool capReached = weiRaised >= cap;\r\n    return super.hasEnded() || capReached;\r\n  }\r\n\r\n}\r\n\r\ncontract MANAContinuousSale is ContinuousSale, Ownable {\r\n\r\n    uint256 public constant INFLATION = 8;\r\n\r\n    bool public started = false;\r\n\r\n    event RateChange(uint256 amount);\r\n\r\n    event WalletChange(address wallet);\r\n\r\n    function MANAContinuousSale(\r\n        uint256 _rate,\r\n        address _wallet,\r\n        MintableToken _token\r\n    ) ContinuousSale(_rate, _wallet, _token) {\r\n    }\r\n\r\n    modifier whenStarted() {\r\n        require(started);\r\n        _;\r\n    }\r\n\r\n    function start() onlyOwner {\r\n        require(!started);\r\n\r\n        // initialize issuance\r\n        uint256 finalSupply = token.totalSupply();\r\n        uint256 annualIssuance = finalSupply.mul(INFLATION).div(100);\r\n        issuance = annualIssuance.mul(BUCKET_SIZE).div(1 years);\r\n\r\n        started = true;\r\n    }\r\n\r\n    function buyTokens(address beneficiary) whenStarted public payable {\r\n        super.buyTokens(beneficiary);\r\n    }\r\n\r\n    function setWallet(address _wallet) onlyOwner {\r\n        require(_wallet != 0x0);\r\n        wallet = _wallet;\r\n        WalletChange(_wallet);\r\n    }\r\n\r\n    function setRate(uint256 _rate) onlyOwner {\r\n        rate = _rate;\r\n        RateChange(_rate);\r\n    }\r\n\r\n    function unpauseToken() onlyOwner {\r\n        MANAToken(token).unpause();\r\n    }\r\n\r\n    function pauseToken() onlyOwner {\r\n        MANAToken(token).pause();\r\n    }\r\n}\r\n\r\ncontract FinalizableCrowdsale is Crowdsale, Ownable {\r\n  using SafeMath for uint256;\r\n\r\n  bool public isFinalized = false;\r\n\r\n  event Finalized();\r\n\r\n  // should be called after crowdsale ends, to do\r\n  // some extra finalization work\r\n  function finalize() onlyOwner {\r\n    require(!isFinalized);\r\n    require(hasEnded());\r\n\r\n    finalization();\r\n    Finalized();\r\n    \r\n    isFinalized = true;\r\n  }\r\n\r\n  // end token minting on finalization\r\n  // override this with custom logic if needed\r\n  function finalization() internal {\r\n    token.finishMinting();\r\n  }\r\n\r\n\r\n\r\n}\r\n\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amout of tokens to be transfered\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\r\n    var _allowance = allowed[_from][msg.sender];\r\n\r\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n    // require (_value <= _allowance);\r\n\r\n    balances[_to] = balances[_to].add(_value);\r\n    balances[_from] = balances[_from].sub(_value);\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) returns (bool) {\r\n\r\n    // To change the approve amount you first have to reduce the addresses`\r\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n    //  already 0 to mitigate the race condition described here:\r\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifing the amount of tokens still avaible for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n}\r\n\r\ncontract BurnableToken is StandardToken {\r\n\r\n    event Burn(address indexed burner, uint256 value);\r\n\r\n    /**\r\n     * @dev Burns a specified amount of tokens.\r\n     * @param _value The amount of tokens to burn. \r\n     */\r\n    function burn(uint256 _value) public {\r\n        require(_value > 0);\r\n\r\n        address burner = msg.sender;\r\n        balances[burner] = balances[burner].sub(_value);\r\n        totalSupply = totalSupply.sub(_value);\r\n        Burn(msg.sender, _value);\r\n    }\r\n\r\n}\r\n\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev modifier to allow actions only when the contract IS paused\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev modifier to allow actions only when the contract IS NOT paused\r\n   */\r\n  modifier whenPaused {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused returns (bool) {\r\n    paused = true;\r\n    Pause();\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused returns (bool) {\r\n    paused = false;\r\n    Unpause();\r\n    return true;\r\n  }\r\n}\r\n\r\ncontract PausableToken is StandardToken, Pausable {\r\n\r\n  function transfer(address _to, uint _value) whenNotPaused returns (bool) {\r\n    return super.transfer(_to, _value);\r\n  }\r\n\r\n  function transferFrom(address _from, address _to, uint _value) whenNotPaused returns (bool) {\r\n    return super.transferFrom(_from, _to, _value);\r\n  }\r\n}\r\n\r\ncontract MintableToken is StandardToken, Ownable {\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will recieve the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(address _to, uint256 _amount) onlyOwner canMint returns (bool) {\r\n    totalSupply = totalSupply.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    Mint(_to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() onlyOwner returns (bool) {\r\n    mintingFinished = true;\r\n    MintFinished();\r\n    return true;\r\n  }\r\n}\r\n\r\ncontract MANAToken is BurnableToken, PausableToken, MintableToken {\r\n\r\n    string public constant symbol = \"MANA\";\r\n\r\n    string public constant name = \"Decentraland MANA\";\r\n\r\n    uint8 public constant decimals = 18;\r\n\r\n    function burn(uint256 _value) whenNotPaused public {\r\n        super.burn(_value);\r\n    }\r\n}\r\n\r\ncontract MANACrowdsale is WhitelistedCrowdsale, CappedCrowdsale, FinalizableCrowdsale {\r\n\r\n    uint256 public constant TOTAL_SHARE = 100;\r\n    uint256 public constant CROWDSALE_SHARE = 40;\r\n    uint256 public constant FOUNDATION_SHARE = 60;\r\n\r\n    // price at which whitelisted buyers will be able to buy tokens\r\n    uint256 public preferentialRate;\r\n\r\n    // customize the rate for each whitelisted buyer\r\n    mapping (address => uint256) public buyerRate;\r\n\r\n    // initial rate at which tokens are offered\r\n    uint256 public initialRate;\r\n\r\n    // end rate at which tokens are offered\r\n    uint256 public endRate;\r\n\r\n    // continuous crowdsale contract\r\n    MANAContinuousSale public continuousSale;\r\n\r\n    event WalletChange(address wallet);\r\n\r\n    event PreferentialRateChange(address indexed buyer, uint256 rate);\r\n\r\n    event InitialRateChange(uint256 rate);\r\n\r\n    event EndRateChange(uint256 rate);\r\n\r\n    function MANACrowdsale(\r\n        uint256 _startBlock,\r\n        uint256 _endBlock,\r\n        uint256 _initialRate,\r\n        uint256 _endRate,\r\n        uint256 _preferentialRate,\r\n        address _wallet\r\n    )\r\n        CappedCrowdsale(82888 ether)\r\n        WhitelistedCrowdsale()\r\n        FinalizableCrowdsale()\r\n        Crowdsale(_startBlock, _endBlock, _initialRate, _wallet)\r\n    {\r\n        require(_initialRate > 0);\r\n        require(_endRate > 0);\r\n        require(_preferentialRate > 0);\r\n\r\n        initialRate = _initialRate;\r\n        endRate = _endRate;\r\n        preferentialRate = _preferentialRate;\r\n\r\n        continuousSale = createContinuousSaleContract();\r\n\r\n        MANAToken(token).pause();\r\n    }\r\n\r\n    function createTokenContract() internal returns(MintableToken) {\r\n        return new MANAToken();\r\n    }\r\n\r\n    function createContinuousSaleContract() internal returns(MANAContinuousSale) {\r\n        return new MANAContinuousSale(rate, wallet, token);\r\n    }\r\n\r\n    function setBuyerRate(address buyer, uint256 rate) onlyOwner public {\r\n        require(rate != 0);\r\n        require(isWhitelisted(buyer));\r\n        require(block.number < startBlock);\r\n\r\n        buyerRate[buyer] = rate;\r\n\r\n        PreferentialRateChange(buyer, rate);\r\n    }\r\n\r\n    function setInitialRate(uint256 rate) onlyOwner public {\r\n        require(rate != 0);\r\n        require(block.number < startBlock);\r\n\r\n        initialRate = rate;\r\n\r\n        InitialRateChange(rate);\r\n    }\r\n\r\n    function setEndRate(uint256 rate) onlyOwner public {\r\n        require(rate != 0);\r\n        require(block.number < startBlock);\r\n\r\n        endRate = rate;\r\n\r\n        EndRateChange(rate);\r\n    }\r\n\r\n    function getRate() internal returns(uint256) {\r\n        // some early buyers are offered a discount on the crowdsale price\r\n        if (buyerRate[msg.sender] != 0) {\r\n            return buyerRate[msg.sender];\r\n        }\r\n\r\n        // whitelisted buyers can purchase at preferential price before crowdsale ends\r\n        if (isWhitelisted(msg.sender)) {\r\n            return preferentialRate;\r\n        }\r\n\r\n        // otherwise compute the price for the auction\r\n        uint256 elapsed = block.number - startBlock;\r\n        uint256 rateRange = initialRate - endRate;\r\n        uint256 blockRange = endBlock - startBlock;\r\n\r\n        return initialRate.sub(rateRange.mul(elapsed).div(blockRange));\r\n    }\r\n\r\n    // low level token purchase function\r\n    function buyTokens(address beneficiary) payable {\r\n        require(beneficiary != 0x0);\r\n        require(validPurchase());\r\n\r\n        uint256 weiAmount = msg.value;\r\n        uint256 updatedWeiRaised = weiRaised.add(weiAmount);\r\n\r\n        uint256 rate = getRate();\r\n        // calculate token amount to be created\r\n        uint256 tokens = weiAmount.mul(rate);\r\n\r\n        // update state\r\n        weiRaised = updatedWeiRaised;\r\n\r\n        token.mint(beneficiary, tokens);\r\n        TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\r\n\r\n        forwardFunds();\r\n    }\r\n\r\n    function setWallet(address _wallet) onlyOwner public {\r\n        require(_wallet != 0x0);\r\n        wallet = _wallet;\r\n        continuousSale.setWallet(_wallet);\r\n        WalletChange(_wallet);\r\n    }\r\n\r\n    function unpauseToken() onlyOwner {\r\n        require(isFinalized);\r\n        MANAToken(token).unpause();\r\n    }\r\n\r\n    function pauseToken() onlyOwner {\r\n        require(isFinalized);\r\n        MANAToken(token).pause();\r\n    }\r\n\r\n\r\n    function beginContinuousSale() onlyOwner public {\r\n        require(isFinalized);\r\n\r\n        token.transferOwnership(continuousSale);\r\n\r\n        continuousSale.start();\r\n        continuousSale.transferOwnership(owner);\r\n    }\r\n\r\n    function finalization() internal {\r\n        uint256 totalSupply = token.totalSupply();\r\n        uint256 finalSupply = TOTAL_SHARE.mul(totalSupply).div(CROWDSALE_SHARE);\r\n\r\n        // emit tokens for the foundation\r\n        token.mint(wallet, FOUNDATION_SHARE.mul(finalSupply).div(TOTAL_SHARE));\r\n\r\n        // NOTE: cannot call super here because it would finish minting and\r\n        // the continuous sale would not be able to proceed\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"endBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pauseToken\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FOUNDATION_SHARE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"buyer\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"buyer\",\"type\":\"address\"},{\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"setBuyerRate\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpauseToken\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preferentialRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"continuousSale\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"buyerRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isFinalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"setInitialRate\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOTAL_SHARE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CROWDSALE_SHARE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"setWallet\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"setEndRate\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"buyer\",\"type\":\"address\"}],\"name\":\"addToWhitelist\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"beginContinuousSale\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_startBlock\",\"type\":\"uint256\"},{\"name\":\"_endBlock\",\"type\":\"uint256\"},{\"name\":\"_initialRate\",\"type\":\"uint256\"},{\"name\":\"_endRate\",\"type\":\"uint256\"},{\"name\":\"_preferentialRate\",\"type\":\"uint256\"},{\"name\":\"_wallet\",\"type\":\"address\"}],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"WalletChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"PreferentialRateChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"InitialRateChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"EndRateChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Finalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"}]","ContractName":"MANACrowdsale","CompilerVersion":"v0.4.11+commit.68ef5810","OptimizationUsed":"1","Runs":"0","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000003f980a000000000000000000000000000000000000000000000000000000000040100a00000000000000000000000000000000000000000000000000000000000030d40000000000000000000000000000000000000000000000000000000000001d4c00000000000000000000000000000000000000000000000000000000000030d40000000000000000000000006bf917b4725ad736b33dbd493ad7a4b992150dab","Library":"","SwarmSource":"bzzr://4a8b66fcddb46979deebb1fc4c006c758d9b401e387cdb84128c97b093b95e91"}]}