{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\ncontract CyberyTokenSale {\r\n    address public owner;  \r\n    bool public purchasingAllowed = false;\r\n    uint256 public totalContribution = 0;\r\n    uint256 public totalSupply = 0;\r\n    \r\n    mapping (address => uint256) public balances;\r\n    mapping (address => mapping (address => uint256)) public allowed;\r\n    \r\n    function name() constant returns (string) { return \"Cybery Token\"; }\r\n    function symbol() constant returns (string) { return \"CYB\"; }\r\n    function decimals() constant returns (uint8) { return 18; }\r\n    \r\n    function balanceOf(address _owner) constant returns (uint256) { \r\n        return balances[_owner]; \r\n    }\r\n\r\n    event Transfer(address indexed _from, address indexed _recipient, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n    // Math operations with safety checks that throw on error\r\n    //returns the difference of a minus b, asserts if the subtraction results in a negative number\r\n    function safeSub(uint256 a, uint256 b) internal returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    //returns the sum of a and b, asserts if the calculation overflows\r\n    function safeAdd(uint256 a, uint256 b) internal returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n\r\n    function CyberyTokenSale() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    // allows execution by the owner only\r\n    modifier onlyOwner {\r\n        assert(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    // validates an address - currently only checks that it isn't null\r\n    modifier validAddress(address _address) {\r\n        require(_address != 0x0);\r\n        _;\r\n    }\r\n\r\n    // start sale\r\n    function enablePurchasing() onlyOwner {\r\n        purchasingAllowed = true;\r\n    }\r\n\r\n    // end sale\r\n    function disablePurchasing() onlyOwner {\r\n        purchasingAllowed = false;\r\n    }\r\n\r\n    // send coins\r\n    // throws on any error rather then return a false flag to minimize user errors\r\n    function transfer(address _to, uint256 _value) validAddress(_to) returns (bool success) {\r\n        balances[msg.sender] = safeSub(balances[msg.sender], _value);\r\n        balances[_to] = safeAdd(balances[_to], _value);\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    // an account/contract attempts to get the coins\r\n    // throws on any error rather then return a false flag to minimize user errors\r\n    function transferFrom(address _from, address _to, uint256 _value) validAddress(_from) returns (bool success) {\r\n        require(_to != 0x0);\r\n        allowed[_from][msg.sender] = safeSub(allowed[_from][msg.sender], _value);\r\n        balances[_from] = safeSub(balances[_from], _value);\r\n        balances[_to] = safeAdd(balances[_to], _value);\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    // allow another account/contract to spend some coins on your behalf\r\n    // also, to minimize the risk of the approve/transferFrom attack vector,\r\n    // approve has to be called twice in 2 separate transactions - \r\n    // once to change the allowance to 0 and secondly to change it to the new allowance value\r\n    function approve(address _spender, uint256 _value) validAddress(_spender) returns (bool success) {\r\n        // if the allowance isn't 0, it can only be updated to 0 to prevent an allowance change immediately after withdrawal\r\n        require(_value == 0 || allowed[msg.sender][_spender] == 0);\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    // function to check the amount of tokens than an owner allowed to a spender.\r\n    function allowance(address _owner, address _spender) constant returns (uint256) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    // fallback function can be used to buy tokens\r\n    function () payable validAddress(msg.sender) {\r\n        require(msg.value > 0);\r\n        assert(purchasingAllowed);\r\n        owner.transfer(msg.value); // send ether to the fund collection wallet\r\n        totalContribution = safeAdd(totalContribution, msg.value);\r\n        uint256 tokensIssued = (msg.value * 100);  \r\n        //if (msg.value >= 10 finney) { tokensIssued += totalContribution; }\r\n        totalSupply = safeAdd(totalSupply, tokensIssued);\r\n        balances[msg.sender] = safeAdd(balances[msg.sender], tokensIssued);\r\n        balances[owner] = safeAdd(balances[owner], tokensIssued); // 50% in project\r\n        Transfer(address(this), msg.sender, tokensIssued);\r\n    }\r\n\r\n    function getStats() returns (uint256, uint256, bool) {\r\n        return (totalContribution, totalSupply, purchasingAllowed);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalContribution\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"disablePurchasing\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"enablePurchasing\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getStats\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"purchasingAllowed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"CyberyTokenSale","CompilerVersion":"v0.4.13+commit.fb4cb1a","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://239ff5134d04cf65e297bda78d406ae64d6879a619843564dcd5db2297d36cd4"}]}