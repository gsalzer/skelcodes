{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public constant returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic, Ownable {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n  mapping(address => bool) locks;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    \r\n    require(!locks[msg.sender] && !locks[_to]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n  \r\n  /**\r\n  * @dev Sets the lock state of the specified address.\r\n  * @param _toLock The address to set the the lock state for.\r\n  * @param _setTo A bool representing the lock state.\r\n  */\r\n  function setLock(address _toLock, bool _setTo) onlyOwner {\r\n      locks[_toLock] = _setTo;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the lock state of the specified address.\r\n  * @param _owner The address to query the the lock state of.\r\n  * @return A bool representing the lock state.\r\n  */\r\n  function lockOf(address _owner) public constant returns (bool lock) {\r\n    return locks[_owner];\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    \r\n    require(!locks[_from] && !locks[_to]);\r\n\r\n    uint256 _allowance = allowed[_from][msg.sender];\r\n\r\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n    // require (_value <= _allowance);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   */\r\n  function increaseApproval (address _spender, uint _addedValue) public returns (bool success) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  function decreaseApproval (address _spender, uint _subtractedValue) public returns (bool success) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title Mintable token\r\n * @dev ERC20 Token, with mintable token creation\r\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\r\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n */\r\n\r\ncontract MintableToken is StandardToken {\r\n  string public constant name = \"CryptoTask\";\r\n  string public constant symbol = \"CTF\";\r\n  uint8 public constant decimals = 18; \r\n    \r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\r\n    require(!locks[_to]);\r\n    totalSupply = totalSupply.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    Mint(_to, _amount);\r\n    Transfer(0x0, _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() onlyOwner public returns (bool) {\r\n    mintingFinished = true;\r\n    MintFinished();\r\n    return true;\r\n  }\r\n  \r\n}\r\n\r\n\r\ncontract Crowdsale is Ownable {\r\n    using SafeMath for uint;\r\n    \r\n    uint public fundingGoal = 1000 * 1 ether;\r\n    uint public hardCap;\r\n    uint public amountRaisedPreSale = 0;\r\n    uint public amountRaisedICO = 0;\r\n    uint public contractDeployedTime;\r\n    //period after which anyone can close the presale\r\n    uint presaleDuration = 30 * 1 days;\r\n    //period between pre-sale and ICO\r\n    uint countdownDuration = 45 * 1 days;\r\n    //ICO duration\r\n    uint icoDuration = 20 * 1 days;\r\n    uint public presaleEndTime;\r\n    uint public deadline;\r\n    uint public price = 1000;\r\n    MintableToken public token;\r\n    mapping(address => uint) public balanceOf;\r\n    bool public icoSuccess = false;\r\n    bool public crowdsaleClosed = false;\r\n    //2 vaults that the raised funds are forwarded to\r\n    address vault1;\r\n    address vault2 = 0xC0776D495f9Ed916C87c8C48f34f08E2B9506342;\r\n    //stage 0 - presale, 1 - ICO, 2 - ICO success, 3 - after 1st vote on continuation of the project, 4 - after 2nd vote. ICO funds released in 3 stages\r\n    uint public stage = 0;\r\n    //total token stake against the project continuation\r\n    uint public against = 0;\r\n    uint public lastVoteTime;\r\n    uint minVoteTime = 180 * 1 days;\r\n\r\n    event GoalReached(uint amountRaised);\r\n    event FundTransfer(address backer, uint amount, bool isContribution);\r\n\r\n    /**\r\n     * Constrctor function\r\n     *\r\n     * Setup the owner\r\n     */\r\n    function Crowdsale() {\r\n        contractDeployedTime = now;\r\n        vault1 = msg.sender;\r\n        token = new MintableToken();\r\n    }\r\n\r\n    /**\r\n     * Fallback function\r\n     *\r\n     * Called whenever anyone sends funds to the contract\r\n     */\r\n    function () payable {\r\n        require(!token.lockOf(msg.sender) && !crowdsaleClosed && stage<2 && msg.value >= 1 * (1 ether)/10);\r\n        if(stage==1 && (now < presaleEndTime.add(countdownDuration) || amountRaisedPreSale+amountRaisedICO+msg.value > hardCap)) {\r\n            throw;\r\n        }\r\n        uint amount = msg.value;\r\n        balanceOf[msg.sender] += amount;\r\n        if(stage==0) {  //presale\r\n            amountRaisedPreSale += amount;\r\n            token.mint(msg.sender, amount.mul(2) * price);\r\n        } else {\r\n            amountRaisedICO += amount;\r\n            token.mint(msg.sender, amount * price);\r\n        }\r\n        FundTransfer(msg.sender, amount, true);\r\n    }\r\n    \r\n    /**\r\n     * Forwards the amount from the contract to the vaults, 67% of the amount to vault1 and 33% to vault2\r\n     */\r\n    function forward(uint amount) internal {\r\n        vault1.transfer(amount.mul(67)/100);\r\n        vault2.transfer(amount.sub(amount.mul(67)/100));\r\n    }\r\n\r\n    modifier afterDeadline() { if (stage > 0 && now >= deadline) {_;} }\r\n\r\n    /**\r\n     * Check after deadline if the goal was reached and ends the campaign\r\n     */\r\n    function checkGoalReached() afterDeadline {\r\n        require(stage==1 && !crowdsaleClosed);\r\n        if (amountRaisedPreSale+amountRaisedICO >= fundingGoal) {\r\n            uint amount = amountRaisedICO/3;\r\n            if(!icoSuccess) {\r\n                amount += amountRaisedPreSale/3;    //if funding goal hasn't been already reached in pre-sale\r\n            }\r\n            uint amountToken1 = token.totalSupply().mul(67)/(100*4);\r\n            uint amountToken2 = token.totalSupply().mul(33)/(100*4);\r\n            forward(amount);\r\n            icoSuccess = true;\r\n            token.mint(vault1, amountToken1);    //67% of the 25% of the total\r\n            token.mint(vault2, amountToken2);    //33% of the 25% of the total\r\n            stage=2;\r\n            lastVoteTime = now;\r\n            GoalReached(amountRaisedPreSale+amountRaisedICO);\r\n        }\r\n        crowdsaleClosed = true;\r\n        token.finishMinting();\r\n    }\r\n\r\n    /**\r\n     * Closes presale\r\n     */\r\n    function closePresale() {\r\n        require((msg.sender == owner || now.sub(contractDeployedTime) > presaleDuration) && stage==0);\r\n        stage = 1;\r\n        presaleEndTime = now;\r\n        deadline = now.add(icoDuration.add(countdownDuration));\r\n        if(amountRaisedPreSale.mul(5) > 10000 * 1 ether) {\r\n            hardCap = amountRaisedPreSale.mul(5);\r\n        } else {\r\n            hardCap = 10000 * 1 ether;\r\n        }\r\n        if(amountRaisedPreSale >= fundingGoal) {\r\n            uint amount = amountRaisedPreSale/3;\r\n            forward(amount);\r\n            icoSuccess = true;\r\n            GoalReached(amountRaisedPreSale);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Withdraw the funds\r\n     *\r\n     * If goal was not reached, each contributor can withdraw the amount they contributed, or less in case project is stopped through voting in later stages.\r\n     */\r\n    function safeWithdrawal() {\r\n        require(crowdsaleClosed && !icoSuccess);\r\n        \r\n        uint amount;\r\n        if(stage==1) {\r\n            amount = balanceOf[msg.sender];\r\n        } else if(stage==2) {\r\n            amount = balanceOf[msg.sender].mul(2)/3;    //2 thirds of the initial deposit can be withdrawn\r\n        } else if(stage==3) {\r\n            amount = balanceOf[msg.sender]/3;    //one third of the initial deposit can be withdrawn\r\n        }\r\n        balanceOf[msg.sender] = 0;\r\n        if (amount > 0) {\r\n            msg.sender.transfer(amount);\r\n            FundTransfer(msg.sender, amount, false);\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Token stakeholder can vote against the project continuation. Tokens are locked until voteRelease() is called\r\n     */\r\n    function voteAgainst()\r\n    {\r\n        require((stage==2 || stage==3) && !token.lockOf(msg.sender));   // If has already voted, cancel\r\n        token.setLock(msg.sender, true);\r\n        uint voteWeight = token.balanceOf(msg.sender);\r\n        against = against.add(voteWeight);\r\n    }\r\n    \r\n    /**\r\n     * Token stakeholder can release the against-vote, and unlock the tokens\r\n     */\r\n    function voteRelease()\r\n    {\r\n        require((stage==2 || stage==3 || stage==4) && token.lockOf(msg.sender));\r\n        token.setLock(msg.sender, false);\r\n        uint voteWeight = token.balanceOf(msg.sender);\r\n        against = against.sub(voteWeight);\r\n    }\r\n    \r\n    /**\r\n     * After each voting period, vote stakes can be counted, and in case that more than 50% of token stake is against the continuation,\r\n     * the remaining eth balances can be withdrawn proportionally\r\n     */\r\n    function countVotes()\r\n    {\r\n        require(icoSuccess && (stage==2 || stage==3) && now.sub(lastVoteTime) > minVoteTime);\r\n        lastVoteTime = now;\r\n        \r\n        if(against > token.totalSupply()/2) {\r\n            icoSuccess = false;\r\n        } else {\r\n            uint amount = amountRaisedICO/3 + amountRaisedPreSale/3;\r\n            forward(amount);\r\n            stage++;\r\n        }\r\n    }\r\n    \r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"checkGoalReached\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presaleEndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"amountRaisedPreSale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"deadline\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"amountRaisedICO\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"voteRelease\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"closePresale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoSuccess\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundingGoal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"voteAgainst\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"countVotes\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleClosed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastVoteTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"against\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractDeployedTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hardCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"safeWithdrawal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amountRaised\",\"type\":\"uint256\"}],\"name\":\"GoalReached\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"backer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"isContribution\",\"type\":\"bool\"}],\"name\":\"FundTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Crowdsale","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://b03a0bab332be5ade779a7734a86df4f1507eef3665ed01a816ed9fbebd3c0f9"}]}