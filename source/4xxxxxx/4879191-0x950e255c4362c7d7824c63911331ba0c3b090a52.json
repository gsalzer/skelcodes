{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\ncontract RandomM {\r\n\r\n    uint public ticketsNum = 0;\r\n    \r\n    mapping(uint => uint) internal tickets;  // tickets for the current draw\r\n    mapping(uint => bool) internal payed_back; // ticket payment refunding identifier\r\n    \r\n    address[] public addr; // addresses of all the draw participants\r\n    \r\n    uint32 public random_num = 0; // draw serial number\r\n \r\n    uint public liveBlocksNumber = 172800; // amount of blocks untill the lottery ending\r\n    uint public startBlockNumber = 0; // initial block of the current lottery\r\n    uint public endBlockNumber = 0; // final block of the current lottery\r\n\r\n    uint public constant onePotWei = 10000000000000000; // 1 ticket cost is 0.01 ETH\r\n\r\n    address public inv_contract = 0x5192c55B1064D920C15dB125eF2E69a17558E65a; // investing contract\r\n    address public rtm_contract = 0x7E08c0468CBe9F48d8A4D246095dEb8bC1EB2e7e; // team contract\r\n    address public mrk_contract = 0xc01c08B2b451328947bFb7Ba5ffA3af96Cfc3430; // marketing contract\r\n    \r\n    address manager; // lottery manager address\r\n    \r\n    uint public winners_count = 0; // amount of winners in the current draw\r\n    uint last_winner = 0; // amount of winners already received rewards\r\n    uint public others_prize = 0; // prize fund less jack pots\r\n    \r\n    uint public fee_balance = 0; // current balance available for commiting payment to investing, team and marketing contracts\r\n\r\n    \r\n    // Events\r\n    // This generates a publics event on the blockchain that will notify clients\r\n    \r\n    event Buy(address indexed sender, uint eth); // tickets purchase\r\n    event Withdraw(address indexed sender, address to, uint eth); // reward accruing\r\n    event Transfer(address indexed from, address indexed to, uint value); // event: sending ticket to another address\r\n    event TransferError(address indexed to, uint value); // event (error): sending ETH from the contract was failed\r\n    \r\n\r\n    // methods with following modifier can only be called by the manager\r\n    modifier onlyManager() {\r\n        require(msg.sender == manager);\r\n        _;\r\n    }\r\n    \r\n\r\n    // constructor\r\n    function RandomM() public {\r\n        manager = msg.sender;\r\n        startBlockNumber = block.number - 1;\r\n        endBlockNumber = startBlockNumber + liveBlocksNumber;\r\n    }\r\n\r\n\r\n    /// function for straight tickets purchase (sending ETH to the contract address)\r\n    function() public payable {\r\n        require(block.number < endBlockNumber || msg.value < 1000000000000000000);\r\n        if (msg.value > 0 && last_winner == 0) {\r\n            uint val =  msg.value / onePotWei;\r\n            uint i = 0;\r\n            uint ix = checkAddress(msg.sender);\r\n            for(i; i < val; i++) { tickets[ticketsNum+i] = ix; }\r\n            ticketsNum += i;\r\n            Buy(msg.sender, msg.value);\r\n        }\r\n        if (block.number >= endBlockNumber) { \r\n            EndLottery(); \r\n        }\r\n    }\r\n\r\n\r\n    /// function for ticket sending from owner's address to designated address\r\n    function transfer(address _to, uint _ticketNum) public {\r\n        if (msg.sender == getAddress(tickets[_ticketNum]) && _to != address(0)) {\r\n            uint ix = checkAddress(_to);\r\n            tickets[_ticketNum] = ix;\r\n            Transfer(msg.sender, _to, _ticketNum);\r\n        }\r\n    }\r\n\r\n\r\n    /// manager's opportunity to write off ETH from the contract, in a case of unforseen contract blocking (possible in only case of more than 24 hours from the moment of lottery ending had passed and a new one has not started)\r\n    function manager_withdraw() onlyManager public {\r\n        require(block.number >= endBlockNumber + liveBlocksNumber);\r\n        msg.sender.transfer(this.balance);\r\n    }\r\n    \r\n    /// lottery ending\r\n    function EndLottery() public returns (bool success) {\r\n        require(block.number >= endBlockNumber); \r\n        uint tn = ticketsNum;\r\n        if(tn < 3) { \r\n            tn = 0;\r\n            if(msg.value > 0) { msg.sender.transfer(msg.value); }\r\n            startNewDraw(msg.value);\r\n            return false;\r\n        }\r\n        uint pf = prizeFund();\r\n        uint jp1 = percent(pf, 10);\r\n        uint jp2 = percent(pf, 4);\r\n        uint jp3 = percent(pf, 1);\r\n        uint lastbet_prize = onePotWei*10;\r\n        \r\n        if(last_winner == 0) {\r\n            \r\n            winners_count = percent(tn, 4) + 3; \r\n            \r\n            uint prizes = jp1 + jp2 + jp3 + lastbet_prize*2;\r\n            uint full_prizes = jp1 + jp2 + jp3 + (lastbet_prize * ( (winners_count+1)/10 ) );\r\n\r\n            if(winners_count < 10) {\r\n                if(prizes > pf) {\r\n                    others_prize = 0;\r\n                } else {\r\n                    others_prize = pf - prizes;    \r\n                }\r\n            } else {\r\n                if(full_prizes > pf) {\r\n                    others_prize = 0;\r\n                } else {\r\n                    others_prize = pf - full_prizes;    \r\n                }\r\n            }\r\n\r\n            sendEth(getAddress(tickets[getWinningNumber(1)]), jp1);\r\n            sendEth(getAddress(tickets[getWinningNumber(2)]), jp2);\r\n            sendEth(getAddress(tickets[getWinningNumber(3)]), jp3);\r\n            last_winner += 1;\r\n            \r\n            sendEth(msg.sender, lastbet_prize + msg.value); \r\n            return true;\r\n        } \r\n        \r\n        if(last_winner < winners_count + 1 && others_prize > 0) {\r\n            \r\n            uint val = others_prize / winners_count;\r\n            uint i;\r\n            uint8 cnt = 0;\r\n            for(i = last_winner; i < winners_count + 1; i++) {\r\n                sendEth(getAddress(tickets[getWinningNumber(i+3)]), val);\r\n                cnt++;\r\n                if(cnt > 9) {\r\n                    last_winner = i;\r\n                    return true;\r\n                }\r\n            }\r\n            last_winner = i;\r\n            sendEth(msg.sender, lastbet_prize + msg.value);\r\n            return true;\r\n            \r\n        } else {\r\n\r\n            startNewDraw(lastbet_prize + msg.value);   \r\n        }\r\n        \r\n        sendEth(msg.sender, lastbet_prize + msg.value);\r\n        return true;\r\n    }\r\n    \r\n    /// new draw start\r\n    function startNewDraw(uint _msg_value) internal {\r\n        ticketsNum = 0;\r\n        startBlockNumber = block.number - 1;\r\n        endBlockNumber = startBlockNumber + liveBlocksNumber;\r\n        random_num += 1;\r\n        winners_count = 0;\r\n        last_winner = 0;\r\n        fee_balance += (this.balance - _msg_value);\r\n    }\r\n    \r\n    /// sending rewards to the investing, team and marketing contracts \r\n    function payfee() public {\r\n        require(fee_balance > 0);\r\n        uint val = fee_balance;\r\n        inv_contract.transfer( percent(val, 20) );\r\n        rtm_contract.transfer( percent(val, 49) );\r\n        mrk_contract.transfer( percent(val, 30) );\r\n        fee_balance = 0;\r\n    }\r\n    \r\n    /// function for sending ETH with balance check (does not interrupt the program if balance is not sufficient)\r\n    function sendEth(address _to, uint _val) internal returns(bool) {\r\n        if(this.balance < _val) {\r\n            TransferError(_to, _val);\r\n            return false;\r\n        }\r\n        _to.transfer(_val);\r\n        Withdraw(address(this), _to, _val);\r\n        return true;\r\n    }\r\n    \r\n    \r\n    /// get winning ticket number basing on block hasg (block number is being calculated basing on specified displacement)\r\n    function getWinningNumber(uint _blockshift) internal constant returns (uint) {\r\n        return uint(block.blockhash(block.number - _blockshift)) % ticketsNum + 1;\r\n    }\r\n    \r\n\r\n    /// current amount of jack pot 1\r\n    function jackPotA() public view returns (uint) {\r\n        return percent(prizeFund(), 10);\r\n    }\r\n    \r\n    /// current amount of jack pot 2\r\n    function jackPotB() public view returns (uint) {\r\n        return percent(prizeFund(), 4);\r\n    }\r\n    \r\n    /// current amount of jack pot 3\r\n    function jackPotC() public view returns (uint) {\r\n        return percent(prizeFund(), 1);\r\n    }\r\n\r\n    /// current amount of prize fund\r\n    function prizeFund() public view returns (uint) {\r\n        return ( (ticketsNum * onePotWei) / 100 ) * 90;\r\n    }\r\n\r\n    /// function for calculating definite percent of a number\r\n    function percent(uint _val, uint8 _percent) public pure returns (uint) {\r\n        return ( _val / 100 ) * _percent;\r\n    }\r\n\r\n\r\n    /// returns owner address using ticket number\r\n    function getTicketOwner(uint _num) public view returns (address) {\r\n        if(ticketsNum == 0) {\r\n            return 0;\r\n        }\r\n        return getAddress(tickets[_num]);\r\n    }\r\n\r\n    /// returns amount of tickets for the current draw in the possession of specified address\r\n    function getTicketsCount(address _addr) public view returns (uint) {\r\n        if(ticketsNum == 0) {\r\n            return 0;\r\n        }\r\n        uint num = 0;\r\n        for(uint i = 0; i < ticketsNum; i++) {\r\n            if(tickets[i] == readAddress(_addr)) {\r\n                num++;\r\n            }\r\n        }\r\n        return num;\r\n    }\r\n    \r\n    /// returns tickets numbers for the current draw in the possession of specified address\r\n    function getTicketsAtAdress(address _address) public view returns(uint[]) {\r\n        uint[] memory result = new uint[](getTicketsCount(_address));\r\n        uint num = 0;\r\n        for(uint i = 0; i < ticketsNum; i++) {\r\n            if(getAddress(tickets[i]) == _address) {\r\n                result[num] = i;\r\n                num++;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n\r\n    /// returns amount of paid rewards for the current draw\r\n    function getLastWinner() public view returns(uint) {\r\n        return last_winner+1;\r\n    }\r\n\r\n\r\n    /// investing contract address change\r\n    function setInvContract(address _addr) onlyManager public {\r\n        inv_contract = _addr;\r\n    }\r\n\r\n    /// team contract address change\r\n    function setRtmContract(address _addr) onlyManager public {\r\n        rtm_contract = _addr;\r\n    }\r\n\r\n    /// marketing contract address change\r\n    function setMrkContract(address _addr) onlyManager public {\r\n        mrk_contract = _addr;\r\n    }\r\n\r\n\r\n    /// returns number of participant (in the list of participants) by belonging address and adding to the list, if not found\r\n    function checkAddress(address _addr) public returns (uint addr_num)\r\n    {\r\n        for(uint i=0; i<addr.length; i++) {\r\n            if(addr[i] == _addr) {\r\n                return i;\r\n            }\r\n        }\r\n        return addr.push(_addr) - 1;\r\n    }\r\n    \r\n    /// returns participants number (in the list of participants) be belonging address (read only)\r\n    function readAddress(address _addr) public view returns (uint addr_num)\r\n    {\r\n        for(uint i=0; i<addr.length; i++) {\r\n            if(addr[i] == _addr) {\r\n                return i;\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    /// returns address by the number in the list of participants\r\n    function getAddress(uint _index) public view returns (address) {\r\n        return addr[_index];\r\n    }\r\n\r\n\r\n    /// method for direct contract replenishment with ETH\r\n    function deposit() public payable {\r\n        require(msg.value > 0);\r\n    }\r\n    \r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"jackPotB\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_val\",\"type\":\"uint256\"},{\"name\":\"_percent\",\"type\":\"uint8\"}],\"name\":\"percent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"checkAddress\",\"outputs\":[{\"name\":\"addr_num\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rtm_contract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fee_balance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setInvContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"jackPotA\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startBlockNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setMrkContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getTicketsCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"liveBlocksNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setRtmContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"others_prize\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"onePotWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"inv_contract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mrk_contract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_ticketNum\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_num\",\"type\":\"uint256\"}],\"name\":\"getTicketOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"jackPotC\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"EndLottery\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endBlockNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"manager_withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ticketsNum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"readAddress\",\"outputs\":[{\"name\":\"addr_num\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"payfee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"random_num\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"prizeFund\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getTicketsAtAdress\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLastWinner\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"winners_count\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"addr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"Buy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferError\",\"type\":\"event\"}]","ContractName":"RandomM","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://6b3d21d19e38b59aeb98607ebf5d4c782e4a699897a7474d2d7c07503325713e"}]}