{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13;\r\n\r\ncontract AbstractENS{\r\n\r\n    function owner(bytes32 node) constant returns(address);\r\n    function resolver(bytes32 node) constant returns(address);\r\n    function ttl(bytes32 node) constant returns(uint64);\r\n    function setOwner(bytes32 node, address owner);\r\n    function setSubnodeOwner(bytes32 node, bytes32 label, address owner);\r\n    function setResolver(bytes32 node, address resolver);\r\n    function setTTL(bytes32 node, uint64 ttl);\r\n\r\n    event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\r\n    event Transfer(bytes32 indexed node, address owner);\r\n    event NewResolver(bytes32 indexed node, address resolver);\r\n    event NewTTL(bytes32 indexed node, uint64 ttl);\r\n}\r\n\r\ncontract subSale{\r\n\r\n  AbstractENS ens = AbstractENS(0x314159265dD8dbb310642f98f50C066173C1259b);\r\n  address admin = 0x1f51d1d29AaFb00188168227a49d8f7E5D5b5bD9;\r\n\r\n  struct Domain{\r\n    address originalOwner;\r\n    uint regPeriod;\r\n    bool subSale;\r\n    uint subPrice;\r\n    uint subExpiry;\r\n  }\r\n\r\n  mapping(bytes32=>Domain) records;\r\n\r\n  modifier node_owner(bytes32 node){\r\n    if (ens.owner(node) != msg.sender) throw;\r\n    _;\r\n  }\r\n\r\n  function subSale() {}\r\n\r\n  function listSubName(bytes32 node,uint price,uint expiry) node_owner(node){\r\n    require(records[node].subSale != true);\r\n \r\n    records[node].originalOwner=msg.sender;\r\n    records[node].subSale=true;\r\n    records[node].subPrice=price;\r\n    records[node].subExpiry=expiry;\r\n  }\r\n\r\n  function unlistSubName(bytes32 node) node_owner(node){\r\n    require(records[node].subSale==true);\r\n\r\n    ens.setOwner(node,records[node].originalOwner);\r\n\r\n    records[node].originalOwner=address(0x0);\r\n    records[node].subSale=false;\r\n    records[node].subPrice = 0;\r\n    records[node].subExpiry = 0;\r\n  }\r\n\r\n  function nodeCheck(bytes32 node) returns(address){\r\n    return ens.owner(node);\r\n  }\r\n\r\n  function subRegistrationPeriod(bytes32 node) returns(uint){\r\n    return records[node].subExpiry;\r\n  }\r\n\r\n  function checkSubAvailability(bytes32 node) returns(bool){\r\n    return records[node].subSale;\r\n  }\r\n\r\n  function checkSubPrice(bytes32 node) returns(uint){\r\n    return records[node].subPrice;\r\n  }\r\n\r\n  function subBuy(bytes32 rootNode,bytes32 subNode,address newOwner) payable {\r\n    require(records[rootNode].subSale == true);\r\n    require(msg.value >= records[rootNode].subPrice);\r\n\r\n    var newNode = sha3(subNode,rootNode);\r\n    require(records[newNode].regPeriod < now);\r\n\r\n    uint fee = msg.value/20;\r\n    uint netPrice = msg.value - fee;\r\n\r\n    admin.transfer(fee);\r\n    records[rootNode].originalOwner.transfer(netPrice);\r\n\r\n    records[newNode].regPeriod = now + records[rootNode].subExpiry;\r\n    records[newNode].subSale = false;\r\n    records[newNode].subPrice = 0;\r\n    records[newNode].subExpiry = 0;\r\n\r\n    ens.setSubnodeOwner(rootNode,subNode,newOwner);\r\n  }\r\n\r\n function() payable{\r\n    admin.transfer(msg.value);\r\n  }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"subRegistrationPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"nodeCheck\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"checkSubPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"node\",\"type\":\"bytes32\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"expiry\",\"type\":\"uint256\"}],\"name\":\"listSubName\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"unlistSubName\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"checkSubAvailability\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"rootNode\",\"type\":\"bytes32\"},{\"name\":\"subNode\",\"type\":\"bytes32\"},{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"subBuy\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"}]","ContractName":"subSale","CompilerVersion":"v0.4.13+commit.fb4cb1a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://385b07f5bdfaaa9331f4354630bea80aff67e0f8f53b835db476a5cbecab5b8c"}]}