{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n/**\r\n * CoinCrowd ICO. More info www.coincrowd.it \r\n */\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n  \r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() internal {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n}\r\n\r\ncontract tokenInterface {\r\n\tfunction balanceOf(address _owner) public constant returns (uint256 balance);\r\n\tfunction transfer(address _to, uint256 _value) public returns (bool);\r\n}\r\n\r\ncontract Ambassador {\r\n    using SafeMath for uint256;\r\n    CoinCrowdICO icoContract;\r\n    uint256 public startRC;\r\n    uint256 public endRC;\r\n    address internal contractOwner; \r\n    \r\n    uint256 public soldTokensWithoutBonus; // wei of XCC sold token without bonuses\r\n\tfunction euroRaisedRc() public view returns(uint256 euro) {\r\n        return icoContract.euroRaised(soldTokensWithoutBonus);\r\n    }\r\n    \r\n    uint256[] public euroThreshold; // array of euro(k) threshold reached - 100K = 100.000€\r\n    uint256[] public bonusThreshold; // array of bonus of each euroThreshold reached - 20% = 2000\r\n    \r\n    mapping(address => uint256) public balanceUser; // address => token amount\r\n\r\n    function Ambassador(address _icoContract, address _ambassadorAddr, uint256[] _euroThreshold, uint256[] _bonusThreshold, uint256 _startRC , uint256 _endRC ) public {\r\n        require ( _icoContract != 0 );\r\n        require ( _ambassadorAddr != 0 );\r\n        require ( _euroThreshold.length != 0 );\r\n        require ( _euroThreshold.length == _bonusThreshold.length );\r\n        \r\n        icoContract = CoinCrowdICO(_icoContract);\r\n        contractOwner = _icoContract;\r\n        \r\n        icoContract.addMeByRC(_ambassadorAddr);\r\n        \r\n        bonusThreshold = _bonusThreshold;\r\n        euroThreshold = _euroThreshold;\r\n        \r\n        soldTokensWithoutBonus = 0;\r\n        \r\n        setTimeRC( _startRC, _endRC );\r\n    }\r\n    \r\n    modifier onlyIcoContract() {\r\n        require(msg.sender == contractOwner);\r\n        _;\r\n    }\r\n    \r\n    function setTimeRC(uint256 _startRC, uint256 _endRC ) internal {\r\n        if( _startRC == 0 ) {\r\n            startRC = icoContract.startTime();\r\n        } else {\r\n            startRC = _startRC;\r\n        }\r\n        if( _endRC == 0 ) {\r\n            endRC = icoContract.endTime();\r\n        } else {\r\n            endRC = _endRC;\r\n        }\r\n    }\r\n    \r\n    function updateTime(uint256 _newStart, uint256 _newEnd) public onlyIcoContract {\r\n        if ( _newStart != 0 ) startRC = _newStart;\r\n        if ( _newEnd != 0 ) endRC = _newEnd;\r\n    }\r\n\r\n    function () public payable {\r\n        require( now > startRC );\r\n        if( now < endRC ) {\r\n            uint256 tokenAmount = icoContract.buy.value(msg.value)(msg.sender);\r\n            balanceUser[msg.sender] = balanceUser[msg.sender].add(tokenAmount);\r\n            soldTokensWithoutBonus = soldTokensWithoutBonus.add(tokenAmount);\r\n        } else { //claim premium bonus logic\r\n            require( balanceUser[msg.sender] > 0 );\r\n            uint256 bonusApplied = 0;\r\n            for (uint i = 0; i < euroThreshold.length; i++) {\r\n                if ( icoContract.euroRaised(soldTokensWithoutBonus).div(1000) > euroThreshold[i] ) {\r\n                    bonusApplied = bonusThreshold[i];\r\n                }\r\n            }    \r\n            require( bonusApplied > 0 );\r\n            \r\n            uint256 addTokenAmount = balanceUser[msg.sender].mul( bonusApplied ).div(10**2);\r\n            balanceUser[msg.sender] = 0; \r\n            \r\n            icoContract.claimPremium(msg.sender, addTokenAmount);\r\n            if( msg.value > 0 ) msg.sender.transfer(msg.value); // give back eth \r\n        }\r\n    }\r\n}\r\n\r\ncontract CoinCrowdICO is Ownable {\r\n    using SafeMath for uint256;\r\n    tokenInterface public tokenContract;\r\n    \r\n\tuint256 public decimals = 18;\r\n    uint256 public tokenValue;  // 1 XCC in wei\r\n    uint256 public constant centToken = 20; // euro cents value of 1 token \r\n    \r\n    function euroRaised(uint256 _weiTokens) public view returns (uint256) { // convertion of sold token in euro raised in wei\r\n        return _weiTokens.mul(centToken).div(100).div(10**decimals);\r\n    }\r\n    \r\n    uint256 public endTime;  // seconds from 1970-01-01T00:00:00Z\r\n    uint256 public startTime;  // seconds from 1970-01-01T00:00:00Z\r\n    uint256 internal constant weekInSeconds = 604800; // seconds in a week\r\n    \r\n    uint256 public totalSoldTokensWithBonus; // total wei of XCC distribuited from this ICO\r\n    uint256 public totalSoldTokensWithoutBonus; // total wei of XCC distribuited from this ICO without bonus\r\n\tfunction euroRaisedICO() public view returns(uint256 euro) {\r\n        return euroRaised(totalSoldTokensWithoutBonus);\r\n    }\r\n\t\r\n    uint256 public remainingTokens; // total wei of XCC remaining (without bonuses)\r\n\r\n    mapping(address => address) public ambassadorAddressOf; // ambassadorContract => ambassadorAddress\r\n\r\n\r\n    function CoinCrowdICO(address _tokenAddress, uint256 _tokenValue, uint256 _startTime) public {\r\n        tokenContract = tokenInterface(_tokenAddress);\r\n        tokenValue = _tokenValue;\r\n        startICO(_startTime); \r\n        totalSoldTokensWithBonus = 0;\r\n        totalSoldTokensWithoutBonus = 0;\r\n        remainingTokens = 24500000  * 10 ** decimals; // 24.500.000 * 0.20€ = 4.900.000€ CAPPED\r\n    }\r\n\r\n    address public updater;  // account in charge of updating the token value\r\n    event UpdateValue(uint256 newValue);\r\n\r\n    function updateValue(uint256 newValue) public {\r\n        require(msg.sender == updater || msg.sender == owner);\r\n        tokenValue = newValue;\r\n        UpdateValue(newValue);\r\n    }\r\n\r\n    function updateUpdater(address newUpdater) public onlyOwner {\r\n        updater = newUpdater;\r\n    }\r\n\r\n    function updateTime(uint256 _newStart, uint256 _newEnd) public onlyOwner {\r\n        if ( _newStart != 0 ) startTime = _newStart;\r\n        if ( _newEnd != 0 ) endTime = _newEnd;\r\n    }\r\n    \r\n    function updateTimeRC(address _rcContract, uint256 _newStart, uint256 _newEnd) public onlyOwner {\r\n        Ambassador(_rcContract).updateTime( _newStart, _newEnd);\r\n    }\r\n    \r\n    function startICO(uint256 _startTime) public onlyOwner {\r\n        if(_startTime == 0 ) {\r\n            startTime = now;\r\n        } else {\r\n            startTime = _startTime;\r\n        }\r\n        endTime = startTime + 12*weekInSeconds;\r\n    }\r\n    \r\n    event Buy(address buyer, uint256 value, address indexed ambassador);\r\n\r\n    function buy(address _buyer) public payable returns(uint256) {\r\n        require(now < endTime); // check if ended\r\n        require( remainingTokens > 0 ); // Check if there are any remaining tokens excluding bonuses\r\n        \r\n        require( tokenContract.balanceOf(this) > remainingTokens); // should have enough balance\r\n        \r\n        uint256 oneXCC = 10 ** decimals;\r\n        uint256 tokenAmount = msg.value.mul(oneXCC).div(tokenValue);\r\n        \r\n        \r\n        uint256 bonusRate; // decimals of bonus 20% = 2000\r\n        address currentAmbassador = address(0);\r\n        if ( ambassadorAddressOf[msg.sender] != address(0) ) { // if is an authorized ambassadorContract\r\n            currentAmbassador = msg.sender;\r\n            bonusRate = 0; // Ambassador Comunity should claim own bonus at the end of RC \r\n            \r\n        } else { // if is directly called to CoinCrowdICO contract\r\n            require(now > startTime); // check if started for public user\r\n            \r\n            if( now > startTime + weekInSeconds*0  ) { bonusRate = 2000; }\r\n            if( now > startTime + weekInSeconds*1  ) { bonusRate = 1833; }\r\n            if( now > startTime + weekInSeconds*2  ) { bonusRate = 1667; }\r\n            if( now > startTime + weekInSeconds*3  ) { bonusRate = 1500; }\r\n            if( now > startTime + weekInSeconds*4  ) { bonusRate = 1333; }\r\n            if( now > startTime + weekInSeconds*5  ) { bonusRate = 1167; }\r\n            if( now > startTime + weekInSeconds*6  ) { bonusRate = 1000; }\r\n            if( now > startTime + weekInSeconds*7  ) { bonusRate = 833; }\r\n            if( now > startTime + weekInSeconds*8  ) { bonusRate = 667; }\r\n            if( now > startTime + weekInSeconds*9  ) { bonusRate = 500; }\r\n            if( now > startTime + weekInSeconds*10 ) { bonusRate = 333; }\r\n            if( now > startTime + weekInSeconds*11 ) { bonusRate = 167; }\r\n            if( now > startTime + weekInSeconds*12 ) { bonusRate = 0; }\r\n        }\r\n        \r\n        if ( remainingTokens < tokenAmount ) {\r\n            uint256 refund = (tokenAmount - remainingTokens).mul(tokenValue).div(oneXCC);\r\n            tokenAmount = remainingTokens;\r\n            owner.transfer(msg.value-refund);\r\n\t\t\tremainingTokens = 0; // set remaining token to 0\r\n             _buyer.transfer(refund);\r\n        } else {\r\n\t\t\tremainingTokens = remainingTokens.sub(tokenAmount); // update remaining token without bonus\r\n            owner.transfer(msg.value);\r\n        }\r\n        \r\n        uint256 tokenAmountWithBonus = tokenAmount.add(tokenAmount.mul( bonusRate ).div(10**4)); //add token bonus\r\n        \r\n        tokenContract.transfer(_buyer, tokenAmountWithBonus);\r\n        Buy(_buyer, tokenAmountWithBonus, currentAmbassador);\r\n        \r\n        totalSoldTokensWithBonus += tokenAmountWithBonus; \r\n\t\ttotalSoldTokensWithoutBonus += tokenAmount;\r\n\t\t\r\n        return tokenAmount; // retun tokenAmount without bonuses for easier calculations\r\n    }\r\n\r\n    event NewAmbassador(address ambassador, address contr);\r\n    \r\n    function addMeByRC(address _ambassadorAddr) public {\r\n        require(tx.origin == owner);\r\n        \r\n        ambassadorAddressOf[ msg.sender ]  = _ambassadorAddr;\r\n        \r\n        NewAmbassador(_ambassadorAddr, msg.sender);\r\n    }\r\n\r\n    function withdraw(address to, uint256 value) public onlyOwner {\r\n        to.transfer(value);\r\n    }\r\n    \r\n    function updateTokenContract(address _tokenContract) public onlyOwner {\r\n        tokenContract = tokenInterface(_tokenContract);\r\n    }\r\n\r\n    function withdrawTokens(address to, uint256 value) public onlyOwner returns (bool) {\r\n        return tokenContract.transfer(to, value);\r\n    }\r\n    \r\n    function claimPremium(address _buyer, uint256 _amount) public returns(bool) {\r\n        require( ambassadorAddressOf[msg.sender] != address(0) ); // Check if is an authorized _ambassadorContract\r\n        return tokenContract.transfer(_buyer, _amount);\r\n    }\r\n\r\n    function () public payable {\r\n        buy(msg.sender);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"withdrawTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newStart\",\"type\":\"uint256\"},{\"name\":\"_newEnd\",\"type\":\"uint256\"}],\"name\":\"updateTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateValue\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newUpdater\",\"type\":\"address\"}],\"name\":\"updateUpdater\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSoldTokensWithBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"ambassadorAddressOf\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_buyer\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"claimPremium\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"centToken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_weiTokens\",\"type\":\"uint256\"}],\"name\":\"euroRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_startTime\",\"type\":\"uint256\"}],\"name\":\"startICO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenContract\",\"type\":\"address\"}],\"name\":\"updateTokenContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSoldTokensWithoutBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"euroRaisedICO\",\"outputs\":[{\"name\":\"euro\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"remainingTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rcContract\",\"type\":\"address\"},{\"name\":\"_newStart\",\"type\":\"uint256\"},{\"name\":\"_newEnd\",\"type\":\"uint256\"}],\"name\":\"updateTimeRC\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"updater\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ambassadorAddr\",\"type\":\"address\"}],\"name\":\"addMeByRC\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_buyer\",\"type\":\"address\"}],\"name\":\"buy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_tokenValue\",\"type\":\"uint256\"},{\"name\":\"_startTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"UpdateValue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"ambassador\",\"type\":\"address\"}],\"name\":\"Buy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ambassador\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"contr\",\"type\":\"address\"}],\"name\":\"NewAmbassador\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"CoinCrowdICO","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000004d829f8c92a6691c56300d020c9e0db984cfe2ba0000000000000000000000000000000000000000000000000de0b6b3a7640000000000000000000000000000000000000000000000000000000000005a0c1e30","Library":"","SwarmSource":"bzzr://647d01cc634d990bad9a24781d3cabc950be5e0bcb1a961bb7caee2b55378ad3"}]}