{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\ncontract Ownable {\r\n  address public owner;\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) constant public returns (uint256);\r\n  function transfer(address to, uint256 value) internal returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) tokenBalances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) internal returns (bool) {\r\n    //TRANSFER Functionality has been disabled as we wanted to make the token non-tradable\r\n    //and we are nice people so we don't want anyone to not get their payout :)\r\n    return false;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) constant public returns (uint256 balance) {\r\n    return tokenBalances[_owner];\r\n  }\r\n\r\n}\r\ncontract HareemMinePoolToken is BasicToken, Ownable {\r\n\r\n   using SafeMath for uint256;\r\n   string public constant name = \"HareemMinePool\";\r\n   string public constant symbol = \"HMP\";\r\n   uint256 public constant decimals = 18;\r\n\r\n   uint256 constant INITIAL_SUPPLY = 1000 * (10 ** uint256(decimals));\r\n   uint256 public sellPrice = 2;  \r\n   uint256 public buyPrice = 1; \r\n  \r\n   string public constant COLLATERAL_HELD = \"1000 ETH\";\r\n   uint payout_worth = 0;\r\n   \r\n   event Debug(string message, uint256 num);\r\n   \r\n   mapping(address => uint256) amountLeftToBePaid;\r\n   mapping(address => uint256) partialAmtToBePaid;\r\n   \r\n   address[] listAddr;\r\n   \r\n   //Client addresses\r\n   address ethStore = 0x66Ef84EE378B07012FE44Df83b64Ea2Ae35fD09b;   \r\n   address exchange = 0x093af86909F7E2135aD764e9cB384Ed7311799d3;\r\n   \r\n   uint perTokenPayout = 0;\r\n   uint tokenToTakeBack = 0;\r\n   \r\n   event addr(string message, address sender);\r\n   event logString(string message);\r\n   \r\n   // fallback function can be used to buy tokens\r\n    function () public payable {\r\n    buy(msg.sender);\r\n    }\r\n  \r\n    /**\r\n    * @dev Contructor that gives msg.sender all of existing tokens.\r\n    */\r\n    function HareemMinePoolToken() public {\r\n    owner = ethStore;\r\n    totalSupply = INITIAL_SUPPLY;\r\n    tokenBalances[owner] = INITIAL_SUPPLY;\r\n    }\r\n    \r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        transferOwnership(newOwner);\r\n    }\r\n\r\n    function setPrices(uint256 newSellPrice, uint256 newBuyPrice) public onlyOwner {\r\n        sellPrice = newSellPrice;\r\n        buyPrice = newBuyPrice;\r\n    }\r\n  \r\n    function payoutWorth(address beneficiary) constant public returns (uint amount) {\r\n        amount = tokenBalances[beneficiary].mul(sellPrice);\r\n    }\r\n    \r\n    function tokensLeft() public view returns (uint amount) {\r\n        amount = tokenBalances[owner];\r\n    }\r\n    \r\n    function payoutLeft() internal constant returns (uint amount) {\r\n        for (uint i=0;i<listAddr.length;i++)\r\n        {\r\n            amount = amount + amountLeftToBePaid[listAddr[i]];\r\n        }\r\n        return amount;\r\n    }\r\n    function doPayout() payable public onlyOwner{\r\n      uint payLeft = payoutLeft();\r\n      uint cashBack = msg.value;\r\n      require (payLeft>0 && cashBack <=payLeft);\r\n      uint soldTokens = totalSupply.sub(tokenBalances[owner]);\r\n      cashBack = cashBack.mul(10**18);\r\n      perTokenPayout =cashBack.div(soldTokens);\r\n      tokenToTakeBack = perTokenPayout.div(sellPrice);\r\n      makePayments();\r\n    }\r\n    \r\n    function makePayments() internal {\r\n        uint exchangeAmount;\r\n        uint customerAmt;\r\n        for (uint i=0;i<listAddr.length;i++)\r\n        {\r\n            uint payAmt = amountLeftToBePaid[listAddr[i]];\r\n            if (payAmt >0)\r\n            {\r\n                uint tokensHeld = payAmt.div(sellPrice);\r\n                if (tokensHeld >0)\r\n                {\r\n                    uint sendMoney = tokensHeld.mul(perTokenPayout);\r\n                    sendMoney = sendMoney.div(10**decimals);\r\n                    uint takeBackTokens = tokenToTakeBack.mul(tokensHeld);\r\n                    takeBackTokens = takeBackTokens.div(10**decimals);\r\n                    (exchangeAmount,customerAmt) = getExchangeAndEthStoreAmount(sendMoney); \r\n                    exchange.transfer(exchangeAmount);\r\n                    listAddr[i].transfer(customerAmt);\r\n                    amountLeftToBePaid[listAddr[i]] = amountLeftToBePaid[listAddr[i]].sub(sendMoney);\r\n                    tokenBalances[listAddr[i]] = tokenBalances[listAddr[i]].sub(takeBackTokens);\r\n                    tokenBalances[owner] = tokenBalances[owner].add(takeBackTokens);\r\n                    Transfer(listAddr[i],owner, takeBackTokens); \r\n                    takeBackTokens = takeBackTokens.div(10**decimals);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n    function buy(address beneficiary) payable public returns (uint amount) {\r\n        require (msg.value >= 10 ** decimals);   //  see this\r\n        uint exchangeAmount;\r\n        uint ethStoreAmt;\r\n        (exchangeAmount,ethStoreAmt) = getExchangeAndEthStoreAmount(msg.value); \r\n        ethStore.transfer(ethStoreAmt);    \r\n        exchange.transfer(exchangeAmount);\r\n        uint tempBuyPrice = buyPrice.mul(10**decimals);\r\n        amount = msg.value.div(tempBuyPrice);                    // calculates the amount\r\n        amount = amount.mul(10**decimals);\r\n        require(tokenBalances[owner] >= amount);               // checks if it has enough to sell\r\n        tokenBalances[beneficiary] = tokenBalances[beneficiary].add(amount);                  // adds the amount to buyer's balance\r\n        tokenBalances[owner] = tokenBalances[owner].sub(amount);                        // subtracts amount from seller's balance\r\n        amountLeftToBePaid[beneficiary] = amount.mul(sellPrice);   //input how much has to be paid out to the customer later on\r\n        Transfer(owner, beneficiary, amount);\r\n        listAddr.push(beneficiary);\r\n        return amount;                                    // ends function and returns\r\n    }\r\n   \r\n   function getExchangeAndEthStoreAmount(uint value) internal pure returns (uint exchangeAmt, uint ethStoreAmt) {\r\n       exchangeAmt = value.div(100);    //since 1% means divide by 100\r\n       ethStoreAmt = value - exchangeAmt;   //the rest would be eth store amount\r\n   }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"newSellPrice\",\"type\":\"uint256\"},{\"name\":\"newBuyPrice\",\"type\":\"uint256\"}],\"name\":\"setPrices\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"doPayout\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"payoutWorth\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensLeft\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"COLLATERAL_HELD\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"buy\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"message\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"num\",\"type\":\"uint256\"}],\"name\":\"Debug\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"message\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"addr\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"message\",\"type\":\"string\"}],\"name\":\"logString\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"HareemMinePoolToken","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://5a37ed3af1d82a5dea303febcd48c9db2b41a830b807edb6eb9aa614f902e493"}]}