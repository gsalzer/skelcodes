{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\n/**\r\n * Math operations with safety checks\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n\r\n  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n    return a < b ? a : b;\r\n  }\r\n\r\n  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    return a < b ? a : b;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control \r\n * functions, this simplifies the implementation of \"user permissions\". \r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  /** \r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner. \r\n   */\r\n  modifier onlyOwner() {\r\n    if (msg.sender != owner) {\r\n      throw;\r\n    }\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to. \r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner {\r\n    if (newOwner != address(0)) {\r\n      owner = newOwner;\r\n    }\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) constant returns (uint256);\r\n  function transfer(address to, uint256 value);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value);\r\n  function approve(address spender, uint256 value);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n   * @dev Fix for the ERC20 short address attack.\r\n   */\r\n  modifier onlyPayloadSize(uint256 size) {\r\n     if(msg.data.length < size + 4) {\r\n       throw;\r\n     }\r\n     _;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) onlyPayloadSize(2 * 32) {\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of. \r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implemantation of the basic standart token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is BasicToken, ERC20 {\r\n\r\n  mapping (address => mapping (address => uint256)) allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amout of tokens to be transfered\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) onlyPayloadSize(3 * 32) {\r\n    var _allowance = allowed[_from][msg.sender];\r\n\r\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n    // if (_value > _allowance) throw;\r\n\r\n    balances[_to] = balances[_to].add(_value);\r\n    balances[_from] = balances[_from].sub(_value);\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    Transfer(_from, _to, _value);\r\n  }\r\n\r\n  /**\r\n   * @dev Aprove the passed address to spend the specified amount of tokens on beahlf of msg.sender.\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) {\r\n\r\n    // To change the approve amount you first have to reduce the addresses`\r\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n    //  already 0 to mitigate the race condition described here:\r\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    if ((_value != 0) && (allowed[msg.sender][_spender] != 0)) throw;\r\n\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens than an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifing the amount of tokens still avaible for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n}\r\n\r\ncontract CryptoABS is StandardToken, Ownable {\r\n  string public name;                                   // 名稱\r\n  string public symbol;                                 // token 代號\r\n  uint256 public decimals = 0;                          // decimals\r\n  address public contractAddress;                       // contract address\r\n\r\n  uint256 public minInvestInWei;                        // 最低投資金額 in wei\r\n  uint256 public tokenExchangeRateInWei;                // 1 Token = n ETH in wei\r\n\r\n  uint256 public startBlock;                            // ICO 起始的 block number\r\n  uint256 public endBlock;                              // ICO 結束的 block number\r\n  uint256 public maxTokenSupply;                        // ICO 的 max token，透過 USD to ETH 換算出來\r\n  \r\n  uint256 public initializedTime;                       // 起始時間，合約部署的時候會寫入\r\n  uint256 public financingPeriod;                       // token 籌資期間\r\n  uint256 public tokenLockoutPeriod;                    // token 閉鎖期，閉鎖期內不得 transfer\r\n  uint256 public tokenMaturityPeriod;                   // token 到期日\r\n\r\n  bool public paused;                                   // 暫停合約功能執行\r\n  bool public initialized;                              // 合約啟動\r\n  uint256 public finalizedBlock;                        // 合約終止投資的區塊編號\r\n  uint256 public finalizedTime;                         // 合約終止投資的時間\r\n  uint256 public finalizedCapital;                      // 合約到期的 ETH 金額\r\n\r\n  struct ExchangeRate {\r\n    uint256 blockNumber;                                // block number\r\n    uint256 exchangeRateInWei;                          // 1 USD = n ETH in wei, 派發利息使用的利率基準\r\n  }\r\n\r\n  ExchangeRate[] public exchangeRateArray;              // exchange rate array\r\n  uint256 public nextExchangeRateIndex;                 // exchange rate last index\r\n  \r\n  uint256[] public interestArray;                       // interest array\r\n\r\n  struct Payee {\r\n    bool isExists;                                      // payee 存在\r\n    bool isPayable;                                     // payee 允許領錢\r\n    uint256 interestInWei;                              // 待領利息金額\r\n  }\r\n\r\n  mapping (address => Payee) public payees; \r\n  address[] public payeeArray;                          // payee array\r\n  uint256 public nextPayeeIndex;                        // payee deposite interest index\r\n\r\n  struct Asset {\r\n    string data;                                        // asset data\r\n  }\r\n\r\n  Asset[] public assetArray;                            // asset array\r\n\r\n  /**\r\n   * @dev Throws if contract paused.\r\n   */\r\n  modifier notPaused() {\r\n    require(paused == false);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if contract is paused.\r\n   */\r\n  modifier isPaused() {\r\n    require(paused == true);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if not a payee. \r\n   */\r\n  modifier isPayee() {\r\n    require(payees[msg.sender].isPayable == true);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if contract not initialized. \r\n   */\r\n  modifier isInitialized() {\r\n    require(initialized == true);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if contract not open. \r\n   */\r\n  modifier isContractOpen() {\r\n    require(\r\n      getBlockNumber() >= startBlock &&\r\n      getBlockNumber() <= endBlock &&\r\n      finalizedBlock == 0);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if token in lockout period. \r\n   */\r\n  modifier notLockout() {\r\n    require(now > (initializedTime + financingPeriod + tokenLockoutPeriod));\r\n    _;\r\n  }\r\n  \r\n  /**\r\n   * @dev Throws if not over maturity date. \r\n   */\r\n  modifier overMaturity() {\r\n    require(now > (initializedTime + financingPeriod + tokenMaturityPeriod));\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Contract constructor.\r\n   */\r\n  function CryptoABS() {\r\n    paused = false;\r\n  }\r\n\r\n  /**\r\n   * @dev Initialize contract with inital parameters. \r\n   * @param _name name of token\r\n   * @param _symbol symbol of token\r\n   * @param _contractAddress contract deployed address\r\n   * @param _startBlock start block number\r\n   * @param _endBlock end block number\r\n   * @param _initializedTime contract initalized time\r\n   * @param _financingPeriod contract financing period\r\n   * @param _tokenLockoutPeriod contract token lockout period\r\n   * @param _tokenMaturityPeriod contract token maturity period\r\n   * @param _minInvestInWei minimum wei accept of invest\r\n   * @param _maxTokenSupply maximum toke supply\r\n   * @param _tokenExchangeRateInWei token exchange rate in wei\r\n   * @param _exchangeRateInWei eth exchange rate in wei\r\n   */\r\n  function initialize(\r\n      string _name,\r\n      string _symbol,\r\n      uint256 _decimals,\r\n      address _contractAddress,\r\n      uint256 _startBlock,\r\n      uint256 _endBlock,\r\n      uint256 _initializedTime,\r\n      uint256 _financingPeriod,\r\n      uint256 _tokenLockoutPeriod,\r\n      uint256 _tokenMaturityPeriod,\r\n      uint256 _minInvestInWei,\r\n      uint256 _maxTokenSupply,\r\n      uint256 _tokenExchangeRateInWei,\r\n      uint256 _exchangeRateInWei) onlyOwner {\r\n    require(bytes(name).length == 0);\r\n    require(bytes(symbol).length == 0);\r\n    require(decimals == 0);\r\n    require(contractAddress == 0x0);\r\n    require(totalSupply == 0);\r\n    require(decimals == 0);\r\n    require(_startBlock >= getBlockNumber());\r\n    require(_startBlock < _endBlock);\r\n    require(financingPeriod == 0);\r\n    require(tokenLockoutPeriod == 0);\r\n    require(tokenMaturityPeriod == 0);\r\n    require(initializedTime == 0);\r\n    require(_maxTokenSupply >= totalSupply);\r\n    name = _name;\r\n    symbol = _symbol;\r\n    decimals = _decimals;\r\n    contractAddress = _contractAddress;\r\n    startBlock = _startBlock;\r\n    endBlock = _endBlock;\r\n    initializedTime = _initializedTime;\r\n    financingPeriod = _financingPeriod;\r\n    tokenLockoutPeriod = _tokenLockoutPeriod;\r\n    tokenMaturityPeriod = _tokenMaturityPeriod;\r\n    minInvestInWei = _minInvestInWei;\r\n    maxTokenSupply = _maxTokenSupply;\r\n    tokenExchangeRateInWei = _tokenExchangeRateInWei;\r\n    ownerSetExchangeRateInWei(_exchangeRateInWei);\r\n    initialized = true;\r\n  }\r\n\r\n  /**\r\n   * @dev Finalize contract\r\n   */\r\n  function finalize() public isInitialized {\r\n    require(getBlockNumber() >= startBlock);\r\n    require(msg.sender == owner || getBlockNumber() > endBlock);\r\n\r\n    finalizedBlock = getBlockNumber();\r\n    finalizedTime = now;\r\n\r\n    Finalized();\r\n  }\r\n\r\n  /**\r\n   * @dev fallback function accept ether\r\n   */\r\n  function () payable notPaused {\r\n    proxyPayment(msg.sender);\r\n  }\r\n\r\n  /**\r\n   * @dev payment function, transfer eth to token\r\n   * @param _payee The payee address\r\n   */\r\n  function proxyPayment(address _payee) public payable notPaused isInitialized isContractOpen returns (bool) {\r\n    require(msg.value > 0);\r\n\r\n    uint256 amount = msg.value;\r\n    require(amount >= minInvestInWei); \r\n\r\n    uint256 refund = amount % tokenExchangeRateInWei;\r\n    uint256 tokens = (amount - refund) / tokenExchangeRateInWei;\r\n    require(totalSupply.add(tokens) <= maxTokenSupply);\r\n    totalSupply = totalSupply.add(tokens);\r\n    balances[_payee] = balances[_payee].add(tokens);\r\n\r\n    if (payees[msg.sender].isExists != true) {\r\n      payees[msg.sender].isExists = true;\r\n      payees[msg.sender].isPayable = true;\r\n      payeeArray.push(msg.sender);\r\n    }\r\n\r\n    require(owner.send(amount - refund));\r\n    if (refund > 0) {\r\n      require(msg.sender.send(refund));\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev transfer token\r\n   * @param _to The address to transfer to.\r\n   * @param _value The amount to be transferred.\r\n   */\r\n  function transfer(address _to, uint256 _value) onlyPayloadSize(2 * 32) notLockout notPaused isInitialized {\r\n    require(_to != contractAddress);\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    if (payees[_to].isExists != true) {\r\n      payees[_to].isExists = true;\r\n      payees[_to].isPayable = true;\r\n      payeeArray.push(_to);\r\n    }\r\n    Transfer(msg.sender, _to, _value);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint the amout of tokens to be transfered\r\n   */\r\n  function transferFrom(address _from, address _to, uint _value) onlyPayloadSize(3 * 32) notLockout notPaused isInitialized {\r\n    require(_to != contractAddress);\r\n    require(_from != contractAddress);\r\n    var _allowance = allowed[_from][msg.sender];\r\n\r\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n    // if (_value > _allowance) throw;\r\n    require(_allowance >= _value);\r\n\r\n    balances[_to] = balances[_to].add(_value);\r\n    balances[_from] = balances[_from].sub(_value);\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    if (payees[_to].isExists != true) {\r\n      payees[_to].isExists = true;\r\n      payees[_to].isPayable = true;\r\n      payeeArray.push(_to);\r\n    }\r\n    Transfer(_from, _to, _value);\r\n  }\r\n\r\n  /**\r\n   * @dev add interest to each payees\r\n   */\r\n  function ownerDepositInterest() onlyOwner isPaused isInitialized {\r\n    uint256 i = nextPayeeIndex;\r\n    uint256 payeesLength = payeeArray.length;\r\n    while (i < payeesLength && msg.gas > 2000000) {\r\n      address _payee = payeeArray[i];\r\n      uint256 _balance = balances[_payee];\r\n      if (payees[_payee].isPayable == true && _balance > 0) {\r\n        uint256 _interestInWei = (_balance * interestArray[getInterestCount() - 1]) / totalSupply;\r\n        payees[_payee].interestInWei += _interestInWei;\r\n        DepositInterest(getInterestCount(), _payee, _balance, _interestInWei);\r\n      }\r\n      i++;\r\n    }\r\n    nextPayeeIndex = i;\r\n  }\r\n\r\n  /**\r\n   * @dev return interest by address, unit `wei`\r\n   * @param _address The payee address\r\n   */\r\n  function interestOf(address _address) isInitialized constant returns (uint256 result)  {\r\n    require(payees[_address].isExists == true);\r\n    return payees[_address].interestInWei;\r\n  }\r\n\r\n  /**\r\n   * @dev withdraw interest by payee\r\n   * @param _interestInWei Withdraw interest amount in wei\r\n   */\r\n  function payeeWithdrawInterest(uint256 _interestInWei) payable isPayee isInitialized notLockout {\r\n    require(msg.value == 0);\r\n    uint256 interestInWei = _interestInWei;\r\n    require(payees[msg.sender].isPayable == true && _interestInWei <= payees[msg.sender].interestInWei);\r\n    require(msg.sender.send(interestInWei));\r\n    payees[msg.sender].interestInWei -= interestInWei;\r\n    PayeeWithdrawInterest(msg.sender, interestInWei, payees[msg.sender].interestInWei);\r\n  }\r\n\r\n  /**\r\n   * @dev withdraw capital by payee\r\n   */\r\n  function payeeWithdrawCapital() payable isPayee isPaused isInitialized overMaturity {\r\n    require(msg.value == 0);\r\n    require(balances[msg.sender] > 0 && totalSupply > 0);\r\n    uint256 capital = (balances[msg.sender] * finalizedCapital) / totalSupply;\r\n    balances[msg.sender] = 0;\r\n    require(msg.sender.send(capital));\r\n    PayeeWithdrawCapital(msg.sender, capital);\r\n  }\r\n\r\n  /**\r\n   * @dev pause contract\r\n   */\r\n  function ownerPauseContract() onlyOwner {\r\n    paused = true;\r\n  }\r\n\r\n  /**\r\n   * @dev resume contract\r\n   */\r\n  function ownerResumeContract() onlyOwner {\r\n    paused = false;\r\n  }\r\n\r\n  /**\r\n   * @dev set exchange rate in wei, 1 Token = n ETH in wei\r\n   * @param _exchangeRateInWei change rate of ether\r\n   */\r\n  function ownerSetExchangeRateInWei(uint256 _exchangeRateInWei) onlyOwner {\r\n    require(_exchangeRateInWei > 0);\r\n    var _exchangeRate = ExchangeRate( getBlockNumber(), _exchangeRateInWei);\r\n    exchangeRateArray.push(_exchangeRate);\r\n    nextExchangeRateIndex = exchangeRateArray.length;\r\n  }\r\n\r\n  /**\r\n   * @dev disable single payee in emergency\r\n   * @param _address Disable payee address\r\n   */\r\n  function ownerDisablePayee(address _address) onlyOwner {\r\n    require(_address != owner);\r\n    payees[_address].isPayable = false;\r\n  }\r\n\r\n  /**\r\n   * @dev enable single payee\r\n   * @param _address Enable payee address\r\n   */\r\n  function ownerEnablePayee(address _address) onlyOwner {\r\n    payees[_address].isPayable = true;\r\n  }\r\n\r\n  /**\r\n   * @dev get payee count\r\n   */\r\n  function getPayeeCount() constant returns (uint256) {\r\n    return payeeArray.length;\r\n  }\r\n\r\n  /**\r\n   * @dev get block number\r\n   */\r\n  function getBlockNumber() internal constant returns (uint256) {\r\n    return block.number;\r\n  }\r\n\r\n  /**\r\n   * @dev add asset data, audit information\r\n   * @param _data asset data\r\n   */\r\n  function ownerAddAsset(string _data) onlyOwner {\r\n    var _asset = Asset(_data);\r\n    assetArray.push(_asset);\r\n  }\r\n\r\n  /**\r\n   * @dev get asset count\r\n   */\r\n  function getAssetCount() constant returns (uint256 result) {\r\n    return assetArray.length;\r\n  }\r\n\r\n  /**\r\n   * @dev put all capital in this contract\r\n   */\r\n  function ownerPutCapital() payable isInitialized isPaused onlyOwner {\r\n    require(msg.value > 0);\r\n    finalizedCapital = msg.value;\r\n  }\r\n\r\n  /**\r\n   * @dev put interest in this contract\r\n   * @param _terms Number of interest\r\n   */\r\n  function ownerPutInterest(uint256 _terms) payable isInitialized isPaused onlyOwner {\r\n    require(_terms == (getInterestCount() + 1));\r\n    interestArray.push(msg.value);\r\n  }\r\n\r\n  /**\r\n   * @dev get interest count\r\n   */\r\n  function getInterestCount() constant returns (uint256 result) {\r\n    return interestArray.length;\r\n  }\r\n\r\n  /**\r\n   * @dev withdraw balance from contract if emergency\r\n   */\r\n  function ownerWithdraw() payable isInitialized onlyOwner {\r\n    require(owner.send(this.balance));\r\n  }\r\n\r\n  event PayeeWithdrawCapital(address _payee, uint256 _capital);\r\n  event PayeeWithdrawInterest(address _payee, uint256 _interest, uint256 _remainInterest);\r\n  event DepositInterest(uint256 _terms, address _payee, uint256 _balance, uint256 _interest);\r\n  event Finalized();\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"tokenExchangeRateInWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextPayeeIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_exchangeRateInWei\",\"type\":\"uint256\"}],\"name\":\"ownerSetExchangeRateInWei\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_decimals\",\"type\":\"uint256\"},{\"name\":\"_contractAddress\",\"type\":\"address\"},{\"name\":\"_startBlock\",\"type\":\"uint256\"},{\"name\":\"_endBlock\",\"type\":\"uint256\"},{\"name\":\"_initializedTime\",\"type\":\"uint256\"},{\"name\":\"_financingPeriod\",\"type\":\"uint256\"},{\"name\":\"_tokenLockoutPeriod\",\"type\":\"uint256\"},{\"name\":\"_tokenMaturityPeriod\",\"type\":\"uint256\"},{\"name\":\"_minInvestInWei\",\"type\":\"uint256\"},{\"name\":\"_maxTokenSupply\",\"type\":\"uint256\"},{\"name\":\"_tokenExchangeRateInWei\",\"type\":\"uint256\"},{\"name\":\"_exchangeRateInWei\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenLockoutPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"payees\",\"outputs\":[{\"name\":\"isExists\",\"type\":\"bool\"},{\"name\":\"isPayable\",\"type\":\"bool\"},{\"name\":\"interestInWei\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"payeeArray\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"interestArray\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"exchangeRateArray\",\"outputs\":[{\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"name\":\"exchangeRateInWei\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"finalizedBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"ownerWithdraw\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"ownerDepositInterest\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxTokenSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"finalizedCapital\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"ownerPauseContract\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"ownerPutCapital\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"payeeWithdrawCapital\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAssetCount\",\"outputs\":[{\"name\":\"result\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"ownerEnablePayee\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"ownerResumeContract\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_terms\",\"type\":\"uint256\"}],\"name\":\"ownerPutInterest\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_data\",\"type\":\"string\"}],\"name\":\"ownerAddAsset\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextExchangeRateIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"financingPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenMaturityPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"interestOf\",\"outputs\":[{\"name\":\"result\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPayeeCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minInvestInWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"assetArray\",\"outputs\":[{\"name\":\"data\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_interestInWei\",\"type\":\"uint256\"}],\"name\":\"payeeWithdrawInterest\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getInterestCount\",\"outputs\":[{\"name\":\"result\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"ownerDisablePayee\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_payee\",\"type\":\"address\"}],\"name\":\"proxyPayment\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initializedTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"finalizedTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_payee\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_capital\",\"type\":\"uint256\"}],\"name\":\"PayeeWithdrawCapital\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_payee\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_interest\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_remainInterest\",\"type\":\"uint256\"}],\"name\":\"PayeeWithdrawInterest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_terms\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_payee\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_balance\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_interest\",\"type\":\"uint256\"}],\"name\":\"DepositInterest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Finalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"CryptoABS","CompilerVersion":"v0.4.11+commit.68ef5810","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://5f6d0e9ba9bc7d5c4e850b6203da8730c313899c4ab5e090cd6f03f8ed74fe84"}]}