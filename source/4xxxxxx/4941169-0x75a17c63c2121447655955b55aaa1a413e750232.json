{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public constant returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev Transfer token for a specified address\r\n  * @param _to The address to transfer to\r\n  * @param _value The amount to be transferred\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address\r\n  * @param _owner The address to query the the balance of\r\n  * @return An uint256 representing the amount owned by the passed address\r\n  */\r\n  function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n * @dev Implementation of the basic standard token\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n  mapping (address => mapping (address => uint256)) allowed;\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 The amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n\r\n    uint256 _allowance = allowed[_from][msg.sender];\r\n\r\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n    // require (_value <= _allowance);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   */\r\n  function increaseApproval (address _spender, uint _addedValue) public returns (bool success) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  function decreaseApproval (address _spender, uint _subtractedValue) public returns (bool success) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Mintable token\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\r\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n */\r\n\r\ncontract MintableToken is StandardToken, Ownable {\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\r\n    totalSupply = totalSupply.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    Mint(_to, _amount);\r\n    Transfer(0x0, _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() onlyOwner public returns (bool) {\r\n    mintingFinished = true;\r\n    MintFinished();\r\n    return true;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    Unpause();\r\n  }\r\n}\r\n\r\n/**\r\n * @title Cryder token contract\r\n * @dev The minting functionality is reimplemented, as opposed to inherited\r\n * from MintableToken, to allow for giving right to mint to arbitery account.\r\n */\r\ncontract CryderToken is StandardToken, Ownable, Pausable {\r\n  // Disable transfer unless explicitly enabled\r\n  function CryderToken() public { paused = true; }\r\n\r\n  // The address of the contract or user that is allowed to mint tokens.\r\n  address public minter;\r\n  \r\n  /**\r\n   * @dev Variables\r\n   *\r\n   * @public FREEZE_TIME uint the time when team tokens can be transfered\r\n   * @public bounty the address of bounty manager \r\n  */\r\n  uint public FREEZE_TIME = 1550682000;\r\n  address public bounty = 0xa258Eb1817aA122acBa4Af66A7A064AE6E10552A;\r\n\r\n  /**\r\n   * @dev Set the address of the minter\r\n   * @param _minter address to be set as minter.\r\n   *\r\n   * Note: We also need to implement \"mint\" method.\r\n   */\r\n  function setMinter(address _minter) public onlyOwner {\r\n      minter = _minter;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(address _to, uint256 _amount) public returns (bool) {\r\n    require(msg.sender == minter);\r\n\r\n    totalSupply = totalSupply.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n\r\n    Transfer(0x0, _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev account for paused/unpaused-state.\r\n   */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    // Check for paused with an exception of bounty manager and freeze team tokens for 1 year\r\n    require(msg.sender == bounty || (!paused && msg.sender != owner) || (!paused && msg.sender == owner && now > FREEZE_TIME));\r\n    return super.transfer(_to, _value);\r\n  }\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    // Check for paused with an exception of bounty manager and freeze team tokens for 1 year with an additional _from check\r\n    require((msg.sender == bounty && _from == bounty) || (!paused && msg.sender != owner && _from != owner) || (!paused && msg.sender == owner && now > FREEZE_TIME));\r\n    return super.transferFrom(_from, _to, _value);\r\n  }\r\n\r\n  /**\r\n   * @dev Token meta-information\r\n   * @param name of the token as it's shown to user\r\n   * @param symbol of the token\r\n   * @param decimals number\r\n   * Number of indivisible tokens that make up 1 CRYDER = 10^{decimals}\r\n   */\r\n  string public constant name = \"Cryder Token\";\r\n  string public constant symbol = \"CRYDER\";\r\n  uint8  public constant decimals = 18;\r\n}\r\n\r\n/**\r\n * @title Cryder crowdsale contract\r\n * @dev Govern the sale:\r\n *   1) Taking place in a specific limited period of time.\r\n *   2) Having HARDCAP value set --- a number of sold tokens to end the sale\r\n *\r\n * Owner can change time parameters at any time --- just in case of emergency\r\n * Owner can change minter at any time --- just in case of emergency\r\n *\r\n * !!! There is no way to change the address of the wallet or bounty manager !!!\r\n */\r\ncontract CryderCrowdsale is Ownable {\r\n    // Use SafeMath library to provide methods for uint256-type vars.\r\n    using SafeMath for uint256;\r\n\r\n    // The hardcoded address of wallet\r\n    address public wallet;\r\n\r\n    // The address of presale token\r\n    CryderToken public presaleToken;\r\n    \r\n    // The address of sale token\r\n    CryderToken public token;\r\n    \r\n    // Bounty must be allocated only once\r\n    bool public isBountyAllocated = false;\r\n    \r\n    // Requested tokens array\r\n    mapping(address => bool) tokenRequests;\r\n\r\n    /**\r\n     * @dev Variables\r\n     *\r\n     * @public START_TIME uint the time of the start of the sale\r\n     * @public CLOSE_TIME uint the time of the end of the sale\r\n     * @public HARDCAP uint256 if @HARDCAP is reached, sale stops\r\n     * @public exchangeRate the amount of indivisible quantities (=10^18 CRYDER) given for 1 wei\r\n     * @public bounty the address of bounty manager \r\n     */\r\n    uint public START_TIME = 1516467600;\r\n    uint public CLOSE_TIME = 1519146000;\r\n    uint256 public HARDCAP = 400000000000000000000000000;\r\n    uint256 public exchangeRate = 3000;\r\n    address public bounty = 0xa258Eb1817aA122acBa4Af66A7A064AE6E10552A;\r\n\r\n    /**\r\n     * Fallback function\r\n     * @dev The contracts are prevented from using fallback function.\r\n     * That prevents loosing control of tokens that will eventually get attributed to the contract, not the user.\r\n     * To buy tokens from the wallet (that is a contract) user has to specify beneficiary of tokens using buyTokens method.\r\n     */\r\n    function () payable public {\r\n      require(msg.sender == tx.origin);\r\n      buyTokens(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev A function to withdraw all funds.\r\n     * Normally, contract should not have ether at all.\r\n     */\r\n    function withdraw() onlyOwner public {\r\n      wallet.transfer(this.balance);\r\n    }\r\n\r\n    /**\r\n     * @dev The constructor sets the tokens address\r\n     * @param _token address\r\n     */\r\n    function CryderCrowdsale(address _presaleToken, address _token, address _wallet) public {\r\n      presaleToken = CryderToken(_presaleToken);\r\n      token  = CryderToken(_token);\r\n      wallet = _wallet;\r\n    }\r\n\r\n    /**\r\n     * event for token purchase logging\r\n     * @param purchaser who paid for the tokens\r\n     * @param beneficiary who got the tokens\r\n     * @param value weis paid for purchase\r\n     * @param amount amount of tokens purchased\r\n     */\r\n    event TokenPurchase(\r\n      address indexed purchaser,\r\n      address indexed beneficiary,\r\n      uint256 value,\r\n      uint256 amount\r\n    );\r\n\r\n    /**\r\n     * @dev Sets the start and end of the sale.\r\n     * @param _start uint256 start of the sale.\r\n     * @param _close uint256 end of the sale.\r\n     */\r\n    function setTime(uint _start, uint _close) public onlyOwner {\r\n      require( _start < _close );\r\n      START_TIME = _start;\r\n      CLOSE_TIME = _close;\r\n    }\r\n\r\n    /**\r\n     * @dev Sets exhange rate, ie amount of tokens (10^18 CRYDER) for 1 wei.\r\n     * @param _exchangeRate uint256 new exhange rate.\r\n     */\r\n    function setExchangeRate(uint256 _exchangeRate) public onlyOwner  {\r\n      require(now < START_TIME);\r\n      exchangeRate = _exchangeRate;\r\n    }\r\n\r\n    /**\r\n     * @dev Buy tokens for all sent ether. Tokens will be added to beneficiary's account\r\n     * @param beneficiary address the owner of bought tokens.\r\n     */\r\n    function buyTokens(address beneficiary) payable public {\r\n      uint256 total = token.totalSupply();\r\n      uint256 amount = msg.value;\r\n      require(amount > 0);\r\n\r\n      // Check that hardcap not reached, and sale-time.\r\n      require(total < HARDCAP);\r\n      require(now >= START_TIME);\r\n      require(now < CLOSE_TIME);\r\n\r\n      // Override exchange rate for daily bonuses\r\n      if (now < START_TIME + 3600 * 24 * 1) {\r\n          exchangeRate = 3900;\r\n      } else if (now < START_TIME + 3600 * 24 * 3) {\r\n          exchangeRate = 3750;\r\n      } else if (now < START_TIME + 3600 * 24 * 5) {\r\n          exchangeRate = 3600;\r\n      } else {\r\n          exchangeRate = 3000;\r\n      }\r\n\r\n      // Mint tokens bought for all sent ether to beneficiary\r\n      uint256 tokens = amount.mul(exchangeRate);\r\n\r\n      token.mint(beneficiary, tokens);\r\n      TokenPurchase(msg.sender, beneficiary, amount, tokens);\r\n\r\n      // Mint 8% tokens to wallet as a team part\r\n      uint256 teamTokens = tokens / 100 * 8;\r\n      token.mint(wallet, teamTokens);\r\n\r\n      // Finally, sent all the money to wallet\r\n      wallet.transfer(amount);\r\n    }\r\n    \r\n    /**\r\n     * @dev One time command to allocate 5kk bounty tokens\r\n     */\r\n     \r\n     function allocateBounty() public returns (bool) {\r\n         // Check for bounty manager and allocation state\r\n         require(msg.sender == bounty && isBountyAllocated == false);\r\n         // Mint bounty tokens to bounty managers address\r\n         token.mint(bounty, 5000000000000000000000000);\r\n         isBountyAllocated = true;\r\n         return true;\r\n     }\r\n     \r\n     function requestTokens() public returns (bool) {\r\n         require(presaleToken.balanceOf(msg.sender) > 0 && tokenRequests[msg.sender] == false);\r\n         token.mint(msg.sender, presaleToken.balanceOf(msg.sender));\r\n         tokenRequests[msg.sender] = true;\r\n         return true;\r\n     }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"allocateBounty\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presaleToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isBountyAllocated\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"requestTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"exchangeRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"HARDCAP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bounty\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_start\",\"type\":\"uint256\"},{\"name\":\"_close\",\"type\":\"uint256\"}],\"name\":\"setTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CLOSE_TIME\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_exchangeRate\",\"type\":\"uint256\"}],\"name\":\"setExchangeRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"START_TIME\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_presaleToken\",\"type\":\"address\"},{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_wallet\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"CryderCrowdsale","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000002b3f20d82e2bd9e942c8f1ea6fae0d75436fd32e0000000000000000000000008945975607fb4d23a554fd5dab08098152efe519000000000000000000000000cf095bcb36c1525b28652ba80925456c2181f9cb","Library":"","SwarmSource":"bzzr://e39265c91b29cd0f8fb3ca4d120d77dfc3aa3c5407e46563a6311e14000362f4"}]}