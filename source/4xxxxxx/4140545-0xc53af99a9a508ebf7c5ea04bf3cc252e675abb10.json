{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\tfunction mul(uint a, uint b) internal returns (uint) {\r\n\t\tuint c = a * b;\r\n\t\tassert(a == 0 || c / a == b);\r\n\t\treturn c;\r\n\t}\r\n\tfunction safeSub(uint a, uint b) internal returns (uint) {\r\n\t\tassert(b <= a);\r\n\t\treturn a - b;\r\n\t}\r\n\tfunction div(uint a, uint b) internal returns (uint) {\r\n\t\tassert(b > 0);\r\n\t\tuint c = a / b;\r\n\t\tassert(a == b * c + a % b);\r\n\t\treturn c;\r\n\t}\r\n\tfunction sub(uint a, uint b) internal returns (uint) {\r\n\t\tassert(b <= a);\r\n\t\treturn a - b;\r\n\t}\r\n\tfunction add(uint a, uint b) internal returns (uint) {\r\n\t\tuint c = a + b;\r\n\t\tassert(c >= a);\r\n\t\treturn c;\r\n\t}\r\n\tfunction max64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n\t\treturn a >= b ? a : b;\r\n\t}\r\n\tfunction min64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n\t\treturn a < b ? a : b;\r\n\t}\r\n\tfunction max256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n\t\treturn a >= b ? a : b;\r\n\t}\r\n\tfunction min256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n\t\treturn a < b ? a : b;\r\n\t}\r\n\tfunction assert(bool assertion) internal {\r\n\t\tif (!assertion) {\r\n\t\t\tthrow;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n    function Ownable() {\r\n        owner = msg.sender;\r\n    }\r\n    modifier onlyOwner {\r\n        if (msg.sender != owner) throw;\r\n        _;\r\n    }\r\n    function transferOwnership(address newOwner) onlyOwner {\r\n        if (newOwner != address(0)) {\r\n            owner = newOwner;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n\tbool public stopped;\r\n\tmodifier stopInEmergency {\r\n\t\tif (stopped) {\r\n\t\t\tthrow;\r\n\t\t}\r\n\t\t_;\r\n\t}\r\n\r\n\tmodifier onlyInEmergency {\r\n\t\tif (!stopped) {\r\n\t\t  throw;\r\n\t\t}\r\n\t_;\r\n\t}\r\n\t// called by the owner on emergency, triggers stopped state\r\n\tfunction emergencyStop() external onlyOwner {\r\n\t\tstopped = true;\r\n\t}\r\n\t// called by the owner on end of emergency, returns to normal state\r\n\tfunction release() external onlyOwner onlyInEmergency {\r\n\t\tstopped = false;\r\n\t}\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title PullPayment\r\n * @dev Base contract supporting async send for pull payments. Inherit from this\r\n * contract and use asyncSend instead of send.\r\n */\r\ncontract PullPayment {\r\n\tusing SafeMath for uint;\r\n\r\n\tmapping(address => uint) public payments;\r\n\tevent LogRefundETH(address to, uint value);\r\n\t/**\r\n\t*  Store sent amount as credit to be pulled, called by payer \r\n\t**/\r\n\tfunction asyncSend(address dest, uint amount) internal {\r\n\t\tpayments[dest] = payments[dest].add(amount);\r\n\t}\r\n\t// withdraw accumulated balance, called by payee\r\n\tfunction withdrawPayments() {\r\n\t\taddress payee = msg.sender;\r\n\t\tuint payment = payments[payee];\r\n\r\n\t\tif (payment == 0) {\r\n\t\t\tthrow;\r\n\t\t}\r\n\t\tif (this.balance < payment) {\r\n\t\t    throw;\r\n\t\t}\r\n\t\tpayments[payee] = 0;\r\n\t\tif (!payee.send(payment)) {\r\n\t\t    throw;\r\n\t\t}\r\n\t\tLogRefundETH(payee,payment);\r\n\t}\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n\tuint public totalSupply;\r\n\tfunction balanceOf(address who) constant returns (uint);\r\n\tfunction transfer(address to, uint value);\r\n\tevent Transfer(address indexed from, address indexed to, uint value);\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n\tfunction allowance(address owner, address spender) constant returns (uint);\r\n\tfunction transferFrom(address from, address to, uint value);\r\n\tfunction approve(address spender, uint value);\r\n\tevent Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances. \r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  \r\n\tusing SafeMath for uint;\r\n\r\n\tmapping(address => uint) balances;\r\n\r\n\t/*\r\n\t* Fix for the ERC20 short address attack  \r\n\t*/\r\n\tmodifier onlyPayloadSize(uint size) {\r\n\t   if(msg.data.length < size + 4) {\r\n\t     throw;\r\n\t   }\r\n\t _;\r\n\t}\r\n\tfunction transfer(address _to, uint _value) onlyPayloadSize(2 * 32) {\r\n\t\tbalances[msg.sender] = balances[msg.sender].sub(_value);\r\n\t\tbalances[_to] = balances[_to].add(_value);\r\n\t\tTransfer(msg.sender, _to, _value);\r\n\t}\r\n\tfunction balanceOf(address _owner) constant returns (uint balance) {\r\n\t\treturn balances[_owner];\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is BasicToken, ERC20 {\r\n\tmapping (address => mapping (address => uint)) allowed;\r\n\tfunction transferFrom(address _from, address _to, uint _value) onlyPayloadSize(3 * 32) {\r\n\t\tvar _allowance = allowed[_from][msg.sender];\r\n\t\tbalances[_to] = balances[_to].add(_value);\r\n\t\tbalances[_from] = balances[_from].sub(_value);\r\n\t\tallowed[_from][msg.sender] = _allowance.sub(_value);\r\n\t\tTransfer(_from, _to, _value);\r\n    }\r\n\tfunction approve(address _spender, uint _value) {\r\n\t\tif ((_value != 0) && (allowed[msg.sender][_spender] != 0)) throw;\r\n\t\tallowed[msg.sender][_spender] = _value;\r\n\t\tApproval(msg.sender, _spender, _value);\r\n\t}\r\n\tfunction allowance(address _owner, address _spender) constant returns (uint remaining) {\r\n\t\treturn allowed[_owner][_spender];\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n *  Devvote tokens contract.\r\n */\r\ncontract DevotteToken is StandardToken, Ownable {\r\n\t\r\n  using SafeMath for uint;\r\n  \r\n\r\n    /**\r\n     * Variables\r\n    */\r\n    string public constant name = \"DEVVOTE\";\r\n    string public constant symbol = \"VVE\";\r\n    uint256 public constant decimals = 0;\r\n\r\n   \r\n    /**\r\n     * @dev Contract constructor\r\n     */ \r\n    function DevotteToken() {\r\n    totalSupply = 100000000;\r\n    balances[msg.sender] = totalSupply;\r\n    }\r\n    \r\n    \r\n    /**\r\n    *  Burn away the specified amount of ClusterToken tokens.\r\n    * @return Returns success boolean.\r\n    */\r\n    function burn(uint _value) onlyOwner returns (bool) {\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        totalSupply = totalSupply.sub(_value);\r\n        Transfer(msg.sender, 0x0, _value);\r\n        return true;\r\n    }\r\n    \r\n}\r\n\r\n\r\ncontract DevvotePrefund is Pausable, PullPayment {\r\n    \r\n    using SafeMath for uint;\r\n    \r\n    \r\n    enum memberRanking { Executive, boardMember, ActiveMember, supportingMember }\r\n    memberRanking ranking;\r\n\r\n\r\n  \tstruct Backer {\r\n\t\tuint weiReceived;\r\n\t\tuint coinSent;\r\n\t\tmemberRanking userRank;\r\n\t}\r\n\r\n\t/*\r\n\t* Constants\r\n\t*/\r\n\r\n\tuint public constant MIN_CAP = 5000; // \r\n\tuint public constant MAX_CAP = 250000; // \r\n\t\r\n\t/* Minimum amount to invest */\r\n\tuint public constant MIN_INVEST_ETHER = 100 finney;\r\n\tuint public constant MIN_INVEST_BOARD = 10 ether ;\r\n\tuint public constant MIN_INVEST_ACTIVE = 3 ether;\r\n\tuint public constant MIN_INVEST_SUPPORT = 100 finney;\r\n\r\n\tuint private constant DevvotePrefund_PERIOD = 30 days;\r\n\r\n\tuint public constant COIN_PER_ETHER = 1000;\r\n\tuint public constant COIN_PER_ETHER_BOARD = 2500;\r\n\tuint public constant COIN_PER_ETHER_ACTIVE = 1500;\r\n\tuint public constant COIN_PER_ETHER_SUPPORT = 1000;\r\n\r\n\r\n\t/*\r\n\t* Variables\r\n\t*/\r\n\r\n\tDevotteToken public coin;\r\n\taddress public multisigEther;\r\n\tuint public etherReceived;\r\n\tuint public coinSentToEther;\r\n\r\n\tuint public startTime;\r\n\tuint public endTime;\r\n\tbool public DevvotePrefundClosed;\r\n\r\n\t/* Backers Ether indexed by their Ethereum address */\r\n\tmapping(address => Backer) public backers;\r\n\r\n\r\n\t/*\r\n\t* Modifiers\r\n\t*/\r\n\tmodifier minCapNotReached() {\r\n\t\tif ((now < endTime) || coinSentToEther >= MIN_CAP ) throw;\r\n\t\t_;\r\n\t}\r\n\r\n\tmodifier respectTimeFrame() {\r\n\t\tif ((now < startTime) || (now > endTime )) throw;\r\n\t\t_;\r\n\t}\r\n\r\n\t/*\r\n\t * Event\r\n\t*/\r\n\tevent LogReceivedETH(address addr, uint value);\r\n\tevent LogCoinsEmited(address indexed from, uint amount);\r\n\r\n\t/*\r\n\t * Constructor\r\n\t*/\r\n\tfunction DevvotePrefund(address _devvoteAddress, address _to) {\r\n\t\tcoin = DevotteToken(_devvoteAddress);\r\n\t\tmultisigEther = _to;\r\n\t\tstart();\r\n\t}\r\n\r\n\t/* \r\n\t * The fallback function corresponds to a donation in ETH\r\n\t */\r\n\tfunction() stopInEmergency respectTimeFrame payable {\r\n\t\treceiveETH(msg.sender);\r\n\t}\r\n\r\n\t/* \r\n\t * To call to start the DevvotePrefund\r\n\t */\r\n\tfunction start() onlyOwner {\r\n\t\tif (startTime != 0) throw; // DevvotePrefund was already started\r\n\r\n\t\tstartTime = now ;            \r\n\t\tendTime =  now + DevvotePrefund_PERIOD;    \r\n\t}\r\n\r\n\t/*\r\n\t *\tReceives a donation in Ether\r\n\t*/\r\n\tfunction receiveETH(address beneficiary) internal {\r\n\t    \r\n\t    memberRanking setRank;\r\n\t    uint coinToSend;\r\n\t    \r\n\t\tif (msg.value < MIN_INVEST_ETHER) throw; \r\n\t\t\r\n\t\t\r\n\t\tif (msg.value < MIN_INVEST_ACTIVE && msg.value >= MIN_INVEST_ETHER ) { \r\n\t\t    setRank = memberRanking.supportingMember;\r\n\t\t    coinToSend = bonus(msg.value.mul(COIN_PER_ETHER_SUPPORT).div(1 ether));\r\n\t\t}\r\n\t\tif (msg.value < MIN_INVEST_BOARD  && msg.value >= MIN_INVEST_ACTIVE) {\r\n\t\t    setRank = memberRanking.ActiveMember;\r\n\t\t    coinToSend = bonus(msg.value.mul(COIN_PER_ETHER_ACTIVE).div(1 ether));\r\n\t\t}\r\n\t\tif (msg.value >= MIN_INVEST_BOARD ) {\r\n\t\t    setRank = memberRanking.boardMember;\r\n\t\t    coinToSend = bonus(msg.value.mul(COIN_PER_ETHER_BOARD).div(1 ether));\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t\tif (coinToSend.add(coinSentToEther) > MAX_CAP) throw;\t\r\n\r\n\t\tBacker backer = backers[beneficiary];\r\n\t\tcoin.transfer(beneficiary, coinToSend); \r\n\t\tbacker.coinSent = backer.coinSent.add(coinToSend);\r\n\t\tbacker.weiReceived = backer.weiReceived.add(msg.value);    \r\n\t\tbacker.userRank = setRank;\r\n\r\n\t\tetherReceived = etherReceived.add(msg.value);\r\n\t\tcoinSentToEther = coinSentToEther.add(coinToSend);\r\n\r\n\t\tLogCoinsEmited(msg.sender ,coinToSend);\r\n\t\tLogReceivedETH(beneficiary, etherReceived); \r\n\t}\r\n\t\r\n\r\n\t/*\r\n\t *Compute the Devvote bonus according to the investment period\r\n\t */\r\n\tfunction bonus(uint amount) internal constant returns (uint) {\r\n\t\treturn amount.add(amount.div(5));   // bonus 20%\r\n\t}\r\n\r\n\t/*\t\r\n\t * Finalize the DevvotePrefund, should be called after the refund period\r\n\t*/\r\n\tfunction finalize() onlyOwner public {\r\n\r\n\t\tif (now < endTime) { // Cannot finalise before DevvotePrefund_PERIOD or before selling all coins\r\n\t\t\tif (coinSentToEther == MAX_CAP) {\r\n\t\t\t} else {\r\n\t\t\t\tthrow;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (coinSentToEther < MIN_CAP && now < endTime + 15 days) throw; // If MIN_CAP is not reached donors have 15days to get refund before we can finalise\r\n\r\n\t\tif (!multisigEther.send(this.balance)) throw; // Move the remaining Ether to the multisig address\r\n\t\t\r\n\t\tuint remains = coin.balanceOf(this);\r\n\t\tif (remains > 0) { // Burn the rest of Devvotes\r\n\t\t\tif (!coin.burn(remains)) throw ;\r\n\t\t}\r\n\t\tDevvotePrefundClosed = true;\r\n\t}\r\n\r\n\t/*\t\r\n\t* Failsafe drain\r\n\t*/\r\n\tfunction drain() onlyOwner {\r\n\t\tif (!owner.send(this.balance)) throw;\r\n\t}\r\n\r\n\t/**\r\n\t * Allow to change the team multisig address in the case of emergency.\r\n\t */\r\n\tfunction setMultisig(address addr) onlyOwner public {\r\n\t\tif (addr == address(0)) throw;\r\n\t\tmultisigEther = addr;\r\n\t}\r\n\r\n\t/**\r\n\t * Manually back Devvote owner address.\r\n\t */\r\n\tfunction backDevvoteOwner() onlyOwner public {\r\n\t\tcoin.transferOwnership(owner);\r\n\t}\r\n\r\n\t/**\r\n\t * Transfer remains to owner in case if impossible to do min invest\r\n\t */\r\n\tfunction getRemainCoins() onlyOwner public {\r\n\t\tvar remains = MAX_CAP - coinSentToEther;\r\n\t\tuint minCoinsToSell = bonus(MIN_INVEST_ETHER.mul(COIN_PER_ETHER) / (1 ether));\r\n\r\n\t\tif(remains > minCoinsToSell) throw;\r\n\r\n\t\tBacker backer = backers[owner];\r\n\t\tcoin.transfer(owner, remains); // Transfer Devvotes right now \r\n\r\n\t\tbacker.coinSent = backer.coinSent.add(remains);\r\n\r\n\t\tcoinSentToEther = coinSentToEther.add(remains);\r\n\r\n\t\t// Send events\r\n\t\tLogCoinsEmited(this ,remains);\r\n\t\tLogReceivedETH(owner, etherReceived); \r\n\t}\r\n\r\n\r\n\t/* \r\n  \t * When MIN_CAP is not reach:\r\n  \t * 1) backer call the \"approve\" function of the Devvote token contract with the amount of all Devvotes they got in order to be refund\r\n  \t * 2) backer call the \"refund\" function of the DevvotePrefund contract with the same amount of Devvotes\r\n   \t * 3) backer call the \"withdrawPayments\" function of the DevvotePrefund contract to get a refund in ETH\r\n   \t */\r\n\tfunction refund(uint _value) minCapNotReached public {\r\n\t\t\r\n\t\tif (_value != backers[msg.sender].coinSent) throw; // compare value from backer balance\r\n\r\n\t\tcoin.transferFrom(msg.sender, address(this), _value); // get the token back to the DevvotePrefund contract\r\n\r\n\t\tif (!coin.burn(_value)) throw ; // token sent for refund are burnt\r\n\r\n\t\tuint ETHToSend = backers[msg.sender].weiReceived;\r\n\t\tbackers[msg.sender].weiReceived=0;\r\n\r\n\t\tif (ETHToSend > 0) {\r\n\t\t\tasyncSend(msg.sender, ETHToSend); // pull payment to get refund in ETH\r\n\t\t}\r\n\t}\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"backDevvoteOwner\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"coin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DevvotePrefundClosed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"refund\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"COIN_PER_ETHER_SUPPORT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"COIN_PER_ETHER_ACTIVE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"etherReceived\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawPayments\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"emergencyStop\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MIN_INVEST_ETHER\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MIN_INVEST_SUPPORT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stopped\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"COIN_PER_ETHER_BOARD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MIN_CAP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"release\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"coinSentToEther\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"drain\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"COIN_PER_ETHER\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"backers\",\"outputs\":[{\"name\":\"weiReceived\",\"type\":\"uint256\"},{\"name\":\"coinSent\",\"type\":\"uint256\"},{\"name\":\"userRank\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"start\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MIN_INVEST_ACTIVE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MIN_INVEST_BOARD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"multisigEther\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_CAP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getRemainCoins\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"payments\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setMultisig\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_devvoteAddress\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"}],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"LogReceivedETH\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogCoinsEmited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"LogRefundETH\",\"type\":\"event\"}]","ContractName":"DevvotePrefund","CompilerVersion":"v0.4.11+commit.68ef5810","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000af54ec8ecdb396bc61053a3a147bbf981cb97cee000000000000000000000000a262e4c62eb335f9ec7c61321e48dd315f0866e9","Library":"","SwarmSource":"bzzr://b8220dc24e82caf4b5aa7dc66779314d22e2189cedd6d23e480e9c75086c5e42"}]}