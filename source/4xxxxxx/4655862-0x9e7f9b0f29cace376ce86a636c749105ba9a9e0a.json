{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.16;\r\n\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) constant returns (uint256);\r\n  function transfer(address to, uint256 value) returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) returns (bool);\r\n  function approve(address spender, uint256 value) returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    \r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n  \r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances. \r\n */\r\ncontract BasicToken is ERC20Basic {\r\n    \r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n\r\n  modifier onlyPayloadSize(uint size) {\r\n    require(msg.data.length >= size + 4);\r\n    _;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n\r\n  function transfer(address _to, uint256 _value) onlyPayloadSize(32*2) returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of. \r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) allowed;\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amout of tokens to be transfered\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\r\n    var _allowance = allowed[_from][msg.sender];\r\n\r\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n    require (_value <= _allowance);\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n\r\n    balances[_to] = balances[_to].add(_value);\r\n    balances[_from] = balances[_from].sub(_value);\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) returns (bool) {\r\n\r\n    // To change the approve amount you first have to reduce the addresses`\r\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n    //  already 0 to mitigate the race condition described here:\r\n    //  https://github.com/\r\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifing the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    \r\n  address public owner;\r\n  address public candidate;\r\n\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n  \r\n  function changeOwner(address _owner) onlyOwner {\r\n    candidate = _owner;      \r\n  }\r\n  \r\n  function confirmOwner() public {\r\n    require(candidate == msg.sender); \r\n    owner = candidate;   \r\n  }\r\n  \r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  /**\r\n   *function transferOwnership(address newOwner) onlyOwner {\r\n   * require(newOwner != address(0));      \r\n   * owner = newOwner;\r\n   *}\r\n   */\r\n}\r\n\r\n/**\r\n * @title Mintable token\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n * @dev Issue: * https://github.com\r\n * Based on code by TokenMarketNet: https://github.com\r\n */\r\n\r\ncontract MintableToken is StandardToken, Ownable {\r\n    \r\n  event Mint(address indexed to, uint256 amount);\r\n  \r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n  uint256 public lastTotalSupply = 0;\r\n\r\n  address public saleAgent = 0;\r\n\r\n\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n\r\n  function setSaleAgent(address newSaleAgent) public {\r\n    require(msg.sender == saleAgent || msg.sender == owner);\r\n    saleAgent = newSaleAgent;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will recieve the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(address _to, uint256 _amount) canMint returns (bool) {\r\n    require(msg.sender == saleAgent); \r\n    totalSupply = totalSupply.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    Mint(_to, _amount);\r\n    Transfer(address(0), _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n\r\n  function finishMinting() returns (bool) {\r\n    require((msg.sender == saleAgent) || (msg.sender == owner)); \r\n    lastTotalSupply = totalSupply;\r\n    mintingFinished = true;\r\n    MintFinished();\r\n    return mintingFinished;\r\n  }\r\n  function startMinting()  returns (bool) {\r\n    require((msg.sender == saleAgent) || (msg.sender == owner)); \r\n    mintingFinished = false;\r\n    return mintingFinished;\r\n  }\r\n  \r\n}\r\n\r\ncontract BetOnCryptToken is MintableToken {\r\n    \r\n    string public constant name = \"BetOnCrypt_Token\";\r\n    \r\n    string public constant symbol = \"BEC\";\r\n    \r\n    uint32 public constant decimals = 18;\r\n    \r\n}\r\n\r\ncontract CrowdsalePre is Ownable {\r\n    \r\n    using SafeMath for uint;\r\n    \r\n    enum State { Active, Refunding, Close }\r\n    \r\n    address public multisig;\r\n\r\n    uint public restrictedPercent;\r\n\r\n    address public restricted;\r\n\r\n    BetOnCryptToken public token; \r\n    \r\n    uint public start;\r\n    \r\n    uint public period;\r\n\r\n    uint public hardcap;\r\n\r\n    uint public rateboc;\r\n\r\n    uint public softcap;\r\n\r\n    uint public minboc;\r\n\r\n    bool is_finishmining;\r\n\r\n    State public state;\r\n    \r\n    uint public first;\r\n    uint public second;\r\n    uint public third; \r\n    uint public fourth; \r\n    uint public fifth;\r\n\r\n    mapping(address => uint) public balances;\r\n    uint public indexBalance;\r\n    \r\n    event Closed();\r\n    event RefundsEnabled();\r\n    event Refunded(address indexed beneficiary, uint256 weiAmount);  \r\n\r\n\r\n    function CrowdsalePre(address _tokencoin) {\r\n        token = BetOnCryptToken(_tokencoin);\r\n        is_finishmining = false;\r\n        state = State.Active;\r\n    }\r\n\r\n \r\n\r\n    function setParams(address _multisig, address _restricted, uint _period, uint _start, uint _rateboc, uint _minboc, uint _softcap, uint _hardcap, uint _restrictedPercent, uint _first, uint _second,  uint _third, uint _fourth, uint _fifth) onlyOwner {\r\n      multisig = _multisig; \r\n      restricted = _restricted;    \r\n      start = _start;      \r\n      period = _period;      \r\n      minboc = _minboc.mul(1000000000000000000);      \r\n      rateboc = _rateboc.mul(1000000000000000000);      \r\n      softcap = _softcap.mul(1000000000000000000);      \r\n      hardcap = _hardcap.mul(1000000000000000000);\r\n      if (_restrictedPercent > 0 && _restrictedPercent < 50){\r\n        restrictedPercent = _restrictedPercent;      \r\n      } \r\n      else{\r\n        restrictedPercent = 40;\r\n      }\r\n      first  = _first;\r\n      second = _second;\r\n      third  = _third; \r\n      fourth = _fourth; \r\n      fifth  = _fifth;\r\n    }\r\n\r\n\r\n    modifier saleIsOn() {\r\n    \trequire((now > start) && (now < (start + period * 1 days)));\r\n    \t_;\r\n    }\r\n\r\n    modifier isUnderHardcap() {\r\n        require(multisig.balance <= hardcap);\r\n        _;\r\n    }\r\n\r\n    modifier isUnderRefunds() {\r\n        require((this.balance < softcap) && (now > (start + period * 1 days)));\r\n        _;\r\n    }\r\n\r\n    function finishMinting() onlyOwner {\r\n        require(this.balance >= softcap);\r\n        multisig.transfer(this.balance);\r\n        uint issuedTokenSupply = token.totalSupply();\r\n        uint restrictedTokens = issuedTokenSupply.mul(restrictedPercent).div(100 - restrictedPercent);\r\n        token.mint(restricted, restrictedTokens);\r\n        token.finishMinting();\r\n        is_finishmining = true;\r\n    }\r\n\r\n\r\n    function destroyCrowdsale() onlyOwner {\r\n      require(state == State.Close);\r\n      selfdestruct(owner);\r\n    }\r\n\r\n    function closeCrowdsale() onlyOwner {\r\n      require(state == State.Active);\r\n      require(now > (start + (period * 1 days)));\r\n      require(this.balance >= softcap);\r\n      state = State.Close;\r\n      if (is_finishmining == false){\r\n        finishMinting();\r\n      }\r\n      Closed();\r\n    }\r\n\r\n    function enableRefunds() onlyOwner isUnderRefunds public {\r\n      require(state == State.Active);\r\n      state = State.Refunding;\r\n      RefundsEnabled();\r\n    }\r\n\r\n    function refund() isUnderRefunds public {\r\n      require(state == State.Refunding);\r\n      uint value = 0;\r\n      value = balances[msg.sender]; \r\n      balances[msg.sender] = 0; \r\n      if (indexBalance > 0) {\r\n         indexBalance --;\r\n      }\r\n      if (indexBalance == 0) {\r\n        state = State.Close;\r\n      }\r\n      msg.sender.transfer(value); \r\n      Refunded(msg.sender, value);\r\n    }\r\n\r\n\r\n    function createTokens() isUnderHardcap saleIsOn payable {\r\n        require(msg.sender != address(0));\r\n        require(state == State.Active);\r\n        uint tokens = rateboc.mul(msg.value).div(1 ether);\r\n        require(tokens > minboc);\r\n        uint bonusTokens = 0;\r\n        if(now < (start + 6 days)) {\r\n          bonusTokens = tokens.mul(first).div(100);\r\n        } else if(now >= (start +  6 days) && now < (start + 12 days)) {\r\n          bonusTokens = tokens.mul(second).div(100);\r\n        } else if(now >= (start + 12 days) && now < (start + 18 days)) {\r\n          bonusTokens = tokens.mul(third).div(100);\r\n        } else if(now >= (start + 18 days) && now < (start + 24 days)) {\r\n          bonusTokens = tokens.mul(fourth).div(100);\r\n        } else if(now >= (start + 24 days)) {\r\n          bonusTokens = tokens.mul(fifth).div(100);\r\n        }\r\n        tokens += bonusTokens;\r\n        token.mint(this, tokens);\r\n        token.transfer(msg.sender, tokens);\r\n        balances[msg.sender] = balances[msg.sender].add(msg.value);\r\n        indexBalance ++;\r\n        \r\n        \r\n    }\r\n\r\n    function sendTokens(address beneficiary, uint _tokens) onlyOwner public {\r\n      uint value = _tokens.mul(1000000000000000000);\r\n      token.mint(this, value);\r\n      token.transfer(beneficiary, value);\r\n    }\r\n\r\n    function() external payable {\r\n      createTokens();\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"indexBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"},{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"sendTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minboc\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"restrictedPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"first\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"multisig\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"destroyCrowdsale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"second\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"candidate\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"restricted\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fourth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"enableRefunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rateboc\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"closeCrowdsale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"third\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hardcap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"createTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_multisig\",\"type\":\"address\"},{\"name\":\"_restricted\",\"type\":\"address\"},{\"name\":\"_period\",\"type\":\"uint256\"},{\"name\":\"_start\",\"type\":\"uint256\"},{\"name\":\"_rateboc\",\"type\":\"uint256\"},{\"name\":\"_minboc\",\"type\":\"uint256\"},{\"name\":\"_softcap\",\"type\":\"uint256\"},{\"name\":\"_hardcap\",\"type\":\"uint256\"},{\"name\":\"_restrictedPercent\",\"type\":\"uint256\"},{\"name\":\"_first\",\"type\":\"uint256\"},{\"name\":\"_second\",\"type\":\"uint256\"},{\"name\":\"_third\",\"type\":\"uint256\"},{\"name\":\"_fourth\",\"type\":\"uint256\"},{\"name\":\"_fifth\",\"type\":\"uint256\"}],\"name\":\"setParams\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"confirmOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"start\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"period\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"softcap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fifth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tokencoin\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Closed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"RefundsEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"weiAmount\",\"type\":\"uint256\"}],\"name\":\"Refunded\",\"type\":\"event\"}]","ContractName":"CrowdsalePre","CompilerVersion":"v0.4.16+commit.d7661dd9","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000001ED779c9BdFBAc63445846e0f0C75A983a5916E6","Library":"","SwarmSource":"bzzr://3fa290bbd021d820912400e282be77f0957d787b9f750607dc6465f23275742d"}]}