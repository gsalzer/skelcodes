{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^ 0.4.18;\r\n\r\ncontract ERC20 {\r\n  uint256 public totalsupply;\r\n  function totalSupply() public constant returns(uint256 _totalSupply);\r\n  function balanceOf(address who) public constant returns (uint256);\r\n  function allowance(address owner, address spender) public constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool ok);\r\n  function approve(address spender, uint256 value) public returns (bool ok);\r\n  function transfer(address to, uint256 value) public returns (bool ok);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) pure internal returns(uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) pure internal returns(uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) pure internal returns(uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) pure internal returns(uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract ShipBloc is ERC20 {\r\n    \r\n    using SafeMath\r\n    for uint256;\r\n    \r\n    \r\n    string public constant name = \"ShipBloc Token\";\r\n\r\n    string public constant symbol = \"SBLOC\";\r\n\r\n    uint8 public constant decimals = 18;\r\n\r\n    uint256 public constant totalsupply = 82500000 * (10 ** 18);\r\n    uint256 public constant teamAllocated = 14025000 * (10 ** 18);\r\n    uint256 public constant maxPreSale1Token = 15000000 * (10 ** 18);\r\n    uint256 public constant maxPreSale2Token = 30000000 * (10 ** 18);\r\n    uint256 public totalUsedTokens = 0;\r\n      \r\n    mapping(address => uint256) balances;\r\n\r\n    mapping(address => mapping(address => uint256)) allowed;\r\n    \r\n    address owner = 0x1067c593a9981eFF4a56056dD775627CBe9D9107;\r\n    \r\n    event supply(uint256 bnumber);\r\n\r\n    event events(string _name);\r\n    \r\n    uint256 public no_of_tokens;\r\n    \r\n    uint preICO1Start;\r\n    uint preICO1End;\r\n    uint preICO2Start;\r\n    uint preICO2End;\r\n    uint ICOStart;\r\n    uint ICOEnd;\r\n    \r\n    enum Stages {\r\n        NOTSTARTED,\r\n        PREICO1,\r\n        PREICO2,\r\n        ICO,\r\n        ENDED\r\n    }\r\n    \r\n    mapping(uint => Stages) stage;\r\n\r\n    modifier onlyOwner() {\r\n        if (msg.sender != owner) {\r\n            revert();\r\n        }\r\n        _;\r\n    }\r\n   \r\n    function ShipBloc(uint _preICO1Start,uint _preICO1End,uint _preICO2Start,uint _preICO2End,uint _ICOStart,uint _ICOEnd) public {\r\n        balances[owner] = teamAllocated;      \r\n        balances[address(this)] = SafeMath.sub(totalsupply,teamAllocated);\r\n        stage[0]=Stages.NOTSTARTED;\r\n        stage[1667]=Stages.PREICO1;\r\n        stage[1000]=Stages.PREICO2;\r\n        stage[715]=Stages.ICO;\r\n        stage[1]=Stages.ENDED;\r\n        preICO1Start=_preICO1Start;\r\n        preICO1End=_preICO1End;\r\n        preICO2Start=_preICO2Start;\r\n        preICO2End=_preICO2End;\r\n        ICOStart=_ICOStart;\r\n        ICOEnd=_ICOEnd;\r\n    }\r\n    \r\n    function () public payable {\r\n        require(msg.value != 0);\r\n        \r\n        uint256 _price_tokn = checkStage();\r\n        require(stage[_price_tokn] != Stages.NOTSTARTED && stage[_price_tokn] != Stages.ENDED);\r\n        \r\n        no_of_tokens = SafeMath.mul(msg.value , _price_tokn); \r\n        \r\n        require(balances[address(this)] >= no_of_tokens);\r\n        \r\n        totalUsedTokens = SafeMath.add(totalUsedTokens,no_of_tokens);\r\n        balances[address(this)] =SafeMath.sub(balances[address(this)],no_of_tokens);\r\n        balances[msg.sender] = SafeMath.add(balances[msg.sender],no_of_tokens);\r\n        Transfer(address(this), msg.sender, no_of_tokens);\r\n        owner.transfer(this.balance);\r\n   }\r\n    \r\n    function totalSupply() public constant returns(uint256) {\r\n       return totalsupply;\r\n    }\r\n    \r\n     function balanceOf(address sender) public constant returns(uint256 balance) {\r\n        return balances[sender];\r\n    }\r\n\r\n    \r\n    function transfer(address _to, uint256 _amount) public returns(bool success) {\r\n        require(_to != address(0));\r\n        require(stage[checkStage()] == Stages.ENDED);\r\n        if (balances[msg.sender] >= _amount &&\r\n            _amount > 0) {\r\n         \r\n            balances[msg.sender] = SafeMath.sub(balances[msg.sender],_amount);\r\n            balances[_to] = SafeMath.add(balances[_to],_amount);\r\n            Transfer(msg.sender, _to, _amount);\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n    \r\n    function checkStage() internal view returns(uint) {\r\n        uint currentBlock = block.number;\r\n        if (currentBlock < preICO1Start){\r\n            return 0;    \r\n        } else if (currentBlock < preICO1End) {\r\n            require(maxPreSale1Token>totalUsedTokens);\r\n            return 1667;    \r\n        } else if (currentBlock < preICO2Start) {\r\n            return 0;    \r\n        } else if (currentBlock < preICO2End) {\r\n            require(maxPreSale2Token>totalUsedTokens);\r\n            return 1000;    \r\n        } else if (currentBlock < ICOStart) {\r\n            return 0;\r\n        } else if (currentBlock < ICOEnd) {\r\n            return 715;    \r\n        }\r\n        return 1;\r\n    }\r\n    \r\n    function getStageandPrice() public view returns(uint,uint){\r\n        return (checkStage(),uint(stage[checkStage()]));\r\n    }\r\n   \r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _amount\r\n    ) public returns(bool success) {\r\n            require(_from != address(0) && _to != address(0));\r\n            require(stage[checkStage()] == Stages.ENDED);\r\n            require(balances[_from] >= _amount && allowed[_from][msg.sender] >= _amount);    \r\n                \r\n            balances[_from] = SafeMath.sub(balances[_from],_amount);\r\n            allowed[_from][msg.sender] = SafeMath.sub(allowed[_from][msg.sender], _amount);\r\n            balances[_to] = SafeMath.add(balances[_to], _amount);\r\n            Transfer(_from, _to, _amount);\r\n            \r\n            return true;\r\n       \r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) public constant returns(uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    function drain() external onlyOwner {\r\n        owner.transfer(this.balance);\r\n    }\r\n\r\n    function drainToken() external onlyOwner {\r\n        require(stage[checkStage()] == Stages.ENDED);\r\n        balances[owner] = SafeMath.add(balances[owner],balances[address(this)]);\r\n        Transfer(address(this), owner, balances[address(this)]);\r\n        balances[address(this)] = 0;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxPreSale2Token\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamAllocated\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"no_of_tokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxPreSale1Token\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"drainToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalsupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"drain\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getStageandPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalUsedTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_preICO1Start\",\"type\":\"uint256\"},{\"name\":\"_preICO1End\",\"type\":\"uint256\"},{\"name\":\"_preICO2Start\",\"type\":\"uint256\"},{\"name\":\"_preICO2End\",\"type\":\"uint256\"},{\"name\":\"_ICOStart\",\"type\":\"uint256\"},{\"name\":\"_ICOEnd\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"bnumber\",\"type\":\"uint256\"}],\"name\":\"supply\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"events\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"ShipBloc","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000004825d400000000000000000000000000000000000000000000000000000000004852c0000000000000000000000000000000000000000000000000000000000048962200000000000000000000000000000000000000000000000000000000004976be000000000000000000000000000000000000000000000000000000000049a3aa00000000000000000000000000000000000000000000000000000000004c021c","Library":"","SwarmSource":"bzzr://714c98841130a3761fa6354174ecf4ac3a9dfc5ebc650ccb4487cb5df830997b"}]}