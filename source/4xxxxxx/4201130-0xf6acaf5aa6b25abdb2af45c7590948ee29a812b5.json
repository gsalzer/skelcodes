{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.4;\r\n\r\ncontract RaffleStrangeLoop {\r\n    address owner;\r\n    address public winner;\r\n    mapping(uint => address) public tickets;\r\n\r\n    uint public numTickets;\r\n    uint public ethereumFoundationTickets;\r\n\r\n    uint public chooseWinnerDeadline;\r\n\r\n    uint public lastBlock;\r\n    bytes32 public serverSeedHash;\r\n    bytes32 public clientSeed;\r\n\r\n    event Winner(address value);\r\n\r\n    modifier isOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    modifier notFinished() {\r\n        require(winner == 0x0);\r\n        _;\r\n    }\r\n\r\n    function RaffleStrangeLoop(bytes32 secretHash) {\r\n        owner = msg.sender;\r\n        serverSeedHash = secretHash;\r\n        chooseWinnerDeadline = block.timestamp + 15 days;\r\n    }\r\n\r\n    function getRaffleTimeLeft() constant returns (uint) {\r\n        int timeLeft = int(chooseWinnerDeadline) - int(block.timestamp);\r\n        if (timeLeft > 0) {\r\n            return uint(timeLeft);\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    function chooseWinner(bytes32 seed) isOwner notFinished {\r\n        // make sure the provided seed matches the initial server seed hash\r\n        require(sha3(seed) == serverSeedHash);\r\n\r\n        // Allow a period of 24 hours to choose a winner\r\n        int timeLeft = int(chooseWinnerDeadline) - int(block.timestamp);\r\n        require(timeLeft < 0 && timeLeft > -86400);\r\n\r\n        // Require that at least one person bought the ticket\r\n        require(numTickets > 0);\r\n\r\n        // Choose winner\r\n        bytes32 serverClientHash = sha3(seed, clientSeed);\r\n\r\n        uint winnerIdx = (uint(serverClientHash) ^ lastBlock) % numTickets;\r\n        winner = tickets[winnerIdx];\r\n        Winner(winner);\r\n\r\n        // Send donation to ethereum foundation\r\n        uint donation = ethereumFoundationTickets * 10000000000000000;\r\n        if (donation > 0) {\r\n            // See https://www.ethereum.org/donate\r\n            address ethereumTipJar = 0xfB6916095ca1df60bB79Ce92cE3Ea74c37c5d359;\r\n            ethereumTipJar.transfer(donation);\r\n        }\r\n\r\n        // Send remaining balance to owner\r\n        owner.transfer(this.balance);\r\n    }\r\n\r\n    function buyTickets(bytes32 beneficiary) payable notFinished {\r\n        // only allow if there is time left\r\n        require(getRaffleTimeLeft() > 0);\r\n\r\n        // ticket value = 0.01 ETH\r\n        uint ticketsBought = msg.value / 10000000000000000;\r\n\r\n        // Refund the difference\r\n        msg.sender.transfer(msg.value % 10000000000000000);\r\n\r\n        //Update client seed\r\n        clientSeed = sha3(clientSeed, msg.sender, msg.value);\r\n\r\n        // Save last block and its hash\r\n        lastBlock = block.number;\r\n\r\n        // Buy tickets\r\n        for (uint i = 0; i < ticketsBought; i++) {\r\n            tickets[numTickets++] = msg.sender;\r\n        }\r\n\r\n        if (beneficiary == \"ethereum-foundation\") {\r\n            ethereumFoundationTickets += ticketsBought;\r\n        }\r\n    }\r\n\r\n    function getRefund() notFinished {\r\n        // Can only refund when it's been 24 hours after the deadline\r\n        int timeLeft = int(chooseWinnerDeadline) - int(block.timestamp);\r\n        require(timeLeft < -86400);\r\n\r\n        uint amountToRefund = 0;\r\n        for (uint i = 0; i < numTickets; i++) {\r\n            if(tickets[i] == msg.sender) {\r\n                amountToRefund += 10000000000000000;\r\n                tickets[i] = 0x0;\r\n            }\r\n        }\r\n\r\n        msg.sender.transfer(amountToRefund);\r\n    }\r\n\r\n    function () payable notFinished {\r\n        buyTickets(\"owner\");\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"bytes32\"}],\"name\":\"buyTickets\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numTickets\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"seed\",\"type\":\"bytes32\"}],\"name\":\"chooseWinner\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tickets\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"serverSeedHash\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"clientSeed\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethereumFoundationTickets\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getRefund\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"winner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"chooseWinnerDeadline\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRaffleTimeLeft\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"secretHash\",\"type\":\"bytes32\"}],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"value\",\"type\":\"address\"}],\"name\":\"Winner\",\"type\":\"event\"}]","ContractName":"RaffleStrangeLoop","CompilerVersion":"v0.4.15+commit.bbb8e64f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"f238398e9a50ea482f966f599538db949f1fd49b2819f469897eaffbf7f80860","Library":"","SwarmSource":"bzzr://b738c66fd827f940ef3cfafbe4a04dea4edeb4ffcdadb9cd42c22a5cc2499a2c"}]}