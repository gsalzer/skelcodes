{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^ 0.4.18;\r\n\r\ncontract ERC20 {\r\n  uint256 public totalsupply;\r\n  function totalSupply() public constant returns(uint256 _totalSupply);\r\n  function balanceOf(address who) public constant returns (uint256);\r\n  function allowance(address owner, address spender) public constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool ok);\r\n  function approve(address spender, uint256 value) public returns (bool ok);\r\n  function transfer(address to, uint256 value) public returns (bool ok);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) pure internal returns(uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) pure internal returns(uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) pure internal returns(uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) pure internal returns(uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract FreedomStreaming is ERC20\r\n{\r\n    \r\n    using SafeMath\r\n    for uint256;\r\n    \r\n    string public constant name = \"Freedom Token\";\r\n\r\n    string public constant symbol = \"FDM\";\r\n\r\n    uint8 public constant decimals = 18;\r\n\r\n    uint256 public constant totalsupply = 1000000000000000000000000000;\r\n      \r\n    mapping(address => uint256) balances;\r\n\r\n    mapping(address => mapping(address => uint256)) allowed;\r\n    \r\n    address owner = 0x963cb5e7190FA77435AFe61FBb8C2dDB073e42c2;\r\n    \r\n    event supply(uint256 bnumber);\r\n\r\n    event events(string _name);\r\n\r\n    uint256 _price_tokn;\r\n    \r\n    bool stopped = true;\r\n\r\n    uint256 no_of_tokens;\r\n    \r\n    enum Stages {\r\n        NOTSTARTED,\r\n        PREICO,\r\n        ICO,\r\n        PAUSED,\r\n        ENDED\r\n    }\r\n    \r\n    Stages public stage;\r\n    \r\n    bool ico_ended = false;\r\n\r\n    modifier onlyOwner() {\r\n        if (msg.sender != owner) {\r\n            revert();\r\n        }\r\n        _;\r\n    }\r\n   \r\n    function FreedomStreaming() public\r\n    {\r\n        balances[owner] = 350000000000000000000000000;      \r\n        balances[address(this)] = 650000000000000000000000000;\r\n        stage = Stages.NOTSTARTED;\r\n    }\r\n    \r\n    function () public payable\r\n    {\r\n        if(!ico_ended && !stopped && msg.value >= 0.01 ether)\r\n        {\r\n            no_of_tokens = SafeMath.mul(msg.value , _price_tokn); \r\n            if(balances[address(this)] >= no_of_tokens )\r\n            {\r\n        \r\n              balances[address(this)] =SafeMath.sub(balances[address(this)],no_of_tokens);\r\n              balances[msg.sender] = SafeMath.add(balances[msg.sender],no_of_tokens);\r\n              Transfer(address(this), msg.sender, no_of_tokens);\r\n              owner.transfer(this.balance); \r\n   \r\n            }\r\n            else\r\n            {\r\n                revert();\r\n            }\r\n        \r\n        }\r\n      else\r\n       {\r\n           revert();\r\n       }\r\n   }\r\n    \r\n    function totalSupply() public constant returns(uint256) {\r\n       return totalsupply;\r\n    }\r\n    \r\n     function balanceOf(address sender) public constant returns(uint256 balance) {\r\n        return balances[sender];\r\n    }\r\n\r\n    \r\n    function transfer(address _to, uint256 _amount) public returns(bool success) {\r\n        if (balances[msg.sender] >= _amount &&\r\n            _amount > 0 &&\r\n            balances[_to] + _amount > balances[_to]) {\r\n         \r\n            balances[msg.sender] = SafeMath.sub(balances[msg.sender],_amount);\r\n            balances[_to] = SafeMath.add(balances[_to],_amount);\r\n            Transfer(msg.sender, _to, _amount);\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n    \r\n    \r\n    function pauseICOs() external onlyOwner {\r\n        stage = Stages.PAUSED;\r\n        stopped = true;\r\n    }\r\n\r\n    \r\n    function Start_Resume_ICO() external onlyOwner {\r\n        stage = Stages.ICO;\r\n        stopped = false;\r\n        _price_tokn = 10000;\r\n    }\r\n    \r\n    \r\n     function Start_Resume_PreICO() external onlyOwner\r\n     {\r\n         stage = Stages.PREICO;\r\n         stopped = false;\r\n         _price_tokn = 12000;\r\n     }\r\n     \r\n     function end_ICOs() external onlyOwner\r\n     {\r\n         ico_ended = true;\r\n         stage = Stages.ENDED;\r\n     }\r\n    \r\n   \r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _amount\r\n    ) public returns(bool success) {\r\n\r\n            require(balances[_from] >= _amount && allowed[_from][msg.sender] >= _amount);    \r\n                \r\n            balances[_from] = SafeMath.sub(balances[_from],_amount);\r\n            allowed[_from][msg.sender] = SafeMath.sub(allowed[_from][msg.sender], _amount);\r\n            balances[_to] = SafeMath.add(balances[_to], _amount);\r\n            Transfer(_from, _to, _amount);\r\n            \r\n            return true;\r\n       \r\n    }\r\n\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n\r\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n    function allowance(address _owner, address _spender) public constant returns(uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    function drain() external onlyOwner {\r\n        owner.transfer(this.balance);\r\n    }\r\n\r\n    function drainToken() external onlyOwner\r\n    {\r\n        require(ico_ended);\r\n        \r\n        balances[owner] = SafeMath.add(balances[owner],balances[address(this)]);\r\n        Transfer(address(this), owner, balances[address(this)]);\r\n        balances[address(this)] = 0;\r\n    }\r\n    \r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"Start_Resume_ICO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"end_ICOs\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"drainToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalsupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"drain\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pauseICOs\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"Start_Resume_PreICO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"bnumber\",\"type\":\"uint256\"}],\"name\":\"supply\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"events\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"FreedomStreaming","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://5ee7ea503355f3fde92b5c7e1bbb618e01137b013a0322b59d0091a2d8d75c53"}]}