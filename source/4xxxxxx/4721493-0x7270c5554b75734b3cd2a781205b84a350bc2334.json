{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n// File: contracts/Core/Manageable.sol\r\n\r\ncontract Manageable {\r\n  address public manager;\r\n\r\n\r\n  /**\r\n   * @dev Create a new instance of the Manageable contract.\r\n   * @param _manager address\r\n   */\r\n  function Manageable(address _manager) public {\r\n    require(_manager != 0x0);\r\n    manager = _manager;\r\n  }\r\n\r\n  /**\r\n   * @dev Checks if the msg.sender is the manager.\r\n   */\r\n  modifier onlyManager() { \r\n    require (msg.sender == manager && manager != 0x0);\r\n    _; \r\n  }\r\n}\r\n\r\n// File: contracts/Core/Activatable.sol\r\n\r\ncontract Activatable is Manageable {\r\n  event ActivatedContract(uint256 activatedAt);\r\n  event DeactivatedContract(uint256 deactivatedAt);\r\n\r\n  bool public active;\r\n  \r\n  /**\r\n   * @dev Check if the contract is active. \r\n   */\r\n  modifier isActive() {\r\n    require(active);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Check if the contract is not active. \r\n   */\r\n  modifier isNotActive() {\r\n    require(!active);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Activate the contract.\r\n   */\r\n  function activate() public onlyManager isNotActive {\r\n    // Set the flag to true.\r\n    active = true;\r\n\r\n    // Trigger event.\r\n    ActivatedContract(now);\r\n  }\r\n\r\n  /**\r\n   * @dev Deactiate the contract.\r\n   */\r\n  function deactivate() public onlyManager isActive {\r\n    // Set the flag to false.\r\n    active = false;\r\n\r\n    // Trigger event.\r\n    DeactivatedContract(now);\r\n  }\r\n}\r\n\r\n// File: contracts/Core/Versionable.sol\r\n\r\ncontract Versionable is Activatable {\r\n  string public name;\r\n  string public version;\r\n  uint256 public identifier;\r\n  uint256 public createdAt;\r\n\r\n  /**\r\n   * @dev Create a new intance of a Versionable contract. Sets the\r\n   *      createdAt unix timestamp to current block timestamp.\r\n   */\r\n  function Versionable (string _name, string _version, uint256 _identifier) public {\r\n    require (bytes(_name).length != 0x0 && bytes(_version).length != 0x0 && _identifier > 0);\r\n\r\n    // Set variables.\r\n    name = _name;\r\n    version = _version;\r\n    identifier = _identifier;\r\n    createdAt = now;\r\n  }\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/Management/ContractManagementSystem.sol\r\n\r\ncontract ContractManagementSystem is Ownable {\r\n  event UpgradedContract (uint256 contractIdentifier, address indexed oldContractAddress, address indexed newContractAddress);\r\n  event RollbackedContract (uint256 contractIdentifier, address indexed fromContractAddress, address indexed toContractAddress);\r\n\r\n  mapping (uint256 => mapping (address => bool)) public managedContracts;\r\n  mapping (uint256 => address) public activeContracts;\r\n  mapping (uint256 => bool) migrationLocks;\r\n\r\n  /**\r\n   * @dev Ensure no locks are in place for the given contract identifier.\r\n   * @param contractIdentifier uint256\r\n   */\r\n  modifier onlyWithoutLock(uint256 contractIdentifier) {\r\n    require(!migrationLocks[contractIdentifier]);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev    Get the address of the active contract for the given identifier.\r\n   * @param  contractIdentifier uint256\r\n   * @return address\r\n   */\r\n  function getActiveContractAddress(uint256 contractIdentifier)\r\n    public\r\n    constant\r\n    onlyWithoutLock(contractIdentifier)\r\n    returns (address activeContract)\r\n  {\r\n    // Validate the function arguments.\r\n    require(contractIdentifier != 0x0);\r\n    \r\n    // Get the active contract for the given identifier.\r\n    activeContract = activeContracts[contractIdentifier];\r\n\r\n    // Ensure the address is set and the contract is active.\r\n    require(activeContract != 0x0 && Activatable(activeContract).active());\r\n  }\r\n\r\n  /**\r\n   * @dev    Check if the contract for the given address is managed.\r\n   * @param  contractIdentifier uint256\r\n   * @param  contractAddress    address\r\n   * @return bool\r\n   */\r\n  function existsManagedContract(uint256 contractIdentifier, address contractAddress)\r\n    public\r\n    constant\r\n    returns (bool)\r\n  {\r\n    // Validate the function arguments.\r\n    require(contractIdentifier != 0x0 && contractAddress != 0x0);\r\n\r\n    return managedContracts[contractIdentifier][contractAddress];\r\n  }\r\n\r\n  /**\r\n   * @dev    Upgrade the contract for the given contract identifier to a newer version.\r\n   * @dev    investigate potential race condition\r\n   * @param  contractIdentifier uint256\r\n   * @param  newContractAddress address\r\n   */\r\n  function upgradeContract(uint256 contractIdentifier, address newContractAddress)\r\n    public\r\n    onlyOwner\r\n    onlyWithoutLock(contractIdentifier)\r\n  {\r\n    // Validate the function arguments.\r\n    require(contractIdentifier != 0x0 && newContractAddress != 0x0);\r\n    \r\n    // Lock the contractIdentifier.\r\n    migrationLocks[contractIdentifier] = true;\r\n\r\n    // New contract should not be active.\r\n    require(!Activatable(newContractAddress).active());\r\n\r\n    // New contract should match the given contractIdentifier.\r\n    require(contractIdentifier == Versionable(newContractAddress).identifier());\r\n\r\n    // Ensure the new contract is not already managed.\r\n    require (!existsManagedContract(contractIdentifier, newContractAddress));\r\n\r\n    // Get the old contract address.\r\n    address oldContractAddress = activeContracts[contractIdentifier];\r\n\r\n    // Ensure the old contract is not deactivated already.\r\n    if (oldContractAddress != 0x0) {\r\n      require(Activatable(oldContractAddress).active());\r\n    }\r\n\r\n    // Swap the states.\r\n    swapContractsStates(contractIdentifier, newContractAddress, oldContractAddress);\r\n\r\n    // Add it to the managed ones.\r\n    managedContracts[contractIdentifier][newContractAddress] = true;\r\n\r\n    // Unlock the contractIdentifier.\r\n    migrationLocks[contractIdentifier] = false;\r\n    \r\n    // Trigger event.\r\n    UpgradedContract(contractIdentifier, oldContractAddress, newContractAddress);\r\n  }\r\n\r\n  /**\r\n   * @dev Rollback the contract for the given contract identifier to the provided version.\r\n   * @dev investigate potential race condition\r\n   * @param  contractIdentifier uint256\r\n   * @param  toContractAddress  address\r\n   */\r\n  function rollbackContract(uint256 contractIdentifier, address toContractAddress)\r\n    public\r\n    onlyOwner\r\n    onlyWithoutLock(contractIdentifier)\r\n  {\r\n    // Validate the function arguments.\r\n    require(contractIdentifier != 0x0 && toContractAddress != 0x0);\r\n\r\n    // Lock the contractIdentifier.\r\n    migrationLocks[contractIdentifier] = true;\r\n\r\n    // To contract should match the given contractIdentifier.\r\n    require(contractIdentifier == Versionable(toContractAddress).identifier());\r\n\r\n    // Rollback \"to\" contract should be managed and inactive.\r\n    require (!Activatable(toContractAddress).active() && existsManagedContract(contractIdentifier, toContractAddress));\r\n\r\n    // Get the rollback \"from\" contract for given identifier. Will fail if there is no active contract.\r\n    address fromContractAddress = activeContracts[contractIdentifier];\r\n\r\n    // Swap the states.\r\n    swapContractsStates(contractIdentifier, toContractAddress, fromContractAddress);\r\n\r\n    // Unlock the contractIdentifier.\r\n    migrationLocks[contractIdentifier] = false;\r\n\r\n    // Trigger event.\r\n    RollbackedContract(contractIdentifier, fromContractAddress, toContractAddress);\r\n  }\r\n  \r\n  /**\r\n   * @dev Swap the given contracts states as defined:\r\n   *        - newContractAddress will be activated\r\n   *        - oldContractAddress will be deactived\r\n   * @param  contractIdentifier uint256\r\n   * @param  newContractAddress address\r\n   * @param  oldContractAddress address\r\n   */\r\n  function swapContractsStates(uint256 contractIdentifier, address newContractAddress, address oldContractAddress) internal {\r\n    // Deactivate the old contract.\r\n    if (oldContractAddress != 0x0) {\r\n      Activatable(oldContractAddress).deactivate();\r\n    }\r\n\r\n    // Activate the new contract.\r\n    Activatable(newContractAddress).activate();\r\n\r\n     // Set the new contract as the active one for the given identifier.\r\n    activeContracts[contractIdentifier] = newContractAddress;\r\n  }\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/ERC20Basic.sol\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// File: contracts/Token/SwissCryptoExchangeToken.sol\r\n\r\n/**\r\n * @title SwissCryptoExchange Standard ERC20 compatible token\r\n *\r\n * @dev Implementation of the SwissCryptoExchange company shares.\r\n * @dev Based on code by OpenZeppelin: https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts/token/StandardToken.sol\r\n */\r\ncontract SwissCryptoExchangeToken is ERC20Basic, Versionable {\r\n  event Mint(address indexed to, uint256 amount);\r\n\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  string public constant symbol = \"SCX\";\r\n  uint8 public constant decimals = 0;\r\n\r\n  uint256 internal constant COMPANY_CONTRACT_ID = 101;\r\n\r\n  /**\r\n   * Create a new instance of the SwissCryptoExchangeToken contract.\r\n   * @param initialShareholderAddress address \r\n   * @param initialAmount             uint256 \r\n   */\r\n  function SwissCryptoExchangeToken (address initialShareholderAddress, uint256 initialAmount, address _manager)\r\n    public\r\n    Manageable (_manager)\r\n    Versionable (\"SwissCryptoExchangeToken\", \"1.0.0\", 1)\r\n  {\r\n    require(initialAmount > 0);\r\n    require(initialShareholderAddress != 0x0);\r\n\r\n    balances[initialShareholderAddress] = initialAmount;\r\n    totalSupply = initialAmount;\r\n  }\r\n\r\n  /**\r\n   * @dev Esnure the msg.sender is the company contract.\r\n   */\r\n  modifier onlyCompany() {\r\n    require (msg.sender == ContractManagementSystem(manager).getActiveContractAddress(COMPANY_CONTRACT_ID));\r\n    _;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n  /**\r\n  * @dev Transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public isActive onlyCompany returns (bool) {\r\n    require(_to != 0x0);\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another.\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public isActive onlyCompany returns (bool) {\r\n    require(_to != 0x0);\r\n    require(_value <= balances[_from]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(uint256 _amount) isActive onlyCompany public returns (bool) {\r\n    // The receiver of the minted tokens will be the company contract.\r\n    address _companyAddress = ContractManagementSystem(manager).getActiveContractAddress(COMPANY_CONTRACT_ID);\r\n    totalSupply = totalSupply.add(_amount);\r\n    balances[_companyAddress] = balances[_companyAddress].add(_amount);\r\n    Mint(_companyAddress, _amount);\r\n    Transfer(0x0, _companyAddress, _amount);\r\n    return true;\r\n  }\r\n}\r\n\r\n// File: contracts/Company/BaseCompany.sol\r\n\r\ncontract BaseCompany is Versionable {\r\n  using SafeMath for uint256;\r\n  \r\n  uint256 internal constant TOKEN_CONTRACT_ID = 1;\r\n\r\n  /**\r\n   * @dev Create a new instance of the company contract.\r\n   * @param _name       string\r\n   * @param _version    string\r\n   * @param _identifier uint256\r\n   * @param _manager    address\r\n   */\r\n  function BaseCompany(string _name, string _version, uint256 _identifier, address _manager) public Versionable (_name, _version, _identifier) Manageable(_manager) {}\r\n\r\n  /**\r\n   * @dev Get the amount of shares that a shareholder owns in percentage\r\n   *      relative to the total number of shares.\r\n   * @param  shareholder address\r\n   * @return uint256\r\n   */\r\n  function getSharesPercentage(address shareholder) public constant returns (uint256) {\r\n    uint256 totalSharesAmount = token().totalSupply();\r\n    uint256 ownedShares = token().balanceOf(shareholder);\r\n    return ownedShares.mul(100).div(totalSharesAmount);\r\n  }\r\n\r\n  /**\r\n   * @dev Get the latest token contract address.\r\n   * @return address\r\n   */\r\n  function tokenAddress() public constant returns (address) {\r\n    return ContractManagementSystem(manager).getActiveContractAddress(TOKEN_CONTRACT_ID);\r\n  }\r\n\r\n  /**\r\n   * @dev Get the latest reference to the token.\r\n   * @return SwissCryptoExchangeToken\r\n   */\r\n  function token() public constant returns (SwissCryptoExchangeToken) {\r\n    return SwissCryptoExchangeToken(tokenAddress());\r\n  }\r\n\r\n  /**\r\n   * @dev Check if the provided address is a company shareholder.\r\n   * @param _addr address\r\n   * @return bool\r\n   */\r\n  function isShareholder(address _addr) public constant returns (bool) {\r\n    return token().balanceOf(_addr) > 0 && _addr != address(this);\r\n  }\r\n    \r\n  /**\r\n   * @dev Check if the given address is a majority company shareholder.\r\n   * @param _addr address\r\n   * @return bool\r\n   */\r\n  function isMajorityShareholder(address _addr) public constant returns (bool) {\r\n    return (getSharesPercentage(_addr) > 50);\r\n  }\r\n}\r\n\r\n// File: contracts/Company/SwissCryptoExchangeCompany.sol\r\n\r\ncontract SwissCryptoExchangeCompany is BaseCompany {\r\n  event ProcessedInvestment(address indexed investor, uint256 weiAmount, uint256 shares);\r\n  event SaleCompleted(address indexed beneficiary, uint256 weiAmount, uint256 shares);\r\n  event SaleEnded(uint256 endedAt);\r\n  event SaleAborted(uint256 abortedAt);\r\n\r\n  using SafeMath for uint256;\r\n\r\n  Sale public currentSale;\r\n\r\n  // Definition of a sale.\r\n  struct Sale {\r\n    address creator;\r\n    address beneficiary;\r\n    address investor;\r\n    address shareholder;\r\n    uint256 rate;\r\n    uint256 weiRaised;\r\n    uint256 sharesSold;\r\n    uint256 sharesCap;\r\n    bool ended;\r\n    bool exists;\r\n  }\r\n  \r\n  /**\r\n   * @dev Create a new instance of the company contract.\r\n   * @param _manager address\r\n   */\r\n  function SwissCryptoExchangeCompany(address _manager) public BaseCompany(\"SwissCryptoExchangeCompany\", \"1.0.1\", 101, _manager) {}\r\n\r\n  /**\r\n   * @dev Ensure the msg.sender is an shareholder of the company.\r\n   */\r\n  modifier onlyShareholder() {\r\n    require(isShareholder(msg.sender));\r\n    _; \r\n  }\r\n  \r\n  /**\r\n   * @dev Ensure the msg.sender is has over 50% of the company shares.\r\n   */\r\n  modifier onlyMajority() {\r\n    require(isMajorityShareholder(msg.sender));\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Ensure the msg.sender is thesale creator.\r\n   */\r\n  modifier onlySaleCreator() {\r\n    require(msg.sender == currentSale.creator);\r\n    _; \r\n  }\r\n  \r\n  /**\r\n   * @dev Ensure there is no sale in progress.\r\n   */\r\n  modifier onlyWhenNotSelling() { \r\n    require(!currentSale.exists);\r\n    _; \r\n  }\r\n  \r\n  /**\r\n   * @dev Ensure there is a sale in progress.\r\n   */\r\n  modifier onlyWhenSelling() { \r\n    require(currentSale.exists);\r\n    _; \r\n  }\r\n\r\n  \r\n  /**\r\n   * @dev Handle an incoming ether transfer.\r\n   */\r\n  function ()\r\n    public\r\n    payable\r\n    isActive\r\n    onlyWhenSelling\r\n  {\r\n    // Validate the purchase.\r\n    require(msg.sender == currentSale.investor && msg.value > 0);\r\n\r\n    // Forward the call to the Sale contract.\r\n    processPayment();\r\n  }\r\n\r\n  /**\r\n   * @dev Initialize a new sale.\r\n   * @param rate         uint256\r\n   * @param sharesCap    uint256\r\n   * @param beneficiary  address \r\n   * @param investor     address \r\n   */\r\n  function initializeNewSale(\r\n    uint256 rate,\r\n    uint256 sharesCap,\r\n    address beneficiary,\r\n    address investor\r\n  )\r\n    public\r\n    isActive\r\n    onlyMajority\r\n    onlyWhenNotSelling\r\n  {\r\n    // Validate the parameters.\r\n    require(rate > 0);\r\n    require(sharesCap > 0);\r\n    require(beneficiary != 0x0);\r\n    require(investor != 0x0);\r\n    require(token().balanceOf(msg.sender) >= sharesCap);\r\n\r\n    // Set sale properties.\r\n    currentSale.creator = msg.sender;\r\n    currentSale.rate = rate;\r\n    currentSale.sharesCap = sharesCap;\r\n    currentSale.beneficiary = beneficiary;\r\n    currentSale.investor = investor;\r\n    currentSale.shareholder = msg.sender;\r\n    currentSale.weiRaised = 0;\r\n    currentSale.sharesSold = 0;\r\n    currentSale.ended = false;\r\n    currentSale.exists = true;\r\n\r\n    // Transfer the funds to the company.\r\n    require(token().transferFrom(msg.sender, address(this), sharesCap));\r\n\r\n    // Enforce that one shareholder will remain majority.\r\n    require(isMajorityShareholder(msg.sender));\r\n  }\r\n\r\n  /**\r\n   * @dev Process the payment from the investor.\r\n   */\r\n  function processPayment()\r\n    private\r\n  {\r\n    address investor = currentSale.investor;\r\n    uint256 excessWei = 0;\r\n    uint256 sharesSold = currentSale.sharesSold;\r\n    uint256 sharesCap = currentSale.sharesCap;\r\n    uint256 rate = currentSale.rate;\r\n    uint256 weiAmount = msg.value;\r\n    uint256 shares = weiAmount.mul(rate).div(1 ether);\r\n\r\n    // If the after this investment the cap will be reached\r\n    // the sale will end and the excess wei will be sent\r\n    // back to the investor. \r\n    if (sharesSold.add(shares) > sharesCap) {\r\n      excessWei = sharesSold.add(shares).sub(sharesCap).mul(1 ether).div(rate);\r\n      weiAmount = weiAmount.sub(excessWei);\r\n      shares = sharesCap.sub(sharesSold);\r\n    } else {\r\n      //we care of investors money\r\n      excessWei = weiAmount.sub(shares.mul(1 ether).div(rate));\r\n      weiAmount = weiAmount.sub(excessWei);\r\n    }\r\n\r\n    // update shares\r\n    currentSale.sharesSold = sharesSold.add(shares);\r\n\r\n    // update weiRaised.\r\n    currentSale.weiRaised = currentSale.weiRaised.add(weiAmount);\r\n\r\n    //close sale\r\n    if(currentSale.sharesSold == sharesCap) {\r\n      currentSale.ended = true;\r\n      SaleEnded(now);\r\n    }\r\n\r\n    // Send tokens to the investor.\r\n    require(token().transfer(investor, shares));\r\n\r\n    // Send excess back to the investor.\r\n    if (excessWei > 0) {\r\n      investor.transfer(excessWei);\r\n    }\r\n\r\n    // Trigger event.\r\n    ProcessedInvestment(investor, weiAmount, shares);\r\n  }\r\n\r\n  /**\r\n   * @dev Finalize the in progress sale.\r\n   */\r\n  function finalizeSale()\r\n    public\r\n    isActive\r\n    onlySaleCreator\r\n    onlyWhenSelling\r\n  {\r\n    require(currentSale.ended);\r\n    require(currentSale.sharesSold == currentSale.sharesCap);\r\n\r\n    // Send wei to the beneficiary.\r\n    currentSale.beneficiary.transfer(currentSale.weiRaised); \r\n\r\n    // Trigger event.\r\n    SaleCompleted(currentSale.beneficiary, currentSale.weiRaised, currentSale.sharesSold);\r\n    \r\n    // Reset sale.\r\n    currentSale.exists = false;\r\n  }\r\n\r\n  /**\r\n   * @dev Abort the current sale.\r\n   */\r\n  function abortSale()\r\n    public\r\n    isActive\r\n    onlySaleCreator\r\n    onlyWhenSelling\r\n  {\r\n    require(!currentSale.ended);\r\n\r\n    address investor = currentSale.investor;\r\n    address shareholder = currentSale.shareholder;\r\n    address company = address(this);\r\n\r\n    // Send wei back to the investor.\r\n    investor.transfer(currentSale.weiRaised);\r\n\r\n    // Send tokens back from the investor to company.\r\n    require(token().transferFrom(investor, company, currentSale.sharesSold));\r\n\r\n    // Send tokens back from the company to the shareholder.\r\n    require(token().transferFrom(company, shareholder, currentSale.sharesCap));\r\n\r\n    // Trigger event.\r\n    SaleAborted(now);\r\n\r\n    // Reset sale state.\r\n    currentSale.exists = false;\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"active\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"abortSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"activate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deactivate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalizeSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"identifier\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"isMajorityShareholder\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentSale\",\"outputs\":[{\"name\":\"creator\",\"type\":\"address\"},{\"name\":\"beneficiary\",\"type\":\"address\"},{\"name\":\"investor\",\"type\":\"address\"},{\"name\":\"shareholder\",\"type\":\"address\"},{\"name\":\"rate\",\"type\":\"uint256\"},{\"name\":\"weiRaised\",\"type\":\"uint256\"},{\"name\":\"sharesSold\",\"type\":\"uint256\"},{\"name\":\"sharesCap\",\"type\":\"uint256\"},{\"name\":\"ended\",\"type\":\"bool\"},{\"name\":\"exists\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"isShareholder\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"createdAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"shareholder\",\"type\":\"address\"}],\"name\":\"getSharesPercentage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"rate\",\"type\":\"uint256\"},{\"name\":\"sharesCap\",\"type\":\"uint256\"},{\"name\":\"beneficiary\",\"type\":\"address\"},{\"name\":\"investor\",\"type\":\"address\"}],\"name\":\"initializeNewSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_manager\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"weiAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"ProcessedInvestment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"weiAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"SaleCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"endedAt\",\"type\":\"uint256\"}],\"name\":\"SaleEnded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"abortedAt\",\"type\":\"uint256\"}],\"name\":\"SaleAborted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"activatedAt\",\"type\":\"uint256\"}],\"name\":\"ActivatedContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"deactivatedAt\",\"type\":\"uint256\"}],\"name\":\"DeactivatedContract\",\"type\":\"event\"}]","ContractName":"SwissCryptoExchangeCompany","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000013f825ab761d35f796f36fec7339efe11377769b","Library":"","SwarmSource":"bzzr://614da5a3d849f7fdae97cb252ef40e76e0f4fcd31d0402da45290d204ae0cf67"}]}