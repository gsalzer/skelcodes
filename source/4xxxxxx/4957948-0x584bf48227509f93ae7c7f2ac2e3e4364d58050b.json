{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13;\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\ncontract BeatTokenCrowdsale is Ownable {\r\n\r\n    enum Stages {\r\n        Deployed,\r\n        PreIco,\r\n        IcoPhase1,\r\n        IcoPhase2,\r\n        IcoPhase3,\r\n        IcoEnded,\r\n        Finalized\r\n    }\r\n    Stages public stage;\r\n\r\n    using SafeMath for uint256;\r\n\r\n    BeatToken public token;\r\n\r\n    uint256 public contractStartTime;\r\n    uint256 public preIcoEndTime;\r\n    uint256 public icoPhase1EndTime;\r\n    uint256 public icoPhase2EndTime;\r\n    uint256 public icoPhase3EndTime;\r\n    uint256 public contractEndTime;\r\n\r\n    address public ethTeamWallet;\r\n    address public beatTeamWallet;\r\n\r\n    uint256 public ethWeiRaised;\r\n    mapping(address => uint256) public balanceOf;\r\n\r\n    uint public constant PRE_ICO_PERIOD = 28 days;\r\n    uint public constant ICO_PHASE1_PERIOD = 28 days;\r\n    uint public constant ICO_PHASE2_PERIOD = 28 days;\r\n    uint public constant ICO_PHASE3_PERIOD = 28 days;\r\n\r\n    uint256 public constant PRE_ICO_BONUS_PERCENTAGE = 100;\r\n    uint256 public constant ICO_PHASE1_BONUS_PERCENTAGE = 75;\r\n    uint256 public constant ICO_PHASE2_BONUS_PERCENTAGE = 50;\r\n    uint256 public constant ICO_PHASE3_BONUS_PERCENTAGE = 25;\r\n\r\n    // 5.0 bn (2.5 bn regular + 2.5 bn bonus)\r\n    uint256 public constant PRE_ICO_AMOUNT = 5000 * (10 ** 6) * (10 ** 18);\r\n    // 7.0 bn (4.0 bn regular + 3.0 bn bonus)\r\n    uint256 public constant ICO_PHASE1_AMOUNT = 7000 * (10 ** 6) * (10 ** 18);\r\n    // 10.5 bn (7.0 bn regular + 3.5 bn bonus)\r\n    uint256 public constant ICO_PHASE2_AMOUNT = 10500 * (10 ** 6) * (10 ** 18);\r\n    // 11.875 bn (9.5 bn regular + 2.375 bn bonus)\r\n    uint256 public constant ICO_PHASE3_AMOUNT = 11875 * (10 ** 6) * (10 ** 18);\r\n\r\n    uint256 public constant PRE_ICO_LIMIT = PRE_ICO_AMOUNT;\r\n    uint256 public constant ICO_PHASE1_LIMIT = PRE_ICO_LIMIT + ICO_PHASE1_AMOUNT;\r\n    uint256 public constant ICO_PHASE2_LIMIT = ICO_PHASE1_LIMIT + ICO_PHASE2_AMOUNT;\r\n    uint256 public constant ICO_PHASE3_LIMIT = ICO_PHASE2_LIMIT + ICO_PHASE3_AMOUNT;\r\n\r\n    // 230 bn\r\n    uint256 public constant HARD_CAP = 230 * (10 ** 9) * (10 ** 18);\r\n\r\n    uint256 public ethPriceInEuroCent;\r\n\r\n    event BeatTokenPurchased(address indexed purchaser, address indexed beneficiary, uint256 ethWeiAmount, uint256 beatWeiAmount);\r\n    event BeatTokenEthPriceChanged(uint256 newPrice);\r\n    event BeatTokenPreIcoStarted();\r\n    event BeatTokenIcoPhase1Started();\r\n    event BeatTokenIcoPhase2Started();\r\n    event BeatTokenIcoPhase3Started();\r\n    event BeatTokenIcoFinalized();\r\n\r\n    function BeatTokenCrowdsale(address _ethTeamWallet, address _beatTeamWallet) public {\r\n        require(_ethTeamWallet != address(0));\r\n        require(_beatTeamWallet != address(0));\r\n\r\n        token = new BeatToken(HARD_CAP);\r\n        stage = Stages.Deployed;\r\n        ethTeamWallet = _ethTeamWallet;\r\n        beatTeamWallet = _beatTeamWallet;\r\n        ethPriceInEuroCent = 0;\r\n\r\n        contractStartTime = 0;\r\n        preIcoEndTime = 0;\r\n        icoPhase1EndTime = 0;\r\n        icoPhase2EndTime = 0;\r\n        icoPhase3EndTime = 0;\r\n        contractEndTime = 0;\r\n    }\r\n\r\n    function setEtherPriceInEuroCent(uint256 _ethPriceInEuroCent) onlyOwner public {\r\n        ethPriceInEuroCent = _ethPriceInEuroCent;\r\n        BeatTokenEthPriceChanged(_ethPriceInEuroCent);\r\n    }\r\n\r\n    function start() onlyOwner public {\r\n        require(stage == Stages.Deployed);\r\n        require(ethPriceInEuroCent > 0);\r\n\r\n        contractStartTime = now;\r\n        BeatTokenPreIcoStarted();\r\n\r\n        stage = Stages.PreIco;\r\n    }\r\n\r\n    function finalize() onlyOwner public {\r\n        require(stage != Stages.Deployed);\r\n        require(stage != Stages.Finalized);\r\n\r\n        if (preIcoEndTime == 0) {\r\n            preIcoEndTime = now;\r\n        }\r\n        if (icoPhase1EndTime == 0) {\r\n            icoPhase1EndTime = now;\r\n        }\r\n        if (icoPhase2EndTime == 0) {\r\n            icoPhase2EndTime = now;\r\n        }\r\n        if (icoPhase3EndTime == 0) {\r\n            icoPhase3EndTime = now;\r\n        }\r\n        if (contractEndTime == 0) {\r\n            contractEndTime = now;\r\n        }\r\n\r\n        uint256 unsoldTokens = HARD_CAP - token.getTotalSupply();\r\n        token.mint(beatTeamWallet, unsoldTokens);\r\n\r\n        BeatTokenIcoFinalized();\r\n\r\n        stage = Stages.Finalized;\r\n    }\r\n\r\n    function() payable public {\r\n        buyTokens(msg.sender);\r\n    }\r\n\r\n    function buyTokens(address beneficiary) payable public {\r\n        require(isWithinValidIcoPhase());\r\n        require(ethPriceInEuroCent > 0);\r\n        require(beneficiary != address(0));\r\n        require(msg.value != 0);\r\n\r\n        uint256 ethWeiAmount = msg.value;\r\n        // calculate BEAT wei amount to be created\r\n        uint256 beatWeiAmount = calculateBeatWeiAmount(ethWeiAmount);\r\n        require(isWithinTokenAllocLimit(beatWeiAmount));\r\n\r\n        determineCurrentStage(beatWeiAmount);\r\n\r\n        balanceOf[beneficiary] += beatWeiAmount;\r\n        ethWeiRaised += ethWeiAmount;\r\n\r\n        token.mint(beneficiary, beatWeiAmount);\r\n        BeatTokenPurchased(msg.sender, beneficiary, ethWeiAmount, beatWeiAmount);\r\n\r\n        ethTeamWallet.transfer(ethWeiAmount);\r\n    }\r\n\r\n    function isWithinValidIcoPhase() internal view returns (bool) {\r\n        return (stage == Stages.PreIco || stage == Stages.IcoPhase1 || stage == Stages.IcoPhase2 || stage == Stages.IcoPhase3);\r\n    }\r\n\r\n    function calculateBeatWeiAmount(uint256 ethWeiAmount) internal view returns (uint256) {\r\n        uint256 beatWeiAmount = ethWeiAmount.mul(ethPriceInEuroCent);\r\n        uint256 bonusPercentage = 0;\r\n\r\n        if (stage == Stages.PreIco) {\r\n            bonusPercentage = PRE_ICO_BONUS_PERCENTAGE;\r\n        } else if (stage == Stages.IcoPhase1) {\r\n            bonusPercentage = ICO_PHASE1_BONUS_PERCENTAGE;\r\n        } else if (stage == Stages.IcoPhase2) {\r\n            bonusPercentage = ICO_PHASE2_BONUS_PERCENTAGE;\r\n        } else if (stage == Stages.IcoPhase3) {\r\n            bonusPercentage = ICO_PHASE3_BONUS_PERCENTAGE;\r\n        }\r\n\r\n        // implement poor man's rounding by adding 50 because all integer divisions rounds DOWN to nearest integer\r\n        return beatWeiAmount.mul(100 + bonusPercentage).add(50).div(100);\r\n    }\r\n\r\n    function isWithinTokenAllocLimit(uint256 beatWeiAmount) internal view returns (bool) {\r\n        return token.getTotalSupply().add(beatWeiAmount) <= ICO_PHASE3_LIMIT;\r\n    }\r\n\r\n    function determineCurrentStage(uint256 beatWeiAmount) internal {\r\n        uint256 newTokenTotalSupply = token.getTotalSupply().add(beatWeiAmount);\r\n\r\n        if (stage == Stages.PreIco && (newTokenTotalSupply > PRE_ICO_LIMIT || now >= contractStartTime + PRE_ICO_PERIOD)) {\r\n            preIcoEndTime = now;\r\n            stage = Stages.IcoPhase1;\r\n            BeatTokenIcoPhase1Started();\r\n        } else if (stage == Stages.IcoPhase1 && (newTokenTotalSupply > ICO_PHASE1_LIMIT || now >= preIcoEndTime + ICO_PHASE1_PERIOD)) {\r\n            icoPhase1EndTime = now;\r\n            stage = Stages.IcoPhase2;\r\n            BeatTokenIcoPhase2Started();\r\n        } else if (stage == Stages.IcoPhase2 && (newTokenTotalSupply > ICO_PHASE2_LIMIT || now >= icoPhase1EndTime + ICO_PHASE2_PERIOD)) {\r\n            icoPhase2EndTime = now;\r\n            stage = Stages.IcoPhase3;\r\n            BeatTokenIcoPhase3Started();\r\n        } else if (stage == Stages.IcoPhase3 && (newTokenTotalSupply == ICO_PHASE3_LIMIT || now >= icoPhase2EndTime + ICO_PHASE3_PERIOD)) {\r\n            icoPhase3EndTime = now;\r\n            stage = Stages.IcoEnded;\r\n        }\r\n    }\r\n\r\n}\r\n\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\ncontract MintableToken is StandardToken, Ownable {\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\r\n    totalSupply = totalSupply.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    Mint(_to, _amount);\r\n    Transfer(address(0), _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() onlyOwner canMint public returns (bool) {\r\n    mintingFinished = true;\r\n    MintFinished();\r\n    return true;\r\n  }\r\n}\r\n\r\ncontract CappedToken is MintableToken {\r\n\r\n  uint256 public cap;\r\n\r\n  function CappedToken(uint256 _cap) public {\r\n    require(_cap > 0);\r\n    cap = _cap;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\r\n    require(totalSupply.add(_amount) <= cap);\r\n\r\n    return super.mint(_to, _amount);\r\n  }\r\n\r\n}\r\n\r\ncontract BeatToken is CappedToken {\r\n\r\n    string public constant name = \"BEAT Token\";\r\n    string public constant symbol = \"BEAT\";\r\n    uint8 public constant decimals = 18;\r\n\r\n    function BeatToken(uint256 _cap) CappedToken(_cap) public {\r\n    }\r\n\r\n    function getTotalSupply() public view returns (uint256) {\r\n        return totalSupply;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"ICO_PHASE1_BONUS_PERCENTAGE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ethPriceInEuroCent\",\"type\":\"uint256\"}],\"name\":\"setEtherPriceInEuroCent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethPriceInEuroCent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ICO_PHASE3_BONUS_PERCENTAGE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoPhase2EndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"HARD_CAP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ICO_PHASE2_BONUS_PERCENTAGE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethWeiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoPhase3EndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preIcoEndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRE_ICO_LIMIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ICO_PHASE2_LIMIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ICO_PHASE2_PERIOD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethTeamWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ICO_PHASE3_AMOUNT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractEndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRE_ICO_PERIOD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"start\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoPhase1EndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ICO_PHASE1_LIMIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ICO_PHASE3_PERIOD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ICO_PHASE1_PERIOD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ICO_PHASE2_AMOUNT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ICO_PHASE3_LIMIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRE_ICO_AMOUNT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beatTeamWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ICO_PHASE1_AMOUNT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRE_ICO_BONUS_PERCENTAGE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_ethTeamWallet\",\"type\":\"address\"},{\"name\":\"_beatTeamWallet\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ethWeiAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"beatWeiAmount\",\"type\":\"uint256\"}],\"name\":\"BeatTokenPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"BeatTokenEthPriceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"BeatTokenPreIcoStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"BeatTokenIcoPhase1Started\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"BeatTokenIcoPhase2Started\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"BeatTokenIcoPhase3Started\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"BeatTokenIcoFinalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"BeatTokenCrowdsale","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"400","ConstructorArguments":"000000000000000000000000d924669e34061b7b9d08b1cbb9c9a4cdf00bc10c000000000000000000000000ad1e5d8fc67a95f5270ac9eac50a433ba46a724c","Library":"","SwarmSource":"bzzr://191e8a57a9791ea3936879d2b554bf0dc3c49b589315fbe6a4cfb83049e5bd7f"}]}