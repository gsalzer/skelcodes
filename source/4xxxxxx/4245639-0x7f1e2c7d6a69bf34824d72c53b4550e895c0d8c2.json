{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^ 0.4 .8;\r\n\r\n\r\ncontract ERC20 {\r\n\r\n    function totalSupply() constant returns(uint total_Supply);\r\n\r\n    function balanceOf(address who) constant returns(uint256);\r\n\r\n    function allowance(address owner, address spender) constant returns(uint);\r\n\r\n    function transferFrom(address from, address to, uint value) returns(bool ok);\r\n\r\n    function approve(address spender, uint value) returns(bool ok);\r\n\r\n    function transfer(address to, uint value) returns(bool ok);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n\r\n}\r\n\r\ncontract blockoptions is ERC20\r\n\r\n{\r\n\r\n       /* Public variables of the token */\r\n      //To store name for token\r\n      string public name = \"blockoptions\";\r\n    \r\n      //To store symbol for token       \r\n      string public symbol = \"BOP\";\r\n    \r\n      //To store decimal places for token\r\n      uint public decimals = 8;    \r\n    \r\n      //To store current supply of BOP\r\n      uint public _totalSupply=20000000 * 10**decimals;\r\n      \r\n       uint pre_ico_start;\r\n       uint pre_ico_end;\r\n       uint ico_start;\r\n       uint ico_end;\r\n       mapping(uint => address) investor;\r\n       mapping(uint => uint) weireceived;\r\n       mapping(uint => uint) optsSent;\r\n      \r\n        event preico(uint counter,address investors,uint weiReceived,uint bopsent);\r\n        event ico(uint counter,address investors,uint weiReceived,uint bopsent);\r\n        uint counter=0;\r\n        uint profit_sent=0;\r\n        bool stopped = false;\r\n        \r\n      function blockoptions() payable{\r\n          owner = msg.sender;\r\n          balances[owner] = _totalSupply ; //to handle 8 decimal places\r\n          pre_ico_start = now;\r\n          pre_ico_end = pre_ico_start + 7 days;\r\n          \r\n        }\r\n      //map to store BOPT balance corresponding to address\r\n      mapping(address => uint) balances;\r\n    \r\n      //To store spender with allowed amount of BOPT to spend corresponding to BOPTs holder's account\r\n      mapping (address => mapping (address => uint)) allowed;\r\n    \r\n      //owner variable to store contract owner account\r\n      address public owner;\r\n      \r\n      //modifier to check transaction initiator is only owner\r\n       modifier onlyOwner() {\r\n        if (msg.sender != owner) \r\n        {\r\n            revert();\r\n        }\r\n        _;\r\n    }\r\n    \r\n      //ownership can be transferred to provided newOwner. Function can only be initiated by contract owner's account\r\n      function transferOwnership(address newOwner) onlyOwner {\r\n          balances[newOwner] = balances[owner];\r\n          balances[owner]=0;\r\n          owner = newOwner;\r\n      }\r\n\r\n        /**\r\n        * Multiplication with safety check\r\n        */\r\n        function Mul(uint a, uint b) internal returns (uint) {\r\n          uint c = a * b;\r\n          //check result should not be other wise until a=0\r\n          assert(a == 0 || c / a == b);\r\n          return c;\r\n        }\r\n    \r\n        /**\r\n        * Division with safety check\r\n        */\r\n        function Div(uint a, uint b) internal returns (uint) {\r\n          //overflow check; b must not be 0\r\n          assert(b > 0);\r\n          uint c = a / b;\r\n          assert(a == b * c + a % b);\r\n          return c;\r\n        }\r\n    \r\n        /**\r\n        * Subtraction with safety check\r\n        */\r\n        function Sub(uint a, uint b) internal returns (uint) {\r\n          //b must be greater that a as we need to store value in unsigned integer\r\n          assert(b <= a);\r\n          return a - b;\r\n        }\r\n    \r\n        /**\r\n        * Addition with safety check\r\n        */\r\n        function Add(uint a, uint b) internal returns (uint) {\r\n          uint c = a + b;\r\n          //result must be greater as a or b can not be negative\r\n          assert(c>=a && c>=b);\r\n          return c;\r\n        }\r\n    \r\n      /**\r\n        * assert used in different Math functions\r\n        */\r\n        function assert(bool assertion) internal {\r\n          if (!assertion) {\r\n            throw;\r\n          }\r\n        }\r\n    \r\n    //Implementation for transferring BOP to provided address \r\n      function transfer(address _to, uint _value) returns (bool){\r\n\r\n        uint check = balances[owner] - _value;\r\n        if(msg.sender == owner && now>=pre_ico_start && now<=pre_ico_end && check < 1900000000000000)\r\n        {\r\n            return false;\r\n        }\r\n        else if(msg.sender ==owner && now>=pre_ico_end && now<=(pre_ico_end + 16 days) && check < 1850000000000000)\r\n        {\r\n            return false;\r\n        }\r\n        else if(msg.sender == owner && check < 130000000000000 && now < ico_start + 180 days)\r\n        {\r\n            return false;\r\n        }\r\n        else if (msg.sender == owner && check < 80000000000000 && now < ico_start + 360 days)\r\n        {\r\n            return false;\r\n        }\r\n        else if (msg.sender == owner && check < 30000000000000 && now < ico_start + 540 days)\r\n        {\r\n            return false;\r\n        }\r\n        //Check provided BOP should not be 0\r\n       else if (_value > 0) {\r\n          //deduct BOP amount from transaction initiator\r\n          balances[msg.sender] = Sub(balances[msg.sender],_value);\r\n          //Add BOP to balace of target account\r\n          balances[_to] = Add(balances[_to],_value);\r\n          //Emit event for transferring BOP\r\n          Transfer(msg.sender, _to, _value);\r\n          return true;\r\n        }\r\n        else{\r\n          return false;\r\n        }\r\n      }\r\n      \r\n      //Transfer initiated by spender \r\n      function transferFrom(address _from, address _to, uint _value) returns (bool) {\r\n    \r\n        //Check provided BOP should not be 0\r\n        if (_value > 0) {\r\n          //Get amount of BOP for which spender is authorized\r\n          var _allowance = allowed[_from][msg.sender];\r\n          //Add amount of BOP in target account's balance\r\n          balances[_to] = Add(balances[_to], _value);\r\n          //Deduct BOPT amount from _from account\r\n          balances[_from] = Sub(balances[_from], _value);\r\n          //Deduct Authorized amount for spender\r\n          allowed[_from][msg.sender] = Sub(_allowance, _value);\r\n          //Emit event for Transfer\r\n          Transfer(_from, _to, _value);\r\n          return true;\r\n        }else{\r\n          return false;\r\n        }\r\n      }\r\n      \r\n      //Get BOP balance for provided address\r\n      function balanceOf(address _owner) constant returns (uint balance) {\r\n        return balances[_owner];\r\n      }\r\n      \r\n      //Add spender to authorize for spending specified amount of BOP \r\n      function approve(address _spender, uint _value) returns (bool) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        //Emit event for approval provided to spender\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n      }\r\n      \r\n      //Get BOP amount that spender can spend from provided owner's account \r\n      function allowance(address _owner, address _spender) constant returns (uint remaining) {\r\n        return allowed[_owner][_spender];\r\n      }\r\n      \r\n       /*\t\r\n       * Failsafe drain\r\n       */\r\n    \tfunction drain() onlyOwner {\r\n    \t\towner.send(this.balance);\r\n    \t}\r\n\t\r\n    \tfunction() payable \r\n    \t{   \r\n    \t    if(stopped && msg.sender != owner)\r\n    \t    revert();\r\n    \t     else if(msg.sender == owner)\r\n    \t    {\r\n    \t        profit_sent = msg.value;\r\n    \t    }\r\n    \t   else if(now>=pre_ico_start && now<=pre_ico_end)\r\n    \t    {\r\n    \t        uint check = balances[owner]-((400*msg.value)/10000000000);\r\n    \t        if(check >= 1900000000000000)\r\n                pre_ico(msg.sender,msg.value);\r\n    \t    }\r\n            else if (now>=ico_start && now<ico_end)\r\n            {\r\n                main_ico(msg.sender,msg.value);\r\n            }\r\n            \r\n        }\r\n       \r\n       function pre_ico(address sender, uint value)private\r\n       {\r\n          counter = counter+1;\r\n\t      investor[counter]=sender;\r\n          weireceived[counter]=value;\r\n          optsSent[counter] = (400*value)/10000000000;\r\n          balances[owner]=balances[owner]-optsSent[counter];\r\n          balances[investor[counter]]+=optsSent[counter];\r\n          preico(counter,investor[counter],weireceived[counter],optsSent[counter]);\r\n       }\r\n       \r\n       function  main_ico(address sender, uint value)private\r\n       {\r\n           if(now >= ico_start && now <= (ico_start + 7 days)) //20% discount on BOPT\r\n           {\r\n              counter = counter+1;\r\n    \t      investor[counter]=sender;\r\n              weireceived[counter]=value;\r\n              optsSent[counter] = (250*value)/10000000000;\r\n              balances[owner]=balances[owner]-optsSent[counter];\r\n              balances[investor[counter]]+=optsSent[counter];\r\n              ico(counter,investor[counter],weireceived[counter],optsSent[counter]);\r\n           }\r\n           else if (now >= (ico_start + 7 days) && now <= (ico_start + 14 days)) //10% discount on BOPT\r\n           {\r\n              counter = counter+1;\r\n    \t      investor[counter]=sender;\r\n              weireceived[counter]=value;\r\n              optsSent[counter] = (220*value)/10000000000;\r\n              balances[owner]=balances[owner]-optsSent[counter];\r\n              balances[investor[counter]]+=optsSent[counter];\r\n              ico(counter,investor[counter],weireceived[counter],optsSent[counter]);\r\n           }\r\n           else if (now >= (ico_start + 14 days) && now <= (ico_start + 31 days)) //no discount on BOPT\r\n           {\r\n              counter = counter+1;\r\n    \t      investor[counter]=sender;\r\n              weireceived[counter]=value;\r\n              optsSent[counter] = (200*value)/10000000000;\r\n              balances[owner]=balances[owner]-optsSent[counter];\r\n              balances[investor[counter]]+=optsSent[counter];\r\n              ico(counter,investor[counter],weireceived[counter],optsSent[counter]);\r\n           }\r\n       }\r\n       \r\n       function startICO()onlyOwner\r\n       {\r\n           ico_start = now;\r\n           ico_end=ico_start + 31 days;\r\n           pre_ico_start = 0;\r\n           pre_ico_end = 0;\r\n           \r\n       }\r\n       \r\n        function totalSupply() constant returns(uint256 totalSupply) \r\n        {\r\n        totalSupply = _totalSupply;\r\n        }\r\n      \r\n        function endICO()onlyOwner\r\n       {\r\n          stopped=true;\r\n          if(balances[owner] > 130000000000000)\r\n          {\r\n              uint burnedTokens = balances[owner]-130000000000000;\r\n           _totalSupply = _totalSupply-burnedTokens;\r\n           balances[owner] = 130000000000000;\r\n          }\r\n       }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"endICO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startICO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"drain\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"counter\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"investors\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"weiReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"bopsent\",\"type\":\"uint256\"}],\"name\":\"preico\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"counter\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"investors\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"weiReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"bopsent\",\"type\":\"uint256\"}],\"name\":\"ico\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"blockoptions","CompilerVersion":"v0.4.16+commit.d7661dd9","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://719d2294a90651e544e062e50548f3d8aaaeea3d3d2b5ce4e9365617ca9fa2d4"}]}