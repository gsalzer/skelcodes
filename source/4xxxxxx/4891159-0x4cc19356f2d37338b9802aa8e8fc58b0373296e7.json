{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\r\n    assert(token.transfer(to, value));\r\n  }\r\n\r\n  function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\r\n    assert(token.transferFrom(from, to, value));\r\n  }\r\n\r\n  function safeApprove(ERC20 token, address spender, uint256 value) internal {\r\n    assert(token.approve(spender, value));\r\n  }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title CrowdsaleConfig\r\n * @dev Holds all constants for SelfKeyCrowdsale contract\r\n*/\r\ncontract CrowdsaleConfig {\r\n    uint256 public constant TOKEN_DECIMALS = 18;\r\n    uint256 public constant MIN_TOKEN_UNIT = 10 ** uint256(TOKEN_DECIMALS);\r\n\r\n    // Initial distribution amounts\r\n    uint256 public constant TOTAL_SUPPLY_CAP = 6000000000 * MIN_TOKEN_UNIT;\r\n\r\n    // 33% of the total supply cap\r\n    uint256 public constant SALE_CAP = 1980000000 * MIN_TOKEN_UNIT;\r\n\r\n    // Minimum cap per purchaser on public sale = $100 in KEY (at $0.015)\r\n    uint256 public constant PURCHASER_MIN_TOKEN_CAP = 6666 * MIN_TOKEN_UNIT;\r\n\r\n    // Maximum cap per purchaser on first day of public sale = $3,000 in KEY (at $0.015)\r\n    uint256 public constant PURCHASER_MAX_TOKEN_CAP_DAY1 = 200000 * MIN_TOKEN_UNIT;\r\n\r\n    // Maximum cap per purchaser on public sale = $18,000 in KEY (at $0.015)\r\n    uint256 public constant PURCHASER_MAX_TOKEN_CAP = 1200000 * MIN_TOKEN_UNIT;\r\n\r\n    // 16.5%\r\n    uint256 public constant FOUNDATION_POOL_TOKENS = 876666666 * MIN_TOKEN_UNIT;\r\n    uint256 public constant FOUNDATION_POOL_TOKENS_VESTED = 113333334 * MIN_TOKEN_UNIT;\r\n\r\n    // Approx 33%\r\n    uint256 public constant COMMUNITY_POOL_TOKENS = 1980000000 * MIN_TOKEN_UNIT;\r\n\r\n    // Founders' distribution. Total = 16.5%\r\n    uint256 public constant FOUNDERS_TOKENS = 330000000 * MIN_TOKEN_UNIT;\r\n    uint256 public constant FOUNDERS_TOKENS_VESTED_1 = 330000000 * MIN_TOKEN_UNIT;\r\n    uint256 public constant FOUNDERS_TOKENS_VESTED_2 = 330000000 * MIN_TOKEN_UNIT;\r\n\r\n    // 1% for legal advisors\r\n    uint256 public constant LEGAL_EXPENSES_1_TOKENS = 54000000 * MIN_TOKEN_UNIT;\r\n    uint256 public constant LEGAL_EXPENSES_2_TOKENS = 6000000 * MIN_TOKEN_UNIT;\r\n\r\n    // KEY price in USD (thousandths)\r\n    uint256 public constant TOKEN_PRICE_THOUSANDTH = 15;  // $0.015 per KEY\r\n\r\n    // Contract wallet addresses for initial allocation\r\n    address public constant CROWDSALE_WALLET_ADDR = 0xE0831b1687c9faD3447a517F9371E66672505dB0;\r\n    address public constant FOUNDATION_POOL_ADDR = 0xD68947892Ef4D94Cdef7165b109Cf6Cd3f58A8e8;\r\n    address public constant FOUNDATION_POOL_ADDR_VEST = 0xd0C24Bb82e71A44eA770e84A3c79979F9233308D;\r\n    address public constant COMMUNITY_POOL_ADDR = 0x0506c5485AE54aB14C598Ef16C459409E5d8Fc03;\r\n    address public constant FOUNDERS_POOL_ADDR = 0x4452d6454e777743a5Ee233fbe873055008fF528;\r\n    address public constant LEGAL_EXPENSES_ADDR_1 = 0xb57911380F13A0a9a6Ba6562248674B5f56D7BFE;\r\n    address public constant LEGAL_EXPENSES_ADDR_2 = 0x9be281CdcF34B3A01468Ad1008139410Ba5BB2fB;\r\n\r\n    // 6 months period, in seconds, for pre-commitment half-vesting\r\n    uint64 public constant PRECOMMITMENT_VESTING_SECONDS = 15552000;\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Mintable token\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\r\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n */\r\n\r\ncontract MintableToken is StandardToken, Ownable {\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\r\n    totalSupply = totalSupply.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    Mint(_to, _amount);\r\n    Transfer(address(0), _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() onlyOwner canMint public returns (bool) {\r\n    mintingFinished = true;\r\n    MintFinished();\r\n    return true;\r\n  }\r\n}\r\n\r\n/* solhint-disable not-rely-on-time */\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SelfKeyToken\r\n * @dev SelfKey Token implementation.\r\n */\r\ncontract SelfKeyToken is MintableToken {\r\n    string public constant name = 'SelfKey'; //solhint-disable-line const-name-snakecase\r\n    string public constant symbol = 'KEY'; //solhint-disable-line const-name-snakecase\r\n    uint256 public constant decimals = 18; //solhint-disable-line const-name-snakecase\r\n\r\n    uint256 public cap;\r\n    bool private transfersEnabled = false;\r\n\r\n    event Burned(address indexed burner, uint256 value);\r\n\r\n    /**\r\n     * @dev Only the contract owner can transfer without restrictions.\r\n     *      Regular holders need to wait until sale is finalized.\r\n     * @param _sender — The address sending the tokens\r\n     * @param _value — The number of tokens to send\r\n     */\r\n    modifier canTransfer(address _sender, uint256 _value) {\r\n        require(transfersEnabled || _sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Constructor that sets a maximum supply cap.\r\n     * @param _cap — The maximum supply cap.\r\n     */\r\n    function SelfKeyToken(uint256 _cap) public {\r\n        cap = _cap;\r\n    }\r\n\r\n    /**\r\n     * @dev Overrides MintableToken.mint() for restricting supply under cap\r\n     * @param _to — The address to receive minted tokens\r\n     * @param _value — The number of tokens to mint\r\n     */\r\n    function mint(address _to, uint256 _value) public onlyOwner canMint returns (bool) {\r\n        require(totalSupply.add(_value) <= cap);\r\n        return super.mint(_to, _value);\r\n    }\r\n\r\n    /**\r\n     * @dev Checks modifier and allows transfer if tokens are not locked.\r\n     * @param _to — The address to receive tokens\r\n     * @param _value — The number of tokens to send\r\n     */\r\n    function transfer(address _to, uint256 _value)\r\n        public canTransfer(msg.sender, _value) returns (bool)\r\n    {\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n    /**\r\n     * @dev Checks modifier and allows transfer if tokens are not locked.\r\n     * @param _from — The address to send tokens from\r\n     * @param _to — The address to receive tokens\r\n     * @param _value — The number of tokens to send\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value)\r\n        public canTransfer(_from, _value) returns (bool)\r\n    {\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n    /**\r\n     * @dev Enables token transfers.\r\n     *      Called when the token sale is successfully finalized\r\n     */\r\n    function enableTransfers() public onlyOwner {\r\n        transfersEnabled = true;\r\n    }\r\n\r\n    /**\r\n    * @dev Burns a specific number of tokens.\r\n    * @param _value — The number of tokens to be burned.\r\n    */\r\n    function burn(uint256 _value) public onlyOwner {\r\n        require(_value > 0);\r\n\r\n        address burner = msg.sender;\r\n        balances[burner] = balances[burner].sub(_value);\r\n        totalSupply = totalSupply.sub(_value);\r\n        Burned(burner, _value);\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title TokenTimelock\r\n * @dev TokenTimelock is a token holder contract that will allow a\r\n * beneficiary to extract the tokens after a given release time\r\n */\r\ncontract TokenTimelock {\r\n  using SafeERC20 for ERC20Basic;\r\n\r\n  // ERC20 basic token contract being held\r\n  ERC20Basic public token;\r\n\r\n  // beneficiary of tokens after they are released\r\n  address public beneficiary;\r\n\r\n  // timestamp when token release is enabled\r\n  uint256 public releaseTime;\r\n\r\n  function TokenTimelock(ERC20Basic _token, address _beneficiary, uint256 _releaseTime) public {\r\n    require(_releaseTime > now);\r\n    token = _token;\r\n    beneficiary = _beneficiary;\r\n    releaseTime = _releaseTime;\r\n  }\r\n\r\n  /**\r\n   * @notice Transfers tokens held by timelock to beneficiary.\r\n   */\r\n  function release() public {\r\n    require(now >= releaseTime);\r\n\r\n    uint256 amount = token.balanceOf(this);\r\n    require(amount > 0);\r\n\r\n    token.safeTransfer(beneficiary, amount);\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title RefundVault\r\n * @dev This contract is used for storing funds while a crowdsale\r\n * is in progress. Supports refunding the money if crowdsale fails,\r\n * and forwarding it if crowdsale is successful.\r\n */\r\ncontract RefundVault is Ownable {\r\n  using SafeMath for uint256;\r\n\r\n  enum State { Active, Refunding, Closed }\r\n\r\n  mapping (address => uint256) public deposited;\r\n  address public wallet;\r\n  State public state;\r\n\r\n  event Closed();\r\n  event RefundsEnabled();\r\n  event Refunded(address indexed beneficiary, uint256 weiAmount);\r\n\r\n  function RefundVault(address _wallet) public {\r\n    require(_wallet != address(0));\r\n    wallet = _wallet;\r\n    state = State.Active;\r\n  }\r\n\r\n  function deposit(address investor) onlyOwner public payable {\r\n    require(state == State.Active);\r\n    deposited[investor] = deposited[investor].add(msg.value);\r\n  }\r\n\r\n  function close() onlyOwner public {\r\n    require(state == State.Active);\r\n    state = State.Closed;\r\n    Closed();\r\n    wallet.transfer(this.balance);\r\n  }\r\n\r\n  function enableRefunds() onlyOwner public {\r\n    require(state == State.Active);\r\n    state = State.Refunding;\r\n    RefundsEnabled();\r\n  }\r\n\r\n  function refund(address investor) public {\r\n    require(state == State.Refunding);\r\n    uint256 depositedValue = deposited[investor];\r\n    deposited[investor] = 0;\r\n    investor.transfer(depositedValue);\r\n    Refunded(investor, depositedValue);\r\n  }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title SelfKeyCrowdsale\r\n * @dev SelfKey Token Crowdsale implementation.\r\n */\r\n// solhint-disable-next-line max-states-count\r\ncontract SelfKeyCrowdsale is Ownable, CrowdsaleConfig {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for SelfKeyToken;\r\n\r\n    // whitelist of addresses that can perform precommitments and KYC verifications\r\n    mapping(address => bool) public isVerifier;\r\n\r\n    // Token contract\r\n    SelfKeyToken public token;\r\n\r\n    uint64 public startTime;\r\n    uint64 public endTime;\r\n\r\n    // Minimum tokens expected to sell\r\n    uint256 public goal;\r\n\r\n    // How many tokens a buyer gets per ETH\r\n    uint256 public rate = 51800;\r\n\r\n    // ETH price in USD, can be later updated until start date\r\n    uint256 public ethPrice = 777;\r\n\r\n    // Total amount of tokens purchased, including pre-sale\r\n    uint256 public totalPurchased = 0;\r\n\r\n    mapping(address => bool) public kycVerified;\r\n    mapping(address => uint256) public tokensPurchased;\r\n\r\n    // a mapping of dynamically instantiated token timelocks for each pre-commitment beneficiary\r\n    mapping(address => address) public vestedTokens;\r\n\r\n    bool public isFinalized = false;\r\n\r\n    // Token Timelocks\r\n    TokenTimelock public foundersTimelock1;\r\n    TokenTimelock public foundersTimelock2;\r\n    TokenTimelock public foundationTimelock;\r\n\r\n    // Vault to hold funds until crowdsale is finalized. Allows refunding if crowdsale is not successful.\r\n    RefundVault public vault;\r\n\r\n    // Crowdsale events\r\n    event TokenPurchase(\r\n        address indexed purchaser,\r\n        address indexed beneficiary,\r\n        uint256 value,\r\n        uint256 amount\r\n    );\r\n\r\n    event VerifiedKYC(address indexed participant);\r\n\r\n    event AddedPrecommitment(\r\n        address indexed participant,\r\n        uint256 tokensAllocated\r\n    );\r\n\r\n    event Finalized();\r\n\r\n    modifier verifierOnly() {\r\n        require(isVerifier[msg.sender]);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Crowdsale contract constructor\r\n     * @param _startTime — Unix timestamp representing the crowdsale start time\r\n     * @param _endTime — Unix timestamp representing the crowdsale start time\r\n     * @param _goal — Minimum amount of tokens expected to sell.\r\n     */\r\n    function SelfKeyCrowdsale(\r\n        uint64 _startTime,\r\n        uint64 _endTime,\r\n        uint256 _goal\r\n    ) public\r\n    {\r\n        require(_endTime > _startTime);\r\n\r\n        // sets contract owner as a verifier\r\n        isVerifier[msg.sender] = true;\r\n\r\n        token = new SelfKeyToken(TOTAL_SUPPLY_CAP);\r\n\r\n        // mints all possible tokens to the crowdsale contract\r\n        token.mint(address(this), TOTAL_SUPPLY_CAP);\r\n        token.finishMinting();\r\n\r\n        startTime = _startTime;\r\n        endTime = _endTime;\r\n        goal = _goal;\r\n\r\n        vault = new RefundVault(CROWDSALE_WALLET_ADDR);\r\n\r\n        // Set timelocks to 6 months and a year after startTime, respectively\r\n        uint64 sixMonthLock = uint64(startTime + 15552000);\r\n        uint64 yearLock = uint64(startTime + 31104000);\r\n\r\n        // Instantiation of token timelocks\r\n        foundersTimelock1 = new TokenTimelock(token, FOUNDERS_POOL_ADDR, sixMonthLock);\r\n        foundersTimelock2 = new TokenTimelock(token, FOUNDERS_POOL_ADDR, yearLock);\r\n        foundationTimelock = new TokenTimelock(token, FOUNDATION_POOL_ADDR_VEST, yearLock);\r\n\r\n        // Genesis allocation of tokens\r\n        token.safeTransfer(FOUNDATION_POOL_ADDR, FOUNDATION_POOL_TOKENS);\r\n        token.safeTransfer(COMMUNITY_POOL_ADDR, COMMUNITY_POOL_TOKENS);\r\n        token.safeTransfer(FOUNDERS_POOL_ADDR, FOUNDERS_TOKENS);\r\n        token.safeTransfer(LEGAL_EXPENSES_ADDR_1, LEGAL_EXPENSES_1_TOKENS);\r\n        token.safeTransfer(LEGAL_EXPENSES_ADDR_2, LEGAL_EXPENSES_2_TOKENS);\r\n\r\n        // Allocation of vested tokens\r\n        token.safeTransfer(foundersTimelock1, FOUNDERS_TOKENS_VESTED_1);\r\n        token.safeTransfer(foundersTimelock2, FOUNDERS_TOKENS_VESTED_2);\r\n        token.safeTransfer(foundationTimelock, FOUNDATION_POOL_TOKENS_VESTED);\r\n    }\r\n\r\n    /**\r\n     * @dev Fallback function is used to buy tokens.\r\n     *      It's the only entry point since `buyTokens` is internal\r\n     */\r\n    function () public payable {\r\n        buyTokens(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev Adds an address to the whitelist of Verifiers\r\n     * @param _address - address of the verifier\r\n     */\r\n    function addVerifier (address _address) public onlyOwner {\r\n        isVerifier[_address] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Removes an address from the whitelist of Verifiers\r\n     * @param _address - address of the verifier to be removed\r\n     */\r\n    function removeVerifier (address _address) public onlyOwner {\r\n        isVerifier[_address] = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Sets a new start date as long as token hasn't started yet\r\n     * @param _startTime - unix timestamp of the new start time\r\n     */\r\n    function setStartTime (uint64 _startTime) public onlyOwner {\r\n        require(now < startTime);\r\n        require(_startTime > now);\r\n        require(_startTime < endTime);\r\n\r\n        startTime = _startTime;\r\n    }\r\n\r\n    /**\r\n     * @dev Sets a new end date as long as end date hasn't been reached\r\n     * @param _endTime - unix timestamp of the new end time\r\n     */\r\n    function setEndTime (uint64 _endTime) public onlyOwner {\r\n        require(now < endTime);\r\n        require(_endTime > now);\r\n        require(_endTime > startTime);\r\n\r\n        endTime = _endTime;\r\n    }\r\n\r\n    /**\r\n     * @dev Updates the ETH/USD conversion rate as long as the public sale hasn't started\r\n     * @param _ethPrice - Updated conversion rate\r\n     */\r\n    function setEthPrice(uint256 _ethPrice) public onlyOwner {\r\n        require(now < startTime);\r\n        require(_ethPrice > 0);\r\n\r\n        ethPrice = _ethPrice;\r\n        rate = ethPrice.mul(1000).div(TOKEN_PRICE_THOUSANDTH);\r\n    }\r\n\r\n    /**\r\n     * @dev Must be called after crowdsale ends, to do some extra finalization\r\n     *      work. Calls the contract's finalization function.\r\n     */\r\n    function finalize() public onlyOwner {\r\n        require(now > startTime);\r\n        require(!isFinalized);\r\n\r\n        finalization();\r\n        Finalized();\r\n\r\n        isFinalized = true;\r\n    }\r\n\r\n    /**\r\n     * @dev If crowdsale is unsuccessful, a refund can be claimed back\r\n     */\r\n    function claimRefund(address participant) public {\r\n        // requires sale to be finalized and goal not reached,\r\n        require(isFinalized);\r\n        require(!goalReached());\r\n\r\n        vault.refund(participant);\r\n    }\r\n\r\n    /**\r\n     * @dev If crowdsale is unsuccessful, participants can claim refunds\r\n     */\r\n    function goalReached() public constant returns (bool) {\r\n        return totalPurchased >= goal;\r\n    }\r\n\r\n    /**\r\n     * @dev Release time-locked tokens\r\n     */\r\n    function releaseLockFounders1() public {\r\n        foundersTimelock1.release();\r\n    }\r\n\r\n    function releaseLockFounders2() public {\r\n        foundersTimelock2.release();\r\n    }\r\n\r\n    function releaseLockFoundation() public {\r\n        foundationTimelock.release();\r\n    }\r\n\r\n    /**\r\n     * @dev Release time-locked tokens for any vested address\r\n     */\r\n    function releaseLock(address participant) public {\r\n        require(vestedTokens[participant] != 0x0);\r\n\r\n        TokenTimelock timelock = TokenTimelock(vestedTokens[participant]);\r\n        timelock.release();\r\n    }\r\n\r\n    /**\r\n     * @dev Verifies KYC for given participant.\r\n     *      This enables token purchases by the participant addres\r\n     */\r\n    function verifyKYC(address participant) public verifierOnly {\r\n        kycVerified[participant] = true;\r\n\r\n        VerifiedKYC(participant);\r\n    }\r\n\r\n    /**\r\n     * @dev Adds an address for pre-sale commitments made off-chain.\r\n     * @param beneficiary — Address of the already verified participant\r\n     * @param tokensAllocated — Exact amount of KEY tokens (including decimal places) to allocate\r\n     * @param halfVesting — determines whether the half the tokens will be time-locked or not\r\n     */\r\n    function addPrecommitment(\r\n        address beneficiary,\r\n        uint256 tokensAllocated,\r\n        bool halfVesting\r\n    ) public verifierOnly\r\n    {\r\n        // requires to be on pre-sale\r\n        require(now < startTime); // solhint-disable-line not-rely-on-time\r\n\r\n        kycVerified[beneficiary] = true;\r\n\r\n        uint256 tokens = tokensAllocated;\r\n        totalPurchased = totalPurchased.add(tokens);\r\n        tokensPurchased[beneficiary] = tokensPurchased[beneficiary].add(tokens);\r\n\r\n        if (halfVesting) {\r\n            // half the tokens are put into a time-lock for a pre-defined period\r\n            uint64 endTimeLock = uint64(startTime + PRECOMMITMENT_VESTING_SECONDS);\r\n\r\n            // Sets a timelock for half the tokens allocated\r\n            uint256 half = tokens.div(2);\r\n            TokenTimelock timelock;\r\n\r\n            if (vestedTokens[beneficiary] == 0x0) {\r\n                timelock = new TokenTimelock(token, beneficiary, endTimeLock);\r\n                vestedTokens[beneficiary] = address(timelock);\r\n            } else {\r\n                timelock = TokenTimelock(vestedTokens[beneficiary]);\r\n            }\r\n\r\n            token.safeTransfer(beneficiary, half);\r\n            token.safeTransfer(timelock, tokens.sub(half));\r\n        } else {\r\n            // all tokens are sent to the participant's address\r\n            token.safeTransfer(beneficiary, tokens);\r\n        }\r\n\r\n        AddedPrecommitment(\r\n            beneficiary,\r\n            tokens\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Additional finalization logic. Enables token transfers.\r\n     */\r\n    function finalization() internal {\r\n        if (goalReached()) {\r\n            burnUnsold();\r\n            vault.close();\r\n            token.enableTransfers();\r\n        } else {\r\n            vault.enableRefunds();\r\n        }\r\n    }\r\n\r\n    /**\r\n     *  @dev Low level token purchase. Only callable internally. Participants MUST be KYC-verified before purchase\r\n     *  @param participant — The address of the token purchaser\r\n     */\r\n    function buyTokens(address participant) internal {\r\n        require(kycVerified[participant]);\r\n        require(now >= startTime);\r\n        require(now < endTime);\r\n        require(!isFinalized);\r\n        require(msg.value != 0);\r\n\r\n        // Calculate the token amount to be allocated\r\n        uint256 weiAmount = msg.value;\r\n        uint256 tokens = weiAmount.mul(rate);\r\n\r\n        // Update state\r\n        tokensPurchased[participant] = tokensPurchased[participant].add(tokens);\r\n        totalPurchased = totalPurchased.add(tokens);\r\n\r\n        require(totalPurchased <= SALE_CAP);\r\n        require(tokensPurchased[participant] >= PURCHASER_MIN_TOKEN_CAP);\r\n\r\n        if (now < startTime + 86400) {\r\n            // if still during the first day of token sale, apply different max cap\r\n            require(tokensPurchased[participant] <= PURCHASER_MAX_TOKEN_CAP_DAY1);\r\n        } else {\r\n            require(tokensPurchased[participant] <= PURCHASER_MAX_TOKEN_CAP);\r\n        }\r\n\r\n        // Sends ETH contribution to the RefundVault and tokens to participant\r\n        vault.deposit.value(msg.value)(participant);\r\n        token.safeTransfer(participant, tokens);\r\n\r\n        TokenPurchase(\r\n            msg.sender,\r\n            participant,\r\n            weiAmount,\r\n            tokens\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Burn all remaining (unsold) tokens.\r\n     *      This should be called after sale finalization\r\n     */\r\n    function burnUnsold() internal {\r\n        // All tokens held by this contract get burned\r\n        token.burn(token.balanceOf(this));\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"enableTransfers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_cap\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"SelfKeyToken","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000001363156bbee3016d70000000","Library":"","SwarmSource":"bzzr://a0db4a7417f51dac893a505484403c713964d24a776ca71d61c0b642f6760aae"}]}