{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13;\r\n// -------------------------------------------------\r\n// 0.4.13+commit.0fb4cb1a\r\n// EthPoker.io ERC20 PKT token contract\r\n// Contact admin@ethpoker.io for any query\r\n// GET READY FOR LIFT OFF 03/January/17 (Bitcoin's Anniversary)\r\n// -------------------------------------------------\r\n// ERC Token Standard #20 Interface https://github.com/ethereum/EIPs/issues/20\r\n// -------------------------------------------------\r\n// Security, functional, code reviews completed 06/October/17 [passed OK]\r\n// Regression test cycle complete 06/October/17 [passed OK]\r\n// -------------------------------------------------\r\n\r\ncontract safeMath {\r\n  function safeMul(uint256 a, uint256 b) internal returns (uint256) {\r\n      uint256 c = a * b;\r\n      safeAssert(a == 0 || c / a == b);\r\n      return c;\r\n  }\r\n\r\n  function safeDiv(uint256 a, uint256 b) internal returns (uint256) {\r\n      safeAssert(b > 0);\r\n      uint256 c = a / b;\r\n      safeAssert(a == b * c + a % b);\r\n      return c;\r\n  }\r\n\r\n  function safeSub(uint256 a, uint256 b) internal returns (uint256) {\r\n      safeAssert(b <= a);\r\n      return a - b;\r\n  }\r\n\r\n  function safeAdd(uint256 a, uint256 b) internal returns (uint256) {\r\n      uint256 c = a + b;\r\n      safeAssert(c>=a && c>=b);\r\n      return c;\r\n  }\r\n\r\n  function safeAssert(bool assertion) internal {\r\n      if (!assertion) revert();\r\n  }\r\n}\r\n\r\ncontract ERC20Interface is safeMath {\r\n  function balanceOf(address _owner) constant returns (uint256 balance);\r\n  function transfer(address _to, uint256 _value) returns (bool success);\r\n  function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\r\n  function approve(address _spender, uint256 _value) returns (bool success);\r\n  function increaseApproval (address _spender, uint _addedValue) returns (bool success);\r\n  function decreaseApproval (address _spender, uint _subtractedValue) returns (bool success);\r\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining);\r\n  event Buy(address indexed _sender, uint256 _eth, uint256 _PKT);\r\n  event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\ncontract PKTToken is safeMath, ERC20Interface {\r\n  // token setup variables\r\n  string  public constant standard              = \"PKT\";\r\n  string  public constant name                  = \"ethPoker\";\r\n  string  public constant symbol                = \"PKT\";\r\n  uint8   public constant decimals              = 4;                                  // 4 decimals for usability\r\n  uint256 public constant totalSupply           = 100000000000;                       // 10 million + 4 decimals (presale maximum capped) static supply\r\n\r\n  // token mappings\r\n  mapping (address => uint256) balances;\r\n  mapping (address => mapping (address => uint256)) allowed;\r\n\r\n  // ERC20 standard token possible events, matched to ICO and preSale contracts\r\n  event Buy(address indexed _sender, uint256 _eth, uint256 _PKT);\r\n  event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n  // ERC20 token balanceOf query function\r\n  function balanceOf(address _owner) constant returns (uint256 balance) {\r\n      return balances[_owner];\r\n  }\r\n\r\n  // ERC20 token transfer function with additional safety\r\n  function transfer(address _to, uint256 _amount) returns (bool success) {\r\n      require(!(_to == 0x0));\r\n      if ((balances[msg.sender] >= _amount)\r\n      && (_amount > 0)\r\n      && ((safeAdd(balances[_to],_amount) > balances[_to]))) {\r\n          balances[msg.sender] = safeSub(balances[msg.sender], _amount);\r\n          balances[_to] = safeAdd(balances[_to], _amount);\r\n          Transfer(msg.sender, _to, _amount);\r\n          return true;\r\n      } else {\r\n          return false;\r\n      }\r\n  }\r\n\r\n  // ERC20 token transferFrom function with additional safety\r\n  function transferFrom(\r\n      address _from,\r\n      address _to,\r\n      uint256 _amount) returns (bool success) {\r\n      require(!(_to == 0x0));\r\n      if ((balances[_from] >= _amount)\r\n      && (allowed[_from][msg.sender] >= _amount)\r\n      && (_amount > 0)\r\n      && (safeAdd(balances[_to],_amount) > balances[_to])) {\r\n          balances[_from] = safeSub(balances[_from], _amount);\r\n          allowed[_from][msg.sender] = safeSub((allowed[_from][msg.sender]),_amount);\r\n          balances[_to] = safeAdd(balances[_to], _amount);\r\n          Transfer(_from, _to, _amount);\r\n          return true;\r\n      } else {\r\n          return false;\r\n      }\r\n  }\r\n\r\n  // ERC20 allow _spender to withdraw, multiple times, up to the _value amount\r\n  function approve(address _spender, uint256 _amount) returns (bool success) {\r\n      //Fix for known double-spend https://docs.google.com/document/d/1YLPtQxZu1UAvO9cZ1O2RPXBbT0mooh4DYKjA_jp-RLM/edit#\r\n      //Input must either set allow amount to 0, or have 0 already set, to workaround issue\r\n\r\n      require((_amount == 0) || (allowed[msg.sender][_spender] == 0));\r\n      allowed[msg.sender][_spender] = _amount;\r\n      Approval(msg.sender, _spender, _amount);\r\n      return true;\r\n  }\r\n\r\n  // ERC20 return allowance for given owner spender pair\r\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n      return allowed[_owner][_spender];\r\n  }\r\n\r\n  // ERC20 Updated increase approval process (to prevent double-spend attack but remove need to zero allowance before setting)\r\n  function increaseApproval (address _spender, uint _addedValue) returns (bool success) {\r\n      allowed[msg.sender][_spender] = safeAdd(allowed[msg.sender][_spender],_addedValue);\r\n\r\n      // report new approval amount\r\n      Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n      return true;\r\n  }\r\n\r\n  // ERC20 Updated decrease approval process (to prevent double-spend attack but remove need to zero allowance before setting)\r\n  function decreaseApproval (address _spender, uint _subtractedValue) returns (bool success) {\r\n      uint oldValue = allowed[msg.sender][_spender];\r\n\r\n      if (_subtractedValue > oldValue) {\r\n        allowed[msg.sender][_spender] = 0;\r\n      } else {\r\n        allowed[msg.sender][_spender] = safeSub(oldValue,_subtractedValue);\r\n      }\r\n\r\n      // report new approval amount\r\n      Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n      return true;\r\n  }\r\n\r\n  // ERC20 Standard default function to assign initial supply variables and send balance to creator for distribution to PKT presale and ICO contract\r\n  function PKTToken() {\r\n      balances[msg.sender] = totalSupply;\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"standard\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_eth\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_PKT\",\"type\":\"uint256\"}],\"name\":\"Buy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"PKTToken","CompilerVersion":"v0.4.13+commit.fb4cb1a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://b31180aba54354f595d3e3f9065547505df732597e2c0ffc8caa1fcba3153100"}]}