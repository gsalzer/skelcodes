{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.15;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\npragma solidity ^0.4.15;\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner {\r\n    require(newOwner != address(0));\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\npragma solidity ^0.4.15;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev modifier to allow actions only when the contract IS paused\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev modifier to allow actions only when the contract IS NOT paused\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused {\r\n    paused = true;\r\n    Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused {\r\n    paused = false;\r\n    Unpause();\r\n  }\r\n}\r\n\r\npragma solidity ^0.4.15;\r\n\r\n\r\n/**\r\n * @title Whitelistable\r\n * @dev Base contract which allows children to implement action for a whitelist or for everyone.\r\n */\r\ncontract Whitelistable is Ownable {\r\n  event AllowEveryone();\r\n  event AllowWhiteList();\r\n\r\n  // Flag to turn of the whitelist restriction\r\n  bool public everyoneDisabled = true;\r\n\r\n\r\n  /**\r\n   * @dev modifier to allow actions only for whitelisted users\r\n   */\r\n  modifier whenNotEveryone() {\r\n    require(everyoneDisabled);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev modifier to allow actions for everybody\r\n   */\r\n  modifier whenEveryone() {\r\n    require(!everyoneDisabled);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to allow everyone\r\n   */\r\n  function allowEveryone() onlyOwner whenNotEveryone {\r\n    everyoneDisabled = false;\r\n    AllowEveryone();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to limit to whitelist users\r\n   */\r\n  function allowWhiteList() onlyOwner whenEveryone {\r\n    everyoneDisabled = true;\r\n    AllowWhiteList();\r\n  }\r\n}\r\n\r\npragma solidity ^0.4.15;\r\n\r\n\r\ncontract FundRequestPublicSeed is Pausable, Whitelistable {\r\n  using SafeMath for uint;\r\n\r\n  // address where funds are collected\r\n  address public wallet;\r\n  // how many token units a buyer gets per wei\r\n  uint public rate;\r\n  // Max amount of ETH that can be raised (in wei)\r\n  uint256 public weiMaxCap;\r\n  // amount of raised money in wei\r\n  uint256 public weiRaised;\r\n  // max amount of ETH that is allowed to deposit when whitelist is active\r\n  uint256 public maxPurchaseSize;\r\n  \r\n  mapping(address => uint) public deposits;\r\n  mapping(address => uint) public balances;\r\n  address[] public investors;\r\n  uint public investorCount;\r\n  mapping(address => bool) public allowed;\r\n  /**\r\n   * event for token purchase logging\r\n   * @param purchaser who paid for the tokens\r\n   * @param beneficiary who got the tokens\r\n   * @param value weis paid for purchase\r\n   * @param amount amount of tokens purchased\r\n   */\r\n  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint value, uint amount);\r\n\r\n  function FundRequestPublicSeed(uint _rate, uint256 _maxCap, address _wallet) {\r\n    require(_rate > 0);\r\n    require(_maxCap > 0);\r\n    require(_wallet != 0x0);\r\n\r\n    rate = _rate;\r\n    weiMaxCap = SafeMath.mul(_maxCap, 1 ether);\r\n    wallet = _wallet;\r\n    maxPurchaseSize = 25 ether;\r\n  }\r\n  \r\n  // low level token purchase function\r\n  function buyTokens(address beneficiary) payable whenNotPaused {\r\n    require(validPurchase());\r\n    require(maxCapNotReached());\r\n    if (everyoneDisabled) {\r\n      require(validBeneficiary(beneficiary));\r\n      require(validPurchaseSize(beneficiary));  \r\n    }\r\n    \r\n    bool existing = deposits[beneficiary] > 0;  \r\n    uint weiAmount = msg.value;\r\n    uint updatedWeiRaised = weiRaised.add(weiAmount);\r\n    // calculate token amount to be created\r\n    uint tokens = weiAmount.mul(rate);\r\n    weiRaised = updatedWeiRaised;\r\n    deposits[beneficiary] = deposits[beneficiary].add(msg.value);\r\n    balances[beneficiary] = balances[beneficiary].add(tokens);\r\n    if(!existing) {\r\n      investors.push(beneficiary);\r\n      investorCount++;\r\n    }\r\n    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\r\n    forwardFunds();\r\n  }\r\n  // send ether to the fund collection wallet\r\n  // override to create custom fund forwarding mechanisms\r\n  function forwardFunds() internal {\r\n    wallet.transfer(msg.value);\r\n  }\r\n  function validBeneficiary(address beneficiary) internal constant returns (bool) {\r\n    return allowed[beneficiary] == true;\r\n  }\r\n  // @return true if the transaction can buy tokens\r\n  function validPurchase() internal constant returns (bool) {\r\n    return msg.value != 0;\r\n  }\r\n  // @return true if the amount is lower then 20ETH\r\n  function validPurchaseSize(address beneficiary) internal constant returns (bool) {\r\n    return msg.value.add(deposits[beneficiary]) <= maxPurchaseSize;\r\n  }\r\n  function maxCapNotReached() internal constant returns (bool) {\r\n    return SafeMath.add(weiRaised, msg.value) <= weiMaxCap;\r\n  }\r\n  function balanceOf(address _owner) constant returns (uint balance) {\r\n    return balances[_owner];\r\n  }\r\n  function depositsOf(address _owner) constant returns (uint deposit) {\r\n    return deposits[_owner];\r\n  }\r\n  function allow(address beneficiary) onlyOwner {\r\n    allowed[beneficiary] = true;\r\n  }\r\n  function updateRate(uint _rate) onlyOwner whenPaused {\r\n    rate = _rate;\r\n  }\r\n\r\n  function updateWallet(address _wallet) onlyOwner whenPaused {\r\n    require(_wallet != address(0));\r\n    wallet = _wallet;\r\n  }\r\n\r\n  function updateMaxCap(uint _maxCap) onlyOwner whenPaused {\r\n    require(_maxCap != 0);\r\n    weiMaxCap = SafeMath.mul(_maxCap, 1 ether);\r\n  }\r\n\r\n  function updatePurchaseSize(uint _purchaseSize) onlyOwner whenPaused {\r\n    require(_purchaseSize != 0);\r\n    maxPurchaseSize = _purchaseSize;\r\n  }\r\n\r\n  // fallback function can be used to buy tokens\r\n  function () payable {\r\n    buyTokens(msg.sender);\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"everyoneDisabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxPurchaseSize\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"allowEveryone\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"investors\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_purchaseSize\",\"type\":\"uint256\"}],\"name\":\"updatePurchaseSize\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"allowWhiteList\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"updateRate\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"updateWallet\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"investorCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"depositsOf\",\"outputs\":[{\"name\":\"deposit\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_maxCap\",\"type\":\"uint256\"}],\"name\":\"updateMaxCap\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiMaxCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"deposits\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"allow\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_rate\",\"type\":\"uint256\"},{\"name\":\"_maxCap\",\"type\":\"uint256\"},{\"name\":\"_wallet\",\"type\":\"address\"}],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"AllowEveryone\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"AllowWhiteList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"}]","ContractName":"FundRequestPublicSeed","CompilerVersion":"v0.4.15+commit.bbb8e64f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000e1000000000000000000000000000000000000000000000000000000000000003e80000000000000000000000003ad396dcb86d3a72855f7e1e305eaa144ec9b434","Library":"","SwarmSource":"bzzr://02187d975b4b42d68a3362bc1e90efd348b641ea8a61c1ec530901c8782b833f"}]}