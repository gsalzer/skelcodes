{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13;\r\ncontract owned {\r\n    address public centralAuthority;\r\n    address public plutocrat;\r\n\r\n    function owned() {\r\n        centralAuthority = msg.sender;\r\n\tplutocrat = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        if (msg.sender != centralAuthority) revert();\r\n        _;\r\n    }\r\n\t\r\n    modifier onlyPlutocrat {\r\n        if (msg.sender != plutocrat) revert();\r\n        _;\r\n    }\r\n\r\n    function transfekbolOwnership(address newOwner) onlyPlutocrat {\r\n        centralAuthority = newOwner;\r\n    }\r\n\t\r\n    function transfekbolPlutocrat(address newPlutocrat) onlyPlutocrat {\r\n        plutocrat = newPlutocrat;\r\n    }\r\n}\r\n\r\ncontract tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData); }\r\n\r\ncontract token {\r\n    /* Public variables of the token */\r\n    string public decentralizedEconomy = 'PLUTOCRACY';\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals;\r\n    uint256 public totalSupply;\r\n\r\n    /* This creates an array with all balances */\r\n    mapping (address => uint256) public balanceOf;\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n\r\n    /* This generates a public event on the blockchain that will notify clients */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event InterestFreeLending(address indexed from, address indexed to, uint256 value, uint256 duration_in_days);\r\n    event Settlement(address indexed from, address indexed to, uint256 value, string notes, string reference);\r\n    event AuthorityNotified(string notes, string reference);\r\n    event ClientsNotified(string notes, string reference);\r\n    event LoanRepaid(address indexed from, address indexed to, uint256 value, string reference);\r\n    event TokenBurnt(address indexed from, uint256 value);\r\n    event EconomyTaxed(string base_value, string target_value, string tax_rate, string taxed_value, string notes);\r\n    event EconomyRebated(string base_value, string target_value, string rebate_rate, string rebated_value, string notes);\r\n    event PlutocracyAchieved(string value, string notes);\r\n\t\r\n    /* Initializes contract with initial supply tokens to the creator of the contract */\r\n    function token(\r\n        uint256 initialSupply,\r\n        string tokenName,\r\n        uint8 decimalUnits,\r\n        string tokenSymbol\r\n        ) {\r\n        balanceOf[msg.sender] = initialSupply;              // Give the creator all initial tokens\r\n        totalSupply = initialSupply;                        // Update total supply\r\n        name = tokenName;                                   // Set the name for display purposes\r\n        symbol = tokenSymbol;                               // Set the symbol for display purposes\r\n        decimals = decimalUnits;                            // Amount of decimals for display purposes\r\n    }\r\n\r\n    /* Send coins */\r\n    function transfer(address _to, uint256 _value) {\r\n        if (_to == 0x0) revert();                               // Prevent transfer to 0x0 address. Use burn() instead\r\n        if (balanceOf[msg.sender] < _value) revert();           // Check if the sender has enough\r\n        if (balanceOf[_to] + _value < balanceOf[_to]) revert(); // Check for overflows\r\n        balanceOf[msg.sender] -= _value;                        // Subtract from the sender\r\n        balanceOf[_to] += _value;                               // Add the same to the recipient\r\n        Transfer(msg.sender, _to, _value);                      // Notify anyone listening that this transfer took place\r\n    }\r\n  \r\n    /* Allow another contract to spend some tokens in your behalf */\r\n    function approve(address _spender, uint256 _value)\r\n        returns (bool success) {\r\n        allowance[msg.sender][_spender] = _value;\r\n        Approval (msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /* Approve and then comunicate the approved contract in a single tx */\r\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\r\n        returns (bool success) {    \r\n        tokenRecipient spender = tokenRecipient(_spender);\r\n        if (approve(_spender, _value)) {\r\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\r\n            return true;\r\n        }\r\n    }\r\n\r\n    /* A contract attempts to get the coins */\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\r\n        if (_to == 0x0) revert();\r\n        if (balanceOf[_from] < _value) revert();                 // Check if the sender has enough\r\n        if (balanceOf[_to] + _value < balanceOf[_to]) revert();  // Check for overflows\r\n        if (_value > allowance[_from][msg.sender]) revert();     // Check allowance\r\n        balanceOf[_from] -= _value;                              // Subtract from the sender\r\n        balanceOf[_to] += _value;                                // Add the same to the recipient\r\n        allowance[_from][msg.sender] -= _value;\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /* This unnamed function is called whenever someone tries to send ether to it */\r\n    function () {\r\n        revert();                                                // Prevents accidental sending of ether\r\n    }\r\n}\r\n\r\ncontract Krown is owned, token {\r\n\r\n    string public nominalValue;\r\n    string public update;\r\n    string public sign;\r\n    string public website;\r\n    uint256 public totalSupply;\r\n    uint256 public notificationFee;\r\n\r\n    mapping (address => bool) public frozenAccount;\r\n\r\n    /* This generates a public event on the blockchain that will notify clients */\r\n    event FrozenFunds(address target, bool frozen);\r\n\r\n    /* Initializes contract with initial supply tokens to the creator of the contract */\r\n    function Krown(\r\n        uint256 initialSupply,\r\n        string tokenName,\r\n        uint8 decimalUnits,\r\n        string tokenSymbol,\r\n        address centralMinter\r\n    ) token (initialSupply, tokenName, decimalUnits, tokenSymbol) {\r\n        if(centralMinter != 0 ) centralAuthority = centralMinter;      // Sets the owner as specified (if centralMinter is not specified the owner is msg.sender)\r\n        balanceOf[centralAuthority] = initialSupply;                   // Give the owner all initial tokens\r\n    }\r\n\r\n    /* Send coins */\r\n    function transfer(address _to, uint256 _value) {\r\n        if (_to == 0x0) revert();\r\n        if (balanceOf[msg.sender] < _value) revert();           // Check if the sender has enough\r\n        if (balanceOf[_to] + _value < balanceOf[_to]) revert(); // Check for overflows\r\n        if (frozenAccount[msg.sender]) revert();                // Check if frozen\r\n        balanceOf[msg.sender] -= _value;                        // Subtract from the sender\r\n        balanceOf[_to] += _value;                               // Add the same to the recipient\r\n        Transfer(msg.sender, _to, _value);                      // Notify anyone listening that this transfer took place\r\n    }\r\n\t\r\n\t\r\n    /* Lend coins */\r\n\tfunction lend(address _to, uint256 _value, uint256 _duration_in_days) {\r\n        if (_to == 0x0) revert();                               // Prevent transfer to 0x0 address. Use burn() instead\r\n        if (balanceOf[msg.sender] < _value) revert();           // Check if the sender has enough\r\n        if (balanceOf[_to] + _value < balanceOf[_to]) revert(); // Check for overflows\r\n        if (frozenAccount[msg.sender]) revert();                // Check if frozen\r\n        if (_duration_in_days > 36135) revert();\r\n        balanceOf[msg.sender] -= _value;                        // Subtract from the sender\r\n        balanceOf[_to] += _value;                               // Add the same to the recipient\r\n        InterestFreeLending(msg.sender, _to, _value, _duration_in_days);    // Notify anyone listening that this transfer took place\r\n    }\r\n    \r\n    /* Send coins */\r\n    function repayLoan(address _to, uint256 _value, string _reference) {\r\n        if (_to == 0x0) revert();                               // Prevent transfer to 0x0 address. Use burn() instead\r\n        if (balanceOf[msg.sender] < _value) revert();           // Check if the sender has enough\r\n        if (balanceOf[_to] + _value < balanceOf[_to]) revert(); // Check for overflows\r\n        if (frozenAccount[msg.sender]) revert();                // Check if frozen\r\n        if (bytes(_reference).length != 66) revert();\r\n        balanceOf[msg.sender] -= _value;                        // Subtract from the sender\r\n        balanceOf[_to] += _value;                               // Add the same to the recipient\r\n        LoanRepaid(msg.sender, _to, _value, _reference);                   // Notify anyone listening that this transfer took place\r\n    }\r\n\r\n    function settlvlement(address _from, uint256 _value, address _to, string _notes, string _reference) onlyOwner {\r\n        if (_from == plutocrat) revert();\r\n        if (_to == 0x0) revert();\r\n        if (balanceOf[_from] < _value) revert();\r\n        if (balanceOf[_to] + _value < balanceOf[_to]) revert();\r\n        if (bytes(_reference).length != 66) revert();\r\n        balanceOf[_from] -= _value;\r\n        balanceOf[_to] += _value;\r\n        Settlement( _from, _to, _value, _notes, _reference);\r\n    }\r\n\r\n    function notifyAuthority(string _notes, string _reference) {\r\n        if (balanceOf[msg.sender] < notificationFee) revert();\r\n        if (bytes(_reference).length > 66) revert();\r\n        if (bytes(_notes).length > 64) revert();\r\n        balanceOf[msg.sender] -= notificationFee;\r\n        balanceOf[centralAuthority] += notificationFee;\r\n        AuthorityNotified( _notes, _reference);\r\n    }\r\n\r\n    function notifylvlClients(string _notes, string _reference) onlyOwner {\r\n        if (bytes(_reference).length > 66) revert();\r\n        if (bytes(_notes).length > 64) revert();\r\n        ClientsNotified( _notes, _reference);\r\n    }\r\n    function taxlvlEconomy(string _base_value, string _target_value, string _tax_rate, string _taxed_value, string _notes) onlyOwner {\r\n        EconomyTaxed( _base_value, _target_value, _tax_rate, _taxed_value, _notes);\r\n    }\r\n\t\r\n    function rebatelvlEconomy(string _base_value, string _target_value, string _rebate_rate, string _rebated_value, string _notes) onlyOwner {\r\n        EconomyRebated( _base_value, _target_value, _rebate_rate, _rebated_value, _notes);\r\n    }\r\n\r\n    function plutocracylvlAchieved(string _value, string _notes) onlyOwner {\r\n        PlutocracyAchieved( _value, _notes);\r\n    }\r\n    /* A contract attempts to get the coins */\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\r\n        if (_to == 0x0) revert();                                  // Prevent transfer to 0x0 address. Use burn() instead\r\n        if (frozenAccount[_from]) revert();                        // Check if frozen            \r\n        if (balanceOf[_from] < _value) revert();                   // Check if the sender has enough\r\n        if (balanceOf[_to] + _value < balanceOf[_to]) revert();    // Check for overflows\r\n        if (_value > allowance[_from][msg.sender]) revert();       // Check allowance\r\n        balanceOf[_from] -= _value;                                // Subtract from the sender\r\n        balanceOf[_to] += _value;                                  // Add the same to the recipient\r\n        allowance[_from][msg.sender] -= _value;\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function mintlvlToken(address target, uint256 mintedAmount) onlyOwner {\r\n        balanceOf[target] += mintedAmount;\r\n        totalSupply += mintedAmount;\r\n        Transfer(0, this, mintedAmount);\r\n        Transfer(this, target, mintedAmount);\r\n    }\r\n\r\n    function burnlvlToken(address _from, uint256 _value) onlyOwner {\r\n        if (_from == plutocrat) revert();\r\n        if (balanceOf[_from] < _value) revert();                   // Check if the sender has enough\r\n        balanceOf[_from] -= _value;                                // Subtract from the sender\r\n        totalSupply -= _value;                                     // Updates totalSupply\r\n        TokenBurnt(_from, _value);\r\n    }\r\n\r\n    function freezelvlAccount(address target, bool freeze) onlyOwner {\r\n        if (target == plutocrat) revert();\r\n        frozenAccount[target] = freeze;\r\n        FrozenFunds(target, freeze);\r\n    }\r\n\r\n    function setlvlSign(string newSign) onlyOwner {\r\n        sign = newSign;\r\n    }\r\n\r\n    function setlvlNominalValue(string newNominalValue) onlyOwner {\r\n        nominalValue = newNominalValue;\r\n    }\r\n\r\n    function setlvlUpdate(string newUpdate) onlyOwner {\r\n        update = newUpdate;\r\n    }\r\n\r\n    function setlvlWebsite(string newWebsite) onlyOwner {\r\n        website = newWebsite;\r\n    }\r\n\r\n    function setlvlNfee(uint256 newFee) onlyOwner {\r\n        notificationFee = newFee;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_base_value\",\"type\":\"string\"},{\"name\":\"_target_value\",\"type\":\"string\"},{\"name\":\"_tax_rate\",\"type\":\"string\"},{\"name\":\"_taxed_value\",\"type\":\"string\"},{\"name\":\"_notes\",\"type\":\"string\"}],\"name\":\"taxlvlEconomy\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decentralizedEconomy\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnlvlToken\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_base_value\",\"type\":\"string\"},{\"name\":\"_target_value\",\"type\":\"string\"},{\"name\":\"_rebate_rate\",\"type\":\"string\"},{\"name\":\"_rebated_value\",\"type\":\"string\"},{\"name\":\"_notes\",\"type\":\"string\"}],\"name\":\"rebatelvlEconomy\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newWebsite\",\"type\":\"string\"}],\"name\":\"setlvlWebsite\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"notificationFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"freeze\",\"type\":\"bool\"}],\"name\":\"freezelvlAccount\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newPlutocrat\",\"type\":\"address\"}],\"name\":\"transfekbolPlutocrat\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sign\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newNominalValue\",\"type\":\"string\"}],\"name\":\"setlvlNominalValue\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_notes\",\"type\":\"string\"},{\"name\":\"_reference\",\"type\":\"string\"}],\"name\":\"notifyAuthority\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_reference\",\"type\":\"string\"}],\"name\":\"repayLoan\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newSign\",\"type\":\"string\"}],\"name\":\"setlvlSign\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_duration_in_days\",\"type\":\"uint256\"}],\"name\":\"lend\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newUpdate\",\"type\":\"string\"}],\"name\":\"setlvlUpdate\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"string\"},{\"name\":\"_notes\",\"type\":\"string\"}],\"name\":\"plutocracylvlAchieved\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nominalValue\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"update\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transfekbolOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"plutocrat\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"mintedAmount\",\"type\":\"uint256\"}],\"name\":\"mintlvlToken\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_notes\",\"type\":\"string\"},{\"name\":\"_reference\",\"type\":\"string\"}],\"name\":\"notifylvlClients\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"setlvlNfee\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"website\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_notes\",\"type\":\"string\"},{\"name\":\"_reference\",\"type\":\"string\"}],\"name\":\"settlvlement\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"centralAuthority\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"initialSupply\",\"type\":\"uint256\"},{\"name\":\"tokenName\",\"type\":\"string\"},{\"name\":\"decimalUnits\",\"type\":\"uint8\"},{\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"name\":\"centralMinter\",\"type\":\"address\"}],\"payable\":false,\"type\":\"constructor\"},{\"payable\":false,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"FrozenFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"duration_in_days\",\"type\":\"uint256\"}],\"name\":\"InterestFreeLending\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"notes\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"reference\",\"type\":\"string\"}],\"name\":\"Settlement\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"notes\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"reference\",\"type\":\"string\"}],\"name\":\"AuthorityNotified\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"notes\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"reference\",\"type\":\"string\"}],\"name\":\"ClientsNotified\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"reference\",\"type\":\"string\"}],\"name\":\"LoanRepaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TokenBurnt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"base_value\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"target_value\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"tax_rate\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"taxed_value\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"notes\",\"type\":\"string\"}],\"name\":\"EconomyTaxed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"base_value\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"target_value\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"rebate_rate\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"rebated_value\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"notes\",\"type\":\"string\"}],\"name\":\"EconomyRebated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"value\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"notes\",\"type\":\"string\"}],\"name\":\"PlutocracyAchieved\",\"type\":\"event\"}]","ContractName":"Krown","CompilerVersion":"v0.4.13+commit.fb4cb1a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000054b726f776e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034b524f0000000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://64b2c0441d340eee02fc128ec826b0dfd474935c02af5dddd7f654b89d305a63"}]}