{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.17;\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    function Ownable() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) onlyOwner {\r\n        if (newOwner != address(0)) {\r\n            owner = newOwner;\r\n        }\r\n    }\r\n\r\n}\r\n\r\ncontract Fund is Ownable {\r\n    using SafeMath for uint256;\r\n    \r\n    string public name = \"Slot Token\";\r\n    uint8 public decimals = 0;\r\n    string public symbol = \"SLOT\";\r\n    string public version = \"0.8\";\r\n    \r\n    uint8 constant TOKENS = 0;\r\n    uint8 constant TOTALSTAKE = 1;\r\n    \r\n    uint256 totalWithdrawn;\r\n    uint256 public totalSupply;\r\n    \r\n    mapping(address => uint256[2][]) balances;\r\n    mapping(address => uint256) withdrawals;\r\n    \r\n    event Withdrawn(\r\n            address indexed investor, \r\n            address indexed beneficiary, \r\n            uint256 weiAmount);\r\n    event Mint(\r\n            address indexed to, \r\n            uint256 amount);\r\n    event MintFinished();\r\n    event Transfer(\r\n            address indexed from, \r\n            address indexed to, \r\n            uint256 value);\r\n    event Approval(\r\n            address indexed owner, \r\n            address indexed spender, \r\n            uint256 value);\r\n            \r\n    mapping (address => mapping (address => uint256)) allowed;\r\n\r\n    bool public mintingFinished = false;\r\n\r\n    modifier canMint() {\r\n        require(!mintingFinished);\r\n        _;\r\n    }\r\n    \r\n    function Fund() payable {}\r\n    function() payable {}\r\n    \r\n    function getEtherBalance(address _owner) constant public returns (uint256 _balance) {\r\n        uint256[2][] memory snps = balances[_owner];\r\n        \r\n        if (snps.length == 0) { return 0; }\r\n        if (snps.length == 1) {\r\n            uint256 bal = snps[0][TOKENS].mul(getTotalStake()).div(totalSupply);\r\n            return bal.sub(withdrawals[_owner]);\r\n        }\r\n\r\n        uint256 balance = 0;\r\n        uint256 prevSnTotalSt = 0;\r\n        \r\n        for (uint256 i = 0 ; i < snps.length-1 ; i++) {\r\n            uint256 snapTotalStake = snps[i][TOTALSTAKE];\r\n            uint256 spanBalance = snps[i][TOKENS].mul(snapTotalStake.sub(prevSnTotalSt)).div(totalSupply);\r\n            balance = balance.add(spanBalance);\r\n            prevSnTotalSt = snapTotalStake;\r\n        }\r\n        \r\n        uint256 b = snps[snps.length-1][TOKENS].mul(getTotalStake().sub(prevSnTotalSt)).div(totalSupply);\r\n        return balance.add(b).sub(withdrawals[_owner]);\r\n    }\r\n\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {\r\n        uint256[2][] memory snps = balances[_owner];\r\n        if (snps.length == 0) { return 0; }\r\n        \r\n        return snps[snps.length-1][TOKENS];\r\n    }\r\n    \r\n    function getTotalStake() constant returns (uint256 _totalStake) {\r\n        return this.balance + totalWithdrawn;\r\n    }\r\n    \r\n    function withdrawEther(address _to, uint256 _value) public {\r\n        require(getEtherBalance(msg.sender) >= _value);\r\n        withdrawals[msg.sender] = withdrawals[msg.sender].add(_value);\r\n        totalWithdrawn = totalWithdrawn.add(_value);\r\n        _to.transfer(_value);\r\n        Withdrawn(msg.sender, _to, _value);\r\n    }\r\n    \r\n    function transfer(address _to, uint256 _value) returns (bool) {\r\n        return transferFromPrivate(msg.sender, _to, _value);\r\n    }\r\n    \r\n    function transferFromPrivate(address _from, address _to, uint256 _value) private returns (bool) {\r\n        require(balanceOf(msg.sender) >= _value);\r\n        uint256 fromTokens = balanceOf(msg.sender);\r\n        pushSnp(msg.sender, fromTokens-_value);\r\n        uint256 toTokens = balanceOf(_to);\r\n        pushSnp(_to, toTokens+_value);\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n    \r\n    function pushSnp(address _beneficiary, uint256 _amount) private {\r\n        if (balances[_beneficiary].length > 0) {\r\n            uint256 length = balances[_beneficiary].length;\r\n            assert(balances[_beneficiary][length-1][TOTALSTAKE] == 0);\r\n            balances[_beneficiary][length-1][TOTALSTAKE] = getTotalStake();\r\n        }\r\n        balances[_beneficiary].push([_amount, 0]);\r\n    }\r\n\r\n    function mint(address _to, uint256 _amount) public onlyOwner canMint returns (bool) {\r\n        pushSnp(_to, _amount.add(balanceOf(_to)));\r\n        totalSupply = totalSupply.add(_amount);\r\n        Mint(_to, _amount);\r\n        Transfer(0x0, _to, _amount);\r\n        return true;\r\n    }\r\n    \r\n\r\n    function finishMinting() onlyOwner returns (bool) {\r\n        mintingFinished = true;\r\n        MintFinished();\r\n        return true;\r\n    }\r\n    \r\n    \r\n    function approve(address _spender, uint256 _value) returns (bool) {\r\n        require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n    \r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\r\n        uint256 _allowance = allowed[_from][msg.sender];\r\n        transferFromPrivate(_from, _to, _value);\r\n        allowed[_from][msg.sender] = _allowance.sub(_value);\r\n        return true;\r\n    }\r\n    \r\n}\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n  \r\n  modifier whenPaused {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  function pause() onlyOwner whenNotPaused returns (bool) {\r\n    paused = true;\r\n    Pause();\r\n    return true;\r\n  }\r\n\r\n  function unpause() onlyOwner whenPaused returns (bool) {\r\n    paused = false;\r\n    Unpause();\r\n    return true;\r\n  }\r\n}\r\n\r\ncontract SlotCrowdsale is Ownable, Pausable {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 constant PRICE        =    1 ether;\r\n    uint256 constant TOKEN_CAP    =   10000000;\r\n    uint256 constant BOUNTY       =     250000;\r\n    uint256 constant OWNERS_STAKE =    3750000;\r\n    uint256 constant OWNERS_LOCK  =     200000;\r\n    \r\n    address public bountyWallet;\r\n    address public ownersWallet;\r\n    uint256 public lockBegunAtBlock;\r\n    bool public bountyDistributed = false;\r\n    bool public ownershipDistributed = false;\r\n    \r\n    Fund public fund;\r\n    \r\n    uint256[10] outcomes = [1000000,\r\n                             250000,\r\n                             100000,\r\n                              20000,\r\n                              10000,\r\n                               4000,\r\n                               2000,\r\n                               1250,\r\n                               1000,\r\n                                500];\r\n\r\n    uint16[10] outcomesChances = [1, 4, 10, 50, 100, 250, 500,  800, 1000, 2000];\r\n    uint16[10] addedUpChances =  [1, 5, 15, 65, 165, 415, 915, 1715, 2715, 4715];\r\n    \r\n    event OwnershipDistributed();\r\n    event BountyDistributed();\r\n\r\n    function SlotCrowdsale() public payable {\r\n        fund = new Fund();\r\n        bountyWallet = 0x00deF93928A3aAD581F39049a3BbCaaB9BbE36C8;\r\n        ownersWallet = 0x0001619153d8FE15B3FA70605859265cb0033c1a;\r\n    }\r\n\r\n    function() public payable {\r\n        buyTokenFor(msg.sender);\r\n    }\r\n\r\n    function buyTokenFor(address _beneficiary) public whenNotPaused() payable {\r\n        require(_beneficiary != 0x0);\r\n        require(msg.value >= PRICE);\r\n        \r\n        uint256 change = msg.value%PRICE;\r\n        uint256 value = msg.value.sub(change);\r\n\r\n        msg.sender.transfer(change);\r\n        ownersWallet.transfer(value);\r\n        fund.mint(_beneficiary, getAmount(value.div(PRICE)));\r\n    }\r\n    \r\n    function correctedIndex(uint8 _index, uint8 i) private constant returns (uint8) {\r\n        require(i < outcomesChances.length);        \r\n        if (outcomesChances[_index] > 0) {\r\n            return uint8((_index + i)%outcomesChances.length);\r\n        } else {\r\n            return correctedIndex(_index, i+1);\r\n        }\r\n    }\r\n    \r\n    function getIndex(uint256 _randomNumber) private returns (uint8) {\r\n        for (uint8 i = 0 ; i < uint8(outcomesChances.length) ; i++) {\r\n            if (_randomNumber < addedUpChances[i]) {\r\n                uint8 index = correctedIndex(i, 0);\r\n                assert(outcomesChances[index] != 0);\r\n                outcomesChances[index]--;\r\n                return index; \r\n            } else { \r\n                continue; \r\n            }\r\n        }\r\n    }\r\n\r\n    function getAmount(uint256 _numberOfTries) private returns (uint256) {\r\n        uint16 totalChances = addedUpChances[addedUpChances.length-1];\r\n        uint256 amount = 0;\r\n\r\n        for (uint16 i = 0 ; i < _numberOfTries; i++) {\r\n            uint256 rand = uint256(keccak256(block.blockhash(block.number-1),i)) % totalChances;\r\n            amount = amount.add(outcomes[getIndex(rand)]);\r\n        }\r\n        \r\n        return amount;\r\n    }\r\n    \r\n    function crowdsaleEnded() constant private returns (bool) {\r\n        if (fund.totalSupply() >= TOKEN_CAP) { \r\n            return true;\r\n        } else {\r\n            return false; \r\n        }\r\n    }\r\n    \r\n    function lockEnded() constant private returns (bool) {\r\n        if (block.number.sub(lockBegunAtBlock) > OWNERS_LOCK) {\r\n            return true; \r\n        } else {\r\n            return false;\r\n        }\r\n        \r\n    }\r\n        \r\n    function distributeBounty() public onlyOwner {\r\n        require(!bountyDistributed);\r\n        require(crowdsaleEnded());\r\n        \r\n        fund.mint(bountyWallet, BOUNTY);\r\n        \r\n        bountyDistributed = true;\r\n        lockBegunAtBlock = block.number;\r\n        \r\n        BountyDistributed();\r\n    }\r\n    \r\n    function distributeOwnership() public onlyOwner {\r\n        require(!ownershipDistributed);\r\n        require(crowdsaleEnded());\r\n        require(lockEnded());\r\n        \r\n        fund.mint(ownersWallet, OWNERS_STAKE);\r\n        ownershipDistributed = true;\r\n        \r\n        OwnershipDistributed();\r\n    }\r\n    \r\n    function changeOwnersWallet(address _newWallet) public onlyOwner {\r\n        require(_newWallet != 0x0);\r\n        ownersWallet = _newWallet;\r\n    }\r\n    \r\n    function changeBountyWallet(address _newWallet) public onlyOwner {\r\n        require(_newWallet != 0x0);\r\n        bountyWallet = _newWallet;\r\n    }\r\n    \r\n    function changeFundOwner(address _newOwner) public onlyOwner {\r\n        require(_newOwner != 0x0);\r\n        fund.transferOwnership(_newOwner);\r\n    }\r\n\r\n    function changeFund(address _newFund) public onlyOwner {\r\n        require(_newFund != 0x0);\r\n        fund = Fund(_newFund);\r\n    }\r\n\r\n    function destroy() public onlyOwner {\r\n        selfdestruct(msg.sender);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"withdrawEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalStake\",\"outputs\":[{\"name\":\"_totalStake\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getEtherBalance\",\"outputs\":[{\"name\":\"_balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"weiAmount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"Fund","CompilerVersion":"v0.4.17+commit.bdeb9e52","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://dc6890a45dd127dd6c2ceb5c9edc1767600fd9c9f179e00bf55c41985241455c"}]}