{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.15;\r\n\r\n\r\n/// @title Abstract ERC20 token interface\r\ncontract AbstractToken {\r\n\r\n    function totalSupply() constant returns (uint256) {}\r\n    function balanceOf(address owner) constant returns (uint256 balance);\r\n    function transfer(address to, uint256 value) returns (bool success);\r\n    function transferFrom(address from, address to, uint256 value) returns (bool success);\r\n    function approve(address spender, uint256 value) returns (bool success);\r\n    function allowance(address owner, address spender) constant returns (uint256 remaining);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event Issuance(address indexed to, uint256 value);\r\n}\r\n\r\n\r\ncontract Owned {\r\n\r\n    address public owner = msg.sender;\r\n    address public potentialOwner;\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    modifier onlyPotentialOwner {\r\n        require(msg.sender == potentialOwner);\r\n        _;\r\n    }\r\n\r\n    event NewOwner(address old, address current);\r\n    event NewPotentialOwner(address old, address potential);\r\n\r\n    function setOwner(address _new)\r\n        public\r\n        onlyOwner\r\n    {\r\n        NewPotentialOwner(owner, _new);\r\n        potentialOwner = _new;\r\n    }\r\n\r\n    function confirmOwnership()\r\n        public\r\n        onlyPotentialOwner\r\n    {\r\n        NewOwner(owner, potentialOwner);\r\n        owner = potentialOwner;\r\n        potentialOwner = 0;\r\n    }\r\n}\r\n\r\n\r\n/// Implements ERC 20 Token standard: https://github.com/ethereum/EIPs/issues/20\r\ncontract StandardToken is AbstractToken, Owned {\r\n\r\n    /*\r\n     *  Data structures\r\n     */\r\n    mapping (address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n    uint256 public totalSupply;\r\n\r\n    /*\r\n     *  Read and write storage functions\r\n     */\r\n    /// @dev Transfers sender's tokens to a given address. Returns success.\r\n    /// @param _to Address of token receiver.\r\n    /// @param _value Number of tokens to transfer.\r\n    function transfer(address _to, uint256 _value) returns (bool success) {\r\n        if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\r\n            balances[msg.sender] -= _value;\r\n            balances[_to] += _value;\r\n            Transfer(msg.sender, _to, _value);\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /// @dev Allows allowed third party to transfer tokens from one address to another. Returns success.\r\n    /// @param _from Address from where tokens are withdrawn.\r\n    /// @param _to Address to where tokens are sent.\r\n    /// @param _value Number of tokens to transfer.\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\r\n      if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\r\n            balances[_to] += _value;\r\n            balances[_from] -= _value;\r\n            allowed[_from][msg.sender] -= _value;\r\n            Transfer(_from, _to, _value);\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /// @dev Returns number of tokens owned by given address.\r\n    /// @param _owner Address of token owner.\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    /// @dev Sets approved amount of tokens for spender. Returns success.\r\n    /// @param _spender Address of allowed account.\r\n    /// @param _value Number of approved tokens.\r\n    function approve(address _spender, uint256 _value) returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /*\r\n     * Read storage functions\r\n     */\r\n    /// @dev Returns number of allowed tokens for given address.\r\n    /// @param _owner Address of token owner.\r\n    /// @param _spender Address of token spender.\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n      return allowed[_owner][_spender];\r\n    }\r\n\r\n}\r\n\r\n\r\n/// @title SafeMath contract - Math operations with safety checks.\r\n/// @author OpenZeppelin: https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts/math/SafeMath.sol\r\ncontract SafeMath {\r\n    function mul(uint a, uint b) internal returns (uint) {\r\n        uint c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint a, uint b) internal returns (uint) {\r\n        assert(b > 0);\r\n        uint c = a / b;\r\n        assert(a == b * c + a % b);\r\n        return c;\r\n    }\r\n\r\n    function sub(uint a, uint b) internal returns (uint) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint a, uint b) internal returns (uint) {\r\n        uint c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n\r\n    function pow(uint a, uint b) internal returns (uint) {\r\n        uint c = a ** b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\n/// @title Token contract - Implements Standard ERC20 with additional features.\r\n/// @author Zerion - <zerion@inbox.com>\r\ncontract Token is StandardToken, SafeMath {\r\n    // Time of the contract creation\r\n    uint public creationTime;\r\n\r\n    function Token() {\r\n        creationTime = now;\r\n    }\r\n\r\n\r\n    /// @dev Owner can transfer out any accidentally sent ERC20 tokens\r\n    function transferERC20Token(address tokenAddress)\r\n        public\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        uint balance = AbstractToken(tokenAddress).balanceOf(this);\r\n        return AbstractToken(tokenAddress).transfer(owner, balance);\r\n    }\r\n\r\n    /// @dev Multiplies the given number by 10^(decimals)\r\n    function withDecimals(uint number, uint decimals)\r\n        internal\r\n        returns (uint)\r\n    {\r\n        return mul(number, pow(10, decimals));\r\n    }\r\n}\r\n\r\n\r\n/// @title Token contract - Implements Standard ERC20 Token with Poet features.\r\n/// @author Zerion - <zerion@inbox.com>\r\ncontract PoetToken is Token {\r\n\r\n    /*\r\n     * Token meta data\r\n     */\r\n    string constant public name = \"Poet\";\r\n    string constant public symbol = \"POE\";\r\n    uint8 constant public decimals = 8;  // TODO: Confirm this number\r\n\r\n    // Address where all investors tokens created during the ICO stage initially allocated\r\n    address constant public icoAllocation = 0x1111111111111111111111111111111111111111;\r\n\r\n    // Address where Foundation tokens are allocated\r\n    address constant public foundationReserve = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n\r\n    // Number of tokens initially allocated to Foundation\r\n    uint foundationTokens;\r\n\r\n    // Store number of days in each month\r\n    mapping(uint8 => uint8) daysInMonth;\r\n\r\n    // UNIX timestamp for September 1, 2017\r\n    // It's a date when first 2% of foundation reserve will be unlocked\r\n    uint Sept1_2017 = 1504224000;\r\n\r\n    // Number of days since September 1, 2017 before all tokens will be unlocked\r\n    uint reserveDelta = 456;\r\n\r\n\r\n    /// @dev Contract constructor function sets totalSupply and allocates all ICO tokens to the icoAllocation address\r\n    function PoetToken()\r\n    {   \r\n        // Overall, 3,141,592,653 POE tokens are distributed\r\n        totalSupply = withDecimals(3141592653, decimals);\r\n\r\n        // Allocate 32% of all tokens to Foundation\r\n        foundationTokens = div(mul(totalSupply, 32), 100);\r\n        balances[foundationReserve] = foundationTokens;\r\n\r\n        // Allocate the rest to icoAllocation address\r\n        balances[icoAllocation] = sub(totalSupply, foundationTokens);\r\n\r\n        // Allow owner to distribute tokens allocated on the icoAllocation address\r\n        allowed[icoAllocation][owner] = balanceOf(icoAllocation);\r\n\r\n        // Fill mapping with numbers of days\r\n        // Note: we consider only February of 2018 that has 28 days\r\n        daysInMonth[1]  = 31; daysInMonth[2]  = 28; daysInMonth[3]  = 31;\r\n        daysInMonth[4]  = 30; daysInMonth[5]  = 31; daysInMonth[6]  = 30;\r\n        daysInMonth[7]  = 31; daysInMonth[8]  = 31; daysInMonth[9]  = 30;\r\n        daysInMonth[10] = 31; daysInMonth[11] = 30; daysInMonth[12] = 31;\r\n    }\r\n\r\n    /// @dev Sends tokens from icoAllocation to investor\r\n    function distribute(address investor, uint amount)\r\n        public\r\n        onlyOwner\r\n    {\r\n        transferFrom(icoAllocation, investor, amount);\r\n    }\r\n\r\n    /// @dev Overrides Owned.sol function\r\n    function confirmOwnership()\r\n        public\r\n        onlyPotentialOwner\r\n    {   \r\n        // Allow new owner to distribute tokens allocated on the icoAllocation address\r\n        allowed[icoAllocation][potentialOwner] = balanceOf(icoAllocation);\r\n\r\n        // Forbid old owner to distribute tokens\r\n        allowed[icoAllocation][owner] = 0;\r\n\r\n        // Forbid old owner to withdraw tokens from foundation reserve\r\n        allowed[foundationReserve][owner] = 0;\r\n\r\n        // Change owner\r\n        super.confirmOwnership();\r\n    }\r\n\r\n    /// @dev Overrides StandardToken.sol function\r\n    function allowance(address _owner, address _spender)\r\n        public\r\n        constant\r\n        returns (uint256 remaining)\r\n    {\r\n        if (_owner == foundationReserve && _spender == owner) {\r\n            return availableReserve();\r\n        }\r\n\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    /// @dev Returns max number of tokens that actually can be withdrawn from foundation reserve\r\n    function availableReserve() \r\n        public\r\n        constant\r\n        returns (uint)\r\n    {   \r\n        // No tokens should be available for withdrawal before September 1, 2017\r\n        if (now < Sept1_2017) {\r\n            return 0;\r\n        }\r\n\r\n        // Number of days passed  since September 1, 2017\r\n        uint daysPassed = div(sub(now, Sept1_2017), 1 days);\r\n\r\n        // All tokens should be unlocked if reserveDelta days passed\r\n        if (daysPassed >= reserveDelta) {\r\n            return balanceOf(foundationReserve);\r\n        }\r\n\r\n        // Percentage of unlocked tokens by the current date\r\n        uint unlockedPercentage = 0;\r\n\r\n        uint16 _days = 0;  uint8 month = 9;\r\n        while (_days <= daysPassed) {\r\n            unlockedPercentage += 2;\r\n            _days += daysInMonth[month];\r\n            month = month % 12 + 1;\r\n        }\r\n\r\n        // Number of unlocked tokens by the current date\r\n        uint unlockedTokens = div(mul(totalSupply, unlockedPercentage), 100);\r\n\r\n        // Number of tokens that should remain locked\r\n        uint lockedTokens = foundationTokens - unlockedTokens;\r\n\r\n        return balanceOf(foundationReserve) - lockedTokens;\r\n    }\r\n\r\n    /// @dev Withdraws tokens from foundation reserve\r\n    function withdrawFromReserve(uint amount)\r\n        public\r\n        onlyOwner\r\n    {   \r\n        // Allow owner to withdraw no more than this amount of tokens\r\n        allowed[foundationReserve][owner] = availableReserve();\r\n\r\n        // Withdraw tokens from foundation reserve to owner address\r\n        require(transferFrom(foundationReserve, owner, amount));\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFromReserve\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_new\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoAllocation\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"transferERC20Token\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"availableReserve\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"foundationReserve\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"potentialOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"confirmOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"creationTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"investor\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"distribute\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"old\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"current\",\"type\":\"address\"}],\"name\":\"NewOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"old\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"potential\",\"type\":\"address\"}],\"name\":\"NewPotentialOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Issuance\",\"type\":\"event\"}]","ContractName":"PoetToken","CompilerVersion":"v0.4.15+commit.bbb8e64f","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://d3fa4229ac727b78a81899225d5a83f02f641b6e37c3ef2d1e6086fd43327593"}]}