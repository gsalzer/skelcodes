{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\n// File: contracts/FinalizeAgent.sol\r\n\r\n/**\r\n * This smart contract code is Copyright 2017 TokenMarket Ltd. For more information see https://tokenmarket.net\r\n *\r\n * Licensed under the Apache License, version 2.0: https://github.com/TokenMarketNet/ico/blob/master/LICENSE.txt\r\n */\r\n\r\npragma solidity ^0.4.6;\r\n\r\n/**\r\n * Finalize agent defines what happens at the end of succeseful crowdsale.\r\n *\r\n * - Allocate tokens for founders, bounties and community\r\n * - Make tokens transferable\r\n * - etc.\r\n */\r\ncontract FinalizeAgent {\r\n\r\n  function isFinalizeAgent() public constant returns(bool) {\r\n    return true;\r\n  }\r\n\r\n  /** Return true if we can run finalizeCrowdsale() properly.\r\n   *\r\n   * This is a safety check function that doesn't allow crowdsale to begin\r\n   * unless the finalizer has been set up properly.\r\n   */\r\n  function isSane() public constant returns (bool);\r\n\r\n  /** Called once by crowdsale finalize() if the sale was success. */\r\n  function finalizeCrowdsale();\r\n\r\n}\r\n\r\n// File: contracts/zeppelin/contracts/token/ERC20Basic.sol\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) constant returns (uint256);\r\n  function transfer(address to, uint256 value) returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// File: contracts/zeppelin/contracts/token/ERC20.sol\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) returns (bool);\r\n  function approve(address spender, uint256 value) returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/FractionalERC20.sol\r\n\r\n/**\r\n * This smart contract code is Copyright 2017 TokenMarket Ltd. For more information see https://tokenmarket.net\r\n *\r\n * Licensed under the Apache License, version 2.0: https://github.com/TokenMarketNet/ico/blob/master/LICENSE.txt\r\n */\r\n\r\npragma solidity ^0.4.8;\r\n\r\n\r\n\r\n/**\r\n * A token that defines fractional units as decimals.\r\n */\r\ncontract FractionalERC20 is ERC20 {\r\n\r\n  uint public decimals;\r\n\r\n}\r\n\r\n// File: contracts/zeppelin/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner {\r\n    require(newOwner != address(0));\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/Haltable.sol\r\n\r\n/**\r\n * This smart contract code is Copyright 2017 TokenMarket Ltd. For more information see https://tokenmarket.net\r\n *\r\n * Licensed under the Apache License, version 2.0: https://github.com/TokenMarketNet/ico/blob/master/LICENSE.txt\r\n */\r\n\r\npragma solidity ^0.4.6;\r\n\r\n\r\n\r\n/*\r\n * Haltable\r\n *\r\n * Abstract contract that allows children to implement an\r\n * emergency stop mechanism. Differs from Pausable by causing a throw when in halt mode.\r\n *\r\n *\r\n * Originally envisioned in FirstBlood ICO contract.\r\n */\r\ncontract Haltable is Ownable {\r\n  bool public halted;\r\n\r\n  modifier stopInEmergency {\r\n    if (halted) throw;\r\n    _;\r\n  }\r\n\r\n  modifier stopNonOwnersInEmergency {\r\n    if (halted && msg.sender != owner) throw;\r\n    _;\r\n  }\r\n\r\n  modifier onlyInEmergency {\r\n    if (!halted) throw;\r\n    _;\r\n  }\r\n\r\n  // called by the owner on emergency, triggers stopped state\r\n  function halt() external onlyOwner {\r\n    halted = true;\r\n  }\r\n\r\n  // called by the owner on end of emergency, returns to normal state\r\n  function unhalt() external onlyOwner onlyInEmergency {\r\n    halted = false;\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/PricingStrategy.sol\r\n\r\n/**\r\n * This smart contract code is Copyright 2017 TokenMarket Ltd. For more information see https://tokenmarket.net\r\n *\r\n * Licensed under the Apache License, version 2.0: https://github.com/TokenMarketNet/ico/blob/master/LICENSE.txt\r\n */\r\n\r\npragma solidity ^0.4.6;\r\n\r\n/**\r\n * Interface for defining crowdsale pricing.\r\n */\r\ncontract PricingStrategy {\r\n\r\n  /** Interface declaration. */\r\n  function isPricingStrategy() public constant returns (bool) {\r\n    return true;\r\n  }\r\n\r\n  /** Self check if all references are correctly set.\r\n   *\r\n   * Checks that pricing strategy matches crowdsale parameters.\r\n   */\r\n  function isSane(address crowdsale) public constant returns (bool) {\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Pricing tells if this is a presale purchase or not.\r\n     @param purchaser Address of the purchaser\r\n     @return False by default, true if a presale purchaser\r\n   */\r\n  function isPresalePurchase(address purchaser) public constant returns (bool) {\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * When somebody tries to buy tokens for X eth, calculate how many tokens they get.\r\n   *\r\n   *\r\n   * @param value - What is the value of the transaction send in as wei\r\n   * @param tokensSold - how much tokens have been sold this far\r\n   * @param weiRaised - how much money has been raised this far in the main token sale - this number excludes presale\r\n   * @param msgSender - who is the investor of this transaction\r\n   * @param decimals - how many decimal units the token has\r\n   * @return Amount of tokens the investor receives\r\n   */\r\n  function calculatePrice(uint value, uint weiRaised, uint tokensSold, address msgSender, uint decimals) public constant returns (uint tokenAmount);\r\n}\r\n\r\n// File: contracts/SafeMathLib.sol\r\n\r\n/**\r\n * This smart contract code is Copyright 2017 TokenMarket Ltd. For more information see https://tokenmarket.net\r\n *\r\n * Licensed under the Apache License, version 2.0: https://github.com/TokenMarketNet/ico/blob/master/LICENSE.txt\r\n */\r\n\r\npragma solidity ^0.4.6;\r\n\r\n/**\r\n * Safe unsigned safe math.\r\n *\r\n * https://blog.aragon.one/library-driven-development-in-solidity-2bebcaf88736#.750gwtwli\r\n *\r\n * Originally from https://raw.githubusercontent.com/AragonOne/zeppelin-solidity/master/contracts/SafeMathLib.sol\r\n *\r\n * Maintained here until merged to mainline zeppelin-solidity.\r\n *\r\n */\r\nlibrary SafeMathLib {\r\n\r\n  function times(uint a, uint b) returns (uint) {\r\n    uint c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function minus(uint a, uint b) returns (uint) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function plus(uint a, uint b) returns (uint) {\r\n    uint c = a + b;\r\n    assert(c>=a);\r\n    return c;\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/CrowdsaleBase.sol\r\n\r\n/**\r\n * This smart contract code is Copyright 2017 TokenMarket Ltd. For more information see https://tokenmarket.net\r\n *\r\n * Licensed under the Apache License, version 2.0: https://github.com/TokenMarketNet/ico/blob/master/LICENSE.txt\r\n */\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * Crowdsale state machine without buy functionality.\r\n *\r\n * Implements basic state machine logic, but leaves out all buy functions,\r\n * so that subclasses can implement their own buying logic.\r\n *\r\n *\r\n * For the default buy() implementation see Crowdsale.sol.\r\n */\r\ncontract CrowdsaleBase is Haltable {\r\n\r\n  /* Max investment count when we are still allowed to change the multisig address */\r\n  uint public MAX_INVESTMENTS_BEFORE_MULTISIG_CHANGE = 5;\r\n\r\n  using SafeMathLib for uint;\r\n\r\n  /* The token we are selling */\r\n  FractionalERC20 public token;\r\n\r\n  /* How we are going to price our offering */\r\n  PricingStrategy public pricingStrategy;\r\n\r\n  /* Post-success callback */\r\n  FinalizeAgent public finalizeAgent;\r\n\r\n  /* tokens will be transfered from this address */\r\n  address public multisigWallet;\r\n\r\n  /* if the funding goal is not reached, investors may withdraw their funds */\r\n  uint public minimumFundingGoal;\r\n\r\n  /* maximum investment per address */\r\n  uint public maximalInvestment = 0;\r\n\r\n  /* Seconds since the start of the funding during which the maximalInvestemnt cap is enforced */\r\n  uint public maximalInvestmentTimeTreshold = 3*60*60;\r\n\r\n  /* the UNIX timestamp start date of the crowdsale */\r\n  uint public startsAt;\r\n\r\n  /* the UNIX timestamp end date of the crowdsale */\r\n  uint public endsAt;\r\n\r\n  /* the number of tokens already sold through this contract*/\r\n  uint public tokensSold = 0;\r\n\r\n  /* How many wei of funding we have raised */\r\n  uint public weiRaised = 0;\r\n\r\n  /* Calculate incoming funds from presale contracts and addresses */\r\n  uint public presaleWeiRaised = 0;\r\n\r\n  /* How many distinct addresses have invested */\r\n  uint public investorCount = 0;\r\n\r\n  /* How much wei we have returned back to the contract after a failed crowdfund. */\r\n  uint public loadedRefund = 0;\r\n\r\n  /* How much wei we have given back to investors.*/\r\n  uint public weiRefunded = 0;\r\n\r\n  /* Has this crowdsale been finalized */\r\n  bool public finalized;\r\n\r\n  /** How much ETH each address has invested to this crowdsale */\r\n  mapping (address => uint256) public investedAmountOf;\r\n\r\n  /** How much tokens this crowdsale has credited for each investor address */\r\n  mapping (address => uint256) public tokenAmountOf;\r\n\r\n  /** Addresses that are allowed to invest even before ICO offical opens. For testing, for ICO partners, etc. */\r\n  mapping (address => bool) public earlyParticipantWhitelist;\r\n\r\n  /** This is for manul testing for the interaction from owner wallet. You can set it to any value and inspect this in blockchain explorer to see that crowdsale interaction works. */\r\n  uint public ownerTestValue;\r\n\r\n  /** State machine\r\n   *\r\n   * - Preparing: All contract initialization calls and variables have not been set yet\r\n   * - Prefunding: We have not passed start time yet\r\n   * - Funding: Active crowdsale\r\n   * - Success: Minimum funding goal reached\r\n   * - Failure: Minimum funding goal not reached before ending time\r\n   * - Finalized: The finalized has been called and succesfully executed\r\n   * - Refunding: Refunds are loaded on the contract for reclaim.\r\n   */\r\n  enum State{Unknown, Preparing, PreFunding, Funding, Success, Failure, Finalized, Refunding}\r\n\r\n  // A new investment was made\r\n  event Invested(address investor, uint weiAmount, uint tokenAmount, uint128 customerId);\r\n\r\n  // Refund was processed for a contributor\r\n  event Refund(address investor, uint weiAmount);\r\n\r\n  // The rules were changed what kind of investments we accept\r\n  event InvestmentPolicyChanged(bool newRequireCustomerId, bool newRequiredSignedAddress, bool newRequireWhitelistedAddress, address newSignerAddress, address whitelisterAddress);\r\n\r\n  // Address early participation whitelist status changed\r\n  event Whitelisted(address addr, bool status);\r\n\r\n  // Crowdsale end time has been changed\r\n  event EndsAtChanged(uint newEndsAt);\r\n\r\n  State public testState;\r\n\r\n  function CrowdsaleBase(address _token, PricingStrategy _pricingStrategy, address _multisigWallet, uint _start, uint _end, uint _minimumFundingGoal, uint _maxInvestment) {\r\n\r\n    owner = msg.sender;\r\n\r\n    token = FractionalERC20(_token);\r\n\r\n    setPricingStrategy(_pricingStrategy);\r\n\r\n    multisigWallet = _multisigWallet;\r\n    if(multisigWallet == 0) {\r\n        throw;\r\n    }\r\n\r\n    if(_start == 0) {\r\n        throw;\r\n    }\r\n\r\n    startsAt = _start;\r\n\r\n    if(_end == 0) {\r\n        throw;\r\n    }\r\n\r\n    endsAt = _end;\r\n\r\n    // Don't mess the dates\r\n    if(startsAt >= endsAt) {\r\n        throw;\r\n    }\r\n\r\n    // Minimum funding goal can be zero\r\n    minimumFundingGoal = _minimumFundingGoal;\r\n\r\n    maximalInvestment = _maxInvestment;\r\n  }\r\n\r\n  /**\r\n   * Don't expect to just send in money and get tokens.\r\n   */\r\n  function() payable {\r\n    throw;\r\n  }\r\n\r\n  /**\r\n   * Make an investment.\r\n   *\r\n   * Crowdsale must be running for one to invest.\r\n   * We must have not pressed the emergency brake.\r\n   *\r\n   * @param receiver The Ethereum address who receives the tokens\r\n   * @param customerId (optional) UUID v4 to track the successful payments on the server side'\r\n   *\r\n   * @return tokenAmount How mony tokens were bought\r\n   */\r\n  function investInternal(address receiver, uint128 customerId) stopInEmergency internal returns(uint tokensBought) {\r\n\r\n    // Determine if it's a good time to accept investment from this participant\r\n    if(getState() == State.PreFunding) {\r\n      // Are we whitelisted for early deposit\r\n      if(!earlyParticipantWhitelist[receiver]) {\r\n        throw;\r\n      }\r\n    } else if(getState() == State.Funding) {\r\n      // Retail participants can only come in when the crowdsale is running\r\n      // pass\r\n    } else {\r\n      // Unwanted state\r\n      throw;\r\n    }\r\n\r\n    uint weiAmount = msg.value;\r\n\r\n    // Account presale sales separately, so that they do not count against pricing tranches\r\n    uint tokenAmount = pricingStrategy.calculatePrice(weiAmount, weiRaised - presaleWeiRaised, tokensSold, msg.sender, token.decimals());\r\n\r\n    // Dust transaction\r\n    require(tokenAmount != 0);\r\n\r\n    if(investedAmountOf[receiver] == 0) {\r\n       // A new investor\r\n       investorCount++;\r\n    }\r\n\r\n    // Update investor\r\n    investedAmountOf[receiver] = investedAmountOf[receiver].plus(weiAmount);\r\n\r\n    if(maximalInvestment > 0 && now < (startsAt + maximalInvestmentTimeTreshold)) {\r\n      require(investedAmountOf[receiver] <= maximalInvestment);\r\n    }\r\n\r\n    tokenAmountOf[receiver] = tokenAmountOf[receiver].plus(tokenAmount);\r\n\r\n    // Update totals\r\n    weiRaised = weiRaised.plus(weiAmount);\r\n    tokensSold = tokensSold.plus(tokenAmount);\r\n\r\n    if(pricingStrategy.isPresalePurchase(receiver)) {\r\n        presaleWeiRaised = presaleWeiRaised.plus(weiAmount);\r\n    }\r\n\r\n    // Check that we did not bust the cap\r\n    require(!isBreakingCap(weiAmount, tokenAmount, weiRaised, tokensSold));\r\n\r\n    assignTokens(receiver, tokenAmount);\r\n\r\n    // Pocket the money, or fail the crowdsale if we for some reason cannot send the money to our multisig\r\n    if(!multisigWallet.send(weiAmount)) throw;\r\n\r\n    // Tell us invest was success\r\n    Invested(receiver, weiAmount, tokenAmount, customerId);\r\n\r\n    return tokenAmount;\r\n  }\r\n\r\n  /**\r\n   * Finalize a succcesful crowdsale.\r\n   *\r\n   * The owner can triggre a call the contract that provides post-crowdsale actions, like releasing the tokens.\r\n   */\r\n  function finalize() public inState(State.Success) onlyOwner stopInEmergency {\r\n\r\n    // Already finalized\r\n    if(finalized) {\r\n      throw;\r\n    }\r\n\r\n    // Finalizing is optional. We only call it if we are given a finalizing agent.\r\n    if(address(finalizeAgent) != 0) {\r\n      finalizeAgent.finalizeCrowdsale();\r\n    }\r\n\r\n    finalized = true;\r\n  }\r\n\r\n  /**\r\n   * Allow to (re)set finalize agent.\r\n   *\r\n   * Design choice: no state restrictions on setting this, so that we can fix fat finger mistakes.\r\n   */\r\n  function setFinalizeAgent(FinalizeAgent addr) onlyOwner {\r\n    finalizeAgent = addr;\r\n\r\n    // Don't allow setting bad agent\r\n    if(!finalizeAgent.isFinalizeAgent()) {\r\n      throw;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Allow crowdsale owner to close early or extend the crowdsale.\r\n   *\r\n   * This is useful e.g. for a manual soft cap implementation:\r\n   * - after X amount is reached determine manual closing\r\n   *\r\n   * This may put the crowdsale to an invalid state,\r\n   * but we trust owners know what they are doing.\r\n   *\r\n   */\r\n  function setEndsAt(uint time) onlyOwner {\r\n\r\n    if(now > time) {\r\n      throw; // Don't change past\r\n    }\r\n\r\n    if(startsAt > time) {\r\n      throw; // Prevent human mistakes\r\n    }\r\n\r\n    endsAt = time;\r\n    EndsAtChanged(endsAt);\r\n  }\r\n\r\n  /**\r\n   * Allow to (re)set pricing strategy.\r\n   *\r\n   * Design choice: no state restrictions on the set, so that we can fix fat finger mistakes.\r\n   */\r\n  function setPricingStrategy(PricingStrategy _pricingStrategy) onlyOwner {\r\n    pricingStrategy = _pricingStrategy;\r\n\r\n    // Don't allow setting bad agent\r\n    if(!pricingStrategy.isPricingStrategy()) {\r\n      throw;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Allow to change the team multisig address in the case of emergency.\r\n   *\r\n   * This allows to save a deployed crowdsale wallet in the case the crowdsale has not yet begun\r\n   * (we have done only few test transactions). After the crowdsale is going\r\n   * then multisig address stays locked for the safety reasons.\r\n   */\r\n  function setMultisig(address addr) public onlyOwner {\r\n\r\n    // Change\r\n    if(investorCount > MAX_INVESTMENTS_BEFORE_MULTISIG_CHANGE) {\r\n      throw;\r\n    }\r\n\r\n    multisigWallet = addr;\r\n  }\r\n\r\n  /**\r\n   * Allow load refunds back on the contract for the refunding.\r\n   *\r\n   * The team can transfer the funds back on the smart contract in the case the minimum goal was not reached..\r\n   */\r\n  function loadRefund() public payable inState(State.Failure) {\r\n    if(msg.value == 0) throw;\r\n    loadedRefund = loadedRefund.plus(msg.value);\r\n  }\r\n\r\n  /**\r\n   * Investors can claim refund.\r\n   *\r\n   * Note that any refunds from proxy buyers should be handled separately,\r\n   * and not through this contract.\r\n   */\r\n  function refund() public inState(State.Refunding) {\r\n    uint256 weiValue = investedAmountOf[msg.sender];\r\n    if (weiValue == 0) throw;\r\n    investedAmountOf[msg.sender] = 0;\r\n    weiRefunded = weiRefunded.plus(weiValue);\r\n    Refund(msg.sender, weiValue);\r\n    if (!msg.sender.send(weiValue)) throw;\r\n  }\r\n\r\n  /**\r\n   * @return true if the crowdsale has raised enough money to be a successful.\r\n   */\r\n  function isMinimumGoalReached() public constant returns (bool reached) {\r\n    return weiRaised >= minimumFundingGoal;\r\n  }\r\n\r\n  /**\r\n   * Check if the contract relationship looks good.\r\n   */\r\n  function isFinalizerSane() public constant returns (bool sane) {\r\n    return finalizeAgent.isSane();\r\n  }\r\n\r\n  /**\r\n   * Check if the contract relationship looks good.\r\n   */\r\n  function isPricingSane() public constant returns (bool sane) {\r\n    return pricingStrategy.isSane(address(this));\r\n  }\r\n\r\n  /**\r\n   * Crowdfund state machine management.\r\n   *\r\n   * We make it a function and do not assign the result to a variable, so there is no chance of the variable being stale.\r\n   */\r\n  function getState() public constant returns (State) {\r\n    if(finalized) return State.Finalized;\r\n    else if (address(finalizeAgent) == 0) return State.Preparing;\r\n    else if (!finalizeAgent.isSane()) return State.Preparing;\r\n    else if (!pricingStrategy.isSane(address(this))) return State.Preparing;\r\n    else if (block.timestamp < startsAt) return State.PreFunding;\r\n    else if (block.timestamp <= endsAt && !isCrowdsaleFull()) return State.Funding;\r\n    else if (isMinimumGoalReached()) return State.Success;\r\n    else if (!isMinimumGoalReached() && weiRaised > 0 && loadedRefund >= weiRaised) return State.Refunding;\r\n    else return State.Failure;\r\n  }\r\n\r\n  /** This is for manual testing of multisig wallet interaction */\r\n  function setOwnerTestValue(uint val) onlyOwner {\r\n    ownerTestValue = val;\r\n  }\r\n\r\n  /**\r\n   * Allow addresses to do early participation.\r\n   *\r\n   * TODO: Fix spelling error in the name\r\n   */\r\n  function setEarlyParicipantWhitelist(address addr, bool status) onlyOwner {\r\n    earlyParticipantWhitelist[addr] = status;\r\n    Whitelisted(addr, status);\r\n  }\r\n\r\n\r\n  /** Interface marker. */\r\n  function isCrowdsale() public constant returns (bool) {\r\n    return true;\r\n  }\r\n\r\n  //\r\n  // Modifiers\r\n  //\r\n\r\n  /** Modified allowing execution only if the crowdsale is currently running.  */\r\n  modifier inState(State state) {\r\n    if(getState() != state) throw;\r\n    _;\r\n  }\r\n\r\n\r\n  //\r\n  // Abstract functions\r\n  //\r\n\r\n  /**\r\n   * Check if the current invested breaks our cap rules.\r\n   *\r\n   *\r\n   * The child contract must define their own cap setting rules.\r\n   * We allow a lot of flexibility through different capping strategies (ETH, token count)\r\n   * Called from invest().\r\n   *\r\n   * @param weiAmount The amount of wei the investor tries to invest in the current transaction\r\n   * @param tokenAmount The amount of tokens we try to give to the investor in the current transaction\r\n   * @param weiRaisedTotal What would be our total raised balance after this transaction\r\n   * @param tokensSoldTotal What would be our total sold tokens count after this transaction\r\n   *\r\n   * @return true if taking this investment would break our cap rules\r\n   */\r\n  function isBreakingCap(uint weiAmount, uint tokenAmount, uint weiRaisedTotal, uint tokensSoldTotal) constant returns (bool limitBroken);\r\n\r\n  /**\r\n   * Check if the current crowdsale is full and we can no longer sell any tokens.\r\n   */\r\n  function isCrowdsaleFull() public constant returns (bool);\r\n\r\n  /**\r\n   * Create new tokens or transfer issued tokens to the investor depending on the cap model.\r\n   */\r\n  function assignTokens(address receiver, uint tokenAmount) internal;\r\n}\r\n\r\n// File: contracts/Crowdsale.sol\r\n\r\n/**\r\n * This smart contract code is Copyright 2017 TokenMarket Ltd. For more information see https://tokenmarket.net\r\n *\r\n * Licensed under the Apache License, version 2.0: https://github.com/TokenMarketNet/ico/blob/master/LICENSE.txt\r\n */\r\n\r\npragma solidity ^0.4.8;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * Abstract base contract for token sales with the default buy entry points.\r\n *\r\n * Handle\r\n * - start and end dates\r\n * - accepting investments\r\n * - minimum funding goal and refund\r\n * - various statistics during the crowdfund\r\n * - different pricing strategies\r\n * - different investment policies (require server side customer id, allow only whitelisted addresses)\r\n *\r\n * Does not Handle\r\n *\r\n * - Token allocation (minting vs. transfer)\r\n * - Cap rules\r\n *\r\n */\r\ncontract Crowdsale is CrowdsaleBase {\r\n\r\n  /* Do we need to have unique contributor id for each customer */\r\n  bool public requireCustomerId;\r\n\r\n  /**\r\n    * Do we verify that contributor has been cleared on the server side (accredited investors only).\r\n    * This method was first used in FirstBlood crowdsale to ensure all contributors have accepted terms on sale (on the web).\r\n    */\r\n  bool public requiredSignedAddress;\r\n\r\n  /* Server side address that signed allowed contributors (Ethereum addresses) that can participate the crowdsale */\r\n  address public signerAddress;\r\n\r\n  /* Do we need to have unique contributor id for each customer */\r\n  bool public requireWhitelistedAddress;\r\n\r\n  /* Account that is allowed to whitelist addesses */\r\n  address public whitelisterAddress;\r\n\r\n  /* Mapping of whitelisted accounts */\r\n  mapping (address => bool) whitelist;\r\n\r\n\r\n  function Crowdsale(address _token, PricingStrategy _pricingStrategy, address _multisigWallet, uint _start, uint _end, uint _minimumFundingGoal, uint _maxInvestment) CrowdsaleBase(_token, _pricingStrategy, _multisigWallet, _start, _end, _minimumFundingGoal, _maxInvestment) {\r\n  }\r\n\r\n  /**\r\n   * Preallocate tokens for the early investors.\r\n   *\r\n   * Preallocated tokens have been sold before the actual crowdsale opens.\r\n   * This function mints the tokens and moves the crowdsale needle.\r\n   *\r\n   * Investor count is not handled; it is assumed this goes for multiple investors\r\n   * and the token distribution happens outside the smart contract flow.\r\n   *\r\n   * No money is exchanged, as the crowdsale team already have received the payment.\r\n   *\r\n   * @param fullTokens tokens as full tokens - decimal places added internally\r\n   * @param weiPrice Price of a single full token in wei\r\n   *\r\n   */\r\n  function preallocate(address receiver, uint fullTokens, uint weiPrice) public onlyOwner {\r\n\r\n    uint tokenAmount = fullTokens * 10**token.decimals();\r\n    uint weiAmount = weiPrice * fullTokens; // This can be also 0, we give out tokens for free\r\n\r\n    weiRaised = weiRaised.plus(weiAmount);\r\n    tokensSold = tokensSold.plus(tokenAmount);\r\n\r\n    investedAmountOf[receiver] = investedAmountOf[receiver].plus(weiAmount);\r\n    tokenAmountOf[receiver] = tokenAmountOf[receiver].plus(tokenAmount);\r\n\r\n    assignTokens(receiver, tokenAmount);\r\n\r\n    // Tell us invest was success\r\n    Invested(receiver, weiAmount, tokenAmount, 0);\r\n  }\r\n\r\n  /**\r\n   * Allow anonymous contributions to this crowdsale.\r\n   */\r\n  function investWithSignedAddress(address addr, uint128 customerId, uint8 v, bytes32 r, bytes32 s) public payable {\r\n    if(requireWhitelistedAddress) {\r\n      require(whitelist[addr]);\r\n    }\r\n\r\n    bytes32 hash = sha256(addr);\r\n    if (ecrecover(hash, v, r, s) != signerAddress) throw;\r\n    if(customerId == 0) throw;  // UUIDv4 sanity check\r\n    investInternal(addr, customerId);\r\n  }\r\n\r\n  /**\r\n   * Track who is the customer making the payment so we can send thank you email.\r\n   */\r\n  function investWithCustomerId(address addr, uint128 customerId) public payable {\r\n    if(requireWhitelistedAddress) {\r\n      require(whitelist[addr]);\r\n    }\r\n\r\n    if(requiredSignedAddress) throw; // Crowdsale allows only server-side signed participants\r\n    if(customerId == 0) throw;  // UUIDv4 sanity check\r\n    investInternal(addr, customerId);\r\n  }\r\n\r\n  /**\r\n   * Allow anonymous contributions to this crowdsale.\r\n   */\r\n  function invest(address addr) public payable {\r\n    if(requireWhitelistedAddress) {\r\n      require(whitelist[addr]);\r\n    }\r\n\r\n    if(requireCustomerId) throw; // Crowdsale needs to track participants for thank you email\r\n    if(requiredSignedAddress) throw; // Crowdsale allows only server-side signed participants\r\n    investInternal(addr, 0);\r\n  }\r\n\r\n  /**\r\n   * Invest to tokens, recognize the payer and clear his address.\r\n   *\r\n   */\r\n  function buyWithSignedAddress(uint128 customerId, uint8 v, bytes32 r, bytes32 s) public payable {\r\n    investWithSignedAddress(msg.sender, customerId, v, r, s);\r\n  }\r\n\r\n  /**\r\n   * Invest to tokens, recognize the payer.\r\n   *\r\n   */\r\n  function buyWithCustomerIdWithChecksum(uint128 customerId, bytes1 checksum) public payable {\r\n    // see customerid.py\r\n    if (bytes1(sha3(customerId)) != checksum) throw;\r\n    investWithCustomerId(msg.sender, customerId);\r\n  }\r\n\r\n  /**\r\n   * Legacy API signature.\r\n   */\r\n  function buyWithCustomerId(uint128 customerId) public payable {\r\n    investWithCustomerId(msg.sender, customerId);\r\n  }\r\n\r\n  /**\r\n   * The basic entry point to participate the crowdsale process.\r\n   *\r\n   * Pay for funding, get invested tokens back in the sender address.\r\n   */\r\n  function buy() public payable {\r\n    invest(msg.sender);\r\n  }\r\n\r\n\r\n  /*\r\n   * Allow sending ETH directyl to the contract\r\n   *\r\n   */\r\n  function () public payable {\r\n    buy();\r\n  }\r\n\r\n\r\n  /**\r\n   * Set policy do we need to have server-side customer ids for the investments.\r\n   *\r\n   */\r\n  function setRequireCustomerId(bool value) onlyOwner {\r\n    requireCustomerId = value;\r\n    InvestmentPolicyChanged(requireCustomerId, requiredSignedAddress, requireWhitelistedAddress, signerAddress, whitelisterAddress);\r\n  }\r\n\r\n  /**\r\n   * Set policy if all investors must be cleared on the server side first.\r\n   *\r\n   * This is e.g. for the accredited investor clearing.\r\n   *\r\n   */\r\n  function setRequireSignedAddress(bool value, address _signerAddress) onlyOwner {\r\n    requiredSignedAddress = value;\r\n    signerAddress = _signerAddress;\r\n    InvestmentPolicyChanged(requireCustomerId, requiredSignedAddress, requireWhitelistedAddress, signerAddress, whitelisterAddress);\r\n  }\r\n\r\n  /**\r\n   * Set policy do we need to work only with whitelisted accounts.\r\n   *\r\n   */\r\n  function setRequireWhitelistedAddress(bool value, address _whitelistAddress) onlyOwner {\r\n    requireWhitelistedAddress = value;\r\n    whitelisterAddress = _whitelistAddress;\r\n    InvestmentPolicyChanged(requireCustomerId, requiredSignedAddress, requireWhitelistedAddress, signerAddress, whitelisterAddress);\r\n  }\r\n\r\n  /*\r\n   * Add KYC'ed addresses to the whitelist\r\n   */\r\n  function addToWhitelist(address[] _addresses) public onlyWhitelister {\r\n     for (uint32 i = 0; i < _addresses.length; i++) {\r\n         whitelist[_addresses[i]] = true;\r\n     }\r\n  }\r\n\r\n  function removeFromWhitelist(address[] _addresses) public onlyWhitelister {\r\n    for (uint32 i = 0; i < _addresses.length; i++) {\r\n        whitelist[_addresses[i]] = false;\r\n    }\r\n  }\r\n\r\n  function isWhitelistedAddress(address _address) public constant returns(bool whitelisted) {\r\n    return whitelist[_address];\r\n  }\r\n\r\n  modifier onlyWhitelister() {\r\n    require(msg.sender == whitelisterAddress);\r\n    _;\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/zeppelin/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: contracts/zeppelin/contracts/token/BasicToken.sol\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) returns (bool) {\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/zeppelin/contracts/token/StandardToken.sol\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amout of tokens to be transfered\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\r\n    var _allowance = allowed[_from][msg.sender];\r\n\r\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n    // require (_value <= _allowance);\r\n\r\n    balances[_to] = balances[_to].add(_value);\r\n    balances[_from] = balances[_from].sub(_value);\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) returns (bool) {\r\n\r\n    // To change the approve amount you first have to reduce the addresses`\r\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n    //  already 0 to mitigate the race condition described here:\r\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifing the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/StandardTokenExt.sol\r\n\r\n/**\r\n * This smart contract code is Copyright 2017 TokenMarket Ltd. For more information see https://tokenmarket.net\r\n *\r\n * Licensed under the Apache License, version 2.0: https://github.com/TokenMarketNet/ico/blob/master/LICENSE.txt\r\n */\r\n\r\npragma solidity ^0.4.14;\r\n\r\n\r\n\r\n\r\n/**\r\n * Standard EIP-20 token with an interface marker.\r\n *\r\n * @notice Interface marker is used by crowdsale contracts to validate that addresses point a good token contract.\r\n *\r\n */\r\ncontract StandardTokenExt is StandardToken {\r\n\r\n  /* Interface declaration */\r\n  function isToken() public constant returns (bool weAre) {\r\n    return true;\r\n  }\r\n}\r\n\r\n// File: contracts/MintableToken.sol\r\n\r\n/**\r\n * This smart contract code is Copyright 2017 TokenMarket Ltd. For more information see https://tokenmarket.net\r\n *\r\n * Licensed under the Apache License, version 2.0: https://github.com/TokenMarketNet/ico/blob/master/LICENSE.txt\r\n */\r\n\r\n\r\n\r\n\r\n\r\n\r\npragma solidity ^0.4.6;\r\n\r\n/**\r\n * A token that can increase its supply by another contract.\r\n *\r\n * This allows uncapped crowdsale by dynamically increasing the supply when money pours in.\r\n * Only mint agents, contracts whitelisted by owner, can mint new tokens.\r\n *\r\n */\r\ncontract MintableToken is StandardTokenExt, Ownable {\r\n\r\n  using SafeMathLib for uint;\r\n\r\n  bool public mintingFinished = false;\r\n\r\n  /** List of agents that are allowed to create new tokens */\r\n  mapping (address => bool) public mintAgents;\r\n\r\n  event MintingAgentChanged(address addr, bool state);\r\n  event Minted(address receiver, uint amount);\r\n\r\n  /**\r\n   * Create new tokens and allocate them to an address..\r\n   *\r\n   * Only callably by a crowdsale contract (mint agent).\r\n   */\r\n  function mint(address receiver, uint amount) onlyMintAgent canMint public {\r\n    totalSupply = totalSupply.plus(amount);\r\n    balances[receiver] = balances[receiver].plus(amount);\r\n\r\n    // This will make the mint transaction apper in EtherScan.io\r\n    // We can remove this after there is a standardized minting event\r\n    Transfer(0, receiver, amount);\r\n  }\r\n\r\n  /**\r\n   * Owner can allow a crowdsale contract to mint new tokens.\r\n   */\r\n  function setMintAgent(address addr, bool state) onlyOwner canMint public {\r\n    mintAgents[addr] = state;\r\n    MintingAgentChanged(addr, state);\r\n  }\r\n\r\n  modifier onlyMintAgent() {\r\n    // Only crowdsale contracts are allowed to mint new tokens\r\n    if(!mintAgents[msg.sender]) {\r\n        throw;\r\n    }\r\n    _;\r\n  }\r\n\r\n  /** Make sure we are not done yet. */\r\n  modifier canMint() {\r\n    if(mintingFinished) throw;\r\n    _;\r\n  }\r\n}\r\n\r\n// File: contracts/ReleasableToken.sol\r\n\r\n/**\r\n * This smart contract code is Copyright 2017 TokenMarket Ltd. For more information see https://tokenmarket.net\r\n *\r\n * Licensed under the Apache License, version 2.0: https://github.com/TokenMarketNet/ico/blob/master/LICENSE.txt\r\n */\r\n\r\npragma solidity ^0.4.8;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * Define interface for releasing the token transfer after a successful crowdsale.\r\n */\r\ncontract ReleasableToken is ERC20, Ownable {\r\n\r\n  /* The finalizer contract that allows unlift the transfer limits on this token */\r\n  address public releaseAgent;\r\n\r\n  /** A crowdsale contract can release us to the wild if ICO success. If false we are are in transfer lock up period.*/\r\n  bool public released = false;\r\n\r\n  /** Map of agents that are allowed to transfer tokens regardless of the lock down period. These are crowdsale contracts and possible the team multisig itself. */\r\n  mapping (address => bool) public transferAgents;\r\n\r\n  /**\r\n   * Limit token transfer until the crowdsale is over.\r\n   *\r\n   */\r\n  modifier canTransfer(address _sender) {\r\n\r\n    if(!released) {\r\n        if(!transferAgents[_sender]) {\r\n            throw;\r\n        }\r\n    }\r\n\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * Set the contract that can call release and make the token transferable.\r\n   *\r\n   * Design choice. Allow reset the release agent to fix fat finger mistakes.\r\n   */\r\n  function setReleaseAgent(address addr) onlyOwner inReleaseState(false) public {\r\n\r\n    // We don't do interface check here as we might want to a normal wallet address to act as a release agent\r\n    releaseAgent = addr;\r\n  }\r\n\r\n  /**\r\n   * Owner can allow a particular address (a crowdsale contract) to transfer tokens despite the lock up period.\r\n   */\r\n  function setTransferAgent(address addr, bool state) onlyOwner inReleaseState(false) public {\r\n    transferAgents[addr] = state;\r\n  }\r\n\r\n  /**\r\n   * One way function to release the tokens to the wild.\r\n   *\r\n   * Can be called only from the release agent that is the final ICO contract. It is only called if the crowdsale has been success (first milestone reached).\r\n   */\r\n  function releaseTokenTransfer() public onlyReleaseAgent {\r\n    released = true;\r\n  }\r\n\r\n  /** The function can be called only before or after the tokens have been releasesd */\r\n  modifier inReleaseState(bool releaseState) {\r\n    if(releaseState != released) {\r\n        throw;\r\n    }\r\n    _;\r\n  }\r\n\r\n  /** The function can be called only by a whitelisted release agent. */\r\n  modifier onlyReleaseAgent() {\r\n    if(msg.sender != releaseAgent) {\r\n        throw;\r\n    }\r\n    _;\r\n  }\r\n\r\n  function transfer(address _to, uint _value) canTransfer(msg.sender) returns (bool success) {\r\n    // Call StandardToken.transfer()\r\n   return super.transfer(_to, _value);\r\n  }\r\n\r\n  function transferFrom(address _from, address _to, uint _value) canTransfer(_from) returns (bool success) {\r\n    // Call StandardToken.transferForm()\r\n    return super.transferFrom(_from, _to, _value);\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/UpgradeAgent.sol\r\n\r\n/**\r\n * This smart contract code is Copyright 2017 TokenMarket Ltd. For more information see https://tokenmarket.net\r\n *\r\n * Licensed under the Apache License, version 2.0: https://github.com/TokenMarketNet/ico/blob/master/LICENSE.txt\r\n */\r\n\r\npragma solidity ^0.4.6;\r\n\r\n/**\r\n * Upgrade agent interface inspired by Lunyr.\r\n *\r\n * Upgrade agent transfers tokens to a new contract.\r\n * Upgrade agent itself can be the token contract, or just a middle man contract doing the heavy lifting.\r\n */\r\ncontract UpgradeAgent {\r\n\r\n  uint public originalSupply;\r\n\r\n  /** Interface marker */\r\n  function isUpgradeAgent() public constant returns (bool) {\r\n    return true;\r\n  }\r\n\r\n  function upgradeFrom(address _from, uint256 _value) public;\r\n\r\n}\r\n\r\n// File: contracts/UpgradeableToken.sol\r\n\r\n/**\r\n * This smart contract code is Copyright 2017 TokenMarket Ltd. For more information see https://tokenmarket.net\r\n *\r\n * Licensed under the Apache License, version 2.0: https://github.com/TokenMarketNet/ico/blob/master/LICENSE.txt\r\n */\r\n\r\npragma solidity ^0.4.8;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * A token upgrade mechanism where users can opt-in amount of tokens to the next smart contract revision.\r\n *\r\n * First envisioned by Golem and Lunyr projects.\r\n */\r\ncontract UpgradeableToken is StandardTokenExt {\r\n\r\n  /** Contract / person who can set the upgrade path. This can be the same as team multisig wallet, as what it is with its default value. */\r\n  address public upgradeMaster;\r\n\r\n  /** The next contract where the tokens will be migrated. */\r\n  UpgradeAgent public upgradeAgent;\r\n\r\n  /** How many tokens we have upgraded by now. */\r\n  uint256 public totalUpgraded;\r\n\r\n  /**\r\n   * Upgrade states.\r\n   *\r\n   * - NotAllowed: The child contract has not reached a condition where the upgrade can bgun\r\n   * - WaitingForAgent: Token allows upgrade, but we don't have a new agent yet\r\n   * - ReadyToUpgrade: The agent is set, but not a single token has been upgraded yet\r\n   * - Upgrading: Upgrade agent is set and the balance holders can upgrade their tokens\r\n   *\r\n   */\r\n  enum UpgradeState {Unknown, NotAllowed, WaitingForAgent, ReadyToUpgrade, Upgrading}\r\n\r\n  /**\r\n   * Somebody has upgraded some of his tokens.\r\n   */\r\n  event Upgrade(address indexed _from, address indexed _to, uint256 _value);\r\n\r\n  /**\r\n   * New upgrade agent available.\r\n   */\r\n  event UpgradeAgentSet(address agent);\r\n\r\n  /**\r\n   * Do not allow construction without upgrade master set.\r\n   */\r\n  function UpgradeableToken(address _upgradeMaster) {\r\n    upgradeMaster = _upgradeMaster;\r\n  }\r\n\r\n  /**\r\n   * Allow the token holder to upgrade some of their tokens to a new contract.\r\n   */\r\n  function upgrade(uint256 value) public {\r\n\r\n      UpgradeState state = getUpgradeState();\r\n      if(!(state == UpgradeState.ReadyToUpgrade || state == UpgradeState.Upgrading)) {\r\n        // Called in a bad state\r\n        throw;\r\n      }\r\n\r\n      // Validate input value.\r\n      if (value == 0) throw;\r\n\r\n      balances[msg.sender] = balances[msg.sender].sub(value);\r\n\r\n      // Take tokens out from circulation\r\n      totalSupply = totalSupply.sub(value);\r\n      totalUpgraded = totalUpgraded.add(value);\r\n\r\n      // Upgrade agent reissues the tokens\r\n      upgradeAgent.upgradeFrom(msg.sender, value);\r\n      Upgrade(msg.sender, upgradeAgent, value);\r\n  }\r\n\r\n  /**\r\n   * Set an upgrade agent that handles\r\n   */\r\n  function setUpgradeAgent(address agent) external {\r\n\r\n      if(!canUpgrade()) {\r\n        // The token is not yet in a state that we could think upgrading\r\n        throw;\r\n      }\r\n\r\n      if (agent == 0x0) throw;\r\n      // Only a master can designate the next agent\r\n      if (msg.sender != upgradeMaster) throw;\r\n      // Upgrade has already begun for an agent\r\n      if (getUpgradeState() == UpgradeState.Upgrading) throw;\r\n\r\n      upgradeAgent = UpgradeAgent(agent);\r\n\r\n      // Bad interface\r\n      if(!upgradeAgent.isUpgradeAgent()) throw;\r\n      // Make sure that token supplies match in source and target\r\n      if (upgradeAgent.originalSupply() != totalSupply) throw;\r\n\r\n      UpgradeAgentSet(upgradeAgent);\r\n  }\r\n\r\n  /**\r\n   * Get the state of the token upgrade.\r\n   */\r\n  function getUpgradeState() public constant returns(UpgradeState) {\r\n    if(!canUpgrade()) return UpgradeState.NotAllowed;\r\n    else if(address(upgradeAgent) == 0x00) return UpgradeState.WaitingForAgent;\r\n    else if(totalUpgraded == 0) return UpgradeState.ReadyToUpgrade;\r\n    else return UpgradeState.Upgrading;\r\n  }\r\n\r\n  /**\r\n   * Change the upgrade master.\r\n   *\r\n   * This allows us to set a new owner for the upgrade mechanism.\r\n   */\r\n  function setUpgradeMaster(address master) public {\r\n      if (master == 0x0) throw;\r\n      if (msg.sender != upgradeMaster) throw;\r\n      upgradeMaster = master;\r\n  }\r\n\r\n  /**\r\n   * Child contract can enable to provide the condition when the upgrade can begun.\r\n   */\r\n  function canUpgrade() public constant returns(bool) {\r\n     return true;\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/CrowdsaleToken.sol\r\n\r\n/**\r\n * This smart contract code is Copyright 2017 TokenMarket Ltd. For more information see https://tokenmarket.net\r\n *\r\n * Licensed under the Apache License, version 2.0: https://github.com/TokenMarketNet/ico/blob/master/LICENSE.txt\r\n */\r\n\r\npragma solidity ^0.4.8;\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * A crowdsaled token.\r\n *\r\n * An ERC-20 token designed specifically for crowdsales with investor protection and further development path.\r\n *\r\n * - The token transfer() is disabled until the crowdsale is over\r\n * - The token contract gives an opt-in upgrade path to a new contract\r\n * - The same token can be part of several crowdsales through approve() mechanism\r\n * - The token can be capped (supply set in the constructor) or uncapped (crowdsale contract can mint new tokens)\r\n *\r\n */\r\ncontract CrowdsaleToken is ReleasableToken, MintableToken, UpgradeableToken {\r\n\r\n  /** Name and symbol were updated. */\r\n  event UpdatedTokenInformation(string newName, string newSymbol);\r\n\r\n  string public name;\r\n\r\n  string public symbol;\r\n\r\n  uint public decimals;\r\n\r\n  /**\r\n   * Construct the token.\r\n   *\r\n   * This token must be created through a team multisig wallet, so that it is owned by that wallet.\r\n   *\r\n   * @param _name Token name\r\n   * @param _symbol Token symbol - should be all caps\r\n   * @param _initialSupply How many tokens we start with\r\n   * @param _decimals Number of decimal places\r\n   * @param _mintable Are new tokens created over the crowdsale or do we distribute only the initial supply? Note that when the token becomes transferable the minting always ends.\r\n   */\r\n  function CrowdsaleToken(string _name, string _symbol, uint _initialSupply, uint _decimals, bool _mintable)\r\n    UpgradeableToken(msg.sender) {\r\n\r\n    // Create any address, can be transferred\r\n    // to team multisig via changeOwner(),\r\n    // also remember to call setUpgradeMaster()\r\n    owner = msg.sender;\r\n\r\n    name = _name;\r\n    symbol = _symbol;\r\n\r\n    totalSupply = _initialSupply;\r\n\r\n    decimals = _decimals;\r\n\r\n    // Create initially all balance on the team multisig\r\n    balances[owner] = totalSupply;\r\n\r\n    if(totalSupply > 0) {\r\n      Minted(owner, totalSupply);\r\n    }\r\n\r\n    // No more new supply allowed after the token creation\r\n    if(!_mintable) {\r\n      mintingFinished = true;\r\n      if(totalSupply == 0) {\r\n        throw; // Cannot create a token without supply and no minting\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * When token is released to be transferable, enforce no new tokens can be created.\r\n   */\r\n  function releaseTokenTransfer() public onlyReleaseAgent {\r\n    mintingFinished = true;\r\n    super.releaseTokenTransfer();\r\n  }\r\n\r\n  /**\r\n   * Allow upgrade agent functionality kick in only if the crowdsale was success.\r\n   */\r\n  function canUpgrade() public constant returns(bool) {\r\n    return released && super.canUpgrade();\r\n  }\r\n\r\n  /**\r\n   * Owner can update token information here.\r\n   *\r\n   * It is often useful to conceal the actual token association, until\r\n   * the token operations, like central issuance or reissuance have been completed.\r\n   *\r\n   * This function allows the token owner to rename the token after the operations\r\n   * have been completed and then point the audience to use the token contract.\r\n   */\r\n  function setTokenInformation(string _name, string _symbol) onlyOwner {\r\n    name = _name;\r\n    symbol = _symbol;\r\n\r\n    UpdatedTokenInformation(name, symbol);\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/BonusFinalizeAgent.sol\r\n\r\n/**\r\n * This smart contract code is Copyright 2017 TokenMarket Ltd. For more information see https://tokenmarket.net\r\n *\r\n * Licensed under the Apache License, version 2.0: https://github.com/TokenMarketNet/ico/blob/master/LICENSE.txt\r\n */\r\n\r\npragma solidity ^0.4.6;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * At the end of the successful crowdsale allocate % bonus of tokens to the team.\r\n *\r\n * Unlock tokens.\r\n *\r\n * BonusAllocationFinal must be set as the minting agent for the MintableToken.\r\n *\r\n */\r\ncontract BonusFinalizeAgent is FinalizeAgent {\r\n\r\n  using SafeMathLib for uint;\r\n\r\n  CrowdsaleToken public token;\r\n  Crowdsale public crowdsale;\r\n\r\n  /** Total percent of tokens minted to the team at the end of the sale as base points (0.0001) */\r\n  uint public bonusBasePoints;\r\n\r\n  /** Where we move the tokens at the end of the sale. */\r\n  address public teamMultisig;\r\n\r\n  /* How much bonus tokens we allocated */\r\n  uint public allocatedBonus;\r\n\r\n  function BonusFinalizeAgent(CrowdsaleToken _token, Crowdsale _crowdsale, uint _bonusBasePoints, address _teamMultisig) {\r\n    token = _token;\r\n    crowdsale = _crowdsale;\r\n    if(address(crowdsale) == 0) {\r\n      throw;\r\n    }\r\n\r\n    teamMultisig = _teamMultisig;\r\n    if(address(teamMultisig) == 0) {\r\n      throw;\r\n    }\r\n\r\n    bonusBasePoints = _bonusBasePoints;\r\n  }\r\n\r\n  /* Can we run finalize properly */\r\n  function isSane() public constant returns (bool) {\r\n    return (token.mintAgents(address(this)) == true) && (token.releaseAgent() == address(this));\r\n  }\r\n\r\n  /** Called once by crowdsale finalize() if the sale was success. */\r\n  function finalizeCrowdsale() {\r\n    if(msg.sender != address(crowdsale)) {\r\n      throw;\r\n    }\r\n\r\n    // How many % of tokens the founders and others get\r\n    uint tokensSold = crowdsale.tokensSold();\r\n    allocatedBonus = tokensSold.times(bonusBasePoints) / 10000;\r\n\r\n    // move tokens to the team multisig wallet\r\n    token.mint(teamMultisig, allocatedBonus);\r\n\r\n    // Make token transferable\r\n    token.releaseTokenTransfer();\r\n  }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"finalizeCrowdsale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isFinalizeAgent\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allocatedBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusBasePoints\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isSane\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsale\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamMultisig\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_crowdsale\",\"type\":\"address\"},{\"name\":\"_bonusBasePoints\",\"type\":\"uint256\"},{\"name\":\"_teamMultisig\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"BonusFinalizeAgent","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000b6ee9668771a79be7967ee29a63d4184f80971430000000000000000000000006267b5376c809445c9432bd9f14a3808b00eae2c0000000000000000000000000000000000000000000000000000000000003a9800000000000000000000000035d82234a9f2cfe1dc2fb7665c785e1755cfd559","Library":"SafeMathLib:db57a3dd6d4d05423d5ca9c30838a2413ed2458c","SwarmSource":"bzzr://ec526caf30c71360311045c26658025001939ae5f5b07be28d7dc257f2bf2af4"}]}