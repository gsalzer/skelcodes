{"status":"1","message":"OK","result":[{"SourceCode":"/* Token - simple token for PreICO and ICO\r\n   Copyright (C) 2017  Sergey Sherkunov <leinlawun@leinlawun.org>\r\n\r\n   This file is part of Token.\r\n\r\n   Token is free software: you can redistribute it and/or modify\r\n   it under the terms of the GNU General Public License as published by\r\n   the Free Software Foundation, either version 3 of the License, or\r\n   (at your option) any later version.\r\n\r\n   This program is distributed in the hope that it will be useful,\r\n   but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n   GNU General Public License for more details.\r\n\r\n   You should have received a copy of the GNU General Public License\r\n   along with this program.  If not, see <https://www.gnu.org/licenses/>.  */\r\n\r\npragma solidity ^0.4.18;\r\n\r\nlibrary SafeMath {\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n\r\n    assert (c >= a);\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    assert(b <= a);\r\n\r\n    c = a - b;\r\n  }\r\n\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a * b;\r\n\r\n    assert (c / a == b);\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a / b;\r\n  }\r\n}\r\n\r\ncontract ERC20MintableToken {\r\n  using SafeMath for uint256;\r\n\r\n  address public owner;\r\n\r\n  Minter public minter;\r\n\r\n  string constant public name = \"PayAll\";\r\n\r\n  string constant public symbol = \"PLL\";\r\n\r\n  uint8 constant public decimals = 0;\r\n\r\n  uint256 public totalSupply;\r\n\r\n  mapping (address => uint256) public balanceOf;\r\n\r\n  mapping (address => mapping (address => uint256)) public allowance;\r\n\r\n  event Transfer(address indexed _oldTokensHolder,\r\n                 address indexed _newTokensHolder, uint256 _tokensNumber);\r\n\r\n  //https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n  event Transfer(address indexed _tokensSpender,\r\n                 address indexed _oldTokensHolder,\r\n                 address indexed _newTokensHolder, uint256 _tokensNumber);\r\n\r\n  event Approval(address indexed _tokensHolder, address indexed _tokensSpender,\r\n                 uint256 _newTokensNumber);\r\n\r\n  //https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n  event Approval(address indexed _tokensHolder, address indexed _tokensSpender,\r\n                 uint256 _oldTokensNumber, uint256 _newTokensNumber);\r\n\r\n  modifier onlyOwner {\r\n    require (owner == msg.sender);\r\n\r\n    _;\r\n  }\r\n\r\n  modifier onlyMinter {\r\n    require (minter == msg.sender);\r\n\r\n    _;\r\n  }\r\n\r\n  //https://vessenes.com/the-erc20-short-address-attack-explained\r\n  //https://blog.golemproject.net/how-to-find-10m-by-just-reading-blockchain-6ae9d39fcd95\r\n  //https://ericrafaloff.com/analyzing-the-erc20-short-address-attack\r\n  modifier checkPayloadSize(uint256 size) {\r\n     require (msg.data.length == size + 4);\r\n\r\n     _;\r\n  }\r\n\r\n  function setOwner(address _owner) public onlyOwner {\r\n    uint256 _allowance = allowance[this][owner];\r\n\r\n    _approve(this, owner, 0);\r\n\r\n    owner = _owner;\r\n\r\n    _approve(this, owner, _allowance);\r\n  }\r\n\r\n  function setMinter(Minter _minter) public onlyOwner {\r\n    uint256 _allowance = allowance[this][minter];\r\n\r\n    _approve(this, minter, 0);\r\n\r\n    minter = _minter;\r\n\r\n    _approve(this, minter, _allowance);\r\n  }\r\n\r\n  function ERC20MintableToken(Minter _minter) public {\r\n    owner = tx.origin;\r\n    minter = _minter;\r\n  }\r\n\r\n  function _transfer(address _oldTokensHolder, address _newTokensHolder,\r\n                     uint256 _tokensNumber) private {\r\n    balanceOf[_oldTokensHolder] =\r\n      balanceOf[_oldTokensHolder].sub(_tokensNumber);\r\n\r\n    balanceOf[_newTokensHolder] =\r\n      balanceOf[_newTokensHolder].add(_tokensNumber);\r\n\r\n    Transfer(_oldTokensHolder, _newTokensHolder, _tokensNumber);\r\n  }\r\n\r\n  //https://vessenes.com/the-erc20-short-address-attack-explained\r\n  //https://blog.golemproject.net/how-to-find-10m-by-just-reading-blockchain-6ae9d39fcd95\r\n  //https://ericrafaloff.com/analyzing-the-erc20-short-address-attack\r\n  function transfer(address _newTokensHolder, uint256 _tokensNumber) public\r\n                   checkPayloadSize(2 * 32) returns (bool) {\r\n    _transfer(msg.sender, _newTokensHolder, _tokensNumber);\r\n\r\n    return true;\r\n  }\r\n\r\n  //https://vessenes.com/the-erc20-short-address-attack-explained\r\n  //https://blog.golemproject.net/how-to-find-10m-by-just-reading-blockchain-6ae9d39fcd95\r\n  //https://ericrafaloff.com/analyzing-the-erc20-short-address-attack\r\n  //https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n  function transferFrom(address _oldTokensHolder, address _newTokensHolder,\r\n                        uint256 _tokensNumber) public checkPayloadSize(3 * 32)\r\n                       returns (bool) {\r\n    allowance[_oldTokensHolder][msg.sender] =\r\n      allowance[_oldTokensHolder][msg.sender].sub(_tokensNumber);\r\n\r\n    _transfer(_oldTokensHolder, _newTokensHolder, _tokensNumber);\r\n\r\n    Transfer(msg.sender, _oldTokensHolder, _newTokensHolder, _tokensNumber);\r\n\r\n    return true;\r\n  }\r\n\r\n  function _approve(address _tokensHolder, address _tokensSpender,\r\n                    uint256 _newTokensNumber) private {\r\n    allowance[_tokensHolder][_tokensSpender] = _newTokensNumber;\r\n\r\n    Approval(msg.sender, _tokensSpender, _newTokensNumber);\r\n  }\r\n\r\n  //https://vessenes.com/the-erc20-short-address-attack-explained\r\n  //https://blog.golemproject.net/how-to-find-10m-by-just-reading-blockchain-6ae9d39fcd95\r\n  //https://ericrafaloff.com/analyzing-the-erc20-short-address-attack\r\n  //https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n  function approve(address _tokensSpender, uint256 _newTokensNumber) public\r\n                  checkPayloadSize(2 * 32) returns (bool) {\r\n    require (allowance[msg.sender][_tokensSpender] == 0 ||\r\n             _newTokensNumber == 0);\r\n\r\n    _approve(msg.sender, _tokensSpender, _newTokensNumber);\r\n\r\n    return true;\r\n  }\r\n\r\n  //https://vessenes.com/the-erc20-short-address-attack-explained\r\n  //https://blog.golemproject.net/how-to-find-10m-by-just-reading-blockchain-6ae9d39fcd95\r\n  //https://ericrafaloff.com/analyzing-the-erc20-short-address-attack\r\n  //https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n  function approve(address _tokensSpender, uint256 _oldTokensNumber,\r\n                   uint256 _newTokensNumber) public checkPayloadSize(3 * 32)\r\n                  returns (bool) {\r\n    require (allowance[msg.sender][_tokensSpender] == _oldTokensNumber);\r\n\r\n    _approve(msg.sender, _tokensSpender, _newTokensNumber);\r\n\r\n    Approval(msg.sender, _tokensSpender, _oldTokensNumber, _newTokensNumber);\r\n\r\n    return true;\r\n  }\r\n\r\n  function () public {\r\n    revert();\r\n  }\r\n\r\n  function mint(uint256 _tokensNumber) public onlyMinter {\r\n    totalSupply = totalSupply.add(_tokensNumber);\r\n\r\n    balanceOf[this] = balanceOf[this].add(_tokensNumber);\r\n\r\n    uint256 _allowance = allowance[this][msg.sender].add(_tokensNumber);\r\n\r\n    _approve(this, minter, _allowance);\r\n\r\n    _approve(this, owner, _allowance);\r\n  }\r\n\r\n  function burnUndistributed() public onlyMinter {\r\n    _approve(this, minter, 0);\r\n\r\n    _approve(this, owner, 0);\r\n\r\n    totalSupply = totalSupply.sub(balanceOf[this]);\r\n\r\n    balanceOf[this] = 0;\r\n  }\r\n}\r\n\r\ncontract Minter {\r\n  using SafeMath for uint256;\r\n\r\n  enum MinterState {\r\n    PreICOWait,\r\n    PreICOStarted,\r\n    ICOWait,\r\n    ICOStarted,\r\n    Over\r\n  }\r\n\r\n  struct Tokensale {\r\n    uint256 startTime;\r\n    uint256 endTime;\r\n    uint256 tokensMinimumNumberForBuy;\r\n    uint256 tokensCost;\r\n    uint256 tokensNumberForMint;\r\n    bool tokensMinted;\r\n    uint256 tokensStepOneBountyTime;\r\n    uint256 tokensStepTwoBountyTime;\r\n    uint256 tokensStepThreeBountyTime;\r\n    uint256 tokensStepFourBountyTime;\r\n    uint8 tokensStepOneBounty;\r\n    uint8 tokensStepTwoBounty;\r\n    uint8 tokensStepThreeBounty;\r\n    uint8 tokensStepFourBounty;\r\n  }\r\n\r\n  address public owner;\r\n\r\n  ERC20MintableToken public token;\r\n\r\n  Tokensale public PreICO =\r\n    Tokensale(1511211600, 1513803600, 150, 340000000000000 wei, 10000000, false,\r\n              1 weeks, 2 weeks, 3 weeks, 4 weeks + 2 days, 25, 15, 10, 5);\r\n\r\n  Tokensale public ICO =\r\n    Tokensale(1526850000, 1529528400, 150, 340000000000000 wei, 290000000,\r\n              false, 1 weeks, 2 weeks, 3 weeks, 4 weeks + 3 days, 20, 10, 5, 0);\r\n\r\n  bool public paused = false;\r\n\r\n  modifier onlyOwner {\r\n    require (owner == msg.sender);\r\n\r\n    _;\r\n  }\r\n\r\n  modifier onlyDuringTokensale {\r\n    MinterState _minterState_ = _minterState();\r\n\r\n    require (_minterState_ == MinterState.PreICOStarted ||\r\n             _minterState_ == MinterState.ICOStarted);\r\n\r\n    _;\r\n  }\r\n\r\n  modifier onlyAfterTokensaleOver {\r\n    MinterState _minterState_ = _minterState();\r\n\r\n    require (_minterState_ == MinterState.Over);\r\n\r\n    _;\r\n  }\r\n\r\n  modifier onlyNotPaused {\r\n    require (!paused);\r\n\r\n    _;\r\n  }\r\n\r\n  modifier checkLimitsToBuyTokens {\r\n    MinterState _minterState_ = _minterState();\r\n\r\n    require (_minterState_ == MinterState.PreICOStarted &&\r\n             PreICO.tokensMinimumNumberForBuy <= msg.value / PreICO.tokensCost ||\r\n             _minterState_ == MinterState.ICOStarted &&\r\n             ICO.tokensMinimumNumberForBuy <= msg.value / ICO.tokensCost);\r\n\r\n    _;\r\n  }\r\n\r\n  function setOwner(address _owner) public onlyOwner {\r\n    owner = _owner;\r\n  }\r\n\r\n  function setPaused(bool _paused) public onlyOwner {\r\n    paused = _paused;\r\n  }\r\n\r\n  function Minter() public {\r\n    owner = msg.sender;\r\n    token = new ERC20MintableToken(this);\r\n  }\r\n\r\n  function _minterState() private constant returns (MinterState) {\r\n    if (PreICO.startTime > now) {\r\n      return MinterState.PreICOWait;\r\n    } else if (PreICO.endTime > now) {\r\n      return MinterState.PreICOStarted;\r\n    } else if (ICO.startTime > now) {\r\n      return MinterState.ICOWait;\r\n    } else if (ICO.endTime > now) {\r\n      return MinterState.ICOStarted;\r\n    } else {\r\n      return MinterState.Over;\r\n    }\r\n  }\r\n\r\n  function _tokensaleCountTokensNumber(Tokensale _tokensale, uint256 _timestamp,\r\n                                       uint256 _wei, uint256 _totalTokensNumber,\r\n                                       uint256 _totalTokensNumberAllowance)\r\n                                      private pure\r\n                                      returns (uint256, uint256) {\r\n    uint256 _tokensNumber = _wei.div(_tokensale.tokensCost);\r\n\r\n    require (_tokensNumber >= _tokensale.tokensMinimumNumberForBuy);\r\n\r\n    uint256 _aviableTokensNumber =\r\n      _totalTokensNumber <= _totalTokensNumberAllowance ?\r\n        _totalTokensNumber : _totalTokensNumberAllowance;\r\n\r\n    uint256 _restWei = 0;\r\n\r\n    if (_tokensNumber >= _aviableTokensNumber) {\r\n      uint256 _restTokensNumber = _tokensNumber.sub(_aviableTokensNumber);\r\n\r\n      _restWei = _restTokensNumber.mul(_tokensale.tokensCost);\r\n\r\n      _tokensNumber = _aviableTokensNumber;\r\n    } else {\r\n      uint256 _timePassed = _timestamp.sub(_tokensale.startTime);\r\n\r\n      uint256 _tokensNumberBounty = 0;\r\n\r\n      if (_timePassed < _tokensale.tokensStepOneBountyTime) {\r\n        _tokensNumberBounty = _tokensNumber.mul(_tokensale.tokensStepOneBounty)\r\n                                           .div(100);\r\n      } else if (_timePassed < _tokensale.tokensStepTwoBountyTime) {\r\n        _tokensNumberBounty = _tokensNumber.mul(_tokensale.tokensStepTwoBounty)\r\n                                           .div(100);\r\n      } else if (_timePassed < _tokensale.tokensStepThreeBountyTime) {\r\n        _tokensNumberBounty =\r\n          _tokensNumber.mul(_tokensale.tokensStepThreeBounty).div(100);\r\n      } else if (_timePassed < _tokensale.tokensStepFourBountyTime) {\r\n        _tokensNumberBounty = _tokensNumber.mul(_tokensale.tokensStepFourBounty)\r\n                                           .div(100);\r\n      }\r\n\r\n      _tokensNumber = _tokensNumber.add(_tokensNumberBounty);\r\n\r\n      if (_tokensNumber > _aviableTokensNumber) {\r\n        _tokensNumber = _aviableTokensNumber;\r\n      }\r\n    }\r\n\r\n    return (_tokensNumber, _restWei);\r\n  }\r\n\r\n  function _tokensaleStart(Tokensale storage _tokensale) private {\r\n    if (!_tokensale.tokensMinted) {\r\n      token.mint(_tokensale.tokensNumberForMint);\r\n\r\n      _tokensale.tokensMinted = true;\r\n    }\r\n\r\n    uint256 _totalTokensNumber = token.balanceOf(token);\r\n\r\n    uint256 _totalTokensNumberAllowance = token.allowance(token, this);\r\n\r\n    var (_tokensNumber, _restWei) =\r\n      _tokensaleCountTokensNumber(_tokensale, now, msg.value,\r\n                                  _totalTokensNumber,\r\n                                  _totalTokensNumberAllowance);\r\n\r\n    token.transferFrom(token, msg.sender, _tokensNumber);\r\n\r\n    if (_restWei > 0) {\r\n      msg.sender.transfer(_restWei);\r\n    }\r\n  }\r\n\r\n  function _tokensaleSelect() private constant returns (Tokensale storage) {\r\n    MinterState _minterState_ = _minterState();\r\n\r\n    if (_minterState_ == MinterState.PreICOStarted) {\r\n      return PreICO;\r\n    } else if (_minterState_ == MinterState.ICOStarted) {\r\n      return ICO;\r\n    } else {\r\n      revert();\r\n    }\r\n  }\r\n\r\n  function () public payable onlyDuringTokensale onlyNotPaused\r\n    checkLimitsToBuyTokens {\r\n    Tokensale storage _tokensale = _tokensaleSelect();\r\n\r\n    _tokensaleStart(_tokensale);\r\n  }\r\n\r\n  function mint(uint256 _tokensNumber) public onlyOwner onlyDuringTokensale {\r\n    token.mint(_tokensNumber);\r\n  }\r\n\r\n  function burnUndistributed() public onlyAfterTokensaleOver {\r\n    token.burnUndistributed();\r\n  }\r\n\r\n  function withdraw() public onlyOwner {\r\n    msg.sender.transfer(this.balance);\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minter\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokensSpender\",\"type\":\"address\"},{\"name\":\"_newTokensNumber\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_oldTokensHolder\",\"type\":\"address\"},{\"name\":\"_newTokensHolder\",\"type\":\"address\"},{\"name\":\"_tokensNumber\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"burnUndistributed\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokensSpender\",\"type\":\"address\"},{\"name\":\"_oldTokensNumber\",\"type\":\"uint256\"},{\"name\":\"_newTokensNumber\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokensNumber\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newTokensHolder\",\"type\":\"address\"},{\"name\":\"_tokensNumber\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minter\",\"type\":\"address\"}],\"name\":\"setMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_minter\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_oldTokensHolder\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_newTokensHolder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokensNumber\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_tokensSpender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_oldTokensHolder\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_newTokensHolder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokensNumber\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_tokensHolder\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_tokensSpender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_newTokensNumber\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_tokensHolder\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_tokensSpender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_oldTokensNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_newTokensNumber\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"ERC20MintableToken","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000006a802a8bc6b0fa3ce5f5f46eebcfb4d4935c83f7","Library":"","SwarmSource":"bzzr://651a97c64aa33644f03e2dae4e1e48b44316db559251feef2a22f3a78d1680d3"}]}