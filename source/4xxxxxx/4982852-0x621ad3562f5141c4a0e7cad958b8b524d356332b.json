{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    Unpause();\r\n  }\r\n}\r\n\r\n\r\n/// @title Interface for contracts conforming to ERC-721: Deed Standard\r\n/// @author William Entriken (https://phor.net), et al.\r\n/// @dev Specification at https://github.com/ethereum/EIPs/pull/841 (DRAFT)\r\ninterface ERC721 {\r\n\r\n    // COMPLIANCE WITH ERC-165 (DRAFT) /////////////////////////////////////////\r\n\r\n    /// @dev ERC-165 (draft) interface signature for itself\r\n    // bytes4 internal constant INTERFACE_SIGNATURE_ERC165 = // 0x01ffc9a7\r\n    //     bytes4(keccak256('supportsInterface(bytes4)'));\r\n\r\n    /// @dev ERC-165 (draft) interface signature for ERC721\r\n    // bytes4 internal constant INTERFACE_SIGNATURE_ERC721 = // 0xda671b9b\r\n    //     bytes4(keccak256('ownerOf(uint256)')) ^\r\n    //     bytes4(keccak256('countOfDeeds()')) ^\r\n    //     bytes4(keccak256('countOfDeedsByOwner(address)')) ^\r\n    //     bytes4(keccak256('deedOfOwnerByIndex(address,uint256)')) ^\r\n    //     bytes4(keccak256('approve(address,uint256)')) ^\r\n    //     bytes4(keccak256('takeOwnership(uint256)'));\r\n\r\n    /// @notice Query a contract to see if it supports a certain interface\r\n    /// @dev Returns `true` the interface is supported and `false` otherwise,\r\n    ///  returns `true` for INTERFACE_SIGNATURE_ERC165 and\r\n    ///  INTERFACE_SIGNATURE_ERC721, see ERC-165 for other interface signatures.\r\n    function supportsInterface(bytes4 _interfaceID) external pure returns (bool);\r\n\r\n    // PUBLIC QUERY FUNCTIONS //////////////////////////////////////////////////\r\n\r\n    /// @notice Find the owner of a deed\r\n    /// @param _deedId The identifier for a deed we are inspecting\r\n    /// @dev Deeds assigned to zero address are considered destroyed, and\r\n    ///  queries about them do throw.\r\n    /// @return The non-zero address of the owner of deed `_deedId`, or `throw`\r\n    ///  if deed `_deedId` is not tracked by this contract\r\n    function ownerOf(uint256 _deedId) external view returns (address _owner);\r\n\r\n    /// @notice Count deeds tracked by this contract\r\n    /// @return A count of the deeds tracked by this contract, where each one of\r\n    ///  them has an assigned and queryable owner\r\n    function countOfDeeds() public view returns (uint256 _count);\r\n\r\n    /// @notice Count all deeds assigned to an owner\r\n    /// @dev Throws if `_owner` is the zero address, representing destroyed deeds.\r\n    /// @param _owner An address where we are interested in deeds owned by them\r\n    /// @return The number of deeds owned by `_owner`, possibly zero\r\n    function countOfDeedsByOwner(address _owner) public view returns (uint256 _count);\r\n\r\n    /// @notice Enumerate deeds assigned to an owner\r\n    /// @dev Throws if `_index` >= `countOfDeedsByOwner(_owner)` or if\r\n    ///  `_owner` is the zero address, representing destroyed deeds.\r\n    /// @param _owner An address where we are interested in deeds owned by them\r\n    /// @param _index A counter between zero and `countOfDeedsByOwner(_owner)`,\r\n    ///  inclusive\r\n    /// @return The identifier for the `_index`th deed assigned to `_owner`,\r\n    ///   (sort order not specified)\r\n    function deedOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256 _deedId);\r\n\r\n    // TRANSFER MECHANISM //////////////////////////////////////////////////////\r\n\r\n    /// @dev This event emits when ownership of any deed changes by any\r\n    ///  mechanism. This event emits when deeds are created (`from` == 0) and\r\n    ///  destroyed (`to` == 0). Exception: during contract creation, any\r\n    ///  transfers may occur without emitting `Transfer`.\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed deedId);\r\n\r\n    /// @dev This event emits on any successful call to\r\n    ///  `approve(address _spender, uint256 _deedId)`. Exception: does not emit\r\n    ///  if an owner revokes approval (`_to` == 0x0) on a deed with no existing\r\n    ///  approval.\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed deedId);\r\n\r\n    /// @notice Approve a new owner to take your deed, or revoke approval by\r\n    ///  setting the zero address. You may `approve` any number of times while\r\n    ///  the deed is assigned to you, only the most recent approval matters.\r\n    /// @dev Throws if `msg.sender` does not own deed `_deedId` or if `_to` ==\r\n    ///  `msg.sender`.\r\n    /// @param _deedId The deed you are granting ownership of\r\n    function approve(address _to, uint256 _deedId) external;\r\n\r\n    /// @notice Become owner of a deed for which you are currently approved\r\n    /// @dev Throws if `msg.sender` is not approved to become the owner of\r\n    ///  `deedId` or if `msg.sender` currently owns `_deedId`.\r\n    /// @param _deedId The deed that is being transferred\r\n    function takeOwnership(uint256 _deedId) external;\r\n    \r\n    // SPEC EXTENSIONS /////////////////////////////////////////////////////////\r\n    \r\n    /// @notice Transfer a deed to a new owner.\r\n    /// @dev Throws if `msg.sender` does not own deed `_deedId` or if\r\n    ///  `_to` == 0x0.\r\n    /// @param _to The address of the new owner.\r\n    /// @param _deedId The deed you are transferring.\r\n    function transfer(address _to, uint256 _deedId) external;\r\n}\r\n\r\n\r\n/// @title The internal clock auction functionality.\r\n/// Inspired by CryptoKitties' clock auction\r\ncontract ClockAuctionBase {\r\n\r\n    // Address of the ERC721 contract this auction is linked to.\r\n    ERC721 public deedContract;\r\n\r\n    // Fee per successful auction in 1/1000th of a percentage.\r\n    uint256 public fee;\r\n    \r\n    // Total amount of ether yet to be paid to auction beneficiaries.\r\n    uint256 public outstandingEther = 0 ether;\r\n    \r\n    // Amount of ether yet to be paid per beneficiary.\r\n    mapping (address => uint256) public addressToEtherOwed;\r\n    \r\n    /// @dev Represents a deed auction.\r\n    /// Care has been taken to ensure the auction fits in\r\n    /// two 256-bit words.\r\n    struct Auction {\r\n        address seller;\r\n        uint128 startPrice;\r\n        uint128 endPrice;\r\n        uint64 duration;\r\n        uint64 startedAt;\r\n    }\r\n\r\n    mapping (uint256 => Auction) identifierToAuction;\r\n    \r\n    // Events\r\n    event AuctionCreated(address indexed seller, uint256 indexed deedId, uint256 startPrice, uint256 endPrice, uint256 duration);\r\n    event AuctionSuccessful(address indexed buyer, uint256 indexed deedId, uint256 totalPrice);\r\n    event AuctionCancelled(uint256 indexed deedId);\r\n    \r\n    /// @dev Modifier to check whether the value can be stored in a 64 bit uint.\r\n    modifier fitsIn64Bits(uint256 _value) {\r\n        require (_value == uint256(uint64(_value)));\r\n        _;\r\n    }\r\n    \r\n    /// @dev Modifier to check whether the value can be stored in a 128 bit uint.\r\n    modifier fitsIn128Bits(uint256 _value) {\r\n        require (_value == uint256(uint128(_value)));\r\n        _;\r\n    }\r\n    \r\n    function ClockAuctionBase(address _deedContractAddress, uint256 _fee) public {\r\n        deedContract = ERC721(_deedContractAddress);\r\n        \r\n        // Contract must indicate support for ERC721 through its interface signature.\r\n        require(deedContract.supportsInterface(0xda671b9b));\r\n        \r\n        // Fee must be between 0 and 100%.\r\n        require(0 <= _fee && _fee <= 100000);\r\n        fee = _fee;\r\n    }\r\n    \r\n    /// @dev Checks whether the given auction is active.\r\n    /// @param auction The auction to check for activity.\r\n    function _activeAuction(Auction storage auction) internal view returns (bool) {\r\n        return auction.startedAt > 0;\r\n    }\r\n    \r\n    /// @dev Put the deed into escrow, thereby taking ownership of it.\r\n    /// @param _deedId The identifier of the deed to place into escrow.\r\n    function _escrow(uint256 _deedId) internal {\r\n        // Throws if the transfer fails\r\n        deedContract.takeOwnership(_deedId);\r\n    }\r\n    \r\n    /// @dev Create the auction.\r\n    /// @param _deedId The identifier of the deed to create the auction for.\r\n    /// @param auction The auction to create.\r\n    function _createAuction(uint256 _deedId, Auction auction) internal {\r\n        // Add the auction to the auction mapping.\r\n        identifierToAuction[_deedId] = auction;\r\n        \r\n        // Trigger auction created event.\r\n        AuctionCreated(auction.seller, _deedId, auction.startPrice, auction.endPrice, auction.duration);\r\n    }\r\n    \r\n    /// @dev Bid on an auction.\r\n    /// @param _buyer The address of the buyer.\r\n    /// @param _value The value sent by the sender (in ether).\r\n    /// @param _deedId The identifier of the deed to bid on.\r\n    function _bid(address _buyer, uint256 _value, uint256 _deedId) internal {\r\n        Auction storage auction = identifierToAuction[_deedId];\r\n        \r\n        // The auction must be active.\r\n        require(_activeAuction(auction));\r\n        \r\n        // Calculate the auction's current price.\r\n        uint256 price = _currentPrice(auction);\r\n        \r\n        // Make sure enough funds were sent.\r\n        require(_value >= price);\r\n        \r\n        address seller = auction.seller;\r\n    \r\n        if (price > 0) {\r\n            uint256 totalFee = _calculateFee(price);\r\n            uint256 proceeds = price - totalFee;\r\n            \r\n            // Assign the proceeds to the seller.\r\n            // We do not send the proceeds directly, as to prevent\r\n            // malicious sellers from denying auctions (and burning\r\n            // the buyer's gas).\r\n            _assignProceeds(seller, proceeds);\r\n        }\r\n        \r\n        AuctionSuccessful(_buyer, _deedId, price);\r\n        \r\n        // The bid was won!\r\n        _winBid(seller, _buyer, _deedId, price);\r\n        \r\n        // Remove the auction (we do this at the end, as\r\n        // winBid might require some additional information\r\n        // that will be removed when _removeAuction is\r\n        // called. As we do not transfer funds here, we do\r\n        // not have to worry about re-entry attacks.\r\n        _removeAuction(_deedId);\r\n    }\r\n\r\n    /// @dev Perform the bid win logic (in this case: transfer the deed).\r\n    /// @param _seller The address of the seller.\r\n    /// @param _winner The address of the winner.\r\n    /// @param _deedId The identifier of the deed.\r\n    /// @param _price The price the auction was bought at.\r\n    function _winBid(address _seller, address _winner, uint256 _deedId, uint256 _price) internal {\r\n        _transfer(_winner, _deedId);\r\n    }\r\n    \r\n    /// @dev Cancel an auction.\r\n    /// @param _deedId The identifier of the deed for which the auction should be cancelled.\r\n    /// @param auction The auction to cancel.\r\n    function _cancelAuction(uint256 _deedId, Auction auction) internal {\r\n        // Remove the auction\r\n        _removeAuction(_deedId);\r\n        \r\n        // Transfer the deed back to the seller\r\n        _transfer(auction.seller, _deedId);\r\n        \r\n        // Trigger auction cancelled event.\r\n        AuctionCancelled(_deedId);\r\n    }\r\n    \r\n    /// @dev Remove an auction.\r\n    /// @param _deedId The identifier of the deed for which the auction should be removed.\r\n    function _removeAuction(uint256 _deedId) internal {\r\n        delete identifierToAuction[_deedId];\r\n    }\r\n    \r\n    /// @dev Transfer a deed owned by this contract to another address.\r\n    /// @param _to The address to transfer the deed to.\r\n    /// @param _deedId The identifier of the deed.\r\n    function _transfer(address _to, uint256 _deedId) internal {\r\n        // Throws if the transfer fails\r\n        deedContract.transfer(_to, _deedId);\r\n    }\r\n    \r\n    /// @dev Assign proceeds to an address.\r\n    /// @param _to The address to assign proceeds to.\r\n    /// @param _value The proceeds to assign.\r\n    function _assignProceeds(address _to, uint256 _value) internal {\r\n        outstandingEther += _value;\r\n        addressToEtherOwed[_to] += _value;\r\n    }\r\n    \r\n    /// @dev Calculate the current price of an auction.\r\n    function _currentPrice(Auction storage _auction) internal view returns (uint256) {\r\n        require(now >= _auction.startedAt);\r\n        \r\n        uint256 secondsPassed = now - _auction.startedAt;\r\n        \r\n        if (secondsPassed >= _auction.duration) {\r\n            return _auction.endPrice;\r\n        } else {\r\n            // Negative if the end price is higher than the start price!\r\n            int256 totalPriceChange = int256(_auction.endPrice) - int256(_auction.startPrice);\r\n            \r\n            // Calculate the current price based on the total change over the entire\r\n            // auction duration, and the amount of time passed since the start of the\r\n            // auction.\r\n            int256 currentPriceChange = totalPriceChange * int256(secondsPassed) / int256(_auction.duration);\r\n            \r\n            // Calculate the final price. Note this once again\r\n            // is representable by a uint256, as the price can\r\n            // never be negative.\r\n            int256 price = int256(_auction.startPrice) + currentPriceChange;\r\n            \r\n            // This never throws.\r\n            assert(price >= 0);\r\n            \r\n            return uint256(price);\r\n        }\r\n    }\r\n    \r\n    /// @dev Calculate the fee for a given price.\r\n    /// @param _price The price to calculate the fee for.\r\n    function _calculateFee(uint256 _price) internal view returns (uint256) {\r\n        // _price is guaranteed to fit in a uint128 due to the createAuction entry\r\n        // modifiers, so this cannot overflow.\r\n        return _price * fee / 100000;\r\n    }\r\n}\r\n\r\n\r\ncontract ClockAuction is ClockAuctionBase, Pausable {\r\n    function ClockAuction(address _deedContractAddress, uint256 _fee) \r\n        ClockAuctionBase(_deedContractAddress, _fee)\r\n        public\r\n    {}\r\n    \r\n    /// @notice Update the auction fee.\r\n    /// @param _fee The new fee.\r\n    function setFee(uint256 _fee) external onlyOwner {\r\n        require(0 <= _fee && _fee <= 100000);\r\n    \r\n        fee = _fee;\r\n    }\r\n    \r\n    /// @notice Get the auction for the given deed.\r\n    /// @param _deedId The identifier of the deed to get the auction for.\r\n    /// @dev Throws if there is no auction for the given deed.\r\n    function getAuction(uint256 _deedId) external view returns (\r\n            address seller,\r\n            uint256 startPrice,\r\n            uint256 endPrice,\r\n            uint256 duration,\r\n            uint256 startedAt\r\n        )\r\n    {\r\n        Auction storage auction = identifierToAuction[_deedId];\r\n        \r\n        // The auction must be active\r\n        require(_activeAuction(auction));\r\n        \r\n        return (\r\n            auction.seller,\r\n            auction.startPrice,\r\n            auction.endPrice,\r\n            auction.duration,\r\n            auction.startedAt\r\n        );\r\n    }\r\n\r\n    /// @notice Create an auction for a given deed.\r\n    /// Must previously have been given approval to take ownership of the deed.\r\n    /// @param _deedId The identifier of the deed to create an auction for.\r\n    /// @param _startPrice The starting price of the auction.\r\n    /// @param _endPrice The ending price of the auction.\r\n    /// @param _duration The duration in seconds of the dynamic pricing part of the auction.\r\n    function createAuction(uint256 _deedId, uint256 _startPrice, uint256 _endPrice, uint256 _duration)\r\n        public\r\n        fitsIn128Bits(_startPrice)\r\n        fitsIn128Bits(_endPrice)\r\n        fitsIn64Bits(_duration)\r\n        whenNotPaused\r\n    {\r\n        // Get the owner of the deed to be auctioned\r\n        address deedOwner = deedContract.ownerOf(_deedId);\r\n    \r\n        // Caller must either be the deed contract or the owner of the deed\r\n        // to prevent abuse.\r\n        require(\r\n            msg.sender == address(deedContract) ||\r\n            msg.sender == deedOwner\r\n        );\r\n    \r\n        // The duration of the auction must be at least 60 seconds.\r\n        require(_duration >= 60);\r\n    \r\n        // Throws if placing the deed in escrow fails (the contract requires\r\n        // transfer approval prior to creating the auction).\r\n        _escrow(_deedId);\r\n        \r\n        // Auction struct\r\n        Auction memory auction = Auction(\r\n            deedOwner,\r\n            uint128(_startPrice),\r\n            uint128(_endPrice),\r\n            uint64(_duration),\r\n            uint64(now)\r\n        );\r\n        \r\n        _createAuction(_deedId, auction);\r\n    }\r\n    \r\n    /// @notice Cancel an auction\r\n    /// @param _deedId The identifier of the deed to cancel the auction for.\r\n    function cancelAuction(uint256 _deedId) external whenNotPaused {\r\n        Auction storage auction = identifierToAuction[_deedId];\r\n        \r\n        // The auction must be active.\r\n        require(_activeAuction(auction));\r\n        \r\n        // The auction can only be cancelled by the seller\r\n        require(msg.sender == auction.seller);\r\n        \r\n        _cancelAuction(_deedId, auction);\r\n    }\r\n    \r\n    /// @notice Bid on an auction.\r\n    /// @param _deedId The identifier of the deed to bid on.\r\n    function bid(uint256 _deedId) external payable whenNotPaused {\r\n        // Throws if the bid does not succeed.\r\n        _bid(msg.sender, msg.value, _deedId);\r\n    }\r\n    \r\n    /// @dev Returns the current price of an auction.\r\n    /// @param _deedId The identifier of the deed to get the currency price for.\r\n    function getCurrentPrice(uint256 _deedId) external view returns (uint256) {\r\n        Auction storage auction = identifierToAuction[_deedId];\r\n        \r\n        // The auction must be active.\r\n        require(_activeAuction(auction));\r\n        \r\n        return _currentPrice(auction);\r\n    }\r\n    \r\n    /// @notice Withdraw ether owed to a beneficiary.\r\n    /// @param beneficiary The address to withdraw the auction balance for.\r\n    function withdrawAuctionBalance(address beneficiary) external {\r\n        // The sender must either be the beneficiary or the core deed contract.\r\n        require(\r\n            msg.sender == beneficiary ||\r\n            msg.sender == address(deedContract)\r\n        );\r\n        \r\n        uint256 etherOwed = addressToEtherOwed[beneficiary];\r\n        \r\n        // Ensure ether is owed to the beneficiary.\r\n        require(etherOwed > 0);\r\n         \r\n        // Set ether owed to 0   \r\n        delete addressToEtherOwed[beneficiary];\r\n        \r\n        // Subtract from total outstanding balance. etherOwed is guaranteed\r\n        // to be less than or equal to outstandingEther, so this cannot\r\n        // underflow.\r\n        outstandingEther -= etherOwed;\r\n        \r\n        // Transfer ether owed to the beneficiary (not susceptible to re-entry\r\n        // attack, as the ether owed is set to 0 before the transfer takes place).\r\n        beneficiary.transfer(etherOwed);\r\n    }\r\n    \r\n    /// @notice Withdraw (unowed) contract balance.\r\n    function withdrawFreeBalance() external {\r\n        // Calculate the free (unowed) balance. This never underflows, as\r\n        // outstandingEther is guaranteed to be less than or equal to the\r\n        // contract balance.\r\n        uint256 freeBalance = this.balance - outstandingEther;\r\n        \r\n        address deedContractAddress = address(deedContract);\r\n\r\n        require(\r\n            msg.sender == owner ||\r\n            msg.sender == deedContractAddress\r\n        );\r\n        \r\n        deedContractAddress.transfer(freeBalance);\r\n    }\r\n}\r\n\r\n\r\ncontract SaleAuction is ClockAuction {\r\n    function SaleAuction(address _deedContractAddress, uint256 _fee) ClockAuction(_deedContractAddress, _fee) public {}\r\n    \r\n    /// @dev Allows other contracts to check whether this is the expected contract.\r\n    bool public isSaleAuction = true;\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"withdrawAuctionBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_deedId\",\"type\":\"uint256\"},{\"name\":\"_startPrice\",\"type\":\"uint256\"},{\"name\":\"_endPrice\",\"type\":\"uint256\"},{\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"createAuction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_deedId\",\"type\":\"uint256\"}],\"name\":\"bid\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"deedContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"outstandingEther\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_deedId\",\"type\":\"uint256\"}],\"name\":\"getAuction\",\"outputs\":[{\"name\":\"seller\",\"type\":\"address\"},{\"name\":\"startPrice\",\"type\":\"uint256\"},{\"name\":\"endPrice\",\"type\":\"uint256\"},{\"name\":\"duration\",\"type\":\"uint256\"},{\"name\":\"startedAt\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_deedId\",\"type\":\"uint256\"}],\"name\":\"cancelAuction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressToEtherOwed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_deedId\",\"type\":\"uint256\"}],\"name\":\"getCurrentPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isSaleAuction\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawFreeBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_deedContractAddress\",\"type\":\"address\"},{\"name\":\"_fee\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"deedId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"startPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"endPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"AuctionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"deedId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"totalPrice\",\"type\":\"uint256\"}],\"name\":\"AuctionSuccessful\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"deedId\",\"type\":\"uint256\"}],\"name\":\"AuctionCancelled\",\"type\":\"event\"}]","ContractName":"SaleAuction","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000d4df33983ff82ce4469c6ea3cff390403e58d90a0000000000000000000000000000000000000000000000000000000000000dac","Library":"","SwarmSource":"bzzr://89de4108d7a635346874b850a4b3596238bdde5e67f2f9aa5c762d08276d2fce"}]}