{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.17;\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// 'KWHToken' contract\r\n//\r\n// Symbol      : KWHT\r\n// Name        : KWHToken\r\n// Total supply: 900,000.000000000000000000\r\n// Decimals    : 18\r\n//\r\n// The MIT Licence.\r\n// ----------------------------------------------------------------------------\r\n\r\n\r\n// Overflow math functions.\r\n\r\ncontract SafeMath {\r\n\r\n    function safeAdd(uint a, uint b) internal pure returns (uint c) {\r\n        c = a + b;\r\n        require(c >= a);\r\n    }\r\n\r\n    function safeSub(uint a, uint b) internal pure returns (uint c) {\r\n        require(b <= a);\r\n        c = a - b;\r\n    }\r\n\r\n    function safeMul(uint a, uint b) internal pure returns (uint c) {\r\n        c = a * b;\r\n        require(a == 0 || c / a == b);\r\n    }\r\n\r\n    function safeDiv(uint a, uint b) internal pure returns (uint c) {\r\n        require(b > 0);\r\n        c = a / b;\r\n    }\r\n\r\n    function assert(bool assertion) internal {\r\n        require(assertion);\r\n    }\r\n\r\n}\r\n\r\n\r\n// Contract Owned\r\n\r\ncontract Owned {\r\n\r\n    address public owner;\r\n\r\n    function Owned() {\r\n\r\n        owner = msg.sender;\r\n\r\n    }\r\n\r\n    modifier onlyOwner {\r\n\r\n        require(msg.sender == owner);\r\n        _;\r\n\r\n    }\r\n\r\n    function transferOwnership(address newOwner) onlyOwner {\r\n\r\n        require(newOwner != 0x0);\r\n        \r\n        owner = newOwner;\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\n// Contract Token\r\n\r\ncontract Token {\r\n\r\n    uint256 public totalSupply;\r\n\r\n    function balanceOf(address _owner) constant returns (uint256 balance);\r\n\r\n    function transfer(address _to, uint256 _value) returns (bool success);\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\r\n\r\n    function approve(address _spender, uint256 _value) returns (bool success);\r\n\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n}\r\n\r\n\r\n// StandardToken\r\n\r\ncontract StandardToken is Token {\r\n\r\n    function transfer(address _to, uint256 _value) returns (bool success) {\r\n\r\n        if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\r\n\r\n            balances[msg.sender] -= _value;\r\n            \r\n            balances[_to] += _value;\r\n            \r\n            Transfer(msg.sender, _to, _value);\r\n            \r\n            return true;\r\n\r\n        } else {\r\n            \r\n            return false;\r\n            \r\n        }\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\r\n\r\n        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\r\n\r\n            balances[_from] -= _value;\r\n            \r\n            balances[_to] += _value;\r\n            \r\n            allowed[_from][msg.sender] -= _value;\r\n            \r\n            Transfer(_from, _to, _value);\r\n            \r\n            return true;\r\n\r\n        } else {\r\n            \r\n            return false;\r\n            \r\n        }\r\n    }\r\n\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {\r\n\r\n        return balances[_owner];\r\n\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) returns (bool success) {\r\n\r\n        allowed[msg.sender][_spender] = _value;\r\n        \r\n        Approval(msg.sender, _spender, _value);\r\n        \r\n        return true;\r\n\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n\r\n      return allowed[_owner][_spender];\r\n\r\n    }\r\n\r\n    mapping (address => uint256) balances;\r\n\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n\r\n}\r\n\r\n\r\n\r\n// 'KWHToken' contract\r\n\r\ncontract KWHToken is SafeMath, Owned, StandardToken {\r\n\r\n    string public symbol = \"KWHT\";\r\n    \r\n    string public name = \"KWHToken\";\r\n\r\n    address public KWHTokenAddress = this;\r\n    \r\n    uint8 public decimals = 18;\r\n    \r\n    uint256 public totalSupply;\r\n    \r\n    uint256 public buyPriceEth = 5 finney;\r\n    \r\n    uint256 public sellPriceEth = 5 finney;\r\n    \r\n    uint256 public gasForKWH = 3 finney;\r\n    \r\n    uint256 public KWHForGas = 10;\r\n    \r\n    uint256 public gasReserve = 1 ether;\r\n    \r\n    uint256 public minBalanceForAccounts = 20 finney;\r\n    \r\n    bool public directTradeAllowed = false;\r\n\r\n\r\n    function KWHToken() {\r\n        \r\n        totalSupply = 900000 * 10**uint(decimals);\r\n        \r\n        balances[msg.sender] = totalSupply;\r\n        \r\n    }\r\n\r\n    function setEtherPrices(uint256 newBuyPriceEth, uint256 newSellPriceEth) onlyOwner {\r\n        \r\n        buyPriceEth = newBuyPriceEth;\r\n        \r\n        sellPriceEth = newSellPriceEth;\r\n        \r\n    }\r\n    \r\n    function setGasForKWH(uint newGasAmountInWei) onlyOwner {\r\n        \r\n        gasForKWH = newGasAmountInWei;\r\n        \r\n    }\r\n    \r\n    function setKWHForGas(uint newDCNAmount) onlyOwner {\r\n        \r\n        KWHForGas = newDCNAmount;\r\n        \r\n    }\r\n    \r\n    function setGasReserve(uint newGasReserveInWei) onlyOwner {\r\n        \r\n        gasReserve = newGasReserveInWei;\r\n    \r\n    }\r\n    \r\n    function setMinBalance(uint minimumBalanceInWei) onlyOwner {\r\n        \r\n        minBalanceForAccounts = minimumBalanceInWei;\r\n        \r\n    }\r\n\r\n\r\n// Halts or unhalts direct trades without the sell and buy functions below\r\n    function haltDirectTrade() onlyOwner {\r\n        \r\n        directTradeAllowed = false;\r\n        \r\n    }\r\n    \r\n    function unhaltDirectTrade() onlyOwner {\r\n        \r\n        directTradeAllowed = true;\r\n        \r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) returns (bool success) {\r\n        \r\n        require(_value > KWHForGas);\r\n        \r\n        if (msg.sender != owner && _to == KWHTokenAddress && directTradeAllowed) {\r\n            \r\n            sellKWHAgainstEther(_value);\r\n            \r\n            return true;\r\n            \r\n        }\r\n\r\n        if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\r\n            \r\n            balances[msg.sender] = safeSub(balances[msg.sender], _value);\r\n\r\n            if (msg.sender.balance >= minBalanceForAccounts && _to.balance >= minBalanceForAccounts) {\r\n                \r\n                balances[_to] = safeAdd(balances[_to], _value);\r\n                \r\n                Transfer(msg.sender, _to, _value);\r\n                \r\n                return true;\r\n                \r\n            } else {\r\n                \r\n                balances[this] = safeAdd(balances[this], KWHForGas);\r\n                \r\n                balances[_to] = safeAdd(balances[_to], safeSub(_value, KWHForGas));\r\n                \r\n                Transfer(msg.sender, _to, safeSub(_value, KWHForGas));\r\n\r\n                if(msg.sender.balance < minBalanceForAccounts) {\r\n                    \r\n                    require(msg.sender.send(gasForKWH));\r\n                    \r\n                }\r\n                \r\n                if(_to.balance < minBalanceForAccounts) {\r\n                    \r\n                    require(_to.send(gasForKWH));\r\n                \r\n                }\r\n            }\r\n        } else { \r\n            throw; \r\n        }\r\n    }\r\n\r\n// User buys KWHs and pays in Ether\r\n    function buyKWHAgainstEther() payable returns (uint amount) {\r\n        \r\n        require(!(buyPriceEth == 0 || msg.value < buyPriceEth));\r\n        \r\n        amount = msg.value / buyPriceEth;\r\n        \r\n        require(!(balances[this] < amount));\r\n        \r\n        balances[msg.sender] = safeAdd(balances[msg.sender], amount);\r\n        \r\n        balances[this] = safeSub(balances[this], amount);\r\n        \r\n        Transfer(this, msg.sender, amount);\r\n        \r\n        return amount;\r\n    }\r\n\r\n\r\n// User sells KWHs and gets Ether\r\n    function sellKWHAgainstEther(uint256 amount) returns (uint revenue) {\r\n        \r\n        require(!(sellPriceEth == 0 || amount < KWHForGas));\r\n        \r\n        require(!(balances[msg.sender] < amount));\r\n        \r\n        revenue = safeMul(amount, sellPriceEth);\r\n        \r\n        require(!(safeSub(this.balance, revenue) < gasReserve));\r\n        \r\n        if (!msg.sender.send(revenue)) {\r\n            \r\n            throw;\r\n            \r\n        } else {\r\n            \r\n            balances[this] = safeAdd(balances[this], amount);\r\n            \r\n            balances[msg.sender] = safeSub(balances[msg.sender], amount);\r\n            \r\n            Transfer(this, msg.sender, revenue);\r\n            \r\n            return revenue;\r\n        }\r\n    }\r\n\r\n\r\n// Refunding owner\r\n    function refundToOwner (uint256 amountOfEth, uint256 kwh) onlyOwner {\r\n        \r\n        uint256 eth = safeMul(amountOfEth, 1 ether);\r\n        \r\n        if (!msg.sender.send(eth)) {\r\n            \r\n            throw;\r\n            \r\n        } else {\r\n            \r\n            Transfer(this, msg.sender, kwh);\r\n            \r\n        }\r\n        \r\n        require(!(balances[this] < kwh));\r\n        \r\n        balances[msg.sender] = safeAdd(balances[msg.sender], kwh);\r\n        \r\n        balances[this] = safeSub(balances[this], kwh);\r\n        \r\n        Transfer(this, msg.sender, kwh);\r\n    }\r\n\r\n\r\n    function() payable {\r\n        \r\n        if (msg.sender != owner) {\r\n            \r\n            require(directTradeAllowed);\r\n            \r\n            buyKWHAgainstEther();\r\n            \r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"sellPriceEth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"KWHForGas\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"KWHTokenAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newGasReserveInWei\",\"type\":\"uint256\"}],\"name\":\"setGasReserve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"directTradeAllowed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gasForKWH\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minBalanceForAccounts\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newBuyPriceEth\",\"type\":\"uint256\"},{\"name\":\"newSellPriceEth\",\"type\":\"uint256\"}],\"name\":\"setEtherPrices\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyPriceEth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newDCNAmount\",\"type\":\"uint256\"}],\"name\":\"setKWHForGas\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amountOfEth\",\"type\":\"uint256\"},{\"name\":\"kwh\",\"type\":\"uint256\"}],\"name\":\"refundToOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newGasAmountInWei\",\"type\":\"uint256\"}],\"name\":\"setGasForKWH\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyKWHAgainstEther\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"haltDirectTrade\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"minimumBalanceInWei\",\"type\":\"uint256\"}],\"name\":\"setMinBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unhaltDirectTrade\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gasReserve\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sellKWHAgainstEther\",\"outputs\":[{\"name\":\"revenue\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"KWHToken","CompilerVersion":"v0.4.17+commit.bdeb9e52","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://e754af614419c3ab5394bba4a87b68224d7e75fa1aecf335aa622a482b387993"}]}