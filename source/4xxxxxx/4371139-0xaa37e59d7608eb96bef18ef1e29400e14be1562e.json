{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\n\r\n/**\r\n * SafeMath\r\n * Math operations with safety checks that throw on error\r\n */\r\n \r\nlibrary SafeMath {\r\n  \r\n    function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n    }\r\n    \r\n    function max64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n    return a >= b ? a : b;\r\n    }\r\n\r\n    function max256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    return a >= b ? a : b;\r\n    }\r\n\r\n    function min64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n    return a < b ? a : b;\r\n    }\r\n\r\n    function min256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    return a < b ? a : b;\r\n    }\r\n    \r\n}\r\n\r\n/**\r\n * title ERC20 interface\r\n * dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 {\r\n    uint256 public totalSupply;\r\n    bool public transferlocked;\r\n    bool public wallocked;\r\n    function balanceOf(address who) constant returns (uint256 balance);\r\n    function transfer(address _to, uint256 _value) returns (bool success);\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\r\n    function approve(address spender, uint256 value) returns (bool success);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event Burn(address indexed burner, uint indexed value);\r\n}\r\n\r\n/**\r\n * Basic token\r\n * Basic version of StandardToken, with no allowances.\r\n */\r\n\r\n \r\ncontract BasicToken is ERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) balances;\r\n\r\n    /**\r\n    * transfer token for a specified address\r\n    * _to The address to transfer to.\r\n    * _value The amount to be transferred.\r\n    */\r\n    function transfer(address _to, uint256 _value) returns (bool success) {\r\n        require(\r\n            balances[msg.sender] >= _value\r\n            && _value > 0\r\n            );\r\n        if (transferlocked) {\r\n            throw;\r\n        }\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    *  Gets the balance of the specified address.\r\n    *  _owner The address to query the the balance of.\r\n    *  An uint256 representing the amount owned by the passed address.\r\n    */\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n}\r\n\r\n/**\r\n *  Ownable\r\n * The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n * Thanks https://github.com/OpenZeppelin/zeppelin-solidity/\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    /**\r\n     * The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    function Ownable() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        assert(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * Allows the current owner to transfer control of the contract to a newOwner.\r\n     * newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) onlyOwner {\r\n        if (newOwner != address(0)) {\r\n            owner = newOwner;\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Standard ERC20 token\r\n *\r\n * Implementation of the basic standard token.\r\n * https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract StandardToken is BasicToken {\r\n\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n\r\n\r\n    /**\r\n     * Transfer tokens from one address to another\r\n     * _from address The address which you want to send tokens from\r\n     * _to address The address which you want to transfer to\r\n     * _value uint256 the amout of tokens to be transfered\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\r\n        require(\r\n            allowed[_from][msg.sender] >=_value\r\n            && balances[_from] >= _value\r\n            && _value > 0\r\n            );\r\n        if (transferlocked) {\r\n            throw;\r\n        }\r\n\r\n        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n        // require (_value <= _allowed);\r\n\r\n        balances[_to] = balances[_to].add(_value);\r\n        balances[_from] = balances[_from].sub(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n     * _spender The address which will spend the funds.\r\n     * _value The -amount of tokens to be spent.\r\n     */\r\n    function approve(address _spender, uint256 _value) returns (bool) {\r\n\r\n        // To change the approve amount you first have to reduce the addresses`\r\n        //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n        //  already 0 to mitigate the race condition described here:\r\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n        require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n        if (transferlocked) {\r\n            throw;\r\n        }\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Function to check the amount of tokens that an owner allowed to a spender.\r\n     * _owner address The address which owns the funds.\r\n     * _spender address The address which will spend the funds.\r\n     * A uint256 specifing the amount of tokens still avaible for the spender.\r\n     */\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n\r\n}\r\n\r\n/**\r\n * Mintable token\r\n * Simple ERC20 Token example, with mintable token creation\r\n * Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\r\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n */\r\n\r\ncontract MintburnToken is StandardToken, Ownable {\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * Function to mint tokens\r\n   * _to The address that will receive the minted tokens.\r\n   * _amount The amount of tokens to mint.\r\n   * A boolean that indicates if the operation was successful.\r\n   */\r\n   \r\n  function mint(address _to, uint256 _amount) onlyOwner canMint returns (bool) {\r\n    totalSupply = totalSupply.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    Mint(_to, _amount);\r\n    Transfer(0x0, _to, _amount);\r\n    return true;\r\n  }\r\n  \r\n  /**\r\n   *  Burn away the specified amount of CareerXon tokens\r\n  */\r\n  \r\n  function burn(uint256 _value) onlyOwner returns (bool) {\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    totalSupply = totalSupply.sub(_value);\r\n    Transfer(msg.sender, 0x0, _value);\r\n    return true;\r\n  }\r\n   function burnFrom(address _from, uint256 _value) onlyOwner returns (bool success) {\r\n        require(balances[_from] >= _value);                // Check if the targeted balance is enough\r\n        require(_value <= allowed[_from][msg.sender]);    // Check allowance\r\n        balances[_from] = balances[_from].sub(_value);                         // Subtract from the targeted balance\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);             // Subtract from the sender's allowance\r\n        totalSupply = totalSupply.sub(_value);                              // Update totalSupply\r\n        Burn(_from, _value);\r\n        return true;\r\n    }\r\n\r\n  /**\r\n   * Function to stop minting new tokens.\r\n   * True if the operation was successful.\r\n   */\r\n   \r\n  function finishMinting() onlyOwner returns (bool) {\r\n    mintingFinished = true;\r\n    MintFinished();\r\n    return true;\r\n  }\r\n}\r\n\r\n/**\r\n * CRN (CareerXon) Token\r\n *\r\n * Implements ERC 20 Token standard: https://github.com/ethereum/EIPs/issues/20 with the addition \r\n * of ownership, a lock and issuing.\r\n *\r\n * created 08/20/2017\r\n * \r\n */\r\n\r\ncontract CareerXonToken is MintburnToken{\r\n    string public constant name = \"CareerXon\";\r\n    string public constant symbol = \"CRN\";\r\n    uint public constant decimals = 18;\r\n    string public standard = \"Token 0.1\";\r\n    uint256 public maxSupply = 1500000000000000000000000;\r\n    //15,000,000 CareerXon tokens max supply\r\n\r\n    // timestamps for first presale and ICO\r\n    uint public startPreSale;\r\n    uint public endPreSale;\r\n    uint public startICO;\r\n    uint public endICO;\r\n\r\n\r\n\r\n    // how many token units a buyer gets per wei\r\n    uint256 public rate;\r\n\r\n    uint256 public minTransactionAmount;\r\n\r\n    uint256 public raisedForEther = 0;\r\n\r\n    modifier inActivePeriod() {\r\n        require((startPreSale < now && now <= endPreSale) || (startICO < now && now <= endICO));\r\n        _;\r\n    }\r\n    \r\n    //prevent short address attack\r\n\r\n    modifier onlyPayloadSize(uint size) {\r\n        if(msg.data.length < size + 4) revert();\r\n        _;\r\n\r\n    }\r\n\r\n    function CareerXonToken(uint _startP, uint _endP, uint _startI, uint _endI) {\r\n        require(_startP < _endP);\r\n        require(_startI < _endI);\r\n        \r\n\r\n        //12,900,000 for eth supply\r\n        //2,000,000 for bitcoin and bitcoin cash sales supply minted\r\n        //100,000 for bounty and transalation minted\r\n        //After all these distribution, Remaining minted coins will be burned.\r\n        totalSupply = 12900000000000000000000000;\r\n\r\n\r\n        // 1 ETH = 1300 CareerXon + 50% bonus in presale on first day\r\n        rate = 1300;\r\n\r\n        // minimal invest 0.01 ETH\r\n        minTransactionAmount = 0.01 ether;\r\n\r\n        startPreSale = _startP;\r\n        endPreSale = _endP;\r\n        startICO = _startI;\r\n        endICO = _endI;\r\n        transferlocked = true;\r\n        // wallet withdrawal lock for protection\r\n        wallocked = true;\r\n\r\n    }\r\n    \r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    \r\n    //Allows owner to stop & start presale.\r\n    //For PreSale starting date visit http://careerxon.com.\r\n    \r\n    function setupPeriodForPreSale(uint _start, uint _end) onlyOwner {\r\n        require(_start < _end);\r\n        startPreSale = _start;\r\n        endPreSale = _end;\r\n    }\r\n    \r\n    //For ICO and project details visit http://careerxon.com\r\n    //Total Amount to be sold 15,000,000\r\n    //Left over OR unsold coins will be burned.\r\n    \r\n    function setupPeriodForICO(uint _start, uint _end) onlyOwner {\r\n        require(_start < _end);\r\n        startICO = _start;\r\n        endICO = _end;\r\n    }\r\n\r\n    // fallback function can be used to buy tokens\r\n    function () inActivePeriod payable {\r\n        buyTokens(msg.sender);\r\n    }\r\n\r\n    // token auto purchase function\r\n    function buyTokens(address _youraddress) inActivePeriod payable {\r\n        require(_youraddress != 0x0);\r\n        require(msg.value >= minTransactionAmount);\r\n\r\n        uint256 weiAmount = msg.value;\r\n\r\n        raisedForEther = raisedForEther.add(weiAmount);\r\n\r\n        // calculate token amount to be created\r\n        uint256 tokens = weiAmount.mul(rate);\r\n        tokens += getBonus(tokens);\r\n        tokens += getBonustwo(tokens);\r\n\r\n        tokenReserved(_youraddress, tokens);\r\n\r\n    }\r\n    \r\n    function withdraw(uint256 _value) onlyOwner returns (bool){\r\n        if (wallocked) {\r\n            throw;\r\n        }\r\n        owner.transfer(_value);\r\n        return true;\r\n    }\r\n    function walunlock() onlyOwner returns (bool success)  {\r\n        wallocked = false;\r\n        return true;\r\n    }\r\n    function wallock() onlyOwner returns (bool success)  {\r\n        wallocked = true;\r\n        return true;\r\n    }\r\n\r\n    /*\r\n    *    PreSale:\r\n    *        Day 1: +50% bonus\r\n    *        Day 2: +33% bonus\r\n    *        Day 3: +20% bonus\r\n    *        Day 4: +10% bonus\r\n    */\r\n    function getBonus(uint256 _tokens) constant returns (uint256 bonus) {\r\n        require(_tokens != 0);\r\n        if (1 == getCurrentPeriod()) {\r\n            if (startPreSale <= now && now < startPreSale + 1 days) {\r\n                return _tokens.div(2);\r\n            } else if (startPreSale + 1 days <= now && now < startPreSale + 2 days ) {\r\n                return _tokens.div(3);\r\n            } else if (startPreSale + 2 days <= now && now < startPreSale + 3 days ) {\r\n                return _tokens.div(5);\r\n            }else if (startPreSale + 3 days <= now && now < startPreSale + 4 days ) {\r\n                return _tokens.div(10);\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n        \r\n    /*\r\n    *    ICO:\r\n    *        Day 1: +20% bonus\r\n    *        Day 2: +10% bonus\r\n    *        Day 3: +5% bonus\r\n    *        Day 4 & onwards: No bonuses\r\n    */\r\n    function getBonustwo(uint256 _tokens) constant returns (uint256 bonus) {\r\n        require(_tokens != 0);\r\n        if (2 == getCurrentPeriod()) {\r\n            if (startICO <= now && now < startICO + 1 days) {\r\n                return _tokens.div(5);\r\n            } else if (startICO + 1 days <= now && now < startICO + 2 days ) {\r\n                return _tokens.div(10);\r\n            } else if (startICO + 2 days <= now && now < startICO + 3 days ) {\r\n                return _tokens.mul(5).div(100);\r\n            }\r\n        }\r\n    // Return 0 means token sales are closed\r\n        return 0;\r\n    }\r\n\r\n    //start date & end date of presale and future ICO\r\n    function getCurrentPeriod() inActivePeriod constant returns (uint){\r\n        if ((startPreSale < now && now <= endPreSale)) {\r\n            return 1;\r\n        } else if ((startICO < now && now <= endICO)) {\r\n            return 2;\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    function tokenReserved(address _to, uint256 _value) internal returns (bool) {\r\n        balances[_to] = balances[_to].add(_value);\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n    // token transfer lock. Unlock at end of Presale,ICO\r\n    \r\n    function transferunlock() onlyOwner returns (bool success)  {\r\n        transferlocked = false;\r\n        return true;\r\n    }\r\n    function transferlock() onlyOwner returns (bool success)  {\r\n        transferlocked = true;\r\n        return true;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"transferlock\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minTransactionAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"raisedForEther\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"wallock\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"getBonus\",\"outputs\":[{\"name\":\"bonus\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endICO\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startPreSale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"standard\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_start\",\"type\":\"uint256\"},{\"name\":\"_end\",\"type\":\"uint256\"}],\"name\":\"setupPeriodForPreSale\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_start\",\"type\":\"uint256\"},{\"name\":\"_end\",\"type\":\"uint256\"}],\"name\":\"setupPeriodForICO\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startICO\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"getBonustwo\",\"outputs\":[{\"name\":\"bonus\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"walunlock\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"transferunlock\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transferlocked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallocked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_youraddress\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endPreSale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_startP\",\"type\":\"uint256\"},{\"name\":\"_endP\",\"type\":\"uint256\"},{\"name\":\"_startI\",\"type\":\"uint256\"},{\"name\":\"_endI\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"}]","ContractName":"CareerXonToken","CompilerVersion":"v0.4.11+commit.68ef5810","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000059fcf4f0000000000000000000000000000000000000000000000000000000005a0f7800000000000000000000000000000000000000000000000000000000005a2481f0000000000000000000000000000000000000000000000000000000005a403170","Library":"","SwarmSource":"bzzr://64125c0c4fca7da27341daaf44af808646338002b6f877311183aa1d4ce2f797"}]}