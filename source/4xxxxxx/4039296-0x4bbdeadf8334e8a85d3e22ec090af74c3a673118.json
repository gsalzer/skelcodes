{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13;\r\n// Last compiled with 0.4.13+commit.0fb4cb1a\r\n\r\ncontract SafeMath {\r\n  //internals\r\n\r\n  function safeMul(uint a, uint b) internal returns (uint) {\r\n    uint c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function safeSub(uint a, uint b) internal returns (uint) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function safeAdd(uint a, uint b) internal returns (uint) {\r\n    uint c = a + b;\r\n    assert(c>=a && c>=b);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Token {\r\n\r\n    /// @return total amount of tokens\r\n    function totalSupply() constant returns (uint256 supply) {}\r\n\r\n    /// @param _owner The address from which the balance will be retrieved\r\n    /// @return The balance\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {}\r\n\r\n    /// @notice send `_value` token to `_to` from `msg.sender`\r\n    /// @param _to The address of the recipient\r\n    /// @param _value The amount of token to be transferred\r\n    /// @return Whether the transfer was successful or not\r\n    function transfer(address _to, uint256 _value) returns (bool success) {}\r\n\r\n    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\r\n    /// @param _from The address of the sender\r\n    /// @param _to The address of the recipient\r\n    /// @param _value The amount of token to be transferred\r\n    /// @return Whether the transfer was successful or not\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {}\r\n\r\n    /// @notice `msg.sender` approves `_addr` to spend `_value` tokens\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @param _value The amount of wei to be approved for transfer\r\n    /// @return Whether the approval was successful or not\r\n    function approve(address _spender, uint256 _value) returns (bool success) {}\r\n\r\n    /// @param _owner The address of the account owning tokens\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @return Amount of remaining tokens allowed to spent\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {}\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n}\r\n\r\ncontract StandardToken is Token {\r\n\r\n    function transfer(address _to, uint256 _value) returns (bool success) {\r\n        //Default assumes totalSupply can't be over max (2^256 - 1).\r\n        //If your token leaves out totalSupply and can issue more tokens as time goes on, you need to check if it doesn't wrap.\r\n        //Replace the if with this one instead.\r\n        if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\r\n        //if (balances[msg.sender] >= _value && _value > 0) {\r\n            balances[msg.sender] -= _value;\r\n            balances[_to] += _value;\r\n            Transfer(msg.sender, _to, _value);\r\n            return true;\r\n        } else { return false; }\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\r\n        //same as above. Replace this line with the following if you want to protect against wrapping uints.\r\n        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\r\n        //if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\r\n            balances[_to] += _value;\r\n            balances[_from] -= _value;\r\n            allowed[_from][msg.sender] -= _value;\r\n            Transfer(_from, _to, _value);\r\n            return true;\r\n        } else { return false; }\r\n    }\r\n\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n      return allowed[_owner][_spender];\r\n    }\r\n\r\n    mapping(address => uint256) balances;\r\n\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n\r\n    uint256 public totalSupply;\r\n\r\n}\r\n\r\ncontract ReserveToken is StandardToken, SafeMath {\r\n    string public name;\r\n    string public symbol;\r\n    uint public decimals = 18;\r\n    address public minter;\r\n    function ReserveToken(string name_, string symbol_) {\r\n      name = name_;\r\n      symbol = symbol_;\r\n      minter = msg.sender;\r\n    }\r\n    function create(address account, uint amount) {\r\n      require(msg.sender == minter);\r\n      balances[account] = safeAdd(balances[account], amount);\r\n      totalSupply = safeAdd(totalSupply, amount);\r\n    }\r\n    function destroy(address account, uint amount) {\r\n      require(msg.sender == minter);\r\n      require(balances[account] >= amount);\r\n      balances[account] = safeSub(balances[account], amount);\r\n      totalSupply = safeSub(totalSupply, amount);\r\n    }\r\n}\r\n\r\ncontract YesNo is SafeMath {\r\n\r\n  ReserveToken public yesToken;\r\n  ReserveToken public noToken;\r\n\r\n  string public name;\r\n  string public symbol;\r\n\r\n  //Reality Keys:\r\n  bytes32 public factHash;\r\n  address public ethAddr;\r\n  string public url;\r\n\r\n  uint public outcome;\r\n  bool public resolved = false;\r\n\r\n  address public feeAccount;\r\n  uint public fee; //percentage of 1 ether\r\n\r\n  event Create(address indexed account, uint value);\r\n  event Redeem(address indexed account, uint value, uint yesTokens, uint noTokens);\r\n  event Resolve(bool resolved, uint outcome);\r\n\r\n  function YesNo(string name_, string symbol_, string namey_, string symboly_, string namen_, string symboln_, bytes32 factHash_, address ethAddr_, string url_, address feeAccount_, uint fee_) {\r\n    name = name_;\r\n    symbol = symbol_;\r\n    yesToken = new ReserveToken(namey_, symboly_);\r\n    noToken = new ReserveToken(namen_, symboln_);\r\n    factHash = factHash_;\r\n    ethAddr = ethAddr_;\r\n    url = url_;\r\n    feeAccount = feeAccount_;\r\n    fee = fee_;\r\n  }\r\n\r\n  function() payable {\r\n    create();\r\n  }\r\n\r\n  function create() payable {\r\n    //send X Ether, get X Yes tokens and X No tokens\r\n    yesToken.create(msg.sender, msg.value);\r\n    noToken.create(msg.sender, msg.value);\r\n    Create(msg.sender, msg.value);\r\n  }\r\n\r\n  function redeem(uint tokens) {\r\n    feeAccount.transfer(safeMul(tokens,fee)/(1 ether));\r\n    if (!resolved) {\r\n      yesToken.destroy(msg.sender, tokens);\r\n      noToken.destroy(msg.sender, tokens);\r\n      msg.sender.transfer(safeMul(tokens,(1 ether)-fee)/(1 ether));\r\n      Redeem(msg.sender, tokens, tokens, tokens);\r\n    } else if (resolved) {\r\n      if (outcome==0) { //no\r\n        noToken.destroy(msg.sender, tokens);\r\n        msg.sender.transfer(safeMul(tokens,(1 ether)-fee)/(1 ether));\r\n        Redeem(msg.sender, tokens, 0, tokens);\r\n      } else if (outcome==1) { //yes\r\n        yesToken.destroy(msg.sender, tokens);\r\n        msg.sender.transfer(safeMul(tokens,(1 ether)-fee)/(1 ether));\r\n        Redeem(msg.sender, tokens, tokens, 0);\r\n      }\r\n    }\r\n  }\r\n\r\n  function resolve(uint8 v, bytes32 r, bytes32 s, bytes32 value) {\r\n    require(ecrecover(sha3(factHash, value), v, r, s) == ethAddr);\r\n    require(!resolved);\r\n    uint valueInt = uint(value);\r\n    require(valueInt==0 || valueInt==1);\r\n    outcome = valueInt;\r\n    resolved = true;\r\n    Resolve(resolved, outcome);\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"noToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"outcome\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"resolved\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"url\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"factHash\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"},{\"name\":\"value\",\"type\":\"bytes32\"}],\"name\":\"resolve\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"create\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"yesToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"name_\",\"type\":\"string\"},{\"name\":\"symbol_\",\"type\":\"string\"},{\"name\":\"namey_\",\"type\":\"string\"},{\"name\":\"symboly_\",\"type\":\"string\"},{\"name\":\"namen_\",\"type\":\"string\"},{\"name\":\"symboln_\",\"type\":\"string\"},{\"name\":\"factHash_\",\"type\":\"bytes32\"},{\"name\":\"ethAddr_\",\"type\":\"address\"},{\"name\":\"url_\",\"type\":\"string\"},{\"name\":\"feeAccount_\",\"type\":\"address\"},{\"name\":\"fee_\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Create\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"yesTokens\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"noTokens\",\"type\":\"uint256\"}],\"name\":\"Redeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"resolved\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"outcome\",\"type\":\"uint256\"}],\"name\":\"Resolve\",\"type\":\"event\"}]","ContractName":"YesNo","CompilerVersion":"v0.4.13+commit.fb4cb1a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000001a000000000000000000000000000000000000000000000000000000000000001e00000000000000000000000000000000000000000000000000000000000000220000000000000000000000000000000000000000000000000000000000000026000000000000000000000000000000000000000000000000000000000000002a0c10746d0c77980c1ebf4ca80f8da7f41de552dec4a13e45e81e7f1c77446c76f0000000000000000000000006fde387af081c37d9ffa762b49d340e6ae21339500000000000000000000000000000000000000000000000000000000000002e00000000000000000000000004a837efcdf39a888814fe0454b8a8371b0328cf00000000000000000000000000000000000000000000000000011c37937e08000000000000000000000000000000000000000000000000000000000000000000a4d6179776561746865720000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034d41590000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e4d6179776561746865722059657300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044d41595900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d4d617977656174686572204e6f0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044d41594e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004e68747470733a2f2f7777772e7265616c6974796b6579732e636f6d2f6170692f76312f68756d616e2f31343839343f6163636570745f7465726d735f6f665f736572766963653d63757272656e74000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://bad28569f38d8fb45061074e07b0d2129832672ad304b2ee76ec317ce803f006"}]}