{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.18;\r\n\r\n/**\r\n * Contract \"Math\"\r\n * Purpose: Math operations with safety checks\r\n * Status : Complete\r\n * \r\n */\r\ncontract Math {\r\n\r\n    /**\r\n    * Multiplication with safety check\r\n    */\r\n    function Mul(uint a, uint b) pure internal returns (uint) {\r\n      uint c = a * b;\r\n      //check result should not be other wise until a=0\r\n      assert(a == 0 || c / a == b);\r\n      return c;\r\n    }\r\n\r\n    /**\r\n    * Division with safety check\r\n    */\r\n    function Div(uint a, uint b) pure internal returns (uint) {\r\n      //overflow check; b must not be 0\r\n      assert(b > 0);\r\n      uint c = a / b;\r\n      assert(a == b * c + a % b);\r\n      return c;\r\n    }\r\n\r\n    /**\r\n    * Subtraction with safety check\r\n    */\r\n    function Sub(uint a, uint b) pure internal returns (uint) {\r\n      //b must be greater that a as we need to store value in unsigned integer\r\n      assert(b <= a);\r\n      return a - b;\r\n    }\r\n\r\n    /**\r\n    * Addition with safety check\r\n    */\r\n    function Add(uint a, uint b) pure internal returns (uint) {\r\n      uint c = a + b;\r\n      //result must be greater as a or b can not be negative\r\n      assert(c>=a && c>=b);\r\n      return c;\r\n    }\r\n}\r\n\r\n  contract ERC20 {\r\n  function totalSupply()public view returns (uint total_Supply);\r\n  function balanceOf(address who)public view returns (uint256);\r\n  function allowance(address owner, address spender)public view returns (uint);\r\n  function transferFrom(address from, address to, uint value)public returns (bool ok);\r\n  function approve(address spender, uint value)public returns (bool ok);\r\n  function transfer(address to, uint value)public returns (bool ok);\r\n  event Transfer(address indexed from, address indexed to, uint value);\r\n  event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\n\r\ncontract etherecash is ERC20,Math\r\n{\r\n   string public constant symbol = \"ECH\";\r\n     string public constant name = \"EtherEcash\";\r\n     uint8 public constant decimals = 18;\r\n     uint256 _totalSupply = Mul(360000000,(10 **18));\r\n     \r\n     // Owner of this contract\r\n     address public owner;\r\n     \r\n     address central_account;\r\n  \r\n     // Balances for each account\r\n     mapping(address => uint256) balances;\r\n  \r\n     // Owner of account approves the transfer of an amount to another account\r\n     mapping(address => mapping (address => uint256)) allowed;\r\n     \r\n     \r\n  \r\n     // Functions with this modifier can only be executed by the owner\r\n     modifier onlyOwner() {\r\n         require (msg.sender == owner);\r\n         _;\r\n     }\r\n      modifier onlycentralAccount {\r\n        require(msg.sender == central_account);\r\n        _;\r\n    }\r\n  \r\n     // Constructor\r\n     function etherecash() public {\r\n         owner = msg.sender;\r\n         balances[owner] = _totalSupply;\r\n     }\r\n  \r\n  function set_centralAccount(address central_Acccount) external onlyOwner\r\n    {\r\n        require(central_Acccount != 0x0);\r\n        central_account = central_Acccount;\r\n    }\r\n    \r\n    // what is the total supply of the ech tokens\r\n     function totalSupply() public view returns (uint256 total_Supply) {\r\n         total_Supply = _totalSupply;\r\n     }\r\n  \r\n     // What is the balance of a particular account?\r\n     function balanceOf(address _owner)public view returns (uint256 balance) {\r\n         return balances[_owner];\r\n     }\r\n  \r\n     // Transfer the balance from owner's account to another account\r\n     function transfer(address _to, uint256 _amount)public returns (bool success) {\r\n         require( _to != 0x0);\r\n         require(balances[msg.sender] >= _amount \r\n             && _amount >= 0\r\n             && balances[_to] + _amount >= balances[_to]);\r\n           balances[msg.sender] = Sub(balances[msg.sender], _amount);\r\n             balances[_to] = Add(balances[_to], _amount);\r\n             Transfer(msg.sender, _to, _amount);\r\n             return true;\r\n        \r\n     }\r\n  \r\n     // Send _value amount of tokens from address _from to address _to\r\n     // The transferFrom method is used for a withdraw workflow, allowing contracts to send\r\n     // tokens on your behalf, for example to \"deposit\" to a contract address and/or to charge\r\n     // fees in sub-currencies; the command should fail unless the _from account has\r\n     // deliberately authorized the sender of the message via some mechanism; we propose\r\n     // these standardized APIs for approval:\r\n     function transferFrom(\r\n         address _from,\r\n         address _to,\r\n         uint256 _amount\r\n     )public returns (bool success) {\r\n        require(_to != 0x0); \r\n         require(balances[_from] >= _amount\r\n             && allowed[_from][msg.sender] >= _amount\r\n             && _amount >= 0\r\n             && balances[_to] + _amount >= balances[_to]);\r\n        balances[_from] = Sub(balances[_from], _amount);\r\n             allowed[_from][msg.sender] = Sub(allowed[_from][msg.sender], _amount);\r\n             balances[_to] = Add(balances[_to], _amount);\r\n             Transfer(_from, _to, _amount);\r\n             return true;\r\n             }\r\n \r\n     // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\r\n     // If this function is called again it overwrites the current allowance with _value.\r\n     function approve(address _spender, uint256 _amount)public returns (bool success) {\r\n         allowed[msg.sender][_spender] = _amount;\r\n         Approval(msg.sender, _spender, _amount);\r\n         return true;\r\n     }\r\n  \r\n     function allowance(address _owner, address _spender)public view returns (uint256 remaining) {\r\n         return allowed[_owner][_spender];\r\n   }\r\n   \r\n   //  0.01 % = 1 and 100% = 10000\r\n    function zero_fee_transaction(address _from, address _to, uint256 _amount, uint tax) external onlycentralAccount returns(bool success) {\r\n        require(_to != 0x0 && tax >=0);\r\n       \r\n      uint256 amount = _amount * 10**18;\r\n      uint256 taxToken = Div((Mul(tax,  amount)), 10000); \r\n      uint256 totalToken = Add(amount, taxToken);\r\n       require (balances[_from] >= amount &&\r\n            _amount > 0 &&\r\n            balances[_to] + amount > balances[_to]);\r\n            balances[_from] = Sub(balances[_from], totalToken);\r\n            balances[_to] = Add(balances[_to], amount);\r\n            balances[owner] = Add(balances[owner], taxToken);\r\n            Transfer(_from, _to, amount);\r\n            Transfer(_from, owner, taxToken);\r\n            return true;\r\n           }\r\n\r\n   // .01 % = 1 and 100% = 10000\r\n    function com_fee_transaction(address _from,address _to,address _taxer, uint256 _amount, uint commision) external onlycentralAccount returns(bool success) {\r\n      require(_to != 0x0 && _taxer != 0x0 && commision >=0); \r\n      uint256 amount = _amount * 10**18;\r\n      uint256 comToken = Div((Mul(commision,  amount)), 10000); \r\n      uint256 totalToken = Sub(amount, comToken);\r\n      require (balances[_from] >= amount &&\r\n            totalToken >=0 &&\r\n        balances[_to] + totalToken > balances[_to]);\r\n           balances[_from] = Sub(balances[_from], amount);\r\n           balances[_to] = Add(balances[_to], totalToken);\r\n            balances[_taxer] = Add(balances[_taxer], comToken);\r\n            Transfer(_from, _to, totalToken);\r\n            Transfer(_from, _taxer, comToken);\r\n            return true;\r\n       }\r\n\r\n \r\n    \r\n     \r\n\r\n\t//In case the ownership needs to be transferred\r\n\tfunction transferOwnership(address newOwner)public onlyOwner\r\n\t{\r\n\t    require( newOwner != 0x0);\r\n\t    balances[newOwner] = Add(balances[newOwner],balances[owner]);\r\n\t    balances[owner] = 0;\r\n\t    owner = newOwner;\r\n\t}\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"total_Supply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"central_Acccount\",\"type\":\"address\"}],\"name\":\"set_centralAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"tax\",\"type\":\"uint256\"}],\"name\":\"zero_fee_transaction\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_taxer\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"commision\",\"type\":\"uint256\"}],\"name\":\"com_fee_transaction\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"etherecash","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://de6f56812320eab21964e7733bf7ee9bf611a08639ca29d7ec4726a72d886bc6"}]}