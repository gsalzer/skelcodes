{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\n    xgr_token_db.sol\r\n    2.0.0\r\n    \r\n    Rajci 'iFA' Andor @ ifa@fusionwallet.io\r\n*/\r\npragma solidity 0.4.18;\r\n\r\ncontract SafeMath {\r\n    /* Internals */\r\n    function safeAdd(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        if ( b > 0 ) {\r\n            assert( a + b > a );\r\n        }\r\n        return a + b;\r\n    }\r\n    function safeSub(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        if ( b > 0 ) {\r\n            assert( a - b < a );\r\n        }\r\n        return a - b;\r\n    }\r\n    function safeMul(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n    function safeDiv(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        return a / b;\r\n    }\r\n}\r\n\r\ncontract Owned {\r\n    /* Variables */\r\n    address public owner = msg.sender;\r\n    /* Externals */\r\n    function replaceOwner(address newOwner) external returns(bool success) {\r\n        require( isOwner() );\r\n        owner = newOwner;\r\n        return true;\r\n    }\r\n    /* Internals */\r\n    function isOwner() internal view returns(bool) {\r\n        return owner == msg.sender;\r\n    }\r\n    /* Modifiers */\r\n    modifier onlyForOwner {\r\n        require( isOwner() );\r\n        _;\r\n    }\r\n}\r\n\r\ncontract TokenDB is SafeMath, Owned {\r\n    /* Structures */\r\n    struct allowance_s {\r\n        uint256 amount;\r\n        uint256 nonce;\r\n    }\r\n    struct deposits_s {\r\n        address addr;\r\n        uint256 amount;\r\n        uint256 start;\r\n        uint256 end;\r\n        uint256 interestOnEnd;\r\n        uint256 interestBeforeEnd;\r\n        uint256 interestFee;\r\n        uint256 interestMultiplier;\r\n        bool    closeable;\r\n        bool    valid;\r\n    }\r\n    /* Variables */\r\n    mapping(address => mapping(address => allowance_s)) public allowance;\r\n    mapping(address => uint256) public balanceOf;\r\n    mapping(uint256 => deposits_s) private deposits;\r\n    mapping(address => uint256) public lockedBalances;\r\n    address public tokenAddress;\r\n    address public depositsAddress;\r\n    uint256 public depositsCounter;\r\n    uint256 public totalSupply;\r\n    /* Constructor */\r\n    /* Externals */\r\n    function changeTokenAddress(address newTokenAddress) external onlyForOwner {\r\n        tokenAddress = newTokenAddress;\r\n    }\r\n    function changeDepositsAddress(address newDepositsAddress) external onlyForOwner {\r\n        depositsAddress = newDepositsAddress;\r\n    }\r\n    function openDeposit(address addr, uint256 amount, uint256 end, uint256 interestOnEnd,\r\n        uint256 interestBeforeEnd, uint256 interestFee, uint256 multiplier, bool closeable) external onlyForDeposits returns(bool success, uint256 DID) {\r\n        depositsCounter += 1;\r\n        DID = depositsCounter;\r\n        lockedBalances[addr] = safeAdd(lockedBalances[addr], amount);\r\n        deposits[DID] = deposits_s(\r\n            addr,\r\n            amount,\r\n            block.number,\r\n            end,\r\n            interestOnEnd,\r\n            interestBeforeEnd,\r\n            interestFee,\r\n            multiplier,\r\n            closeable,\r\n            true\r\n        );\r\n        return (true, DID);\r\n    }\r\n    function closeDeposit(uint256 DID) external onlyForDeposits returns (bool success) {\r\n        require( deposits[DID].valid );\r\n        delete deposits[DID].valid;\r\n        lockedBalances[deposits[DID].addr] = safeSub(lockedBalances[deposits[DID].addr], deposits[DID].amount);\r\n        return true;\r\n    }\r\n    function transfer(address from, address to, uint256 amount, uint256 fee) external onlyForToken returns(bool success) {\r\n        balanceOf[from] = safeSub(balanceOf[from], safeAdd(amount, fee));\r\n        balanceOf[to] = safeAdd(balanceOf[to], amount);\r\n        totalSupply = safeSub(totalSupply, fee);\r\n        return true;\r\n    }\r\n    function increase(address owner, uint256 value) external onlyForToken returns(bool success) {\r\n        balanceOf[owner] = safeAdd(balanceOf[owner], value);\r\n        totalSupply = safeAdd(totalSupply, value);\r\n        return true;\r\n    }\r\n    function decrease(address owner, uint256 value) external onlyForToken returns(bool success) {\r\n        require( safeSub(balanceOf[owner], safeAdd(lockedBalances[owner], value)) >= 0 );\r\n        balanceOf[owner] = safeSub(balanceOf[owner], value);\r\n        totalSupply = safeSub(totalSupply, value);\r\n        return true;\r\n    }\r\n    function setAllowance(address owner, address spender, uint256 amount, uint256 nonce) external onlyForToken returns(bool success) {\r\n        allowance[owner][spender].amount = amount;\r\n        allowance[owner][spender].nonce = nonce;\r\n        return true;\r\n    }\r\n    /* Constants */\r\n    function getAllowance(address owner, address spender) public constant returns(bool success, uint256 remaining, uint256 nonce) {\r\n        return ( true, allowance[owner][spender].amount, allowance[owner][spender].nonce );\r\n    }\r\n    function getDeposit(uint256 UID) public constant returns(address addr, uint256 amount, uint256 start,\r\n        uint256 end, uint256 interestOnEnd, uint256 interestBeforeEnd, uint256 interestFee, uint256 interestMultiplier, bool closeable, bool valid) {\r\n        addr = deposits[UID].addr;\r\n        amount = deposits[UID].amount;\r\n        start = deposits[UID].start;\r\n        end = deposits[UID].end;\r\n        interestOnEnd = deposits[UID].interestOnEnd;\r\n        interestBeforeEnd = deposits[UID].interestBeforeEnd;\r\n        interestFee = deposits[UID].interestFee;\r\n        interestMultiplier = deposits[UID].interestMultiplier;\r\n        closeable = deposits[UID].closeable;\r\n        valid = deposits[UID].valid;\r\n    }\r\n    /* Modifiers */\r\n    modifier onlyForToken {\r\n        require( msg.sender == tokenAddress );\r\n        _;\r\n    }\r\n    modifier onlyForDeposits {\r\n        require( msg.sender == depositsAddress );\r\n        _;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockedBalances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"getAllowance\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"},{\"name\":\"remaining\",\"type\":\"uint256\"},{\"name\":\"nonce\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"setAllowance\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"end\",\"type\":\"uint256\"},{\"name\":\"interestOnEnd\",\"type\":\"uint256\"},{\"name\":\"interestBeforeEnd\",\"type\":\"uint256\"},{\"name\":\"interestFee\",\"type\":\"uint256\"},{\"name\":\"multiplier\",\"type\":\"uint256\"},{\"name\":\"closeable\",\"type\":\"bool\"}],\"name\":\"openDeposit\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"},{\"name\":\"DID\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"depositsAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"increase\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"DID\",\"type\":\"uint256\"}],\"name\":\"closeDeposit\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"UID\",\"type\":\"uint256\"}],\"name\":\"getDeposit\",\"outputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"start\",\"type\":\"uint256\"},{\"name\":\"end\",\"type\":\"uint256\"},{\"name\":\"interestOnEnd\",\"type\":\"uint256\"},{\"name\":\"interestBeforeEnd\",\"type\":\"uint256\"},{\"name\":\"interestFee\",\"type\":\"uint256\"},{\"name\":\"interestMultiplier\",\"type\":\"uint256\"},{\"name\":\"closeable\",\"type\":\"bool\"},{\"name\":\"valid\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"replaceOwner\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"depositsCounter\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newDepositsAddress\",\"type\":\"address\"}],\"name\":\"changeDepositsAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newTokenAddress\",\"type\":\"address\"}],\"name\":\"changeTokenAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"nonce\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"decrease\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"TokenDB","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://8132e94522cdcfd9edfe52710b70e102cd85b15759728643f6591c91e5357c1f"}]}