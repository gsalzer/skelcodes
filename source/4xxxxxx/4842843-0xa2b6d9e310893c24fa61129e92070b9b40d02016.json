{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n// https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts/math/SafeMath.sol\r\nlibrary SafeMath {\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts/ownership/Ownable.sol\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n}\r\n\r\n// https://github.com/ethereum/EIPs/issues/179\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// https://github.com/ethereum/EIPs/issues/20\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts/token/DetailedERC20.sol\r\ncontract DetailedERC20 is ERC20 {\r\n  string public name;\r\n  string public symbol;\r\n  uint8 public decimals;\r\n\r\n  function DetailedERC20(string _name, string _symbol, uint8 _decimals) public {\r\n    name = _name;\r\n    symbol = _symbol;\r\n    decimals = _decimals;\r\n  }\r\n}\r\n\r\n// RoyalForkToken has the following properties:\r\n// - users create an \"account\", which consists of a unique username, and token count.\r\n// - tokens are minted at the discretion of \"owner\" and \"minter\".\r\n// - tokens can only be transferred to existing token holders.\r\n// - each token holder is entitled to a share of all donations sent to contract \r\n//   on a per-month basis and regardless of total token holdings; a dividend. \r\n//   (eg: 10 eth is sent to the contract in January.  There are 100 token \r\n//   holders on Jan 31.  At any time in February, each token holder can \r\n//   withdraw .1 eth for their January share).\r\n// - dividends not collected for a given month become donations for the next month.\r\ncontract RoyalForkToken is Ownable, DetailedERC20(\"RoyalForkToken\", \"RFT\", 0) {\r\n  using SafeMath for uint256;\r\n\r\n  struct Hodler {\r\n    bytes16 username;\r\n    uint64 balance;\r\n    uint16 canWithdrawPeriod;\r\n  }\r\n\r\n  mapping(address => Hodler) public hodlers;\r\n  mapping(bytes16 => address) public usernames;\r\n\r\n  uint256 public epoch = now;\r\n  uint16 public currentPeriod = 1;\r\n  uint64 public numHodlers;\r\n  uint64 public prevHodlers;\r\n  uint256 public prevBalance;\r\n\r\n  address minter;\r\n\r\n  mapping(address => mapping (address => uint256)) internal allowed;\r\n\r\n  event Mint(address indexed to, uint256 amount);\r\n  event PeriodEnd(uint16 indexed period, uint256 amount, uint64 hodlers);\r\n  event Donation(address indexed from, uint256 amount);\r\n  event Withdrawal(address indexed to, uint16 indexed period, uint256 amount);\r\n\r\n  modifier onlyMinter() {\r\n    require(msg.sender == minter);\r\n    _;\r\n  }\r\n\r\n  // === Private Functions\r\n  // https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts/ECRecovery.sol\r\n  function recover(bytes32 hash, bytes sig) internal pure returns (address) {\r\n    bytes32 r;\r\n    bytes32 s;\r\n    uint8 v;\r\n\r\n    //Check the signature length\r\n    if (sig.length != 65) {\r\n      return (address(0));\r\n    }\r\n\r\n    // Divide the signature in r, s and v variables\r\n    assembly {\r\n      r := mload(add(sig, 32))\r\n      s := mload(add(sig, 64))\r\n      v := byte(0, mload(add(sig, 96)))\r\n    }\r\n\r\n    // Version of signature should be 27 or 28, but 0 and 1 are also possible versions\r\n    if (v < 27) {\r\n      v += 27;\r\n    }\r\n\r\n    // If the version is correct return the signer address\r\n    if (v != 27 && v != 28) {\r\n      return (address(0));\r\n    } else {\r\n      return ecrecover(hash, v, r, s);\r\n    }\r\n  }\r\n\r\n  // Ensures that username isn't taken, and account doesn't already exist for \r\n  // user's address.\r\n  function newHodler(address user, bytes16 username, uint64 endowment) private {\r\n    require(usernames[username] == address(0));\r\n    require(hodlers[user].canWithdrawPeriod == 0);\r\n\r\n    hodlers[user].canWithdrawPeriod = currentPeriod;\r\n    hodlers[user].balance = endowment;\r\n    hodlers[user].username = username;\r\n    usernames[username] = user;\r\n\r\n    numHodlers += 1;\r\n    totalSupply += endowment;\r\n    Mint(user, endowment);\r\n  }\r\n\r\n  // === Owner Functions\r\n  function setMinter(address newMinter) public onlyOwner {\r\n    minter = newMinter;\r\n  }\r\n\r\n  // Owner should call this on 1st of every month.\r\n  function newPeriod() public onlyOwner {\r\n    require(now >= epoch + 28 days);\r\n    currentPeriod++;\r\n    prevHodlers = numHodlers;\r\n    prevBalance = this.balance;\r\n    PeriodEnd(currentPeriod-1, prevBalance, prevHodlers);\r\n  }\r\n\r\n  // === Minter Functions\r\n  function createHodler(address to, bytes16 username, uint64 amount) public onlyMinter {\r\n    newHodler(to, username, amount);\r\n  }\r\n\r\n  // Send tokens to existing account.\r\n  function mint(address user, uint64 amount) public onlyMinter {\r\n    require(hodlers[user].canWithdrawPeriod != 0);\r\n    require(hodlers[user].balance + amount > hodlers[user].balance);\r\n\r\n    hodlers[user].balance += amount;\r\n    totalSupply += amount;\r\n    Mint(user, amount);\r\n  }\r\n\r\n  // === User Functions\r\n  // Owner will sign hash(amount, address), and address owner uses this \r\n  // signature to create their account.\r\n  function create(bytes16 username, uint64 endowment, bytes sig) public {\r\n    require(recover(keccak256(endowment, msg.sender), sig) == owner);\r\n    newHodler(msg.sender, username, endowment);\r\n  }\r\n\r\n  // User can withdraw their share of donations from the previous month.\r\n  function withdraw() public {\r\n    require(hodlers[msg.sender].canWithdrawPeriod != 0);\r\n    require(hodlers[msg.sender].canWithdrawPeriod < currentPeriod);\r\n\r\n    hodlers[msg.sender].canWithdrawPeriod = currentPeriod;\r\n    uint256 payment = prevBalance / prevHodlers;\r\n    prevHodlers -= 1;\r\n    prevBalance -= payment;\r\n    msg.sender.send(payment);\r\n    Withdrawal(msg.sender, currentPeriod-1, payment);\r\n  }\r\n\r\n  // ERC20 Functions\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return hodlers[_owner].balance;\r\n  }\r\n\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(hodlers[_to].canWithdrawPeriod != 0);\r\n    require(_value <= hodlers[msg.sender].balance);\r\n    require(hodlers[_to].balance + uint64(_value) > hodlers[_to].balance);\r\n\r\n    hodlers[msg.sender].balance -= uint64(_value);\r\n    hodlers[_to].balance += uint64(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(hodlers[_to].canWithdrawPeriod != 0);\r\n    require(_value <= hodlers[_from].balance);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n    require(hodlers[_to].balance + uint64(_value) > hodlers[_to].balance);\r\n\r\n    hodlers[_from].balance -= uint64(_value);\r\n    hodlers[_to].balance += uint64(_value);\r\n    allowed[_from][msg.sender] -= _value;\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  // === Constructor/Default\r\n  function RoyalForkToken() public {\r\n    minter = msg.sender;\r\n  }\r\n\r\n  function() payable public {\r\n    Donation(msg.sender, msg.value);\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"currentPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint64\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"prevHodlers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"hodlers\",\"outputs\":[{\"name\":\"username\",\"type\":\"bytes16\"},{\"name\":\"balance\",\"type\":\"uint64\"},{\"name\":\"canWithdrawPeriod\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"newPeriod\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"username\",\"type\":\"bytes16\"},{\"name\":\"amount\",\"type\":\"uint64\"}],\"name\":\"createHodler\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"epoch\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numHodlers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes16\"}],\"name\":\"usernames\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"prevBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newMinter\",\"type\":\"address\"}],\"name\":\"setMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"username\",\"type\":\"bytes16\"},{\"name\":\"endowment\",\"type\":\"uint64\"},{\"name\":\"sig\",\"type\":\"bytes\"}],\"name\":\"create\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"period\",\"type\":\"uint16\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"hodlers\",\"type\":\"uint64\"}],\"name\":\"PeriodEnd\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Donation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"period\",\"type\":\"uint16\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"RoyalForkToken","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://d2ce3ee1b2c929652679f7a3db841690a4af3ba2ade0556d0d76ffd9e2ed8cfb"}]}