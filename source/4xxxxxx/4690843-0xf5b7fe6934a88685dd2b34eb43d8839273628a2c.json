{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\ncontract ERC20Basic {\r\n    uint256 public totalSupply;\r\n\r\n    function balanceOf(address who) public constant returns (uint256);\r\n\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\ncontract BasicToken is ERC20Basic {\r\n    using SafeMath for uint256;\r\n    mapping (address => uint256) balances;\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function balanceOf(address _owner) public  constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n}\r\n\r\n\r\ncontract ERC20 is ERC20Basic {\r\n    function allowance(address owner, address spender) public constant returns (uint256);\r\n\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\ncontract StandardToken is ERC20, BasicToken {\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n        var _allowance = allowed[_from][msg.sender];\r\n\r\n        balances[_to] = balances[_to].add(_value);\r\n        balances[_from] = balances[_from].sub(_value);\r\n        allowed[_from][msg.sender] = _allowance.sub(_value);\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n\r\n        require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n}\r\n\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    function Ownable() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        if (newOwner != address(0)) {\r\n            owner = newOwner;\r\n        }\r\n    }\r\n}\r\n\r\n\r\ncontract MintableToken is StandardToken, Ownable {\r\n    event Mint(address indexed to, uint256 amount);\r\n\r\n    event MintFinished();\r\n\r\n\r\n    bool public mintingFinished = false;\r\n    modifier canMint() {\r\n        require(!mintingFinished);\r\n        _;\r\n    }\r\n\r\n    function mint(address _to, uint256 _amount) public onlyOwner canMint returns (bool) {\r\n        totalSupply = totalSupply.add(_amount);\r\n        balances[_to] = balances[_to].add(_amount);\r\n        Mint(_to, _amount);\r\n        return true;\r\n    }\r\n\r\n    function destroy(uint256 _amount, address destroyer) public onlyOwner {\r\n        uint256 myBalance = balances[destroyer];\r\n        if (myBalance > _amount) {\r\n            totalSupply = totalSupply.sub(_amount);\r\n            balances[destroyer] = myBalance.sub(_amount);\r\n        }\r\n        else {\r\n            if (myBalance != 0) totalSupply = totalSupply.sub(myBalance);\r\n            balances[destroyer] = 0;\r\n        }\r\n    }\r\n\r\n    function finishMinting() public onlyOwner returns (bool) {\r\n        mintingFinished = true;\r\n        MintFinished();\r\n        return true;\r\n    }\r\n}\r\n\r\n\r\ncontract Crowdsale is Ownable {\r\n    using SafeMath for uint256;\r\n    // The token being sold\r\n    ObizcoinCrowdsaleToken public token;\r\n    // address where funds are collected\r\n    address public wallet;\r\n    // amount of raised money in wei\r\n    uint256 public weiRaised;\r\n\r\n    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount, uint mytime);\r\n\r\n    function Crowdsale()public {\r\n        token = createTokenContract();\r\n        wallet = msg.sender;\r\n    }\r\n\r\n    function setNewWallet(address newWallet) public onlyOwner {\r\n        require(newWallet != 0x0);\r\n        wallet = newWallet;\r\n    }\r\n\r\n    function createTokenContract() internal returns (ObizcoinCrowdsaleToken) {\r\n        return new ObizcoinCrowdsaleToken();\r\n    }\r\n    // fallback function can be used to buy tokens\r\n    function() public payable {\r\n        buyTokens(msg.sender);\r\n    }\r\n\r\n    function profitSharing() payable public {\r\n        uint256 weiAmount = msg.value;\r\n        uint256 ballanceOfHolder;\r\n        for (uint i = 0; i < holders.length; i++)\r\n        {\r\n            ballanceOfHolder = token.balanceOf(holders[i]);\r\n            if (ballanceOfHolder > 0) {\r\n                holders[i].transfer(ballanceOfHolder.mul(weiAmount).div(token.totalSupply()));\r\n            }\r\n        }\r\n    }\r\n\r\n    function destroyMyToken(uint256 amount) public onlyOwner {\r\n        token.destroy(amount.mul(1000000000000000000), msg.sender);\r\n    }\r\n\r\n    uint time0 = 1512970200; // now; // 11th dec, 2017 at 05:30 hrs UTC\r\n    //uint time0 = block.timestamp;\r\n    uint time1 = time0 + 15 days;\r\n\r\n    uint time2 = time1 + 44 days + 5 hours + 5 minutes; // 24th Jan,2018 at 11:00 hrs UTC\r\n\r\n    uint time3 = time0 + 49 days;\r\n\r\n    uint time4 = time3 + 1 weeks;\r\n\r\n    uint time5 = time3 + 2 weeks;\r\n\r\n    uint time6 = time3 + 3 weeks;\r\n\r\n    uint time7 = time2 + 34 days;\r\n\r\n    // low level token purchase function\r\n    function buyTokens(address beneficiary) public payable {\r\n        require(beneficiary != 0x0);\r\n        require(validPurchase());\r\n        require(!hasEnded());\r\n        uint256 weiAmount = msg.value;\r\n        uint256 tokens;\r\n        // calculate token amount to be created\r\n\r\n        if (block.timestamp >= time0 && block.timestamp < time2) tokens = weiAmount.mul(11000);\r\n        else if (block.timestamp >= time3 && block.timestamp < time7) tokens = weiAmount.mul(10000);\r\n\r\n        // update state\r\n        weiRaised = weiRaised.add(weiAmount);\r\n        token.mint(beneficiary, tokens);\r\n        addNewHolder(beneficiary);\r\n        TokenPurchase(msg.sender, beneficiary, weiAmount, tokens, block.timestamp);\r\n        forwardFunds();\r\n    }\r\n\r\n    function mintTokens(address beneficiary, uint256 tokens) internal {\r\n        uint256 weiAmount;\r\n        if (block.timestamp >= time0 && block.timestamp < time2) weiAmount = tokens.div(11000);\r\n        else if (block.timestamp >= time3 && block.timestamp < time7) weiAmount = tokens.div(10000);\r\n\r\n        weiRaised = weiRaised.add(weiAmount);\r\n        token.mint(beneficiary, tokens);\r\n        addNewHolder(beneficiary);\r\n        TokenPurchase(msg.sender, beneficiary, weiAmount, tokens, block.timestamp);\r\n    }\r\n\r\n    // send ether to the fund collection wallet\r\n    // override to create custom fund forwarding mechanisms\r\n    function forwardFunds() internal {\r\n        wallet.transfer(msg.value);\r\n    }\r\n    // @return true if the transaction can buy tokens\r\n    function validPurchase() internal constant returns (bool) {\r\n        return msg.value != 0;\r\n    }\r\n    // @return true if crowdsale event has ended\r\n    function hasEnded() public constant returns (bool) {\r\n        return block.timestamp < time0 || (block.timestamp > time2 && block.timestamp < time3) || block.timestamp > time7;\r\n    }\r\n\r\n    mapping (address => bool) isHolder;\r\n\r\n    address[] public holders;\r\n\r\n    function addNewHolder(address newHolder) internal {\r\n        if (!isHolder[newHolder]) {\r\n            holders.push(newHolder);\r\n            isHolder[newHolder] = true;\r\n        }\r\n    }\r\n}\r\n\r\n\r\ncontract ObizcoinCrowdsaleToken is MintableToken {\r\n    string public name;\r\n\r\n    string public symbol;\r\n\r\n    uint8 public decimals;\r\n\r\n    function ObizcoinCrowdsaleToken() public {\r\n        name = \"OBZ ICO TOKEN SALE\";\r\n        symbol = \"OBZ\";\r\n        decimals = 18;\r\n    }\r\n}\r\n\r\n\r\ncontract ObizcoinCrowdsale is Crowdsale {\r\n\r\n    uint256 public investors;\r\n\r\n    ProfitSharingObizcoin public profitSharingContract;\r\n\r\n    function ObizcoinCrowdsale () public\r\n    Crowdsale()\r\n    {\r\n        investors = 0;\r\n        profitSharingContract = new ProfitSharingObizcoin();\r\n    }\r\n\r\n\r\n    function buyObizcoinTokens(address _sender) public payable {\r\n        investors++;\r\n        buyTokens(_sender);\r\n    }\r\n\r\n    function mintObizcoinTokens(address beneficiary, uint256 tokens) public onlyOwner {\r\n        investors++;\r\n        mintTokens(beneficiary, tokens.mul(1000000000000000000));\r\n    }\r\n\r\n    function() public payable {\r\n        buyObizcoinTokens(msg.sender);\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract ProfitSharingObizcoin is Ownable {\r\n\r\n    ObizcoinCrowdsale crowdsale;\r\n\r\n    function ProfitSharingObizcoin()public {\r\n        crowdsale = ObizcoinCrowdsale(msg.sender);\r\n    }\r\n\r\n    function() public payable {\r\n        crowdsale.profitSharing.value(msg.value)();\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"ProfitSharingObizcoin","CompilerVersion":"v0.4.19-nightly.2017.11.11+commit.284c3839","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://9c4d3e5433c5d040d89d52c117a9363345608dc7828510597ddc87dab359f21f"}]}