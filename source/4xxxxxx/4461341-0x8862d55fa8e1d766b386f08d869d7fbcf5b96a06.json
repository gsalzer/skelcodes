{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.17;\r\n\r\n// ----------------------------------------------------------------------------------------------\r\n// by EdooPAD Inc.\r\n// An ERC20 standard\r\n//\r\n// author: EdooPAD Inc.\r\n// Contact: william@edoopad.com \r\n\r\n/// @title Multisignature wallet - Allows multiple parties to agree on transactions before execution.\r\n\r\ncontract MultiSigWallet {\r\n\r\n    event Confirmation(address sender, bytes32 transactionId);\r\n    event Revocation(address sender, bytes32 transactionId);\r\n    event Submission(bytes32 transactionId);\r\n    event Execution(bytes32 transactionId);\r\n    event Deposit(address sender, uint value);\r\n    event OwnerAddition(address owner);\r\n    event OwnerRemoval(address owner);\r\n    event RequirementChange(uint required);\r\n    event CoinCreation(address coin);\r\n\r\n    mapping (bytes32 => Transaction) public transactions;\r\n    mapping (bytes32 => mapping (address => bool)) public confirmations;\r\n    mapping (address => bool) public isOwner;\r\n    address[] owners;\r\n    bytes32[] transactionList;\r\n    uint public required;\r\n\r\n    struct Transaction {\r\n        address destination;\r\n        uint value;\r\n        bytes data;\r\n        uint nonce;\r\n        bool executed;\r\n    }\r\n\r\n    modifier onlyWallet() {\r\n        if (msg.sender != address(this))\r\n            revert();\r\n        _;\r\n    }\r\n\r\n    modifier ownerDoesNotExist(address owner) {\r\n        if (isOwner[owner])\r\n            revert();\r\n        _;\r\n    }\r\n\r\n    modifier ownerExists(address owner) {\r\n        if (!isOwner[owner])\r\n            revert();\r\n        _;\r\n    }\r\n\r\n    modifier confirmed(bytes32 transactionId, address owner) {\r\n        if (!confirmations[transactionId][owner])\r\n            revert();\r\n        _;\r\n    }\r\n\r\n    modifier notConfirmed(bytes32 transactionId, address owner) {\r\n        if (confirmations[transactionId][owner])\r\n            revert();\r\n        _;\r\n    }\r\n\r\n    modifier notExecuted(bytes32 transactionId) {\r\n        if (transactions[transactionId].executed)\r\n            revert();\r\n        _;\r\n    }\r\n\r\n    modifier notNull(address destination) {\r\n        if (destination == 0)\r\n            revert();\r\n        _;\r\n    }\r\n\r\n    modifier validRequirement(uint _ownerCount, uint _required) {\r\n        if (   _required > _ownerCount\r\n            || _required == 0\r\n            || _ownerCount == 0)\r\n            revert();\r\n        _;\r\n    }\r\n\r\n    /// @dev Allows to add a new owner. Transaction has to be sent by wallet.\r\n    /// @param owner Address of new owner.\r\n    function addOwner(address owner)\r\n        external\r\n        onlyWallet\r\n        ownerDoesNotExist(owner)\r\n    {\r\n        isOwner[owner] = true;\r\n        owners.push(owner);\r\n        OwnerAddition(owner);\r\n    }\r\n\r\n    /// @dev Allows to remove an owner. Transaction has to be sent by wallet.\r\n    /// @param owner Address of owner.\r\n    function removeOwner(address owner)\r\n        external\r\n        onlyWallet\r\n        ownerExists(owner)\r\n    {\r\n        isOwner[owner] = false;\r\n        for (uint i=0; i<owners.length - 1; i++)\r\n            if (owners[i] == owner) {\r\n                owners[i] = owners[owners.length - 1];\r\n                break;\r\n            }\r\n        owners.length -= 1;\r\n        if (required > owners.length)\r\n            changeRequirement(owners.length);\r\n        OwnerRemoval(owner);\r\n    }\r\n\r\n    /// @dev Update the minimum required owner for transaction validation\r\n    /// @param _required number of owners\r\n    function changeRequirement(uint _required)\r\n        public\r\n        onlyWallet\r\n        validRequirement(owners.length, _required)\r\n    {\r\n        required = _required;\r\n        RequirementChange(_required);\r\n    }\r\n\r\n    /// @dev Adds a new transaction to the transaction mapping, if transaction does not exist yet.\r\n    /// @param destination Transaction target address.\r\n    /// @param value Transaction ether value.\r\n    /// @param data Transaction data payload.\r\n    /// @param nonce \r\n    /// @return transactionId.\r\n    function addTransaction(address destination, uint value, bytes data, uint nonce)\r\n        private\r\n        notNull(destination)\r\n        returns (bytes32 transactionId)\r\n    {\r\n        // transactionId = sha3(destination, value, data, nonce);\r\n        transactionId = keccak256(destination, value, data, nonce);\r\n        if (transactions[transactionId].destination == 0) {\r\n            transactions[transactionId] = Transaction({\r\n                destination: destination,\r\n                value: value,\r\n                data: data,\r\n                nonce: nonce,\r\n                executed: false\r\n            });\r\n            transactionList.push(transactionId);\r\n            Submission(transactionId);\r\n        }\r\n    }\r\n\r\n    /// @dev Allows an owner to submit and confirm a transaction.\r\n    /// @param destination Transaction target address.\r\n    /// @param value Transaction ether value.\r\n    /// @param data Transaction data payload.\r\n    /// @param nonce \r\n    /// @return transactionId.\r\n    function submitTransaction(address destination, uint value, bytes data, uint nonce)\r\n        external\r\n        ownerExists(msg.sender)\r\n        returns (bytes32 transactionId)\r\n    {\r\n        transactionId = addTransaction(destination, value, data, nonce);\r\n        confirmTransaction(transactionId);\r\n    }\r\n\r\n    /// @dev Allows an owner to confirm a transaction.\r\n    /// @param transactionId transaction Id.\r\n    function confirmTransaction(bytes32 transactionId)\r\n        public\r\n        ownerExists(msg.sender)\r\n        notConfirmed(transactionId, msg.sender)\r\n    {\r\n        confirmations[transactionId][msg.sender] = true;\r\n        Confirmation(msg.sender, transactionId);\r\n        executeTransaction(transactionId);\r\n    }\r\n\r\n    \r\n    /// @dev Allows anyone to execute a confirmed transaction.\r\n    /// @param transactionId transaction Id.\r\n    function executeTransaction(bytes32 transactionId)\r\n        public\r\n        notExecuted(transactionId)\r\n    {\r\n        if (isConfirmed(transactionId)) {\r\n            Transaction storage txn = transactions[transactionId]; \r\n            txn.executed = true;\r\n            if (!txn.destination.call.value(txn.value)(txn.data))\r\n                revert();\r\n                // What happen with txn.executed when revert() is executed?\r\n            Execution(transactionId);\r\n        }\r\n    }\r\n\r\n    /// @dev Allows an owner to revoke a confirmation for a transaction.\r\n    /// @param transactionId transaction Id.\r\n    function revokeConfirmation(bytes32 transactionId)\r\n        external\r\n        ownerExists(msg.sender)\r\n        confirmed(transactionId, msg.sender)\r\n        notExecuted(transactionId)\r\n    {\r\n        confirmations[transactionId][msg.sender] = false;\r\n        Revocation(msg.sender, transactionId);\r\n    }\r\n\r\n    /// @dev Contract constructor sets initial owners and required number of confirmations.\r\n    /// @param _owners List of initial owners.\r\n    /// @param _required Number of required confirmations.\r\n    function MultiSigWallet(address[] _owners, uint _required)\r\n        validRequirement(_owners.length, _required)\r\n        public \r\n    {\r\n        for (uint i=0; i<_owners.length; i++) {\r\n            // WHY Not included in this code?\r\n            // if (isOwner[_owners[i]] || _owners[i] == 0)\r\n            //     throw;\r\n            isOwner[_owners[i]] = true;\r\n        }\r\n        owners = _owners;\r\n        required = _required;\r\n    }\r\n\r\n    ///  Fallback function allows to deposit ether.\r\n    function()\r\n        public\r\n        payable\r\n    {\r\n        if (msg.value > 0)\r\n            Deposit(msg.sender, msg.value);\r\n    }\r\n\r\n    /// @dev Returns the confirmation status of a transaction.\r\n    /// @param transactionId transaction Id.\r\n    /// @return Confirmation status.\r\n    function isConfirmed(bytes32 transactionId)\r\n        public\r\n        constant\r\n        returns (bool)\r\n    {\r\n        uint count = 0;\r\n        for (uint i=0; i<owners.length; i++)\r\n            if (confirmations[transactionId][owners[i]])\r\n                count += 1;\r\n            if (count == required)\r\n                return true;\r\n    }\r\n\r\n    /*\r\n     * Web3 call functions\r\n     */\r\n    /// @dev Returns number of confirmations of a transaction.\r\n    /// @param transactionId transaction Id.\r\n    /// @return Number of confirmations.\r\n    function confirmationCount(bytes32 transactionId)\r\n        external\r\n        constant\r\n        returns (uint count)\r\n    {\r\n        for (uint i=0; i<owners.length; i++)\r\n            if (confirmations[transactionId][owners[i]])\r\n                count += 1;\r\n    }\r\n\r\n    ///  @dev Return list of transactions after filters are applied\r\n    ///  @param isPending pending status\r\n    ///  @return List of transactions\r\n    function filterTransactions(bool isPending)\r\n        private\r\n        constant\r\n        returns (bytes32[] _transactionList)\r\n    {\r\n        bytes32[] memory _transactionListTemp = new bytes32[](transactionList.length);\r\n        uint count = 0;\r\n        for (uint i=0; i<transactionList.length; i++)\r\n            if (   isPending && !transactions[transactionList[i]].executed\r\n                || !isPending && transactions[transactionList[i]].executed)\r\n            {\r\n                _transactionListTemp[count] = transactionList[i];\r\n                count += 1;\r\n            }\r\n        _transactionList = new bytes32[](count);\r\n        for (i=0; i<count; i++)\r\n            if (_transactionListTemp[i] > 0)\r\n                _transactionList[i] = _transactionListTemp[i];\r\n    }\r\n\r\n    /// @dev Returns list of pending transactions\r\n    function getPendingTransactions()\r\n        external\r\n        constant\r\n        returns (bytes32[])\r\n    {\r\n        return filterTransactions(true);\r\n    }\r\n\r\n    /// @dev Returns list of executed transactions\r\n    function getExecutedTransactions()\r\n        external\r\n        constant\r\n        returns (bytes32[])\r\n    {\r\n        return filterTransactions(false);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"confirmations\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"destination\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"},{\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"submitTransaction\",\"outputs\":[{\"name\":\"transactionId\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"removeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"transactionId\",\"type\":\"bytes32\"}],\"name\":\"confirmationCount\",\"outputs\":[{\"name\":\"count\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"transactions\",\"outputs\":[{\"name\":\"destination\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"},{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"executed\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"transactionId\",\"type\":\"bytes32\"}],\"name\":\"isConfirmed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"addOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"transactionId\",\"type\":\"bytes32\"}],\"name\":\"confirmTransaction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_required\",\"type\":\"uint256\"}],\"name\":\"changeRequirement\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"transactionId\",\"type\":\"bytes32\"}],\"name\":\"executeTransaction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPendingTransactions\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"required\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getExecutedTransactions\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"transactionId\",\"type\":\"bytes32\"}],\"name\":\"revokeConfirmation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_owners\",\"type\":\"address[]\"},{\"name\":\"_required\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"transactionId\",\"type\":\"bytes32\"}],\"name\":\"Confirmation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"transactionId\",\"type\":\"bytes32\"}],\"name\":\"Revocation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"transactionId\",\"type\":\"bytes32\"}],\"name\":\"Submission\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"transactionId\",\"type\":\"bytes32\"}],\"name\":\"Execution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnerAddition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnerRemoval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"required\",\"type\":\"uint256\"}],\"name\":\"RequirementChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"coin\",\"type\":\"address\"}],\"name\":\"CoinCreation\",\"type\":\"event\"}]","ContractName":"MultiSigWallet","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000003000000000000000000000000ab9ae04060d64cc27835b914a4b90468122ddd8e000000000000000000000000a107483c8a16a58871182a48d4ba1fbbb6a64c71000000000000000000000000523a72000854ac677b08c13b72bad994bc1b030b","Library":"","SwarmSource":"bzzr://897e33d75b01c20f79830991fe89eb35bd82fcf565594e22c6a86517526055e7"}]}