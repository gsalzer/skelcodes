{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\ncontract REDToken is ERC20, Ownable {\r\n\r\n    using SafeMath for uint;\r\n\r\n/*----------------- Token Information -----------------*/\r\n\r\n    string public constant name = \"Red Community Token\";\r\n    string public constant symbol = \"RED\";\r\n\r\n    uint8 public decimals = 18;                            // (ERC20 API) Decimal precision, factor is 1e18\r\n\r\n    mapping (address => uint256) angels;                   // Angels accounts table (during locking period only)\r\n    mapping (address => uint256) accounts;                 // User's accounts table\r\n    mapping (address => mapping (address => uint256)) allowed; // User's allowances table\r\n\r\n/*----------------- ICO Information -----------------*/\r\n\r\n    uint256 public angelSupply;                            // Angels sale supply\r\n    uint256 public earlyBirdsSupply;                       // Early birds supply\r\n    uint256 public publicSupply;                           // Open round supply\r\n    uint256 public foundationSupply;                       // Red Foundation/Community supply\r\n    uint256 public redTeamSupply;                          // Red team supply\r\n    uint256 public marketingSupply;                        // Marketing & strategic supply\r\n\r\n    uint256 public angelAmountRemaining;                   // Amount of private angels tokens remaining at a given time\r\n    uint256 public icoStartsAt;                            // Crowdsale ending timestamp\r\n    uint256 public icoEndsAt;                              // Crowdsale ending timestamp\r\n    uint256 public redTeamLockingPeriod;                   // Locking period for Red team's supply\r\n    uint256 public angelLockingPeriod;                     // Locking period for Angel's supply\r\n\r\n    address public crowdfundAddress;                       // Crowdfunding contract address\r\n    address public redTeamAddress;                         // Red team address\r\n    address public foundationAddress;                      // Foundation address\r\n    address public marketingAddress;                       // Private equity address\r\n\r\n    bool public unlock20Done = false;                      // Allows the 20% unlocking for angels only once\r\n\r\n    enum icoStages {\r\n        Ready,                                             // Initial state on contract's creation\r\n        EarlyBirds,                                        // Early birds state\r\n        PublicSale,                                        // Public crowdsale state\r\n        Done                                               // Ending state after ICO\r\n    }\r\n    icoStages stage;                                       // Crowdfunding current state\r\n\r\n/*----------------- Events -----------------*/\r\n\r\n    event EarlyBirdsFinalized(uint tokensRemaining);       // Event called when early birds round is done\r\n    event CrowdfundFinalized(uint tokensRemaining);        // Event called when crowdfund is done\r\n\r\n/*----------------- Modifiers -----------------*/\r\n\r\n    modifier nonZeroAddress(address _to) {                 // Ensures an address is provided\r\n        require(_to != 0x0);\r\n        _;\r\n    }\r\n\r\n    modifier nonZeroAmount(uint _amount) {                 // Ensures a non-zero amount\r\n        require(_amount > 0);\r\n        _;\r\n    }\r\n\r\n    modifier nonZeroValue() {                              // Ensures a non-zero value is passed\r\n        require(msg.value > 0);\r\n        _;\r\n    }\r\n\r\n    modifier onlyDuringCrowdfund(){                   // Ensures actions can only happen after crowdfund ends\r\n        require((now >= icoStartsAt) && (now < icoEndsAt));\r\n        _;\r\n    }\r\n\r\n    modifier notBeforeCrowdfundEnds(){                     // Ensures actions can only happen after crowdfund ends\r\n        require(now >= icoEndsAt);\r\n        _;\r\n    }\r\n\r\n    modifier checkRedTeamLockingPeriod() {                 // Ensures locking period is over\r\n        require(now >= redTeamLockingPeriod);\r\n        _;\r\n    }\r\n\r\n    modifier checkAngelsLockingPeriod() {                  // Ensures locking period is over\r\n        require(now >= angelLockingPeriod);\r\n        _;\r\n    }\r\n\r\n    modifier onlyCrowdfund() {                             // Ensures only crowdfund can call the function\r\n        require(msg.sender == crowdfundAddress);\r\n        _;\r\n    }\r\n\r\n/*----------------- ERC20 API -----------------*/\r\n\r\n    // -------------------------------------------------\r\n    // Transfers amount to address\r\n    // -------------------------------------------------\r\n    function transfer(address _to, uint256 _amount) public notBeforeCrowdfundEnds returns (bool success) {\r\n        require(accounts[msg.sender] >= _amount);         // check amount of balance can be tranfered\r\n        addToBalance(_to, _amount);\r\n        decrementBalance(msg.sender, _amount);\r\n        Transfer(msg.sender, _to, _amount);\r\n        return true;\r\n    }\r\n\r\n    // -------------------------------------------------\r\n    // Transfers from one address to another (need allowance to be called first)\r\n    // -------------------------------------------------\r\n    function transferFrom(address _from, address _to, uint256 _amount) public notBeforeCrowdfundEnds returns (bool success) {\r\n        require(allowance(_from, msg.sender) >= _amount);\r\n        decrementBalance(_from, _amount);\r\n        addToBalance(_to, _amount);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\r\n        Transfer(_from, _to, _amount);\r\n        return true;\r\n    }\r\n\r\n    // -------------------------------------------------\r\n    // Approves another address a certain amount of RED\r\n    // -------------------------------------------------\r\n    function approve(address _spender, uint256 _value) public returns (bool success) {\r\n        require((_value == 0) || (allowance(msg.sender, _spender) == 0));\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    // -------------------------------------------------\r\n    // Gets an address's RED allowance\r\n    // -------------------------------------------------\r\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    // -------------------------------------------------\r\n    // Gets the RED balance of any address\r\n    // -------------------------------------------------\r\n    function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n        return accounts[_owner] + angels[_owner];\r\n    }\r\n\r\n\r\n/*----------------- Token API -----------------*/\r\n\r\n    // -------------------------------------------------\r\n    // Contract's constructor\r\n    // -------------------------------------------------\r\n    function REDToken() public {\r\n        totalSupply         = 200000000 * 1e18;             // 100% - 200 million total RED with 18 decimals\r\n\r\n        angelSupply         =  20000000 * 1e18;             //  10% -  20 million RED for private angels sale\r\n        earlyBirdsSupply    =  48000000 * 1e18;             //  24% -  48 million RED for early-bird sale\r\n        publicSupply        =  12000000 * 1e18;             //   6% -  12 million RED for the public crowdsale\r\n        redTeamSupply       =  30000000 * 1e18;             //  15% -  30 million RED for Red team\r\n        foundationSupply    =  70000000 * 1e18;             //  35% -  70 million RED for foundation/incentivising efforts\r\n        marketingSupply     =  20000000 * 1e18;             //  10% -  20 million RED for covering marketing and strategic expenses\r\n\r\n        angelAmountRemaining = angelSupply;                 // Decreased over the course of the private angel sale\r\n        redTeamAddress       = 0x31aa507c140E012d0DcAf041d482e04F36323B03;       // Red Team address\r\n        foundationAddress    = 0x93e3AF42939C163Ee4146F63646Fb4C286CDbFeC;       // Foundation/Community address\r\n        marketingAddress     = 0x0;                         // Marketing/Strategic address\r\n\r\n        icoStartsAt          = 1515398400;                  // Jan 8th 2018, 16:00, GMT+8\r\n        icoEndsAt            = 1517385600;                  // Jan 31th 2018, 16:00, GMT+8\r\n        angelLockingPeriod   = icoEndsAt.add(90 days);      //  3 months locking period\r\n        redTeamLockingPeriod = icoEndsAt.add(365 days);     // 12 months locking period\r\n\r\n        addToBalance(foundationAddress, foundationSupply);\r\n\r\n        stage = icoStages.Ready;                            // Initializes state\r\n    }\r\n\r\n    // -------------------------------------------------\r\n    // Opens early birds sale\r\n    // -------------------------------------------------\r\n    function startCrowdfund() external onlyCrowdfund onlyDuringCrowdfund returns(bool) {\r\n        require(stage == icoStages.Ready);\r\n        stage = icoStages.EarlyBirds;\r\n        addToBalance(crowdfundAddress, earlyBirdsSupply);\r\n        return true;\r\n    }\r\n\r\n    // -------------------------------------------------\r\n    // Returns TRUE if early birds round is currently going on\r\n    // -------------------------------------------------\r\n    function isEarlyBirdsStage() external view returns(bool) {\r\n        return (stage == icoStages.EarlyBirds);\r\n    }\r\n\r\n    // -------------------------------------------------\r\n    // Sets the crowdfund address, can only be done once\r\n    // -------------------------------------------------\r\n    function setCrowdfundAddress(address _crowdfundAddress) external onlyOwner nonZeroAddress(_crowdfundAddress) {\r\n        require(crowdfundAddress == 0x0);\r\n        crowdfundAddress = _crowdfundAddress;\r\n    }\r\n\r\n    // -------------------------------------------------\r\n    // Function for the Crowdfund to transfer tokens\r\n    // -------------------------------------------------\r\n    function transferFromCrowdfund(address _to, uint256 _amount) external onlyCrowdfund nonZeroAmount(_amount) nonZeroAddress(_to) returns (bool success) {\r\n        require(balanceOf(crowdfundAddress) >= _amount);\r\n        decrementBalance(crowdfundAddress, _amount);\r\n        addToBalance(_to, _amount);\r\n        Transfer(0x0, _to, _amount);\r\n        return true;\r\n    }\r\n\r\n    // -------------------------------------------------\r\n    // Releases Red team supply after locking period is passed\r\n    // -------------------------------------------------\r\n    function releaseRedTeamTokens() external checkRedTeamLockingPeriod onlyOwner returns(bool success) {\r\n        require(redTeamSupply > 0);\r\n        addToBalance(redTeamAddress, redTeamSupply);\r\n        Transfer(0x0, redTeamAddress, redTeamSupply);\r\n        redTeamSupply = 0;\r\n        return true;\r\n    }\r\n\r\n    // -------------------------------------------------\r\n    // Releases Marketing & strategic supply\r\n    // -------------------------------------------------\r\n    function releaseMarketingTokens() external onlyOwner returns(bool success) {\r\n        require(marketingSupply > 0);\r\n        addToBalance(marketingAddress, marketingSupply);\r\n        Transfer(0x0, marketingAddress, marketingSupply);\r\n        marketingSupply = 0;\r\n        return true;\r\n    }\r\n\r\n    // -------------------------------------------------\r\n    // Finalizes early birds round. If some RED are left, let them overflow to the crowdfund\r\n    // -------------------------------------------------\r\n    function finalizeEarlyBirds() external onlyOwner returns (bool success) {\r\n        require(stage == icoStages.EarlyBirds);\r\n        uint256 amount = balanceOf(crowdfundAddress);\r\n        addToBalance(crowdfundAddress, publicSupply);\r\n        stage = icoStages.PublicSale;\r\n        EarlyBirdsFinalized(amount);                       // event log\r\n        return true;\r\n    }\r\n\r\n    // -------------------------------------------------\r\n    // Finalizes crowdfund. If there are leftover RED, let them overflow to foundation\r\n    // -------------------------------------------------\r\n    function finalizeCrowdfund() external onlyCrowdfund {\r\n        require(stage == icoStages.PublicSale);\r\n        uint256 amount = balanceOf(crowdfundAddress);\r\n        if (amount > 0) {\r\n            accounts[crowdfundAddress] = 0;\r\n            addToBalance(foundationAddress, amount);\r\n            Transfer(crowdfundAddress, foundationAddress, amount);\r\n        }\r\n        stage = icoStages.Done;\r\n        CrowdfundFinalized(amount);                        // event log\r\n    }\r\n\r\n    // -------------------------------------------------\r\n    // Changes Red Team wallet\r\n    // -------------------------------------------------\r\n    function changeRedTeamAddress(address _wallet) external onlyOwner {\r\n        redTeamAddress = _wallet;\r\n    }\r\n\r\n    // -------------------------------------------------\r\n    // Changes Marketing&Strategic wallet\r\n    // -------------------------------------------------\r\n    function changeMarketingAddress(address _wallet) external onlyOwner {\r\n        marketingAddress = _wallet;\r\n    }\r\n\r\n    // -------------------------------------------------\r\n    // Function to unlock 20% RED to private angels investors\r\n    // -------------------------------------------------\r\n    function partialUnlockAngelsAccounts(address[] _batchOfAddresses) external onlyOwner notBeforeCrowdfundEnds returns (bool success) {\r\n        require(unlock20Done == false);\r\n        uint256 amount;\r\n        address holder;\r\n        for (uint256 i = 0; i < _batchOfAddresses.length; i++) {\r\n            holder = _batchOfAddresses[i];\r\n            amount = angels[holder].mul(20).div(100);\r\n            angels[holder] = angels[holder].sub(amount);\r\n            addToBalance(holder, amount);\r\n        }\r\n        unlock20Done = true;\r\n        return true;\r\n    }\r\n\r\n    // -------------------------------------------------\r\n    // Function to unlock all remaining RED to private angels investors (after 3 months)\r\n    // -------------------------------------------------\r\n    function fullUnlockAngelsAccounts(address[] _batchOfAddresses) external onlyOwner checkAngelsLockingPeriod returns (bool success) {\r\n        uint256 amount;\r\n        address holder;\r\n        for (uint256 i = 0; i < _batchOfAddresses.length; i++) {\r\n            holder = _batchOfAddresses[i];\r\n            amount = angels[holder];\r\n            angels[holder] = 0;\r\n            addToBalance(holder, amount);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    // -------------------------------------------------\r\n    // Function to reserve RED to private angels investors (initially locked)\r\n    // the amount of RED is in Wei\r\n    // -------------------------------------------------\r\n    function deliverAngelsREDAccounts(address[] _batchOfAddresses, uint[] _amountOfRED) external onlyOwner onlyDuringCrowdfund returns (bool success) {\r\n        for (uint256 i = 0; i < _batchOfAddresses.length; i++) {\r\n            deliverAngelsREDBalance(_batchOfAddresses[i], _amountOfRED[i]);\r\n        }\r\n        return true;\r\n    }\r\n/*----------------- Helper functions -----------------*/\r\n    // -------------------------------------------------\r\n    // If one address has contributed more than once,\r\n    // the contributions will be aggregated\r\n    // -------------------------------------------------\r\n    function deliverAngelsREDBalance(address _accountHolder, uint _amountOfBoughtRED) internal onlyOwner {\r\n        require(angelAmountRemaining > 0);\r\n        angels[_accountHolder] = angels[_accountHolder].add(_amountOfBoughtRED);\r\n        Transfer(0x0, _accountHolder, _amountOfBoughtRED);\r\n        angelAmountRemaining = angelAmountRemaining.sub(_amountOfBoughtRED);\r\n    }\r\n\r\n    // -------------------------------------------------\r\n    // Adds to balance\r\n    // -------------------------------------------------\r\n    function addToBalance(address _address, uint _amount) internal {\r\n        accounts[_address] = accounts[_address].add(_amount);\r\n    }\r\n\r\n    // -------------------------------------------------\r\n    // Removes from balance\r\n    // -------------------------------------------------\r\n    function decrementBalance(address _address, uint _amount) internal {\r\n        accounts[_address] = accounts[_address].sub(_amount);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"changeMarketingAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoStartsAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"redTeamSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_batchOfAddresses\",\"type\":\"address[]\"},{\"name\":\"_amountOfRED\",\"type\":\"uint256[]\"}],\"name\":\"deliverAngelsREDAccounts\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_batchOfAddresses\",\"type\":\"address[]\"}],\"name\":\"partialUnlockAngelsAccounts\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"angelAmountRemaining\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"publicSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoEndsAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"marketingSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdfundAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"redTeamAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_batchOfAddresses\",\"type\":\"address[]\"}],\"name\":\"fullUnlockAngelsAccounts\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"foundationSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFromCrowdfund\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"angelLockingPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"releaseRedTeamTokens\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"redTeamLockingPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"unlock20Done\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startCrowdfund\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_crowdfundAddress\",\"type\":\"address\"}],\"name\":\"setCrowdfundAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"marketingAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"earlyBirdsSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalizeCrowdfund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalizeEarlyBirds\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"angelSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isEarlyBirdsStage\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"releaseMarketingTokens\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"changeRedTeamAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"foundationAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokensRemaining\",\"type\":\"uint256\"}],\"name\":\"EarlyBirdsFinalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokensRemaining\",\"type\":\"uint256\"}],\"name\":\"CrowdfundFinalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"REDToken","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://52ffc228227c3d1a81ff21cb70452dda679c8ef07a0651d8e8b0ff96e8e9eefa"}]}