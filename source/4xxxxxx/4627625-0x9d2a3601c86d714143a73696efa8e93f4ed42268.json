{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\nlibrary SafeMath {\r\n  function mul(uint a, uint b) internal pure returns (uint) \r\n  {\r\n    uint c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n  \r\n  function div(uint a, uint b) internal pure returns (uint) \r\n  {\r\n    assert(b > 0);\r\n    uint c = a / b;\r\n    assert(a == b * c + a % b);\r\n    return c;\r\n  }\r\n  function sub(uint a, uint b) internal pure returns (uint) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n  function add(uint a, uint b) internal pure returns (uint) {\r\n    uint c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n  function max64(uint64 a, uint64 b) internal pure returns (uint64) {\r\n    return a >= b ? a : b;\r\n  }\r\n  function min64(uint64 a, uint64 b) internal pure returns (uint64) {\r\n    return a < b ? a : b;\r\n  }\r\n  function max256(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return a >= b ? a : b;\r\n  }\r\n  function min256(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return a < b ? a : b;\r\n  }\r\n}\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n    function Ownable() public {\r\n        owner = msg.sender;\r\n    }\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    function  transferOwnership(address newOwner) onlyOwner public {\r\n        if (newOwner != address(0)) {\r\n            owner = newOwner;\r\n        }\r\n    }\r\n}\r\n\r\ncontract GranitePreICO is Ownable {\r\n    using SafeMath for uint;\r\n    string public constant name = \"Pre-ICO Granite Labor Coin\";\r\n    string public constant symbol = \"PGLC\";\r\n    uint public constant coinPrice = 25 * 10 ** 14;\r\n    uint public constant decimals = 18;\r\n    uint public constant bonus = 50;\r\n    uint public minAmount = 10 ** 18;\r\n    uint public totalSupply = 0;\r\n    bool public isActive = true;\r\n    uint public investorsCount = 0;\r\n    uint public constant hardCap = 250000 * 10 ** 18;\r\n\r\n    mapping(address => uint256) balances;\r\n    mapping(address => uint) personalBonuses;\r\n    mapping(uint => address) investors;\r\n\r\n    event Paid(address indexed from, uint value);\r\n\r\n    function() payable public {\r\n        receiveETH();\r\n    }\r\n\r\n    function receiveETH() internal {\r\n        require(isActive); // can receive ETH only if pre-ICO is active\r\n        \r\n        require(msg.value >= minAmount);\r\n        \r\n        uint coinsCount = msg.value.div(coinPrice).mul(10 ** 18); // counts amount\r\n        coinsCount = coinsCount.add(coinsCount.div(100).mul(personalBonuses[msg.sender] > 0 ? personalBonuses[msg.sender] : bonus)); // bonus\r\n\r\n        require((totalSupply + coinsCount) <= hardCap);\r\n\r\n        if (balances[msg.sender] == 0) {\r\n            investors[investorsCount] = msg.sender;\r\n            investorsCount++;\r\n        }\r\n\r\n        balances[msg.sender] += coinsCount;\r\n        totalSupply += coinsCount;\r\n\r\n        Paid(msg.sender, coinsCount);\r\n    }\r\n\r\n    function balanceOf(address _addr) constant public returns(uint256)\r\n    {\r\n        return balances[_addr];    \r\n    }\r\n\r\n    function getPersonalBonus(address _addr) constant public returns(uint) {\r\n        return personalBonuses[_addr] > 0 ? personalBonuses[_addr] : bonus;\r\n    }\r\n\r\n    function setPersonalBonus(address _addr, uint8 _value) onlyOwner public {\r\n        require(_value > 0 && _value <=100);\r\n        personalBonuses[_addr] = _value;\r\n    }\r\n \r\n    function getInvestorAddress(uint index) constant public returns(address)\r\n    {\r\n        require(investorsCount > index);\r\n        return investors[index];\r\n    }\r\n    \r\n    function getInvestorBalance(uint index) constant public returns(uint256) \r\n    {\r\n        address addr = investors[index];\r\n        require(addr != 0);\r\n        return  balances[addr];\r\n    }\r\n\r\n    function setActive(bool _value) onlyOwner public {\r\n        isActive = _value;\r\n    }\r\n    \r\n    function setMinAmount(uint amount) onlyOwner public {\r\n        require(amount > 0);\r\n        minAmount = amount;\r\n    }\r\n\r\n    function drain() onlyOwner public {\r\n        msg.sender.transfer(this.balance);\r\n    }\r\n }","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getInvestorAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getInvestorBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isActive\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"investorsCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setMinAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getPersonalBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"drain\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"setActive\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"coinPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint8\"}],\"name\":\"setPersonalBonus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hardCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Paid\",\"type\":\"event\"}]","ContractName":"GranitePreICO","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://2d1a8c9d7ee1738f1f0db363a91b3c3e631c3d19a31394dff65d54f3c40736de"}]}