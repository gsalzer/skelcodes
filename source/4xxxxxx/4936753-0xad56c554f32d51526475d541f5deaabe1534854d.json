{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.15;\r\n\r\n\r\n\r\n\r\n\r\ncontract ContractReceiver {   \r\n    function tokenFallback(address _from, uint _value, bytes _data){\r\n    }\r\n}\r\n\r\n /* New ERC23 contract interface */\r\n\r\ncontract ERC223 {\r\n  uint public totalSupply;\r\n  function balanceOf(address who) constant returns (uint);\r\n  \r\n  function name() constant returns (string _name);\r\n  function symbol() constant returns (string _symbol);\r\n  function decimals() constant returns (uint8 _decimals);\r\n  function totalSupply() constant returns (uint256 _supply);\r\n\r\n  function transfer(address to, uint value) returns (bool ok);\r\n  function transfer(address to, uint value, bytes data) returns (bool ok);\r\n  function transfer(address to, uint value, bytes data, string custom_fallback) returns (bool ok);\r\n  function transferFrom(address from, address to, uint256 value) returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint value, bytes indexed data);\r\n}\r\n\r\n// The GXVC token ERC223\r\n\r\ncontract GXVCToken {\r\n\r\n    // Token public variables\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals; \r\n    string public version = 'v0.2';\r\n    uint256 public totalSupply;\r\n    bool locked;\r\n\r\n    address rootAddress;\r\n    address Owner;\r\n    uint multiplier = 10000000000; // For 10 decimals\r\n    address swapperAddress; // Can bypass a lock\r\n\r\n    mapping(address => uint256) balances;\r\n    mapping(address => mapping(address => uint256)) allowed;\r\n    mapping(address => bool) freezed; \r\n\r\n\r\n  \tevent Transfer(address indexed from, address indexed to, uint value, bytes indexed data);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    // Modifiers\r\n\r\n    modifier onlyOwner() {\r\n        if ( msg.sender != rootAddress && msg.sender != Owner ) revert();\r\n        _;\r\n    }\r\n\r\n    modifier onlyRoot() {\r\n        if ( msg.sender != rootAddress ) revert();\r\n        _;\r\n    }\r\n\r\n    modifier isUnlocked() {\r\n    \tif ( locked && msg.sender != rootAddress && msg.sender != Owner ) revert();\r\n\t\t_;    \t\r\n    }\r\n\r\n    modifier isUnfreezed(address _to) {\r\n    \tif ( freezed[msg.sender] || freezed[_to] ) revert();\r\n    \t_;\r\n    }\r\n\r\n\r\n    // Safe math\r\n    function safeAdd(uint x, uint y) internal returns (uint z) {\r\n        require((z = x + y) >= x);\r\n    }\r\n    function safeSub(uint x, uint y) internal returns (uint z) {\r\n        require((z = x - y) <= x);\r\n    }\r\n\r\n\r\n    // GXC Token constructor\r\n    function GXVCToken() {        \r\n        locked = true;\r\n        totalSupply = 160000000 * multiplier; // 160,000,000 tokens * 10 decimals\r\n        name = 'Genevieve VC'; \r\n        symbol = 'GXVC'; \r\n        decimals = 10; \r\n        rootAddress = msg.sender;        \r\n        Owner = msg.sender;       \r\n        balances[rootAddress] = totalSupply; \r\n        allowed[rootAddress][swapperAddress] = totalSupply;\r\n    }\r\n\r\n\r\n\t// ERC223 Access functions\r\n\r\n\tfunction name() constant returns (string _name) {\r\n\t      return name;\r\n\t  }\r\n\tfunction symbol() constant returns (string _symbol) {\r\n\t      return symbol;\r\n\t  }\r\n\tfunction decimals() constant returns (uint8 _decimals) {\r\n\t      return decimals;\r\n\t  }\r\n\tfunction totalSupply() constant returns (uint256 _totalSupply) {\r\n\t      return totalSupply;\r\n\t  }\r\n\r\n\r\n    // Only root function\r\n\r\n    function changeRoot(address _newrootAddress) onlyRoot returns(bool){\r\n    \t\tallowed[rootAddress][swapperAddress] = 0; // Removes allowance to old rootAddress\r\n            rootAddress = _newrootAddress;\r\n            allowed[_newrootAddress][swapperAddress] = totalSupply; // Gives allowance to new rootAddress\r\n            return true;\r\n    }\r\n\r\n\r\n    // Only owner functions\r\n\r\n    function changeOwner(address _newOwner) onlyOwner returns(bool){\r\n            Owner = _newOwner;\r\n            return true;\r\n    }\r\n\r\n    function changeSwapperAdd(address _newSwapper) onlyOwner returns(bool){\r\n    \t\tallowed[rootAddress][swapperAddress] = 0; // Removes allowance to old rootAddress\r\n            swapperAddress = _newSwapper;\r\n            allowed[rootAddress][_newSwapper] = totalSupply; // Gives allowance to new rootAddress\r\n            return true;\r\n    }\r\n       \r\n    function unlock() onlyOwner returns(bool) {\r\n        locked = false;\r\n        return true;\r\n    }\r\n\r\n    function lock() onlyOwner returns(bool) {\r\n        locked = true;\r\n        return true;\r\n    }\r\n\r\n    function freeze(address _address) onlyOwner returns(bool) {\r\n        freezed[_address] = true;\r\n        return true;\r\n    }\r\n\r\n    function unfreeze(address _address) onlyOwner returns(bool) {\r\n        freezed[_address] = false;\r\n        return true;\r\n    }\r\n\r\n    function burn(uint256 _value) onlyOwner returns(bool) {\r\n    \tbytes memory empty;\r\n        if ( balances[msg.sender] < _value ) revert();\r\n        balances[msg.sender] = safeSub( balances[msg.sender] , _value );\r\n        totalSupply = safeSub( totalSupply,  _value );\r\n        Transfer(msg.sender, 0x0, _value , empty);\r\n        return true;\r\n    }\r\n\r\n\r\n    // Public getters\r\n    function isFreezed(address _address) constant returns(bool) {\r\n        return freezed[_address];\r\n    }\r\n\r\n    function isLocked() constant returns(bool) {\r\n        return locked;\r\n    }\r\n\r\n  // Public functions (from https://github.com/Dexaran/ERC223-token-standard/tree/Recommended)\r\n\r\n  // Function that is called when a user or another contract wants to transfer funds to an address that has a non-standard fallback function\r\n  function transfer(address _to, uint _value, bytes _data, string _custom_fallback) isUnlocked isUnfreezed(_to) returns (bool success) {\r\n      \r\n    if(isContract(_to)) {\r\n        if (balances[msg.sender] < _value) return false;\r\n        balances[msg.sender] = safeSub( balances[msg.sender] , _value );\r\n        balances[_to] = safeAdd( balances[_to] , _value );\r\n        ContractReceiver receiver = ContractReceiver(_to);\r\n        receiver.call.value(0)(bytes4(sha3(_custom_fallback)), msg.sender, _value, _data);\r\n        Transfer(msg.sender, _to, _value, _data);\r\n        return true;\r\n    }\r\n    else {\r\n        return transferToAddress(_to, _value, _data);\r\n    }\r\n}\r\n\r\n  // Function that is called when a user or another contract wants to transfer funds to an address with tokenFallback function\r\n  function transfer(address _to, uint _value, bytes _data) isUnlocked isUnfreezed(_to) returns (bool success) {\r\n      \r\n    if(isContract(_to)) {\r\n        return transferToContract(_to, _value, _data);\r\n    }\r\n    else {\r\n        return transferToAddress(_to, _value, _data);\r\n    }\r\n}\r\n\r\n\r\n  // Standard function transfer similar to ERC20 transfer with no _data.\r\n  // Added due to backwards compatibility reasons.\r\n  function transfer(address _to, uint _value) isUnlocked isUnfreezed(_to) returns (bool success) {\r\n\r\n    bytes memory empty;\r\n    if(isContract(_to)) {\r\n        return transferToContract(_to, _value, empty);\r\n    }\r\n    else {\r\n        return transferToAddress(_to, _value, empty);\r\n    }\r\n}\r\n\r\n//assemble the given address bytecode. If bytecode exists then the _addr is a contract.\r\n  function isContract(address _addr) private returns (bool is_contract) {\r\n      uint length;\r\n      assembly {\r\n            //retrieve the size of the code on target address, this needs assembly\r\n            length := extcodesize(_addr)\r\n      }\r\n      return (length>0);\r\n    }\r\n\r\n  //function that is called when transaction target is an address\r\n  function transferToAddress(address _to, uint _value, bytes _data) private returns (bool success) {\r\n    if (balances[msg.sender] < _value) return false;\r\n    balances[msg.sender] = safeSub(balances[msg.sender], _value);\r\n    balances[_to] = safeAdd(balances[_to], _value);\r\n    Transfer(msg.sender, _to, _value, _data);\r\n    return true;\r\n  }\r\n  \r\n  //function that is called when transaction target is a contract\r\n  function transferToContract(address _to, uint _value, bytes _data) private returns (bool success) {\r\n    if (balances[msg.sender] < _value) return false;\r\n    balances[msg.sender] = safeSub(balances[msg.sender] , _value);\r\n    balances[_to] = safeAdd(balances[_to] , _value);\r\n    ContractReceiver receiver = ContractReceiver(_to);\r\n    receiver.tokenFallback(msg.sender, _value, _data);\r\n    Transfer(msg.sender, _to, _value, _data);\r\n    return true;\r\n}\r\n\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns(bool) {\r\n\r\n        if ( locked && msg.sender != swapperAddress ) return false; \r\n        if ( freezed[_from] || freezed[_to] ) return false; // Check if destination address is freezed\r\n        if ( balances[_from] < _value ) return false; // Check if the sender has enough\r\n\t\tif ( _value > allowed[_from][msg.sender] ) return false; // Check allowance\r\n\r\n        balances[_from] = safeSub(balances[_from] , _value); // Subtract from the sender\r\n        balances[_to] = safeAdd(balances[_to] , _value); // Add the same to the recipient\r\n\r\n        allowed[_from][msg.sender] = safeSub( allowed[_from][msg.sender] , _value );\r\n\r\n        bytes memory empty;\r\n\r\n        if ( isContract(_to) ) {\r\n\t        ContractReceiver receiver = ContractReceiver(_to);\r\n\t    \treceiver.tokenFallback(_from, _value, empty);\r\n\t\t}\r\n\r\n        Transfer(_from, _to, _value , empty);\r\n        return true;\r\n    }\r\n\r\n\r\n    function balanceOf(address _owner) constant returns(uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n\r\n    function approve(address _spender, uint _value) returns(bool) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n\r\n    function allowance(address _owner, address _spender) constant returns(uint256) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n}\r\n/**\r\n * @title Math\r\n * @dev Assorted math operations\r\n */\r\n\r\nlibrary Math {\r\n  function max64(uint64 a, uint64 b) internal pure returns (uint64) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min64(uint64 a, uint64 b) internal pure returns (uint64) {\r\n    return a < b ? a : b;\r\n  }\r\n\r\n  function max256(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min256(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return a < b ? a : b;\r\n  }\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    Unpause();\r\n  }\r\n}\r\n\r\ncontract Dec {\r\n    function decimals() public view returns (uint8);\r\n}\r\n\r\ncontract ERC20 {\r\n    function transfer(address,uint256);\r\n}\r\n\r\ncontract KeeToken {\r\n    // Stub\r\n\r\n    function icoBalanceOf(address from, address ico) external view returns (uint) ;\r\n\r\n\r\n}\r\n\r\ncontract KeeHole {\r\n    using SafeMath for uint256;\r\n    \r\n    KeeToken  token;\r\n\r\n    uint256   pos;\r\n    uint256[] slots;\r\n    uint256[] bonuses;\r\n\r\n    uint256 threshold;\r\n    uint256 maxTokensInTier;\r\n    uint256 rate;\r\n    uint256 tokenDiv;\r\n\r\n    function KeeHole() public {\r\n        token = KeeToken(0x72D32ac1c5E66BfC5b08806271f8eEF915545164);\r\n        slots.push(100);\r\n        slots.push(200);\r\n        slots.push(500);\r\n        slots.push(1200);\r\n        bonuses.push(5);\r\n        bonuses.push(3);\r\n        bonuses.push(2);\r\n        bonuses.push(1);\r\n        threshold = 5;\r\n        rate = 10000;\r\n        tokenDiv = 100000000; // 10^18 / 10^10\r\n        maxTokensInTier = 25000 * (10 ** 10);\r\n    }\r\n\r\n    mapping (address => bool) hasParticipated;\r\n\r\n    // getBonusAmount - calculates any bonus due.\r\n    // only one bonus per account\r\n    function getBonusAmount(uint256 amount) public returns (uint256 bonus) {\r\n        if (hasParticipated[msg.sender])\r\n            return 0;\r\n        if ( token.icoBalanceOf(msg.sender,this) < threshold )\r\n            return 0;\r\n        if (pos>=slots.length)\r\n            return 0;\r\n        bonus = (amount.mul(bonuses[pos])).div(100);\r\n        slots[pos]--;\r\n        if (slots[pos] == 0) \r\n            pos++;\r\n        bonus = Math.min256(maxTokensInTier,bonus);\r\n        hasParticipated[msg.sender] = true;\r\n        return;\r\n    }\r\n\r\n    // this function is not const because it writes hasParticipated\r\n    function getTokenAmount(uint256 ethDeposit) public returns (uint256 numTokens) {\r\n        numTokens = (ethDeposit.mul(rate)).div(tokenDiv);\r\n        numTokens = numTokens.add(getBonusAmount(numTokens));\r\n    }\r\n\r\n\r\n}\r\n\r\ncontract GenevieveCrowdsale is Ownable, Pausable, KeeHole {\r\n  using SafeMath for uint256;\r\n\r\n  // The token being sold\r\n  GXVCToken public token;\r\n  KeeHole public keeCrytoken;\r\n\r\n  // owner of GXVC tokens\r\n  address public tokenSpender;\r\n\r\n  // start and end times\r\n  uint256 public startTimestamp;\r\n  uint256 public endTimestamp;\r\n\r\n  // address where funds are collected\r\n  address public hardwareWallet;\r\n\r\n  mapping (address => uint256) public deposits;\r\n  uint256 public numberOfPurchasers;\r\n\r\n  // how many token units a buyer gets per wei comes from keeUser\r\n  \r\n // uint256 public rate;\r\n\r\n  // amount of raised money in wei\r\n  uint256 public weiRaised;\r\n  uint256 public weiToRaise;\r\n  uint256 public tokensSold;\r\n\r\n  uint256 public minContribution = 1 finney;\r\n\r\n\r\n  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n  event MainSaleClosed();\r\n\r\n  uint256 public weiRaisedInPresale  = 0 ether;\r\n  uint256 public tokensSoldInPresale = 0 * 10 ** 18;\r\n\r\n// REGISTRY FUNCTIONS \r\n\r\n  mapping (address => bool) public registered;\r\n  address public registrar;\r\n  function setReg(address _newReg) external onlyOwner {\r\n    registrar = _newReg;\r\n  }\r\n\r\n  function register(address participant) external {\r\n    require(msg.sender == registrar);\r\n    registered[participant] = true;\r\n  }\r\n\r\n// END OF REGISTRY FUNCTIONS\r\n\r\n  function setCoin(GXVCToken _coin) external onlyOwner {\r\n    token = _coin;\r\n  }\r\n\r\n  function setWallet(address _wallet) external onlyOwner {\r\n    hardwareWallet = _wallet;\r\n  }\r\n\r\n  function GenevieveCrowdsale() public {\r\n    token = GXVCToken(0x22F0AF8D78851b72EE799e05F54A77001586B18A);\r\n    startTimestamp = 1516453200;\r\n    endTimestamp = 1519563600;\r\n    hardwareWallet = 0x6Bc63d12D5AAEBe4dc86785053d7E4f09077b89E;\r\n    tokensSoldInPresale = 0; // 187500\r\n    weiToRaise = 10000 * (10 ** 18);\r\n    tokenSpender = 0x6835706E8e58544deb6c4EC59d9815fF6C20417f; // Bal = 104605839.665805634 GXVC\r\n\r\n    minContribution = 1 finney;\r\n    require(startTimestamp >= now);\r\n    require(endTimestamp >= startTimestamp);\r\n  }\r\n\r\n  // check if valid purchase\r\n  modifier validPurchase {\r\n    // REGISTRY REQUIREMENT\r\n    require(registered[msg.sender]);\r\n    // END OF REGISTRY REQUIREMENT\r\n    require(now >= startTimestamp);\r\n    require(now < endTimestamp);\r\n    require(msg.value >= minContribution);\r\n    require(weiRaised.add(msg.value) <= weiToRaise);\r\n    _;\r\n  }\r\n\r\n  // @return true if crowdsale event has ended\r\n  function hasEnded() public constant returns (bool) {\r\n    if (now > endTimestamp) \r\n        return true;\r\n    if (weiRaised >= weiToRaise.sub(minContribution))\r\n      return true;\r\n    return false;\r\n  }\r\n\r\n  // low level token purchase function\r\n  function buyTokens(address beneficiary, uint256 weiAmount) \r\n    internal \r\n    validPurchase \r\n    whenNotPaused\r\n  {\r\n\r\n    require(beneficiary != 0x0);\r\n\r\n    if (deposits[beneficiary] == 0) {\r\n        numberOfPurchasers++;\r\n    }\r\n    deposits[beneficiary] = weiAmount.add(deposits[beneficiary]);\r\n    \r\n    // calculate token amount to be created\r\n    uint256 tokens = getTokenAmount(weiAmount);\r\n\r\n    // update state\r\n    weiRaised = weiRaised.add(weiAmount);\r\n    tokensSold = tokensSold.add(tokens);\r\n\r\n    require(token.transferFrom(tokenSpender, beneficiary, tokens));\r\n    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\r\n    hardwareWallet.transfer(this.balance);\r\n  }\r\n\r\n  // fallback function can be used to buy tokens\r\n  function () public payable {\r\n    buyTokens(msg.sender,msg.value);\r\n  }\r\n\r\n    function emergencyERC20Drain( ERC20 theToken, uint amount ) {\r\n        theToken.transfer(owner, amount);\r\n    }\r\n\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getBonusAmount\",\"outputs\":[{\"name\":\"bonus\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"registrar\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"participant\",\"type\":\"address\"}],\"name\":\"register\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numberOfPurchasers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensSoldInPresale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_coin\",\"type\":\"address\"}],\"name\":\"setCoin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newReg\",\"type\":\"address\"}],\"name\":\"setReg\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"keeCrytoken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenSpender\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minContribution\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"registered\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ethDeposit\",\"type\":\"uint256\"}],\"name\":\"getTokenAmount\",\"outputs\":[{\"name\":\"numTokens\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiToRaise\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"theToken\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"emergencyERC20Drain\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"setWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hardwareWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaisedInPresale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"deposits\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MainSaleClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"GenevieveCrowdsale","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://7c1b9275d4c2d0f7571782a0c4c8ce63fc7b5512a762e054546e770e4917e278"}]}