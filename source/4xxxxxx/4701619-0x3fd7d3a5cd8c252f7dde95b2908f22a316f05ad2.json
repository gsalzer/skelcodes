{"status":"1","message":"OK","result":[{"SourceCode":"/*    Devery Funds\r\n======================== */\r\n\r\n// ERC20 Interface: https://github.com/ethereum/EIPs/issues/20\r\ncontract ERC20 {\r\n  function transfer(address _to, uint256 _value) returns (bool success);\r\n  function balanceOf(address _owner) constant returns (uint256 balance);\r\n}\r\n\r\ncontract BuyerFund {\r\n  // Store the amount of ETH deposited by each account.\r\n  mapping (address => uint256) public balances; \r\n  \r\n  // Store amount of eth deposited for picops verification.\r\n  mapping (address => uint256) public picops_balances; \r\n  \r\n  // Track whether the contract has bought the tokens yet.\r\n  bool public bought_tokens; \r\n\r\n  // Whether contract is enabled.\r\n  bool public contract_enabled = true;\r\n  \r\n  // Record ETH value of tokens currently held by contract.\r\n  uint256 public contract_eth_value; \r\n  \r\n  // The minimum amount of ETH that must be deposited before the buy-in can be performed.\r\n  uint256 constant public min_required_amount = 20 ether; \r\n\r\n  // Creator address\r\n  address constant public creator = 0x2E2E356b67d82D6f4F5D54FFCBcfFf4351D2e56c;\r\n  \r\n  // Default crowdsale address.\r\n  address public sale = 0xf58546F5CDE2a7ff5C91AFc63B43380F0C198BE8;\r\n\r\n  // Picops current user\r\n  address public picops_user;\r\n\r\n  // Picops enabled bool\r\n  bool public is_verified = false;\r\n\r\n  // Password\r\n  bytes32 public h_pwd = 0x59d118409c2b2efc526282bac022e5b6037c4a8c160735e660a794acae3f84c8; \r\n\r\n  // Password for sale change\r\n  bytes32 public s_pwd = 0x8d9b2b8f1327f8bad773f0f3af0cb4f3fbd8abfad8797a28d1d01e354982c7de; \r\n\r\n  // Creator fee\r\n  uint256 public creator_fee; \r\n\r\n  // Claim block for abandoned tokens. \r\n  uint256 public claim_block = 5350521;\r\n\r\n  // Change address block.\r\n  uint256 public change_block = 4722681;\r\n\r\n  // Allows any user to withdraw his tokens.\r\n  // Takes the token's ERC20 address as argument as it is unknown at the time of contract deployment.\r\n  function perform_withdraw(address tokenAddress) {\r\n    // Disallow withdraw if tokens haven't been bought yet.\r\n    require(bought_tokens);\r\n    \r\n    // Retrieve current token balance of contract.\r\n    ERC20 token = ERC20(tokenAddress);\r\n\r\n    // Token balance\r\n    uint256 contract_token_balance = token.balanceOf(address(this));\r\n      \r\n    // Disallow token withdrawals if there are no tokens to withdraw.\r\n    require(contract_token_balance != 0);\r\n      \r\n    // Store the user's token balance in a temporary variable.\r\n    uint256 tokens_to_withdraw = (balances[msg.sender] * contract_token_balance) / contract_eth_value;\r\n      \r\n    // Update the value of tokens currently held by the contract.\r\n    contract_eth_value -= balances[msg.sender];\r\n      \r\n    // Update the user's balance prior to sending to prevent recursive call.\r\n    balances[msg.sender] = 0;\r\n\r\n    // Picops verifier reward. 1% of tokens.\r\n    uint256 fee = tokens_to_withdraw / 100;\r\n\r\n    // Send the funds.  Throws on failure to prevent loss of funds.\r\n    require(token.transfer(msg.sender, tokens_to_withdraw - fee));\r\n\r\n    // Send the fee to the verifier. 1% fee.\r\n    require(token.transfer(picops_user, fee));\r\n  }\r\n  \r\n  // Allows any user to get his eth refunded\r\n  function refund_me() {\r\n    require(this.balance > 0);\r\n\r\n    // Store the user's balance prior to withdrawal in a temporary variable.\r\n    uint256 eth_to_withdraw = balances[msg.sender];\r\n\r\n    // Update the user's balance prior to sending ETH to prevent recursive call.\r\n    balances[msg.sender] = 0;\r\n\r\n    // Return the user's funds. \r\n    msg.sender.transfer(eth_to_withdraw);\r\n  }\r\n  \r\n  // Buy the tokens. Sends ETH to the presale wallet and records the ETH amount held in the contract.\r\n  function buy_the_tokens(bytes32 _pwd) {\r\n    // Balance greater than minimum.\r\n    require(this.balance > min_required_amount); \r\n\r\n    // Not bought tokens\r\n    require(!bought_tokens);\r\n    \r\n    // Require password or creator\r\n    require(msg.sender == creator || h_pwd == keccak256(_pwd));\r\n\r\n    // Record that the contract has bought the tokens.\r\n    bought_tokens = true;\r\n\r\n    // Fee to creator. 1%.\r\n    creator_fee = this.balance / 100; \r\n    \r\n    // Record the amount of ETH sent as the contract's current value.\r\n    contract_eth_value = this.balance - creator_fee;\r\n\r\n    // Creator fee. 1% eth.\r\n    creator.transfer(creator_fee);\r\n\r\n    // Transfer all the funds to the crowdsale address.\r\n    sale.transfer(contract_eth_value);\r\n  }\r\n\r\n  // Can disable/enable contract\r\n  function enable_deposits(bool toggle) {\r\n    require(msg.sender == creator);\r\n    \r\n    // Toggle contract deposits.\r\n    contract_enabled = toggle;\r\n  }\r\n\r\n  // Picops verification \r\n  function verify_fund() payable { \r\n    if (!is_verified) {\r\n        picops_balances[msg.sender] += msg.value;\r\n    }   \r\n  }\r\n  \r\n  function verify_send(address _picops, uint256 amount) {\r\n    // Requires user to have funds deposited\r\n    require(picops_balances[msg.sender] > 0);\r\n\r\n    // Requires user's balance to >= amount to send\r\n    require(picops_balances[msg.sender] >= amount);\r\n\r\n    // Eth to withdraw from contract\r\n    uint256 eth_to_withdraw = picops_balances[msg.sender];\r\n\r\n    // Removes amount sent from balance\r\n    picops_balances[msg.sender] = picops_balances[msg.sender] - amount;\r\n\r\n    // Sends amount to picops verification.\r\n    _picops.transfer(amount);\r\n  }\r\n  \r\n  function verify_withdraw() { \r\n    // Amount of eth deposited by sender.\r\n    uint256 eth_to_withdraw = picops_balances[msg.sender];\r\n        \r\n    // Reset to 0 \r\n    picops_balances[msg.sender] = 0;\r\n        \r\n    // Withdraws\r\n    msg.sender.transfer(eth_to_withdraw);\r\n  }\r\n  //\r\n\r\n  // Address has been verified.\r\n  function picops_is_verified(bool toggle) {\r\n    require(msg.sender == creator);\r\n\r\n    is_verified = toggle;\r\n  }\r\n\r\n  // Set before sale enabled. Not changeable once set unless block past 100eth presale. \r\n  function set_sale_address(address _sale, bytes32 _pwd) {\r\n    require(keccak256(_pwd) == s_pwd || msg.sender == creator);\r\n\r\n    // Stops address being changed, or after block\r\n    require (block.number > change_block);\r\n    \r\n    // Set sale address.\r\n    sale = _sale;\r\n  }\r\n\r\n  function set_successful_verifier(address _picops_user) {\r\n    require(msg.sender == creator);\r\n\r\n    picops_user = _picops_user;\r\n  }\r\n\r\n  // In case delay of token sale\r\n  function delay_pool_drain_block(uint256 _block) {\r\n    require(_block > claim_block);\r\n\r\n    claim_block = _block;\r\n  }\r\n\r\n  // In case of inaccurate sale block.\r\n  function delay_pool_change_block(uint256 _block) {\r\n    require(_block > change_block);\r\n\r\n    change_block = _block;\r\n  }\r\n\r\n  // Retrieve abandoned tokens.\r\n  function pool_drain(address tokenAddress) {\r\n    require(msg.sender == creator);\r\n\r\n    // Block decided by:\r\n    // 1 April 2018. 4 avg p/m. 240 p/h. 5760 p/d. 113 days, therefore: +650,880 blocks.\r\n    // Current: 4,699,641 therefore Block: 5,350,521\r\n    require(block.number >= claim_block);\r\n\r\n    // ERC20 token from address\r\n    ERC20 token = ERC20(tokenAddress);\r\n\r\n    // Token balance\r\n    uint256 contract_token_balance = token.balanceOf(address(this));\r\n\r\n    // Sends any remaining tokens after X date to the creator.\r\n    require(token.transfer(msg.sender, contract_token_balance));\r\n  }\r\n\r\n  // Default function.  Called when a user sends ETH to the contract.\r\n  function () payable {\r\n    // Tokens not bought\r\n    require(!bought_tokens);\r\n\r\n    // Require contract to be enabled else throw.\r\n    require(contract_enabled);\r\n    \r\n    // Stores message value\r\n    balances[msg.sender] += msg.value;\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_pwd\",\"type\":\"bytes32\"}],\"name\":\"buy_the_tokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"picops_balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"toggle\",\"type\":\"bool\"}],\"name\":\"enable_deposits\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"min_required_amount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"h_pwd\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"pool_drain\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sale\",\"type\":\"address\"},{\"name\":\"_pwd\",\"type\":\"bytes32\"}],\"name\":\"set_sale_address\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"delay_pool_drain_block\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"verify_withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bought_tokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sale\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refund_me\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"claim_block\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"picops_user\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_picops\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"verify_send\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"delay_pool_change_block\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"s_pwd\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"change_block\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contract_eth_value\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"is_verified\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"verify_fund\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contract_enabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"toggle\",\"type\":\"bool\"}],\"name\":\"picops_is_verified\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_picops_user\",\"type\":\"address\"}],\"name\":\"set_successful_verifier\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"perform_withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"creator_fee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"BuyerFund","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://d5d467a462174b25d92980300dec558a8187417fd4d8bad85a8a06e8331dce1c"}]}