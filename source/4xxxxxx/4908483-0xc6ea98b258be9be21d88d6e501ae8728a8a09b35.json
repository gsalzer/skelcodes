{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    Unpause();\r\n  }\r\n}\r\n\r\ncontract GimmerTokenSale is Pausable {\r\n    using SafeMath for uint256;\r\n\r\n    /**\r\n    * @dev Supporter structure, which allows us to track\r\n    * how much the user has bought so far, and if he's flagged as known\r\n    */\r\n    struct Supporter {\r\n        uint256 weiSpent; // the total amount of Wei this address has sent to this contract\r\n        bool hasKYC; // if the user has KYC flagged\r\n    }\r\n\r\n    // Variables\r\n    mapping(address => Supporter) public supportersMap; // Mapping with all the campaign supporters\r\n    GimmerToken public token; // ERC20 GMR Token contract address\r\n    address public fundWallet; // Wallet address to forward all Ether to\r\n    address public kycManagerWallet; // Wallet address that manages the approval of KYC\r\n    uint256 public tokensSold; // How many tokens sold have been sold in total\r\n    uint256 public weiRaised; // Total amount of raised money in Wei\r\n    uint256 public maxTxGas; // Maximum transaction gas price allowed for fair-chance transactions\r\n    uint256 public saleWeiLimitWithoutKYC; // The maximum amount of Wei an address can spend here without needing KYC approval during CrowdSale\r\n    bool public finished; // Flag denoting the owner has invoked finishContract()\r\n\r\n    uint256 public constant ONE_MILLION = 1000000; // One million for token cap calculation reference\r\n    uint256 public constant PRE_SALE_GMR_TOKEN_CAP = 15 * ONE_MILLION * 1 ether; // Maximum amount that can be sold during the Pre Sale period\r\n    uint256 public constant GMR_TOKEN_SALE_CAP = 100 * ONE_MILLION * 1 ether; // Maximum amount of tokens that can be sold by this contract\r\n    uint256 public constant MIN_ETHER = 0.1 ether; // Minimum ETH Contribution allowed during the crowd sale\r\n\r\n    /* Allowed Contribution in Ether */\r\n    uint256 public constant PRE_SALE_30_ETH = 30 ether; // Minimum 30 Ether to get 25% Bonus Tokens\r\n    uint256 public constant PRE_SALE_300_ETH = 300 ether; // Minimum 300 Ether to get 30% Bonus Tokens\r\n    uint256 public constant PRE_SALE_1000_ETH = 1000 ether; // Minimum 3000 Ether to get 40% Bonus Tokens\r\n\r\n    /* Bonus Tokens based on the ETH Contributed in single transaction */\r\n    uint256 public constant TOKEN_RATE_BASE_RATE = 2500; // Base Price for reference only\r\n    uint256 public constant TOKEN_RATE_05_PERCENT_BONUS = 2625; // 05% Bonus Tokens During Crowd Sale's Week 4\r\n    uint256 public constant TOKEN_RATE_10_PERCENT_BONUS = 2750; // 10% Bonus Tokens During Crowd Sale's Week 3\r\n    uint256 public constant TOKEN_RATE_15_PERCENT_BONUS = 2875; // 15% Bonus Tokens During Crowd Sale'sWeek 2\r\n    uint256 public constant TOKEN_RATE_20_PERCENT_BONUS = 3000; // 20% Bonus Tokens During Crowd Sale'sWeek 1\r\n    uint256 public constant TOKEN_RATE_25_PERCENT_BONUS = 3125; // 25% Bonus Tokens, During PreSale when >= 30 ETH & < 300 ETH\r\n    uint256 public constant TOKEN_RATE_30_PERCENT_BONUS = 3250; // 30% Bonus Tokens, During PreSale when >= 300 ETH & < 3000 ETH\r\n    uint256 public constant TOKEN_RATE_40_PERCENT_BONUS = 3500; // 40% Bonus Tokens, During PreSale when >= 3000 ETH\r\n\r\n    /* Timestamps where investments are allowed */\r\n    uint256 public constant PRE_SALE_START_TIME = 1516190400; // PreSale Start Time : UTC: Wednesday, 17 January 2018 12:00:00 \r\n    uint256 public constant PRE_SALE_END_TIME = 1517400000; // PreSale End Time : UTC: Wednesday, 31 January 2018 12:00:00\r\n    uint256 public constant START_WEEK_1 = 1517486400; // CrowdSale Start Week-1 : UTC: Thursday, 1 February 2018 12:00:00\r\n    uint256 public constant START_WEEK_2 = 1518091200; // CrowdSale Start Week-2 : UTC: Thursday, 8 February 2018 12:00:00\r\n    uint256 public constant START_WEEK_3 = 1518696000; // CrowdSale Start Week-3 : UTC: Thursday, 15 February 2018 12:00:00\r\n    uint256 public constant START_WEEK_4 = 1519300800; // CrowdSale Start Week-4 : UTC: Thursday, 22 February 2018 12:00:00\r\n    uint256 public constant SALE_END_TIME = 1519905600; // CrowdSale End Time : UTC: Thursday, 1 March 2018 12:00:00\r\n\r\n    /**\r\n    * @dev Modifier to only allow KYCManager Wallet\r\n    * to execute a function\r\n    */\r\n    modifier onlyKycManager() {\r\n        require(msg.sender == kycManagerWallet);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * Event for token purchase logging\r\n    * @param purchaser The wallet address that bought the tokens\r\n    * @param value How many Weis were paid for the purchase\r\n    * @param amount The amount of tokens purchased\r\n    */\r\n    event TokenPurchase(address indexed purchaser, uint256 value, uint256 amount);\r\n\r\n    /**\r\n     * Event for kyc status change logging\r\n     * @param user User who has had his KYC status changed\r\n     * @param isApproved A boolean representing the KYC approval the user has been changed to\r\n     */\r\n    event KYC(address indexed user, bool isApproved);\r\n\r\n    /**\r\n     * Constructor\r\n     * @param _fundWallet Address to forward all received Ethers to\r\n     * @param _kycManagerWallet KYC Manager wallet to approve / disapprove user's KYC\r\n     * @param _saleWeiLimitWithoutKYC Maximum amount of Wei an address can spend in the contract without KYC during the crowdsale\r\n     * @param _maxTxGas Maximum gas price a transaction can have before being reverted\r\n     */\r\n    function GimmerTokenSale(\r\n        address _fundWallet, \r\n        address _kycManagerWallet,\r\n        uint256 _saleWeiLimitWithoutKYC, \r\n        uint256 _maxTxGas\r\n    )\r\n    public \r\n    {\r\n        require(_fundWallet != address(0));\r\n        require(_kycManagerWallet != address(0));\r\n        require(_saleWeiLimitWithoutKYC > 0);\r\n        require(_maxTxGas > 0);\r\n\r\n        fundWallet = _fundWallet;\r\n        kycManagerWallet = _kycManagerWallet;\r\n        saleWeiLimitWithoutKYC = _saleWeiLimitWithoutKYC;\r\n        maxTxGas = _maxTxGas;\r\n\r\n        token = new GimmerToken();\r\n    }\r\n\r\n    /* fallback function can be used to buy tokens */\r\n    function () public payable {\r\n        buyTokens();\r\n    }\r\n\r\n    /* low level token purchase function */\r\n    function buyTokens() public payable whenNotPaused {\r\n        // Do not allow if gasprice is bigger than the maximum\r\n        // This is for fair-chance for all contributors, so no one can\r\n        // set a too-high transaction price and be able to buy earlier\r\n        require(tx.gasprice <= maxTxGas);\r\n        // valid purchase identifies which stage the contract is at (PreState/Token Sale)\r\n        // making sure were inside the contribution period and the user\r\n        // is sending enough Wei for the stage's rules\r\n        require(validPurchase());\r\n\r\n        address sender = msg.sender;\r\n        uint256 weiAmountSent = msg.value;\r\n\r\n        // calculate token amount to be created\r\n        uint256 rate = getRate(weiAmountSent);\r\n        uint256 newTokens = weiAmountSent.mul(rate);\r\n\r\n        // look if we have not yet reached the cap\r\n        uint256 totalTokensSold = tokensSold.add(newTokens);\r\n        if (isCrowdSaleRunning()) {\r\n            require(totalTokensSold <= GMR_TOKEN_SALE_CAP);\r\n        } else if (isPreSaleRunning()) { \r\n            require(totalTokensSold <= PRE_SALE_GMR_TOKEN_CAP);\r\n        }\r\n\r\n        // update supporter state\r\n        Supporter storage sup = supportersMap[sender];\r\n        uint256 totalWei = sup.weiSpent.add(weiAmountSent);\r\n        sup.weiSpent = totalWei;\r\n\r\n        // update contract state\r\n        weiRaised = weiRaised.add(weiAmountSent);\r\n        tokensSold = totalTokensSold;\r\n\r\n        // mint the coins\r\n        token.mint(sender, newTokens);\r\n        TokenPurchase(sender, weiAmountSent, newTokens);\r\n\r\n        // forward the funds to the wallet\r\n        fundWallet.transfer(msg.value);\r\n    }\r\n\r\n    /**\r\n    * @dev Ends the operation of the contract\r\n    */\r\n    function finishContract() public onlyOwner {\r\n        // make sure the contribution period has ended\r\n        require(now > SALE_END_TIME);\r\n        require(!finished);\r\n\r\n        finished = true;\r\n\r\n        // send the 10% commission to Gimmer's fund wallet\r\n        uint256 tenPC = tokensSold.div(10);\r\n        token.mint(fundWallet, tenPC);\r\n\r\n        // finish the minting of the token, so the system allows transfers\r\n        token.finishMinting();\r\n\r\n        // transfer ownership of the token contract to the fund wallet,\r\n        // so it isn't locked to be a child of the crowd sale contract\r\n        token.transferOwnership(fundWallet);\r\n    }\r\n\r\n    function setSaleWeiLimitWithoutKYC(uint256 _newSaleWeiLimitWithoutKYC) public onlyKycManager {\r\n        require(_newSaleWeiLimitWithoutKYC > 0);\r\n        saleWeiLimitWithoutKYC = _newSaleWeiLimitWithoutKYC;\r\n    }\r\n\r\n    /**\r\n    * @dev Updates the maximum allowed transaction cost that can be received\r\n    * on the buyTokens() function.\r\n    * @param _newMaxTxGas The new maximum transaction cost\r\n    */\r\n    function updateMaxTxGas(uint256 _newMaxTxGas) public onlyKycManager {\r\n        require(_newMaxTxGas > 0);\r\n        maxTxGas = _newMaxTxGas;\r\n    }\r\n\r\n    /**\r\n    * @dev Flag an user as known\r\n    * @param _user The user to flag as known\r\n    */\r\n    function approveUserKYC(address _user) onlyKycManager public {\r\n        require(_user != address(0));\r\n\r\n        Supporter storage sup = supportersMap[_user];\r\n        sup.hasKYC = true;\r\n        KYC(_user, true);\r\n    }\r\n\r\n    /**\r\n     * @dev Flag an user as unknown/disapproved\r\n     * @param _user The user to flag as unknown / suspecious\r\n     */\r\n    function disapproveUserKYC(address _user) onlyKycManager public {\r\n        require(_user != address(0));\r\n        \r\n        Supporter storage sup = supportersMap[_user];\r\n        sup.hasKYC = false;\r\n        KYC(_user, false);\r\n    }\r\n\r\n    /**\r\n    * @dev Changes the KYC manager to a new address\r\n    * @param _newKYCManagerWallet The new address that will be managing KYC approval\r\n    */\r\n    function setKYCManager(address _newKYCManagerWallet) onlyOwner public {\r\n        require(_newKYCManagerWallet != address(0));\r\n        kycManagerWallet = _newKYCManagerWallet;\r\n    }\r\n    \r\n    /**\r\n    * @dev Returns true if any of the token sale stages are currently running\r\n    * @return A boolean representing the state of this contract\r\n    */\r\n    function isTokenSaleRunning() public constant returns (bool) {\r\n        return (isPreSaleRunning() || isCrowdSaleRunning());\r\n    }\r\n\r\n    /**\r\n    * @dev Returns true if the presale sale is currently running\r\n    * @return A boolean representing the state of the presale\r\n    */\r\n    function isPreSaleRunning() public constant returns (bool) {\r\n        return (now >= PRE_SALE_START_TIME && now < PRE_SALE_END_TIME);\r\n    }\r\n\r\n    /**\r\n    * @dev Returns true if the public sale is currently running\r\n    * @return A boolean representing the state of the crowd sale\r\n    */\r\n    function isCrowdSaleRunning() public constant returns (bool) {\r\n        return (now >= START_WEEK_1 && now <= SALE_END_TIME);\r\n    }\r\n\r\n    /**\r\n    * @dev Returns true if the public sale has ended\r\n    * @return A boolean representing if we are past the contribution date for this contract\r\n    */\r\n    function hasEnded() public constant returns (bool) {\r\n        return now > SALE_END_TIME;\r\n    }\r\n\r\n    /**\r\n    * @dev Returns true if the pre sale has ended\r\n    * @return A boolean representing if we are past the pre sale contribution dates\r\n    */\r\n    function hasPreSaleEnded() public constant returns (bool) {\r\n        return now > PRE_SALE_END_TIME;\r\n    }\r\n\r\n    /**\r\n    * @dev Returns if an user has KYC approval or not\r\n    * @return A boolean representing the user's KYC status\r\n    */\r\n    function userHasKYC(address _user) public constant returns (bool) {\r\n        return supportersMap[_user].hasKYC;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the weiSpent of a user\r\n     */\r\n    function userWeiSpent(address _user) public constant returns (uint256) {\r\n        return supportersMap[_user].weiSpent;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the rate the user will be paying at,\r\n     * based on the amount of Wei sent to the contract, and the current time\r\n     * @return An uint256 representing the rate the user will pay for the GMR tokens\r\n     */\r\n    function getRate(uint256 _weiAmount) internal constant returns (uint256) {   \r\n        if (isCrowdSaleRunning()) {\r\n            if (now >= START_WEEK_4) { return TOKEN_RATE_05_PERCENT_BONUS; }\r\n            else if (now >= START_WEEK_3) { return TOKEN_RATE_10_PERCENT_BONUS; }\r\n            else if (now >= START_WEEK_2) { return TOKEN_RATE_15_PERCENT_BONUS; }\r\n            else if (now >= START_WEEK_1) { return TOKEN_RATE_20_PERCENT_BONUS; }\r\n        }\r\n        else if (isPreSaleRunning()) {\r\n            if (_weiAmount >= PRE_SALE_1000_ETH) { return TOKEN_RATE_40_PERCENT_BONUS; }\r\n            else if (_weiAmount >= PRE_SALE_300_ETH) { return TOKEN_RATE_30_PERCENT_BONUS; }\r\n            else if (_weiAmount >= PRE_SALE_30_ETH) { return TOKEN_RATE_25_PERCENT_BONUS; }\r\n        }\r\n    }\r\n\r\n    /* @return true if the transaction can buy tokens, otherwise false */\r\n    function validPurchase() internal constant returns (bool) {\r\n        bool userHasKyc = userHasKYC(msg.sender);\r\n\r\n        if (isCrowdSaleRunning()) {\r\n            // crowdsale restrictions (KYC only needed after wei limit, minimum of 0.1 ETH tx)\r\n            if(!userHasKyc) {\r\n                Supporter storage sup = supportersMap[msg.sender];\r\n                uint256 ethContribution = sup.weiSpent.add(msg.value);\r\n                if (ethContribution > saleWeiLimitWithoutKYC) {\r\n                    return false;\r\n                }\r\n            }\r\n            return msg.value >= MIN_ETHER;\r\n        }\r\n        else if (isPreSaleRunning()) {\r\n            // presale restrictions (at least 30 eth, always KYC)\r\n            return userHasKyc && msg.value >= PRE_SALE_30_ETH;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n}\r\n\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\ncontract MintableToken is StandardToken, Ownable {\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\r\n    totalSupply = totalSupply.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    Mint(_to, _amount);\r\n    Transfer(address(0), _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() onlyOwner canMint public returns (bool) {\r\n    mintingFinished = true;\r\n    MintFinished();\r\n    return true;\r\n  }\r\n}\r\n\r\ncontract GimmerToken is MintableToken  {\r\n    // Constants\r\n    string public constant name = \"GimmerToken\";\r\n    string public constant symbol = \"GMR\";  \r\n    uint8 public constant decimals = 18;\r\n\r\n    /**\r\n    * @dev Modifier to only allow transfers after the minting has been done\r\n    */\r\n    modifier onlyWhenTransferEnabled() {\r\n        require(mintingFinished);\r\n        _;\r\n    }\r\n\r\n    modifier validDestination(address _to) {\r\n        require(_to != address(0x0));\r\n        require(_to != address(this));\r\n        _;\r\n    }\r\n\r\n    function GimmerToken() public {\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public        \r\n        onlyWhenTransferEnabled\r\n        validDestination(_to)         \r\n        returns (bool) {\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public\r\n        onlyWhenTransferEnabled         \r\n        returns (bool) {\r\n        return super.approve(_spender, _value);\r\n    }\r\n\r\n    function increaseApproval (address _spender, uint _addedValue) public\r\n        onlyWhenTransferEnabled         \r\n        returns (bool) {\r\n        return super.increaseApproval(_spender, _addedValue);\r\n    }\r\n\r\n    function decreaseApproval (address _spender, uint _subtractedValue) public\r\n        onlyWhenTransferEnabled         \r\n        returns (bool) {\r\n        return super.decreaseApproval(_spender, _subtractedValue);\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public\r\n        onlyWhenTransferEnabled\r\n        validDestination(_to)         \r\n        returns (bool) {\r\n        return super.transfer(_to, _value);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"GimmerToken","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://1ac325bac733b301be9caf938ec815dc67d52e429c98d7f91b8f5d835be8ebfb"}]}