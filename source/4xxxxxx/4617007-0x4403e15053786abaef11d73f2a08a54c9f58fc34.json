{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\ncontract simplelottery {\r\n    enum State { Started, Locked }\r\n    State public state = State.Started;\r\n    struct Guess{\r\n      address addr;\r\n      //uint    guess;\r\n    }\r\n    uint arraysize=1000;\r\n    uint constant maxguess=1000000;\r\n    uint bettingprice = 1 ether;\r\n    Guess[1000] guesses;\r\n    uint    numguesses = 0;\r\n    bytes32 curhash = '';\r\n    uint _gameindex = 1;\r\n    uint _starttime = 0;\r\n    modifier inState(State _state) {\r\n      require(state == _state);\r\n      _;\r\n    }\r\n    address developer = 0x0;\r\n    address _winner   = 0x0;\r\n    event SentPrizeToWinner(address winner, uint money, uint gameindex, uint lotterynumber, uint starttime, uint finishtime);\r\n    event SentDeveloperFee(uint amount, uint balance);\r\n    \r\n    function simplelottery() \r\n    {\r\n      if(developer==address(0)){\r\n        developer = msg.sender;\r\n        state = State.Started;\r\n        _starttime = block.timestamp;\r\n      }\r\n    }\r\n    \r\n    function setBettingCondition(uint _contenders, uint _bettingprice)\r\n    {\r\n      if(msg.sender != developer)\r\n        return;\r\n      arraysize  = _contenders;\r\n      if(arraysize>1000)\r\n        arraysize = 1000;\r\n      bettingprice = _bettingprice;\r\n    }\r\n    \r\n    function findWinner(uint value)\r\n    {\r\n      uint i = value % numguesses;\r\n      _winner = guesses[i].addr;\r\n    }\r\n    \r\n      function getMaxContenders() constant returns(uint){\r\n      return arraysize;\r\n    }\r\n\r\n    function getBettingPrice() constant returns(uint){\r\n      return bettingprice;\r\n    }\r\n\r\n    function getDeveloperAddress() constant returns(address)\r\n    {\r\n      return developer;\r\n    }\r\n    \r\n    function getDeveloperFee() constant returns(uint)\r\n    {\r\n      uint developerfee = this.balance/100;\r\n      return developerfee;\r\n    }\r\n    \r\n    function getBalance() constant returns(uint)\r\n    {\r\n       return this.balance;\r\n    }\r\n    \r\n    function getLotteryMoney() constant returns(uint)\r\n    {\r\n      uint developerfee = getDeveloperFee();\r\n      uint prize = (this.balance - developerfee);\r\n      return prize;\r\n    }\r\n\r\n    function getBettingStatus()\r\n      constant\r\n      returns (uint, uint, uint, uint, uint, uint, uint)\r\n    {\r\n      return ((uint)(state), _gameindex, _starttime, numguesses, getLotteryMoney(), this.balance, bettingprice);\r\n    }\r\n\r\n\r\n\r\n    function finish()\r\n    {\r\n      if(msg.sender != developer)\r\n        return;\r\n      _finish();\r\n    }\r\n    \r\n    function _finish() private\r\n    {\r\n      state = State.Locked;\r\n      uint block_timestamp = block.timestamp;\r\n      uint lotterynumber = (uint(curhash)+block_timestamp)%(maxguess+1);\r\n      findWinner(lotterynumber);\r\n      uint prize = getLotteryMoney();\r\n      uint numwinners = 1;\r\n      uint remain = this.balance - (prize*numwinners);\r\n\r\n      _winner.transfer(prize);\r\n      SentPrizeToWinner(_winner, prize, _gameindex, lotterynumber, _starttime, block_timestamp);\r\n\r\n      // give delveoper the money left behind\r\n      developer.transfer(remain); \r\n      SentDeveloperFee(remain, this.balance);\r\n      numguesses = 0;\r\n      _gameindex++;\r\n      state = State.Started;\r\n      _starttime = block.timestamp;\r\n    }\r\n    \r\n    function () payable\r\n    {\r\n        _addguess();\r\n    }\r\n\r\n    function addguess() \r\n      inState(State.Started)\r\n      payable\r\n    {\r\n      _addguess();\r\n    }\r\n    \r\n    function _addguess() private\r\n      inState(State.Started)\r\n    {\r\n      require(msg.value >= bettingprice);\r\n      curhash = sha256(block.timestamp, block.coinbase, block.difficulty, curhash);\r\n      if((uint)(numguesses+1)<=arraysize) {\r\n        guesses[numguesses++].addr = msg.sender;\r\n        if((uint)(numguesses)>=arraysize){\r\n          _finish();\r\n        }\r\n      }\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"findWinner\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBettingStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDeveloperAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMaxContenders\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBettingPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDeveloperFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLotteryMoney\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contenders\",\"type\":\"uint256\"},{\"name\":\"_bettingprice\",\"type\":\"uint256\"}],\"name\":\"setBettingCondition\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"addguess\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finish\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"money\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"gameindex\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"lotterynumber\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"starttime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"finishtime\",\"type\":\"uint256\"}],\"name\":\"SentPrizeToWinner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"SentDeveloperFee\",\"type\":\"event\"}]","ContractName":"simplelottery","CompilerVersion":"v0.4.11+commit.68ef5810","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://9e8490a5179c96c678f45d2721d5eb2862af3bb9793d35cd13251dd702226f9c"}]}