{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^ 0.4.17;\r\n\r\nlibrary SafeMath {\r\n    function mul(uint a, uint b) pure internal returns(uint) {\r\n        uint c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n\r\n    function sub(uint a, uint b) pure internal returns(uint) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint a, uint b) pure internal returns(uint) {\r\n        uint c = a + b;\r\n        assert(c >= a && c >= b);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract ERC20 {\r\n    uint public totalSupply;\r\n\r\n    function balanceOf(address who) public view returns(uint);\r\n\r\n    function allowance(address owner, address spender) public view returns(uint);\r\n\r\n    function transfer(address to, uint value) public returns(bool ok);\r\n\r\n    function transferFrom(address from, address to, uint value) public returns(bool ok);\r\n\r\n    function approve(address spender, uint value) public returns(bool ok);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    function Ownable() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        if (newOwner != address(0)) \r\n            owner = newOwner;\r\n    }\r\n\r\n    function kill() public {\r\n        if (msg.sender == owner) \r\n            selfdestruct(owner);\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        if (msg.sender == owner)\r\n            _;\r\n    }\r\n}\r\n\r\ncontract Pausable is Ownable {\r\n    bool public stopped;\r\n\r\n    modifier stopInEmergency {\r\n        if (stopped) {\r\n            revert();\r\n        }\r\n        _;\r\n    }\r\n\r\n    modifier onlyInEmergency {\r\n        if (!stopped) {\r\n            revert();\r\n        }\r\n        _;\r\n    }\r\n\r\n    // Called by the owner in emergency, triggers stopped state\r\n    function emergencyStop() external onlyOwner() {\r\n        stopped = true;\r\n    }\r\n\r\n    // Called by the owner to end of emergency, returns to normal state\r\n    function release() external onlyOwner() onlyInEmergency {\r\n        stopped = false;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n// Crowdsale Smart Contract\r\n// This smart contract collects ETH and in return sends tokens to contributors\r\ncontract Crowdsale is Pausable {\r\n\r\n    using SafeMath for uint;\r\n\r\n    struct Backer {\r\n        uint weiReceived; // amount of ETH contributed\r\n        uint tokensSent; // amount of tokens  sent  \r\n        bool refunded; // true if user has been refunded       \r\n    }\r\n\r\n    Token public token; // Token contract reference   \r\n    address public multisig; // Multisig contract that will receive the ETH    \r\n    address public team; // Address at which the team tokens will be sent     \r\n    address public lottery; //address for 50% of remaining tokens \r\n    uint public ethReceivedPresale; // Number of ETH received in presal\r\n    uint public ethReceivedMain; // Number of ETH received in main sale\r\n    uint public totalTokensSent; // Number of sent to ETH contributors\r\n    uint public startBlock; // Crowdsale start block\r\n    uint public endBlock; // Crowdsale end block\r\n    uint public maxCap; // Maximum number of to sell\r\n    uint public minCap; // Minimum number of ETH to raise\r\n    uint public minInvestETH; // Minimum amount to invest   \r\n    bool public crowdsaleClosed; // Is crowdsale still on going\r\n    Step public currentStep;  // to allow for controled steps of the campaign \r\n    uint public refundCount;  // number of refunds\r\n    uint public totalRefunded; // total amount of refunds    \r\n    uint public tokenPriceWei;\r\n\r\n    mapping(address => Backer) public backers; //backer list\r\n    address[] public backersIndex; // to be able to itarate through backers for verification.  \r\n\r\n\r\n     // @ntice ovwrite to ensure that if any money are left, they go \r\n     // to multisig wallet\r\n     function kill() public {\r\n        if (msg.sender == owner) \r\n            selfdestruct(multisig);\r\n    }\r\n\r\n    // @notice to verify if action is not performed out of the campaing range\r\n    modifier respectTimeFrame() {\r\n        if ((block.number < startBlock) || (block.number > endBlock)) \r\n            revert();\r\n        _;\r\n    }\r\n\r\n\r\n    modifier minCapNotReached() {\r\n        if (ethReceivedPresale.add(ethReceivedMain) >= minCap) \r\n            revert();\r\n        _;\r\n    }\r\n\r\n\r\n    // @notice to set and determine steps of crowdsale\r\n    enum Step {\r\n        Unknown,\r\n        FundingPreSale,     // presale mode\r\n        FundingPublicSale,  // public mode\r\n        Refunding  // in case campaign failed during this step contributors will be able to receive refunds\r\n    }\r\n\r\n\r\n    // Events\r\n    event ReceivedETH(address backer, uint amount, uint tokenAmount);\r\n    event RefundETH(address backer, uint amount);\r\n\r\n\r\n    // Crowdsale  {constructor}\r\n    // @notice fired when contract is crated. Initilizes all constnat variables.\r\n    function Crowdsale() public {\r\n        \r\n        multisig = 0xC30b7a7d82c71467AF9eC85e039e4ED586EF9812; \r\n        team = 0xC30b7a7d82c71467AF9eC85e039e4ED586EF9812;       \r\n        lottery = 0xC30b7a7d82c71467AF9eC85e039e4ED586EF9812;                                                         \r\n        maxCap = 14700000e18;        \r\n        tokenPriceWei = 6666666666e5;\r\n        totalTokensSent = 0; \r\n        minCap = (750 ether * 1e18) / tokenPriceWei;\r\n        setStep(Step.FundingPreSale);\r\n    }\r\n\r\n       // @notice to populate website with status of the sale \r\n    function returnWebsiteData() external constant returns(uint, uint, uint, uint, uint, uint, uint, uint, Step, bool, bool) {\r\n        \r\n    \r\n        return (startBlock, endBlock, backersIndex.length, ethReceivedPresale.add(ethReceivedMain), maxCap, minCap, totalTokensSent,  tokenPriceWei, currentStep, stopped, crowdsaleClosed);\r\n    }\r\n\r\n    // @notice in case refunds are needed, money can be returned to the contract\r\n    function fundContract() external payable onlyOwner() returns (bool) {\r\n        return true;\r\n    }\r\n\r\n\r\n    // @notice Specify address of token contract\r\n    // @param _tokenAddress {address} address of token contrac\r\n    // @return res {bool}\r\n    function updateTokenAddress(Token _tokenAddress) external onlyOwner() returns(bool res) {\r\n        token = _tokenAddress;\r\n        return true;\r\n    }\r\n\r\n\r\n    // @notice set the step of the campaign \r\n    // @param _step {Step}\r\n    function setStep(Step _step) public onlyOwner() {\r\n        currentStep = _step;\r\n        \r\n        if (currentStep == Step.FundingPreSale)  // for presale             \r\n            minInvestETH = 1 ether/4;                             \r\n        else if (currentStep == Step.FundingPublicSale) // for public sale           \r\n            minInvestETH = 0;                               \r\n    }\r\n\r\n\r\n    // @notice return number of contributors\r\n    // @return  {uint} number of contributors   \r\n    function numberOfBackers() public constant returns(uint) {\r\n        return backersIndex.length;\r\n    }\r\n\r\n\r\n\r\n    // {fallback function}\r\n    // @notice It will call internal function which handels allocation of Ether and calculates tokens.\r\n    function () external payable {           \r\n        contribute(msg.sender);\r\n    }\r\n\r\n\r\n    // @notice It will be called by owner to start the sale    \r\n    function start(uint _block) external onlyOwner() {   \r\n\r\n        require(_block < 216000);  // 2.5*60*24*60 days = 216000     \r\n        startBlock = block.number;\r\n        endBlock = startBlock.add(_block); \r\n    }\r\n\r\n    // @notice Due to changing average of block time\r\n    // this function will allow on adjusting duration of campaign closer to the end \r\n    function adjustDuration(uint _block) external onlyOwner() {\r\n\r\n        require(_block < 288000);  // 2.5*60*24*80 days = 288000     \r\n        require(_block > block.number.sub(startBlock)); // ensure that endBlock is not set in the past\r\n        endBlock = startBlock.add(_block); \r\n    }\r\n\r\n    // @notice It will be called by fallback function whenever ether is sent to it\r\n    // @param  _backer {address} address of beneficiary\r\n    // @return res {bool} true if transaction was successful\r\n    function contribute(address _backer) internal stopInEmergency respectTimeFrame returns(bool res) {\r\n\r\n        uint tokensToSend = validPurchase();\r\n            \r\n        Backer storage backer = backers[_backer];\r\n\r\n        if (!token.transfer(_backer, tokensToSend)) \r\n            revert(); // Transfer tokens\r\n        backer.tokensSent = backer.tokensSent.add(tokensToSend); // save contributors tokens to be sent\r\n        backer.weiReceived = backer.weiReceived.add(msg.value);  // save how much was the contribution\r\n\r\n        if (Step.FundingPublicSale == currentStep)  // Update the total Ether recived\r\n           ethReceivedMain = ethReceivedMain.add(msg.value);\r\n        else\r\n            ethReceivedPresale = ethReceivedPresale.add(msg.value); \r\n                                                     \r\n        totalTokensSent = totalTokensSent.add(tokensToSend);     // update the total amount of tokens sent\r\n        backersIndex.push(_backer);\r\n\r\n        multisig.transfer(this.balance);   // transfer funds to multisignature wallet             \r\n\r\n        ReceivedETH(_backer, msg.value, tokensToSend); // Register event\r\n        return true;\r\n    }\r\n\r\n\r\n\r\n    // @notice determine if purchase is valid and return proper number of tokens\r\n    // @return tokensToSend {uint} proper number of tokens based on the timline\r\n\r\n    function validPurchase() constant internal returns (uint) {\r\n       \r\n        require (msg.value >= minInvestETH);   // ensure that min contributions amount is met\r\n\r\n        // calculate amount of tokens to send  (add 18 0s first)   \r\n        uint tokensToSend = msg.value.mul(1e18) / tokenPriceWei;  // basic nmumber of tokens to send\r\n          \r\n        if (Step.FundingPublicSale == currentStep)   // calculate stepped price of token in public sale\r\n            tokensToSend = calculateNoOfTokensToSend(tokensToSend); \r\n        else                                         // calculate number of tokens for presale with 50% bonus\r\n            tokensToSend = tokensToSend.add(tokensToSend.mul(50) / 100);\r\n          \r\n        require(totalTokensSent.add(tokensToSend) < maxCap); // Ensure that max cap hasn't been reached  \r\n\r\n        return tokensToSend;\r\n    }\r\n    \r\n    // @notice It is called by handleETH to determine amount of tokens for given contribution\r\n    // @param _amount {uint} current range computed\r\n    // @return tokensToPurchase {uint} value of tokens to purchase\r\n    function calculateNoOfTokensToSend(uint _amount) internal constant returns(uint) {\r\n   \r\n        if (ethReceivedMain <= 1500 ether)        // First 1500 ETH: 25%\r\n            return _amount.add(_amount.mul(25) / 100);\r\n        else if (ethReceivedMain <= 2500 ether)   // 1501 to 2500 ETH: 15%              \r\n            return _amount.add(_amount.mul(15) / 100);\r\n        else if (ethReceivedMain < 3000 ether)   // 2501 to 3000 ETH: 10%\r\n            return _amount.add(_amount.mul(10) / 100);\r\n        else if (ethReceivedMain <= 4000 ether)  // 3001 to 4000 ETH: 5%\r\n            return _amount.add(_amount.mul(5) / 100);\r\n        else if (ethReceivedMain <= 5000 ether)  // 4001 to 5000 ETH : 2%\r\n            return _amount.add(_amount.mul(2) / 100);\r\n        else                                 // 5000+ No bonus after that\r\n            return _amount;\r\n    }\r\n\r\n    // @notice show for display purpose amount of tokens which can be bought \r\n    // at given moment. \r\n    // @param _ether {uint} amount of ehter\r\n    function estimateTokenNumber(uint _amountWei ) external view returns (uint) { \r\n        return calculateNoOfTokensToSend(_amountWei);\r\n    }\r\n\r\n    // @notice This function will finalize the sale.\r\n    // It will only execute if predetermined sale time passed or all tokens are sold.\r\n    function finalize() external onlyOwner() {\r\n\r\n        uint totalEtherReceived = ethReceivedPresale.add(ethReceivedMain);\r\n\r\n        require(!crowdsaleClosed);        \r\n        // purchasing precise number of tokens might be impractical, thus subtract 100 tokens so finalizition is possible\r\n        // near the end \r\n        require (block.number >= endBlock || totalTokensSent >= maxCap.sub(100)); \r\n        require(totalEtherReceived >= minCap && block.number >= endBlock);             \r\n\r\n        if (totalTokensSent >= minCap) {           \r\n            if (!token.transfer(team, 6300000e18)) // transfer tokens for the team/dev/advisors\r\n                revert();\r\n            if (!token.transfer(lottery, token.balanceOf(this) / 2)) \r\n                revert();\r\n            if (!token.burn(this, token.balanceOf(this)))\r\n                revert();\r\n             token.unlock();\r\n        }\r\n        crowdsaleClosed = true;       \r\n    }\r\n\r\n  \r\n\r\n    // @notice Failsafe drain\r\n    function drain() external onlyOwner() {\r\n        multisig.transfer(this.balance);               \r\n    }\r\n\r\n\r\n\r\n    // @notice Failsafe token transfer\r\n    function tokenDrian() external onlyOwner() {\r\n       if (block.number > endBlock) {\r\n        if (!token.transfer(team, token.balanceOf(this))) \r\n                revert();\r\n        }\r\n    }\r\n    \r\n\r\n\r\n    function refund()  external stopInEmergency returns (bool) {\r\n\r\n        require(totalTokensSent < minCap); \r\n        require(this.balance > 0);  // contract will hold 0 ether at the end of campaign.                                  \r\n                                    // contract needs to be funded through fundContract() \r\n\r\n        Backer storage backer = backers[msg.sender];\r\n\r\n        if (backer.weiReceived == 0)\r\n            revert();\r\n\r\n        require(!backer.refunded);\r\n        require(backer.tokensSent != 0);\r\n\r\n        if (!token.burn(msg.sender, backer.tokensSent))\r\n            revert();\r\n        backer.refunded = true;\r\n      \r\n        refundCount ++;\r\n        totalRefunded = totalRefunded.add(backer.weiReceived);\r\n        msg.sender.transfer(backer.weiReceived);\r\n        RefundETH(msg.sender, backer.weiReceived);\r\n        return true;\r\n    }\r\n}\r\n\r\n// The token\r\ncontract Token is ERC20,  Ownable {\r\n\r\n    using SafeMath for uint;\r\n    // Public variables of the token\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals; // How many decimals to show.\r\n    string public version = \"v0.1\";       \r\n    uint public totalSupply;\r\n    bool public locked;\r\n    address public crowdSaleAddress;\r\n    \r\n\r\n\r\n    mapping(address => uint) balances;\r\n    mapping(address => mapping(address => uint)) allowed;\r\n\r\n    // tokens are locked during the ICO. Allow transfer of tokens after ICO. \r\n    modifier onlyUnlocked() {\r\n        if (msg.sender != crowdSaleAddress && locked) \r\n            revert();\r\n        _;\r\n    }\r\n\r\n\r\n    // allow burning of tokens only by authorized users \r\n    modifier onlyAuthorized() {\r\n        if (msg.sender != owner && msg.sender != crowdSaleAddress ) \r\n            revert();\r\n        _;\r\n    }\r\n\r\n\r\n    // The Token \r\n    function Token(address _crowdSaleAddress) public {\r\n        \r\n        locked = true;  // Lock the transfCrowdsaleer function during the crowdsale\r\n        totalSupply = 21000000e18; \r\n        name = \"Lottery Token\"; // Set the name for display purposes\r\n        symbol = \"ETHD\"; // Set the symbol for display purposes\r\n        decimals = 18; // Amount of decimals for display purposes\r\n        crowdSaleAddress = _crowdSaleAddress;                                  \r\n        balances[crowdSaleAddress] = totalSupply;\r\n    }\r\n\r\n    function unlock() public onlyAuthorized {\r\n        locked = false;\r\n    }\r\n\r\n    function lock() public onlyAuthorized {\r\n        locked = true;\r\n    }\r\n    \r\n\r\n    function burn( address _member, uint256 _value) public onlyAuthorized returns(bool) {\r\n        balances[_member] = balances[_member].sub(_value);\r\n        totalSupply = totalSupply.sub(_value);\r\n        Transfer(_member, 0x0, _value);\r\n        return true;\r\n    }\r\n\r\n    function transfer(address _to, uint _value) public onlyUnlocked returns(bool) {\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    \r\n    function transferFrom(address _from, address _to, uint256 _value) public onlyUnlocked returns(bool success) {\r\n        require (balances[_from] >= _value); // Check if the sender has enough                            \r\n        require (_value <= allowed[_from][msg.sender]); // Check if allowed is greater or equal        \r\n        balances[_from] = balances[_from].sub(_value); // Subtract from the sender\r\n        balances[_to] = balances[_to].add(_value); // Add the same to the recipient\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function balanceOf(address _owner) public view returns(uint balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n\r\n    /**\r\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n    *\r\n    * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n    * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n    * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n    * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    * @param _spender The address which will spend the funds.\r\n    * @param _value The amount of tokens to be spent.\r\n    */\r\n    function approve(address _spender, uint _value) public returns(bool) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n\r\n    function allowance(address _owner, address _spender) public constant returns(uint remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    /**\r\n    * approve should be called when allowed[_spender] == 0. To increment\r\n    * allowed value is better to use this function to avoid 2 calls (and wait until\r\n    * the first transaction is mined)\r\n    * From MonolithDAO Token.sol\r\n    */\r\n    function increaseApproval (address _spender, uint _addedValue) public returns (bool success) {\r\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n    function decreaseApproval (address _spender, uint _subtractedValue) public returns (bool success) {\r\n        uint oldValue = allowed[msg.sender][_spender];\r\n        if (_subtractedValue > oldValue) {\r\n        allowed[msg.sender][_spender] = 0;\r\n        } else {\r\n        allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n        }\r\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"tokenPriceWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"refundCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numberOfBackers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"returnWebsiteData\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minInvestETH\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"multisig\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refund\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentStep\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"emergencyStop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"updateTokenAddress\",\"outputs\":[{\"name\":\"res\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stopped\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"team\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"release\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethReceivedMain\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"adjustDuration\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"start\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"drain\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_amountWei\",\"type\":\"uint256\"}],\"name\":\"estimateTokenNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethReceivedPresale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalTokensSent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"backers\",\"outputs\":[{\"name\":\"weiReceived\",\"type\":\"uint256\"},{\"name\":\"tokensSent\",\"type\":\"uint256\"},{\"name\":\"refunded\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lottery\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"fundContract\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleClosed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalRefunded\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"tokenDrian\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_step\",\"type\":\"uint8\"}],\"name\":\"setStep\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"backersIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"backer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"ReceivedETH\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"backer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RefundETH\",\"type\":\"event\"}]","ContractName":"Crowdsale","CompilerVersion":"v0.4.17+commit.bdeb9e52","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://187b2f0983587d2cb0d9fa5c71c760c2219c0c16a37012a564e2910d3a1a0698"}]}