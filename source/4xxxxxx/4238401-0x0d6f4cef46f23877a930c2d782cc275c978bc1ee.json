{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13; \r\ncontract Owned { \r\n  address public owner;\r\n\r\n  function Owned() {\r\n      owner = msg.sender;\r\n  }\r\n\r\n  modifier onlyOwner {\r\n      require(msg.sender == owner);\r\n      _;\r\n  }\r\n\r\n  function transferOwnership(address newOwner) onlyOwner {\r\n      owner = newOwner;\r\n  }\r\n}\r\n\r\ncontract ERC20Interface {\r\n    // Get the total token supply\r\n    uint256 public totalSupply;\r\n \r\n    // Get the account balance of another account with address _owner\r\n    function balanceOf(address _owner) constant returns (uint256 balance);\r\n \r\n    // Send _value amount of tokens to address _to\r\n    function transfer(address _to, uint256 _value) returns (bool success);\r\n \r\n    // Send _value amount of tokens from address _from to address _to\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\r\n \r\n    // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\r\n    // If this function is called again it overwrites the current allowance with _value.\r\n    // this function is required for some DEX functionality\r\n    function approve(address _spender, uint256 _value) returns (bool success);\r\n \r\n    // Returns the amount which _spender is still allowed to withdraw from _owner\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\r\n \r\n    // Triggered when tokens are transferred.\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n \r\n    // Triggered whenever approve(address _spender, uint256 _value) is called.\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n    // Burn token\r\n    event Burn(address indexed from, uint256 value);\r\n}\r\n\r\ncontract PlatoToken is Owned, ERC20Interface {\r\n  string  public name = \"Plato\"; \r\n  string  public symbol = \"PAT\"; \r\n  uint8   public decimals = 8; \r\n  uint256 public totalSupply = 100000000;\r\n  mapping (address => uint256) public balanceOf;\r\n  mapping (address => mapping (address => uint256)) public allowance;\r\n\r\n  function PlatoToken() {\r\n    owner = msg.sender;\r\n    balanceOf[owner] = totalSupply;\r\n  }\r\n\r\n  function balanceOf(address _owner) constant returns (uint256 balance){\r\n    return balanceOf[_owner];\r\n  }  \r\n  /* Internal transfer, only can be called by this contract */\r\n  function _transfer(address _from, address _to, uint _value) internal {\r\n      require (_to != 0x0);                               // Prevent transfer to 0x0 address. Use burn() instead\r\n      require (balanceOf[_from] > _value);                // Check if the sender has enough\r\n      require (balanceOf[_to] + _value > balanceOf[_to]); // Check for overflows\r\n      balanceOf[_from] -= _value;                         // Subtract from the sender\r\n      balanceOf[_to] += _value;                            // Add the same to the recipient\r\n      Transfer(_from, _to, _value);\r\n  }\r\n\r\n  /// @notice Send `_value` tokens to `_to` from your account\r\n  /// @param _to The address of the recipient\r\n  /// @param _value the amount to send\r\n  function transfer(address _to, uint256 _value) returns (bool success){\r\n      _transfer(msg.sender, _to, _value);\r\n      return true;\r\n  }\r\n\r\n  /// @notice Send `_value` tokens to `_to` in behalf of `_from`\r\n  /// @param _from The address of the sender\r\n  /// @param _to The address of the recipient\r\n  /// @param _value the amount to send\r\n  function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\r\n      require (_value < allowance[_from][msg.sender]);     // Check allowance\r\n      allowance[_from][msg.sender] -= _value;\r\n      _transfer(_from, _to, _value);\r\n      return true;\r\n  }\r\n\r\n  /// @notice Allows `_spender` to spend no more than `_value` tokens in your behalf\r\n  /// @param _spender The address authorized to spend\r\n  /// @param _value the max amount they can spend\r\n  function approve(address _spender, uint256 _value)\r\n      returns (bool success) {\r\n      allowance[msg.sender][_spender] = _value;\r\n      return true;\r\n  }  \r\n\r\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n    return allowance[_owner][_spender];\r\n  }\r\n\r\n  /// @notice Remove `_value` tokens from the system irreversibly\r\n  /// @param _value the amount of money to burn\r\n  function burn(uint256 _value) returns (bool success) {\r\n      require (balanceOf[msg.sender] > _value);            // Check if the sender has enough\r\n      balanceOf[msg.sender] -= _value;                      // Subtract from the sender\r\n      totalSupply -= _value;                                // Updates totalSupply\r\n      Burn(msg.sender, _value);\r\n      return true;\r\n  }\r\n\r\n  function burnFrom(address _from, uint256 _value) returns (bool success) {\r\n      require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\r\n      require(_value <= allowance[_from][msg.sender]);    // Check allowance\r\n      balanceOf[_from] -= _value;                         // Subtract from the targeted balance\r\n      allowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance\r\n      totalSupply -= _value;                              // Update totalSupply\r\n      Burn(_from, _value);\r\n      return true;\r\n  }\r\n  \r\n  /// @notice Create `mintedAmount` tokens and send it to `target`\r\n  /// @param target Address to receive the tokens\r\n  /// @param mintedAmount the amount of tokens it will receive\r\n  function mintToken(address target, uint256 mintedAmount) onlyOwner {\r\n      balanceOf[target] += mintedAmount;\r\n      totalSupply += mintedAmount;\r\n      Transfer(0, this, mintedAmount);\r\n      Transfer(this, target, mintedAmount);\r\n  }\r\n\r\n  function(){\r\n    revert();\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"mintedAmount\",\"type\":\"uint256\"}],\"name\":\"mintToken\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":false,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"}]","ContractName":"PlatoToken","CompilerVersion":"v0.4.13+commit.fb4cb1a","OptimizationUsed":"1","Runs":"20","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://7ea688190b0e18483fa52d6c024aa08c59e923c0458b8406a4889af44cdaf78f"}]}