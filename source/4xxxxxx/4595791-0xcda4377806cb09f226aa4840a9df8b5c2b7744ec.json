{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.16;\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ninterface ManagedToken{\r\n    function setLock(bool _newLockState) public returns (bool success);\r\n    function mint(address _for, uint256 _amount) public returns (bool success);\r\n    function demint(address _for, uint256 _amount) public returns (bool success);\r\n    function decimals() view public returns (uint8 decDigits);\r\n    function totalSupply() view public returns (uint256 supply);\r\n    function balanceOf(address _owner) view public returns (uint256 balance);\r\n}\r\n  \r\ncontract HardcodedCrowdsale {\r\n    using SafeMath for uint256;\r\n\r\n    //global definisions\r\n\r\n    enum ICOStateEnum {NotStarted, Started, Refunded, Successful}\r\n\r\n    address public owner = msg.sender;\r\n    ManagedToken public managedTokenLedger;\r\n\r\n    string public name = \"Uservice Token\";\r\n    string public symbol = \"UST\";\r\n\r\n    bool public halted = false;\r\n     \r\n    uint256 public minWeiToBuy = 200000000000000000;          //  minimum 0.2 ETH to buy\r\n    \r\n    uint256 public preICOcontributors = 0;\r\n\r\n    uint256 public preICOstart;\r\n    uint256 public preICOend;\r\n    uint256 public preICOgoal;\r\n    uint256 public preICOcollected = 0;\r\n    uint256 public preICOcap = 10000 ether;\r\n    uint256 public preICOtokensSold = 0;\r\n    ICOStateEnum public preICOstate = ICOStateEnum.NotStarted;\r\n    \r\n    uint8 public decimals = 18;\r\n    uint256 public DECIMAL_MULTIPLIER = 10**uint256(decimals);\r\n\r\n    uint8 public saleIndex = 0;\r\n \r\n    uint256 public preICOprice = uint256(0.25 ether).div(1000);\r\n    uint256[3] public preICOcoinsLeft = [40000000*DECIMAL_MULTIPLIER, 0*DECIMAL_MULTIPLIER, 0*DECIMAL_MULTIPLIER];\r\n\r\n    mapping(address => uint256) public weiForRefundPreICO;\r\n\r\n    mapping(address => uint256) public weiToRecoverPreICO;\r\n\r\n    mapping(address => uint256) public balancesForPreICO;\r\n\r\n    event Purchased(address indexed _from, uint256 _value);\r\n\r\n    function advanceState() public returns (bool success) {\r\n        transitionState();\r\n        return true;\r\n    }\r\n\r\n    function transitionState() internal {\r\n        if (now >= preICOstart) {\r\n            if (preICOstate == ICOStateEnum.NotStarted) {\r\n                preICOstate = ICOStateEnum.Started;\r\n            }\r\n            if (preICOcap > 0 && preICOcollected >= preICOcap) {\r\n                preICOstate = ICOStateEnum.Successful;\r\n            }\r\n            if ( (saleIndex == preICOcoinsLeft.length) && (preICOcoinsLeft[saleIndex-1] == 0) ) {\r\n                preICOstate = ICOStateEnum.Successful;\r\n            }\r\n        } if (now >= preICOend) {\r\n            if (preICOstate == ICOStateEnum.Started) {\r\n                if (preICOcollected >= preICOgoal) {\r\n                    preICOstate = ICOStateEnum.Successful;\r\n                } else {\r\n                    preICOstate = ICOStateEnum.Refunded;\r\n                }\r\n            }\r\n        } \r\n    }\r\n\r\n    modifier stateTransition() {\r\n        transitionState();\r\n        _;\r\n        transitionState();\r\n    }\r\n\r\n    modifier notHalted() {\r\n        require(!halted);\r\n        _;\r\n    }\r\n\r\n    // Ownership\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));      \r\n        OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n    function balanceOf(address _owner) view public returns (uint256 balance) {\r\n        return managedTokenLedger.balanceOf(_owner);\r\n    }\r\n\r\n    function totalSupply() view public returns (uint256 balance) {\r\n        return managedTokenLedger.totalSupply();\r\n    }\r\n\r\n\r\n    function HardcodedCrowdsale (uint _preICOstart, uint _preICOend, uint _preICOgoal, uint _preICOcap, address _newLedgerAddress) public {\r\n//        require(_preICOstart > now);\r\n        require(_preICOend > _preICOstart);\r\n        require(_preICOgoal > 0);\r\n        require(_newLedgerAddress != address(0));\r\n        preICOstart = _preICOstart;\r\n        preICOend = _preICOend;\r\n        preICOgoal = _preICOgoal;\r\n        preICOcap = _preICOcap;\r\n        managedTokenLedger = ManagedToken(_newLedgerAddress);\r\n        assert(managedTokenLedger.decimals() == decimals);\r\n    }\r\n\r\n    function setNameAndTicker(string _name, string _symbol) onlyOwner public returns (bool success) {\r\n        require(bytes(_name).length > 1);\r\n        require(bytes(_symbol).length > 1);\r\n        name = _name;\r\n        symbol = _symbol;\r\n        return true;\r\n    }\r\n\r\n    function setLedger (address _newLedgerAddress) onlyOwner public returns (bool success) {\r\n        require(_newLedgerAddress != address(0));\r\n        managedTokenLedger = ManagedToken(_newLedgerAddress);\r\n        assert(managedTokenLedger.decimals() == decimals);\r\n        return true;\r\n    }\r\n\r\n    function () payable stateTransition notHalted external {\r\n        require(msg.value > 0);\r\n        require(preICOstate == ICOStateEnum.Started);\r\n        assert(preICOBuy());\r\n    }\r\n\r\n    \r\n    function finalize() stateTransition public returns (bool success) {\r\n        require(preICOstate == ICOStateEnum.Successful);\r\n        owner.transfer(preICOcollected);\r\n        return true;\r\n    }\r\n\r\n    function setHalt(bool _halt) onlyOwner public returns (bool success) {\r\n        halted = _halt;\r\n        return true;\r\n    }\r\n\r\n    function calculateAmountBoughtPreICO(uint256 _weisSentScaled)\r\n        internal returns (uint256 _tokensToBuyScaled, uint256 _weisLeftScaled) {\r\n        uint256 value = _weisSentScaled;\r\n        uint256 totalPurchased = 0;\r\n        for (uint8 i = saleIndex; i < preICOcoinsLeft.length; i++) {\r\n            if (preICOcoinsLeft[i] == 0) {\r\n                continue;\r\n            }\r\n            uint256 forThisRate = value.div(preICOprice);\r\n            if (forThisRate == 0) {\r\n                break;\r\n            }\r\n            if (forThisRate >= preICOcoinsLeft[i]) {\r\n                forThisRate = preICOcoinsLeft[i];\r\n                preICOcoinsLeft[i] = 0;\r\n                saleIndex = i+1;\r\n            } else {\r\n                preICOcoinsLeft[i] = preICOcoinsLeft[i].sub(forThisRate);\r\n            }\r\n            uint256 consumed = forThisRate.mul(preICOprice);\r\n            value = value.sub(consumed);\r\n            totalPurchased = totalPurchased.add(forThisRate);\r\n        }\r\n        return (totalPurchased, value);\r\n    }\r\n\r\n    function preICOBuy() internal notHalted returns (bool success) {\r\n        uint256 weisSentScaled = msg.value.mul(DECIMAL_MULTIPLIER);\r\n        address _for = msg.sender;\r\n        var (tokensBought, fundsLeftScaled) = calculateAmountBoughtPreICO(weisSentScaled);\r\n        uint256 fundsLeft = fundsLeftScaled.div(DECIMAL_MULTIPLIER);\r\n        uint256 totalSpent = msg.value.sub(fundsLeft);\r\n        if (totalSpent < minWeiToBuy) {\r\n            revert();\r\n        }\r\n        if (balanceOf(_for) == 0) {\r\n            preICOcontributors = preICOcontributors + 1;\r\n        }\r\n        managedTokenLedger.mint(_for, tokensBought);\r\n        balancesForPreICO[_for] = balancesForPreICO[_for].add(tokensBought);\r\n        weiForRefundPreICO[_for] = weiForRefundPreICO[_for].add(totalSpent);\r\n        weiToRecoverPreICO[_for] = weiToRecoverPreICO[_for].add(fundsLeft);\r\n        Purchased(_for, tokensBought);\r\n        preICOcollected = preICOcollected.add(totalSpent);\r\n        preICOtokensSold = preICOtokensSold.add(tokensBought);\r\n        return true;\r\n    }\r\n\r\n    function recoverLeftoversPreICO() stateTransition notHalted public returns (bool success) {\r\n        require(preICOstate != ICOStateEnum.NotStarted);\r\n        uint256 value = weiToRecoverPreICO[msg.sender];\r\n        delete weiToRecoverPreICO[msg.sender];\r\n        msg.sender.transfer(value);\r\n        return true;\r\n    }\r\n\r\n    function refundPreICO() stateTransition notHalted public returns (bool success) {\r\n        require(preICOstate == ICOStateEnum.Refunded);\r\n        uint256 value = weiForRefundPreICO[msg.sender];\r\n        delete weiForRefundPreICO[msg.sender];\r\n        uint256 tokenValue = balancesForPreICO[msg.sender];\r\n        delete balancesForPreICO[msg.sender];\r\n        managedTokenLedger.demint(msg.sender, tokenValue);\r\n        msg.sender.transfer(value);\r\n        return true;\r\n    }\r\n\r\n    function cleanup() onlyOwner public {\r\n        selfdestruct(owner);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balancesForPreICO\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DECIMAL_MULTIPLIER\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"preICOcoinsLeft\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newLedgerAddress\",\"type\":\"address\"}],\"name\":\"setLedger\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preICOstart\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preICOstate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cleanup\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"managedTokenLedger\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preICOtokensSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"recoverLeftoversPreICO\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minWeiToBuy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preICOcollected\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preICOcap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preICOprice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"advanceState\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preICOgoal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"halted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"setNameAndTicker\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refundPreICO\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"weiForRefundPreICO\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preICOcontributors\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_halt\",\"type\":\"bool\"}],\"name\":\"setHalt\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preICOend\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"weiToRecoverPreICO\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_preICOstart\",\"type\":\"uint256\"},{\"name\":\"_preICOend\",\"type\":\"uint256\"},{\"name\":\"_preICOgoal\",\"type\":\"uint256\"},{\"name\":\"_preICOcap\",\"type\":\"uint256\"},{\"name\":\"_newLedgerAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Purchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"HardcodedCrowdsale","CompilerVersion":"v0.4.16+commit.d7661dd9","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000005a14613a000000000000000000000000000000000000000000000000000000005a365c400000000000000000000000000000000000000000000000a2a15d09519be0000000000000000000000000000000000000000000000000021e19e0c9bab2400000000000000000000000000000f62baa1997f04f165edd100d78241e07617f6ce6","Library":"","SwarmSource":"bzzr://06725e269f54ad9feaab2cbabda473c4141bf85df19f8c670e5b120bf8892358"}]}