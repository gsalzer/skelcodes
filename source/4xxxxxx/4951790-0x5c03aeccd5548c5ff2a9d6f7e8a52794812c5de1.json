{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.19;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal returns (uint256) {\r\n    uint256 c = a * b;\r\n    require(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal returns (uint256) {\r\n    //   require(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    //   require(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal returns (uint256) {\r\n    require(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract ControllerInterface {\r\n\r\n  function totalSupply() constant returns (uint256);\r\n  function balanceOf(address _owner) constant returns (uint256);\r\n  function allowance(address _owner, address _spender) constant returns (uint256);\r\n\r\n  function approve(address owner, address spender, uint256 value) public returns (bool);\r\n  function transfer(address owner, address to, uint value, bytes data) public returns (bool);\r\n  function transferFrom(address owner, address from, address to, uint256 amount, bytes data) public returns (bool);\r\n  function mint(address _to, uint256 _amount)  public returns (bool);\r\n}\r\n\r\n/**\r\n * @title CrowdsaleBase\r\n * @dev CrowdsaleBase is a base contract for managing a token crowdsale.\r\n * All crowdsale contracts must inherit this contract.\r\n */\r\n\r\ncontract CrowdsaleBase {\r\n  using SafeMath for uint256;\r\n\r\n  address public controller;\r\n  uint256 public startTime;\r\n  address public wallet;\r\n  uint256 public weiRaised;\r\n  uint256 public endTime;\r\n\r\n  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n\r\n  modifier onlyController() {\r\n    require(msg.sender == controller);\r\n    _;\r\n  }\r\n\r\n  function CrowdsaleBase(uint256 _startTime, address _wallet, address _controller) public {\r\n    require(_wallet != address(0));\r\n\r\n    controller = _controller;\r\n    startTime = _startTime;\r\n    wallet = _wallet;\r\n  }\r\n\r\n  // @return true if crowdsale event has ended\r\n  function hasEnded() public constant returns (bool) {\r\n    return now > endTime;\r\n  }\r\n\r\n  // send ether to the fund collection wallet\r\n  function forwardFunds() internal {\r\n    require(wallet.call.gas(2000).value(msg.value)());\r\n  }\r\n\r\n  // @return true if the transaction can buy tokens\r\n  function validPurchase() internal constant returns (bool) {\r\n    bool withinPeriod = now >= startTime && now <= endTime;\r\n    bool nonZeroPurchase = msg.value != 0;\r\n    return withinPeriod && nonZeroPurchase;\r\n  }\r\n\r\n  // internal token purchase function\r\n  function _buyTokens(address beneficiary, uint256 rate) internal returns (uint256 tokens) {\r\n    require(beneficiary != address(0));\r\n    require(validPurchase());\r\n\r\n    uint256 weiAmount = msg.value;\r\n\r\n    // calculate token amount to be created\r\n    tokens = weiAmount.mul(rate);\r\n\r\n    // update state\r\n    weiRaised = weiRaised.add(weiAmount);\r\n\r\n    ControllerInterface(controller).mint(beneficiary, tokens);\r\n    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\r\n\r\n    forwardFunds();\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Crowdsale\r\n * @dev Crowdsale is a  contract for managing a token crowdsale.\r\n * Crowdsales have a start and end timestamps, where investors can make\r\n * token purchases and the crowdsale will assign them tokens based\r\n * on a token per ETH rate. Funds collected are forwarded to a wallet\r\n * as they arrive.\r\n */\r\ncontract Crowdsale is CrowdsaleBase {\r\n\r\n  uint256 public rate;\r\n\r\n  function Crowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet, address _controller) public\r\n    CrowdsaleBase(_startTime, _wallet, _controller)\r\n  {\r\n    require(_endTime >= _startTime);\r\n    require(_rate > 0);\r\n\r\n    endTime = _endTime;\r\n    rate = _rate;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title TokenCappedCrowdsale\r\n * @dev Extension of Crowdsale with a max amount of tokens to be bought\r\n */\r\ncontract TokenCappedCrowdsale is Crowdsale {\r\n\r\n  uint256 public tokenCap;\r\n  uint256 public totalSupply;\r\n\r\n  function TokenCappedCrowdsale(uint256 _tokenCap) public {\r\n      require(_tokenCap > 0);\r\n      tokenCap = _tokenCap;\r\n  }\r\n\r\n  function setSupply(uint256 newSupply) internal constant returns (bool) {\r\n    totalSupply = newSupply;\r\n    return tokenCap >= totalSupply;\r\n  }\r\n\r\n}\r\n\r\ncontract SGPayPresale is TokenCappedCrowdsale {\r\n\r\n\r\n  function SGPayPresale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet, address controller, uint256 _cap)\r\n    Crowdsale(_startTime, _endTime, _rate, _wallet, controller)\r\n    TokenCappedCrowdsale(_cap)\r\n  {\r\n\r\n  }\r\n\r\n  function buyTokens(address beneficiary) public payable {\r\n    uint256 tokens = _buyTokens(beneficiary, rate);\r\n    if(!setSupply(totalSupply.add(tokens))) revert();\r\n  }\r\n\r\n  function changeRate(uint256 _newValue) public onlyController {\r\n    rate = _newValue;\r\n  }\r\n\r\n  // fallback function can be used to buy tokens\r\n  function () external payable {\r\n    buyTokens(msg.sender);\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newValue\",\"type\":\"uint256\"}],\"name\":\"changeRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_startTime\",\"type\":\"uint256\"},{\"name\":\"_endTime\",\"type\":\"uint256\"},{\"name\":\"_rate\",\"type\":\"uint256\"},{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"controller\",\"type\":\"address\"},{\"name\":\"_cap\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"}]","ContractName":"SGPayPresale","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000005a71e7c4000000000000000000000000000000000000000000000000000000005a845cc40000000000000000000000000000000000000000000000000000000000000a8c000000000000000000000000dcc30a0e89dc9c3cdb0bdb7c77e5820f9805022e0000000000000000000000006998657c7aa7af80c51f6589a158055c334ede7f00000000000000000000000000000000000000000001a784379d99db42000000","Library":"","SwarmSource":"bzzr://47f4a7c26c11c28189fb51e1efad9c69a60fbb0b1920d8b622a2fca09805c2c2"}]}