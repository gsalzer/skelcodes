{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13;\r\n\r\ncontract Timed {\r\n    uint256 public beginTime;\r\n    uint256 public endTime;\r\n\r\n    modifier onlyInTime() {\r\n        require(beginTime <= block.timestamp && block.timestamp <= endTime);\r\n        _;\r\n    }\r\n\r\n    modifier onlyAfterTime() {\r\n        require(endTime < block.timestamp);\r\n        _;\r\n    }\r\n\r\n    function Timed(uint256 _beginTime, uint256 _duration) {\r\n        require(_duration > 0);\r\n        if (_beginTime == 0) {\r\n            _beginTime = block.timestamp;\r\n        }\r\n        require(_beginTime >= block.timestamp);\r\n        beginTime = _beginTime;\r\n        endTime = _beginTime + _duration;\r\n    }\r\n}\r\n\r\ncontract Owned {\r\n    address public owner;\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function Owned() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function updateOwner(address _owner) public onlyOwner {\r\n        owner = _owner;\r\n    }\r\n}\r\n\r\ncontract EthVestICO is Timed, Owned {\r\n    uint256 constant ICO_LENGTH = 7 days;\r\n    uint256 constant RATE = 32 years;\r\n    uint256 constant REWARD = RATE * 1000 ether;\r\n\r\n    EthVest public ethVest;\r\n\r\n    event Purchase(address indexed _payer, address indexed _beneficiary, uint256 _value, uint256 _mint);\r\n\r\n    function EthVestICO(uint256 _beginTime) Timed(_beginTime, ICO_LENGTH) {\r\n        ethVest = new EthVest();\r\n    }\r\n\r\n    function () payable onlyInTime {\r\n        purchase(msg.sender);\r\n    }\r\n\r\n    function purchase(address _beneficiary) public payable onlyInTime {\r\n        require(_beneficiary != 0x0);\r\n        require(msg.value > 0);\r\n        uint256 _mintValue = msg.value * RATE;\r\n        ethVest.mint(_beneficiary, _mintValue);\r\n        Purchase(msg.sender, _beneficiary, msg.value, _mintValue);\r\n    }\r\n\r\n    function finish() public onlyOwner onlyAfterTime {\r\n        ethVest.mint(owner, ethVest.totalSupply() >> 2);\r\n        ethVest.mint(owner, REWARD);\r\n        ethVest.start();\r\n        ethVest.updateOwner(owner);\r\n    }\r\n\r\n    function withdraw() public onlyOwner {\r\n        owner.transfer(this.balance);\r\n    }\r\n}\r\n\r\ninterface EthVestInterface {\r\n    function investmentOf(address _beneficiary) public constant returns (uint256 _value, uint256 _date);\r\n    function invest() public payable returns (bool);\r\n    event Invest(address indexed _beneficiary, uint256 _value);\r\n    function divest(uint256 _value) public returns (bool);\r\n    function divest() public returns (bool);\r\n    event Divest(address indexed _beneficiary, uint256 _value);\r\n    function claim() public returns (bool);\r\n    event Coupon(address indexed _beneficiary, uint256 _coupon, uint256 indexed _date);\r\n}\r\n\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) constant returns (uint256);\r\n  function transfer(address to, uint256 value) returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) returns (bool);\r\n  function approve(address spender, uint256 value) returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract SafeArithmetic {\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a * b;\r\n        require(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n}\r\n\r\ncontract Startable is Owned {\r\n    event Start();\r\n    bool private started = false;\r\n\r\n    modifier onlyAfterStart() {\r\n        require(started);\r\n        _;\r\n    }\r\n\r\n    modifier onlyBeforeStart() {\r\n        require(!started);\r\n        _;\r\n    }\r\n\r\n    function start() external onlyOwner {\r\n        started = true;\r\n        Start();\r\n    }\r\n}\r\n\r\ncontract Stoppable is Owned {\r\n    event Stop(bytes32 message);\r\n    bool private stopped = false;\r\n\r\n    modifier onlyNotStopped() {\r\n        require(!stopped);\r\n        _;\r\n    }\r\n\r\n    function stop(bytes32 message) external onlyOwner {\r\n        _stop(message);\r\n    }\r\n\r\n    function _stop(bytes32 message) internal {\r\n        stopped = true;\r\n        Stop(message);\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) returns (bool) {\r\n    require(_to != address(0));\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of. \r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\r\n    require(_to != address(0));\r\n\r\n    var _allowance = allowed[_from][msg.sender];\r\n\r\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n    // require (_value <= _allowance);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) returns (bool) {\r\n\r\n    // To change the approve amount you first have to reduce the addresses`\r\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n    //  already 0 to mitigate the race condition described here:\r\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n  \r\n  /**\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until \r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   */\r\n  function increaseApproval (address _spender, uint _addedValue) \r\n    returns (bool success) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  function decreaseApproval (address _spender, uint _subtractedValue) \r\n    returns (bool success) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\ncontract EthVest is EthVestInterface, StandardToken, Owned, Stoppable, Startable, SafeArithmetic {\r\n    event Mint(address indexed _to, uint256 _value);\r\n    string public name = \"EthVest\";\r\n    uint8 public decimals = 18;\r\n    string public symbol = \"VST\";\r\n    string public version = \"1\";\r\n\r\n    struct Investment {\r\n        uint256 value;\r\n        uint256 date;\r\n    }\r\n\r\n    mapping(address => Investment) public investments;\r\n    uint256 totalWorth;\r\n\r\n    function EthVest() {\r\n    }\r\n\r\n    function mint(address _to, uint256 _value) external onlyOwner onlyBeforeStart returns (bool) {\r\n        _mint(_to, _value);\r\n    }\r\n\r\n    function _mint(address _to, uint256 _value) private returns (bool) {\r\n        totalSupply = totalSupply.add(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        Mint(_to, _value);\r\n        return true;\r\n    }\r\n\r\n    function investmentOf(address _beneficiary) public constant returns (uint256 _value, uint256 _date) {\r\n        Investment storage _investment = investments[_beneficiary];\r\n        return (_investment.value, _investment.date);\r\n    }\r\n\r\n    function invest() public payable onlyNotStopped onlyAfterStart returns (bool) {\r\n        claim();\r\n        Investment storage _investment = investments[msg.sender];\r\n        _investment.value = add(_investment.value, msg.value);\r\n        totalWorth = add(totalWorth, msg.value);\r\n        if (this.balance != totalWorth) {\r\n            _stop(\"leakDetected\");\r\n        }\r\n        Invest(msg.sender, msg.value);\r\n        return true;\r\n    }\r\n\r\n    function divest(uint256 _value) public onlyAfterStart returns (bool) {\r\n        claim();\r\n        Investment storage _investment = investments[msg.sender];\r\n        uint256 _valueOld = _investment.value;\r\n        uint256 _totalWorthOld = totalWorth;\r\n        _investment.value = sub(_investment.value, _value);\r\n        totalWorth = sub(totalWorth, _value);\r\n        if (!msg.sender.send(_value)) {\r\n            _investment.value = _valueOld;\r\n            totalWorth = _totalWorthOld;\r\n            return false;\r\n        }\r\n        if (_investment.value == 0) {\r\n            delete investments[msg.sender];\r\n        }\r\n        Divest(msg.sender, _value);\r\n        return true;\r\n    }\r\n\r\n    function divest() public onlyAfterStart returns (bool) {\r\n        return divest(investments[msg.sender].value);\r\n    }\r\n\r\n    function claim() public onlyAfterStart returns (bool) {\r\n        Investment storage _investment = investments[msg.sender];\r\n        uint256 _term = sub(block.timestamp, _investment.date);\r\n        _investment.date = block.timestamp;\r\n        uint256 _coupon = mul(_investment.value, _term);\r\n        if (_coupon == 0) {\r\n            return false;\r\n        }\r\n        _mint(msg.sender, _coupon);\r\n        Coupon(msg.sender, _coupon, _investment.date);\r\n        return true;\r\n    }\r\n\r\n    function() payable {\r\n        invest();\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"purchase\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"updateOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beginTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethVest\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finish\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_beginTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_payer\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_mint\",\"type\":\"uint256\"}],\"name\":\"Purchase\",\"type\":\"event\"}]","ContractName":"EthVestICO","CompilerVersion":"v0.4.17+commit.bdeb9e52","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000005a1df880","Library":"","SwarmSource":"bzzr://1995790347ed5c7f6ac7617f16540344eac30ec7f67f0fcd2e4e11ebe078b30c"}]}