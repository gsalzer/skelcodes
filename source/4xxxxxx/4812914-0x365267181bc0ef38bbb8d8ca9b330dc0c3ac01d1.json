{"status":"1","message":"OK","result":[{"SourceCode":"/* version metahash ETH multi sign wallet 0.1.5 RC */\r\npragma solidity ^0.4.18;\r\n\r\ncontract mhethkeeper {\r\n\r\n    /* contract settings */\r\n\r\n    /* dynamic data section */\r\n    address public recipient;           /* recipient */\r\n    uint256 public amountToTransfer;        /* quantity */\r\n\r\n\r\n    /* static data section */\r\n    bool public isFinalized;            /* settings are finalized */\r\n    uint public minVotes;               /* minimum amount of votes */\r\n    uint public curVotes;               /* current amount of votes */\r\n    address public owner;               /* contract creator */\r\n    uint public mgrCount;               /* number of managers */\r\n    mapping (uint => bool) public mgrVotes;     /* managers votes */\r\n    mapping (uint => address) public mgrAddress; /* managers address */\r\n\r\n    /* constructor */\r\n    function mhethkeeper() public{\r\n        owner = msg.sender;\r\n        isFinalized = false;\r\n        curVotes = 0;\r\n        mgrCount = 0;\r\n        minVotes = 2;\r\n    }\r\n\r\n    /* add a wallet manager */\r\n    function AddManager(address _manager) public{\r\n        if (!isFinalized && (msg.sender == owner)){\r\n            mgrCount = mgrCount + 1;\r\n            mgrAddress[mgrCount] = _manager;\r\n            mgrVotes[mgrCount] = false;\r\n        } else {\r\n            revert();\r\n        }\r\n    }\r\n\r\n    /* finalize settings */\r\n    function Finalize() public{\r\n        if (!isFinalized && (msg.sender == owner)){\r\n            isFinalized = true;\r\n        } else {\r\n            revert();\r\n        }\r\n    }\r\n\r\n    /* set a new action and set a value of zero on a vote */\r\n    function SetAction(address _recipient, uint256 _amountToTransfer) public{\r\n        if (!isFinalized){\r\n            revert();\r\n        }\r\n\r\n        if (IsManager(msg.sender)){\r\n            if (this.balance < _amountToTransfer){\r\n                revert();\r\n            }\r\n            recipient = _recipient;\r\n            amountToTransfer = _amountToTransfer;\r\n            \r\n            for (uint i = 1; i <= mgrCount; i++) {\r\n                mgrVotes[i] = false;\r\n            }\r\n            curVotes = 0;\r\n        } else {\r\n            revert();\r\n        }\r\n    }\r\n\r\n    /* manager votes for the action */\r\n    function Approve(address _recipient, uint256 _amountToTransfer) public{\r\n        if (!isFinalized){\r\n            revert();\r\n        }\r\n        if (!((recipient == _recipient) && (amountToTransfer == _amountToTransfer))){\r\n            revert();\r\n        }\r\n\r\n        for (uint i = 1; i <= mgrCount; i++) {\r\n            if (mgrAddress[i] == msg.sender){\r\n                if (!mgrVotes[i]){\r\n                    mgrVotes[i] = true;\r\n                    curVotes = curVotes + 1;\r\n\r\n                    if (curVotes >= minVotes){\r\n                        recipient.transfer(amountToTransfer);\r\n                        NullSettings();\r\n                    } \r\n                } else {\r\n                    revert();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /* set a default payable function */\r\n    function () public payable {}\r\n    \r\n    /* set default empty settings  */\r\n    function NullSettings() private{\r\n        recipient = address(0x0);\r\n        amountToTransfer = 0;\r\n        curVotes = 0;\r\n        for (uint i = 1; i <= mgrCount; i++) {\r\n            mgrVotes[i] = false;\r\n        }\r\n\r\n    }\r\n\r\n    /* check that the sender is a manager */\r\n    function IsManager(address _manager) private view returns(bool){\r\n        for (uint i = 1; i <= mgrCount; i++) {\r\n            if (mgrAddress[i] == _manager){\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mgrAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mgrVotes\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"AddManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minVotes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"recipient\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isFinalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipient\",\"type\":\"address\"},{\"name\":\"_amountToTransfer\",\"type\":\"uint256\"}],\"name\":\"Approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"curVotes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipient\",\"type\":\"address\"},{\"name\":\"_amountToTransfer\",\"type\":\"uint256\"}],\"name\":\"SetAction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"amountToTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"Finalize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mgrCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"mhethkeeper","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://38737827335b83a99a5bc07c22c471f8ee71b1a43789865a3f8ee0b67dbee8ca"}]}