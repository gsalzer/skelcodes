{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.14;\r\n\r\ncontract Totalizeum {\r\n    enum MarketState { Initial, Resolving, Resolved, Unresolved }\r\n\r\n    struct Market {\r\n        MarketState state;\r\n        uint256 balance;\r\n        Resolve resolve;\r\n        Settings settings;\r\n        mapping (uint256 => Outcome) outcomes;\r\n    }\r\n\r\n    struct Outcome {\r\n        uint256 balance;\r\n        bool won;\r\n        mapping (address => uint256) bets;\r\n    }\r\n\r\n    struct Resolve {\r\n        uint256 remainingBalance;\r\n        uint256 winningBalance;\r\n        uint256 winningOutcomes;\r\n    }\r\n\r\n    struct Settings {\r\n        uint256 refundDelay;\r\n        uint256 share;\r\n    }\r\n\r\n    string public constant symbol = \"TOT\";\r\n\r\n    string public constant name = \"Totalizeum\";\r\n\r\n    uint8 public constant decimals = 18;\r\n\r\n    uint256 public constant totalSupply = (uint256(10) ** 6) *\r\n        (uint256(10) ** decimals);\r\n\r\n    Settings private defaultSettings = Settings(1 days, 980);\r\n\r\n    uint256 private constant sub = 1000000;\r\n\r\n    mapping (address => uint256) balances;\r\n\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n\r\n    mapping (address => mapping(uint256 => Market)) markets;\r\n\r\n    mapping (address => Settings) oracleSettings;\r\n\r\n    mapping (address => mapping (address => bool)) public successor;\r\n\r\n    uint256 public sellable = totalSupply;\r\n\r\n    address public owner;\r\n\r\n    function Totalizeum() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function balanceOf(address _owner) constant returns (uint256) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function transfer(address _to, uint256 _amount) returns (bool) {\r\n        require(msg.data.length >= (2 * 32) + 4);\r\n\r\n        if (balances[msg.sender] >= _amount &&\r\n            _amount > 0 &&\r\n            balances[_to] + _amount > balances[_to]) {\r\n\r\n            balances[msg.sender] -= _amount;\r\n            balances[_to] += _amount;\r\n\r\n            Transfer(msg.sender, _to, _amount);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function transferFrom(\r\n        address _from, address _to, uint256 _amount\r\n    ) returns (bool) {\r\n        require(msg.data.length >= (3 * 32) + 4);\r\n\r\n        if (balances[_from] >= _amount &&\r\n            _amount > 0 &&\r\n            allowed[_from][msg.sender] >= _amount &&\r\n            balances[_to] + _amount > balances[_to]) {\r\n\r\n            balances[_from] -= _amount;\r\n            allowed[_from][msg.sender] -= _amount;\r\n            balances[_to] += _amount;\r\n\r\n            Transfer(_from, _to, _amount);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function approve(address _spender, uint256 _amount) returns (bool) {\r\n        require((_amount == 0) || (allowed[msg.sender][_spender] == 0));\r\n\r\n        allowed[msg.sender][_spender] = _amount;\r\n\r\n        Approval(msg.sender, _spender, _amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(\r\n        address _owner, address _spender\r\n    ) constant returns (uint256) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    function bet(\r\n        address _oracle, uint256 _timestamp, uint256 _outcome, uint256 _amount\r\n    ) returns (bool) {\r\n        Market storage market = markets[_oracle][_timestamp];\r\n        Outcome storage outcome = market.outcomes[_outcome];\r\n\r\n        if (balances[msg.sender] >= _amount &&\r\n            _amount > 0 &&\r\n            now < _timestamp &&\r\n            market.state == MarketState.Initial &&\r\n            market.balance + _amount > market.balance &&\r\n            (market.balance + _amount) * sub / sub\r\n                == (market.balance + _amount) &&\r\n            outcome.balance + _amount > outcome.balance &&\r\n            outcome.bets[msg.sender] + _amount > outcome.bets[msg.sender]) {\r\n\r\n            if (market.balance == 0) {\r\n                Settings storage settings = oracleSettings[_oracle];\r\n\r\n                if (settings.refundDelay > 0) {\r\n\r\n                    market.settings = settings;\r\n                } else {\r\n                    market.settings = defaultSettings;\r\n                }\r\n            }\r\n\r\n            balances[msg.sender] -= _amount;\r\n            market.balance += _amount;\r\n            outcome.balance += _amount;\r\n            outcome.bets[msg.sender] += _amount;\r\n\r\n            Bet(msg.sender, _oracle, _timestamp, _outcome, _amount);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function resolve(\r\n        uint256 _timestamp, uint256 _outcome, bool _final\r\n    ) returns (bool) {\r\n        Market storage market = markets[msg.sender][_timestamp];\r\n        Outcome storage outcome = market.outcomes[_outcome];\r\n        Resolve storage _resolve = market.resolve;\r\n        Settings storage settings = market.settings;\r\n\r\n        if (market.state == MarketState.Initial) {\r\n\r\n            market.state = MarketState.Resolving;\r\n            _resolve.remainingBalance = market.balance;\r\n        }\r\n\r\n        if (market.state == MarketState.Resolving &&\r\n            now >= _timestamp &&\r\n            market.balance > 0) {\r\n\r\n            if (!outcome.won &&\r\n                outcome.balance > 0) {\r\n\r\n                outcome.won = true;\r\n                _resolve.winningBalance += outcome.balance;\r\n                _resolve.winningOutcomes += 1;\r\n            }\r\n\r\n            if (_final &&\r\n                _resolve.winningOutcomes > 0) {\r\n\r\n                uint256 share = market.balance - market.balance / 1000\r\n                    * settings.share;\r\n                \r\n                market.state = MarketState.Resolved;\r\n                _resolve.remainingBalance -= share;\r\n                balances[msg.sender] += share;\r\n            }\r\n\r\n            Resolved(msg.sender, _timestamp, _outcome, _final);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function withdraw(\r\n        address _oracle, uint256 _timestamp, uint256 _outcome\r\n    ) returns (bool) {\r\n        Market storage market = markets[_oracle][_timestamp];\r\n        Outcome storage outcome = market.outcomes[_outcome];\r\n        Resolve storage _resolve = market.resolve;\r\n        Settings storage settings = market.settings;\r\n\r\n        if (outcome.bets[msg.sender] > 0) {\r\n            uint256 amount = outcome.bets[msg.sender];\r\n\r\n            if (market.state == MarketState.Resolved &&\r\n                outcome.won) {\r\n\r\n                uint256 share = market.balance * sub / 1000 * settings.share\r\n                    / _resolve.winningOutcomes / outcome.balance * amount\r\n                    / sub;\r\n\r\n                delete outcome.bets[msg.sender];\r\n                _resolve.winningBalance -= amount;\r\n                _resolve.remainingBalance -= share;\r\n                balances[msg.sender] += share;\r\n\r\n                Withdrawal(msg.sender, _oracle, _timestamp, _outcome, share);\r\n\r\n                if (_resolve.winningBalance == 0) {\r\n                    balances[_oracle] += _resolve.remainingBalance;\r\n                    delete _resolve.remainingBalance;\r\n                }\r\n\r\n                return true;\r\n            } else if ((market.state == MarketState.Initial ||\r\n                    market.state == MarketState.Resolving ||\r\n                    market.state == MarketState.Unresolved) &&\r\n                now >= _timestamp + settings.refundDelay) {\r\n\r\n                market.state = MarketState.Unresolved;\r\n\r\n                delete outcome.bets[msg.sender];\r\n                balances[msg.sender] += amount;\r\n\r\n                Withdrawal(msg.sender, _oracle, _timestamp, _outcome, amount);\r\n\r\n                return true;\r\n            } else {\r\n                return false;\r\n            }\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function marketState(\r\n        address _oracle, uint256 _timestamp\r\n    ) constant returns (MarketState, uint256, uint256, uint256) {\r\n        Market storage market = markets[_oracle][_timestamp];\r\n        Resolve storage _resolve = market.resolve;\r\n\r\n        return (market.state, market.balance, _resolve.winningOutcomes,\r\n            _resolve.remainingBalance);\r\n    }\r\n\r\n    function outcomeState(\r\n        address _oracle, uint256 _timestamp, uint256 _outcome\r\n    ) constant returns (bool, uint256) {\r\n        Outcome storage outcome = markets[_oracle][_timestamp]\r\n            .outcomes[_outcome];\r\n\r\n        return (outcome.won, outcome.balance);\r\n    }\r\n\r\n    function setSettings(\r\n        uint256 _refundDelay, uint256 _share\r\n    ) returns (bool) {\r\n\r\n        if (_refundDelay > 0 &&\r\n            _refundDelay <= 28 days &&\r\n            _share <= 250) {\r\n\r\n            oracleSettings[msg.sender] = Settings(_refundDelay,\r\n                1000 - _share);\r\n            \r\n            SettingsSet(msg.sender, _refundDelay, _share);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function setSuccessor(address _successor) {\r\n        successor[_successor][msg.sender] = true;\r\n    }\r\n\r\n    function () payable {\r\n        uint256 amount = msg.value * 1000;\r\n\r\n        if (amount / 1000 == msg.value &&\r\n            amount <= sellable) {\r\n\r\n            owner.transfer(msg.value);\r\n            sellable -= amount;\r\n            balances[msg.sender] += amount;\r\n\r\n            Sale(msg.sender, amount);\r\n        } else {\r\n            revert();\r\n        }\r\n    }\r\n\r\n    function setOwner(address _owner) {\r\n        if (msg.sender == owner) {\r\n            owner = _owner;\r\n        }\r\n    }\r\n\r\n    event Transfer(address indexed _from, address indexed _to,\r\n        uint256 _amount);\r\n\r\n    event Approval(address indexed _owner, address indexed _spender,\r\n        uint256 _amount);\r\n\r\n    event Bet(address indexed _bettor, address indexed _oracle,\r\n        uint256 indexed _timestamp, uint256 _outcome, uint256 _amount);\r\n\r\n    event Resolved(address indexed _oracle, uint256 indexed _timestamp,\r\n        uint256 indexed _outcome, bool _final);\r\n\r\n    event Withdrawal(address indexed _bettor, address indexed _oracle,\r\n        uint256 indexed _timestamp, uint256 _outcome, uint256 _amount);\r\n\r\n    event Successor(address indexed _oracle, address indexed _successor);\r\n\r\n    event SettingsSet(address indexed _oracle, uint256 _refundDelay,\r\n        uint256 _share);\r\n\r\n    event Sale(address indexed _buyer, uint256 _amount);\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_successor\",\"type\":\"address\"}],\"name\":\"setSuccessor\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"name\":\"_outcome\",\"type\":\"uint256\"},{\"name\":\"_final\",\"type\":\"bool\"}],\"name\":\"resolve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_oracle\",\"type\":\"address\"},{\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"marketState\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_refundDelay\",\"type\":\"uint256\"},{\"name\":\"_share\",\"type\":\"uint256\"}],\"name\":\"setSettings\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_oracle\",\"type\":\"address\"},{\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"name\":\"_outcome\",\"type\":\"uint256\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"bet\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"successor\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellable\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_oracle\",\"type\":\"address\"},{\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"name\":\"_outcome\",\"type\":\"uint256\"}],\"name\":\"outcomeState\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_oracle\",\"type\":\"address\"},{\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"name\":\"_outcome\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_bettor\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_oracle\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_outcome\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Bet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_oracle\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_outcome\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_final\",\"type\":\"bool\"}],\"name\":\"Resolved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_bettor\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_oracle\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_outcome\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_oracle\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_successor\",\"type\":\"address\"}],\"name\":\"Successor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_oracle\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_refundDelay\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_share\",\"type\":\"uint256\"}],\"name\":\"SettingsSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Sale\",\"type\":\"event\"}]","ContractName":"Totalizeum","CompilerVersion":"v0.4.14+commit.c2215d46","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://75bbe6ff900be73e79ecde70d41415181cc429b337507c4b2ad50467bc99577d"}]}