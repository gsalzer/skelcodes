{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.11;\r\n\r\ncontract SafeMath {\r\n\r\n  function safeMul(uint a, uint b) internal returns (uint) {\r\n    uint c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n  function safeSub(uint a, uint b) internal returns (uint) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n  function safeAdd(uint a, uint b) internal returns (uint) {\r\n    uint c = a + b;\r\n    assert(c>=a && c>=b);\r\n    return c;\r\n  }\r\n\r\n  // mitigate short address attack\r\n  // thanks to https://github.com/numerai/contract/blob/c182465f82e50ced8dacb3977ec374a892f5fa8c/contracts/Safe.sol#L30-L34.\r\n  // TODO: doublecheck implication of >= compared to ==\r\n  modifier onlyPayloadSize(uint numWords) {\r\n     assert(msg.data.length >= numWords * 32 + 4);\r\n     _;\r\n  }\r\n\r\n}\r\n\r\n\r\ncontract Token { // ERC20 standard\r\n\r\n    function balanceOf(address _owner) constant returns (uint256 balance);\r\n    function transfer(address _to, uint256 _value) returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\r\n    function approve(address _spender, uint256 _value) returns (bool success);\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n}\r\n\r\n\r\ncontract StandardToken is Token, SafeMath {\r\n\r\n    uint256 public totalSupply;\r\n\r\n    // TODO: update tests to expect throw\r\n    function transfer(address _to, uint256 _value) onlyPayloadSize(2) returns (bool success) {\r\n        require(_to != address(0));\r\n        require(balances[msg.sender] >= _value && _value > 0);\r\n        balances[msg.sender] = safeSub(balances[msg.sender], _value);\r\n        balances[_to] = safeAdd(balances[_to], _value);\r\n        Transfer(msg.sender, _to, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n    // TODO: update tests to expect throw\r\n    function transferFrom(address _from, address _to, uint256 _value) onlyPayloadSize(3) returns (bool success) {\r\n        require(_to != address(0));\r\n        require(balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0);\r\n        balances[_from] = safeSub(balances[_from], _value);\r\n        balances[_to] = safeAdd(balances[_to], _value);\r\n        allowed[_from][msg.sender] = safeSub(allowed[_from][msg.sender], _value);\r\n        Transfer(_from, _to, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    // To change the approve amount you first have to reduce the addresses'\r\n    //  allowance to zero by calling 'approve(_spender, 0)' if it is not\r\n    //  already 0 to mitigate the race condition described here:\r\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    function approve(address _spender, uint256 _value) onlyPayloadSize(2) returns (bool success) {\r\n        require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n    function changeApproval(address _spender, uint256 _oldValue, uint256 _newValue) onlyPayloadSize(3) returns (bool success) {\r\n        require(allowed[msg.sender][_spender] == _oldValue);\r\n        allowed[msg.sender][_spender] = _newValue;\r\n        Approval(msg.sender, _spender, _newValue);\r\n\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n      return allowed[_owner][_spender];\r\n    }\r\n\r\n    mapping (address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n\r\n}\r\n\r\n\r\ncontract C20 is StandardToken {\r\n\r\n    // FIELDS\r\n\r\n    string public name = \"Crypto20\";\r\n    string public symbol = \"C20\";\r\n    uint256 public decimals = 18;\r\n    string public version = \"9.0\";\r\n\r\n    uint256 public tokenCap = 86206896 * 10**18;\r\n\r\n    // crowdsale parameters\r\n    uint256 public fundingStartBlock;\r\n    uint256 public fundingEndBlock;\r\n\r\n    // vesting fields\r\n    address public vestingContract;\r\n    bool private vestingSet = false;\r\n\r\n    // root control\r\n    address public fundWallet;\r\n    // control of liquidity and limited control of updatePrice\r\n    address public controlWallet;\r\n    // time to wait between controlWallet price updates\r\n    uint256 public waitTime = 5 hours;\r\n\r\n    // fundWallet controlled state variables\r\n    // halted: halt buying due to emergency, tradeable: signal that assets have been acquired\r\n    bool public halted = false;\r\n    bool public tradeable = false;\r\n\r\n    // -- totalSupply defined in StandardToken\r\n    // -- mapping to token balances done in StandardToken\r\n\r\n    uint256 public previousUpdateTime = 0;\r\n    Price public currentPrice;\r\n    uint256 public minAmount = 0.04 ether;\r\n\r\n    // map participant address to a withdrawal request\r\n    mapping (address => Withdrawal) public withdrawals;\r\n    // maps previousUpdateTime to the next price\r\n    mapping (uint256 => Price) public prices;\r\n    // maps addresses\r\n    mapping (address => bool) public whitelist;\r\n\r\n    // TYPES\r\n\r\n    struct Price { // tokensPerEth\r\n        uint256 numerator;\r\n        uint256 denominator;\r\n    }\r\n\r\n    struct Withdrawal {\r\n        uint256 tokens;\r\n        uint256 time; // time for each withdrawal is set to the previousUpdateTime\r\n    }\r\n\r\n    // EVENTS\r\n\r\n    event Buy(address indexed participant, address indexed beneficiary, uint256 ethValue, uint256 amountTokens);\r\n    event AllocatePresale(address indexed participant, uint256 amountTokens);\r\n    event Whitelist(address indexed participant);\r\n    event PriceUpdate(uint256 numerator, uint256 denominator);\r\n    event AddLiquidity(uint256 ethAmount);\r\n    event RemoveLiquidity(uint256 ethAmount);\r\n    event WithdrawRequest(address indexed participant, uint256 amountTokens);\r\n    event Withdraw(address indexed participant, uint256 amountTokens, uint256 etherAmount);\r\n\r\n    // MODIFIERS\r\n\r\n    modifier isTradeable { // exempt vestingContract and fundWallet to allow dev allocations\r\n        require(tradeable || msg.sender == fundWallet || msg.sender == vestingContract);\r\n        _;\r\n    }\r\n\r\n    modifier onlyWhitelist {\r\n        require(whitelist[msg.sender]);\r\n        _;\r\n    }\r\n\r\n    modifier onlyFundWallet {\r\n        require(msg.sender == fundWallet);\r\n        _;\r\n    }\r\n\r\n    modifier onlyManagingWallets {\r\n        require(msg.sender == controlWallet || msg.sender == fundWallet);\r\n        _;\r\n    }\r\n\r\n    modifier only_if_controlWallet {\r\n        if (msg.sender == controlWallet) _;\r\n    }\r\n    modifier require_waited {\r\n        require(safeSub(now, waitTime) >= previousUpdateTime);\r\n        _;\r\n    }\r\n    modifier only_if_increase (uint256 newNumerator) {\r\n        if (newNumerator > currentPrice.numerator) _;\r\n    }\r\n\r\n    // CONSTRUCTOR\r\n\r\n    function C20(address controlWalletInput, uint256 priceNumeratorInput, uint256 startBlockInput, uint256 endBlockInput) {\r\n        require(controlWalletInput != address(0));\r\n        require(priceNumeratorInput > 0);\r\n        require(endBlockInput > startBlockInput);\r\n        fundWallet = msg.sender;\r\n        controlWallet = controlWalletInput;\r\n        whitelist[fundWallet] = true;\r\n        whitelist[controlWallet] = true;\r\n        currentPrice = Price(priceNumeratorInput, 1000); // 1 token = 1 usd at ICO start\r\n        fundingStartBlock = startBlockInput;\r\n        fundingEndBlock = endBlockInput;\r\n        previousUpdateTime = now;\r\n    }\r\n\r\n    // METHODS\r\n\r\n    function setVestingContract(address vestingContractInput) external onlyFundWallet {\r\n        require(vestingContractInput != address(0));\r\n        vestingContract = vestingContractInput;\r\n        whitelist[vestingContract] = true;\r\n        vestingSet = true;\r\n    }\r\n\r\n    // allows controlWallet to update the price within a time contstraint, allows fundWallet complete control\r\n    function updatePrice(uint256 newNumerator) external onlyManagingWallets {\r\n        require(newNumerator > 0);\r\n        require_limited_change(newNumerator);\r\n        // either controlWallet command is compliant or transaction came from fundWallet\r\n        currentPrice.numerator = newNumerator;\r\n        // maps time to new Price (if not during ICO)\r\n        prices[previousUpdateTime] = currentPrice;\r\n        previousUpdateTime = now;\r\n        PriceUpdate(newNumerator, currentPrice.denominator);\r\n    }\r\n\r\n    function require_limited_change (uint256 newNumerator)\r\n        private\r\n        only_if_controlWallet\r\n        require_waited\r\n        only_if_increase(newNumerator)\r\n    {\r\n        uint256 percentage_diff = 0;\r\n        percentage_diff = safeMul(newNumerator, 100) / currentPrice.numerator;\r\n        percentage_diff = safeSub(percentage_diff, 100);\r\n        // controlWallet can only increase price by max 20% and only every waitTime\r\n        require(percentage_diff <= 20);\r\n    }\r\n\r\n    function updatePriceDenominator(uint256 newDenominator) external onlyFundWallet {\r\n        require(block.number > fundingEndBlock);\r\n        require(newDenominator > 0);\r\n        currentPrice.denominator = newDenominator;\r\n        // maps time to new Price\r\n        prices[previousUpdateTime] = currentPrice;\r\n        previousUpdateTime = now;\r\n        PriceUpdate(currentPrice.numerator, newDenominator);\r\n    }\r\n\r\n    function allocateTokens(address participant, uint256 amountTokens) private {\r\n        require(vestingSet);\r\n        // 13% of total allocated for PR, Marketing, Team, Advisors\r\n        uint256 developmentAllocation = safeMul(amountTokens, 14942528735632185) / 100000000000000000;\r\n        // check that token cap is not exceeded\r\n        uint256 newTokens = safeAdd(amountTokens, developmentAllocation);\r\n        require(safeAdd(totalSupply, newTokens) <= tokenCap);\r\n        // increase token supply, assign tokens to participant\r\n        totalSupply = safeAdd(totalSupply, newTokens);\r\n        balances[participant] = safeAdd(balances[participant], amountTokens);\r\n        balances[vestingContract] = safeAdd(balances[vestingContract], developmentAllocation);\r\n    }\r\n\r\n    function allocatePresaleTokens(address participant, uint amountTokens) external onlyFundWallet {\r\n        require(block.number < fundingEndBlock);\r\n        require(participant != address(0));\r\n        whitelist[participant] = true; // automatically whitelist accepted presale\r\n        allocateTokens(participant, amountTokens);\r\n        Whitelist(participant);\r\n        AllocatePresale(participant, amountTokens);\r\n    }\r\n\r\n    function verifyParticipant(address participant) external onlyManagingWallets {\r\n        whitelist[participant] = true;\r\n        Whitelist(participant);\r\n    }\r\n\r\n    function buy() external payable {\r\n        buyTo(msg.sender);\r\n    }\r\n\r\n    function buyTo(address participant) public payable onlyWhitelist {\r\n        require(!halted);\r\n        require(participant != address(0));\r\n        require(msg.value >= minAmount);\r\n        require(block.number >= fundingStartBlock && block.number < fundingEndBlock);\r\n        uint256 icoDenominator = icoDenominatorPrice();\r\n        uint256 tokensToBuy = safeMul(msg.value, currentPrice.numerator) / icoDenominator;\r\n        allocateTokens(participant, tokensToBuy);\r\n        // send ether to fundWallet\r\n        fundWallet.transfer(msg.value);\r\n        Buy(msg.sender, participant, msg.value, tokensToBuy);\r\n    }\r\n\r\n    // time based on blocknumbers, assuming a blocktime of 30s\r\n    function icoDenominatorPrice() public constant returns (uint256) {\r\n        uint256 icoDuration = safeSub(block.number, fundingStartBlock);\r\n        uint256 denominator;\r\n        if (icoDuration < 2880) { // #blocks = 24*60*60/30 = 2880\r\n            return currentPrice.denominator;\r\n        } else if (icoDuration < 80640 ) { // #blocks = 4*7*24*60*60/30 = 80640\r\n            denominator = safeMul(currentPrice.denominator, 105) / 100;\r\n            return denominator;\r\n        } else {\r\n            denominator = safeMul(currentPrice.denominator, 110) / 100;\r\n            return denominator;\r\n        }\r\n    }\r\n\r\n    function requestWithdrawal(uint256 amountTokensToWithdraw) external isTradeable onlyWhitelist {\r\n        require(block.number > fundingEndBlock);\r\n        require(amountTokensToWithdraw > 0);\r\n        address participant = msg.sender;\r\n        require(balanceOf(participant) >= amountTokensToWithdraw);\r\n        require(withdrawals[participant].tokens == 0); // participant cannot have outstanding withdrawals\r\n        balances[participant] = safeSub(balances[participant], amountTokensToWithdraw);\r\n        withdrawals[participant] = Withdrawal({tokens: amountTokensToWithdraw, time: previousUpdateTime});\r\n        WithdrawRequest(participant, amountTokensToWithdraw);\r\n    }\r\n\r\n    function withdraw() external {\r\n        address participant = msg.sender;\r\n        uint256 tokens = withdrawals[participant].tokens;\r\n        require(tokens > 0); // participant must have requested a withdrawal\r\n        uint256 requestTime = withdrawals[participant].time;\r\n        // obtain the next price that was set after the request\r\n        Price price = prices[requestTime];\r\n        require(price.numerator > 0); // price must have been set\r\n        uint256 withdrawValue = safeMul(tokens, price.denominator) / price.numerator;\r\n        // if contract ethbal > then send + transfer tokens to fundWallet, otherwise give tokens back\r\n        withdrawals[participant].tokens = 0;\r\n        if (this.balance >= withdrawValue)\r\n            enact_withdrawal_greater_equal(participant, withdrawValue, tokens);\r\n        else\r\n            enact_withdrawal_less(participant, withdrawValue, tokens);\r\n    }\r\n\r\n    function enact_withdrawal_greater_equal(address participant, uint256 withdrawValue, uint256 tokens)\r\n        private\r\n    {\r\n        assert(this.balance >= withdrawValue);\r\n        balances[fundWallet] = safeAdd(balances[fundWallet], tokens);\r\n        participant.transfer(withdrawValue);\r\n        Withdraw(participant, tokens, withdrawValue);\r\n    }\r\n    function enact_withdrawal_less(address participant, uint256 withdrawValue, uint256 tokens)\r\n        private\r\n    {\r\n        assert(this.balance < withdrawValue);\r\n        balances[participant] = safeAdd(balances[participant], tokens);\r\n        Withdraw(participant, tokens, 0); // indicate a failed withdrawal\r\n    }\r\n\r\n\r\n    function checkWithdrawValue(uint256 amountTokensToWithdraw) constant returns (uint256 etherValue) {\r\n        require(amountTokensToWithdraw > 0);\r\n        require(balanceOf(msg.sender) >= amountTokensToWithdraw);\r\n        uint256 withdrawValue = safeMul(amountTokensToWithdraw, currentPrice.denominator) / currentPrice.numerator;\r\n        require(this.balance >= withdrawValue);\r\n        return withdrawValue;\r\n    }\r\n\r\n    // allow fundWallet or controlWallet to add ether to contract\r\n    function addLiquidity() external onlyManagingWallets payable {\r\n        require(msg.value > 0);\r\n        AddLiquidity(msg.value);\r\n    }\r\n\r\n    // allow fundWallet to remove ether from contract\r\n    function removeLiquidity(uint256 amount) external onlyManagingWallets {\r\n        require(amount <= this.balance);\r\n        fundWallet.transfer(amount);\r\n        RemoveLiquidity(amount);\r\n    }\r\n\r\n    function changeFundWallet(address newFundWallet) external onlyFundWallet {\r\n        require(newFundWallet != address(0));\r\n        fundWallet = newFundWallet;\r\n    }\r\n\r\n    function changeControlWallet(address newControlWallet) external onlyFundWallet {\r\n        require(newControlWallet != address(0));\r\n        controlWallet = newControlWallet;\r\n    }\r\n\r\n    function changeWaitTime(uint256 newWaitTime) external onlyFundWallet {\r\n        waitTime = newWaitTime;\r\n    }\r\n\r\n    function updateFundingStartBlock(uint256 newFundingStartBlock) external onlyFundWallet {\r\n        require(block.number < fundingStartBlock);\r\n        require(block.number < newFundingStartBlock);\r\n        fundingStartBlock = newFundingStartBlock;\r\n    }\r\n\r\n    function updateFundingEndBlock(uint256 newFundingEndBlock) external onlyFundWallet {\r\n        require(block.number < fundingEndBlock);\r\n        require(block.number < newFundingEndBlock);\r\n        fundingEndBlock = newFundingEndBlock;\r\n    }\r\n\r\n    function halt() external onlyFundWallet {\r\n        halted = true;\r\n    }\r\n    function unhalt() external onlyFundWallet {\r\n        halted = false;\r\n    }\r\n\r\n    function enableTrading() external onlyFundWallet {\r\n        require(block.number > fundingEndBlock);\r\n        tradeable = true;\r\n    }\r\n\r\n    // fallback function\r\n    function() payable {\r\n        require(tx.origin == msg.sender);\r\n        buyTo(msg.sender);\r\n    }\r\n\r\n    function claimTokens(address _token) external onlyFundWallet {\r\n        require(_token != address(0));\r\n        Token token = Token(_token);\r\n        uint256 balance = token.balanceOf(this);\r\n        token.transfer(fundWallet, balance);\r\n     }\r\n\r\n    // prevent transfers until trading allowed\r\n    function transfer(address _to, uint256 _value) isTradeable returns (bool success) {\r\n        return super.transfer(_to, _value);\r\n    }\r\n    function transferFrom(address _from, address _to, uint256 _value) isTradeable returns (bool success) {\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newWaitTime\",\"type\":\"uint256\"}],\"name\":\"changeWaitTime\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newFundingStartBlock\",\"type\":\"uint256\"}],\"name\":\"updateFundingStartBlock\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"previousUpdateTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newControlWallet\",\"type\":\"address\"}],\"name\":\"changeControlWallet\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vestingContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"halt\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"participant\",\"type\":\"address\"}],\"name\":\"verifyParticipant\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newFundWallet\",\"type\":\"address\"}],\"name\":\"changeFundWallet\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"vestingContractInput\",\"type\":\"address\"}],\"name\":\"setVestingContract\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"withdrawals\",\"outputs\":[{\"name\":\"tokens\",\"type\":\"uint256\"},{\"name\":\"time\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"controlWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"enableTrading\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newNumerator\",\"type\":\"uint256\"}],\"name\":\"updatePrice\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"amountTokensToWithdraw\",\"type\":\"uint256\"}],\"name\":\"checkWithdrawValue\",\"outputs\":[{\"name\":\"etherValue\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"participant\",\"type\":\"address\"},{\"name\":\"amountTokens\",\"type\":\"uint256\"}],\"name\":\"allocatePresaleTokens\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundingEndBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_oldValue\",\"type\":\"uint256\"},{\"name\":\"_newValue\",\"type\":\"uint256\"}],\"name\":\"changeApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentPrice\",\"outputs\":[{\"name\":\"numerator\",\"type\":\"uint256\"},{\"name\":\"denominator\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amountTokensToWithdraw\",\"type\":\"uint256\"}],\"name\":\"requestWithdrawal\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"halted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"prices\",\"outputs\":[{\"name\":\"numerator\",\"type\":\"uint256\"},{\"name\":\"denominator\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unhalt\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"waitTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundingStartBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newDenominator\",\"type\":\"uint256\"}],\"name\":\"updatePriceDenominator\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"participant\",\"type\":\"address\"}],\"name\":\"buyTo\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"claimTokens\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newFundingEndBlock\",\"type\":\"uint256\"}],\"name\":\"updateFundingEndBlock\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"addLiquidity\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tradeable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoDenominatorPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"controlWalletInput\",\"type\":\"address\"},{\"name\":\"priceNumeratorInput\",\"type\":\"uint256\"},{\"name\":\"startBlockInput\",\"type\":\"uint256\"},{\"name\":\"endBlockInput\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"participant\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ethValue\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amountTokens\",\"type\":\"uint256\"}],\"name\":\"Buy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"participant\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amountTokens\",\"type\":\"uint256\"}],\"name\":\"AllocatePresale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"participant\",\"type\":\"address\"}],\"name\":\"Whitelist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"numerator\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"denominator\",\"type\":\"uint256\"}],\"name\":\"PriceUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ethAmount\",\"type\":\"uint256\"}],\"name\":\"AddLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ethAmount\",\"type\":\"uint256\"}],\"name\":\"RemoveLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"participant\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amountTokens\",\"type\":\"uint256\"}],\"name\":\"WithdrawRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"participant\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amountTokens\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"etherAmount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"C20","CompilerVersion":"v0.4.11+commit.68ef5810","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000015756c7f329e3e00ab15d71f09655bd8df14b7fa0000000000000000000000000000000000000000000000000000000000053020000000000000000000000000000000000000000000000000000000000042af90000000000000000000000000000000000000000000000000000000000044ab60","Library":"","SwarmSource":"bzzr://a1845868b1371865b636a79c2503060ea66461cd206d79eb74da145b034d97af"}]}