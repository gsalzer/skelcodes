{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.19;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Mintable token\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\r\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n */\r\ncontract MintableToken is StandardToken, Ownable {\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\r\n    totalSupply = totalSupply.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    Mint(_to, _amount);\r\n    Transfer(address(0), _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() onlyOwner canMint public returns (bool) {\r\n    mintingFinished = true;\r\n    MintFinished();\r\n    return true;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title FemaleToken\r\n * @dev The main token contract\r\n */\r\ncontract FemaleToken is MintableToken {\r\n\r\n  string public name = \"Female Token\";\r\n  string public symbol = \"FEM\";\r\n  uint public decimals = 18;\r\n\r\n  bool public tradingStarted = false;\r\n\r\n  /**\r\n   * @dev modifier that throws if trading has not started yet\r\n   */\r\n  modifier hasStartedTrading() {\r\n    require(tradingStarted);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the owner to enable the trading. This can not be undone\r\n   */\r\n  function startTrading() public onlyOwner {\r\n    tradingStarted = true;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows anyone to transfer the TEST tokens once trading has started\r\n   * @param _to the recipient address of the tokens. \r\n   * @param _value number of tokens to be transfered. \r\n   */\r\n  function transfer(address _to, uint _value) public hasStartedTrading returns (bool) {\r\n    super.transfer(_to, _value);\r\n  }\r\n\r\n   /**\r\n   * @dev Allows anyone to transfer the TEST tokens once trading has started\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint the amout of tokens to be transfered\r\n   */\r\n  function transferFrom(address _from, address _to, uint _value) public hasStartedTrading returns (bool) {\r\n    super.transferFrom(_from, _to, _value);\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title FemaleTokenSale\r\n * @dev The main Female token sale contract\r\n */\r\ncontract FemaleTokenSale is Ownable {\r\n  using SafeMath for uint;\r\n  event TokenSold(address recipient, uint ether_amount, uint pay_amount);\r\n  event AuthorizedCreate(address recipient, uint pay_amount);\r\n  event MainSaleClosed();\r\n\r\n  FemaleToken public token = new FemaleToken();\r\n\r\n  address public multisigVault = 0xB80F274a7596D4Dc995f032e24Cb55B3902399F5;\r\n\r\n  uint hardcap = 100000 ether;\r\n  uint public rate = 1000; // 1ETH = 1000FEM\r\n  uint restrictedPercent = 20;\r\n\r\n  uint public fiatDeposits = 0;\r\n  uint public startTime = 1514764800; //Mon, 01 Jan 2018 00:00:00 GMT\r\n  uint public endTime = 1517356800; // Wed, 31 Jan 2018 00:00:00 GMT\r\n  uint public bonusTime = 1518220800; // Sat, 10 Feb 2018 00:00:00 GMT\r\n  //Start of token transfer allowance -  Sun, 11 Feb 2018 \r\n  mapping(address => bool) femalestate;\r\n  \r\n  /**\r\n   * @dev modifier to allow token creation only when the sale IS ON\r\n   */\r\n  modifier saleIsOn() {\r\n    require(now > startTime && now < endTime);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev modifier to allow token creation only when the hardcap has not been reached\r\n   */\r\n  modifier isUnderHardCap() {\r\n    require(multisigVault.balance + fiatDeposits <= hardcap);\r\n    _;\r\n  }\r\n /**\r\n * @dev Function for calculation bonus tokens\r\n * bonus 1% for each 100 FEM batch per buy (up to max 50% bonus)\r\n * @param initwei - amount of donation in wei\r\n */\r\n function bonusRate(uint initwei) internal view returns (uint){\r\n\tuint bonRate;\r\n\tuint calcRate = initwei.div(100000000000000000);\r\n\tif (calcRate > 50 ) bonRate = 150 * rate / 100;\r\n\telse if (calcRate <1) bonRate = rate;\r\n\telse {\r\n\t\tbonRate = calcRate.mul(rate) / 100;\r\n\t\tbonRate += rate;\r\n\t}\r\n\treturn bonRate;\r\n  }\r\n   \r\n  /**\r\n   * @dev Allows anyone to create tokens by depositing ether.\r\n   * @param recipient the recipient to receive tokens. \r\n   */\r\n  function createTokens(address recipient) public isUnderHardCap saleIsOn payable {\r\n    uint256 weiAmount = msg.value;\r\n\tuint bonusTokensRate = bonusRate(weiAmount);\r\n\tuint tokens = bonusTokensRate.mul(weiAmount);\r\n\ttoken.mint(recipient, tokens);\r\n    require(multisigVault.send(msg.value));\r\n    TokenSold(recipient, msg.value, tokens);\r\n\tfemalestate[msg.sender]= false;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows create tokens. This is used for fiat deposits.\r\n   * @param recipient the recipient to receive tokens.\r\n   * @param fiatdeposit - amount of deposit in ETH. \r\n   */\r\n  function altCreateTokens(address recipient, uint fiatdeposit) public isUnderHardCap saleIsOn onlyOwner {\r\n    require(recipient != address(0));\r\n\trequire(fiatdeposit > 0);\r\n\tfiatDeposits += fiatdeposit;\r\n\tuint bonusTokensRate = bonusRate(fiatdeposit);\r\n\tuint tokens = bonusTokensRate.mul(fiatdeposit);\r\n\ttoken.mint(recipient, tokens);\r\n    AuthorizedCreate(recipient, tokens);\r\n\tfemalestate[recipient]= false;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the owner to finish the minting. This will create the \r\n   * restricted tokens and then close the minting.\r\n   * Then the ownership of the FEM token contract is transfered to this owner.\r\n   * Also it allows token transfer function.\r\n   */\r\n  function finishMinting() public onlyOwner {\r\n    require(now > bonusTime);\r\n\tuint issuedTokenSupply = token.totalSupply();\r\n    uint restrictedTokens = issuedTokenSupply.mul(restrictedPercent).div(100 - restrictedPercent);\r\n    token.mint(multisigVault, restrictedTokens);\r\n    token.finishMinting();\r\n\ttoken.startTrading();\r\n    token.transferOwnership(owner);\r\n    MainSaleClosed();\r\n  }\r\n\r\n  /**\r\n  * @dev Allows the owner to double tokens of female investors.\r\n  * @param adr - address of female investor.\r\n  * femalestate allows to set double tokens only once per investor.\r\n  * doublebonus can only be set during 10 days period after ICO end.\r\n  */\r\n  \r\n  function doubleBonus(address adr) public onlyOwner {\r\n\trequire (now > endTime && now < bonusTime);\r\n\tif (!femalestate[adr]) {\r\n\t\tfemalestate[adr]= true;\r\n\t\tuint unittoken = token.balanceOf(adr);\r\n\t\tuint doubletoken = unittoken.mul(2);\r\n\t\tif (unittoken < doubletoken) {token.mint(adr, unittoken);}\r\n\t}\r\n  }\r\n  \r\n  /**\r\n  * @dev Same as doubleBonus - just for array of addresses.\r\n  * As was said before - this function works only during 10 days after ICO ends.\r\n  */ \r\n  \r\n   function doubleBonusArray(address[] adr) public onlyOwner {\r\n\tuint i = 0;\r\n\twhile (i < adr.length) {\r\n\t\tdoubleBonus(adr[i]);\r\n\t\ti++;\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * @dev Allows the owner to transfer ERC20 tokens to the multi sig vault\r\n   * @param _token the contract address of the ERC20 contract\r\n   */\r\n  function retrieveTokens(address _token) public onlyOwner {\r\n    ERC20 alttoken = ERC20(_token);\r\n    alttoken.transfer(multisigVault, alttoken.balanceOf(this));\r\n  }\r\n\r\n  /**\r\n   * @dev Fallback function which receives ether and created the appropriate number of tokens for the \r\n   * msg.sender.\r\n   */\r\n  function() external payable {\r\n    createTokens(msg.sender);\r\n  }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"fiatDeposits\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"adr\",\"type\":\"address[]\"}],\"name\":\"doubleBonusArray\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"fiatdeposit\",\"type\":\"uint256\"}],\"name\":\"altCreateTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"retrieveTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"createTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"multisigVault\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"doubleBonus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ether_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"pay_amount\",\"type\":\"uint256\"}],\"name\":\"TokenSold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"pay_amount\",\"type\":\"uint256\"}],\"name\":\"AuthorizedCreate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MainSaleClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"FemaleTokenSale","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://2e023f949828e51de4a507fd7392b90819a6426b07538897456e4457325aaadb"}]}