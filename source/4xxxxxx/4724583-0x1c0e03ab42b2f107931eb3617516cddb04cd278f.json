{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n// File: contracts/zeppelin-solidity-1.4/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/zeppelin-solidity-1.4/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: contracts/BRDLockup.sol\r\n\r\n/**\r\n * Contract BRDLockup keeps track of a vesting schedule for pre-sold tokens.\r\n * Pre-sold tokens are rewarded up to `numIntervals` times separated by an\r\n * `interval` of time. An equal amount of tokens (`allocation` divided by `numIntervals`)\r\n * is marked for reward each `interval`.\r\n *\r\n * The owner of the contract will call processInterval() which will\r\n * update the allocation state. The owner of the contract should then\r\n * read the allocation data and reward the beneficiaries.\r\n */\r\ncontract BRDLockup is Ownable {\r\n  using SafeMath for uint256;\r\n\r\n  // Allocation stores info about how many tokens to reward a beneficiary account\r\n  struct Allocation {\r\n    address beneficiary;      // account to receive rewards\r\n    uint256 allocation;       // total allocated tokens\r\n    uint256 remainingBalance; // remaining balance after the current interval\r\n    uint256 currentInterval;  // the current interval for the given reward\r\n    uint256 currentReward;    // amount to be rewarded during the current interval\r\n  }\r\n\r\n  // the allocation state\r\n  Allocation[] public allocations;\r\n\r\n  // the date at which allocations begin unlocking\r\n  uint256 public unlockDate;\r\n\r\n  // the current unlock interval\r\n  uint256 public currentInterval;\r\n\r\n  // the interval at which allocations will be rewarded\r\n  uint256 public intervalDuration;\r\n\r\n  // the number of total reward intervals, zero indexed\r\n  uint256 public numIntervals;\r\n\r\n  event Lock(address indexed _to, uint256 _amount);\r\n\r\n  event Unlock(address indexed _to, uint256 _amount);\r\n\r\n  // constructor\r\n  // @param _crowdsaleEndDate - the date the crowdsale ends\r\n  function BRDLockup(uint256 _crowdsaleEndDate, uint256 _numIntervals, uint256 _intervalDuration)  public {\r\n    unlockDate = _crowdsaleEndDate;\r\n    numIntervals = _numIntervals;\r\n    intervalDuration = _intervalDuration;\r\n    currentInterval = 0;\r\n  }\r\n\r\n  // update the allocation storage remaining balances\r\n  function processInterval() onlyOwner public returns (bool _shouldProcessRewards) {\r\n    // ensure the time interval is correct\r\n    bool _correctInterval = now >= unlockDate && now.sub(unlockDate) > currentInterval.mul(intervalDuration);\r\n    bool _validInterval = currentInterval < numIntervals;\r\n    if (!_correctInterval || !_validInterval)\r\n      return false;\r\n\r\n    // advance the current interval\r\n    currentInterval = currentInterval.add(1);\r\n\r\n    // number of iterations to read all allocations\r\n    uint _allocationsIndex = allocations.length;\r\n\r\n    // loop through every allocation\r\n    for (uint _i = 0; _i < _allocationsIndex; _i++) {\r\n      // the current reward for the allocation at index `i`\r\n      uint256 _amountToReward;\r\n\r\n      // if we are at the last interval, the reward amount is the entire remaining balance\r\n      if (currentInterval == numIntervals) {\r\n        _amountToReward = allocations[_i].remainingBalance;\r\n      } else {\r\n        // otherwise the reward amount is the total allocation divided by the number of intervals\r\n        _amountToReward = allocations[_i].allocation.div(numIntervals);\r\n      }\r\n      // update the allocation storage\r\n      allocations[_i].currentReward = _amountToReward;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  // the total number of allocations\r\n  function numAllocations() constant public returns (uint) {\r\n    return allocations.length;\r\n  }\r\n\r\n  // the amount allocated for beneficiary at `_index`\r\n  function allocationAmount(uint _index) constant public returns (uint256) {\r\n    return allocations[_index].allocation;\r\n  }\r\n\r\n  // reward the beneficiary at `_index`\r\n  function unlock(uint _index) onlyOwner public returns (bool _shouldReward, address _beneficiary, uint256 _rewardAmount) {\r\n    // ensure the beneficiary is not rewarded twice during the same interval\r\n    if (allocations[_index].currentInterval < currentInterval) {\r\n      // record the currentInterval so the above check is useful\r\n      allocations[_index].currentInterval = currentInterval;\r\n      // subtract the reward from their remaining balance\r\n      allocations[_index].remainingBalance = allocations[_index].remainingBalance.sub(allocations[_index].currentReward);\r\n      // emit event\r\n      Unlock(allocations[_index].beneficiary, allocations[_index].currentReward);\r\n      // return value\r\n      _shouldReward = true;\r\n    } else {\r\n      // return value\r\n      _shouldReward = false;\r\n    }\r\n\r\n    // return values\r\n    _rewardAmount = allocations[_index].currentReward;\r\n    _beneficiary = allocations[_index].beneficiary;\r\n  }\r\n\r\n  // add a new allocation to the lockup\r\n  function pushAllocation(address _beneficiary, uint256 _numTokens) onlyOwner public {\r\n    require(now < unlockDate);\r\n    allocations.push(\r\n      Allocation(\r\n        _beneficiary,\r\n        _numTokens,\r\n        _numTokens,\r\n        0,\r\n        0\r\n      )\r\n    );\r\n    Lock(_beneficiary, _numTokens);\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allocations\",\"outputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"},{\"name\":\"allocation\",\"type\":\"uint256\"},{\"name\":\"remainingBalance\",\"type\":\"uint256\"},{\"name\":\"currentInterval\",\"type\":\"uint256\"},{\"name\":\"currentReward\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"intervalDuration\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentInterval\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numAllocations\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"unlock\",\"outputs\":[{\"name\":\"_shouldReward\",\"type\":\"bool\"},{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_rewardAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"unlockDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_numTokens\",\"type\":\"uint256\"}],\"name\":\"pushAllocation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"allocationAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numIntervals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"processInterval\",\"outputs\":[{\"name\":\"_shouldProcessRewards\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_crowdsaleEndDate\",\"type\":\"uint256\"},{\"name\":\"_numIntervals\",\"type\":\"uint256\"},{\"name\":\"_intervalDuration\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Lock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Unlock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"BRDLockup","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000005a3f0a2000000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000278d00","Library":"","SwarmSource":"bzzr://9c0bb124677d934c4dd6880d0a12d08184f38712da4f338ce08a7038c258a38e"}]}