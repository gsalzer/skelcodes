{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.15;\r\ncontract ERC20Basic {\r\n uint256 public totalSupply;\r\n function balanceOf(address who) constant returns (uint256);\r\n function transfer(address to, uint256 value) returns (bool);\r\n event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\ncontract ERC20 is ERC20Basic {\r\n function allowance(address owner, address spender) constant returns (uint256);\r\n function transferFrom(address from, address to, uint256 value) returns (bool);\r\n function approve(address spender, uint256 value) returns (bool);\r\n event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\nlibrary SafeMath {\r\n function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n   uint256 c = a * b;\r\n   assert(a == 0 || c / a == b);\r\n   return c;\r\n }\r\n function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n   uint256 c = a / b;\r\n   return c;\r\n }\r\n function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n   assert(b <= a);\r\n   return a - b;\r\n }\r\n function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n   uint256 c = a + b;\r\n   assert(c >= a);\r\n   return c;\r\n }\r\n}\r\ncontract BasicToken is ERC20Basic {\r\n using SafeMath for uint256;\r\n mapping(address => uint256) balances;\r\n function transfer(address _to, uint256 _value) returns (bool) {\r\n   balances[msg.sender] = balances[msg.sender].sub(_value);\r\n   balances[_to] = balances[_to].add(_value);\r\n   Transfer(msg.sender, _to, _value);\r\n   return true;\r\n }\r\n function balanceOf(address _owner) constant returns (uint256 balance) {\r\n   return balances[_owner];\r\n }\r\n}\r\ncontract StandardToken is ERC20, BasicToken {\r\n mapping (address => mapping (address => uint256)) allowed;\r\n function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\r\n   var _allowance = allowed[_from][msg.sender];\r\n   balances[_to] = balances[_to].add(_value);\r\n   balances[_from] = balances[_from].sub(_value);\r\n   allowed[_from][msg.sender] = _allowance.sub(_value);\r\n   Transfer(_from, _to, _value);\r\n   return true;\r\n }\r\n function approve(address _spender, uint256 _value) returns (bool) {\r\n   require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n   allowed[msg.sender][_spender] = _value;\r\n   Approval(msg.sender, _spender, _value);\r\n   return true;\r\n }\r\n function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n   return allowed[_owner][_spender];\r\n }\r\n}\r\ncontract Ownable {\r\n address public owner;\r\n function Ownable() {\r\n   owner = msg.sender;\r\n }\r\n modifier onlyOwner() {\r\n   require(msg.sender == owner);\r\n   _;\r\n }\r\n function transferOwnership(address newOwner) onlyOwner {\r\n   require(newOwner != address(0));\r\n   owner = newOwner;\r\n }\r\n}\r\ncontract MintableToken is StandardToken, Ownable {\r\n event Mint(address indexed to, uint256 amount);\r\n event MintFinished();\r\n bool public mintingFinished = false;\r\n modifier canMint() {\r\n   require(!mintingFinished);\r\n   _;\r\n }\r\n function mint(address _to, uint256 _amount) onlyOwner canMint returns (bool) {\r\n   totalSupply = totalSupply.add(_amount);\r\n   balances[_to] = balances[_to].add(_amount);\r\n   Mint(_to, _amount);\r\n   return true;\r\n }\r\n function finishMinting() onlyOwner returns (bool) {\r\n   mintingFinished = true;\r\n   MintFinished();\r\n   return true;\r\n }\r\n}\r\ncontract GlobalCryptoBank is MintableToken {\r\n   string public constant name = \"Global Crypto Bank\";\r\n   string public constant symbol = \"BANK\";\r\n   uint32 public constant decimals = 18;\r\n   uint public INITIAL_SUPPLY = 5000000 * 1 ether;\r\n   function GlobalCryptoBank() {\r\n       mint(owner, INITIAL_SUPPLY);\r\n       transfer(0x0e2Bec7F14F244c5D1b4Ce14f48dcDb88fB61690, 200000 * 1 ether);\r\n       finishMinting();\r\n   }\r\n}\r\ncontract Crowdsale is Ownable {\r\n   using SafeMath for uint;\r\n   address founderAddress;\r\n   address bountyAddress;\r\n   uint preIsoTokenLimit;\r\n   uint isoTokenLimit;\r\n   uint preIsoStartDate;\r\n   uint preIsoEndDate;\r\n   uint isoStartDate;\r\n   uint isoEndDate;\r\n   uint rate;\r\n   uint founderPercent;\r\n   uint bountyPercent;\r\n   uint public soldTokens = 0;\r\n   GlobalCryptoBank public token = new GlobalCryptoBank();\r\n   function Crowdsale () payable {\r\n       founderAddress = 0x0e2Bec7F14F244c5D1b4Ce14f48dcDb88fB61690;\r\n       bountyAddress = 0x60511356e71986d74D639Bedbf3DB186011fd9F3;\r\n       founderPercent = 90;\r\n       bountyPercent = 10;\r\n       rate = 33 * 1 ether;\r\n       preIsoStartDate = 1509321600;\r\n       preIsoEndDate = 1511049600;\r\n       isoStartDate = 1511568000;\r\n       isoEndDate = 1514678399;\r\n       preIsoTokenLimit = 77500 * 1 ether;\r\n       isoTokenLimit = 4722500 * 1 ether;\r\n   }\r\n   modifier isUnderPreIsoLimit(uint value) {\r\n       require((soldTokens+rate.mul(value).div(1 ether)+rate.mul(value).div(1 ether).mul(getPreIsoBonusPercent(value).div(100))) <= preIsoTokenLimit);\r\n       _;\r\n   }\r\n   modifier isUnderIsoLimit(uint value) {\r\n       require((soldTokens+rate.mul(value).div(1 ether)+rate.mul(value).div(1 ether).mul(getIsoBonusPercent(value).div(100))) <= isoTokenLimit);\r\n       _;\r\n   }\r\n   function getPreIsoBonusPercent(uint value) private returns (uint) {\r\n       uint eth = value.div(1 ether);\r\n       uint bonusPercent = 0;\r\n       if (now >= preIsoStartDate && now <= preIsoStartDate + 2 days) {\r\n           bonusPercent += 35;\r\n       } else if (now >= preIsoStartDate + 2 days && now <= preIsoStartDate + 7 days) {\r\n           bonusPercent += 33;\r\n       } else if (now >= preIsoStartDate + 7 days && now <= preIsoStartDate + 14 days) {\r\n           bonusPercent += 31;\r\n       } else if (now >= preIsoStartDate + 14 days && now <= preIsoStartDate + 21 days) {\r\n           bonusPercent += 30;\r\n       }\r\n\t   \r\n\t   \r\n       if (eth >= 1 && eth < 10) {\r\n           bonusPercent += 2;\r\n       } else if (eth >= 10 && eth < 50) {\r\n           bonusPercent += 4;\r\n       } else if (eth >= 50 && eth < 100) {\r\n           bonusPercent += 8;\r\n       } else if (eth >= 100) {\r\n           bonusPercent += 10;\r\n       }\r\n       return bonusPercent;\r\n   }\r\n   function getIsoBonusPercent(uint value) private returns (uint) {\r\n       uint eth = value.div(1 ether);\r\n       uint bonusPercent = 0;\r\n       if (now >= isoStartDate && now <= isoStartDate + 2 days) {\r\n           bonusPercent += 20;\r\n       } else if (now >= isoStartDate + 2 days && now <= isoStartDate + 7 days) {\r\n           bonusPercent += 18;\r\n       } else if (now >= isoStartDate + 7 days && now <= isoStartDate + 14 days) {\r\n           bonusPercent += 15;\r\n       } else if (now >= isoStartDate + 14 days && now <= isoStartDate + 21 days) {\r\n           bonusPercent += 10;\r\n       }\r\n       if (eth >= 1 && eth < 10) {\r\n           bonusPercent += 2;\r\n       } else if (eth >= 10 && eth < 50) {\r\n           bonusPercent += 4;\r\n       } else if (eth >= 50 && eth < 100) {\r\n           bonusPercent += 8;\r\n       } else if (eth >= 100) {\r\n           bonusPercent += 10;\r\n       }\r\n       return bonusPercent;\r\n   }\r\n   function buyPreICOTokens(uint value, address sender) private isUnderPreIsoLimit(value) {\r\n       founderAddress.transfer(value.div(100).mul(founderPercent));\r\n       bountyAddress.transfer(value.div(100).mul(bountyPercent));\r\n       uint tokens = rate.mul(value).div(1 ether);\r\n       uint bonusTokens = 0;\r\n       uint bonusPercent = getPreIsoBonusPercent(value);\r\n       bonusTokens = tokens.mul(bonusPercent).div(100);\r\n       tokens += bonusTokens;\r\n       soldTokens += tokens;\r\n       token.transfer(sender, tokens);\r\n   }\r\n   function buyICOTokens(uint value, address sender) private isUnderIsoLimit(value) {\r\n       founderAddress.transfer(value.div(100).mul(founderPercent));\r\n       bountyAddress.transfer(value.div(100).mul(bountyPercent));\r\n       uint tokens = rate.mul(value).div(1 ether);\r\n       uint bonusTokens = 0;\r\n       uint bonusPercent = getIsoBonusPercent(value);\r\n       bonusTokens = tokens.mul(bonusPercent).div(100);\r\n       tokens += bonusTokens;\r\n       soldTokens += tokens;\r\n       token.transfer(sender, tokens);\r\n   }\r\n   function() external payable {\r\n       if (now >= preIsoStartDate && now < preIsoEndDate) {\r\n           buyPreICOTokens(msg.value, msg.sender);\r\n       } else if (now >= isoStartDate && now < isoEndDate) {\r\n           buyICOTokens(msg.value, msg.sender);\r\n       }\r\n   }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"soldTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"Crowdsale","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://1556654cd019b2daf7edca089fb1e8394ac3f34e5d8230a868ac83a318670a93"}]}