{"status":"1","message":"OK","result":[{"SourceCode":"contract Transferable {\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n}\r\n\r\ncontract DevTeamContract{\r\n    \r\n    struct Transaction{\r\n        address _to;\r\n        uint256 amount;\r\n        uint256 oldAmount;\r\n        uint256 registrationBlock;\r\n        address from;\r\n    }    \r\n    \r\n    // Only human, wallet can not be invoked from other contract,\r\n    // If so transaction is reverted\r\n    modifier isHuman() {\r\n        var sndr = msg.sender;\r\n        var orgn = tx.origin;\r\n        if(sndr != orgn){\r\n            revert();\r\n        }\r\n        else{\r\n            _;\r\n        }\r\n    }\r\n    \r\n    /*\r\n     revert operation if caller is not owner of wallet specified in constructor\r\n    */\r\n    modifier isOwner() {\r\n        if(owners[msg.sender]>0){\r\n            _;   \r\n        }\r\n        else{\r\n            revert();\r\n        }\r\n    }\r\n    \r\n    uint256 public pendingAmount = 0;\r\n    \r\n    /*\r\n     Numbers of blocks in which transaction must be confirmed by wallet owners \r\n     to be allowed for execution, here 10000 blocks ~2.5 days\r\n    */\r\n    uint256 public constant  WAIT_BLOCKS = 15000;\r\n    uint256 constant MINIMUM_CONFIRMATION_COUNT = 3;\r\n    \r\n    uint256 constant USER1_CODE = 1;// every user has different bit\r\n    address constant USER1_ACCOUNT1 = 0x383125Faf0c83671D42Ac941BDc33cd38131a9d1; \r\n    address constant USER1_ACCOUNT2 = 0x77E6a4a8d482045fF42C803977AF6f5b429152c8; \r\n    address constant USER1_ACCOUNT3 = 0x862d9A8018D4A6A9875e1c52540C0367EB0D77a8; \r\n    uint256 constant USER_PAT_CODE = 2;// every user has different bit\r\n    address constant USER_PAT_ACCOUNT1 = 0x19aC51538453126D027e49E7997a3a24FBfb6010;\r\n    address constant USER_PAT_ACCOUNT2 = 0x987BC45e8eC6C9D3b620326Dd26313BC4F8a7D81;\r\n    uint256 constant USER_JRKP_CODE = 4;// every user has different bit\r\n    address constant USER_JRKP_ACCOUNT1 = 0x2C4a6B54718821b4eA6700086E8FcC4651289cBC;\r\n    address constant USER_JRKP_ACCOUNT2 = 0x5f55c525C21Fe54D826a63Fc27EaCf35AA9B1481;\r\n    uint256 constant USER_MBL_CODE = 8;// every user has different bitt \r\n    address constant USER_MBL_ACCOUNT1 = 0x678C66747e96258EFCDE4AF5f6b408dC00D68c42;\r\n    address constant USER_MBL_ACCOUNT2 = 0xb6407A53E41B09cf35a25c55e18bFFf2163879b5;\r\n    uint256 constant USER_DEV_CODE = 16;// every user has different bitt \r\n    address constant USER_DEV_ACCOUNT1 = 0x94DA43C587c515AD30eA86a208603a7586D2C25F;\r\n    address constant USER_DEV_ACCOUNT2 = 0x189891d02445D87e70d515fD2159416f023B0087;\r\n    \r\n    mapping (address => uint256) public owners;\r\n    mapping (uint256 => uint256) public confirmations;\r\n    Transaction[] public transactions  ;\r\n    \r\n    /*\r\n        Constructor\r\n    */\r\n    function DevTeamContract() public{\r\n        SetupAccounts();\r\n    }\r\n    \r\n    /*\r\n        time measuement is based on blocks\r\n    */\r\n    function GetNow() public constant returns(uint256){\r\n        return block.number;\r\n    }\r\n    /*\r\n      Function that sets the accounts that can do transfers \r\n      Only first call changes anything\r\n    */\r\n    function SetupAccounts() public{\r\n        owners[USER1_ACCOUNT1] = USER1_CODE;\r\n        owners[USER1_ACCOUNT2] = USER1_CODE;\r\n        owners[USER1_ACCOUNT3] = USER1_CODE;\r\n        owners[USER_PAT_ACCOUNT1] = USER_PAT_CODE;\r\n        owners[USER_PAT_ACCOUNT2] = USER_PAT_CODE;\r\n        owners[USER_DEV_ACCOUNT1] = USER_DEV_CODE;\r\n        owners[USER_DEV_ACCOUNT2] = USER_DEV_CODE;\r\n        owners[USER_JRKP_ACCOUNT1] = USER_JRKP_CODE;\r\n        owners[USER_JRKP_ACCOUNT2] = USER_JRKP_CODE;\r\n        owners[USER_MBL_ACCOUNT1] = USER_MBL_CODE;\r\n        owners[USER_MBL_ACCOUNT2] = USER_MBL_CODE;\r\n    }\r\n    /*\r\n        Gets Contract Balance\r\n    */\r\n    function getTotalAmount() constant public returns(uint256){\r\n        return (this.balance);\r\n    }\r\n    /*\r\n      Gets Total number of transactions ever created\r\n      \r\n    */\r\n    function getTotalNumberOfTransactions() constant public returns(uint256){\r\n        return (transactions.length);\r\n    }\r\n    \r\n    /*\r\n    Counts number of confirmations if number is equal or greater than \r\n    MINIMUM_CONFIRMATION_COUNT transaction can be confirmed\r\n    */\r\n    function countConfirmations(uint256 i) constant public returns(uint256){\r\n        uint256 counter = 0;\r\n        uint256 tmp = 0;\r\n        tmp = confirmations[i];\r\n        if(tmp%2==0){ //USER1 ALWAYS NEED TO ACCEPT\r\n            return 0;\r\n        }\r\n        //SUMS Number of bits set to 1\r\n        while(tmp>0){\r\n            counter = counter + tmp%2 ;\r\n            tmp = tmp/2;\r\n        }\r\n        return counter;\r\n    }\r\n    \r\n    // Function used by ICO Contract to send ether to wallet\r\n    function recieveFunds() payable public{\r\n        \r\n    }\r\n    \r\n    \r\n    /*\r\n        Registers transaction for confirmation, designed for tokens transfer or Ether\r\n        if ether transfered leave from blank\r\n        from that moment wallet owners have WAIT_BLOCKS blocks to confirm transaction\r\n    */\r\n    function RegisterTransaction(address _to,uint256 amount) isHuman isOwner public{\r\n    \r\n        if(owners[msg.sender]>0 && amount+pendingAmount<=this.balance){\r\n            transactions.push(Transaction(_to,amount,amount,this.GetNow(),address(0)));\r\n            pendingAmount = amount+pendingAmount;\r\n        }\r\n    }\r\n    function RegisterTokenTransaction(address _to,uint256 amount,address _from) isHuman isOwner public{\r\n    \r\n        if(owners[msg.sender]>0 && amount+pendingAmount<=this.balance){\r\n            transactions.push(Transaction(_to,amount,amount,this.GetNow(),_from));\r\n            pendingAmount = amount+pendingAmount;\r\n        }\r\n    }\r\n    /*\r\n        If caller is one of wallet owners Function note his confirmation \r\n        for transaction number i\r\n    */\r\n    function ConfirmTransaction(uint256 i)  isHuman isOwner public{\r\n        confirmations[i] = confirmations[i] | owners[msg.sender];\r\n    }\r\n    \r\n    /*\r\n        If caller is one of wallet owners Function revert his confirmation \r\n        for transaction number i\r\n    */\r\n    function ReverseConfirmTransaction(uint256 i)  isHuman isOwner public{\r\n        confirmations[i] = confirmations[i] & (~owners[msg.sender]);\r\n    }\r\n    /*\r\n      If Transaction number i has correct numbers of confirmations and\r\n      It has been created less than WAIT_BLOCKS ago it gets executed\r\n      otherwise, if time is longer than WAIT_BLOCKS it is cancelled,\r\n      otherwise nothing happends\r\n    */\r\n    function ProcessTransaction(uint256 i) isHuman isOwner public{\r\n        uint256 tmp;\r\n        if(owners[msg.sender]>0){\r\n            if(this.countConfirmations(i)>=MINIMUM_CONFIRMATION_COUNT \r\n            && transactions[i].amount > 0){\r\n                if(transactions[i].from==address(0)){\r\n                    tmp = transactions[i].amount;\r\n                    transactions[i].amount = 0;\r\n                    transactions[i].oldAmount = tmp;\r\n                    transactions[i]._to.transfer(tmp);\r\n                    pendingAmount = pendingAmount -tmp;\r\n                }\r\n                else{\r\n                    var token = Transferable(transactions[i].from);\r\n                    tmp = transactions[i].amount;\r\n                    transactions[i].amount = 0;\r\n                    transactions[i].oldAmount = tmp;\r\n                    token.transfer(transactions[i]._to,tmp);\r\n                }\r\n            }\r\n            else{\r\n                if(transactions[i].registrationBlock<this.GetNow()-WAIT_BLOCKS ){ \r\n                    //if not confirmed sofar cancel\r\n                    tmp = transactions[i].amount;\r\n                    pendingAmount = pendingAmount -tmp;\r\n                    transactions[i].amount = 0;\r\n                }\r\n                else{\r\n                    assert(false);\r\n                }\r\n            }\r\n        }\r\n    }\r\n  \r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"owners\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"ConfirmTransaction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"ReverseConfirmTransaction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"_from\",\"type\":\"address\"}],\"name\":\"RegisterTokenTransaction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RegisterTransaction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"WAIT_BLOCKS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transactions\",\"outputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"oldAmount\",\"type\":\"uint256\"},{\"name\":\"registrationBlock\",\"type\":\"uint256\"},{\"name\":\"from\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"ProcessTransaction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetNow\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"confirmations\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"recieveFunds\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"countConfirmations\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalNumberOfTransactions\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"SetupAccounts\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"DevTeamContract","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://e609c3525a59ba84d07f5d541ba34ca1d55a2208538c1053c1ab394cd5b5a5d3"}]}