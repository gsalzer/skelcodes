{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\nlibrary SafeMath\r\n{\r\n    function mul(uint256 a, uint256 b) internal pure\r\n        returns (uint256)\r\n    {\r\n        uint256 c = a * b;\r\n\r\n        assert(a == 0 || c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure\r\n        returns (uint256)\r\n    {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure\r\n        returns (uint256)\r\n    {\r\n        assert(b <= a);\r\n\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure\r\n        returns (uint256)\r\n    {\r\n        uint256 c = a + b;\r\n\r\n        assert(c >= a);\r\n\r\n        return c;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable\r\n{\r\n    address owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    function Ownable() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface tokenRecipient\r\n{\r\n    function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public;\r\n}\r\n\r\ncontract TokenERC20 is Ownable\r\n{\r\n    using SafeMath for uint;\r\n\r\n    // Public variables of the token\r\n    string public name;\r\n    string public symbol;\r\n    uint256 public decimals = 18;\r\n    uint256 DEC = 10 ** uint256(decimals);\r\n    uint256 public totalSupply;\r\n    uint256 public avaliableSupply;\r\n    uint256 public buyPrice = 1000000000000000000 wei;\r\n\r\n    // This creates an array with all balances\r\n    mapping (address => uint256) public balanceOf;\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n\r\n    // This generates a public event on the blockchain that will notify clients\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Burn(address indexed from, uint256 value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n    /**\r\n     * Constrctor function\r\n     *\r\n     * Initializes contract with initial supply tokens to the creator of the contract\r\n     */\r\n    function TokenERC20(\r\n        uint256 initialSupply,\r\n        string tokenName,\r\n        string tokenSymbol\r\n    ) public\r\n    {\r\n        totalSupply = initialSupply.mul(DEC);  // Update total supply with the decimal amount\r\n        balanceOf[this] = totalSupply;         // Give the creator all initial tokens\r\n        avaliableSupply = balanceOf[this];     // Show how much tokens on contract\r\n        name = tokenName;                      // Set the name for display purposes\r\n        symbol = tokenSymbol;                  // Set the symbol for display purposes\r\n    }\r\n\r\n    /**\r\n     * Internal transfer, only can be called by this contract\r\n     *\r\n     * @param _from - address of the contract\r\n     * @param _to - address of the investor\r\n     * @param _value - tokens for the investor\r\n     */\r\n    function _transfer(address _from, address _to, uint256 _value) internal\r\n    {\r\n        // Prevent transfer to 0x0 address. Use burn() instead\r\n        require(_to != 0x0);\r\n        // Check if the sender has enough\r\n        require(balanceOf[_from] >= _value);\r\n        // Check for overflows\r\n        require(balanceOf[_to].add(_value) > balanceOf[_to]);\r\n        // Save this for an assertion in the future\r\n        uint previousBalances = balanceOf[_from].add(balanceOf[_to]);\r\n        // Subtract from the sender\r\n        balanceOf[_from] = balanceOf[_from].sub(_value);\r\n        // Add the same to the recipient\r\n        balanceOf[_to] = balanceOf[_to].add(_value);\r\n\r\n        Transfer(_from, _to, _value);\r\n        // Asserts are used to use static analysis to find bugs in your code. They should never fail\r\n        assert(balanceOf[_from].add(balanceOf[_to]) == previousBalances);\r\n    }\r\n\r\n    /**\r\n     * Transfer tokens\r\n     *\r\n     * Send `_value` tokens to `_to` from your account\r\n     *\r\n     * @param _to The address of the recipient\r\n     * @param _value the amount to send\r\n     */\r\n    function transfer(address _to, uint256 _value) public\r\n    {\r\n        _transfer(msg.sender, _to, _value);\r\n    }\r\n\r\n    /**\r\n     * Transfer tokens from other address\r\n     *\r\n     * Send `_value` tokens to `_to` in behalf of `_from`\r\n     *\r\n     * @param _from The address of the sender\r\n     * @param _to The address of the recipient\r\n     * @param _value the amount to send\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) public\r\n        returns (bool success)\r\n    {\r\n        require(_value <= allowance[_from][msg.sender]);     // Check allowance\r\n\r\n        allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\r\n        _transfer(_from, _to, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Set allowance for other address\r\n     *\r\n     * Allows `_spender` to spend no more than `_value` tokens in your behalf\r\n     *\r\n     * @param _spender The address authorized to spend\r\n     * @param _value the max amount they can spend\r\n     */\r\n    function approve(address _spender, uint256 _value) public\r\n        returns (bool success)\r\n    {\r\n        allowance[msg.sender][_spender] = _value;\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Set allowance for other address and notify\r\n     *\r\n     * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\r\n     *\r\n     * @param _spender The address authorized to spend\r\n     * @param _value the max amount they can spend\r\n     * @param _extraData some extra information to send to the approved contract\r\n     */\r\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public onlyOwner\r\n        returns (bool success)\r\n    {\r\n        tokenRecipient spender = tokenRecipient(_spender);\r\n\r\n        if (approve(_spender, _value)) {\r\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\r\n\r\n            return true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * approve should be called when allowed[_spender] == 0. To increment\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     */\r\n    function increaseApproval (address _spender, uint _addedValue) public\r\n        returns (bool success)\r\n    {\r\n        allowance[msg.sender][_spender] = allowance[msg.sender][_spender].add(_addedValue);\r\n\r\n        Approval(msg.sender, _spender, allowance[msg.sender][_spender]);\r\n\r\n        return true;\r\n    }\r\n\r\n    function decreaseApproval (address _spender, uint _subtractedValue) public\r\n        returns (bool success)\r\n    {\r\n        uint oldValue = allowance[msg.sender][_spender];\r\n\r\n        if (_subtractedValue > oldValue) {\r\n            allowance[msg.sender][_spender] = 0;\r\n        } else {\r\n            allowance[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n        }\r\n\r\n        Approval(msg.sender, _spender, allowance[msg.sender][_spender]);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Destroy tokens\r\n     *\r\n     * Remove `_value` tokens from the system irreversibly\r\n     *\r\n     * @param _value the amount of money to burn\r\n     */\r\n    function burn(uint256 _value) public onlyOwner\r\n        returns (bool success)\r\n    {\r\n        require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\r\n\r\n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);  // Subtract from the sender\r\n        totalSupply = totalSupply.sub(_value);                      // Updates totalSupply\r\n        avaliableSupply = avaliableSupply.sub(_value);\r\n\r\n        Burn(msg.sender, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Destroy tokens from other account\r\n     *\r\n     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\r\n     *\r\n     * @param _from the address of the sender\r\n     * @param _value the amount of money to burn\r\n     */\r\n    function burnFrom(address _from, uint256 _value) public onlyOwner\r\n        returns (bool success)\r\n    {\r\n        require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\r\n        require(_value <= allowance[_from][msg.sender]);    // Check allowance\r\n\r\n        balanceOf[_from] = balanceOf[_from].sub(_value);    // Subtract from the targeted balance\r\n        allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);    // Subtract from the sender's allowance\r\n        totalSupply = totalSupply.sub(_value);              // Update totalSupply\r\n        avaliableSupply = avaliableSupply.sub(_value);\r\n\r\n        Burn(_from, _value);\r\n\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract Pauseble is TokenERC20\r\n{\r\n    event EPause();\r\n    event EUnpause();\r\n\r\n    bool public paused = true;\r\n    uint public startIcoDate = 0;\r\n\r\n    modifier whenNotPaused()\r\n    {\r\n        require(!paused);\r\n        _;\r\n    }\r\n\r\n    modifier whenPaused()\r\n    {\r\n        require(paused);\r\n        _;\r\n    }\r\n\r\n    function pause() public onlyOwner\r\n    {\r\n        paused = true;\r\n        EPause();\r\n    }\r\n\r\n    function pauseInternal() internal\r\n    {\r\n        paused = true;\r\n        EPause();\r\n    }\r\n\r\n    function unpause() public onlyOwner\r\n    {\r\n        paused = false;\r\n        EUnpause();\r\n    }\r\n\r\n    function unpauseInternal() internal\r\n    {\r\n        paused = false;\r\n        EUnpause();\r\n    }\r\n}\r\n\r\ncontract ERC20Extending is TokenERC20\r\n{\r\n    using SafeMath for uint;\r\n\r\n    /**\r\n    * Function for transfer ethereum from contract to any address\r\n    *\r\n    * @param _to - address of the recipient\r\n    * @param amount - ethereum\r\n    */\r\n    function transferEthFromContract(address _to, uint256 amount) public onlyOwner\r\n    {\r\n        _to.transfer(amount);\r\n    }\r\n\r\n    /**\r\n    * Function for transfer tokens from contract to any address\r\n    *\r\n    */\r\n    function transferTokensFromContract(address _to, uint256 _value) public onlyOwner\r\n    {\r\n        avaliableSupply = avaliableSupply.sub(_value);\r\n        _transfer(this, _to, _value);\r\n    }\r\n}\r\n\r\ncontract StreamityCrowdsale is Pauseble\r\n{\r\n    using SafeMath for uint;\r\n\r\n    uint public stage = 0;\r\n    uint256 public weisRaised;  // how many weis was raised on crowdsale\r\n\r\n    event CrowdSaleFinished(string info);\r\n\r\n    struct Ico {\r\n        uint256 tokens;             // Tokens in crowdsale\r\n        uint startDate;             // Date when crowsale will be starting, after its starting that property will be the 0\r\n        uint endDate;               // Date when crowdsale will be stop\r\n        uint8 discount;             // Discount\r\n        uint8 discountFirstDayICO;  // Discount. Only for first stage ico\r\n    }\r\n\r\n    Ico public ICO;\r\n\r\n    /*\r\n    * Function confirm autosell\r\n    *\r\n    */\r\n    function confirmSell(uint256 _amount) internal view\r\n        returns(bool)\r\n    {\r\n        if (ICO.tokens < _amount) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /*\r\n    *  Make discount\r\n    */\r\n    function countDiscount(uint256 amount) internal\r\n        returns(uint256)\r\n    {\r\n        uint256 _amount = (amount.mul(DEC)).div(buyPrice);\r\n\r\n        if (1 == stage) {\r\n            _amount = _amount.add(withDiscount(_amount, ICO.discount));\r\n        }\r\n        else if (2 == stage)\r\n        {\r\n            if (now <= ICO.startDate + 1 days)\r\n            {\r\n                if (0 == ICO.discountFirstDayICO) {\r\n                    ICO.discountFirstDayICO = 20;\r\n                }\r\n                _amount = _amount.add(withDiscount(_amount, ICO.discountFirstDayICO));\r\n            }\r\n            else\r\n            {\r\n                _amount = _amount.add(withDiscount(_amount, ICO.discount));\r\n            }\r\n        }\r\n        else if (3 == stage) {\r\n            _amount = _amount.add(withDiscount(_amount, ICO.discount));\r\n        }\r\n\r\n        return _amount;\r\n    }\r\n\r\n    /**\r\n    * Function for change discount if need\r\n    *\r\n    */\r\n    function changeDiscount(uint8 _discount) public onlyOwner\r\n        returns (bool)\r\n    {\r\n        ICO = Ico (ICO.tokens, ICO.startDate, ICO.endDate, _discount, ICO.discountFirstDayICO);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * Expanding of the functionality\r\n    *\r\n    * @param _numerator - Numerator - value (10000)\r\n    * @param _denominator - Denominator - value (10000)\r\n    *\r\n    * example: price 1000 tokens by 1 ether = changeRate(1, 1000)\r\n    */\r\n    function changeRate(uint256 _numerator, uint256 _denominator) public onlyOwner\r\n        returns (bool success)\r\n    {\r\n        if (_numerator == 0) _numerator = 1;\r\n        if (_denominator == 0) _denominator = 1;\r\n\r\n        buyPrice = (_numerator.mul(DEC)).div(_denominator);\r\n\r\n        return true;\r\n    }\r\n\r\n    /*\r\n    * Function show in contract what is now\r\n    *\r\n    */\r\n    function crowdSaleStatus() internal constant\r\n        returns (string)\r\n    {\r\n        if (1 == stage) {\r\n            return \"Pre-ICO\";\r\n        } else if(2 == stage) {\r\n            return \"ICO first stage\";\r\n        } else if (3 == stage) {\r\n            return \"ICO second stage\";\r\n        } else if (4 >= stage) {\r\n            return \"feature stage\";\r\n        }\r\n\r\n        return \"there is no stage at present\";\r\n    }\r\n\r\n    /*\r\n    * Seles manager\r\n    *\r\n    */\r\n    function paymentManager(address sender, uint256 value) internal\r\n    {\r\n        uint256 discountValue = countDiscount(value);\r\n        bool conf = confirmSell(discountValue);\r\n\r\n        if (conf) {\r\n\r\n            sell(sender, discountValue);\r\n\r\n            weisRaised = weisRaised.add(value);\r\n\r\n            if (now >= ICO.endDate) {\r\n                pauseInternal();\r\n                CrowdSaleFinished(crowdSaleStatus()); // if time is up\r\n            }\r\n\r\n        } else {\r\n\r\n            sell(sender, ICO.tokens); // sell tokens which has been accessible\r\n\r\n            weisRaised = weisRaised.add(value);\r\n\r\n            pauseInternal();\r\n            CrowdSaleFinished(crowdSaleStatus());  // if tokens sold\r\n        }\r\n    }\r\n\r\n    /*\r\n    * Function for selling tokens in crowd time.\r\n    *\r\n    */\r\n    function sell(address _investor, uint256 _amount) internal\r\n    {\r\n        ICO.tokens = ICO.tokens.sub(_amount);\r\n        avaliableSupply = avaliableSupply.sub(_amount);\r\n\r\n        _transfer(this, _investor, _amount);\r\n    }\r\n\r\n    /*\r\n    * Function for start crowdsale (any)\r\n    *\r\n    * @param _tokens - How much tokens will have the crowdsale - amount humanlike value (10000)\r\n    * @param _startDate - When crowdsale will be start - unix timestamp (1512231703 )\r\n    * @param _endDate - When crowdsale will be end - humanlike value (7) same as 7 days\r\n    * @param _discount - Discount for the crowd - humanlive value (7) same as 7 %\r\n    * @param _discount - Discount for the crowds first day - humanlive value (7) same as 7 %\r\n    */\r\n    function startCrowd(uint256 _tokens, uint _startDate, uint _endDate, uint8 _discount, uint8 _discountFirstDayICO) public onlyOwner\r\n    {\r\n        require(_tokens * DEC <= avaliableSupply);  // require to set correct tokens value for crowd\r\n        ICO = Ico (_tokens * DEC, _startDate, _startDate + _endDate * 1 days , _discount, _discountFirstDayICO);\r\n        stage = stage.add(1);\r\n        unpauseInternal();\r\n    }\r\n\r\n    /**\r\n    * Function for web3js, should be call when somebody will buy tokens from website. This function only delegator.\r\n    *\r\n    * @param _investor - address of investor (who payed)\r\n    * @param _amount - ethereum\r\n    */\r\n    function transferWeb3js(address _investor, uint256 _amount) external onlyOwner\r\n    {\r\n        sell(_investor, _amount);\r\n    }\r\n\r\n    /**\r\n    * Function for adding discount\r\n    *\r\n    */\r\n    function withDiscount(uint256 _amount, uint _percent) internal pure\r\n        returns (uint256)\r\n    {\r\n        return (_amount.mul(_percent)).div(100);\r\n    }\r\n}\r\n\r\ncontract StreamityContract is ERC20Extending, StreamityCrowdsale\r\n{\r\n    /* Streamity tokens Constructor */\r\n    function StreamityContract() public TokenERC20(186000000, \"Streamity\", \"STM\") {} //change before send !!!\r\n\r\n    /**\r\n    * Function payments handler\r\n    *\r\n    */\r\n    function () public payable\r\n    {\r\n        assert(msg.value >= 1 ether / 10);\r\n        require(now >= ICO.startDate);\r\n\r\n        if (paused == false) {\r\n            paymentManager(msg.sender, msg.value);\r\n        } else {\r\n            revert();\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"avaliableSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ICO\",\"outputs\":[{\"name\":\"tokens\",\"type\":\"uint256\"},{\"name\":\"startDate\",\"type\":\"uint256\"},{\"name\":\"endDate\",\"type\":\"uint256\"},{\"name\":\"discount\",\"type\":\"uint8\"},{\"name\":\"discountFirstDayICO\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferEthFromContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokens\",\"type\":\"uint256\"},{\"name\":\"_startDate\",\"type\":\"uint256\"},{\"name\":\"_endDate\",\"type\":\"uint256\"},{\"name\":\"_discount\",\"type\":\"uint8\"},{\"name\":\"_discountFirstDayICO\",\"type\":\"uint8\"}],\"name\":\"startCrowd\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_numerator\",\"type\":\"uint256\"},{\"name\":\"_denominator\",\"type\":\"uint256\"}],\"name\":\"changeRate\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startIcoDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferTokensFromContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weisRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_discount\",\"type\":\"uint8\"}],\"name\":\"changeDiscount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_investor\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferWeb3js\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"info\",\"type\":\"string\"}],\"name\":\"CrowdSaleFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EPause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EUnpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"StreamityContract","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://bff421aa5064bbcc2a0cf451204b3a78249d95360ab9c25ab0f3a4c4801cb95b"}]}