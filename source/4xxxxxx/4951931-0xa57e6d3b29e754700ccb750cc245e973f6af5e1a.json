{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.16;\r\n\r\ncontract owned {\r\n    address public owner;\r\n\r\n    function owned() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) onlyOwner public {\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface token { function transferFrom(address _from, address _to, uint256 _value) public returns (bool success); }\r\n\r\ncontract CZRLocker is owned {\r\n    \r\n    event AddLock(address addr, uint index, uint startLockTime, uint lockMonth, uint lockedAmount);\r\n    event RemoveLock(address addr, uint index);\r\n    event Unlock(address addr, uint index, uint unlockAmount);\r\n\r\n    address public tokenAddr;\r\n    address public unlocker;\r\n    \r\n    struct LockedCZR {\r\n        uint startLockTime;\r\n        uint lockMonth;\r\n        uint lockedAmount;\r\n        uint unlockedAmount;\r\n    }\r\n    \r\n    mapping(address => LockedCZR[]) public lockedCZRMap;\r\n    \r\n    function CZRLocker(address _tokenAddr, address _unlocker) public {\r\n        tokenAddr = _tokenAddr;\r\n        unlocker = _unlocker;\r\n    }\r\n\r\n    /// @notice remove CZR lock (only set all field to 0)\r\n    /// @param addr address to remove lock\r\n    /// @param index index to remove\r\n    function removeCZRLock(address addr, uint index) onlyOwner public {\r\n        LockedCZR[] storage lockArr = lockedCZRMap[addr];\r\n        require(lockArr.length > 0 && index < lockArr.length);\r\n    \r\n        delete lockArr[index];      //delete just set all feilds to zero value, not remove item out of array;\r\n        RemoveLock(addr, index);\r\n    }\r\n    \r\n    /// @notice add CZR lock\r\n    /// @param addr address to add lock\r\n    /// @param startLockTime start lock time, 0 for now\r\n    /// @param amount CZR amount\r\n    /// @param lockMonth months to lock\r\n    function addCZRLock(address addr, uint startLockTime, uint amount, uint lockMonth) onlyOwner public {\r\n        require(amount > 0);\r\n        if (startLockTime == 0)\r\n            startLockTime = now;\r\n        lockedCZRMap[addr].push(LockedCZR(startLockTime, lockMonth, amount, 0));\r\n        uint index = lockedCZRMap[addr].length - 1;\r\n        AddLock(addr, index, startLockTime, lockMonth, amount);\r\n    }\r\n    \r\n    /// @notice unlock CZR\r\n    /// @param addr address to unlock\r\n    /// @param limit max unlock number\r\n    function unlockCZR(address addr, uint limit) public {\r\n        require(msg.sender == owner || msg.sender == unlocker);\r\n        \r\n        LockedCZR[] storage lockArr = lockedCZRMap[addr];\r\n        require(lockArr.length > 0);\r\n        token t = token(tokenAddr);\r\n        \r\n        uint num = 0;\r\n        for (uint i = 0; i < lockArr.length; i++) {\r\n            var lock = lockArr[i];\r\n            if (lock.lockedAmount > 0) {\r\n                uint time = now - lock.startLockTime;\r\n                uint month = time / 30 days;\r\n                \r\n                if (month == 0) \r\n                    continue;\r\n\r\n                uint unlockAmount;\r\n                if (month >= lock.lockMonth)\r\n                    unlockAmount = lock.lockedAmount;\r\n                else\r\n                    unlockAmount = (lock.lockedAmount + lock.unlockedAmount) * month / lock.lockMonth - lock.unlockedAmount;\r\n                        \r\n                if (unlockAmount == 0) \r\n                    continue;\r\n                    \r\n                lock.unlockedAmount += unlockAmount;\r\n                lock.lockedAmount -= unlockAmount;\r\n                        \r\n                t.transferFrom(owner, addr, unlockAmount);\r\n                Unlock(addr, i, unlockAmount);\r\n                \r\n                num++;\r\n                if (limit > 0 && num == limit)\r\n                    break;\r\n            }\r\n        }\r\n        \r\n        require(num > 0);\r\n    }\r\n    \r\n    /// @notice withdraw eth\r\n    /// @param to Address to receive the eth\r\n    /// @param value the amount of eth it will receive\r\n    function withdrawEth(address to, uint256 value) onlyOwner public {\r\n        to.transfer(value);\r\n    }\r\n    \r\n    /// record total received eth and check whether goal completed\r\n    function() payable public {\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"unlocker\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"removeCZRLock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"withdrawEth\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"startLockTime\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"lockMonth\",\"type\":\"uint256\"}],\"name\":\"addCZRLock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"unlockCZR\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lockedCZRMap\",\"outputs\":[{\"name\":\"startLockTime\",\"type\":\"uint256\"},{\"name\":\"lockMonth\",\"type\":\"uint256\"},{\"name\":\"lockedAmount\",\"type\":\"uint256\"},{\"name\":\"unlockedAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tokenAddr\",\"type\":\"address\"},{\"name\":\"_unlocker\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"startLockTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"lockMonth\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"lockedAmount\",\"type\":\"uint256\"}],\"name\":\"AddLock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"RemoveLock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"unlockAmount\",\"type\":\"uint256\"}],\"name\":\"Unlock\",\"type\":\"event\"}]","ContractName":"CZRLocker","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000223fc70574214f65813fe336d870ac47e147fae000000000000000000000000ae7974a4adbd26fe7dca0ccce2fa050ad7d915ec","Library":"","SwarmSource":"bzzr://f53ddc9ed4f193117eac14f5b93b38a238bbfebb78322f327fdad8d0e4102e18"}]}