{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.1;\r\n\r\ncontract LeanFund {\r\n\r\n  // Poloniex Exchange Rate 2017-08-06: 266 USD / ETH\r\n  uint8 constant public version = 2;\r\n\r\n  address public beneficiary;\r\n\r\n  // These are for Ethereum backers only\r\n  mapping (address => uint) public contributionsETH;\r\n  mapping (address => uint) public payoutsETH;\r\n\r\n  uint public fundingGoal;     // in wei, the amount we're aiming for\r\n  uint public payoutETH;       // in wei, the amount withdrawn as fee\r\n  uint public amountRaised;    // in wei, the total amount raised\r\n\r\n  address public owner;\r\n  uint    public fee; // the contract fee is 1.5k USD, or ~5.63 ETH\r\n  uint    public feeWithdrawn; // in wei\r\n\r\n  uint public creationTime;\r\n  uint public deadlineBlockNumber;\r\n  bool public open;            // has the funding period started, and contract initialized\r\n\r\n  function LeanFund() {\r\n    owner = msg.sender;\r\n    creationTime = now;\r\n    open = false;\r\n  }\r\n\r\n  // We can only initialize once, but don't add beforeDeadline guard or check deadline\r\n  function initialize(uint _fundingGoalInWei, address _beneficiary, uint _deadlineBlockNumber) {\r\n    if (open || msg.sender != owner) throw; // we can only initialize once\r\n    if (_deadlineBlockNumber < block.number + 40) throw; // deadlines must be at least ten minutes hence\r\n    beneficiary = _beneficiary;\r\n    payoutETH = 0;\r\n    amountRaised = 0;\r\n    fee = 0;\r\n    feeWithdrawn = 0;\r\n    fundingGoal = _fundingGoalInWei;\r\n\r\n    // If we pass in a deadline in the past, set it to be 10 minutes from now.\r\n    deadlineBlockNumber = _deadlineBlockNumber;\r\n    open = true;\r\n  }\r\n\r\n  modifier beforeDeadline() { if ((block.number < deadlineBlockNumber) && open) _; else throw; }\r\n  modifier afterDeadline() { if ((block.number >= deadlineBlockNumber) && open) _; else throw; }\r\n\r\n  // Normal pay-in function, where msg.sender is the contributor\r\n  function() payable beforeDeadline {\r\n    if (msg.value != 1 ether) { throw; } // only accept payments of 1 ETH exactly\r\n    if (payoutsETH[msg.sender] == 0) { // defend against re-entrancy\r\n        contributionsETH[msg.sender] += msg.value; // allow multiple contributions\r\n        amountRaised += msg.value;\r\n    }\r\n  }\r\n\r\n  function getContribution() constant returns (uint retVal) {\r\n    return contributionsETH[msg.sender];\r\n  }\r\n\r\n  /* As a safeguard, if we were able to pay into account without being a contributor\r\n     allow contract owner to clean it up. */\r\n  function safeKill() afterDeadline {\r\n    if ((msg.sender == owner) && (this.balance > amountRaised)) {\r\n      uint amount = this.balance - amountRaised;\r\n      if (owner.send(amount)) {\r\n        open = false; // make this resettable to make testing easier\r\n      }\r\n    }\r\n  }\r\n\r\n  /* Each backer is responsible for their own safe withdrawal, because it costs gas */\r\n  function safeWithdrawal() afterDeadline {\r\n    uint amount = 0;\r\n    if (amountRaised < fundingGoal && payoutsETH[msg.sender] == 0) {\r\n      // Ethereum backers can only withdraw the full amount they put in, and only once\r\n      amount = contributionsETH[msg.sender];\r\n      payoutsETH[msg.sender] += amount;\r\n      contributionsETH[msg.sender] = 0;\r\n      if (!msg.sender.send(amount)) {\r\n        payoutsETH[msg.sender] = 0;\r\n        contributionsETH[msg.sender] = amount;\r\n      }\r\n    } else if (payoutETH == 0) {\r\n      // anyone can withdraw the crowdfunded amount to the beneficiary after the deadline\r\n      fee = amountRaised * 563 / 10000; // 5.63% fee, only after beneficiary has received payment\r\n      amount = amountRaised - fee;\r\n      payoutETH += amount;\r\n      if (!beneficiary.send(amount)) {\r\n        payoutETH = 0;\r\n      }\r\n    } else if (msg.sender == owner && feeWithdrawn == 0) {\r\n      // only the owner can withdraw the fee and any excess funds (rounding errors)\r\n      feeWithdrawn += fee;\r\n      selfdestruct(owner);\r\n    }\r\n  }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"safeKill\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"payoutsETH\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"contributionsETH\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"payoutETH\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundingGoal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"amountRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"deadlineBlockNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"creationTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getContribution\",\"outputs\":[{\"name\":\"retVal\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeWithdrawn\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"open\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"safeWithdrawal\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fundingGoalInWei\",\"type\":\"uint256\"},{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_deadlineBlockNumber\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"}]","ContractName":"LeanFund","CompilerVersion":"v0.4.11+commit.68ef5810","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://4b9b168b133e3ba8a35406436fa32a657d944ad733d336833dd06c001144e964"}]}