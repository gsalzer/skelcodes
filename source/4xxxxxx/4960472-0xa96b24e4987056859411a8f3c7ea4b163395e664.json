{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n/*--------------------------------------------------\r\n\r\n          __  __                                 \r\n    ___  / /_/ /_  ___  ________  __  ______ ___ \r\n   / _ \\/ __/ __ \\/ _ \\/ ___/ _ \\/ / / / __ `__ \\\r\n  /  __/ /_/ / / /  __/ /  /  __/ /_/ / / / / / /\r\n  \\___/\\__/_/ /_/\\___/_/   \\___/\\__,_/_/ /_/ /_/                       \r\n       ____ ___  ____  ____/ /__  _________ \r\n      / __ `__ \\/ __ \\/ __  / _ \\/ ___/ __ \\\r\n     / / / / / / /_/ / /_/ /  __/ /  / / / /\r\n    /_/ /_/ /_/\\____/\\__,_/\\___/_/  /_/ /_/ \r\n\r\n              Ethereum Modern 1.17\r\n             www.ethereummodern.com\r\n        \r\n        *******************************\r\n\r\n\r\n        Ethereum Modern\r\n        ---------------\r\n        ETHMD\r\n        Limited 15M Coins\r\n        18 Decimal\r\n\r\n\r\n        ***********\r\n        * ROADMAP *\r\n        ***********\r\n\r\n       -Stage 1 Pre Sale\r\n        Price: 10,000 ETHMD (Bonus x5) = 1 ETH \r\n        Bonus transaction = 0.001 ETHMD\r\n\r\n       -Stage 2 ICO\r\n        Price: 10,000 ETHMD = 1 ETH\r\n        Bonus transaction = 0.001 ETHMD\r\n\r\n       -Stage 3 Special Sale\r\n        Price: 10,000 ETHMD/X = 1 ETH (X++ ~ payable() > 0.1 ETH)\r\n        Bonus transaction = 0.001 ETHMD\r\n\r\n       -Stage 4 Done\r\n        Price: Closed\r\n        Bonus transaction = 0.01 ETHMD\r\n        \r\n\r\n        **************************\r\n        * ADMIN POSSIBLE ACTIONS *\r\n        **************************\r\n\r\n        1. Start the Ethereum Modern project\r\n        2. Change the Ethereum Modern Stage\r\n\r\n        \"immutable unstoppable\"\r\n        (The Admin cannot modify coin limit, users' balances, lock accounts, etc.)\r\n\r\n        ******************************************************\r\n\r\n        License:\r\n        Public Domain CC0 License.\r\n        https://creativecommons.org/publicdomain/zero/1.0/\r\n\r\n\r\n--------------------------------------------------*/\r\n\r\n\r\nlibrary SafeMath {\r\n    function add(uint a, uint b) internal pure returns (uint c) {\r\n        c = a + b;\r\n        require(c >= a);\r\n    }\r\n    function sub(uint a, uint b) internal pure returns (uint c) {\r\n        require(b <= a);\r\n        c = a - b;\r\n    }\r\n    function mul(uint a, uint b) internal pure returns (uint c) {\r\n        c = a * b;\r\n        require(a == 0 || c / a == b);\r\n    }\r\n    function div(uint a, uint b) internal pure returns (uint c) {\r\n        require(b > 0);\r\n        c = a / b;\r\n    }\r\n}\r\n\r\n    // Interface ERC20\r\ncontract ERC20Interface {\r\n    function totalSupply() public constant returns (uint256);\r\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\r\n    function transfer(address to, uint tokens) public returns (bool success);\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n}\r\n\r\ncontract EthereumModern is ERC20Interface {\r\n    using SafeMath for uint;\r\n\r\n    // Stage 1 Pre Sale Offer\r\n    // Stage 2 ICO\r\n    // Stage 3 Special Stage\r\n    uint private CurrentStage = 1;\r\n    uint256 private stage3divisor = 2;\r\n\r\n    address admin;\r\n    address vault_developers = 0x2E3067e55FE0F78Cc7C04cdA3A4E200619DaA03F;\r\n    address vault_designers = 0xa47100b57e3B5c331FA9b4979945335be7d1E5ba;\r\n    address vault_marketing = 0x308445b1C9349a3E502141FBe77506B7a7e51a95;\r\n    address vault_community = 0x0C5e9AF88D03528F964760b13fe915C661972246;\r\n    address vault_manualSale = 0x4FBC7650e9b6973E9949bBd0e3Aa48D72Fb484d4;\r\n\r\n    // Max Coins 15M (10M Distribution) Unstoppable\r\n    uint256 private MaxCoinsLimit15M = 15000000 * 1000000000000000000;\r\n    \r\n    // 2M Reserved for the Staff\r\n    // 2M Reserved for community\r\n    uint256 private amountPreDonateETHMD = 4000000 * 1000000000000000000;\r\n\r\n    // >1M Manual Sale Promotional\r\n    uint256 private amountManualSaleETHMD = 1125800 * 1000000000000000000;\r\n    \r\n    uint256 private amountPreSaleETHMD = 0;\r\n    uint256 private amountICOETHMD = 0;\r\n    uint256 private amountSpecialETHMD = 0;\r\n    uint256 private amountTransETHMD = 0;\r\n    \r\n    uint256 private amountPreSaleETH = 0;\r\n    uint256 private amountICOETH = 0;\r\n    uint256 private amountSpecialETH = 0;\r\n    \r\n\r\n    string public symbol;\r\n    string public name;\r\n    string public webSite;\r\n    \r\n    uint8 public decimals;\r\n    uint private _totalSupply;\r\n\r\n    mapping(address => uint) balances;\r\n    mapping(address => uint) rewards;\r\n\r\n    function EthereumModern() public {\r\n        \r\n        symbol = \"ETHMD\";\r\n        name = \"Ethereum Modern\";\r\n        webSite = \"www.ethereummodern.com\";\r\n        decimals = 18;\r\n\r\n        // Max Coins 15M (2M Staff / 2M Community / 1M Promotional / 10M Distribution / 1M < RewardTransactionSystem)\r\n        _totalSupply = MaxCoinsLimit15M;\r\n        \r\n        admin = msg.sender;\r\n        \r\n        // 2M Reserved for the Staff\r\n        balances[vault_developers] += amountPreDonateETHMD / 4;\r\n        Transfer(address(0), vault_developers, amountPreDonateETHMD / 4);\r\n        balances[vault_designers] += amountPreDonateETHMD / 4;\r\n        Transfer(address(0), vault_designers, amountPreDonateETHMD / 4);\r\n        \r\n        // 2M Reserved for Community\r\n        balances[vault_community] += amountPreDonateETHMD / 2;\r\n        Transfer(address(0), vault_community, amountPreDonateETHMD / 2);\r\n        \r\n        // 1M Manual Sale Promotional\r\n        balances[vault_manualSale] += amountManualSaleETHMD;\r\n        Transfer(address(0), vault_manualSale, amountManualSaleETHMD);\r\n        \r\n    }\r\n      \r\n    function currentStatus() public constant returns (string)\r\n    {\r\n        if(CurrentStage==1) { \r\n            return \"Stage 1/4. Pre Sale.\";\r\n        }else if (CurrentStage == 2){\r\n            return \"Stage 2/4. ICO Sale.\";\r\n        }else if (CurrentStage == 3){\r\n            return \"Stage 3/4. Special Sale.\";\r\n        }else{\r\n            return \"All working correctly.\";\r\n        }\r\n    }\r\n\r\n    \r\n    function currentAmountReceivedDeposit1Ether18Decimals() public constant returns (uint256)\r\n    {\r\n        uint256 amountETHMD = 0;\r\n        uint256 amountETH = 1000000000000000000 * 10000;\r\n        if(CurrentStage==1) { \r\n            amountETHMD = amountETH.mul(5) ;\r\n        }else if (CurrentStage == 2){\r\n            amountETHMD = amountETH ;\r\n        }else if (CurrentStage == 3){\r\n            amountETHMD = amountETH.div(stage3divisor);\r\n        }\r\n        return amountETHMD;\r\n    }\r\n\r\n    function currentCoinsCreated18Decimals() public constant returns (uint256)\r\n    {\r\n        return amountPreSaleETHMD + \r\n               amountICOETHMD + \r\n               amountSpecialETHMD + \r\n               amountPreDonateETHMD + \r\n               amountManualSaleETHMD + \r\n               amountTransETHMD;\r\n    }\r\n\r\n    function currentCoinsCreatedInteger() public constant returns (uint256)\r\n    {\r\n        return (amountPreSaleETHMD + \r\n                amountICOETHMD + \r\n                amountSpecialETHMD + \r\n                amountPreDonateETHMD + \r\n                amountManualSaleETHMD + \r\n                amountTransETHMD).div(1000000000000000000);\r\n    }\r\n\r\n    function CoinsLimitUnalterableInteger() public constant returns (uint256)\r\n    {\r\n        return MaxCoinsLimit15M.div(1000000000000000000);\r\n    }\r\n\r\n    function currentCoinsCreatedPercentage() public constant returns (uint256)\r\n    {\r\n        return (amountPreSaleETHMD + \r\n                amountICOETHMD +\r\n                amountSpecialETHMD + \r\n                amountPreDonateETHMD + \r\n                amountManualSaleETHMD + \r\n                amountTransETHMD).mul(1000).div(MaxCoinsLimit15M).mul(100).div(1000) ;\r\n    }\r\n\r\n    function totalSupply() public constant returns (uint256) {\r\n        return _totalSupply  - balances[address(0)];\r\n    }\r\n\r\n    function balanceOf(address tokenOwner) public constant returns (uint balance) {\r\n        return balances[tokenOwner];\r\n    }\r\n\r\n    function transfer(address to, uint tokens) public returns (bool success) {\r\n\r\n        /*********************/\r\n        /* Transaction Check */\r\n        /*********************/\r\n\r\n        require(to != 0x0);\r\n        require(tokens > 0);\r\n        require(balances[msg.sender] >= tokens);\r\n        require(balances[to] + tokens > balances[to]);\r\n\r\n        /***************/\r\n        /* Transaction */\r\n        /***************/\r\n\r\n        balances[msg.sender] = balances[msg.sender].sub(tokens);\r\n        balances[to] = balances[to].add(tokens);\r\n\r\n        Transfer(msg.sender, to, tokens);\r\n\r\n        /*********************************************/\r\n        /* Ethereum Modern Reward Transaction System */\r\n        /*********************************************/\r\n\r\n            uint256 rewardvalue = 1000000000000000;\r\n            if (CurrentStage==4) { rewardvalue = 10000000000000000; }\r\n            if ( amountPreSaleETHMD + \r\n                 amountICOETHMD + \r\n                 amountSpecialETHMD + \r\n                 amountPreDonateETHMD + \r\n                 amountManualSaleETHMD + \r\n                 rewardvalue + \r\n                 amountTransETHMD + 1000000000000000000\r\n                 <= MaxCoinsLimit15M ) {\r\n                if (tokens > 100 * 1000000000000000000) {\r\n                    // 1M Reward Max\r\n                    if (amountTransETHMD < 1000000 * 1000000000000000000 ) {\r\n                        if (rewards[msg.sender] < 10 ) { \r\n                        rewards[msg.sender]++;\r\n                        amountTransETHMD += rewardvalue;\r\n                        balances[msg.sender] += rewardvalue;\r\n                        Transfer(address(0), msg.sender, rewardvalue);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n        return true;\r\n    }\r\n\r\n        /*****************/\r\n        /* Stages System */\r\n        /*****************/\r\n\r\n    function nextStage() public {\r\n        \r\n        require(msg.sender == admin);\r\n        \r\n        if (CurrentStage == 1) {\r\n            recoverVault(amountPreSaleETH.div(3).div(3));\r\n            CurrentStage = 2;\r\n        }else if( CurrentStage == 2) {\r\n            recoverVault(amountPreSaleETH.div(3).div(3));\r\n            recoverVault(amountICOETH.div(2).div(3));\r\n            CurrentStage = 3;\r\n        }else if( CurrentStage == 3) {\r\n            recoverVault(amountPreSaleETH.div(3).div(3));\r\n            recoverVault(amountICOETH.div(2).div(3));\r\n            recoverVault(amountSpecialETH.div(3));\r\n            CurrentStage = 4;\r\n        }else if( CurrentStage == 4) {\r\n            stage4();\r\n        }\r\n    }\r\n\r\n    function stage4() private {\r\n\r\n        // if > 1M = exced for community\r\n        // if < 1M = reward for transactions\r\n\r\n        if ( amountPreSaleETHMD + \r\n            amountICOETHMD + \r\n            amountSpecialETHMD + \r\n            amountPreDonateETHMD + \r\n            amountManualSaleETHMD + \r\n            1000000 * 1000000000000000000 + \r\n            amountTransETHMD \r\n            <= MaxCoinsLimit15M ) {\r\n\r\n            balances[vault_community] += 1000000 * 1000000000000000000;\r\n            Transfer(address(0), vault_community, 1000000 * 1000000000000000000);\r\n            amountPreDonateETHMD += 1000000 * 1000000000000000000;\r\n\r\n        }\r\n    }\r\n\r\n    function recoverVault(uint256 founds) private {\r\n        vault_developers.transfer(founds);\r\n        vault_designers.transfer(founds);\r\n        vault_marketing.transfer(founds);\r\n    }\r\n\r\n        /******************/\r\n        /* Payable System */\r\n        /******************/\r\n\r\n    function () public payable {\r\n\r\n      require(CurrentStage < 4);\r\n      require( msg.value >= 1* (1 ether) / 100 ); // 0.01 ether min\r\n          \r\n          uint256 amountETHMD = 0;\r\n          uint256 amountETH = msg.value;\r\n          \r\n          if(CurrentStage==1) { \r\n              amountETHMD = (amountETH * 10000).mul(5);\r\n          }else if (CurrentStage == 2){\r\n              amountETHMD = amountETH * 10000;\r\n          }else if (CurrentStage == 3){\r\n              amountETHMD = (amountETH * 10000).div(stage3divisor) ;\r\n          }\r\n          \r\n      require(  amountPreSaleETHMD + \r\n                amountICOETHMD + \r\n                amountSpecialETHMD + \r\n                amountPreDonateETHMD + \r\n                amountManualSaleETHMD + \r\n                amountETHMD + \r\n                amountTransETHMD \r\n                <= MaxCoinsLimit15M );\r\n\r\n          if(CurrentStage==1) { \r\n              amountPreSaleETHMD += amountETHMD;\r\n              amountPreSaleETH += amountETH;\r\n          }else if (CurrentStage == 2){\r\n              amountICOETHMD += amountETHMD;\r\n              amountICOETH += amountETH;\r\n          }else if (CurrentStage == 3){\r\n              amountSpecialETHMD += amountETHMD;\r\n              amountSpecialETH += amountETH;\r\n              if (amountETH >= 100000000000000000) { // 0.1 eth\r\n              stage3divisor += 1;\r\n              }\r\n          }\r\n\r\n        balances[msg.sender] += amountETHMD;\r\n        Transfer(address(0), msg.sender, amountETHMD);\r\n         \r\n    }\r\n\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"webSite\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentAmountReceivedDeposit1Ether18Decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentCoinsCreatedPercentage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentCoinsCreatedInteger\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentCoinsCreated18Decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"nextStage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CoinsLimitUnalterableInteger\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"EthereumModern","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://098bd93d276e0fa0f2f232dbc542668e38024ba54ae502598f12fde0c4e801b5"}]}