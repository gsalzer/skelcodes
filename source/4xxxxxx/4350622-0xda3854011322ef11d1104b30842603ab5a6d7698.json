{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13;\r\n\r\ncontract Ownable {\r\n\r\n  address public owner;\r\n\r\n\r\n\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n\r\n\r\n\r\n  /**\r\n\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n\r\n   * account.\r\n\r\n   */\r\n\r\n  function Ownable() {\r\n\r\n    owner = msg.sender;\r\n\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n  /**\r\n\r\n   * @dev Throws if called by any account other than the owner.\r\n\r\n   */\r\n\r\n  modifier onlyOwner() {\r\n\r\n    require(msg.sender == owner);\r\n\r\n    _;\r\n\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n  /**\r\n\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n\r\n   * @param newOwner The address to transfer ownership to.\r\n\r\n   */\r\n\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n\r\n    require(newOwner != address(0));\r\n\r\n    OwnershipTransferred(owner, newOwner);\r\n\r\n    owner = newOwner;\r\n\r\n  }\r\n\r\n\r\n\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n\r\n    uint256 c = a * b;\r\n\r\n    assert(a == 0 || c / a == b);\r\n\r\n    return c;\r\n\r\n  }\r\n\r\n\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n\r\n    uint256 c = a / b;\r\n\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n    return c;\r\n\r\n  }\r\n\r\n\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n\r\n    assert(b <= a);\r\n\r\n    return a - b;\r\n\r\n  }\r\n\r\n\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n\r\n    uint256 c = a + b;\r\n\r\n    assert(c >= a);\r\n\r\n    return c;\r\n\r\n  }\r\n\r\n}\r\n\r\ncontract RefundVault is Ownable {\r\n\r\n  using SafeMath for uint256;\r\n\r\n\r\n\r\n  enum State { Active, Refunding, Closed }\r\n\r\n\r\n\r\n  mapping (address => uint256) public deposited;\r\n\r\n  address public wallet;\r\n\r\n  State public state;\r\n\r\n\r\n\r\n  event Closed();\r\n\r\n  event RefundsEnabled();\r\n\r\n  event Refunded(address indexed beneficiary, uint256 weiAmount);\r\n\r\n\r\n\r\n  function RefundVault(address _wallet) {\r\n\r\n    require(_wallet != 0x0);\r\n\r\n\r\n\r\n    wallet = _wallet;\r\n\r\n    state = State.Active;\r\n\r\n  }\r\n\r\n\r\n\r\n  function deposit(address investor) onlyOwner public payable {\r\n\r\n    require(state == State.Active);\r\n\r\n    deposited[investor] = deposited[investor].add(msg.value);\r\n\r\n  }\r\n\r\n\r\n\r\n  function close() onlyOwner public {\r\n\r\n    require(state == State.Active);\r\n\r\n\r\n\r\n    state = State.Closed;\r\n\r\n    Closed();\r\n\r\n    wallet.transfer(this.balance);\r\n\r\n  }\r\n\r\n\r\n\r\n  function enableRefunds() onlyOwner public {\r\n\r\n    require(state == State.Active);\r\n\r\n\r\n\r\n    state = State.Refunding;\r\n\r\n    RefundsEnabled();\r\n\r\n  }\r\n\r\n\r\n\r\n  function finalizeEnableRefunds() onlyOwner public {\r\n\r\n    require(state == State.Refunding);\r\n\r\n    state = State.Closed;\r\n\r\n    Closed();\r\n\r\n    wallet.transfer(this.balance);\r\n\r\n  }\r\n\r\n\r\n\r\n  function refund(address investor) onlyOwner public {\r\n\r\n    require(state == State.Refunding);\r\n\r\n\r\n\r\n    uint256 depositedValue = deposited[investor];\r\n\r\n    deposited[investor] = 0;\r\n\r\n    investor.transfer(depositedValue);\r\n\r\n    Refunded(investor, depositedValue);\r\n\r\n  }\r\n\r\n\r\n\r\n  function finalized() public returns(bool) {\r\n\r\n    return state != State.Active;\r\n\r\n  }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"close\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"enableRefunds\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalizeEnableRefunds\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"deposited\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"investor\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"investor\",\"type\":\"address\"}],\"name\":\"refund\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"}],\"payable\":false,\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Closed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"RefundsEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"weiAmount\",\"type\":\"uint256\"}],\"name\":\"Refunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"RefundVault","CompilerVersion":"v0.4.15+commit.bbb8e64f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000004cf6551a4e0810c32dedbd76228b715f2598a33","Library":"","SwarmSource":"bzzr://51369b87d7a7adabdddb980799bd7afe75b42c2b5493d449366666c2c29e04b4"}]}