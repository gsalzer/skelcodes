{"status":"1","message":"OK","result":[{"SourceCode":"library SafeMath {\r\n    function mul(uint a, uint b) internal returns (uint) {\r\n        uint c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n    function div(uint a, uint b) internal returns (uint) {\r\n        assert(b > 0);\r\n        uint c = a / b;\r\n        assert(a == b * c + a % b);\r\n        return c;\r\n    }\r\n    function sub(uint a, uint b) internal returns (uint) {\r\n        assert(b <= a);\r\n        return a - b;\r\n     }\r\n    function add(uint a, uint b) internal returns (uint) {\r\n         uint c = a + b;\r\n         assert(c >= a);\r\n         return c;\r\n     }\r\n    function max64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n        return a >= b ? a : b;\r\n     }\r\n\r\n    function min64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    function max256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    function min256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n}\r\n\r\ncontract tokenPCT {\r\n    /* Public variables of the token */\r\n        string public name;\r\n        string public symbol;\r\n        uint8 public decimals;\r\n        uint256 public totalSupply = 0;\r\n\r\n\r\n        function tokenPCT (string _name, string _symbol, uint8 _decimals){\r\n            name = _name;\r\n            symbol = _symbol;\r\n            decimals = _decimals;\r\n\r\n        }\r\n    /* This creates an array with all balances */\r\n        mapping (address => uint256) public balanceOf;\r\n\r\n}\r\n\r\ncontract Presale is tokenPCT {\r\n\r\n        using SafeMath for uint;\r\n        string name = 'Presale CryptoTickets Token';\r\n        string symbol = 'PCT';\r\n        uint8 decimals = 18;\r\n        address manager;\r\n        address public ico;\r\n\r\n        function Presale (address _manager) tokenPCT (name, symbol, decimals){\r\n             manager = _manager;\r\n\r\n        }\r\n\r\n        event Transfer(address _from, address _to, uint256 amount);\r\n        event Burn(address _from, uint256 amount);\r\n\r\n        modifier onlyManager{\r\n             require(msg.sender == manager);\r\n            _;\r\n        }\r\n\r\n        modifier onlyIco{\r\n             require(msg.sender == ico);\r\n            _;\r\n        }\r\n        function mintTokens(address _investor, uint256 _mintedAmount) public onlyManager {\r\n             balanceOf[_investor] = balanceOf[_investor].add(_mintedAmount);\r\n             totalSupply = totalSupply.add(_mintedAmount);\r\n             Transfer(this, _investor, _mintedAmount);\r\n\r\n        }\r\n\r\n        function burnTokens(address _owner) public onlyIco{\r\n             uint  tokens = balanceOf[_owner];\r\n             require(balanceOf[_owner] != 0);\r\n             balanceOf[_owner] = 0;\r\n             totalSupply = totalSupply.sub(tokens);\r\n             Burn(_owner, tokens);\r\n        }\r\n\r\n        function setIco(address _ico) onlyManager{\r\n            ico = _ico;\r\n        }\r\n}\r\n\r\ncontract ERC20 {\r\n    uint public totalSupply = 0;\r\n\r\n    mapping(address => uint256) balances;\r\n    mapping(address => mapping (address => uint256)) allowed;\r\n\r\n    function balanceOf(address _owner) constant returns (uint);\r\n    function transfer(address _to, uint _value) returns (bool);\r\n    function transferFrom(address _from, address _to, uint _value) returns (bool);\r\n    function approve(address _spender, uint _value) returns (bool);\r\n    function allowance(address _owner, address _spender) constant returns (uint);\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n\r\n} // Functions of ERC20 standard\r\n\r\n\r\n\r\ncontract CryptoTicketsICO {\r\n    using SafeMath for uint;\r\n\r\n    uint public constant Tokens_For_Sale = 525000000*1e18; // Tokens for Sale without bonuses(HardCap)\r\n\r\n    // Style: Caps should not be used for vars, only for consts!\r\n    uint public Rate_Eth = 298; // Rate USD per ETH\r\n    uint public Token_Price = 25 * Rate_Eth; // TKT per ETH\r\n    uint public SoldNoBonuses = 0; //Sold tokens without bonuses\r\n\r\n\r\n    event LogStartICO();\r\n    event LogPauseICO();\r\n    event LogFinishICO(address bountyFund, address advisorsFund, address itdFund, address storageFund);\r\n    event LogBuyForInvestor(address investor, uint tktValue, string txHash);\r\n    event LogReplaceToken(address investor, uint tktValue);\r\n\r\n    TKT public tkt = new TKT(this);\r\n    Presale public presale;\r\n\r\n    address public Company;\r\n    address public BountyFund;\r\n    address public AdvisorsFund;\r\n    address public ItdFund;\r\n    address public StorageFund;\r\n\r\n    address public Manager; // Manager controls contract\r\n    address public Controller_Address1; // First address that is used to buy tokens for other cryptos\r\n    address public Controller_Address2; // Second address that is used to buy tokens for other cryptos\r\n    address public Controller_Address3; // Third address that is used to buy tokens for other cryptos\r\n    modifier managerOnly { require(msg.sender == Manager); _; }\r\n    modifier controllersOnly { require((msg.sender == Controller_Address1) || (msg.sender == Controller_Address2) || (msg.sender == Controller_Address3)); _; }\r\n\r\n    uint startTime = 0;\r\n    uint bountyPart = 2; // 2% of TotalSupply for BountyFund\r\n    uint advisorsPart = 35; //3,5% of TotalSupply for AdvisorsFund\r\n    uint itdPart = 15; //15% of TotalSupply for ItdFund\r\n    uint storagePart = 3; //3% of TotalSupply for StorageFund\r\n    uint icoAndPOfPart = 765; // 76,5% of TotalSupply for PublicICO and PrivateOffer\r\n    enum StatusICO { Created, Started, Paused, Finished }\r\n    StatusICO statusICO = StatusICO.Created;\r\n\r\n\r\n    function CryptoTicketsICO(address _presale, address _Company, address _BountyFund, address _AdvisorsFund, address _ItdFund, address _StorageFund, address _Manager, address _Controller_Address1, address _Controller_Address2, address _Controller_Address3){\r\n       presale = Presale(_presale);\r\n       Company = _Company;\r\n       BountyFund = _BountyFund;\r\n       AdvisorsFund = _AdvisorsFund;\r\n       ItdFund = _ItdFund;\r\n       StorageFund = _StorageFund;\r\n       Manager = _Manager;\r\n       Controller_Address1 = _Controller_Address1;\r\n       Controller_Address2 = _Controller_Address2;\r\n       Controller_Address3 = _Controller_Address3;\r\n    }\r\n\r\n// function for changing rate of ETH and price of token\r\n\r\n\r\n    function setRate(uint _RateEth) external managerOnly {\r\n       Rate_Eth = _RateEth;\r\n       Token_Price = 25*Rate_Eth;\r\n    }\r\n\r\n\r\n//ICO status functions\r\n\r\n    function startIco() external managerOnly {\r\n       require(statusICO == StatusICO.Created || statusICO == StatusICO.Paused);\r\n       if(statusICO == StatusICO.Created)\r\n       {\r\n         startTime = now;\r\n       }\r\n       LogStartICO();\r\n       statusICO = StatusICO.Started;\r\n    }\r\n\r\n    function pauseIco() external managerOnly {\r\n       require(statusICO == StatusICO.Started);\r\n       statusICO = StatusICO.Paused;\r\n       LogPauseICO();\r\n    }\r\n\r\n\r\n    function finishIco() external managerOnly { // Funds for minting of tokens\r\n\r\n       require(statusICO == StatusICO.Started);\r\n\r\n       uint alreadyMinted = tkt.totalSupply(); //=PublicICO+PrivateOffer\r\n       uint totalAmount = alreadyMinted * 1000 / icoAndPOfPart;\r\n\r\n\r\n       tkt.mint(BountyFund, bountyPart * totalAmount / 100); // 2% for Bounty\r\n       tkt.mint(AdvisorsFund, advisorsPart * totalAmount / 1000); // 3.5% for Advisors\r\n       tkt.mint(ItdFund, itdPart * totalAmount / 100); // 15% for Ticketscloud ltd\r\n       tkt.mint(StorageFund, storagePart * totalAmount / 100); // 3% for Storage\r\n\r\n       tkt.defrost();\r\n\r\n       statusICO = StatusICO.Finished;\r\n       LogFinishICO(BountyFund, AdvisorsFund, ItdFund, StorageFund);\r\n    }\r\n\r\n// function that buys tokens when investor sends ETH to address of ICO\r\n    function() external payable {\r\n\r\n       buy(msg.sender, msg.value * Token_Price);\r\n    }\r\n\r\n// function for buying tokens to investors who paid in other cryptos\r\n\r\n    function buyForInvestor(address _investor, uint _tktValue, string _txHash) external controllersOnly {\r\n       buy(_investor, _tktValue);\r\n       LogBuyForInvestor(_investor, _tktValue, _txHash);\r\n    }\r\n\r\n//function for buying tokens for presale investors\r\n\r\n    function replaceToken(address _investor) managerOnly{\r\n         require(statusICO != StatusICO.Finished);\r\n         uint pctTokens = presale.balanceOf(_investor);\r\n         require(pctTokens > 0);\r\n         presale.burnTokens(_investor);\r\n         tkt.mint(_investor, pctTokens);\r\n\r\n         LogReplaceToken(_investor, pctTokens);\r\n    }\r\n// internal function for buying tokens\r\n\r\n    function buy(address _investor, uint _tktValue) internal {\r\n       require(statusICO == StatusICO.Started);\r\n       require(_tktValue > 0);\r\n\r\n\r\n       uint bonus = getBonus(_tktValue);\r\n\r\n       uint _total = _tktValue.add(bonus);\r\n\r\n       require(SoldNoBonuses + _tktValue <= Tokens_For_Sale);\r\n       tkt.mint(_investor, _total);\r\n\r\n       SoldNoBonuses = SoldNoBonuses.add(_tktValue);\r\n    }\r\n\r\n// function that calculates bonus\r\n    function getBonus(uint _value) public constant returns (uint) {\r\n       uint bonus = 0;\r\n       uint time = now;\r\n       if(time >= startTime && time <= startTime + 48 hours)\r\n       {\r\n\r\n            bonus = _value * 20/100;\r\n        }\r\n\r\n       if(time > startTime + 48 hours && time <= startTime + 96 hours)\r\n       {\r\n            bonus = _value * 10/100;\r\n       }\r\n\r\n       if(time > startTime + 96 hours && time <= startTime + 168 hours)\r\n       {\r\n\r\n            bonus = _value * 5/100;\r\n        }\r\n\r\n       return bonus;\r\n    }\r\n\r\n//function to withdraw ETH from smart contract\r\n\r\n    // SUGGESTION:\r\n    // even if you lose you manager keys -> you still will be able to get ETH\r\n    function withdrawEther(uint256 _value) external managerOnly {\r\n       require(statusICO == StatusICO.Finished);\r\n       Company.transfer(_value);\r\n    }\r\n\r\n}\r\n\r\ncontract TKT  is ERC20 {\r\n    using SafeMath for uint;\r\n\r\n    string public name = \"CryptoTickets COIN\";\r\n    string public symbol = \"TKT\";\r\n    uint public decimals = 18;\r\n\r\n    address public ico;\r\n\r\n    event Burn(address indexed from, uint256 value);\r\n\r\n    bool public tokensAreFrozen = true;\r\n\r\n    modifier icoOnly { require(msg.sender == ico); _; }\r\n\r\n    function TKT(address _ico) {\r\n       ico = _ico;\r\n    }\r\n\r\n\r\n    function mint(address _holder, uint _value) external icoOnly {\r\n       require(_value != 0);\r\n       balances[_holder] = balances[_holder].add(_value);\r\n       totalSupply = totalSupply.add(_value);\r\n       Transfer(0x0, _holder, _value);\r\n    }\r\n\r\n\r\n    function defrost() external icoOnly {\r\n       tokensAreFrozen = false;\r\n    }\r\n\r\n    function burn(uint256 _value) {\r\n       require(!tokensAreFrozen);\r\n       balances[msg.sender] = balances[msg.sender].sub(_value);\r\n       totalSupply = totalSupply.sub(_value);\r\n       Burn(msg.sender, _value);\r\n    }\r\n\r\n\r\n    function balanceOf(address _owner) constant returns (uint256) {\r\n         return balances[_owner];\r\n    }\r\n\r\n\r\n    function transfer(address _to, uint256 _amount) returns (bool) {\r\n        require(!tokensAreFrozen);\r\n        balances[msg.sender] = balances[msg.sender].sub(_amount);\r\n        balances[_to] = balances[_to].add(_amount);\r\n        Transfer(msg.sender, _to, _amount);\r\n        return true;\r\n    }\r\n\r\n\r\n    function transferFrom(address _from, address _to, uint256 _amount) returns (bool) {\r\n        require(!tokensAreFrozen);\r\n        balances[_from] = balances[_from].sub(_amount);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\r\n        balances[_to] = balances[_to].add(_amount);\r\n        Transfer(_from, _to, _amount);\r\n        return true;\r\n     }\r\n\r\n\r\n    function approve(address _spender, uint256 _amount) returns (bool) {\r\n        // To change the approve amount you first have to reduce the addresses`\r\n        //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n        //  already 0 to mitigate the race condition described here:\r\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n        require((_amount == 0) || (allowed[msg.sender][_spender] == 0));\r\n\r\n        allowed[msg.sender][_spender] = _amount;\r\n        Approval(msg.sender, _spender, _amount);\r\n        return true;\r\n    }\r\n\r\n\r\n    function allowance(address _owner, address _spender) constant returns (uint256) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_investor\",\"type\":\"address\"},{\"name\":\"_tktValue\",\"type\":\"uint256\"},{\"name\":\"_txHash\",\"type\":\"string\"}],\"name\":\"buyForInvestor\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"StorageFund\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Tokens_For_Sale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Controller_Address1\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_RateEth\",\"type\":\"uint256\"}],\"name\":\"setRate\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Controller_Address3\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"withdrawEther\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BountyFund\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"getBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Company\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tkt\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Token_Price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Manager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startIco\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ItdFund\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Controller_Address2\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pauseIco\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_investor\",\"type\":\"address\"}],\"name\":\"replaceToken\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Rate_Eth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishIco\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SoldNoBonuses\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"AdvisorsFund\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presale\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_presale\",\"type\":\"address\"},{\"name\":\"_Company\",\"type\":\"address\"},{\"name\":\"_BountyFund\",\"type\":\"address\"},{\"name\":\"_AdvisorsFund\",\"type\":\"address\"},{\"name\":\"_ItdFund\",\"type\":\"address\"},{\"name\":\"_StorageFund\",\"type\":\"address\"},{\"name\":\"_Manager\",\"type\":\"address\"},{\"name\":\"_Controller_Address1\",\"type\":\"address\"},{\"name\":\"_Controller_Address2\",\"type\":\"address\"},{\"name\":\"_Controller_Address3\",\"type\":\"address\"}],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"LogStartICO\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"LogPauseICO\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"bountyFund\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"advisorsFund\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"itdFund\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"storageFund\",\"type\":\"address\"}],\"name\":\"LogFinishICO\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tktValue\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"txHash\",\"type\":\"string\"}],\"name\":\"LogBuyForInvestor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tktValue\",\"type\":\"uint256\"}],\"name\":\"LogReplaceToken\",\"type\":\"event\"}]","ContractName":"CryptoTicketsICO","CompilerVersion":"v0.4.15-nightly.2017.7.31+commit.93f90eb2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000d0e8b1d7e6378c0a2228e267d96db9c30b5eace90000000000000000000000001b3de683a4ff93457b0a27986361a5090e3fbb50000000000000000000000000c1ad4aebc470176e5ecc2c87717096aa17e0af1a000000000000000000000000df99823dac53d2d4b993f0391d8e88aa487c2f310000000000000000000000000760bfd74512ed0f143fcc67c957087ba787b3a60000000000000000000000002bb433d6a7b6bea34f741c8038a8d42edef23756000000000000000000000000063954ec616acd6363fac0040ba4c9aace7136ca0000000000000000000000008a434dace950818f811694523632baccc668ce490000000000000000000000003d707a155a049089d5e347b4bce92593a6c6575900000000000000000000000060ee1f755f92a69720437be52ddfd3eb360cad3d","Library":"","SwarmSource":"bzzr://0ac3ff34311f021321aab483a2d78074b8e00401e2e5ce47d2e9a458aa64cb26"}]}