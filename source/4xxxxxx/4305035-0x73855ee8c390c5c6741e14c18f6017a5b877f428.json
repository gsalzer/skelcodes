{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.16;\r\n\r\n// ----------------------------------------------------------------------------\r\n// GazeCoin Crowdsale Whitelist\r\n//\r\n// Deployed to : 0x73855EE8C390C5c6741e14c18F6017A5b877F428\r\n//\r\n// Enjoy.\r\n//\r\n// (c) GazeCoin 2017. The MIT Licence.\r\n// ----------------------------------------------------------------------------\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// Owned contract\r\n// ----------------------------------------------------------------------------\r\ncontract Owned {\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Current owner, and proposed new owner\r\n    // ------------------------------------------------------------------------\r\n    address public owner;\r\n    address public newOwner;\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Constructor - assign creator as the owner\r\n    // ------------------------------------------------------------------------\r\n    function Owned() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Modifier to mark that a function can only be executed by the owner\r\n    // ------------------------------------------------------------------------\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Owner can initiate transfer of contract to a new owner\r\n    // ------------------------------------------------------------------------\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        newOwner = _newOwner;\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // New owner has to accept transfer of contract\r\n    // ------------------------------------------------------------------------\r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner);\r\n        OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = 0x0;\r\n    }\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// Administrators, borrowed from Gimli\r\n// ----------------------------------------------------------------------------\r\ncontract Administered is Owned {\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Mapping of administrators\r\n    // ------------------------------------------------------------------------\r\n    mapping (address => bool) public administrators;\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Add and delete adminstrator events\r\n    // ------------------------------------------------------------------------\r\n    event AdminstratorAdded(address adminAddress);\r\n    event AdminstratorRemoved(address adminAddress);\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Modifier for functions that can only be executed by adminstrator\r\n    // ------------------------------------------------------------------------\r\n    modifier onlyAdministrator() {\r\n        require(administrators[msg.sender] || owner == msg.sender);\r\n        _;\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Owner can add a new administrator\r\n    // ------------------------------------------------------------------------\r\n    function addAdministrators(address _adminAddress) public onlyOwner {\r\n        administrators[_adminAddress] = true;\r\n        AdminstratorAdded(_adminAddress);\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Owner can remove an administrator\r\n    // ------------------------------------------------------------------------\r\n    function removeAdministrators(address _adminAddress) public onlyOwner {\r\n        delete administrators[_adminAddress];\r\n        AdminstratorRemoved(_adminAddress);\r\n    }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// ERC20 Token, with the addition of symbol, name and decimals\r\n// ----------------------------------------------------------------------------\r\ncontract GazeCoinCrowdsaleWhitelist is Administered {\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Administrators can add until sealed\r\n    // ------------------------------------------------------------------------\r\n    bool public sealed;\r\n\r\n    // ------------------------------------------------------------------------\r\n    // The whitelist, true for enabled, false for disabled\r\n    // ------------------------------------------------------------------------\r\n    mapping(address => bool) public whitelist;\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Events\r\n    // ------------------------------------------------------------------------\r\n    event Whitelisted(address indexed whitelistedAddress, bool enabled);\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Constructor\r\n    // ------------------------------------------------------------------------\r\n    function GazeCoinCrowdsaleWhitelist() public {\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Whitelist\r\n    // ------------------------------------------------------------------------\r\n    function enable(address[] _addresses) public onlyAdministrator {\r\n        require(!sealed);\r\n        require(_addresses.length != 0);\r\n        for (uint i = 0; i < _addresses.length; i++) {\r\n            require(_addresses[i] != 0x0);\r\n            if (!whitelist[_addresses[i]]) {\r\n                whitelist[_addresses[i]] = true;\r\n                Whitelisted(_addresses[i], true);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Disable whitelisting\r\n    // ------------------------------------------------------------------------\r\n    function disable(address[] _addresses) public onlyAdministrator {\r\n        require(!sealed);\r\n        require(_addresses.length != 0);\r\n        for (uint i = 0; i < _addresses.length; i++) {\r\n            require(_addresses[i] != 0x0);\r\n            if (whitelist[_addresses[i]]) {\r\n                whitelist[_addresses[i]] = false;\r\n                Whitelisted(_addresses[i], false);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // After sealing, no more whitelisting is possible\r\n    // ------------------------------------------------------------------------\r\n    function seal() public onlyOwner {\r\n        require(!sealed);\r\n        sealed = true;\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Don't accept ethers - no payable modifier\r\n    // ------------------------------------------------------------------------\r\n    function () public {\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_addresses\",\"type\":\"address[]\"}],\"name\":\"enable\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_adminAddress\",\"type\":\"address\"}],\"name\":\"removeAdministrators\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"seal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"administrators\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_adminAddress\",\"type\":\"address\"}],\"name\":\"addAdministrators\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sealed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addresses\",\"type\":\"address[]\"}],\"name\":\"disable\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"whitelistedAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"Whitelisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"adminAddress\",\"type\":\"address\"}],\"name\":\"AdminstratorAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"adminAddress\",\"type\":\"address\"}],\"name\":\"AdminstratorRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"GazeCoinCrowdsaleWhitelist","CompilerVersion":"v0.4.17+commit.bdeb9e52","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://04f617b79ffc6153fc87aab2ba4f6f02fbe4fca64906f1d6f4f94726b214286a"}]}