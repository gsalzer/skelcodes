{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.18;\r\n\r\ncontract SafeMath {\r\n    function safeMul(uint a, uint b) pure internal returns(uint) {\r\n        uint c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function safeSub(uint a, uint b) pure  internal returns(uint) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function safeAdd(uint a, uint b) pure internal returns(uint) {\r\n        uint c = a + b;\r\n        assert(c >= a && c >= b);\r\n        return c;\r\n    }\r\n    \r\n    \r\n}\r\n\r\n\r\ncontract ERC20 {\r\n\r\n    uint public totalSupply;\r\n\r\n    function balanceOf(address who) public constant returns(uint256);\r\n\r\n    function allowance(address owner, address spender) public constant returns(uint);\r\n\r\n    function transferFrom(address from, address to, uint value) public  returns(bool ok);\r\n\r\n    function approve(address spender, uint value) public returns(bool ok);\r\n\r\n    function transfer(address to, uint value) public returns(bool ok);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n\r\n}\r\ncontract BeefLedger is ERC20, SafeMath\r\n{\r\n      string public constant name = \"BeefLedger\";\r\n  \r\n    \t// Symbol of token\r\n      string public constant symbol = \"BLT\"; \r\n      uint8 public constant decimals = 6;  // decimal places\r\n    \r\n      uint public totalSupply = 888888888 * 10**6 ; // total supply includes decimal upto 6 places\r\n      \r\n      mapping(address => uint) balances;\r\n     \r\n      mapping (address => mapping (address => uint)) allowed;\r\n      address owner;\r\n      // ico dates\r\n      uint256 pre_date;\r\n      uint256 ico_first;\r\n      uint256 ico_second;\r\n      uint token_supply_forperiod;\r\n      bool ico_status = false;\r\n       bool stopped = false;\r\n      uint256 price_token;\r\n      event MESSAGE(string m);\r\n       event ADDRESS(address addres, uint balance);\r\n      \r\n       // Functions with this modifier can only be executed by the owner\r\n      modifier onlyOwner() {\r\n         if (msg.sender != owner) {\r\n           revert();\r\n          }\r\n         _;\r\n        }\r\n      \r\n      function BeefLedger() public\r\n      {\r\n          owner = msg.sender;\r\n       }\r\n      \r\n       // Emergency Pause and Release is called by Owner in case of Emergency\r\n    \r\n    function emergencyPause() external onlyOwner{\r\n        stopped = true;\r\n    }\r\n     \r\n     function releasePause() external onlyOwner{\r\n         stopped = false;\r\n     }\r\n     \r\n      function start_ICO() public onlyOwner\r\n      {\r\n          ico_status = true;\r\n          stopped = false;\r\n          pre_date = now + 1 days;\r\n          ico_first = pre_date + 70 days;\r\n          ico_second = ico_first + 105 days;\r\n          token_supply_forperiod = 488888889 *10**6; \r\n          balances[address(this)] = token_supply_forperiod;\r\n      }\r\n      function endICOs() public onlyOwner\r\n      {\r\n           ico_status = false;\r\n          uint256 balowner = 399999999 * 10 **6;\r\n           balances[owner] = balances[address(this)] + balowner;\r\n           balances[address(this)] = 0;\r\n         Transfer(address(this), msg.sender, balances[owner]);\r\n      }\r\n\r\n\r\n    function () public payable{ \r\n      require (!stopped && msg.sender != owner && ico_status);\r\n       if(now <= pre_date)\r\n         {\r\n             \r\n             price_token =  .0001167 ether;\r\n         }\r\n         else if(now > pre_date && now <= ico_first)\r\n         {\r\n             \r\n             price_token =  .0001667 ether;\r\n         }\r\n         else if(now > ico_first && now <= ico_second)\r\n         {\r\n             \r\n             price_token =  .0002167 ether;\r\n         }\r\n       \r\nelse {\r\n    revert();\r\n}\r\n       \r\n         uint no_of_tokens = (msg.value * 10 **6 ) / price_token ;\r\n          require(balances[address(this)] >= no_of_tokens);\r\n              \r\n          balances[address(this)] = safeSub(balances[address(this)], no_of_tokens);\r\n          balances[msg.sender] = safeAdd(balances[msg.sender], no_of_tokens);\r\n        Transfer(address(this), msg.sender, no_of_tokens);\r\n              owner.transfer(this.balance);\r\n\r\n    }\r\n   \r\n   \r\n   \r\n    // erc20 function to return total supply\r\n    function totalSupply() public constant returns(uint) {\r\n       return totalSupply;\r\n    }\r\n    \r\n    // erc20 function to return balance of give address\r\n    function balanceOf(address sender) public constant returns(uint256 balance) {\r\n        return balances[sender];\r\n    }\r\n\r\n    // Transfer the balance from owner's account to another account\r\n    function transfer(address _to, uint256 _amount) public returns(bool success) {\r\n        if (_to == 0x0) revert(); // Prevent transfer to 0x0 address. Use burn() instead\r\n        if (balances[msg.sender] < _amount) revert(); // Check if the sender has enough\r\n\r\n        if (safeAdd(balances[_to], _amount) < balances[_to]) revert(); // Check for overflows\r\n       \r\n        balances[msg.sender] = safeSub(balances[msg.sender], _amount); // Subtract from the sender\r\n        balances[_to] = safeAdd(balances[_to], _amount); // Add the same to the recipient\r\n        Transfer(msg.sender, _to, _amount); // Notify anyone listening that this transfer took place\r\n        \r\n        return true;\r\n    }\r\n\r\n    // Send _value amount of tokens from address _from to address _to\r\n    // The transferFrom method is used for a withdraw workflow, allowing contracts to send\r\n    // tokens on your behalf, for example to \"deposit\" to a contract address and/or to charge\r\n    // fees in sub-currencies; the command should fail unless the _from account has\r\n    // deliberately authorized the sender of the message via some mechanism; we propose\r\n    // these standardized APIs for approval:\r\n\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _amount\r\n    ) public returns(bool success) {\r\n        if (balances[_from] >= _amount &&\r\n            allowed[_from][msg.sender] >= _amount &&\r\n            _amount > 0 &&\r\n            safeAdd(balances[_to], _amount) > balances[_to]) {\r\n            balances[_from] = safeSub(balances[_from], _amount);\r\n            allowed[_from][msg.sender] = safeSub(allowed[_from][msg.sender], _amount);\r\n            balances[_to] = safeAdd(balances[_to], _amount);\r\n            Transfer(_from, _to, _amount);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n    // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\r\n    // If this function is called again it overwrites the current allowance with _value.\r\n    function approve(address _spender, uint256 _amount) public returns(bool success) {\r\n        allowed[msg.sender][_spender] = _amount;\r\n        Approval(msg.sender, _spender, _amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) public constant returns(uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\nfunction transferOwnership(address _newowner) external onlyOwner{\r\n    uint new_bal = balances[msg.sender];\r\n    owner = _newowner;\r\n    balances[owner]= new_bal;\r\n    balances[msg.sender] = 0;\r\n}\r\n   function drain() external onlyOwner {\r\n       \r\n        owner.transfer(this.balance);\r\n    }\r\n    \r\n  }","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"emergencyPause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"start_ICO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"drain\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"endICOs\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newowner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"releasePause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"m\",\"type\":\"string\"}],\"name\":\"MESSAGE\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addres\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"ADDRESS\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"BeefLedger","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://7dcdcc240ab824490811920099a6fdc1ab7d3ab1a546e0f299fcb0d46f195235"}]}