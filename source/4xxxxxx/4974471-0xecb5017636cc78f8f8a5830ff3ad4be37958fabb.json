{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n/**\r\n* @title Baikal Maining Contract\r\n* @dev The main token contract\r\n*/\r\n\r\n\r\n\r\ncontract Bam {\r\n    address public owner; // Token owner address\r\n    mapping (address => uint256) public balances; // balanceOf\r\n    // mapping (address => mapping (address => uint256)) public allowance;\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n\r\n    string public standard = 'Baikal Mining';\r\n    string public constant name = \"Baikal Mining\";\r\n    string public constant symbol = \"BAM\";\r\n    uint   public constant decimals = 18;\r\n    uint   public constant totalSupply = 34550000 * 1000000000000000000;\r\n    \r\n    uint   internal tokenPrice = 700000000000000;\r\n    \r\n    bool   public buyAllowed = true;\r\n    \r\n    bool   public transferBlocked = true;\r\n\r\n    //\r\n    // Events\r\n    // This generates a publics event on the blockchain that will notify clients\r\n    \r\n    event Sent(address from, address to, uint amount);\r\n    event Buy(address indexed sender, uint eth, uint fbt);\r\n    event Withdraw(address indexed sender, address to, uint eth);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n    //\r\n    // Modifiers\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n\r\n    modifier onlyOwnerIfBlocked() {\r\n        if(transferBlocked) {\r\n            require(msg.sender == owner);   \r\n        }\r\n        _;\r\n    }\r\n\r\n\r\n    //\r\n    // Functions\r\n    // \r\n\r\n    // Constructor\r\n    function Bam() public {\r\n        owner = msg.sender;\r\n        balances[owner] = totalSupply;\r\n    }\r\n\r\n    // fallback function\r\n    function() public payable {\r\n        require(buyAllowed);\r\n        require(msg.value >= 1);\r\n        require(msg.sender != owner);\r\n        buyTokens(msg.sender);\r\n    }\r\n\r\n    /**\r\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n    * @param newOwner The address to transfer ownership to.\r\n    */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n      if (newOwner != address(0)) {\r\n        owner = newOwner;\r\n      }\r\n    }\r\n\r\n    function safeMul(uint a, uint b) internal pure returns (uint) {\r\n        uint c = a * b;\r\n        require(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function safeSub(uint a, uint b) internal pure returns (uint) {\r\n        require(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function safeAdd(uint a, uint b) internal pure returns (uint) {\r\n        uint c = a + b;\r\n        require(c>=a && c>=b);\r\n        return c;\r\n    }\r\n\r\n\r\n    // Payable function for buy coins from token owner\r\n    function buyTokens(address _buyer) public payable\r\n    {\r\n        require(buyAllowed);\r\n        require(msg.value >= tokenPrice);\r\n        require(_buyer != owner);\r\n        \r\n        uint256 wei_value = msg.value;\r\n\r\n        uint256 tokens = wei_value / tokenPrice;\r\n        tokens = tokens;\r\n\r\n        balances[owner] = safeSub(balances[owner], tokens);\r\n        balances[_buyer] = safeAdd(balances[_buyer], tokens);\r\n\r\n        owner.transfer(this.balance);\r\n        \r\n        Buy(_buyer, msg.value, tokens);\r\n        \r\n    }\r\n\r\n\r\n    function setTokenPrice(uint _newPrice) public\r\n        onlyOwner\r\n        returns (bool success)\r\n    {\r\n        tokenPrice = _newPrice;\r\n        return true;\r\n    }\r\n    \r\n\r\n    function getTokenPrice() public view\r\n        returns (uint price)\r\n    {\r\n        return tokenPrice;\r\n    }\r\n    \r\n    \r\n    function setBuyAllowed(bool _allowed) public\r\n        onlyOwner\r\n    {\r\n        buyAllowed = _allowed;\r\n    }\r\n    \r\n    function setTransferBlocked(bool _blocked) public\r\n        onlyOwner\r\n    {\r\n        transferBlocked = _blocked;\r\n    }\r\n\r\n \r\n    function withdrawEther(address _to) public \r\n        onlyOwner\r\n    {\r\n        _to.transfer(this.balance);\r\n    }\r\n\r\n\r\n    /**\r\n     * ERC 20 token functions\r\n     *\r\n     * https://github.com/ethereum/EIPs/issues/20\r\n     */\r\n    \r\n    function transfer(address _to, uint256 _value) public\r\n        onlyOwnerIfBlocked\r\n        returns (bool success) \r\n    {\r\n        if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\r\n            balances[msg.sender] -= _value;\r\n            balances[_to] += _value;\r\n            Transfer(msg.sender, _to, _value);\r\n            return true;\r\n        } else { return false; }\r\n    }\r\n\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public\r\n        onlyOwnerIfBlocked\r\n        returns (bool success)\r\n    {\r\n        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\r\n            balances[_to] += _value;\r\n            balances[_from] -= _value;\r\n            allowed[_from][msg.sender] -= _value;\r\n            Transfer(_from, _to, _value);\r\n            return true;\r\n        } else { return false; }\r\n    }\r\n\r\n\r\n    function approve(address _spender, uint256 _value) public\r\n        onlyOwnerIfBlocked\r\n        returns (bool success)\r\n    {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n\r\n    function allowance(address _owner, address _spender) public\r\n        onlyOwnerIfBlocked\r\n        constant returns (uint256 remaining)\r\n    {\r\n      return allowed[_owner][_spender];\r\n    }\r\n\r\n    \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transferBlocked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTokenPrice\",\"outputs\":[{\"name\":\"price\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"standard\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_allowed\",\"type\":\"bool\"}],\"name\":\"setBuyAllowed\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newPrice\",\"type\":\"uint256\"}],\"name\":\"setTokenPrice\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdrawEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyAllowed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_blocked\",\"type\":\"bool\"}],\"name\":\"setTransferBlocked\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_buyer\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Sent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"eth\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"fbt\",\"type\":\"uint256\"}],\"name\":\"Buy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"Bam","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://a3a312403b38302a48c897f1ca78af6a35ab705d4c7364c32ed0ebefd49517ed"}]}