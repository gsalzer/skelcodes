{"status":"1","message":"OK","result":[{"SourceCode":"contract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\ncontract Curatable is Ownable {\r\n  address public curator;\r\n\r\n\r\n  event CurationRightsTransferred(address indexed previousCurator, address indexed newCurator);\r\n\r\n\r\n  /**\r\n   * @dev The Curatable constructor sets the original `curator` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Curatable() public {\r\n    owner = msg.sender;\r\n    curator = owner;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the curator.\r\n   */\r\n  modifier onlyCurator() {\r\n    require(msg.sender == curator);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newCurator The address to transfer ownership to.\r\n   */\r\n  function transferCurationRights(address newCurator) public onlyOwner {\r\n    require(newCurator != address(0));\r\n    CurationRightsTransferred(curator, newCurator);\r\n    curator = newCurator;\r\n  }\r\n\r\n}\r\n\r\ncontract Whitelist is Curatable {\r\n    mapping (address => bool) public whitelist;\r\n\r\n\r\n    function Whitelist() public {\r\n    }\r\n\r\n\r\n    function addInvestor(address investor) external onlyCurator {\r\n        require(investor != 0x0 && !whitelist[investor]);\r\n        whitelist[investor] = true;\r\n    }\r\n\r\n\r\n    function removeInvestor(address investor) external onlyCurator {\r\n        require(investor != 0x0 && whitelist[investor]);\r\n        whitelist[investor] = false;\r\n    }\r\n\r\n\r\n    function isWhitelisted(address investor) constant external returns (bool result) {\r\n        return whitelist[investor];\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"newCurator\",\"type\":\"address\"}],\"name\":\"transferCurationRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"investor\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"name\":\"result\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"investor\",\"type\":\"address\"}],\"name\":\"removeInvestor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"investor\",\"type\":\"address\"}],\"name\":\"addInvestor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"curator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousCurator\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newCurator\",\"type\":\"address\"}],\"name\":\"CurationRightsTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Whitelist","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://6a48ab77d18560b088472b6c122be1a0170303b611ff72a4d30692c7bad67cbc"}]}