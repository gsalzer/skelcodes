{"status":"1","message":"OK","result":[{"SourceCode":"library SafeMath {\r\n  function mul(uint256 a, uint256 b) constant public returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) constant public returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) constant public returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) constant public returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    if(msg.sender == owner){\r\n      _;\r\n    }\r\n    else{\r\n      revert();\r\n    }\r\n  }\r\n\r\n}\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) constant public returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) constant public returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances. \r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of. \r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) constant public returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amout of tokens to be transfered\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    var _allowance = allowed[_from][msg.sender];\r\n\r\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n    // require (_value <= _allowance);\r\n\r\n    balances[_to] = balances[_to].add(_value);\r\n    balances[_from] = balances[_from].sub(_value);\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n\r\n    // To change the approve amount you first have to reduce the addresses`\r\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n    //  already 0 to mitigate the race condition described here:\r\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifing the amount of tokens still avaible for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) constant public returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n}\r\n\r\n\r\ncontract MintableToken is StandardToken, Ownable {\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n\r\n  modifier canMint() {\r\n    if(!mintingFinished){\r\n      _;\r\n    }\r\n    else{\r\n      revert();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will recieve the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(address _to, uint256 _amount) canMint internal returns (bool) {\r\n    totalSupply = totalSupply.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    Mint(_to, _amount);\r\n    Transfer(address(0),_to,_amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() onlyOwner public returns (bool) {\r\n    mintingFinished = true;\r\n    MintFinished();\r\n    return true;\r\n  }\r\n}\r\n\r\n\r\ncontract MON is MintableToken{\r\n    \r\n    struct Buy{\r\n        uint256 amountOfEth;\r\n        uint256 stage;\r\n    }\r\n    \r\n\tstring public constant name = \"MillionCoin\";\r\n\tstring public constant symbol = \"MON\";\r\n\tuint256 public constant DECIMALS = 8;\r\n\tuint256 public constant decimals = 8;\r\n\taddress public beneficiary ;\r\n    uint256 private alreadyRunned \t= 0;\r\n    uint256 private _now =0;\r\n    uint256 public stageIndex = 0;\r\n    uint256[] public stageSum;\r\n    uint256[] public stageCurrentSum;\r\n    uint256[] public stagePrice;\r\n    uint256[] public stageEnd;\r\n    uint256 public period = 3600*24*7; //7days\r\n    uint256 public start = 0;\r\n    uint256 public sumMultiplayer = 10;//100000;\r\n    mapping(address => Buy) stageBuys;\r\n \r\n modifier runOnce(uint256 bit){\r\n     if((alreadyRunned & bit)==0){\r\n        alreadyRunned = alreadyRunned | bit;   \r\n         _;   \r\n     }\r\n     else{\r\n         revert();\r\n     }\r\n }\r\n \r\n \r\n function MON(address _benef,uint256 _start,uint256 _sumMul,uint256 _period) public{\r\n     beneficiary = _benef;\r\n     start = _start;\r\n     if(_period!=0){\r\n         period = _period;\r\n     }\r\n     if(_sumMul!=0){\r\n         sumMultiplayer = _sumMul;\r\n     }\r\n     stageSum.push(216*sumMultiplayer);\r\n     stageSum.push(260*sumMultiplayer);\r\n     stageSum.push(252*sumMultiplayer);\r\n     stageSum.push(270*sumMultiplayer);\r\n     stageSum.push(204*sumMultiplayer);\r\n     stagePrice.push(3600);\r\n     stagePrice.push(2600);\r\n     stagePrice.push(2100);\r\n     stagePrice.push(1800);\r\n     stagePrice.push(1600);\r\n     stageEnd.push(_start+period*2);\r\n     stageEnd.push(_start+period*6);\r\n     stageEnd.push(_start+period*10);\r\n     stageEnd.push(_start+period*16);\r\n     stageEnd.push(_start+period*24);\r\n     stageCurrentSum.push(0);\r\n     stageCurrentSum.push(0);\r\n     stageCurrentSum.push(0);\r\n     stageCurrentSum.push(0);\r\n     stageCurrentSum.push(0);\r\n     \r\n }\r\n \r\n \r\n function GetMaxStageEthAmount() public constant returns(uint256){\r\n     \r\n     return (stageSum[stageIndex].mul(10**18)).div(stagePrice[stageIndex]);\r\n }\r\n \r\n \r\n function () public payable {\r\n     uint256  status = 0;\r\n     status = 0;\r\n     bool transferToBenef = false;\r\n     uint256  amountOfEthBeforeBuy = 0;\r\n     uint256  stageMaxEthAmount = 0;\r\n     if(GetNow()<start){\r\n         revert();\r\n     }\r\n     if(this.balance <msg.value){\r\n        amountOfEthBeforeBuy =0 ;\r\n     }\r\n     else{\r\n        amountOfEthBeforeBuy = this.balance - msg.value;\r\n     }\r\n     stageMaxEthAmount = (stageSum[stageIndex].mul(10**18)).div(stagePrice[stageIndex]);\r\n         uint256 amountToReturn =0;\r\n         uint256 amountToMint =0;\r\n         Buy b = stageBuys[msg.sender];\r\n     if(stageEnd[stageIndex]<GetNow() && amountOfEthBeforeBuy<stageMaxEthAmount){\r\n         status = 1;\r\n         //current stage is unsuccessful money send in transaction should be returned plus \r\n         // all money spent in current round \r\n         amountToReturn = msg.value;\r\n         if(b.stage==stageIndex){\r\n             status = status*10+2;\r\n             amountToReturn = amountToReturn.add(b.amountOfEth);\r\n             burn(msg.sender,b.amountOfEth.mul(stagePrice[stageIndex]));\r\n         }\r\n         stageBuys[msg.sender].amountOfEth=0;\r\n         msg.sender.transfer(amountToReturn);\r\n     }\r\n     else{\r\n             status = 2;\r\n         \r\n         if(b.stage!=stageIndex){\r\n             b.stage = stageIndex;\r\n             b.amountOfEth = 0;\r\n             status = status*10+3;\r\n         }\r\n         \r\n         if(stageEnd[stageIndex]>now &&  this.balance < stageMaxEthAmount){\r\n            //nothing special normal buy \r\n             b.amountOfEth = b.amountOfEth.add(msg.value);\r\n            amountToMint = msg.value.mul(stagePrice[stageIndex]);\r\n             status = status*10+4;\r\n            mintCoins(msg.sender,amountToMint);\r\n         }else{\r\n             if( this.balance >=stageMaxEthAmount){\r\n                 //we exceeded stage limit\r\n                status = status*10+5;\r\n                 transferToBenef = true;\r\n                amountToMint = ((stageMaxEthAmount - amountOfEthBeforeBuy).mul(stagePrice[stageIndex]));\r\n                mintCoins(msg.sender,amountToMint);\r\n                stageIndex = stageIndex+1;\r\n                if(stageIndex<5){\r\n                    status = status*10+7;\r\n                    //buys for rest of eth tokens in new prices\r\n                    amountToMint = ((this.balance.sub(stageMaxEthAmount)).mul(stagePrice[stageIndex]));\r\n                    b.stage = stageIndex;\r\n                    b.amountOfEth =(this.balance.sub(stageMaxEthAmount));\r\n                    mintCoins(msg.sender,amountToMint);\r\n                }\r\n                else{\r\n                    status = status*10+8;\r\n                    //returns rest of money if during buy hardcap is reached\r\n                    amountToReturn = (this.balance.sub(stageMaxEthAmount));\r\n                    msg.sender.transfer(amountToReturn);\r\n                }\r\n             }else{\r\n                status = status*10+6;\r\n           //     revert() ;// not implemented, should not happend\r\n             }\r\n         }\r\n     }\r\n     if(transferToBenef){\r\n        beneficiary.transfer(stageMaxEthAmount);\r\n     }\r\n }\r\n \r\n function GetNow() public constant returns(uint256){\r\n    return now; \r\n }\r\n \r\n function GetBalance() public constant returns(uint256){\r\n     return this.balance;\r\n }\r\n\r\n  uint256 public constant maxTokenSupply = (10**(18-DECIMALS))*(10**3)*150250 ;  \r\n  \r\n  function burn(address _from, uint256 _amount) private returns (bool){\r\n      _amount = _amount.div(10**10);\r\n      balances[_from] = balances[_from].sub(_amount);\r\n      totalSupply = totalSupply.sub(_amount);\r\n      Transfer(_from,address(0),_amount);\r\n  }\r\n  \r\n  function GetStats()public constant returns (uint256,uint256,uint256,uint256){\r\n      uint256 timeToEnd = 0;\r\n      uint256 round =0;\r\n      if(GetNow()>start){\r\n        round = stageIndex+1;\r\n        timeToEnd = stageEnd[stageIndex]-GetNow();\r\n      }\r\n      else{\r\n        timeToEnd = start-GetNow();\r\n      }\r\n      return(timeToEnd,\r\n       round,\r\n       stageSum[stageIndex].div(stagePrice[stageIndex]).mul(1000),\r\n       GetMaxStageEthAmount().div(10**15));\r\n  }\r\n  \r\n  function mintCoins(address _to, uint256 _amount)  canMint internal returns (bool) {\r\n      \r\n    _amount = _amount.div(10**10);\r\n  \tif(totalSupply.add(_amount)<maxTokenSupply){\r\n  \t  super.mint(_to,_amount);\r\n  \t  super.mint(address(beneficiary),(_amount.mul(20)).div(80));\r\n  \t  \r\n  \t  return true;\r\n  \t}\r\n  \telse{\r\n  \t\treturn false; \r\n  \t}\r\n  \t\r\n  \treturn true;\r\n  }\r\n  \r\n  \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetStats\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DECIMALS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxTokenSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stageEnd\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sumMultiplayer\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stageSum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetNow\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stageCurrentSum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"start\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stagePrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stageIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetMaxStageEthAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"period\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_benef\",\"type\":\"address\"},{\"name\":\"_start\",\"type\":\"uint256\"},{\"name\":\"_sumMul\",\"type\":\"uint256\"},{\"name\":\"_period\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"MON","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000678c66747e96258efcde4af5f6b408dc00d68c42000000000000000000000000000000000000000000000000000000005a88c20000000000000000000000000000000000000000000000000000000000000186a00000000000000000000000000000000000000000000000000000000000093a80","Library":":SafeMath:647d792d620a664a2a55e2452693b6ad32aa794d","SwarmSource":"bzzr://76f13c73121654e366523edcae01152d1537f3c771bd983f041ad4656d9ec0ce"}]}