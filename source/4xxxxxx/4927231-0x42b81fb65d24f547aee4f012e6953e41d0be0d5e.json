{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.18;\r\n\r\n// File: contracts/KnowsConstants.sol\r\n\r\ncontract KnowsConstants {\r\n    // 2/4/18 @ 6:30 PM EST, the deadline for bets\r\n    uint public constant GAME_START_TIME = 1517787000;\r\n}\r\n\r\n// File: contracts/KnowsSquares.sol\r\n\r\n// knows what a valid box is\r\ncontract KnowsSquares {\r\n    modifier isValidSquare(uint home, uint away) {\r\n        require(home >= 0 && home < 10);\r\n        require(away >= 0 && away < 10);\r\n        _;\r\n    }\r\n}\r\n\r\n// File: contracts/interfaces/IKnowsTime.sol\r\n\r\ninterface IKnowsTime {\r\n    function currentTime() public view returns (uint);\r\n}\r\n\r\n// File: contracts/KnowsTime.sol\r\n\r\n// knows what time it is\r\ncontract KnowsTime is IKnowsTime {\r\n    function currentTime() public view returns (uint) {\r\n        return now;\r\n    }\r\n}\r\n\r\n// File: contracts/interfaces/IScoreOracle.sol\r\n\r\ninterface IScoreOracle {\r\n    function getSquareWins(uint home, uint away) public view returns (uint numSquareWins, uint totalWins);\r\n    function isFinalized() public view returns (bool);\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/OwnedScoreOracle.sol\r\n\r\ncontract OwnedScoreOracle is KnowsConstants, KnowsSquares, KnowsTime, Ownable, IScoreOracle {\r\n    using SafeMath for uint;\r\n\r\n    // score can be reported 1 day after the game\r\n    uint public constant SCORE_REPORT_START_TIME = GAME_START_TIME + 1 days;\r\n\r\n    // the number of quarters is the total number of wins\r\n    uint public constant TOTAL_WINS = 4;\r\n\r\n    // number of wins that have been reported\r\n    uint public winsReported = 0;\r\n\r\n    // the grid of how much each box won\r\n    uint[10][10] public squareWins;\r\n\r\n    // whether the score is finalized\r\n    bool public finalized;\r\n\r\n    event LogSquareWinsUpdated(uint home, uint away, uint wins);\r\n\r\n    function setSquareWins(uint home, uint away, uint wins) public onlyOwner isValidSquare(home, away) {\r\n        require(currentTime() >= SCORE_REPORT_START_TIME);\r\n        require(wins <= TOTAL_WINS);\r\n        require(!finalized);\r\n\r\n        uint currentSquareWins = squareWins[home][away];\r\n\r\n        // account the number of quarters reported\r\n        if (currentSquareWins > wins) {\r\n            winsReported = winsReported.sub(currentSquareWins.sub(wins));\r\n        } else if (currentSquareWins < wins) {\r\n            winsReported = winsReported.add(wins.sub(currentSquareWins));\r\n        }\r\n\r\n        // mark the number of wins in that square\r\n        squareWins[home][away] = wins;\r\n\r\n        LogSquareWinsUpdated(home, away, wins);\r\n    }\r\n\r\n    event LogFinalized(uint time);\r\n\r\n    // finalize the score after it's been reported\r\n    function finalize() public onlyOwner {\r\n        require(winsReported == TOTAL_WINS);\r\n        require(!finalized);\r\n\r\n        finalized = true;\r\n\r\n        LogFinalized(currentTime());\r\n    }\r\n\r\n    function getSquareWins(uint home, uint away) public view returns (uint numSquareWins, uint totalWins) {\r\n        return (squareWins[home][away], TOTAL_WINS);\r\n    }\r\n\r\n    function isFinalized() public view returns (bool) {\r\n        return finalized;\r\n    }\r\n}\r\n\r\n// File: contracts/interfaces/IKnowsVoterStakes.sol\r\n\r\ninterface IKnowsVoterStakes {\r\n    function getVoterStakes(address voter, uint asOfBlock) public view returns (uint);\r\n}\r\n\r\n// File: contracts/AcceptedScoreOracle.sol\r\n\r\ncontract AcceptedScoreOracle is OwnedScoreOracle {\r\n    using SafeMath for uint;\r\n\r\n    // how long voters are given to affirm the score\r\n    uint public constant VOTING_PERIOD_DURATION = 1 weeks;\r\n\r\n    // when the voting period started\r\n    uint public votingPeriodStartTime;\r\n    // the block number when the voting period started\r\n    uint public votingPeriodBlockNumber;\r\n\r\n    // whether the voters have accepted the score as true\r\n    bool public accepted;\r\n\r\n    uint public affirmations;\r\n    uint public totalVotes;\r\n\r\n    struct Vote {\r\n        bool affirmed;\r\n        bool counted;\r\n    }\r\n\r\n    // for the voting period blcok number, these are the votes counted from each address\r\n    mapping(uint => mapping(address => Vote)) votes;\r\n\r\n    IKnowsVoterStakes public voterStakes;\r\n\r\n    // only once, the voter stakes can be set by the owner, to allow us to deploy a circular dependency\r\n    function setVoterStakesContract(IKnowsVoterStakes _voterStakes) public onlyOwner {\r\n        require(address(voterStakes) == address(0));\r\n        voterStakes = _voterStakes;\r\n    }\r\n\r\n    // start the acceptance period\r\n    function finalize() public onlyOwner {\r\n        super.finalize();\r\n\r\n        // start the voting period immediately\r\n        affirmations = 0;\r\n        totalVotes = 0;\r\n        votingPeriodStartTime = currentTime();\r\n        votingPeriodBlockNumber = block.number;\r\n    }\r\n\r\n    event LogAccepted(uint time);\r\n\r\n    // anyone can call this if the score is finalized and not accepted\r\n    function accept() public {\r\n        // score is finalized\r\n        require(finalized);\r\n\r\n        // voting period is over\r\n        require(currentTime() >= votingPeriodStartTime + VOTING_PERIOD_DURATION);\r\n\r\n        // score is not already accepted as truth\r\n        require(!accepted);\r\n\r\n        // require 66.666% majority of voters affirmed the score\r\n        require(affirmations.mul(100000).div(totalVotes) >= 66666);\r\n\r\n        // score is accepted as truth\r\n        accepted = true;\r\n\r\n        LogAccepted(currentTime());\r\n    }\r\n\r\n    event LogUnfinalized(uint time);\r\n\r\n    // called when the voting period ends with a minority\r\n    function unfinalize() public {\r\n        // score is finalized\r\n        require(finalized);\r\n\r\n        // however it's not accepted\r\n        require(!accepted);\r\n\r\n        // and the voting period for the score has ended\r\n        require(currentTime() >= votingPeriodStartTime + VOTING_PERIOD_DURATION);\r\n\r\n        // require people to have\r\n        require(affirmations.mul(10000).div(totalVotes) < 6666);\r\n\r\n        // score is no longer finalized\r\n        finalized = false;\r\n\r\n        LogUnfinalized(currentTime());\r\n    }\r\n\r\n    event LogVote(address indexed voter, bool indexed affirm, uint stake);\r\n\r\n    // vote to affirm or unaffirm the score called by a user that has some stake\r\n    function vote(bool affirm) public {\r\n        // the voting period has started\r\n        require(votingPeriodStartTime != 0);\r\n\r\n        // the score is finalized\r\n        require(finalized);\r\n\r\n        // the score is not accepted\r\n        require(!accepted);\r\n\r\n        uint stake = voterStakes.getVoterStakes(msg.sender, votingPeriodBlockNumber);\r\n\r\n        // user has some stake\r\n        require(stake > 0);\r\n\r\n        Vote storage userVote = votes[votingPeriodBlockNumber][msg.sender];\r\n\r\n        // vote has not been counted, so\r\n        if (!userVote.counted) {\r\n            userVote.counted = true;\r\n            userVote.affirmed = affirm;\r\n\r\n            totalVotes = totalVotes.add(stake);\r\n            if (affirm) {\r\n                affirmations = affirmations.add(stake);\r\n            }\r\n        } else {\r\n            // changing their vote to an affirmation\r\n            if (affirm && !userVote.affirmed) {\r\n                affirmations = affirmations.add(stake);\r\n            } else if (!affirm && userVote.affirmed) {\r\n                // changing their vote to a disaffirmation\r\n                affirmations = affirmations.sub(stake);\r\n            }\r\n            userVote.affirmed = affirm;\r\n        }\r\n\r\n        LogVote(msg.sender, affirm, stake);\r\n    }\r\n\r\n    function isFinalized() public view returns (bool) {\r\n        return super.isFinalized() && accepted;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"totalVotes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"affirmations\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"winsReported\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"accept\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"squareWins\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"votingPeriodBlockNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"affirm\",\"type\":\"bool\"}],\"name\":\"vote\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_voterStakes\",\"type\":\"address\"}],\"name\":\"setVoterStakesContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"accepted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"home\",\"type\":\"uint256\"},{\"name\":\"away\",\"type\":\"uint256\"},{\"name\":\"wins\",\"type\":\"uint256\"}],\"name\":\"setSquareWins\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"VOTING_PERIOD_DURATION\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isFinalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"voterStakes\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"finalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SCORE_REPORT_START_TIME\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unfinalize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOTAL_WINS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"home\",\"type\":\"uint256\"},{\"name\":\"away\",\"type\":\"uint256\"}],\"name\":\"getSquareWins\",\"outputs\":[{\"name\":\"numSquareWins\",\"type\":\"uint256\"},{\"name\":\"totalWins\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"votingPeriodStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GAME_START_TIME\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"LogAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"LogUnfinalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"affirm\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"stake\",\"type\":\"uint256\"}],\"name\":\"LogVote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"home\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"away\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"wins\",\"type\":\"uint256\"}],\"name\":\"LogSquareWinsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"LogFinalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"AcceptedScoreOracle","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://a59addc96c35fcc980f5ca543c7a72466b9564e4fee9726dd1503923210e870c"}]}