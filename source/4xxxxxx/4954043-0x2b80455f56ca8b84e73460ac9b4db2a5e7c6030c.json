{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n// File: zeppelin/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: zeppelin/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/IFOFirstRound.sol\r\n\r\ncontract NILTokenInterface is Ownable {\r\n  uint8 public decimals;\r\n  bool public paused;\r\n  bool public mintingFinished;\r\n  uint256 public totalSupply;\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  function balanceOf(address who) public constant returns (uint256);\r\n\r\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool);\r\n\r\n  function pause() onlyOwner whenNotPaused public;\r\n}\r\n\r\n// @dev Handles the pre-IFO\r\n\r\ncontract IFOFirstRound is Ownable {\r\n  using SafeMath for uint;\r\n\r\n  NILTokenInterface public token;\r\n\r\n  uint public maxPerWallet = 30000;\r\n\r\n  address public project;\r\n\r\n  address public founders;\r\n\r\n  uint public baseAmount = 1000;\r\n\r\n  // pre dist\r\n\r\n  uint public preDuration;\r\n\r\n  uint public preStartBlock;\r\n\r\n  uint public preEndBlock;\r\n\r\n  // numbers\r\n\r\n  uint public totalParticipants;\r\n\r\n  uint public tokenSupply;\r\n\r\n  bool public projectFoundersReserved;\r\n\r\n  uint public projectReserve = 35;\r\n\r\n  uint public foundersReserve = 15;\r\n\r\n  // states\r\n\r\n  modifier onlyState(bytes32 expectedState) {\r\n    require(expectedState == currentState());\r\n    _;\r\n  }\r\n\r\n  function currentState() public constant returns (bytes32) {\r\n    uint bn = block.number;\r\n\r\n    if (preStartBlock == 0) {\r\n      return \"Inactive\";\r\n    }\r\n    else if (bn < preStartBlock) {\r\n      return \"PreDistInitiated\";\r\n    }\r\n    else if (bn <= preEndBlock) {\r\n      return \"PreDist\";\r\n    }\r\n    else {\r\n      return \"InBetween\";\r\n    }\r\n  }\r\n\r\n  // distribution\r\n\r\n  function _toNanoNIL(uint amount) internal constant returns (uint) {\r\n    return amount.mul(10 ** uint(token.decimals()));\r\n  }\r\n\r\n  function _fromNanoNIL(uint amount) internal constant returns (uint) {\r\n    return amount.div(10 ** uint(token.decimals()));\r\n  }\r\n\r\n  // requiring NIL\r\n\r\n  function() external payable {\r\n    _getTokens();\r\n  }\r\n\r\n  // 0x7a0c396d\r\n  function giveMeNILs() public payable {\r\n    _getTokens();\r\n  }\r\n\r\n  function _getTokens() internal {\r\n    require(currentState() == \"PreDist\" || currentState() == \"Dist\");\r\n    require(msg.sender != address(0));\r\n\r\n    uint balance = token.balanceOf(msg.sender);\r\n    if (balance == 0) {\r\n      totalParticipants++;\r\n    }\r\n\r\n    uint limit = _toNanoNIL(maxPerWallet);\r\n\r\n    require(balance < limit);\r\n\r\n    uint tokensToBeMinted = _toNanoNIL(getTokensAmount());\r\n\r\n    if (balance > 0 && balance + tokensToBeMinted > limit) {\r\n      tokensToBeMinted = limit.sub(balance);\r\n    }\r\n\r\n    token.mint(msg.sender, tokensToBeMinted);\r\n\r\n  }\r\n\r\n  function getTokensAmount() public constant returns (uint) {\r\n    if (currentState() == \"PreDist\") {\r\n      return baseAmount.mul(5);\r\n    } else {\r\n      return 0;\r\n    }\r\n  }\r\n\r\n  function startPreDistribution(uint _startBlock, uint _duration, address _project, address _founders, address _token) public onlyOwner onlyState(\"Inactive\") {\r\n    require(_startBlock > block.number);\r\n    require(_duration > 0 && _duration < 30000);\r\n    require(msg.sender != address(0));\r\n    require(_project != address(0));\r\n    require(_founders != address(0));\r\n\r\n    token = NILTokenInterface(_token);\r\n    token.pause();\r\n    require(token.paused());\r\n\r\n    project = _project;\r\n    founders = _founders;\r\n    preDuration = _duration;\r\n    preStartBlock = _startBlock;\r\n    preEndBlock = _startBlock + _duration;\r\n  }\r\n\r\n  function reserveTokensProjectAndFounders() public onlyOwner onlyState(\"InBetween\") {\r\n    require(!projectFoundersReserved);\r\n\r\n    tokenSupply = 2 * token.totalSupply();\r\n\r\n    uint amount = tokenSupply.mul(projectReserve).div(100);\r\n    token.mint(project, amount);\r\n    amount = tokenSupply.mul(foundersReserve).div(100);\r\n    token.mint(founders, amount);\r\n    projectFoundersReserved = true;\r\n\r\n    if (this.balance > 0) {\r\n      project.transfer(this.balance);\r\n    }\r\n  }\r\n\r\n  function totalSupply() public constant returns (uint){\r\n    require(currentState() != \"Inactive\");\r\n    return _fromNanoNIL(token.totalSupply());\r\n  }\r\n\r\n  function transferTokenOwnership(address _newOwner) public onlyOwner {\r\n    require(projectFoundersReserved);\r\n    token.transferOwnership(_newOwner);\r\n  }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"currentState\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferTokenOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"founders\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxPerWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"baseAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_startBlock\",\"type\":\"uint256\"},{\"name\":\"_duration\",\"type\":\"uint256\"},{\"name\":\"_project\",\"type\":\"address\"},{\"name\":\"_founders\",\"type\":\"address\"},{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"startPreDistribution\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preStartBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preDuration\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTokensAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"giveMeNILs\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"reserveTokensProjectAndFounders\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"foundersReserve\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preEndBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalParticipants\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"projectFoundersReserved\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"projectReserve\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"project\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"IFOFirstRound","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://31b39c8cd35812a975b6269fac1bc15ed2157b678a38a0035a58b4603febc512"}]}