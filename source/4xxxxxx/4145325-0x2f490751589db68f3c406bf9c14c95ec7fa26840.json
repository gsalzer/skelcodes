{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\ncontract ERC20Token {\r\n  function balanceOf(address _who) constant returns (uint balance);\r\n  function transferFrom(address _from, address _to, uint _value);\r\n  function transfer(address _to, uint _value);\r\n}\r\n\r\ncontract UnicornRanch {\r\n  enum VisitType { Spa, Afternoon, Day, Overnight, Week, Extended }\r\n  enum VisitState { InProgress, Completed, Repossessed }\r\n  function getBooking(address _who, uint _index) constant returns (uint _unicornCount, VisitType _type, uint _startBlock, uint _expiresBlock, VisitState _state, uint _completedBlock, uint _completedCount);\r\n}\r\n\r\n/**\r\n * Math operations with safety checks\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint a, uint b) internal returns (uint) {\r\n    uint c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint a, uint b) internal returns (uint) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint a, uint b) internal returns (uint) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint a, uint b) internal returns (uint) {\r\n    uint c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n\r\n  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n    return a < b ? a : b;\r\n  }\r\n\r\n  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    return a < b ? a : b;\r\n  }\r\n}\r\n\r\ncontract UnicornRefunds {\r\n  using SafeMath for uint;\r\n\r\n  address public cardboardUnicornTokenAddress;\r\n  address public unicornRanchAddress;\r\n  address public owner = msg.sender;\r\n  uint public pricePerUnicorn = 1 finney;\r\n  uint public rewardUnicornAmount = 100;\r\n  mapping(address => uint) allowedAmounts;\r\n  mapping(address => bool) rewardClaimed;\r\n\r\n  event RewardClaimed(address indexed _who, uint _bookingIndex);\r\n  event UnicornsSold(address indexed _who, uint _unicornCount, uint _unicornCost, uint _paymentTotal);\r\n  event DonationReceived(address indexed _who, uint _amount, uint _allowanceEarned);\r\n\r\n  modifier onlyOwner {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n  \r\n  function getAllowedAmount(address _who) constant returns (uint _amount) {\r\n    return allowedAmounts[_who];\r\n  }\r\n\r\n  function claimReward(uint _bookingIndex) {\r\n    UnicornRanch ranch = UnicornRanch(unicornRanchAddress);\r\n    var (unicornCount, visitType, , , state, , completedCount) = ranch.getBooking(msg.sender, _bookingIndex);\r\n    require(state == UnicornRanch.VisitState.Completed); // Must be a visit that's completed (not in progress or repossessed)\r\n    require(visitType != UnicornRanch.VisitType.Spa); // Must be longer than a Spa visit\r\n    require(completedCount > unicornCount); // Must have triggered the \"birth\" conditions so the user went home with more than what they send in\r\n    require(rewardClaimed[msg.sender] == false); // Must not have already claimed the reward\r\n      \r\n    rewardClaimed[msg.sender] = true;\r\n    allowedAmounts[msg.sender] = allowedAmounts[msg.sender].add(rewardUnicornAmount);\r\n      \r\n    RewardClaimed(msg.sender, _bookingIndex);\r\n  }\r\n  \r\n  /**\r\n   * Sell back a number of unicorn tokens, in exchange for ether.\r\n   */\r\n  function sell(uint _unicornCount) {\r\n    require(_unicornCount > 0);\r\n    allowedAmounts[msg.sender] = allowedAmounts[msg.sender].sub(_unicornCount);\r\n    ERC20Token cardboardUnicorns = ERC20Token(cardboardUnicornTokenAddress);\r\n    cardboardUnicorns.transferFrom(msg.sender, owner, _unicornCount); // Transfer the actual asset\r\n    uint total = pricePerUnicorn.mul(_unicornCount);\r\n    msg.sender.transfer(total);\r\n    \r\n    UnicornsSold(msg.sender, _unicornCount, pricePerUnicorn, total);\r\n  }\r\n  \r\n  function() payable {\r\n    uint count = (msg.value).div(pricePerUnicorn);\r\n    allowedAmounts[msg.sender] = allowedAmounts[msg.sender].add(count);\r\n    \r\n    DonationReceived(msg.sender, msg.value, count);\r\n  }\r\n  \r\n  /**\r\n   * Change ownership\r\n   */\r\n  function changeOwner(address _newOwner) onlyOwner {\r\n    owner = _newOwner;\r\n  }\r\n\r\n  /**\r\n   * Change the outside contracts used by this contract\r\n   */\r\n  function changeCardboardUnicornTokenAddress(address _newTokenAddress) onlyOwner {\r\n    cardboardUnicornTokenAddress = _newTokenAddress;\r\n  }\r\n  function changeUnicornRanchAddress(address _newAddress) onlyOwner {\r\n    unicornRanchAddress = _newAddress;\r\n  }\r\n  \r\n  /**\r\n   * Update unicorn price\r\n   */\r\n  function changePricePerUnicorn(uint _newPrice) onlyOwner {\r\n    pricePerUnicorn = _newPrice;\r\n  }\r\n  \r\n  /**\r\n   * Update reward amount\r\n   */\r\n  function changeRewardAmount(uint _newAmount) onlyOwner {\r\n    rewardUnicornAmount = _newAmount;\r\n  }\r\n  \r\n  function setAllowance(address _who, uint _amount) onlyOwner {\r\n    allowedAmounts[_who] = _amount;\r\n  }\r\n  \r\n  function withdraw() onlyOwner {\r\n    owner.transfer(this.balance); // Send all ether in this contract to this contract's owner\r\n  }\r\n  function withdrawForeignTokens(address _tokenContract) onlyOwner {\r\n    ERC20Token token = ERC20Token(_tokenContract);\r\n    token.transfer(owner, token.balanceOf(address(this))); // Send all owned tokens to this contract's owner\r\n  }\r\n  \r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setAllowance\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"unicornRanchAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cardboardUnicornTokenAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardUnicornAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"getAllowedAmount\",\"outputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_bookingIndex\",\"type\":\"uint256\"}],\"name\":\"claimReward\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAmount\",\"type\":\"uint256\"}],\"name\":\"changeRewardAmount\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pricePerUnicorn\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newTokenAddress\",\"type\":\"address\"}],\"name\":\"changeCardboardUnicornTokenAddress\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newPrice\",\"type\":\"uint256\"}],\"name\":\"changePricePerUnicorn\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_unicornCount\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenContract\",\"type\":\"address\"}],\"name\":\"withdrawForeignTokens\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"changeUnicornRanchAddress\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_who\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_bookingIndex\",\"type\":\"uint256\"}],\"name\":\"RewardClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_who\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_unicornCount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_unicornCost\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_paymentTotal\",\"type\":\"uint256\"}],\"name\":\"UnicornsSold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_who\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_allowanceEarned\",\"type\":\"uint256\"}],\"name\":\"DonationReceived\",\"type\":\"event\"}]","ContractName":"UnicornRefunds","CompilerVersion":"v0.4.15+commit.bbb8e64f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://f8d172a6c476645e33f5a941f4becbb1eb845ab4d40c48b97b3cbd40f93bef54"}]}