{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\ninterface FsTKAuthority {\r\n  function isAuthorized(address sender, address _contract, bytes data) external view returns (bool);\r\n  function validate() external pure returns (bool);\r\n}\r\n\r\ninterface ServiceProvider {\r\n  function serviceFallback(address from, uint256 value, bytes data, uint256 gas) external;\r\n}\r\n\r\ninterface TokenReceiver {\r\n  function tokenFallback(address from, uint256 value, bytes data) external;\r\n}\r\n\r\ninterface ERC20 {\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n  function balanceOf(address owner) external view returns (uint256);\r\n  function allowance(address owner, address spender) external view returns (uint256);\r\n  function transfer(address to, uint256 value) external returns (bool);\r\n  function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n  function approve(address spender, uint256 value) external returns (bool);\r\n}\r\n\r\ninterface FsTKToken {\r\n  event Transfer(address indexed from, address indexed to, uint value, bytes data);\r\n  event CancelSubscription(address indexed from, address indexed to);\r\n  event Subscribe(address indexed from, address indexed to, uint256 startTime, uint256 interval, uint256 amount);\r\n\r\n  function transfer(address to, uint value, bytes data) external returns (bool);\r\n\r\n  function buyService(ServiceProvider service, uint256 value, bytes data) external;\r\n  function transfer(uint256[] data) external;\r\n  function approve(address spender, uint256 expectedValue, uint256 newValue) external;\r\n  function increaseAllowance(address spender, uint256 value) external;\r\n  function decreaseAllowance(address spender, uint256 value) external;\r\n  function decreaseAllowanceOrEmtpy(address spender, uint256 value) external;\r\n}\r\n\r\nlibrary AddressExtension {\r\n\r\n  function isValid(address _address) internal pure returns (bool) {\r\n    return 0 != _address;\r\n  }\r\n\r\n  function isAccount(address _address) internal view returns (bool result) {\r\n    assembly {\r\n      result := iszero(extcodesize(_address))\r\n    }\r\n  }\r\n\r\n  function toBytes(address _address) internal pure returns (bytes b) {\r\n   assembly {\r\n      let m := mload(0x40)\r\n      mstore(add(m, 20), xor(0x140000000000000000000000000000000000000000, _address))\r\n      mstore(0x40, add(m, 52))\r\n      b := m\r\n    }\r\n  }\r\n}\r\n\r\nlibrary Math {\r\n  struct Fraction {\r\n    uint256 numerator;\r\n    uint256 denominator;\r\n  }\r\n\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 r) {\r\n    r = a * b;\r\n    require((a == 0) || (r / a == b));\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256 r) {\r\n    r = a / b;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256 r) {\r\n    require((r = a - b) <= a);\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 r) {\r\n    require((r = a + b) >= a);\r\n  }\r\n\r\n  function min(uint256 x, uint256 y) internal pure returns (uint256 r) {\r\n    return x <= y ? x : y;\r\n  }\r\n\r\n  function max(uint256 x, uint256 y) internal pure returns (uint256 r) {\r\n    return x >= y ? x : y;\r\n  }\r\n\r\n  function mulDiv(uint256 value, uint256 m, uint256 d) internal pure returns (uint256 r) {\r\n    // fast path\r\n    if (value == 0 || m == 0) {\r\n      return 0;\r\n    }\r\n\r\n    r = value * m;\r\n    // if mul not overflow\r\n    if (r / value == m) {\r\n      r /= d;\r\n    } else {\r\n      // else div first\r\n      r = mul(value / d, m);\r\n    }\r\n  }\r\n\r\n  function mul(uint256 x, Fraction memory f) internal pure returns (uint256) {\r\n    return mulDiv(x, f.numerator, f.denominator);\r\n  }\r\n\r\n  function div(uint256 x, Fraction memory f) internal pure returns (uint256) {\r\n    return mulDiv(x, f.denominator, f.numerator);\r\n  }\r\n}\r\n\r\ncontract FsTKAllocation {\r\n  // vested 10% total supply of FST for core team members for 4 years\r\n  uint256 public constant VESTED_AMOUNT = 5500000 * (10 ** 18);  \r\n  uint256 public constant VESTED_AMOUNT_TOTAL = VESTED_AMOUNT * 6;\r\n  uint256 public constant RELEASE_EPOCH = 1642032000;\r\n  ERC20 public token;\r\n\r\n  function initialize() public {\r\n    require(address(token) == 0);\r\n    token = ERC20(msg.sender);\r\n  }\r\n\r\n  function () external {\r\n    require(\r\n      token.transfer(0x808b0730252DAA3a12CadC72f42E46E92a5e1bC8, VESTED_AMOUNT) &&                                true && true && true && true && true &&                  token.transfer(0xdA01fAFaF5E49e9467f99f5969cab499a5759cC6, VESTED_AMOUNT) &&\r\n      token.transfer(0xddab6c29090E6111A490527614Ceac583D02C8De, VESTED_AMOUNT) &&                         true && true && true && true && true && true &&                 token.transfer(0x5E6C9EC32b088c9FA1Fc0FEFa38A9B4De4169316, VESTED_AMOUNT) &&\r\n      true&&                                                                                            true &&                                                                                               true&&\r\n      true&&                                                                                          true &&                                                                                                 true&&\r\n      true&&                                                                                       true &&                                                                                                    true&&\r\n      true&&                                                                                     true &&                                                                                                      true&&\r\n      true&&                                                                                   true &&                                                                                                        true&&\r\n      true&&                                                                                  true &&                                                                                                         true&&\r\n      true&&                                                                                 true &&                                                                                                          true&&\r\n      true&&                                                                                 true &&                                                                                                          true&&\r\n      true&&                                                                                true &&                                                                                                           true&&\r\n      true&&                                                                                true &&                                                                                                           true&&\r\n      true&&                                                                                true &&                                                                                                           true&&\r\n      true&&                                                                                 true &&                                                                                                          true&&\r\n      true&&                                                                                  true &&                                                                                                         true&&\r\n      true&&                                                                                   true &&                                                                                                        true&&\r\n      token.transfer(0xFFB5d7C71e8680D0e9482e107F019a2b25D225B5,VESTED_AMOUNT)&&                true &&                                                                                                       true&&\r\n      token.transfer(0x91cE537b1a8118Aa20Ef7F3093697a7437a5Dc4B,VESTED_AMOUNT)&&                  true &&                                                                                                     true&&\r\n      true&&                                                                                         true &&                                                                                                  true&&\r\n      true&&                                                                                            block.timestamp >= RELEASE_EPOCH && true &&                                                           true&&\r\n      true&&                                                                                                   true && true && true && true && true &&                                                        true&&\r\n      true&&                                                                                                                                     true &&                                                      true&&\r\n      true&&                                                                                                                                       true &&                                                    true&&\r\n      true&&                                                                                                                                          true &&                                                 true&&\r\n      true&&                                                                                                                                            true &&                                               true&&\r\n      true&&                                                                                                                                             true &&                                              true&&\r\n      true&&                                                                                                                                              true &&                                             true&&\r\n      true&&                                                                                                                                               true &&                                            true&&\r\n      true&&                                                                                                                                                true &&                                           true&&\r\n      true&&                                                                                                                                                true &&                                           true&&\r\n      true&&                                                                                                                                                true &&                                           true&&\r\n      true&&                                                                                                                                               true &&                                            true&&\r\n      true&&                                                                                                                                              true &&                                             true&&\r\n      true&&                                                                                                                                             true &&                                              true&&\r\n      true&&                                                                                                                                           true &&                                                true&&\r\n      true&&                                                                                                                                         true &&                                                  true&&\r\n      true&&                                                                                                                                       true &&                                                    true&&\r\n      true&&                                                                                             true && true && true && true && true && true &&                                                      true&&\r\n      true&&                                                                                          true && true && true && true && true && true &&                                                          true\r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\ncontract Authorizable {\r\n  using AddressExtension for address;\r\n\r\n  event FsTKAuthorityChanged(address indexed _address);\r\n\r\n  modifier onlyFsTKAuthorized {\r\n    require(fstkAuthority.isAuthorized(msg.sender, this, msg.data));\r\n    _;\r\n  }\r\n\r\n  FsTKAuthority internal fstkAuthority;\r\n\r\n  function Authorizable(FsTKAuthority _fstkAuthority) internal {\r\n    require(_fstkAuthority.validate());\r\n    FsTKAuthorityChanged(fstkAuthority = _fstkAuthority);\r\n  }\r\n\r\n  function changeFsTKAuthority(FsTKAuthority _fstkAuthority) public onlyFsTKAuthorized {\r\n    require(_fstkAuthority.validate());\r\n    FsTKAuthorityChanged(fstkAuthority = _fstkAuthority);\r\n  }\r\n}\r\n\r\ncontract AbstractToken is ERC20, FsTKToken {\r\n  using AddressExtension for address;\r\n  using Math for uint256;\r\n\r\n  struct Subscription {\r\n    uint256 amount;\r\n    uint256 startTime;\r\n    uint256 interval;\r\n    uint256 epoch;\r\n    uint256 collectTime;\r\n  }\r\n\r\n  struct Account {\r\n    uint256 balance;\r\n    mapping (address => uint256) allowances;\r\n    mapping (address => Subscription) subscriptions;\r\n  }\r\n\r\n  modifier liquid {\r\n    require(isLiquid);\r\n     _;\r\n  }\r\n\r\n  bool public isLiquid = true;\r\n  bool public erc20ApproveChecking;\r\n  mapping(address => Account) internal accounts;\r\n\r\n  // *************************\r\n  // * ERC 20\r\n  // *************************\r\n\r\n  function balanceOf(address owner) external view returns (uint256) {\r\n    return accounts[owner].balance;\r\n  }\r\n\r\n  function allowance(address owner, address spender) external view returns (uint256) {\r\n    return accounts[owner].allowances[spender];\r\n  }\r\n\r\n  function transfer(address to, uint256 value) external liquid returns (bool) {\r\n    Account storage senderAccount = accounts[msg.sender];\r\n    require(value <= senderAccount.balance);\r\n\r\n    senderAccount.balance -= value;\r\n    accounts[to].balance += value;\r\n\r\n    Transfer(msg.sender, to, value);\r\n    Transfer(msg.sender, to, value, new bytes(0));\r\n    return true;\r\n  }\r\n\r\n  function transferFrom(address from, address to, uint256 value) external liquid returns (bool) {\r\n    Account storage fromAccount = accounts[from];\r\n    require(value <= fromAccount.balance && value <= fromAccount.allowances[msg.sender]);\r\n\r\n    fromAccount.balance -= value;\r\n    fromAccount.allowances[msg.sender] -= value;\r\n    accounts[to].balance += value;\r\n\r\n    Transfer(from, to, value);\r\n    Transfer(from, to, value, new bytes(0));\r\n    return true;\r\n  }\r\n\r\n  function approve(address spender, uint256 value) external returns (bool) {\r\n    Account storage senderAccount = accounts[msg.sender];\r\n    if (erc20ApproveChecking) {\r\n      require((value == 0) || (senderAccount.allowances[spender] == 0));\r\n    }\r\n    senderAccount.allowances[spender] = value;\r\n\r\n    Approval(msg.sender, spender, value);\r\n    return true;\r\n  }\r\n\r\n  // *************************\r\n  // * FsTK Token\r\n  // *************************\r\n\r\n  function transfer(address to, uint256 value, bytes data) external liquid returns (bool) {\r\n    Account storage senderAccount = accounts[msg.sender];\r\n    require(value <= senderAccount.balance);\r\n\r\n    senderAccount.balance -= value;\r\n    accounts[to].balance += value;\r\n\r\n    Transfer(msg.sender, to, value);\r\n    Transfer(msg.sender, to, value, data);\r\n\r\n    if (!to.isAccount()) {\r\n      TokenReceiver(to).tokenFallback(msg.sender, value, data);\r\n    }\r\n    return true;\r\n  }\r\n\r\n  function buyService(ServiceProvider service, uint256 value, bytes data) external liquid {\r\n    uint256 gas = msg.gas;\r\n    Account storage senderAccount = accounts[msg.sender];\r\n    uint256 currentValue = senderAccount.allowances[service];\r\n    senderAccount.allowances[service] = currentValue.add(value);\r\n    service.serviceFallback(msg.sender, value, data, gas);\r\n    senderAccount.allowances[service] = currentValue;\r\n  }\r\n\r\n  function transfer(uint256[] data) external liquid {\r\n    Account storage senderAccount = accounts[msg.sender];\r\n    for (uint256 i = 0; i < data.length; i++) {\r\n      address receiver = address(data[i] >> 96);\r\n      uint256 value = data[i] & 0xffffffffffffffffffffffff;\r\n      require(value <= senderAccount.balance);\r\n\r\n      senderAccount.balance -= value;\r\n      accounts[receiver].balance += value;\r\n\r\n      Transfer(msg.sender, receiver, value);\r\n      Transfer(msg.sender, receiver, value, new bytes(0));\r\n    }\r\n  }\r\n\r\n  function subscriptionOf(address owner, address collector) external view returns (Subscription) {\r\n    return accounts[owner].subscriptions[collector];\r\n  }\r\n\r\n  function subscribe(address collector, uint256 startTime, uint256 interval, uint256 amount) external {\r\n    accounts[msg.sender].subscriptions[collector] = Subscription({\r\n      startTime: startTime,\r\n      interval: interval,\r\n      amount: amount,\r\n      epoch: 0,\r\n      collectTime: 0\r\n    });\r\n    Subscribe(msg.sender, collector, startTime, interval, amount);\r\n  }\r\n\r\n  function cancelSubscription(address collector) external {\r\n    delete accounts[msg.sender].subscriptions[collector];\r\n    CancelSubscription(msg.sender, collector);\r\n  }\r\n\r\n  function collect(address from) external {\r\n    Account storage fromAccount = accounts[from];\r\n    Subscription storage info = fromAccount.subscriptions[msg.sender];\r\n    uint256 epoch = (block.timestamp.sub(info.startTime)) / info.interval + 1;\r\n    require(info.amount > 0 && epoch > info.epoch);\r\n    uint256 totalAmount = (epoch - info.epoch).mul(info.amount);\r\n    if (totalAmount > fromAccount.balance) {\r\n      delete fromAccount.subscriptions[msg.sender];\r\n      CancelSubscription(from, msg.sender);\r\n    } else {\r\n      info.collectTime = block.timestamp;\r\n      fromAccount.balance -= totalAmount;\r\n      accounts[msg.sender].balance += totalAmount;\r\n\r\n      Transfer(from, msg.sender, totalAmount);\r\n      Transfer(from, msg.sender, totalAmount, new bytes(0));\r\n    }\r\n  }\r\n\r\n  function collect(address[] froms) external {\r\n    for (uint256 i = 0; i < froms.length; i++) {\r\n      address from = froms[i];\r\n      Account storage fromAccount = accounts[from];\r\n      Subscription storage info = fromAccount.subscriptions[msg.sender];\r\n      uint256 epoch = (block.timestamp.sub(info.startTime)) / info.interval + 1;\r\n      require(info.amount > 0 && epoch > info.epoch);\r\n      uint256 totalAmount = (epoch - info.epoch).mul(info.amount);\r\n      if (totalAmount > fromAccount.balance) {\r\n        delete fromAccount.subscriptions[msg.sender];\r\n        CancelSubscription(from, msg.sender);\r\n      } else {\r\n        info.collectTime = block.timestamp;\r\n        fromAccount.balance -= totalAmount;\r\n        accounts[msg.sender].balance += totalAmount;\r\n  \r\n        Transfer(from, msg.sender, totalAmount);\r\n        Transfer(from, msg.sender, totalAmount, new bytes(0));\r\n      }\r\n    }\r\n  }\r\n\r\n  function approve(address spender, uint256 expectedValue, uint256 newValue) external {\r\n    Account storage senderAccount = accounts[msg.sender];\r\n    require(senderAccount.allowances[spender] == expectedValue);\r\n\r\n    senderAccount.allowances[spender] = newValue;\r\n\r\n    Approval(msg.sender, spender, newValue);\r\n  }\r\n\r\n  function increaseAllowance(address spender, uint256 value) external {\r\n    Account storage senderAccount = accounts[msg.sender];\r\n    uint256 newValue = senderAccount.allowances[spender].add(value);\r\n    senderAccount.allowances[spender] = newValue;\r\n\r\n    Approval(msg.sender, spender, newValue);\r\n  }\r\n\r\n  function decreaseAllowance(address spender, uint256 value) external {\r\n    Account storage senderAccount = accounts[msg.sender];\r\n    uint256 newValue = senderAccount.allowances[spender].sub(value);\r\n    senderAccount.allowances[spender] = newValue;\r\n\r\n    Approval(msg.sender, spender, newValue);\r\n  }\r\n\r\n  function decreaseAllowanceOrEmtpy(address spender, uint256 value) external {\r\n    Account storage senderAccount = accounts[msg.sender];\r\n    uint256 currentValue = senderAccount.allowances[spender];\r\n    uint256 newValue;\r\n    if (value < currentValue) {\r\n      newValue = currentValue - value;\r\n    }\r\n    senderAccount.allowances[spender] = newValue;\r\n\r\n    Approval(msg.sender, spender, newValue);\r\n  }\r\n\r\n  function setLiquid(bool _isLiquid) public {\r\n    isLiquid = _isLiquid;\r\n  }\r\n\r\n  function setERC20ApproveChecking(bool _erc20ApproveChecking) public {\r\n    erc20ApproveChecking = _erc20ApproveChecking;\r\n  }\r\n}\r\n\r\ncontract FunderSmartToken is AbstractToken, Authorizable {\r\n  string public constant name = \"Funder Smart Token\";\r\n  string public constant symbol = \"FST\";\r\n  uint256 public constant totalSupply = 330000000 * (10 ** 18);\r\n  uint8 public constant decimals = 18;\r\n\r\n  function FunderSmartToken(FsTKAuthority _fstkAuthority, address fstkWallet, FsTKAllocation allocation) Authorizable(_fstkAuthority) public {\r\n    // vested 10% total supply of FST for core team members for 4 years\r\n    uint256 vestedAmount = allocation.VESTED_AMOUNT_TOTAL();\r\n    accounts[allocation].balance = vestedAmount;\r\n    allocation.initialize();     \r\n    Transfer(address(0), allocation, vestedAmount);\r\n    Transfer(address(0), allocation, vestedAmount, new bytes(0));\r\n\r\n    uint256 releaseAmount = totalSupply - vestedAmount;\r\n    accounts[fstkWallet].balance = releaseAmount;\r\n    Transfer(address(0), fstkWallet, releaseAmount);\r\n    Transfer(address(0), fstkWallet, releaseAmount, new bytes(0));\r\n  }\r\n\r\n  function setLiquid(bool _isLiquid) public onlyFsTKAuthorized {\r\n    AbstractToken.setLiquid(_isLiquid);\r\n  }\r\n\r\n  function setERC20ApproveChecking(bool _erc20ApproveChecking) public onlyFsTKAuthorized {\r\n    AbstractToken.setERC20ApproveChecking(_erc20ApproveChecking);\r\n  }\r\n\r\n  function transferToken(ERC20 erc20, address to, uint256 value) public onlyFsTKAuthorized {\r\n    erc20.transfer(to, value);\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"}],\"name\":\"collect\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_erc20ApproveChecking\",\"type\":\"bool\"}],\"name\":\"setERC20ApproveChecking\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowanceOrEmtpy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_isLiquid\",\"type\":\"bool\"}],\"name\":\"setLiquid\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"expectedValue\",\"type\":\"uint256\"},{\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"collector\",\"type\":\"address\"},{\"name\":\"startTime\",\"type\":\"uint256\"},{\"name\":\"interval\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"subscribe\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isLiquid\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"service\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"buyService\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"collector\",\"type\":\"address\"}],\"name\":\"cancelSubscription\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"collector\",\"type\":\"address\"}],\"name\":\"subscriptionOf\",\"outputs\":[{\"components\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"startTime\",\"type\":\"uint256\"},{\"name\":\"interval\",\"type\":\"uint256\"},{\"name\":\"epoch\",\"type\":\"uint256\"},{\"name\":\"collectTime\",\"type\":\"uint256\"}],\"name\":\"\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"froms\",\"type\":\"address[]\"}],\"name\":\"collect\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"data\",\"type\":\"uint256[]\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fstkAuthority\",\"type\":\"address\"}],\"name\":\"changeFsTKAuthority\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"erc20ApproveChecking\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"erc20\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_fstkAuthority\",\"type\":\"address\"},{\"name\":\"fstkWallet\",\"type\":\"address\"},{\"name\":\"allocation\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"FsTKAuthorityChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"}],\"name\":\"CancelSubscription\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"interval\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Subscribe\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"FunderSmartToken","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"330000000","ConstructorArguments":"0000000000000000000000001b9b8d74adc625e03150d3784005b7468edbee4600000000000000000000000008040b805e474dd940941f7d75c617df52e1be590000000000000000000000001cf18f72f7cea5be6759396ea3ed4c2dd079542d","Library":"","SwarmSource":"bzzr://8485a332c6b1801e73508cd07133a1fd4c0665e9ae1287fce9ce2dac49672cc2"}]}