{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.15;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\ncontract EthMessage is Ownable {\r\n\r\n    /*\r\n    The cost of posting a message will be currentPrice.\r\n\r\n    The currentPrice will increase by basePrice every time a message is bought.\r\n    */\r\n\r\n    uint public constant BASEPRICE = 0.01 ether;\r\n    uint public currentPrice = 0.01 ether;\r\n    string public message = \"\";\r\n\r\n    function withdraw() public payable onlyOwner {\r\n        msg.sender.transfer(this.balance);\r\n    }\r\n    \r\n    // This is only for messed up things people put.\r\n    function removeMessage() onlyOwner public {\r\n        message = \"\";\r\n    }\r\n\r\n    modifier requiresPayment () {\r\n        require(msg.value >= currentPrice);\r\n        if (msg.value > currentPrice) {\r\n            msg.sender.transfer(msg.value - currentPrice);\r\n        }\r\n        currentPrice += BASEPRICE;\r\n        _;\r\n    }\r\n\r\n    function putMessage(string messageToPut) public requiresPayment payable {\r\n        if (bytes(messageToPut).length > 255) {\r\n            revert();\r\n        }\r\n        message = messageToPut;\r\n    }\r\n\r\n    function () {\r\n        revert();\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"removeMessage\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"messageToPut\",\"type\":\"string\"}],\"name\":\"putMessage\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BASEPRICE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"message\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"payable\":false,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"EthMessage","CompilerVersion":"v0.4.15+commit.bbb8e64f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://ab1e8bf68e5c8d2e0e5894ea5add25ad0b8d9219ea38985df2172e7f2eed10c5"}]}