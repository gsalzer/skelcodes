{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13;\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\ncontract Crowdsale is Ownable {\r\n  using SafeMath for uint256;\r\n\r\n  // start and end timestamps where investments are allowed (both inclusive)\r\n  uint256 public startTime;\r\n  uint256 public endTime;\r\n\r\n  // address where funds are collected\r\n  WhitelistedGateway public gateway;\r\n  PendingContributions public pending;\r\n\r\n\tbool closedManually = false;\r\n\tbool acceptWithoutWhitelist = true;\r\n  uint256 minContrib;\r\n\r\n\tfunction setPending(bool newValue) public onlyOwner {\r\n\t\tacceptWithoutWhitelist = newValue;\r\n\t}\r\n\r\n\tfunction setClosedManually(bool newValue) public onlyOwner {\r\n\t\tclosedManually = newValue;\r\n\t}\r\n\r\n\r\n  function Crowdsale(uint256 _startTime, uint256 _endTime, address _vault, Whitelist _whitelist, uint256 _minContrib) public {\r\n    // require(_startTime >= now);\r\n    require(_endTime >= _startTime);\r\n    require(_vault != address(0));\r\n\r\n    startTime = _startTime;\r\n    endTime = _endTime;\r\n    minContrib = _minContrib;\r\n    gateway = new WhitelistedGateway(_whitelist, _vault);\r\n\tpending = new PendingContributions(gateway);\r\n\t// allow the pending container to fund the gateway\r\n\tgateway.addOwner(pending);\r\n  }\r\n\r\n  // fallback function can be used to buy tokens\r\n  function () external payable {\r\n    require(validPurchase());\r\n    forwardFunds();  \r\n  }\r\n\r\n  // send ether either to the Gateway or to the PendingContributions\r\n  function forwardFunds() internal {\r\n\tif(gateway.isWhitelisted(msg.sender)) {\r\n\t\tgateway.fund.value(msg.value)(msg.sender);\r\n\t\treturn;\r\n\t} \r\n\tpending.fund.value(msg.value)(msg.sender);\r\n  }\r\n\r\n  // @return true if the transaction can buy tokens\r\n  function validPurchase() internal view returns (bool) {\r\n    bool withinPeriod = now >= startTime && now <= endTime;\r\n    bool sufficientPurchase = msg.value >= minContrib;\r\n    bool whitelisted = gateway.isWhitelisted(msg.sender);\r\n    return !closedManually && withinPeriod && sufficientPurchase && (acceptWithoutWhitelist || whitelisted);\r\n  }\r\n\r\n  // @return true if crowdsale event has ended\r\n  function hasEnded() public view returns (bool) {\r\n    return now > endTime;\r\n  }\r\n\r\n}\r\n\r\ncontract PendingContributions is Ownable {\r\n\tusing SafeMath for uint256;\r\n\r\n\tmapping(address=>uint256) public contributions;\r\n\tWhitelistedGateway public gateway;\r\n\r\n\tevent PendingContributionReceived(address contributor, uint256 value, uint256 timestamp);\r\n\tevent PendingContributionAccepted(address contributor, uint256 value, uint256 timestamp);\r\n\tevent PendingContributionWithdrawn(address contributor, uint256 value, uint256 timestamp);\r\n\r\n\tfunction PendingContributions(WhitelistedGateway _gateway) public {\r\n\t\tgateway = _gateway;\r\n\t}\r\n\r\n\tmodifier onlyWhitelisted(address contributor) {\r\n\t\trequire(gateway.isWhitelisted(contributor));\r\n\t\t_;\r\n\t}\r\n\r\n\tfunction fund(address contributor) payable public onlyOwner {\r\n\t\tcontributions[contributor] += msg.value;\r\n\t\tPendingContributionReceived(contributor, msg.value, now);\r\n\t}\r\n\r\n\tfunction withdraw() public {\r\n\t\tuint256 toTransfer = contributions[msg.sender];\r\n\t\trequire(toTransfer > 0);\r\n\t\tcontributions[msg.sender] = 0;\r\n\t\tmsg.sender.transfer(toTransfer);\r\n\t\tPendingContributionWithdrawn(msg.sender, toTransfer, now);\r\n\t}\r\n\r\n\tfunction retry(address contributor) public onlyWhitelisted(contributor) {\r\n\t\tuint256 toTransfer = contributions[contributor];\r\n\t\trequire(toTransfer > 0);\r\n\t\tgateway.fund.value(toTransfer)(contributor);\r\n\t\tcontributions[contributor] = 0;\r\n\t\tPendingContributionAccepted(contributor, toTransfer, now);\r\n\t}\r\n}\r\n\r\ncontract Whitelist is Ownable {\r\n\tusing SafeMath for uint256;\r\n\r\n\tmapping(address=>bool) public whitelist;\r\n\t\r\n\tevent Authorized(address candidate, uint timestamp);\r\n\tevent Revoked(address candidate, uint timestamp);\r\n\r\n\tfunction authorize(address candidate) public onlyOwner {\r\n\t    whitelist[candidate] = true;\r\n\t    Authorized(candidate, now);\r\n\t}\r\n\t\r\n\t// also if not in the list..\r\n\tfunction revoke(address candidate) public onlyOwner {\r\n\t    whitelist[candidate] = false;\r\n\t    Revoked(candidate, now);\r\n\t}\r\n\t\r\n\tfunction authorizeMany(address[50] candidates) public onlyOwner {\r\n\t    for(uint i = 0; i < candidates.length; i++) {\r\n\t        authorize(candidates[i]);\r\n\t    }\r\n\t}\r\n\r\n\tfunction isWhitelisted(address candidate) public view returns(bool) {\r\n\t\treturn whitelist[candidate];\r\n\t}\r\n}\r\n\r\ncontract WhitelistedGateway {\r\n\tusing SafeMath for uint256;\r\n\r\n\tmapping(address=>bool) public owners;\r\n\tmapping(address=>uint) public contributions;\r\n\taddress public vault;\r\n\tWhitelist public whitelist;\r\n\r\n\tevent NewContribution(address contributor, uint256 amount, uint256 timestamp);\r\n\r\n\tmodifier onlyOwners() {\r\n\t\trequire(owners[msg.sender]);\r\n\t\t_;\r\n\t}\r\n\r\n\tfunction addOwner(address newOwner) public onlyOwners {\r\n\t\towners[newOwner] = true;\r\n\t}\r\n\r\n\tfunction WhitelistedGateway(Whitelist _whitelist, address _vault) public {\r\n\t\twhitelist = _whitelist;\r\n\t\tvault = _vault;\r\n\t\towners[msg.sender] = true;\r\n\t}\r\n\r\n\tfunction isWhitelisted(address candidate) public view returns(bool) {\r\n\t\treturn whitelist.isWhitelisted(candidate);\r\n\t}\r\n\r\n\tfunction fund(address contributor) public payable onlyOwners {\r\n\t\tcontributions[contributor] += msg.value;\r\n\t\tvault.transfer(msg.value);\r\n\t\tNewContribution(contributor, msg.value, now);\r\n\t}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"gateway\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newValue\",\"type\":\"bool\"}],\"name\":\"setPending\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newValue\",\"type\":\"bool\"}],\"name\":\"setClosedManually\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pending\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_startTime\",\"type\":\"uint256\"},{\"name\":\"_endTime\",\"type\":\"uint256\"},{\"name\":\"_vault\",\"type\":\"address\"},{\"name\":\"_whitelist\",\"type\":\"address\"},{\"name\":\"_minContrib\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Crowdsale","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000005a5fe380000000000000000000000000000000000000000000000000000000005a95f1000000000000000000000000005753930b7d0443dd3769782c169786844db68d4900000000000000000000000045f0f40297df736fe33efbf703d6ff287cb29cf70000000000000000000000000000000000000000000000000429d069189e0000","Library":"","SwarmSource":"bzzr://cc7d022c882f5bb59507ff7e008642fe65944cb71d227303b54575b2cfa316b2"}]}