{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.15;\r\n\r\ncontract Token {\r\n\r\n    /// @return total amount of tokens\r\n    // function totalSupply() public constant returns (uint supply);\r\n    // `totalSupply` is defined below because the automatically generated\r\n    // getter function does not match the abstract function above\r\n    uint public totalSupply;\r\n\r\n    /// @param _owner The address from which the balance will be retrieved\r\n    /// @return The balance\r\n    function balanceOf(address _owner) public constant returns (uint);\r\n\r\n    /// @notice send `_value` token to `_to` from `msg.sender`\r\n    /// @param _to The address of the recipient\r\n    /// @param _value The amount of token to be transferred\r\n    /// @return Whether the transfer was successful or not\r\n    function transfer(address _to, uint _value) public returns (bool success);\r\n\r\n    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\r\n    /// @param _from The address of the sender\r\n    /// @param _to The address of the recipient\r\n    /// @param _value The amount of token to be transferred\r\n    /// @return Whether the transfer was successful or not\r\n    function transferFrom(address _from, address _to, uint _value) public returns (bool success);\r\n\r\n    /// @notice `msg.sender` approves `_addr` to spend `_value` tokens\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @param _value The amount of wei to be approved for transfer\r\n    /// @return Whether the approval was successful or not\r\n    function approve(address _spender, uint _value) public returns (bool success);\r\n\r\n    /// @param _owner The address of the account owning tokens\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @return Amount of remaining tokens allowed to spent\r\n    function allowance(address _owner, address _spender) public constant returns (uint remaining);\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n\r\n}\r\n\r\ncontract StandardToken is Token {\r\n\r\n    function transfer(address _to, uint _value) public returns (bool success) {\r\n        if (balances[msg.sender] >= _value &&          // Account has sufficient balance\r\n            balances[_to] + _value >= balances[_to]) { // Overflow check\r\n            balances[msg.sender] -= _value;\r\n            balances[_to] += _value;\r\n            Transfer(msg.sender, _to, _value);\r\n            return true;\r\n        } else { throw; }\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint _value) public returns (bool success) {\r\n        if (balances[_from] >= _value &&                // Account has sufficient balance\r\n            allowed[_from][msg.sender] >= _value &&     // Amount has been approved\r\n            balances[_to] + _value >= balances[_to]) {  // Overflow check\r\n            balances[_from] -= _value;\r\n            allowed[_from][msg.sender] -= _value;\r\n            balances[_to] += _value;\r\n            Transfer(_from, _to, _value);\r\n            return true;\r\n        } else { throw; }\r\n    }\r\n\r\n    function balanceOf(address _owner) public constant returns (uint balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function approve(address _spender, uint _value) public returns (bool success) {\r\n        // To change the approve amount you first have to reduce the addresses`\r\n        //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n        //  already 0 to mitigate the race condition described here:\r\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n        require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\r\n      return allowed[_owner][_spender];\r\n    }\r\n\r\n    mapping (address => uint) balances;\r\n    mapping (address => mapping (address => uint)) allowed;\r\n}\r\n\r\n// Based on TokenFactory(https://github.com/ConsenSys/Token-Factory)\r\n\r\ncontract SnipCoin is StandardToken {\r\n\r\n    string public constant name = \"SnipCoin\";         // Token name\r\n    string public symbol = \"SNIP\";                    // Token identifier\r\n    uint8 public constant decimals = 18;              // Decimal points for token\r\n    uint public totalEthReceivedInWei;                // The total amount of Ether received during the sale in WEI\r\n    uint public totalUsdReceived;                     // The total amount of Ether received during the sale in USD terms\r\n    uint public totalUsdValueOfAllTokens;             // The total USD value of 100% of tokens\r\n    string public version = \"1.0\";                    // Code version\r\n    address public saleWalletAddress;                 // The wallet address where the Ether from the sale will be stored\r\n\r\n    mapping (address => bool) public uncappedBuyerList;      // The list of buyers allowed to participate in the sale without a cap\r\n    mapping (address => uint) public cappedBuyerList;        // The list of buyers allowed to participate in the sale, with their updated payment sum\r\n\r\n    uint public snipCoinToEtherExchangeRate = 76250; // This is the ratio of SnipCoin to Ether, could be updated by the owner, change before the sale\r\n    bool public isSaleOpen = false;                   // This opens and closes upon external command\r\n    bool public transferable = false;                 // Tokens are transferable\r\n\r\n    uint public ethToUsdExchangeRate = 282;           // Number of USD in one Eth\r\n\r\n    address public contractOwner;                     // Address of the contract owner\r\n    // Address of an additional account to manage the sale without risk to the tokens or eth. Change before the sale\r\n    address public accountWithUpdatePermissions = 0x6933784a82F5daDEbB600Bed8670667837aD196f;\r\n\r\n    uint public constant PERCENTAGE_OF_TOKENS_SOLD_IN_SALE = 28;     // Percentage of all the tokens being sold in the current sale\r\n    uint public constant DECIMALS_MULTIPLIER = 10**uint(decimals);   // Multiplier for the decimals\r\n    uint public constant SALE_CAP_IN_USD = 8000000;                  // The total sale cap in USD\r\n    uint public constant MINIMUM_PURCHASE_IN_USD = 50;               // It is impossible to purchase tokens for more than $50 in the sale.\r\n    uint public constant USD_PURCHASE_AMOUNT_REQUIRING_ID = 4500;    // Above this purchase amount an ID is required.\r\n\r\n    modifier onlyPermissioned() {\r\n        require((msg.sender == contractOwner) || (msg.sender == accountWithUpdatePermissions));\r\n        _;\r\n    }\r\n\r\n    modifier verifySaleNotOver() {\r\n        require(isSaleOpen);\r\n        require(totalUsdReceived < SALE_CAP_IN_USD); // Make sure that sale isn't over\r\n        _;\r\n    }\r\n\r\n    modifier verifyBuyerCanMakePurchase() {\r\n        uint currentPurchaseValueInUSD = uint(msg.value / getWeiToUsdExchangeRate()); // The USD worth of tokens sold\r\n        uint totalPurchaseIncludingCurrentPayment = currentPurchaseValueInUSD +  cappedBuyerList[msg.sender]; // The USD worth of all tokens this buyer bought\r\n\r\n        require(currentPurchaseValueInUSD > MINIMUM_PURCHASE_IN_USD); // Minimum transfer is of $50\r\n\r\n        uint EFFECTIVE_MAX_CAP = SALE_CAP_IN_USD + 1000;  // This allows for the end of the sale by passing $8M and reaching the cap\r\n        require(EFFECTIVE_MAX_CAP - totalUsdReceived > currentPurchaseValueInUSD); // Make sure that there is enough usd left to buy.\r\n\r\n        if (!uncappedBuyerList[msg.sender]) // If buyer is on uncapped white list then no worries, else need to make sure that they're okay\r\n        {\r\n            require(cappedBuyerList[msg.sender] > 0); // Check that the sender has been initialized.\r\n            require(totalPurchaseIncludingCurrentPayment < USD_PURCHASE_AMOUNT_REQUIRING_ID); // Check that they're not buying too much\r\n        }\r\n        _;\r\n    }\r\n\r\n    function SnipCoin() public {\r\n        initializeSaleWalletAddress();\r\n        initializeEthReceived();\r\n        initializeUsdReceived();\r\n\r\n        contractOwner = msg.sender;                      // The creator of the contract is its owner\r\n        totalSupply = 10000000000 * DECIMALS_MULTIPLIER; // In total, 10 billion tokens\r\n        balances[contractOwner] = totalSupply;           // Initially give owner all of the tokens \r\n        Transfer(0x0, contractOwner, totalSupply);\r\n    }\r\n\r\n    function initializeSaleWalletAddress() internal {\r\n        saleWalletAddress = 0xb4Ad56E564aAb5409fe8e34637c33A6d3F2a0038; // Change before the sale\r\n    }\r\n\r\n    function initializeEthReceived() internal {\r\n        totalEthReceivedInWei = 14018 * 1 ether; // Ether received before public sale. Verify this figure before the sale starts.\r\n    }\r\n\r\n    function initializeUsdReceived() internal {\r\n        totalUsdReceived = 3953076; // USD received before public sale. Verify this figure before the sale starts.\r\n        totalUsdValueOfAllTokens = totalUsdReceived * 100 / PERCENTAGE_OF_TOKENS_SOLD_IN_SALE; // sold tokens are 28% of all tokens\r\n    }\r\n\r\n    function getWeiToUsdExchangeRate() public constant returns(uint) {\r\n        return 1 ether / ethToUsdExchangeRate; // Returns how much Wei one USD is worth\r\n    }\r\n\r\n    function updateEthToUsdExchangeRate(uint newEthToUsdExchangeRate) public onlyPermissioned {\r\n        ethToUsdExchangeRate = newEthToUsdExchangeRate; // Change exchange rate to new value, influences the counter of when the sale is over.\r\n    }\r\n\r\n    function updateSnipCoinToEtherExchangeRate(uint newSnipCoinToEtherExchangeRate) public onlyPermissioned {\r\n        snipCoinToEtherExchangeRate = newSnipCoinToEtherExchangeRate; // Change the exchange rate to new value, influences tokens received per purchase\r\n    }\r\n\r\n    function openOrCloseSale(bool saleCondition) public onlyPermissioned {\r\n        require(!transferable);\r\n        isSaleOpen = saleCondition; // Decide if the sale should be open or closed (default: closed)\r\n    }\r\n\r\n    function allowTransfers() public onlyPermissioned {\r\n        require(!isSaleOpen);\r\n        transferable = true;\r\n    }\r\n\r\n    function addAddressToCappedAddresses(address addr) public onlyPermissioned {\r\n        cappedBuyerList[addr] = 1; // Allow a certain address to purchase SnipCoin up to the cap (<4500)\r\n    }\r\n\r\n    function addMultipleAddressesToCappedAddresses(address[] addrList) public onlyPermissioned {\r\n        for (uint i = 0; i < addrList.length; i++) {\r\n            addAddressToCappedAddresses(addrList[i]); // Allow a certain address to purchase SnipCoin up to the cap (<4500)\r\n        }\r\n    }\r\n\r\n    function addAddressToUncappedAddresses(address addr) public onlyPermissioned {\r\n        uncappedBuyerList[addr] = true; // Allow a certain address to purchase SnipCoin above the cap (>=$4500)\r\n    }\r\n\r\n    function addMultipleAddressesToUncappedAddresses(address[] addrList) public onlyPermissioned {\r\n        for (uint i = 0; i < addrList.length; i++) {\r\n            addAddressToUncappedAddresses(addrList[i]); // Allow a certain address to purchase SnipCoin up to the cap (<4500)\r\n        }\r\n    }\r\n\r\n    function transfer(address _to, uint _value) public returns (bool success) {\r\n        require(transferable);\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint _value) public returns (bool success) {\r\n        require(transferable);\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n    function () public payable verifySaleNotOver verifyBuyerCanMakePurchase {\r\n        uint tokens = snipCoinToEtherExchangeRate * msg.value;\r\n        balances[contractOwner] -= tokens;\r\n        balances[msg.sender] += tokens;\r\n        Transfer(contractOwner, msg.sender, tokens);\r\n\r\n        totalEthReceivedInWei = totalEthReceivedInWei + msg.value; // total eth received counter\r\n        uint usdReceivedInCurrentTransaction = uint(msg.value / getWeiToUsdExchangeRate());\r\n        totalUsdReceived = totalUsdReceived + usdReceivedInCurrentTransaction; // total usd received counter\r\n        totalUsdValueOfAllTokens = totalUsdReceived * 100 / PERCENTAGE_OF_TOKENS_SOLD_IN_SALE; // sold tokens are 28% of all tokens\r\n\r\n        if (cappedBuyerList[msg.sender] > 0)\r\n        {\r\n            cappedBuyerList[msg.sender] = cappedBuyerList[msg.sender] + usdReceivedInCurrentTransaction;\r\n        }\r\n\r\n        saleWalletAddress.transfer(msg.value); // Transfer ether to safe sale address\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"cappedBuyerList\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalUsdReceived\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isSaleOpen\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"snipCoinToEtherExchangeRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"allowTransfers\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MINIMUM_PURCHASE_IN_USD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PERCENTAGE_OF_TOKENS_SOLD_IN_SALE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addrList\",\"type\":\"address[]\"}],\"name\":\"addMultipleAddressesToCappedAddresses\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"USD_PURCHASE_AMOUNT_REQUIRING_ID\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addrList\",\"type\":\"address[]\"}],\"name\":\"addMultipleAddressesToUncappedAddresses\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleWalletAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalEthReceivedInWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getWeiToUsdExchangeRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transferable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethToUsdExchangeRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SALE_CAP_IN_USD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DECIMALS_MULTIPLIER\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalUsdValueOfAllTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newSnipCoinToEtherExchangeRate\",\"type\":\"uint256\"}],\"name\":\"updateSnipCoinToEtherExchangeRate\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"addAddressToCappedAddresses\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"addAddressToUncappedAddresses\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"uncappedBuyerList\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"accountWithUpdatePermissions\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"saleCondition\",\"type\":\"bool\"}],\"name\":\"openOrCloseSale\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newEthToUsdExchangeRate\",\"type\":\"uint256\"}],\"name\":\"updateEthToUsdExchangeRate\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"SnipCoin","CompilerVersion":"v0.4.15+commit.bbb8e64f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://ac4d0f84168d4f404f2f557d3135aee390af91ea7be7d9bee3eb7aa96b6136db"}]}