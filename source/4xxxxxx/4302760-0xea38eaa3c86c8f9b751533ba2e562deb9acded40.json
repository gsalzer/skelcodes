{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner {\r\n    if (newOwner != address(0)) {\r\n      owner = newOwner;\r\n    }\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) constant returns (uint256);\r\n  function transfer(address to, uint256 value) returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) returns (bool);\r\n  function approve(address spender, uint256 value) returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev modifier to allow actions only when the contract IS paused\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev modifier to allow actions only when the contract IS NOT paused\r\n   */\r\n  modifier whenPaused {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused returns (bool) {\r\n    paused = true;\r\n    Pause();\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused returns (bool) {\r\n    paused = false;\r\n    Unpause();\r\n    return true;\r\n  }\r\n}\r\n\r\n/**\r\n * @title NonZero\r\n */\r\ncontract NonZero {\r\n\r\n// Functions with this modifier fail if he \r\n    modifier nonZeroAddress(address _to) {\r\n        require(_to != 0x0);\r\n        _;\r\n    }\r\n\r\n    modifier nonZeroAmount(uint _amount) {\r\n        require(_amount > 0);\r\n        _;\r\n    }\r\n\r\n    modifier nonZeroValue() {\r\n        require(msg.value > 0);\r\n        _;\r\n    }\r\n\r\n    // prevents short address attack\r\n    // standard size = 2 * 32\r\n    modifier onlyPayloadSize(uint size) {\r\n\t// we assert the msg data is greater than or equal to, because\r\n\t// a multisgi wallet will be greater than standard payload size of 64 bits\r\n    assert(msg.data.length >= size + 4);\r\n     _;\r\n   } \r\n}\r\n\r\ncontract FuelToken is ERC20, Ownable, NonZero {\r\n\r\n    using SafeMath for uint;\r\n\r\n/////////////////////// TOKEN INFORMATION ///////////////////////\r\n    string public constant name = \"Fuel Token\";\r\n    string public constant symbol = \"FUEL\";\r\n\r\n    uint8 public decimals = 18;\r\n    \r\n    // Mapping to keep user's balances\r\n    mapping (address => uint256) balances;\r\n    // Mapping to keep user's allowances\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n\r\n/////////////////////// VARIABLE INITIALIZATION ///////////////////////\r\n    \r\n    // Allocation for the Vanbex Team\r\n    uint256 public vanbexTeamSupply;\r\n    // Etherparty platform supply\r\n    uint256 public platformSupply;\r\n    // Amount of FUEL for the presale\r\n    uint256 public presaleSupply;\r\n    // Amount of presale tokens remaining at a given time\r\n    uint256 public presaleAmountRemaining;\r\n    // Total ICO supply\r\n    uint256 public icoSupply;\r\n    // Community incentivisation supply\r\n    uint256 public incentivisingEffortsSupply;\r\n    // Crowdsale End Timestamp\r\n    uint256 public crowdfundEndsAt;\r\n    // Vesting period for the Vanbex Team allocation\r\n    uint256 public vanbexTeamVestingPeriod;\r\n\r\n    // Crowdfund Address\r\n    address public crowdfundAddress;\r\n    // Vanbex team address\r\n    address public vanbexTeamAddress;\r\n    // Etherparty platform address\r\n    address public platformAddress;\r\n    // Community incentivisation address\r\n    address public incentivisingEffortsAddress;\r\n\r\n    // Flag keeping track of presale status. Ensures functions can only be called once\r\n    bool public presaleFinalized = false;\r\n    // Flag keeping track of crowdsale status. Ensures functions can only be called once\r\n    bool public crowdfundFinalized = false;\r\n\r\n/////////////////////// EVENTS ///////////////////////\r\n\r\n    // Event called when crowdfund is done\r\n    event CrowdfundFinalized(uint tokensRemaining);\r\n    // Event called when presale is done\r\n    event PresaleFinalized(uint tokensRemaining);\r\n\r\n/////////////////////// MODIFIERS ///////////////////////\r\n\r\n    // Ensure actions can only happen after crowdfund ends\r\n    modifier notBeforeCrowdfundEnds(){\r\n        require(now >= crowdfundEndsAt);\r\n        _;\r\n    }\r\n\r\n    // Ensure vesting period is over\r\n    modifier checkVanbexTeamVestingPeriod() {\r\n        assert(now >= vanbexTeamVestingPeriod);\r\n        _;\r\n    }\r\n\r\n    // Ensure only crowdfund can call the function\r\n    modifier onlyCrowdfund() {\r\n        require(msg.sender == crowdfundAddress);\r\n        _;\r\n    }\r\n\r\n/////////////////////// ERC20 FUNCTIONS ///////////////////////\r\n\r\n    // Transfer\r\n    function transfer(address _to, uint256 _amount) notBeforeCrowdfundEnds returns (bool success) {\r\n        require(balanceOf(msg.sender) >= _amount);\r\n        addToBalance(_to, _amount);\r\n        decrementBalance(msg.sender, _amount);\r\n        Transfer(msg.sender, _to, _amount);\r\n        return true;\r\n    }\r\n\r\n    // Transfer from one address to another (need allowance to be called first)\r\n    function transferFrom(address _from, address _to, uint256 _amount) notBeforeCrowdfundEnds returns (bool success) {\r\n        require(allowance(_from, msg.sender) >= _amount);\r\n        decrementBalance(_from, _amount);\r\n        addToBalance(_to, _amount);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\r\n        Transfer(_from, _to, _amount);\r\n        return true;\r\n    }\r\n\r\n    // Approve another address a certain amount of FUEL\r\n    function approve(address _spender, uint256 _value) returns (bool success) {\r\n        require((_value == 0) || (allowance(msg.sender, _spender) == 0));\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    // Get an address's FUEL allowance\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    // Get the FUEL balance of any address\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n/////////////////////// TOKEN FUNCTIONS ///////////////////////\r\n\r\n    // Constructor\r\n    function FuelToken() {\r\n        crowdfundEndsAt = 1509292800;                                               // Oct 29, 9 AM PST\r\n        vanbexTeamVestingPeriod = crowdfundEndsAt.add(183 * 1 days);                // 6 months vesting period\r\n\r\n        totalSupply = 1 * 10**27;                                                   // 100% - 1 billion total FUEL tokens with 18 decimals\r\n        vanbexTeamSupply = 5 * 10**25;                                              // 5% - 50 million for etherparty team\r\n        platformSupply = 5 * 10**25;                                                // 5% - 50 million to be sold on the etherparty platform in-app\r\n        incentivisingEffortsSupply = 1 * 10**26;                                    // 10% - 100 million for incentivising efforts\r\n        presaleSupply = 54 * 10**25;                                                // 540,000,000 fuel tokens available for presale with overflow for bonus included\r\n        icoSupply = 26 * 10**25;                                                    // 260 million fuel tokens for ico with potential for extra after finalizing presale\r\n       \r\n        presaleAmountRemaining = presaleSupply;                                     // Decreased over the course of the pre-sale\r\n        vanbexTeamAddress = 0xCF701D8eA4C727466D42651dda127c0c033076B0;             // Vanbex Team Address\r\n        platformAddress = 0xF5b5f6c1E233671B220C2A19Af10Fd18785D0744;               // Platform Address\r\n        incentivisingEffortsAddress = 0x5584b17B40F6a2E412e65FcB1533f39Fc7D8Aa26;   // Community incentivisation address\r\n\r\n        addToBalance(incentivisingEffortsAddress, incentivisingEffortsSupply);     \r\n        addToBalance(platformAddress, platformSupply);                              \r\n    }\r\n\r\n    // Sets the crowdfund address, can only be done once\r\n    function setCrowdfundAddress(address _crowdfundAddress) external onlyOwner nonZeroAddress(_crowdfundAddress) {\r\n        require(crowdfundAddress == 0x0);\r\n        crowdfundAddress = _crowdfundAddress;\r\n        addToBalance(crowdfundAddress, icoSupply); \r\n    }\r\n\r\n    // Function for the Crowdfund to transfer tokens\r\n    function transferFromCrowdfund(address _to, uint256 _amount) onlyCrowdfund nonZeroAmount(_amount) nonZeroAddress(_to) returns (bool success) {\r\n        require(balanceOf(crowdfundAddress) >= _amount);\r\n        decrementBalance(crowdfundAddress, _amount);\r\n        addToBalance(_to, _amount);\r\n        Transfer(0x0, _to, _amount);\r\n        return true;\r\n    }\r\n\r\n    // Release Vanbex team supply after vesting period is finished.\r\n    function releaseVanbexTeamTokens() checkVanbexTeamVestingPeriod onlyOwner returns(bool success) {\r\n        require(vanbexTeamSupply > 0);\r\n        addToBalance(vanbexTeamAddress, vanbexTeamSupply);\r\n        Transfer(0x0, vanbexTeamAddress, vanbexTeamSupply);\r\n        vanbexTeamSupply = 0;\r\n        return true;\r\n    }\r\n\r\n    // Finalize presale. If there are leftover FUEL, let them overflow to the crowdfund\r\n    function finalizePresale() external onlyOwner returns (bool success) {\r\n        require(presaleFinalized == false);\r\n        uint256 amount = presaleAmountRemaining;\r\n        if (amount != 0) {\r\n            presaleAmountRemaining = 0;\r\n            addToBalance(crowdfundAddress, amount);\r\n        }\r\n        presaleFinalized = true;\r\n        PresaleFinalized(amount);\r\n        return true;\r\n    }\r\n\r\n    // Finalize crowdfund. If there are leftover FUEL, let them overflow to the be sold at 1$ on the platform\r\n    function finalizeCrowdfund() external onlyCrowdfund {\r\n        require(presaleFinalized == true && crowdfundFinalized == false);\r\n        uint256 amount = balanceOf(crowdfundAddress);\r\n        if (amount > 0) {\r\n            balances[crowdfundAddress] = 0;\r\n            addToBalance(platformAddress, amount);\r\n            Transfer(crowdfundAddress, platformAddress, amount);\r\n        }\r\n        crowdfundFinalized = true;\r\n        CrowdfundFinalized(amount);\r\n    }\r\n\r\n\r\n    // Function to send FUEL to presale investors\r\n    function deliverPresaleFuelBalances(address[] _batchOfAddresses, uint[] _amountOfFuel) external onlyOwner returns (bool success) {\r\n        for (uint256 i = 0; i < _batchOfAddresses.length; i++) {\r\n            deliverPresaleFuelBalance(_batchOfAddresses[i], _amountOfFuel[i]);            \r\n        }\r\n        return true;\r\n    }\r\n\r\n    // All presale purchases will be delivered. If one address has contributed more than once,\r\n    // his contribution will be aggregated\r\n    function deliverPresaleFuelBalance(address _accountHolder, uint _amountOfBoughtFuel) internal onlyOwner {\r\n        require(presaleAmountRemaining > 0);\r\n        addToBalance(_accountHolder, _amountOfBoughtFuel);\r\n        Transfer(0x0, _accountHolder, _amountOfBoughtFuel);\r\n        presaleAmountRemaining = presaleAmountRemaining.sub(_amountOfBoughtFuel);    \r\n    }\r\n\r\n    // Add to balance\r\n    function addToBalance(address _address, uint _amount) internal {\r\n    \tbalances[_address] = balances[_address].add(_amount);\r\n    }\r\n\r\n    // Remove from balance\r\n    function decrementBalance(address _address, uint _amount) internal {\r\n    \tbalances[_address] = balances[_address].sub(_amount);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vanbexTeamAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"releaseVanbexTeamTokens\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vanbexTeamVestingPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presaleFinalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdfundAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"platformSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdfundEndsAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presaleAmountRemaining\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"incentivisingEffortsAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdfundFinalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFromCrowdfund\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_crowdfundAddress\",\"type\":\"address\"}],\"name\":\"setCrowdfundAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalizePresale\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vanbexTeamSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"incentivisingEffortsSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presaleSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalizeCrowdfund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_batchOfAddresses\",\"type\":\"address[]\"},{\"name\":\"_amountOfFuel\",\"type\":\"uint256[]\"}],\"name\":\"deliverPresaleFuelBalances\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"platformAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokensRemaining\",\"type\":\"uint256\"}],\"name\":\"CrowdfundFinalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokensRemaining\",\"type\":\"uint256\"}],\"name\":\"PresaleFinalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"FuelToken","CompilerVersion":"v0.4.17+commit.bdeb9e52","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://8d98d6401dcf8095accb1820eaca657b68dbeb6f2dbbb316b0707d768dd3a4c1"}]}