{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.15;\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Ownable {\r\n\r\n    //Variables\r\n    address public owner;\r\n\r\n    address public newOwner;\r\n\r\n    //    Modifiers\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    function Ownable() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param _newOwner The address to transfer ownership to.\r\n     */\r\n\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        require(_newOwner != address(0));\r\n        newOwner = _newOwner;\r\n    }\r\n\r\n    function acceptOwnership() public {\r\n        if (msg.sender == newOwner) {\r\n            owner = newOwner;\r\n        }\r\n    }\r\n}\r\n\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public constant returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract BasicToken is ERC20Basic {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) balances;\r\n\r\n    /**\r\n    * @dev transfer token for a specified address\r\n    * @param _to The address to transfer to.\r\n    * @param _value The amount to be transferred.\r\n    */\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[msg.sender]);\r\n\r\n        // SafeMath.sub will throw if there is not enough balance.\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the balance of the specified address.\r\n    * @param _owner The address to query the the balance of.\r\n    * @return An uint256 representing the amount owned by the passed address.\r\n    */\r\n    function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   */\r\n  function increaseApproval (address _spender, uint _addedValue) public returns (bool success) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  function decreaseApproval (address _spender, uint _subtractedValue) public returns (bool success) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\ncontract MintableToken is StandardToken, Ownable {\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\r\n    totalSupply = totalSupply.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    Mint(_to, _amount);\r\n    Transfer(0x0, _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() onlyOwner public returns (bool) {\r\n    mintingFinished = true;\r\n    MintFinished();\r\n    return true;\r\n  }\r\n}\r\n\r\ncontract LamdenTau is MintableToken {\r\n    string public constant name = \"Lamden Tau\";\r\n    string public constant symbol = \"TAU\";\r\n    uint8 public constant decimals = 18;\r\n}\r\n\r\ncontract Bounty is Ownable {\r\n\r\n   LamdenTau public lamdenTau;\r\n\r\n   function Bounty(address _tokenContractAddress) public {\r\n      require(_tokenContractAddress != address(0));\r\n      lamdenTau = LamdenTau(_tokenContractAddress);\r\n      \r\n      \r\n   }\r\n\r\n   function returnTokens() onlyOwner {\r\n      uint256 balance = lamdenTau.balanceOf(this);\r\n      lamdenTau.transfer(msg.sender, balance);\r\n   }\r\n\r\n   function issueTokens() onlyOwner  {\r\n      \r\n    lamdenTau.transfer(0xfa00cf3f32dcaacb69d23e0c7eb9ce51a7ea572f, 2136860000000000000000);\r\n    lamdenTau.transfer(0xe134d2736d966629df690945798bc7a7c0611adc, 5876365000000000000000);\r\n    lamdenTau.transfer(0x9c75efdcec8b4d224f690eeb12eef92f72136339, 566267900000000000000);\r\n    lamdenTau.transfer(0x7726994b968c572faa3aed15e40001645225c728, 273578339452000000000);\r\n    lamdenTau.transfer(0x86f73052c4f0ec4247d63d8711b471ceffd390ef, 21368600000000000000);\r\n    lamdenTau.transfer(0xae89f6ce0d0b81d12d7d15aa9f6a527bde9c0b2b, 2136860000000000000000);\r\n    lamdenTau.transfer(0x5b1ad03b5870d402e16f9f1195050aa2886bc51d, 32052900000000000000);\r\n    lamdenTau.transfer(0x4482e6062cd0d1aa69d7878c3a2855ae55965c9d, 2136860000000000000000);\r\n    lamdenTau.transfer(0x3eb00936976414a1635fa91dfb0346450d2f6d94, 1068430000000000000000);\r\n    lamdenTau.transfer(0x07d15931fb6325254d9ec064581927dde10ce6be, 256504721209000000000);\r\n    lamdenTau.transfer(0xcd9c8cebb4a6dffe670d176b770bd5ae0cac02ed, 1068430000000000000000);\r\n    lamdenTau.transfer(0x669b1af82e0948c9d7170dd61fe0c3cad5a97bd7, 21368600000000000000);\r\n    lamdenTau.transfer(0x3272786f65f2f460a1c031628905bcb5f6be7578, 49147780000000000000000);\r\n    lamdenTau.transfer(0xb079a72c627d0a34b880aee0504b901cbce64568, 10684300000000000000000);\r\n    lamdenTau.transfer(0xb079a72c627d0a34b880aee0504b901cbce64568, 10684300000000000000000);\r\n    lamdenTau.transfer(0x346cb860e7447bacd3a616ac956e7900137b2699, 64105800000000000000000);\r\n    lamdenTau.transfer(0x10a3e8bcf184b44a220464bedc4c645a13f57eea, 74790100000000000000);\r\n    lamdenTau.transfer(0x76375f2c86a88452e697dbc2aa84c80f61069e4d, 213686000000000000000);\r\n    lamdenTau.transfer(0x76375f2c86a88452e697dbc2aa84c80f61069e4d, 427372000000000000000);\r\n    lamdenTau.transfer(0xb6a34bd460f02241e80e031023ec20ce6fc310ae, 2991604000000000000000);\r\n    lamdenTau.transfer(0x10a3e8bcf184b44a220464bedc4c645a13f57eea, 6410580000000000000);\r\n    lamdenTau.transfer(0xd15d4886310f3a1fb31f4c32efc9b43b4c94225e, 831868785488400000000);\r\n    lamdenTau.transfer(0x8d8275ce799701ceff6e286446d2c711e9bcf08b, 21368600000000000000000);\r\n    lamdenTau.transfer(0x10a3e8bcf184b44a220464bedc4c645a13f57eea, 427026247504560000000);\r\n    lamdenTau.transfer(0x3f5ce5fbfe3e9af3971dd833d26ba9b5c936f0be, 427372000000000000000);\r\n    lamdenTau.transfer(0x3ee2e6c31957f9b548901679a86fdd8f212e7ece, 68379520000000000000);\r\n    lamdenTau.transfer(0x19d2bb5598c1af4c97a8931fe551ec2f6b6b8feb, 17308566000000000000000);\r\n    lamdenTau.transfer(0xc2f0551bc386932e785df341358833b03e7b1987, 106843000000000000000);\r\n    lamdenTau.transfer(0xc2f0551bc386932e785df341358833b03e7b1987, 1663971777243380000000);\r\n    lamdenTau.transfer(0x3522a96a53fae1f4fef15a53a212ad01bd9d46e1, 6442632900000000000000);\r\n    lamdenTau.transfer(0x1d31c45f0bf15c450f2e3a5ab813c911785cfcc3, 4273720000000000000000);\r\n    lamdenTau.transfer(0x735e93b521aaf24cc503204eeea557149433b617, 4273720000000000000000);\r\n    lamdenTau.transfer(0x4e0d45b58c79ad61e19f30cc87e1d8ecacb2a5da, 6410580000000000000000);\r\n    lamdenTau.transfer(0xece5624b4255ba2207ae97953dc9567c32817863, 3183143946226200000000);\r\n    lamdenTau.transfer(0x7dcf6dbda739efb6acf59c40080f12e19f2f0c19, 2136860000000000000000);\r\n    lamdenTau.transfer(0x13f18968544bc98f3dfc8e174799d276ea1726c1, 427372000000000000000);\r\n    lamdenTau.transfer(0x13f18968544bc98f3dfc8e174799d276ea1726c1, 1695792693311200000000);\r\n    lamdenTau.transfer(0x735e93b521aaf24cc503204eeea557149433b617, 3089258502000000000000);\r\n    lamdenTau.transfer(0x2a09277c856d87e0a79cfd024db6418901003fe2, 10684300000000000000000);\r\n    lamdenTau.transfer(0xf03febad78aa2c43f03ecacbbf832b5a2018db8e, 12393788000000000000000);\r\n    lamdenTau.transfer(0x0c34f68f7c288ffc14d2ca72f3a91331afc49ea1, 320529000000000000000);\r\n    lamdenTau.transfer(0xe28c5e4c6891afb0df739910c733766305cde69a, 2777918000000000000000);\r\n    lamdenTau.transfer(0xc2ce355f6b35400dad7629fe49da1d76ec4547ff, 2923949602072400000000);\r\n    lamdenTau.transfer(0x2f0fd5b02ef78fbab27d41246f4378e68cdd6c62, 349557943939600000000);\r\n    lamdenTau.transfer(0xb5b62dfdc2992ab5a740d1318b732bb67bba475b, 5342150000000000000000);\r\n    lamdenTau.transfer(0xf9bfc2e9352685df2979c585ba99746bbce7ab87, 213686000000000000000);\r\n    lamdenTau.transfer(0xf9bfc2e9352685df2979c585ba99746bbce7ab87, 42523514000000000000000);\r\n    lamdenTau.transfer(0xd9afb726f0689e6df0173bddf73e4c85be954409, 113253580000000000000000);\r\n    lamdenTau.transfer(0x6ff79a4f7d0465f15916aa2197dd47067ce4ab4d, 2878350420000000000000);\r\n    lamdenTau.transfer(0x46fe66665998226c74b3cfd07fe8aa2a2c0393b8, 641058000000000000000);\r\n        \r\n      uint256 balance = lamdenTau.balanceOf(this);\r\n      lamdenTau.transfer(msg.sender, balance);\r\n   }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"lamdenTau\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"issueTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"returnTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tokenContractAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"Bounty","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000c27a2f05fa577a83ba0fdb4c38443c0718356501","Library":"","SwarmSource":"bzzr://0a73b9d50f3227db2a6bf4c0bdf5b3489c7aa51434f5177c02a9b86de1c5eece"}]}