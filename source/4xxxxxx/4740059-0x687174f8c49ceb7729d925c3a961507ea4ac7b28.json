{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.17;\r\n\r\n// ----------------------------------------------------------------------------\r\n// Copyright (c) 2017 GAT International Limited.\r\n// http://www.gatcoin.io/\r\n//\r\n// The MIT Licence.\r\n// ----------------------------------------------------------------------------\r\ncontract Owned {\r\n\r\n    address public owner;\r\n    address public newOwner;\r\n\r\n    event OwnerChanged(address indexed _newOwner);\r\n\r\n\r\n    function Owned() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n\r\n    function transferOwnership(address _newOwner) public onlyOwner returns (bool) {\r\n        require(_newOwner != address(0));\r\n        require(_newOwner != owner);\r\n\r\n        newOwner = _newOwner;\r\n\r\n        return true;\r\n    }\r\n\r\n\r\n    function acceptOwnership() public returns (bool) {\r\n        require(msg.sender == newOwner);\r\n\r\n        owner = msg.sender;\r\n\r\n        OwnerChanged(msg.sender);\r\n\r\n        return true;\r\n    }\r\n}\r\n\r\n\r\ncontract GATTokenSaleConfig {\r\n\r\n    string  public constant SYMBOL                  = \"GAT\";\r\n    string  public constant NAME                    = \"GAT Token\";\r\n    uint256 public constant DECIMALS                = 18;\r\n\r\n    uint256 public constant DECIMALSFACTOR          = 10**uint256(DECIMALS);\r\n    uint256 public constant START_TIME              = 1513512000; // 2017-12-17T12:00:00Z\r\n    uint256 public constant END_TIME                = 1515326399; // 2018-01-07T11:59:59Z\r\n    uint256 public constant CONTRIBUTION_MIN        = 2 ether;\r\n    uint256 public constant TOKEN_TOTAL_CAP         = 1000000000  * DECIMALSFACTOR;\r\n    uint256 public constant TOKEN_PRIVATE_SALE_CAP  =   54545172  * DECIMALSFACTOR; // past presale\r\n    uint256 public constant TOKEN_PRESALE_CAP       =  145454828  * DECIMALSFACTOR; // 200000000 - what was raised in round 1\r\n    uint256 public constant TOKEN_PUBLIC_SALE_CAP   =  445454828  * DECIMALSFACTOR; // This also includes presale\r\n    uint256 public constant TOKEN_FOUNDATION_CAP    =          0  * DECIMALSFACTOR;\r\n    uint256 public constant TOKEN_RESERVE1_CAP      =  100000000  * DECIMALSFACTOR;\r\n    uint256 public constant TOKEN_RESERVE2_CAP      =          0  * DECIMALSFACTOR;\r\n    uint256 public constant TOKEN_FUTURE_CAP        =  400000000  * DECIMALSFACTOR;\r\n\r\n    // Default bonus amount for the presale.\r\n    // 100 = no bonus\r\n    // 120 = 20% bonus.\r\n    // Note that the owner can change the amount of bonus given.\r\n    uint256 public constant PRESALE_BONUS      = 120;\r\n\r\n    // Default value for tokensPerKEther based on ETH at 300 USD.\r\n    // The owner can update this value before the sale starts based on the\r\n    // price of ether at that time.\r\n    // E.g. 300 USD/ETH -> 300,000 USD/KETH / 0.2 USD/TOKEN = 1,500,000\r\n    uint256 public constant TOKENS_PER_KETHER = 14800000;\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract ERC20Interface {\r\n\r\n    uint256 public totalSupply;\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n    function balanceOf(address _owner) public view returns (uint256 balance);\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n    function approve(address _spender, uint256 _value) public returns (bool success);\r\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\r\n}\r\n\r\n// Implementation of standard ERC20 token with ownership.\r\n//\r\ncontract GATToken is ERC20Interface, Owned {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    string public symbol;\r\n    string public name;\r\n    uint256 public decimals;\r\n\r\n    mapping(address => uint256) balances;\r\n    mapping(address => mapping (address => uint256)) allowed;\r\n\r\n\r\n    function GATToken(string _symbol, string _name, uint256 _decimals, uint256 _totalSupply) public\r\n        Owned()\r\n    {\r\n        symbol      = _symbol;\r\n        name        = _name;\r\n        decimals    = _decimals;\r\n        totalSupply = _totalSupply;\r\n\r\n        Transfer(0x0, owner, _totalSupply);\r\n    }\r\n\r\n\r\n    function balanceOf(address _owner) public view returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool success) {\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n\r\n        Transfer(msg.sender, _to, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        balances[_from] = balances[_from].sub(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n\r\n        Transfer(_from, _to, _value);\r\n\r\n        return true;\r\n     }\r\n\r\n\r\n     function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\r\n         return allowed[_owner][_spender];\r\n     }\r\n\r\n\r\n     function approve(address _spender, uint256 _value) public returns (bool success) {\r\n         allowed[msg.sender][_spender] = _value;\r\n\r\n         Approval(msg.sender, _spender, _value);\r\n\r\n         return true;\r\n     }\r\n}\r\n\r\n\r\n// This is the main contract that drives the GAT token sale.\r\n// It exposes the ERC20 interface along with various sale-related functions.\r\n//\r\ncontract GATTokenSale is GATToken, GATTokenSaleConfig {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    // Once finalized, tokens will be freely tradable\r\n    bool public finalized;\r\n\r\n    // Sale can be suspended or resumed by the owner\r\n    bool public suspended;\r\n\r\n    // Addresses for the bank, funding and reserves.\r\n    address public bankAddress;\r\n    address public fundingAddress;\r\n    address public reserve1Address;\r\n    address public reserve2Address;\r\n\r\n    // Price of tokens per 1000 ETH\r\n    uint256 public tokensPerKEther;\r\n\r\n    // The bonus amount on token purchases\r\n    // E.g. 120 means a 20% bonus will be applied.\r\n    uint256 public bonus;\r\n\r\n    // Total number of tokens that have been sold through the sale contract so far.\r\n    uint256 public totalTokensSold;\r\n\r\n    // Minimum contribution value\r\n    uint256 public contributionMinimum;\r\n\r\n    // Keep track of start time and end time for the sale. These have default\r\n    // values when the contract is deployed but can be changed by owner as needed.\r\n    uint256 public startTime;\r\n    uint256 public endTime;\r\n\r\n\r\n    // Events\r\n    event TokensPurchased(address indexed beneficiary, uint256 cost, uint256 tokens);\r\n    event TokensPerKEtherUpdated(uint256 newAmount);\r\n    event ContributionMinimumUpdated(uint256 newAmount);\r\n    event BonusAmountUpdated(uint256 newAmount);\r\n    event TimeWindowUpdated(uint256 newStartTime, uint256 newEndTime);\r\n    event SaleSuspended();\r\n    event SaleResumed();\r\n    event TokenFinalized();\r\n    event ContractTokensReclaimed(uint256 amount);\r\n\r\n// \"0x1a4FBba7231Ec0707925c52b047b951a0BeAA325\", \"0xa85b419eee304563d3587fe934e932f056ca3c14\", \"0xa85b419eee304563d3587fe934e932f056ca3c14\", \"0x587d06eb855811ee987cc842880b9255a3aab45b\", \r\n    function GATTokenSale(address _bankAddress, address _fundingAddress, address _reserve1Address, address _reserve2Address) public\r\n        GATToken(SYMBOL, NAME, DECIMALS, 0)\r\n    {\r\n        // Can only create the contract is the sale has not yet started or ended.\r\n        require(START_TIME >= currentTime());\r\n        require(END_TIME > START_TIME);\r\n\r\n        // Need valid wallet addresses\r\n        require(_bankAddress    != address(0x0));\r\n        require(_bankAddress    != address(this));\r\n        require(_fundingAddress != address(0x0));\r\n        require(_fundingAddress != address(this));\r\n        require(_reserve1Address != address(0x0));\r\n        require(_reserve1Address != address(this));\r\n        require(_reserve2Address != address(0x0));\r\n        require(_reserve2Address != address(this));\r\n\r\n        uint256 salesTotal = TOKEN_PUBLIC_SALE_CAP.add(TOKEN_PRIVATE_SALE_CAP);\r\n        require(salesTotal.add(TOKEN_FUTURE_CAP).add(TOKEN_FOUNDATION_CAP).add(TOKEN_RESERVE1_CAP).add(TOKEN_RESERVE2_CAP) == TOKEN_TOTAL_CAP);\r\n\r\n        // Start in non-finalized state\r\n        finalized = false;\r\n        suspended = false;\r\n\r\n        // Start and end times (used for presale).\r\n        startTime = START_TIME;\r\n        endTime   = END_TIME;\r\n\r\n        // Initial pricing\r\n        tokensPerKEther = TOKENS_PER_KETHER;\r\n\r\n        // Initial contribution minimum\r\n        contributionMinimum = CONTRIBUTION_MIN;\r\n\r\n        // Bonus for contributions\r\n        bonus = PRESALE_BONUS;\r\n\r\n        // Initialize wallet addresses\r\n        bankAddress    = _bankAddress;\r\n        fundingAddress = _fundingAddress;\r\n        reserve1Address = _reserve1Address;\r\n        reserve2Address = _reserve2Address;\r\n\r\n        // Assign initial balances\r\n        balances[address(this)] = balances[address(this)].add(TOKEN_PRESALE_CAP);\r\n        totalSupply = totalSupply.add(TOKEN_PRESALE_CAP);\r\n        Transfer(0x0, address(this), TOKEN_PRESALE_CAP);\r\n\r\n        balances[reserve1Address] = balances[reserve1Address].add(TOKEN_RESERVE1_CAP);\r\n        totalSupply = totalSupply.add(TOKEN_RESERVE1_CAP);\r\n        Transfer(0x0, reserve1Address, TOKEN_RESERVE1_CAP);\r\n\r\n        balances[reserve2Address] = balances[reserve2Address].add(TOKEN_RESERVE2_CAP);\r\n        totalSupply = totalSupply.add(TOKEN_RESERVE2_CAP);\r\n        Transfer(0x0, reserve2Address, TOKEN_RESERVE2_CAP);\r\n\r\n        uint256 bankBalance = TOKEN_TOTAL_CAP.sub(totalSupply);\r\n        balances[bankAddress] = balances[bankAddress].add(bankBalance);\r\n        totalSupply = totalSupply.add(bankBalance);\r\n        Transfer(0x0, bankAddress, bankBalance);\r\n\r\n        // The total supply that we calculated here should be the same as in the config.\r\n        require(balanceOf(address(this))  == TOKEN_PRESALE_CAP);\r\n        require(balanceOf(reserve1Address) == TOKEN_RESERVE1_CAP);\r\n        require(balanceOf(reserve2Address) == TOKEN_RESERVE2_CAP);\r\n        require(balanceOf(bankAddress)    == bankBalance);\r\n        require(totalSupply == TOKEN_TOTAL_CAP);\r\n    }\r\n\r\n\r\n    function currentTime() public constant returns (uint256) {\r\n        return now;\r\n    }\r\n\r\n\r\n    // Allows the owner to change the price for tokens.\r\n    //\r\n    function setTokensPerKEther(uint256 _tokensPerKEther) external onlyOwner returns(bool) {\r\n        require(_tokensPerKEther > 0);\r\n\r\n        // Set the tokensPerKEther amount for any new sale.\r\n        tokensPerKEther = _tokensPerKEther;\r\n\r\n        TokensPerKEtherUpdated(_tokensPerKEther);\r\n\r\n        return true;\r\n    }\r\n\r\n    // Allows the owner to change the minimum contribution amount\r\n    //\r\n    function setContributionMinimum(uint256 _contributionMinimum) external onlyOwner returns(bool) {\r\n        require(_contributionMinimum > 0);\r\n\r\n        // Set the tokensPerKEther amount for any new sale.\r\n        contributionMinimum = _contributionMinimum;\r\n\r\n        ContributionMinimumUpdated(_contributionMinimum);\r\n\r\n        return true;\r\n    }\r\n\r\n    // Allows the owner to change the bonus amount applied to purchases.\r\n    //\r\n    function setBonus(uint256 _bonus) external onlyOwner returns(bool) {\r\n        // 100 means no bonus\r\n        require(_bonus >= 100);\r\n\r\n        // 200 means 100% bonus\r\n        require(_bonus <= 200);\r\n\r\n        bonus = _bonus;\r\n\r\n        BonusAmountUpdated(_bonus);\r\n\r\n        return true;\r\n    }\r\n\r\n\r\n    // Allows the owner to change the time window for the sale.\r\n    //\r\n    function setTimeWindow(uint256 _startTime, uint256 _endTime) external onlyOwner returns(bool) {\r\n        require(_startTime >= START_TIME);\r\n        require(_endTime > _startTime);\r\n\r\n        startTime = _startTime;\r\n        endTime   = _endTime;\r\n\r\n        TimeWindowUpdated(_startTime, _endTime);\r\n\r\n        return true;\r\n    }\r\n\r\n\r\n    // Allows the owner to suspend / stop the sale.\r\n    //\r\n    function suspend() external onlyOwner returns(bool) {\r\n        if (suspended == true) {\r\n            return false;\r\n        }\r\n\r\n        suspended = true;\r\n\r\n        SaleSuspended();\r\n\r\n        return true;\r\n    }\r\n\r\n\r\n    // Allows the owner to resume the sale.\r\n    //\r\n    function resume() external onlyOwner returns(bool) {\r\n        if (suspended == false) {\r\n            return false;\r\n        }\r\n\r\n        suspended = false;\r\n\r\n        SaleResumed();\r\n\r\n        return true;\r\n    }\r\n\r\n\r\n    // Accept ether contributions during the token sale.\r\n    //\r\n    function () payable public {\r\n        buyTokens(msg.sender);\r\n    }\r\n\r\n\r\n    // Allows the caller to buy tokens for another recipient (proxy purchase).\r\n    // This can be used by exchanges for example.\r\n    //\r\n    function buyTokens(address beneficiary) public payable returns (uint256) {\r\n        require(!suspended);\r\n        require(beneficiary != address(0x0));\r\n        require(beneficiary != address(this));\r\n        require(currentTime() >= startTime);\r\n        require(currentTime() <= endTime);\r\n        require(msg.value >= contributionMinimum);\r\n        require(msg.sender != fundingAddress);\r\n\r\n        // Check if the sale contract still has tokens for sale.\r\n        uint256 saleBalance = balanceOf(address(this));\r\n        require(saleBalance > 0);\r\n\r\n        // Calculate the number of tokens that the ether should convert to.\r\n        uint256 tokens = msg.value.mul(tokensPerKEther).mul(bonus).div(10**(18 - DECIMALS + 3 + 2));\r\n        require(tokens > 0);\r\n\r\n        uint256 cost = msg.value;\r\n        uint256 refund = 0;\r\n\r\n        if (tokens > saleBalance) {\r\n            // Not enough tokens left for sale to fulfill the full order.\r\n            tokens = saleBalance;\r\n\r\n            // Calculate the actual cost for the tokens that can be purchased.\r\n            cost = tokens.mul(10**(18 - DECIMALS + 3 + 2)).div(tokensPerKEther.mul(bonus));\r\n\r\n            // Calculate the amount of ETH refund to the contributor.\r\n            refund = msg.value.sub(cost);\r\n        }\r\n\r\n        totalTokensSold = totalTokensSold.add(tokens);\r\n\r\n        // Move tokens from the sale contract to the beneficiary\r\n        balances[address(this)] = balances[address(this)].sub(tokens);\r\n        balances[beneficiary]   = balances[beneficiary].add(tokens);\r\n        Transfer(address(this), beneficiary, tokens);\r\n\r\n        if (refund > 0) {\r\n           msg.sender.transfer(refund);\r\n        }\r\n\r\n        // Transfer the contributed ether to the crowdsale wallets.\r\n        uint256 contribution      = msg.value.sub(refund);\r\n\r\n        fundingAddress.transfer(contribution);\r\n\r\n        TokensPurchased(beneficiary, cost, tokens);\r\n\r\n        return tokens;\r\n    }\r\n\r\n\r\n    // ERC20 transfer function, modified to only allow transfers once the sale has been finalized.\r\n    //\r\n    function transfer(address _to, uint256 _amount) public returns (bool success) {\r\n        if (!isTransferAllowed(msg.sender, _to)) {\r\n            return false;\r\n        }\r\n\r\n        return super.transfer(_to, _amount);\r\n    }\r\n\r\n\r\n    // ERC20 transferFrom function, modified to only allow transfers once the sale has been finalized.\r\n    //\r\n    function transferFrom(address _from, address _to, uint256 _amount) public returns (bool success) {\r\n        if (!isTransferAllowed(_from, _to)) {\r\n            return false;\r\n        }\r\n\r\n        return super.transferFrom(_from, _to, _amount);\r\n    }\r\n\r\n\r\n    // Internal helper to check if the transfer should be allowed\r\n    //\r\n    function isTransferAllowed(address _from, address _to) private view returns (bool) {\r\n        if (finalized) {\r\n            // We allow everybody to transfer tokens once the sale is finalized.\r\n            return true;\r\n        }\r\n\r\n        if (_from == bankAddress || _to == bankAddress) {\r\n            // We allow the bank to initiate transfers. We also allow it to be the recipient\r\n            // of transfers before the token is finalized in case a recipient wants to send\r\n            // back tokens. E.g. KYC requirements cannot be met.\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n\r\n    // Allows owner to transfer tokens assigned to the sale contract, back to the bank wallet.\r\n    function reclaimContractTokens() external onlyOwner returns (bool) {\r\n        uint256 tokens = balanceOf(address(this));\r\n\r\n        if (tokens == 0) {\r\n            return false;\r\n        }\r\n\r\n        balances[address(this)] = balances[address(this)].sub(tokens);\r\n        balances[bankAddress]   = balances[bankAddress].add(tokens);\r\n        Transfer(address(this), bankAddress, tokens);\r\n\r\n        ContractTokensReclaimed(tokens);\r\n\r\n        return true;\r\n    }\r\n\r\n\r\n    // Allows the owner to finalize the sale and allow tokens to be traded.\r\n    //\r\n    function finalize() external onlyOwner returns (bool) {\r\n        require(!finalized);\r\n\r\n        finalized = true;\r\n\r\n        TokenFinalized();\r\n\r\n        return true;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"resume\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_bonus\",\"type\":\"uint256\"}],\"name\":\"setBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokensPerKEther\",\"type\":\"uint256\"}],\"name\":\"setTokensPerKEther\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_startTime\",\"type\":\"uint256\"},{\"name\":\"_endTime\",\"type\":\"uint256\"}],\"name\":\"setTimeWindow\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRESALE_BONUS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN_PRIVATE_SALE_CAP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DECIMALS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"END_TIME\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contributionMinimum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalTokensSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reserve1Address\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"suspended\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bankAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN_FOUNDATION_CAP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN_RESERVE1_CAP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DECIMALSFACTOR\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN_RESERVE2_CAP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"reclaimContractTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reserve2Address\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensPerKEther\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"finalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN_FUTURE_CAP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CONTRIBUTION_MIN\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN_PUBLIC_SALE_CAP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN_TOTAL_CAP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contributionMinimum\",\"type\":\"uint256\"}],\"name\":\"setContributionMinimum\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundingAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"START_TIME\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"suspend\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN_PRESALE_CAP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKENS_PER_KETHER\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SYMBOL\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_bankAddress\",\"type\":\"address\"},{\"name\":\"_fundingAddress\",\"type\":\"address\"},{\"name\":\"_reserve1Address\",\"type\":\"address\"},{\"name\":\"_reserve2Address\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"cost\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"TokensPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"TokensPerKEtherUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"ContributionMinimumUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"BonusAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newStartTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newEndTime\",\"type\":\"uint256\"}],\"name\":\"TimeWindowUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"SaleSuspended\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"SaleResumed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"TokenFinalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ContractTokensReclaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"GATTokenSale","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000001a4fbba7231ec0707925c52b047b951a0beaa325000000000000000000000000a85b419eee304563d3587fe934e932f056ca3c14000000000000000000000000a85b419eee304563d3587fe934e932f056ca3c140000000000000000000000000000000000000000000000000000000000000011","Library":"","SwarmSource":"bzzr://8a458d6e4359895b73124b0aac4006e4d65b795c51161d50c5f37643c8592abd"}]}