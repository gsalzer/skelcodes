{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.15;\r\n\r\ncontract ETHLotteryManagerInterface {\r\n    function register();\r\n}\r\n\r\ncontract ETHLotteryInterface {\r\n    function accumulate();\r\n}\r\n\r\ncontract ETHLottery {\r\n    bytes32 public name = 'ETHLottery - Last 1 Byte Lottery';\r\n    address public manager_address;\r\n    address public owner;\r\n    bool public open;\r\n    uint256 public jackpot;\r\n    uint256 public fee;\r\n    uint256 public owner_fee;\r\n    uint256 public create_block;\r\n    uint256 public result_block;\r\n    uint256 public winners_count;\r\n    bytes32 public result_hash;\r\n    bytes1 public result;\r\n    address public accumulated_from;\r\n    address public accumulate_to;\r\n\r\n    mapping (bytes1 => address[]) bettings;\r\n    mapping (address => uint256) credits;\r\n\r\n    event Balance(uint256 _balance);\r\n    event Result(bytes1 _result);\r\n    event Open(bool _open);\r\n    event Play(address indexed _sender, bytes1 _byte, uint256 _time);\r\n    event Withdraw(address indexed _sender, uint256 _amount, uint256 _time);\r\n    event Destroy();\r\n    event Accumulate(address _accumulate_to, uint256 _amount);\r\n\r\n    function ETHLottery(address _manager, uint256 _fee, uint256 _jackpot, uint256 _owner_fee, address _accumulated_from) {\r\n        owner = msg.sender;\r\n        open = true;\r\n        create_block = block.number;\r\n        manager_address = _manager;\r\n        fee = _fee;\r\n        jackpot = _jackpot;\r\n        owner_fee = _owner_fee;\r\n        // accumulate\r\n        if (_accumulated_from != owner) {\r\n            accumulated_from = _accumulated_from;\r\n            ETHLotteryInterface lottery = ETHLotteryInterface(accumulated_from);\r\n            lottery.accumulate();\r\n        }\r\n        // register with manager\r\n        ETHLotteryManagerInterface manager = ETHLotteryManagerInterface(manager_address);\r\n        manager.register();\r\n        Open(open);\r\n    }\r\n\r\n    modifier isOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    modifier isOriginalOwner() {\r\n        // used tx.origin on purpose instead of\r\n        // msg.sender, as we want to get the original\r\n        // starter of the transaction to be owner\r\n        require(tx.origin == owner);\r\n        _;\r\n    }\r\n\r\n    modifier isOpen() {\r\n        require(open);\r\n        _;\r\n    }\r\n\r\n    modifier isClosed() {\r\n        require(!open);\r\n        _;\r\n    }\r\n\r\n    modifier isPaid() {\r\n        require(msg.value >= fee);\r\n        _;\r\n    }\r\n\r\n    modifier hasPrize() {\r\n        require(credits[msg.sender] > 0);\r\n        _;\r\n    }\r\n\r\n    modifier isAccumulated() {\r\n        require(result_hash != 0 && winners_count == 0);\r\n        _;\r\n    }\r\n\r\n    modifier hasResultHash() {\r\n        require(\r\n            block.number >= result_block &&\r\n            block.number <= result_block + 256 &&\r\n            block.blockhash(result_block) != result_hash\r\n            );\r\n        _;\r\n    }\r\n\r\n    function play(bytes1 _byte) payable isOpen isPaid returns (bool) {\r\n        bettings[_byte].push(msg.sender);\r\n        if (this.balance >= jackpot) {\r\n            uint256 owner_fee_amount = (this.balance * owner_fee) / 100;\r\n            // this is the transaction which\r\n            // will generate the block used\r\n            // to count until the 10th in order\r\n            // to get the lottery result.\r\n            if (!owner.send(owner_fee_amount)) {\r\n                return false;\r\n            }\r\n            open = false;\r\n            // block offset hardcoded to 10\r\n            result_block = block.number + 10;\r\n            Open(open);\r\n        }\r\n        Balance(this.balance);\r\n        Play(msg.sender, _byte, now);\r\n        return true;\r\n    }\r\n\r\n    // This method is only used if we miss the 256th block\r\n    // containing the result hash, lottery() should be used instead\r\n    // this method as this is duplicated from lottery()\r\n    function manual_lottery(bytes32 _result_hash) isClosed isOwner {\r\n        result_hash = _result_hash;\r\n        result = result_hash[31];\r\n        address[] storage winners = bettings[result];\r\n        winners_count = winners.length;\r\n        if (winners_count > 0) {\r\n            uint256 credit = this.balance / winners_count;\r\n            for (uint256 i = 0; i < winners_count; i++) {\r\n                credits[winners[i]] = credit;\r\n            }\r\n        }\r\n        Result(result);\r\n    }\r\n\r\n    function lottery() isClosed hasResultHash isOwner {\r\n        result_hash = block.blockhash(result_block);\r\n        // get last byte (31st) from block hash as result\r\n        result = result_hash[31];\r\n        address[] storage winners = bettings[result];\r\n        winners_count = winners.length;\r\n        if (winners_count > 0) {\r\n            uint256 credit = this.balance / winners_count;\r\n            for (uint256 i = 0; i < winners_count; i++) {\r\n                credits[winners[i]] = credit;\r\n            }\r\n        }\r\n        Result(result);\r\n    }\r\n\r\n    function withdraw() isClosed hasPrize returns (bool) {\r\n        uint256 credit = credits[msg.sender];\r\n        // zero credit before send preventing re-entrancy\r\n        // as msg.sender can be a contract and call us back\r\n        credits[msg.sender] = 0;\r\n        if (!msg.sender.send(credit)) {\r\n            // transfer failed, return credit for withdraw\r\n            credits[msg.sender] = credit;\r\n            return false;\r\n        }\r\n        Withdraw(msg.sender, credit, now);\r\n        return true;\r\n    }\r\n\r\n    function accumulate() isOriginalOwner isClosed isAccumulated {\r\n        accumulate_to = msg.sender;\r\n        if (msg.sender.send(this.balance)) {\r\n            Accumulate(msg.sender, this.balance);\r\n        }\r\n    }\r\n\r\n    function destruct() isClosed isOwner {\r\n        Destroy();\r\n        selfdestruct(owner);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"accumulated_from\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"accumulate_to\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner_fee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"manager_address\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"destruct\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"result_block\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_result_hash\",\"type\":\"bytes32\"}],\"name\":\"manual_lottery\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"result\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes1\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"jackpot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"create_block\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"accumulate\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"lottery\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_byte\",\"type\":\"bytes1\"}],\"name\":\"play\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"result_hash\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"winners_count\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"open\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_manager\",\"type\":\"address\"},{\"name\":\"_fee\",\"type\":\"uint256\"},{\"name\":\"_jackpot\",\"type\":\"uint256\"},{\"name\":\"_owner_fee\",\"type\":\"uint256\"},{\"name\":\"_accumulated_from\",\"type\":\"address\"}],\"payable\":false,\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_balance\",\"type\":\"uint256\"}],\"name\":\"Balance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_result\",\"type\":\"bytes1\"}],\"name\":\"Result\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_open\",\"type\":\"bool\"}],\"name\":\"Open\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_byte\",\"type\":\"bytes1\"},{\"indexed\":false,\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"Play\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Destroy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_accumulate_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Accumulate\",\"type\":\"event\"}]","ContractName":"ETHLottery","CompilerVersion":"v0.4.15+commit.bbb8e64f","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000000fd692e0d7629f169230c513a52934b70f1911bc00000000000000000000000000000000000000000000000000005af3107a400000000000000000000000000000000000000000000000000000005af3107a400000000000000000000000000000000000000000000000000000000000000000020000000000000000000000003a44fc70077511f4ea72171dd000021a2133158e","Library":"","SwarmSource":"bzzr://9a9dd3e92d1f5db9b236d115510037038fdb6fd8f9559a796d00f54ae97e1e85"}]}