{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13;\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract ContributorApprover {\r\n    KyberContributorWhitelist public list;\r\n    mapping(address=>uint)    public participated;\r\n\r\n    uint                      public cappedSaleStartTime;\r\n    uint                      public openSaleStartTime;\r\n    uint                      public openSaleEndTime;\r\n\r\n    using SafeMath for uint;\r\n\r\n\r\n    function ContributorApprover( KyberContributorWhitelist _whitelistContract,\r\n                                  uint                      _cappedSaleStartTime,\r\n                                  uint                      _openSaleStartTime,\r\n                                  uint                      _openSaleEndTime ) {\r\n        list = _whitelistContract;\r\n        cappedSaleStartTime = _cappedSaleStartTime;\r\n        openSaleStartTime = _openSaleStartTime;\r\n        openSaleEndTime = _openSaleEndTime;\r\n\r\n        require( list != KyberContributorWhitelist(0x0) );\r\n        require( cappedSaleStartTime < openSaleStartTime );\r\n        require(  openSaleStartTime < openSaleEndTime );\r\n    }\r\n\r\n    // this is a seperate function so user could query it before crowdsale starts\r\n    function contributorCap( address contributor ) constant returns(uint) {\r\n        return list.getCap( contributor );\r\n    }\r\n\r\n    function eligible( address contributor, uint amountInWei ) constant returns(uint) {\r\n        if( now < cappedSaleStartTime ) return 0;\r\n        if( now >= openSaleEndTime ) return 0;\r\n\r\n        uint cap = contributorCap( contributor );\r\n\r\n        if( cap == 0 ) return 0;\r\n        if( now < openSaleStartTime ) {\r\n            uint remainedCap = cap.sub( participated[ contributor ] );\r\n\r\n            if( remainedCap > amountInWei ) return amountInWei;\r\n            else return remainedCap;\r\n        }\r\n        else {\r\n            return amountInWei;\r\n        }\r\n    }\r\n\r\n    function eligibleTestAndIncrement( address contributor, uint amountInWei ) internal returns(uint) {\r\n        uint result = eligible( contributor, amountInWei );\r\n        participated[contributor] = participated[contributor].add( result );\r\n\r\n        return result;\r\n    }\r\n\r\n    function saleEnded() constant returns(bool) {\r\n        return now > openSaleEndTime;\r\n    }\r\n\r\n    function saleStarted() constant returns(bool) {\r\n        return now >= cappedSaleStartTime;\r\n    }\r\n}\r\n\r\ncontract KyberNetworkTokenSale is ContributorApprover {\r\n    address             public admin;\r\n    address             public kyberMultiSigWallet;\r\n    KyberNetworkCrystal public token;\r\n    uint                public raisedWei;\r\n    bool                public haltSale;\r\n\r\n    mapping(bytes32=>uint) public proxyPurchases;\r\n\r\n    function KyberNetworkTokenSale( address _admin,\r\n                                    address _kyberMultiSigWallet,\r\n                                    KyberContributorWhitelist _whilteListContract,\r\n                                    uint _totalTokenSupply,\r\n                                    uint _premintedTokenSupply,\r\n                                    uint _cappedSaleStartTime,\r\n                                    uint _publicSaleStartTime,\r\n                                    uint _publicSaleEndTime )\r\n\r\n        ContributorApprover( _whilteListContract,\r\n                             _cappedSaleStartTime,\r\n                             _publicSaleStartTime,\r\n                             _publicSaleEndTime )\r\n    {\r\n        admin = _admin;\r\n        kyberMultiSigWallet = _kyberMultiSigWallet;\r\n\r\n        token = new KyberNetworkCrystal( _totalTokenSupply,\r\n                                         _cappedSaleStartTime,\r\n                                         _publicSaleEndTime + 7 days,\r\n                                         _admin );\r\n\r\n        // transfer preminted tokens to company wallet\r\n        token.transfer( kyberMultiSigWallet, _premintedTokenSupply );\r\n    }\r\n\r\n    function setHaltSale( bool halt ) {\r\n        require( msg.sender == admin );\r\n        haltSale = halt;\r\n    }\r\n\r\n    function() payable {\r\n        buy( msg.sender );\r\n    }\r\n\r\n    event ProxyBuy( bytes32 indexed _proxy, address _recipient, uint _amountInWei );\r\n    function proxyBuy( bytes32 proxy, address recipient ) payable returns(uint){\r\n        uint amount = buy( recipient );\r\n        proxyPurchases[proxy] = proxyPurchases[proxy].add(amount);\r\n        ProxyBuy( proxy, recipient, amount );\r\n\r\n        return amount;\r\n    }\r\n\r\n    event Buy( address _buyer, uint _tokens, uint _payedWei );\r\n    function buy( address recipient ) payable returns(uint){\r\n        require( tx.gasprice <= 50000000000 wei );\r\n\r\n        require( ! haltSale );\r\n        require( saleStarted() );\r\n        require( ! saleEnded() );\r\n\r\n        uint weiPayment = eligibleTestAndIncrement( recipient, msg.value );\r\n\r\n        require( weiPayment > 0 );\r\n\r\n        // send to msg.sender, not to recipient\r\n        if( msg.value > weiPayment ) {\r\n            msg.sender.transfer( msg.value.sub( weiPayment ) );\r\n        }\r\n\r\n        // send payment to wallet\r\n        sendETHToMultiSig( weiPayment );\r\n        raisedWei = raisedWei.add( weiPayment );\r\n        uint recievedTokens = weiPayment.mul( 600 );\r\n\r\n        assert( token.transfer( recipient, recievedTokens ) );\r\n\r\n\r\n        Buy( recipient, recievedTokens, weiPayment );\r\n\r\n        return weiPayment;\r\n    }\r\n\r\n    function sendETHToMultiSig( uint value ) internal {\r\n        kyberMultiSigWallet.transfer( value );\r\n    }\r\n\r\n    event FinalizeSale();\r\n    // function is callable by everyone\r\n    function finalizeSale() {\r\n        require( saleEnded() );\r\n        require( msg.sender == admin );\r\n\r\n        // burn remaining tokens\r\n        token.burn(token.balanceOf(this));\r\n\r\n        FinalizeSale();\r\n    }\r\n\r\n    // ETH balance is always expected to be 0.\r\n    // but in case something went wrong, we use this function to extract the eth.\r\n    function emergencyDrain(ERC20 anyToken) returns(bool){\r\n        require( msg.sender == admin );\r\n        require( saleEnded() );\r\n\r\n        if( this.balance > 0 ) {\r\n            sendETHToMultiSig( this.balance );\r\n        }\r\n\r\n        if( anyToken != address(0x0) ) {\r\n            assert( anyToken.transfer(kyberMultiSigWallet, anyToken.balanceOf(this)) );\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    // just to check that funds goes to the right place\r\n    // tokens are not given in return\r\n    function debugBuy() payable {\r\n        require( msg.value == 123 );\r\n        sendETHToMultiSig( msg.value );\r\n    }\r\n}\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner {\r\n    if (newOwner != address(0)) {\r\n      owner = newOwner;\r\n    }\r\n  }\r\n\r\n}\r\n\r\ncontract KyberContributorWhitelist is Ownable {\r\n    // cap is in wei. The value of 7 is just a stub.\r\n    // after kyc registration ends, we change it to the actual value with setSlackUsersCap\r\n    uint public slackUsersCap = 7;\r\n    mapping(address=>uint) public addressCap;\r\n\r\n    function KyberContributorWhitelist() {}\r\n\r\n    event ListAddress( address _user, uint _cap, uint _time );\r\n\r\n    // Owner can delist by setting cap = 0.\r\n    // Onwer can also change it at any time\r\n    function listAddress( address _user, uint _cap ) onlyOwner {\r\n        addressCap[_user] = _cap;\r\n        ListAddress( _user, _cap, now );\r\n    }\r\n\r\n    // an optimization in case of network congestion\r\n    function listAddresses( address[] _users, uint[] _cap ) onlyOwner {\r\n        require(_users.length == _cap.length );\r\n        for( uint i = 0 ; i < _users.length ; i++ ) {\r\n            listAddress( _users[i], _cap[i] );\r\n        }\r\n    }\r\n\r\n    function setSlackUsersCap( uint _cap ) onlyOwner {\r\n        slackUsersCap = _cap;\r\n    }\r\n\r\n    function getCap( address _user ) constant returns(uint) {\r\n        uint cap = addressCap[_user];\r\n\r\n        if( cap == 1 ) return slackUsersCap;\r\n        else return cap;\r\n    }\r\n\r\n    function destroy() onlyOwner {\r\n        selfdestruct(owner);\r\n    }\r\n}\r\n\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) constant returns (uint256);\r\n  function transfer(address to, uint256 value) returns (bool);\r\n  \r\n  // KYBER-NOTE! code changed to comply with ERC20 standard\r\n  event Transfer(address indexed _from, address indexed _to, uint _value);\r\n  //event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) returns (bool) {\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of. \r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) returns (bool);\r\n  function approve(address spender, uint256 value) returns (bool);\r\n  \r\n  // KYBER-NOTE! code changed to comply with ERC20 standard\r\n  event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n  //event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amout of tokens to be transfered\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\r\n    var _allowance = allowed[_from][msg.sender];\r\n\r\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n    // require (_value <= _allowance);\r\n\r\n    // KYBER-NOTE! code changed to comply with ERC20 standard\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    //balances[_from] = balances[_from].sub(_value); // this was removed\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) returns (bool) {\r\n\r\n    // To change the approve amount you first have to reduce the addresses`\r\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n    //  already 0 to mitigate the race condition described here:\r\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifing the amount of tokens still avaible for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n}\r\n\r\ncontract KyberNetworkCrystal is StandardToken, Ownable {\r\n    string  public  constant name = \"Kyber Network Crystal\";\r\n    string  public  constant symbol = \"KNC\";\r\n    uint    public  constant decimals = 18;\r\n\r\n    uint    public  saleStartTime;\r\n    uint    public  saleEndTime;\r\n\r\n    address public  tokenSaleContract;\r\n\r\n    modifier onlyWhenTransferEnabled() {\r\n        if( now <= saleEndTime && now >= saleStartTime ) {\r\n            require( msg.sender == tokenSaleContract );\r\n        }\r\n        _;\r\n    }\r\n\r\n    modifier validDestination( address to ) {\r\n        require(to != address(0x0));\r\n        require(to != address(this) );\r\n        _;\r\n    }\r\n\r\n    function KyberNetworkCrystal( uint tokenTotalAmount, uint startTime, uint endTime, address admin ) {\r\n        // Mint all tokens. Then disable minting forever.\r\n        balances[msg.sender] = tokenTotalAmount;\r\n        totalSupply = tokenTotalAmount;\r\n        Transfer(address(0x0), msg.sender, tokenTotalAmount);\r\n\r\n        saleStartTime = startTime;\r\n        saleEndTime = endTime;\r\n\r\n        tokenSaleContract = msg.sender;\r\n        transferOwnership(admin); // admin could drain tokens that were sent here by mistake\r\n    }\r\n\r\n    function transfer(address _to, uint _value)\r\n        onlyWhenTransferEnabled\r\n        validDestination(_to)\r\n        returns (bool) {\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint _value)\r\n        onlyWhenTransferEnabled\r\n        validDestination(_to)\r\n        returns (bool) {\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n    event Burn(address indexed _burner, uint _value);\r\n\r\n    function burn(uint _value) onlyWhenTransferEnabled\r\n        returns (bool){\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        totalSupply = totalSupply.sub(_value);\r\n        Burn(msg.sender, _value);\r\n        Transfer(msg.sender, address(0x0), _value);\r\n        return true;\r\n    }\r\n\r\n    // save some gas by making only one contract call\r\n    function burnFrom(address _from, uint256 _value) onlyWhenTransferEnabled\r\n        returns (bool) {\r\n        assert( transferFrom( _from, msg.sender, _value ) );\r\n        return burn(_value);\r\n    }\r\n\r\n    function emergencyERC20Drain( ERC20 token, uint amount ) onlyOwner {\r\n        token.transfer( owner, amount );\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"cappedSaleStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"openSaleStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"list\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"contributor\",\"type\":\"address\"},{\"name\":\"amountInWei\",\"type\":\"uint256\"}],\"name\":\"eligible\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"contributor\",\"type\":\"address\"}],\"name\":\"contributorCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalizeSale\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleStarted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"haltSale\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"halt\",\"type\":\"bool\"}],\"name\":\"setHaltSale\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"anyToken\",\"type\":\"address\"}],\"name\":\"emergencyDrain\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"proxy\",\"type\":\"bytes32\"},{\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"proxyBuy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"debugBuy\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"participated\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"raisedWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kyberMultiSigWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"proxyPurchases\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"openSaleEndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"buy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_admin\",\"type\":\"address\"},{\"name\":\"_kyberMultiSigWallet\",\"type\":\"address\"},{\"name\":\"_whilteListContract\",\"type\":\"address\"},{\"name\":\"_totalTokenSupply\",\"type\":\"uint256\"},{\"name\":\"_premintedTokenSupply\",\"type\":\"uint256\"},{\"name\":\"_cappedSaleStartTime\",\"type\":\"uint256\"},{\"name\":\"_publicSaleStartTime\",\"type\":\"uint256\"},{\"name\":\"_publicSaleEndTime\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_proxy\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amountInWei\",\"type\":\"uint256\"}],\"name\":\"ProxyBuy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokens\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_payedWei\",\"type\":\"uint256\"}],\"name\":\"Buy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"FinalizeSale\",\"type\":\"event\"}]","ContractName":"KyberNetworkTokenSale","CompilerVersion":"v0.4.15+commit.bbb8e64f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000346fbe5d02c89fb4599f33bdce987981d573740a000000000000000000000000346fbe5d02c89fb4599f33bdce987981d573740a000000000000000000000000fe8cf10c6075c4c119e34226643bc454a1a0d822000000000000000000000000000000000000000000baf15c8c90e9c8220000000000000000000000000000000000000000000000005d78ae464874e4110000000000000000000000000000000000000000000000000000000000000059bb6c600000000000000000000000000000000000000000000000000000000059bcbde00000000000000000000000000000000000000000000000000000000059be0f60","Library":"","SwarmSource":"bzzr://7caf63297f1744c81dc22b3fcc78ec19977d0bb4d5160ae1fd8cb6aca1957bcc"}]}