{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    Unpause();\r\n  }\r\n}\r\n\r\ncontract DeLottery is Pausable {\r\n\tusing SafeMath for uint256;\r\n\r\n\tuint32 public constant QUORUM = 3;\r\n\r\n\taddress[] gamblers;\r\n\r\n\tuint public ticketPrice = 1 ether;\r\n\r\n\tuint public prizeFund = 0;\r\n\r\n\tuint public nextTicketPrice = 0;\r\n\r\n\tuint public stage;\r\n\r\n\tuint public maxTickets = 100;\r\n\r\n\tmapping(address => mapping(address => uint)) prizes;\r\n\r\n\tmapping(address => bool) lotteryRunners;\r\n\r\n\tevent Win(uint indexed stage, uint ticketsCount, uint ticketNumber, address indexed winner, uint prize);\r\n\r\n   \tmodifier canRunLottery() {\r\n   \t\trequire(lotteryRunners[msg.sender]);\r\n   \t\t_;\r\n   \t}\r\n\r\n\tfunction DeLottery() public {\r\n\t\tlotteryRunners[msg.sender] = true;\r\n\t\tgamblers.push(0x0);\r\n\t}\r\n\r\n\tfunction () public payable whenNotPaused {\r\n\t\trequire(!isContract(msg.sender));\r\n\t\trequire(msg.value >= ticketPrice);\r\n\t\tuint availableTicketsToBuy = maxTickets - getTicketsCount();\r\n\t\trequire(availableTicketsToBuy > 0);\r\n\r\n\t\tuint ticketsBought = msg.value.div(ticketPrice);\r\n\r\n\t\tuint ticketsToBuy;\r\n\t\tuint refund = 0;\r\n\t\tif(ticketsBought > availableTicketsToBuy) {\r\n\t\t\tticketsToBuy = availableTicketsToBuy;\r\n\t\t\trefund = (ticketsBought - availableTicketsToBuy).mul(ticketPrice);\r\n\t\t} else {\r\n\t\t\tticketsToBuy = ticketsBought;\r\n\t\t}\r\n\r\n\t\tfor(uint16 i = 0; i < ticketsToBuy; i++) {\r\n\t\t\tgamblers.push(msg.sender);\r\n\t\t}\r\n\r\n\t\tprizeFund = prizeFund.add(ticketsToBuy.mul(ticketPrice));\r\n\r\n\t\t//return change\r\n\t\trefund = refund.add(msg.value % ticketPrice);\r\n\t\tif(refund > 0) {\r\n\t\t\tmsg.sender.transfer(refund);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction calculateWinnerPrize(uint fund, uint winnersCount) public pure returns (uint prize) {\r\n\t\treturn fund.mul(19).div(winnersCount).div(20);\r\n\t}\r\n\r\n\tfunction calculateWinnersCount(uint _ticketsCount) public pure returns (uint count) {\r\n\t\tif(_ticketsCount < 10) {\r\n\t\t\treturn 1;\r\n\t\t} else {\r\n\t\t\treturn _ticketsCount.div(10);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction runLottery() external whenNotPaused canRunLottery {\r\n\t\tuint gamblersLength = getTicketsCount();\r\n\t\trequire(gamblersLength >= QUORUM);\r\n\r\n\t\tuint winnersCount = calculateWinnersCount(gamblersLength);\r\n\t\tuint winnerPrize = calculateWinnerPrize(prizeFund, winnersCount);\r\n\r\n\t\tint[] memory winners = new int[](winnersCount);\r\n\r\n\t\tuint lastWinner = 0;\r\n\t\tbytes32 rnd = block.blockhash(block.number - 1);\r\n\t\tfor(uint i = 0; i < winnersCount; i++) {\r\n\t\t\tlastWinner = generateNextWinner(rnd, lastWinner, winners, gamblers.length);\r\n\t\t\twinners[i] = int(lastWinner);\r\n\t\t\taddress winnerAddress = gamblers[uint(winners[i])];\r\n\t\t\twinnerAddress.transfer(winnerPrize); //safe because gambler can't be a contract\r\n\t\t\tWin(stage, gamblersLength, lastWinner, winnerAddress, winnerPrize);\r\n\t\t}\r\n\r\n\t\tsetTicketPriceIfNeeded();\r\n\r\n\t\t//set initial state\r\n\t\tprizeFund = 0;\r\n\t\tgamblers.length = 1;\r\n\t\tstage += 1;\r\n\t}\r\n\r\n\tfunction getTicketsCount() public view returns (uint) {\r\n\t\treturn gamblers.length - 1;\r\n\t}\r\n\r\n\tfunction setTicketPrice(uint _ticketPrice) external onlyOwner {\r\n\t\tif(getTicketsCount() == 0) {\r\n\t\t\tticketPrice = _ticketPrice;\r\n\t\t\tnextTicketPrice = 0;\r\n\t\t} else {\r\n\t\t\tnextTicketPrice = _ticketPrice;\r\n\t\t}\r\n\t}\r\n\r\n\tfunction setMaxTickets(uint _maxTickets) external onlyOwner {\r\n\t\tmaxTickets = _maxTickets;\r\n\t}\r\n\r\n\tfunction setAsLotteryRunner(address addr, bool isAllowedToRun) external onlyOwner {\r\n\t\tlotteryRunners[addr] = isAllowedToRun;\r\n\t}\r\n\r\n\tfunction setTicketPriceIfNeeded() private {\r\n\t\tif(nextTicketPrice > 0) {\r\n\t\t\tticketPrice = nextTicketPrice;\r\n\t\t\tnextTicketPrice = 0;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Function to get ether from contract\r\n\t* @param amount Amount in wei to withdraw\r\n\t*/\r\n\tfunction withdrawEther(address recipient, uint amount) external onlyOwner {\r\n\t\trecipient.transfer(amount);\r\n\t}\r\n\r\n\tfunction generateNextWinner(bytes32 rnd, uint previousWinner, int[] winners, uint gamblersCount) private view returns(uint) {\r\n\t\tuint nonce = 0;\r\n\t\tuint winner = generateWinner(rnd, previousWinner, nonce, gamblersCount);\r\n\r\n\t\twhile(isInArray(winner, winners)) {\r\n\t\t\tnonce += 1;\r\n\t\t\twinner = generateWinner(rnd, previousWinner, nonce, gamblersCount);\r\n\t\t}\r\n\r\n\t\treturn winner;\r\n\t}\r\n\r\n\tfunction generateWinner(bytes32 rnd, uint previousWinner, uint nonce, uint gamblersCount) private pure returns (uint winner) {\r\n\t\treturn uint(keccak256(rnd, previousWinner, nonce)) % gamblersCount;\r\n\t}\r\n\r\n\tfunction isInArray(uint element, int[] array) private pure returns (bool) {\r\n\t\tfor(uint64 i = 0; i < array.length; i++) {\r\n\t\t\tif(uint(array[i]) == element) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\tfunction isContract(address _addr) private view returns (bool is_contract) {\r\n\t\tuint length;\r\n\t\tassembly {\r\n\t\t\t//retrieve the size of the code on target address, this needs assembly\r\n\t\t\tlength := extcodesize(_addr)\r\n\t\t}\r\n\t\treturn length > 0;\r\n\t}\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getTicketsCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ticketPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ticketPrice\",\"type\":\"uint256\"}],\"name\":\"setTicketPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextTicketPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"QUORUM\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_maxTickets\",\"type\":\"uint256\"}],\"name\":\"setMaxTickets\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"runLottery\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"fund\",\"type\":\"uint256\"},{\"name\":\"winnersCount\",\"type\":\"uint256\"}],\"name\":\"calculateWinnerPrize\",\"outputs\":[{\"name\":\"prize\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxTickets\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"isAllowedToRun\",\"type\":\"bool\"}],\"name\":\"setAsLotteryRunner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"prizeFund\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_ticketsCount\",\"type\":\"uint256\"}],\"name\":\"calculateWinnersCount\",\"outputs\":[{\"name\":\"count\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"stage\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ticketsCount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ticketNumber\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"prize\",\"type\":\"uint256\"}],\"name\":\"Win\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"DeLottery","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://08778f7337b5bd2d29adb58f88557926267829d4d83631b9766b117fced67401"}]}