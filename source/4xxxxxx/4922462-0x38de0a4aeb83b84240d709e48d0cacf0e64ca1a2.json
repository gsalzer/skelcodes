{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.18;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint a, uint b) internal pure returns (uint256) {\r\n        uint c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n\r\n    function pow(uint a, uint b) internal pure returns (uint) {\r\n        uint c = a ** b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n    uint256 public totalSupply;\r\n    function balanceOf(address _who) public constant returns (uint256);\r\n    function transfer(address _to, uint256 _value) public returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) public balances;\r\n\r\n    /// seconds since 01.01.1970 to 17.02.2018 00:00:00 GMT\r\n    uint64 public dateTransferable = 1518825600;\r\n\r\n    /**\r\n     * @dev Transfer token for a specified address\r\n     * @param _to The address to transfer to.\r\n     * @param _value The amount to be transferred.\r\n     */\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        uint64 _now = uint64(block.timestamp);\r\n        require(_now >= dateTransferable);\r\n        require(_to != address(this)); // Don't allow to transfer tokens to contract address\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the balance of the specified address.\r\n     * @param _address The address to query the balance of.\r\n     * @return An uint256 representing the amount owned by the passed address.\r\n     */\r\n    function balanceOf(address _address) public view returns (uint256) {\r\n        return balances[_address];\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n    function allowance(address _owner, address _spender) public constant returns (uint256);\r\n    function transferFrom(address _from, address _to, uint256 value) public returns (bool);\r\n    function approve(address _spender, uint256 _value) public returns (bool);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n/** \r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n\r\n    address public owner;\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original 'owner' of the contract to the sender account.\r\n     */\r\n    function Ownable() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n    event Pause();\r\n    event Unpause();\r\n\r\n    bool public paused = false;\r\n\r\n    /**\r\n     * @dev modifier to allow actions only when the contract IS paused\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!paused);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev modifier to allow actions only when the contract IS NOT paused\r\n     */\r\n    modifier whenPaused() {\r\n        require(paused);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev called by the owner to pause, triggers stopped state\r\n     */\r\n    function pause() public onlyOwner whenNotPaused returns (bool) {\r\n        paused = true;\r\n        Pause();\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev called by the owner to unpause, returns to normal state\r\n     */\r\n    function unpause() public onlyOwner whenPaused returns (bool) {\r\n        paused = false;\r\n        Unpause();\r\n        return true;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title Mintable token\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\r\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n */\r\ncontract MintableToken is BasicToken, Ownable {\r\n\r\n    event Mint(address indexed to, uint256 amount);\r\n    event MintFinished();\r\n\r\n    bool public mintingFinished = false;\r\n\r\n    modifier canMint() {\r\n        require(!mintingFinished);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to mint tokens\r\n     * @param _amount The amount of tokens to mint.\r\n     * @return A boolean that indicates if the operation was successful.\r\n     */\r\n    function mint(uint256 _amount) public onlyOwner canMint returns (bool) {\r\n        totalSupply = totalSupply.add(_amount);\r\n        balances[owner] = balances[owner].add(_amount);\r\n        Mint(owner, _amount);\r\n        Transfer(0x0, owner, _amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to stop minting new tokens.\r\n     * @return True if the operation was successful.\r\n     */\r\n    function finishMinting() public onlyOwner returns (bool) {\r\n        mintingFinished = true;\r\n        MintFinished();\r\n        return true;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title Xineoken\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\r\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n */\r\ncontract Xineoken is BasicToken, Ownable, Pausable, MintableToken {\r\n\r\n    using SafeMath for uint256;\r\n    \r\n    string public name = \"Xineoken\";\r\n    uint256 public decimals = 2;\r\n    string public symbol = \"XIN\";\r\n\r\n    /// price for a single token\r\n    uint256 public buyPrice = 10526315789474;\r\n    /// price for a single token after the 2nd stage of tokens\r\n    uint256 public buyPriceFinal = 52631578947368;\r\n    /// number of tokens sold\r\n    uint256 public allocatedTokens = 0;\r\n    /// first tier of tokens at a discount\r\n    uint256 public stage1Tokens = 330000000 * (10 ** decimals);\r\n    /// second tier of tokens at a discount\r\n    uint256 public stage2Tokens = 660000000 * (10 ** decimals);\r\n    /// minimum amount in wei 0.1 ether\r\n    uint256 public minimumBuyAmount = 100000000000000000;\r\n    \r\n    function Xineoken() public {\r\n        totalSupply = 1000000000 * (10 ** decimals);\r\n        balances[owner] = totalSupply;\r\n    }\r\n\r\n    // fallback function can be used to buy tokens\r\n    function () public payable {\r\n        buyToken();\r\n    }\r\n    \r\n    /**\r\n     * @dev Calculate the number of tokens based on the current stage\r\n     * @param _value The amount of wei\r\n     * @return The number of tokens\r\n     */\r\n    function calculateTokenAmount(uint256 _value) public view returns (uint256) {\r\n\r\n        var tokenAmount = uint256(0);\r\n        var tokenAmountCurrentStage = uint256(0);\r\n        var tokenAmountNextStage = uint256(0);\r\n  \r\n        var stage1TokensNoDec = stage1Tokens / (10 ** decimals);\r\n        var stage2TokensNoDec = stage2Tokens / (10 ** decimals);\r\n        var allocatedTokensNoDec = allocatedTokens / (10 ** decimals);\r\n  \r\n        if (allocatedTokensNoDec < stage1TokensNoDec) {\r\n            tokenAmount = _value / buyPrice;\r\n            if (tokenAmount.add(allocatedTokensNoDec) > stage1TokensNoDec) {\r\n                tokenAmountCurrentStage = stage1TokensNoDec.sub(allocatedTokensNoDec);\r\n                tokenAmountNextStage = (_value.sub(tokenAmountCurrentStage.mul(buyPrice))) / (buyPrice * 2);\r\n                tokenAmount = tokenAmountCurrentStage + tokenAmountNextStage;\r\n            }\r\n        } else if (allocatedTokensNoDec < (stage2TokensNoDec)) {\r\n            tokenAmount = _value / (buyPrice * 2);\r\n            if (tokenAmount.add(allocatedTokensNoDec) > stage2TokensNoDec) {\r\n                tokenAmountCurrentStage = stage2TokensNoDec.sub(allocatedTokensNoDec);\r\n                tokenAmountNextStage = (_value.sub(tokenAmountCurrentStage.mul(buyPrice * 2))) / buyPriceFinal;\r\n                tokenAmount = tokenAmountCurrentStage + tokenAmountNextStage;\r\n            }\r\n        } else {\r\n            tokenAmount = _value / buyPriceFinal;\r\n        }\r\n\r\n        return tokenAmount;\r\n    }\r\n\r\n    /**\r\n     * @dev Buy tokens when the contract is not paused.\r\n     */\r\n    function buyToken() public whenNotPaused payable {\r\n\r\n        require(msg.sender != 0x0);\r\n        require(msg.value >= minimumBuyAmount);\r\n        \r\n        uint256 weiAmount = msg.value;\r\n        uint256 tokens = calculateTokenAmount(weiAmount);\r\n\r\n        require(tokens > 0);\r\n\r\n        uint256 totalTokens = tokens * (10 ** decimals);\r\n\r\n        balances[owner] = balances[owner].sub(totalTokens);\r\n        balances[msg.sender] = balances[msg.sender].add(totalTokens);\r\n        allocatedTokens = allocatedTokens.add(totalTokens);\r\n        Transfer(owner, msg.sender, totalTokens);\r\n        \r\n        forwardFunds();\r\n    }\r\n\r\n    /**\r\n     * @dev Allocate tokens to an address\r\n     * @param _to Address where tokens should be allocated to.\r\n     * @param _tokens Amount of tokens.\r\n     * @return True if the operation was successful.\r\n     */\r\n    function allocateTokens(address _to, uint256 _tokens) public onlyOwner returns (bool) {\r\n        require(balanceOf(owner) >= _tokens);\r\n        balances[owner] = balances[owner].sub(_tokens);\r\n        balances[_to] = balances[_to].add(_tokens);\r\n        allocatedTokens = allocatedTokens.add(_tokens);\r\n        Transfer(owner, _to, _tokens);\r\n        return true;\r\n    }\r\n\r\n    /** \r\n     * @param _newBuyPrice Price in wei users can buy from the contract.\r\n     * @param _newBuyPriceFinal Final price in wei users can buy from the contract.\r\n     * @return True if the operation was successful.\r\n     */\r\n    function setBuyPrice(uint256 _newBuyPrice, uint256 _newBuyPriceFinal) public onlyOwner returns (bool) {\r\n        buyPrice = _newBuyPrice;\r\n        buyPriceFinal = _newBuyPriceFinal;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Set the date tokens can be transferred.\r\n     * @param _date The date after tokens can be transferred.\r\n     */\r\n    function setTransferableDate(uint64 _date) public onlyOwner {\r\n        dateTransferable = _date;\r\n    }\r\n\r\n    /**\r\n     * @dev Set the minimum buy amount in wei.\r\n     * @param _amount Wei amount.\r\n     */\r\n    function setMinimumBuyAmount(uint256 _amount) public onlyOwner {\r\n        minimumBuyAmount = _amount;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        if (newOwner != address(0)) {\r\n            // transfer tokens from owner to new owner\r\n            var previousOwner = owner;\r\n            var ownerBalance = balances[previousOwner];\r\n            balances[previousOwner] = balances[previousOwner].sub(ownerBalance);\r\n            balances[newOwner] = balances[newOwner].add(ownerBalance);\r\n            owner = newOwner;\r\n            Transfer(previousOwner, newOwner, ownerBalance);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Forward funds to owner address\r\n     */\r\n    function forwardFunds() internal {\r\n        if (!owner.send(msg.value)) {\r\n            revert();\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"allocatedTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setMinimumBuyAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyPriceFinal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_date\",\"type\":\"uint64\"}],\"name\":\"setTransferableDate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stage2Tokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"allocateTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimumBuyAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"calculateTokenAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyToken\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newBuyPrice\",\"type\":\"uint256\"},{\"name\":\"_newBuyPriceFinal\",\"type\":\"uint256\"}],\"name\":\"setBuyPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stage1Tokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dateTransferable\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"Xineoken","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://b218f2e87377655d9c5301263d406fb333c993d8139634fbf466b6c89f3a44e3"}]}