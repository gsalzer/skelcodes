{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13;\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner {\r\n    if (newOwner != address(0)) {\r\n      owner = newOwner;\r\n    }\r\n  }\r\n\r\n}\r\n\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev modifier to allow actions only when the contract IS paused\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev modifier to allow actions only when the contract IS NOT paused\r\n   */\r\n  modifier whenPaused {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused returns (bool) {\r\n    paused = true;\r\n    Pause();\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused returns (bool) {\r\n    paused = false;\r\n    Unpause();\r\n    return true;\r\n  }\r\n}\r\n\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) constant returns (uint256);\r\n  function transfer(address to, uint256 value) returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) returns (bool) {\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of. \r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) returns (bool);\r\n  function approve(address spender, uint256 value) returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amout of tokens to be transfered\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\r\n    var _allowance = allowed[_from][msg.sender];\r\n\r\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n    // require (_value <= _allowance);\r\n\r\n    balances[_to] = balances[_to].add(_value);\r\n    balances[_from] = balances[_from].sub(_value);\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) returns (bool) {\r\n\r\n    // To change the approve amount you first have to reduce the addresses`\r\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n    //  already 0 to mitigate the race condition described here:\r\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifing the amount of tokens still avaible for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n}\r\n\r\ncontract PausableToken is StandardToken, Pausable {\r\n\r\n  function transfer(address _to, uint _value) whenNotPaused returns (bool) {\r\n    return super.transfer(_to, _value);\r\n  }\r\n\r\n  function transferFrom(address _from, address _to, uint _value) whenNotPaused returns (bool) {\r\n    return super.transferFrom(_from, _to, _value);\r\n  }\r\n}\r\n\r\ncontract SomaIco is PausableToken {\r\n    using SafeMath for uint256;\r\n\r\n    string public name = \"Soma Community Token\";\r\n    string public symbol = \"SCT\";\r\n    uint8 public decimals = 18;\r\n\r\n    address public liquidityReserveWallet; // address where liquidity reserve tokens will be delivered\r\n    address public wallet; // address where funds are collected\r\n    address public marketingWallet; // address which controls marketing token pool\r\n\r\n    uint256 public icoStartTimestamp; // ICO start timestamp\r\n    uint256 public icoEndTimestamp; // ICO end timestamp\r\n\r\n    uint256 public totalRaised = 0; // total amount of money raised in wei\r\n    uint256 public totalSupply; // total token supply with decimals precisoin\r\n    uint256 public marketingPool; // marketing pool with decimals precisoin\r\n    uint256 public tokensSold = 0; // total number of tokens sold\r\n\r\n    bool public halted = false; //the owner address can set this to true to halt the crowdsale due to emergency\r\n\r\n    uint256 public icoEtherMinCap; // should be specified as: 8000 * 1 ether\r\n    uint256 public icoEtherMaxCap; // should be specified as: 120000 * 1 ether\r\n    uint256 public rate = 450; // standard SCT/ETH rate\r\n\r\n    event Burn(address indexed burner, uint256 value);\r\n\r\n    function SomaIco(\r\n        address newWallet,\r\n        address newMarketingWallet,\r\n        address newLiquidityReserveWallet,\r\n        uint256 newIcoEtherMinCap,\r\n        uint256 newIcoEtherMaxCap,\r\n        uint256 totalPresaleRaised\r\n    ) {\r\n        require(newWallet != 0x0);\r\n        require(newMarketingWallet != 0x0);\r\n        require(newLiquidityReserveWallet != 0x0);\r\n        require(newIcoEtherMinCap <= newIcoEtherMaxCap);\r\n        require(newIcoEtherMinCap > 0);\r\n        require(newIcoEtherMaxCap > 0);\r\n\r\n        pause();\r\n\r\n        icoEtherMinCap = newIcoEtherMinCap;\r\n        icoEtherMaxCap = newIcoEtherMaxCap;\r\n        wallet = newWallet;\r\n        marketingWallet = newMarketingWallet;\r\n        liquidityReserveWallet = newLiquidityReserveWallet;\r\n\r\n        // calculate marketingPool and totalSupply based on the max cap:\r\n        // totalSupply = rate * icoEtherMaxCap + marketingPool\r\n        // marketingPool = 10% * totalSupply\r\n        // hence:\r\n        // totalSupply = 10/9 * rate * icoEtherMaxCap\r\n        totalSupply = icoEtherMaxCap.mul(rate).mul(10).div(9);\r\n        marketingPool = totalSupply.div(10);\r\n\r\n        // account for the funds raised during the presale\r\n        totalRaised = totalRaised.add(totalPresaleRaised);\r\n\r\n        // assign marketing pool to marketing wallet\r\n        assignTokens(marketingWallet, marketingPool);\r\n    }\r\n\r\n    /// fallback function to buy tokens\r\n    function () nonHalted nonZeroPurchase acceptsFunds payable {\r\n        address recipient = msg.sender;\r\n        uint256 weiAmount = msg.value;\r\n\r\n        uint256 amount = weiAmount.mul(rate);\r\n\r\n        assignTokens(recipient, amount);\r\n        totalRaised = totalRaised.add(weiAmount);\r\n\r\n        forwardFundsToWallet();\r\n    }\r\n\r\n    modifier acceptsFunds() {\r\n        bool hasStarted = icoStartTimestamp != 0 && now >= icoStartTimestamp;\r\n        require(hasStarted);\r\n\r\n        // ICO is continued over the end date until the min cap is reached\r\n        bool isIcoInProgress = now <= icoEndTimestamp\r\n                || (icoEndTimestamp == 0) // before dates are set\r\n                || totalRaised < icoEtherMinCap;\r\n        require(isIcoInProgress);\r\n\r\n        bool isBelowMaxCap = totalRaised < icoEtherMaxCap;\r\n        require(isBelowMaxCap);\r\n\r\n        _;\r\n    }\r\n\r\n    modifier nonHalted() {\r\n        require(!halted);\r\n        _;\r\n    }\r\n\r\n    modifier nonZeroPurchase() {\r\n        require(msg.value > 0);\r\n        _;\r\n    }\r\n\r\n    function forwardFundsToWallet() internal {\r\n        wallet.transfer(msg.value); // immediately send Ether to wallet address, propagates exception if execution fails\r\n    }\r\n\r\n    function assignTokens(address recipient, uint256 amount) internal {\r\n        balances[recipient] = balances[recipient].add(amount);\r\n        tokensSold = tokensSold.add(amount);\r\n\r\n        // sanity safeguard\r\n        if (tokensSold > totalSupply) {\r\n            // there is a chance that tokens are sold over the supply:\r\n            // a) when: total presale bonuses > (maxCap - totalRaised) * rate\r\n            // b) when: last payment goes over the maxCap\r\n            totalSupply = tokensSold;\r\n        }\r\n\r\n        Transfer(0x0, recipient, amount);\r\n    }\r\n\r\n    function setIcoDates(uint256 newIcoStartTimestamp, uint256 newIcoEndTimestamp) public onlyOwner {\r\n        require(newIcoStartTimestamp < newIcoEndTimestamp);\r\n        require(!isIcoFinished());\r\n        icoStartTimestamp = newIcoStartTimestamp;\r\n        icoEndTimestamp = newIcoEndTimestamp;\r\n    }\r\n\r\n    function setRate(uint256 _rate) public onlyOwner {\r\n        require(!isIcoFinished());\r\n        rate = _rate;\r\n    }\r\n\r\n    function haltFundraising() public onlyOwner {\r\n        halted = true;\r\n    }\r\n\r\n    function unhaltFundraising() public onlyOwner {\r\n        halted = false;\r\n    }\r\n\r\n    function isIcoFinished() public constant returns (bool icoFinished) {\r\n        return (totalRaised >= icoEtherMinCap && icoEndTimestamp != 0 && now > icoEndTimestamp) ||\r\n               (totalRaised >= icoEtherMaxCap);\r\n    }\r\n\r\n    function prepareLiquidityReserve() public onlyOwner {\r\n        require(isIcoFinished());\r\n        \r\n        uint256 unsoldTokens = totalSupply.sub(tokensSold);\r\n        // make sure there are any unsold tokens to be assigned\r\n        require(unsoldTokens > 0);\r\n\r\n        // try to allocate up to 10% of total sold tokens to Liquidity Reserve fund:\r\n        uint256 liquidityReserveTokens = tokensSold.div(10);\r\n        if (liquidityReserveTokens > unsoldTokens) {\r\n            liquidityReserveTokens = unsoldTokens;\r\n        }\r\n        assignTokens(liquidityReserveWallet, liquidityReserveTokens);\r\n        unsoldTokens = unsoldTokens.sub(liquidityReserveTokens);\r\n\r\n        // if there are still unsold tokens:\r\n        if (unsoldTokens > 0) {\r\n            // decrease  (burn) total supply by the number of unsold tokens:\r\n            totalSupply = totalSupply.sub(unsoldTokens);\r\n        }\r\n\r\n        // make sure there are no tokens left\r\n        assert(tokensSold == totalSupply);\r\n    }\r\n\r\n    function manuallyAssignTokens(address recipient, uint256 amount) public onlyOwner {\r\n        require(tokensSold < totalSupply);\r\n        assignTokens(recipient, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Burns a specific amount of tokens.\r\n     * @param _value The amount of token to be burned.\r\n     */\r\n    function burn(uint256 _value) public whenNotPaused {\r\n        require(_value > 0);\r\n\r\n        address burner = msg.sender;\r\n        balances[burner] = balances[burner].sub(_value);\r\n        totalSupply = totalSupply.sub(_value);\r\n        Burn(burner, _value);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"manuallyAssignTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"setRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"haltFundraising\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"prepareLiquidityReserve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"marketingWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isIcoFinished\",\"outputs\":[{\"name\":\"icoFinished\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newIcoStartTimestamp\",\"type\":\"uint256\"},{\"name\":\"newIcoEndTimestamp\",\"type\":\"uint256\"}],\"name\":\"setIcoDates\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoEtherMaxCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unhaltFundraising\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoEndTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"halted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"marketingPool\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoStartTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"liquidityReserveWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoEtherMinCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"newWallet\",\"type\":\"address\"},{\"name\":\"newMarketingWallet\",\"type\":\"address\"},{\"name\":\"newLiquidityReserveWallet\",\"type\":\"address\"},{\"name\":\"newIcoEtherMinCap\",\"type\":\"uint256\"},{\"name\":\"newIcoEtherMaxCap\",\"type\":\"uint256\"},{\"name\":\"totalPresaleRaised\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"SomaIco","CompilerVersion":"v0.4.16+commit.d7661dd9","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000022c6731a21ad946bcd934f62f04b2d06ebfbedc90000000000000000000000004a5467431b54c152e404eb702242e78030972de7000000000000000000000000df398e0be9e0da2d8f8d687fd6b2c9082eefc29a0000000000000000000000000000000000000000000001b1ae4d6e2ef5000000000000000000000000000000000000000000000000001969368974c05b00000000000000000000000000000000000000000000000000000e0218166d42cd3000","Library":"","SwarmSource":"bzzr://5b695bf7b74d7a3f0d9e685a175da87b3a9ba8c5f6eaaf568e54ac49d379d3ab"}]}