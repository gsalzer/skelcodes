{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\n// By contributing you agree to our terms & conditions.\r\n// https://harbour.tokenate.io/HarbourTermsOfSale.pdf\r\n\r\nlibrary SafeMath {\r\n    function mul(uint a, uint b) internal returns (uint) {\r\n        uint c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint a, uint b) internal returns (uint) {\r\n        assert(b > 0);\r\n        uint c = a / b;\r\n        assert(a == b * c + a % b);\r\n        return c;\r\n    }\r\n\r\n    function sub(uint a, uint b) internal returns (uint) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint a, uint b) internal returns (uint) {\r\n        uint c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n\r\n    function max64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    function min64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    function max256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    function min256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    function assert(bool assertion) internal {\r\n        if (!assertion) {\r\n            throw;\r\n        }\r\n    }\r\n}\r\n\r\ncontract ownable {\r\n\r\n    address public owner;\r\n\r\n    modifier onlyOwner {\r\n        if (!isOwner(msg.sender)) throw;\r\n        _;\r\n    }\r\n\r\n    function ownable() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) onlyOwner {\r\n        owner = _newOwner;\r\n    }\r\n\r\n    function isOwner(address _address) returns (bool) {\r\n        return owner == _address;\r\n    }\r\n}\r\n\r\ncontract Burnable {\r\n\r\n    event Burn(address indexed owner, uint amount);\r\n    function burn(address _owner, uint _amount) public;\r\n\r\n}\r\n\r\ncontract ERC20 {\r\n    uint public totalSupply;\r\n    \r\n    function totalSupply() constant returns (uint);\r\n    function balanceOf(address _owner) constant returns (uint);\r\n    function allowance(address _owner, address _spender) constant returns (uint);\r\n    function transfer(address _to, uint _value) returns (bool);\r\n    function transferFrom(address _from, address _to, uint _value) returns (bool);\r\n    function approve(address _spender, uint _value) returns (bool);\r\n    \r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n}\r\n\r\ncontract Mintable {\r\n\r\n    event Mint(address indexed to, uint value);\r\n    function mint(address _to, uint _amount) public;\r\n}\r\n\r\ncontract Token is ERC20, Mintable, Burnable, ownable {\r\n    using SafeMath for uint;\r\n\r\n    string public name;\r\n    string public symbol;\r\n\r\n    uint public decimals = 18;\r\n    uint public maxSupply;\r\n    uint public totalSupply;\r\n    uint public freezeMintUntil;\r\n\r\n    mapping (address => mapping (address => uint)) allowed;\r\n    mapping (address => uint) balances;\r\n\r\n    modifier canMint {\r\n        require(totalSupply < maxSupply);\r\n        _;\r\n    }\r\n\r\n    modifier mintIsNotFrozen {\r\n        require(freezeMintUntil < now);\r\n        _;\r\n    }\r\n\r\n    function Token(string _name, string _symbol, uint _maxSupply) {\r\n        name = _name;\r\n        symbol = _symbol;\r\n        maxSupply = _maxSupply;\r\n        totalSupply = 0;\r\n        freezeMintUntil = 0;\r\n    }\r\n\r\n    function totalSupply() constant returns (uint) {\r\n        return totalSupply;\r\n    }\r\n\r\n    function balanceOf(address _owner) constant returns (uint) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) constant returns (uint) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    function transfer(address _to, uint _value) returns (bool) {\r\n        if (_value <= 0) {\r\n            return false;\r\n        }\r\n\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint _value) returns (bool) {\r\n        if (_value <= 0) {\r\n            return false;\r\n        }\r\n\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function approve(address _spender, uint _value) returns (bool) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function mint(address _to, uint _amount) public canMint mintIsNotFrozen onlyOwner {\r\n        if (maxSupply < totalSupply.add(_amount)) throw;\r\n\r\n        totalSupply = totalSupply.add(_amount);\r\n        balances[_to] = balances[_to].add(_amount);\r\n\r\n        Mint(_to, _amount);\r\n    }\r\n\r\n    function burn(address _owner, uint _amount) public onlyOwner {\r\n        totalSupply = totalSupply.sub(_amount);\r\n        balances[_owner] = balances[_owner].sub(_amount);\r\n\r\n        Burn(_owner, _amount);\r\n    }\r\n\r\n    function freezeMintingFor(uint _weeks) public onlyOwner {\r\n        freezeMintUntil = now + _weeks * 1 weeks;\r\n    }\r\n}\r\n\r\ncontract TokenSale is ownable {\r\n    using SafeMath for uint;\r\n\r\n    uint256 public constant MINT_LOCK_DURATION_IN_WEEKS = 26;\r\n\r\n    Token public token;\r\n\r\n    address public beneficiary;\r\n\r\n    uint public cap;\r\n    uint public collected;\r\n    uint public price;\r\n    uint public purchaseLimit;\r\n\r\n    uint public whitelistStartBlock;\r\n    uint public startBlock;\r\n    uint public endBlock;\r\n\r\n    bool public capReached = false;\r\n    bool public isFinalized = false;\r\n\r\n    mapping (address => uint) contributed;\r\n    mapping (address => bool) whitelisted;\r\n\r\n    event GoalReached(uint amountRaised);\r\n    event NewContribution(address indexed holder, uint256 tokens, uint256 contributed);\r\n    event Refunded(address indexed beneficiary, uint amount);\r\n\r\n    modifier onlyAfterSale { require(block.number > endBlock); _; }\r\n\r\n    modifier onlyWhenFinalized { require(isFinalized); _; }\r\n\r\n    modifier onlyDuringSale {\r\n        require(block.number >= startBlock(msg.sender));\r\n        require(block.number <= endBlock);\r\n        _;\r\n    }\r\n\r\n    modifier onlyWhenEnded {\r\n        if (block.number < endBlock && !capReached) throw;\r\n        _;\r\n    }\r\n\r\n    function TokenSale(\r\n        uint _cap,\r\n        uint _whitelistStartBlock,\r\n        uint _startBlock,\r\n        uint _endBlock,\r\n        address _token,\r\n        uint _price,\r\n        uint _purchaseLimit,\r\n        address _beneficiary\r\n    )\r\n    {\r\n        cap = _cap * 1 ether;\r\n        price = _price;\r\n        purchaseLimit = (_purchaseLimit * 1 ether) * price;\r\n        token = Token(_token);\r\n        beneficiary = _beneficiary;\r\n\r\n        whitelistStartBlock = _whitelistStartBlock;\r\n        startBlock = _startBlock;\r\n        endBlock = _endBlock;\r\n    }\r\n\r\n    function () payable {\r\n        doPurchase(msg.sender);\r\n    }\r\n\r\n    function refund() public onlyWhenFinalized {\r\n        if (capReached) throw;\r\n\r\n        uint balance = token.balanceOf(msg.sender);\r\n        if (balance == 0) throw;\r\n\r\n        uint refund = balance.div(price);\r\n        if (refund > this.balance) {\r\n            refund = this.balance;\r\n        }\r\n\r\n        token.burn(msg.sender, balance);\r\n        contributed[msg.sender] = 0;\r\n\r\n        msg.sender.transfer(refund);\r\n        Refunded(msg.sender, refund);\r\n    }\r\n\r\n    function finalize() public onlyWhenEnded onlyOwner {\r\n        require(!isFinalized);\r\n        isFinalized = true;\r\n\r\n        if (!capReached) {\r\n            return;\r\n        }\r\n\r\n        if (!beneficiary.send(collected)) throw;\r\n        token.freezeMintingFor(MINT_LOCK_DURATION_IN_WEEKS);\r\n    }\r\n\r\n    function doPurchase(address _owner) internal onlyDuringSale {\r\n        if (msg.value <= 0) throw;\r\n        if (collected >= cap) throw;\r\n\r\n        uint value = msg.value;\r\n        if (collected.add(value) > cap) {\r\n            uint difference = cap.sub(collected);\r\n            msg.sender.transfer(value.sub(difference));\r\n            value = difference;\r\n        }\r\n\r\n        uint tokens = value.mul(price);\r\n        if (token.balanceOf(msg.sender) + tokens > purchaseLimit) throw;\r\n\r\n        collected = collected.add(value);\r\n        token.mint(msg.sender, tokens);\r\n        NewContribution(_owner, tokens, value);\r\n\r\n        if (collected != cap) {\r\n            return;\r\n        }\r\n\r\n        GoalReached(collected);\r\n        capReached = true;\r\n    }\r\n\r\n    function addToWhitelist(address _address) public onlyOwner {\r\n        whitelisted[_address] = true;\r\n    }\r\n\r\n    function startBlock(address contributor) constant returns (uint) {\r\n        if (whitelisted[contributor]) {\r\n            return whitelistStartBlock;\r\n        }\r\n\r\n        return startBlock;\r\n    }\r\n\r\n    function tokenTransferOwnership(address _newOwner) public onlyWhenFinalized {\r\n        if (!capReached) throw; // only transfer if cap reached, otherwise we need burning for refund\r\n        token.transferOwnership(_newOwner);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"endBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"tokenTransferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"purchaseLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"contributor\",\"type\":\"address\"}],\"name\":\"startBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"capReached\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MINT_LOCK_DURATION_IN_WEEKS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refund\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"collected\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isFinalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"whitelistStartBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addToWhitelist\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_cap\",\"type\":\"uint256\"},{\"name\":\"_whitelistStartBlock\",\"type\":\"uint256\"},{\"name\":\"_startBlock\",\"type\":\"uint256\"},{\"name\":\"_endBlock\",\"type\":\"uint256\"},{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"_purchaseLimit\",\"type\":\"uint256\"},{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amountRaised\",\"type\":\"uint256\"}],\"name\":\"GoalReached\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"contributed\",\"type\":\"uint256\"}],\"name\":\"NewContribution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Refunded\",\"type\":\"event\"}]","ContractName":"TokenSale","CompilerVersion":"v0.4.11+commit.68ef5810","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000271000000000000000000000000000000000000000000000000000000000003e235800000000000000000000000000000000000000000000000000000000003ea25c000000000000000000000000000000000000000000000000000000000040c2b70000000000000000000000002bbd2e4dbb0ea3832efaa9877e061d3ed1f87543000000000000000000000000000000000000000000000000000000000000000f00000000000000000000000000000000000000000000000000000000000007d0000000000000000000000000f849250bdb22c665ec79928fda5a064afabc9d00","Library":"","SwarmSource":"bzzr://65e5fc5d8a829afb8433c6a07b46aa9855a7af2a4d2df4c8551fb303f1938f59"}]}