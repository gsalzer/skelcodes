{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13;\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\ncontract PausableToken is Ownable {\r\n    function balanceOf(address who) public constant returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    function increaseFrozen(address _owner,uint256 _incrementalAmount) public returns (bool);\r\n    function burn(uint256 _value) public;\r\n}\r\n\r\ncontract AddressWhitelist is Ownable {\r\n    // the addresses that are included in the whitelist\r\n    mapping (address => bool) whitelisted;\r\n    \r\n    function isWhitelisted(address addr) view public returns (bool) {\r\n        return whitelisted[addr];\r\n    }\r\n\r\n    event LogWhitelistAdd(address indexed addr);\r\n\r\n    // add these addresses to the whitelist\r\n    function addToWhitelist(address[] addresses) public onlyOwner returns (bool) {\r\n        for (uint i = 0; i < addresses.length; i++) {\r\n            if (!whitelisted[addresses[i]]) {\r\n                whitelisted[addresses[i]] = true;\r\n                LogWhitelistAdd(addresses[i]);\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    event LogWhitelistRemove(address indexed addr);\r\n\r\n    // remove these addresses from the whitelist\r\n    function removeFromWhitelist(address[] addresses) public onlyOwner returns (bool) {\r\n        for (uint i = 0; i < addresses.length; i++) {\r\n            if (whitelisted[addresses[i]]) {\r\n                whitelisted[addresses[i]] = false;\r\n                LogWhitelistRemove(addresses[i]);\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract RtcTokenCrowdsale is Ownable, AddressWhitelist {\r\n    using SafeMath for uint256;\r\n    PausableToken  public tokenReward;                         // address of the token used as reward\r\n\r\n    // deployment variables for static supply sale\r\n    uint256 public initialSupply;\r\n    uint256 public tokensRemaining;\r\n    uint256 public decimals;\r\n\r\n    // multi-sig addresses and price variable\r\n    address public beneficiaryWallet;                           // beneficiaryMultiSig (founder group) or wallet account\r\n    uint256 public tokensPerEthPrice;                           // set initial value floating priceVar 10,000 tokens per Eth\r\n\r\n    // uint256 values for min,max,caps,tracking\r\n    uint256 public amountRaisedInWei;\r\n    uint256 public fundingMinCapInWei;\r\n\r\n    // pricing veriable\r\n    uint256 public p1_duration;\r\n    uint256 public p1_start;\r\n    uint256 public p2_start;\r\n    uint256 public white_duration;\r\n\r\n    // loop control, ICO startup and limiters\r\n    uint256 public fundingStartTime;                           // crowdsale start time#\r\n    uint256 public fundingEndTime;                             // crowdsale end time#\r\n    bool    public isCrowdSaleClosed               = false;     // crowdsale completion boolean\r\n    bool    public areFundsReleasedToBeneficiary   = false;     // boolean for founder to receive Eth or not\r\n    bool    public isCrowdSaleSetup                = false;     // boolean for crowdsale setup\r\n\r\n    // Gas price limit\r\n    uint256 maxGasPrice = 50000000000;\r\n\r\n    event Buy(address indexed _sender, uint256 _eth, uint256 _RTC);\r\n    event Refund(address indexed _refunder, uint256 _value);\r\n    mapping(address => uint256) fundValue;\r\n\r\n\r\n    // convert tokens to decimals\r\n    function toSmallrtc(uint256 amount) public constant returns (uint256) {\r\n        return amount.mul(10**decimals);\r\n    }\r\n\r\n    // convert tokens to whole\r\n    function toRtc(uint256 amount) public constant returns (uint256) {\r\n        return amount.div(10**decimals);\r\n    }\r\n\r\n    function updateMaxGasPrice(uint256 _newGasPrice) public onlyOwner {\r\n        require(_newGasPrice != 0);\r\n        maxGasPrice = _newGasPrice;\r\n    }\r\n\r\n    // setup the CrowdSale parameters\r\n    function setupCrowdsale(uint256 _fundingStartTime) external onlyOwner {\r\n        if ((!(isCrowdSaleSetup))\r\n            && (!(beneficiaryWallet > 0))){\r\n            // init addresses\r\n            tokenReward                             = PausableToken(0x7c5c5F763274FC2f5bb86877815675B5dfB6FE3a);\r\n            beneficiaryWallet                       = 0xf07bd63C5cf404c2f17ab4F9FA1e13fCCEbc5255;\r\n            tokensPerEthPrice                       = 10000;                  // 1 ETH = 10,000 RTC\r\n\r\n            // funding targets\r\n            fundingMinCapInWei                      = 1 ether;                          //350 Eth (min cap) (test = 15) - crowdsale is considered success after this value\r\n\r\n            // update values\r\n            decimals                                = 18;\r\n            amountRaisedInWei                       = 0;\r\n            initialSupply                           = toSmallrtc(35000000);                  //   35 million * 18 decimal\r\n            tokensRemaining                         = initialSupply;\r\n\r\n            fundingStartTime                        = _fundingStartTime;\r\n\r\n            white_duration                          = 2 hours;                        // 2 week (test = 2 hour)\r\n            p1_duration                             = 4 hours;                       // 4 week (test = 2 hour)\r\n\r\n            p1_start                                = fundingStartTime + white_duration;\r\n            p2_start                                = p1_start + p1_duration + 4 hours;   // + 4 week after p1 ends (test = 4 hour)\r\n\r\n            fundingEndTime                          = p2_start + 4 hours; // + 4 week (test = 4 hour)\r\n\r\n            // configure crowdsale\r\n            isCrowdSaleSetup                        = true;\r\n            isCrowdSaleClosed                       = false;\r\n        }\r\n    }\r\n\r\n    function setBonusPrice() public constant returns (uint256 bonus) {\r\n        require(isCrowdSaleSetup);\r\n        require(p1_start + p1_duration <= p2_start);\r\n        if (now >= fundingStartTime && now <= p1_start) { // Private sale Bonus 40% = 5,000 RTC  = 1 ETH (test = 50 RTC)\r\n            bonus = 4000;\r\n        } else if (now > p1_start && now <= p1_start + p1_duration) { // Phase-1 Bonus 30% = 3,000 RTC  = 1 ETH\r\n            bonus = 3000;\r\n        } else if (now > p2_start && now <= p2_start + 10 minutes ) { // Phase-2 1st day Bonus 25% = 2,500 RTC = 1 ETH (test = +10 minute)\r\n            bonus = 2500;\r\n        } else if (now > p2_start + 10 minutes && now <= p2_start + 1 hours ) { // Phase-2 week-1 Bonus 20% = 2,000 RTC = 1 ETH (test <= p2_start +1 hour)\r\n            bonus = 2000;\r\n        } else if (now > p2_start + 1 hours && now <= p2_start + 2 hours ) { // Phase-2 week-2 Bonus +15% = 1,500 RTC = 1 ETH (test <= p2_start +2 hour)\r\n            bonus = 1500;\r\n        } else if (now > p2_start + 2 hours && now <= p2_start + 3 hours ) { // Phase-2 week-3 Bonus +10% = 1,000 RTC = 1 ETH (test <= p2_start +3 hour)\r\n            bonus = 1000;\r\n        } else if (now > p2_start + 3 hours && now <= fundingEndTime ) { // Phase-2 final week Bonus 5% = 500 RTC = 1 ETH\r\n            bonus = 500;\r\n        } else {\r\n            revert();\r\n        }\r\n    }\r\n\r\n    // p1_duration constant. Only p2 start changes. p2 start cannot be greater than 1 month from p1 end\r\n    function updateDuration(uint256 _newP2Start) external onlyOwner { // function to update the duration of phase-1 and adjust the start time of phase-2\r\n        require(isCrowdSaleSetup\r\n            && !(p2_start == _newP2Start)\r\n            && !(_newP2Start > p1_start + p1_duration + 30 hours)\r\n            && (now < p2_start)\r\n            && (fundingStartTime + p1_duration < _newP2Start));\r\n        p2_start = _newP2Start;\r\n        fundingEndTime = p2_start.add(4 hours);   // 4 week (test = add(4 hours))\r\n    }\r\n\r\n    // default payable function when sending ether to this contract\r\n    function () external payable {\r\n        require(tx.gasprice <= maxGasPrice);\r\n        require(msg.data.length == 0);\r\n        \r\n        BuyRTCtokens();\r\n    }\r\n\r\n    function BuyRTCtokens() public payable {\r\n        // conditions (length, crowdsale setup, zero check, exceed funding contrib check, contract valid check, within funding block range check, balance overflow check etc)\r\n        require(!(msg.value == 0)\r\n        && (isCrowdSaleSetup)\r\n        && (now >= fundingStartTime)\r\n        && (now <= fundingEndTime)\r\n        && (tokensRemaining > 0));\r\n\r\n        // only whitelisted addresses are allowed during the first day of phase 1\r\n        if (now <= p1_start) {\r\n            assert(isWhitelisted(msg.sender));\r\n        }\r\n        uint256 rewardTransferAmount        = 0;\r\n        uint256 rewardBaseTransferAmount    = 0;\r\n        uint256 rewardBonusTransferAmount   = 0;\r\n        uint256 contributionInWei           = msg.value;\r\n        uint256 refundInWei                 = 0;\r\n\r\n        rewardBonusTransferAmount       = setBonusPrice();\r\n        rewardBaseTransferAmount        = (msg.value.mul(tokensPerEthPrice)); // Since both ether and RTC have 18 decimals, No need of conversion\r\n        rewardBonusTransferAmount       = (msg.value.mul(rewardBonusTransferAmount)); // Since both ether and RTC have 18 decimals, No need of conversion\r\n        rewardTransferAmount            = rewardBaseTransferAmount.add(rewardBonusTransferAmount);\r\n\r\n        if (rewardTransferAmount > tokensRemaining) {\r\n            uint256 partialPercentage;\r\n            partialPercentage = tokensRemaining.mul(10**18).div(rewardTransferAmount);\r\n            contributionInWei = contributionInWei.mul(partialPercentage).div(10**18);\r\n            rewardBonusTransferAmount = rewardBonusTransferAmount.mul(partialPercentage).div(10**18);\r\n            rewardTransferAmount = tokensRemaining;\r\n            refundInWei = msg.value.sub(contributionInWei);\r\n        }\r\n\r\n        amountRaisedInWei               = amountRaisedInWei.add(contributionInWei);\r\n        tokensRemaining                 = tokensRemaining.sub(rewardTransferAmount);  // will cause throw if attempt to purchase over the token limit in one tx or at all once limit reached\r\n        fundValue[msg.sender]           = fundValue[msg.sender].add(contributionInWei);\r\n        assert(tokenReward.increaseFrozen(msg.sender, rewardBonusTransferAmount));\r\n        tokenReward.transfer(msg.sender, rewardTransferAmount);\r\n        Buy(msg.sender, contributionInWei, rewardTransferAmount);\r\n        if (refundInWei > 0) {\r\n            msg.sender.transfer(refundInWei);\r\n        }\r\n    }\r\n\r\n    function beneficiaryMultiSigWithdraw() external onlyOwner {\r\n        checkGoalReached();\r\n        require(areFundsReleasedToBeneficiary && (amountRaisedInWei >= fundingMinCapInWei));\r\n        beneficiaryWallet.transfer(this.balance);\r\n    }\r\n\r\n    function checkGoalReached() public returns (bytes32 response) { // return crowdfund status to owner for each result case, update public constant\r\n        // update state & status variables\r\n        require (isCrowdSaleSetup);\r\n        if ((amountRaisedInWei < fundingMinCapInWei) && (block.timestamp <= fundingEndTime && block.timestamp >= fundingStartTime)) { // ICO in progress, under softcap\r\n            areFundsReleasedToBeneficiary = false;\r\n            isCrowdSaleClosed = false;\r\n            return \"In progress (Eth < Softcap)\";\r\n        } else if ((amountRaisedInWei < fundingMinCapInWei) && (block.timestamp < fundingStartTime)) { // ICO has not started\r\n            areFundsReleasedToBeneficiary = false;\r\n            isCrowdSaleClosed = false;\r\n            return \"Crowdsale is setup\";\r\n        } else if ((amountRaisedInWei < fundingMinCapInWei) && (block.timestamp > fundingEndTime)) { // ICO ended, under softcap\r\n            areFundsReleasedToBeneficiary = false;\r\n            isCrowdSaleClosed = true;\r\n            return \"Unsuccessful (Eth < Softcap)\";\r\n        } else if ((amountRaisedInWei >= fundingMinCapInWei) && (tokensRemaining == 0)) { // ICO ended, all tokens gone\r\n            areFundsReleasedToBeneficiary = true;\r\n            isCrowdSaleClosed = true;\r\n            return \"Successful (RTC >= Hardcap)!\";\r\n        } else if ((amountRaisedInWei >= fundingMinCapInWei) && (block.timestamp > fundingEndTime) && (tokensRemaining > 0)) { // ICO ended, over softcap!\r\n            areFundsReleasedToBeneficiary = true;\r\n            isCrowdSaleClosed = true;\r\n            return \"Successful (Eth >= Softcap)!\";\r\n        } else if ((amountRaisedInWei >= fundingMinCapInWei) && (tokensRemaining > 0) && (block.timestamp <= fundingEndTime)) { // ICO in progress, over softcap!\r\n            areFundsReleasedToBeneficiary = true;\r\n            isCrowdSaleClosed = false;\r\n            return \"In progress (Eth >= Softcap)!\";\r\n        }\r\n    }\r\n\r\n    function refund() external { // any contributor can call this to have their Eth returned. user's purchased RTC tokens are burned prior refund of Eth.\r\n        checkGoalReached();\r\n        //require minCap not reached\r\n        require ((amountRaisedInWei < fundingMinCapInWei)\r\n        && (isCrowdSaleClosed)\r\n        && (now > fundingEndTime)\r\n        && (fundValue[msg.sender] > 0));\r\n\r\n        //refund Eth sent\r\n        uint256 ethRefund = fundValue[msg.sender];\r\n        fundValue[msg.sender] = 0;\r\n\r\n        //send Eth back, burn tokens\r\n        msg.sender.transfer(ethRefund);\r\n        Refund(msg.sender, ethRefund);\r\n    }\r\n\r\n    function burnRemainingTokens() onlyOwner external {\r\n        require(now > fundingEndTime);\r\n        uint256 tokensToBurn = tokenReward.balanceOf(this);\r\n        tokenReward.burn(tokensToBurn);\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"checkGoalReached\",\"outputs\":[{\"name\":\"response\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"beneficiaryMultiSigWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"white_duration\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensPerEthPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newP2Start\",\"type\":\"uint256\"}],\"name\":\"updateDuration\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundingStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isCrowdSaleSetup\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"p1_duration\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"p2_start\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"p1_start\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newGasPrice\",\"type\":\"uint256\"}],\"name\":\"updateMaxGasPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fundingStartTime\",\"type\":\"uint256\"}],\"name\":\"setupCrowdsale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addresses\",\"type\":\"address[]\"}],\"name\":\"removeFromWhitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"toSmallrtc\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenReward\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"amountRaisedInWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundingEndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"setBonusPrice\",\"outputs\":[{\"name\":\"bonus\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundingMinCapInWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addresses\",\"type\":\"address[]\"}],\"name\":\"addToWhitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"burnRemainingTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isCrowdSaleClosed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"toRtc\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensRemaining\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beneficiaryWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"areFundsReleasedToBeneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"BuyRTCtokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_eth\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_RTC\",\"type\":\"uint256\"}],\"name\":\"Buy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_refunder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Refund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"LogWhitelistAdd\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"LogWhitelistRemove\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"RtcTokenCrowdsale","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://23cada820772adb390ad036c73363104043cd5d6df8890e0e9eea8e29412ab9d"}]}