{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13;\r\n\r\ncontract Latium {\r\n    string public constant name = \"Latium\";\r\n    string public constant symbol = \"LAT\";\r\n    uint8 public constant decimals = 16;\r\n    uint256 public constant totalSupply =\r\n        30000000 * 10 ** uint256(decimals);\r\n\r\n    // owner of this contract\r\n    address public owner;\r\n\r\n    // balances for each account\r\n    mapping (address => uint256) public balanceOf;\r\n\r\n    // triggered when tokens are transferred\r\n    event Transfer(address indexed _from, address indexed _to, uint _value);\r\n\r\n    // constructor\r\n    function Latium() {\r\n        owner = msg.sender;\r\n        balanceOf[owner] = totalSupply;\r\n    }\r\n\r\n    // transfer the balance from sender's account to another one\r\n    function transfer(address _to, uint256 _value) {\r\n        // prevent transfer to 0x0 address\r\n        require(_to != 0x0);\r\n        // sender and recipient should be different\r\n        require(msg.sender != _to);\r\n        // check if the sender has enough coins\r\n        require(_value > 0 && balanceOf[msg.sender] >= _value);\r\n        // check for overflows\r\n        require(balanceOf[_to] + _value > balanceOf[_to]);\r\n        // subtract coins from sender's account\r\n        balanceOf[msg.sender] -= _value;\r\n        // add coins to recipient's account\r\n        balanceOf[_to] += _value;\r\n        // notify listeners about this transfer\r\n        Transfer(msg.sender, _to, _value);\r\n    }\r\n}\r\n\r\ncontract LatiumSeller {\r\n    address private constant _latiumAddress = 0xBb31037f997553BEc50510a635d231A35F8EC640;\r\n    Latium private constant _latium = Latium(_latiumAddress);\r\n\r\n    // amount of Ether collected from buyers and not withdrawn yet\r\n    uint256 private _etherAmount = 0;\r\n\r\n    // sale settings\r\n    uint256 private constant _tokenPrice = 10 finney; // 0.01 Ether\r\n    uint256 private _minimumPurchase =\r\n        10 * 10 ** uint256(_latium.decimals()); // 10 Latium\r\n\r\n    // owner of this contract\r\n    address public owner;\r\n\r\n    // constructor\r\n    function LatiumSeller() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function tokenPrice() constant returns(uint256 tokenPrice) {\r\n        return _tokenPrice;\r\n    }\r\n\r\n    function minimumPurchase() constant returns(uint256 minimumPurchase) {\r\n        return _minimumPurchase;\r\n    }\r\n\r\n    // function to get current Latium balance of this contract\r\n    function _tokensToSell() private returns (uint256 tokensToSell) {\r\n        return _latium.balanceOf(address(this));\r\n    }\r\n\r\n    // function without name is the default function that is called\r\n    // whenever anyone sends funds to a contract\r\n    function () payable {\r\n        // we shouldn't sell tokens to their owner\r\n        require(msg.sender != owner && msg.sender != address(this));\r\n        // check if we have tokens to sell\r\n        uint256 tokensToSell = _tokensToSell();\r\n        require(tokensToSell > 0);\r\n        // calculate amount of tokens that can be bought\r\n        // with this amount of Ether\r\n        // NOTE: make multiplication first; otherwise we can lose\r\n        // fractional part after division\r\n        uint256 tokensToBuy =\r\n            msg.value * 10 ** uint256(_latium.decimals()) / _tokenPrice;\r\n        // check if user's purchase is above the minimum\r\n        require(tokensToBuy >= _minimumPurchase);\r\n        // check if we have enough tokens to sell\r\n        require(tokensToBuy <= tokensToSell);\r\n        _etherAmount += msg.value;\r\n        _latium.transfer(msg.sender, tokensToBuy);\r\n    }\r\n\r\n    // functions with this modifier can only be executed by the owner\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    // function to withdraw Ether to owner's account\r\n    function withdrawEther(uint256 _amount) onlyOwner {\r\n        if (_amount == 0) {\r\n            // withdraw all available Ether\r\n            _amount = _etherAmount;\r\n        }\r\n        require(_amount > 0 && _etherAmount >= _amount);\r\n        _etherAmount -= _amount;\r\n        msg.sender.transfer(_amount);\r\n    }\r\n\r\n    // function to withdraw Latium to owner's account\r\n    function withdrawLatium(uint256 _amount) onlyOwner {\r\n        uint256 availableLatium = _tokensToSell();\r\n        require(availableLatium > 0);\r\n        if (_amount == 0) {\r\n            // withdraw all available Latium\r\n            _amount = availableLatium;\r\n        }\r\n        require(availableLatium >= _amount);\r\n        _latium.transfer(msg.sender, _amount);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawEther\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenPrice\",\"outputs\":[{\"name\":\"tokenPrice\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimumPurchase\",\"outputs\":[{\"name\":\"minimumPurchase\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawLatium\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"}]","ContractName":"LatiumSeller","CompilerVersion":"v0.4.13+commit.fb4cb1a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://99d8206dbdf6789ce2495debe4b5d365d96a186121bad0ed6a8b090c491bcca5"}]}