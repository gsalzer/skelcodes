{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\ncontract Roshambo {\r\n    enum State { Unrealized, Created, Joined, Ended }\r\n    enum Result { Unfinished, Draw, Win, Loss, Forfeit }\r\n    enum ResultType { None, StraightUp, Tiebroken, SuperDraw } \r\n    struct Game {\r\n        address player1;\r\n        address player2;\r\n        uint value;\r\n        bytes32 hiddenMove1;\r\n        uint8 move1; // 0 = not set, 1 = Rock, 2 = Paper, 3 = Scissors\r\n        uint8 move2;\r\n        uint gameStart;\r\n        uint8 tiebreaker;\r\n        uint8 tiebreaker1;\r\n        uint8 tiebreaker2;\r\n        State state;\r\n        Result result;\r\n        ResultType resultType;\r\n    }\r\n    \r\n    address public owner1;\r\n    uint8 constant feeDivisor = 100;\r\n    uint constant revealTime = 7 days;\r\n    bool paused;\r\n    bool expired;\r\n    uint gameIdCounter;\r\n    \r\n    event Deposit(address indexed player, uint amount);\r\n    event Withdraw(address indexed player, uint amount);\r\n    event GameCreated(address indexed player1, address indexed player2, uint indexed gameId, uint value, bytes32 hiddenMove1);\r\n    event GameJoined(address indexed player1, address indexed player2, uint indexed gameId, uint value, uint8 move2, uint gameStart);\r\n    event GameEnded(address indexed player1, address indexed player2, uint indexed gameId, uint value, Result result, ResultType resultType);\r\n    \r\n    mapping(address => uint) public balances;\r\n    mapping(address => uint) public totalWon;\r\n    mapping(address => uint) public totalLost;\r\n    \r\n    Game [] public games;\r\n    mapping(address => string) public playerNames;\r\n    mapping(uint => bool) public nameTaken;\r\n    mapping(bytes32 => bool) public secretTaken;\r\n    \r\n    modifier onlyOwner { require(msg.sender == owner1); _; }\r\n    modifier notPaused { require(!paused); _; }\r\n    modifier notExpired { require(!expired); _; }\r\n\r\n    function Roshambo() public {\r\n        owner1 = msg.sender;\r\n        paused = true;\r\n    }\r\n\r\n    function rand(uint8 min, uint8 max) constant internal returns (uint8){\r\n        return uint8(block.blockhash(block.number-min))% max + min;\r\n    }\r\n    \r\n    function getGames() constant internal returns (Game []) {\r\n        return games;\r\n    }\r\n    \r\n    function totalProfit(address player) constant internal returns (int) {\r\n        if (totalLost[player] > totalWon[player]) {\r\n            return -int(totalLost[player] - totalWon[player]);\r\n        }\r\n        else {\r\n            return int(totalWon[player] - totalLost[player]);\r\n        }\r\n    }\r\n    \r\n    function createGame(bytes32 move, uint val, address player2) public\r\n    payable notPaused notExpired returns (uint gameId) {\r\n        deposit();\r\n        require(balances[msg.sender] >= val);\r\n        require(!secretTaken[move]);\r\n        secretTaken[move] = true;\r\n        balances[msg.sender] -= val;\r\n        gameId = gameIdCounter;\r\n        games.push(Game(msg.sender, player2, val, move, 0, 0, 0, 0, 0, 0, State.Created, Result(0), ResultType(0)));\r\n\r\n        GameCreated(msg.sender, player2, gameId, val, move);\r\n        gameIdCounter++;\r\n    }\r\n    \r\n    function abortGame(uint gameId) public notPaused returns (bool success) {\r\n        Game storage thisGame = games[gameId];\r\n        require(thisGame.player1 == msg.sender);\r\n        require(thisGame.state == State.Created);\r\n        thisGame.state = State.Ended;\r\n\r\n        GameEnded(thisGame.player1, thisGame.player2, gameId, thisGame.value, Result(0), ResultType.StraightUp);\r\n\r\n        msg.sender.transfer(thisGame.value);\r\n        return true;\r\n    }\r\n    \r\n    function joinGame(uint gameId, uint8 move, uint8 tiebreaker) public payable notPaused returns (bool success) {\r\n        Game storage thisGame = games[gameId];\r\n        require(thisGame.state == State.Created);\r\n        require(move > 0 && move <= 3);\r\n        if (thisGame.player2 == 0x0) {\r\n            thisGame.player2 = msg.sender;\r\n        }\r\n        else {\r\n            require(thisGame.player2 == msg.sender);\r\n        }\r\n        require(thisGame.value == msg.value);\r\n        thisGame.gameStart = now;\r\n        thisGame.state = State.Joined;\r\n        thisGame.move2 = move;\r\n        thisGame.tiebreaker2 = tiebreaker;\r\n\r\n        GameJoined(thisGame.player1, thisGame.player2, gameId, thisGame.value, thisGame.move2, thisGame.gameStart);\r\n        return true;\r\n    }\r\n    \r\n    function revealMove(uint gameId, uint8 move, uint8 tiebreaker, string secret) public notPaused returns (Result result) {\r\n        Game storage thisGame = games[gameId];\r\n        ResultType resultType = ResultType.None;\r\n        require(thisGame.state == State.Joined);\r\n        require(thisGame.player1 == msg.sender);\r\n        require(thisGame.hiddenMove1 == keccak256(uint(move), uint(tiebreaker), secret));\r\n        thisGame.move1 = move;\r\n        thisGame.tiebreaker1 = tiebreaker;\r\n        if (move > 0 && move <= 3) {\r\n            result = Result(((3 + move - thisGame.move2) % 3) + 1); \r\n        }\r\n        else { // Player 1 submitted invalid move\r\n            result = Result.Loss;\r\n        }\r\n        thisGame.state = State.Ended;\r\n        address winner;\r\n        if (result != Result.Draw) {\r\n            resultType = ResultType.StraightUp;\r\n        }\r\n\r\n        if (result == Result.Draw) {\r\n            thisGame.tiebreaker = rand(1, 100);\r\n\r\n            int8 player1Tiebreaker =  int8(thisGame.tiebreaker) - int8(thisGame.tiebreaker1);\r\n            if(player1Tiebreaker < 0) {\r\n                player1Tiebreaker = player1Tiebreaker * int8(-1);\r\n            }\r\n            int8 player2Tiebreaker = int8(thisGame.tiebreaker) - int8(thisGame.tiebreaker2);\r\n            if(player2Tiebreaker < 0) {\r\n                player2Tiebreaker = player2Tiebreaker * int8(-1);\r\n            }\r\n\r\n            if(player1Tiebreaker == player2Tiebreaker) {\r\n                resultType = ResultType.SuperDraw;\r\n                balances[thisGame.player1] += thisGame.value;\r\n                balances[thisGame.player2] += thisGame.value;\r\n            }else{\r\n                resultType = ResultType.Tiebroken;\r\n                if(player1Tiebreaker < player2Tiebreaker) {\r\n                    result = Result.Win;\r\n                }else{\r\n                    result = Result.Loss;\r\n                }\r\n            }\r\n        }\r\n        \r\n        if(resultType != ResultType.SuperDraw) {\r\n            if (result == Result.Win) {\r\n                winner = thisGame.player1;\r\n                totalLost[thisGame.player2] += thisGame.value;\r\n            }\r\n            else {\r\n                winner = thisGame.player2;\r\n                totalLost[thisGame.player1] += thisGame.value;\r\n            }\r\n            uint fee = (thisGame.value) / feeDivisor;\r\n            balances[owner1] += fee*2;\r\n            totalWon[winner] += thisGame.value - fee*2;\r\n            // No re-entrancy attack is possible because\r\n            // the state has already been set to State.Ended\r\n            winner.transfer((thisGame.value*2) - fee*2);\r\n        }\r\n\r\n        thisGame.result = result;\r\n        thisGame.resultType = resultType;\r\n\r\n        GameEnded(thisGame.player1, thisGame.player2, gameId, thisGame.value, result, resultType);\r\n    }\r\n    \r\n    function forfeitGame(uint gameId) public notPaused returns (bool success) {\r\n        Game storage thisGame = games[gameId];\r\n        require(thisGame.state == State.Joined);\r\n        require(thisGame.player1 == msg.sender);\r\n        \r\n        uint fee = (thisGame.value) / feeDivisor; \r\n        balances[owner1] += fee*2;\r\n        totalLost[thisGame.player1] += thisGame.value;\r\n        totalWon[thisGame.player2] += thisGame.value - fee*2;\r\n        thisGame.state = State.Ended;\r\n        thisGame.result = Result.Forfeit; // Loss for player 1\r\n\r\n        GameEnded(thisGame.player1, thisGame.player2, gameId, thisGame.value, thisGame.result, ResultType.StraightUp);\r\n        \r\n        thisGame.player2.transfer((thisGame.value*2) - fee*2);\r\n        return true;\r\n    }\r\n    \r\n    function claimGame(uint gameId) public notPaused returns (bool success) {\r\n        Game storage thisGame = games[gameId];\r\n        require(thisGame.state == State.Joined);\r\n        require(thisGame.player2 == msg.sender);\r\n        require(thisGame.gameStart + revealTime < now); \r\n        \r\n        uint fee = (thisGame.value) / feeDivisor;\r\n        balances[owner1] += fee*2;\r\n        totalLost[thisGame.player1] += thisGame.value;\r\n        totalWon[thisGame.player2] += thisGame.value - fee*2;\r\n        thisGame.state = State.Ended;\r\n        thisGame.result = Result.Forfeit; // Loss for player 1\r\n        \r\n        GameEnded(thisGame.player1, thisGame.player2, gameId, thisGame.value, thisGame.result, ResultType.StraightUp);\r\n\r\n        thisGame.player2.transfer((thisGame.value*2) - fee*2);\r\n        return true;\r\n    }\r\n    \r\n    function donate() public payable returns (bool success) {\r\n        require(msg.value != 0);\r\n        balances[owner1] += msg.value;\r\n\r\n        return true;\r\n    }\r\n    function deposit() public payable returns (bool success) {\r\n        require(msg.value != 0);\r\n        balances[msg.sender] += msg.value;\r\n\r\n        Deposit(msg.sender, msg.value);\r\n        return true;\r\n    }\r\n    function withdraw() public returns (bool success) {\r\n        uint amount = balances[msg.sender];\r\n        if (amount == 0) return false;\r\n        balances[msg.sender] = 0;\r\n        msg.sender.transfer(amount);\r\n\r\n        Withdraw(msg.sender, amount);\r\n        return true;\r\n    }\r\n    \r\n    function pause(bool setpause) public onlyOwner {\r\n        paused = setpause;\r\n    }\r\n    \r\n    function expire(bool setexpire) public onlyOwner {\r\n        expired = setexpire;\r\n    }\r\n    \r\n    function setOwner(address newOwner) public {\r\n        require(msg.sender == owner1);\r\n        owner1 = newOwner;\r\n    }\r\n    \r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"setpause\",\"type\":\"bool\"}],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"games\",\"outputs\":[{\"name\":\"player1\",\"type\":\"address\"},{\"name\":\"player2\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"hiddenMove1\",\"type\":\"bytes32\"},{\"name\":\"move1\",\"type\":\"uint8\"},{\"name\":\"move2\",\"type\":\"uint8\"},{\"name\":\"gameStart\",\"type\":\"uint256\"},{\"name\":\"tiebreaker\",\"type\":\"uint8\"},{\"name\":\"tiebreaker1\",\"type\":\"uint8\"},{\"name\":\"tiebreaker2\",\"type\":\"uint8\"},{\"name\":\"state\",\"type\":\"uint8\"},{\"name\":\"result\",\"type\":\"uint8\"},{\"name\":\"resultType\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"gameId\",\"type\":\"uint256\"}],\"name\":\"claimGame\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"playerNames\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalLost\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nameTaken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner1\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"setexpire\",\"type\":\"bool\"}],\"name\":\"expire\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"move\",\"type\":\"bytes32\"},{\"name\":\"val\",\"type\":\"uint256\"},{\"name\":\"player2\",\"type\":\"address\"}],\"name\":\"createGame\",\"outputs\":[{\"name\":\"gameId\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"gameId\",\"type\":\"uint256\"}],\"name\":\"forfeitGame\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"gameId\",\"type\":\"uint256\"},{\"name\":\"move\",\"type\":\"uint8\"},{\"name\":\"tiebreaker\",\"type\":\"uint8\"},{\"name\":\"secret\",\"type\":\"string\"}],\"name\":\"revealMove\",\"outputs\":[{\"name\":\"result\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"gameId\",\"type\":\"uint256\"}],\"name\":\"abortGame\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"secretTaken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"gameId\",\"type\":\"uint256\"},{\"name\":\"move\",\"type\":\"uint8\"},{\"name\":\"tiebreaker\",\"type\":\"uint8\"}],\"name\":\"joinGame\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deposit\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"donate\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalWon\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player1\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"player2\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"gameId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"hiddenMove1\",\"type\":\"bytes32\"}],\"name\":\"GameCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player1\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"player2\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"gameId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"move2\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"gameStart\",\"type\":\"uint256\"}],\"name\":\"GameJoined\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player1\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"player2\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"gameId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"result\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"resultType\",\"type\":\"uint8\"}],\"name\":\"GameEnded\",\"type\":\"event\"}]","ContractName":"Roshambo","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://1a041389f9fb512cd6f7643e9d69840223eadf84ad6e0d65bee7e93e33a5eda6"}]}