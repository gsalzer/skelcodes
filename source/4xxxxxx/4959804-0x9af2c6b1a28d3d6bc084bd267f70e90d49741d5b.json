{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.15;\r\n//Owner Contract-For Defining Owner and Transferring Ownership\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    function Ownable() public {\r\n        owner = 0x2e1977127F682723C778bBcac576A4aF2c0e790d;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) onlyOwner public {\r\n        owner = newOwner;\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract TokenRecipient {\r\n    function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public;\r\n}\r\n\r\n\r\n\r\n//Token Format\r\ncontract ERC20 is Ownable {\r\n    using SafeMath for uint256;\r\n    //Public Variables of the token\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals;\r\n    uint256 public totalSupply;\r\n\r\n\r\n    mapping (address => uint256) public balances;\r\n\r\n    mapping (address => mapping (address => uint256)) public allowed;\r\n\r\n    /* This generates a public event on the blockchain that will notify clients */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n\r\n    //Constructor\r\n    function ERC20(\r\n    uint256 _initialSupply,\r\n    string _tokenName,\r\n    uint8 _decimalUnits,\r\n    string _tokenSymbol\r\n    ) public\r\n    {\r\n\r\n        balances[0x2e1977127F682723C778bBcac576A4aF2c0e790d] = _initialSupply;\r\n        totalSupply = _initialSupply;\r\n        decimals = _decimalUnits;\r\n        symbol = _tokenSymbol;\r\n        name = _tokenName;\r\n    }\r\n\r\n    /* public methods */\r\n    function transfer(address _to, uint256 _value) public  returns (bool) {\r\n\r\n\r\n        bool status = transferInternal(msg.sender, _to, _value);\r\n\r\n        require(status == true);\r\n\r\n        return true;\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool success) {\r\n\r\n\r\n        allowed[msg.sender][_spender] = _value;\r\n\r\n        Approval(msg.sender, _spender, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) {\r\n\r\n\r\n        TokenRecipient spender = TokenRecipient(_spender);\r\n\r\n        if (approve(_spender, _value)) {\r\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\r\n            return true;\r\n        }\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n\r\n\r\n        if (allowed[_from][msg.sender] < _value) {\r\n            return false;\r\n        }\r\n\r\n        bool _success = transferInternal(_from, _to, _value);\r\n\r\n        if (_success) {\r\n            allowed[_from][msg.sender] -= _value;\r\n        }\r\n\r\n        return _success;\r\n    }\r\n\r\n    /*constant functions*/\r\n    function totalSupply() public constant returns (uint256) {\r\n        return totalSupply;\r\n    }\r\n\r\n    function balanceOf(address _address) public constant returns (uint256 balance) {\r\n        return balances[_address];\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    /* internal functions*/\r\n    function setBalance(address _holder, uint256 _amount) internal {\r\n        balances[_holder] = _amount;\r\n    }\r\n\r\n    function transferInternal(address _from, address _to, uint256 _value) internal returns (bool success) {\r\n\r\n        if (_value == 0) {\r\n            Transfer(_from, _to, _value);\r\n\r\n            return true;\r\n        }\r\n\r\n        if (balances[_from] < _value) {\r\n            return false;\r\n        }\r\n\r\n        setBalance(_from, balances[_from].sub(_value));\r\n        setBalance(_to, balances[_to].add(_value));\r\n\r\n        Transfer(_from, _to, _value);\r\n\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract ERC223 {\r\n    event Transfer(address indexed from, address indexed to, uint value, bytes  data);\r\n    function transfer(address to, uint value, bytes data) public returns (bool ok);\r\n    function transfer(address to, uint value, bytes data, string customFallback) public returns (bool ok);\r\n}\r\n\r\n\r\ncontract ContractReceiver {\r\n    function tokenFallback(address _from, uint _value, bytes _data) public;\r\n}\r\n\r\n\r\n/******************************************/\r\n/** Axpire TOKEN **/\r\n/******************************************/\r\ncontract AxpireToken is ERC223,ERC20 {\r\n\r\n    uint256 initialSupply= 350000000 * 10**8;\r\n    string tokenName=\"aXpire Token\";\r\n    string tokenSymbol=\"AXP\";\r\n    uint8 decimalUnits=8;\r\n\r\n    //Constructor\r\n    function AxpireToken() public\r\n    ERC20(initialSupply, tokenName, decimalUnits, tokenSymbol)\r\n    {\r\n        owner = 0x2e1977127F682723C778bBcac576A4aF2c0e790d;\r\n        //Assigning total no of tokens\r\n        balances[owner] = initialSupply;\r\n        totalSupply = initialSupply;\r\n    }\r\n\r\n\r\n    function transfer(address to, uint256 value, bytes data) public returns (bool success) {\r\n\r\n        bool status = transferInternal(msg.sender, to, value, data);\r\n\r\n        return status;\r\n    }\r\n\r\n    function transfer(address to, uint value, bytes data, string customFallback) public returns (bool success) {\r\n\r\n        bool status = transferInternal(msg.sender, to, value, data, true, customFallback);\r\n\r\n        return status;\r\n    }\r\n\r\n    // rollback changes to transferInternal for transferFrom\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n\r\n        if (allowed[_from][msg.sender] < _value) {\r\n            return false;\r\n        }\r\n\r\n        bool _success = super.transferInternal(_from, _to, _value);\r\n\r\n        if (_success) {\r\n            allowed[_from][msg.sender] -= _value;\r\n        }\r\n\r\n        return _success;\r\n    }\r\n\r\n    function transferInternal(address from, address to, uint256 value, bytes data) internal returns (bool success) {\r\n        return transferInternal(from, to, value, data, false, \"\");\r\n    }\r\n\r\n    function transferInternal(\r\n    address from,\r\n    address to,\r\n    uint256 value,\r\n    bytes data,\r\n    bool useCustomFallback,\r\n    string customFallback\r\n    )\r\n    internal returns (bool success)\r\n    {\r\n        bool status = super.transferInternal(from, to, value);\r\n\r\n        if (status) {\r\n            if (isContract(to)) {\r\n                ContractReceiver receiver = ContractReceiver(to);\r\n\r\n                if (useCustomFallback) {\r\n                    // solhint-disable-next-line avoid-call-value\r\n                    require(receiver.call.value(0)(bytes4(keccak256(customFallback)), from, value, data) == true);\r\n                } else {\r\n                    receiver.tokenFallback(from, value, data);\r\n                }\r\n            }\r\n\r\n            Transfer(from, to, value, data);\r\n        }\r\n\r\n        return status;\r\n    }\r\n\r\n    function transferInternal(address from, address to, uint256 value) internal returns (bool success) {\r\n\r\n        bytes memory data;\r\n\r\n        return transferInternal(from, to, value, data, false, \"\");\r\n    }\r\n\r\n    //assemble the given address bytecode. If bytecode exists then the _addr is a contract.\r\n    function isContract(address _addr) private returns (bool) {\r\n        uint length;\r\n        assembly {\r\n        //retrieve the size of the code on target address, this needs assembly\r\n        length := extcodesize(_addr)\r\n        }\r\n        return (length > 0);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"},{\"name\":\"customFallback\",\"type\":\"string\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"AxpireToken","CompilerVersion":"v0.4.20-nightly.2018.1.6+commit.2548228b","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://b8fa869d3d99ead854f601f11db9ed6d3252b572215d275d3d3110384a1abef0"}]}