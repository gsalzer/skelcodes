{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.19;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public constant returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n\r\n        uint256 _allowance = allowed[_from][msg.sender];\r\n\r\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n    // require (_value <= _allowance);\r\n\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = _allowance.sub(_value);\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n  /**\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   */\r\n    function increaseApproval (address _spender, uint _addedValue)\r\n        returns (bool success) {\r\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n    function decreaseApproval (address _spender, uint _subtractedValue) public\r\n    returns (bool success) {\r\n        uint oldValue = allowed[msg.sender][_spender];\r\n        if (_subtractedValue > oldValue) {\r\n            allowed[msg.sender][_spender] = 0;\r\n        } else {\r\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n        }\r\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n}\r\n\r\ncontract BurnableToken is StandardToken {\r\n\r\n    event Burn(address indexed burner, uint256 value);\r\n\r\n    /**\r\n     * @dev Burns a specific amount of tokens.\r\n     * @param _value The amount of token to be burned.\r\n     */\r\n    function burn(uint256 _value) public {\r\n        require(_value > 0);\r\n        require(_value <= balances[msg.sender]);\r\n        // no need to require value <= totalSupply, since that would imply the\r\n        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\r\n\r\n        address burner = msg.sender;\r\n        balances[burner] = balances[burner].sub(_value);\r\n        totalSupply = totalSupply.sub(_value);\r\n        Burn(burner, _value);\r\n    }\r\n}\r\n\r\ncontract MintableToken is StandardToken, Ownable {\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\r\n    totalSupply = totalSupply.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    Mint(_to, _amount);\r\n    Transfer(0x0, _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() onlyOwner public returns (bool) {\r\n    mintingFinished = true;\r\n    MintFinished();\r\n    return true;\r\n  }\r\n}\r\n\r\ncontract Tigereum is MintableToken, BurnableToken {\r\n    string public webAddress = \"www.tigereum.io\";\r\n    string public name = \"Tigereum\";\r\n    string public symbol = \"TIG\";\r\n    uint8 public decimals = 18;\r\n}\r\n\r\n/**\r\n * @title Crowdsale\r\n * @dev Crowdsale is a base contract for managing a token crowdsale.\r\n * Crowdsales have a start and end timestamps, where investors can make\r\n * token purchases and the crowdsale will assign them tokens based\r\n * on a token per ETH rate. Funds collected are forwarded to a wallet\r\n * as they arrive.\r\n */\r\ncontract Crowdsale {\r\n  using SafeMath for uint256;\r\n\r\n  // The token being sold\r\n  MintableToken public token;\r\n\r\n  // start and end timestamps where investments are allowed (both inclusive)\r\n  uint256 public startTime;\r\n  uint256 public endTime;\r\n\r\n  // address where funds are collected\r\n  address public wallet;\r\n\r\n  // how many token units a buyer gets per wei\r\n  uint256 public rate;\r\n\r\n  // amount of raised money in wei\r\n  uint256 public weiRaised;\r\n\r\n  /**\r\n   * event for token purchase logging\r\n   * @param purchaser who paid for the tokens\r\n   * @param beneficiary who got the tokens\r\n   * @param value weis paid for purchase\r\n   * @param amount amount of tokens purchased\r\n   */\r\n  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n\r\n\r\n  function Crowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet) {\r\n    require(_startTime >= now);\r\n    require(_endTime >= _startTime);\r\n    require(_rate > 0);\r\n    require(_wallet != 0x0);\r\n\r\n    token = createTokenContract();\r\n    startTime = _startTime;\r\n    endTime = _endTime;\r\n    rate = _rate;\r\n    wallet = _wallet;\r\n  }\r\n\r\n  // creates the token to be sold.\r\n  // override this method to have crowdsale of a specific mintable token.\r\n  function createTokenContract() internal returns (MintableToken) {\r\n    return new MintableToken();\r\n  }\r\n\r\n\r\n  // fallback function can be used to buy tokens\r\n  function () payable {\r\n    buyTokens(msg.sender);\r\n  }\r\n\r\n  // low level token purchase function\r\n  function buyTokens(address beneficiary) public payable {\r\n    require(beneficiary != 0x0);\r\n    require(validPurchase());\r\n\r\n    uint256 weiAmount = msg.value;\r\n\r\n    // calculate token amount to be created\r\n    uint256 tokens = weiAmount.mul(rate);\r\n\r\n    // update state\r\n    weiRaised = weiRaised.add(weiAmount);\r\n\r\n    token.mint(beneficiary, tokens);\r\n    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\r\n\r\n    forwardFunds();\r\n  }\r\n\r\n  // send ether to the fund collection wallet\r\n  // override to create custom fund forwarding mechanisms\r\n  function forwardFunds() internal {\r\n    wallet.transfer(msg.value);\r\n  }\r\n\r\n  // @return true if the transaction can buy tokens\r\n  function validPurchase() internal constant returns (bool) {\r\n    var curtime = now;\r\n    bool withinPeriod = now >= startTime && now <= endTime;\r\n    bool nonZeroPurchase = msg.value != 0;\r\n    return withinPeriod && nonZeroPurchase;\r\n  }\r\n\r\n  // @return true if crowdsale event has ended\r\n  function hasEnded() public constant returns (bool) {\r\n    return now > endTime;\r\n  }\r\n\r\n\r\n}\r\n\r\ncontract TigereumCrowdsale is Ownable, Crowdsale {\r\n\r\n    using SafeMath for uint256;\r\n  \r\n    //operational\r\n    bool public LockupTokensWithdrawn = false;\r\n    bool public isFinalized = false;\r\n    uint256 public constant toDec = 10**18;\r\n    uint256 public tokensLeft = 32800000*toDec;\r\n    uint256 public constant cap = 32800000*toDec;\r\n    uint256 public constant startRate = 1333;\r\n    uint256 private accumulated = 0;\r\n\r\n    enum State { BeforeSale, Bonus, NormalSale, ShouldFinalize, Lockup, SaleOver }\r\n    State public state = State.BeforeSale;\r\n\r\n    /* --- Ether wallets --- */\r\n\r\n    address public admin;// = 0x021e366d41cd25209a9f1197f238f10854a0c662; // 0 - get 99% of ether\r\n    address public ICOadvisor1;// = 0xBD1b96D30E1a202a601Fa8823Fc83Da94D71E3cc; // 1 - get 1% of ether\r\n    uint256 private constant ICOadvisor1Sum = 400000*toDec; // also gets tokens - 0.8% - 400,000\r\n\r\n    // Pre ICO wallets\r\n\r\n    address public hundredKInvestor;// = 0x93da612b3DA1eF05c5D80c9B906bf9e7aAdc4a23;\r\n    uint256 private constant hundredKInvestorSum = 3200000*toDec; // 2 - 6.4% - 3,200,000\r\n\r\n    address public additionalPresaleInvestors;// = 0x095e80F85f3D260bF959Aa524F2f3918f56a2493;\r\n    uint256 private constant additionalPresaleInvestorsSum = 1000000*toDec; // 3 - 2% - 1,000,000\r\n\r\n    address public preSaleBotReserve;// = 0x095e80F85f3D260bF959Aa524F2f3918f56a2493; // same as additionalPresaleInvestors\r\n    uint256 private constant preSaleBotReserveSum = 2500000*toDec; // 4 - 5% - 2,500,000\r\n\r\n    address public ICOadvisor2;// = 0xe05416EAD6d997C8bC88A7AE55eC695c06693C58;\r\n    uint256 private constant ICOadvisor2Sum = 100000*toDec; // 5 - 0.2% - 100,000\r\n\r\n    address public team;// = 0xA919B56D099C12cC8921DF605Df2D696b30526B0;\r\n    uint256 private constant teamSum = 1820000*toDec; // 6 - 3.64% - 1,820,000\r\n \r\n    address public bounty;// = 0x20065A723d43c753AD83689C5f9F4786a73Be6e6;\r\n    uint256 private constant bountySum = 1000000*toDec; // 7 - 2% - 1,000,000\r\n\r\n    \r\n    // Lockup wallets\r\n    address public founders;// = 0x49ddcD8b4B1F54f3E5c4fEf705025C1DaDC753f6;\r\n    uint256 private constant foundersSum = 7180000*toDec; // 8 - 14.36% - 7,180,000\r\n\r\n\r\n    /* --- Time periods --- */\r\n\r\n\r\n    uint256 public constant startTimeNumber = 1512723600 + 1; // 8/12/17-9:00:00 - 1512723600\r\n    uint256 public constant endTimeNumber = 1513641540; // 18/12/17-23:59:00 - 1513641540\r\n\r\n    uint256 public constant lockupPeriod = 90 * 1 days; // 90 days - 7776000\r\n    uint256 public constant bonusPeriod = 12 * 1 hours; // 12 hours - 43,200\r\n\r\n    uint256 public constant bonusEndTime = bonusPeriod + startTimeNumber;\r\n\r\n\r\n\r\n    event LockedUpTokensWithdrawn();\r\n    event Finalized();\r\n\r\n    modifier canWithdrawLockup() {\r\n        require(state == State.Lockup);\r\n        require(endTime.add(lockupPeriod) < block.timestamp);\r\n        _;\r\n    }\r\n\r\n    function TigereumCrowdsale(\r\n        address _admin,\r\n        address _ICOadvisor1,\r\n        address _hundredKInvestor,\r\n        address _additionalPresaleInvestors,\r\n        address _preSaleBotReserve,\r\n        address _ICOadvisor2,\r\n        address _team,\r\n        address _bounty,\r\n        address _founders)\r\n    Crowdsale(\r\n        startTimeNumber /* start date - 8/12/17-9:00:00 */, \r\n        endTimeNumber /* end date - 18/12/17-23:59:00 */, \r\n        startRate /* start rate - 1333 */, \r\n        _admin\r\n    )  \r\n    public \r\n    {      \r\n        admin = _admin;\r\n        ICOadvisor1 = _ICOadvisor1;\r\n        hundredKInvestor = _hundredKInvestor;\r\n        additionalPresaleInvestors = _additionalPresaleInvestors;\r\n        preSaleBotReserve = _preSaleBotReserve;\r\n        ICOadvisor2 = _ICOadvisor2;\r\n        team = _team;\r\n        bounty = _bounty;\r\n        founders = _founders;\r\n        owner = admin;\r\n    }\r\n\r\n    function isContract(address addr) private returns (bool) {\r\n      uint size;\r\n      assembly { size := extcodesize(addr) }\r\n      return size > 0;\r\n    }\r\n\r\n    // creates the token to be sold.\r\n    // override this method to have crowdsale of a specific MintableToken token.\r\n    function createTokenContract() internal returns (MintableToken) {\r\n        return new Tigereum();\r\n    }\r\n\r\n    function forwardFunds() internal {\r\n        forwardFundsAmount(msg.value);\r\n    }\r\n\r\n    function forwardFundsAmount(uint256 amount) internal {\r\n        var onePercent = amount / 100;\r\n        var adminAmount = onePercent.mul(99);\r\n        admin.transfer(adminAmount);\r\n        ICOadvisor1.transfer(onePercent);\r\n        var left = amount.sub(adminAmount).sub(onePercent);\r\n        accumulated = accumulated.add(left);\r\n    }\r\n\r\n    function refundAmount(uint256 amount) internal {\r\n        msg.sender.transfer(amount);\r\n    }\r\n\r\n    function fixAddress(address newAddress, uint256 walletIndex) onlyOwner public {\r\n        require(state != State.ShouldFinalize && state != State.Lockup && state != State.SaleOver);\r\n        if (walletIndex == 0 && !isContract(newAddress)) {\r\n            admin = newAddress;\r\n        }\r\n        if (walletIndex == 1 && !isContract(newAddress)) {\r\n            ICOadvisor1 = newAddress;\r\n        }\r\n        if (walletIndex == 2) {\r\n            hundredKInvestor = newAddress;\r\n        }\r\n        if (walletIndex == 3) {\r\n            additionalPresaleInvestors = newAddress;\r\n        }\r\n        if (walletIndex == 4) {\r\n            preSaleBotReserve = newAddress;\r\n        }\r\n        if (walletIndex == 5) {\r\n            ICOadvisor2 = newAddress;\r\n        }\r\n        if (walletIndex == 6) {\r\n            team = newAddress;\r\n        }\r\n        if (walletIndex == 7) {\r\n            bounty = newAddress;\r\n        }\r\n        if (walletIndex == 8) {\r\n            founders = newAddress;\r\n        }\r\n    }\r\n\r\n    function calculateCurrentRate() internal {\r\n        if (state == State.NormalSale) {\r\n            rate = 1000;\r\n        }\r\n    }\r\n\r\n    function buyTokensUpdateState() internal {\r\n        if(state == State.BeforeSale && now >= startTimeNumber) { state = State.Bonus; }\r\n        if(state == State.Bonus && now >= bonusEndTime) { state = State.NormalSale; }\r\n        calculateCurrentRate();\r\n        require(state != State.ShouldFinalize && state != State.Lockup && state != State.SaleOver);\r\n        if(msg.value.mul(rate) >= tokensLeft) { state = State.ShouldFinalize; }\r\n    }\r\n\r\n    function buyTokens(address beneficiary) public payable {\r\n        buyTokensUpdateState();\r\n        var numTokens = msg.value.mul(rate);\r\n        if(state == State.ShouldFinalize) {\r\n            lastTokens(beneficiary);\r\n            finalize();\r\n        }\r\n        else {\r\n            tokensLeft = tokensLeft.sub(numTokens); // if negative, should finalize\r\n            super.buyTokens(beneficiary);\r\n        }\r\n    }\r\n\r\n    function lastTokens(address beneficiary) internal {\r\n        require(beneficiary != 0x0);\r\n        require(validPurchase());\r\n\r\n        uint256 weiAmount = msg.value;\r\n\r\n        // calculate token amount to be created\r\n        uint256 tokensForFullBuy = weiAmount.mul(rate);// must be bigger or equal to tokensLeft to get here\r\n        uint256 tokensToRefundFor = tokensForFullBuy.sub(tokensLeft);\r\n        uint256 tokensRemaining = tokensForFullBuy.sub(tokensToRefundFor);\r\n        uint256 weiAmountToRefund = tokensToRefundFor.div(rate);\r\n        uint256 weiRemaining = weiAmount.sub(weiAmountToRefund);\r\n        \r\n        // update state\r\n        weiRaised = weiRaised.add(weiRemaining);\r\n\r\n        token.mint(beneficiary, tokensRemaining);\r\n        TokenPurchase(msg.sender, beneficiary, weiRemaining, tokensRemaining);\r\n\r\n        forwardFundsAmount(weiRemaining);\r\n        refundAmount(weiAmountToRefund);\r\n    }\r\n\r\n    function withdrawLockupTokens() canWithdrawLockup public {\r\n        rate = 1000;\r\n        token.mint(founders, foundersSum);\r\n        token.finishMinting();\r\n        LockupTokensWithdrawn = true;\r\n        LockedUpTokensWithdrawn();\r\n        state = State.SaleOver;\r\n    }\r\n\r\n    function finalizeUpdateState() internal {\r\n        if(now > endTimeNumber) { state = State.ShouldFinalize; }\r\n        if(tokensLeft == 0) { state = State.ShouldFinalize; }\r\n    }\r\n\r\n    function finalize() public {\r\n        finalizeUpdateState();\r\n        require (!isFinalized);\r\n        require (state == State.ShouldFinalize);\r\n\r\n        finalization();\r\n        Finalized();\r\n\r\n        isFinalized = true;\r\n    }\r\n\r\n    function finalization() internal {\r\n        endTime = block.timestamp;\r\n        /* - preICO investors - */\r\n        token.mint(ICOadvisor1, ICOadvisor1Sum);\r\n        token.mint(hundredKInvestor, hundredKInvestorSum);\r\n        token.mint(additionalPresaleInvestors, additionalPresaleInvestorsSum);\r\n        token.mint(preSaleBotReserve, preSaleBotReserveSum);\r\n        token.mint(ICOadvisor2, ICOadvisor2Sum);\r\n        token.mint(team, teamSum);\r\n        token.mint(bounty, bountySum);\r\n        forwardFundsAmount(accumulated);\r\n        tokensLeft = 0;\r\n        state = State.Lockup;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"LockupTokensWithdrawn\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ICOadvisor2\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTimeNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawLockupTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"founders\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ICOadvisor1\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preSaleBotReserve\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"team\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"toDec\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isFinalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hundredKInvestor\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bounty\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAddress\",\"type\":\"address\"},{\"name\":\"walletIndex\",\"type\":\"uint256\"}],\"name\":\"fixAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"additionalPresaleInvestors\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensLeft\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTimeNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusEndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockupPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_admin\",\"type\":\"address\"},{\"name\":\"_ICOadvisor1\",\"type\":\"address\"},{\"name\":\"_hundredKInvestor\",\"type\":\"address\"},{\"name\":\"_additionalPresaleInvestors\",\"type\":\"address\"},{\"name\":\"_preSaleBotReserve\",\"type\":\"address\"},{\"name\":\"_ICOadvisor2\",\"type\":\"address\"},{\"name\":\"_team\",\"type\":\"address\"},{\"name\":\"_bounty\",\"type\":\"address\"},{\"name\":\"_founders\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"LockedUpTokensWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Finalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"TigereumCrowdsale","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000021e366d41cd25209a9f1197f238f10854a0c662000000000000000000000000bd1b96d30e1a202a601fa8823fc83da94d71e3cc00000000000000000000000093da612b3da1ef05c5d80c9b906bf9e7aadc4a23000000000000000000000000095e80f85f3d260bf959aa524f2f3918f56a2493000000000000000000000000095e80f85f3d260bf959aa524f2f3918f56a2493000000000000000000000000e05416ead6d997c8bc88a7ae55ec695c06693c58000000000000000000000000a919b56d099c12cc8921df605df2d696b30526b000000000000000000000000020065a723d43c753ad83689c5f9f4786a73be6e600000000000000000000000049ddcd8b4b1f54f3e5c4fef705025c1dadc753f6","Library":"","SwarmSource":"bzzr://c0eb0962885d3a12197865e6ca4f323ada07de6062f02d32162c5914b48257ba"}]}