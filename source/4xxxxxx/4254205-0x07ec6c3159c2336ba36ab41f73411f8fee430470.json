{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.15;\r\n/*Visit  http://titscrypto.com/  for more information */\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal returns(uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal returns(uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal returns(uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal returns(uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n\r\n    /** \r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    function Ownable() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n\r\n    modifier onlyOwner() {\r\n        if (msg.sender != owner) {\r\n            revert();\r\n        } else {\r\n            _;\r\n        }\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20Basic {\r\n    uint256 public totalSupply;\r\n\r\n    function balanceOf(address who) constant returns(uint256);\r\n\r\n    function transfer(address to, uint256 value);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n    function allowance(address owner, address spender) constant returns(uint256);\r\n\r\n    function transferFrom(address from, address to, uint256 value);\r\n\r\n    function approve(address spender, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances. \r\n */\r\ncontract BasicToken is ERC20Basic {\r\n    using SafeMath\r\n    for uint256;\r\n    mapping(address => uint256) balances;\r\n\r\n\t/**\r\n\t  * @dev transfer token for a specified address\r\n\t  * @param _to The address to transfer to.\r\n\t  * @param _value The amount to be transferred.\r\n\t  */\r\n    function transfer(address _to, uint256 _value) {\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        Transfer(msg.sender, _to, _value);\r\n    }\r\n\t\r\n\t/**\r\n\t  * @dev Gets the balance of the specified address.\r\n\t  * @param _owner The address to query the the balance of. \r\n\t  * @return An uint256 representing the amount owned by the passed address.\r\n\t  */\r\n    function balanceOf(address _owner) constant returns(uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n}\r\n\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n    mapping(address => mapping(address => uint256)) allowed;\r\n\t\r\n\t/**\r\n\t   * @dev Transfer tokens from one address to another\r\n\t   * @param _from address The address which you want to send tokens from\r\n\t   * @param _to address The address which you want to transfer to\r\n\t   * @param _value uint256 the amout of tokens to be transfered\r\n\t   */\r\n    function transferFrom(address _from, address _to, uint256 _value) {\r\n        var _allowance = allowed[_from][msg.sender];\r\n\r\n        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n        // if (_value > _allowance) throw;\r\n\r\n        balances[_to] = balances[_to].add(_value);\r\n        balances[_from] = balances[_from].sub(_value);\r\n        allowed[_from][msg.sender] = _allowance.sub(_value);\r\n        Transfer(_from, _to, _value);\r\n    }\r\n\r\n\t  /**\r\n\t   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n\t   * @param _spender The address which will spend the funds.\r\n\t   * @param _value The amount of tokens to be spent.\r\n\t   */\r\n    function approve(address _spender, uint256 _value) {\r\n\r\n        // To change the approve amount you first have to reduce the addresses`\r\n        //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n        //  already 0 to mitigate the race condition described here:\r\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n        if ((_value != 0) && (allowed[msg.sender][_spender] != 0)) revert();\r\n\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n    }\r\n\r\n\t/**\r\n\t   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n\t   * @param _owner address The address which owns the funds.\r\n\t   * @param _spender address The address which will spend the funds.\r\n\t   * @return A uint256 specifing the amount of tokens still avaible for the spender.\r\n\t   */\r\n    function allowance(address _owner, address _spender) constant returns(uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n}\r\n\r\ncontract MintableToken is StandardToken, Ownable {\r\n    event Mint(address indexed to, uint256 amount);\r\n    event MintFinished();\r\n    event MintStarted();\r\n    event RefundRequest(uint256 sum,address adr,uint256 balance);\r\n    event CoinBuy(uint256 sum,address adr);\r\n    \r\n\r\n    bool public mintingFinished = true;\r\n    bool public goalReached = false;\r\n    uint public mintingStartTime = 0;\r\n    uint public maxMintingTime = 30 days;\r\n    uint public mintingGoal = 500 ether;\r\n\r\n    address public titsTokenAuthor = 0x189891d02445D87e70d515fD2159416f023B0087;\r\n\r\n\t/**\r\n\t   * @dev Fell fre to donate Author if You like what is presented here\r\n\t   */\r\n    function donateAuthor() payable {\r\n        titsTokenAuthor.transfer(msg.value);\r\n    }\r\n\r\n    bool public alreadyMintedOnce = false;\r\n\r\n    modifier mintingClosed() {\r\n        if (mintingFinished == false || alreadyMintedOnce == false) revert();\r\n        _;\r\n    }\r\n    \r\n    modifier IsMintingGoal() {\r\n        if (mintingFinished == false || alreadyMintedOnce == false || goalReached == false ) revert();\r\n        _;\r\n    }\r\n\r\n    modifier notMintedYet() {\r\n        if (alreadyMintedOnce == true) revert();\r\n        _;\r\n    }\r\n\r\n    function getNow() public returns(uint256){\r\n        return now;\r\n    }\r\n    \r\n\t/**\r\n\t   * @dev Premium for buying TITS at the begining of ICO \r\n\t   * @return bool True if no errors\r\n\t   */\r\n    function fastBuyBonus() private returns(uint) {\r\n        uint period = getNow() - mintingStartTime;\r\n        if (period < 1 days) {\r\n            return 3500;\r\n        }\r\n        if (period < 2 days) {\r\n            return 3200;\r\n        }\r\n        if (period < 3 days) {\r\n            return 3000;\r\n        }\r\n        if (period < 7 days) {\r\n            return 2600;\r\n        }\r\n        if (period < 10 days) {\r\n            return 2400;\r\n        }\r\n        if (period < 12 days) {\r\n            return 2200;\r\n        }\r\n        if (period < 14 days) {\r\n            return 2000;\r\n        }\r\n        if (period < 17 days) {\r\n            return 1800;\r\n        }\r\n        if (period < 19 days) {\r\n            return 1600;\r\n        }\r\n        if (period < 21 days) {\r\n            return 1400;\r\n        }\r\n        if (period < 23 days) {\r\n            return 1200;\r\n        }\r\n        return 1000;\r\n    }\r\n\r\n\t/**\r\n\t   * @dev Allows to buy shares\r\n\t   * @return bool True if no errors\r\n\t   */\r\n    function buy() payable returns(bool) {\r\n        if (mintingFinished) {\r\n            revert();\r\n        }\r\n\r\n        uint _amount = 0;\r\n        _amount = msg.value * fastBuyBonus();\r\n        totalSupply = totalSupply.add(_amount);\r\n        CoinBuy(_amount,msg.sender);\r\n        balances[msg.sender] = balances[msg.sender].add(_amount);\r\n        balances[owner] = balances[owner].add(_amount / 85 * 15); //15% shares of owner\r\n        totalSupply = totalSupply.add(_amount / 85 * 15);\r\n        return true;\r\n    }\r\n\r\n\t/**\r\n\t   * @dev Opens ICO (only owner)\r\n\t   * @return bool True if no errors\r\n\t   */\r\n    function startMinting() onlyOwner notMintedYet returns(bool) {\r\n        mintingStartTime = getNow();\r\n        alreadyMintedOnce = true;\r\n        mintingFinished = false;\r\n        MintStarted();\r\n        return true;\r\n    }\r\n\r\n\t/**\r\n\t   * @dev Closes ICO - anyone can invoke if invoked to soon, takes no actions\r\n\t   * @return bool True if no errors\r\n\t   */\r\n    function finishMinting() returns(bool) {\r\n        if (mintingFinished == false) {\r\n            if (getNow() - mintingStartTime > maxMintingTime) {\r\n                mintingFinished = true;\r\n                MintFinished();\r\n                goalReached = (this.balance > mintingGoal);\r\n                return true;\r\n            }\r\n        }\r\n        revert();\r\n    }\r\n\r\n\t/**\r\n\t   * @dev Function refunds contributors if ICO was unsuccesful \r\n\t   * @return bool True if conditions for refund are met false otherwise.\r\n\t   */\r\n    function refund() returns(bool) {\r\n        if (mintingFinished == true && goalReached == false && alreadyMintedOnce == true) {\r\n            uint256 valueOfInvestment =  this.balance.mul(balances[msg.sender]).div(totalSupply);\r\n            totalSupply.sub(balances[msg.sender]);\r\n            RefundRequest(valueOfInvestment,msg.sender,balances[msg.sender]);\r\n            balances[msg.sender] = 0;\r\n            msg.sender.transfer(valueOfInvestment);\r\n\t\t\treturn true;\r\n        }\r\n        revert();\r\n    }\r\n \r\n}\r\n\r\ncontract TitsToken is MintableToken {\r\n    string public name = \"Truth In The Sourcecode\";\r\n    string public symbol = \"TITS\";\r\n    uint public decimals = 18;\r\n    uint public voitingStartTime;\r\n    address public votedAddress;\r\n    uint public votedYes = 1;\r\n    uint public votedNo = 0;\r\n    event VoteOnTransferStarted(address indexed beneficiaryContract);\r\n    event RegisterTransferBeneficiaryContract(address indexed beneficiaryContract);\r\n    event VotingEnded(address indexed beneficiaryContract, bool result);\r\n    event ShareHolderVoted(address adr,uint256 votes,bool isYesVote);\r\n\r\n    uint public constant VOTING_PREPARE_TIMESPAN = 7 days;\r\n    uint public constant VOTING_TIMESPAN =  7 days;\r\n    uint public failedVotingCount = 0;\r\n    bool public isVoting = false;\r\n    bool public isVotingPrepare = false;\r\n\r\n    address public beneficiaryContract = address(0);\r\n\r\n    mapping(address => uint256) public votesAvailable;\r\n    address[] public voters;\r\n\r\n\t/**\r\n\t   * @dev voting long enought to go to next phase \r\n\t   */\r\n    modifier votingLong() {\r\n        if (getNow() - voitingStartTime <  VOTING_TIMESPAN) revert();\r\n        _;\r\n    }\r\n\r\n\t/**\r\n\t   * @dev preparation for voting (application for voting) long enought to go to next phase \r\n\t   */\r\n    modifier votingPrepareLong() {\r\n        if (getNow() - voitingStartTime < VOTING_PREPARE_TIMESPAN) revert();\r\n        _;\r\n    }\r\n\r\n\t/**\r\n\t   * @dev Voting started and in progress\r\n\t   */\r\n    modifier votingInProgress() {\r\n        if (isVoting == false) revert();\r\n        _;\r\n    }\r\n    modifier votingNotInProgress() {\r\n        if (isVoting == true) revert();\r\n        _;\r\n    }\r\n\r\n\t/**\r\n\t   * @dev Voting preparation started and in progress\r\n\t   */\r\n    modifier votingPrepareInProgress() {\r\n        if (isVotingPrepare == false) revert();\r\n        _;\r\n    }\r\n\r\n\t/**\r\n\t   * @dev Voters agreed on proposed contract and Ethereum is being send to that contract\r\n\t   */\r\n    function sendToBeneficiaryContract()  {\r\n        if (beneficiaryContract != address(0)) {\r\n            beneficiaryContract.transfer(this.balance);\r\n        } else {\r\n            revert();\r\n        }\r\n    }\r\n\t\t\r\n\t/**\r\n\t   * @dev can be called by anyone, if timespan withou accepted proposal long enought \r\n\t   * enables refund\r\n\t   */\r\n\tfunction registerVotingPrepareFailure() mintingClosed{\r\n\t\tif(getNow()-mintingStartTime>(2+failedVotingCount)*maxMintingTime ){\r\n\t\t\tfailedVotingCount=failedVotingCount+1;\r\n            if (failedVotingCount == 10) {\r\n                goalReached = false;\r\n            }\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t   * @dev opens preparation for new voting on proposed Lottery Contract address\r\n\t   */\r\n    function startVotingPrepare(address votedAddressArg) mintingClosed votingNotInProgress IsMintingGoal onlyOwner{\r\n        isVoting = false;\r\n        isVotingPrepare = true;\r\n        RegisterTransferBeneficiaryContract(votedAddressArg);\r\n        votedAddress = votedAddressArg;\r\n        voitingStartTime = getNow();\r\n        for (uint i = 0; i < voters.length; i++) {\r\n            delete voters[i];\r\n        }\r\n        delete voters;\r\n    }\r\n\r\n\t/**\r\n\t   * @dev payable so attendance only of people who really care\r\n\t   * registers You as a voter;\r\n\t   */\r\n    function registerForVoting() payable votingPrepareInProgress {\r\n        if (msg.value >= 10 finney) {\r\n            voters.push(msg.sender);\r\n        }\r\n\t\telse{\r\n\t\t\trevert();\r\n\t\t}\r\n    }\r\n\r\n\t/**\r\n\t   * @dev opens voting on proposed Lottery Contract address\r\n\t   */\r\n    function startVoting() votingPrepareInProgress votingPrepareLong {\r\n        VoteOnTransferStarted(votedAddress);\r\n        for (uint256 i = 0; i < voters.length; i++) {\r\n            address voter = voters[i];\r\n            uint256 votes = balanceOf(voter);\r\n            votesAvailable[voter]=votes;\r\n        }\r\n        isVoting = true;\r\n        voitingStartTime = getNow();\r\n        isVotingPrepare = false;\r\n    }\r\n\r\n\t/**\r\n\t   * @dev closes voting on proposed Lottery Contract address\r\n\t   * checks if failed - if No votes is more common than yes increase failed voting count and if it reaches 10 \r\n\t   * reach of goal is failing and investors can withdraw their money\r\n\t   */\r\n    function closeVoring() votingInProgress votingLong {\r\n        VotingEnded(votedAddress, votedYes > votedNo);\r\n        isVoting = false;\r\n        isVotingPrepare = false;\r\n        if (votedYes > votedNo) {\r\n            beneficiaryContract = votedAddress;\r\n        } else {\r\n            failedVotingCount = failedVotingCount + 1;\r\n            if (failedVotingCount == 10) {\r\n                goalReached = false;\r\n            }\r\n        }\r\n    }\r\n\r\n\t/**\r\n\t   * @dev votes on contract proposal\r\n\t   */\r\n    function vote(bool isVoteYes) votingInProgress{\r\n\r\n            uint256 votes = votesAvailable[msg.sender];\r\n            ShareHolderVoted(msg.sender,votes,isVoteYes);\r\n            if (isVoteYes) {\r\n                votesAvailable[msg.sender] = 0;\r\n                votedYes = votedYes.add(votes);\r\n            }\r\n            else\r\n            if (isVoteYes==false) {\r\n                votesAvailable[msg.sender] = 0;\r\n                votedNo = votedNo.add(votes);\r\n            } \r\n            else{\r\n                revert();   \r\n            }\r\n            \r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"failedVotingCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"votedNo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isVoting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"donateAuthor\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startVoting\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"votedAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"registerForVoting\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"isVoteYes\",\"type\":\"bool\"}],\"name\":\"vote\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"registerVotingPrepareFailure\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refund\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"VOTING_TIMESPAN\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"VOTING_PREPARE_TIMESPAN\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beneficiaryContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isVotingPrepare\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"alreadyMintedOnce\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"votesAvailable\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"votedYes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"goalReached\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"titsTokenAuthor\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buy\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mintingGoal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"voitingStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getNow\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"sendToBeneficiaryContract\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"votedAddressArg\",\"type\":\"address\"}],\"name\":\"startVotingPrepare\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"voters\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mintingStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxMintingTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"closeVoring\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"beneficiaryContract\",\"type\":\"address\"}],\"name\":\"VoteOnTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"beneficiaryContract\",\"type\":\"address\"}],\"name\":\"RegisterTransferBeneficiaryContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"beneficiaryContract\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"result\",\"type\":\"bool\"}],\"name\":\"VotingEnded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"adr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"votes\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"isYesVote\",\"type\":\"bool\"}],\"name\":\"ShareHolderVoted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sum\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"adr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"RefundRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sum\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"CoinBuy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"TitsToken","CompilerVersion":"v0.4.15+commit.bbb8e64f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://da0658c3c9de49acc17fdc6f40a9b6e626195d59b4e4f22d52f82e5cd2d437a9"}]}