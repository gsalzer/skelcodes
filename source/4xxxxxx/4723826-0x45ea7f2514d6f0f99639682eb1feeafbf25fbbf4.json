{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n// File: contracts/zeppelin-solidity-1.4/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/BRDCrowdsaleAuthorizer.sol\r\n\r\n/**\r\n * Contract BRDCrowdsaleAuthorizer is used by the crowdsale website\r\n * to autorize wallets to participate in the crowdsale. Because all\r\n * participants must go through the KYC/AML phase, only accounts\r\n * listed in this contract may contribute to the crowdsale\r\n */\r\ncontract BRDCrowdsaleAuthorizer is Ownable {\r\n  // these accounts are authorized to participate in the crowdsale\r\n  mapping (address => bool) internal authorizedAccounts;\r\n  // these accounts are authorized to authorize accounts\r\n  mapping (address => bool) internal authorizers;\r\n\r\n  // emitted when a new account is authorized\r\n  event Authorized(address indexed _to);\r\n\r\n  // add an authorizer to the authorizers mapping. the _newAuthorizer will\r\n  // be able to add other authorizers and authorize crowdsale participants\r\n  function addAuthorizer(address _newAuthorizer) onlyOwnerOrAuthorizer public {\r\n    // allow the provided address to authorize accounts\r\n    authorizers[_newAuthorizer] = true;\r\n  }\r\n\r\n  // remove an authorizer from the authorizers mapping. the _bannedAuthorizer will\r\n  // no longer have permission to do anything on this contract\r\n  function removeAuthorizer(address _bannedAuthorizer) onlyOwnerOrAuthorizer public {\r\n    // only attempt to remove the authorizer if they are currently authorized\r\n    require(authorizers[_bannedAuthorizer]);\r\n    // remove the authorizer\r\n    delete authorizers[_bannedAuthorizer];\r\n  }\r\n\r\n  // allow an account to participate in the crowdsale\r\n  function authorizeAccount(address _newAccount) onlyOwnerOrAuthorizer public {\r\n    if (!authorizedAccounts[_newAccount]) {\r\n      // allow the provided account to participate in the crowdsale\r\n      authorizedAccounts[_newAccount] = true;\r\n      // emit the Authorized event\r\n      Authorized(_newAccount);\r\n    }\r\n  }\r\n\r\n  // returns whether or not the provided _account is an authorizer\r\n  function isAuthorizer(address _account) constant public returns (bool _isAuthorizer) {\r\n    return msg.sender == owner || authorizers[_account] == true;\r\n  }\r\n\r\n  // returns whether or not the provided _account is authorized to participate in the crowdsale\r\n  function isAuthorized(address _account) constant public returns (bool _authorized) {\r\n    return authorizedAccounts[_account] == true;\r\n  }\r\n\r\n  // allow only the contract creator or one of the authorizers to do this\r\n  modifier onlyOwnerOrAuthorizer() {\r\n    require(msg.sender == owner || authorizers[msg.sender]);\r\n    _;\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isAuthorizer\",\"outputs\":[{\"name\":\"_isAuthorizer\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAuthorizer\",\"type\":\"address\"}],\"name\":\"addAuthorizer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_bannedAuthorizer\",\"type\":\"address\"}],\"name\":\"removeAuthorizer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAccount\",\"type\":\"address\"}],\"name\":\"authorizeAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isAuthorized\",\"outputs\":[{\"name\":\"_authorized\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"Authorized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"BRDCrowdsaleAuthorizer","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://7bf2c31c97fdc94c3844022ea03868a49da87172ee6493a5db5132674ff28e4e"}]}