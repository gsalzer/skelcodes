{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;}\r\n    function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        // assert(b > 0); \r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); \r\n        return c;}\r\n function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;}\r\nfunction add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;}}\r\n//------------------------------------------------------------------------------------------------------------------//\r\n    contract ERC20 {\r\n     function totalSupply() constant returns (uint256 totalSupply);                                 //TotalSupply\r\n     function balanceOf(address _owner) constant returns (uint256 balance);                         //See Balance Of\r\n     function transfer(address _to, uint256 _value) returns (bool success);                         //Transfer\r\n     function transferFrom(address _from, address _to, uint256 _value) returns (bool success);      //TransferFrom\r\n     function approve(address _spender, uint256 _value) returns (bool success);                     //Approve\r\n     function allowance(address _owner, address _spender) constant returns (uint256 remaining);     //Allowance\r\n     function Mine_Block() returns (bool);            //Mine Function\r\n     function Proof_of_Stake() returns (bool);\r\n     function Request_Airdrop() returns (bool);     //Airdrop Function\r\n     event Mine(address indexed _address, uint _reward);      \r\n     event MinePoS(address indexed _address, uint rewardPoS);\r\n     event MineAD (address indexed _address, uint rewardAD);\r\n     event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n     event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n     event SponsoredLink(string newNote);}\r\n//------------------------------------------------------------------------------------------------------------------//     \r\n  contract EthereumWhite is ERC20 {                    //Name of the Contract\r\n     using SafeMath for uint256;                       //Use SafeMath\r\n     string public constant symbol = \"EWHITE\";         //Token Symbol\r\n     string public constant name = \"Ethereum White\";   //Token Name\r\n     uint8 public constant decimals = 8;               //Decimals\r\n     uint256 _totalSupply = 9000000 * (10**8);         //TotalSupply starts to 9 Million \r\n     uint256 public _maxtotalSupply = 90000000 * (10**8);  // MaxTotalSupply is 90 Million\r\n     uint clock;                                       //mining time\r\n     uint public clockairdrop;                         //airdroptime\r\n     uint clockowner;                                  //double check anti cheat\r\n     uint public clockpos;                             //Pos Time\r\n     uint public clockmint;\r\n     uint MultiReward;           \r\n     uint MultiRewardAD;                       \r\n     uint public Miners;                               // Maximum Miners requestes for actual block\r\n     uint public Airdrop;                              //Maximum Airdrop requestes for actual block\r\n     uint public PoS;\r\n     uint public TotalAirdropRequests;                 //Total Airdrops from the biginning \r\n     uint public TotalPoSRequests;                     //Total PoS from the biginning\r\n     uint public  rewardAD;                            //Show last rewad for Airdrop\r\n     uint public _reward;                              //Show last reward for miners\r\n     uint public _rewardPoS;                           //Show last reward for PoS\r\n     uint public MaxMinersXblock;                      //Show number of miners allowed each block\r\n     uint public MaxAirDropXblock;                     //Show number of Airdrops allowed each block\r\n     uint public MaxPoSXblock;                         //Show number of PoS allowed each block\r\n     uint public constant InitalPos = 10000 * (10**8); // Start Proof-of-stake\r\n     uint public gas;                                  // Fee Reimbursement\r\n     uint public BlockMined;                           //Total blocks Mined\r\n     uint public PoSPerCent;                           //PoSPerCent \r\n     uint public reqfee;\r\n     struct transferInStruct{\r\n     uint128 reward;\r\n     uint64 time;  }\r\n     address public owner;\r\n     mapping(address => uint256) balances;\r\n     mapping(address => mapping (address => uint256)) allowed;\r\n     mapping(address => transferInStruct[]) transferIns;\r\n//------------------------------------------------------------------------------------------------------------------//    \r\nfunction InitialSettings() onlyOwner returns (bool success) {\r\n    MultiReward = 45;     \r\n    MultiRewardAD = 45;\r\n    PoSPerCent = 2000;\r\n    Miners = 0;         \r\n    Airdrop = 0;                        \r\n    PoS = 0;\r\n    MaxMinersXblock = 10;                   \r\n    MaxAirDropXblock=5;            \r\n    MaxPoSXblock=2;       \r\n    clock = 1509269936;                                 \r\n    clockairdrop = 1509269936;                         \r\n    clockowner = 1509269936;                           \r\n    clockpos = 1509269936;                             \r\n    clockmint = 1509269936;\r\n    reqfee = 1000000000;}\r\n//------------------------------------------------------------------------------------------------------------------// \r\n     modifier onlyPayloadSize(uint size) { \r\n        require(msg.data.length >= size + 4);\r\n        _;}\r\n//------------------------------------------------------------------------------------------------------------------// \r\n    string public SponsoredLink = \"Ethereum White\";        \r\n    function setSponsor(string note_) public onlyOwner {\r\n      SponsoredLink = note_;\r\n      SponsoredLink(SponsoredLink); }\r\n//------------------------------------------------------------------------------------------------------------------// \r\n    function ShowADV(){\r\n       SponsoredLink(SponsoredLink);}\r\n//------------------------------------------------------------------------------------------------------------------// \r\n     function EthereumWhite() {\r\n         owner = msg.sender;\r\n         balances[owner] = 9000000 * (10**8);\r\n         }\r\n//------------------------------------------------------------------------------------------------------------------// \r\n     modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;  }\r\n//------------------------------------------------------------------------------------------------------------------// \r\n     function totalSupply() constant returns (uint256 totalSupply) {\r\n         totalSupply = _totalSupply;      }\r\n//------------------------------------------------------------------------------------------------------------------// \r\n     function balanceOf(address _owner) constant returns (uint256 balance) {\r\n        return balances[_owner];     }\r\n//------------------------------------------------------------------------------------------------------------------// \r\n        function SetMaxMinersXblock(uint _MaxMinersXblock) onlyOwner {\r\n        MaxMinersXblock=  _MaxMinersXblock;   }\r\n//------------------------------------------------------------------------------------------------------------------// \r\n        function SetMaxAirDropXblock(uint _MaxAirDropXblock) onlyOwner {\r\n        MaxAirDropXblock=  _MaxAirDropXblock;        }\r\n//------------------------------------------------------------------------------------------------------------------// \r\n        function SetMaxPosXblock(uint _MaxPoSXblock) onlyOwner {\r\n         MaxPoSXblock=  _MaxPoSXblock;        }        \r\n//------------------------------------------------------------------------------------------------------------------// \r\n        function SetRewardMultiAD(uint _MultiRewardAD) onlyOwner {\r\n         MultiRewardAD=  _MultiRewardAD;        }        \r\n//------------------------------------------------------------------------------------------------------------------//          \r\n      function SetRewardMulti(uint _MultiReward) onlyOwner {\r\n         MultiReward=  _MultiReward;        }        \r\n //------------------------------------------------------------------------------------------------------------------// \r\n        function SetGasFeeReimbursed(uint _Gasfee) onlyOwner{\r\n         gas=  _Gasfee * 1 wei;}       \r\n//------------------------------------------------------------------------------------------------------------------// \r\n         function transfer(address _to, uint256 _amount)  onlyPayloadSize(2 * 32) returns (bool success){\r\n         if (balances[msg.sender] >= _amount \r\n            && _amount > 0\r\n             && balances[_to] + _amount > balances[_to]) {\r\n             if(_totalSupply> _maxtotalSupply){\r\n             gas = 0;\r\n             }\r\n                if (balances[msg.sender] >= reqfee){\r\n             balances[msg.sender] -= _amount - gas ;}\r\n             else{\r\n            balances[msg.sender] -= _amount;}\r\n             balances[_to] += _amount;\r\n             Transfer(msg.sender, _to, _amount);\r\n             _totalSupply = _totalSupply.add(tx.gasprice);\r\n             ShowADV();\r\n            return true;\r\n             } else { throw;}}\r\n\r\n//------------------------------------------------------------------------------------------------------------------// \r\n     function transferFrom(address _from, address _to, uint256 _amount) onlyPayloadSize(2 * 32) returns (bool success) {\r\n         if (balances[_from] >= _amount\r\n             && allowed[_from][msg.sender] >= _amount\r\n             && _amount > 0\r\n             && balances[_to] + _amount > balances[_to]) {\r\n             balances[_from] -= _amount;\r\n             allowed[_from][msg.sender] -= _amount;\r\n             balances[_to] += _amount;\r\n             Transfer(_from, _to, _amount);\r\n             ShowADV();\r\n             return true;\r\n         }   else {\r\n             throw;} }\r\n//------------------------------------------------------------------------------------------------------------------// \r\n         modifier canMint() {\r\n         uint _now = now;\r\n        require(_totalSupply < _maxtotalSupply);\r\n        require ((_now.sub(clockmint)).div(90 seconds) >= 1);\r\n        _; }\r\n//------------------------------------------------------------------------------------------------------------------// \r\n        function Mine_Block() canMint returns (bool) {\r\n         if(clockmint < clockowner) {return false;}\r\n         if(Miners >= MaxMinersXblock){\r\n         clockmint = now; \r\n         Miners=0;\r\n         return true;}\r\n         if(balances[msg.sender] <= (100 * (10**8))){ return false;}\r\n         Miners++;\r\n         uint Calcrewardminers =1000000*_maxtotalSupply.div(((_totalSupply/9)*10)+(TotalAirdropRequests));\r\n         _reward = Calcrewardminers*MultiReward;  \r\n         uint reward = _reward;\r\n        _totalSupply = _totalSupply.add(reward);\r\n        balances[msg.sender] = balances[msg.sender].add(reward);\r\n        transferIns[msg.sender].push(transferInStruct(uint128(balances[msg.sender]),uint64(now)));\r\n        Mine(msg.sender, reward);\r\n        BlockMined++;\r\n        ShowADV();\r\n        return true;}\r\n//------------------------------------------------------------------------------------------------------------------// \r\n        modifier canAirdrop() { \r\n         uint _now = now;\r\n        require(_totalSupply < _maxtotalSupply);\r\n        require ((_now.sub(clockairdrop)).div(60 seconds) >= 1);\r\n        _;}\r\n//------------------------------------------------------------------------------------------------------------------// \r\n         function Request_Airdrop() canAirdrop returns (bool) {\r\n         if(clockairdrop < clockowner){ return false;}\r\n         if(Airdrop >= MaxAirDropXblock){\r\n         clockairdrop = now; \r\n         Airdrop=0;\r\n        return true; }\r\n          if(balances[msg.sender] > (100 * (10**8))) return false;\r\n         Airdrop++;\r\n         uint Calcrewardairdrop =100000*_maxtotalSupply.div(((_totalSupply/9)*10)+TotalAirdropRequests);\r\n         uint _reward = Calcrewardairdrop*MultiRewardAD;\r\n         rewardAD = _reward;\r\n        _totalSupply = _totalSupply.add(rewardAD);\r\n        balances[msg.sender] = balances[msg.sender].add(rewardAD);\r\n        transferIns[msg.sender].push(transferInStruct(uint128(balances[msg.sender]),uint64(now)));\r\n        MineAD(msg.sender, rewardAD);\r\n        TotalAirdropRequests++;\r\n        ShowADV();\r\n        return true;}\r\n//------------------------------------------------------------------------------------------------------------------// \r\n        modifier canPoS() {\r\n         uint _now = now;\r\n        require(_totalSupply < _maxtotalSupply);\r\n        require ((_now.sub(clockpos)).div(120 seconds) >= 1);\r\n         uint _nownetowk = now;\r\n        _;}\r\n//------------------------------------------------------------------------------------------------------------------// \r\n         function Proof_of_Stake() canPoS returns (bool) {\r\n         if(clockpos < clockowner){return false;}\r\n         if(PoS >= MaxPoSXblock){\r\n         clockpos = now; \r\n         PoS=0;\r\n         return true; }\r\n         PoS++;\r\n         if(balances[msg.sender] >= InitalPos){\r\n         uint ProofOfStake = balances[msg.sender].div(PoSPerCent);\r\n         _rewardPoS = ProofOfStake;                    // Proof-of-stake 0.005%\r\n         uint rewardPoS = _rewardPoS;\r\n        _totalSupply = _totalSupply.add(rewardPoS);\r\n        balances[msg.sender] = balances[msg.sender].add(rewardPoS);\r\n        transferIns[msg.sender].push(transferInStruct(uint128(balances[msg.sender]),uint64(now)));\r\n        MinePoS(msg.sender, rewardPoS);\r\n        TotalPoSRequests++;\r\n}else throw;\r\n        ShowADV();\r\n        return true;}\r\n//------------------------------------------------------------------------------------------------------------------// \r\n        function approve(address _spender, uint256 _amount) returns (bool success) {\r\n         allowed[msg.sender][_spender] = _amount;\r\n        Approval(msg.sender, _spender, _amount);\r\n         return true;}\r\n//------------------------------------------------------------------------------------------------------------------// \r\n     function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n         return allowed[_owner][_spender];}}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"Request_Airdrop\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"Mine_Block\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Miners\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TotalPoSRequests\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_reward\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PoSPerCent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_MaxMinersXblock\",\"type\":\"uint256\"}],\"name\":\"SetMaxMinersXblock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardAD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"InitalPos\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Airdrop\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SponsoredLink\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"Proof_of_Stake\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PoS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MaxMinersXblock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MaxPoSXblock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_maxtotalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gas\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TotalAirdropRequests\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"note_\",\"type\":\"string\"}],\"name\":\"setSponsor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"clockairdrop\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_MaxAirDropXblock\",\"type\":\"uint256\"}],\"name\":\"SetMaxAirDropXblock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"clockmint\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_rewardPoS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"InitialSettings\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_MultiRewardAD\",\"type\":\"uint256\"}],\"name\":\"SetRewardMultiAD\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"clockpos\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_MaxPoSXblock\",\"type\":\"uint256\"}],\"name\":\"SetMaxPosXblock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BlockMined\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_MultiReward\",\"type\":\"uint256\"}],\"name\":\"SetRewardMulti\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"ShowADV\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MaxAirDropXblock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_Gasfee\",\"type\":\"uint256\"}],\"name\":\"SetGasFeeReimbursed\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reqfee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_reward\",\"type\":\"uint256\"}],\"name\":\"Mine\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"rewardPoS\",\"type\":\"uint256\"}],\"name\":\"MinePoS\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"rewardAD\",\"type\":\"uint256\"}],\"name\":\"MineAD\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newNote\",\"type\":\"string\"}],\"name\":\"SponsoredLink\",\"type\":\"event\"}]","ContractName":"EthereumWhite","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://dd41f7eb025d58de69b914f03b4153ff6899bab6154274b58214be64ad0a6e7f"}]}