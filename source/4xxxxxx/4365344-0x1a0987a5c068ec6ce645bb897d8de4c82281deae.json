{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.15;\r\n\r\ncontract Owned {\r\n\r\n    // The address of the account that is the current owner \r\n    address internal owner;\r\n\r\n\r\n    /**\r\n     * The publisher is the inital owner\r\n     */\r\n    function Owned() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n\r\n    /**\r\n     * Access is restricted to the current owner\r\n     */\r\n    modifier only_owner() {\r\n        require(msg.sender == owner);\r\n\r\n        _;\r\n    }\r\n}\r\n\r\n\r\ncontract IOwnership {\r\n\r\n    /**\r\n     * Returns true if `_account` is the current owner\r\n     *\r\n     * @param _account The address to test against\r\n     */\r\n    function isOwner(address _account) constant returns (bool);\r\n\r\n\r\n    /**\r\n     * Gets the current owner\r\n     *\r\n     * @return address The current owner\r\n     */\r\n    function getOwner() constant returns (address);\r\n}\r\n\r\n\r\ncontract Ownership is IOwnership, Owned {\r\n\r\n\r\n    /**\r\n     * Returns true if `_account` is the current owner\r\n     *\r\n     * @param _account The address to test against\r\n     */\r\n    function isOwner(address _account) public constant returns (bool) {\r\n        return _account == owner;\r\n    }\r\n\r\n\r\n    /**\r\n     * Gets the current owner\r\n     *\r\n     * @return address The current owner\r\n     */\r\n    function getOwner() public constant returns (address) {\r\n        return owner;\r\n    }\r\n}\r\n\r\n\r\ncontract ITransferableOwnership {\r\n\r\n    /**\r\n     * Transfer ownership to `_newOwner`\r\n     *\r\n     * @param _newOwner The address of the account that will become the new owner \r\n     */\r\n    function transferOwnership(address _newOwner);\r\n}\r\n\r\n\r\ncontract TransferableOwnership is ITransferableOwnership, Ownership {\r\n\r\n\r\n    /**\r\n     * Transfer ownership to `_newOwner`\r\n     *\r\n     * @param _newOwner The address of the account that will become the new owner \r\n     */\r\n    function transferOwnership(address _newOwner) public only_owner {\r\n        owner = _newOwner;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title IWhitelist \r\n *\r\n * Whitelist authentication interface\r\n *\r\n * #created 04/10/2017\r\n * #author Frank Bonnet\r\n */\r\ncontract IWhitelist {\r\n    \r\n\r\n    /**\r\n     * Authenticate \r\n     *\r\n     * Returns whether `_account` is on the whitelist\r\n     *\r\n     * @param _account The account to authenticate\r\n     * @return whether `_account` is successfully authenticated\r\n     */\r\n    function authenticate(address _account) constant returns (bool);\r\n}\r\n\r\n\r\n/**\r\n * @title Whitelist \r\n *\r\n * Whitelist authentication list\r\n *\r\n * #created 04/10/2017\r\n * #author Frank Bonnet\r\n */\r\ncontract Whitelist is IWhitelist, TransferableOwnership {\r\n\r\n    struct Entry {\r\n        uint datetime;\r\n        bool accepted;\r\n        uint index;\r\n    }\r\n\r\n    mapping (address => Entry) internal list;\r\n    address[] internal listIndex;\r\n\r\n\r\n    /**\r\n     * Returns whether an entry exists for `_account`\r\n     *\r\n     * @param _account The account to check\r\n     * @return whether `_account` is has an entry in the whitelist\r\n     */\r\n    function hasEntry(address _account) public constant returns (bool) {\r\n        return listIndex.length > 0 && _account == listIndex[list[_account].index];\r\n    }\r\n\r\n\r\n    /**\r\n     * Add `_account` to the whitelist\r\n     *\r\n     * If an account is currently disabled, the account is reenabled. Otherwise \r\n     * a new entry is created\r\n     *\r\n     * @param _account The account to add\r\n     */\r\n    function add(address _account) public only_owner {\r\n        if (!hasEntry(_account)) {\r\n            list[_account] = Entry(\r\n                now, true, listIndex.push(_account) - 1);\r\n        } else {\r\n            Entry storage entry = list[_account];\r\n            if (!entry.accepted) {\r\n                entry.accepted = true;\r\n                entry.datetime = now;\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * Remove `_account` from the whitelist\r\n     *\r\n     * Will not actually remove the entry but disable it by updating\r\n     * the accepted record\r\n     *\r\n     * @param _account The account to remove\r\n     */\r\n    function remove(address _account) public only_owner {\r\n        if (hasEntry(_account)) {\r\n            Entry storage entry = list[_account];\r\n            entry.accepted = false;\r\n            entry.datetime = now;\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * Authenticate \r\n     *\r\n     * Returns whether `_account` is on the whitelist\r\n     *\r\n     * @param _account The account to authenticate\r\n     * @return whether `_account` is successfully authenticated\r\n     */\r\n    function authenticate(address _account) public constant returns (bool) {\r\n        return list[_account].accepted;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"authenticate\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"add\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"remove\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"hasEntry\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"}]","ContractName":"Whitelist","CompilerVersion":"v0.4.15+commit.bbb8e64f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://0036a19d5f1e3f3d79b5aa02d5d0ae8c2bd9916c7506c9e4567fbf3654186c22"}]}