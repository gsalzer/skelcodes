{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal returns (uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control \r\n * functions, this simplifies the implementation of \"user permissions\". \r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    /** \r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    function Ownable() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n    * @dev Throws if called by any account other than the owner. \r\n    */\r\n    modifier onlyOwner() {\r\n        if (msg.sender != owner) {\r\n            throw;\r\n        }\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n    * @param newOwner The address to transfer ownership to. \r\n    */\r\n    function transferOwnership(address newOwner) onlyOwner {\r\n        if (newOwner != address(0)) {\r\n            owner = newOwner;\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20Basic {\r\n    uint256 public totalSupply;\r\n    function balanceOf(address who) constant returns (uint256);\r\n    function transfer(address to, uint256 value);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n    function allowance(address owner, address spender) constant returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value);\r\n    function approve(address spender, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances. \r\n */\r\ncontract BasicToken is ERC20Basic, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) balances;\r\n\r\n    /**\r\n    * @dev transfer token for a specified address\r\n    * @param _to The address to transfer to.\r\n    * @param _value The amount to be transferred.\r\n    */\r\n    function transfer(address _to, uint256 _value) {\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        Transfer(msg.sender, _to, _value);\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the balance of the specified address.\r\n    * @param _owner The address to query the the balance of. \r\n    * @return An uint256 representing the amount owned by the passed address.\r\n    */\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n\r\n    /**\r\n    * @dev Transfer tokens from one address to another\r\n    * @param _from address The address which you want to send tokens from\r\n    * @param _to address The address which you want to transfer to\r\n    * @param _value uint256 the amout of tokens to be transfered\r\n    */\r\n    function transferFrom(address _from, address _to, uint256 _value) {\r\n        var _allowance = allowed[_from][msg.sender];\r\n\r\n        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n        // if (_value > _allowance) throw;\r\n\r\n        balances[_to] = balances[_to].add(_value);\r\n        balances[_from] = balances[_from].sub(_value);\r\n        allowed[_from][msg.sender] = _allowance.sub(_value);\r\n        Transfer(_from, _to, _value);\r\n    }\r\n\r\n    /**\r\n    * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n    * @param _spender The address which will spend the funds.\r\n    * @param _value The amount of tokens to be spent.\r\n    */\r\n    function approve(address _spender, uint256 _value) {\r\n\r\n        // To change the approve amount you first have to reduce the addresses`\r\n        //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n        //  already 0 to mitigate the race condition described here:\r\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n        if ((_value != 0) && (allowed[msg.sender][_spender] != 0)) throw;\r\n\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n    }\r\n\r\n    /**\r\n    * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n    * @param _owner address The address which owns the funds.\r\n    * @param _spender address The address which will spend the funds.\r\n    * @return A uint256 specifing the amount of tokens still avaible for the spender.\r\n    */\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title TKRPToken\r\n * @dev Very simple ERC20 Token example, where all tokens are pre-assigned to the creator. \r\n * Note they can later distribute these tokens as they wish using `transfer` and other\r\n * `StandardToken` functions.\r\n */\r\ncontract TKRPToken is StandardToken {\r\n    event Destroy(address indexed _from);\r\n\r\n    string public name = \"TKRPToken\";\r\n    string public symbol = \"TKRP\";\r\n    uint256 public decimals = 18;\r\n    uint256 public initialSupply = 500000;\r\n\r\n    /**\r\n    * @dev Contructor that gives the sender all tokens\r\n    */\r\n    function TKRPToken() {\r\n        totalSupply = initialSupply;\r\n        balances[msg.sender] = initialSupply;\r\n    }\r\n\r\n    /**\r\n    * @dev Destroys tokens from an address, this process is irrecoverable.\r\n    * @param _from The address to destroy the tokens from.\r\n    */\r\n    function destroyFrom(address _from) onlyOwner returns (bool) {\r\n        uint256 balance = balanceOf(_from);\r\n        if (balance == 0) throw;\r\n\r\n        balances[_from] = 0;\r\n        totalSupply = totalSupply.sub(balance);\r\n\r\n        Destroy(_from);\r\n    }\r\n}\r\n\r\n/**\r\n * @title PreCrowdsale\r\n * @dev Smart contract which collects ETH and in return transfers the TKRPToken to the contributors\r\n * Log events are emitted for each transaction \r\n */\r\ncontract PreCrowdsale is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    /* \r\n    * Stores the contribution in wei\r\n    * Stores the amount received in TKRP\r\n    */\r\n    struct Contributor {\r\n        uint256 contributed;\r\n        uint256 received;\r\n    }\r\n\r\n    /* Backers are keyed by their address containing a Contributor struct */\r\n    mapping(address => Contributor) public contributors;\r\n\r\n    /* Events to emit when a contribution has successfully processed */\r\n    event TokensSent(address indexed to, uint256 value);\r\n    event ContributionReceived(address indexed to, uint256 value);\r\n\r\n    /* Constants */\r\n    uint256 public constant TOKEN_CAP = 500000;\r\n    uint256 public constant MINIMUM_CONTRIBUTION = 10 finney;\r\n    uint256 public constant TOKENS_PER_ETHER = 10000;\r\n    uint256 public constant PRE_CROWDSALE_DURATION = 5 days;\r\n\r\n    /* Public Variables */\r\n    TKRPToken public token;\r\n    address public preCrowdsaleOwner;\r\n    uint256 public etherReceived;\r\n    uint256 public tokensSent;\r\n    uint256 public preCrowdsaleStartTime;\r\n    uint256 public preCrowdsaleEndTime;\r\n\r\n    /* Modifier to check whether the preCrowdsale is running */\r\n    modifier preCrowdsaleRunning() {\r\n        if (now > preCrowdsaleEndTime || now < preCrowdsaleStartTime) throw;\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Fallback function which invokes the processContribution function\r\n    * @param _tokenAddress TKRP Token address\r\n    * @param _to preCrowdsale owner address\r\n    */\r\n    function PreCrowdsale(address _tokenAddress, address _to) {\r\n        token = TKRPToken(_tokenAddress);\r\n        preCrowdsaleOwner = _to;\r\n    }\r\n\r\n    /**\r\n    * @dev Fallback function which invokes the processContribution function\r\n    */\r\n    function() preCrowdsaleRunning payable {\r\n        processContribution(msg.sender);\r\n    }\r\n\r\n    /**\r\n    * @dev Starts the preCrowdsale\r\n    */\r\n    function start() onlyOwner {\r\n        if (preCrowdsaleStartTime != 0) throw;\r\n\r\n        preCrowdsaleStartTime = now;            \r\n        preCrowdsaleEndTime = now + PRE_CROWDSALE_DURATION;    \r\n    }\r\n\r\n    /**\r\n    * @dev A backup fail-safe drain if required\r\n    */\r\n    function drain() onlyOwner {\r\n        if (!preCrowdsaleOwner.send(this.balance)) throw;\r\n    }\r\n\r\n    /**\r\n    * @dev Finalizes the preCrowdsale and sends funds\r\n    */\r\n    function finalize() onlyOwner {\r\n        if ((preCrowdsaleStartTime == 0 || now < preCrowdsaleEndTime) && tokensSent != TOKEN_CAP) {\r\n            throw;\r\n        }\r\n\r\n        if (!preCrowdsaleOwner.send(this.balance)) throw;\r\n    }\r\n\r\n    /**\r\n    * @dev Processes the contribution given, sends the tokens and emits events\r\n    * @param sender The address of the contributor\r\n    */\r\n    function processContribution(address sender) internal {\r\n        if (msg.value < MINIMUM_CONTRIBUTION) throw;\r\n\r\n        uint256 contributionInTokens = msg.value.mul(TOKENS_PER_ETHER).div(1 ether);\r\n        if (contributionInTokens.add(tokensSent) > TOKEN_CAP) throw; \r\n\r\n        /* Send the tokens */\r\n        token.transfer(sender, contributionInTokens);\r\n\r\n        /* Create a contributor struct and store the contributed/received values */\r\n        Contributor contributor = contributors[sender];\r\n        contributor.received = contributor.received.add(contributionInTokens);\r\n        contributor.contributed = contributor.contributed.add(msg.value);\r\n\r\n        // /* Update the total amount of tokens sent and ether received */\r\n        etherReceived = etherReceived.add(msg.value);\r\n        tokensSent = tokensSent.add(contributionInTokens);\r\n\r\n        // /* Emit log events */\r\n        TokensSent(sender, contributionInTokens);\r\n        ContributionReceived(sender, msg.value);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"tokensSent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"contributors\",\"outputs\":[{\"name\":\"contributed\",\"type\":\"uint256\"},{\"name\":\"received\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"etherReceived\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preCrowdsaleStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKENS_PER_ETHER\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRE_CROWDSALE_DURATION\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MINIMUM_CONTRIBUTION\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"drain\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN_CAP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preCrowdsaleEndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preCrowdsaleOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"start\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"}],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TokensSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"ContributionReceived\",\"type\":\"event\"}]","ContractName":"PreCrowdsale","CompilerVersion":"v0.4.11+commit.68ef5810","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000d35deb30ad4b00a0d688fd150c6856542fe1946a000000000000000000000000acb44b81dabbb6d1af48a1b5a9deb881e6ebe713","Library":"","SwarmSource":"bzzr://b7bc3e0ca2dc7ab0556dcdf39a68d05a638bdcbc392c31800d88083cd2b5a9f2"}]}