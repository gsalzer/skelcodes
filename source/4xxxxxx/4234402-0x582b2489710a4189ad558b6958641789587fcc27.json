{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n// We have to specify what version of compiler this code will compile with\r\n\r\ncontract PonziUnlimited {\r\n\r\n  modifier onlyBy(address _account)\r\n    {\r\n        require(msg.sender == _account);\r\n        // Do not forget the \"_;\"! It will\r\n        // be replaced by the actual function\r\n        // body when the modifier is used.\r\n        _;\r\n    }\r\n\r\n  event GainsCalculated(\r\n    address receiver,\r\n    uint payedAmount,\r\n    uint gains,\r\n    uint contractBalance,\r\n    uint currentPayoutIndex\r\n  );\r\n\r\n  event FeesCalculated(\r\n    uint gains,\r\n    uint fees\r\n  );\r\n\r\n  event Payout(\r\n    address receiver,\r\n    uint value\r\n  );\r\n\r\n  event FeesPayout(\r\n    uint value\r\n  );\r\n\r\n  event FundsDeposited(\r\n    address depositor,\r\n    uint amount\r\n  );\r\n\r\n  event ComputedGainsRate(\r\n    address depositor,\r\n    uint gainsRate\r\n  );\r\n\r\n  struct Deposit {\r\n    address depositor;\r\n    uint amount;\r\n  }\r\n\r\n  struct PayoutItem {\r\n    address receiver;\r\n    uint amount;\r\n  }\r\n\r\n  address public master;\r\n  uint public feesRate;\r\n  uint public numDeposits;\r\n  uint public totalDeposited;\r\n  uint public totalGains;\r\n  uint public lastDeposit;\r\n  uint public profitsRatePercent;\r\n  uint public referedRateBonus;\r\n  uint public refereesRateBonus;\r\n  bool public active;\r\n  uint private currentPayoutIndex;\r\n\r\n  mapping (uint => Deposit) public depositsStack;\r\n\r\n  mapping (address => uint) public refereesCount;\r\n  mapping (address => uint) public pendingReferals;\r\n  mapping (address => uint) public addressGains;\r\n  mapping (address => uint[]) public addressPositions;\r\n  mapping (address => address) public refereeInvitations;\r\n  mapping (address => bool) public refereds;\r\n\r\n  PayoutItem[] public lastPayouts;\r\n\r\n  function PonziUnlimited() {\r\n    master = msg.sender;\r\n    feesRate = 10;\r\n    numDeposits = 0;\r\n    currentPayoutIndex = 0;\r\n    profitsRatePercent = 15;\r\n    referedRateBonus = 5;\r\n    refereesRateBonus = 5;\r\n    totalDeposited = 0;\r\n    totalGains = 0;\r\n    active = false;\r\n  }\r\n\r\n  function getPayout(uint index) constant returns (address receiver, uint amount) {\r\n    PayoutItem memory payout;\r\n    payout = lastPayouts[index];\r\n    return (payout.receiver, payout.amount);\r\n  }\r\n\r\n  function getLastPayouts() constant returns (address[10] lastReceivers, uint[10] lastAmounts) {\r\n    uint j = 0;\r\n    PayoutItem memory currentPayout;\r\n    uint length = lastPayouts.length;\r\n    uint startIndex = 0;\r\n\r\n    if (length > 10) {\r\n      startIndex = length - 10;\r\n    }\r\n\r\n    for(uint i = startIndex; i < length; i++) {\r\n      currentPayout = lastPayouts[i];\r\n      lastReceivers[j] = currentPayout.receiver;\r\n      lastAmounts[j] = currentPayout.amount;\r\n      j++;\r\n    }\r\n\r\n    return (lastReceivers, lastAmounts);\r\n  }\r\n\r\n  function getMaster() constant returns (address masterAddress) {\r\n    return master;\r\n  }\r\n\r\n  function getnumDeposits() constant returns (uint) {\r\n    return numDeposits;\r\n  }\r\n\r\n  function getContractMetrics() constant returns (uint, uint, uint, uint, bool) {\r\n    return (\r\n      this.balance,\r\n      totalDeposited,\r\n      totalGains,\r\n      numDeposits,\r\n      active\r\n    );\r\n  }\r\n\r\n  function setActive(bool activate) onlyBy(master) returns (bool) {\r\n    active = activate;\r\n\r\n    if (active) {\r\n      dispatchGains();\r\n    }\r\n    return active;\r\n  }\r\n\r\n  function inviteReferee(address referer, address referee) returns (bool success) {\r\n    success = true;\r\n\r\n    refereeInvitations[referee] = referer;\r\n    pendingReferals[referer] += 1;\r\n    return success;\r\n  }\r\n\r\n  function createReferee(address referer, address referee) private {\r\n    refereds[referee] = true;\r\n    refereesCount[referer] += 1;\r\n    pendingReferals[referer] -= 1;\r\n  }\r\n\r\n  function checkIfReferee(address referee) private {\r\n    address referer = refereeInvitations[referee];\r\n    if(referer != address(0)) {\r\n      createReferee(referer, referee);\r\n      delete refereeInvitations[referee];\r\n    }\r\n  }\r\n\r\n  function getAddressGains(address addr) constant returns(uint) {\r\n    return addressGains[addr];\r\n  }\r\n\r\n  function getCurrentPayoutIndex() constant returns(uint) {\r\n    return currentPayoutIndex;\r\n  }\r\n\r\n  function getEarliestPosition(address addr) constant returns(uint[]) {\r\n    return  addressPositions[addr];\r\n  }\r\n\r\n  function deposit() payable {\r\n    if(msg.value <= 0) throw;\r\n    lastDeposit = block.timestamp;\r\n    depositsStack[numDeposits] = Deposit(msg.sender, msg.value);\r\n    totalDeposited += msg.value;\r\n\r\n    checkIfReferee(msg.sender);\r\n    FundsDeposited(msg.sender, msg.value);\r\n    ++numDeposits;\r\n\r\n    addressPositions[msg.sender].push(numDeposits);\r\n\r\n    if(active) {\r\n      dispatchGains();\r\n    }\r\n  }\r\n\r\n  function resetBonuses(address depositor) private {\r\n    resetReferee(depositor);\r\n    resetReferedCount(depositor);\r\n  }\r\n\r\n  function setGainsRate(uint gainsRate) onlyBy(master) {\r\n    profitsRatePercent = gainsRate;\r\n  }\r\n\r\n  function resetReferee(address depositor) private {\r\n    refereds[depositor] = false;\r\n  }\r\n\r\n  function resetReferedCount(address depositor) private {\r\n    refereesCount[depositor] = 0;\r\n  }\r\n\r\n  function getAccountReferalsStats(address addr) constant returns(uint, uint) {\r\n\r\n    return (\r\n      getPendingReferals(addr),\r\n      getReferedCount(addr)\r\n    );\r\n  }\r\n\r\n  function computeGainsRate(address depositor) constant returns(uint gainsPercentage) {\r\n    gainsPercentage = profitsRatePercent;\r\n    if(isReferee(depositor)) {\r\n      gainsPercentage += referedRateBonus;\r\n    }\r\n\r\n    gainsPercentage += getReferedCount(depositor) * refereesRateBonus;\r\n\r\n    ComputedGainsRate(depositor, gainsPercentage);\r\n    return gainsPercentage;\r\n  }\r\n\r\n function computeGains(Deposit deposit) private constant returns (uint gains, uint fees) {\r\n    gains = 0;\r\n\r\n    if(deposit.amount > 0) {\r\n      gains = (deposit.amount * computeGainsRate(deposit.depositor)) / 100;\r\n      fees = (gains * feesRate) / 100;\r\n\r\n      GainsCalculated(deposit.depositor, deposit.amount, gains, this.balance, currentPayoutIndex);\r\n      FeesCalculated(gains, fees);\r\n    }\r\n\r\n    return (\r\n      gains - fees,\r\n      fees\r\n    );\r\n  }\r\n\r\n  function isReferee(address referee) private constant returns (bool) {\r\n    return refereds[referee];\r\n  }\r\n\r\n  function getReferedCount(address referer) private constant returns (uint referedsCount) {\r\n    referedsCount = refereesCount[referer];\r\n    return referedsCount;\r\n  }\r\n\r\n  function getPendingReferals(address addr) private constant returns (uint) {\r\n    return  pendingReferals[addr];\r\n  }\r\n\r\n  function addNewPayout(PayoutItem payout) private {\r\n    lastPayouts.length++;\r\n    lastPayouts[lastPayouts.length-1] = payout;\r\n  }\r\n\r\n  function payout(Deposit deposit) private{\r\n\r\n    var (gains, fees) = computeGains(deposit);\r\n    bool success = false;\r\n    bool feesSuccess = false;\r\n    uint payableAmount = deposit.amount + gains;\r\n    address currentDepositor = deposit.depositor;\r\n\r\n    if(gains > 0 && this.balance > payableAmount) {\r\n      success = currentDepositor.send( payableAmount );\r\n      if (success) {\r\n        Payout(currentDepositor, payableAmount);\r\n        addNewPayout(PayoutItem(currentDepositor, payableAmount));\r\n        feesSuccess = master.send(fees);\r\n        if(feesSuccess) {\r\n          FeesPayout(fees);\r\n        }\r\n        resetBonuses(currentDepositor);\r\n        addressGains[currentDepositor] += gains;\r\n        totalGains += gains;\r\n        currentPayoutIndex ++;\r\n      }\r\n    }\r\n  }\r\n\r\n  function dispatchGains() {\r\n\r\n    for (uint i = currentPayoutIndex; i<numDeposits; i++){\r\n      payout(depositsStack[i]);\r\n    }\r\n  }\r\n\r\n  function() payable {\r\n    deposit();\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"active\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"depositor\",\"type\":\"address\"}],\"name\":\"computeGainsRate\",\"outputs\":[{\"name\":\"gainsPercentage\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"pendingReferals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"addressPositions\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feesRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentPayoutIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getEarliestPosition\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastDeposit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getPayout\",\"outputs\":[{\"name\":\"receiver\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getAddressGains\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"profitsRatePercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"refereesRateBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getContractMetrics\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMaster\",\"outputs\":[{\"name\":\"masterAddress\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"referer\",\"type\":\"address\"},{\"name\":\"referee\",\"type\":\"address\"}],\"name\":\"inviteReferee\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLastPayouts\",\"outputs\":[{\"name\":\"lastReceivers\",\"type\":\"address[10]\"},{\"name\":\"lastAmounts\",\"type\":\"uint256[10]\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getnumDeposits\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalGains\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"refereds\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"refereeInvitations\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"activate\",\"type\":\"bool\"}],\"name\":\"setActive\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numDeposits\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressGains\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"depositsStack\",\"outputs\":[{\"name\":\"depositor\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getAccountReferalsStats\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"referedRateBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"gainsRate\",\"type\":\"uint256\"}],\"name\":\"setGainsRate\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"refereesCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"dispatchGains\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lastPayouts\",\"outputs\":[{\"name\":\"receiver\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"master\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalDeposited\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"payedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"gains\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"contractBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"currentPayoutIndex\",\"type\":\"uint256\"}],\"name\":\"GainsCalculated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"gains\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"fees\",\"type\":\"uint256\"}],\"name\":\"FeesCalculated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Payout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"FeesPayout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FundsDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"gainsRate\",\"type\":\"uint256\"}],\"name\":\"ComputedGainsRate\",\"type\":\"event\"}]","ContractName":"PonziUnlimited","CompilerVersion":"v0.4.13-nightly.2017.7.3+commit.6e4e627b","OptimizationUsed":"1","Runs":"0","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://759ec35aa016a81ae7550898bcac41c046fefe5dac6dac97046c28bfe00c0517"}]}