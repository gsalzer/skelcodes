{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\ncontract ERC20Interface {\r\n    // Get the total token supply\r\n    function totalSupply() constant returns (uint256);\r\n \r\n    // Get the account balance of another account with address _owner\r\n    function balanceOf(address _owner) constant returns (uint256 balance);\r\n \r\n    // Send _value amount of tokens to address _to\r\n    function transfer(address _to, uint256 _value) returns (bool success);\r\n \r\n    // Send _value amount of tokens from address _from to address _to\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\r\n \r\n    // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\r\n    // If this function is called again it overwrites the current allowance with _value.\r\n    // this function is required for some DEX functionality\r\n    function approve(address _spender, uint256 _value) returns (bool success);\r\n \r\n    // Returns the amount which _spender is still allowed to withdraw from _owner\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\r\n \r\n    // Triggered when tokens are transferred.\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n \r\n    // Triggered whenever approve(address _spender, uint256 _value) is called.\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n \r\ncontract RoseCoin is ERC20Interface {\r\n    uint8 public constant decimals = 5;\r\n    string public constant symbol = \"RSC\";\r\n    string public constant name = \"RoseCoin\";\r\n\r\n    uint public _level = 0;\r\n    bool public _selling = true;\r\n    uint public _totalSupply = 10 ** 14;\r\n    uint public _originalBuyPrice = 10 ** 10;\r\n    uint public _minimumBuyAmount = 10 ** 17;\r\n   \r\n    // Owner of this contract\r\n    address public owner;\r\n \r\n    // Balances for each account\r\n    mapping(address => uint256) balances;\r\n \r\n    // Owner of account approves the transfer of an amount to another account\r\n    mapping(address => mapping (address => uint256)) allowed;\r\n    \r\n    uint public _icoSupply = _totalSupply;\r\n    uint[4] public ratio = [12, 10, 10, 13];\r\n    uint[4] public threshold = [95000000000000, 85000000000000, 0, 80000000000000];\r\n\r\n    // Functions with this modifier can only be executed by the owner\r\n    modifier onlyOwner() {\r\n        if (msg.sender != owner) {\r\n            revert();\r\n        }\r\n        _;\r\n    }\r\n\r\n    modifier onlyNotOwner() {\r\n        if (msg.sender == owner) {\r\n            revert();\r\n        }\r\n        _;\r\n    }\r\n\r\n    modifier thresholdAll() {\r\n        if (!_selling || msg.value < _minimumBuyAmount || _icoSupply <= threshold[3]) { //\r\n            revert();\r\n        }\r\n        _;\r\n    }\r\n \r\n    // Constructor\r\n    function RoseCoin() {\r\n        owner = msg.sender;\r\n        balances[owner] = _totalSupply;\r\n    }\r\n \r\n    function totalSupply() constant returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n \r\n    // What is the balance of a particular account?\r\n    function balanceOf(address _owner) constant returns (uint256) {\r\n        return balances[_owner];\r\n    }\r\n \r\n    // Transfer the balance from sender's account to another account\r\n    function transfer(address _to, uint256 _amount) returns (bool) {\r\n        if (balances[msg.sender] >= _amount\r\n            && _amount > 0\r\n            && balances[_to] + _amount > balances[_to]) {\r\n            balances[msg.sender] -= _amount;\r\n            balances[_to] += _amount;\r\n            Transfer(msg.sender, _to, _amount);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n \r\n    // Send _value amount of tokens from address _from to address _to\r\n    // The transferFrom method is used for a withdraw workflow, allowing contracts to send\r\n    // tokens on your behalf, for example to \"deposit\" to a contract address and/or to charge\r\n    // fees in sub-currencies; the command should fail unless the _from account has\r\n    // deliberately authorized the sender of the message via some mechanism; we propose\r\n    // these standardized APIs for approval:\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _amount\r\n    ) returns (bool) {\r\n        if (balances[_from] >= _amount\r\n            && allowed[_from][msg.sender] >= _amount\r\n            && _amount > 0\r\n            && balances[_to] + _amount > balances[_to]) {\r\n            balances[_from] -= _amount;\r\n            allowed[_from][msg.sender] -= _amount;\r\n            balances[_to] += _amount;\r\n            Transfer(_from, _to, _amount);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n \r\n    // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\r\n    // If this function is called again it overwrites the current allowance with _value.\r\n    function approve(address _spender, uint256 _amount) returns (bool) {\r\n        allowed[msg.sender][_spender] = _amount;\r\n        Approval(msg.sender, _spender, _amount);\r\n        return true;\r\n    }\r\n \r\n    function allowance(address _owner, address _spender) constant returns (uint256) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n\r\n    function toggleSale() onlyOwner {\r\n        _selling = !_selling;\r\n    }\r\n\r\n    function setBuyPrice(uint newBuyPrice) onlyOwner {\r\n        _originalBuyPrice = newBuyPrice;\r\n    }\r\n    \r\n    // Buy RoseCoin by sending Ether    \r\n    function buy() payable onlyNotOwner thresholdAll returns (uint256 amount) {\r\n        amount = 0;\r\n        uint remain = msg.value / _originalBuyPrice;\r\n        \r\n        while (remain > 0 && _level < 3) { //\r\n            remain = remain * ratio[_level] / ratio[_level+1];\r\n            if (_icoSupply <= remain + threshold[_level]) {\r\n                remain = (remain + threshold[_level] - _icoSupply) * ratio[_level+1] / ratio[_level];\r\n                amount += _icoSupply - threshold[_level];\r\n                _icoSupply = threshold[_level];\r\n                _level += 1;\r\n            }\r\n            else {\r\n                _icoSupply -= remain;\r\n                amount += remain;\r\n                remain = 0;\r\n                break;\r\n            }\r\n        }\r\n        \r\n        if (balances[owner] < amount)\r\n            revert();\r\n        \r\n        if (remain > 0) {\r\n            remain *= _originalBuyPrice;\r\n            msg.sender.transfer(remain);\r\n        }\r\n        \r\n        balances[owner] -= amount;\r\n        balances[msg.sender] += amount;\r\n        owner.transfer(msg.value - remain);\r\n        Transfer(owner, msg.sender, amount);\r\n        return amount;\r\n    }\r\n    \r\n    // Owner withdraws Ether in contract\r\n    function withdraw() onlyOwner returns (bool) {\r\n        return owner.send(this.balance);\r\n    }\r\n}\r\n\r\ncontract BuyRoseCoin {\r\n    \r\n    event Purchase(address _buyer, uint _value);\r\n    event TransferBack(address _buyer, uint _amount, uint _value);\r\n    RoseCoin roseCoin = RoseCoin(0x5c457eA26f82Df1FcA1a8844804a7A89F56dd5e5);\r\n    \r\n    function BuyRoseCoin() {}\r\n    \r\n    function() payable {\r\n        buy();\r\n    }\r\n    \r\n    function buy() payable {\r\n        roseCoin.buy.value(msg.value)();\r\n        Purchase(this, msg.value);\r\n        uint amount = roseCoin.balanceOf(this);\r\n        roseCoin.transfer(msg.sender, amount);\r\n        TransferBack(msg.sender, amount, this.balance);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Purchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"TransferBack\",\"type\":\"event\"}]","ContractName":"BuyRoseCoin","CompilerVersion":"v0.4.15+commit.bbb8e64f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://a2b4ee57467a9c3ec19c8319257b63f976ee67e3168379b7ccbbed8f79f8f798"}]}