{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\n/**\r\n * ERC20 interface\r\n * see https://github.com/ethereum/EIPs/issues/20\r\n * and https://theethereum.wiki/w/index.php/ERC20_Token_Standard\r\n */\r\ncontract ERC20 {\r\n\r\n    // Get the total token supply.\r\n    function totalSupply() public constant returns (uint256);\r\n\r\n    // Get the account balance of another account with address _owner.\r\n    function balanceOf(address _owner) public constant returns (uint256);\r\n\r\n    // Send _value amount of tokens to address _to.\r\n    function transfer(address _to, uint256 _value) public returns (bool);\r\n\r\n    /* Send _value amount of tokens from address _from to address _to.\r\n     * The transferFrom method is used for a withdraw workflow, allowing contracts to send tokens on your behalf,\r\n     * for example to \"deposit\" to a contract address and/or to charge fees in sub-currencies; the command should\r\n     * fail unless the _from account has deliberately authorized the sender of the message via the approve mechanism. */\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool);\r\n\r\n    /* Allow _spender to withdraw from your account, multiple times, up to the _value amount.\r\n     * If this function is called again it overwrites the current allowance with _value. */\r\n    function approve(address _spender, uint256 _value) public returns (bool);\r\n\r\n    // Returns the amount which _spender is still allowed to withdraw from _owner.\r\n    function allowance(address _owner, address _spender) public constant returns (uint256);\r\n\r\n    // Event triggered when tokens are transferred.\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n\r\n    // Event triggered whenever approve(address _spender, uint256 _value) is called.\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n}\r\n\r\n/**\r\n * Math operations with safety checks\r\n */\r\ncontract SafeMath {\r\n\r\n    function safeMul(uint a, uint b) internal pure returns (uint) {\r\n        uint c = a * b;\r\n        require(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function safeDiv(uint a, uint b) internal pure returns (uint) {\r\n        require(b > 0);\r\n        uint c = a / b;\r\n        require(a == b * c + a % b);\r\n        return c;\r\n    }\r\n\r\n    function safeSub(uint a, uint b) internal pure returns (uint) {\r\n        require(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function safeAdd(uint a, uint b) internal pure returns (uint) {\r\n        uint c = a + b;\r\n        require(c >= a && c >= b);\r\n        return c;\r\n    }\r\n\r\n    function max64(uint64 a, uint64 b) internal pure returns (uint64) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    function min64(uint64 a, uint64 b) internal pure returns (uint64) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    function max256(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    function min256(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n}\r\n\r\n/**\r\n * Standard ERC20 token with Short Hand Attack and approve() race condition mitigation.\r\n *\r\n * Based on code by FirstBlood:\r\n * https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, SafeMath {\r\n\r\n    uint256 internal globalSupply;\r\n\r\n    /* Actual balances of token holders */\r\n    mapping (address => uint256) internal balanceMap;\r\n    mapping (address => mapping (address => uint256)) internal allowanceMap;\r\n\r\n    /* Interface declaration */\r\n    function isToken() public pure returns (bool) {\r\n        return true;\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        require (_to != 0x0);                                           // Prevent transfer to 0x0 address. Use burn() instead\r\n        require (balanceMap[msg.sender] >= _value);                      // Check if the sender has enough\r\n        require (balanceMap[_to] + _value >= balanceMap[_to]);            // Check for overflows\r\n        balanceMap[msg.sender] = safeSub(balanceMap[msg.sender], _value); // Subtract from the sender\r\n        balanceMap[_to] = safeAdd(balanceMap[_to], _value);               // Add the same to the recipient\r\n        Transfer(msg.sender, _to, _value);                              // Notify anyone listening that this transfer took place\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n        require (_to != 0x0);                                           // Prevent transfer to 0x0 address. Use burn() instead\r\n        require (balanceMap[_from] >= _value);                           // Check if the sender has enough\r\n        require (balanceMap[_to] + _value >= balanceMap[_to]);            // Check for overflows\r\n        require (_value <= allowanceMap[_from][msg.sender]);               // Check allowance\r\n        balanceMap[_from] = safeSub(balanceMap[_from], _value);           // Subtract from the sender\r\n        balanceMap[_to] = safeAdd(balanceMap[_to], _value);               // Add the same to the recipient\r\n\r\n        uint256 _allowance = allowanceMap[_from][msg.sender];\r\n        allowanceMap[_from][msg.sender] = safeSub(_allowance, _value);\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function totalSupply() public constant returns (uint256) {\r\n        return globalSupply;\r\n    }\r\n\r\n    function balanceOf(address _owner) public constant returns (uint256) {\r\n        return balanceMap[_owner];\r\n    }\r\n\r\n    /* Allow another contract to spend some tokens on your behalf.\r\n     * To change the approve amount you first have to reduce the addresses allowance to zero by calling\r\n     * approve(_spender, 0) if it is not already 0 to mitigate the race condition described here:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 */\r\n    function approve(address _spender, uint _value) public returns (bool) {\r\n        require ((_value == 0) || (allowanceMap[msg.sender][_spender] == 0));\r\n        allowanceMap[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) public constant returns (uint) {\r\n        return allowanceMap[_owner][_spender];\r\n    }\r\n}\r\n\r\ncontract Owned {\r\n\r\n    address internal owner;\r\n\r\n    function Owned() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require (msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) external onlyOwner {\r\n        owner = newOwner;\r\n    }\r\n\r\n    function getOwner() public constant returns (address currentOwner) {\r\n        return owner;\r\n    }\r\n}\r\n\r\ncontract AlsToken is StandardToken, Owned {\r\n\r\n    string public constant name = \"CryptoAlias\";\r\n    string public constant symbol = \"ALS\";\r\n    uint8 public constant decimals = 18;        // Same as ETH\r\n\r\n    address public icoAddress;\r\n\r\n    // ICO end time in seconds since epoch.\r\n    // Equivalent to Tuesday, February 20th 2018, 3 pm London time.\r\n    uint256 public constant icoEndTime = 1519138800;\r\n\r\n    // 1 million ALS with 18 decimals [10 to the power of (6 + 18) tokens].\r\n    uint256 private constant oneMillionAls = uint256(10) ** (6 + decimals);\r\n\r\n    bool private icoTokensWereBurned = false;\r\n    bool private teamTokensWereAllocated = false;\r\n\r\n    /* Initializes the initial supply of ALS to 80 million.\r\n     * For more details about the token's supply and allocation see https://github.com/CryptoAlias/ALS */\r\n    function AlsToken() public {\r\n        globalSupply = 80 * oneMillionAls;\r\n    }\r\n\r\n    modifier onlyAfterIco() {\r\n        require(now >= icoEndTime);\r\n        _;\r\n    }\r\n\r\n    /* Sets the ICO address and allocates it 80 million tokens.\r\n     * Can be invoked only by the owner.\r\n     * Can be called only once. Once set, the ICO address can not be changed. Any subsequent calls to this method will be ignored. */\r\n    function setIcoAddress(address _icoAddress) external onlyOwner {\r\n        require (icoAddress == address(0x0));\r\n\r\n        icoAddress = _icoAddress;\r\n        balanceMap[icoAddress] = 80 * oneMillionAls;\r\n\r\n        IcoAddressSet(icoAddress);\r\n    }\r\n\r\n    // Burns the tokens that were not sold during the ICO. Can be invoked only after the ICO ends.\r\n    function burnIcoTokens() external onlyAfterIco {\r\n        require (!icoTokensWereBurned);\r\n        icoTokensWereBurned = true;\r\n\r\n        uint256 tokensToBurn = balanceMap[icoAddress];\r\n        if (tokensToBurn > 0)\r\n        {\r\n            balanceMap[icoAddress] = 0;\r\n            globalSupply = safeSub(globalSupply, tokensToBurn);\r\n        }\r\n\r\n        Burned(icoAddress, tokensToBurn);\r\n    }\r\n\r\n    function allocateTeamAndPartnerTokens(address _teamAddress, address _partnersAddress) external onlyOwner {\r\n        require (icoTokensWereBurned);\r\n        require (!teamTokensWereAllocated);\r\n\r\n        uint256 oneTenth = safeDiv(globalSupply, 8);\r\n\r\n        balanceMap[_teamAddress] = oneTenth;\r\n        globalSupply = safeAdd(globalSupply, oneTenth);\r\n\r\n        balanceMap[_partnersAddress] = oneTenth;\r\n        globalSupply = safeAdd(globalSupply, oneTenth);\r\n\r\n        teamTokensWereAllocated = true;\r\n\r\n        TeamAndPartnerTokensAllocated(_teamAddress, _partnersAddress);\r\n    }\r\n\r\n    // Event triggered when the ICO address was set.\r\n    event IcoAddressSet(address _icoAddress);\r\n\r\n    // Event triggered when pre-ICO or ICO tokens were burned.\r\n    event Burned(address _address, uint256 _amount);\r\n\r\n    // Event triggered when team and partner tokens were allocated.\r\n    event TeamAndPartnerTokensAllocated(address _teamAddress, address _partnersAddress);\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"burnIcoTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoEndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"name\":\"currentOwner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_icoAddress\",\"type\":\"address\"}],\"name\":\"setIcoAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_teamAddress\",\"type\":\"address\"},{\"name\":\"_partnersAddress\",\"type\":\"address\"}],\"name\":\"allocateTeamAndPartnerTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_icoAddress\",\"type\":\"address\"}],\"name\":\"IcoAddressSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Burned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_teamAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_partnersAddress\",\"type\":\"address\"}],\"name\":\"TeamAndPartnerTokensAllocated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"AlsToken","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://d4654c34dc83864210116ac7b4c9ceeb289704eeefa839c2b2219ba324842a07"}]}