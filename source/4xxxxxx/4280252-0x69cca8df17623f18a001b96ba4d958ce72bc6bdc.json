{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.16;\r\n\r\ncontract ControllerInterface {\r\n\r\n\r\n  // State Variables\r\n  bool public paused;\r\n  address public nutzAddr;\r\n\r\n  // Nutz functions\r\n  function babzBalanceOf(address _owner) constant returns (uint256);\r\n  function activeSupply() constant returns (uint256);\r\n  function burnPool() constant returns (uint256);\r\n  function powerPool() constant returns (uint256);\r\n  function totalSupply() constant returns (uint256);\r\n  function allowance(address _owner, address _spender) constant returns (uint256);\r\n\r\n  function approve(address _owner, address _spender, uint256 _amountBabz) public;\r\n  function transfer(address _from, address _to, uint256 _amountBabz, bytes _data) public;\r\n  function transferFrom(address _sender, address _from, address _to, uint256 _amountBabz, bytes _data) public;\r\n\r\n  // Market functions\r\n  function floor() constant returns (uint256);\r\n  function ceiling() constant returns (uint256);\r\n\r\n  function purchase(address _sender, uint256 _value, uint256 _price) public returns (uint256);\r\n  function sell(address _from, uint256 _price, uint256 _amountBabz);\r\n\r\n  // Power functions\r\n  function powerBalanceOf(address _owner) constant returns (uint256);\r\n  function outstandingPower() constant returns (uint256);\r\n  function authorizedPower() constant returns (uint256);\r\n  function powerTotalSupply() constant returns (uint256);\r\n\r\n  function powerUp(address _sender, address _from, uint256 _amountBabz) public;\r\n  function downTick(address _owner, uint256 _now) public;\r\n  function createDownRequest(address _owner, uint256 _amountPower) public;\r\n  function downs(address _owner) constant public returns(uint256, uint256, uint256);\r\n  function downtime() constant returns (uint256);\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner {\r\n    require(newOwner != address(0));      \r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title PullPayment\r\n * @dev Base contract supporting async send for pull payments.\r\n */\r\ncontract PullPayment is Ownable {\r\n  using SafeMath for uint256;\r\n\r\n\r\n  uint public dailyLimit = 1000000000000000000000;  // 1 ETH\r\n  uint public lastDay;\r\n  uint public spentToday;\r\n\r\n  // 8bytes date, 24 bytes value\r\n  mapping(address => uint256) internal payments;\r\n\r\n  modifier onlyNutz() {\r\n    require(msg.sender == ControllerInterface(owner).nutzAddr());\r\n    _;\r\n  }\r\n\r\n  modifier whenNotPaused () {\r\n    require(!ControllerInterface(owner).paused());\r\n     _;\r\n  }\r\n\r\n  function balanceOf(address _owner) constant returns (uint256 value) {\r\n    return uint192(payments[_owner]);\r\n  }\r\n\r\n  function paymentOf(address _owner) constant returns (uint256 value, uint256 date) {\r\n    value = uint192(payments[_owner]);\r\n    date = (payments[_owner] >> 192);\r\n    return;\r\n  }\r\n\r\n  /// @dev Allows to change the daily limit. Transaction has to be sent by wallet.\r\n  /// @param _dailyLimit Amount in wei.\r\n  function changeDailyLimit(uint _dailyLimit) public onlyOwner {\r\n      dailyLimit = _dailyLimit;\r\n  }\r\n\r\n  function changeWithdrawalDate(address _owner, uint256 _newDate)  public onlyOwner {\r\n    // allow to withdraw immediately\r\n    // move witdrawal date more days into future\r\n    payments[_owner] = (_newDate << 192) + uint192(payments[_owner]);\r\n  }\r\n\r\n  function asyncSend(address _dest) public payable onlyNutz {\r\n    require(msg.value > 0);\r\n    uint256 newValue = msg.value.add(uint192(payments[_dest]));\r\n    uint256 newDate;\r\n    if (isUnderLimit(msg.value)) {\r\n      uint256 date = payments[_dest] >> 192;\r\n      newDate = (date > now) ? date : now;\r\n    } else {\r\n      newDate = now.add(3 days);\r\n    }\r\n    spentToday = spentToday.add(msg.value);\r\n    payments[_dest] = (newDate << 192) + uint192(newValue);\r\n  }\r\n\r\n\r\n  function withdraw() public whenNotPaused {\r\n    address untrustedRecipient = msg.sender;\r\n    uint256 amountWei = uint192(payments[untrustedRecipient]);\r\n\r\n    require(amountWei != 0);\r\n    require(now >= (payments[untrustedRecipient] >> 192));\r\n    require(this.balance >= amountWei);\r\n\r\n    payments[untrustedRecipient] = 0;\r\n\r\n    untrustedRecipient.transfer(amountWei);\r\n  }\r\n\r\n  /*\r\n   * Internal functions\r\n   */\r\n  /// @dev Returns if amount is within daily limit and resets spentToday after one day.\r\n  /// @param amount Amount to withdraw.\r\n  /// @return Returns if amount is under daily limit.\r\n  function isUnderLimit(uint amount) internal returns (bool) {\r\n    if (now > lastDay.add(24 hours)) {\r\n      lastDay = now;\r\n      spentToday = 0;\r\n    }\r\n    // not using safe math because we don't want to throw;\r\n    if (spentToday + amount > dailyLimit || spentToday + amount < spentToday) {\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_newDate\",\"type\":\"uint256\"}],\"name\":\"changeWithdrawalDate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dailyLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastDay\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_dest\",\"type\":\"address\"}],\"name\":\"asyncSend\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_dailyLimit\",\"type\":\"uint256\"}],\"name\":\"changeDailyLimit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"paymentOf\",\"outputs\":[{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"date\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"spentToday\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"PullPayment","CompilerVersion":"v0.4.16+commit.d7661dd9","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://f84b999f8490058e5d934d838323c2e3bbf88f871d9836d9b4d2988f4d5ff4fd"}]}