{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n/* The authentication manager details user accounts that have access to certain priviledges and keeps a permanent ledger of who has and has had these rights. */\r\ncontract AuthenticationManager {\r\n    /* Map addresses to admins */\r\n    mapping (address => bool) adminAddresses;\r\n\r\n    /* Map addresses to account readers */\r\n    mapping (address => bool) accountReaderAddresses;\r\n\r\n    /* Details of all admins that have ever existed */\r\n    address[] adminAudit;\r\n\r\n    /* Details of all account readers that have ever existed */\r\n    address[] accountReaderAudit;\r\n\r\n    /* Fired whenever an admin is added to the contract. */\r\n    event AdminAdded(address addedBy, address admin);\r\n\r\n    /* Fired whenever an admin is removed from the contract. */\r\n    event AdminRemoved(address removedBy, address admin);\r\n\r\n    /* Fired whenever an account-reader contract is added. */\r\n    event AccountReaderAdded(address addedBy, address account);\r\n\r\n    /* Fired whenever an account-reader contract is removed. */\r\n    event AccountReaderRemoved(address removedBy, address account);\r\n\r\n    /* When this contract is first setup we use the creator as the first admin */    \r\n    function AuthenticationManager() {\r\n        /* Set the first admin to be the person creating the contract */\r\n        adminAddresses[msg.sender] = true;\r\n        AdminAdded(0, msg.sender);\r\n        adminAudit.length++;\r\n        adminAudit[adminAudit.length - 1] = msg.sender;\r\n    }\r\n\r\n    /* Gets the contract version for validation */\r\n    function contractVersion() constant returns(uint256) {\r\n        // Admin contract identifies as 100YYYYMMDDHHMM\r\n        return 100201707171503;\r\n    }\r\n\r\n    /* Gets whether or not the specified address is currently an admin */\r\n    function isCurrentAdmin(address _address) constant returns (bool) {\r\n        return adminAddresses[_address];\r\n    }\r\n\r\n    /* Gets whether or not the specified address has ever been an admin */\r\n    function isCurrentOrPastAdmin(address _address) constant returns (bool) {\r\n        for (uint256 i = 0; i < adminAudit.length; i++)\r\n            if (adminAudit[i] == _address)\r\n                return true;\r\n        return false;\r\n    }\r\n\r\n    /* Gets whether or not the specified address is currently an account reader */\r\n    function isCurrentAccountReader(address _address) constant returns (bool) {\r\n        return accountReaderAddresses[_address];\r\n    }\r\n\r\n    /* Gets whether or not the specified address has ever been an admin */\r\n    function isCurrentOrPastAccountReader(address _address) constant returns (bool) {\r\n        for (uint256 i = 0; i < accountReaderAudit.length; i++)\r\n            if (accountReaderAudit[i] == _address)\r\n                return true;\r\n        return false;\r\n    }\r\n\r\n    /* Adds a user to our list of admins */\r\n    function addAdmin(address _address) {\r\n        /* Ensure we're an admin */\r\n        if (!isCurrentAdmin(msg.sender))\r\n            throw;\r\n\r\n        // Fail if this account is already admin\r\n        if (adminAddresses[_address])\r\n            throw;\r\n        \r\n        // Add the user\r\n        adminAddresses[_address] = true;\r\n        AdminAdded(msg.sender, _address);\r\n        adminAudit.length++;\r\n        adminAudit[adminAudit.length - 1] = _address;\r\n    }\r\n\r\n    /* Removes a user from our list of admins but keeps them in the history audit */\r\n    function removeAdmin(address _address) {\r\n        /* Ensure we're an admin */\r\n        if (!isCurrentAdmin(msg.sender))\r\n            throw;\r\n\r\n        /* Don't allow removal of self */\r\n        if (_address == msg.sender)\r\n            throw;\r\n\r\n        // Fail if this account is already non-admin\r\n        if (!adminAddresses[_address])\r\n            throw;\r\n\r\n        /* Remove this admin user */\r\n        adminAddresses[_address] = false;\r\n        AdminRemoved(msg.sender, _address);\r\n    }\r\n\r\n    /* Adds a user/contract to our list of account readers */\r\n    function addAccountReader(address _address) {\r\n        /* Ensure we're an admin */\r\n        if (!isCurrentAdmin(msg.sender))\r\n            throw;\r\n\r\n        // Fail if this account is already in the list\r\n        if (accountReaderAddresses[_address])\r\n            throw;\r\n        \r\n        // Add the user\r\n        accountReaderAddresses[_address] = true;\r\n        AccountReaderAdded(msg.sender, _address);\r\n        accountReaderAudit.length++;\r\n        accountReaderAudit[adminAudit.length - 1] = _address;\r\n    }\r\n\r\n    /* Removes a user/contracts from our list of account readers but keeps them in the history audit */\r\n    function removeAccountReader(address _address) {\r\n        /* Ensure we're an admin */\r\n        if (!isCurrentAdmin(msg.sender))\r\n            throw;\r\n\r\n        // Fail if this account is already not in the list\r\n        if (!accountReaderAddresses[_address])\r\n            throw;\r\n\r\n        /* Remove this admin user */\r\n        accountReaderAddresses[_address] = false;\r\n        AccountReaderRemoved(msg.sender, _address);\r\n    }\r\n}\r\n\r\ncontract IcoPhaseManagement {\r\n    using SafeMath for uint256;\r\n    \r\n    /* Defines whether or not we are in the ICO phase */\r\n    bool public icoPhase = true;\r\n\r\n    /* Defines whether or not the ICO has been abandoned */\r\n    bool public icoAbandoned = false;\r\n\r\n    /* Defines whether or not the SIFT contract address has yet been set.  */\r\n    bool siftContractDefined = false;\r\n    \r\n    /* Defines the sale price during ICO */\r\n    uint256 constant icoUnitPrice = 10 finney;\r\n\r\n    /* If an ICO is abandoned and some withdrawals fail then this map allows people to request withdrawal of locked-in ether. */\r\n    mapping(address => uint256) public abandonedIcoBalances;\r\n\r\n    /* Defines our interface to the SIFT contract. */\r\n    SmartInvestmentFundToken smartInvestmentFundToken;\r\n\r\n    /* Defines the admin contract we interface with for credentails. */\r\n    AuthenticationManager authenticationManager;\r\n\r\n    /* Defines the time that the ICO starts. */\r\n    uint256 constant public icoStartTime = 1501545600; // August 1st 2017 at 00:00:00 UTC\r\n\r\n    /* Defines the time that the ICO ends. */\r\n    uint256 constant public icoEndTime = 1505433600; // September 15th 2017 at 00:00:00 UTC\r\n\r\n    /* Defines our event fired when the ICO is closed */\r\n    event IcoClosed();\r\n\r\n    /* Defines our event fired if the ICO is abandoned */\r\n    event IcoAbandoned(string details);\r\n    \r\n    /* Ensures that once the ICO is over this contract cannot be used until the point it is destructed. */\r\n    modifier onlyDuringIco {\r\n        bool contractValid = siftContractDefined && !smartInvestmentFundToken.isClosed();\r\n        if (!contractValid || (!icoPhase && !icoAbandoned)) throw;\r\n        _;\r\n    }\r\n\r\n    /* This modifier allows a method to only be called by current admins */\r\n    modifier adminOnly {\r\n        if (!authenticationManager.isCurrentAdmin(msg.sender)) throw;\r\n        _;\r\n    }\r\n\r\n    /* Create the ICO phase managerment and define the address of the main SIFT contract. */\r\n    function IcoPhaseManagement(address _authenticationManagerAddress) {\r\n        /* A basic sanity check */\r\n        if (icoStartTime >= icoEndTime)\r\n            throw;\r\n\r\n        /* Setup access to our other contracts and validate their versions */\r\n        authenticationManager = AuthenticationManager(_authenticationManagerAddress);\r\n        if (authenticationManager.contractVersion() != 100201707171503)\r\n            throw;\r\n    }\r\n\r\n    /* Set the SIFT contract address as a one-time operation.  This happens after all the contracts are created and no\r\n       other functionality can be used until this is set. */\r\n    function setSiftContractAddress(address _siftContractAddress) adminOnly {\r\n        /* This can only happen once in the lifetime of this contract */\r\n        if (siftContractDefined)\r\n            throw;\r\n\r\n        /* Setup access to our other contracts and validate their versions */\r\n        smartInvestmentFundToken = SmartInvestmentFundToken(_siftContractAddress);\r\n        if (smartInvestmentFundToken.contractVersion() != 500201707171440)\r\n            throw;\r\n        siftContractDefined = true;\r\n    }\r\n\r\n    /* Gets the contract version for validation */\r\n    function contractVersion() constant returns(uint256) {\r\n        /* ICO contract identifies as 300YYYYMMDDHHMM */\r\n        return 300201707171440;\r\n    }\r\n\r\n    /* Close the ICO phase and transition to execution phase */\r\n    function close() adminOnly onlyDuringIco {\r\n        // Forbid closing contract before the end of ICO\r\n        if (now <= icoEndTime)\r\n            throw;\r\n\r\n        // Close the ICO\r\n        icoPhase = false;\r\n        IcoClosed();\r\n\r\n        // Withdraw funds to the caller\r\n        if (!msg.sender.send(this.balance))\r\n            throw;\r\n    }\r\n    \r\n    /* Handle receiving ether in ICO phase - we work out how much the user has bought, allocate a suitable balance and send their change */\r\n    function () onlyDuringIco payable {\r\n        // Forbid funding outside of ICO\r\n        if (now < icoStartTime || now > icoEndTime)\r\n            throw;\r\n\r\n        /* Determine how much they've actually purhcased and any ether change */\r\n        uint256 tokensPurchased = msg.value / icoUnitPrice;\r\n        uint256 purchaseTotalPrice = tokensPurchased * icoUnitPrice;\r\n        uint256 change = msg.value.sub(purchaseTotalPrice);\r\n\r\n        /* Increase their new balance if they actually purchased any */\r\n        if (tokensPurchased > 0)\r\n            smartInvestmentFundToken.mintTokens(msg.sender, tokensPurchased);\r\n\r\n        /* Send change back to recipient */\r\n        if (change > 0 && !msg.sender.send(change))\r\n            throw;\r\n    }\r\n\r\n    /* Abandons the ICO and returns funds to shareholders.  Any failed funds can be separately withdrawn once the ICO is abandoned. */\r\n    function abandon(string details) adminOnly onlyDuringIco {\r\n        // Forbid closing contract before the end of ICO\r\n        if (now <= icoEndTime)\r\n            throw;\r\n\r\n        /* If already abandoned throw an error */\r\n        if (icoAbandoned)\r\n            throw;\r\n\r\n        /* Work out a refund per share per share */\r\n        uint256 paymentPerShare = this.balance / smartInvestmentFundToken.totalSupply();\r\n\r\n        /* Enum all accounts and send them refund */\r\n        uint numberTokenHolders = smartInvestmentFundToken.tokenHolderCount();\r\n        uint256 totalAbandoned = 0;\r\n        for (uint256 i = 0; i < numberTokenHolders; i++) {\r\n            /* Calculate how much goes to this shareholder */\r\n            address addr = smartInvestmentFundToken.tokenHolder(i);\r\n            uint256 etherToSend = paymentPerShare * smartInvestmentFundToken.balanceOf(addr);\r\n            if (etherToSend < 1)\r\n                continue;\r\n\r\n            /* Allocate appropriate amount of fund to them */\r\n            abandonedIcoBalances[addr] = abandonedIcoBalances[addr].add(etherToSend);\r\n            totalAbandoned = totalAbandoned.add(etherToSend);\r\n        }\r\n\r\n        /* Audit the abandonment */\r\n        icoAbandoned = true;\r\n        IcoAbandoned(details);\r\n\r\n        // There should be no money left, but withdraw just incase for manual resolution\r\n        uint256 remainder = this.balance.sub(totalAbandoned);\r\n        if (remainder > 0)\r\n            if (!msg.sender.send(remainder))\r\n                // Add this to the callers balance for emergency refunds\r\n                abandonedIcoBalances[msg.sender] = abandonedIcoBalances[msg.sender].add(remainder);\r\n    }\r\n\r\n    /* Allows people to withdraw funds that failed to send during the abandonment of the ICO for any reason. */\r\n    function abandonedFundWithdrawal() {\r\n        // This functionality only exists if an ICO was abandoned\r\n        if (!icoAbandoned || abandonedIcoBalances[msg.sender] == 0)\r\n            throw;\r\n        \r\n        // Attempt to send them to funds\r\n        uint256 funds = abandonedIcoBalances[msg.sender];\r\n        abandonedIcoBalances[msg.sender] = 0;\r\n        if (!msg.sender.send(funds))\r\n            throw;\r\n    }\r\n}\r\n\r\n/* The SIFT itself is a simple extension of the ERC20 that allows for granting other SIFT contracts special rights to act on behalf of all transfers. */\r\ncontract SmartInvestmentFundToken {\r\n    using SafeMath for uint256;\r\n\r\n    /* Map all our our balances for issued tokens */\r\n    mapping (address => uint256) balances;\r\n\r\n    /* Map between users and their approval addresses and amounts */\r\n    mapping(address => mapping (address => uint256)) allowed;\r\n\r\n    /* List of all token holders */\r\n    address[] allTokenHolders;\r\n\r\n    /* The name of the contract */\r\n    string public name;\r\n\r\n    /* The symbol for the contract */\r\n    string public symbol;\r\n\r\n    /* How many DPs are in use in this contract */\r\n    uint8 public decimals;\r\n\r\n    /* Defines the current supply of the token in its own units */\r\n    uint256 totalSupplyAmount = 0;\r\n\r\n    /* Defines the address of the ICO contract which is the only contract permitted to mint tokens. */\r\n    address public icoContractAddress;\r\n\r\n    /* Defines whether or not the fund is closed. */\r\n    bool public isClosed;\r\n\r\n    /* Defines the contract handling the ICO phase. */\r\n    IcoPhaseManagement icoPhaseManagement;\r\n\r\n    /* Defines the admin contract we interface with for credentails. */\r\n    AuthenticationManager authenticationManager;\r\n\r\n    /* Fired when the fund is eventually closed. */\r\n    event FundClosed();\r\n    \r\n    /* Our transfer event to fire whenever we shift SMRT around */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    \r\n    /* Our approval event when one user approves another to control */\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n    /* Create a new instance of this fund with links to other contracts that are required. */\r\n    function SmartInvestmentFundToken(address _icoContractAddress, address _authenticationManagerAddress) {\r\n        // Setup defaults\r\n        name = \"Smart Investment Fund Token\";\r\n        symbol = \"SIFT\";\r\n        decimals = 0;\r\n\r\n        /* Setup access to our other contracts and validate their versions */\r\n        icoPhaseManagement = IcoPhaseManagement(_icoContractAddress);\r\n        if (icoPhaseManagement.contractVersion() != 300201707171440)\r\n            throw;\r\n        authenticationManager = AuthenticationManager(_authenticationManagerAddress);\r\n        if (authenticationManager.contractVersion() != 100201707171503)\r\n            throw;\r\n        \r\n        /* Store our special addresses */\r\n        icoContractAddress = _icoContractAddress;\r\n    }\r\n\r\n    modifier onlyPayloadSize(uint numwords) {\r\n        assert(msg.data.length == numwords * 32 + 4);\r\n        _;\r\n    } \r\n\r\n    /* This modifier allows a method to only be called by account readers */\r\n    modifier accountReaderOnly {\r\n        if (!authenticationManager.isCurrentAccountReader(msg.sender)) throw;\r\n        _;\r\n    }\r\n\r\n    modifier fundSendablePhase {\r\n        // If it's in ICO phase, forbid it\r\n        if (icoPhaseManagement.icoPhase())\r\n            throw;\r\n\r\n        // If it's abandoned, forbid it\r\n        if (icoPhaseManagement.icoAbandoned())\r\n            throw;\r\n\r\n        // We're good, funds can now be transferred\r\n        _;\r\n    }\r\n\r\n    /* Gets the contract version for validation */\r\n    function contractVersion() constant returns(uint256) {\r\n        /* SIFT contract identifies as 500YYYYMMDDHHMM */\r\n        return 500201707171440;\r\n    }\r\n    \r\n    /* Transfer funds between two addresses that are not the current msg.sender - this requires approval to have been set separately and follows standard ERC20 guidelines */\r\n    function transferFrom(address _from, address _to, uint256 _amount) fundSendablePhase onlyPayloadSize(3) returns (bool) {\r\n        if (balances[_from] >= _amount && allowed[_from][msg.sender] >= _amount && _amount > 0 && balances[_to].add(_amount) > balances[_to]) {\r\n            bool isNew = balances[_to] == 0;\r\n            balances[_from] = balances[_from].sub(_amount);\r\n            allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\r\n            balances[_to] = balances[_to].add(_amount);\r\n            if (isNew)\r\n                tokenOwnerAdd(_to);\r\n            if (balances[_from] == 0)\r\n                tokenOwnerRemove(_from);\r\n            Transfer(_from, _to, _amount);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /* Returns the total number of holders of this currency. */\r\n    function tokenHolderCount() accountReaderOnly constant returns (uint256) {\r\n        return allTokenHolders.length;\r\n    }\r\n\r\n    /* Gets the token holder at the specified index. */\r\n    function tokenHolder(uint256 _index) accountReaderOnly constant returns (address) {\r\n        return allTokenHolders[_index];\r\n    }\r\n \r\n    /* Adds an approval for the specified account to spend money of the message sender up to the defined limit */\r\n    function approve(address _spender, uint256 _amount) fundSendablePhase onlyPayloadSize(2) returns (bool success) {\r\n        allowed[msg.sender][_spender] = _amount;\r\n        Approval(msg.sender, _spender, _amount);\r\n        return true;\r\n    }\r\n\r\n    /* Gets the current allowance that has been approved for the specified spender of the owner address */\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    /* Gets the total supply available of this token */\r\n    function totalSupply() constant returns (uint256) {\r\n        return totalSupplyAmount;\r\n    }\r\n\r\n    /* Gets the balance of a specified account */\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    /* Transfer the balance from owner's account to another account */\r\n    function transfer(address _to, uint256 _amount) fundSendablePhase onlyPayloadSize(2) returns (bool) {\r\n        /* Check if sender has balance and for overflows */\r\n        if (balances[msg.sender] < _amount || balances[_to].add(_amount) < balances[_to])\r\n            return false;\r\n\r\n        /* Do a check to see if they are new, if so we'll want to add it to our array */\r\n        bool isRecipientNew = balances[_to] < 1;\r\n\r\n        /* Add and subtract new balances */\r\n        balances[msg.sender] = balances[msg.sender].sub(_amount);\r\n        balances[_to] = balances[_to].add(_amount);\r\n\r\n        /* Consolidate arrays if they are new or if sender now has empty balance */\r\n        if (isRecipientNew)\r\n            tokenOwnerAdd(_to);\r\n        if (balances[msg.sender] < 1)\r\n            tokenOwnerRemove(msg.sender);\r\n\r\n        /* Fire notification event */\r\n        Transfer(msg.sender, _to, _amount);\r\n        return true;\r\n    }\r\n\r\n    /* If the specified address is not in our owner list, add them - this can be called by descendents to ensure the database is kept up to date. */\r\n    function tokenOwnerAdd(address _addr) internal {\r\n        /* First check if they already exist */\r\n        uint256 tokenHolderCount = allTokenHolders.length;\r\n        for (uint256 i = 0; i < tokenHolderCount; i++)\r\n            if (allTokenHolders[i] == _addr)\r\n                /* Already found so we can abort now */\r\n                return;\r\n        \r\n        /* They don't seem to exist, so let's add them */\r\n        allTokenHolders.length++;\r\n        allTokenHolders[allTokenHolders.length - 1] = _addr;\r\n    }\r\n\r\n    /* If the specified address is in our owner list, remove them - this can be called by descendents to ensure the database is kept up to date. */\r\n    function tokenOwnerRemove(address _addr) internal {\r\n        /* Find out where in our array they are */\r\n        uint256 tokenHolderCount = allTokenHolders.length;\r\n        uint256 foundIndex = 0;\r\n        bool found = false;\r\n        uint256 i;\r\n        for (i = 0; i < tokenHolderCount; i++)\r\n            if (allTokenHolders[i] == _addr) {\r\n                foundIndex = i;\r\n                found = true;\r\n                break;\r\n            }\r\n        \r\n        /* If we didn't find them just return */\r\n        if (!found)\r\n            return;\r\n        \r\n        /* We now need to shuffle down the array */\r\n        for (i = foundIndex; i < tokenHolderCount - 1; i++)\r\n            allTokenHolders[i] = allTokenHolders[i + 1];\r\n        allTokenHolders.length--;\r\n    }\r\n\r\n    /* Mint new tokens - this can only be done by special callers (i.e. the ICO management) during the ICO phase. */\r\n    function mintTokens(address _address, uint256 _amount) onlyPayloadSize(2) {\r\n        /* Ensure we are the ICO contract calling */\r\n        if (msg.sender != icoContractAddress || !icoPhaseManagement.icoPhase())\r\n            throw;\r\n\r\n        /* Mint the tokens for the new address*/\r\n        bool isNew = balances[_address] == 0;\r\n        totalSupplyAmount = totalSupplyAmount.add(_amount);\r\n        balances[_address] = balances[_address].add(_amount);\r\n        if (isNew)\r\n            tokenOwnerAdd(_address);\r\n        Transfer(0, _address, _amount);\r\n    }\r\n}\r\n\r\ncontract TokenHolderSnapshotter {\r\n    using SafeMath for uint256;\r\n\r\n    /* Map all our our balances for issued tokens */\r\n    mapping (address => uint256) balances;\r\n\r\n    /* Our handle to the SIFT contract. */\r\n    SmartInvestmentFundToken siftContract;\r\n\r\n    /* Defines the admin contract we interface with for credentails. */\r\n    AuthenticationManager authenticationManager;\r\n\r\n    /* List of all token holders */\r\n    address[] allTokenHolders;\r\n\r\n    /* Fired whenever a new snapshot is made */\r\n    event SnapshotTaken();\r\n    event SnapshotUpdated(address holder, uint256 oldBalance, uint256 newBalance, string details);\r\n\r\n    /* This modifier allows a method to only be called by current admins */\r\n    modifier adminOnly {\r\n        if (!authenticationManager.isCurrentAdmin(msg.sender)) throw;\r\n        _;\r\n    }\r\n    /* This modifier allows a method to only be called by account readers */\r\n    modifier accountReaderOnly {\r\n        if (!authenticationManager.isCurrentAccountReader(msg.sender)) throw;\r\n        _;\r\n    }\r\n\r\n    /* Create our contract with references to other contracts as required. */\r\n    function TokenHolderSnapshotter(address _siftContractAddress, address _authenticationManagerAddress) {\r\n        /* Setup access to our other contracts and validate their versions */\r\n        siftContract = SmartInvestmentFundToken(_siftContractAddress);\r\n        if (siftContract.contractVersion() != 500201707171440)\r\n            throw;\r\n\r\n        /* Setup access to our other contracts and validate their versions */\r\n        authenticationManager = AuthenticationManager(_authenticationManagerAddress);\r\n        if (authenticationManager.contractVersion() != 100201707171503)\r\n            throw;\r\n    }\r\n\r\n    /* Gets the contract version for validation */\r\n    function contractVersion() constant returns(uint256) {\r\n        /* Dividend contract identifies as 700YYYYMMDDHHMM */\r\n        return 700201709192119;\r\n    }\r\n\r\n    /* Snapshot to current state of contract*/\r\n    function snapshot() adminOnly {\r\n        // First delete existing holder balances\r\n        uint256 i;\r\n        for (i = 0; i < allTokenHolders.length; i++)\r\n            balances[allTokenHolders[i]] = 0;\r\n\r\n        // Now clone our contract to match\r\n        allTokenHolders.length = siftContract.tokenHolderCount();\r\n        for (i = 0; i < allTokenHolders.length; i++) {\r\n            address addr = siftContract.tokenHolder(i);\r\n            allTokenHolders[i] = addr;\r\n            balances[addr] = siftContract.balanceOf(addr);\r\n        }\r\n\r\n        // Update\r\n        SnapshotTaken();\r\n    }\r\n\r\n    function snapshotUpdate(address _addr, uint256 _newBalance, string _details) adminOnly {\r\n        // Are they already a holder?  If not and no new balance then we're making no change so leave now, or if they are and balance is the same\r\n        uint256 existingBalance = balances[_addr];\r\n        if (existingBalance == _newBalance)\r\n            return;\r\n        \r\n        // So we definitely have a change to make.  If they are not a holder add to our list and update balance.  If they are a holder who maintains balance update balance.  Otherwise set balance to 0 and delete.\r\n        if (existingBalance == 0) {\r\n            // New holder, just add them\r\n            allTokenHolders.length++;\r\n            allTokenHolders[allTokenHolders.length - 1] = _addr;\r\n            balances[_addr] = _newBalance;\r\n        }\r\n        else if (_newBalance > 0) {\r\n            // Existing holder we're updating\r\n            balances[_addr] = _newBalance;\r\n        } else {\r\n            // Existing holder, we're deleting\r\n            balances[_addr] = 0;\r\n\r\n            /* Find out where in our array they are */\r\n            uint256 tokenHolderCount = allTokenHolders.length;\r\n            uint256 foundIndex = 0;\r\n            bool found = false;\r\n            uint256 i;\r\n            for (i = 0; i < tokenHolderCount; i++)\r\n                if (allTokenHolders[i] == _addr) {\r\n                    foundIndex = i;\r\n                    found = true;\r\n                    break;\r\n                }\r\n            \r\n            /* We now need to shuffle down the array */\r\n            if (found) {\r\n                for (i = foundIndex; i < tokenHolderCount - 1; i++)\r\n                    allTokenHolders[i] = allTokenHolders[i + 1];\r\n                allTokenHolders.length--;\r\n            }\r\n        }\r\n\r\n        // Audit it\r\n        SnapshotUpdated(_addr, existingBalance, _newBalance, _details);\r\n    }\r\n\r\n    /* Gets the balance of a specified account */\r\n    function balanceOf(address addr) accountReaderOnly constant returns (uint256) {\r\n        return balances[addr];\r\n    }\r\n\r\n    /* Returns the total number of holders of this currency. */\r\n    function tokenHolderCount() accountReaderOnly constant returns (uint256) {\r\n        return allTokenHolders.length;\r\n    }\r\n\r\n    /* Gets the token holder at the specified index. */\r\n    function tokenHolder(uint256 _index) accountReaderOnly constant returns (address) {\r\n        return allTokenHolders[_index];\r\n    }\r\n \r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_newBalance\",\"type\":\"uint256\"},{\"name\":\"_details\",\"type\":\"string\"}],\"name\":\"snapshotUpdate\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenHolder\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"snapshot\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractVersion\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenHolderCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_siftContractAddress\",\"type\":\"address\"},{\"name\":\"_authenticationManagerAddress\",\"type\":\"address\"}],\"payable\":false,\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"SnapshotTaken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"oldBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"details\",\"type\":\"string\"}],\"name\":\"SnapshotUpdated\",\"type\":\"event\"}]","ContractName":"TokenHolderSnapshotter","CompilerVersion":"v0.4.11+commit.68ef5810","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000008a187D5285d316bcBC9ADafc08b51d70a0d8e000000000000000000000000000c6a3746aa3fec176559f0865fd5240159402a81f","Library":"","SwarmSource":"bzzr://ffc3a16276f0981700544364a914773b3836090a266ea5aedf83cab1d60e3d8e"}]}