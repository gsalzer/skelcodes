{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.10;\r\n\r\n// Elixir (ELIX)\r\n\r\ncontract elixir {\r\n    \r\nstring public name; \r\nstring public symbol; \r\nuint8 public decimals;\r\nuint256 public totalSupply;\r\n  \r\n// Balances for each account\r\nmapping(address => uint256) balances;\r\n\r\nbool public balanceImportsComplete;\r\n\r\naddress exorAddress;\r\naddress devAddress;\r\n\r\n// Events\r\nevent Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\nevent Transfer(address indexed from, address indexed to, uint256 value);\r\n  \r\n// Owner of account approves the transfer of an amount to another account\r\nmapping(address => mapping (address => uint256)) allowed;\r\n  \r\nfunction elixir() {\r\n    name = \"elixir\";\r\n    symbol = \"ELIX\";\r\n    decimals = 18;\r\n    devAddress=0x85196Da9269B24bDf5FfD2624ABB387fcA05382B;\r\n    exorAddress=0x898bF39cd67658bd63577fB00A2A3571dAecbC53;\r\n}\r\n\r\nfunction balanceOf(address _owner) constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n}\r\n\r\n// Transfer the balance from owner's account to another account\r\nfunction transfer(address _to, uint256 _amount) returns (bool success) {\r\n    if (balances[msg.sender] >= _amount \r\n        && _amount > 0\r\n        && balances[_to] + _amount > balances[_to]) {\r\n        balances[msg.sender] -= _amount;\r\n        balances[_to] += _amount;\r\n        Transfer(msg.sender, _to, _amount); \r\n        return true;\r\n    } else {\r\n        return false;\r\n    }\r\n}\r\n\r\nfunction createAmountFromEXORForAddress(uint256 amount,address addressProducing) public {\r\n    if (msg.sender==exorAddress) {\r\n        //extra auth\r\n        elixor EXORContract=elixor(exorAddress);\r\n        if (EXORContract.returnAmountOfELIXAddressCanProduce(addressProducing)==amount){\r\n            // They are burning EXOR to make ELIX\r\n            balances[addressProducing]+=amount;\r\n            totalSupply+=amount;\r\n        }\r\n    }\r\n}\r\n\r\nfunction transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _amount\r\n) returns (bool success) {\r\n    if (balances[_from] >= _amount\r\n        && allowed[_from][msg.sender] >= _amount\r\n        && _amount > 0\r\n        && balances[_to] + _amount > balances[_to]) {\r\n        balances[_from] -= _amount;\r\n        allowed[_from][msg.sender] -= _amount;\r\n        balances[_to] += _amount;\r\n        return true;\r\n    } else {\r\n        return false;\r\n    }\r\n}\r\n\r\n// Locks up all changes to balances\r\nfunction lockBalanceChanges() {\r\n    if (tx.origin==devAddress) { // Dev address\r\n       balanceImportsComplete=true;\r\n   }\r\n}\r\n\r\n// Devs will upload balances snapshot of blockchain via this function.\r\nfunction importAmountForAddresses(uint256[] amounts,address[] addressesToAddTo) public {\r\n   if (tx.origin==devAddress) { // Dev address\r\n       if (!balanceImportsComplete)  {\r\n           for (uint256 i=0;i<addressesToAddTo.length;i++)  {\r\n                address addressToAddTo=addressesToAddTo[i];\r\n                uint256 amount=amounts[i];\r\n                balances[addressToAddTo]+=amount;\r\n                totalSupply+=amount;\r\n           }\r\n       }\r\n   }\r\n}\r\n\r\n// Extra balance removal in case any issues arise. Do not anticipate using this function.\r\nfunction removeAmountForAddresses(uint256[] amounts,address[] addressesToRemoveFrom) public {\r\n   if (tx.origin==devAddress) { // Dev address\r\n       if (!balanceImportsComplete)  {\r\n           for (uint256 i=0;i<addressesToRemoveFrom.length;i++)  {\r\n                address addressToRemoveFrom=addressesToRemoveFrom[i];\r\n                uint256 amount=amounts[i];\r\n                balances[addressToRemoveFrom]-=amount;\r\n                totalSupply-=amount;\r\n           }\r\n       }\r\n   }\r\n}\r\n\r\n// Manual override for total supply in case any issues arise. Do not anticipate using this function.\r\nfunction removeFromTotalSupply(uint256 amount) public {\r\n   if (tx.origin==devAddress) { // Dev address\r\n       if (!balanceImportsComplete)  {\r\n            totalSupply-=amount;\r\n       }\r\n   }\r\n}\r\n\r\n\r\n// Allow _spender to withdraw from your account, multiple times, up to the _value amount.\r\n// If this function is called again it overwrites the current allowance with _value.\r\nfunction approve(address _spender, uint256 _amount) returns (bool success) {\r\n    allowed[msg.sender][_spender] = _amount;\r\n    Approval(msg.sender, _spender, _amount);\r\n    return true;\r\n}\r\n}\r\n\r\ncontract elixor {\r\n    function returnAmountOfELIXAddressCanProduce(address producingAddress) public returns(uint256);\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"addressProducing\",\"type\":\"address\"}],\"name\":\"createAmountFromEXORForAddress\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"name\":\"addressesToAddTo\",\"type\":\"address[]\"}],\"name\":\"importAmountForAddresses\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"name\":\"addressesToRemoveFrom\",\"type\":\"address[]\"}],\"name\":\"removeAmountForAddresses\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"lockBalanceChanges\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"removeFromTotalSupply\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balanceImportsComplete\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"elixir","CompilerVersion":"v0.4.15+commit.bbb8e64f","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://833b70f13b3be5acfe1e440f4a11dd4a9b7751ad3e1cd05c199cd59c003fa095"}]}