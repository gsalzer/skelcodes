{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.15;\r\n\r\ncontract Controllable {\r\n  address public controller;\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender account.\r\n   */\r\n  function Controllable() public {\r\n    controller = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyController() {\r\n    require(msg.sender == controller);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newController The address to transfer ownership to.\r\n   */\r\n  function transferControl(address newController) public onlyController {\r\n    if (newController != address(0)) {\r\n      controller = newController;\r\n    }\r\n  }\r\n\r\n}\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    if (newOwner != address(0)) {\r\n      owner = newOwner;\r\n    }\r\n  }\r\n\r\n}\r\n\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n  function Pausable() public {}\r\n\r\n  /**\r\n   * @dev modifier to allow actions only when the contract IS paused\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev modifier to allow actions only when the contract IS NOT paused\r\n   */\r\n  modifier whenPaused {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() public onlyOwner whenNotPaused returns (bool) {\r\n    paused = true;\r\n    Pause();\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() public onlyOwner whenPaused returns (bool) {\r\n    paused = false;\r\n    Unpause();\r\n    return true;\r\n  }\r\n}\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract TokenSale is Pausable {\r\n\r\n  using SafeMath for uint256;\r\n\r\n  ProofTokenInterface public proofToken;\r\n  uint256 public totalWeiRaised;\r\n  uint256 public tokensMinted;\r\n  uint256 public totalSupply;\r\n  uint256 public contributors;\r\n  uint256 public decimalsMultiplier;\r\n  uint256 public startTime;\r\n  uint256 public endTime;\r\n  uint256 public remainingTokens;\r\n  uint256 public allocatedTokens;\r\n\r\n  bool public finalized;\r\n  bool public proofTokensAllocated;\r\n  address public proofMultiSig = 0x99892Ac6DA1b3851167Cb959fE945926bca89f09;\r\n\r\n  uint256 public constant BASE_PRICE_IN_WEI = 88000000000000000;\r\n  uint256 public constant PUBLIC_TOKENS = 1181031 * (10 ** 18);\r\n  uint256 public constant TOTAL_PRESALE_TOKENS = 112386712924725508802400;\r\n  uint256 public constant TOKENS_ALLOCATED_TO_PROOF = 1181031 * (10 ** 18);\r\n\r\n\r\n\r\n  uint256 public tokenCap = PUBLIC_TOKENS - TOTAL_PRESALE_TOKENS;\r\n  uint256 public cap = tokenCap / (10 ** 18);\r\n  uint256 public weiCap = cap * BASE_PRICE_IN_WEI;\r\n\r\n  uint256 public firstDiscountPrice = (BASE_PRICE_IN_WEI * 85) / 100;\r\n  uint256 public secondDiscountPrice = (BASE_PRICE_IN_WEI * 90) / 100;\r\n  uint256 public thirdDiscountPrice = (BASE_PRICE_IN_WEI * 95) / 100;\r\n\r\n  uint256 public firstDiscountCap = (weiCap * 5) / 100;\r\n  uint256 public secondDiscountCap = (weiCap * 10) / 100;\r\n  uint256 public thirdDiscountCap = (weiCap * 20) / 100;\r\n\r\n  bool public started = false;\r\n\r\n  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n  event NewClonedToken(address indexed _cloneToken);\r\n  event OnTransfer(address _from, address _to, uint _amount);\r\n  event OnApprove(address _owner, address _spender, uint _amount);\r\n  event LogInt(string _name, uint256 _value);\r\n  event Finalized();\r\n\r\n  function TokenSale(address _tokenAddress, uint256 _startTime, uint256 _endTime) public {\r\n    require(_tokenAddress != 0x0);\r\n    require(_startTime > 0);\r\n    require(_endTime > _startTime);\r\n\r\n    startTime = _startTime;\r\n    endTime = _endTime;\r\n    proofToken = ProofTokenInterface(_tokenAddress);\r\n\r\n    decimalsMultiplier = (10 ** 18);\r\n  }\r\n\r\n\r\n  /**\r\n   * High level token purchase function\r\n   */\r\n  function() public payable {\r\n    buyTokens(msg.sender);\r\n  }\r\n\r\n  /**\r\n   * Low level token purchase function\r\n   * @param _beneficiary will receive the tokens.\r\n   */\r\n  function buyTokens(address _beneficiary) public payable whenNotPaused whenNotFinalized {\r\n    require(_beneficiary != 0x0);\r\n    require(validPurchase());\r\n\r\n    uint256 weiAmount = msg.value;\r\n    uint256 priceInWei = getPriceInWei();\r\n    totalWeiRaised = totalWeiRaised.add(weiAmount);\r\n\r\n    uint256 tokens = weiAmount.mul(decimalsMultiplier).div(priceInWei);\r\n    tokensMinted = tokensMinted.add(tokens);\r\n    require(tokensMinted < tokenCap);\r\n\r\n    contributors = contributors.add(1);\r\n\r\n    proofToken.mint(_beneficiary, tokens);\r\n    TokenPurchase(msg.sender, _beneficiary, weiAmount, tokens);\r\n    forwardFunds();\r\n  }\r\n\r\n\r\n  /**\r\n   * Get the price in wei for current premium\r\n   * @return price {uint256}\r\n   */\r\n  function getPriceInWei() constant public returns (uint256) {\r\n\r\n    uint256 price;\r\n\r\n    if (totalWeiRaised < firstDiscountCap) {\r\n      price = firstDiscountPrice;\r\n    } else if (totalWeiRaised < secondDiscountCap) {\r\n      price = secondDiscountPrice;\r\n    } else if (totalWeiRaised < thirdDiscountCap) {\r\n      price = thirdDiscountPrice;\r\n    } else {\r\n      price = BASE_PRICE_IN_WEI;\r\n    }\r\n\r\n    return price;\r\n  }\r\n\r\n  /**\r\n  * Forwards funds to the tokensale wallet\r\n  */\r\n  function forwardFunds() internal {\r\n    proofMultiSig.transfer(msg.value);\r\n  }\r\n\r\n\r\n  /**\r\n  * Validates the purchase (period, minimum amount, within cap)\r\n  * @return {bool} valid\r\n  */\r\n  function validPurchase() internal constant returns (bool) {\r\n    uint256 current = now;\r\n    bool presaleStarted = (current >= startTime || started);\r\n    bool presaleNotEnded = current <= endTime;\r\n    bool nonZeroPurchase = msg.value != 0;\r\n    return nonZeroPurchase && presaleStarted && presaleNotEnded;\r\n  }\r\n\r\n  /**\r\n  * Returns the total Proof token supply\r\n  * @return totalSupply {uint256} Proof Token Total Supply\r\n  */\r\n  function totalSupply() public constant returns (uint256) {\r\n    return proofToken.totalSupply();\r\n  }\r\n\r\n  /**\r\n  * Returns token holder Proof Token balance\r\n  * @param _owner {address} Token holder address\r\n  * @return balance {uint256} Corresponding token holder balance\r\n  */\r\n  function balanceOf(address _owner) public constant returns (uint256) {\r\n    return proofToken.balanceOf(_owner);\r\n  }\r\n\r\n  /**\r\n  * Change the Proof Token controller\r\n  * @param _newController {address} New Proof Token controller\r\n  */\r\n  function changeController(address _newController) onlyOwner public returns (bool) {\r\n    proofToken.transferControl(_newController);\r\n    return true;\r\n  }\r\n\r\n\r\n  function enableTransfers() public returns (bool) {\r\n    if (now < endTime) {\r\n      require(msg.sender == owner);\r\n    }\r\n    proofToken.enableTransfers(true);\r\n    return true;\r\n  }\r\n\r\n  function lockTransfers() public onlyOwner returns (bool) {\r\n    require(now < endTime);\r\n    proofToken.enableTransfers(false);\r\n    return true;\r\n  }\r\n\r\n  function enableMasterTransfers() public onlyOwner returns (bool) {\r\n    proofToken.enableMasterTransfers(true);\r\n    return true;\r\n  }\r\n\r\n  function lockMasterTransfers() public onlyOwner returns (bool) {\r\n    proofToken.enableMasterTransfers(false);\r\n    return true;\r\n  }\r\n\r\n  function forceStart() public onlyOwner returns (bool) {\r\n    started = true;\r\n    return true;\r\n  }\r\n\r\n  function allocateProofTokens() public onlyOwner whenNotFinalized returns (bool) {\r\n    require(!proofTokensAllocated);\r\n    proofToken.mint(proofMultiSig, TOKENS_ALLOCATED_TO_PROOF);\r\n    proofTokensAllocated = true;\r\n    return true;\r\n  }\r\n\r\n  function finalize() public onlyOwner returns (bool) {\r\n    require(paused);\r\n    require(proofTokensAllocated);\r\n\r\n    proofToken.finishMinting();\r\n    proofToken.enableTransfers(true);\r\n    Finalized();\r\n\r\n    finalized = true;\r\n    return true;\r\n  }\r\n\r\n\r\n  function isContract(address _addr) constant internal returns (bool) {\r\n    uint size;\r\n    if (_addr == 0)\r\n      return false;\r\n    assembly {\r\n        size := extcodesize(_addr)\r\n    }\r\n    return size>0;\r\n  }\r\n\r\n  modifier whenNotFinalized() {\r\n    require(!finalized);\r\n    _;\r\n  }\r\n\r\n}\r\n\r\ncontract ProofTokenInterface is Controllable {\r\n\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n  event ClaimedTokens(address indexed _token, address indexed _owner, uint _amount);\r\n  event NewCloneToken(address indexed _cloneToken, uint _snapshotBlock);\r\n  event Approval(address indexed _owner, address indexed _spender, uint256 _amount);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n  function totalSupply() public constant returns (uint);\r\n  function totalSupplyAt(uint _blockNumber) public constant returns(uint);\r\n  function balanceOf(address _owner) public constant returns (uint256 balance);\r\n  function balanceOfAt(address _owner, uint _blockNumber) public constant returns (uint);\r\n  function transfer(address _to, uint256 _amount) public returns (bool success);\r\n  function transferFrom(address _from, address _to, uint256 _amount) public returns (bool success);\r\n  function approve(address _spender, uint256 _amount) public returns (bool success);\r\n  function approveAndCall(address _spender, uint256 _amount, bytes _extraData) public returns (bool success);\r\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\r\n  function mint(address _owner, uint _amount) public returns (bool);\r\n  function importPresaleBalances(address[] _addresses, uint256[] _balances, address _presaleAddress) public returns (bool);\r\n  function lockPresaleBalances() public returns (bool);\r\n  function finishMinting() public returns (bool);\r\n  function enableTransfers(bool _value) public;\r\n  function enableMasterTransfers(bool _value) public;\r\n  function createCloneToken(uint _snapshotBlock, string _cloneTokenName, string _cloneTokenSymbol) public returns (address);\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"allocatedTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BASE_PRICE_IN_WEI\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"proofToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"started\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"enableMasterTransfers\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"lockMasterTransfers\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"firstDiscountPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newController\",\"type\":\"address\"}],\"name\":\"changeController\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"secondDiscountPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"firstDiscountCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"thirdDiscountPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalWeiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKENS_ALLOCATED_TO_PROOF\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensMinted\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contributors\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"proofTokensAllocated\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOTAL_PRESALE_TOKENS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"lockTransfers\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"proofMultiSig\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"enableTransfers\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"thirdDiscountCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"finalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimalsMultiplier\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"allocateProofTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"remainingTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"secondDiscountCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PUBLIC_TOKENS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPriceInWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"forceStart\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_startTime\",\"type\":\"uint256\"},{\"name\":\"_endTime\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_cloneToken\",\"type\":\"address\"}],\"name\":\"NewClonedToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"OnTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"OnApprove\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_name\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"LogInt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Finalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"}]","ContractName":"TokenSale","CompilerVersion":"v0.4.15+commit.bbb8e64f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000c5cea8292e514405967d958c2325106f2f48da770000000000000000000000000000000000000000000000000000000059f9c550000000000000000000000000000000000000000000000000000000005a215250","Library":"","SwarmSource":"bzzr://98410b02133c6cc12aab3cc3b95dd88baa1dcbb285aebf02e0b552a3cab1dbd8"}]}