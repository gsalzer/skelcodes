{"status":"1","message":"OK","result":[{"SourceCode":"//Copyright Global Invest Place Ltd.\r\npragma solidity ^0.4.13;\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\ninterface GlobalToken {\r\n    function balanceOf(address _owner) constant returns (uint256 balance);\r\n    function transfer(address _to, uint256 _value) returns (bool success);\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\ncontract Owned {\r\n    address public owner;\r\n    \r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    function Owned() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner) ;\r\n        _;\r\n    }\r\n\t\r\n\tmodifier onlyPayloadSize(uint numwords) {\r\n        assert(msg.data.length == numwords * 32 + 4);\r\n\t\t_;\r\n\t}\r\n\r\n    function transferOwnership(address newOwner) onlyOwner {\r\n        owner = newOwner;\r\n        OwnershipTransferred(owner, newOwner);\r\n    }\r\n  \r\n  function contractVersion() constant returns(uint256) {\r\n        /*  contractVersion identifies as 100YYYYMMDDHHMM */\r\n        return 100201712010000;\r\n    }\r\n}\r\n\r\n// GlobalToken Interface\r\ncontract GlobalCryptoFund is Owned, GlobalToken {\r\n    \r\n    using SafeMath for uint256;\r\n    \r\n    /* Public variables of the token */\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals;\r\n    uint256 public totalSupply;\r\n\t\r\n\taddress public minter;\r\n    \r\n    /* This creates an array with all balances */\r\n    mapping (address => uint256) public balanceOf;\r\n    \r\n\tmodifier onlyMinter {\r\n\t\trequire(msg.sender == minter);\r\n\t\t_;\r\n\t}\r\n\t\r\n\tfunction setMinter(address _addressMinter) onlyOwner {\r\n\t\tminter = _addressMinter;\r\n\t}\r\n    \r\n    /* Initializes contract with initial supply tokens to the creator of the contract */\r\n    function GlobalCryptoFund() {\r\n\t\tname = \"GlobalCryptoFund\";                    \t\t\t\t\t\t\t\t// Set the name for display purposes\r\n        symbol = \"GCF\";                \t\t\t\t\t\t\t\t\t\t\t\t// Set the symbol for display purposes\r\n        decimals = 18;                          \t\t\t\t\t\t\t\t\t// Amount of decimals for display purposes\r\n        totalSupply = 0;                \t\t\t\t\t\t\t\t\t// Update total supply\r\n        balanceOf[msg.sender] = totalSupply;       \t\t\t\t\t\t\t\t\t// Give the creator all initial tokens\r\n    }\r\n    \r\n    function balanceOf(address _owner) constant returns (uint256 balance){\r\n        return balanceOf[_owner];\r\n    }\r\n    \r\n    /* Internal transfer, only can be called by this contract */\r\n    function _transfer(address _from, address _to, uint256 _value) internal {\r\n        require (_to != 0x0);                               \t\t\t\t\t\t// Prevent transfer to 0x0 address. Use burn() instead\r\n        require (balanceOf[_from] >= _value);                \t\t\t\t\t\t// Check if the sender has enough\r\n        require (balanceOf[_to].add(_value) >= balanceOf[_to]); \t\t\t\t\t\t// Check for overflows\r\n        require(_to != address(this));\r\n        balanceOf[_from] = balanceOf[_from].sub(_value);                         \t// Subtract from the sender\r\n        balanceOf[_to] = balanceOf[_to].add(_value);                           \t\t// Add the same to the recipient\r\n        Transfer(_from, _to, _value);\r\n    }\r\n    \r\n    function transfer(address _to, uint256 _value) onlyPayloadSize(2) returns (bool) {\r\n        _transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n    \r\n\tevent Mint(address indexed from, uint256 value);\r\n    function mintToken(address target, uint256 mintedAmount) onlyMinter {\r\n        balanceOf[target] = balanceOf[target].add(mintedAmount);\r\n        totalSupply = totalSupply.add(mintedAmount);\r\n        Transfer(0, this, mintedAmount);\r\n        Transfer(this, target, mintedAmount);\r\n        Mint(target, mintedAmount);\r\n    }\r\n    \r\n\tevent Burn(address indexed from, uint256 value);\r\n    function burn(uint256 _value) onlyMinter returns (bool success) {\r\n        require (balanceOf[msg.sender] >= _value);            \t\t\t\t\t// Check if the sender has enough\r\n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);              // Subtract from the sender\r\n        totalSupply = totalSupply.sub(_value);                                \t// Updates totalSupply\r\n        Burn(msg.sender, _value);\r\n        return true;\r\n    }  \r\n\t\r\n\tfunction kill() onlyOwner {\r\n        selfdestruct(owner);\r\n    }\r\n    \r\n    function contractVersion() constant returns(uint256) {\r\n        /*  contractVersion identifies as 200YYYYMMDDHHMM */\r\n        return 200201712010000;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minter\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"mintedAmount\",\"type\":\"uint256\"}],\"name\":\"mintToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractVersion\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addressMinter\",\"type\":\"address\"}],\"name\":\"setMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"GlobalCryptoFund","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://5a2ecbfaf9392762029580ddf40a25bbbf8df0430b2f8c71b832c6ed378aacf7"}]}