{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\ncontract ERC20Interface {\r\n    // Get the total token supply\r\n    function totalSupply() constant returns (uint256);\r\n \r\n    // Get the account balance of another account with address _owner\r\n    function balanceOf(address _owner) constant returns (uint256 balance);\r\n \r\n    // Send _value amount of tokens to address _to\r\n    function transfer(address _to, uint256 _value) returns (bool success);\r\n \r\n    // Send _value amount of tokens from address _from to address _to\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\r\n \r\n    // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\r\n    // If this function is called again it overwrites the current allowance with _value.\r\n    // this function is required for some DEX functionality\r\n    function approve(address _spender, uint256 _value) returns (bool success);\r\n \r\n    // Returns the amount which _spender is still allowed to withdraw from _owner\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\r\n \r\n    // Triggered when tokens are transferred.\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n \r\n    // Triggered whenever approve(address _spender, uint256 _value) is called.\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n \r\ncontract RoseCoin is ERC20Interface {\r\n    uint8 public constant decimals = 5;\r\n    string public constant symbol = \"RSC\";\r\n    string public constant name = \"RoseCoin\";\r\n\r\n    uint public _level = 0;\r\n    bool public _selling = true;\r\n    uint public _totalSupply = 10 ** 14;\r\n    uint public _originalBuyPrice = 10 ** 10;\r\n    uint public _minimumBuyAmount = 10 ** 17;\r\n   \r\n    // Owner of this contract\r\n    address public owner;\r\n \r\n    // Balances for each account\r\n    mapping(address => uint256) balances;\r\n \r\n    // Owner of account approves the transfer of an amount to another account\r\n    mapping(address => mapping (address => uint256)) allowed;\r\n    \r\n    uint public _icoSupply = _totalSupply;\r\n    uint[4] public ratio = [12, 10, 10, 13];\r\n    uint[4] public threshold = [95000000000000, 85000000000000, 0, 80000000000000];\r\n\r\n    // Functions with this modifier can only be executed by the owner\r\n    modifier onlyOwner() {\r\n        if (msg.sender != owner) {\r\n            revert();\r\n        }\r\n        _;\r\n    }\r\n\r\n    modifier onlyNotOwner() {\r\n        if (msg.sender == owner) {\r\n            revert();\r\n        }\r\n        _;\r\n    }\r\n\r\n    modifier thresholdAll() {\r\n        if (!_selling || msg.value < _minimumBuyAmount || _icoSupply <= threshold[3]) { //\r\n            revert();\r\n        }\r\n        _;\r\n    }\r\n \r\n    // Constructor\r\n    function RoseCoin() {\r\n        owner = msg.sender;\r\n        balances[owner] = _totalSupply;\r\n    }\r\n \r\n    function totalSupply() constant returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n \r\n    // What is the balance of a particular account?\r\n    function balanceOf(address _owner) constant returns (uint256) {\r\n        return balances[_owner];\r\n    }\r\n \r\n    // Transfer the balance from sender's account to another account\r\n    function transfer(address _to, uint256 _amount) returns (bool) {\r\n        if (balances[msg.sender] >= _amount\r\n            && _amount > 0\r\n            && balances[_to] + _amount > balances[_to]) {\r\n            balances[msg.sender] -= _amount;\r\n            balances[_to] += _amount;\r\n            Transfer(msg.sender, _to, _amount);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n \r\n    // Send _value amount of tokens from address _from to address _to\r\n    // The transferFrom method is used for a withdraw workflow, allowing contracts to send\r\n    // tokens on your behalf, for example to \"deposit\" to a contract address and/or to charge\r\n    // fees in sub-currencies; the command should fail unless the _from account has\r\n    // deliberately authorized the sender of the message via some mechanism; we propose\r\n    // these standardized APIs for approval:\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _amount\r\n    ) returns (bool) {\r\n        if (balances[_from] >= _amount\r\n            && allowed[_from][msg.sender] >= _amount\r\n            && _amount > 0\r\n            && balances[_to] + _amount > balances[_to]) {\r\n            balances[_from] -= _amount;\r\n            allowed[_from][msg.sender] -= _amount;\r\n            balances[_to] += _amount;\r\n            Transfer(_from, _to, _amount);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n \r\n    // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\r\n    // If this function is called again it overwrites the current allowance with _value.\r\n    function approve(address _spender, uint256 _amount) returns (bool) {\r\n        allowed[msg.sender][_spender] = _amount;\r\n        Approval(msg.sender, _spender, _amount);\r\n        return true;\r\n    }\r\n \r\n    function allowance(address _owner, address _spender) constant returns (uint256) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n\r\n    function toggleSale() onlyOwner {\r\n        _selling = !_selling;\r\n    }\r\n\r\n    function setBuyPrice(uint newBuyPrice) onlyOwner {\r\n        _originalBuyPrice = newBuyPrice;\r\n    }\r\n    \r\n    // Buy RoseCoin by sending Ether    \r\n    function buy() payable onlyNotOwner thresholdAll returns (uint256 amount) {\r\n        amount = 0;\r\n        uint remain = msg.value / _originalBuyPrice;\r\n        \r\n        while (remain > 0 && _level < 3) { //\r\n            remain = remain * ratio[_level] / ratio[_level+1];\r\n            if (_icoSupply <= remain + threshold[_level]) {\r\n                remain = (remain + threshold[_level] - _icoSupply) * ratio[_level+1] / ratio[_level];\r\n                amount += _icoSupply - threshold[_level];\r\n                _icoSupply = threshold[_level];\r\n                _level += 1;\r\n            }\r\n            else {\r\n                _icoSupply -= remain;\r\n                amount += remain;\r\n                remain = 0;\r\n                break;\r\n            }\r\n        }\r\n        \r\n        if (balances[owner] < amount)\r\n            revert();\r\n        \r\n        if (remain > 0) {\r\n            remain *= _originalBuyPrice;\r\n            msg.sender.transfer(remain);\r\n        }\r\n        \r\n        balances[owner] -= amount;\r\n        balances[msg.sender] += amount;\r\n        owner.transfer(msg.value - remain);\r\n        Transfer(owner, msg.sender, amount);\r\n        return amount;\r\n    }\r\n    \r\n    // Owner withdraws Ether in contract\r\n    function withdraw() onlyOwner returns (bool) {\r\n        return owner.send(this.balance);\r\n    }\r\n}\r\n\r\n/// @title Multisignature wallet - Allows multiple parties to agree on transactions before execution.\r\n/// @author Stefan George - <stefan.george@consensys.net>\r\ncontract MultiSigWallet {\r\n\r\n    event Confirmation(address sender, bytes32 transactionHash);\r\n    event Revocation(address sender, bytes32 transactionHash);\r\n    event Submission(bytes32 transactionHash);\r\n    event Execution(bytes32 transactionHash);\r\n    event Deposit(address sender, uint value);\r\n    event OwnerAddition(address owner);\r\n    event OwnerRemoval(address owner);\r\n    event RequiredUpdate(uint required);\r\n    event CoinCreation(address coin);\r\n\r\n    mapping (bytes32 => Transaction) public transactions;\r\n    mapping (bytes32 => mapping (address => bool)) public confirmations;\r\n    mapping (address => bool) public isOwner;\r\n    address[] owners;\r\n    bytes32[] transactionList;\r\n    uint public required;\r\n\r\n    struct Transaction {\r\n        address destination;\r\n        uint value;\r\n        bytes data;\r\n        uint nonce;\r\n        bool executed;\r\n    }\r\n\r\n    modifier onlyWallet() {\r\n        if (msg.sender != address(this))\r\n            revert();\r\n        _;\r\n    }\r\n\r\n    modifier signaturesFromOwners(bytes32 transactionHash, uint8[] v, bytes32[] rs) {\r\n        for (uint i=0; i<v.length; i++)\r\n            if (!isOwner[ecrecover(transactionHash, v[i], rs[i], rs[v.length + i])])\r\n                revert();\r\n        _;\r\n    }\r\n\r\n    modifier ownerDoesNotExist(address owner) {\r\n        if (isOwner[owner])\r\n            revert();\r\n        _;\r\n    }\r\n\r\n    modifier ownerExists(address owner) {\r\n        if (!isOwner[owner])\r\n            revert();\r\n        _;\r\n    }\r\n\r\n    modifier confirmed(bytes32 transactionHash, address owner) {\r\n        if (!confirmations[transactionHash][owner])\r\n            revert();\r\n        _;\r\n    }\r\n\r\n    modifier notConfirmed(bytes32 transactionHash, address owner) {\r\n        if (confirmations[transactionHash][owner])\r\n            revert();\r\n        _;\r\n    }\r\n\r\n    modifier notExecuted(bytes32 transactionHash) {\r\n        if (transactions[transactionHash].executed)\r\n            revert();\r\n        _;\r\n    }\r\n\r\n    modifier notNull(address destination) {\r\n        if (destination == 0)\r\n            revert();\r\n        _;\r\n    }\r\n\r\n    modifier validRequired(uint _ownerCount, uint _required) {\r\n        if (   _required > _ownerCount\r\n            || _required == 0\r\n            || _ownerCount == 0)\r\n            revert();\r\n        _;\r\n    }\r\n\r\n    function addOwner(address owner)\r\n        external\r\n        onlyWallet\r\n        ownerDoesNotExist(owner)\r\n    {\r\n        isOwner[owner] = true;\r\n        owners.push(owner);\r\n        OwnerAddition(owner);\r\n    }\r\n\r\n    function removeOwner(address owner)\r\n        external\r\n        onlyWallet\r\n        ownerExists(owner)\r\n    {\r\n        isOwner[owner] = false;\r\n        for (uint i=0; i<owners.length - 1; i++)\r\n            if (owners[i] == owner) {\r\n                owners[i] = owners[owners.length - 1];\r\n                break;\r\n            }\r\n        owners.length -= 1;\r\n        if (required > owners.length)\r\n            updateRequired(owners.length);\r\n        OwnerRemoval(owner);\r\n    }\r\n\r\n    function updateRequired(uint _required)\r\n        public\r\n        onlyWallet\r\n        validRequired(owners.length, _required)\r\n    {\r\n        required = _required;\r\n        RequiredUpdate(_required);\r\n    }\r\n\r\n    function addTransaction(address destination, uint value, bytes data, uint nonce)\r\n        private\r\n        notNull(destination)\r\n        returns (bytes32 transactionHash)\r\n    {\r\n        transactionHash = sha3(destination, value, data, nonce);\r\n        if (transactions[transactionHash].destination == 0) {\r\n            transactions[transactionHash] = Transaction({\r\n                destination: destination,\r\n                value: value,\r\n                data: data,\r\n                nonce: nonce,\r\n                executed: false\r\n            });\r\n            transactionList.push(transactionHash);\r\n            Submission(transactionHash);\r\n        }\r\n    }\r\n\r\n    function submitTransaction(address destination, uint value, bytes data, uint nonce)\r\n        external\r\n        ownerExists(msg.sender)\r\n        returns (bytes32 transactionHash)\r\n    {\r\n        transactionHash = addTransaction(destination, value, data, nonce);\r\n        confirmTransaction(transactionHash);\r\n    }\r\n\r\n    function submitTransactionWithSignatures(address destination, uint value, bytes data, uint nonce, uint8[] v, bytes32[] rs)\r\n        external\r\n        ownerExists(msg.sender)\r\n        returns (bytes32 transactionHash)\r\n    {\r\n        transactionHash = addTransaction(destination, value, data, nonce);\r\n        confirmTransactionWithSignatures(transactionHash, v, rs);\r\n    }\r\n\r\n    function addConfirmation(bytes32 transactionHash, address owner)\r\n        private\r\n        notConfirmed(transactionHash, owner)\r\n    {\r\n        confirmations[transactionHash][owner] = true;\r\n        Confirmation(owner, transactionHash);\r\n    }\r\n\r\n    function confirmTransaction(bytes32 transactionHash)\r\n        public\r\n        ownerExists(msg.sender)\r\n    {\r\n        addConfirmation(transactionHash, msg.sender);\r\n        executeTransaction(transactionHash);\r\n    }\r\n\r\n    function confirmTransactionWithSignatures(bytes32 transactionHash, uint8[] v, bytes32[] rs)\r\n        public\r\n        signaturesFromOwners(transactionHash, v, rs)\r\n    {\r\n        for (uint i=0; i<v.length; i++)\r\n            addConfirmation(transactionHash, ecrecover(transactionHash, v[i], rs[i], rs[i + v.length]));\r\n        executeTransaction(transactionHash);\r\n    }\r\n\r\n    function executeTransaction(bytes32 transactionHash)\r\n        public\r\n        notExecuted(transactionHash)\r\n    {\r\n        if (isConfirmed(transactionHash)) {\r\n            Transaction storage txn = transactions[transactionHash]; //\r\n            txn.executed = true;\r\n            if (!txn.destination.call.value(txn.value)(txn.data))\r\n                revert();\r\n            Execution(transactionHash);\r\n        }\r\n    }\r\n\r\n    function revokeConfirmation(bytes32 transactionHash)\r\n        external\r\n        ownerExists(msg.sender)\r\n        confirmed(transactionHash, msg.sender)\r\n        notExecuted(transactionHash)\r\n    {\r\n        confirmations[transactionHash][msg.sender] = false;\r\n        Revocation(msg.sender, transactionHash);\r\n    }\r\n\r\n    function MultiSigWallet(address[] _owners, uint _required)\r\n        validRequired(_owners.length, _required)\r\n    {\r\n        for (uint i=0; i<_owners.length; i++)\r\n            isOwner[_owners[i]] = true;\r\n        owners = _owners;\r\n        required = _required;\r\n    }\r\n\r\n    function()\r\n        payable\r\n    {\r\n        if (msg.value > 0)\r\n            Deposit(msg.sender, msg.value);\r\n    }\r\n\r\n    function isConfirmed(bytes32 transactionHash)\r\n        public\r\n        constant\r\n        returns (bool)\r\n    {\r\n        uint count = 0;\r\n        for (uint i=0; i<owners.length; i++)\r\n            if (confirmations[transactionHash][owners[i]])\r\n                count += 1;\r\n            if (count == required)\r\n                return true;\r\n    }\r\n\r\n    function confirmationCount(bytes32 transactionHash)\r\n        external\r\n        constant\r\n        returns (uint count)\r\n    {\r\n        for (uint i=0; i<owners.length; i++)\r\n            if (confirmations[transactionHash][owners[i]])\r\n                count += 1;\r\n    }\r\n\r\n    function filterTransactions(bool isPending)\r\n        private\r\n        constant\r\n        returns (bytes32[] _transactionList)\r\n    {\r\n        bytes32[] memory _transactionListTemp = new bytes32[](transactionList.length);\r\n        uint count = 0;\r\n        for (uint i=0; i<transactionList.length; i++)\r\n            if (   isPending && !transactions[transactionList[i]].executed\r\n                || !isPending && transactions[transactionList[i]].executed)\r\n            {\r\n                _transactionListTemp[count] = transactionList[i];\r\n                count += 1;\r\n            }\r\n        _transactionList = new bytes32[](count);\r\n        for (i=0; i<count; i++)\r\n            if (_transactionListTemp[i] > 0)\r\n                _transactionList[i] = _transactionListTemp[i];\r\n    }\r\n\r\n    function getPendingTransactions()\r\n        external\r\n        constant\r\n        returns (bytes32[])\r\n    {\r\n        return filterTransactions(true);\r\n    }\r\n\r\n    function getExecutedTransactions()\r\n        external\r\n        constant\r\n        returns (bytes32[])\r\n    {\r\n        return filterTransactions(false);\r\n    }\r\n    \r\n    function createCoin()\r\n        external\r\n        onlyWallet\r\n    {\r\n        CoinCreation(new RoseCoin());\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"confirmations\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"destination\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"},{\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"submitTransaction\",\"outputs\":[{\"name\":\"transactionHash\",\"type\":\"bytes32\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"removeOwner\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"createCoin\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"transactionHash\",\"type\":\"bytes32\"}],\"name\":\"confirmationCount\",\"outputs\":[{\"name\":\"count\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_required\",\"type\":\"uint256\"}],\"name\":\"updateRequired\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"transactions\",\"outputs\":[{\"name\":\"destination\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"},{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"executed\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"transactionHash\",\"type\":\"bytes32\"}],\"name\":\"isConfirmed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"addOwner\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"transactionHash\",\"type\":\"bytes32\"}],\"name\":\"confirmTransaction\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"destination\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"},{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"v\",\"type\":\"uint8[]\"},{\"name\":\"rs\",\"type\":\"bytes32[]\"}],\"name\":\"submitTransactionWithSignatures\",\"outputs\":[{\"name\":\"transactionHash\",\"type\":\"bytes32\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"transactionHash\",\"type\":\"bytes32\"}],\"name\":\"executeTransaction\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPendingTransactions\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32[]\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"required\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getExecutedTransactions\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32[]\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"transactionHash\",\"type\":\"bytes32\"}],\"name\":\"revokeConfirmation\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"transactionHash\",\"type\":\"bytes32\"},{\"name\":\"v\",\"type\":\"uint8[]\"},{\"name\":\"rs\",\"type\":\"bytes32[]\"}],\"name\":\"confirmTransactionWithSignatures\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_owners\",\"type\":\"address[]\"},{\"name\":\"_required\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"transactionHash\",\"type\":\"bytes32\"}],\"name\":\"Confirmation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"transactionHash\",\"type\":\"bytes32\"}],\"name\":\"Revocation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"transactionHash\",\"type\":\"bytes32\"}],\"name\":\"Submission\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"transactionHash\",\"type\":\"bytes32\"}],\"name\":\"Execution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnerAddition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnerRemoval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"required\",\"type\":\"uint256\"}],\"name\":\"RequiredUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"coin\",\"type\":\"address\"}],\"name\":\"CoinCreation\",\"type\":\"event\"}]","ContractName":"MultiSigWallet","CompilerVersion":"v0.4.15+commit.bbb8e64f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000300000000000000000000000009697ddf0ef149977f4937c8b157e309f51136c2000000000000000000000000e0eccd269b3619630302af44b87ee0ff28b570c4000000000000000000000000d62b063b5f26f6b7912b28958d3c2cda1b4463f8","Library":"","SwarmSource":"bzzr://f1ca5a6e4b1b5649265f895548e842a9cda2da37b0c51aefacdf32bde63a4c75"}]}