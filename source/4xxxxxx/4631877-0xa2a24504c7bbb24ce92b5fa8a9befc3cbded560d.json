{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.15;\r\n\r\n\r\n// This contract is meant as a \"singleton\" forwarding contract.\r\n// Eventually, it will be able to forward any transaction to\r\n// Any contract that is built to accept it.\r\ncontract TxRelay {\r\n\r\n    // Note: This is a local nonce.\r\n    // Different from the nonce defined w/in protocol.\r\n    mapping(address => uint) nonce;\r\n\r\n    // This mapping specifies a whitelist of allowed senders for transactions.\r\n    // There can be one whitelist per ethereum account, which is the owner of that\r\n    // whitelist. Users can specify which whitelist they want to use when signing\r\n    // a transaction. They can use their own whitelist, a whitelist belonging\r\n    // to another account, or skip using a whitelist by specifying the zero address.\r\n    mapping(address => mapping(address => bool)) public whitelist;\r\n\r\n    /*\r\n     * @dev Relays meta transactions\r\n     * @param sigV, sigR, sigS ECDSA signature on some data to be forwarded\r\n     * @param destination Location the meta-tx should be forwarded to\r\n     * @param data The bytes necessary to call the function in the destination contract.\r\n     * Note: The first encoded argument in data must be address of the signer. This means\r\n     * that all functions called from this relay must take an address as the first parameter.\r\n     */\r\n    function relayMetaTx(\r\n        uint8 sigV,\r\n        bytes32 sigR,\r\n        bytes32 sigS,\r\n        address destination,\r\n        bytes data,\r\n        address listOwner\r\n    ) public {\r\n\r\n        // only allow senders from the whitelist specified by the user,\r\n        // 0x0 means no whitelist.\r\n        require(listOwner == 0x0 || whitelist[listOwner][msg.sender]);\r\n\r\n        address claimedSender = getAddress(data);\r\n        // use EIP 191\r\n        // 0x19 :: version :: relay :: whitelistOwner :: nonce :: destination :: data\r\n        bytes32 h = keccak256(byte(0x19), byte(0), this, listOwner, nonce[claimedSender], destination, data);\r\n        address addressFromSig = ecrecover(h, sigV, sigR, sigS);\r\n\r\n        require(claimedSender == addressFromSig);\r\n\r\n        nonce[claimedSender]++; //if we are going to do tx, update nonce\r\n\r\n        require(destination.call(data));\r\n    }\r\n\r\n    /*\r\n     * @dev Gets an address encoded as the first argument in transaction data\r\n     * @param b The byte array that should have an address as first argument\r\n     * @returns a The address retrieved from the array\r\n     (Optimization based on work by tjade273)\r\n     */\r\n    function getAddress(bytes b) public constant returns (address a) {\r\n        if (b.length < 36) return address(0);\r\n        assembly {\r\n            let mask := 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\r\n            a := and(mask, mload(add(b, 36)))\r\n            // 36 is the offset of the first parameter of the data, if encoded properly.\r\n            // 32 bytes for the length of the bytes array, and 4 bytes for the function signature.\r\n        }\r\n    }\r\n\r\n    /*\r\n     * @dev Returns the local nonce of an account.\r\n     * @param add The address to return the nonce for.\r\n     * @return The specific-to-this-contract nonce of the address provided\r\n     */\r\n    function getNonce(address add) public constant returns (uint) {\r\n        return nonce[add];\r\n    }\r\n\r\n    /*\r\n     * @dev Adds a number of addresses to a specific whitelist. Only\r\n     * the owner of a whitelist can add to it.\r\n     * @param sendersToUpdate the addresses to add to the whitelist\r\n     */\r\n    function addToWhitelist(address[] sendersToUpdate) public {\r\n        updateWhitelist(sendersToUpdate, true);\r\n    }\r\n\r\n    /*\r\n     * @dev Removes a number of addresses from a specific whitelist. Only\r\n     * the owner of a whitelist can remove from it.\r\n     * @param sendersToUpdate the addresses to add to the whitelist\r\n     */\r\n    function removeFromWhitelist(address[] sendersToUpdate) public {\r\n        updateWhitelist(sendersToUpdate, false);\r\n    }\r\n\r\n    /*\r\n     * @dev Internal logic to update a whitelist\r\n     * @param sendersToUpdate the addresses to add to the whitelist\r\n     * @param newStatus whether to add or remove addresses\r\n     */\r\n    function updateWhitelist(address[] sendersToUpdate, bool newStatus) private {\r\n        for (uint i = 0; i < sendersToUpdate.length; i++) {\r\n            whitelist[msg.sender][sendersToUpdate[i]] = newStatus;\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"add\",\"type\":\"address\"}],\"name\":\"getNonce\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sendersToUpdate\",\"type\":\"address[]\"}],\"name\":\"removeFromWhitelist\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sendersToUpdate\",\"type\":\"address[]\"}],\"name\":\"addToWhitelist\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sigV\",\"type\":\"uint8\"},{\"name\":\"sigR\",\"type\":\"bytes32\"},{\"name\":\"sigS\",\"type\":\"bytes32\"},{\"name\":\"destination\",\"type\":\"address\"},{\"name\":\"data\",\"type\":\"bytes\"},{\"name\":\"listOwner\",\"type\":\"address\"}],\"name\":\"relayMetaTx\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"b\",\"type\":\"bytes\"}],\"name\":\"getAddress\",\"outputs\":[{\"name\":\"a\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"}]","ContractName":"TxRelay","CompilerVersion":"v0.4.15+commit.bbb8e64f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://0027e8b695e9d2dea9f3629519022a69f3a1d23055ce86406e686ea54f31ee9c"}]}