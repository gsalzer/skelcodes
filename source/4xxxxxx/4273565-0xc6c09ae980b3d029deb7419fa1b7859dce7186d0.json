{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\ncontract ERC20Interface {\r\n\tfunction totalSupply() constant returns (uint supply);\r\n\tfunction balanceOf(address _owner) constant returns (uint balance);\r\n\tfunction transfer(address _to, uint _value) returns (bool success);\r\n\tfunction transferFrom(address _from, address _to, uint _value) returns (bool success);\r\n\tfunction approve(address _spender, uint _value) returns (bool success);\r\n\tfunction allowance(address _owner, address _spender) constant returns (uint remaining);\r\n\tevent Transfer(address indexed _from, address indexed _to, uint _value);\r\n\tevent Approval(address indexed _owner, address indexed _spender, uint _value);\r\n}\r\n\r\ncontract DeDeMasterContract {\r\n\r\n\tmapping (address => bool) public isDeDeContract;\r\n\r\n\tevent Issue(address dip, address scs, address issuer, address dedeAddress);\r\n\t//event Transfer(address from, address to, address issuer, address dedeAddress); // unused in current version\r\n\tevent Activate(address dip, address scs, address issuer, address dedeAddress);\r\n\tevent Nullify(address dip, address scs, address issuer, address dedeAddress);\r\n\r\n\taddress public dedeNetworkAddress;\r\n\r\n\taddress public myAddress;\r\n\r\n\tfunction DeDeMasterContract(address _dedeNetworkAddress){\r\n\t\tdedeNetworkAddress = _dedeNetworkAddress;\r\n\t\tmyAddress = msg.sender;\r\n\t}\r\n\r\n\tfunction changeDedeAddress(address newDedeAddress){\r\n\t\trequire(msg.sender == myAddress || msg.sender == dedeNetworkAddress);\r\n\t\tdedeNetworkAddress = newDedeAddress;\r\n\t}\r\n\r\n\tfunction issue(uint256 _targetAmount, uint256 _bulletAmount, address _targetAddress, address _bulletAddress, uint256 _validationTime, address _issuer) payable {\r\n\t\trequire(msg.sender == dedeNetworkAddress);\r\n\r\n\t\t//have eth input, or try token transferfrom\r\n\t\tif(_targetAddress == 0){ // ether\r\n\t\t\trequire(msg.value >= _targetAmount);\r\n\t\t\tif(msg.value > _targetAmount){\r\n\t\t\t\tmsg.sender.transfer(msg.value - _targetAmount);\r\n\t\t\t}\r\n\t\t}\r\n\t\telse{ // token\r\n\t\t\tassert(ERC20Interface(_targetAddress).transferFrom(msg.sender, this, _targetAmount));\r\n\t\t}\r\n\r\n\t\taddress dede = (new DeDeContract).value(_targetAddress == 0 ? _targetAmount : 0)(msg.sender, msg.sender, _issuer, _targetAmount, _bulletAmount, _targetAddress, _bulletAddress, _validationTime);\r\n\t\tisDeDeContract[dede] = true;\r\n\r\n\t\tif(_targetAddress != 0){ // token\r\n\t\t\tassert(ERC20Interface(_targetAddress).transfer(dede, _targetAmount));\r\n\t\t}\r\n\r\n\t\tIssue(msg.sender, dedeNetworkAddress, _issuer, dede);\r\n\t}\r\n\tfunction activate(address dede) payable {\r\n\t\tvar _dede = DeDeContract(dede);\r\n\r\n\t\trequire(isDeDeContract[dede]);\r\n\r\n\t\tisDeDeContract[dede] = false;\r\n\r\n\t\t_dede.activate.value(msg.value)(msg.sender);\r\n\r\n\t\tActivate(_dede.dip(), _dede.scs(), _dede.issuer(), dede);\r\n\t}\r\n\tfunction nullify(address dede){\r\n\t\tvar _dede = DeDeContract(dede);\r\n\r\n\t\trequire(isDeDeContract[dede]);\r\n\r\n\t\tisDeDeContract[dede] = false;\r\n\r\n\t\t_dede.nullify(msg.sender);\r\n\r\n\t\tNullify(_dede.dip(), _dede.scs(), _dede.issuer(), dede);\r\n\t}\r\n\r\n\t/*function transfer(address receiver, address dede){ // unused in current version\r\n\t\tvar _dede = DeDeContract(dede);\r\n\r\n\t\trequire(isDeDeContract[dede]);\r\n\r\n\t\t_dede.transfer(msg.sender, receiver);\r\n\r\n\t\tTransfer(_dede.scs(), receiver, _dede.issuer(), dede);\r\n\t}*/\r\n}\r\n\r\n\r\ncontract DeDeContract {\r\n\tuint256 public validationTime;\r\n\r\n\taddress public masterContract;//master smart contract address\r\n\taddress public dip;\r\n\taddress public scs;\r\n\taddress public issuer;\r\n\r\n\taddress public targetAddress;//if address value is zero, this contract itself posesses ethereum as target.\r\n\taddress public bulletAddress;//if address value is zero, this contract itself gets ethereum as bullet.\r\n\r\n\tuint256 public targetAmount;\r\n\tuint256 public bulletAmount;\r\n\r\n\tfunction DeDeContract(address _dip, address _scs, address _issuer, uint256 _targetAmount, uint256 _bulletAmount, address _targetAddress, address _bulletAddress, uint256 _validationTime) payable {\r\n\t\trequire(now < _validationTime);\r\n\r\n\t\tmasterContract = msg.sender;\r\n\r\n\t\tdip = _dip;\r\n\t\tscs = _scs;\r\n\t\tissuer = _issuer;\r\n\r\n\t\ttargetAddress = _targetAddress;\r\n\t\tbulletAddress = _bulletAddress;\r\n\t\ttargetAmount = _targetAmount;\r\n\t\tbulletAmount = _bulletAmount;\r\n\r\n\t\tvalidationTime = _validationTime;\r\n\t}\r\n\r\n\tfunction activate(address sender) payable {\r\n\t\trequire(msg.sender == masterContract);\r\n\t\trequire(sender == scs);\r\n\t\trequire(now >= validationTime && now < validationTime + 1 days);\r\n\r\n\t\tif(targetAddress != 0){\r\n\t\t\tassert(ERC20Interface(targetAddress).transfer(scs, targetAmount)); // send target token to scs\r\n\t\t}\r\n\r\n\t\tif(bulletAddress == 0){\r\n\t\t\trequire(msg.value >= bulletAmount);\r\n\t\t\tsuicide(dip); // force send bullet ether to dip\r\n\t\t}\r\n\t\telse{\r\n\t\t\tassert(ERC20Interface(bulletAddress).transferFrom(scs, dip, bulletAmount)); // send bullet token to dip\r\n\t\t\tsuicide(scs); // force send target or leftover ether to scs\r\n\t\t}\r\n\t}\r\n\tfunction nullify(address sender) {\r\n\t\trequire(msg.sender == masterContract);\r\n\t\trequire(now >= (validationTime + 1 days) && (sender == dip || sender == scs));\r\n\t\r\n\t\tif(targetAddress != 0){\r\n\t\t\tassert(ERC20Interface(targetAddress).transfer(dip, targetAmount));\r\n\t\t}\r\n\r\n\t\tsuicide(dip);\r\n\t}\r\n\r\n\t/*function transfer(address sender, address receiver) {\r\n\t\trequire(msg.sender == masterContract);\r\n\t\trequire(sender == scs);\r\n\r\n\t\tscs = receiver;\r\n\t}*/\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_targetAmount\",\"type\":\"uint256\"},{\"name\":\"_bulletAmount\",\"type\":\"uint256\"},{\"name\":\"_targetAddress\",\"type\":\"address\"},{\"name\":\"_bulletAddress\",\"type\":\"address\"},{\"name\":\"_validationTime\",\"type\":\"uint256\"},{\"name\":\"_issuer\",\"type\":\"address\"}],\"name\":\"issue\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"dede\",\"type\":\"address\"}],\"name\":\"activate\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"myAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isDeDeContract\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newDedeAddress\",\"type\":\"address\"}],\"name\":\"changeDedeAddress\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dedeNetworkAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"dede\",\"type\":\"address\"}],\"name\":\"nullify\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_dedeNetworkAddress\",\"type\":\"address\"}],\"payable\":false,\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"dip\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"scs\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"issuer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"dedeAddress\",\"type\":\"address\"}],\"name\":\"Issue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"dip\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"scs\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"issuer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"dedeAddress\",\"type\":\"address\"}],\"name\":\"Activate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"dip\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"scs\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"issuer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"dedeAddress\",\"type\":\"address\"}],\"name\":\"Nullify\",\"type\":\"event\"}]","ContractName":"DeDeMasterContract","CompilerVersion":"v0.4.11+commit.68ef5810","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000432E6adA6C4730993683520566F7B167dA2657AF","Library":"","SwarmSource":"bzzr://303d658c043b571d55fb30be8d162c2677df78c24101cb280ef9e081d1e6908e"}]}