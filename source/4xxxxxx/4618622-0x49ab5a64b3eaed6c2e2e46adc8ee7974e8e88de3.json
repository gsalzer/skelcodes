{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n/**\r\n * Math operations with safety checks\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint a, uint b) internal returns (uint) {\r\n    uint c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\nfunction div(uint a, uint b) internal returns (uint) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n  function sub(uint a, uint b) internal returns (uint) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n  function add(uint a, uint b) internal returns (uint) {\r\n    uint c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n    return a >= b ? a : b;\r\n  }\r\n  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n    return a < b ? a : b;\r\n  }\r\n  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    return a >= b ? a : b;\r\n  }\r\n  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    return a < b ? a : b;\r\n  }\r\n  function assert(bool assertion) internal {\r\n    if (!assertion) {\r\n      revert();\r\n    }\r\n  }\r\n}\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20Basic {\r\n  uint public totalSupply;\r\n  function balanceOf(address who) constant returns (uint);\r\n  function transfer(address to, uint value);\r\n  event Transfer(address indexed from, address indexed to, uint value);\r\n}\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances. \r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint;\r\n\r\n  mapping(address => uint) balances;\r\n\r\n  /**\r\n   * @dev Fix for the ERC20 short address attack.\r\n   */\r\n  modifier onlyPayloadSize(uint size) {\r\n     if(msg.data.length < size + 4) {\r\n       revert();\r\n     }\r\n     _;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint _value) onlyPayloadSize(2 * 32) {\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of. \r\n  * @return An uint representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) constant returns (uint balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) constant returns (uint);\r\n  function transferFrom(address from, address to, uint value);\r\n  function approve(address spender, uint value);\r\n  event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implemantation of the basic standart token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is BasicToken, ERC20 {\r\n\r\n  mapping (address => mapping (address => uint)) allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint the amout of tokens to be transfered\r\n   */\r\n  function transferFrom(address _from, address _to, uint _value) onlyPayloadSize(3 * 32) {\r\n    var _allowance = allowed[_from][msg.sender];\r\n\r\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n    // if (_value > _allowance) revert();\r\n\r\n    balances[_to] = balances[_to].add(_value);\r\n    balances[_from] = balances[_from].sub(_value);\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    Transfer(_from, _to, _value);\r\n  }\r\n\r\n  /**\r\n   * @dev Aprove the passed address to spend the specified amount of tokens on beahlf of msg.sender.\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint _value) {\r\n\r\n    // To change the approve amount you first have to reduce the addresses`\r\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n    //  already 0 to mitigate the race condition described here:\r\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    if ((_value != 0) && (allowed[msg.sender][_spender] != 0)) revert();\r\n\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens than an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint specifing the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) constant returns (uint remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title LimitedTransferToken\r\n * @dev LimitedTransferToken defines the generic interface and the implementation to limit token \r\n * transferability for different events. It is intended to be used as a base class for other token \r\n * contracts. \r\n * LimitedTransferToken has been designed to allow for different limiting factors,\r\n * this can be achieved by recursively calling super.transferableTokens() until the base class is \r\n * hit. For example:\r\n *     function transferableTokens(address holder, uint64 time) constant public returns (uint256) {\r\n *       return min256(unlockedTokens, super.transferableTokens(holder, time));\r\n *     }\r\n * A working example is VestedToken.sol:\r\n * https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts/token/VestedToken.sol\r\n */\r\n\r\ncontract LimitedTransferToken is ERC20 {\r\n\r\n  /**\r\n   * @dev Checks whether it can transfer or otherwise throws.\r\n   */\r\n  modifier canTransfer(address _sender, uint _value) {\r\n   if (_value > transferableTokens(_sender, uint64(now))) revert();\r\n   _;\r\n  }\r\n\r\n  /**\r\n   * @dev Checks modifier and allows transfer if tokens are not locked.\r\n   * @param _to The address that will recieve the tokens.\r\n   * @param _value The amount of tokens to be transferred.\r\n   */\r\n  function transfer(address _to, uint _value) canTransfer(msg.sender, _value) {\r\n    super.transfer(_to, _value);\r\n  }\r\n\r\n  /**\r\n  * @dev Checks modifier and allows transfer if tokens are not locked.\r\n  * @param _from The address that will send the tokens.\r\n  * @param _to The address that will recieve the tokens.\r\n  * @param _value The amount of tokens to be transferred.\r\n  */\r\n  function transferFrom(address _from, address _to, uint _value) canTransfer(_from, _value) {\r\n    super.transferFrom(_from, _to, _value);\r\n  }\r\n\r\n  /**\r\n   * @dev Default transferable tokens function returns all tokens for a holder (no limit).\r\n   * @dev Overwriting transferableTokens(address holder, uint64 time) is the way to provide the \r\n   * specific logic for limiting token transferability for a holder over time.\r\n   */\r\n  function transferableTokens(address holder, uint64 time) constant public returns (uint256) {\r\n    return balanceOf(holder);\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title Vested token\r\n * @dev Tokens that can be vested for a group of addresses.\r\n */\r\ncontract VestedToken is StandardToken, LimitedTransferToken {\r\n\r\n  uint256 MAX_GRANTS_PER_ADDRESS = 20;\r\n\r\n  struct TokenGrant {\r\n    address granter;     // 20 bytes\r\n    uint256 value;       // 32 bytes\r\n    uint64 cliff;\r\n    uint64 vesting;\r\n    uint64 start;        // 3 * 8 = 24 bytes\r\n    bool revokable;\r\n    bool burnsOnRevoke;  // 2 * 1 = 2 bits? or 2 bytes?\r\n  } // total 78 bytes = 3 sstore per operation (32 per sstore)\r\n\r\n  mapping (address => TokenGrant[]) public grants;\r\n\r\n  event NewTokenGrant(address indexed from, address indexed to, uint256 value, uint256 grantId);\r\n\r\n  /**\r\n   * @dev Grant tokens to a specified address\r\n   * @param _to address The address which the tokens will be granted to.\r\n   * @param _value uint256 The amount of tokens to be granted.\r\n   * @param _start uint64 Time of the beginning of the grant.\r\n   * @param _cliff uint64 Time of the cliff period.\r\n   * @param _vesting uint64 The vesting period.\r\n   */\r\n  function grantVestedTokens(\r\n    address _to,\r\n    uint256 _value,\r\n    uint64 _start,\r\n    uint64 _cliff,\r\n    uint64 _vesting,\r\n    bool _revokable,\r\n    bool _burnsOnRevoke\r\n  ) public {\r\n\r\n    // Check for date inconsistencies that may cause unexpected behavior\r\n    if (_cliff < _start || _vesting < _cliff) {\r\n      revert();\r\n    }\r\n\r\n    if (tokenGrantsCount(_to) > MAX_GRANTS_PER_ADDRESS) revert();   // To prevent a user being spammed and have his balance locked (out of gas attack when calculating vesting).\r\n\r\n    uint count = grants[_to].push(\r\n                TokenGrant(\r\n                  _revokable ? msg.sender : 0, // avoid storing an extra 20 bytes when it is non-revokable\r\n                  _value,\r\n                  _cliff,\r\n                  _vesting,\r\n                  _start,\r\n                  _revokable,\r\n                  _burnsOnRevoke\r\n                )\r\n              );\r\n\r\n    transfer(_to, _value);\r\n\r\n    NewTokenGrant(msg.sender, _to, _value, count - 1);\r\n  }\r\n\r\n  /**\r\n   * @dev Revoke the grant of tokens of a specifed address.\r\n   * @param _holder The address which will have its tokens revoked.\r\n   * @param _grantId The id of the token grant.\r\n   */\r\n  function revokeTokenGrant(address _holder, uint _grantId) public {\r\n    TokenGrant grant = grants[_holder][_grantId];\r\n\r\n    if (!grant.revokable) { // Check if grant was revokable\r\n      revert();\r\n    }\r\n\r\n    if (grant.granter != msg.sender) { // Only granter can revoke it\r\n      revert();\r\n    }\r\n\r\n    address receiver = grant.burnsOnRevoke ? 0xdead : msg.sender;\r\n\r\n    uint256 nonVested = nonVestedTokens(grant, uint64(now));\r\n\r\n    // remove grant from array\r\n    delete grants[_holder][_grantId];\r\n    grants[_holder][_grantId] = grants[_holder][grants[_holder].length.sub(1)];\r\n    grants[_holder].length -= 1;\r\n\r\n    balances[receiver] = balances[receiver].add(nonVested);\r\n    balances[_holder] = balances[_holder].sub(nonVested);\r\n\r\n    Transfer(_holder, receiver, nonVested);\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Calculate the total amount of transferable tokens of a holder at a given time\r\n   * @param holder address The address of the holder\r\n   * @param time uint64 The specific time.\r\n   * @return An uint representing a holder's total amount of transferable tokens.\r\n   */\r\n  function transferableTokens(address holder, uint64 time) constant public returns (uint256) {\r\n    uint256 grantIndex = tokenGrantsCount(holder);\r\n\r\n    if (grantIndex == 0) return balanceOf(holder); // shortcut for holder without grants\r\n\r\n    // Iterate through all the grants the holder has, and add all non-vested tokens\r\n    uint256 nonVested = 0;\r\n    for (uint256 i = 0; i < grantIndex; i++) {\r\n      nonVested = SafeMath.add(nonVested, nonVestedTokens(grants[holder][i], time));\r\n    }\r\n\r\n    // Balance - totalNonVested is the amount of tokens a holder can transfer at any given time\r\n    uint256 vestedTransferable = SafeMath.sub(balanceOf(holder), nonVested);\r\n\r\n    // Return the minimum of how many vested can transfer and other value\r\n    // in case there are other limiting transferability factors (default is balanceOf)\r\n    return SafeMath.min256(vestedTransferable, super.transferableTokens(holder, time));\r\n  }\r\n\r\n  /**\r\n   * @dev Check the amount of grants that an address has.\r\n   * @param _holder The holder of the grants.\r\n   * @return A uint representing the total amount of grants.\r\n   */\r\n  function tokenGrantsCount(address _holder) constant returns (uint index) {\r\n    return grants[_holder].length;\r\n  }\r\n\r\n  /**\r\n   * @dev Calculate amount of vested tokens at a specifc time.\r\n   * @param tokens uint256 The amount of tokens grantted.\r\n   * @param time uint64 The time to be checked\r\n   * @param start uint64 A time representing the begining of the grant\r\n   * @param cliff uint64 The cliff period.\r\n   * @param vesting uint64 The vesting period.\r\n   * @return An uint representing the amount of vested tokensof a specif grant.\r\n   *  transferableTokens\r\n   *   |                         _/--------   vestedTokens rect\r\n   *   |                       _/\r\n   *   |                     _/\r\n   *   |                   _/\r\n   *   |                 _/\r\n   *   |                /\r\n   *   |              .|\r\n   *   |            .  |\r\n   *   |          .    |\r\n   *   |        .      |\r\n   *   |      .        |\r\n   *   |    .          |\r\n   *   +===+===========+---------+----------> time\r\n   *      Start       Clift    Vesting\r\n   */\r\n  function calculateVestedTokens(\r\n    uint256 tokens,\r\n    uint256 time,\r\n    uint256 start,\r\n    uint256 cliff,\r\n    uint256 vesting) constant returns (uint256)\r\n    {\r\n      // Shortcuts for before cliff and after vesting cases.\r\n      if (time < cliff) return 0;\r\n      if (time >= vesting) return tokens;\r\n\r\n      // Interpolate all vested tokens.\r\n      // As before cliff the shortcut returns 0, we can use just calculate a value\r\n      // in the vesting rect (as shown in above's figure)\r\n\r\n      // vestedTokens = tokens * (time - start) / (vesting - start)\r\n      uint256 vestedTokens = SafeMath.div(\r\n                                    SafeMath.mul(\r\n                                      tokens,\r\n                                      SafeMath.sub(time, start)\r\n                                      ),\r\n                                    SafeMath.sub(vesting, start)\r\n                                    );\r\n\r\n      return vestedTokens;\r\n  }\r\n\r\n  /**\r\n   * @dev Get all information about a specifc grant.\r\n   * @param _holder The address which will have its tokens revoked.\r\n   * @param _grantId The id of the token grant.\r\n   * @return Returns all the values that represent a TokenGrant(address, value, start, cliff,\r\n   * revokability, burnsOnRevoke, and vesting) plus the vested value at the current time.\r\n   */\r\n  function tokenGrant(address _holder, uint _grantId) constant returns (address granter, uint256 value, uint256 vested, uint64 start, uint64 cliff, uint64 vesting, bool revokable, bool burnsOnRevoke) {\r\n    TokenGrant grant = grants[_holder][_grantId];\r\n\r\n    granter = grant.granter;\r\n    value = grant.value;\r\n    start = grant.start;\r\n    cliff = grant.cliff;\r\n    vesting = grant.vesting;\r\n    revokable = grant.revokable;\r\n    burnsOnRevoke = grant.burnsOnRevoke;\r\n\r\n    vested = vestedTokens(grant, uint64(now));\r\n  }\r\n\r\n  /**\r\n   * @dev Get the amount of vested tokens at a specific time.\r\n   * @param grant TokenGrant The grant to be checked.\r\n   * @param time The time to be checked\r\n   * @return An uint representing the amount of vested tokens of a specific grant at a specific time.\r\n   */\r\n  function vestedTokens(TokenGrant grant, uint64 time) private constant returns (uint256) {\r\n    return calculateVestedTokens(\r\n      grant.value,\r\n      uint256(time),\r\n      uint256(grant.start),\r\n      uint256(grant.cliff),\r\n      uint256(grant.vesting)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @dev Calculate the amount of non vested tokens at a specific time.\r\n   * @param grant TokenGrant The grant to be checked.\r\n   * @param time uint64 The time to be checked\r\n   * @return An uint representing the amount of non vested tokens of a specifc grant on the \r\n   * passed time frame.\r\n   */\r\n  function nonVestedTokens(TokenGrant grant, uint64 time) private constant returns (uint256) {\r\n    return grant.value.sub(vestedTokens(grant, time));\r\n  }\r\n\r\n  /**\r\n   * @dev Calculate the date when the holder can trasfer all its tokens\r\n   * @param holder address The address of the holder\r\n   * @return An uint representing the date of the last transferable tokens.\r\n   */\r\n  function lastTokenIsTransferableDate(address holder) constant public returns (uint64 date) {\r\n    date = uint64(now);\r\n    uint256 grantIndex = grants[holder].length;\r\n    for (uint256 i = 0; i < grantIndex; i++) {\r\n      date = SafeMath.max64(grants[holder][i].vesting, date);\r\n    }\r\n  }\r\n}\r\n\r\n// QUESTIONS FOR AUDITORS:\r\n// - Considering we inherit from VestedToken, how much does that hit at our gas price?\r\n// - Ensure max supply is 98,000,000\r\n// - Ensure that even if not totalSupply is sold, tokens would still be transferrable after (we will up to totalSupply by creating WPX tokens)\r\n\r\n// vesting: 365 days, 365 days / 4 vesting\r\n\r\n\r\ncontract WPXToken is VestedToken {\r\n  //FIELDS\r\n  string public name = \"WorkPress\"; //(important input)\r\n  string public symbol = \"WPX\";    //(important input)\r\n  uint public decimals = 4;        //(important input)\r\n// Multiplier for the decimals\r\n  uint private constant DECIMALS = 10000;\r\n  uint public totalSupply = 98000000*DECIMALS; //(important input)\r\n  //CONSTANTS\r\n  //Time limits\r\n  uint public constant STAGE_ONE_TIME_END = 38 days; // first day bonus (important input)\r\n  uint public constant STAGE_TWO_TIME_END = 58 days; // first week bonus (important input)\r\n  uint public constant STAGE_THREE_TIME_END = 69 days; //(important input)\r\n  \r\n\r\n  //Prices of WPX\r\n  uint public constant PRICE_STANDARD    = 2000*DECIMALS; // WPX received per one ETH; Approximately $0.15 if ETH price $300. MAX_SUPPLY / (valuation / ethPrice)\r\n  uint public constant PRICE_STAGE_ONE   = PRICE_STANDARD * 150/100;  // 1ETH = 100% Bonus 1.5X or 50% 1ETH = 3000 WPX ~ $0.10(important input)\r\n  uint public constant PRICE_STAGE_TWO   = PRICE_STANDARD * 125/100; // 1ETH = 25% ICO Bonus           1ETH = 2500 WPX ~ $0.125(important input)\r\n  uint public constant PRICE_STAGE_THREE = PRICE_STANDARD; \t\t\t// Standard Price no bonus         1ETH = 2000 WPX ~ $0.15(important input)\r\n\r\n  //WPX Token Limits \r\n  uint public constant ALLOC_TEAM =         10000000*DECIMALS; // team + advisors to main address (important input)\r\n  uint public constant ALLOC_BOUNTIES =      3000000*DECIMALS; // Reserved Address (important input)\r\n  uint public constant ALLOC_WINGS =         5000000*DECIMALS; // Reserved Address (important input)\r\n  uint public constant ALLOC_CROWDSALE =    80000000*DECIMALS; // Crowdsale to Main address (important input)\r\n  \r\n  uint public constant PREBUY_PORTION_MAX = 20000000*DECIMALS; // this is redundantly more than what will be pre-sold\r\n  \r\n  //ASSIGNED IN INITIALIZATION\r\n  //Start and end times\r\n  uint public publicStartTime; // Time in seconds public crowd fund starts.\r\n  uint public privateStartTime; // Time in seconds - at this time there is no intention to do a private session.\r\n  uint public publicEndTime; // Time in seconds crowdsale ends\r\n  uint public hardcapInEth;\r\n\r\n  //Special Addresses\r\n  address public multisigAddress; // Address to which all ether flows.\r\n  address public wpxTeamAddress; // Address to which ALLOC_TEAM, ALLOC_BOUNTIES, ALLOC_WINGS is (ultimately) sent to.\r\n  address public ownerAddress; // Address of the contract owner. Can halt the crowdsale.\r\n  address public preBuy1; // Address used by pre-buy\r\n  address public preBuy2; // Address used by pre-buy\r\n  address public preBuy3; // Address used by pre-buy\r\n  uint public preBuyPrice1; // price for pre-buy\r\n  uint public preBuyPrice2; // price for pre-buy\r\n  uint public preBuyPrice3; // price for pre-buy\r\n\r\n  //Running totals\r\n  uint public etherRaised; // Total Ether raised.\r\n  uint public WPXSold; // Total WPX created\r\n  uint public prebuyPortionTotal; // Total of Tokens purchased by pre-buy. Not to exceed PREBUY_PORTION_MAX.\r\n  \r\n  //booleans\r\n  bool public halted; // halts the crowd sale if true.\r\n  \r\n  // MODIFIERS\r\n  //Is currently in the period after the private start time and before the public start time.\r\n  modifier is_pre_crowdfund_period() {\r\n    if (now >= publicStartTime || now < privateStartTime) revert();\r\n    _;\r\n  }\r\n\r\n  //Is currently the crowdfund period\r\n  modifier is_crowdfund_period() {\r\n    if (now < publicStartTime) revert();\r\n    if (isCrowdfundCompleted()) revert();\r\n    _;\r\n  }\r\n\r\n  // Is completed\r\n  modifier is_crowdfund_completed() {\r\n    if (!isCrowdfundCompleted()) revert();\r\n    _;\r\n  }\r\n  function isCrowdfundCompleted() internal returns (bool) {\r\n    if (now > publicEndTime || WPXSold+50000*DECIMALS >= ALLOC_CROWDSALE || etherRaised >= hardcapInEth*1000000000000000000) {return true; }\r\n\t\r\n    return false;\r\n  }\r\n\r\n  //May only be called by the owner address\r\n  modifier only_owner() {\r\n    if (msg.sender != ownerAddress) revert();\r\n    _;\r\n  }\r\n\r\n  //May only be called if the crowdfund has not been halted\r\n  modifier is_not_halted() {\r\n    if (halted) revert();\r\n    _;\r\n  }\r\n\r\n  // EVENTS\r\n  event PreBuy(uint _amount);\r\n  event Buy(address indexed _recipient, uint _amount);\r\n\r\n  // Initialization contract assigns address of crowdfund contract and end time.\r\n  function WPXToken(\r\n    address _multisig,\r\n    address _wpxTeam,\r\n    uint _publicStartTime,\r\n    uint _privateStartTime,\r\n    uint _hardcapInEth,\r\n    address _prebuy1, uint _preBuyPrice1,\r\n    address _prebuy2, uint _preBuyPrice2,\r\n    address _prebuy3, uint _preBuyPrice3\r\n  ) {\r\n    ownerAddress = msg.sender;\r\n    publicStartTime = _publicStartTime;\r\n    privateStartTime = _privateStartTime;\r\n    publicEndTime = _publicStartTime + 69 days; // (important input)\r\n    multisigAddress = _multisig;\r\n    wpxTeamAddress = _wpxTeam;\r\n\r\n    hardcapInEth = _hardcapInEth;\r\n\r\n    preBuy1 = _prebuy1;\r\n    preBuyPrice1 = _preBuyPrice1;\r\n    preBuy2 = _prebuy2;\r\n    preBuyPrice2 = _preBuyPrice2;\r\n    preBuy3 = _prebuy3;\r\n    preBuyPrice3 = _preBuyPrice3;\r\n\r\n    balances[wpxTeamAddress] += ALLOC_BOUNTIES;\r\n    balances[wpxTeamAddress] += ALLOC_WINGS;\r\n\r\n    balances[ownerAddress] += ALLOC_TEAM;\r\n\r\n    balances[ownerAddress] += ALLOC_CROWDSALE;\r\n  }\r\n\r\n  // Transfer amount of tokens from sender account to recipient.\r\n  // Only callable after the crowd fund is completed\r\n  function transfer(address _to, uint _value)\r\n  {\r\n    if (_to == msg.sender) return; // no-op, allow even during crowdsale, in order to work around using grantVestedTokens() while in crowdsale\r\n    if (!isCrowdfundCompleted()) revert();\r\n    super.transfer(_to, _value);\r\n  }\r\n\r\n  // Transfer amount of tokens from a specified address to a recipient.\r\n  // Transfer amount of tokens from sender account to recipient.\r\n  function transferFrom(address _from, address _to, uint _value)\r\n    is_crowdfund_completed\r\n  {\r\n    super.transferFrom(_from, _to, _value);\r\n  }\r\n\r\n  //constant function returns the current WPX price.\r\n  function getPriceRate()\r\n      constant\r\n      returns (uint o_rate)\r\n  {\r\n      uint delta = SafeMath.sub(now, publicStartTime);\r\n\r\n      if (delta > STAGE_TWO_TIME_END) return PRICE_STAGE_THREE;\r\n      if (delta > STAGE_ONE_TIME_END) return PRICE_STAGE_TWO;\r\n\r\n      return (PRICE_STAGE_ONE);\r\n  }\r\n\r\n  // calculates wmount of WPX we get, given the wei and the rates we've defined per 1 eth\r\n  function calcAmount(uint _wei, uint _rate) \r\n    constant\r\n    returns (uint) \r\n  {\r\n    return SafeMath.div(SafeMath.mul(_wei, _rate), 1 ether);\r\n  } \r\n  \r\n  // Given the rate of a purchase and the remaining tokens in this tranche, it\r\n  // will throw if the sale would take it past the limit of the tranche.\r\n  // Returns `amount` in scope as the number of WPX tokens that it will purchase.\r\n  function processPurchase(uint _rate, uint _remaining)\r\n    internal\r\n    returns (uint o_amount)\r\n  {\r\n    o_amount = calcAmount(msg.value, _rate);\r\n\r\n    if (o_amount > _remaining) revert();\r\n    if (!multisigAddress.send(msg.value)) revert();\r\n\r\n    balances[ownerAddress] = balances[ownerAddress].sub(o_amount);\r\n    balances[msg.sender] = balances[msg.sender].add(o_amount);\r\n\r\n    WPXSold += o_amount;\r\n    etherRaised += msg.value;\r\n  }\r\n\r\n  //Special Function can only be called by pre-buy and only during the pre-crowdsale period.\r\n  function preBuy()\r\n    payable\r\n    is_pre_crowdfund_period\r\n    is_not_halted\r\n  {\r\n    // Pre-buy participants would get the first-day price, as well as a bonus of vested tokens\r\n    uint priceVested = 0;\r\n\r\n    if (msg.sender == preBuy1) priceVested = preBuyPrice1;\r\n    if (msg.sender == preBuy2) priceVested = preBuyPrice2;\r\n    if (msg.sender == preBuy3) priceVested = preBuyPrice3;\r\n\r\n    if (priceVested == 0) revert();\r\n\r\n    uint amount = processPurchase(PRICE_STAGE_ONE + priceVested, SafeMath.sub(PREBUY_PORTION_MAX, prebuyPortionTotal));\r\n    grantVestedTokens(msg.sender, calcAmount(msg.value, priceVested), \r\n      uint64(now), uint64(now) + 91 days, uint64(now) + 365 days, \r\n      false, false\r\n    );\r\n    prebuyPortionTotal += amount;\r\n    PreBuy(amount);\r\n  }\r\n\r\n  //Default function called by sending Ether to this address with no arguments.\r\n  //Results in creation of new WPX Tokens if transaction would not exceed hard limit of WPX Token.\r\n  function()\r\n    payable\r\n    is_crowdfund_period\r\n    is_not_halted\r\n  {\r\n    uint amount = processPurchase(getPriceRate(), SafeMath.sub(ALLOC_CROWDSALE, WPXSold));\r\n    Buy(msg.sender, amount);\r\n  }\r\n\r\n  // To be called at the end of crowdfund period\r\n  // WARNING: transfer(), which is called by grantVestedTokens(), wants a minimum message length\r\n  function grantVested(address _wpxTeamAddress, address _wpxFundAddress)\r\n    is_crowdfund_completed\r\n    only_owner\r\n    is_not_halted\r\n  {\r\n    // Grant tokens pre-allocated for the team\r\n    grantVestedTokens(\r\n      _wpxTeamAddress, ALLOC_TEAM,\r\n      uint64(now), uint64(now) + 91 days , uint64(now) + 365 days, \r\n      false, false\r\n    );\r\n\r\n    // Grant tokens that remain after crowdsale to the WPX fund, vested for 2 years\r\n    grantVestedTokens(\r\n      _wpxFundAddress, balances[ownerAddress],\r\n      uint64(now), uint64(now) + 182 days , uint64(now) + 730 days, \r\n      false, false\r\n    );\r\n  }\r\n\r\n  //May be used by owner of contract to halt crowdsale and no longer except ether.\r\n  function toggleHalt(bool _halted)\r\n    only_owner\r\n  {\r\n    halted = _halted;\r\n  }\r\n\r\n  //failsafe drain\r\n  function drain()\r\n    only_owner\r\n  {\r\n    if (!ownerAddress.send(this.balance)) revert();\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"PREBUY_PORTION_MAX\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_holder\",\"type\":\"address\"}],\"name\":\"tokenGrantsCount\",\"outputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRICE_STAGE_TWO\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preBuy3\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preBuy1\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wpxTeamAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"publicEndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"grants\",\"outputs\":[{\"name\":\"granter\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"cliff\",\"type\":\"uint64\"},{\"name\":\"vesting\",\"type\":\"uint64\"},{\"name\":\"start\",\"type\":\"uint64\"},{\"name\":\"revokable\",\"type\":\"bool\"},{\"name\":\"burnsOnRevoke\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"WPXSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preBuy2\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"multisigAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ALLOC_BOUNTIES\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"publicStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_holder\",\"type\":\"address\"},{\"name\":\"_grantId\",\"type\":\"uint256\"}],\"name\":\"tokenGrant\",\"outputs\":[{\"name\":\"granter\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"vested\",\"type\":\"uint256\"},{\"name\":\"start\",\"type\":\"uint64\"},{\"name\":\"cliff\",\"type\":\"uint64\"},{\"name\":\"vesting\",\"type\":\"uint64\"},{\"name\":\"revokable\",\"type\":\"bool\"},{\"name\":\"burnsOnRevoke\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"STAGE_TWO_TIME_END\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"lastTokenIsTransferableDate\",\"outputs\":[{\"name\":\"date\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ALLOC_WINGS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"STAGE_ONE_TIME_END\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_wei\",\"type\":\"uint256\"},{\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"calcAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ALLOC_CROWDSALE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPriceRate\",\"outputs\":[{\"name\":\"o_rate\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"privateStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_halted\",\"type\":\"bool\"}],\"name\":\"toggleHalt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRICE_STAGE_ONE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_start\",\"type\":\"uint64\"},{\"name\":\"_cliff\",\"type\":\"uint64\"},{\"name\":\"_vesting\",\"type\":\"uint64\"},{\"name\":\"_revokable\",\"type\":\"bool\"},{\"name\":\"_burnsOnRevoke\",\"type\":\"bool\"}],\"name\":\"grantVestedTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"drain\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"prebuyPortionTotal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hardcapInEth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ALLOC_TEAM\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"halted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"etherRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"holder\",\"type\":\"address\"},{\"name\":\"time\",\"type\":\"uint64\"}],\"name\":\"transferableTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preBuyPrice1\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preBuyPrice2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokens\",\"type\":\"uint256\"},{\"name\":\"time\",\"type\":\"uint256\"},{\"name\":\"start\",\"type\":\"uint256\"},{\"name\":\"cliff\",\"type\":\"uint256\"},{\"name\":\"vesting\",\"type\":\"uint256\"}],\"name\":\"calculateVestedTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRICE_STAGE_THREE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wpxTeamAddress\",\"type\":\"address\"},{\"name\":\"_wpxFundAddress\",\"type\":\"address\"}],\"name\":\"grantVested\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_holder\",\"type\":\"address\"},{\"name\":\"_grantId\",\"type\":\"uint256\"}],\"name\":\"revokeTokenGrant\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preBuyPrice3\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRICE_STANDARD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"STAGE_THREE_TIME_END\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"preBuy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_multisig\",\"type\":\"address\"},{\"name\":\"_wpxTeam\",\"type\":\"address\"},{\"name\":\"_publicStartTime\",\"type\":\"uint256\"},{\"name\":\"_privateStartTime\",\"type\":\"uint256\"},{\"name\":\"_hardcapInEth\",\"type\":\"uint256\"},{\"name\":\"_prebuy1\",\"type\":\"address\"},{\"name\":\"_preBuyPrice1\",\"type\":\"uint256\"},{\"name\":\"_prebuy2\",\"type\":\"address\"},{\"name\":\"_preBuyPrice2\",\"type\":\"uint256\"},{\"name\":\"_prebuy3\",\"type\":\"address\"},{\"name\":\"_preBuyPrice3\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"PreBuy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Buy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"grantId\",\"type\":\"uint256\"}],\"name\":\"NewTokenGrant\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"WPXToken","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000001d5353124a0552b7a5969b6924227d6cee3d1d2b00000000000000000000000014a681b1362872a490ddf9e34d2cf34300c94867000000000000000000000000000000000000000000000000000000005a180510000000000000000000000000000000000000000000000000000000005a180510000000000000000000000000000000000000000000000000000000000000681a0000000000000000000000002d795905a3e3943900ac38ce58e53a2ce1f005f900000000000000000000000000000000000000000000000000000000000007d00000000000000000000000002d795905a3e3943900ac38ce58e53a2ce1f005f900000000000000000000000000000000000000000000000000000000000007d00000000000000000000000002d795905a3e3943900ac38ce58e53a2ce1f005f900000000000000000000000000000000000000000000000000000000000007d0","Library":"","SwarmSource":"bzzr://fd51d23ff478714c9695a611193e4f8c56d82e519fb310d14178c38d911119b7"}]}