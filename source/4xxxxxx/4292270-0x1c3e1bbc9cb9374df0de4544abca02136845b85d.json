{"status":"1","message":"OK","result":[{"SourceCode":"//A BurnableOpenPayment is instantiated with a specified payer and a commitThreshold.\r\n//The recipient is not set when the contract is instantiated.\r\n\r\n//The constructor is payable, so the contract can be instantiated with initial funds.\r\n//In addition, anyone can add more funds to the Payment by calling addFunds.\r\n\r\n//All behavior of the contract is directed by the payer, but\r\n//the payer can never directly recover the payment,\r\n//unless he calls the recover() function before anyone else commit()s.\r\n\r\n//If the BOP is in the Open state,\r\n//anyone can become the recipient by contributing the commitThreshold with commit().\r\n//This changes the state from Open to Committed. The BOP will never return to the Open state.\r\n//The recipient will never be changed once it's been set via commit().\r\n\r\n//In the committed state,\r\n//the payer can at any time choose to burn or release to the recipient any amount of funds.\r\n\r\npragma solidity ^ 0.4.10;\r\ncontract BurnableOpenPaymentFactory {\r\n\tevent NewBOP(address indexed contractAddress, address newBOPAddress, address payer, uint commitThreshold, bool hasDefaultRelease, uint defaultTimeoutLength, string initialPayerString);\r\n\r\n\t//contract address array\r\n\taddress[]public contracts;\r\n\r\n\tfunction getContractCount()\r\n\tpublic\r\n\tconstant\r\n\treturns(uint) {\r\n\t\treturn contracts.length;\r\n\t}\r\n\r\n\tfunction newBurnableOpenPayment(address payer, uint commitThreshold, bool hasDefaultRelease, uint defaultTimeoutLength, string initialPayerString)\r\n\tpublic\r\n\tpayable\r\n\treturns(address) {\r\n\t\t//pass along any ether to the constructor\r\n\t\taddress newBOPAddr = (new BurnableOpenPayment).value(msg.value)(payer, commitThreshold, hasDefaultRelease, defaultTimeoutLength, initialPayerString);\r\n\t\tNewBOP(this, newBOPAddr, payer, commitThreshold, hasDefaultRelease, defaultTimeoutLength, initialPayerString);\r\n\r\n\t\t//save created BOPs in contract array\r\n\t\tcontracts.push(newBOPAddr);\r\n\r\n\t\treturn newBOPAddr;\r\n\t}\r\n}\r\n\r\ncontract BurnableOpenPayment {\r\n\t//BOP will start with a payer but no recipient (recipient==0x0)\r\n\taddress public payer;\r\n\taddress public recipient;\r\n\taddress constant burnAddress = 0x0;\r\n\t\r\n\t//Set to true if fundsRecovered is called\r\n\tbool recovered = false;\r\n\r\n\t//Note that these will track, but not influence the BOP logic.\r\n\tuint public amountDeposited;\r\n\tuint public amountBurned;\r\n\tuint public amountReleased;\r\n\r\n\t//payerString and recipientString enable rudimentary communication/publishing.\r\n\t//Although the two parties might quickly move to another medium with better privacy or convenience,\r\n\t//beginning with this is nice because it's already trustless/transparent/signed/pseudonymous/etc.\r\n\tstring public payerString;\r\n\tstring public recipientString;\r\n\r\n\t//Amount of ether a prospective recipient must pay to permanently become the recipient. See commit().\r\n\tuint public commitThreshold;\r\n\r\n\t//What if the payer falls off the face of the planet?\r\n\t//A BOP is instantiated with or without defaultRelease, which cannot be changed after instantiation.\r\n\tbool public hasDefaultRelease;\r\n\r\n\t//if hasDefaultRelease == True, how long should we wait allowing the default release to be called?\r\n\tuint public defaultTimeoutLength;\r\n\r\n\t//Calculated from defaultTimeoutLength in commit(),\r\n\t//and recaluclated whenever the payer (or possibly the recipient) calls delayhasDefaultRelease()\r\n\tuint public defaultTriggerTime;\r\n\r\n\t//Most action happens in the Committed state.\r\n\tenum State {\r\n\t\tOpen,\r\n\t\tCommitted,\r\n\t\tExpended\r\n\t}\r\n\tState public state;\r\n\t//Note that a BOP cannot go from Committed back to Open, but it can go from Expended back to Committed\r\n\t//(this would retain the committed recipient). Search for Expended and Unexpended events to see how this works.\r\n\r\n\tmodifier inState(State s) {\r\n\t\trequire(s == state);\r\n\t\t_;\r\n\t}\r\n\tmodifier onlyPayer() {\r\n\t\trequire(msg.sender == payer);\r\n\t\t_;\r\n\t}\r\n\tmodifier onlyRecipient() {\r\n\t\trequire(msg.sender == recipient);\r\n\t\t_;\r\n\t}\r\n\tmodifier onlyPayerOrRecipient() {\r\n\t\trequire((msg.sender == payer) || (msg.sender == recipient));\r\n\t\t_;\r\n\t}\r\n\r\n\tevent Created(address indexed contractAddress, address payer, uint commitThreshold, bool hasDefaultRelease, uint defaultTimeoutLength, string initialPayerString);\r\n\tevent FundsAdded(uint amount); //The payer has added funds to the BOP.\r\n\tevent PayerStringUpdated(string newPayerString);\r\n\tevent RecipientStringUpdated(string newRecipientString);\r\n\tevent FundsRecovered();\r\n\tevent Committed(address recipient);\r\n\tevent FundsBurned(uint amount);\r\n\tevent FundsReleased(uint amount);\r\n\tevent Expended();\r\n\tevent Unexpended();\r\n\tevent DefaultReleaseDelayed();\r\n\tevent DefaultReleaseCalled();\r\n\r\n\tfunction BurnableOpenPayment(address _payer, uint _commitThreshold, bool _hasDefaultRelease, uint _defaultTimeoutLength, string _payerString)\r\n\tpublic\r\n\tpayable {\r\n\t\tCreated(this, _payer, _commitThreshold, _hasDefaultRelease, _defaultTimeoutLength, _payerString);\r\n\r\n\t\tif (msg.value > 0) {\r\n\t\t\tFundsAdded(msg.value);\r\n\t\t\tamountDeposited += msg.value;\r\n\t\t}\r\n\r\n\t\tstate = State.Open;\r\n\t\tpayer = _payer;\r\n\r\n\t\tcommitThreshold = _commitThreshold;\r\n\r\n\t\thasDefaultRelease = _hasDefaultRelease;\r\n\t\tif (hasDefaultRelease)\r\n\t\t\tdefaultTimeoutLength = _defaultTimeoutLength;\r\n\r\n\t\tpayerString = _payerString;\r\n\t}\r\n\r\n\tfunction getFullState()\r\n\tpublic\r\n\tconstant\r\n\treturns(State, address, string, address, string, uint, uint, uint, uint, uint, bool, uint, uint) {\r\n\t\treturn (state, payer, payerString, recipient, recipientString, this.balance, commitThreshold, amountDeposited, amountBurned, amountReleased, hasDefaultRelease, defaultTimeoutLength, defaultTriggerTime);\r\n\t}\r\n\r\n\tfunction addFunds()\r\n\tpublic\r\n\tpayable {\r\n\t\trequire(msg.value > 0);\r\n\r\n\t\tFundsAdded(msg.value);\r\n\t\tamountDeposited += msg.value;\r\n\t\tif (state == State.Expended) {\r\n\t\t\tstate = State.Committed;\r\n\t\t\tUnexpended();\r\n\t\t}\r\n\t}\r\n\r\n\tfunction recoverFunds()\r\n\tpublic\r\n\tonlyPayer()\r\n\tinState(State.Open) {\r\n\t    recovered = true;\r\n\t\tFundsRecovered();\r\n\t\tselfdestruct(payer);\r\n\t}\r\n\r\n\tfunction commit()\r\n\tpublic\r\n\tinState(State.Open)\r\n\tpayable{\r\n\t\trequire(msg.value >= commitThreshold);\r\n\r\n\t\tif (msg.value > 0) {\r\n\t\t\tFundsAdded(msg.value);\r\n\t\t\tamountDeposited += msg.value;\r\n\t\t}\r\n\r\n\t\trecipient = msg.sender;\r\n\t\tstate = State.Committed;\r\n\t\tCommitted(recipient);\r\n\r\n\t\tif (hasDefaultRelease) {\r\n\t\t\tdefaultTriggerTime = now + defaultTimeoutLength;\r\n\t\t}\r\n\t}\r\n\r\n\tfunction internalBurn(uint amount)\r\n\tprivate\r\n\tinState(State.Committed) {\r\n\t\tburnAddress.transfer(amount);\r\n\r\n\t\tamountBurned += amount;\r\n\t\tFundsBurned(amount);\r\n\r\n\t\tif (this.balance == 0) {\r\n\t\t\tstate = State.Expended;\r\n\t\t\tExpended();\r\n\t\t}\r\n\t}\r\n\r\n\tfunction burn(uint amount)\r\n\tpublic\r\n\tinState(State.Committed)\r\n\tonlyPayer() {\r\n\t\tinternalBurn(amount);\r\n\t}\r\n\r\n\tfunction internalRelease(uint amount)\r\n\tprivate\r\n\tinState(State.Committed) {\r\n\t\trecipient.transfer(amount);\r\n\r\n\t\tamountReleased += amount;\r\n\t\tFundsReleased(amount);\r\n\r\n\t\tif (this.balance == 0) {\r\n\t\t\tstate = State.Expended;\r\n\t\t\tExpended();\r\n\t\t}\r\n\t}\r\n\r\n\tfunction release(uint amount)\r\n\tpublic\r\n\tinState(State.Committed)\r\n\tonlyPayer() {\r\n\t\tinternalRelease(amount);\r\n\t}\r\n\r\n\tfunction setPayerString(string _string)\r\n\tpublic\r\n\tonlyPayer() {\r\n\t\tpayerString = _string;\r\n\t\tPayerStringUpdated(payerString);\r\n\t}\r\n\r\n\tfunction setRecipientString(string _string)\r\n\tpublic\r\n\tonlyRecipient() {\r\n\t\trecipientString = _string;\r\n\t\tRecipientStringUpdated(recipientString);\r\n\t}\r\n\r\n\tfunction delayDefaultRelease()\r\n\tpublic\r\n\tonlyPayerOrRecipient()\r\n\tinState(State.Committed) {\r\n\t\trequire(hasDefaultRelease);\r\n\r\n\t\tdefaultTriggerTime = now + defaultTimeoutLength;\r\n\t\tDefaultReleaseDelayed();\r\n\t}\r\n\r\n\tfunction callDefaultRelease()\r\n\tpublic\r\n\tonlyPayerOrRecipient()\r\n\tinState(State.Committed) {\r\n\t\trequire(hasDefaultRelease);\r\n\t\trequire(now >= defaultTriggerTime);\r\n\r\n\t\tif (hasDefaultRelease) {\r\n\t\t\tinternalRelease(this.balance);\r\n\t\t}\r\n\t\tDefaultReleaseCalled();\r\n\t}\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"payer\",\"type\":\"address\"},{\"name\":\"commitThreshold\",\"type\":\"uint256\"},{\"name\":\"hasDefaultRelease\",\"type\":\"bool\"},{\"name\":\"defaultTimeoutLength\",\"type\":\"uint256\"},{\"name\":\"initialPayerString\",\"type\":\"string\"}],\"name\":\"newBurnableOpenPayment\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"contracts\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getContractCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newBOPAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"payer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"commitThreshold\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"hasDefaultRelease\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"defaultTimeoutLength\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"initialPayerString\",\"type\":\"string\"}],\"name\":\"NewBOP\",\"type\":\"event\"}]","ContractName":"BurnableOpenPaymentFactory","CompilerVersion":"v0.4.16+commit.d7661dd9","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://0a45a93c6f0dd9ba65f67b90d731df6abeaf68bc317044086e2c2b9afa56166e"}]}