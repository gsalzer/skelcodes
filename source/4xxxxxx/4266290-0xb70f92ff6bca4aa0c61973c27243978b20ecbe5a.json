{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    function Ownable() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        assert(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) onlyOwner {\r\n        assert(newOwner != address(0));\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n/*\r\n * @title Haltable\r\n * @dev Abstract contract that allows children to implement an emergency stop mechanism.\r\n * @dev Differs from Pausable by causing a throw when in halt mode.\r\n */\r\ncontract Haltable is Ownable {\r\n    bool public halted;\r\n\r\n    modifier stopInEmergency {\r\n        assert(!halted);\r\n        _;\r\n    }\r\n\r\n    modifier onlyInEmergency {\r\n        assert(halted);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Called by the owner on emergency, triggers stopped state.\r\n     */\r\n    function halt() external onlyOwner {\r\n        halted = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Called by the owner on end of emergency, returns to normal state.\r\n     */\r\n    function unhalt() external onlyOwner onlyInEmergency {\r\n        halted = false;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n    uint256 public totalSupply;\r\n    function balanceOf(address who) constant returns (uint256);\r\n    function transfer(address to, uint256 value) returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n    function allowance(address owner, address spender) constant returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value) returns (bool);\r\n    function approve(address spender, uint256 value) returns (bool);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) balances;\r\n\r\n    /**\r\n     * @dev transfer token for a specified address\r\n     * @param _to The address to transfer to.\r\n     * @param _value The amount to be transferred.\r\n     */\r\n    function transfer(address _to, uint256 _value) onlyPayloadSize(2 * 32) returns (bool) {\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the balance of the specified address.\r\n     * @param _owner The address to query the the balance of.\r\n     * @return An uint256 representing the amount owned by the passed address.\r\n     */\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    /**\r\n     * @dev Fix for the ERC20 short address attack\r\n     * @dev see: http://vessenes.com/the-erc20-short-address-attack-explained/\r\n     * @dev see: https://www.reddit.com/r/ethereum/comments/63s917/worrysome_bug_exploit_with_erc20_token/dfwmhc3/\r\n     */\r\n    modifier onlyPayloadSize(uint size) {\r\n        assert (msg.data.length >= size + 4);\r\n        _;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another\r\n     * @param _from address The address which you want to send tokens from\r\n     * @param _to address The address which you want to transfer to\r\n     * @param _value uint256 the amout of tokens to be transfered\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\r\n        var _allowance = allowed[_from][msg.sender];\r\n        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n        // assert (_value <= _allowance);\r\n        balances[_to] = balances[_to].add(_value);\r\n        balances[_from] = balances[_from].sub(_value);\r\n        allowed[_from][msg.sender] = _allowance.sub(_value);\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _value The amount of tokens to be spent.\r\n     */\r\n    function approve(address _spender, uint256 _value) returns (bool) {\r\n        // To change the approve amount you first have to reduce the addresses`\r\n        //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n        //  already 0 to mitigate the race condition described here:\r\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n        assert((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n     * @param _owner address The address which owns the funds.\r\n     * @param _spender address The address which will spend the funds.\r\n     * @return A uint256 specifing the amount of tokens still available for the spender.\r\n     */\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title MintableToken\r\n * @dev Token that can be minted by another contract until the defined cap is reached.\r\n * @dev Based on https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n */\r\ncontract MintableToken is StandardToken, Ownable {\r\n    using SafeMath for uint;\r\n\r\n    uint256 public mintableSupply;\r\n\r\n    /**\r\n     * @dev List of agents that are allowed to create new tokens\r\n     */\r\n    mapping(address => bool) public mintAgents;\r\n\r\n    event MintingAgentChanged(address addr, bool state);\r\n\r\n    /**\r\n     * @dev Mint token from pool of mintable tokens.\r\n     * @dev Only callable by the mint-agent.\r\n     */\r\n    function mint(address receiver, uint256 amount) onlyPayloadSize(2 * 32) onlyMintAgent canMint public {\r\n        mintableSupply = mintableSupply.sub(amount);\r\n        balances[receiver] = balances[receiver].add(amount);\r\n        // This will make the mint transaction appear in EtherScan.io\r\n        // We can remove this after there is a standardized minting event\r\n        Transfer(0, receiver, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Owner can allow a crowdsale contract to mint new tokens.\r\n     */\r\n    function setMintAgent(address addr, bool state) onlyOwner canMint public {\r\n        mintAgents[addr] = state;\r\n        MintingAgentChanged(addr, state);\r\n    }\r\n\r\n    modifier onlyMintAgent() {\r\n        // Only the mint-agent is allowed to mint new tokens\r\n        assert (mintAgents[msg.sender]);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Make sure we are not done yet.\r\n     */\r\n    modifier canMint() {\r\n        assert(mintableSupply > 0);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Fix for the ERC20 short address attack\r\n     * @dev see: http://vessenes.com/the-erc20-short-address-attack-explained/\r\n     * @dev see: https://www.reddit.com/r/ethereum/comments/63s917/worrysome_bug_exploit_with_erc20_token/dfwmhc3/\r\n     */\r\n    modifier onlyPayloadSize(uint size) {\r\n        assert (msg.data.length >= size + 4);\r\n        _;\r\n    }\r\n}\r\n\r\n\r\n/*\r\n * @title ReleasableToken\r\n * @dev Token that may not be transfered until it was released.\r\n */\r\ncontract ReleasableToken is ERC20, Ownable {\r\n    address public releaseAgent;\r\n    bool public released = false;\r\n\r\n    /**\r\n     * @dev One way function to release the tokens to the wild.\r\n     */\r\n    function releaseToken() public onlyReleaseAgent {\r\n        released = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Set the contract that may call the release function.\r\n     */\r\n    function setReleaseAgent(address addr) onlyOwner inReleaseState(false) public {\r\n        releaseAgent = addr;\r\n    }\r\n\r\n    function transfer(address _to, uint _value) inReleaseState(true) returns (bool) {\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint _value) inReleaseState(true) returns (bool) {\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n    /**\r\n     * @dev The function can be called only before or after the tokens have been releasesd\r\n     */\r\n    modifier inReleaseState(bool releaseState) {\r\n        assert(releaseState == released);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev The function can be called only by a whitelisted release agent.\r\n     */\r\n    modifier onlyReleaseAgent() {\r\n        assert(msg.sender == releaseAgent);\r\n        _;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title EventChain\r\n * @dev Contract for the EventChain token.\r\n */\r\ncontract EventChain is ReleasableToken, MintableToken {\r\n    string public name = \"EventChain\";\r\n    string public symbol = \"EVC\";\r\n    uint8 public decimals = 18;\r\n    \r\n    function EventChain() {\r\n        // total supply is 84 million tokens\r\n        totalSupply = 84000000 ether;\r\n        mintableSupply = totalSupply;\r\n        // allow deployer to unlock token transfer and mint tokens\r\n        setReleaseAgent(msg.sender);\r\n        setMintAgent(msg.sender, true);\r\n    }\r\n}\r\n\r\n\r\n/*\r\n * @title Crowdsale\r\n * @dev Contract to manage the EVC crowdsale\r\n * @dev Using assert over assert within the contract in order to generate error opscodes (0xfe), that will properly show up in etherscan\r\n * @dev The assert error opscode (0xfd) will show up in etherscan after the metropolis release\r\n * @dev see: https://ethereum.stackexchange.com/a/24185\r\n */\r\ncontract EventChainCrowdsale is Haltable {\r\n    using SafeMath for uint256;\r\n\r\n    enum State{Ready, Phase1, Phase2, Phase3, CrowdsaleEnded}\r\n\r\n    uint256 constant public PHASE2_SUPPLY = 21000000 ether;\r\n    uint256 constant public PHASE3_SUPPLY = 22600000 ether;\r\n\r\n    uint256 constant public PHASE1_RATE = 1140;\r\n    uint256 constant public PHASE2_RATE = 920;\r\n    uint256 constant public PHASE3_RATE = 800;\r\n\r\n    uint256 constant public MIN_INVEST = 10 finney;\r\n    uint256 constant public BTWO_CLAIM_PERCENT = 3;\r\n\r\n    EventChain public evc;\r\n    address public beneficiary;\r\n    address public beneficiaryTwo;\r\n    uint256 public totalRaised;\r\n\r\n    State public currentState;\r\n    uint256 public currentRate; \r\n    uint256 public currentSupply;\r\n    uint256 public currentTotalSupply;\r\n\r\n    event StateChanged(State from, State to);\r\n    event FundsClaimed(address receiver, uint256 claim, string crowdsalePhase);\r\n    event InvestmentMade(\r\n        address investor,\r\n        uint256 weiAmount,\r\n        uint256 tokenAmount,\r\n        string crowdsalePhase,\r\n        bytes calldata\r\n    );\r\n\r\n    function EventChainCrowdsale(EventChain _evc, address _beneficiary, address _beneficiaryTwo) {\r\n        assert(address(_evc) != 0x0);\r\n        assert(address(_beneficiary) != 0x0);\r\n        assert(address(_beneficiaryTwo) != 0x0);\r\n\r\n        beneficiary = _beneficiary;\r\n        beneficiaryTwo = _beneficiaryTwo;\r\n        evc = _evc;\r\n    }\r\n\r\n    function() payable onlyWhenCrowdsaleIsOpen stopInEmergency external {\r\n        assert(msg.data.length <= 68); // 64 bytes data limit plus 4 for the prefix\r\n        assert(msg.value >= MIN_INVEST);\r\n\r\n        uint256 tokens = msg.value.mul(currentRate);\r\n        currentSupply = currentSupply.sub(tokens);\r\n        evc.mint(msg.sender, tokens);\r\n        totalRaised = totalRaised.add(msg.value);\r\n\r\n        InvestmentMade(\r\n            msg.sender,\r\n            msg.value,\r\n            tokens,\r\n            currentStateToString(),\r\n            msg.data\r\n        );\r\n    }\r\n\r\n    function startPhase1() onlyOwner inState(State.Ready) stopInEmergency external {\r\n        currentTotalSupply = evc.mintableSupply().sub(PHASE2_SUPPLY).sub(PHASE3_SUPPLY);\r\n        currentSupply = currentTotalSupply;\r\n        currentRate = PHASE1_RATE;\r\n        currentState = State.Phase1;\r\n\r\n        StateChanged(State.Ready, currentState);\r\n    }\r\n\r\n    function startPhase2() onlyOwner inState(State.Phase1) stopInEmergency external {\r\n        phaseClaim();\r\n\r\n        currentTotalSupply = currentSupply.add(PHASE2_SUPPLY);\r\n        currentSupply = currentTotalSupply;\r\n        currentRate = PHASE2_RATE;\r\n        currentState = State.Phase2;\r\n\r\n        StateChanged(State.Phase1, currentState);\r\n    }\r\n\r\n    function startPhase3() onlyOwner inState(State.Phase2) stopInEmergency external {\r\n        phaseClaim();\r\n\r\n        currentTotalSupply = currentSupply.add(PHASE3_SUPPLY);\r\n        currentSupply = currentTotalSupply;\r\n        currentRate = PHASE3_RATE;\r\n        currentState = State.Phase3;\r\n\r\n        StateChanged(State.Phase2, currentState);\r\n    }\r\n\r\n    function endCrowdsale() onlyOwner inState(State.Phase3) stopInEmergency external {\r\n        phaseClaim();\r\n\r\n        currentTotalSupply = 0;\r\n        currentSupply = 0;\r\n        currentRate = 0;\r\n        currentState = State.CrowdsaleEnded;\r\n\r\n        StateChanged(State.Phase3, currentState);\r\n    }\r\n\r\n    function currentStateToString() constant returns (string) {\r\n        if (currentState == State.Ready) {\r\n            return \"Ready\";\r\n        } else if (currentState == State.Phase1) {\r\n            return \"Phase 1\";\r\n        } else if (currentState == State.Phase2) {\r\n            return \"Phase 2\";\r\n        } else if (currentState == State.Phase3) {\r\n            return \"Phase 3\";\r\n        } else {\r\n            return \"Crowdsale ended\";\r\n        }\r\n    }\r\n\r\n    function phaseClaim() internal {\r\n        uint256 beneficiaryTwoClaim = this.balance.div(100).mul(BTWO_CLAIM_PERCENT);\r\n        beneficiaryTwo.transfer(beneficiaryTwoClaim);\r\n        FundsClaimed(beneficiaryTwo, beneficiaryTwoClaim, currentStateToString());\r\n\r\n        uint256 beneficiaryClaim = this.balance;\r\n        beneficiary.transfer(this.balance);\r\n        FundsClaimed(beneficiary, beneficiaryClaim, currentStateToString());\r\n    }\r\n\r\n    modifier inState(State _state) {\r\n        assert(currentState == _state);\r\n        _;\r\n    }\r\n\r\n    modifier onlyWhenCrowdsaleIsOpen() {\r\n        assert(currentState == State.Phase1 || currentState == State.Phase2 || currentState == State.Phase3);\r\n        _;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"currentState\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"evc\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MIN_INVEST\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beneficiaryTwo\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"endCrowdsale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentStateToString\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PHASE3_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PHASE3_RATE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentTotalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"halt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startPhase3\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BTWO_CLAIM_PERCENT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PHASE2_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startPhase1\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PHASE1_RATE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PHASE2_RATE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"halted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unhalt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startPhase2\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_evc\",\"type\":\"address\"},{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_beneficiaryTwo\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"uint8\"}],\"name\":\"StateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"claim\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"crowdsalePhase\",\"type\":\"string\"}],\"name\":\"FundsClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"weiAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"crowdsalePhase\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"calldata\",\"type\":\"bytes\"}],\"name\":\"InvestmentMade\",\"type\":\"event\"}]","ContractName":"EventChainCrowdsale","CompilerVersion":"v0.4.16+commit.d7661dd9","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000b62d18dea74045e822352ce4b3ee77319dc5ff2f0000000000000000000000008947a66b513b40e3ad2b929b6022feeb12f81ba3000000000000000000000000d655f24c3134f445e0f9a5b20c10e686f0271b66","Library":"","SwarmSource":"bzzr://fb7c7e3dc58f60dbf88aa5d6f0730384947685fc561ca405c24839c345e73f99"}]}