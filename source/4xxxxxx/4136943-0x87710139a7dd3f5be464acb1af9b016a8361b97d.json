{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\n// import \"browser/ERC223BasicToken.sol\";\r\n\r\n// import \"browser/SafeMath.sol\";\r\n\r\n/**\r\n * Math operations with safety checks\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint a, uint b) internal returns (uint) {\r\n    uint c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint a, uint b) internal returns (uint) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint a, uint b) internal returns (uint) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint a, uint b) internal returns (uint) {\r\n    uint c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n\r\n  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n    return a < b ? a : b;\r\n  }\r\n\r\n  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    return a < b ? a : b;\r\n  }\r\n\r\n  function assert(bool assertion) internal {\r\n    if (!assertion) {\r\n      throw;\r\n    }\r\n  }\r\n}\r\n\r\n// end import\r\n\r\n\r\ncontract ERC223Basic {\r\n  uint public totalSupply;\r\n  function balanceOf(address who) constant returns (uint);\r\n  function transfer(address to, uint value);\r\n  function transfer(address to, uint value, bytes data);\r\n  event Transfer(address indexed from, address indexed to, uint value, bytes indexed data);\r\n}\r\n\r\n /*\r\n * Contract that is working with ERC223 tokens\r\n */\r\ncontract ERC223ReceivingContract {\r\n  function tokenFallback(address _from, uint _value, bytes _data);\r\n}\r\n\r\n\r\ncontract ERC223BasicToken is ERC223Basic {\r\n  using SafeMath for uint;\r\n\r\n  mapping(address => uint) balances;\r\n\r\n  // Function that is called when a user or another contract wants to transfer funds .\r\n  function transfer(address to, uint value, bytes data) {\r\n    // Standard function transfer similar to ERC20 transfer with no _data .\r\n    // Added due to backwards compatibility reasons .\r\n    uint codeLength;\r\n\r\n    assembly {\r\n      // Retrieve the size of the code on target address, this needs assembly .\r\n      codeLength := extcodesize(to)\r\n    }\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(value);\r\n    balances[to] = balances[to].add(value);\r\n    if (codeLength > 0) {\r\n      ERC223ReceivingContract receiver = ERC223ReceivingContract(to);\r\n      receiver.tokenFallback(msg.sender, value, data);\r\n    }\r\n    Transfer(msg.sender, to, value, data);\r\n  }\r\n\r\n  // Standard function transfer similar to ERC20 transfer with no _data .\r\n  // Added due to backwards compatibility reasons .\r\n  function transfer(address to, uint value) {\r\n    uint codeLength;\r\n\r\n    assembly {\r\n      // Retrieve the size of the code on target address, this needs assembly .\r\n      codeLength := extcodesize(to)\r\n    }\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(value);\r\n    balances[to] = balances[to].add(value);\r\n    if (codeLength > 0) {\r\n      ERC223ReceivingContract receiver = ERC223ReceivingContract(to);\r\n      bytes memory empty;\r\n      receiver.tokenFallback(msg.sender, value, empty);\r\n    }\r\n    Transfer(msg.sender, to, value, empty);\r\n  }\r\n\r\n  function balanceOf(address _owner) constant returns (uint balance) {\r\n    return balances[_owner];\r\n  }\r\n}\r\n// end import\r\n\r\ncontract PreTgeExperty is ERC223BasicToken {\r\n\r\n  // token constants\r\n  string public constant name = \"Pre-TGE Experty Token\";\r\n  string public constant symbol = \"PEXY\";\r\n  uint8 public constant decimals = 18;\r\n\r\n  // pre-tge variables\r\n  uint8 public basicRate = 100;\r\n  uint8 public preTgeBonus = 45;\r\n  address public preTgeManager;\r\n  address public multisigWallet;\r\n  bool public isClosed = false;\r\n\r\n  // keep track of burned tokens here\r\n  mapping(address => uint) public burnedTokens;\r\n  \r\n  // preICO constructor\r\n  function PreTgeExperty() {\r\n    multisigWallet = 0x60f4025c67477edf3a8eda7d1bf6b3b035a664eb;\r\n    preTgeManager = 0x009A55A3c16953A359484afD299ebdC444200EdB;\r\n  }\r\n\r\n  // contribute function\r\n  function() payable {\r\n    // throw if pre-tge is closed\r\n    if (isClosed) throw;\r\n\r\n    uint ethers = msg.value;\r\n\r\n    // calculate tokens amount and pre-tge bonus\r\n    uint tokens = ethers * basicRate;\r\n    uint bonus = ethers * preTgeBonus;\r\n\r\n    // generate new tokens\r\n    uint sum = tokens + bonus;\r\n    balances[msg.sender] += sum;\r\n    totalSupply += sum;\r\n\r\n    // send ethers to secure wallet\r\n    multisigWallet.transfer(ethers);\r\n  }\r\n\r\n  // allow to burn pre-tge tokens in order to teleport them to new contract\r\n  function burnTokens(uint amount) {\r\n    if (amount > balances[msg.sender]) throw;\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(amount);\r\n    burnedTokens[msg.sender] = burnedTokens[msg.sender].add(amount);\r\n  }\r\n\r\n  // allow contract manager to decrease bonus over time\r\n  function changeBonus(uint8 _preTgeBonus) {\r\n    if (msg.sender != preTgeManager) throw;\r\n\r\n    // we can only decrease bonus\r\n    if (_preTgeBonus > preTgeBonus) throw;\r\n\r\n    preTgeBonus = _preTgeBonus;\r\n  }\r\n\r\n  // allow contract manager to close pre-tge\r\n  function close() {\r\n    if (msg.sender != preTgeManager) throw;\r\n\r\n    isClosed = true;\r\n  }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"basicRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"close\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_preTgeBonus\",\"type\":\"uint8\"}],\"name\":\"changeBonus\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnTokens\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"multisigWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preTgeBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"burnedTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isClosed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preTgeManager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"PreTgeExperty","CompilerVersion":"v0.4.15+commit.bbb8e64f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://815c806bbc6cf1b1e30b3269f797f6850c77c1edb7011c279ec92c8f160fb3b7"}]}