{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\ncontract ERC20 {\r\n\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n    function totalSupply() external constant returns (uint);\r\n\r\n    function balanceOf(address _owner) external constant returns (uint256);\r\n\r\n    function transfer(address _to, uint256 _value) external returns (bool);\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool);\r\n\r\n    function approve(address _spender, uint256 _value) external returns (bool);\r\n\r\n    function allowance(address _owner, address _spender) external constant returns (uint256);\r\n\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n    /*\r\n        @return sum of a and b\r\n    */\r\n    function ADD (uint256 a, uint256 b) pure internal returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n\r\n    /*\r\n        @return difference of a and b\r\n    */\r\n    function SUB (uint256 a, uint256 b) pure internal returns (uint256) {\r\n        assert(a >= b);\r\n        return a - b;\r\n    }\r\n    \r\n}\r\n\r\ncontract Ownable {\r\n\r\n\r\n    address owner;\r\n\r\n    event OwnershipTransferred(address indexed _previousOwner, address indexed _newOwner);\r\n\r\n    function Ownable() public {\r\n        owner = msg.sender;\r\n        OwnershipTransferred (address(0), owner);\r\n    }\r\n\r\n    function transferOwnership(address _newOwner)\r\n        public\r\n        onlyOwner\r\n        notZeroAddress(_newOwner)\r\n    {\r\n        owner = _newOwner;\r\n        OwnershipTransferred(msg.sender, _newOwner);\r\n    }\r\n\r\n    //Only owner can call function\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    modifier notZeroAddress(address _address) {\r\n        require(_address != address(0));\r\n        _;\r\n    }\r\n\r\n}\r\n\r\n/*\r\n\tTrustable saves trusted addresses\r\n*/\r\ncontract Trustable is Ownable {\r\n\r\n\r\n    //Only trusted addresses are able to transfer tokens during the Crowdsale\r\n    mapping (address => bool) trusted;\r\n\r\n    event AddTrusted (address indexed _trustable);\r\n    event RemoveTrusted (address indexed _trustable);\r\n\r\n    function Trustable() public {\r\n        trusted[msg.sender] = true;\r\n        AddTrusted(msg.sender);\r\n    }\r\n\r\n    //Add new trusted address\r\n    function addTrusted(address _address)\r\n        external\r\n        onlyOwner\r\n        notZeroAddress(_address)\r\n    {\r\n        trusted[_address] = true;\r\n        AddTrusted(_address);\r\n    }\r\n\r\n    //Remove address from a trusted list\r\n    function removeTrusted(address _address)\r\n        external\r\n        onlyOwner\r\n        notZeroAddress(_address)\r\n    {\r\n        trusted[_address] = false;\r\n        RemoveTrusted(_address);\r\n    }\r\n\r\n}\r\n\r\ncontract Pausable is Trustable {\r\n\r\n\r\n    //To check if Token is paused\r\n    bool public paused;\r\n    //Block number on pause\r\n    uint256 public pauseBlockNumber;\r\n    //Block number on resume\r\n    uint256 public resumeBlockNumber;\r\n\r\n    event Pause(uint256 _blockNumber);\r\n    event Unpause(uint256 _blockNumber);\r\n\r\n    function pause()\r\n        public\r\n        onlyOwner\r\n        whenNotPaused\r\n    {\r\n        paused = true;\r\n        pauseBlockNumber = block.number;\r\n        resumeBlockNumber = 0;\r\n        Pause(pauseBlockNumber);\r\n    }\r\n\r\n    function unpause()\r\n        public\r\n        onlyOwner\r\n        whenPaused\r\n    {\r\n        paused = false;\r\n        resumeBlockNumber = block.number;\r\n        pauseBlockNumber = 0;\r\n        Unpause(resumeBlockNumber);\r\n    }\r\n\r\n    modifier whenNotPaused {\r\n        require(!paused);\r\n        _;\r\n    }\r\n\r\n    modifier whenPaused {\r\n        require(paused);\r\n        _;\r\n    }\r\n\r\n}\r\n\r\n/*\r\n\tContract determines token\r\n*/\r\ncontract Token is ERC20, Pausable{\r\n\r\n\r\n    using SafeMath for uint256;\r\n\r\n    //Total amount of Outing\r\n    uint256 _totalSupply = 56000000000000000; \r\n\r\n    //Balances for each account\r\n    mapping (address => uint256)  balances;\r\n    //Owner of the account approves the transfer of an amount to another account\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n\r\n    //Notifies users about the amount burnt\r\n    event Burn(address indexed _from, uint256 _value);\r\n    //Notifies users about end block change\r\n    event CrowdsaleEndChanged (uint256 _crowdsaleEnd, uint256 _newCrowdsaleEnd);\r\n\r\n    //return _totalSupply of the Token\r\n    function totalSupply() external constant returns (uint256 totalTokenSupply) {\r\n        totalTokenSupply = _totalSupply;\r\n    }\r\n\r\n    //What is the balance of a particular account?\r\n    function balanceOf(address _owner)\r\n        external\r\n        constant\r\n        returns (uint256 balance)\r\n    {\r\n        return balances[_owner];\r\n    }\r\n\r\n    //Transfer the balance from owner's account to another account\r\n    function transfer(address _to, uint256 _amount)\r\n        external\r\n        notZeroAddress(_to)\r\n        whenNotPaused\r\n        returns (bool success)\r\n    {\r\n        balances[msg.sender] = balances[msg.sender].SUB(_amount);\r\n        balances[_to] = balances[_to].ADD(_amount);\r\n        Transfer(msg.sender, _to, _amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _amount)\r\n        external\r\n        notZeroAddress(_to)\r\n        whenNotPaused\r\n        returns (bool success)\r\n    {\r\n        //Require allowance to be not too big\r\n        require(allowed[_from][msg.sender] >= _amount);\r\n        balances[_from] = balances[_from].SUB(_amount);\r\n        balances[_to] = balances[_to].ADD(_amount);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].SUB(_amount);\r\n        Transfer(_from, _to, _amount);\r\n        return true;\r\n    }\r\n\r\n    // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\r\n    // If this function is called again it overwrites the current allowance with _value.\r\n    function approve(address _spender, uint256 _amount)\r\n        external\r\n        whenNotPaused\r\n        notZeroAddress(_spender)\r\n        returns (bool success)\r\n    {\r\n        allowed[msg.sender][_spender] = _amount;\r\n        Approval(msg.sender, _spender, _amount);\r\n        return true;\r\n    }\r\n\r\n    //Return how many tokens left that you can spend from\r\n    function allowance(address _owner, address _spender)\r\n        external\r\n        constant\r\n        returns (uint256 remaining)\r\n    {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    function increaseApproval(address _spender, uint256 _addedValue)\r\n        external\r\n        whenNotPaused\r\n        returns (bool success)\r\n    {\r\n        uint256 increased = allowed[msg.sender][_spender].ADD(_addedValue);\r\n        require(increased <= balances[msg.sender]);\r\n        //Cannot approve more coins then you have\r\n        allowed[msg.sender][_spender] = increased;\r\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n    function decreaseApproval(address _spender, uint256 _subtractedValue)\r\n        external\r\n        whenNotPaused\r\n        returns (bool success)\r\n    {\r\n        uint256 oldValue = allowed[msg.sender][_spender];\r\n        if (_subtractedValue > oldValue) {\r\n            allowed[msg.sender][_spender] = 0;\r\n        } else {\r\n            allowed[msg.sender][_spender] = oldValue.SUB(_subtractedValue);\r\n        }\r\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n    function burn(uint256 _value) external returns (bool success) {\r\n        require(trusted[msg.sender]);\r\n        //Subtract from the sender\r\n        balances[msg.sender] = balances[msg.sender].SUB(_value);\r\n        //Update _totalSupply\r\n        _totalSupply = _totalSupply.SUB(_value);\r\n        Burn(msg.sender, _value);\r\n        return true;\r\n    }\r\n\r\n}\r\n\r\n/*\r\n\tContract defines specific token\r\n*/\r\ncontract OutingToken is Token{\r\n\r\n    //Name of the token\r\n    string public constant name = \"Outing\";\r\n    //Symbol of the token\r\n    string public constant symbol = \"OTG\";\r\n    //Number of decimals of Outing\r\n    uint8 public constant decimals = 8;\r\n\r\n    //Tokens allocation\r\n    //Outing Reserve wallet that will be unlocked after 0.5 year after ICO\r\n    address public constant OUTINGRESERVE = 0xB8E6C4Eab5BC0eAF1f3D8A9a59a8A26112a56fE2;\r\n    //Team wallet that will be unlocked after 1 year after ICO\r\n\r\n    address public constant TEAM = 0x0702dd2f7DC2FF1dCc6beC2De9D1e6e0d467AfaC;\r\n    //0.5 year after ICO\r\n    uint256 public UNLOCK_OUTINGRESERVE = now + 262800 minutes;\r\n    //1 year after ICO\r\n    uint256 public UNLOCK_TEAM = now + 525600 minutes;\r\n    //outing reserve wallet balance\r\n    uint256 public outingreserveBalance;\r\n    //team wallet balance\r\n    uint256 public teamBalance;\r\n\r\n    //56%\r\n    uint256 private constant OUTINGRESERVE_THOUSANDTH = 560;\r\n    //7%\r\n    uint256 private constant TEAM_THOUSANDTH = 70;\r\n    //37%\r\n    uint256 private constant ICO_THOUSANDTH = 370;\r\n    //100%\r\n    uint256 private constant DENOMINATOR = 1000;\r\n\r\n    function OutingToken() public {\r\n        //36% of _totalSupply\r\n        balances[msg.sender] = _totalSupply * ICO_THOUSANDTH / DENOMINATOR;\r\n        //56% of _totalSupply\r\n        outingreserveBalance = _totalSupply * OUTINGRESERVE_THOUSANDTH / DENOMINATOR;\r\n        //8% of _totalSupply\r\n        teamBalance = _totalSupply * TEAM_THOUSANDTH / DENOMINATOR;\r\n\r\n        Transfer (this, msg.sender, balances[msg.sender]);\r\n    }\r\n\r\n    //Check if team wallet is unlocked\r\n    function unlockTokens(address _address) external {\r\n        if (_address == OUTINGRESERVE) {\r\n            require(UNLOCK_OUTINGRESERVE <= now);\r\n            require (outingreserveBalance > 0);\r\n            balances[OUTINGRESERVE] = outingreserveBalance;\r\n            outingreserveBalance = 0;\r\n            Transfer (this, OUTINGRESERVE, balances[OUTINGRESERVE]);\r\n        } else if (_address == TEAM) {\r\n            require(UNLOCK_TEAM <= now);\r\n            require (teamBalance > 0);\r\n            balances[TEAM] = teamBalance;\r\n            teamBalance = 0;\r\n            Transfer (this, TEAM, balances[TEAM]);\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"totalTokenSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"UNLOCK_OUTINGRESERVE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"resumeBlockNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"OUTINGRESERVE\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"outingreserveBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pauseBlockNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"UNLOCK_TEAM\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"unlockTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TEAM\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addTrusted\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeTrusted\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_crowdsaleEnd\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_newCrowdsaleEnd\",\"type\":\"uint256\"}],\"name\":\"CrowdsaleEndChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_trustable\",\"type\":\"address\"}],\"name\":\"AddTrusted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_trustable\",\"type\":\"address\"}],\"name\":\"RemoveTrusted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"OutingToken","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://9476798d5a34ff64b70f34c162ad76fa2eadd5e34d5ce7195795bee6e9376ca0"}]}