{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.15;\r\n\r\n//import \"./SingleTokenCoin.sol\";\r\n//import \"./SafeMath.sol\";\r\n//import \"./AuthAdmin.sol\";\r\n// import \"./Ownable.sol\";\r\n\r\n\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public constant returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n  function mod(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a % b;\r\n    //uint256 z = a / b;\r\n    assert(a == (a / b) * b + c); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract BasicToken is ERC20Basic {\r\n    using SafeMath for uint256;\r\n    mapping(address => uint256) public balances;\r\n    mapping(address => bool) public holders;\r\n    address[] public token_holders_array;\r\n    \r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[msg.sender]);\r\n\r\n        if (!holders[_to]) {\r\n            holders[_to] = true;\r\n            token_holders_array.push(_to);\r\n        }\r\n\r\n        balances[_to] = balances[_to].add(_value);\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n\r\n\r\n        /*if (balances[msg.sender] == 0) {\r\n            uint id = get_index(msg.sender);\r\n            delete token_holders_array[id];\r\n            token_holders_array[id] = token_holders_array[token_holders_array.length - 1];\r\n            delete token_holders_array[token_holders_array.length-1];\r\n            token_holders_array.length--;\r\n        }*/\r\n\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n    \r\n    function get_index (address _whom) constant internal returns (uint256) {\r\n        for (uint256 i = 0; i<token_holders_array.length; i++) {\r\n            if (token_holders_array[i] == _whom) {\r\n                return i;\r\n            }\r\n            //require (token_holders_array[i] == _whom);\r\n        }\r\n    }\r\n    \r\n    function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n    \r\n    function count_token_holders () public constant returns (uint256) {\r\n        return token_holders_array.length;\r\n    }\r\n    \r\n    function tokenHolder(uint256 _index) public constant returns (address) {\r\n        return token_holders_array[_index];\r\n    }\r\n      \r\n}\r\n\r\ncontract StandardToken is ERC20, BasicToken {\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n    // require (_value <= _allowance);\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    if (!holders[_to]) {\r\n        holders[_to] = true;\r\n        token_holders_array.push(_to);\r\n    }\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n  \r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    // To change the approve amount you first have to reduce the addresses`\r\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n    //  already 0 to mitigate the race condition described here:\r\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  function increaseApproval (address _spender, uint256 _addedValue) public returns (bool success) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n  function decreaseApproval (address _spender, uint256 _subtractedValue) public returns (bool success) {\r\n    uint256 oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n}\r\ncontract Ownable {\r\n  address public owner;\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n \r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n}\r\n\r\ncontract MintableToken is StandardToken, Ownable {\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n  bool public mintingFinished = false;\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\r\n    totalSupply = totalSupply.add(_amount);\r\n    if (!holders[_to]) {\r\n        holders[_to] = true;\r\n        token_holders_array.push(_to);\r\n    } \r\n    balances[_to] = balances[_to].add(_amount);\r\n    Mint(_to, _amount);\r\n    Transfer(0x0, _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  function finishMinting() onlyOwner public returns (bool) {\r\n    mintingFinished = true;\r\n    MintFinished();\r\n    return true;\r\n  }\r\n}\r\n\r\ncontract SingleTokenCoin is MintableToken {\r\n  string public constant name = \"Symmetry Fund Token\";\r\n  string public constant symbol = \"SYMM\";\r\n  uint256 public constant decimals = 6;\r\n }\r\ncontract AuthAdmin {\r\n    \r\n    address[] admins_array;\r\n    address[] users_array;\r\n    \r\n    mapping (address => bool) admin_addresses;\r\n    mapping (address => bool) user_addresses;\r\n\r\n    event NewAdmin(address addedBy, address admin);\r\n    event RemoveAdmin(address removedBy, address admin);\r\n    event NewUserAdded(address addedBy, address account);\r\n    event RemoveUser(address removedBy, address account);\r\n\r\n    function AuthAdmin() public {\r\n        admin_addresses[msg.sender] = true;\r\n        NewAdmin(0, msg.sender);\r\n        admins_array.push(msg.sender);\r\n    }\r\n\r\n    function addAdmin(address _address) public {\r\n        require (isCurrentAdmin(msg.sender));\r\n        require (!admin_addresses[_address]);\r\n        admin_addresses[_address] = true;\r\n        NewAdmin(msg.sender, _address);\r\n        admins_array.push(_address);\r\n    }\r\n\r\n    function removeAdmin(address _address) public {\r\n        require(isCurrentAdmin(msg.sender));\r\n        require (_address != msg.sender);\r\n        require (admin_addresses[_address]);\r\n        admin_addresses[_address] = false;\r\n        RemoveAdmin(msg.sender, _address);\r\n    }\r\n\r\n    function add_user(address _address) public {\r\n        require (isCurrentAdmin(msg.sender));\r\n        require (!user_addresses[_address]);\r\n        user_addresses[_address] = true;\r\n        NewUserAdded(msg.sender, _address);\r\n        users_array.push(_address);\r\n    }\r\n\r\n    function remove_user(address _address) public {\r\n        require (isCurrentAdmin(msg.sender));\r\n        require (user_addresses[_address]);\r\n        user_addresses[_address] = false;\r\n        RemoveUser(msg.sender, _address);\r\n    }\r\n                    /*----------------------------\r\n                                Getters\r\n                    ----------------------------*/\r\n    \r\n    function isCurrentAdmin(address _address) public constant returns (bool) {\r\n        return admin_addresses[_address];\r\n    }\r\n\r\n    function isCurrentOrPastAdmin(address _address) public constant returns (bool) {\r\n        for (uint256 i = 0; i < admins_array.length; i++)\r\n            require (admins_array[i] == _address);\r\n                return true;\r\n        return false;\r\n    }\r\n\r\n    function isCurrentUser(address _address) public constant returns (bool) {\r\n        return user_addresses[_address];\r\n    }\r\n\r\n    function isCurrentOrPastUser(address _address) public constant returns (bool) {\r\n        for (uint256 i = 0; i < users_array.length; i++)\r\n            require (users_array[i] == _address);\r\n                return true;\r\n        return false;\r\n    }\r\n}\r\n\r\ncontract DividendManager is Ownable {\r\n    \r\n    using SafeMath for uint256;\r\n    \r\n    uint256 public dividends_share;\r\n    uint256 public reinvestment_share;\r\n    \r\n    SingleTokenCoin token;\r\n    AuthAdmin authAdmin;\r\n\r\n    mapping (address => uint256) public dividends;\r\n\r\n    event PaymentAvailable(address addr, uint256 amount);\r\n    event DividendPayment(uint256 dividend_per_token, uint256 timestamp);\r\n    event DevidendsSnapshot(address _addr, uint256 _value);\r\n    event ReinvestmentWithdrawal(address _owner, uint256 _value);\r\n    \r\n    modifier adminOnly {\r\n        require (authAdmin.isCurrentAdmin(msg.sender));\r\n        _;\r\n    }\r\n    \r\n    function DividendManager(address token_address, address auth_address) public {\r\n        token = SingleTokenCoin(token_address);\r\n        set_new_admin(auth_address);\r\n        dividends_share = 50;\r\n        reinvestment_share = 50;\r\n    }\r\n\r\n    function () public payable{\r\n        // require (!token.is_end());\r\n        uint256 funds_for_dividends = msg.value.mul(dividends_share).div(100);\r\n        uint256 dividend_per_token = funds_for_dividends.div(token.totalSupply());\r\n        require (dividend_per_token != 0);\r\n        uint256 totalPaidOut = 0;\r\n        for (uint256 i = 0; i < token.count_token_holders(); i++) {\r\n            address addr = token.tokenHolder(i);\r\n            if (token.balanceOf(addr) < 1000E6) {\r\n                uint256 dividends_before_commision = dividend_per_token.mul(token.balanceOf(addr));    \r\n                uint256 dividends_after_commision = dividends_before_commision.mul(85).div(100);\r\n            } else if (token.balanceOf(addr) > 1000E6) {\r\n                dividends_before_commision = dividend_per_token.mul(token.balanceOf(addr));\r\n                dividends_after_commision = dividends_before_commision.mul(925).div(1000);\r\n            }\r\n            dividends[addr] = dividends[addr].add(dividends_after_commision);\r\n            PaymentAvailable(addr, dividends_after_commision);\r\n            totalPaidOut = totalPaidOut.add(dividends_after_commision);\r\n        }\r\n        DividendPayment(dividend_per_token, now);\r\n        // uint256 remainder = msg.value.sub(totalPaidOut);\r\n        // require (remainder > 0 && !msg.sender.send(remainder));\r\n        // dividends[msg.sender] = dividends[msg.sender].add(remainder);\r\n        // PaymentAvailable(msg.sender, remainder);\r\n    }\r\n\r\n    function set_new_admin (address admin_address) public onlyOwner {\r\n        authAdmin = AuthAdmin(admin_address);\r\n    }\r\n\r\n    function set_new_dividend_share (uint256 new_dividends_share) public adminOnly {\r\n        require (new_dividends_share > 0 && new_dividends_share <= 100);\r\n        dividends_share = new_dividends_share;\r\n        reinvestment_share = 100 - dividends_share;                                                                                                                                                                                                                                                                                                                                                                                \r\n    }\r\n    \r\n    function withdrawDividend() public {\r\n        require (dividends[msg.sender] != 0);\r\n\r\n        uint256 amount = dividends[msg.sender];\r\n        dividends[msg.sender] = 0;\r\n        msg.sender.transfer(amount);\r\n        DevidendsSnapshot(msg.sender, amount);\r\n    }\r\n    \r\n    function get_funds_left_for_reinvestment () public onlyOwner {\r\n        ReinvestmentWithdrawal(owner, this.balance);\r\n        msg.sender.transfer(this.balance);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"dividends_share\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"get_funds_left_for_reinvestment\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"dividends\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawDividend\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reinvestment_share\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"admin_address\",\"type\":\"address\"}],\"name\":\"set_new_admin\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"new_dividends_share\",\"type\":\"uint256\"}],\"name\":\"set_new_dividend_share\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"token_address\",\"type\":\"address\"},{\"name\":\"auth_address\",\"type\":\"address\"}],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PaymentAvailable\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"dividend_per_token\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"DividendPayment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"DevidendsSnapshot\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"ReinvestmentWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"DividendManager","CompilerVersion":"v0.4.15+commit.bbb8e64f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000b54da0854f41396886eb728e0f8082382281f84a000000000000000000000000477fa86d97035217e576e861578d38a2e8888c09","Library":"","SwarmSource":"bzzr://953783574858ae48626130e1b5485df34b8d4ad3b15b9c62d62d7eba21606469"}]}