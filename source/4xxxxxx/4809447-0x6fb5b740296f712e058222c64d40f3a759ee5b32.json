{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n// File: src/Token/FallbackToken.sol\r\n\r\n/**\r\n * @title FallbackToken token\r\n *\r\n * @dev add ERC223 standard ability\r\n **/\r\ncontract FallbackToken {\r\n\r\n  function isContract(address _addr) internal constant returns (bool) {\r\n    uint length;\r\n    _addr = _addr;\r\n    assembly {length := extcodesize(_addr)}\r\n    return (length > 0);\r\n  }\r\n}\r\n\r\n\r\ncontract Receiver {\r\n  function tokenFallback(address from, uint value) public;\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/ERC20Basic.sol\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/BasicToken.sol\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/ERC20.sol\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/StandardToken.sol\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/MintableToken.sol\r\n\r\n/**\r\n * @title Mintable token\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\r\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n */\r\n\r\ncontract MintableToken is StandardToken, Ownable {\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\r\n    totalSupply = totalSupply.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    Mint(_to, _amount);\r\n    Transfer(address(0), _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() onlyOwner canMint public returns (bool) {\r\n    mintingFinished = true;\r\n    MintFinished();\r\n    return true;\r\n  }\r\n}\r\n\r\n// File: src/Token/TrustaBitToken.sol\r\n\r\n/**\r\n * @title SimpleToken\r\n * @dev Very simple ERC20 Token example, where all tokens are pre-assigned to the creator.\r\n * Note they can later distribute these tokens as they wish using `transfer` and other\r\n * `StandardToken` functions.\r\n */\r\ncontract TrustaBitToken is MintableToken, FallbackToken {\r\n\r\n  string public constant name = \"TrustaBits\";\r\n\r\n  string public constant symbol = \"TAB\";\r\n\r\n  uint256 public constant decimals = 18;\r\n\r\n  bool public released = false;\r\n\r\n  event Release();\r\n\r\n  modifier isReleased () {\r\n    require(mintingFinished);\r\n    require(released);\r\n    _;\r\n  }\r\n\r\n  /**\r\n    * Fix for the ERC20 short address attack\r\n    * http://vessenes.com/the-erc20-short-address-attack-explained/\r\n    */\r\n  modifier onlyPayloadSize(uint size) {\r\n    if (msg.data.length != size + 4) {\r\n      revert();\r\n    }\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Constructor that gives msg.sender all of existing tokens.K\r\n   */\r\n  /// function TrustaBitsToken() public {}\r\n\r\n  /**\r\n   * @dev Fallback method will buyout tokens\r\n   */\r\n  function() public payable {\r\n    revert();\r\n  }\r\n\r\n  function release() onlyOwner public returns (bool) {\r\n    require(mintingFinished);\r\n    require(!released);\r\n    released = true;\r\n    Release();\r\n\r\n    return true;\r\n  }\r\n\r\n  function transfer(address _to, uint256 _value) public isReleased onlyPayloadSize(2 * 32) returns (bool) {\r\n    require(super.transfer(_to, _value));\r\n\r\n    if (isContract(_to)) {\r\n      Receiver(_to).tokenFallback(msg.sender, _value);\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value) public isReleased returns (bool) {\r\n    return super.transferFrom(_from, _to, _value);\r\n  }\r\n\r\n  function approve(address _spender, uint256 _value) public isReleased returns (bool) {\r\n    return super.approve(_spender, _value);\r\n  }\r\n\r\n  function increaseApproval(address _spender, uint _addedValue) public isReleased onlyPayloadSize(2 * 32) returns (bool success) {\r\n    return super.increaseApproval(_spender, _addedValue);\r\n  }\r\n\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public isReleased returns (bool success) {\r\n    return super.decreaseApproval(_spender, _subtractedValue);\r\n  }\r\n\r\n}\r\n\r\n// File: src/Crowdsale/MilestoneCrowdsale.sol\r\n\r\ncontract MilestoneCrowdsale {\r\n\r\n  using SafeMath for uint256;\r\n\r\n  /* Number of available tokens */\r\n  uint256 public constant AVAILABLE_TOKENS = 1e9; //1 billion\r\n\r\n  /* Total Tokens available in PreSale */\r\n  uint256 public constant AVAILABLE_IN_PRE_SALE = 40e6; // 40,000,000\r\n\r\n  /* Total Tokens available in Main ICO */\r\n  uint256 public constant AVAILABLE_IN_MAIN = 610e6; // 610,000,000;\r\n\r\n  /* Early Investors token available */\r\n  uint256 public constant AVAILABLE_FOR_EARLY_INVESTORS = 100e6; // 100,000,000;\r\n\r\n  /* Pre-Sale Start Date */\r\n  uint public preSaleStartDate;\r\n\r\n  /* Pre-Sale End Date */\r\n  uint public preSaleEndDate;\r\n\r\n  /* Main Token Sale Date */\r\n  uint public mainSaleStartDate;\r\n\r\n  /* Main Token Sale End */\r\n  uint public mainSaleEndDate;\r\n\r\n  struct Milestone {\r\n    uint start; // UNIX timestamp\r\n    uint end; // UNIX timestamp\r\n    uint256 bonus;\r\n    uint256 price;\r\n  }\r\n\r\n  Milestone[] public milestones;\r\n\r\n  uint256 public rateUSD; // (cents)\r\n\r\n  uint256 public earlyInvestorTokenRaised;\r\n  uint256 public preSaleTokenRaised;\r\n  uint256 public mainSaleTokenRaised;\r\n\r\n\r\n  function initMilestones(uint _rate, uint _preSaleStartDate, uint _preSaleEndDate, uint _mainSaleStartDate, uint _mainSaleEndDate) internal {\r\n    rateUSD = _rate;\r\n    preSaleStartDate = _preSaleStartDate;\r\n    preSaleEndDate = _preSaleEndDate;\r\n    mainSaleStartDate = _mainSaleStartDate;\r\n    mainSaleEndDate = _mainSaleEndDate;\r\n\r\n    /**\r\n     * Early investor Milestone\r\n     * Prise: $0.025 USD (2.5 cent)\r\n     * No bonuses\r\n     */\r\n    uint256 earlyInvestorPrice = ((25 * 1 ether) / (rateUSD * 10));\r\n    milestones.push(Milestone(now, preSaleStartDate, 0, earlyInvestorPrice));\r\n\r\n    /**\r\n     * Pre-Sale Milestone\r\n     * Prise: $0.05 USD (5 cent)\r\n     * Bonus: 20%\r\n     */\r\n    uint256 preSalePrice = usdToEther(5);\r\n    milestones.push(Milestone(preSaleStartDate, preSaleEndDate, 20, preSalePrice));\r\n\r\n    /**\r\n     * Main Milestones\r\n     * Prise: $0.10 USD (10 cent)\r\n     * Week 1 Bonus: 15%\r\n     * Week 2 Main Token Sale Bonus: 10%\r\n     * Week 3 Main Token Sale Bonus: 5%\r\n     */\r\n    uint256 mainSalePrice = usdToEther(10);\r\n    uint mainSaleStartDateWeek1 = mainSaleStartDate + 1 weeks;\r\n    uint mainSaleStartDateWeek3 = mainSaleStartDate + 3 * 1 weeks;\r\n    uint mainSaleStartDateWeek2 = mainSaleStartDate + 2 * 1 weeks;\r\n\r\n    milestones.push(Milestone(mainSaleStartDate, mainSaleStartDateWeek1, 15, mainSalePrice));\r\n    milestones.push(Milestone(mainSaleStartDateWeek1, mainSaleStartDateWeek2, 10, mainSalePrice));\r\n    milestones.push(Milestone(mainSaleStartDateWeek2, mainSaleStartDateWeek3, 5, mainSalePrice));\r\n    milestones.push(Milestone(mainSaleStartDateWeek3, _mainSaleEndDate, 0, mainSalePrice));\r\n  }\r\n\r\n  function usdToEther(uint256 usdValue) public view returns (uint256) {\r\n    // (usdValue * 1 ether / rateUSD)\r\n    return usdValue.mul(1 ether).div(rateUSD);\r\n  }\r\n\r\n  function getCurrentMilestone() internal view returns (uint256, uint256) {\r\n    for (uint i = 0; i < milestones.length; i++) {\r\n      if (now >= milestones[i].start && now < milestones[i].end) {\r\n        var milestone = milestones[i];\r\n        return (milestone.bonus, milestone.price);\r\n      }\r\n    }\r\n\r\n    return (0, 0);\r\n  }\r\n\r\n  function getCurrentPrice() public view returns (uint256) {\r\n    var (, price) = getCurrentMilestone();\r\n\r\n    return price;\r\n  }\r\n\r\n  function getTokenRaised() public view returns (uint256) {\r\n    return mainSaleTokenRaised.add(preSaleTokenRaised.add(earlyInvestorTokenRaised));\r\n  }\r\n\r\n  function isEarlyInvestors() public view returns (bool) {\r\n    return now < preSaleStartDate;\r\n  }\r\n\r\n  function isPreSale() public view returns (bool) {\r\n    return now >= preSaleStartDate && now < preSaleEndDate;\r\n  }\r\n\r\n  function isMainSale() public view returns (bool) {\r\n    return now >= mainSaleStartDate && now < mainSaleEndDate;\r\n  }\r\n\r\n  function isEnded() public view returns (bool) {\r\n    return now >= mainSaleEndDate;\r\n  }\r\n\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/crowdsale/RefundVault.sol\r\n\r\n/**\r\n * @title RefundVault\r\n * @dev This contract is used for storing funds while a crowdsale\r\n * is in progress. Supports refunding the money if crowdsale fails,\r\n * and forwarding it if crowdsale is successful.\r\n */\r\ncontract RefundVault is Ownable {\r\n  using SafeMath for uint256;\r\n\r\n  enum State { Active, Refunding, Closed }\r\n\r\n  mapping (address => uint256) public deposited;\r\n  address public wallet;\r\n  State public state;\r\n\r\n  event Closed();\r\n  event RefundsEnabled();\r\n  event Refunded(address indexed beneficiary, uint256 weiAmount);\r\n\r\n  function RefundVault(address _wallet) public {\r\n    require(_wallet != address(0));\r\n    wallet = _wallet;\r\n    state = State.Active;\r\n  }\r\n\r\n  function deposit(address investor) onlyOwner public payable {\r\n    require(state == State.Active);\r\n    deposited[investor] = deposited[investor].add(msg.value);\r\n  }\r\n\r\n  function close() onlyOwner public {\r\n    require(state == State.Active);\r\n    state = State.Closed;\r\n    Closed();\r\n    wallet.transfer(this.balance);\r\n  }\r\n\r\n  function enableRefunds() onlyOwner public {\r\n    require(state == State.Active);\r\n    state = State.Refunding;\r\n    RefundsEnabled();\r\n  }\r\n\r\n  function refund(address investor) public {\r\n    require(state == State.Refunding);\r\n    uint256 depositedValue = deposited[investor];\r\n    deposited[investor] = 0;\r\n    investor.transfer(depositedValue);\r\n    Refunded(investor, depositedValue);\r\n  }\r\n}\r\n\r\n// File: src/Crowdsale/TrustaBitCrowdsale.sol\r\n\r\ncontract TrustaBitCrowdsale is MilestoneCrowdsale, Ownable {\r\n\r\n  using SafeMath for uint256;\r\n\r\n  /* Minimum contribution */\r\n  uint public constant MINIMUM_CONTRIBUTION = 3 ether;\r\n\r\n  /* Soft cap */\r\n  uint public constant softCapUSD = 3e6; //$3 Million USD\r\n  uint public softCap; //$3 Million USD in ETH\r\n\r\n  /* Hard Cap */\r\n  uint public constant hardCapUSD = 49e6; //$49 Million USD\r\n  uint public hardCap; //$49 Million USD in ETH\r\n\r\n  /* Advisory Bounty Team */\r\n  address public addressAdvisoryBountyTeam;\r\n  uint256 public constant tokenAdvisoryBountyTeam = 250e6;\r\n\r\n  address[] public investors;\r\n\r\n  TrustaBitToken public token;\r\n\r\n  address public wallet;\r\n\r\n  uint256 public weiRaised;\r\n\r\n  RefundVault public vault;\r\n\r\n  bool public isFinalized = false;\r\n\r\n  event Finalized();\r\n\r\n  /**\r\n   * event for token purchase logging\r\n   * @param investor who got the tokens\r\n   * @param value weis paid for purchase\r\n   * @param amount amount of tokens purchased\r\n   */\r\n  event TokenPurchase(address indexed investor, uint256 value, uint256 amount);\r\n\r\n  modifier hasMinimumContribution() {\r\n    require(msg.value >= MINIMUM_CONTRIBUTION);\r\n    _;\r\n  }\r\n\r\n  function TrustaBitCrowdsale(address _wallet, address _token, uint _rate, uint _preSaleStartDate, uint _preSaleEndDate, uint _mainSaleStartDate, uint _mainSaleEndDate, address _AdvisoryBountyTeam) public {\r\n    require(_token != address(0));\r\n    require(_AdvisoryBountyTeam != address(0));\r\n    require(_rate > 0);\r\n    require(_preSaleStartDate > 0);\r\n    require(_preSaleEndDate > 0);\r\n    require(_preSaleEndDate > _preSaleStartDate);\r\n    require(_mainSaleStartDate > 0);\r\n    require(_mainSaleStartDate >= _preSaleEndDate);\r\n    require(_mainSaleEndDate > 0);\r\n    require(_mainSaleEndDate > _mainSaleStartDate);\r\n\r\n    wallet = _wallet;\r\n    token = TrustaBitToken(_token);\r\n    addressAdvisoryBountyTeam = _AdvisoryBountyTeam;\r\n\r\n    initMilestones(_rate, _preSaleStartDate, _preSaleEndDate, _mainSaleStartDate, _mainSaleEndDate);\r\n\r\n    softCap = usdToEther(softCapUSD.mul(100));\r\n    hardCap = usdToEther(hardCapUSD.mul(100));\r\n\r\n    vault = new RefundVault(wallet);\r\n  }\r\n\r\n  function investorsCount() public constant returns (uint) {\r\n    return investors.length;\r\n  }\r\n\r\n  // fallback function can be used to buy tokens\r\n  function() external payable {\r\n    buyTokens(msg.sender);\r\n  }\r\n\r\n  // low level token purchase function\r\n  function buyTokens(address investor) public hasMinimumContribution payable {\r\n    require(investor != address(0));\r\n    require(!isEnded());\r\n\r\n    uint256 weiAmount = msg.value;\r\n\r\n    require(getCurrentPrice() > 0);\r\n\r\n    uint256 tokensAmount = calculateTokens(weiAmount);\r\n    require(tokensAmount > 0);\r\n\r\n    mintTokens(investor, weiAmount, tokensAmount);\r\n    increaseRaised(weiAmount, tokensAmount);\r\n\r\n    if (vault.deposited(investor) == 0) {\r\n      investors.push(investor);\r\n    }\r\n    // send ether to the fund collection wallet\r\n    vault.deposit.value(weiAmount)(investor);\r\n  }\r\n\r\n  function calculateTokens(uint256 weiAmount) internal view returns (uint256) {\r\n    if ((weiRaised.add(weiAmount)) > hardCap) return 0;\r\n\r\n    var (bonus, price) = getCurrentMilestone();\r\n\r\n    uint256 tokensAmount = weiAmount.div(price).mul(10 ** token.decimals());\r\n    tokensAmount = tokensAmount.add(tokensAmount.mul(bonus).div(100));\r\n\r\n    if (isEarlyInvestorsTokenRaised(tokensAmount)) return 0;\r\n    if (isPreSaleTokenRaised(tokensAmount)) return 0;\r\n    if (isMainSaleTokenRaised(tokensAmount)) return 0;\r\n    if (isTokenAvailable(tokensAmount)) return 0;\r\n\r\n    return tokensAmount;\r\n  }\r\n\r\n  function isEarlyInvestorsTokenRaised(uint256 tokensAmount) public view returns (bool) {\r\n    return isEarlyInvestors() && (earlyInvestorTokenRaised.add(tokensAmount) > AVAILABLE_FOR_EARLY_INVESTORS.mul(10 ** token.decimals()));\r\n  }\r\n\r\n  function isPreSaleTokenRaised(uint256 tokensAmount) public view returns (bool) {\r\n    return isPreSale() && (preSaleTokenRaised.add(tokensAmount) > AVAILABLE_IN_PRE_SALE.mul(10 ** token.decimals()));\r\n  }\r\n\r\n  function isMainSaleTokenRaised(uint256 tokensAmount) public view returns (bool) {\r\n    return isMainSale() && (mainSaleTokenRaised.add(tokensAmount) > AVAILABLE_IN_MAIN.mul(10 ** token.decimals()));\r\n  }\r\n\r\n  function isTokenAvailable(uint256 tokensAmount) public view returns (bool) {\r\n    return getTokenRaised().add(tokensAmount) > AVAILABLE_TOKENS.mul(10 ** token.decimals());\r\n  }\r\n\r\n  function increaseRaised(uint256 weiAmount, uint256 tokensAmount) internal {\r\n    weiRaised = weiRaised.add(weiAmount);\r\n\r\n    if (isEarlyInvestors()) {\r\n      earlyInvestorTokenRaised = earlyInvestorTokenRaised.add(tokensAmount);\r\n    }\r\n\r\n    if (isPreSale()) {\r\n      preSaleTokenRaised = preSaleTokenRaised.add(tokensAmount);\r\n    }\r\n\r\n    if (isMainSale()) {\r\n      mainSaleTokenRaised = mainSaleTokenRaised.add(tokensAmount);\r\n    }\r\n  }\r\n\r\n  function mintTokens(address investor, uint256 weiAmount, uint256 tokens) internal {\r\n    token.mint(investor, tokens);\r\n    TokenPurchase(investor, weiAmount, tokens);\r\n  }\r\n\r\n  function finalize() onlyOwner public {\r\n    require(!isFinalized);\r\n    require(isEnded());\r\n\r\n    if (softCapReached()) {\r\n      vault.close();\r\n      mintAdvisoryBountyTeam();\r\n      token.finishMinting();\r\n    }\r\n    else {\r\n      vault.enableRefunds();\r\n      token.finishMinting();\r\n    }\r\n\r\n    token.transferOwnership(owner);\r\n\r\n    isFinalized = true;\r\n    Finalized();\r\n  }\r\n\r\n  function mintAdvisoryBountyTeam() internal {\r\n    mintTokens(addressAdvisoryBountyTeam, 0, tokenAdvisoryBountyTeam.mul(10 ** token.decimals()));\r\n  }\r\n\r\n  // if crowdsale is unsuccessful, investors can claim refunds here\r\n  function claimRefund() public {\r\n    require(isFinalized);\r\n    require(!softCapReached());\r\n\r\n    vault.refund(msg.sender);\r\n  }\r\n\r\n  function refund() onlyOwner public {\r\n    require(isFinalized);\r\n    require(!softCapReached());\r\n\r\n    for (uint i = 0; i < investors.length; i++) {\r\n      address investor = investors[i];\r\n      if (vault.deposited(investor) != 0) {\r\n        vault.refund(investor);\r\n      }\r\n    }\r\n  }\r\n\r\n  function softCapReached() public view returns (bool) {\r\n    return weiRaised >= softCap;\r\n  }\r\n\r\n  function hardCapReached() public view returns (bool) {\r\n    return weiRaised >= hardCap;\r\n  }\r\n\r\n  function destroy() onlyOwner public {\r\n    selfdestruct(owner);\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"AVAILABLE_FOR_EARLY_INVESTORS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"addressAdvisoryBountyTeam\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokensAmount\",\"type\":\"uint256\"}],\"name\":\"isMainSaleTokenRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokensAmount\",\"type\":\"uint256\"}],\"name\":\"isEarlyInvestorsTokenRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenAdvisoryBountyTeam\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"investorsCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"softCapReached\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"usdValue\",\"type\":\"uint256\"}],\"name\":\"usdToEther\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"investors\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mainSaleEndDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isPreSale\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"AVAILABLE_IN_PRE_SALE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preSaleStartDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mainSaleStartDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isEarlyInvestors\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTokenRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokensAmount\",\"type\":\"uint256\"}],\"name\":\"isTokenAvailable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"AVAILABLE_IN_MAIN\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preSaleEndDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"destroy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MINIMUM_CONTRIBUTION\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isFinalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"softCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"AVAILABLE_TOKENS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preSaleTokenRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hardCapReached\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokensAmount\",\"type\":\"uint256\"}],\"name\":\"isPreSaleTokenRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mainSaleTokenRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimRefund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isMainSale\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"earlyInvestorTokenRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hardCapUSD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"softCapUSD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"milestones\",\"outputs\":[{\"name\":\"start\",\"type\":\"uint256\"},{\"name\":\"end\",\"type\":\"uint256\"},{\"name\":\"bonus\",\"type\":\"uint256\"},{\"name\":\"price\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"investor\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rateUSD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hardCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_rate\",\"type\":\"uint256\"},{\"name\":\"_preSaleStartDate\",\"type\":\"uint256\"},{\"name\":\"_preSaleEndDate\",\"type\":\"uint256\"},{\"name\":\"_mainSaleStartDate\",\"type\":\"uint256\"},{\"name\":\"_mainSaleEndDate\",\"type\":\"uint256\"},{\"name\":\"_AdvisoryBountyTeam\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Finalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"TrustaBitCrowdsale","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000de20c9a0fead6fab180c0f8feb76713812b57b4200000000000000000000000052a31d995ae29a5d34bc573b3458971050637f390000000000000000000000000000000000000000000000000000000000012193000000000000000000000000000000000000000000000000000000005a783930000000000000000000000000000000000000000000000000000000005a8173b0000000000000000000000000000000000000000000000000000000005a8416b0000000000000000000000000000000000000000000000000000000005aaa5230000000000000000000000000de20c9a0fead6fab180c0f8feb76713812b57b42","Library":"","SwarmSource":"bzzr://f273a90d5edba6098f58a3f197f2b46e89d8d1b8907d120d1b6d95f7e012f6e5"}]}