{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.17;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    \r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n \r\n}\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public constant returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, require mintingFinished before start transfers\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n    \r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n  bool public mintingFinished = false;\r\n\r\n  mapping(address => uint256) releaseTime;\r\n  // Only after finishMinting and checks for bounty accounts time restrictions\r\n  modifier timeAllowed() {\r\n    require(mintingFinished);\r\n    require(now > releaseTime[msg.sender]); //finishSale + releasedays * 1 days\r\n    _;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public timeAllowed returns (bool) {\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of. \r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n  // release time of freezed account\r\n  function releaseAt(address _owner) public constant returns (uint256 date) {\r\n    return releaseTime[_owner];\r\n  }\r\n  // change restricted releaseXX account\r\n  function changeReleaseAccount(address _owner, address _newowner) public returns (bool) {\r\n    require(releaseTime[_owner] != 0 );\r\n    require(releaseTime[_newowner] == 0 );\r\n    balances[_newowner] = balances[_owner];\r\n    releaseTime[_newowner] = releaseTime[_owner];\r\n    balances[_owner] = 0;\r\n    releaseTime[_owner] = 0;\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) allowed;\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amout of tokens to be transfered\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(mintingFinished);\r\n    var _allowance = allowed[_from][msg.sender];\r\n\r\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n    // require (_value <= _allowance);\r\n\r\n    balances[_to] = balances[_to].add(_value);\r\n    balances[_from] = balances[_from].sub(_value);\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public timeAllowed returns (bool) {\r\n    // To change the approve amount you first have to reduce the addresses`\r\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n    //  already 0 to mitigate the race condition described here:\r\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifing the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    \r\n  address public owner;\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Mintable token\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\r\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n */\r\n\r\ncontract MintableToken is StandardToken, Ownable {\r\n    \r\n  event Mint(address indexed to, uint256 amount);\r\n  event UnMint(address indexed from, uint256 amount);\r\n  event MintFinished();\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will recieve the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @param _releaseTime The (optional) freeze time for bounty accounts.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(address _to, uint256 _amount, uint256 _releaseTime) public onlyOwner canMint returns (bool) {\r\n    totalSupply = totalSupply.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    if ( _releaseTime > 0 ) {\r\n        releaseTime[_to] = _releaseTime;\r\n    }\r\n    Mint(_to, _amount);\r\n    return true;\r\n  }\r\n  // drain tokens with refund\r\n  function unMint(address _from) public onlyOwner returns (bool) {\r\n    totalSupply = totalSupply.sub(balances[_from]);\r\n    UnMint(_from, balances[_from]);\r\n    balances[_from] = 0;\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() public onlyOwner returns (bool) {\r\n    mintingFinished = true;\r\n    MintFinished();\r\n    return true;\r\n  }\r\n  \r\n}\r\n\r\n\r\ncontract ArconaToken is MintableToken {\r\n    \r\n    string public constant name = \"Arcona Distribution Contract\";\r\n    string public constant symbol = \"Arcona\";\r\n    uint32 public constant decimals = 3; // 0.001\r\n   \r\n}\r\n\r\ncontract Crowdsale is Ownable {\r\n    \r\n    using SafeMath for uint;\r\n    \r\n    address public multisig;\r\n    address public restricted;\r\n    address public registerbot;\r\n    address public release6m;\r\n    address public release12m;\r\n    address public release18m;\r\n\r\n    mapping (address => uint) public weiBalances;\r\n    mapping (address => bool) registered;\r\n    mapping (address => address) referral;\r\n    mapping (string => address) certificate;\r\n\r\n    uint restrictedPercent;\r\n    uint refererPercent = 55; // 5.5%\r\n    uint bonusPeriod = 10; // 10 days\r\n\r\n    ArconaToken public token = new ArconaToken();\r\n    uint public startPreSale;\r\n    uint public finishPreSale;\r\n    uint public startSale;\r\n    uint public finishSale;\r\n    bool public isGlobalPause=false;\r\n    uint public tokenTotal;   \r\n    uint public totalWeiSale=0;\r\n    bool public isFinished=false;\r\n\r\n    uint public hardcap;\r\n    uint public softcap;\r\n\r\n    uint public ratePreSale = 400*10**3; // 1ETH = 400 ARN\r\n    uint public rateSale = 400*10**3; // 1ETH = 400 ARN\r\n\r\n    function Crowdsale(uint256 _startPreSale,uint256 _finishPreSale,uint256 _startSale,uint256 _finishSale,address _multisig,address _restricted,address _registerbot, address _release6m, address _release12m, address _release18m) public {\r\n        multisig = _multisig;\r\n        restricted = _restricted;\r\n        registerbot = _registerbot;\r\n        release6m = _release6m;\r\n        release12m = _release12m;\r\n        release18m = _release18m;\r\n        startSale=_startSale;\r\n        finishSale=_finishSale;\r\n        startPreSale=_startPreSale;\r\n        finishPreSale=_finishPreSale;\r\n        restrictedPercent = 40;\r\n        hardcap = 135000*10**18;\r\n        softcap = 2746*10**18;\r\n    }\r\n\r\n    modifier isRegistered() {\r\n        require (registered[msg.sender]);\r\n        _;\r\n    }\r\n\r\n    modifier preSaleIsOn() {\r\n        require(now > startPreSale && now < finishPreSale && !isGlobalPause);\r\n        _;\r\n    }\r\n\r\n    modifier saleIsOn() {\r\n        require(now > startSale && now < finishSale && !isGlobalPause);\r\n        _;\r\n    }\r\n\r\n    modifier anySaleIsOn() {\r\n        require((now > startPreSale && now < finishPreSale && !isGlobalPause) || (now > startSale && now < finishSale && !isGlobalPause));\r\n        _;\r\n    }\r\n\r\n    modifier isUnderHardCap() {\r\n        require(totalWeiSale <= hardcap);\r\n        _;\r\n    }\r\n\r\n    function changeMultisig(address _new) public onlyOwner {\r\n        multisig = _new;\r\n    }\r\n\r\n    function changeRegisterBot(address _new) public onlyOwner {\r\n        registerbot = _new;\r\n    }\r\n\r\n    function changeRestricted(address _new) public onlyOwner {\r\n        if (isFinished) {\r\n            require(token.releaseAt(_new) == 0);\r\n            token.changeReleaseAccount(restricted,_new);\r\n        }\r\n        restricted = _new;\r\n    }\r\n\r\n    function changeRelease6m(address _new) public onlyOwner {\r\n        if (isFinished) {\r\n            require(token.releaseAt(_new) == 0);\r\n            token.changeReleaseAccount(release6m,_new);\r\n        }\r\n        release6m = _new;\r\n    }\r\n\r\n    function changeRelease12m(address _new) public onlyOwner {\r\n        if (isFinished) {\r\n            require(token.releaseAt(_new) == 0);\r\n            token.changeReleaseAccount(release12m,_new);\r\n        }\r\n        release12m = _new;\r\n    }\r\n\r\n    function changeRelease18m(address _new) public onlyOwner {\r\n        if (isFinished) {\r\n            require(token.releaseAt(_new) == 0);\r\n            token.changeReleaseAccount(release18m,_new);\r\n        }\r\n        release18m = _new;\r\n    }\r\n\r\n    function addCertificate(string _id,  address _owner) public onlyOwner {\r\n        require(certificate[_id] == address(0));\r\n        if (_owner != address(0)) {\r\n            certificate[_id] = _owner;\r\n        } else {\r\n            certificate[_id] = owner;\r\n        }    \r\n    }\r\n\r\n    function editCertificate(string _id,  address _newowner) public {\r\n        require(certificate[_id] != address(0));\r\n        require(msg.sender == certificate[_id] || msg.sender == owner);\r\n        certificate[_id] = _newowner;\r\n    }\r\n\r\n    function checkCertificate(string _id) public view returns (address) {\r\n        return certificate[_id];\r\n    }\r\n\r\n    function deleteCertificate(string _id) public onlyOwner {\r\n        delete certificate[_id];\r\n    }\r\n\r\n    function registerCustomer(address _customer, address _referral) public {\r\n        require(msg.sender == registerbot || msg.sender == owner);\r\n        require(_customer != address(0));\r\n        registered[_customer] = true;\r\n        if (_referral != address(0) && _referral != _customer) {\r\n            referral[_customer] = _referral;\r\n        }\r\n    }\r\n\r\n    function checkCustomer(address _customer) public view returns (bool, address) {\r\n        return ( registered[_customer], referral[_customer]);\r\n    }\r\n    function checkReleaseAt(address _owner) public constant returns (uint256 date) {\r\n        return token.releaseAt(_owner);\r\n    }\r\n\r\n    function deleteCustomer(address _customer) public onlyOwner {\r\n        require(_customer!= address(0));\r\n        delete registered[_customer];\r\n        delete referral[_customer];\r\n        // return Wei && Drain tokens\r\n        token.unMint(_customer);\r\n        if ( weiBalances[_customer] > 0 ) {\r\n            _customer.transfer(weiBalances[_customer]);\r\n            weiBalances[_customer] = 0;\r\n        }\r\n    }\r\n\r\n    function globalPause(bool _state) public onlyOwner {\r\n        isGlobalPause = _state;\r\n    }\r\n\r\n    function changeRateSale(uint _tokenAmount) public onlyOwner {\r\n        require(isGlobalPause || (now > startSale && now < finishSale));\r\n        rateSale = _tokenAmount;\r\n    }\r\n\r\n    function changeRatePreSale(uint _tokenAmount) public onlyOwner {\r\n        require(isGlobalPause || (now > startPreSale && now < finishPreSale));\r\n        ratePreSale = _tokenAmount;\r\n    }\r\n\r\n    function changeStartPreSale(uint256 _ts) public onlyOwner {\r\n        startPreSale = _ts;\r\n    }\r\n\r\n    function changeFinishPreSale(uint256 _ts) public onlyOwner {\r\n        finishPreSale = _ts;\r\n    }\r\n\r\n    function changeStartSale(uint256 _ts) public onlyOwner {\r\n        startSale = _ts;\r\n    }\r\n\r\n    function changeFinishSale(uint256 _ts) public onlyOwner {\r\n        finishSale = _ts;\r\n    }\r\n\r\n    function finishMinting() public onlyOwner {\r\n        require(totalWeiSale >= softcap);\r\n        require(!isFinished);\r\n        multisig.transfer(this.balance);\r\n        uint issuedTokenSupply = token.totalSupply();\r\n        // 40% restricted + 60% issuedTokenSupply = 100%\r\n        uint restrictedTokens = issuedTokenSupply.mul(restrictedPercent).div(100 - restrictedPercent);\r\n        issuedTokenSupply = issuedTokenSupply.add(restrictedTokens);\r\n        // 13% - 11% for any purpose and 2% bounty\r\n        token.mint(restricted, issuedTokenSupply.mul(13).div(100), now);\r\n        // 27% - freezed founds to team & adwisers\r\n        token.mint(release6m, issuedTokenSupply.mul(85).div(1000), now + 180 * 1 days); // 8.5 %\r\n        token.mint(release12m, issuedTokenSupply.mul(85).div(1000), now + 365 * 1 days); // 8.5 %\r\n        token.mint(release18m, issuedTokenSupply.mul(10).div(100), now + 545 * 1 days); // 10 %\r\n        tokenTotal=token.totalSupply();\r\n        token.finishMinting();\r\n        isFinished=true;\r\n    }\r\n\r\n    function foreignBuyTest(uint256 _weiAmount, uint256 _rate) public pure returns (uint tokenAmount) {\r\n        require(_weiAmount > 0);\r\n        require(_rate > 0);\r\n        return _rate.mul(_weiAmount).div(1 ether);\r\n    }\r\n\r\n    function foreignBuy(address _holder, uint256 _weiAmount, uint256 _rate) public isUnderHardCap preSaleIsOn onlyOwner {\r\n        require(_weiAmount > 0);\r\n        require(_rate > 0);\r\n        registered[_holder] = true;\r\n        uint tokens = _rate.mul(_weiAmount).div(1 ether);\r\n        token.mint(_holder, tokens, 0);\r\n        tokenTotal = token.totalSupply();\r\n        totalWeiSale = totalWeiSale.add(_weiAmount);\r\n    }\r\n\r\n    // Refund Either && Drain tokens\r\n    function refund() public {\r\n        require(totalWeiSale <= softcap && now >= finishSale);\r\n        require(weiBalances[msg.sender] > 0);\r\n        token.unMint(msg.sender);\r\n        msg.sender.transfer(weiBalances[msg.sender]);\r\n        totalWeiSale = totalWeiSale.sub(weiBalances[msg.sender]);\r\n        tokenTotal = token.totalSupply();\r\n        weiBalances[msg.sender] = 0;\r\n    }\r\n\r\n    function buyTokensPreSale() public isRegistered isUnderHardCap preSaleIsOn payable {\r\n        uint tokens = ratePreSale.mul(msg.value).div(1 ether);\r\n        require(tokens >= 10000); // min 10 tokens\r\n        multisig.transfer(msg.value);\r\n        uint bonusValueTokens = 0;\r\n        uint saleEther = (msg.value).mul(10).div(1 ether);\r\n        if (saleEther >= 125 && saleEther < 375 ) { // 12,5 ETH\r\n            bonusValueTokens = tokens.mul(15).div(100);\r\n        } else if (saleEther >= 375 && saleEther < 750 ) { // 37,5 ETH\r\n            bonusValueTokens = tokens.mul(20).div(100);\r\n        } else if (saleEther >= 750 && saleEther < 1250 ) { // 75 ETH\r\n            bonusValueTokens=tokens.mul(25).div(100);\r\n        } else if (saleEther >= 1250  ) { // 125 ETH\r\n            bonusValueTokens = tokens.mul(30).div(100);\r\n        }\r\n        tokens = tokens.add(bonusValueTokens);\r\n        totalWeiSale = totalWeiSale.add(msg.value); \r\n        token.mint(msg.sender, tokens, 0);\r\n        if ( referral[msg.sender] != address(0) ) {\r\n            uint refererTokens = tokens.mul(refererPercent).div(1000);\r\n            token.mint(referral[msg.sender], refererTokens, 0);\r\n        }\r\n        tokenTotal=token.totalSupply();\r\n    }\r\n\r\n    function createTokens() public isRegistered isUnderHardCap saleIsOn payable {\r\n        uint tokens = rateSale.mul(msg.value).div(1 ether);\r\n        require(tokens >= 10000); // min 10 tokens\r\n        uint bonusTokens = 0;\r\n        if ( now < startSale + (bonusPeriod * 1 days) ) {\r\n            uint percent = bonusPeriod - (now - startSale).div(1 days);\r\n            if ( percent > 0 ) {\r\n                bonusTokens = tokens.mul(percent).div(100);\r\n            }\r\n        }\r\n        tokens=tokens.add(bonusTokens);\r\n        totalWeiSale = totalWeiSale.add(msg.value);\r\n        token.mint(msg.sender, tokens, 0);\r\n        if ( referral[msg.sender] != address(0) ) {\r\n            uint refererTokens = tokens.mul(refererPercent).div(1000);\r\n            token.mint(referral[msg.sender], refererTokens, 0);\r\n        }\r\n        tokenTotal=token.totalSupply();\r\n        weiBalances[msg.sender] = weiBalances[msg.sender].add(msg.value);\r\n    }\r\n\r\n    function createTokensAnySale() public isUnderHardCap anySaleIsOn payable {\r\n        if ((now > startPreSale && now < finishPreSale) && !isGlobalPause) {\r\n            buyTokensPreSale();\r\n        } else if ((now > startSale && now < finishSale) && !isGlobalPause) {\r\n            createTokens();\r\n        } else {\r\n            revert();\r\n        }\r\n    }\r\n\r\n    function() external anySaleIsOn isUnderHardCap payable {\r\n        createTokensAnySale();\r\n    }\r\n    \r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"createTokensAnySale\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"string\"},{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"addCertificate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_customer\",\"type\":\"address\"}],\"name\":\"deleteCustomer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"release18m\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_new\",\"type\":\"address\"}],\"name\":\"changeMultisig\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"release12m\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"finishPreSale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"multisig\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ratePreSale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ts\",\"type\":\"uint256\"}],\"name\":\"changeStartSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_holder\",\"type\":\"address\"},{\"name\":\"_weiAmount\",\"type\":\"uint256\"},{\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"foreignBuy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startPreSale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ts\",\"type\":\"uint256\"}],\"name\":\"changeFinishSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rateSale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"release6m\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"weiBalances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"restricted\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"changeRateSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyTokensPreSale\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"string\"},{\"name\":\"_newowner\",\"type\":\"address\"}],\"name\":\"editCertificate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_new\",\"type\":\"address\"}],\"name\":\"changeRelease12m\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_weiAmount\",\"type\":\"uint256\"},{\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"foreignBuyTest\",\"outputs\":[{\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"string\"}],\"name\":\"deleteCertificate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"globalPause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"checkReleaseAt\",\"outputs\":[{\"name\":\"date\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"registerbot\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"finishSale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_customer\",\"type\":\"address\"}],\"name\":\"checkCustomer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ts\",\"type\":\"uint256\"}],\"name\":\"changeFinishPreSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_new\",\"type\":\"address\"}],\"name\":\"changeRegisterBot\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_new\",\"type\":\"address\"}],\"name\":\"changeRelease18m\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hardcap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenTotal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"createTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startSale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_customer\",\"type\":\"address\"},{\"name\":\"_referral\",\"type\":\"address\"}],\"name\":\"registerCustomer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalWeiSale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ts\",\"type\":\"uint256\"}],\"name\":\"changeStartPreSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"changeRatePreSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isGlobalPause\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"softcap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_new\",\"type\":\"address\"}],\"name\":\"changeRelease6m\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_new\",\"type\":\"address\"}],\"name\":\"changeRestricted\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"string\"}],\"name\":\"checkCertificate\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_startPreSale\",\"type\":\"uint256\"},{\"name\":\"_finishPreSale\",\"type\":\"uint256\"},{\"name\":\"_startSale\",\"type\":\"uint256\"},{\"name\":\"_finishSale\",\"type\":\"uint256\"},{\"name\":\"_multisig\",\"type\":\"address\"},{\"name\":\"_restricted\",\"type\":\"address\"},{\"name\":\"_registerbot\",\"type\":\"address\"},{\"name\":\"_release6m\",\"type\":\"address\"},{\"name\":\"_release12m\",\"type\":\"address\"},{\"name\":\"_release18m\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"Crowdsale","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000005a1be220000000000000000000000000000000000000000000000000000000005a436f20000000000000000000000000000000000000000000000000000000005a69aaa0000000000000000000000000000000000000000000000000000000005a928920000000000000000000000000fac6e76ed94ff2afa922124240fc696ebc518ad90000000000000000000000000afc517f9c629fb4c8082876d7e17b68da3585930000000000000000000000007aa7b096955db1740bdb21b3a8794e407c8e46ea0000000000000000000000004d7cc6b188231ab3a76ac0d7a9db02ad40bb15370000000000000000000000000c8e784c46b299a6d196a24a5035e4e37a9655e9000000000000000000000000de0b45e898ac123b8667cd497e58095808af1ef3","Library":"","SwarmSource":"bzzr://e28589cbc2102f836aa8b91b3f844d2efc0fb35122ea6fbe5a3b98c180b849f9"}]}