{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\ncontract CryptoCatsMarket {\r\n\r\n    /* You can use this hash to verify the image file containing all cats */\r\n    string public imageHash = \"e055fe5eb1d95ea4e42b24d1038db13c24667c494ce721375bdd827d34c59059\";\r\n\r\n    /* Struct object for storing cat details */\r\n    struct Cat {\r\n        uint256 idNum;         // cat index number\r\n        string name;           // cat name\r\n        bool owned;            // status of cat ownership\r\n        address owner;         // address if cat owner\r\n    }\r\n\r\n    /* Variables to store contract owner and contract token standard details */\r\n    address owner;\r\n    string public standard = 'CryptoCats';\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals;\r\n    uint256 public _totalSupply;\r\n\r\n    bool public allCatsAssigned = false;        // boolean flag to indicate if all available cats are claimed\r\n    uint256 public catsRemainingToAssign = 0;   // variable to track cats remaining to be assigned/claimed\r\n\r\n    /* Create array to store cat index to owner address */\r\n    mapping (uint256 => address) public catIndexToAddress;\r\n\r\n    /* Create an array with all balances */\r\n    mapping (address => uint256) public balanceOf;\r\n\r\n    /* Create array to store cat details like names */\r\n    mapping (uint256 => Cat) public catDetails;\r\n\r\n    /* Define event types used to publish to EVM log when cat assignment/claim and cat transfer occurs */\r\n    event Assign(address indexed to, uint256 catIndex);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /* Initializes contract with initial supply tokens to the creator of the contract */\r\n    function CryptoCatsMarket() payable {\r\n        owner = msg.sender;                          // Set contract creation sender as owner\r\n        _totalSupply = 12;                           // Set total supply\r\n        catsRemainingToAssign = _totalSupply;        // Initialise cats remaining to total supply amount\r\n        name = \"CRYPTOCATS\";                         // Set the name for display purposes\r\n        symbol = \"CCAT\";                               // Set the symbol for display purposes\r\n        decimals = 0;                                // Amount of decimals for display purposes\r\n        initialiseCats();                            // initialise cat details\r\n    }\r\n\r\n    /* Admin function to set all cats assigned flag to true (callable by owner only) */\r\n    function allInitialOwnersAssigned() {\r\n        require(msg.sender == owner);\r\n        allCatsAssigned = true;\r\n    }\r\n\r\n    /* Transfer cat by owner to another wallet address\r\n       Different usage in Cryptocats than in normal token transfers \r\n       This will transfer an owner's cat to another wallet's address\r\n       Cat is identified by cat index passed in as _value */\r\n    function transfer(address _to, uint256 _value) returns (bool success) {\r\n        if (_value < _totalSupply &&                    // ensure cat index is valid\r\n            catIndexToAddress[_value] == msg.sender &&  // ensure sender is owner of cat\r\n            balanceOf[msg.sender] > 0) {                // ensure sender balance of cat exists\r\n            balanceOf[msg.sender]--;                    // update (reduce) cat balance  from owner\r\n            catIndexToAddress[_value] = _to;            // set new owner of cat in cat index\r\n            catDetails[_value].owner = _to;             // set new owner of cat in cat details\r\n            balanceOf[_to]++;                           // update (include) cat balance for recepient\r\n            Transfer(msg.sender, _to, _value);          // trigger event with transfer details to EVM\r\n            success = true;                             // set success as true after transfer completed\r\n        } else {\r\n            success = false;                            // set success as false if conditions not met\r\n        }\r\n        return success;                                 // return success status\r\n    }\r\n\r\n    /* Admin function to set all cats details during contract initialisation */\r\n    function initialiseCats() private {\r\n        require(msg.sender == owner);                   // require function caller to be contract owner\r\n        catDetails[0] = Cat(0,\"Cat 0\", false, 0x0);\r\n        catDetails[1] = Cat(1,\"Cat 1\", false, 0x0);\r\n        catDetails[2] = Cat(2,\"Cat 2\", false, 0x0);\r\n        catDetails[3] = Cat(3,\"Cat 3\", false, 0x0);\r\n        catDetails[4] = Cat(4,\"Cat 4\", false, 0x0);\r\n        catDetails[5] = Cat(5,\"Cat 5\", false, 0x0);\r\n        catDetails[6] = Cat(6,\"Cat 6\", false, 0x0);\r\n        catDetails[7] = Cat(7,\"Cat 7\", false, 0x0);\r\n        catDetails[8] = Cat(8,\"Cat 8\", false, 0x0);\r\n        catDetails[9] = Cat(9,\"Cat 9\", false, 0x0);\r\n        catDetails[10] = Cat(10,\"Cat 10\", false, 0x0);\r\n        catDetails[11] = Cat(11,\"Cat 11\", false, 0x0);        \r\n    }\r\n\r\n    /* Returns count of how many cats are owned by an owner */\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {\r\n        require(balanceOf[_owner] != 0);    // requires that cat owner balance is not 0\r\n        return balanceOf[_owner];           // return number of cats owned from array of balances by owner address\r\n    }\r\n\r\n    /* Return total supply of cats existing */\r\n    function totalSupply() constant returns (uint256 totalSupply) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /* Claim cat at specified index if it is unassigned */\r\n    function claimCat(uint catIndex) {\r\n        require(!allCatsAssigned);                      // require all cats have not been assigned/claimed\r\n        require(catsRemainingToAssign != 0);            // require cats remaining to be assigned count is not 0\r\n        require(catIndexToAddress[catIndex] == 0x0);    // require owner address for requested cat index is empty\r\n        require(catIndex < _totalSupply);               // require cat index requested does not exceed total supply\r\n        catIndexToAddress[catIndex] = msg.sender;       // Assign sender's address as owner of cat\r\n        balanceOf[msg.sender]++;                        // Increase sender's balance holder \r\n        catsRemainingToAssign--;                        // Decrease cats remaining count\r\n        catDetails[catIndex].owned = true;              // set owned flag in cat details to true for this cat index\r\n        catDetails[catIndex].owner = msg.sender;        // store owner address in cat details for this cat index\r\n        Assign(msg.sender, catIndex);                   // Triggers address assignment event to EVM's\r\n                                                        // log to allow javascript callbacks\r\n    }\r\n\r\n    /* Get address of owner based on cat index */\r\n    function getCatOwner(uint256 catIndex) public returns (address) {\r\n        require(catIndexToAddress[catIndex] != 0x0);\r\n        return catIndexToAddress[catIndex];             // Return address at array position of cat index\r\n    }\r\n\r\n    /* Get address of contract owner who performed contract creation and initialisation */\r\n    function getContractOwner() public returns (address) {\r\n        return owner;                                   // Return address of contract owner\r\n    }\r\n\r\n    /* Get cat details consisting of index, name, owned status and owner address for a particular cat index */\r\n    function getCatDetail(uint256 catIndex) public returns (uint256, string, bool, address) {\r\n        Cat cat = catDetails[catIndex];                         // get cat struct object from cat details array\r\n        return (cat.idNum, cat.name, cat.owned, cat.owner);     // return cat detail values\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"catIndex\",\"type\":\"uint256\"}],\"name\":\"claimCat\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"catIndex\",\"type\":\"uint256\"}],\"name\":\"getCatDetail\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"catIndexToAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"catDetails\",\"outputs\":[{\"name\":\"idNum\",\"type\":\"uint256\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"owned\",\"type\":\"bool\"},{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getContractOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"imageHash\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"standard\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"allInitialOwnersAssigned\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allCatsAssigned\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"catIndex\",\"type\":\"uint256\"}],\"name\":\"getCatOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"catsRemainingToAssign\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"catIndex\",\"type\":\"uint256\"}],\"name\":\"Assign\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"CryptoCatsMarket","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://5cd63c00827b80faefc78bfaafa29bb6fd1eb6ff1f8460538fd7dd7d14b102b7"}]}