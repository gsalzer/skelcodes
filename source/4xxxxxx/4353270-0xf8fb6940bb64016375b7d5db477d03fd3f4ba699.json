{"status":"1","message":"OK","result":[{"SourceCode":"contract ICreditBit {\r\n    function lockBalance(uint _amount, uint _lockForBlocks) {}\r\n    function claimBondReward() {}\r\n    function balanceOf(address _owner) constant returns (uint avaliableBalance) {}\r\n    function lockedBalanceOf(address _owner) constant returns (uint avaliableBalance) {}\r\n    function transfer(address _to, uint256 _value) returns (bool success) {}\r\n}\r\n\r\ncontract ICreditBond {\r\n    uint public yearlyBlockCount;\r\n}\r\n\r\ncontract CreditDAOfund {\r\n\r\n    ICreditBit creditBitContract;\r\n    ICreditBond creditBondContract;\r\n    address public creditDaoAddress;\r\n    uint public lockedCore;\r\n\taddress dev;\r\n    \r\n    \r\n    function CreditDAOfund() {\r\n\t\tcreditDaoAddress = 0x40219dd5412e3DF40CA3c1C9A7c47786028E626c;\r\n\t\tdev = msg.sender;\r\n\t}\r\n\t\r\n\tfunction withdrawReward(address _destination) {\r\n\t    require(msg.sender == creditDaoAddress);\r\n\t    \r\n\t    uint withdrawalAmount = creditBitContract.lockedBalanceOf(address(this)) + creditBitContract.balanceOf(address(this)) - lockedCore;\r\n\t    require(withdrawalAmount <= creditBitContract.balanceOf(address(this)));\r\n\t    require(withdrawalAmount > 0);\r\n\t    creditBitContract.transfer(_destination, withdrawalAmount);\r\n\t}\r\n\t\r\n\tfunction lockTokens(uint _multiplier) {\r\n\t    require(msg.sender == creditDaoAddress);\r\n\t    \r\n\t    uint currentBalance = creditBitContract.balanceOf(address(this)) / 10**8;\r\n\t    uint yearlyBlockCount = creditBondContract.yearlyBlockCount();\r\n\t    creditBitContract.lockBalance(currentBalance, yearlyBlockCount * _multiplier);\r\n\t    lockedCore = creditBitContract.lockedBalanceOf(address(this));\r\n\t}\r\n\r\n\tfunction claimBondReward() {\r\n\t\trequire (msg.sender == creditDaoAddress);\r\n\t\tcreditBitContract.claimBondReward();\r\n\t}\r\n\t\r\n\tfunction setCreditDaoAddress(address _creditDaoAddress) {\r\n\t    require(msg.sender == creditDaoAddress);\r\n\t    \r\n\t    creditDaoAddress = _creditDaoAddress;\r\n\t}\r\n\t\r\n\tfunction setCreditBitContract(address _creditBitAddress) {\r\n\t    require(msg.sender == creditDaoAddress);\r\n\t    \r\n\t    creditBitContract = ICreditBit(_creditBitAddress);\r\n\t}\r\n\t\r\n\tfunction setCreditBondContract(address _creditBondAddress) {\r\n\t    require(msg.sender == creditDaoAddress);\r\n\t    \r\n\t    creditBondContract = ICreditBond(_creditBondAddress);\r\n\t}\r\n\r\n\tfunction setDao(address _newDaoAddress) {\r\n\t\trequire(msg.sender == dev);\r\n\t\tcreditDaoAddress = _newDaoAddress;\r\n\t}\r\n\r\n\tfunction getCreditBitAddress() constant returns (address) {\r\n\t\treturn address(creditBitContract);\r\n\t}\r\n\r\n\tfunction getCreditBondAddress() constant returns (address) {\r\n\t\treturn address(creditBondContract);\r\n\t}\r\n\r\n\tfunction getCurrentBalance() constant returns(uint) {\r\n\t\treturn creditBitContract.balanceOf(address(this));\r\n\t}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getCreditBondAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockedCore\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_creditDaoAddress\",\"type\":\"address\"}],\"name\":\"setCreditDaoAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"creditDaoAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimBondReward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newDaoAddress\",\"type\":\"address\"}],\"name\":\"setDao\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCreditBitAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_multiplier\",\"type\":\"uint256\"}],\"name\":\"lockTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_destination\",\"type\":\"address\"}],\"name\":\"withdrawReward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_creditBitAddress\",\"type\":\"address\"}],\"name\":\"setCreditBitContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_creditBondAddress\",\"type\":\"address\"}],\"name\":\"setCreditBondContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"CreditDAOfund","CompilerVersion":"v0.4.17+commit.bdeb9e52","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://2f70c8be79fcbfc27083896de8bb529a730d795c8dadd0e98436e7df596ab711"}]}