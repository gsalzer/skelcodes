{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\ninterface token {\r\n    function transfer(address receiver, uint amount);\r\n}\r\n\r\ncontract Crowdsale {\r\n    address public beneficiary;\r\n    uint public amountRaised;\r\n    token public tokenReward;\r\n    uint256 public soldTokensCounter;\r\n    uint public price;\r\n    uint public saleStage = 1;\r\n    bool public crowdsaleClosed = false;\r\n    bool public adminVer = false;\r\n    mapping(address => uint256) public balanceOf;\r\n\r\n\r\n    event GoalReached(address recipient, uint totalAmountRaised);\r\n    event FundTransfer(address backer, uint amount, uint price, bool isContribution);\r\n\r\n    /**\r\n     * Constrctor function\r\n     *\r\n     * Setup the owner\r\n     */\r\n    function Crowdsale() {\r\n        beneficiary = 0xA4047af02a2Fd8e6BB43Cfe8Ab25292aC52c73f4;\r\n        tokenReward = token(0x12AC8d8F0F48b7954bcdA736AF0576a12Dc8C387);\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == beneficiary);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * Check ownership\r\n     */\r\n    function checkAdmin() onlyOwner {\r\n        adminVer = true;\r\n    }\r\n\r\n    /**\r\n     * Change crowdsale discount stage\r\n     */\r\n    function changeStage(uint stage) onlyOwner {\r\n        saleStage = stage;\r\n    }\r\n\r\n    /**\r\n     * Return unsold tokens to beneficiary address\r\n     */\r\n    function getUnsoldTokens(uint val_) onlyOwner {\r\n        tokenReward.transfer(beneficiary, val_);\r\n    }\r\n\r\n    /**\r\n     * Return unsold tokens to beneficiary address with decimals\r\n     */\r\n    function getUnsoldTokensWithDecimals(uint val_, uint dec_) onlyOwner {\r\n        val_ = val_ * 10 ** dec_;\r\n        tokenReward.transfer(beneficiary, val_);\r\n    }\r\n\r\n    /**\r\n     * Close/Open crowdsale\r\n     */\r\n    function closeCrowdsale(bool closeType) onlyOwner {\r\n        crowdsaleClosed = closeType;\r\n    }\r\n\r\n    /**\r\n     * Return current token price\r\n     *\r\n     * The price depends on `saleStage` and `amountRaised`\r\n     */\r\n    function getPrice() returns (uint) {\r\n        if (amountRaised > 12000 ether || saleStage == 4) {\r\n            return 0.000142857 ether;\r\n        } else if (amountRaised > 8000 ether || saleStage == 3) {\r\n            return 0.000125000 ether;\r\n        } else if (amountRaised > 4000 ether || saleStage == 2) {\r\n            return 0.000119047 ether;\r\n        }\r\n        return 0.000109890 ether;\r\n    }\r\n\r\n    /**\r\n     * Fallback function\r\n     *\r\n     * The function without name is the default function that is called whenever anyone sends funds to a contract\r\n     */\r\n    function () payable {\r\n        require(!crowdsaleClosed && msg.value >= 1 ether);                                 //1 ether is minimum to contribute\r\n        price = getPrice();                                                                //get current token price\r\n        uint amount = msg.value;                                                           //save users eth value\r\n        balanceOf[msg.sender] += amount;                                                   //save users eth value in balance list \r\n        amountRaised += amount;                                                            //update total amount of crowdsale\r\n        uint sendTokens = (amount / price) * 10 ** uint256(18);                            //calculate user's tokens\r\n        tokenReward.transfer(msg.sender, sendTokens);                                      //send tokens to user\r\n        soldTokensCounter += sendTokens;                                                   //update total sold tokens counter\r\n        FundTransfer(msg.sender, amount, price, true);                                     //pin transaction data in blockchain\r\n        if (beneficiary.send(amount)) { FundTransfer(beneficiary, amount, price, false); } //send users amount to beneficiary\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleStage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenReward\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"stage\",\"type\":\"uint256\"}],\"name\":\"changeStage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"amountRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"val_\",\"type\":\"uint256\"}],\"name\":\"getUnsoldTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"val_\",\"type\":\"uint256\"},{\"name\":\"dec_\",\"type\":\"uint256\"}],\"name\":\"getUnsoldTokensWithDecimals\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"checkAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleClosed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"adminVer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"soldTokensCounter\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"closeType\",\"type\":\"bool\"}],\"name\":\"closeCrowdsale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"totalAmountRaised\",\"type\":\"uint256\"}],\"name\":\"GoalReached\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"backer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"isContribution\",\"type\":\"bool\"}],\"name\":\"FundTransfer\",\"type\":\"event\"}]","ContractName":"Crowdsale","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://e14790717bdf8b55bcec7255ce54640fe0488d0ca8c7760841d43dd96dc05120"}]}