{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n*\r\n* Inspired by FirstBlood Token - firstblood.io\r\n*\r\n*/\r\n\r\npragma solidity ^0.4.16;\r\n\r\n/**\r\n* @title SafeMath\r\n* @dev Math operations with safety checks that throw on error\r\n**/\r\nlibrary SafeMath {\r\n\tfunction mul(uint256 a, uint256 b) internal returns (uint256) {\r\n\t\tuint256 c = a * b;\r\n\t\tassert(a == 0 || c / a == b);\r\n\t\treturn c;\r\n  \t}\r\n\r\n  \tfunction div(uint256 a, uint256 b) internal returns (uint256) {\r\n\t\tuint256 c = a / b;\r\n\t\treturn c;\r\n  \t}\r\n\r\n\tfunction sub(uint256 a, uint256 b) internal returns (uint256) {\r\n\t\tassert(b <= a);\r\n\t\treturn a - b;\r\n\t}\r\n\r\n\tfunction add(uint256 a, uint256 b) internal returns (uint256) {\r\n\t\t uint256 c = a + b;\r\n\t\t assert(c >= a);\r\n\t\t return c;\r\n\t}\r\n}\r\n\r\n/**\r\n* @title Ownable\r\n* @dev The Ownable contract has an owner address, and provides basic authorization control\r\n* functions, this simplifies the implementation of \"user permissions\".\r\n**/\r\ncontract Ownable {\r\n\taddress public owner;\r\n\r\n\t/**\r\n\t* @dev The Ownable constructor sets the original 'owner' of the contract to the sender\r\n\t* account.\r\n\t**/\r\n\tfunction Ownable() {\r\n\t\towner = msg.sender;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Throws if called by any account other than the owner.\r\n\t**/\r\n\tmodifier onlyOwner() {\r\n\t\trequire(msg.sender == owner);\r\n\t\t_;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n\t* @param newOwner The address to transfer ownership to.\r\n\t**/\r\n\tfunction transferOwnership(address newOwner) onlyOwner {\r\n\t\tif (newOwner != address(0)) {\r\n\t\t\towner = newOwner;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n* @title Pausable\r\n* @dev Base contract which allows children to implement an emergency stop mechanism.\r\n**/\r\ncontract Pausable is Ownable {\r\n\tevent Pause();\r\n\tevent Unpause();\r\n\tevent PauseRefund();\r\n\tevent UnpauseRefund();\r\n\r\n\tbool public paused = true;\r\n\tbool public refundPaused = true;\r\n\t// Deadline set to December 29th, 2017 at 11:59pm PST\r\n\tuint256 durationInMinutes = 60*24*29+60*6;\r\n\tuint256 public deadline = now + durationInMinutes * 1 minutes;\r\n\r\n\t/**\r\n\t* @dev modifier to allow actions only when the contract IS NOT paused\r\n\t**/\r\n\tmodifier whenNotPaused() {\r\n\t\trequire(!paused);\r\n\t\t_;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev modifier to allow actions only when the refund IS NOT paused\r\n\t**/\r\n\tmodifier whenRefundNotPaused() {\r\n\t\trequire(!refundPaused);\r\n\t\t_;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev modifier to allow actions only when the contract IS paused\r\n\t**/\r\n\tmodifier whenPaused {\r\n\t\trequire(paused);\r\n\t\t_;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev modifier to allow actions only when the refund IS paused\r\n\t**/\r\n\tmodifier whenRefundPaused {\r\n\t\trequire(refundPaused);\r\n\t\t_;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev modifier to allow actions only when the crowdsale has ended\r\n\t**/\r\n\tmodifier whenCrowdsaleEnded {\r\n\t\trequire(deadline < now);\r\n\t\t_;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev modifier to allow actions only when the crowdsale has not ended\r\n\t**/\r\n\tmodifier whenCrowdsaleNotEnded {\r\n\t\trequire(deadline >= now);\r\n\t\t_;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev called by the owner to pause, triggers stopped state\r\n\t**/\r\n\tfunction pause() onlyOwner whenNotPaused returns (bool) {\r\n\t\tpaused = true;\r\n\t\tPause();\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev called by the owner to pause, triggers stopped state\r\n\t**/\r\n\tfunction pauseRefund() onlyOwner whenRefundNotPaused returns (bool) {\r\n\t\trefundPaused = true;\r\n\t\tPauseRefund();\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev called by the owner to unpause, returns to normal state\r\n\t**/\r\n\tfunction unpause() onlyOwner whenPaused returns (bool) {\r\n\t\tpaused = false;\r\n\t\tUnpause();\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev called by the owner to unpause, returns to normal state\r\n\t**/\r\n\tfunction unpauseRefund() onlyOwner whenRefundPaused returns (bool) {\r\n\t\trefundPaused = false;\r\n\t\tUnpauseRefund();\r\n\t\treturn true;\r\n\t}\r\n}\r\n\r\n/**\r\n* @title ERC20Basic\r\n* @dev Simpler version of ERC20 interface\r\n* @dev see https://github.com/ethereum/EIPs/issues/179\r\n**/\r\ncontract ERC20Basic {\r\n\tuint256 public totalSupply;\r\n\tfunction balanceOf(address who) constant returns (uint256);\r\n\tfunction transfer(address to, uint256 value) returns (bool);\r\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n* @title Basic token\r\n* @dev Basic version of StandardToken, with no allowances.\r\n**/\r\ncontract BasicToken is ERC20Basic {\r\n\tusing SafeMath for uint256;\r\n\r\n\tmapping(address => uint256) balances;\r\n\r\n\t/**\r\n\t* @dev transfer token for a specified address\r\n\t* @param _to The address to transfer to.\r\n\t* @param _value The amount to be transferred.\r\n\t**/\r\n\tfunction transfer(address _to, uint256 _value) returns (bool) {\r\n\t\tbalances[msg.sender] = balances[msg.sender].sub(_value);\r\n\t\tbalances[_to] = balances[_to].add(_value);\r\n\t\tTransfer(msg.sender, _to, _value);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Gets the balance of the specified address.\r\n\t* @param _owner The address to query the the balance of.\r\n\t* @return An uint256 representing the amount owned by the passed address.\r\n\t**/\r\n\tfunction balanceOf(address _owner) constant returns (uint256 balance) {\r\n\t\treturn balances[_owner];\r\n\t}\r\n}\r\n\r\n/**\r\n* @title ERC20 interface\r\n* @dev see https://github.com/ethereum/EIPs/issues/20\r\n**/\r\ncontract ERC20 is ERC20Basic {\r\n\tfunction allowance(address owner, address spender) constant returns (uint256);\r\n\tfunction transferFrom(address from, address to, uint256 value) returns (bool);\r\n\tfunction approve(address spender, uint256 value) returns (bool);\r\n\tevent Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n* @title Standard ERC20 token\r\n*\r\n* @dev Implementation of the basic standard token.\r\n* @dev https://github.com/ethereum/EIPs/issues/20\r\n* @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n**/\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n\tmapping (address => mapping (address => uint256)) allowed;\r\n\r\n\t/**\r\n\t* @dev Transfer tokens from one address to another\r\n\t* @param _from address The address which you want to send tokens from\r\n\t* @param _to address The address which you want to transfer to\r\n\t* @param _value uint256 the amout of tokens to be transfered\r\n\t**/\r\n\tfunction transferFrom(address _from, address _to, uint256 _value) returns (bool) {\r\n\t\tvar _allowance = allowed[_from][msg.sender];\r\n\r\n\t\trequire (_value <= _allowance);\r\n\r\n\t\tbalances[_to] = balances[_to].add(_value);\r\n\t\tbalances[_from] = balances[_from].sub(_value);\r\n\t\tallowed[_from][msg.sender] = _allowance.sub(_value);\r\n\t\t\r\n\t\tTransfer(_from, _to, _value);\r\n\t\t\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n\t* @param _spender The address which will spend the funds.\r\n\t* @param _value The amount of tokens to be spent.\r\n\t**/\r\n\tfunction approve(address _spender, uint256 _value) returns (bool) {\r\n\t\t\r\n\t\t/**\r\n\t\t* To change the approve amount you first have to reduce the addresses'\r\n\t\t* allowance to zero by calling 'approve(_spender, 0)' if it is not\r\n\t\t* already 0 to mitigate the race condition described here: \r\n\t\thttps://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n\t\t**/\r\n\t\trequire((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n\r\n\t\tallowed[msg.sender][_spender] = _value;\r\n\t\tApproval(msg.sender, _spender, _value);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n\t* @param _owner address The address which owns the funds.\r\n\t* @param _spender address The address which will spend the funds.\r\n\t* @return A uint256 specifing the amount of tokens still available for the spender.\r\n\t**/\r\n\tfunction allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n\t\treturn allowed[_owner][_spender];\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n* @title hodlToken\r\n* @dev All tokens are pre-assigned to the creator.\r\n* Tokens can be transferred using 'transfer' and other\r\n* 'StandardToken' functions.\r\n**/\r\ncontract hodlToken is Pausable, StandardToken {\r\n\r\n\tusing SafeMath for uint256;\r\n\r\n\taddress public escrow = this;\r\n\r\n\t//20% Finder allocation \r\n\tuint256 public purchasableTokens = 112000 * 10**18;\r\n\tuint256 public founderAllocation = 28000 * 10**18;\r\n\r\n\tstring public name = \"HODL Token\";\r\n\tstring public symbol = \"HOLD\";\r\n\tuint256 public decimals = 18;\r\n\tuint256 public INITIAL_SUPPLY = 140000 * 10**18;\r\n\r\n\tuint256 public RATE = 200;\r\n\tuint256 public REFUND_RATE = 200;\r\n\r\n\t/**\r\n\t* @dev Contructor that gives msg.sender all of existing tokens.\r\n\t**/\r\n\tfunction hodlToken() {\r\n\t\ttotalSupply = INITIAL_SUPPLY;\r\n\t\tbalances[msg.sender] = INITIAL_SUPPLY;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n\t* @param newOwner The address to transfer ownership to.\r\n\t**/\r\n\tfunction transferOwnership(address newOwner) onlyOwner {\r\n\t\taddress oldOwner = owner;\r\n\t\tsuper.transferOwnership(newOwner);\r\n\t\tbalances[newOwner] = balances[oldOwner];\r\n\t\tbalances[oldOwner] = 0;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Allows the current owner to transfer escrowship of the contract to a escrow account.\r\n\t* @param newEscrow The address to transfer the escrow account to.\r\n\t**/\r\n\tfunction transferEscrowship(address newEscrow) onlyOwner {\r\n\t\tif (newEscrow != address(0)) {\r\n\t\t\tescrow = newEscrow;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Allows the current owner to set the new total supply, to be used iff not all tokens sold during crowdsale.\r\n\t**/\r\n\tfunction setTotalSupply() onlyOwner whenCrowdsaleEnded {\r\n\t\tif (purchasableTokens > 0) {\r\n\t\t\ttotalSupply = totalSupply.sub(purchasableTokens);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Allows the current owner to withdraw ether funds after ICO ended.\r\n\t**/\r\n\tfunction cashOut() onlyOwner whenCrowdsaleEnded {\r\n\t\t\r\n\t\t/**\r\n\t\t* Transfer money from escrow wallet\r\n\t\t**/\r\n\t\towner.transfer(escrow.balance);\r\n\t}\r\n  \r\n\t/**\r\n\t* @dev Allows owner to change the exchange rate of tokens (default 0.005 Ether)\r\n\t**/\r\n\tfunction setRate(uint256 rate) {\r\n\r\n\t\t/**\r\n\t\t* If break-even point has been reached (3500 Eth = 3.5*10**21 Wei),\r\n\t\t* rate updates to 20% of total revenue (100% of dedicated wallet after forwarding contract)\r\n\t\t**/\r\n\t\tif (escrow.balance >= 7*10**20) {\r\n\r\n\t\t\t/**\r\n\t\t\t* Rounds up to address division error\r\n\t\t\t**/\r\n\t\t\tRATE = (((totalSupply.mul(10000)).div(escrow.balance)).add(9999)).div(10000);\r\n\t\t}\r\n\t}\r\n  \r\n\t/**\r\n\t* @dev Allows owner to change the refund exchange rate of tokens (default 0.005 Ether)\r\n\t* @param rate The number of tokens to release\r\n\t**/\r\n\tfunction setRefundRate(uint256 rate) {\r\n\r\n\t\t/**\r\n\t\t* If break-even point has been reached (3500 Eth = 3.5*10**21 Wei),\r\n\t\t* refund rate updates to 20% of total revenue (100% of dedicated wallet after forwarding contract)\r\n\t\t**/\r\n\t\tif (escrow.balance >= 7*10**20) {\r\n\r\n\t\t\t/**\r\n\t\t\t* Rounds up to address division error\r\n\t\t\t**/\r\n\t\t\tREFUND_RATE = (((totalSupply.mul(10000)).div(escrow.balance)).add(9999)).div(10000);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t* @dev fallback function\r\n\t**/\r\n\tfunction () payable {\r\n\t\tif(now <= deadline){\r\n\t\t\tbuyTokens(msg.sender);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t* @dev function that sells available tokens\r\n\t**/\r\n\tfunction buyTokens(address addr) payable whenNotPaused whenCrowdsaleNotEnded {\r\n\t\t\r\n\t\t/**\r\n\t\t* Calculate tokens to sell and check that they are purchasable\r\n\t\t**/\r\n\t\tuint256 weiAmount = msg.value;\r\n\t\tuint256 tokens = weiAmount.mul(RATE);\r\n\t\trequire(purchasableTokens >= tokens);\r\n\r\n\t\t/**\r\n\t\t* Send tokens to buyer\r\n\t\t**/\r\n\t\tpurchasableTokens = purchasableTokens.sub(tokens);\r\n\t\tbalances[owner] = balances[owner].sub(tokens);\r\n\t\tbalances[addr] = balances[addr].add(tokens);\r\n\r\n\t\tTransfer(owner, addr, tokens);\r\n\t}\r\n  \r\n\tfunction fund() payable {}\r\n\r\n\tfunction defund() onlyOwner {}\r\n\r\n\tfunction refund(uint256 _amount) payable whenNotPaused whenCrowdsaleEnded {\r\n\r\n\t\t/**\r\n\t\t* Calculate amount of HOLD to refund\r\n\t\t**/\r\n\t\tuint256 refundHOLD = _amount.mul(10**18);\r\n\t\trequire(balances[msg.sender] >= refundHOLD);\r\n\r\n\t\t/**\r\n\t\t* Calculate refund in wei\r\n\t\t**/\r\n\t\tuint256 weiAmount = refundHOLD.div(REFUND_RATE);\r\n\t\trequire(this.balance >= weiAmount);\r\n\r\n\t\tbalances[msg.sender] = balances[msg.sender].sub(refundHOLD);\r\n\t\t\r\n\t\t/**\r\n\t\t* The tokens are burned\r\n\t\t**/\r\n\t\ttotalSupply = totalSupply.sub(refundHOLD);\r\n\r\n\t\tmsg.sender.transfer(weiAmount);\r\n\t}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"setRefundRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpauseRefund\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"refund\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"deadline\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INITIAL_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"setRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newEscrow\",\"type\":\"address\"}],\"name\":\"transferEscrowship\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RATE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pauseRefund\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cashOut\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"founderAllocation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setTotalSupply\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"REFUND_RATE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"defund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"escrow\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"purchasableTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"refundPaused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"PauseRefund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"UnpauseRefund\",\"type\":\"event\"}]","ContractName":"hodlToken","CompilerVersion":"v0.4.19-nightly.2017.11.11+commit.284c3839","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://44554fd164ec5463af24ec88ba52c1649fb1c41569c4889ddadfa966b8243be4"}]}