{"status":"1","message":"OK","result":[{"SourceCode":"contract Token {\r\n    /* This is a slight change to the ERC20 base standard.\r\n    function totalSupply() constant returns (uint256 supply);\r\n    is replaced with:\r\n    uint256 public totalSupply;\r\n    This automatically creates a getter function for the totalSupply.\r\n    This is moved to the base contract since public getter functions are not\r\n    currently recognised as an implementation of the matching abstract\r\n    function by the compiler.\r\n    */\r\n    /// total amount of tokens\r\n    uint256 public totalSupply;\r\n\r\n    /// @param _owner The address from which the balance will be retrieved\r\n    /// @return The balance\r\n    function balanceOf(address _owner) constant returns (uint256 balance);\r\n\r\n    /// @notice send `_value` token to `_to` from `msg.sender`\r\n    /// @param _to The address of the recipient\r\n    /// @param _value The amount of token to be transferred\r\n    /// @return Whether the transfer was successful or not\r\n    function transfer(address _to, uint256 _value) returns (bool success);\r\n\r\n    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\r\n    /// @param _from The address of the sender\r\n    /// @param _to The address of the recipient\r\n    /// @param _value The amount of token to be transferred\r\n    /// @return Whether the transfer was successful or not\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\r\n\r\n    /// @notice `msg.sender` approves `_spender` to spend `_value` tokens\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @param _value The amount of tokens to be approved for transfer\r\n    /// @return Whether the approval was successful or not\r\n    function approve(address _spender, uint256 _value) returns (bool success);\r\n\r\n    /// @param _owner The address of the account owning tokens\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @return Amount of remaining tokens allowed to spent\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\ncontract StandardToken is Token {\r\n\r\n    function transfer(address _to, uint256 _value) returns (bool success) {\r\n        //Default assumes totalSupply can't be over max (2^256 - 1).\r\n        //If your token leaves out totalSupply and can issue more tokens as time goes on, you need to check if it doesn't wrap.\r\n        //Replace the if with this one instead.\r\n        //require(balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]);\r\n        require(balances[msg.sender] >= _value);\r\n        balances[msg.sender] -= _value;\r\n        balances[_to] += _value;\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\r\n        //same as above. Replace this line with the following if you want to protect against wrapping uints.\r\n        //require(balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]);\r\n        require(balances[_from] >= _value && allowed[_from][msg.sender] >= _value);\r\n        balances[_to] += _value;\r\n        balances[_from] -= _value;\r\n        allowed[_from][msg.sender] -= _value;\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n      return allowed[_owner][_spender];\r\n    }\r\n\r\n    mapping (address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n}\r\n\r\ncontract HumanStandardToken is StandardToken {\r\n\r\n    /* Public variables of the token */\r\n\r\n    /*\r\n    NOTE:\r\n    The following variables are OPTIONAL vanities. One does not have to include them.\r\n    They allow one to customise the token contract & in no way influences the core functionality.\r\n    Some wallets/interfaces might not even bother to look at this information.\r\n    */\r\n    string public name;                   //fancy name: eg Simon Bucks\r\n    uint8 public decimals;                //How many decimals to show. ie. There could 1000 base units with 3 decimals. Meaning 0.980 SBX = 980 base units. It's like comparing 1 wei to 1 ether.\r\n    string public symbol;                 //An identifier: eg SBX\r\n    string public version = 'H0.1';       //human 0.1 standard. Just an arbitrary versioning scheme.\r\n\r\n    function HumanStandardToken(\r\n        uint256 _initialAmount,\r\n        string _tokenName,\r\n        uint8 _decimalUnits,\r\n        string _tokenSymbol\r\n        ) {\r\n        balances[msg.sender] = _initialAmount;               // Give the creator all initial tokens\r\n        totalSupply = _initialAmount;                        // Update total supply\r\n        name = _tokenName;                                   // Set the name for display purposes\r\n        decimals = _decimalUnits;                            // Amount of decimals for display purposes\r\n        symbol = _tokenSymbol;                               // Set the symbol for display purposes\r\n    }\r\n\r\n    /* Approves and then calls the receiving contract */\r\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData) returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n\r\n        //call the receiveApproval function on the contract you want to be notified. This crafts the function signature manually so one doesn't have to include a contract in here just for this.\r\n        //receiveApproval(address _from, uint256 _value, address _tokenContract, bytes _extraData)\r\n        //it is assumed that when does this that the call *should* succeed, otherwise one would use vanilla approve instead.\r\n        require(_spender.call(bytes4(bytes32(sha3(\"receiveApproval(address,uint256,address,bytes)\"))), msg.sender, _value, this, _extraData));\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract Disbursement {\r\n\r\n    /*\r\n     *  Storage\r\n     */\r\n    address public owner;\r\n    address public receiver;\r\n    uint public disbursementPeriod;\r\n    uint public startDate;\r\n    uint public withdrawnTokens;\r\n    Token public token;\r\n\r\n    /*\r\n     *  Modifiers\r\n     */\r\n    modifier isOwner() {\r\n        if (msg.sender != owner)\r\n            // Only owner is allowed to proceed\r\n            revert();\r\n        _;\r\n    }\r\n\r\n    modifier isReceiver() {\r\n        if (msg.sender != receiver)\r\n            // Only receiver is allowed to proceed\r\n            revert();\r\n        _;\r\n    }\r\n\r\n    modifier isSetUp() {\r\n        if (address(token) == 0)\r\n            // Contract is not set up\r\n            revert();\r\n        _;\r\n    }\r\n\r\n    /*\r\n     *  Public functions\r\n     */\r\n    /// @dev Constructor function sets contract owner\r\n    /// @param _receiver Receiver of vested tokens\r\n    /// @param _disbursementPeriod Vesting period in seconds\r\n    /// @param _startDate Start date of disbursement period (cliff)\r\n    function Disbursement(address _receiver, uint _disbursementPeriod, uint _startDate)\r\n        public\r\n    {\r\n        if (_receiver == 0 || _disbursementPeriod == 0)\r\n            // Arguments are null\r\n            revert();\r\n        owner = msg.sender;\r\n        receiver = _receiver;\r\n        disbursementPeriod = _disbursementPeriod;\r\n        startDate = _startDate;\r\n        if (startDate == 0)\r\n            startDate = now;\r\n    }\r\n\r\n    /// @dev Setup function sets external contracts' addresses\r\n    /// @param _token Token address\r\n    function setup(Token _token)\r\n        public\r\n        isOwner\r\n    {\r\n        if (address(token) != 0 || address(_token) == 0)\r\n            // Setup was executed already or address is null\r\n            revert();\r\n        token = _token;\r\n    }\r\n\r\n    /// @dev Transfers tokens to a given address\r\n    /// @param _to Address of token receiver\r\n    /// @param _value Number of tokens to transfer\r\n    function withdraw(address _to, uint256 _value)\r\n        public\r\n        isReceiver\r\n        isSetUp\r\n    {\r\n        uint maxTokens = calcMaxWithdraw();\r\n        if (_value > maxTokens)\r\n            revert();\r\n        withdrawnTokens += _value;\r\n        token.transfer(_to, _value);\r\n    }\r\n\r\n    /// @dev Calculates the maximum amount of vested tokens\r\n    /// @return Number of vested tokens to withdraw\r\n    function calcMaxWithdraw()\r\n        public\r\n        constant\r\n        returns (uint)\r\n    {\r\n        uint maxTokens = (token.balanceOf(this) + withdrawnTokens) * (now - startDate) / disbursementPeriod;\r\n        if (withdrawnTokens >= maxTokens || startDate > now)\r\n            return 0;\r\n        return maxTokens - withdrawnTokens;\r\n    }\r\n}\r\n\r\ncontract Sale {\r\n\r\n    /*\r\n     * Events\r\n     */\r\n\r\n    event PurchasedTokens(address indexed purchaser, uint amount);\r\n    event TransferredPreBuyersReward(address indexed preBuyer, uint amount);\r\n    event TransferredTimelockedTokens(address beneficiary, address disburser, uint amount);\r\n\r\n    /*\r\n     * Storage\r\n     */\r\n\r\n    address public owner;\r\n    address public wallet;\r\n    HumanStandardToken public token;\r\n    uint public price;\r\n    uint public startBlock;\r\n    uint public freezeBlock;\r\n    uint public endBlock;\r\n\r\n    uint public totalPreBuyers;\r\n    uint public preBuyersDispensedTo = 0;\r\n    uint public totalTimelockedBeneficiaries;\r\n    uint public timeLockedBeneficiariesDisbursedTo = 0;\r\n\r\n    bool public emergencyFlag = false;\r\n    bool public preSaleTokensDisbursed = false;\r\n    bool public timelockedTokensDisbursed = false;\r\n\r\n    /*\r\n     * Modifiers\r\n     */\r\n\r\n    modifier saleStarted {\r\n        require(block.number >= startBlock);\r\n        _;\r\n    }\r\n\r\n    modifier saleEnded {\r\n         require(block.number > endBlock);\r\n         _;\r\n    }\r\n\r\n    modifier saleNotEnded {\r\n        require(block.number <= endBlock);\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    modifier notFrozen {\r\n        require(block.number < freezeBlock);\r\n        _;\r\n    }\r\n\r\n    modifier setupComplete {\r\n        assert(preSaleTokensDisbursed && timelockedTokensDisbursed);\r\n        _;\r\n    }\r\n\r\n    modifier notInEmergency {\r\n        assert(emergencyFlag == false);\r\n        _;\r\n    }\r\n\r\n    /*\r\n     * Public functions\r\n     */\r\n\r\n    /// @dev Sale(): constructor for Sale contract\r\n    /// @param _owner the address which owns the sale, can access owner-only functions\r\n    /// @param _wallet the sale's beneficiary address\r\n    /// @param _tokenSupply the total number of tokens to mint\r\n    /// @param _tokenName the token's human-readable name\r\n    /// @param _tokenDecimals the number of display decimals in token balances\r\n    /// @param _tokenSymbol the token's human-readable asset symbol\r\n    /// @param _price price of the token in Wei\r\n    /// @param _startBlock the block at which this contract will begin selling its token balance\r\n    function Sale(\r\n        address _owner,\r\n        address _wallet,\r\n        uint256 _tokenSupply,\r\n        string _tokenName,\r\n        uint8 _tokenDecimals,\r\n        string _tokenSymbol,\r\n        uint _price,\r\n        uint _startBlock,\r\n        uint _freezeBlock,\r\n        uint _totalPreBuyers,\r\n        uint _totalTimelockedBeneficiaries,\r\n        uint _endBlock\r\n    ) {\r\n        owner = _owner;\r\n        wallet = _wallet;\r\n        token = new HumanStandardToken(_tokenSupply, _tokenName, _tokenDecimals, _tokenSymbol);\r\n        price = _price;\r\n        startBlock = _startBlock;\r\n        freezeBlock = _freezeBlock;\r\n        totalPreBuyers = _totalPreBuyers;\r\n        totalTimelockedBeneficiaries = _totalTimelockedBeneficiaries;\r\n        endBlock = _endBlock;\r\n\r\n        token.transfer(this, token.totalSupply());\r\n        assert(token.balanceOf(this) == token.totalSupply());\r\n        assert(token.balanceOf(this) == _tokenSupply);\r\n    }\r\n\r\n    /// @dev distributePreBuyersRewards(): private utility function called by constructor\r\n    /// @param _preBuyers an array of addresses to which awards will be distributed\r\n    /// @param _preBuyersTokens an array of integers specifying preBuyers rewards\r\n    function distributePreBuyersRewards(\r\n        address[] _preBuyers,\r\n        uint[] _preBuyersTokens\r\n    )\r\n        public\r\n        onlyOwner\r\n    {\r\n        assert(!preSaleTokensDisbursed);\r\n\r\n        for(uint i = 0; i < _preBuyers.length; i++) {\r\n            token.transfer(_preBuyers[i], _preBuyersTokens[i]);\r\n            preBuyersDispensedTo += 1;\r\n            TransferredPreBuyersReward(_preBuyers[i], _preBuyersTokens[i]);\r\n        }\r\n\r\n        if(preBuyersDispensedTo == totalPreBuyers) {\r\n          preSaleTokensDisbursed = true;\r\n        }\r\n    }\r\n\r\n    /// @dev distributeTimelockedTokens(): private utility function called by constructor\r\n    /// @param _beneficiaries an array of addresses specifying disbursement beneficiaries\r\n    /// @param _beneficiariesTokens an array of integers specifying disbursement amounts\r\n    /// @param _timelocks an array of UNIX timestamps specifying vesting dates\r\n    /// @param _periods an array of durations in seconds specifying vesting periods\r\n    function distributeTimelockedTokens(\r\n        address[] _beneficiaries,\r\n        uint[] _beneficiariesTokens,\r\n        uint[] _timelocks,\r\n        uint[] _periods\r\n    )\r\n        public\r\n        onlyOwner\r\n    {\r\n        assert(preSaleTokensDisbursed);\r\n        assert(!timelockedTokensDisbursed);\r\n\r\n        for(uint i = 0; i < _beneficiaries.length; i++) {\r\n          address beneficiary = _beneficiaries[i];\r\n          uint beneficiaryTokens = _beneficiariesTokens[i];\r\n\r\n          Disbursement disbursement = new Disbursement(\r\n            beneficiary,\r\n            _periods[i],\r\n            _timelocks[i]\r\n          );\r\n\r\n          disbursement.setup(token);\r\n          token.transfer(disbursement, beneficiaryTokens);\r\n          timeLockedBeneficiariesDisbursedTo += 1;\r\n\r\n          TransferredTimelockedTokens(beneficiary, disbursement, beneficiaryTokens);\r\n        }\r\n\r\n        if(timeLockedBeneficiariesDisbursedTo == totalTimelockedBeneficiaries) {\r\n          timelockedTokensDisbursed = true;\r\n        }\r\n    }\r\n\r\n    /// @dev purchaseToken(): function that exchanges ETH for tokens (main sale function)\r\n    /// @notice You're about to purchase the equivalent of `msg.value` Wei in tokens\r\n    function purchaseTokens()\r\n        saleStarted\r\n        saleNotEnded\r\n        payable\r\n        setupComplete\r\n        notInEmergency\r\n    {\r\n        /* Calculate whether any of the msg.value needs to be returned to\r\n           the sender. The tokenPurchase is the actual number of tokens which\r\n           will be purchased once any excessAmount included in the msg.value\r\n           is removed from the purchaseAmount. */\r\n        uint excessAmount = msg.value % price;\r\n        uint purchaseAmount = msg.value - excessAmount;\r\n        uint tokenPurchase = purchaseAmount / price;\r\n\r\n        // Cannot purchase more tokens than this contract has available to sell\r\n        require(tokenPurchase <= token.balanceOf(this));\r\n\r\n        // Return any excess msg.value\r\n        if (excessAmount > 0) {\r\n            msg.sender.transfer(excessAmount);\r\n        }\r\n\r\n        // Forward received ether minus any excessAmount to the wallet\r\n        wallet.transfer(purchaseAmount);\r\n\r\n        // Transfer the sum of tokens tokenPurchase to the msg.sender\r\n        token.transfer(msg.sender, tokenPurchase);\r\n\r\n        PurchasedTokens(msg.sender, tokenPurchase);\r\n    }\r\n\r\n    /*\r\n     * Owner-only functions\r\n     */\r\n\r\n    function changeOwner(address _newOwner)\r\n        onlyOwner\r\n    {\r\n        require(_newOwner != 0);\r\n        owner = _newOwner;\r\n    }\r\n\r\n    function withdrawRemainder()\r\n         onlyOwner\r\n         saleEnded\r\n     {\r\n         uint remainder = token.balanceOf(this);\r\n         token.transfer(wallet, remainder);\r\n     }\r\n\r\n    function changePrice(uint _newPrice)\r\n        onlyOwner\r\n        notFrozen\r\n    {\r\n        require(_newPrice != 0);\r\n        price = _newPrice;\r\n    }\r\n\r\n    function changeWallet(address _wallet)\r\n        onlyOwner\r\n        notFrozen\r\n    {\r\n        require(_wallet != 0);\r\n        wallet = _wallet;\r\n    }\r\n\r\n    function changeStartBlock(uint _newBlock)\r\n        onlyOwner\r\n        notFrozen\r\n    {\r\n        require(_newBlock != 0);\r\n\r\n        freezeBlock = _newBlock - (startBlock - freezeBlock);\r\n        startBlock = _newBlock;\r\n    }\r\n\r\n    function changeEndBlock(uint _newBlock)\r\n        onlyOwner\r\n        notFrozen\r\n    {\r\n        require(_newBlock > startBlock);\r\n        endBlock = _newBlock;\r\n    }\r\n\r\n    function emergencyToggle()\r\n        onlyOwner\r\n    {\r\n        emergencyFlag = !emergencyFlag;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"emergencyToggle\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preBuyersDispensedTo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"purchaseTokens\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalTimelockedBeneficiaries\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"freezeBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newBlock\",\"type\":\"uint256\"}],\"name\":\"changeStartBlock\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiaries\",\"type\":\"address[]\"},{\"name\":\"_beneficiariesTokens\",\"type\":\"uint256[]\"},{\"name\":\"_timelocks\",\"type\":\"uint256[]\"},{\"name\":\"_periods\",\"type\":\"uint256[]\"}],\"name\":\"distributeTimelockedTokens\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"timeLockedBeneficiariesDisbursedTo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalPreBuyers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"timelockedTokensDisbursed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newBlock\",\"type\":\"uint256\"}],\"name\":\"changeEndBlock\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawRemainder\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_preBuyers\",\"type\":\"address[]\"},{\"name\":\"_preBuyersTokens\",\"type\":\"uint256[]\"}],\"name\":\"distributePreBuyersRewards\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"changeWallet\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newPrice\",\"type\":\"uint256\"}],\"name\":\"changePrice\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"emergencyFlag\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preSaleTokensDisbursed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_tokenSupply\",\"type\":\"uint256\"},{\"name\":\"_tokenName\",\"type\":\"string\"},{\"name\":\"_tokenDecimals\",\"type\":\"uint8\"},{\"name\":\"_tokenSymbol\",\"type\":\"string\"},{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"_startBlock\",\"type\":\"uint256\"},{\"name\":\"_freezeBlock\",\"type\":\"uint256\"},{\"name\":\"_totalPreBuyers\",\"type\":\"uint256\"},{\"name\":\"_totalTimelockedBeneficiaries\",\"type\":\"uint256\"},{\"name\":\"_endBlock\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PurchasedTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"preBuyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TransferredPreBuyersReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"disburser\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TransferredTimelockedTokens\",\"type\":\"event\"}]","ContractName":"Sale","CompilerVersion":"v0.4.11+commit.68ef5810","OptimizationUsed":"1","Runs":"0","ConstructorArguments":"00000000000000000000000073847780fe9605ae8efcad98275175c19b1f37800000000000000000000000001253385b0fc7e022df906aeec4a8270cdc8ea6f900000000000000000000000000000000000000000000001043561a88293000000000000000000000000000000000000000000000000000000000000000000180000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000001c0000000000000000000000000000000000000000000000000000d9e6577a39555000000000000000000000000000000000000000000000000000000000043f441000000000000000000000000000000000000000000000000000000000043f2880000000000000000000000000000000000000000000000000000000000000073000000000000000000000000000000000000000000000000000000000000001a0000000000000000000000000000000000000000000000000000000000452f41000000000000000000000000000000000000000000000000000000000000000a4752494420546f6b656e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044752494400000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://db88378a43e571bfa385023c702fe1368408e2baddf571c5548cf1df67238d62"}]}