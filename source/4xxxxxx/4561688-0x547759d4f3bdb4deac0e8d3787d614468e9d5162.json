{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^ 0.4.15;\r\n\r\n\r\n/**\r\n*contract name : tokenRecipient\r\n*/\r\ncontract tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData); }\r\n\r\n\r\n/**\r\n*contract name : GodzStartupBasicInformation\r\n*purpose : be the smart contract for the erc20 tokenof the startup\r\n*goal : to achieve to be the smart contract that the startup use for his stokcs\r\n*/\r\ncontract GodzStartupBasicInformation {\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals;\r\n    uint256 public totalSupply;\r\n\r\n    uint256 public amount;\r\n    uint256 public reward; /*reward offered for the voters*/\r\n    address public owner;\r\n\r\n    mapping(address => uint256) public balanceOf;\r\n    mapping(address => mapping(address => uint256)) public allowance;\r\n\r\n    function GodzStartupBasicInformation(\r\n        uint256 initialSupply,\r\n        string tokenName,\r\n        uint8 decimalUnits,\r\n        string tokenSymbol,\r\n        uint256 _amount,\r\n        uint256 _reward, /*reward offered for the voters*/\r\n        address _GodzSwapTokens /*address of the smart contract token swap*/\r\n    ) {\r\n        owner = tx.origin; /*becasuse the contract creation is controlled by the smart contract controller we use tx.origin*/\r\n        balanceOf[owner] = initialSupply;\r\n\r\n        totalSupply = initialSupply;\r\n        name = tokenName;\r\n        symbol = tokenSymbol;\r\n        decimals = decimalUnits;\r\n\r\n        amount = _amount; /*amount of the erc20 token*/\r\n        reward = _reward; /*reward offered for the voters*/\r\n\r\n        allowance[owner][_GodzSwapTokens] = initialSupply; /*here will allow the tokens transfer to the smart contract swap token*/\r\n    }\r\n\r\n     /* Send coins */\r\n    function transfer(address _to, uint256 _value) {\r\n        if (_to == 0x0) revert();                               /* Prevent transfer to 0x0 address. Use burn() instead*/\r\n        if (balanceOf[msg.sender] < _value) revert();           /* Check if the sender has enough*/\r\n        if (balanceOf[_to] + _value < balanceOf[_to]) revert(); /* Check for overflows*/\r\n        balanceOf[msg.sender] -= _value;                        /* Subtract from the sender*/\r\n        balanceOf[_to] += _value;                               /* Add the same to the recipient*/\r\n    }\r\n\r\n    /* Allow another contract to spend some tokens in your behalf */\r\n    function approve(address _spender, uint256 _value)\r\n        returns (bool success) {\r\n        allowance[msg.sender][_spender] = _value;\r\n        return true;\r\n    }\r\n\r\n    /* Approve and then communicate the approved contract in a single tx */\r\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\r\n        returns (bool success) {\r\n        tokenRecipient spender = tokenRecipient(_spender);\r\n        if (approve(_spender, _value)) {\r\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\r\n            return true;\r\n        }\r\n    }\r\n\r\n    /* A contract attempts to get the coins but transfer from the origin*/\r\n    function transferFromOrigin(address _to, uint256 _value)  returns (bool success) {\r\n        address origin = tx.origin;\r\n        if (origin == 0x0) revert();\r\n        if (_to == 0x0) revert();                                /* Prevent transfer to 0x0 address.*/\r\n        if (balanceOf[origin] < _value) revert();                /* Check if the sender has enough*/\r\n        if (balanceOf[_to] + _value < balanceOf[_to]) revert();  /* Check for overflows*/\r\n        balanceOf[origin] -= _value;                             /* Subtract from the sender*/\r\n        balanceOf[_to] += _value;                                /* Add the same to the recipient*/\r\n        return true;\r\n    }\r\n\r\n    /* A contract attempts to get the coins */\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\r\n        if (_to == 0x0) revert();                                /* Prevent transfer to 0x0 address.*/\r\n        if (balanceOf[_from] < _value) revert();                 /* Check if the sender has enough*/\r\n        if (balanceOf[_to] + _value < balanceOf[_to]) revert();  /* Check for overflows*/\r\n        if (_value > allowance[_from][msg.sender]) revert();     /* Check allowance*/\r\n        balanceOf[_from] -= _value;                              /* Subtract from the sender*/\r\n        balanceOf[_to] += _value;                                /* Add the same to the recipient*/\r\n        allowance[_from][msg.sender] -= _value;\r\n        return true;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reward\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFromOrigin\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"amount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"initialSupply\",\"type\":\"uint256\"},{\"name\":\"tokenName\",\"type\":\"string\"},{\"name\":\"decimalUnits\",\"type\":\"uint8\"},{\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_reward\",\"type\":\"uint256\"},{\"name\":\"_GodzSwapTokens\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"GodzStartupBasicInformation","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000003a9800000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000003a9800000000000000000000000000000000000000000000000000000000000003e80000000000000000000000008654485739030a9c184580149dd8dd92556700b500000000000000000000000000000000000000000000000000000000000000244d616e74656e63696f6e65732079204f62726173204d656e6f72657320475053205370410000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044d47505300000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://e9c8d42ec78263bdc8631b0f7fd32bdf4b99df6499720174390b308c24af5480"}]}