{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\n\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------\r\n// @title MatchPay Token (MPY)\r\n// (c) Federico Capello.\r\n// ----------------------------------------------------------------------------------------------\r\n\r\ncontract MPY {\r\n\r\n    string public constant name = \"MatchPay Token\";\r\n    string public constant symbol = \"MPY\";\r\n    uint256 public constant decimals = 18;\r\n\r\n    address owner;\r\n\r\n    uint256 public fundingStartBlock;\r\n    uint256 public fundingEndBlock;\r\n\r\n    mapping (address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n\r\n    uint256 public constant tokenExchangeRate = 10; // 1 MPY per 0.1 ETH\r\n    uint256 public maxCap = 30 * (10**3) * (10**decimals); // Maximum part for offering\r\n    uint256 public totalSupply; // Total part for offering\r\n    uint256 public minCap = 10 * (10**2) * (10**decimals); // Minimum part for offering\r\n    uint256 public ownerTokens = 3 * (10**2) * (10**decimals);\r\n\r\n    bool public isFinalized = false;\r\n\r\n\r\n    // Triggered when tokens are transferred\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n\r\n\r\n    // Triggered whenever approve(address _spender, uint256 _value) is called.\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n\r\n    // Triggered when _owner gets tokens\r\n    event MPYCreation(address indexed _owner, uint256 _value);\r\n\r\n\r\n    // Triggered when _owner gets refund\r\n    event MPYRefund(address indexed _owner, uint256 _value);\r\n\r\n\r\n    // -------------------------------------------------------------------------------------------\r\n\r\n\r\n    // Check if ICO is open\r\n    modifier is_live() { require(block.number >= fundingStartBlock && block.number <= fundingEndBlock); _; }\r\n\r\n\r\n    // Only owmer\r\n    modifier only_owner(address _who) { require(_who == owner); _; }\r\n\r\n\r\n    // -------------------------------------------------------------------------------------------\r\n\r\n\r\n    // safely add\r\n    function safeAdd(uint256 x, uint256 y) internal returns(uint256) {\r\n        uint256 z = x + y;\r\n        assert((z >= x) && (z >= y));\r\n        return z;\r\n    }\r\n\r\n    // safely subtract\r\n    function safeSubtract(uint256 x, uint256 y) internal returns(uint256) {\r\n      assert(x >= y);\r\n      uint256 z = x - y;\r\n      return z;\r\n    }\r\n\r\n    // safely multiply\r\n    function safeMult(uint256 x, uint256 y) internal returns(uint256) {\r\n      uint256 z = x * y;\r\n      assert((x == 0)||(z/x == y));\r\n      return z;\r\n    }\r\n\r\n\r\n    // -------------------------------------------------------------------------------------------\r\n\r\n\r\n    // Constructor\r\n    function MPY(\r\n      uint256 _fundingStartBlock,\r\n      uint256 _fundingEndBlock\r\n    ) {\r\n\r\n        owner = msg.sender;\r\n\r\n        fundingStartBlock = _fundingStartBlock;\r\n        fundingEndBlock = _fundingEndBlock;\r\n\r\n    }\r\n\r\n\r\n    /// @notice Return the address balance\r\n    /// @param _owner The owner\r\n    function balanceOf(address _owner) constant returns (uint256) {\r\n      return balances[_owner];\r\n    }\r\n\r\n\r\n    /// @notice Transfer tokens to account\r\n    /// @param _to Beneficiary\r\n    /// @param _amount Number of tokens\r\n    function transfer(address _to, uint256 _amount) returns (bool success) {\r\n      if (balances[msg.sender] >= _amount\r\n          && _amount > 0\r\n          && balances[_to] + _amount > balances[_to]) {\r\n\r\n              balances[msg.sender] -= _amount;\r\n              balances[_to] += _amount;\r\n\r\n              Transfer(msg.sender, _to, _amount);\r\n\r\n              return true;\r\n      } else {\r\n          return false;\r\n      }\r\n    }\r\n\r\n\r\n    /// @notice Transfer tokens on behalf of _from\r\n    /// @param _from From address\r\n    /// @param _to To address\r\n    /// @param _amount Amount of tokens\r\n    function transferFrom(address _from, address _to, uint256 _amount) returns (bool success) {\r\n      if (balances[_from] >= _amount\r\n          && allowed[_from][msg.sender] >= _amount\r\n          && _amount > 0\r\n          && balances[_to] + _amount > balances[_to]) {\r\n\r\n              balances[_from] -= _amount;\r\n              allowed[_from][msg.sender] -= _amount;\r\n              balances[_to] += _amount;\r\n\r\n              Transfer(_from, _to, _amount);\r\n\r\n              return true;\r\n          } else {\r\n              return false;\r\n          }\r\n    }\r\n\r\n\r\n    /// @notice Approve transfer of tokens on behalf of _from\r\n    /// @param _spender Whom to approve\r\n    /// @param _amount For how many tokens\r\n    function approve(address _spender, uint256 _amount) returns (bool success) {\r\n      allowed[msg.sender][_spender] = _amount;\r\n      Approval(msg.sender, _spender, _amount);\r\n      return true;\r\n    }\r\n\r\n\r\n    /// @notice Find allowance\r\n    /// @param _owner The owner\r\n    /// @param _spender The approved spender\r\n    function allowance(address _owner, address _spender) constant returns (uint256) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n\r\n    // -------------------------------------------------------------------------------------------\r\n\r\n\r\n    function getStats() constant returns (uint256, uint256, uint256, uint256) {\r\n        return (minCap, maxCap, totalSupply, fundingEndBlock);\r\n    }\r\n\r\n    function getSupply() constant returns (uint256) {\r\n        return totalSupply;\r\n    }\r\n\r\n\r\n    // -------------------------------------------------------------------------------------------\r\n\r\n\r\n    /// @notice Get Tokens: 0.1 ETH per 1 MPY token\r\n    function() is_live() payable {\r\n        if (msg.value == 0) revert();\r\n        if (isFinalized) revert();\r\n\r\n        uint256 tokens = safeMult(msg.value, tokenExchangeRate);   // calculate num of tokens purchased\r\n        uint256 checkedSupply = safeAdd(totalSupply, tokens);      // calculate total supply if purchased\r\n\r\n        if (maxCap < checkedSupply) revert();                         // if exceeding token max, cancel order\r\n\r\n        totalSupply = checkedSupply;                               // update totalSupply\r\n        balances[msg.sender] += tokens;                            // update token balance for payer\r\n        MPYCreation(msg.sender, tokens);                           // logs token creation event\r\n    }\r\n\r\n\r\n    // generic function to pay this contract\r\n    function emergencyPay() external payable {}\r\n\r\n\r\n    // wrap up crowdsale after end block\r\n    function finalize() external {\r\n        if (msg.sender != owner) revert();                                         // check caller is ETH deposit address\r\n        if (totalSupply < minCap) revert();                                        // check minimum is met\r\n        if (block.number <= fundingEndBlock && totalSupply < maxCap) revert();     // check past end block unless at creation cap\r\n\r\n        if (!owner.send(this.balance)) revert();                                   // send account balance to ETH deposit address\r\n\r\n        balances[owner] += ownerTokens;\r\n        totalSupply += ownerTokens;\r\n\r\n        isFinalized = true;                                                     // update crowdsale state to true\r\n    }\r\n\r\n\r\n    // legacy code to enable refunds if min token supply not met (not possible with fixed supply)\r\n    function refund() external {\r\n        if (isFinalized) revert();                               // check crowdsale state is false\r\n        if (block.number <= fundingEndBlock) revert();           // check crowdsale still running\r\n        if (totalSupply >= minCap) revert();                     // check creation min was not met\r\n        if (msg.sender == owner) revert();                       // do not allow dev refund\r\n\r\n        uint256 mpyVal = balances[msg.sender];                // get callers token balance\r\n        if (mpyVal == 0) revert();                               // check caller has tokens\r\n\r\n        balances[msg.sender] = 0;                             // set callers tokens to zero\r\n        totalSupply = safeSubtract(totalSupply, mpyVal);      // subtract callers balance from total supply\r\n        uint256 ethVal = mpyVal / tokenExchangeRate;          // calculate ETH from token exchange rate\r\n        MPYRefund(msg.sender, ethVal);                        // log refund event\r\n\r\n        if (!msg.sender.send(ethVal)) revert();                  // send caller their refund\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenExchangeRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isFinalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundingEndBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"emergencyPay\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getStats\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundingStartBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_fundingStartBlock\",\"type\":\"uint256\"},{\"name\":\"_fundingEndBlock\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"MPYCreation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"MPYRefund\",\"type\":\"event\"}]","ContractName":"MPY","CompilerVersion":"v0.4.16+commit.d7661dd9","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000417eb70000000000000000000000000000000000000000000000000000000000432c67","Library":"","SwarmSource":"bzzr://915b76a8b9d274afe6c24bfc883857e708f31cc5f6ff78a9cd83fc8751cff491"}]}