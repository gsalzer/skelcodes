{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    function Ownable() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner()  {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        if (newOwner != address(0)) {\r\n            owner = newOwner;\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n    event Pause();\r\n    event Unpause();\r\n\r\n    bool public paused = false;\r\n    /**\r\n     * @dev modifier to allow actions only when the contract IS paused\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!paused);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev modifier to allow actions only when the contract IS NOT paused\r\n     */\r\n    modifier whenPaused {\r\n        require(paused);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev called by the owner to pause, triggers stopped state\r\n     */\r\n    function pause() public onlyOwner whenNotPaused returns (bool) {\r\n        paused = true;\r\n        Pause();\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev called by the owner to unpause, returns to normal state\r\n     */\r\n    function unpause() public onlyOwner whenPaused returns (bool) {\r\n        paused = false;\r\n        Unpause();\r\n        return true;\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n    uint256 public totalSupply;\r\n    function balanceOf(address who) public constant returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n    using SafeMath for uint256;\r\n    mapping(address => uint256) balances;\r\n\r\n    /**\r\n     * @dev transfer token for a specified address\r\n     * @param _to The address to transfer to.\r\n     * @param _value The amount to be transferred.\r\n     */\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n    /**\r\n     * @dev Gets the balance of the specified address.\r\n     * @param _owner The address to query the the balance of.\r\n     * @return An uint256 representing the amount owned by the passed address.\r\n     */\r\n    function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n    /**\r\n     * @dev Transfer tokens from one address to another\r\n     * @param _from address The address which you want to send tokens from\r\n     * @param _to address The address which you want to transfer to\r\n     * @param _value uint256 the amout of tokens to be transfered\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n        var _allowance = allowed[_from][msg.sender];\r\n\r\n        balances[_to] = balances[_to].add(_value);\r\n        balances[_from] = balances[_from].sub(_value);\r\n        allowed[_from][msg.sender] = _allowance.sub(_value);\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n       * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n       * @param _spender The address which will spend the funds.\r\n       * @param _value The amount of tokens to be spent.\r\n       */\r\n      function approve(address _spender, uint256 _value) public returns (bool) {\r\n\r\n        // To change the approve amount you first have to reduce the addresses`\r\n        //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n        //  already 0 to mitigate the race condition described here:\r\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n        require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n      }\r\n\r\n      /**\r\n       * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n       * @param _owner address The address which owns the funds.\r\n       * @param _spender address The address which will spend the funds.\r\n       * @return A uint256 specifing the amount of tokens still avaible for the spender.\r\n       */\r\n      function allowance(address _owner, address _spender) constant public returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n      }\r\n\r\n}\r\n\r\n/**\r\n * @title Mintable token\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\r\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n */\r\n\r\ncontract MintableToken is StandardToken, Ownable {\r\n    event Mint(address indexed to, uint256 amount);\r\n    event MintFinished();\r\n    bool public mintingFinished = false;\r\n\r\n    modifier canMint() {\r\n        require(!mintingFinished);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to mint tokens\r\n     * @param _to The address that will recieve the minted tokens.\r\n     * @param _amount The amount of tokens to mint.\r\n     * @return A boolean that indicates if the operation was successful.\r\n     */\r\n    function mint(address _to, uint256 _amount) public onlyOwner canMint returns (bool) {\r\n        totalSupply = totalSupply.add(_amount);\r\n        balances[_to] = balances[_to].add(_amount);\r\n        Transfer(0X0, _to, _amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to stop minting new tokens.\r\n     * @return True if the operation was successful.\r\n     */\r\n    function finishMinting() public onlyOwner returns (bool) {\r\n        mintingFinished = true;\r\n        MintFinished();\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract StrikeCoin is MintableToken, Pausable{\r\n    string public name = \"StrikeCoin Token\";\r\n    string public symbol = \"STC\";\r\n    uint256 public decimals = 18;\r\n\r\n    event Ev(string message, address whom, uint256 val);\r\n\r\n    struct XRec {\r\n        bool inList;\r\n        address next;\r\n        address prev;\r\n        uint256 val;\r\n    }\r\n\r\n    struct QueueRecord {\r\n        address whom;\r\n        uint256 val;\r\n    }\r\n\r\n    address first = 0x0;\r\n    address last = 0x0;\r\n\r\n    mapping (address => XRec) public theList;\r\n\r\n    QueueRecord[]  theQueue;\r\n\r\n    // add a record to the END of the list\r\n    function add(address whom, uint256 value) internal {\r\n        theList[whom] = XRec(true,0x0,last,value);\r\n        if (last != 0x0) {\r\n            theList[last].next = whom;\r\n        } else {\r\n            first = whom;\r\n        }\r\n        last = whom;\r\n        Ev(\"add\",whom,value);\r\n    }\r\n\r\n    function remove(address whom) internal {\r\n        if (first == whom) {\r\n            first = theList[whom].next;\r\n            theList[whom] = XRec(false,0x0,0x0,0);\r\n            return;\r\n        }\r\n        address next = theList[whom].next;\r\n        address prev = theList[whom].prev;\r\n        if (prev != 0x0) {\r\n            theList[prev].next = next;\r\n        }\r\n        if (next != 0x0) {\r\n            theList[next].prev = prev;\r\n        }\r\n        theList[whom] =XRec(false,0x0,0x0,0);\r\n        Ev(\"remove\",whom,0);\r\n    }\r\n\r\n    function update(address whom, uint256 value) internal {\r\n        if (value != 0) {\r\n            if (!theList[whom].inList) {\r\n                add(whom,value);\r\n            } else {\r\n                theList[whom].val = value;\r\n                Ev(\"update\",whom,value);\r\n            }\r\n            return;\r\n        }\r\n        if (theList[whom].inList) {\r\n            remove(whom);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Allows anyone to transfer the Strike tokens once trading has started\r\n     * @param _to the recipient address of the tokens.\r\n     * @param _value number of tokens to be transfered.\r\n     */\r\n    function transfer(address _to, uint _value) public whenNotPaused returns (bool) {\r\n        bool result = super.transfer(_to, _value);\r\n        update(msg.sender,balances[msg.sender]);\r\n        update(_to,balances[_to]);\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows anyone to transfer the Strike tokens once trading has started\r\n     * @param _from address The address which you want to send tokens from\r\n     * @param _to address The address which you want to transfer to\r\n     * @param _value uint the amout of tokens to be transfered\r\n     */\r\n    function transferFrom(address _from, address _to, uint _value) public whenNotPaused returns (bool) {\r\n        bool result = super.transferFrom(_from, _to, _value);\r\n        update(_from,balances[_from]);\r\n        update(_to,balances[_to]);\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to mint tokens\r\n     * @param _to The address that will recieve the minted tokens.\r\n     * @param _amount The amount of tokens to mint.\r\n     * @return A boolean that indicates if the operation was successful.\r\n     */\r\n\r\n    function mint(address _to, uint256 _amount) public onlyOwner canMint returns (bool) {\r\n        bool result = super.mint(_to,_amount);\r\n        update(_to,balances[_to]);\r\n        return result;\r\n    }\r\n\r\n    function StrikeCoin()  public{\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function changeOwner(address newOwner) public onlyOwner {\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract StrikeCoinCrowdsale is Ownable, Pausable {\r\n    using SafeMath for uint256;\r\n\r\n    StrikeCoin public token = new StrikeCoin();\r\n\r\n    // start and end times\r\n    uint256 public startTimestamp = 1516773600;\r\n    uint256 public endTimestamp = 1519452000;\r\n    uint256 etherToWei = 10**18;\r\n\r\n    // address where funds are collected and tokens distributed\r\n    address public hardwareWallet = 0xb0c7fc7fFe80867A5Bd2e31e43d4D494085321B3;\r\n    address public restrictedWallet = 0xD36AA5Eaf6B1D6eC896E4A110501a872773a0125;\r\n    address public bonusWallet = 0xb9325bd27e91D793470F84e9B3550596d34Bbe26;\r\n\r\n    mapping (address => uint256) public deposits;\r\n    uint256 public numberOfPurchasers;\r\n\r\n    // how many bonus tokens given in ICO\r\n    uint[] private bonus = [8,8,4,4,2,2,0,0,0,0];\r\n    uint256 public rate = 2400; // 2400 STC is one Ether\r\n\r\n    // amount of raised money in wei\r\n    uint256 public weiRaised;\r\n    uint256 public tokensSold;\r\n    uint256 public tokensGranted = 0;\r\n\r\n    uint256 public minContribution = 1 finney;\r\n    uint256 public hardCapEther = 50000;\r\n    uint256 hardcap = hardCapEther * etherToWei;\r\n    uint256 maxBonusRate = 20;  // Percent;\r\n\r\n    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n    event MainSaleClosed();\r\n\r\n    uint256 public weiRaisedInPresale  = 0 ether;\r\n    uint256 public grantedTokensHardCap ;\r\n\r\n\r\n    function setWallet(address _wallet) public onlyOwner {\r\n        require(_wallet != 0x0);\r\n        hardwareWallet = _wallet;\r\n    }\r\n\r\n    function setRestrictedWallet(address _restrictedWallet) public onlyOwner {\r\n        require(_restrictedWallet != 0x0);\r\n        restrictedWallet = _restrictedWallet;\r\n    }\r\n\r\n    function setHardCapEther(uint256 newEtherAmt) public onlyOwner{\r\n        require(newEtherAmt > 0);\r\n        hardCapEther = newEtherAmt;\r\n        hardcap = hardCapEther * etherToWei;\r\n        grantedTokensHardCap = etherToWei * hardCapEther*rate*40/60*(maxBonusRate+100)/100;\r\n    }\r\n\r\n    function StrikeCoinCrowdsale() public  {\r\n\r\n        grantedTokensHardCap = etherToWei * hardCapEther*rate*40/60*(maxBonusRate+100)/100;\r\n        require(startTimestamp >= now);\r\n        require(endTimestamp >= startTimestamp);\r\n    }\r\n\r\n    // check if valid purchase\r\n    modifier validPurchase {\r\n        require(now >= startTimestamp);\r\n        require(now < endTimestamp);\r\n        require(msg.value >= minContribution);\r\n        _;\r\n    }\r\n\r\n    // @return true if crowdsale event has ended\r\n    function hasEnded() public constant returns (bool) {\r\n        if (now > endTimestamp)\r\n            return true;\r\n        return false;\r\n    }\r\n\r\n    // low level token purchase function\r\n    function buyTokens(address beneficiary) public payable   validPurchase {\r\n        require(beneficiary != 0x0);\r\n\r\n        uint256 weiAmount = msg.value;\r\n\r\n        if (deposits[msg.sender] == 0) {\r\n            numberOfPurchasers++;\r\n        }\r\n        deposits[msg.sender] = weiAmount.add(deposits[msg.sender]);\r\n\r\n        uint256 daysInSale = (now - startTimestamp) / (1 days);\r\n        uint256 thisBonus = 0;\r\n        if(daysInSale < 7 ){\r\n            thisBonus = bonus[daysInSale];\r\n        }\r\n\r\n        // calculate token amount to be created\r\n        uint256 tokens = weiAmount.mul(rate);\r\n        uint256 extraBonus = tokens.mul(thisBonus);\r\n        extraBonus = extraBonus.div(100);\r\n        uint256 finalTokenCount ;\r\n        tokens = tokens.add(extraBonus);\r\n        finalTokenCount = tokens.add(tokensSold);\r\n        uint256 weiRaisedSoFar = weiRaised.add(weiAmount);\r\n        require(weiRaisedSoFar + weiRaisedInPresale <= hardcap);\r\n\r\n        weiRaised = weiRaisedSoFar;\r\n        tokensSold = finalTokenCount;\r\n\r\n        token.mint(beneficiary, tokens);\r\n        hardwareWallet.transfer(msg.value);\r\n        TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\r\n    }\r\n\r\n    function grantTokens(address beneficiary,uint256 stcTokenCount) public onlyOwner{\r\n        stcTokenCount = stcTokenCount * etherToWei;\r\n        uint256 finalGrantedTokenCount = tokensGranted.add(stcTokenCount);\r\n        require(finalGrantedTokenCount<grantedTokensHardCap);\r\n        tokensGranted = finalGrantedTokenCount;\r\n        token.mint(beneficiary,stcTokenCount);\r\n    }\r\n    // finish mining coins and transfer ownership of Change coin to owner\r\n    function finishMinting() public onlyOwner returns(bool){\r\n        require(hasEnded());\r\n\r\n        // Create the bonus tokens (20% * 2400 * ETH collected) - extra tokens made from the 5%, 4%\r\n        uint256 deltaBonusTokens = tokensSold-weiRaised*rate;\r\n        uint256 bonusTokens = weiRaised*maxBonusRate*rate/100-deltaBonusTokens;\r\n\r\n        // tokensSold  and weiRaised\r\n        token.mint(bonusWallet,bonusTokens);\r\n\r\n        // Create the preico tokens (3000 * ETH collected)\r\n        uint256 preICOTokens = weiRaisedInPresale*3000;\r\n        token.mint(bonusWallet,preICOTokens);\r\n\r\n        uint issuedTokenSupply = token.totalSupply();\r\n\r\n        uint restrictedTokens = (issuedTokenSupply-tokensGranted)*40/60-tokensGranted; // 40% are for advisors\r\n\r\n        if(restrictedTokens>0){\r\n            token.mint(restrictedWallet, restrictedTokens);\r\n            tokensGranted = tokensGranted + restrictedTokens;\r\n        }\r\n        token.finishMinting();\r\n        token.transferOwnership(owner);\r\n        MainSaleClosed();\r\n        return true;\r\n    }\r\n\r\n    // fallback function can be used to buy tokens\r\n    function () payable public {\r\n        buyTokens(msg.sender);\r\n    }\r\n\r\n    function setWeiRaisedInPresale(uint256 amount) onlyOwner public {\r\n        require(amount>=0);\r\n        weiRaisedInPresale = amount;\r\n    }\r\n    function setEndTimeStamp(uint256 end) onlyOwner public {\r\n        require(end>now);\r\n        endTimestamp = end;\r\n    }\r\n    function setStartTimeStamp(uint256 start) onlyOwner public {\r\n        startTimestamp = start;\r\n    }\r\n    function setBonusAddress(address _bonusWallet) onlyOwner public {\r\n        require(_bonusWallet != 0x0);\r\n        bonusWallet = _bonusWallet;\r\n    }\r\n    function pauseTrading() onlyOwner public{\r\n        token.pause();\r\n    }\r\n    function startTrading() onlyOwner public{\r\n        token.unpause();\r\n    }\r\n\r\n    function changeTokenOwner(address newOwner) public onlyOwner {\r\n        require(hasEnded());\r\n        token.changeOwner(newOwner);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"theList\",\"outputs\":[{\"name\":\"inList\",\"type\":\"bool\"},{\"name\":\"next\",\"type\":\"address\"},{\"name\":\"prev\",\"type\":\"address\"},{\"name\":\"val\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"message\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"whom\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"Ev\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"StrikeCoin","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://7a4cf90674685100595536a1353b7395524c3fc920c0f01bddfca28380e167c3"}]}