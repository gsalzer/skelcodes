{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.0;\r\n\r\ncontract Owned\r\n{\r\n    address creator = msg.sender;\r\n    address owner01 = msg.sender;\r\n    address owner02;\r\n    address owner03;\r\n    \r\n    function\r\n    isCreator()\r\n    internal\r\n    returns (bool)\r\n    {\r\n       return(msg.sender == creator);\r\n    }\r\n    \r\n    function\r\n    isOwner()\r\n    internal\r\n    returns (bool)\r\n    {\r\n        return(msg.sender == owner01 || msg.sender == owner02 || msg.sender == owner03);\r\n    }\r\n\r\n    event NewOwner(address indexed old, address indexed current);\r\n    \r\n    function\r\n    setOwner(uint owner, address _addr)\r\n    internal\r\n    {\r\n        if (address(0x0) != _addr)\r\n        {\r\n            if (isOwner() || isCreator())\r\n            {\r\n                if (0 == owner)\r\n                {\r\n                    NewOwner(owner01, _addr);\r\n                    owner01 = _addr;\r\n                }\r\n                else if (1 == owner)\r\n                {\r\n                    NewOwner(owner02, _addr);\r\n                    owner02 = _addr;\r\n                }\r\n                else {\r\n                    NewOwner(owner03, _addr);\r\n                    owner03 = _addr;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n    function\r\n    setOwnerOne(address _new)\r\n    public\r\n    {\r\n        setOwner(0, _new);\r\n    }\r\n    \r\n    function\r\n    setOwnerTwo(address _new)\r\n    public\r\n    {\r\n        setOwner(1, _new);\r\n    }\r\n    \r\n    function\r\n    setOwnerThree(address _new)\r\n    public\r\n    {\r\n        setOwner(2, _new);\r\n    }\r\n}\r\n\r\ncontract Bank is Owned\r\n{\r\n    struct Depositor {\r\n        uint amount;\r\n        uint time;\r\n    }\r\n\r\n    event Deposit(address indexed depositor, uint amount);\r\n    \r\n    event Donation(address indexed donator, uint amount);\r\n    \r\n    event Withdrawal(address indexed to, uint amount);\r\n    \r\n    event DepositReturn(address indexed depositor, uint amount);\r\n    \r\n    address owner0l;\r\n    uint numDeposits;\r\n    uint releaseDate;\r\n    mapping (address => Depositor) public Deposits;\r\n    address[] public Depositors;\r\n    \r\n    function\r\n    initBank(uint daysUntilRelease)\r\n    public\r\n    {\r\n        numDeposits = 0;\r\n        owner0l = msg.sender;\r\n        releaseDate = now;\r\n        if (daysUntilRelease > 0 && daysUntilRelease < (1 years * 5))\r\n        {\r\n            releaseDate += daysUntilRelease * 1 days;\r\n        }\r\n        else\r\n        {\r\n            // default 1 day\r\n            releaseDate += 1 days;\r\n        }\r\n    }\r\n\r\n    // Accept donations and deposits\r\n    function\r\n    ()\r\n    public\r\n    payable\r\n    {\r\n        if (msg.value > 0)\r\n        {\r\n            if (msg.value < 1 ether)\r\n                Donation(msg.sender, msg.value);\r\n            else\r\n                deposit();\r\n        }\r\n    }\r\n    \r\n    // Accept deposit and create Depositor record\r\n    function\r\n    deposit()\r\n    public\r\n    payable\r\n    returns (uint)\r\n    {\r\n        if (msg.value > 0)\r\n            addDeposit();\r\n        return getNumberOfDeposits();\r\n    }\r\n    \r\n    // Track deposits\r\n    function\r\n    addDeposit()\r\n    private\r\n    {\r\n        Depositors.push(msg.sender);\r\n        Deposits[msg.sender].amount = msg.value;\r\n        Deposits[msg.sender].time = now;\r\n        numDeposits++;\r\n        Deposit(msg.sender, msg.value);\r\n    }\r\n    \r\n    function\r\n    returnDeposit()\r\n    public\r\n    {\r\n        if (now > releaseDate)\r\n        {\r\n            if (Deposits[msg.sender].amount > 1) {\r\n                uint _wei = Deposits[msg.sender].amount;\r\n                Deposits[msg.sender].amount = 0;\r\n                msg.sender.send(_wei);\r\n                DepositReturn(msg.sender, _wei);\r\n            }\r\n        }\r\n    }\r\n\r\n    // Depositor funds to be withdrawn after release period\r\n    function\r\n    withdrawDepositorFunds(address _to, uint _wei)\r\n    public\r\n    returns (bool)\r\n    {\r\n        if (_wei > 0)\r\n        {\r\n            if (isOwner() && Deposits[_to].amount > 0)\r\n            {\r\n                Withdrawal(_to, _wei);\r\n                return _to.send(_wei);\r\n            }\r\n        }\r\n    }\r\n\r\n    function\r\n    withdraw()\r\n    public\r\n    {\r\n        if (isCreator() && now >= releaseDate)\r\n        {\r\n            Withdrawal(creator, this.balance);\r\n            creator.send(this.balance);\r\n        }\r\n    }\r\n\r\n    function\r\n    getNumberOfDeposits()\r\n    public\r\n    constant\r\n    returns (uint)\r\n    {\r\n        return numDeposits;\r\n    }\r\n\r\n    function\r\n    kill()\r\n    public\r\n    {\r\n        if (isOwner() || isCreator())\r\n            selfdestruct(creator);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"Deposits\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"time\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_new\",\"type\":\"address\"}],\"name\":\"setOwnerTwo\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"daysUntilRelease\",\"type\":\"uint256\"}],\"name\":\"initBank\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Depositors\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"returnDeposit\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_new\",\"type\":\"address\"}],\"name\":\"setOwnerThree\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_new\",\"type\":\"address\"}],\"name\":\"setOwnerOne\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deposit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_wei\",\"type\":\"uint256\"}],\"name\":\"withdrawDepositorFunds\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getNumberOfDeposits\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"donator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Donation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DepositReturn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"old\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"current\",\"type\":\"address\"}],\"name\":\"NewOwner\",\"type\":\"event\"}]","ContractName":"Bank","CompilerVersion":"v0.4.10+commit.f0d539ae","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://7e0922b70dbc39a6124feb738c506935074906e6ad5eeb62c23fc05ff30880b4"}]}