{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.15;\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) constant returns (uint256);\r\n  function transfer(address to, uint256 value) returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) returns (bool);\r\n  function approve(address spender, uint256 value) returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n\r\n}\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n\r\n  using SafeMath for uint256;\r\n\r\n  modifier onlyPayloadSize(uint size) {\r\n    assert(msg.data.length == size + 4);\r\n    _;\r\n  }\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) onlyPayloadSize(2 * 32) returns (bool) {\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) allowed;\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amout of tokens to be transfered\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\r\n    var _allowance = allowed[_from][msg.sender];\r\n\r\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n    // require (_value <= _allowance);\r\n\r\n    balances[_to] = balances[_to].add(_value);\r\n    balances[_from] = balances[_from].sub(_value);\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) returns (bool) {\r\n\r\n    // To change the approve amount you first have to reduce the addresses`\r\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n    //  already 0 to mitigate the race condition described here:\r\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifing the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n\r\n  address public owner;\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner {\r\n    require(newOwner != address(0));\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Mintable token\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\r\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n */\r\n\r\ncontract MintableToken is StandardToken, Ownable {\r\n\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n  mapping (address => bool) public crowdsaleContracts;\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  modifier onlyCrowdsaleContract() {\r\n    require(crowdsaleContracts[msg.sender]);\r\n    _;\r\n  }\r\n\r\n  function addCrowdsaleContract(address _crowdsaleContract) onlyOwner {\r\n    crowdsaleContracts[_crowdsaleContract] = true;\r\n  }\r\n\r\n  function deleteCrowdsaleContract(address _crowdsaleContract) onlyOwner {\r\n    require(crowdsaleContracts[_crowdsaleContract]);\r\n    delete crowdsaleContracts[_crowdsaleContract];\r\n  }\r\n\r\n  function mint(address _to, uint256 _amount) onlyCrowdsaleContract canMint returns (bool) {\r\n\r\n    totalSupply = totalSupply.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    Mint(_to, _amount);\r\n    Transfer(this, _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  function finishMinting() onlyCrowdsaleContract returns (bool) {\r\n    mintingFinished = true;\r\n    MintFinished();\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\ncontract ABHCoin is MintableToken {\r\n\r\n  string public constant name = \"ABH Coin\";\r\n\r\n  string public constant symbol = \"ABH\";\r\n\r\n  uint32 public constant decimals = 18;\r\n\r\n}\r\n\r\n\r\n\r\ncontract PrivatePlacement is Ownable {\r\n\r\n  using SafeMath for uint;\r\n\r\n  address public multisig;\r\n\r\n  ABHCoin public token;\r\n\r\n  uint256 public hardcap;\r\n  uint public rate;\r\n  //uint public softcap;\r\n\r\n  bool refundAllowed;\r\n  bool privatePlacementIsOn = true;\r\n  bool PrivatePlacementFinished = false;\r\n  //uint public change;\r\n  //address public lastInvest;\r\n  mapping(address => uint) public balances;\r\n\r\n  function PrivatePlacement(address _ABHCoinAddress, address _multisig, uint _rate) {\r\n    multisig = _multisig;\r\n    rate = _rate * 1 ether;\r\n    hardcap = 120600000 * 1 ether; // token amount\r\n    token = ABHCoin(_ABHCoinAddress);\r\n  }\r\n\r\n  modifier isUnderHardCap() {\r\n    require(token.totalSupply() <= hardcap);\r\n    _;\r\n  }\r\n\r\n  function stopPrivatePlacement() onlyOwner {\r\n    privatePlacementIsOn = false;\r\n  }\r\n\r\n  function restartPrivatePlacement() onlyOwner {\r\n    require(!PrivatePlacementFinished);\r\n    privatePlacementIsOn = true;\r\n  }\r\n\r\n  function finishPrivatePlacement() onlyOwner {\r\n    require(!refundAllowed);\r\n    multisig.transfer(this.balance);\r\n    //lastInvest.transfer(change);\r\n    privatePlacementIsOn = false;\r\n    PrivatePlacementFinished = true;\r\n  }\r\n\r\n  function alloweRefund() onlyOwner {\r\n    refundAllowed = true;\r\n  }\r\n\r\n  function refund() public {\r\n    require(refundAllowed);\r\n    uint valueToReturn = balances[msg.sender];\r\n    balances[msg.sender] = 0;\r\n    msg.sender.transfer(valueToReturn);\r\n  }\r\n\r\n  function createTokens() isUnderHardCap payable {\r\n    require(privatePlacementIsOn);\r\n    uint valueWEI = msg.value;\r\n    uint tokens = rate.mul(msg.value).div(1 ether);\r\n    if (token.totalSupply() + tokens > hardcap){\r\n      tokens = hardcap - token.totalSupply();\r\n      valueWEI = tokens.mul(1 ether).div(rate);\r\n      token.mint(msg.sender, tokens);\r\n      uint change = msg.value - valueWEI;\r\n      bool isSent = msg.sender.call.gas(3000000).value(change)();\r\n    require(isSent);\r\n    } else {\r\n      token.mint(msg.sender, tokens);\r\n    }\r\n    balances[msg.sender] = balances[msg.sender].add(valueWEI);\r\n  }\r\n  \r\n  function changeRate(uint _rate) onlyOwner {\r\n     rate = _rate; \r\n  }\r\n\r\n  function() external payable {\r\n    createTokens();\r\n  }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"multisig\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"alloweRefund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"changeRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hardcap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"restartPrivatePlacement\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"createTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stopPrivatePlacement\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishPrivatePlacement\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_ABHCoinAddress\",\"type\":\"address\"},{\"name\":\"_multisig\",\"type\":\"address\"},{\"name\":\"_rate\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"PrivatePlacement","CompilerVersion":"v0.4.19-nightly.2017.10.29+commit.eb140bc6","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000000776aa01b3e5efc2c403d548ca26007c155f1bc9000000000000000000000000459a26e672760a38c862aece49d730cb3f00fed10000000000000000000000000000000000000000000000000000000000000e22","Library":"","SwarmSource":"bzzr://197328c66e4fd3e416b5619d807bd0d156484c182ee2ae00c373a9dd7e8dba23"}]}