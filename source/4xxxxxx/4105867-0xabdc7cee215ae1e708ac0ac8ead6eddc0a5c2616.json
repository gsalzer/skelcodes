{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.8;\r\n\r\ncontract Owned {\r\n  address public owner;\r\n\r\n  function Owned() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  function transferOwnership(address newOwner) external onlyOwner {\r\n    owner = newOwner;\r\n  }\r\n}\r\n\r\ncontract FidgetSpinner is Owned {\r\n  int omega;\r\n  int theta;\r\n  uint public lastUpdate;\r\n\r\n  uint public decayRate;\r\n  uint public omegaPerEther;\r\n\r\n  int public largestRetro;\r\n  int public largestPro;\r\n\r\n  event Spin(\r\n    address indexed from,\r\n    int indexed direction,\r\n    uint amount\r\n  );\r\n\r\n  /*\r\n   * Creates a new FidgetSpinner whose spin decays at a rate of _decayNumerator/_decayDenominator% per second\r\n   * and who gains _omegaPerEther spin per Ether spent on spinning it.\r\n   */\r\n\tfunction FidgetSpinner(uint _decayRate, uint _omegaPerEther) {\r\n    lastUpdate = now;\r\n\t\tdecayRate = _decayRate;\r\n    omegaPerEther = _omegaPerEther;\r\n\t}\r\n\r\n\r\n  /*\r\n   * This makes it easy to override deltaTime in FidgetSpinnerTest so we can test that velocity/displacement decay is\r\n   * working correctly\r\n   */\r\n  function deltaTime() constant returns(uint) {\r\n    return now - lastUpdate;\r\n  }\r\n\r\n  /*\r\n   * Returns the velocity of the spinner during this specific block in the chain\r\n   */\r\n  function getCurrentVelocity() constant returns(int) {\r\n    if(decayRate == 0) {\r\n      return omega;\r\n    }\r\n\r\n    int dir = -1;\r\n    if(omega == 0) {\r\n      return 0;\r\n    } else if(omega < 0) {\r\n      dir = 1;\r\n    }\r\n\r\n    uint timeElapsed = deltaTime();\r\n    uint deltaOmega = timeElapsed * decayRate;\r\n    int newOmega = omega + (int(deltaOmega) * dir);\r\n\r\n    // make sure we didn't cross zero\r\n    if((omega > 0 && newOmega < 0) || (omega < 0 && newOmega > 0)) {\r\n      return 0;\r\n    }\r\n\r\n    return newOmega;\r\n  }\r\n\r\n  /*\r\n   * Returns the displacement of the spinner during this specific block in the chain\r\n   */\r\n  function getCurrentDisplacement() constant returns(int) {\r\n    // integrates omega over time\r\n    int timeElapsed = int(deltaTime());\r\n\r\n    if(decayRate == 0) {\r\n      return theta + (timeElapsed * omega);\r\n    }\r\n\r\n    // find max time elapsed before v=0 (becomes max-height of trapezoid)\r\n    int maxTime = omega / int(decayRate);\r\n\r\n    if (maxTime < 0) {\r\n      maxTime *= -1;\r\n    }\r\n\r\n    if(timeElapsed > maxTime) {\r\n      timeElapsed = maxTime;\r\n    }\r\n\r\n    int deltaTheta = ((omega + getCurrentVelocity()) * timeElapsed) / 2;\r\n    return theta + deltaTheta;\r\n  }\r\n\r\n  /*\r\n   * Adds or subtracts from the spin of the spinner\r\n   *\r\n   * All changes to the spinner state should happen at the end of the current block. So multiple spins in the same block\r\n   * should be additive with their effects only becoming apparent in the next block.\r\n   */\r\n  function spin(int direction) payable {\r\n    require(direction == -1 || direction == 1);\r\n\r\n    int deltaOmega = (int(msg.value) * direction * int(omegaPerEther)) / 1 ether;\r\n    int newOmega = getCurrentVelocity() + deltaOmega;\r\n    int newTheta = getCurrentDisplacement();\r\n\r\n    omega = newOmega;\r\n    theta = newTheta;\r\n\r\n    if(-omega > largestRetro) {\r\n      largestRetro = -omega;\r\n    } else if(omega > largestPro) {\r\n      largestPro = omega;\r\n    }\r\n\r\n    Spin(msg.sender, direction, msg.value);\r\n    lastUpdate = now;\r\n  }\r\n\r\n  /*\r\n   * Withdraws all the money from the contract\r\n   */\r\n  function withdrawAll() onlyOwner {\r\n    withdraw(address(this).balance);\r\n  }\r\n\r\n  /*\r\n   * Withdraws a given amount of money from the contract\r\n   */\r\n  function withdraw(uint amount) onlyOwner {\r\n    owner.transfer(amount);\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"omegaPerEther\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"direction\",\"type\":\"int256\"}],\"name\":\"spin\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"largestRetro\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"largestPro\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentVelocity\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"deltaTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentDisplacement\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decayRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastUpdate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_decayRate\",\"type\":\"uint256\"},{\"name\":\"_omegaPerEther\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"direction\",\"type\":\"int256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Spin\",\"type\":\"event\"}]","ContractName":"FidgetSpinner","CompilerVersion":"v0.4.13+commit.fb4cb1a","OptimizationUsed":"1","Runs":"0","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000013880","Library":"","SwarmSource":"bzzr://ed1b2b27fc6c7e48da051d519e9c928b46b51c12b7f22e07ff54bb6dc0d57fd0"}]}