{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.16;\r\n\r\ncontract FiveMedium {\r\n\t\r\n\t// owner\r\n\taddress private owner;\r\n\r\n\t// fees\r\n\tuint256 public feeNewThread;\r\n\tuint256 public feeReplyThread;\r\n\r\n\t//\r\n\t// Database\r\n\t//\r\n\r\n\t// the threads\r\n\tstruct thread {\r\n\t\tstring text;\r\n\t\tstring imageUrl;\r\n\r\n\t\tuint256 indexLastReply;\r\n\t\tuint256 indexFirstReply;\r\n\r\n\t\tuint256 timestamp;\r\n\t}\r\n\tmapping (uint256 => thread) public threads;\r\n\tuint256 public indexThreads = 1;\r\n\r\n\t// the replies\r\n\tstruct reply {\r\n\t\tstring text;\r\n\t\tstring imageUrl;\r\n\r\n\t\tuint256 replyTo;\r\n\t\tuint256 nextReply;\r\n\r\n\t\tuint256 timestamp;\r\n\t}\r\n\tmapping (uint256 => reply) public replies;\r\n\tuint256 public indexReplies = 1;\r\n\r\n\t// last 20 active threads \r\n\tuint256[20] public lastThreads;\r\n\tuint256 public indexLastThreads = 0; // the index of the thread that was added last in lastThreads\r\n\r\n\t// \r\n\t// Events\r\n\t//\r\n\r\n\tevent newThreadEvent(uint256 threadId, string text, string imageUrl, uint256 timestamp);\r\n\r\n\tevent newReplyEvent(uint256 replyId, uint256 replyTo, string text, string imageUrl, uint256 timestamp);\r\n\r\n\t//\r\n\t// Meta\r\n\t//\r\n\r\n\t// constructor\r\n\tfunction FiveMedium(uint256 _feeNewThread, uint256 _feeReplyThread) public {\r\n\t\towner = msg.sender;\r\n\t\tfeeNewThread = _feeNewThread;\r\n\t\tfeeReplyThread = _feeReplyThread;\r\n\t}\r\n\t\r\n\t// modifying the fees\r\n\tfunction SetFees(uint256 _feeNewThread, uint256 _feeReplyThread) public {\r\n\t\trequire(owner == msg.sender);\r\n\t\tfeeNewThread = _feeNewThread;\r\n\t\tfeeReplyThread = _feeReplyThread;\r\n\t}\r\n\r\n\t// To get the money back\r\n\tfunction withdraw(uint256 amount) public {\r\n\t\towner.transfer(amount);\r\n\t}\r\n\r\n\t//\r\n\t// Core\r\n\t//\r\n\r\n\t// To create a Thread\r\n\tfunction createThread(string _text, string _imageUrl) payable public {\r\n\t\t// collect the fees\r\n\t\trequire(msg.value >= feeNewThread); \r\n\t\t// calculate a new thread ID and post\r\n\t\tthreads[indexThreads] = thread(_text, _imageUrl, 0, 0, now);\r\n\t\t// add it to our last active threads array\r\n\t\tlastThreads[indexLastThreads] = indexThreads;\r\n\t\tindexLastThreads = addmod(indexLastThreads, 1, 20); // increment index\r\n\t\t// log!\r\n\t\tnewThreadEvent(indexThreads, _text, _imageUrl, now);\r\n\t\t// increment index for next thread\r\n\t\tindexThreads += 1;\r\n\t}\r\n\r\n\t// To reply to a thread\r\n\tfunction replyThread(uint256 _replyTo, string _text, string _imageUrl)  payable public {\r\n\t\t// collect the fees\r\n\t\trequire(msg.value >= feeReplyThread);\r\n\t\t// make sure you can't reply to an inexistant thread\r\n\t\trequire(_replyTo < indexThreads && _replyTo > 0);\r\n\t\t// post the reply with nextReply = 0 (this is the last message in the chain)\r\n\t\treplies[indexReplies] = reply(_text, _imageUrl, _replyTo, 0, now);\r\n\t\t// update the thread \r\n\t\tif(threads[_replyTo].indexFirstReply == 0){// we're first\r\n\t\t\tthreads[_replyTo].indexFirstReply = indexReplies;\r\n\t\t\tthreads[_replyTo].indexLastReply = indexReplies;\r\n\t\t}\r\n\t\telse { // we're not first so we update the previous reply as well\r\n\t\t\treplies[threads[_replyTo].indexLastReply].nextReply = indexReplies;\r\n\t\t\tthreads[_replyTo].indexLastReply = indexReplies;\r\n\t\t}\r\n\t\t// update the last active threads \r\n\t\tfor (uint8 i = 0; i < 20; i++) { \r\n\t\t\tif(lastThreads[i] == _replyTo) {\r\n\t\t\t\tbreak; // already in the list\r\n\t\t\t}\r\n\t\t\tif(i == 19) {\r\n\t\t\t\tlastThreads[indexLastThreads] = _replyTo;\r\n\t\t\t\tindexLastThreads = addmod(indexLastThreads, 1, 20);\r\n\t\t\t}\r\n\t\t} \r\n\t\t// log!\r\n\t\tnewReplyEvent(indexReplies, _replyTo, _text, _imageUrl, now);\r\n\t\t// increment index for next reply\r\n\t\tindexReplies += 1;\r\n\t}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lastThreads\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_feeNewThread\",\"type\":\"uint256\"},{\"name\":\"_feeReplyThread\",\"type\":\"uint256\"}],\"name\":\"SetFees\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeNewThread\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"replies\",\"outputs\":[{\"name\":\"text\",\"type\":\"string\"},{\"name\":\"imageUrl\",\"type\":\"string\"},{\"name\":\"replyTo\",\"type\":\"uint256\"},{\"name\":\"nextReply\",\"type\":\"uint256\"},{\"name\":\"timestamp\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_replyTo\",\"type\":\"uint256\"},{\"name\":\"_text\",\"type\":\"string\"},{\"name\":\"_imageUrl\",\"type\":\"string\"}],\"name\":\"replyThread\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeReplyThread\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"indexReplies\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"indexLastThreads\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_text\",\"type\":\"string\"},{\"name\":\"_imageUrl\",\"type\":\"string\"}],\"name\":\"createThread\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"indexThreads\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"threads\",\"outputs\":[{\"name\":\"text\",\"type\":\"string\"},{\"name\":\"imageUrl\",\"type\":\"string\"},{\"name\":\"indexLastReply\",\"type\":\"uint256\"},{\"name\":\"indexFirstReply\",\"type\":\"uint256\"},{\"name\":\"timestamp\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_feeNewThread\",\"type\":\"uint256\"},{\"name\":\"_feeReplyThread\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"threadId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"text\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"imageUrl\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"newThreadEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"replyId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"replyTo\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"text\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"imageUrl\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"newReplyEvent\",\"type\":\"event\"}]","ContractName":"FiveMedium","CompilerVersion":"v0.4.16+commit.d7661dd9","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000e35fa931a000000000000000000000000000000000000000000000000000000038d7ea4c68000","Library":"","SwarmSource":"bzzr://34bfc0bbf8f654cce801143e7a31d2011e6c4b208cd5f35577cd15e2f7e5dd68"}]}