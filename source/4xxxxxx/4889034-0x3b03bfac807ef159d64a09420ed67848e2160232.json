{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n// ==== Open Zeppelin library ===\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\r\n    assert(token.transfer(to, value));\r\n  }\r\n\r\n  function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\r\n    assert(token.transferFrom(from, to, value));\r\n  }\r\n\r\n  function safeApprove(ERC20 token, address spender, uint256 value) internal {\r\n    assert(token.approve(spender, value));\r\n  }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Contracts that should not own Ether\r\n * @author Remco Bloemen <remco@2π.com>\r\n * @dev This tries to block incoming ether to prevent accidental loss of Ether. Should Ether end up\r\n * in the contract, it will allow the owner to reclaim this ether.\r\n * @notice Ether can still be send to this contract by:\r\n * calling functions labeled `payable`\r\n * `selfdestruct(contract_address)`\r\n * mining directly to the contract address\r\n*/\r\ncontract HasNoEther is Ownable {\r\n\r\n  /**\r\n  * @dev Constructor that rejects incoming Ether\r\n  * @dev The `payable` flag is added so we can access `msg.value` without compiler warning. If we\r\n  * leave out payable, then Solidity will allow inheriting contracts to implement a payable\r\n  * constructor. By doing it this way we prevent a payable constructor from working. Alternatively\r\n  * we could use assembly to access msg.value.\r\n  */\r\n  function HasNoEther() public payable {\r\n    require(msg.value == 0);\r\n  }\r\n\r\n  /**\r\n   * @dev Disallows direct send by settings a default function without the `payable` flag.\r\n   */\r\n  function() external {\r\n  }\r\n\r\n  /**\r\n   * @dev Transfer all Ether held by the contract to the owner.\r\n   */\r\n  function reclaimEther() external onlyOwner {\r\n    assert(owner.send(this.balance));\r\n  }\r\n}\r\n\r\n/**\r\n * @title Contracts that should not own Contracts\r\n * @author Remco Bloemen <remco@2π.com>\r\n * @dev Should contracts (anything Ownable) end up being owned by this contract, it allows the owner\r\n * of this contract to reclaim ownership of the contracts.\r\n */\r\ncontract HasNoContracts is Ownable {\r\n\r\n  /**\r\n   * @dev Reclaim ownership of Ownable contracts\r\n   * @param contractAddr The address of the Ownable to be reclaimed.\r\n   */\r\n  function reclaimContract(address contractAddr) external onlyOwner {\r\n    Ownable contractInst = Ownable(contractAddr);\r\n    contractInst.transferOwnership(owner);\r\n  }\r\n}\r\n\r\n/**\r\n * @title Contracts that should be able to recover tokens\r\n * @author SylTi\r\n * @dev This allow a contract to recover any ERC20 token received in a contract by transferring the balance to the contract owner.\r\n * This will prevent any accidental loss of tokens.\r\n */\r\ncontract CanReclaimToken is Ownable {\r\n  using SafeERC20 for ERC20Basic;\r\n\r\n  /**\r\n   * @dev Reclaim all ERC20Basic compatible tokens\r\n   * @param token ERC20Basic The address of the token contract\r\n   */\r\n  function reclaimToken(ERC20Basic token) external onlyOwner {\r\n    uint256 balance = token.balanceOf(this);\r\n    token.safeTransfer(owner, balance);\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Contracts that should not own Tokens\r\n * @author Remco Bloemen <remco@2π.com>\r\n * @dev This blocks incoming ERC23 tokens to prevent accidental loss of tokens.\r\n * Should tokens (any ERC20Basic compatible) end up in the contract, it allows the\r\n * owner to reclaim the tokens.\r\n */\r\ncontract HasNoTokens is CanReclaimToken {\r\n\r\n /**\r\n  * @dev Reject all ERC23 compatible tokens\r\n  * @param from_ address The address that is transferring the tokens\r\n  * @param value_ uint256 the amount of the specified token\r\n  * @param data_ Bytes The data passed from the caller.\r\n  */\r\n  function tokenFallback(address from_, uint256 value_, bytes data_) pure external {\r\n    from_;\r\n    value_;\r\n    data_;\r\n    revert();\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Base contract for contracts that should not own things.\r\n * @author Remco Bloemen <remco@2π.com>\r\n * @dev Solves a class of errors where a contract accidentally becomes owner of Ether, Tokens or\r\n * Owned contracts. See respective base contracts for details.\r\n */\r\ncontract NoOwner is HasNoEther, HasNoTokens, HasNoContracts {\r\n}\r\n\r\n/**\r\n * @title Destructible\r\n * @dev Base contract that can be destroyed by owner. All funds in contract will be sent to the owner.\r\n */\r\ncontract Destructible is Ownable {\r\n\r\n  function Destructible() public payable { }\r\n\r\n  /**\r\n   * @dev Transfers the current balance to the owner and terminates the contract.\r\n   */\r\n  function destroy() onlyOwner public {\r\n    selfdestruct(owner);\r\n  }\r\n\r\n  function destroyAndSend(address _recipient) onlyOwner public {\r\n    selfdestruct(_recipient);\r\n  }\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Mintable token\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\r\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n */\r\n\r\ncontract MintableToken is StandardToken, Ownable {\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\r\n    totalSupply = totalSupply.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    Mint(_to, _amount);\r\n    Transfer(address(0), _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() onlyOwner canMint public returns (bool) {\r\n    mintingFinished = true;\r\n    MintFinished();\r\n    return true;\r\n  }\r\n}\r\n\r\n/**\r\n * @title TokenVesting\r\n * @dev A token holder contract that can release its token balance gradually like a\r\n * typical vesting scheme, with a cliff and vesting period. Optionally revocable by the\r\n * owner.\r\n */\r\ncontract TokenVesting is Ownable {\r\n  using SafeMath for uint256;\r\n  using SafeERC20 for ERC20Basic;\r\n\r\n  event Released(uint256 amount);\r\n  event Revoked();\r\n\r\n  // beneficiary of tokens after they are released\r\n  address public beneficiary;\r\n\r\n  uint256 public cliff;\r\n  uint256 public start;\r\n  uint256 public duration;\r\n\r\n  bool public revocable;\r\n\r\n  mapping (address => uint256) public released;\r\n  mapping (address => bool) public revoked;\r\n\r\n  /**\r\n   * @dev Creates a vesting contract that vests its balance of any ERC20 token to the\r\n   * _beneficiary, gradually in a linear fashion until _start + _duration. By then all\r\n   * of the balance will have vested.\r\n   * @param _beneficiary address of the beneficiary to whom vested tokens are transferred\r\n   * @param _cliff duration in seconds of the cliff in which tokens will begin to vest\r\n   * @param _duration duration in seconds of the period in which the tokens will vest\r\n   * @param _revocable whether the vesting is revocable or not\r\n   */\r\n  function TokenVesting(address _beneficiary, uint256 _start, uint256 _cliff, uint256 _duration, bool _revocable) public {\r\n    require(_beneficiary != address(0));\r\n    require(_cliff <= _duration);\r\n\r\n    beneficiary = _beneficiary;\r\n    revocable = _revocable;\r\n    duration = _duration;\r\n    cliff = _start.add(_cliff);\r\n    start = _start;\r\n  }\r\n\r\n  /**\r\n   * @notice Transfers vested tokens to beneficiary.\r\n   * @param token ERC20 token which is being vested\r\n   */\r\n  function release(ERC20Basic token) public {\r\n    uint256 unreleased = releasableAmount(token);\r\n\r\n    require(unreleased > 0);\r\n\r\n    released[token] = released[token].add(unreleased);\r\n\r\n    token.safeTransfer(beneficiary, unreleased);\r\n\r\n    Released(unreleased);\r\n  }\r\n\r\n  /**\r\n   * @notice Allows the owner to revoke the vesting. Tokens already vested\r\n   * remain in the contract, the rest are returned to the owner.\r\n   * @param token ERC20 token which is being vested\r\n   */\r\n  function revoke(ERC20Basic token) public onlyOwner {\r\n    require(revocable);\r\n    require(!revoked[token]);\r\n\r\n    uint256 balance = token.balanceOf(this);\r\n\r\n    uint256 unreleased = releasableAmount(token);\r\n    uint256 refund = balance.sub(unreleased);\r\n\r\n    revoked[token] = true;\r\n\r\n    token.safeTransfer(owner, refund);\r\n\r\n    Revoked();\r\n  }\r\n\r\n  /**\r\n   * @dev Calculates the amount that has already vested but hasn't been released yet.\r\n   * @param token ERC20 token which is being vested\r\n   */\r\n  function releasableAmount(ERC20Basic token) public view returns (uint256) {\r\n    return vestedAmount(token).sub(released[token]);\r\n  }\r\n\r\n  /**\r\n   * @dev Calculates the amount that has already vested.\r\n   * @param token ERC20 token which is being vested\r\n   */\r\n  function vestedAmount(ERC20Basic token) public view returns (uint256) {\r\n    uint256 currentBalance = token.balanceOf(this);\r\n    uint256 totalBalance = currentBalance.add(released[token]);\r\n\r\n    if (now < cliff) {\r\n      return 0;\r\n    } else if (now >= start.add(duration) || revoked[token]) {\r\n      return totalBalance;\r\n    } else {\r\n      return totalBalance.mul(now.sub(start)).div(duration);\r\n    }\r\n  }\r\n}\r\n\r\n\r\n// ==== AALM Contracts ===\r\n\r\ncontract AALMToken is MintableToken, NoOwner { //MintableToken is StandardToken, Ownable\r\n    string public symbol = 'AALM';\r\n    string public name = 'Alm Token';\r\n    uint8 public constant decimals = 18;\r\n\r\n    address founder;    //founder address to allow him transfer tokens while minting\r\n    function init(address _founder) onlyOwner public{\r\n        founder = _founder;\r\n    }\r\n\r\n    /**\r\n     * Allow transfer only after crowdsale finished\r\n     */\r\n    modifier canTransfer() {\r\n        require(mintingFinished || msg.sender == founder);\r\n        _;\r\n    }\r\n    \r\n    function transfer(address _to, uint256 _value) canTransfer public returns (bool) {\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) canTransfer public returns (bool) {\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n}\r\n\r\ncontract AALMCrowdsale is Ownable, CanReclaimToken, Destructible {\r\n    using SafeMath for uint256;    \r\n\r\n    uint32 private constant PERCENT_DIVIDER = 100;\r\n\r\n    struct BulkBonus {\r\n        uint256 minAmount;      //Minimal amount to receive bonus (including this amount)\r\n        uint32 bonusPercent;    //a bonus percent, so that bonus = amount.mul(bonusPercent).div(PERCENT_DIVIDER)\r\n    }\r\n\r\n    uint64 public startTimestamp;   //Crowdsale start timestamp\r\n    uint64 public endTimestamp;     //Crowdsale end timestamp\r\n    uint256 public minCap;          //minimal amount of sold tokens (if not reached - ETH may be refunded)\r\n    uint256 public hardCap;         //total amount of tokens available\r\n    uint256 public baseRate;        //how many tokens will be minted for 1 ETH (like 1000 AALM for 1 ETH) without bonuses\r\n\r\n    uint32 public maxTimeBonusPercent;  //A maximum time bonus percent: at the start of crowdsale timeBonus = value.mul(baseRate).mul(maxTimeBonusPercent).div(PERCENT_DIVIDER)\r\n    uint32 public referrerBonusPercent; //A bonus percent that refferer will receive, so that referrerBonus = value.mul(baseRate).mul(referrerBonusPercent).div(PERCENT_DIVIDER)\r\n    uint32 public referralBonusPercent; //A bonus percent that refferal will receive, so that referralBonus = value.mul(baseRate).mul(referralBonusPercent).div(PERCENT_DIVIDER)\r\n    BulkBonus[] public bulkBonuses;     //Bulk Bonuses sorted by ether amount (minimal amount first)\r\n  \r\n\r\n    uint256 public tokensMinted;    //total amount of minted tokens\r\n    uint256 public tokensSold;      //total amount of tokens sold(!) on ICO, including all bonuses\r\n    uint256 public collectedEther;  //total amount of ether collected during ICO (without Pre-ICO)\r\n\r\n    mapping(address => uint256) contributions; //amount of ether (in wei)received from a buyer\r\n\r\n    AALMToken public token;\r\n    TokenVesting public founderVestingContract; //Contract which holds Founder's tokens\r\n\r\n    bool public finalized;\r\n\r\n    function AALMCrowdsale(uint64 _startTimestamp, uint64 _endTimestamp, uint256 _hardCap, uint256 _minCap, \r\n        uint256 _founderTokensImmediate, uint256 _founderTokensVested, uint256 _vestingDuration,\r\n        uint256 _baseRate, uint32 _maxTimeBonusPercent, uint32 _referrerBonusPercent, uint32 _referralBonusPercent, \r\n        uint256[] bulkBonusMinAmounts, uint32[] bulkBonusPercents \r\n        ) public {\r\n        require(_startTimestamp > now);\r\n        require(_startTimestamp < _endTimestamp);\r\n        startTimestamp = _startTimestamp;\r\n        endTimestamp = _endTimestamp;\r\n\r\n        require(_hardCap > 0);\r\n        hardCap = _hardCap;\r\n\r\n        minCap = _minCap;\r\n\r\n        initRatesAndBonuses(_baseRate, _maxTimeBonusPercent, _referrerBonusPercent, _referralBonusPercent, bulkBonusMinAmounts, bulkBonusPercents);\r\n\r\n        token = new AALMToken();\r\n        token.init(owner);\r\n\r\n        require(_founderTokensImmediate.add(_founderTokensVested) < _hardCap);\r\n        mintTokens(owner, _founderTokensImmediate);\r\n\r\n        founderVestingContract = new TokenVesting(owner, endTimestamp, 0, _vestingDuration, false);\r\n        mintTokens(founderVestingContract, _founderTokensVested);\r\n    }\r\n\r\n    function initRatesAndBonuses(\r\n        uint256 _baseRate, uint32 _maxTimeBonusPercent, uint32 _referrerBonusPercent, uint32 _referralBonusPercent, \r\n        uint256[] bulkBonusMinAmounts, uint32[] bulkBonusPercents \r\n        ) internal {\r\n\r\n        require(_baseRate > 0);\r\n        baseRate = _baseRate;\r\n\r\n        maxTimeBonusPercent = _maxTimeBonusPercent;\r\n        referrerBonusPercent = _referrerBonusPercent;\r\n        referralBonusPercent = _referralBonusPercent;\r\n\r\n        uint256 prevBulkAmount = 0;\r\n        require(bulkBonusMinAmounts.length == bulkBonusPercents.length);\r\n        bulkBonuses.length = bulkBonusMinAmounts.length;\r\n        for(uint8 i=0; i < bulkBonuses.length; i++){\r\n            bulkBonuses[i] = BulkBonus({minAmount:bulkBonusMinAmounts[i], bonusPercent:bulkBonusPercents[i]});\r\n            BulkBonus storage bb = bulkBonuses[i];\r\n            require(prevBulkAmount < bb.minAmount);\r\n            prevBulkAmount = bb.minAmount;\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @notice Distribute tokens sold during Pre-ICO\r\n    * @param beneficiaries Array of beneficiari addresses\r\n    * @param amounts Array of amounts of tokens to send\r\n    */\r\n    function distributePreICOTokens(address[] beneficiaries, uint256[] amounts) onlyOwner public {\r\n        require(beneficiaries.length == amounts.length);\r\n        for(uint256 i=0; i<beneficiaries.length; i++){\r\n            mintTokens(beneficiaries[i], amounts[i]);\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @notice Sell tokens directly, without referral bonuses\r\n    */\r\n    function () payable public {\r\n        sale(msg.sender, msg.value, address(0));\r\n    }\r\n    /**\r\n    * @notice Sell tokens via RefferalCrowdsale contract\r\n    * @param beneficiary Original sender (buyer)\r\n    * @param referrer The partner who referered the buyer\r\n    */\r\n    function referralSale(address beneficiary, address referrer) payable public returns(bool) {\r\n        sale(beneficiary, msg.value, referrer);\r\n        return true;\r\n    }\r\n    /**\r\n    * @dev Internal functions to sell tokens\r\n    * @param beneficiary who should receive tokens (the buyer)\r\n    * @param value of ether sent by buyer\r\n    * @param referrer who should receive referrer bonus, if any. Zero address if no referral bonuses should be paid\r\n    */\r\n    function sale(address beneficiary, uint256 value, address referrer) internal {\r\n        require(crowdsaleOpen());\r\n        require(value > 0);\r\n        collectedEther = collectedEther.add(value);\r\n        contributions[beneficiary] = contributions[beneficiary].add(value);\r\n        uint256 amount;\r\n        if(referrer == address(0)){\r\n            amount = getTokensWithBonuses(value, false);\r\n        } else{\r\n            amount = getTokensWithBonuses(value, true);\r\n            uint256 referrerAmount  = getReferrerBonus(value);\r\n            tokensSold = tokensSold.add(referrerAmount);\r\n            mintTokens(referrer, referrerAmount);\r\n        }\r\n        tokensSold = tokensSold.add(amount);\r\n        mintTokens(beneficiary, amount);\r\n    }\r\n\r\n    /**\r\n    * @notice Mint tokens for purshases with Non-Ether currencies\r\n    * @param beneficiary whom to send tokend\r\n    * @param amount how much tokens to send\r\n    * param message reason why we are sending tokens (not stored anythere, only in transaction itself)\r\n    */\r\n    function saleNonEther(address beneficiary, uint256 amount, string /*message*/) public onlyOwner {\r\n        mintTokens(beneficiary, amount);\r\n    }\r\n\r\n    /**\r\n    * @notice If crowdsale is running\r\n    */\r\n    function crowdsaleOpen() view public returns(bool) {\r\n        return (!finalized) && (tokensMinted < hardCap) && (startTimestamp <= now) && (now <= endTimestamp);\r\n    }\r\n\r\n    /**\r\n    * @notice Calculates how many tokens are left to sale\r\n    * @return amount of tokens left before hard cap reached\r\n    */\r\n    function getTokensLeft() view public returns(uint256) {\r\n        return hardCap.sub(tokensMinted);\r\n    }\r\n\r\n    /**\r\n    * @notice Calculates how many tokens one should receive at curent time for a specified value of ether\r\n    * @param value of ether to get bonus for\r\n    * @param withReferralBonus if should add referral bonus\r\n    * @return bonus tokens\r\n    */\r\n    function getTokensWithBonuses(uint256 value, bool withReferralBonus) view public returns(uint256) {\r\n        uint256 amount = value.mul(baseRate);\r\n        amount = amount.add(getTimeBonus(value)).add(getBulkBonus(value));\r\n        if(withReferralBonus){\r\n            amount = amount.add(getReferralBonus(value));\r\n        }\r\n        return amount;\r\n    }\r\n\r\n    /**\r\n    * @notice Calculates current time bonus\r\n    * @param value of ether to get bonus for\r\n    * @return bonus tokens\r\n    */\r\n    function getTimeBonus(uint256 value) view public returns(uint256) {\r\n        uint256 maxBonus = value.mul(baseRate).mul(maxTimeBonusPercent).div(PERCENT_DIVIDER);\r\n        return maxBonus.mul(endTimestamp - now).div(endTimestamp - startTimestamp);\r\n    }\r\n\r\n    /**\r\n    * @notice Calculates a bulk bonus for a specified value of ether\r\n    * @param value of ether to get bonus for\r\n    * @return bonus tokens\r\n    */\r\n    function getBulkBonus(uint256 value) view public returns(uint256) {\r\n        for(uint8 i=uint8(bulkBonuses.length); i > 0; i--){\r\n            uint8 idx = i - 1; //if i  = bulkBonuses.length-1 to 0, i-- fails on last iteration\r\n            if (value >= bulkBonuses[idx].minAmount) {\r\n                return value.mul(baseRate).mul(bulkBonuses[idx].bonusPercent).div(PERCENT_DIVIDER);\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n    * @notice Calculates referrer bonus\r\n    * @param value of ether  to get bonus for\r\n    * @return bonus tokens\r\n    */\r\n    function getReferrerBonus(uint256 value) view public returns(uint256) {\r\n        return value.mul(baseRate).mul(referrerBonusPercent).div(PERCENT_DIVIDER);\r\n    }\r\n    /**\r\n    * @notice Calculates referral bonus\r\n    * @param value of ether  to get bonus for\r\n    * @return bonus tokens\r\n    */\r\n    function getReferralBonus(uint256 value) view public returns(uint256) {\r\n        return value.mul(baseRate).mul(referralBonusPercent).div(PERCENT_DIVIDER);\r\n    }\r\n\r\n    /**\r\n    * @dev Helper function to mint tokens and increase tokensMinted counter\r\n    */\r\n    function mintTokens(address beneficiary, uint256 amount) internal {\r\n        tokensMinted = tokensMinted.add(amount);\r\n        require(tokensMinted <= hardCap);\r\n        assert(token.mint(beneficiary, amount));\r\n    }\r\n\r\n    /**\r\n    * @notice Sends all contributed ether back if minimum cap is not reached by the end of crowdsale\r\n    */\r\n    function refund() public returns(bool){\r\n        return refundTo(msg.sender);\r\n    }\r\n    function refundTo(address beneficiary) public returns(bool) {\r\n        require(contributions[beneficiary] > 0);\r\n        require(finalized || (now > endTimestamp));\r\n        require(tokensSold < minCap);\r\n\r\n        uint256 _refund = contributions[beneficiary];\r\n        contributions[beneficiary] = 0;\r\n        beneficiary.transfer(_refund);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @notice Closes crowdsale, finishes minting (allowing token transfers), transfers token ownership to the owner\r\n    */\r\n    function finalizeCrowdsale() public onlyOwner {\r\n        finalized = true;\r\n        token.finishMinting();\r\n        token.transferOwnership(owner);\r\n        if(tokensSold >= minCap && this.balance > 0){\r\n            owner.transfer(this.balance);\r\n        }\r\n    }\r\n    /**\r\n    * @notice Claim collected ether without closing crowdsale\r\n    */\r\n    function claimEther() public onlyOwner {\r\n        require(tokensSold >= minCap);\r\n        owner.transfer(this.balance);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"finalizeCrowdsale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"reclaimToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"baseRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxTimeBonusPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"collectedEther\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"withReferralBonus\",\"type\":\"bool\"}],\"name\":\"getTokensWithBonuses\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bulkBonuses\",\"outputs\":[{\"name\":\"minAmount\",\"type\":\"uint256\"},{\"name\":\"bonusPercent\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refund\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensMinted\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"refundTo\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"string\"}],\"name\":\"saleNonEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"destroy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"founderVestingContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiaries\",\"type\":\"address[]\"},{\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"distributePreICOTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"getReferralBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleOpen\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"finalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"getReferrerBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"getTimeBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"},{\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"referralSale\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"referrerBonusPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"getBulkBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTokensLeft\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"referralBonusPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"destroyAndSend\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hardCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_startTimestamp\",\"type\":\"uint64\"},{\"name\":\"_endTimestamp\",\"type\":\"uint64\"},{\"name\":\"_hardCap\",\"type\":\"uint256\"},{\"name\":\"_minCap\",\"type\":\"uint256\"},{\"name\":\"_founderTokensImmediate\",\"type\":\"uint256\"},{\"name\":\"_founderTokensVested\",\"type\":\"uint256\"},{\"name\":\"_vestingDuration\",\"type\":\"uint256\"},{\"name\":\"_baseRate\",\"type\":\"uint256\"},{\"name\":\"_maxTimeBonusPercent\",\"type\":\"uint32\"},{\"name\":\"_referrerBonusPercent\",\"type\":\"uint32\"},{\"name\":\"_referralBonusPercent\",\"type\":\"uint32\"},{\"name\":\"bulkBonusMinAmounts\",\"type\":\"uint256[]\"},{\"name\":\"bulkBonusPercents\",\"type\":\"uint32[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"AALMCrowdsale","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000005a6d58d0000000000000000000000000000000000000000000000000000000005a96375000000000000000000000000000000000000000000052b79ca6fe5f0d05600000000000000000000000000000000000000000000000007f0e10af47c1c700000000000000000000000000000000000000000000000004f68ca6d8cd91c6000000000000000000000000000000000000000000000000034f086f3b33b6840000000000000000000000000000000000000000000000000000000000000001e133800000000000000000000000000000000000000000000000000000000000001b58000000000000000000000000000000000000000000000000000000000000000f0000000000000000000000000000000000000000000000000000000000000005000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000000001a0000000000000000000000000000000000000000000000000000000000000022000000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000de0b6b3a764000000000000000000000000000000000000000000000000000029a2241af62c00000000000000000000000000000000000000000000000000008ac7230489e8000000000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000005000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000f","Library":"","SwarmSource":"bzzr://ea4a0e0e8d2c9b9427b7ae3eb26c493140475dfe85040ad3bcf097f553d1aa74"}]}