{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.16;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner {\r\n    if (newOwner != address(0)) {\r\n      owner = newOwner;\r\n    }\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) constant returns (uint256);\r\n  function transfer(address to, uint256 value) returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) returns (bool) {\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) returns (bool);\r\n  function approve(address spender, uint256 value) returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n   mapping (address => mapping (address => uint256)) allowed;\r\n\r\n\r\n   /**\r\n    * @dev Transfer tokens from one address to another\r\n    * @param _from address The address which you want to send tokens from\r\n    * @param _to address The address which you want to transfer to\r\n    * @param _value uint256 the amout of tokens to be transfered\r\n    */\r\n   function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\r\n     var _allowance = allowed[_from][msg.sender];\r\n\r\n     // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n     // require (_value <= _allowance);\r\n\r\n     balances[_to] = balances[_to].add(_value);\r\n     balances[_from] = balances[_from].sub(_value);\r\n     allowed[_from][msg.sender] = _allowance.sub(_value);\r\n     Transfer(_from, _to, _value);\r\n     return true;\r\n   }\r\n\r\n   /**\r\n    * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n    * @param _spender The address which will spend the funds.\r\n    * @param _value The amount of tokens to be spent.\r\n    */\r\n   function approve(address _spender, uint256 _value) returns (bool) {\r\n\r\n     // To change the approve amount you first have to reduce the addresses`\r\n     //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n     //  already 0 to mitigate the race condition described here:\r\n     //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n\r\n     allowed[msg.sender][_spender] = _value;\r\n     Approval(msg.sender, _spender, _value);\r\n     return true;\r\n   }\r\n\r\n   /**\r\n    * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n    * @param _owner address The address which owns the funds.\r\n    * @param _spender address The address which will spend the funds.\r\n    * @return A uint256 specifing the amount of tokens still avaible for the spender.\r\n    */\r\n   function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n     return allowed[_owner][_spender];\r\n   }\r\n\r\n }\r\n\r\ncontract MintableToken is StandardToken, Ownable {\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will recieve the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(address _to, uint256 _amount) onlyOwner canMint returns (bool) {\r\n    totalSupply = totalSupply.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    Transfer(0X0, _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() onlyOwner returns (bool) {\r\n    mintingFinished = true;\r\n    MintFinished();\r\n    return true;\r\n  }\r\n}\r\n\r\ncontract WisePlat is MintableToken {\r\n  string public name = \"WisePlat Token\";\r\n  string public symbol = \"WISE\";\r\n  uint256 public decimals = 18;\r\n  address public bountyWallet = 0x0;\r\n\r\n  bool public transferStatus = false;\r\n\r\n  /**\r\n   * @dev modifier that throws if trading has not started yet\r\n   */\r\n  modifier hasStartedTransfer() {\r\n    require(transferStatus || msg.sender == bountyWallet);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the owner to enable transfer.\r\n   */\r\n  function startTransfer() public onlyOwner {\r\n    transferStatus = true;\r\n  }\r\n  /**\r\n   * @dev Allows the owner to stop transfer.\r\n   */\r\n  function stopTransfer() public onlyOwner {\r\n    transferStatus = false;\r\n  }\r\n\r\n  function setbountyWallet(address _bountyWallet) public onlyOwner {\r\n    bountyWallet = _bountyWallet;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows anyone to transfer the WISE tokens once transfer has started\r\n   * @param _to the recipient address of the tokens.\r\n   * @param _value number of tokens to be transfered.\r\n   */\r\n  function transfer(address _to, uint _value) hasStartedTransfer returns (bool){\r\n    return super.transfer(_to, _value);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows anyone to transfer the WISE tokens once transfer has started\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint the amout of tokens to be transfered\r\n   */\r\n  function transferFrom(address _from, address _to, uint _value) hasStartedTransfer returns (bool){\r\n    return super.transferFrom(_from, _to, _value);\r\n  }\r\n}\r\n\r\ncontract WisePlatSale is Ownable {\r\n  using SafeMath for uint256;\r\n\r\n  // The token being offered\r\n  WisePlat public token;\r\n\r\n  // start and end block where investments are allowed (both inclusive)\r\n  uint256 public constant startTimestamp\t= 1509274800;\t\t//Pre-ICO start\t\t\t\t\t\t2017/10/29 @ 11:00:00 (UTC)\r\n  uint256 public constant middleTimestamp\t= 1511607601;\t\t//Pre-ICO finish and ICO start\t\t2017/11/25 @ 11:00:01 (UTC)\r\n  uint256 public constant endTimestamp\t\t= 1514764799;\t\t//ICO finish\t\t\t\t\t\t2017/12/31 @ 23:59:59 (UTC)\r\n\r\n  // address where funds are collected\r\n  address public constant devWallet \t\t= 0x00d6F1eA4238e8d9f1C33B7500CB89EF3e91190c;\r\n  address public constant proWallet \t\t= 0x6501BDA688e8AC6C9cD96dc2DFBd6bDF3e886C05;\r\n  address public constant bountyWallet \t\t= 0x354FFa86F138883b880C282000B5005E867E8eE4;\r\n  address public constant remainderWallet\t= 0x656C64D5C8BADe2a56A564B12706eE89bbe486EA;\r\n  address public constant fundsWallet\t\t= 0x06D49e8aA90b1413A641D69c6B8AC154f5c9FE92;\r\n \r\n  // how many token units a buyer gets per wei\r\n  uint256 public rate\t\t\t\t\t\t= 10;\r\n  uint256 public constant ratePreICO\t\t= 20;\t//on Pre-ICO it is 20 WISE for 1 ETH\r\n  uint256 public constant rateICO\t\t\t= 15;\t//on ICO it is 15 WISE for 1 ETH\r\n  \r\n  // amount of raised money in wei\r\n  uint256 public weiRaised;\r\n\r\n  // minimum contribution to participate in token offer\r\n  uint256 public constant minContribution \t\t= 0.1 ether;\r\n  uint256 public constant minContribution_mBTC \t= 10;\r\n  uint256 public rateBTCxETH \t\t\t\t\t= 17;\r\n\r\n  // WISE tokens\r\n  uint256 public constant tokensTotal\t\t=\t 10000000 * 1e18;\t\t//WISE Total tokens\t\t\t\t10,000,000.00\r\n  uint256 public constant tokensCrowdsale\t=\t  7000000 * 1e18;\t\t//WISE tokens for Crowdsale\t\t 7,000,000.00\r\n  uint256 public constant tokensDevelopers  =\t  1900000 * 1e18;\t\t//WISE tokens for Developers\t 1,900,000.00\r\n  uint256 public constant tokensPromotion\t=\t  1000000 * 1e18;\t\t//WISE tokens for Promotion\t\t 1,000,000.00\r\n  uint256 public constant tokensBounty      = \t   100000 * 1e18;\t\t//WISE tokens for Bounty\t\t   100,000.00\r\n  uint256 public tokensRemainder;  \r\n  \r\n  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n  event TokenClaim4BTC(address indexed purchaser_evt, address indexed beneficiary_evt, uint256 value_evt, uint256 amount_evt, uint256 btc_evt, uint256 rateBTCxETH_evt);\r\n  event SaleClosed();\r\n\r\n  function WisePlatSale() {\r\n    token = new WisePlat();\r\n\ttoken.mint(devWallet, tokensDevelopers);\r\n\ttoken.mint(proWallet, tokensPromotion);\r\n\ttoken.mint(bountyWallet, tokensBounty);\r\n\ttoken.setbountyWallet(bountyWallet);\t\t//allow transfer for bountyWallet\r\n    require(startTimestamp >= now);\r\n    require(endTimestamp >= startTimestamp);\r\n  }\r\n\r\n  // check if valid purchase\r\n  modifier validPurchase {\r\n    require(now >= startTimestamp);\r\n    require(now <= endTimestamp);\r\n    require(msg.value >= minContribution);\r\n    require(tokensTotal > token.totalSupply());\r\n    _;\r\n  }\r\n  // check if valid claim for BTC\r\n  modifier validPurchase4BTC {\r\n    require(now >= startTimestamp);\r\n    require(now <= endTimestamp);\r\n    require(tokensTotal > token.totalSupply());\r\n    _;\r\n  }\r\n\r\n  // @return true if crowdsale event has ended\r\n  function hasEnded() public constant returns (bool) {\r\n    bool timeLimitReached = now > endTimestamp;\r\n    bool allOffered = tokensTotal <= token.totalSupply();\r\n    return timeLimitReached || allOffered;\r\n  }\r\n\r\n  // low level token purchase function\r\n  function buyTokens(address beneficiary) payable validPurchase {\r\n    require(beneficiary != 0x0);\r\n\r\n    uint256 weiAmount = msg.value;\r\n\r\n    // calculate token amount to be created\r\n\tif (now < middleTimestamp) {rate = ratePreICO;} else {rate = rateICO;}\r\n    uint256 tokens = weiAmount.mul(rate);\r\n    \r\n\trequire(token.totalSupply().add(tokens) <= tokensTotal);\r\n\t\r\n    // update state\r\n    weiRaised = weiRaised.add(weiAmount);\r\n    \r\n    token.mint(beneficiary, tokens);\r\n    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\r\n    fundsWallet.transfer(msg.value);\t//transfer funds to fundsWallet\r\n  }\r\n  \r\n  //claim tokens buyed for mBTC\r\n  function claimTokens4mBTC(address beneficiary, uint256 mBTC) validPurchase4BTC public onlyOwner {\r\n    require(beneficiary != 0x0);\r\n\trequire(mBTC >= minContribution_mBTC);\r\n\r\n\t//uint256 _BTC = mBTC.div(1000);\t\t\t//convert mBTC\tto BTC\r\n\t//uint256 _ETH = _BTC.mul(rateBTCxETH);\t\t//convert BTC\tto ETH\r\n    //uint256 weiAmount = _ETH * 1e18;\t\t\t//convert ETH\tto wei\r\n\tuint256 weiAmount = mBTC.mul(rateBTCxETH) * 1e15;\t//all convert in one line mBTC->BTC->ETH->wei\r\n\r\n    // calculate token amount to be created\r\n\tif (now < middleTimestamp) {rate = ratePreICO;} else {rate = rateICO;}\r\n    uint256 tokens = weiAmount.mul(rate);\r\n    \r\n\trequire(token.totalSupply().add(tokens) <= tokensTotal);\r\n\t\r\n    // update state\r\n    weiRaised = weiRaised.add(weiAmount);\r\n    \r\n    token.mint(beneficiary, tokens);\r\n    TokenClaim4BTC(msg.sender, beneficiary, weiAmount, tokens, mBTC, rateBTCxETH);\r\n    //fundsWallet.transfer(msg.value);\t//transfer funds to fundsWallet\t- already should be transfered to BTC wallet\r\n  }\r\n\r\n  // to enable transfer\r\n  function startTransfers() public onlyOwner {\r\n\ttoken.startTransfer();\r\n  }\r\n  \r\n  // to stop transfer\r\n  function stopTransfers() public onlyOwner {\r\n\ttoken.stopTransfer();\r\n  }\r\n  \r\n  // to correct exchange rate ETH for BTC\r\n  function correctExchangeRateBTCxETH(uint256 _rateBTCxETH) public onlyOwner {\r\n\trequire(_rateBTCxETH != 0);\r\n\trateBTCxETH = _rateBTCxETH;\r\n  }\r\n  \r\n  // finish mining coins and transfer ownership of WISE token to owner\r\n  function finishMinting() public onlyOwner {\r\n    require(hasEnded());\r\n    uint issuedTokenSupply = token.totalSupply();\t\t\t\r\n\ttokensRemainder = tokensTotal.sub(issuedTokenSupply);\r\n\tif (tokensRemainder > 0) {token.mint(remainderWallet, tokensRemainder);}\r\n    token.finishMinting();\r\n    token.transferOwnership(owner);\r\n    SaleClosed();\r\n  }\r\n\r\n  // fallback function can be used to buy tokens\r\n  function () payable {\r\n    buyTokens(msg.sender);\r\n  }\r\n  \r\n  /**\r\n  * @dev Reclaim all ERC20Basic compatible tokens\r\n  * @param tokenAddr address The address of the token contract\r\n  */\r\n  function reclaimToken(address tokenAddr) external onlyOwner {\r\n\trequire(!isTokenOfferedToken(tokenAddr));\r\n    ERC20Basic tokenInst = ERC20Basic(tokenAddr);\r\n    uint256 balance = tokenInst.balanceOf(this);\r\n    tokenInst.transfer(msg.sender, balance);\r\n  }\r\n  function isTokenOfferedToken(address tokenAddr) returns(bool) {\r\n        return token == tokenAddr;\r\n  }\r\n \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_bountyWallet\",\"type\":\"address\"}],\"name\":\"setbountyWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bountyWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stopTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transferStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"WisePlat","CompilerVersion":"v0.4.16+commit.d7661dd9","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://5983b0cddc8bdcb76d6e98685a31a433dd3b57a7a9cc23c3bfcaf2dc2ded0c24"}]}