{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n// sets support up to 2^256-2 members\r\n// memberIndices stores the index of members + 1, not their actual index\r\nlibrary Sets {\r\n    // address set\r\n    struct addressSet {\r\n        address[] members;\r\n        mapping(address => uint) memberIndices;\r\n    }\r\n\r\n    function insert(addressSet storage self, address other) public {\r\n        if (!contains(self, other)) {\r\n            assert(length(self) < 2**256-1);\r\n            self.members.push(other);\r\n            self.memberIndices[other] = length(self);\r\n        }\r\n    }\r\n\r\n    function remove(addressSet storage self, address other) public {\r\n        if (contains(self, other)) {\r\n            uint replaceIndex = self.memberIndices[other];\r\n            address lastMember = self.members[length(self)-1];\r\n            // overwrite other with the last member and remove last member\r\n            self.members[replaceIndex-1] = lastMember;\r\n            self.members.length--;\r\n            // reflect this change in the indices\r\n            self.memberIndices[lastMember] = replaceIndex;\r\n            delete self.memberIndices[other];\r\n        }\r\n    }\r\n\r\n    function contains(addressSet storage self, address other) public view returns (bool) {\r\n        return self.memberIndices[other] > 0;\r\n    }\r\n\r\n    function length(addressSet storage self) public view returns (uint) {\r\n        return self.members.length;\r\n    }\r\n\r\n\r\n    // uint set\r\n    struct uintSet {\r\n        uint[] members;\r\n        mapping(uint => uint) memberIndices;\r\n    }\r\n\r\n    function insert(uintSet storage self, uint other) public {\r\n        if (!contains(self, other)) {\r\n            assert(length(self) < 2**256-1);\r\n            self.members.push(other);\r\n            self.memberIndices[other] = length(self);\r\n        }\r\n    }\r\n\r\n    function remove(uintSet storage self, uint other) public {\r\n        if (contains(self, other)) {\r\n            uint replaceIndex = self.memberIndices[other];\r\n            uint lastMember = self.members[length(self)-1];\r\n            // overwrite other with the last member and remove last member\r\n            self.members[replaceIndex-1] = lastMember;\r\n            self.members.length--;\r\n            // reflect this change in the indices\r\n            self.memberIndices[lastMember] = replaceIndex;\r\n            delete self.memberIndices[other];\r\n        }\r\n    }\r\n\r\n    function contains(uintSet storage self, uint other) public view returns (bool) {\r\n        return self.memberIndices[other] > 0;\r\n    }\r\n\r\n    function length(uintSet storage self) public view returns (uint) {\r\n        return self.members.length;\r\n    }\r\n\r\n\r\n    // uint8 set\r\n    struct uint8Set {\r\n        uint8[] members;\r\n        mapping(uint8 => uint) memberIndices;\r\n    }\r\n\r\n    function insert(uint8Set storage self, uint8 other) public {\r\n        if (!contains(self, other)) {\r\n            assert(length(self) < 2**256-1);\r\n            self.members.push(other);\r\n            self.memberIndices[other] = length(self);\r\n        }\r\n    }\r\n\r\n    function remove(uint8Set storage self, uint8 other) public {\r\n        if (contains(self, other)) {\r\n            uint replaceIndex = self.memberIndices[other];\r\n            uint8 lastMember = self.members[length(self)-1];\r\n            // overwrite other with the last member and remove last member\r\n            self.members[replaceIndex-1] = lastMember;\r\n            self.members.length--;\r\n            // reflect this change in the indices\r\n            self.memberIndices[lastMember] = replaceIndex;\r\n            delete self.memberIndices[other];\r\n        }\r\n    }\r\n\r\n    function contains(uint8Set storage self, uint8 other) public view returns (bool) {\r\n        return self.memberIndices[other] > 0;\r\n    }\r\n\r\n    function length(uint8Set storage self) public view returns (uint) {\r\n        return self.members.length;\r\n    }\r\n\r\n\r\n    // int set\r\n    struct intSet {\r\n        int[] members;\r\n        mapping(int => uint) memberIndices;\r\n    }\r\n\r\n    function insert(intSet storage self, int other) public {\r\n        if (!contains(self, other)) {\r\n            assert(length(self) < 2**256-1);\r\n            self.members.push(other);\r\n            self.memberIndices[other] = length(self);\r\n        }\r\n    }\r\n\r\n    function remove(intSet storage self, int other) public {\r\n        if (contains(self, other)) {\r\n            uint replaceIndex = self.memberIndices[other];\r\n            int lastMember = self.members[length(self)-1];\r\n            // overwrite other with the last member and remove last member\r\n            self.members[replaceIndex-1] = lastMember;\r\n            self.members.length--;\r\n            // reflect this change in the indices\r\n            self.memberIndices[lastMember] = replaceIndex;\r\n            delete self.memberIndices[other];\r\n        }\r\n    }\r\n\r\n    function contains(intSet storage self, int other) public view returns (bool) {\r\n        return self.memberIndices[other] > 0;\r\n    }\r\n\r\n    function length(intSet storage self) public view returns (uint) {\r\n        return self.members.length;\r\n    }\r\n\r\n\r\n    // int8 set\r\n    struct int8Set {\r\n        int8[] members;\r\n        mapping(int8 => uint) memberIndices;\r\n    }\r\n\r\n    function insert(int8Set storage self, int8 other) public {\r\n        if (!contains(self, other)) {\r\n            assert(length(self) < 2**256-1);\r\n            self.members.push(other);\r\n            self.memberIndices[other] = length(self);\r\n        }\r\n    }\r\n\r\n    function remove(int8Set storage self, int8 other) public {\r\n        if (contains(self, other)) {\r\n            uint replaceIndex = self.memberIndices[other];\r\n            int8 lastMember = self.members[length(self)-1];\r\n            // overwrite other with the last member and remove last member\r\n            self.members[replaceIndex-1] = lastMember;\r\n            self.members.length--;\r\n            // reflect this change in the indices\r\n            self.memberIndices[lastMember] = replaceIndex;\r\n            delete self.memberIndices[other];\r\n        }\r\n    }\r\n\r\n    function contains(int8Set storage self, int8 other) public view returns (bool) {\r\n        return self.memberIndices[other] > 0;\r\n    }\r\n\r\n    function length(int8Set storage self) public view returns (uint) {\r\n        return self.members.length;\r\n    }\r\n\r\n\r\n    // byte set\r\n    struct byteSet {\r\n        byte[] members;\r\n        mapping(byte => uint) memberIndices;\r\n    }\r\n\r\n    function insert(byteSet storage self, byte other) public {\r\n        if (!contains(self, other)) {\r\n            assert(length(self) < 2**256-1);\r\n            self.members.push(other);\r\n            self.memberIndices[other] = length(self);\r\n        }\r\n    }\r\n\r\n    function remove(byteSet storage self, byte other) public {\r\n        if (contains(self, other)) {\r\n            uint replaceIndex = self.memberIndices[other];\r\n            byte lastMember = self.members[length(self)-1];\r\n            // overwrite other with the last member and remove last member\r\n            self.members[replaceIndex-1] = lastMember;\r\n            self.members.length--;\r\n            // reflect this change in the indices\r\n            self.memberIndices[lastMember] = replaceIndex;\r\n            delete self.memberIndices[other];\r\n        }\r\n    }\r\n\r\n    function contains(byteSet storage self, byte other) public view returns (bool) {\r\n        return self.memberIndices[other] > 0;\r\n    }\r\n\r\n    function length(byteSet storage self) public view returns (uint) {\r\n        return self.members.length;\r\n    }\r\n\r\n\r\n    // bytes32 set\r\n    struct bytes32Set {\r\n        bytes32[] members;\r\n        mapping(bytes32 => uint) memberIndices;\r\n    }\r\n\r\n    function insert(bytes32Set storage self, bytes32 other) public {\r\n        if (!contains(self, other)) {\r\n            assert(length(self) < 2**256-1);\r\n            self.members.push(other);\r\n            self.memberIndices[other] = length(self);\r\n        }\r\n    }\r\n\r\n    function remove(bytes32Set storage self, bytes32 other) public {\r\n        if (contains(self, other)) {\r\n            uint replaceIndex = self.memberIndices[other];\r\n            bytes32 lastMember = self.members[length(self)-1];\r\n            // overwrite other with the last member and remove last member\r\n            self.members[replaceIndex-1] = lastMember;\r\n            self.members.length--;\r\n            // reflect this change in the indices\r\n            self.memberIndices[lastMember] = replaceIndex;\r\n            delete self.memberIndices[other];\r\n        }\r\n    }\r\n\r\n    function contains(bytes32Set storage self, bytes32 other) public view returns (bool) {\r\n        return self.memberIndices[other] > 0;\r\n    }\r\n\r\n    function length(bytes32Set storage self) public view returns (uint) {\r\n        return self.members.length;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"self\",\"type\":\"Sets.uint8Set storage\"},{\"name\":\"other\",\"type\":\"uint8\"}],\"name\":\"insert\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"self\",\"type\":\"Sets.intSet storage\"}],\"name\":\"length\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"self\",\"type\":\"Sets.addressSet storage\"},{\"name\":\"other\",\"type\":\"address\"}],\"name\":\"contains\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"self\",\"type\":\"Sets.int8Set storage\"},{\"name\":\"other\",\"type\":\"int8\"}],\"name\":\"remove\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"self\",\"type\":\"Sets.addressSet storage\"},{\"name\":\"other\",\"type\":\"address\"}],\"name\":\"remove\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"self\",\"type\":\"Sets.intSet storage\"},{\"name\":\"other\",\"type\":\"int256\"}],\"name\":\"contains\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"self\",\"type\":\"Sets.intSet storage\"},{\"name\":\"other\",\"type\":\"int256\"}],\"name\":\"remove\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"self\",\"type\":\"Sets.uint8Set storage\"},{\"name\":\"other\",\"type\":\"uint8\"}],\"name\":\"contains\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"self\",\"type\":\"Sets.uintSet storage\"}],\"name\":\"length\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"self\",\"type\":\"Sets.uint8Set storage\"},{\"name\":\"other\",\"type\":\"uint8\"}],\"name\":\"remove\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"self\",\"type\":\"Sets.int8Set storage\"}],\"name\":\"length\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"self\",\"type\":\"Sets.uint8Set storage\"}],\"name\":\"length\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"self\",\"type\":\"Sets.bytes32Set storage\"},{\"name\":\"other\",\"type\":\"bytes32\"}],\"name\":\"insert\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"self\",\"type\":\"Sets.byteSet storage\"},{\"name\":\"other\",\"type\":\"bytes1\"}],\"name\":\"insert\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"self\",\"type\":\"Sets.byteSet storage\"}],\"name\":\"length\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"self\",\"type\":\"Sets.byteSet storage\"},{\"name\":\"other\",\"type\":\"bytes1\"}],\"name\":\"contains\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"self\",\"type\":\"Sets.uintSet storage\"},{\"name\":\"other\",\"type\":\"uint256\"}],\"name\":\"remove\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"self\",\"type\":\"Sets.uintSet storage\"},{\"name\":\"other\",\"type\":\"uint256\"}],\"name\":\"contains\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"self\",\"type\":\"Sets.byteSet storage\"},{\"name\":\"other\",\"type\":\"bytes1\"}],\"name\":\"remove\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"self\",\"type\":\"Sets.bytes32Set storage\"}],\"name\":\"length\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"self\",\"type\":\"Sets.int8Set storage\"},{\"name\":\"other\",\"type\":\"int8\"}],\"name\":\"contains\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"self\",\"type\":\"Sets.bytes32Set storage\"},{\"name\":\"other\",\"type\":\"bytes32\"}],\"name\":\"contains\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"self\",\"type\":\"Sets.intSet storage\"},{\"name\":\"other\",\"type\":\"int256\"}],\"name\":\"insert\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"self\",\"type\":\"Sets.int8Set storage\"},{\"name\":\"other\",\"type\":\"int8\"}],\"name\":\"insert\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"self\",\"type\":\"Sets.uintSet storage\"},{\"name\":\"other\",\"type\":\"uint256\"}],\"name\":\"insert\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"self\",\"type\":\"Sets.addressSet storage\"},{\"name\":\"other\",\"type\":\"address\"}],\"name\":\"insert\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"self\",\"type\":\"Sets.addressSet storage\"}],\"name\":\"length\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"self\",\"type\":\"Sets.bytes32Set storage\"},{\"name\":\"other\",\"type\":\"bytes32\"}],\"name\":\"remove\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Sets","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://723b361e0f31c51e3edb622b311e17695bd13d70fd15cc02966f69f8e83856e6"}]}