{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.17;\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\ncontract EthereumTrustFund {\r\n    \r\n    using SafeMath for uint256;\r\n    \r\n    string public constant name   \t= \"Ethereum Trust Fund\";\r\n    string public constant symbol \t= \"ETRUST\";\r\n    uint8  public constant decimals = 18;\r\n    uint256 public rate = 10;\r\n    // todo\r\n    uint256 public constant _totalSupply = 1000000000000;\r\n    uint256 public \t\t_totalSupplyLeft = 1000000000000;\r\n    uint256 tokens                       = 0;\r\n    // vars\r\n    mapping(address => uint256) balances; \r\n    mapping(address => mapping(address => uint256)) allowedToSpend;\r\n    address public contract_owner;\r\n    uint256 currentBlock = 0;\r\n    uint256 lastblock    = 0;\r\n    // init function\r\n    function EthereumTrustFund() public{\r\n    \tcurrentBlock = block.number;\r\n    \tlastblock    = block.number;\r\n    }\r\n    // ## ERC20 standards ##\r\n    \r\n    // Get the total token supply\r\n    function totalSupply() constant public returns (uint256 thetotalSupply){\r\n    \treturn _totalSupply;\r\n    }\r\n    // Get the account balance of another account with address _queryaddress\r\n    function balanceOf(address _queryaddress) constant public returns (uint256 balance){\r\n    \treturn balances[_queryaddress];\r\n    }\r\n \t\r\n    // Send _value amount of tokens to address _to\r\n    function transfer(address _to, uint256 _value) public returns (bool success){\r\n    \trequire(\r\n    \t\tbalances[msg.sender] >= _value\r\n    \t\t&& _value > 0);\r\n    \tbalances[msg.sender] = balances[msg.sender].sub(_value);\r\n    \tbalances[_to]      \t = balances[_to].add(_value);\r\n    \tTransfer(msg.sender, _to,_value);\r\n    \treturn true;\r\n    }\r\n    // Send _value amount of tokens from address _from to address _to\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success){\r\n    \trequire(\r\n    \t\tallowedToSpend[_from][msg.sender] >= _value\r\n    \t\t&& balances[_from] >= _value\r\n    \t\t&& _value > 0);\r\n    \tbalances[_from] = balances[_from].sub(_value);\r\n    \tbalances[_to]   = balances[_to].add(_value);\r\n    \tallowedToSpend[_from][msg.sender] = allowedToSpend[_from][msg.sender].sub(_value);\r\n    \tTransfer(_from, _to, _value);\r\n    \treturn true;\r\n    }\r\n    // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\r\n    // If this function is called again it overwrites the current allowance with _value.\r\n    // this function is required for some DEX functionality\r\n    function approve(address _spender, uint256 _value) public returns (bool success){\r\n    \tallowedToSpend[msg.sender][_spender] = _value;\r\n    \tApproval(msg.sender, _spender, _value);\r\n    \treturn true;\r\n    }\r\n    // Returns the amount which _spender is still allowed to withdraw from _owner\r\n    function allowance(address _owner, address _spender) constant public returns (uint256 remaining){\r\n    \treturn allowedToSpend[_owner][_spender];\r\n    }\r\n    // Triggered when tokens are transferred.\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    // Triggered whenever approve(address _spender, uint256 _value) is called.\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n    \r\n    // ## ERC20 standards end ##\r\n    // ## Custom functions ###\r\n    function() public payable {\r\n    \trequire(msg.value > 0);\r\n    \ttokens \t\t = msg.value.mul(rate);\r\n    \tcurrentBlock = block.number;\r\n    \tif(rate > 1 && currentBlock.sub(lastblock) > 3000){\r\n    \t\trate = rate.sub(1);\r\n    \t\tRateChange(rate);\r\n    \t\tlastblock \t\t = currentBlock;\r\n    \t} \r\n    \tbalances[msg.sender] = balances[msg.sender].add(tokens);\r\n    \t_totalSupplyLeft \t = _totalSupplyLeft.sub(tokens);\r\n    \tcontract_owner.transfer(msg.value);\r\n    \tMoneyTransfered(contract_owner,msg.value);\r\n    \t\r\n    }\r\n    function shutThatShitDown() public {\r\n    \trequire(msg.sender == contract_owner);\r\n    \tselfdestruct(contract_owner);\r\n    }\r\n    \r\n    // \r\n    event RateChange(uint256 _rate);\r\n    // \r\n    event MoneyTransfered(address indexed _owner, uint256 _msgvalue);\r\n    \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_totalSupplyLeft\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"thetotalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contract_owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_queryaddress\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"shutThatShitDown\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"RateChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_msgvalue\",\"type\":\"uint256\"}],\"name\":\"MoneyTransfered\",\"type\":\"event\"}]","ContractName":"EthereumTrustFund","CompilerVersion":"v0.4.17+commit.bdeb9e52","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://2d0769435703aac4b7faa9195874eed34b573b51b35795d0a7104ae4bfde9867"}]}