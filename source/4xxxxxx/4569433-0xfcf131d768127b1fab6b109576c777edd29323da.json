{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\ncontract SafeMath {\r\n    function mul(uint a, uint b) constant internal returns (uint) {\r\n        uint c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint a, uint b) constant internal returns (uint) {\r\n        assert(b != 0); // Solidity automatically throws when dividing by 0\r\n        uint c = a / b;\r\n        assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint a, uint b) constant internal returns (uint) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint a, uint b) constant internal returns (uint) {\r\n        uint c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n\r\n    // Volume bonus calculation\r\n    function volumeBonus(uint etherValue) constant internal returns (uint) {\r\n\r\n        if(etherValue >=  500000000000000000000) return 10; // 500 ETH +10% tokens\r\n        if(etherValue >=  300000000000000000000) return 7;  // 300 ETH +7% tokens\r\n        if(etherValue >=  100000000000000000000) return 5;  // 100 ETH +5% tokens\r\n        if(etherValue >=   50000000000000000000) return 3;  // 50 ETH +3% tokens\r\n        if(etherValue >=   20000000000000000000) return 2;  // 20 ETH +2% tokens\r\n        if(etherValue >=   10000000000000000000) return 1;  // 10 ETH +1% tokens\r\n\r\n        return 0;\r\n    }\r\n\r\n}\r\n\r\n\r\n/// Implements ERC 20 Token standard: https://github.com/ethereum/EIPs/issues/20\r\n/// @title Abstract token contract - Functions to be implemented by token contracts.\r\n\r\ncontract AbstractToken {\r\n    // This is not an abstract function, because solc won't recognize generated getter functions for public variables as functions\r\n    function totalSupply() constant returns (uint) {}\r\n    function balanceOf(address owner) constant returns (uint balance);\r\n    function transfer(address to, uint value) returns (bool success);\r\n    function transferFrom(address from, address to, uint value) returns (bool success);\r\n    function approve(address spender, uint value) returns (bool success);\r\n    function allowance(address owner, address spender) constant returns (uint remaining);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Issuance(address indexed to, uint value);\r\n}\r\n\r\ncontract IcoLimits {\r\n    uint constant privateSaleStart = 1511136000; // 11/20/2017 @ 12:00am (UTC)\r\n    uint constant privateSaleEnd   = 1512086399; // 11/30/2017 @ 11:59pm (UTC)\r\n\r\n    uint constant presaleStart     = 1512086400; // 12/01/2017 @ 12:00am (UTC)\r\n    uint constant presaleEnd       = 1513900799; // 12/21/2017 @ 11:59pm (UTC)\r\n\r\n    uint constant publicSaleStart  = 1516320000; // 01/19/2018 @ 12:00am (UTC)\r\n    uint constant publicSaleEnd    = 1521158399; // 03/15/2018 @ 11:59pm (UTC)\r\n\r\n    modifier afterPublicSale() {\r\n        require(now > publicSaleEnd);\r\n        _;\r\n    }\r\n\r\n    uint constant privateSalePrice = 4000; // SNEK tokens per 1 ETH\r\n    uint constant preSalePrice     = 3000; // SNEK tokens per 1 ETH\r\n    uint constant publicSalePrice  = 2000; // SNEK tokens per 1 ETH\r\n\r\n    uint constant privateSaleSupplyLimit =  600  * privateSalePrice * 1000000000000000000;\r\n    uint constant preSaleSupplyLimit     =  1200 * preSalePrice     * 1000000000000000000;\r\n    uint constant publicSaleSupplyLimit  =  5000 * publicSalePrice  * 1000000000000000000;\r\n}\r\n\r\ncontract StandardToken is AbstractToken, IcoLimits {\r\n    /*\r\n     *  Data structures\r\n     */\r\n    mapping (address => uint) balances;\r\n    mapping (address => bool) ownerAppended;\r\n    mapping (address => mapping (address => uint)) allowed;\r\n\r\n    uint public totalSupply;\r\n\r\n    address[] public owners;\r\n\r\n    /*\r\n     *  Read and write storage functions\r\n     */\r\n    /// @dev Transfers sender's tokens to a given address. Returns success.\r\n    /// @param _to Address of token receiver.\r\n    /// @param _value Number of tokens to transfer.\r\n    function transfer(address _to, uint _value) afterPublicSale returns (bool success) {\r\n        if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\r\n            balances[msg.sender] -= _value;\r\n            balances[_to] += _value;\r\n            if(!ownerAppended[_to]) {\r\n                ownerAppended[_to] = true;\r\n                owners.push(_to);\r\n            }\r\n            Transfer(msg.sender, _to, _value);\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /// @dev Allows allowed third party to transfer tokens from one address to another. Returns success.\r\n    /// @param _from Address from where tokens are withdrawn.\r\n    /// @param _to Address to where tokens are sent.\r\n    /// @param _value Number of tokens to transfer.\r\n    function transferFrom(address _from, address _to, uint _value) afterPublicSale returns (bool success) {\r\n        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\r\n            balances[_to] += _value;\r\n            balances[_from] -= _value;\r\n            allowed[_from][msg.sender] -= _value;\r\n            if(!ownerAppended[_to]) {\r\n                ownerAppended[_to] = true;\r\n                owners.push(_to);\r\n            }\r\n            Transfer(_from, _to, _value);\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /// @dev Returns number of tokens owned by given address.\r\n    /// @param _owner Address of token owner.\r\n    function balanceOf(address _owner) constant returns (uint balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    /// @dev Sets approved amount of tokens for spender. Returns success.\r\n    /// @param _spender Address of allowed account.\r\n    /// @param _value Number of approved tokens.\r\n    function approve(address _spender, uint _value) returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /*\r\n     * Read storage functions\r\n     */\r\n    /// @dev Returns number of allowed tokens for given address.\r\n    /// @param _owner Address of token owner.\r\n    /// @param _spender Address of token spender.\r\n    function allowance(address _owner, address _spender) constant returns (uint remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract ExoTownToken is StandardToken, SafeMath {\r\n\r\n    /*\r\n     * Token meta data\r\n     */\r\n\r\n    string public constant name = \"ExoTown token\";\r\n    string public constant symbol = \"SNEK\";\r\n    uint public constant decimals = 18;\r\n\r\n    address public icoContract = 0x0;\r\n\r\n\r\n    /*\r\n     * Modifiers\r\n     */\r\n\r\n    modifier onlyIcoContract() {\r\n        // only ICO contract is allowed to proceed\r\n        require(msg.sender == icoContract);\r\n        _;\r\n    }\r\n\r\n\r\n    /*\r\n     * Contract functions\r\n     */\r\n\r\n    /// @dev Contract is needed in icoContract address\r\n    /// @param _icoContract Address of account which will be mint tokens\r\n    function ExoTownToken(address _icoContract) {\r\n        require(_icoContract != 0x0);\r\n        icoContract = _icoContract;\r\n    }\r\n\r\n    /// @dev Burns tokens from address. It can be applied by account with address this.icoContract\r\n    /// @param _from Address of account, from which will be burned tokens\r\n    /// @param _value Amount of tokens, that will be burned\r\n    function burnTokens(address _from, uint _value) onlyIcoContract {\r\n        require(_value > 0);\r\n\r\n        balances[_from] = sub(balances[_from], _value);\r\n        totalSupply -= _value;\r\n    }\r\n\r\n    /// @dev Adds tokens to address. It can be applied by account with address this.icoContract\r\n    /// @param _to Address of account to which the tokens will pass\r\n    /// @param _value Amount of tokens\r\n    function emitTokens(address _to, uint _value) onlyIcoContract {\r\n        require(totalSupply + _value >= totalSupply);\r\n        balances[_to] = add(balances[_to], _value);\r\n        totalSupply += _value;\r\n\r\n        if(!ownerAppended[_to]) {\r\n            ownerAppended[_to] = true;\r\n            owners.push(_to);\r\n        }\r\n\r\n        Transfer(0x0, _to, _value);\r\n\r\n    }\r\n\r\n    function getOwner(uint index) constant returns (address, uint) {\r\n        return (owners[index], balances[owners[index]]);\r\n    }\r\n\r\n    function getOwnerCount() constant returns (uint) {\r\n        return owners.length;\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract ExoTownIco is SafeMath, IcoLimits {\r\n\r\n    /*\r\n     * ICO meta data\r\n     */\r\n    ExoTownToken public exotownToken;\r\n\r\n    enum State {\r\n        Pause,\r\n        Running\r\n    }\r\n\r\n    State public currentState = State.Pause;\r\n\r\n    uint public privateSaleSoldTokens = 0;\r\n    uint public preSaleSoldTokens     = 0;\r\n    uint public publicSaleSoldTokens  = 0;\r\n\r\n    uint public privateSaleEtherRaised = 0;\r\n    uint public preSaleEtherRaised     = 0;\r\n    uint public publicSaleEtherRaised  = 0;\r\n\r\n    // Address of manager\r\n    address public icoManager;\r\n    address public founderWallet;\r\n\r\n    // Address from which tokens could be burned\r\n    address public buyBack;\r\n\r\n    // Purpose\r\n    address public developmentWallet;\r\n    address public marketingWallet;\r\n    address public teamWallet;\r\n\r\n    address public bountyOwner;\r\n\r\n    // Mediator wallet is used for tracking user payments and reducing users' fee\r\n    address public mediatorWallet;\r\n\r\n    bool public sentTokensToBountyOwner = false;\r\n    bool public sentTokensToFounders = false;\r\n\r\n    \r\n\r\n    /*\r\n     * Modifiers\r\n     */\r\n\r\n    modifier whenInitialized() {\r\n        // only when contract is initialized\r\n        require(currentState >= State.Running);\r\n        _;\r\n    }\r\n\r\n    modifier onlyManager() {\r\n        // only ICO manager can do this action\r\n        require(msg.sender == icoManager);\r\n        _;\r\n    }\r\n\r\n    modifier onIco() {\r\n        require( isPrivateSale() || isPreSale() || isPublicSale() );\r\n        _;\r\n    }\r\n\r\n    modifier hasBountyCampaign() {\r\n        require(bountyOwner != 0x0);\r\n        _;\r\n    }\r\n\r\n    function isPrivateSale() constant internal returns (bool) {\r\n        return now >= privateSaleStart && now <= privateSaleEnd;\r\n    }\r\n\r\n    function isPreSale() constant internal returns (bool) {\r\n        return now >= presaleStart && now <= presaleEnd;\r\n    }\r\n\r\n    function isPublicSale() constant internal returns (bool) {\r\n        return now >= publicSaleStart && now <= publicSaleEnd;\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    function getPrice() constant internal returns (uint) {\r\n        if (isPrivateSale()) return privateSalePrice;\r\n        if (isPreSale()) return preSalePrice;\r\n        if (isPublicSale()) return publicSalePrice;\r\n\r\n        return publicSalePrice;\r\n    }\r\n\r\n    function getStageSupplyLimit() constant returns (uint) {\r\n        if (isPrivateSale()) return privateSaleSupplyLimit;\r\n        if (isPreSale()) return preSaleSupplyLimit;\r\n        if (isPublicSale()) return publicSaleSupplyLimit;\r\n\r\n        return 0;\r\n    }\r\n\r\n    function getStageSoldTokens() constant returns (uint) {\r\n        if (isPrivateSale()) return privateSaleSoldTokens;\r\n        if (isPreSale()) return preSaleSoldTokens;\r\n        if (isPublicSale()) return publicSaleSoldTokens;\r\n\r\n        return 0;\r\n    }\r\n\r\n    function addStageTokensSold(uint _amount) internal {\r\n        if (isPrivateSale()) privateSaleSoldTokens = add(privateSaleSoldTokens, _amount);\r\n        if (isPreSale())     preSaleSoldTokens = add(preSaleSoldTokens, _amount);\r\n        if (isPublicSale())  publicSaleSoldTokens = add(publicSaleSoldTokens, _amount);\r\n    }\r\n\r\n    function addStageEtherRaised(uint _amount) internal {\r\n        if (isPrivateSale()) privateSaleEtherRaised = add(privateSaleEtherRaised, _amount);\r\n        if (isPreSale())     preSaleEtherRaised = add(preSaleEtherRaised, _amount);\r\n        if (isPublicSale())  publicSaleEtherRaised = add(publicSaleEtherRaised, _amount);\r\n    }\r\n\r\n    function getStageEtherRaised() constant returns (uint) {\r\n        if (isPrivateSale()) return privateSaleEtherRaised;\r\n        if (isPreSale())     return preSaleEtherRaised;\r\n        if (isPublicSale())  return publicSaleEtherRaised;\r\n\r\n        return 0;\r\n    }\r\n\r\n    function getTokensSold() constant returns (uint) {\r\n        return\r\n            privateSaleSoldTokens +\r\n            preSaleSoldTokens +\r\n            publicSaleSoldTokens;\r\n    }\r\n\r\n    function getEtherRaised() constant returns (uint) {\r\n        return\r\n            privateSaleEtherRaised +\r\n            preSaleEtherRaised +\r\n            publicSaleEtherRaised;\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    /// @dev Constructor of ICO. Requires address of icoManager,\r\n    /// @param _icoManager Address of ICO manager\r\n    function ExoTownIco(address _icoManager) {\r\n        require(_icoManager != 0x0);\r\n\r\n        exotownToken = new ExoTownToken(this);\r\n        icoManager = _icoManager;\r\n    }\r\n\r\n    /// Initialises addresses of founder, target wallets\r\n    /// @param _founder Address of Founder\r\n    /// @param _dev Address of Development wallet\r\n    /// @param _pr Address of Marketing wallet\r\n    /// @param _team Address of Team wallet\r\n    /// @param _buyback Address of wallet used for burning tokens\r\n    /// @param _mediator Address of Mediator wallet\r\n\r\n    function init(\r\n        address _founder,\r\n        address _dev,\r\n        address _pr,\r\n        address _team,\r\n        address _buyback,\r\n        address _mediator\r\n    ) onlyManager {\r\n        require(currentState == State.Pause);\r\n        require(_founder != 0x0);\r\n        require(_dev != 0x0);\r\n        require(_pr != 0x0);\r\n        require(_team != 0x0);\r\n        require(_buyback != 0x0);\r\n        require(_mediator != 0x0);\r\n\r\n        founderWallet = _founder;\r\n        developmentWallet = _dev;\r\n        marketingWallet = _pr;\r\n        teamWallet = _team;\r\n        buyBack = _buyback;\r\n        mediatorWallet = _mediator;\r\n\r\n        currentState = State.Running;\r\n\r\n        exotownToken.emitTokens(icoManager, 0);\r\n    }\r\n\r\n    /// @dev Sets new state\r\n    /// @param _newState Value of new state\r\n    function setState(State _newState) public onlyManager {\r\n        currentState = _newState;\r\n    }\r\n\r\n    /// @dev Sets new manager. Only manager can do it\r\n    /// @param _newIcoManager Address of new ICO manager\r\n    function setNewManager(address _newIcoManager) onlyManager {\r\n        require(_newIcoManager != 0x0);\r\n        icoManager = _newIcoManager;\r\n    }\r\n\r\n    /// @dev Sets bounty owner. Only manager can do it\r\n    /// @param _bountyOwner Address of Bounty owner\r\n    function setBountyCampaign(address _bountyOwner) onlyManager {\r\n        require(_bountyOwner != 0x0);\r\n        bountyOwner = _bountyOwner;\r\n    }\r\n\r\n    /// @dev Sets new Mediator wallet. Only manager can do it\r\n    /// @param _mediator Address of Mediator wallet\r\n    function setNewMediator(address _mediator) onlyManager {\r\n        require(_mediator != 0x0);\r\n        mediatorWallet = _mediator;\r\n    }\r\n\r\n\r\n    /// @dev Buy quantity of tokens depending on the amount of sent ethers.\r\n    /// @param _buyer Address of account which will receive tokens\r\n    function buyTokens(address _buyer) private {\r\n        require(_buyer != 0x0);\r\n        require(msg.value > 0);\r\n\r\n        uint tokensToEmit = msg.value * getPrice();\r\n        uint volumeBonusPercent = volumeBonus(msg.value);\r\n\r\n        if (volumeBonusPercent > 0) {\r\n            tokensToEmit = mul(tokensToEmit, 100 + volumeBonusPercent) / 100;\r\n        }\r\n\r\n        uint stageSupplyLimit = getStageSupplyLimit();\r\n        uint stageSoldTokens = getStageSoldTokens();\r\n\r\n        require(add(stageSoldTokens, tokensToEmit) <= stageSupplyLimit);\r\n\r\n        exotownToken.emitTokens(_buyer, tokensToEmit);\r\n\r\n        // Public statistics\r\n        addStageTokensSold(tokensToEmit);\r\n        addStageEtherRaised(msg.value);\r\n\r\n        distributeEtherByStage();\r\n\r\n    }\r\n\r\n    /// @dev Buy tokens to specified wallet\r\n    function giftToken(address _to) public payable onIco {\r\n        buyTokens(_to);\r\n    }\r\n\r\n    /// @dev Fall back function\r\n    function () payable onIco {\r\n        buyTokens(msg.sender);\r\n    }\r\n\r\n    function distributeEtherByStage() private {\r\n        uint _balance = this.balance;\r\n        uint _balance_div = _balance / 100;\r\n\r\n        uint _devAmount = _balance_div * 65;\r\n        uint _prAmount = _balance_div * 25;\r\n\r\n        uint total = _devAmount + _prAmount;\r\n        if (total > 0) {\r\n            // Top up Mediator wallet with 1% of Development amount = 0.65% of contribution amount.\r\n            // It will cover tracking transaction fee (if any).\r\n            // See White Paper for more information about payment tracking\r\n\r\n            uint _mediatorAmount = _devAmount / 100;\r\n            mediatorWallet.transfer(_mediatorAmount);\r\n\r\n            developmentWallet.transfer(_devAmount - _mediatorAmount);\r\n            marketingWallet.transfer(_prAmount);\r\n            teamWallet.transfer(_balance - _devAmount - _prAmount);\r\n        }\r\n    }\r\n\r\n\r\n    /// @dev Partial withdraw. Only manager can do it\r\n    function withdrawEther(uint _value) onlyManager {\r\n        require(_value > 0);\r\n        require(_value <= this.balance);\r\n        // send 1234 to get 1.234\r\n        icoManager.transfer(_value * 1000000000000000); // 10^15\r\n    }\r\n\r\n    ///@dev Send tokens to bountyOwner depending on crowdsale results. Can be send only after public sale.\r\n    function sendTokensToBountyOwner() onlyManager whenInitialized hasBountyCampaign afterPublicSale {\r\n        require(!sentTokensToBountyOwner);\r\n\r\n        //Calculate bounty tokens depending on total tokens sold\r\n        uint bountyTokens = getTokensSold() / 40; // 2.5%\r\n\r\n        exotownToken.emitTokens(bountyOwner, bountyTokens);\r\n\r\n        sentTokensToBountyOwner = true;\r\n    }\r\n\r\n    /// @dev Send tokens to founders.\r\n    function sendTokensToFounders() onlyManager whenInitialized afterPublicSale {\r\n        require(!sentTokensToFounders);\r\n\r\n        //Calculate founder reward depending on total tokens sold\r\n        uint founderReward = getTokensSold() / 10; // 10%\r\n\r\n        exotownToken.emitTokens(founderWallet, founderReward);\r\n\r\n        sentTokensToFounders = true;\r\n    }\r\n\r\n    // Anyone could burn tokens by sending it to buyBack address and calling this function.\r\n    function burnTokens(uint _amount) afterPublicSale {\r\n        exotownToken.burnTokens(buyBack, _amount);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"owners\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwnerCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"emitTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_icoContract\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Issuance\",\"type\":\"event\"}]","ContractName":"ExoTownToken","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000B9131E894259D0d374Bf189CA640fFC472A7d143","Library":"","SwarmSource":"bzzr://5510f22f4788fa06554d21b18f3e408f39ff72612a2fdf80e2322f8c20053b07"}]}