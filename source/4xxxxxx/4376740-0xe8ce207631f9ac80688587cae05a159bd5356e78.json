{"status":"1","message":"OK","result":[{"SourceCode":"/*************************************************************************\r\n * This contract has been merged with solidify\r\n * https://github.com/tiesnetwork/solidify\r\n *************************************************************************/\r\n \r\n pragma solidity 0.4.15;\r\n\r\n/*************************************************************************\r\n * import \"./STQPreICOBase.sol\" : start\r\n *************************************************************************/\r\n\r\n/*************************************************************************\r\n * import \"./crowdsale/SimpleCrowdsaleBase.sol\" : start\r\n *************************************************************************/\r\n\r\n/*************************************************************************\r\n * import \"../security/ArgumentsChecker.sol\" : start\r\n *************************************************************************/\r\n\r\n\r\n/// @title utility methods and modifiers of arguments validation\r\ncontract ArgumentsChecker {\r\n\r\n    /// @dev check which prevents short address attack\r\n    modifier payloadSizeIs(uint size) {\r\n       require(msg.data.length == size + 4 /* function selector */);\r\n       _;\r\n    }\r\n\r\n    /// @dev check that address is valid\r\n    modifier validAddress(address addr) {\r\n        require(addr != address(0));\r\n        _;\r\n    }\r\n}\r\n/*************************************************************************\r\n * import \"../security/ArgumentsChecker.sol\" : end\r\n *************************************************************************/\r\n/*************************************************************************\r\n * import \"../token/MintableMultiownedToken.sol\" : start\r\n *************************************************************************/\r\n\r\n/*************************************************************************\r\n * import \"../ownership/MultiownedControlled.sol\" : start\r\n *************************************************************************/\r\n\r\n/*************************************************************************\r\n * import \"./multiowned.sol\" : start\r\n *************************************************************************/// Code taken from https://github.com/ethereum/dapp-bin/blob/master/wallet/wallet.sol\r\n// Audit, refactoring and improvements by github.com/Eenae\r\n\r\n// @authors:\r\n// Gav Wood <g@ethdev.com>\r\n// inheritable \"property\" contract that enables methods to be protected by requiring the acquiescence of either a\r\n// single, or, crucially, each of a number of, designated owners.\r\n// usage:\r\n// use modifiers onlyowner (just own owned) or onlymanyowners(hash), whereby the same hash must be provided by\r\n// some number (specified in constructor) of the set of owners (specified in the constructor, modifiable) before the\r\n// interior is executed.\r\n\r\n\r\n\r\n\r\n/// note: during any ownership changes all pending operations (waiting for more signatures) are cancelled\r\n// TODO acceptOwnership\r\ncontract multiowned {\r\n\r\n\t// TYPES\r\n\r\n    // struct for the status of a pending operation.\r\n    struct MultiOwnedOperationPendingState {\r\n        // count of confirmations needed\r\n        uint yetNeeded;\r\n\r\n        // bitmap of confirmations where owner #ownerIndex's decision corresponds to 2**ownerIndex bit\r\n        uint ownersDone;\r\n\r\n        // position of this operation key in m_multiOwnedPendingIndex\r\n        uint index;\r\n    }\r\n\r\n\t// EVENTS\r\n\r\n    event Confirmation(address owner, bytes32 operation);\r\n    event Revoke(address owner, bytes32 operation);\r\n    event FinalConfirmation(address owner, bytes32 operation);\r\n\r\n    // some others are in the case of an owner changing.\r\n    event OwnerChanged(address oldOwner, address newOwner);\r\n    event OwnerAdded(address newOwner);\r\n    event OwnerRemoved(address oldOwner);\r\n\r\n    // the last one is emitted if the required signatures change\r\n    event RequirementChanged(uint newRequirement);\r\n\r\n\t// MODIFIERS\r\n\r\n    // simple single-sig function modifier.\r\n    modifier onlyowner {\r\n        require(isOwner(msg.sender));\r\n        _;\r\n    }\r\n    // multi-sig function modifier: the operation must have an intrinsic hash in order\r\n    // that later attempts can be realised as the same underlying operation and\r\n    // thus count as confirmations.\r\n    modifier onlymanyowners(bytes32 _operation) {\r\n        if (confirmAndCheck(_operation)) {\r\n            _;\r\n        }\r\n        // Even if required number of confirmations has't been collected yet,\r\n        // we can't throw here - because changes to the state have to be preserved.\r\n        // But, confirmAndCheck itself will throw in case sender is not an owner.\r\n    }\r\n\r\n    modifier validNumOwners(uint _numOwners) {\r\n        require(_numOwners > 0 && _numOwners <= c_maxOwners);\r\n        _;\r\n    }\r\n\r\n    modifier multiOwnedValidRequirement(uint _required, uint _numOwners) {\r\n        require(_required > 0 && _required <= _numOwners);\r\n        _;\r\n    }\r\n\r\n    modifier ownerExists(address _address) {\r\n        require(isOwner(_address));\r\n        _;\r\n    }\r\n\r\n    modifier ownerDoesNotExist(address _address) {\r\n        require(!isOwner(_address));\r\n        _;\r\n    }\r\n\r\n    modifier multiOwnedOperationIsActive(bytes32 _operation) {\r\n        require(isOperationActive(_operation));\r\n        _;\r\n    }\r\n\r\n\t// METHODS\r\n\r\n    // constructor is given number of sigs required to do protected \"onlymanyowners\" transactions\r\n    // as well as the selection of addresses capable of confirming them (msg.sender is not added to the owners!).\r\n    function multiowned(address[] _owners, uint _required)\r\n        validNumOwners(_owners.length)\r\n        multiOwnedValidRequirement(_required, _owners.length)\r\n    {\r\n        assert(c_maxOwners <= 255);\r\n\r\n        m_numOwners = _owners.length;\r\n        m_multiOwnedRequired = _required;\r\n\r\n        for (uint i = 0; i < _owners.length; ++i)\r\n        {\r\n            address owner = _owners[i];\r\n            // invalid and duplicate addresses are not allowed\r\n            require(0 != owner && !isOwner(owner) /* not isOwner yet! */);\r\n\r\n            uint currentOwnerIndex = checkOwnerIndex(i + 1 /* first slot is unused */);\r\n            m_owners[currentOwnerIndex] = owner;\r\n            m_ownerIndex[owner] = currentOwnerIndex;\r\n        }\r\n\r\n        assertOwnersAreConsistent();\r\n    }\r\n\r\n    /// @notice replaces an owner `_from` with another `_to`.\r\n    /// @param _from address of owner to replace\r\n    /// @param _to address of new owner\r\n    // All pending operations will be canceled!\r\n    function changeOwner(address _from, address _to)\r\n        external\r\n        ownerExists(_from)\r\n        ownerDoesNotExist(_to)\r\n        onlymanyowners(sha3(msg.data))\r\n    {\r\n        assertOwnersAreConsistent();\r\n\r\n        clearPending();\r\n        uint ownerIndex = checkOwnerIndex(m_ownerIndex[_from]);\r\n        m_owners[ownerIndex] = _to;\r\n        m_ownerIndex[_from] = 0;\r\n        m_ownerIndex[_to] = ownerIndex;\r\n\r\n        assertOwnersAreConsistent();\r\n        OwnerChanged(_from, _to);\r\n    }\r\n\r\n    /// @notice adds an owner\r\n    /// @param _owner address of new owner\r\n    // All pending operations will be canceled!\r\n    function addOwner(address _owner)\r\n        external\r\n        ownerDoesNotExist(_owner)\r\n        validNumOwners(m_numOwners + 1)\r\n        onlymanyowners(sha3(msg.data))\r\n    {\r\n        assertOwnersAreConsistent();\r\n\r\n        clearPending();\r\n        m_numOwners++;\r\n        m_owners[m_numOwners] = _owner;\r\n        m_ownerIndex[_owner] = checkOwnerIndex(m_numOwners);\r\n\r\n        assertOwnersAreConsistent();\r\n        OwnerAdded(_owner);\r\n    }\r\n\r\n    /// @notice removes an owner\r\n    /// @param _owner address of owner to remove\r\n    // All pending operations will be canceled!\r\n    function removeOwner(address _owner)\r\n        external\r\n        ownerExists(_owner)\r\n        validNumOwners(m_numOwners - 1)\r\n        multiOwnedValidRequirement(m_multiOwnedRequired, m_numOwners - 1)\r\n        onlymanyowners(sha3(msg.data))\r\n    {\r\n        assertOwnersAreConsistent();\r\n\r\n        clearPending();\r\n        uint ownerIndex = checkOwnerIndex(m_ownerIndex[_owner]);\r\n        m_owners[ownerIndex] = 0;\r\n        m_ownerIndex[_owner] = 0;\r\n        //make sure m_numOwners is equal to the number of owners and always points to the last owner\r\n        reorganizeOwners();\r\n\r\n        assertOwnersAreConsistent();\r\n        OwnerRemoved(_owner);\r\n    }\r\n\r\n    /// @notice changes the required number of owner signatures\r\n    /// @param _newRequired new number of signatures required\r\n    // All pending operations will be canceled!\r\n    function changeRequirement(uint _newRequired)\r\n        external\r\n        multiOwnedValidRequirement(_newRequired, m_numOwners)\r\n        onlymanyowners(sha3(msg.data))\r\n    {\r\n        m_multiOwnedRequired = _newRequired;\r\n        clearPending();\r\n        RequirementChanged(_newRequired);\r\n    }\r\n\r\n    /// @notice Gets an owner by 0-indexed position\r\n    /// @param ownerIndex 0-indexed owner position\r\n    function getOwner(uint ownerIndex) public constant returns (address) {\r\n        return m_owners[ownerIndex + 1];\r\n    }\r\n\r\n    /// @notice Gets owners\r\n    /// @return memory array of owners\r\n    function getOwners() public constant returns (address[]) {\r\n        address[] memory result = new address[](m_numOwners);\r\n        for (uint i = 0; i < m_numOwners; i++)\r\n            result[i] = getOwner(i);\r\n\r\n        return result;\r\n    }\r\n\r\n    /// @notice checks if provided address is an owner address\r\n    /// @param _addr address to check\r\n    /// @return true if it's an owner\r\n    function isOwner(address _addr) public constant returns (bool) {\r\n        return m_ownerIndex[_addr] > 0;\r\n    }\r\n\r\n    /// @notice Tests ownership of the current caller.\r\n    /// @return true if it's an owner\r\n    // It's advisable to call it by new owner to make sure that the same erroneous address is not copy-pasted to\r\n    // addOwner/changeOwner and to isOwner.\r\n    function amIOwner() external constant onlyowner returns (bool) {\r\n        return true;\r\n    }\r\n\r\n    /// @notice Revokes a prior confirmation of the given operation\r\n    /// @param _operation operation value, typically sha3(msg.data)\r\n    function revoke(bytes32 _operation)\r\n        external\r\n        multiOwnedOperationIsActive(_operation)\r\n        onlyowner\r\n    {\r\n        uint ownerIndexBit = makeOwnerBitmapBit(msg.sender);\r\n        var pending = m_multiOwnedPending[_operation];\r\n        require(pending.ownersDone & ownerIndexBit > 0);\r\n\r\n        assertOperationIsConsistent(_operation);\r\n\r\n        pending.yetNeeded++;\r\n        pending.ownersDone -= ownerIndexBit;\r\n\r\n        assertOperationIsConsistent(_operation);\r\n        Revoke(msg.sender, _operation);\r\n    }\r\n\r\n    /// @notice Checks if owner confirmed given operation\r\n    /// @param _operation operation value, typically sha3(msg.data)\r\n    /// @param _owner an owner address\r\n    function hasConfirmed(bytes32 _operation, address _owner)\r\n        external\r\n        constant\r\n        multiOwnedOperationIsActive(_operation)\r\n        ownerExists(_owner)\r\n        returns (bool)\r\n    {\r\n        return !(m_multiOwnedPending[_operation].ownersDone & makeOwnerBitmapBit(_owner) == 0);\r\n    }\r\n\r\n    // INTERNAL METHODS\r\n\r\n    function confirmAndCheck(bytes32 _operation)\r\n        private\r\n        onlyowner\r\n        returns (bool)\r\n    {\r\n        if (512 == m_multiOwnedPendingIndex.length)\r\n            // In case m_multiOwnedPendingIndex grows too much we have to shrink it: otherwise at some point\r\n            // we won't be able to do it because of block gas limit.\r\n            // Yes, pending confirmations will be lost. Dont see any security or stability implications.\r\n            // TODO use more graceful approach like compact or removal of clearPending completely\r\n            clearPending();\r\n\r\n        var pending = m_multiOwnedPending[_operation];\r\n\r\n        // if we're not yet working on this operation, switch over and reset the confirmation status.\r\n        if (! isOperationActive(_operation)) {\r\n            // reset count of confirmations needed.\r\n            pending.yetNeeded = m_multiOwnedRequired;\r\n            // reset which owners have confirmed (none) - set our bitmap to 0.\r\n            pending.ownersDone = 0;\r\n            pending.index = m_multiOwnedPendingIndex.length++;\r\n            m_multiOwnedPendingIndex[pending.index] = _operation;\r\n            assertOperationIsConsistent(_operation);\r\n        }\r\n\r\n        // determine the bit to set for this owner.\r\n        uint ownerIndexBit = makeOwnerBitmapBit(msg.sender);\r\n        // make sure we (the message sender) haven't confirmed this operation previously.\r\n        if (pending.ownersDone & ownerIndexBit == 0) {\r\n            // ok - check if count is enough to go ahead.\r\n            assert(pending.yetNeeded > 0);\r\n            if (pending.yetNeeded == 1) {\r\n                // enough confirmations: reset and run interior.\r\n                delete m_multiOwnedPendingIndex[m_multiOwnedPending[_operation].index];\r\n                delete m_multiOwnedPending[_operation];\r\n                FinalConfirmation(msg.sender, _operation);\r\n                return true;\r\n            }\r\n            else\r\n            {\r\n                // not enough: record that this owner in particular confirmed.\r\n                pending.yetNeeded--;\r\n                pending.ownersDone |= ownerIndexBit;\r\n                assertOperationIsConsistent(_operation);\r\n                Confirmation(msg.sender, _operation);\r\n            }\r\n        }\r\n    }\r\n\r\n    // Reclaims free slots between valid owners in m_owners.\r\n    // TODO given that its called after each removal, it could be simplified.\r\n    function reorganizeOwners() private {\r\n        uint free = 1;\r\n        while (free < m_numOwners)\r\n        {\r\n            // iterating to the first free slot from the beginning\r\n            while (free < m_numOwners && m_owners[free] != 0) free++;\r\n\r\n            // iterating to the first occupied slot from the end\r\n            while (m_numOwners > 1 && m_owners[m_numOwners] == 0) m_numOwners--;\r\n\r\n            // swap, if possible, so free slot is located at the end after the swap\r\n            if (free < m_numOwners && m_owners[m_numOwners] != 0 && m_owners[free] == 0)\r\n            {\r\n                // owners between swapped slots should't be renumbered - that saves a lot of gas\r\n                m_owners[free] = m_owners[m_numOwners];\r\n                m_ownerIndex[m_owners[free]] = free;\r\n                m_owners[m_numOwners] = 0;\r\n            }\r\n        }\r\n    }\r\n\r\n    function clearPending() private onlyowner {\r\n        uint length = m_multiOwnedPendingIndex.length;\r\n        // TODO block gas limit\r\n        for (uint i = 0; i < length; ++i) {\r\n            if (m_multiOwnedPendingIndex[i] != 0)\r\n                delete m_multiOwnedPending[m_multiOwnedPendingIndex[i]];\r\n        }\r\n        delete m_multiOwnedPendingIndex;\r\n    }\r\n\r\n    function checkOwnerIndex(uint ownerIndex) private constant returns (uint) {\r\n        assert(0 != ownerIndex && ownerIndex <= c_maxOwners);\r\n        return ownerIndex;\r\n    }\r\n\r\n    function makeOwnerBitmapBit(address owner) private constant returns (uint) {\r\n        uint ownerIndex = checkOwnerIndex(m_ownerIndex[owner]);\r\n        return 2 ** ownerIndex;\r\n    }\r\n\r\n    function isOperationActive(bytes32 _operation) private constant returns (bool) {\r\n        return 0 != m_multiOwnedPending[_operation].yetNeeded;\r\n    }\r\n\r\n\r\n    function assertOwnersAreConsistent() private constant {\r\n        assert(m_numOwners > 0);\r\n        assert(m_numOwners <= c_maxOwners);\r\n        assert(m_owners[0] == 0);\r\n        assert(0 != m_multiOwnedRequired && m_multiOwnedRequired <= m_numOwners);\r\n    }\r\n\r\n    function assertOperationIsConsistent(bytes32 _operation) private constant {\r\n        var pending = m_multiOwnedPending[_operation];\r\n        assert(0 != pending.yetNeeded);\r\n        assert(m_multiOwnedPendingIndex[pending.index] == _operation);\r\n        assert(pending.yetNeeded <= m_multiOwnedRequired);\r\n    }\r\n\r\n\r\n   \t// FIELDS\r\n\r\n    uint constant c_maxOwners = 250;\r\n\r\n    // the number of owners that must confirm the same operation before it is run.\r\n    uint public m_multiOwnedRequired;\r\n\r\n\r\n    // pointer used to find a free slot in m_owners\r\n    uint public m_numOwners;\r\n\r\n    // list of owners (addresses),\r\n    // slot 0 is unused so there are no owner which index is 0.\r\n    // TODO could we save space at the end of the array for the common case of <10 owners? and should we?\r\n    address[256] internal m_owners;\r\n\r\n    // index on the list of owners to allow reverse lookup: owner address => index in m_owners\r\n    mapping(address => uint) internal m_ownerIndex;\r\n\r\n\r\n    // the ongoing operations.\r\n    mapping(bytes32 => MultiOwnedOperationPendingState) internal m_multiOwnedPending;\r\n    bytes32[] internal m_multiOwnedPendingIndex;\r\n}\r\n/*************************************************************************\r\n * import \"./multiowned.sol\" : end\r\n *************************************************************************/\r\n\r\n\r\n/**\r\n * @title Contract which is owned by owners and operated by controller.\r\n *\r\n * @notice Provides a way to set up an entity (typically other contract) entitled to control actions of this contract.\r\n * Controller is set up by owners or during construction.\r\n *\r\n * @dev controller check is performed by onlyController modifier.\r\n */\r\ncontract MultiownedControlled is multiowned {\r\n\r\n    event ControllerSet(address controller);\r\n    event ControllerRetired(address was);\r\n\r\n\r\n    modifier onlyController {\r\n        require(msg.sender == m_controller);\r\n        _;\r\n    }\r\n\r\n\r\n    // PUBLIC interface\r\n\r\n    function MultiownedControlled(address[] _owners, uint _signaturesRequired, address _controller)\r\n        multiowned(_owners, _signaturesRequired)\r\n    {\r\n        m_controller = _controller;\r\n        ControllerSet(m_controller);\r\n    }\r\n\r\n    /// @dev sets the controller\r\n    function setController(address _controller) external onlymanyowners(sha3(msg.data)) {\r\n        m_controller = _controller;\r\n        ControllerSet(m_controller);\r\n    }\r\n\r\n    /// @dev ability for controller to step down\r\n    function detachController() external onlyController {\r\n        address was = m_controller;\r\n        m_controller = address(0);\r\n        ControllerRetired(was);\r\n    }\r\n\r\n\r\n    // FIELDS\r\n\r\n    /// @notice address of entity entitled to mint new tokens\r\n    address public m_controller;\r\n}\r\n/*************************************************************************\r\n * import \"../ownership/MultiownedControlled.sol\" : end\r\n *************************************************************************/\r\n/*************************************************************************\r\n * import \"zeppelin-solidity/contracts/token/StandardToken.sol\" : start\r\n *************************************************************************/\r\n\r\n\r\n/*************************************************************************\r\n * import \"./BasicToken.sol\" : start\r\n *************************************************************************/\r\n\r\n\r\n/*************************************************************************\r\n * import \"./ERC20Basic.sol\" : start\r\n *************************************************************************/\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) constant returns (uint256);\r\n  function transfer(address to, uint256 value) returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n/*************************************************************************\r\n * import \"./ERC20Basic.sol\" : end\r\n *************************************************************************/\r\n/*************************************************************************\r\n * import \"../math/SafeMath.sol\" : start\r\n *************************************************************************/\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n/*************************************************************************\r\n * import \"../math/SafeMath.sol\" : end\r\n *************************************************************************/\r\n\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances. \r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) returns (bool) {\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of. \r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n/*************************************************************************\r\n * import \"./BasicToken.sol\" : end\r\n *************************************************************************/\r\n/*************************************************************************\r\n * import \"./ERC20.sol\" : start\r\n *************************************************************************/\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) returns (bool);\r\n  function approve(address spender, uint256 value) returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n/*************************************************************************\r\n * import \"./ERC20.sol\" : end\r\n *************************************************************************/\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amout of tokens to be transfered\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\r\n    var _allowance = allowed[_from][msg.sender];\r\n\r\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n    // require (_value <= _allowance);\r\n\r\n    balances[_to] = balances[_to].add(_value);\r\n    balances[_from] = balances[_from].sub(_value);\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) returns (bool) {\r\n\r\n    // To change the approve amount you first have to reduce the addresses`\r\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n    //  already 0 to mitigate the race condition described here:\r\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifing the amount of tokens still avaible for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n}\r\n/*************************************************************************\r\n * import \"zeppelin-solidity/contracts/token/StandardToken.sol\" : end\r\n *************************************************************************/\r\n\r\n\r\n/// @title StandardToken which can be minted by another contract.\r\ncontract MintableMultiownedToken is MultiownedControlled, StandardToken {\r\n\r\n    /// @dev parameters of an extra token emission\r\n    struct EmissionInfo {\r\n        // tokens created\r\n        uint256 created;\r\n\r\n        // totalSupply at the moment of emission (excluding created tokens)\r\n        uint256 totalSupplyWas;\r\n    }\r\n\r\n    event Mint(address indexed to, uint256 amount);\r\n    event Emission(uint256 tokensCreated, uint256 totalSupplyWas, uint256 time);\r\n    event Dividend(address indexed to, uint256 amount);\r\n\r\n\r\n    // PUBLIC interface\r\n\r\n    function MintableMultiownedToken(address[] _owners, uint _signaturesRequired, address _minter)\r\n        MultiownedControlled(_owners, _signaturesRequired, _minter)\r\n    {\r\n        dividendsPool = this;   // or any other special unforgeable value, actually\r\n\r\n        // emission #0 is a dummy: because of default value 0 in m_lastAccountEmission\r\n        m_emissions.push(EmissionInfo({created: 0, totalSupplyWas: 0}));\r\n    }\r\n\r\n    /// @notice Request dividends for current account.\r\n    function requestDividends() external {\r\n        payDividendsTo(msg.sender);\r\n    }\r\n\r\n    /// @notice hook on standard ERC20#transfer to pay dividends\r\n    function transfer(address _to, uint256 _value) returns (bool) {\r\n        payDividendsTo(msg.sender);\r\n        payDividendsTo(_to);\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n    /// @notice hook on standard ERC20#transferFrom to pay dividends\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\r\n        payDividendsTo(_from);\r\n        payDividendsTo(_to);\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n    // Disabled: this could be undesirable because sum of (balanceOf() for each token owner) != totalSupply\r\n    // (but: sum of (balances[owner] for each token owner) == totalSupply!).\r\n    //\r\n    // @notice hook on standard ERC20#balanceOf to take dividends into consideration\r\n    // function balanceOf(address _owner) constant returns (uint256) {\r\n    //     var (hasNewDividends, dividends) = calculateDividendsFor(_owner);\r\n    //     return hasNewDividends ? super.balanceOf(_owner).add(dividends) : super.balanceOf(_owner);\r\n    // }\r\n\r\n\r\n    /// @dev mints new tokens\r\n    function mint(address _to, uint256 _amount) external onlyController {\r\n        require(m_externalMintingEnabled);\r\n        payDividendsTo(_to);\r\n        mintInternal(_to, _amount);\r\n    }\r\n\r\n    /// @dev disables mint(), irreversible!\r\n    function disableMinting() external onlyController {\r\n        require(m_externalMintingEnabled);\r\n        m_externalMintingEnabled = false;\r\n    }\r\n\r\n\r\n    // INTERNAL functions\r\n\r\n    /**\r\n     * @notice Starts new token emission\r\n     * @param _tokensCreated Amount of tokens to create\r\n     * @dev Dividends are not distributed immediately as it could require billions of gas,\r\n     * instead they are `pulled` by a holder from dividends pool account before any update to the holder account occurs.\r\n     */\r\n    function emissionInternal(uint256 _tokensCreated) internal {\r\n        require(0 != _tokensCreated);\r\n        require(_tokensCreated < totalSupply / 2);  // otherwise it looks like an error\r\n\r\n        uint256 totalSupplyWas = totalSupply;\r\n\r\n        m_emissions.push(EmissionInfo({created: _tokensCreated, totalSupplyWas: totalSupplyWas}));\r\n        mintInternal(dividendsPool, _tokensCreated);\r\n\r\n        Emission(_tokensCreated, totalSupplyWas, now);\r\n    }\r\n\r\n    function mintInternal(address _to, uint256 _amount) internal {\r\n        totalSupply = totalSupply.add(_amount);\r\n        balances[_to] = balances[_to].add(_amount);\r\n        Transfer(this, _to, _amount);\r\n        Mint(_to, _amount);\r\n    }\r\n\r\n    /// @dev adds dividends to the account _to\r\n    function payDividendsTo(address _to) internal {\r\n        var (hasNewDividends, dividends) = calculateDividendsFor(_to);\r\n        if (!hasNewDividends)\r\n            return;\r\n\r\n        if (0 != dividends) {\r\n            balances[dividendsPool] = balances[dividendsPool].sub(dividends);\r\n            balances[_to] = balances[_to].add(dividends);\r\n            Transfer(dividendsPool, _to, dividends);\r\n        }\r\n        m_lastAccountEmission[_to] = getLastEmissionNum();\r\n    }\r\n\r\n    /// @dev calculates dividends for the account _for\r\n    /// @return (true if state has to be updated, dividend amount (could be 0!))\r\n    function calculateDividendsFor(address _for) constant internal returns (bool hasNewDividends, uint dividends) {\r\n        assert(_for != dividendsPool);  // no dividends for the pool!\r\n\r\n        uint256 lastEmissionNum = getLastEmissionNum();\r\n        uint256 lastAccountEmissionNum = m_lastAccountEmission[_for];\r\n        assert(lastAccountEmissionNum <= lastEmissionNum);\r\n        if (lastAccountEmissionNum == lastEmissionNum)\r\n            return (false, 0);\r\n\r\n        uint256 initialBalance = balances[_for];    // beware of recursion!\r\n        if (0 == initialBalance)\r\n            return (true, 0);\r\n\r\n        uint256 balance = initialBalance;\r\n        for (uint256 emissionToProcess = lastAccountEmissionNum + 1; emissionToProcess <= lastEmissionNum; emissionToProcess++) {\r\n            EmissionInfo storage emission = m_emissions[emissionToProcess];\r\n            assert(0 != emission.created && 0 != emission.totalSupplyWas);\r\n\r\n            uint256 dividend = balance.mul(emission.created).div(emission.totalSupplyWas);\r\n            Dividend(_for, dividend);\r\n\r\n            balance = balance.add(dividend);\r\n        }\r\n\r\n        return (true, balance.sub(initialBalance));\r\n    }\r\n\r\n    function getLastEmissionNum() private constant returns (uint256) {\r\n        return m_emissions.length - 1;\r\n    }\r\n\r\n\r\n    // FIELDS\r\n\r\n    /// @notice if this true then token is still externally mintable (but this flag does't affect emissions!)\r\n    bool public m_externalMintingEnabled = true;\r\n\r\n    /// @dev internal address of dividends in balances mapping.\r\n    address dividendsPool;\r\n\r\n    /// @notice record of issued dividend emissions\r\n    EmissionInfo[] public m_emissions;\r\n\r\n    /// @dev for each token holder: last emission (index in m_emissions) which was processed for this holder\r\n    mapping(address => uint256) m_lastAccountEmission;\r\n}\r\n/*************************************************************************\r\n * import \"../token/MintableMultiownedToken.sol\" : end\r\n *************************************************************************/\r\n/*************************************************************************\r\n * import \"./IInvestmentsWalletConnector.sol\" : start\r\n *************************************************************************/\r\n\r\n/**\r\n * @title Interface for code which processes and stores investments.\r\n * @author Eenae\r\n */\r\ncontract IInvestmentsWalletConnector {\r\n    /// @dev process and forward investment\r\n    function storeInvestment(address investor, uint payment) internal;\r\n\r\n    /// @dev total investments amount stored using storeInvestment()\r\n    function getTotalInvestmentsStored() internal constant returns (uint);\r\n\r\n    /// @dev called in case crowdsale succeeded\r\n    function wcOnCrowdsaleSuccess() internal;\r\n\r\n    /// @dev called in case crowdsale failed\r\n    function wcOnCrowdsaleFailure() internal;\r\n}\r\n/*************************************************************************\r\n * import \"./IInvestmentsWalletConnector.sol\" : end\r\n *************************************************************************/\r\n/*************************************************************************\r\n * import \"./ICrowdsaleStat.sol\" : start\r\n *************************************************************************/\r\n\r\n/**\r\n * @title Basic crowdsale stat\r\n * @author Eenae\r\n */\r\ncontract ICrowdsaleStat {\r\n\r\n    /// @notice amount of funds collected in wei\r\n    function getWeiCollected() public constant returns (uint);\r\n\r\n    /// @notice amount of tokens minted (NOT equal to totalSupply() in case token is reused!)\r\n    function getTokenMinted() public constant returns (uint);\r\n}\r\n/*************************************************************************\r\n * import \"./ICrowdsaleStat.sol\" : end\r\n *************************************************************************/\r\n/*************************************************************************\r\n * import \"zeppelin-solidity/contracts/ReentrancyGuard.sol\" : start\r\n *************************************************************************/\r\n\r\n/**\r\n * @title Helps contracts guard agains rentrancy attacks.\r\n * @author Remco Bloemen <remco@2π.com>\r\n * @notice If you mark a function `nonReentrant`, you should also\r\n * mark it `external`.\r\n */\r\ncontract ReentrancyGuard {\r\n\r\n  /**\r\n   * @dev We use a single lock for the whole contract.\r\n   */\r\n  bool private rentrancy_lock = false;\r\n\r\n  /**\r\n   * @dev Prevents a contract from calling itself, directly or indirectly.\r\n   * @notice If you mark a function `nonReentrant`, you should also\r\n   * mark it `external`. Calling one nonReentrant function from\r\n   * another is not supported. Instead, you can implement a\r\n   * `private` function doing the actual work, and a `external`\r\n   * wrapper marked as `nonReentrant`.\r\n   */\r\n  modifier nonReentrant() {\r\n    require(!rentrancy_lock);\r\n    rentrancy_lock = true;\r\n    _;\r\n    rentrancy_lock = false;\r\n  }\r\n\r\n}\r\n/*************************************************************************\r\n * import \"zeppelin-solidity/contracts/ReentrancyGuard.sol\" : end\r\n *************************************************************************/\r\n\r\n\r\n\r\n/// @title Base contract for simple crowdsales\r\ncontract SimpleCrowdsaleBase is ArgumentsChecker, ReentrancyGuard, IInvestmentsWalletConnector, ICrowdsaleStat {\r\n    using SafeMath for uint256;\r\n\r\n    event FundTransfer(address backer, uint amount, bool isContribution);\r\n\r\n    function SimpleCrowdsaleBase(address token)\r\n        validAddress(token)\r\n    {\r\n        m_token = MintableMultiownedToken(token);\r\n    }\r\n\r\n\r\n    // PUBLIC interface: payments\r\n\r\n    // fallback function as a shortcut\r\n    function() payable {\r\n        require(0 == msg.data.length);\r\n        buy();  // only internal call here!\r\n    }\r\n\r\n    /// @notice crowdsale participation\r\n    function buy() public payable {     // dont mark as external!\r\n        buyInternal(msg.sender, msg.value, 0);\r\n    }\r\n\r\n\r\n    // INTERNAL\r\n\r\n    /// @dev payment processing\r\n    function buyInternal(address investor, uint payment, uint extraBonuses)\r\n        internal\r\n        nonReentrant\r\n    {\r\n        require(payment >= getMinInvestment());\r\n        require(getCurrentTime() >= getStartTime() || ! mustApplyTimeCheck(investor, payment) /* for final check */);\r\n        if (getCurrentTime() >= getEndTime())\r\n            finish();\r\n\r\n        if (m_finished) {\r\n            // saving provided gas\r\n            investor.transfer(payment);\r\n            return;\r\n        }\r\n\r\n        uint startingWeiCollected = getWeiCollected();\r\n        uint startingInvariant = this.balance.add(startingWeiCollected);\r\n\r\n        // return or update payment if needed\r\n        uint paymentAllowed = getMaximumFunds().sub(getWeiCollected());\r\n        assert(0 != paymentAllowed);\r\n\r\n        uint change;\r\n        if (paymentAllowed < payment) {\r\n            change = payment.sub(paymentAllowed);\r\n            payment = paymentAllowed;\r\n        }\r\n\r\n        // issue tokens\r\n        uint tokens = calculateTokens(investor, payment, extraBonuses);\r\n        m_token.mint(investor, tokens);\r\n        m_tokensMinted += tokens;\r\n\r\n        // record payment\r\n        storeInvestment(investor, payment);\r\n        assert(getWeiCollected() <= getMaximumFunds() && getWeiCollected() > startingWeiCollected);\r\n        FundTransfer(investor, payment, true);\r\n\r\n        if (getWeiCollected() == getMaximumFunds())\r\n            finish();\r\n\r\n        if (change > 0)\r\n            investor.transfer(change);\r\n\r\n        assert(startingInvariant == this.balance.add(getWeiCollected()).add(change));\r\n    }\r\n\r\n    function finish() internal {\r\n        if (m_finished)\r\n            return;\r\n\r\n        if (getWeiCollected() >= getMinimumFunds())\r\n            wcOnCrowdsaleSuccess();\r\n        else\r\n            wcOnCrowdsaleFailure();\r\n\r\n        m_finished = true;\r\n    }\r\n\r\n\r\n    // Other pluggables\r\n\r\n    /// @dev says if crowdsale time bounds must be checked\r\n    function mustApplyTimeCheck(address /*investor*/, uint /*payment*/) constant internal returns (bool) {\r\n        return true;\r\n    }\r\n\r\n    /// @dev to be overridden in tests\r\n    function getCurrentTime() internal constant returns (uint) {\r\n        return now;\r\n    }\r\n\r\n    /// @notice maximum investments to be accepted during pre-ICO\r\n    function getMaximumFunds() internal constant returns (uint);\r\n\r\n    /// @notice minimum amount of funding to consider crowdsale as successful\r\n    function getMinimumFunds() internal constant returns (uint);\r\n\r\n    /// @notice start time of the pre-ICO\r\n    function getStartTime() internal constant returns (uint);\r\n\r\n    /// @notice end time of the pre-ICO\r\n    function getEndTime() internal constant returns (uint);\r\n\r\n    /// @notice minimal amount of investment\r\n    function getMinInvestment() public constant returns (uint) {\r\n        return 10 finney;\r\n    }\r\n\r\n    /// @dev calculates token amount for given investment\r\n    function calculateTokens(address investor, uint payment, uint extraBonuses) internal constant returns (uint);\r\n\r\n\r\n    // ICrowdsaleStat\r\n\r\n    function getWeiCollected() public constant returns (uint) {\r\n        return getTotalInvestmentsStored();\r\n    }\r\n\r\n    /// @notice amount of tokens minted (NOT equal to totalSupply() in case token is reused!)\r\n    function getTokenMinted() public constant returns (uint) {\r\n        return m_tokensMinted;\r\n    }\r\n\r\n\r\n    // FIELDS\r\n\r\n    /// @dev contract responsible for token accounting\r\n    MintableMultiownedToken public m_token;\r\n\r\n    uint m_tokensMinted;\r\n\r\n    bool m_finished = false;\r\n}\r\n/*************************************************************************\r\n * import \"./crowdsale/SimpleCrowdsaleBase.sol\" : end\r\n *************************************************************************/\r\n/*************************************************************************\r\n * import \"./crowdsale/InvestmentAnalytics.sol\" : start\r\n *************************************************************************/\r\n\r\n\r\n\r\n\r\n/*\r\n * @title This is proxy for analytics. Target contract can be found at field m_analytics (see \"read contract\").\r\n * @author Eenae\r\n\r\n * FIXME after fix of truffle issue #560: refactor to a separate contract file which uses InvestmentAnalytics interface\r\n */\r\ncontract AnalyticProxy {\r\n\r\n    function AnalyticProxy() {\r\n        m_analytics = InvestmentAnalytics(msg.sender);\r\n    }\r\n\r\n    /// @notice forward payment to analytics-capable contract\r\n    function() payable {\r\n        m_analytics.iaInvestedBy.value(msg.value)(msg.sender);\r\n    }\r\n\r\n    InvestmentAnalytics public m_analytics;\r\n}\r\n\r\n\r\n/*\r\n * @title Mixin contract which supports different payment channels and provides analytical per-channel data.\r\n * @author Eenae\r\n */\r\ncontract InvestmentAnalytics {\r\n    using SafeMath for uint256;\r\n\r\n    function InvestmentAnalytics(){\r\n    }\r\n\r\n    /// @dev creates more payment channels, up to the limit but not exceeding gas stipend\r\n    function createMorePaymentChannelsInternal(uint limit) internal returns (uint) {\r\n        uint paymentChannelsCreated;\r\n        for (uint i = 0; i < limit; i++) {\r\n            uint startingGas = msg.gas;\r\n            /*\r\n             * ~170k of gas per paymentChannel,\r\n             * using gas price = 4Gwei 2k paymentChannels will cost ~1.4 ETH.\r\n             */\r\n\r\n            address paymentChannel = new AnalyticProxy();\r\n            m_validPaymentChannels[paymentChannel] = true;\r\n            m_paymentChannels.push(paymentChannel);\r\n            paymentChannelsCreated++;\r\n\r\n            // cost of creating one channel\r\n            uint gasPerChannel = startingGas.sub(msg.gas);\r\n            if (gasPerChannel.add(50000) > msg.gas)\r\n                break;  // enough proxies for this call\r\n        }\r\n        return paymentChannelsCreated;\r\n    }\r\n\r\n\r\n    /// @dev process payments - record analytics and pass control to iaOnInvested callback\r\n    function iaInvestedBy(address investor) external payable {\r\n        address paymentChannel = msg.sender;\r\n        if (m_validPaymentChannels[paymentChannel]) {\r\n            // payment received by one of our channels\r\n            uint value = msg.value;\r\n            m_investmentsByPaymentChannel[paymentChannel] = m_investmentsByPaymentChannel[paymentChannel].add(value);\r\n            // We know for sure that investment came from specified investor (see AnalyticProxy).\r\n            iaOnInvested(investor, value, true);\r\n        } else {\r\n            // Looks like some user has paid to this method, this payment is not included in the analytics,\r\n            // but, of course, processed.\r\n            iaOnInvested(msg.sender, msg.value, false);\r\n        }\r\n    }\r\n\r\n    /// @dev callback\r\n    function iaOnInvested(address /*investor*/, uint /*payment*/, bool /*usingPaymentChannel*/) internal {\r\n    }\r\n\r\n\r\n    function paymentChannelsCount() external constant returns (uint) {\r\n        return m_paymentChannels.length;\r\n    }\r\n\r\n    function readAnalyticsMap() external constant returns (address[], uint[]) {\r\n        address[] memory keys = new address[](m_paymentChannels.length);\r\n        uint[] memory values = new uint[](m_paymentChannels.length);\r\n\r\n        for (uint i = 0; i < m_paymentChannels.length; i++) {\r\n            address key = m_paymentChannels[i];\r\n            keys[i] = key;\r\n            values[i] = m_investmentsByPaymentChannel[key];\r\n        }\r\n\r\n        return (keys, values);\r\n    }\r\n\r\n    function readPaymentChannels() external constant returns (address[]) {\r\n        return m_paymentChannels;\r\n    }\r\n\r\n\r\n    mapping(address => uint256) public m_investmentsByPaymentChannel;\r\n    mapping(address => bool) m_validPaymentChannels;\r\n\r\n    address[] public m_paymentChannels;\r\n}\r\n/*************************************************************************\r\n * import \"./crowdsale/InvestmentAnalytics.sol\" : end\r\n *************************************************************************/\r\n/*************************************************************************\r\n * import \"zeppelin-solidity/contracts/ownership/Ownable.sol\" : start\r\n *************************************************************************/\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner {\r\n    if (newOwner != address(0)) {\r\n      owner = newOwner;\r\n    }\r\n  }\r\n\r\n}\r\n/*************************************************************************\r\n * import \"zeppelin-solidity/contracts/ownership/Ownable.sol\" : end\r\n *************************************************************************/\r\n\r\n\r\n/// @title Base contract for Storiqa pre-ICO\r\ncontract STQPreICOBase is SimpleCrowdsaleBase, Ownable, InvestmentAnalytics {\r\n\r\n    function STQPreICOBase(address token)\r\n        SimpleCrowdsaleBase(token)\r\n    {\r\n    }\r\n\r\n\r\n    // PUBLIC interface: maintenance\r\n\r\n    function createMorePaymentChannels(uint limit) external onlyOwner returns (uint) {\r\n        return createMorePaymentChannelsInternal(limit);\r\n    }\r\n\r\n    /// @notice Tests ownership of the current caller.\r\n    /// @return true if it's an owner\r\n    // It's advisable to call it by new owner to make sure that the same erroneous address is not copy-pasted to\r\n    // addOwner/changeOwner and to isOwner.\r\n    function amIOwner() external constant onlyOwner returns (bool) {\r\n        return true;\r\n    }\r\n\r\n\r\n    // INTERNAL\r\n\r\n    /// @dev payment callback\r\n    function iaOnInvested(address investor, uint payment, bool usingPaymentChannel) internal {\r\n        buyInternal(investor, payment, usingPaymentChannel ? c_paymentChannelBonusPercent : 0);\r\n    }\r\n\r\n    function calculateTokens(address /*investor*/, uint payment, uint extraBonuses) internal constant returns (uint) {\r\n        uint bonusPercent = getPreICOBonus().add(getLargePaymentBonus(payment)).add(extraBonuses);\r\n        uint rate = c_STQperETH.mul(bonusPercent.add(100)).div(100);\r\n\r\n        return payment.mul(rate);\r\n    }\r\n\r\n    function getLargePaymentBonus(uint payment) private constant returns (uint) {\r\n        if (payment > 1000 ether) return 10;\r\n        if (payment > 800 ether) return 8;\r\n        if (payment > 500 ether) return 5;\r\n        if (payment > 200 ether) return 2;\r\n        return 0;\r\n    }\r\n\r\n    function mustApplyTimeCheck(address investor, uint /*payment*/) constant internal returns (bool) {\r\n        return investor != owner;\r\n    }\r\n\r\n    /// @notice pre-ICO bonus\r\n    function getPreICOBonus() internal constant returns (uint);\r\n\r\n\r\n    // FIELDS\r\n\r\n    /// @notice starting exchange rate of STQ\r\n    uint public constant c_STQperETH = 100000;\r\n\r\n    /// @notice authorised payment bonus\r\n    uint public constant c_paymentChannelBonusPercent = 2;\r\n}\r\n/*************************************************************************\r\n * import \"./STQPreICOBase.sol\" : end\r\n *************************************************************************/\r\n/*************************************************************************\r\n * import \"./crowdsale/FundsRegistryWalletConnector.sol\" : start\r\n *************************************************************************/\r\n\r\n\r\n/*************************************************************************\r\n * import \"./FundsRegistry.sol\" : start\r\n *************************************************************************/\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/// @title registry of funds sent by investors\r\ncontract FundsRegistry is ArgumentsChecker, MultiownedControlled, ReentrancyGuard {\r\n    using SafeMath for uint256;\r\n\r\n    enum State {\r\n        // gathering funds\r\n        GATHERING,\r\n        // returning funds to investors\r\n        REFUNDING,\r\n        // funds can be pulled by owners\r\n        SUCCEEDED\r\n    }\r\n\r\n    event StateChanged(State _state);\r\n    event Invested(address indexed investor, uint256 amount);\r\n    event EtherSent(address indexed to, uint value);\r\n    event RefundSent(address indexed to, uint value);\r\n\r\n\r\n    modifier requiresState(State _state) {\r\n        require(m_state == _state);\r\n        _;\r\n    }\r\n\r\n\r\n    // PUBLIC interface\r\n\r\n    function FundsRegistry(address[] _owners, uint _signaturesRequired, address _controller)\r\n        MultiownedControlled(_owners, _signaturesRequired, _controller)\r\n    {\r\n    }\r\n\r\n    /// @dev performs only allowed state transitions\r\n    function changeState(State _newState)\r\n        external\r\n        onlyController\r\n    {\r\n        assert(m_state != _newState);\r\n\r\n        if (State.GATHERING == m_state) {   assert(State.REFUNDING == _newState || State.SUCCEEDED == _newState); }\r\n        else assert(false);\r\n\r\n        m_state = _newState;\r\n        StateChanged(m_state);\r\n    }\r\n\r\n    /// @dev records an investment\r\n    function invested(address _investor)\r\n        external\r\n        payable\r\n        onlyController\r\n        requiresState(State.GATHERING)\r\n    {\r\n        uint256 amount = msg.value;\r\n        require(0 != amount);\r\n        assert(_investor != m_controller);\r\n\r\n        // register investor\r\n        if (0 == m_weiBalances[_investor])\r\n            m_investors.push(_investor);\r\n\r\n        // register payment\r\n        totalInvested = totalInvested.add(amount);\r\n        m_weiBalances[_investor] = m_weiBalances[_investor].add(amount);\r\n\r\n        Invested(_investor, amount);\r\n    }\r\n\r\n    /// @notice owners: send `value` of ether to address `to`, can be called if crowdsale succeeded\r\n    /// @param to where to send ether\r\n    /// @param value amount of wei to send\r\n    function sendEther(address to, uint value)\r\n        external\r\n        validAddress(to)\r\n        onlymanyowners(sha3(msg.data))\r\n        requiresState(State.SUCCEEDED)\r\n    {\r\n        require(value > 0 && this.balance >= value);\r\n        to.transfer(value);\r\n        EtherSent(to, value);\r\n    }\r\n\r\n    /// @notice withdraw accumulated balance, called by payee in case crowdsale failed\r\n    function withdrawPayments()\r\n        external\r\n        nonReentrant\r\n        requiresState(State.REFUNDING)\r\n    {\r\n        address payee = msg.sender;\r\n        uint256 payment = m_weiBalances[payee];\r\n\r\n        require(payment != 0);\r\n        require(this.balance >= payment);\r\n\r\n        totalInvested = totalInvested.sub(payment);\r\n        m_weiBalances[payee] = 0;\r\n\r\n        payee.transfer(payment);\r\n        RefundSent(payee, payment);\r\n    }\r\n\r\n    function getInvestorsCount() external constant returns (uint) { return m_investors.length; }\r\n\r\n\r\n    // FIELDS\r\n\r\n    /// @notice total amount of investments in wei\r\n    uint256 public totalInvested;\r\n\r\n    /// @notice state of the registry\r\n    State public m_state = State.GATHERING;\r\n\r\n    /// @dev balances of investors in wei\r\n    mapping(address => uint256) public m_weiBalances;\r\n\r\n    /// @dev list of unique investors\r\n    address[] public m_investors;\r\n}\r\n/*************************************************************************\r\n * import \"./FundsRegistry.sol\" : end\r\n *************************************************************************/\r\n\r\n\r\n/**\r\n * @title Stores investments in FundsRegistry.\r\n * @author Eenae\r\n */\r\ncontract FundsRegistryWalletConnector is IInvestmentsWalletConnector {\r\n\r\n    function FundsRegistryWalletConnector(address[] fundOwners, uint ownersSignatures)\r\n    {\r\n        m_fundsAddress = new FundsRegistry(fundOwners, ownersSignatures, this);\r\n    }\r\n\r\n    /// @dev process and forward investment\r\n    function storeInvestment(address investor, uint payment) internal\r\n    {\r\n        m_fundsAddress.invested.value(payment)(investor);\r\n    }\r\n\r\n    /// @dev total investments amount stored using storeInvestment()\r\n    function getTotalInvestmentsStored() internal constant returns (uint)\r\n    {\r\n        return m_fundsAddress.totalInvested();\r\n    }\r\n\r\n    /// @dev called in case crowdsale succeeded\r\n    function wcOnCrowdsaleSuccess() internal {\r\n        m_fundsAddress.changeState(FundsRegistry.State.SUCCEEDED);\r\n        m_fundsAddress.detachController();\r\n    }\r\n\r\n    /// @dev called in case crowdsale failed\r\n    function wcOnCrowdsaleFailure() internal {\r\n        m_fundsAddress.changeState(FundsRegistry.State.REFUNDING);\r\n        m_fundsAddress.detachController();\r\n    }\r\n\r\n    /// @notice address of wallet which stores funds\r\n    FundsRegistry public m_fundsAddress;\r\n}\r\n/*************************************************************************\r\n * import \"./crowdsale/FundsRegistryWalletConnector.sol\" : end\r\n *************************************************************************/\r\n\r\n\r\n/// @title Storiqa pre-ICO contract\r\ncontract STQPreICO2 is STQPreICOBase, FundsRegistryWalletConnector {\r\n\r\n    function STQPreICO2(address token, address[] fundOwners)\r\n        STQPreICOBase(token)\r\n        FundsRegistryWalletConnector(fundOwners, 2)\r\n    {\r\n        require(3 == fundOwners.length);\r\n    }\r\n\r\n\r\n    // INTERNAL\r\n\r\n    function getWeiCollected() public constant returns (uint) {\r\n        return getTotalInvestmentsStored().add(2401 ether /* previous crowdsales */);\r\n    }\r\n\r\n    /// @notice minimum amount of funding to consider crowdsale as successful\r\n    function getMinimumFunds() internal constant returns (uint) {\r\n        return 3500 ether;\r\n    }\r\n\r\n    /// @notice maximum investments to be accepted during pre-ICO\r\n    function getMaximumFunds() internal constant returns (uint) {\r\n        return 8500 ether;\r\n    }\r\n\r\n    /// @notice start time of the pre-ICO\r\n    function getStartTime() internal constant returns (uint) {\r\n        return 1508346000;\r\n    }\r\n\r\n    /// @notice end time of the pre-ICO\r\n    function getEndTime() internal constant returns (uint) {\r\n        return getStartTime() + (5 days);\r\n    }\r\n\r\n    /// @notice pre-ICO bonus\r\n    function getPreICOBonus() internal constant returns (uint) {\r\n        return 35;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getWeiCollected\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"createMorePaymentChannels\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"readAnalyticsMap\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"},{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"amIOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTokenMinted\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"m_paymentChannels\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"c_STQperETH\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMinInvestment\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"investor\",\"type\":\"address\"}],\"name\":\"iaInvestedBy\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"m_token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"m_fundsAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"c_paymentChannelBonusPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"m_investmentsByPaymentChannel\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paymentChannelsCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"readPaymentChannels\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"fundOwners\",\"type\":\"address[]\"}],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"backer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"isContribution\",\"type\":\"bool\"}],\"name\":\"FundTransfer\",\"type\":\"event\"}]","ContractName":"STQPreICO2","CompilerVersion":"v0.4.15+commit.bbb8e64f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000005c3a228510d246b78a3765c20221cbf3082b44a400000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000003000000000000000000000000dad209d09b0fec404da4204672372771bad3d6830000000000000000000000000eed5de3487aec55ba585212daedf35104c27baf00000000000000000000000006ba0d658578b014b5febdaf6992bfd41bd44483","Library":"","SwarmSource":"bzzr://44ce039a1a429194cf4b67d282a40c84d669f5d86db80dc1f84c631396121275"}]}