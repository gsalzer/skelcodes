{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.11;\r\n\r\ncontract SafeMath {\r\n\r\n    function safeAdd(uint256 x, uint256 y) internal returns(uint256) {\r\n      uint256 z = x + y;\r\n      assert((z >= x));\r\n      return z;\r\n    }\r\n\r\n    function safeSubtract(uint256 x, uint256 y) internal constant returns(uint256) {\r\n      assert(x >= y);\r\n      return x - y;\r\n    }\r\n\r\n    function safeMult(uint256 x, uint256 y) internal constant returns(uint256) {\r\n      uint256 z = x * y;\r\n      assert((x == 0)||(z/x == y));\r\n      return z;\r\n    }\r\n\r\n    function safeDiv(uint256 x, uint256 y) internal constant returns (uint256) {\r\n      uint256 z = x / y;\r\n      return z;\r\n    }\r\n\r\n}\r\n\r\ncontract Token {\r\n    uint256 public totalSupply;\r\n    function balanceOf(address _owner) constant returns (uint256 balance);\r\n    function transfer(address _to, uint256 _value) returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\r\n    function approve(address _spender, uint256 _value) returns (bool success);\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\n\r\n/*  ERC 20 token */\r\ncontract StandardToken is Token {\r\n\r\n    function transfer(address _to, uint256 _value) returns (bool success) {\r\n      if (balances[msg.sender] >= _value && _value > 0 && balances[_to] + _value > balances[_to]) {\r\n        balances[msg.sender] -= _value;\r\n        balances[_to] += _value;\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n      } else {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\r\n      if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\r\n        balances[_to] += _value;\r\n        balances[_from] -= _value;\r\n        allowed[_from][msg.sender] -= _value;\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n      } else {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n      return allowed[_owner][_spender];\r\n    }\r\n\r\n    mapping (address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n}\r\n\r\ncontract DIVXToken is StandardToken, SafeMath {\r\n\r\n    // metadata\r\n    string public constant name = \"Divi Exchange Token\";\r\n    string public constant symbol = \"DIVX\";\r\n    uint256 public constant decimals = 18;\r\n    string public version = \"1.0\";\r\n\r\n    // owner address\r\n    address public fundDeposit;      // deposit address for ETH and DIVX for the project\r\n\r\n    // crowdsale parameters\r\n    bool public isPaused;\r\n    bool public isRedeeming;\r\n    uint256 public fundingStartBlock;\r\n    uint256 public firstXRChangeBlock;\r\n    uint256 public secondXRChangeBlock;\r\n    uint256 public thirdXRChangeBlock;\r\n    uint256 public fundingEndBlock;\r\n\r\n    // Since we have different exchange rates at different stages, we need to keep track\r\n    // of how much ether (in units of Wei) each address contributed in case that we need\r\n    // to issue a refund\r\n    mapping (address => uint256) private weiBalances;\r\n\r\n    // We need to keep track of how much ether (in units of Wei) has been contributed\r\n    uint256 public totalReceivedWei;\r\n\r\n    uint256 public constant privateExchangeRate  = 1000; // 1000 DIVX tokens per 1 ETH\r\n    uint256 public constant firstExchangeRate    =  650; //  650 DIVX tokens per 1 ETH\r\n    uint256 public constant secondExchangeRate   =  575; //  575 DIVX tokens per 1 ETH\r\n    uint256 public constant thirdExchangeRate    =  500; //  500 DIVX tokens per 1 ETH\r\n\r\n    uint256 public constant receivedWeiCap =  100 * (10**3) * 10**decimals;\r\n    uint256 public constant receivedWeiMin =    5 * (10**3) * 10**decimals;\r\n\r\n    // events\r\n    event LogCreate(address indexed _to, uint256 _value, uint256 _tokenValue);\r\n    event LogRefund(address indexed _to, uint256 _value, uint256 _tokenValue);\r\n    event LogRedeem(address indexed _to, uint256 _value, bytes32 _diviAddress);\r\n\r\n    // modifiers\r\n    modifier onlyOwner() {\r\n      require(msg.sender == fundDeposit);\r\n      _;\r\n    }\r\n\r\n    modifier isNotPaused() {\r\n      require(isPaused == false);\r\n      _;\r\n    }\r\n\r\n    // constructor\r\n    function DIVXToken(\r\n        address _fundDeposit,\r\n        uint256 _fundingStartBlock,\r\n        uint256 _firstXRChangeBlock,\r\n        uint256 _secondXRChangeBlock,\r\n        uint256 _thirdXRChangeBlock,\r\n        uint256 _fundingEndBlock) {\r\n\r\n      isPaused    = false;\r\n      isRedeeming = false;\r\n\r\n      totalSupply      = 0;\r\n      totalReceivedWei = 0;\r\n\r\n      fundDeposit = _fundDeposit;\r\n\r\n      fundingStartBlock   = _fundingStartBlock;\r\n      firstXRChangeBlock  = _firstXRChangeBlock;\r\n      secondXRChangeBlock = _secondXRChangeBlock;\r\n      thirdXRChangeBlock  = _thirdXRChangeBlock;\r\n      fundingEndBlock     = _fundingEndBlock;\r\n    }\r\n\r\n    // overriden methods\r\n\r\n    // Overridden method to check that the minimum was reached (no refund is possible\r\n    // after that, so transfer of tokens shouldn't be a problem)\r\n    function transfer(address _to, uint256 _value) returns (bool success) {\r\n      require(totalReceivedWei >= receivedWeiMin);\r\n      return super.transfer(_to, _value);\r\n    }\r\n\r\n    // Overridden method to check that the minimum was reached (no refund is possible\r\n    // after that, so transfer of tokens shouldn't be a problem)\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\r\n      require(totalReceivedWei >= receivedWeiMin);\r\n      return super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n    /// @dev Accepts ether and creates new DIVX tokens.\r\n    function createTokens() payable external isNotPaused {\r\n      require(block.number >= fundingStartBlock);\r\n      require(block.number <= fundingEndBlock);\r\n      require(msg.value > 0);\r\n\r\n      // Check that this transaction wouldn't exceed the ETH cap\r\n      uint256 checkedReceivedWei = safeAdd(totalReceivedWei, msg.value);\r\n      require(checkedReceivedWei <= receivedWeiCap);\r\n\r\n      // Calculate how many tokens (in units of Wei) should be awarded\r\n      // on this transaction\r\n      uint256 tokens = safeMult(msg.value, getCurrentTokenPrice());\r\n\r\n      // Calculate how many tokens (in units of Wei) should be awarded to the project (20%)\r\n      uint256 projectTokens = safeDiv(tokens, 5);\r\n\r\n      // Increment the total received ETH\r\n      totalReceivedWei = checkedReceivedWei;\r\n\r\n      // Only update our accounting of how much ETH this contributor has sent us if\r\n      // we're already on the public sale (since private sale contributions are going\r\n      // to be used before the end of end of the sale period, they don't get a refund)\r\n      if (block.number >= firstXRChangeBlock) weiBalances[msg.sender] += msg.value;\r\n\r\n      // Increment the total supply of tokens and then deposit the tokens\r\n      // to the contributor\r\n      totalSupply = safeAdd(totalSupply, tokens);\r\n      balances[msg.sender] += tokens;\r\n\r\n      // Increment the total supply of tokens and then deposit the tokens\r\n      // to the project\r\n      totalSupply = safeAdd(totalSupply, projectTokens);\r\n      balances[fundDeposit] += projectTokens;\r\n\r\n      LogCreate(msg.sender, msg.value, tokens);  // logs token creation\r\n    }\r\n\r\n    /// @dev Allows to transfer ether from the contract to the multisig wallet\r\n    function withdrawWei(uint256 _value) external onlyOwner isNotPaused {\r\n      require(_value <= this.balance);\r\n\r\n      // Allow withdrawal during the private sale, but after that, only allow\r\n      // withdrawal if we already met the minimum\r\n      require((block.number < firstXRChangeBlock) || (totalReceivedWei >= receivedWeiMin));\r\n\r\n      // send the eth to the project multisig wallet\r\n      fundDeposit.transfer(_value);\r\n    }\r\n\r\n    /// @dev Pauses the contract\r\n    function pause() external onlyOwner isNotPaused {\r\n      // Move the contract to Paused state\r\n      isPaused = true;\r\n    }\r\n\r\n    /// @dev Resume the contract\r\n    function resume() external onlyOwner {\r\n      // Move the contract out of the Paused state\r\n      isPaused = false;\r\n    }\r\n\r\n    /// @dev Starts the redeeming phase of the contract\r\n    function startRedeeming() external onlyOwner isNotPaused {\r\n      // Move the contract to Redeeming state\r\n      isRedeeming = true;\r\n    }\r\n\r\n    /// @dev Stops the redeeming phase of the contract\r\n    function stopRedeeming() external onlyOwner isNotPaused {\r\n      // Move the contract out of the Redeeming state\r\n      isRedeeming = false;\r\n    }\r\n\r\n    /// @dev Allows contributors to recover their ether in the case of a failed funding campaign\r\n    function refund() external {\r\n      // prevents refund until sale period is over\r\n      require(block.number > fundingEndBlock);\r\n      // Refunds are only available if the minimum was not reached\r\n      require(totalReceivedWei < receivedWeiMin);\r\n\r\n      // Retrieve how much DIVX (in units of Wei) this account has\r\n       uint256 divxVal = balances[msg.sender];\r\n       require(divxVal > 0);\r\n\r\n      // Retrieve how much ETH (in units of Wei) this account contributed\r\n      uint256 weiVal = weiBalances[msg.sender];\r\n      require(weiVal > 0);\r\n\r\n      // Destroy this contributor's tokens and reduce the total supply\r\n      balances[msg.sender] = 0;\r\n      totalSupply = safeSubtract(totalSupply, divxVal);\r\n\r\n      // Log this refund operation\r\n      LogRefund(msg.sender, weiVal, divxVal);\r\n\r\n      // Send the money back\r\n      msg.sender.transfer(weiVal);\r\n    }\r\n\r\n    /// @dev Redeems tokens and records the address that the sender created in the new blockchain\r\n    function redeem(bytes32 diviAddress) external {\r\n      // Only allow this function to be called when on the redeeming state\r\n      require(isRedeeming);\r\n\r\n      // Retrieve how much DIVX (in units of Wei) this account has\r\n      uint256 divxVal = balances[msg.sender];\r\n       require(divxVal > 0);\r\n\r\n      // Move the tokens of the caller to the project's address\r\n      assert(super.transfer(fundDeposit, divxVal));\r\n\r\n      // Log the redeeming of this tokens\r\n      LogRedeem(msg.sender, divxVal, diviAddress);\r\n    }\r\n\r\n    /// @dev Returns the current token price\r\n    function getCurrentTokenPrice() private constant returns (uint256 currentPrice) {\r\n      if (block.number < firstXRChangeBlock) {\r\n        return privateExchangeRate;\r\n      } else if (block.number < secondXRChangeBlock) {\r\n        return firstExchangeRate;\r\n      } else if (block.number < thirdXRChangeBlock) {\r\n        return secondExchangeRate;\r\n      } else {\r\n        return thirdExchangeRate;\r\n      }\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"resume\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"withdrawWei\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"privateExchangeRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"thirdExchangeRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refund\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"firstXRChangeBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"receivedWeiMin\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"firstExchangeRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundDeposit\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundingEndBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"secondExchangeRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"thirdXRChangeBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isRedeeming\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isPaused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"createTokens\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stopRedeeming\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundingStartBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"secondXRChangeBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startRedeeming\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalReceivedWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"diviAddress\",\"type\":\"bytes32\"}],\"name\":\"redeem\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"receivedWeiCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_fundDeposit\",\"type\":\"address\"},{\"name\":\"_fundingStartBlock\",\"type\":\"uint256\"},{\"name\":\"_firstXRChangeBlock\",\"type\":\"uint256\"},{\"name\":\"_secondXRChangeBlock\",\"type\":\"uint256\"},{\"name\":\"_thirdXRChangeBlock\",\"type\":\"uint256\"},{\"name\":\"_fundingEndBlock\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_tokenValue\",\"type\":\"uint256\"}],\"name\":\"LogCreate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_tokenValue\",\"type\":\"uint256\"}],\"name\":\"LogRefund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_diviAddress\",\"type\":\"bytes32\"}],\"name\":\"LogRedeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"DIVXToken","CompilerVersion":"v0.4.11+commit.68ef5810","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000005bc79fbbce4e5d6c3de7bd1a252ef3f58a66b09c0000000000000000000000000000000000000000000000000000000000411810000000000000000000000000000000000000000000000000000000000043bb100000000000000000000000000000000000000000000000000000000000449c100000000000000000000000000000000000000000000000000000000000457d100000000000000000000000000000000000000000000000000000000000465e10","Library":"","SwarmSource":"bzzr://3b363ff8ca2a83c8724f054a261b7003923b5c2db4b918b414987f30e7603b43"}]}