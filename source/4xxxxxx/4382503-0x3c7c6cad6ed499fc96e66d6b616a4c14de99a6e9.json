{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.15;\r\n\r\ncontract EngravedToken {\r\n    uint256 public totalSupply;\r\n    function issue(address, uint256) returns (bool) {}\r\n    function balanceOf(address) constant returns (uint256) {}\r\n    function unlock() returns (bool) {}\r\n    function startIncentiveDistribution() returns (bool) {}\r\n    function transferOwnership(address) {}\r\n    function owner() returns (address) {}\r\n}\r\n\r\ncontract EGRCrowdsale {\r\n    // Crowdsale details\r\n    address public beneficiary;\r\n    address public confirmedBy; // Address that confirmed beneficiary\r\n\r\n    // Maximum tokens supply\r\n    uint256 public maxSupply = 1000000000; // 1 billion\r\n\r\n    // Minum amount of ether to be exchanged for EGR\r\n    uint256 public minAcceptedAmount = 10 finney; // 0.01 ETH\r\n\r\n    //Amount of free tokens per user in airdrop period\r\n    uint256 public rateAirDrop = 1000;\r\n\r\n    // Number of airdrop participants\r\n    uint256 public airdropParticipants;\r\n\r\n    //Maximum number of airdrop participants\r\n    uint256 public maxAirdropParticipants = 500;\r\n\r\n    // Check if this is the first participation in the airdrop\r\n    mapping (address => bool) participatedInAirdrop;\r\n\r\n    // ETH to EGR rate\r\n    uint256 public rateAngelsDay = 100000;\r\n    uint256 public rateFirstWeek = 80000;\r\n    uint256 public rateSecondWeek = 70000;\r\n    uint256 public rateThirdWeek = 60000;\r\n    uint256 public rateLastWeek = 50000;\r\n\r\n    uint256 public airdropEnd = 3 days;\r\n    uint256 public airdropCooldownEnd = 7 days;\r\n    uint256 public rateAngelsDayEnd = 8 days;\r\n    uint256 public angelsDayCooldownEnd = 14 days;\r\n    uint256 public rateFirstWeekEnd = 21 days;\r\n    uint256 public rateSecondWeekEnd = 28 days;\r\n    uint256 public rateThirdWeekEnd = 35 days;\r\n    uint256 public rateLastWeekEnd = 42 days;\r\n\r\n    enum Stages {\r\n        Airdrop,\r\n        InProgress,\r\n        Ended,\r\n        Withdrawn,\r\n        Proposed,\r\n        Accepted\r\n    }\r\n\r\n    Stages public stage = Stages.Airdrop;\r\n\r\n    // Crowdsale state\r\n    uint256 public start;\r\n    uint256 public end;\r\n    uint256 public raised;\r\n\r\n    // EGR EngravedToken\r\n    EngravedToken public EGREngravedToken;\r\n\r\n    // Invested balances\r\n    mapping (address => uint256) balances;\r\n\r\n    struct Proposal {\r\n        address engravedAddress;\r\n        uint256 deadline;\r\n        uint256 approvedWeight;\r\n        uint256 disapprovedWeight;\r\n        mapping (address => uint256) voted;\r\n    }\r\n\r\n    // Ownership transfer proposal\r\n    Proposal public transferProposal;\r\n\r\n    // Time to vote\r\n    uint256 public transferProposalEnd = 7 days;\r\n\r\n    // Time between proposals\r\n    uint256 public transferProposalCooldown = 1 days;\r\n\r\n\r\n    /**\r\n     * Throw if at stage other than current stage\r\n     *\r\n     * @param _stage expected stage to test for\r\n     */\r\n    modifier atStage(Stages _stage) {\r\n\t\t    require(stage == _stage);\r\n        _;\r\n    }\r\n\r\n\r\n    /**\r\n     * Throw if at stage other than current stage\r\n     *\r\n     * @param _stage1 expected stage to test for\r\n     * @param _stage2 expected stage to test for\r\n     */\r\n    modifier atStages(Stages _stage1, Stages _stage2) {\r\n\t\t    require(stage == _stage1 || stage == _stage2);\r\n        _;\r\n    }\r\n\r\n\r\n    /**\r\n     * Throw if sender is not beneficiary\r\n     */\r\n    modifier onlyBeneficiary() {\r\n\t\t    require(beneficiary == msg.sender);\r\n        _;\r\n    }\r\n\r\n\r\n    /**\r\n     * Throw if sender has a EGR balance of zero\r\n     */\r\n    modifier onlyTokenholders() {\r\n\t\t    require(EGREngravedToken.balanceOf(msg.sender) > 0);\r\n        _;\r\n    }\r\n\r\n\r\n    /**\r\n     * Throw if the current transfer proposal's deadline\r\n     * is in the past\r\n     */\r\n    modifier beforeDeadline() {\r\n\t\t    require(now < transferProposal.deadline);\r\n        _;\r\n    }\r\n\r\n\r\n    /**\r\n     * Throw if the current transfer proposal's deadline\r\n     * is in the future\r\n     */\r\n    modifier afterDeadline() {\r\n\t\t    require(now > transferProposal.deadline);\r\n        _;\r\n    }\r\n\r\n\r\n    /**\r\n     * Get balance of `_investor`\r\n     *\r\n     * @param _investor The address from which the balance will be retrieved\r\n     * @return The balance\r\n     */\r\n    function balanceOf(address _investor) constant returns (uint256 balance) {\r\n        return balances[_investor];\r\n    }\r\n\r\n\r\n    /**\r\n     * Most params are hardcoded for clarity\r\n     *\r\n     * @param _EngravedTokenAddress The address of the EGR EngravedToken contact\r\n     * @param _beneficiary Company address\r\n     * @param _start airdrop start date\r\n     */\r\n    function EGRCrowdsale(address _EngravedTokenAddress, address _beneficiary, uint256 _start) {\r\n        EGREngravedToken = EngravedToken(_EngravedTokenAddress);\r\n        beneficiary = _beneficiary;\r\n        start = _start;\r\n        end = start + 42 days;\r\n    }\r\n\r\n\r\n    /**\r\n     * For testing purposes\r\n     *\r\n     * @return The beneficiary address\r\n     */\r\n    function confirmBeneficiary() onlyBeneficiary {\r\n        confirmedBy = msg.sender;\r\n    }\r\n\r\n\r\n    /**\r\n     * Convert `_wei` to an amount in EGR using\r\n     * the current rate\r\n     *\r\n     * @param _wei amount of wei to convert\r\n     * @return The amount in EGR\r\n     */\r\n    function toEGR(uint256 _wei) returns (uint256 amount) {\r\n        uint256 rate = 0;\r\n        if (stage != Stages.Ended && now >= start && now <= end) {\r\n\r\n            // Check for cool down after airdrop\r\n            if (now <= start + airdropCooldownEnd) {\r\n                rate = 0;\r\n            }\r\n\r\n            // Check for AngelsDay\r\n            else if (now <= start + rateAngelsDayEnd) {\r\n                rate = rateAngelsDay;\r\n            }\r\n\r\n            // Check for cool down after the angels day\r\n            else if (now <= start + angelsDayCooldownEnd) {\r\n      \t\t\t    rate = 0;\r\n            }\r\n\r\n            // Check first week\r\n            else if (now <= start + rateFirstWeekEnd) {\r\n                rate = rateFirstWeek;\r\n            }\r\n\r\n            // Check second week\r\n            else if (now <= start + rateSecondWeekEnd) {\r\n                rate = rateSecondWeek;\r\n            }\r\n\r\n            // Check third week\r\n            else if (now <= start + rateThirdWeekEnd) {\r\n                rate = rateThirdWeek;\r\n            }\r\n\r\n            // Check last week\r\n            else if (now <= start + rateLastWeekEnd) {\r\n                rate = rateLastWeek;\r\n            }\r\n        }\r\n\t      require(rate != 0); // Check for cool down periods\r\n        return _wei * rate * 10**3 / 1 ether; // 10**3 for 3 decimals\r\n    }\r\n\r\n    /**\r\n    * Function to participate in the airdrop\r\n    */\r\n    function claim() atStage(Stages.Airdrop) {\r\n        require(airdropParticipants < maxAirdropParticipants);\r\n\r\n        // Crowdsal not started yet\r\n        require(now > start);\r\n\r\n        // Airdrop expired\r\n        require(now < start + airdropEnd);\r\n\r\n        require(participatedInAirdrop[msg.sender] == false); // Only once per address\r\n\r\n        require(EGREngravedToken.issue(msg.sender, rateAirDrop * 10**3));\r\n\r\n        participatedInAirdrop[msg.sender] = true;\r\n        airdropParticipants += 1;\r\n    }\r\n\r\n    /**\r\n     * Function to end the airdrop and start crowdsale\r\n     */\r\n    function endAirdrop() atStage(Stages.Airdrop) {\r\n\t      require(now > start + airdropEnd);\r\n\r\n        stage = Stages.InProgress;\r\n    }\r\n\r\n    /**\r\n     * Function to end the crowdsale by setting\r\n     * the stage to Ended\r\n     */\r\n    function endCrowdsale() atStage(Stages.InProgress) {\r\n\r\n        // Crowdsale not ended yet\r\n\t      require(now > end);\r\n\r\n        stage = Stages.Ended;\r\n    }\r\n\r\n\r\n    /**\r\n     * Transfer raised amount to the company address\r\n     */\r\n    function withdraw() onlyBeneficiary atStage(Stages.Ended) {\r\n        require(beneficiary.send(raised));\r\n\r\n        stage = Stages.Withdrawn;\r\n    }\r\n\r\n    /**\r\n     * Propose the transfer of the EngravedToken contract ownership\r\n     * to `_engravedAddress`\r\n     *\r\n     * @param _engravedAddress the address of the proposed EngravedToken owner\r\n     */\r\n    function proposeTransfer(address _engravedAddress) onlyBeneficiary atStages(Stages.Withdrawn, Stages.Proposed) {\r\n\r\n        // Check for a pending proposal\r\n\t      require(stage != Stages.Proposed || now > transferProposal.deadline + transferProposalCooldown);\r\n\r\n        transferProposal = Proposal({\r\n            engravedAddress: _engravedAddress,\r\n            deadline: now + transferProposalEnd,\r\n            approvedWeight: 0,\r\n            disapprovedWeight: 0\r\n        });\r\n\r\n        stage = Stages.Proposed;\r\n    }\r\n\r\n\r\n    /**\r\n     * Allows EGR holders to vote on the poposed transfer of\r\n     * ownership. Weight is calculated directly, this is no problem\r\n     * because EngravedTokens cannot be transferred yet\r\n     *\r\n     * @param _approve indicates if the sender supports the proposal\r\n     */\r\n    function vote(bool _approve) onlyTokenholders beforeDeadline atStage(Stages.Proposed) {\r\n\r\n        // One vote per proposal\r\n\t      require(transferProposal.voted[msg.sender] < transferProposal.deadline - transferProposalEnd);\r\n\r\n        transferProposal.voted[msg.sender] = now;\r\n        uint256 weight = EGREngravedToken.balanceOf(msg.sender);\r\n\r\n        if (_approve) {\r\n            transferProposal.approvedWeight += weight;\r\n        } else {\r\n            transferProposal.disapprovedWeight += weight;\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * Calculates the votes and if the majority weigt approved\r\n     * the proposal the transfer of ownership is executed.\r\n\r\n     * The Crowdsale contact transferres the ownership of the\r\n     * EngravedToken contract to Engraved\r\n     */\r\n    function executeTransfer() afterDeadline atStage(Stages.Proposed) {\r\n\r\n        // Check approved\r\n\t      require(transferProposal.approvedWeight > transferProposal.disapprovedWeight);\r\n\r\n\t      require(EGREngravedToken.unlock());\r\n\r\n        require(EGREngravedToken.startIncentiveDistribution());\r\n\r\n        EGREngravedToken.transferOwnership(transferProposal.engravedAddress);\r\n\t      require(EGREngravedToken.owner() == transferProposal.engravedAddress);\r\n\r\n        require(transferProposal.engravedAddress.send(this.balance));\r\n\r\n        stage = Stages.Accepted;\r\n    }\r\n\r\n\r\n    /**\r\n     * Receives ETH and issue EGR EngravedTokens to the sender\r\n     */\r\n    function () payable atStage(Stages.InProgress) {\r\n\r\n        // Crowdsale not started yet\r\n        require(now > start);\r\n\r\n        // Crowdsale expired\r\n        require(now < end);\r\n\r\n        // Enforce min amount\r\n\t      require(msg.value >= minAcceptedAmount);\r\n\r\n        uint256 received = msg.value;\r\n        uint256 valueInEGR = toEGR(msg.value);\r\n\r\n        require((EGREngravedToken.totalSupply() + valueInEGR) <= (maxSupply * 10**3));\r\n\r\n        require(EGREngravedToken.issue(msg.sender, valueInEGR));\r\n\r\n        balances[msg.sender] += received;\r\n        raised += received;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"rateAngelsDayEnd\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wei\",\"type\":\"uint256\"}],\"name\":\"toEGR\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_engravedAddress\",\"type\":\"address\"}],\"name\":\"proposeTransfer\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"airdropEnd\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"endCrowdsale\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rateFirstWeekEnd\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rateLastWeekEnd\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_approve\",\"type\":\"bool\"}],\"name\":\"vote\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"airdropParticipants\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rateSecondWeekEnd\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rateThirdWeekEnd\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transferProposalEnd\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"EGREngravedToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_investor\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"endAirdrop\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"executeTransfer\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rateAngelsDay\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transferProposalCooldown\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rateSecondWeek\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"confirmBeneficiary\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rateThirdWeek\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rateFirstWeek\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"angelsDayCooldownEnd\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rateLastWeek\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transferProposal\",\"outputs\":[{\"name\":\"engravedAddress\",\"type\":\"address\"},{\"name\":\"deadline\",\"type\":\"uint256\"},{\"name\":\"approvedWeight\",\"type\":\"uint256\"},{\"name\":\"disapprovedWeight\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"start\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxAirdropParticipants\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"confirmedBy\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rateAirDrop\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"end\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"raised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minAcceptedAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"airdropCooldownEnd\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_EngravedTokenAddress\",\"type\":\"address\"},{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_start\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"}]","ContractName":"EGRCrowdsale","CompilerVersion":"v0.4.15+commit.bbb8e64f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000cf43a59e41722bdd4631a0cdda76853374a3855d0000000000000000000000003dad42a8a6b5ca8c8062624e15cfc3dc893c2d610000000000000000000000000000000000000000000000000000000059ebed54","Library":"","SwarmSource":"bzzr://b2e4ebe9dac9962cac09377b8bb361db2350cc864a2a56e20bbdcbd53e64e535"}]}