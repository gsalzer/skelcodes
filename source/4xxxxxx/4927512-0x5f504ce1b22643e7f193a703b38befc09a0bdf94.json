{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\ncontract SafeMath {\r\n    uint256 constant public MAX_UINT256 =\r\n    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n\r\n    function safeAdd(uint256 x, uint256 y) constant internal returns (uint256 z) {\r\n        if (x > MAX_UINT256 - y) throw;\r\n        return x + y;\r\n    }\r\n\r\n    function safeSub(uint256 x, uint256 y) constant internal returns (uint256 z) {\r\n        if (x < y) throw;\r\n        return x - y;\r\n    }\r\n\r\n    function safeMul(uint256 x, uint256 y) constant internal returns (uint256 z) {\r\n        if (y == 0) return 0;\r\n        if (x > MAX_UINT256 / y) throw;\r\n        return x * y;\r\n    }\r\n}\r\n\r\ncontract ERC223ReceivingContract {\r\n\r\n    struct inr {\r\n        address sender;\r\n        uint value;\r\n        bytes data;\r\n        bytes4 sig;\r\n    }\r\n\r\n      function tokenFallback(address _from, uint _value, bytes _data){\r\n      inr memory igniter;\r\n      igniter.sender = _from;\r\n      igniter.value = _value;\r\n      igniter.data = _data;\r\n      uint32 u = uint32(_data[3]) + (uint32(_data[2]) << 8) + (uint32(_data[1]) << 16) + (uint32(_data[0]) << 24);\r\n      igniter.sig = bytes4(u);\r\n\r\n    }\r\n}\r\n\r\ncontract iGniter is SafeMath {\r\n\r\n  struct serPayment {\r\n    uint unlockedTime;\r\n    uint256 unlockedBlockNumber;\r\n  }\r\n\r\n    string public name;\r\n    bytes32 public symbol;\r\n    uint8 public decimals;\r\n    uint256 public rewardPerBlockPerAddress;\r\n    uint256 public totalInitialAddresses;\r\n    uint256 public initialBlockCount;\r\n    uint256 private minedBlocks;\r\n    uint256 private iGniting;\r\n    uint256 private initialSupplyPerAddress;\r\n    uint256 private totalMaxAvailableAmount;\r\n    uint256 private availableAmount;\r\n    uint256 private availableBalance;\r\n    uint256 private balanceOfAddress;\r\n    uint256 private initialSupply;\r\n    uint256 private _totalSupply;\r\n    uint256 public currentCost;\r\n    uint256 private startBounty;\r\n    uint256 private finishBounty;\r\n\r\n    mapping(address => uint256) public balanceOf;\r\n    mapping(address => uint) balances;\r\n    mapping(address => bool) public initialAddress;\r\n    mapping(address => bool) public bountyAddress;\r\n    mapping (address => mapping (address => uint)) internal _allowances;\r\n    mapping (address => serPayment) ignPayments;\r\n    address private _owner;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint value, bytes indexed data);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Burn(address indexed from, uint256 value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n\r\n    modifier isOwner() {\r\n\r\n      require(msg.sender == _owner);\r\n      _;\r\n    }\r\n\r\n    function iGniter() {\r\n\r\n        initialSupplyPerAddress = 10000000000; //10000\r\n        initialBlockCount = 4912150;\r\n        rewardPerBlockPerAddress = 7;\r\n        totalInitialAddresses = 5000;\r\n        initialSupply = initialSupplyPerAddress * totalInitialAddresses;\r\n       _owner = msg.sender;\r\n\r\n    }\r\n\r\n    function currentBlock() constant returns (uint256 blockNumber)\r\n    {\r\n        return block.number;\r\n    }\r\n\r\n    function blockDiff() constant returns (uint256 blockNumber)\r\n    {\r\n        return block.number - initialBlockCount;\r\n    }\r\n\r\n    function assignInitialAddresses(address[] _address) isOwner public returns (bool success)\r\n    {\r\n        if (block.number <= 6969050)\r\n        {\r\n          for (uint i = 0; i < _address.length; i++)\r\n          {\r\n            balanceOf[_address[i]] = initialSupplyPerAddress;\r\n            initialAddress[_address[i]] = true;\r\n          }\r\n\r\n          return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function assignBountyAddresses(address[] _address) isOwner public returns (bool success)\r\n    {\r\n      startBounty = 2500000000;\r\n\r\n        if (block.number <= 6969050)\r\n        {\r\n          for (uint i = 0; i < _address.length; i++)\r\n          {\r\n            balanceOf[_address[i]] = startBounty;\r\n            initialAddress[_address[i]] = true;\r\n          }\r\n\r\n          return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function completeBountyAddresses(address[] _address) isOwner public returns (bool success)\r\n    {\r\n      finishBounty = 7500000000;\r\n\r\n        if (block.number <= 6969050)\r\n        {\r\n          for (uint i = 0; i < _address.length; i++)\r\n          {\r\n            balanceOf[_address[i]] = balanceOf[_address[i]] + finishBounty;\r\n            initialAddress[_address[i]] = true;\r\n          }\r\n\r\n          return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function balanceOf(address _address) constant returns (uint256 Balance)\r\n    {\r\n        if ((initialAddress[_address])) {\r\n            minedBlocks = block.number - initialBlockCount;\r\n\r\n            if (minedBlocks >= 105120000) return balanceOf[_address]; //app. 2058\r\n\r\n            availableAmount = rewardPerBlockPerAddress * minedBlocks;\r\n            availableBalance = balanceOf[_address] + availableAmount;\r\n\r\n            return availableBalance;\r\n        }\r\n        else\r\n            return balanceOf[_address];\r\n    }\r\n\r\n    function name() constant returns (string _name)\r\n    {\r\n        name = \"iGniter\";\r\n        return name;\r\n    }\r\n\r\n    function symbol() constant returns (bytes32 _symbol)\r\n    {\r\n        symbol = \"INR\";\r\n        return symbol;\r\n    }\r\n\r\n    function decimals() constant returns (uint8 _decimals)\r\n    {\r\n        decimals = 6;\r\n        return decimals;\r\n    }\r\n\r\n    function totalSupply() constant returns (uint256 totalSupply)\r\n    {\r\n        minedBlocks = block.number - initialBlockCount;\r\n        availableAmount = rewardPerBlockPerAddress * minedBlocks;\r\n        iGniting = availableAmount * totalInitialAddresses;\r\n        return iGniting + initialSupply;\r\n    }\r\n\r\n    function minedTotalSupply() constant returns (uint256 minedBlocks)\r\n    {\r\n        minedBlocks = block.number - initialBlockCount;\r\n        availableAmount = rewardPerBlockPerAddress * minedBlocks;\r\n        return availableAmount * totalInitialAddresses;\r\n    }\r\n\r\n    function initialiGnSupply() constant returns (uint256 maxSupply)\r\n    {\r\n        return initialSupplyPerAddress * totalInitialAddresses;\r\n    }\r\n\r\n\r\n    //burn tokens\r\n    function burn(uint256 _value) public returns(bool success) {\r\n\r\n        //get sum\r\n        minedBlocks = block.number - initialBlockCount;\r\n        availableAmount = rewardPerBlockPerAddress * minedBlocks;\r\n        iGniting = availableAmount * totalInitialAddresses;\r\n        _totalSupply = iGniting + initialSupply;\r\n\r\n        //burn time\r\n        require(balanceOf[msg.sender] >= _value);\r\n        balanceOf[msg.sender] -= _value;\r\n        _totalSupply -= _value;\r\n        Burn(msg.sender, _value);\r\n        return true;\r\n    }\r\n\r\n    function transfer(address _to, uint _value) public returns (bool) {\r\n        if (_value > 0 && _value <= balanceOf[msg.sender] && !isContract(_to)) {\r\n            balanceOf[msg.sender] -= _value;\r\n            balanceOf[_to] += _value;\r\n            Transfer(msg.sender, _to, _value);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function transfer(address _to, uint _value, bytes _data) public returns (bool) {\r\n        if (_value > 0 && _value <= balanceOf[msg.sender] && isContract(_to)) {\r\n            balanceOf[msg.sender] -= _value;\r\n            balanceOf[_to] += _value;\r\n            ERC223ReceivingContract _contract = ERC223ReceivingContract(_to);\r\n                _contract.tokenFallback(msg.sender, _value, _data);\r\n            Transfer(msg.sender, _to, _value, _data);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function isContract(address _addr) returns (bool) {\r\n        uint codeSize;\r\n        assembly {\r\n            codeSize := extcodesize(_addr)\r\n        }\r\n        return codeSize > 0;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint _value) public returns (bool) {\r\n        if (_allowances[_from][msg.sender] > 0 && _value > 0 && _allowances[_from][msg.sender] >= _value &&\r\n            balanceOf[_from] >= _value) {\r\n            balanceOf[_from] -= _value;\r\n            balanceOf[_to] += _value;\r\n            _allowances[_from][msg.sender] -= _value;\r\n            Transfer(_from, _to, _value);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function approve(address _spender, uint _value) public returns (bool) {\r\n        _allowances[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) public constant returns (uint) {\r\n        return _allowances[_owner][_spender];\r\n    }\r\n\r\n    function servicePayment(address _to, uint _value) public returns (bool, uint256, uint256) {\r\n\r\n      require(_value >= currentCost);\r\n\r\n      if (_value > 0 && _value <= balanceOf[msg.sender] && !isContract(_to)) {\r\n            balanceOf[msg.sender] -= _value;\r\n            balanceOf[_to] += _value;\r\n            Transfer(msg.sender, _to, _value);\r\n\r\n            //either option available\r\n            ignPayments[msg.sender].unlockedTime = block.timestamp;\r\n            ignPayments[msg.sender].unlockedBlockNumber = block.number;\r\n\r\n            return (true, ignPayments[msg.sender].unlockedTime, ignPayments[msg.sender].unlockedBlockNumber);\r\n        }\r\n        return (false, ignPayments[msg.sender].unlockedTime, ignPayments[msg.sender].unlockedBlockNumber);\r\n    }\r\n\r\n    function serviceBurn(uint _value) public returns (bool, uint256, uint256) {\r\n\r\n      require(_value >= currentCost);\r\n      require(balanceOf[msg.sender] >= _value);\r\n\r\n      //get sum\r\n      minedBlocks = block.number - initialBlockCount;\r\n      availableAmount = rewardPerBlockPerAddress * minedBlocks;\r\n      iGniting = availableAmount * totalInitialAddresses;\r\n      _totalSupply = iGniting + initialSupply;\r\n\r\n      //either option available\r\n      ignPayments[msg.sender].unlockedTime = block.timestamp;\r\n      ignPayments[msg.sender].unlockedBlockNumber = block.number;\r\n\r\n      //burn\r\n      balanceOf[msg.sender] -= _value;\r\n      _totalSupply -= _value;\r\n      Burn(msg.sender, _value);\r\n      return (true, ignPayments[msg.sender].unlockedTime, ignPayments[msg.sender].unlockedBlockNumber);\r\n      }\r\n\r\n    function PaymentStatusBlockNum(address _address) constant returns (uint256 bn) {\r\n\r\n      return ignPayments[_address].unlockedBlockNumber;\r\n    }\r\n\r\n    function PaymentStatusTimeStamp(address _address) constant returns (uint256 ut) {\r\n\r\n      return ignPayments[_address].unlockedTime;\r\n    }\r\n\r\n    function updateCost(uint256 _currCost) isOwner public returns (uint256 currCost) {\r\n\r\n      currentCost = _currCost;\r\n\r\n      return currentCost;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"isContract\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_currCost\",\"type\":\"uint256\"}],\"name\":\"updateCost\",\"outputs\":[{\"name\":\"currCost\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address[]\"}],\"name\":\"completeBountyAddresses\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minedTotalSupply\",\"outputs\":[{\"name\":\"minedBlocks\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"_decimals\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_UINT256\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentCost\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"initialAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"blockDiff\",\"outputs\":[{\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"servicePayment\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"Balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"_symbol\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address[]\"}],\"name\":\"assignBountyAddresses\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"PaymentStatusBlockNum\",\"outputs\":[{\"name\":\"bn\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address[]\"}],\"name\":\"assignInitialAddresses\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"PaymentStatusTimeStamp\",\"outputs\":[{\"name\":\"ut\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"serviceBurn\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalInitialAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardPerBlockPerAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentBlock\",\"outputs\":[{\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialBlockCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialiGnSupply\",\"outputs\":[{\"name\":\"maxSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"bountyAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"iGniter","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://7441effa85731398ded2ca8652008fd24c0184895a5605351c0746f0a864a0ee"}]}