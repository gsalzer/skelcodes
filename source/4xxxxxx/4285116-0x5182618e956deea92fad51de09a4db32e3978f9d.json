{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.16;        \r\n   \r\n  contract CentraSale { \r\n\r\n    using SafeMath for uint; \r\n\r\n    address public contract_address = 0x96a65609a7b84e8842732deb08f56c3e21ac6f8a; \r\n\r\n    address public owner;\r\n    uint public cap;\r\n    uint public constant cap_max = 170000*10**18;\r\n    uint public constant min_value = 10**18*1/10; \r\n    uint public operation;\r\n    mapping(uint => address) public operation_address;\r\n    mapping(uint => uint) public operation_amount;\r\n\r\n    uint256 public constant token_price = 10**18*1/200;  \r\n    uint256 public tokens_total;  \r\n\r\n    uint public constant contract_start = 1505844000;\r\n    uint public constant contract_finish = 1507269600;\r\n\r\n    uint public constant card_titanium_minamount = 500*10**18;\r\n    uint public constant card_titanium_first = 200000;\r\n    mapping(address => uint) cards_titanium_check; \r\n    address[] public cards_titanium;\r\n\r\n    uint public constant card_black_minamount = 100*10**18;\r\n    uint public constant card_black_first = 500000;\r\n    mapping(address => uint) public cards_black_check; \r\n    address[] public cards_black;\r\n\r\n    uint public constant card_metal_minamount = 40*10**18;\r\n    uint public constant card_metal_first = 750000;\r\n    mapping(address => uint) cards_metal_check; \r\n    address[] public cards_metal;      \r\n\r\n    uint public constant card_gold_minamount = 30*10**18;\r\n    uint public constant card_gold_first = 1000000;\r\n    mapping(address => uint) cards_gold_check; \r\n    address[] public cards_gold;      \r\n\r\n    uint public constant card_blue_minamount = 5/10*10**18;\r\n    uint public constant card_blue_first = 100000000;\r\n    mapping(address => uint) cards_blue_check; \r\n    address[] public cards_blue;\r\n\r\n    uint public constant card_start_minamount = 1/10*10**18;\r\n    uint public constant card_start_first = 100000000;\r\n    mapping(address => uint) cards_start_check; \r\n    address[] public cards_start;\r\n      \r\n   \r\n    // Functions with this modifier can only be executed by the owner\r\n    modifier onlyOwner() {\r\n        if (msg.sender != owner) {\r\n            throw;\r\n        }\r\n        _;\r\n    }      \r\n \r\n    // Constructor\r\n    function CentraSale() {\r\n        owner = msg.sender; \r\n        operation = 0; \r\n        cap = 0;        \r\n    }\r\n      \r\n    //default function for crowdfunding\r\n    function() payable {    \r\n\r\n      if(!(msg.value >= min_value)) throw;\r\n      if(now < contract_start) throw;\r\n      if(now > contract_finish) throw;                     \r\n\r\n      //if(cap + msg.value > cap_max) throw;         \r\n\r\n      tokens_total = msg.value*10**18/token_price;\r\n      if(!(tokens_total > 0)) throw;           \r\n\r\n      if(!contract_transfer(tokens_total)) throw;\r\n\r\n      cap = cap.add(msg.value); \r\n      operations();\r\n      get_card();\r\n      owner.send(this.balance);\r\n    }\r\n\r\n    //Contract execute\r\n    function contract_transfer(uint _amount) private returns (bool) {      \r\n\r\n      if(!contract_address.call(bytes4(sha3(\"transfer(address,uint256)\")),msg.sender,_amount)) {    \r\n        return false;\r\n      }\r\n      return true;\r\n    } \r\n\r\n    //Update operations\r\n    function operations() private returns (bool) {\r\n        operation_address[operation] = msg.sender;\r\n        operation_amount[operation] = msg.value;        \r\n        operation = operation.add(1);        \r\n        return true;\r\n    }    \r\n\r\n    //Withdraw money from contract balance to owner\r\n    function withdraw() onlyOwner returns (bool result) {\r\n        owner.send(this.balance);\r\n        return true;\r\n    }\r\n\r\n    //get total titanium cards\r\n    function cards_titanium_total() constant returns (uint) { \r\n      return cards_titanium.length;\r\n    }  \r\n    //get total black cards\r\n    function cards_black_total() constant returns (uint) { \r\n      return cards_black.length;\r\n    }\r\n    //get total metal cards\r\n    function cards_metal_total() constant returns (uint) { \r\n      return cards_metal.length;\r\n    }        \r\n    //get total gold cards\r\n    function cards_gold_total() constant returns (uint) { \r\n      return cards_gold.length;\r\n    }        \r\n    //get total blue cards\r\n    function cards_blue_total() constant returns (uint) { \r\n      return cards_blue.length;\r\n    }\r\n\r\n    //get total start cards\r\n    function cards_start_total() constant returns (uint) { \r\n      return cards_start.length;\r\n    }\r\n\r\n    /*\r\n    * User get card(titanium, black, gold metal, gold and other), if amount eth sufficient for this.\r\n    */\r\n    function get_card() private returns (bool) {\r\n\r\n      if((msg.value >= card_titanium_minamount)\r\n        &&(cards_titanium.length < card_titanium_first)\r\n        &&(cards_titanium_check[msg.sender] != 1)\r\n        ) {\r\n        cards_titanium.push(msg.sender);\r\n        cards_titanium_check[msg.sender] = 1;\r\n      }\r\n\r\n      if((msg.value >= card_black_minamount)\r\n        &&(msg.value < card_titanium_minamount)\r\n        &&(cards_black.length < card_black_first)\r\n        &&(cards_black_check[msg.sender] != 1)\r\n        ) {\r\n        cards_black.push(msg.sender);\r\n        cards_black_check[msg.sender] = 1;\r\n      }                \r\n\r\n      if((msg.value >= card_metal_minamount)\r\n        &&(msg.value < card_black_minamount)\r\n        &&(cards_metal.length < card_metal_first)\r\n        &&(cards_metal_check[msg.sender] != 1)\r\n        ) {\r\n        cards_metal.push(msg.sender);\r\n        cards_metal_check[msg.sender] = 1;\r\n      }               \r\n\r\n      if((msg.value >= card_gold_minamount)\r\n        &&(msg.value < card_metal_minamount)\r\n        &&(cards_gold.length < card_gold_first)\r\n        &&(cards_gold_check[msg.sender] != 1)\r\n        ) {\r\n        cards_gold.push(msg.sender);\r\n        cards_gold_check[msg.sender] = 1;\r\n      }               \r\n\r\n      if((msg.value >= card_blue_minamount)\r\n        &&(msg.value < card_gold_minamount)\r\n        &&(cards_blue.length < card_blue_first)\r\n        &&(cards_blue_check[msg.sender] != 1)\r\n        ) {\r\n        cards_blue.push(msg.sender);\r\n        cards_blue_check[msg.sender] = 1;\r\n      }\r\n\r\n      if((msg.value >= card_start_minamount)\r\n        &&(msg.value < card_blue_minamount)\r\n        &&(cards_start.length < card_start_first)\r\n        &&(cards_start_check[msg.sender] != 1)\r\n        ) {\r\n        cards_start.push(msg.sender);\r\n        cards_start_check[msg.sender] = 1;\r\n      }\r\n\r\n      return true;\r\n    }    \r\n      \r\n }\r\n\r\n /**\r\n   * Math operations with safety checks\r\n   */\r\n  library SafeMath {\r\n    function mul(uint a, uint b) internal returns (uint) {\r\n      uint c = a * b;\r\n      assert(a == 0 || c / a == b);\r\n      return c;\r\n    }\r\n\r\n    function div(uint a, uint b) internal returns (uint) {\r\n      // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n      uint c = a / b;\r\n      // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n      return c;\r\n    }\r\n\r\n    function sub(uint a, uint b) internal returns (uint) {\r\n      assert(b <= a);\r\n      return a - b;\r\n    }\r\n\r\n    function add(uint a, uint b) internal returns (uint) {\r\n      uint c = a + b;\r\n      assert(c >= a);\r\n      return c;\r\n    }\r\n\r\n    function max64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n      return a >= b ? a : b;\r\n    }\r\n\r\n    function min64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n      return a < b ? a : b;\r\n    }\r\n\r\n    function max256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n      return a >= b ? a : b;\r\n    }\r\n\r\n    function min256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n      return a < b ? a : b;\r\n    }\r\n\r\n    function assert(bool assertion) internal {\r\n      if (!assertion) {\r\n        throw;\r\n      }\r\n    }\r\n  }","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"card_blue_first\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"operation_address\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cards_gold\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"operation_amount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"card_black_first\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"card_start_minamount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cards_metal_total\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[{\"name\":\"result\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"card_gold_minamount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cards_metal\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"card_black_minamount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"card_gold_first\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cards_black_total\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cards_titanium_total\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"operation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token_price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"card_titanium_first\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contract_start\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contract_address\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contract_finish\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cards_start\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"card_metal_first\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"card_titanium_minamount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cards_titanium\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"min_value\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cards_blue\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cards_black\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cards_start_total\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"cards_black_check\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"card_metal_minamount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cap_max\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cards_blue_total\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokens_total\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"card_start_first\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cards_gold_total\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"card_blue_minamount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"CentraSale","CompilerVersion":"v0.4.16+commit.d7661dd9","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://05fad543cc885035a09108280073d5adbc5e72c662a1110f45d5ba66aef1546b"}]}