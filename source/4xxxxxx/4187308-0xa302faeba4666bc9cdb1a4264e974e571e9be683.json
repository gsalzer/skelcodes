{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13;\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control \r\n * functions, this simplifies the implementation of \"user permissions\". \r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  /** \r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner. \r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to. \r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner {\r\n    require(newOwner != address(0));\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * Abstract contract that allows children to implement an\r\n * emergency stop mechanism. Differs from Pausable by causing a throw when in halt mode.\r\n *\r\n */\r\ncontract Haltable is Ownable {\r\n  bool public halted;\r\n\r\n  event Halted(bool halted);\r\n\r\n  modifier stopInEmergency {\r\n    require(!halted);\r\n    _;\r\n  }\r\n\r\n  modifier onlyInEmergency {\r\n    require(halted);\r\n    _;\r\n  }\r\n\r\n  // called by the owner on emergency, triggers stopped state\r\n  function halt() external onlyOwner {\r\n    halted = true;\r\n    Halted(true);\r\n  }\r\n\r\n  // called by the owner on end of emergency, returns to normal state\r\n  function unhalt() external onlyOwner onlyInEmergency {\r\n    halted = false;\r\n    Halted(false);\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * Math operations with safety checks\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint a, uint b) internal returns (uint) {\r\n    uint c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint a, uint b) internal returns (uint) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint a, uint b) internal returns (uint) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint a, uint b) internal returns (uint) {\r\n    uint c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n\r\n  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n    return a < b ? a : b;\r\n  }\r\n\r\n  function max256(uint a, uint b) internal constant returns (uint) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min256(uint a, uint b) internal constant returns (uint) {\r\n    return a < b ? a : b;\r\n  }\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20Basic {\r\n  uint public totalSupply;\r\n  function balanceOf(address who) public constant returns (uint);\r\n  function transfer(address to, uint value) public returns (bool ok);\r\n  event Transfer(address indexed from, address indexed to, uint value);\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public constant returns (uint);\r\n  function transferFrom(address from, address to, uint value) public returns (bool ok);\r\n  function approve(address spender, uint value) public returns (bool ok);\r\n  event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\n/**\r\n * A token that defines fractional units as decimals.\r\n */\r\ncontract FractionalERC20 is ERC20 {\r\n\r\n  uint8 public decimals;\r\n\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances. \r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint;\r\n\r\n  mapping(address => uint) balances;\r\n\r\n  /**\r\n   * Obsolete. Removed this check based on:\r\n   * https://blog.coinfabrik.com/smart-contract-short-address-attack-mitigation-failure/\r\n   * @dev Fix for the ERC20 short address attack.\r\n   *\r\n   * modifier onlyPayloadSize(uint size) {\r\n   *    require(msg.data.length >= size + 4);\r\n   *    _;\r\n   * }\r\n   */\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint _value) public returns (bool success) {\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of. \r\n  * @return An uint representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public constant returns (uint balance) {\r\n    return balances[_owner];\r\n  }\r\n  \r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract StandardToken is BasicToken, ERC20 {\r\n\r\n  /* Token supply got increased and a new owner received these tokens */\r\n  event Minted(address receiver, uint amount);\r\n\r\n  mapping (address => mapping (address => uint)) allowed;\r\n\r\n  /* Interface declaration */\r\n  function isToken() public constant returns (bool weAre) {\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint the amout of tokens to be transfered\r\n   */\r\n  function transferFrom(address _from, address _to, uint _value) public returns (bool success) {\r\n    uint _allowance = allowed[_from][msg.sender];\r\n\r\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n    // require(_value <= _allowance);\r\n    // SafeMath uses assert instead of require though, beware when using an analysis tool\r\n\r\n    balances[_to] = balances[_to].add(_value);\r\n    balances[_from] = balances[_from].sub(_value);\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint _value) public returns (bool success) {\r\n\r\n    // To change the approve amount you first have to reduce the addresses'\r\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n    //  already 0 to mitigate the race condition described here:\r\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    require (_value == 0 || allowed[msg.sender][_spender] == 0);\r\n\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens than an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint specifing the amount of tokens still avaible for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public constant returns (uint remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * Atomic increment of approved spending\r\n   *\r\n   * Works around https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   *\r\n   */\r\n  function addApproval(address _spender, uint _addedValue) public\r\n  returns (bool success) {\r\n      uint oldValue = allowed[msg.sender][_spender];\r\n      allowed[msg.sender][_spender] = oldValue.add(_addedValue);\r\n      Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n      return true;\r\n  }\r\n\r\n  /**\r\n   * Atomic decrement of approved spending.\r\n   *\r\n   * Works around https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   */\r\n  function subApproval(address _spender, uint _subtractedValue) public\r\n  returns (bool success) {\r\n\r\n      uint oldVal = allowed[msg.sender][_spender];\r\n\r\n      if (_subtractedValue > oldVal) {\r\n          allowed[msg.sender][_spender] = 0;\r\n      } else {\r\n          allowed[msg.sender][_spender] = oldVal.sub(_subtractedValue);\r\n      }\r\n      Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n      return true;\r\n  }\r\n  \r\n}\r\n\r\n/**\r\n * Define interface for releasing the token transfer after a successful crowdsale.\r\n */\r\ncontract ReleasableToken is StandardToken, Ownable {\r\n\r\n  /* The finalizer contract that allows lifting the transfer limits on this token */\r\n  address public releaseAgent;\r\n\r\n  /** A crowdsale contract can release us to the wild if ICO success. If false we are are in transfer lock up period.*/\r\n  bool public released = false;\r\n\r\n  /** Map of agents that are allowed to transfer tokens regardless of the lock down period. These are crowdsale contracts and possible the team multisig itself. */\r\n  mapping (address => bool) public transferAgents;\r\n\r\n  /**\r\n   * Set the contract that can call release and make the token transferable.\r\n   *\r\n   * Since the owner of this contract is (or should be) the crowdsale,\r\n   * it can only be called by a corresponding exposed API in the crowdsale contract in case of input error.\r\n   */\r\n  function setReleaseAgent(address addr) onlyOwner inReleaseState(false) public {\r\n    // We don't do interface check here as we might want to have a normal wallet address to act as a release agent.\r\n    releaseAgent = addr;\r\n  }\r\n\r\n  /**\r\n   * Owner can allow a particular address (e.g. a crowdsale contract) to transfer tokens despite the lock up period.\r\n   */\r\n  function setTransferAgent(address addr, bool state) onlyOwner inReleaseState(false) public {\r\n    transferAgents[addr] = state;\r\n  }\r\n\r\n  /**\r\n   * One way function to release the tokens into the wild.\r\n   *\r\n   * Can be called only from the release agent that should typically be the finalize agent ICO contract.\r\n   * In the scope of the crowdsale, it is only called if the crowdsale has been a success (first milestone reached).\r\n   */\r\n  function releaseTokenTransfer() public onlyReleaseAgent {\r\n    released = true;\r\n  }\r\n\r\n  /**\r\n   * Limit token transfer until the crowdsale is over.\r\n   */\r\n  modifier canTransfer(address _sender) {\r\n    require(released || transferAgents[_sender]);\r\n    _;\r\n  }\r\n\r\n  /** The function can be called only before or after the tokens have been released */\r\n  modifier inReleaseState(bool releaseState) {\r\n    require(releaseState == released);\r\n    _;\r\n  }\r\n\r\n  /** The function can be called only by a whitelisted release agent. */\r\n  modifier onlyReleaseAgent() {\r\n    require(msg.sender == releaseAgent);\r\n    _;\r\n  }\r\n\r\n  /** We restrict transfer by overriding it */\r\n  function transfer(address _to, uint _value) public canTransfer(msg.sender) returns (bool success) {\r\n    // Call StandardToken.transfer()\r\n   return super.transfer(_to, _value);\r\n  }\r\n\r\n  /** We restrict transferFrom by overriding it */\r\n  function transferFrom(address _from, address _to, uint _value) public canTransfer(_from) returns (bool success) {\r\n    // Call StandardToken.transferForm()\r\n    return super.transferFrom(_from, _to, _value);\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * A token that can increase its supply by another contract.\r\n *\r\n * This allows uncapped crowdsale by dynamically increasing the supply when money pours in.\r\n * Only mint agents, contracts whitelisted by owner, can mint new tokens.\r\n *\r\n */\r\ncontract MintableToken is StandardToken, Ownable {\r\n\r\n  using SafeMath for uint;\r\n\r\n  bool public mintingFinished = false;\r\n\r\n  /** List of agents that are allowed to create new tokens */\r\n  mapping (address => bool) public mintAgents;\r\n\r\n  event MintingAgentChanged(address addr, bool state);\r\n\r\n\r\n  function MintableToken(uint _initialSupply, address _multisig, bool _mintable) internal {\r\n    require(_multisig != address(0));\r\n    // Cannot create a token without supply and no minting\r\n    require(_mintable || _initialSupply != 0);\r\n    // Create initially all balance on the team multisig\r\n    if (_initialSupply > 0)\r\n        mintInternal(_multisig, _initialSupply);\r\n    // No more new supply allowed after the token creation\r\n    mintingFinished = !_mintable;\r\n  }\r\n\r\n  /**\r\n   * Create new tokens and allocate them to an address.\r\n   *\r\n   * Only callable by a crowdsale contract (mint agent).\r\n   */\r\n  function mint(address receiver, uint amount) onlyMintAgent public {\r\n    mintInternal(receiver, amount);\r\n  }\r\n\r\n  function mintInternal(address receiver, uint amount) canMint private {\r\n    totalSupply = totalSupply.add(amount);\r\n    balances[receiver] = balances[receiver].add(amount);\r\n\r\n    // Removed because this may be confused with anonymous transfers in the upcoming fork.\r\n    // This will make the mint transaction appear in EtherScan.io\r\n    // We can remove this after there is a standardized minting event\r\n    // Transfer(0, receiver, amount);\r\n\r\n    Minted(receiver, amount);\r\n  }\r\n\r\n  /**\r\n   * Owner can allow a crowdsale contract to mint new tokens.\r\n   */\r\n  function setMintAgent(address addr, bool state) onlyOwner canMint public {\r\n    mintAgents[addr] = state;\r\n    MintingAgentChanged(addr, state);\r\n  }\r\n\r\n  modifier onlyMintAgent() {\r\n    // Only mint agents are allowed to mint new tokens\r\n    require(mintAgents[msg.sender]);\r\n    _;\r\n  }\r\n\r\n  /** Make sure we are not done yet. */\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n}\r\n\r\n/**\r\n * Upgrade agent transfers tokens to a new contract.\r\n * Upgrade agent itself can be the token contract, or just a middle man contract doing the heavy lifting.\r\n *\r\n * The Upgrade agent is the interface used to implement a token\r\n * migration in the case of an emergency.\r\n * The function upgradeFrom has to implement the part of the creation\r\n * of new tokens on behalf of the user doing the upgrade.\r\n *\r\n * The new token can implement this interface directly, or use.\r\n */\r\ncontract UpgradeAgent {\r\n\r\n  /** This value should be the same as the original token's total supply */\r\n  uint public originalSupply;\r\n\r\n  /** Interface to ensure the contract is correctly configured */\r\n  function isUpgradeAgent() public constant returns (bool) {\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  Upgrade an account\r\n\r\n  When the token contract is in the upgrade status the each user will\r\n  have to call `upgrade(value)` function from UpgradeableToken.\r\n\r\n  The upgrade function adjust the balance of the user and the supply\r\n  of the previous token and then call `upgradeFrom(value)`.\r\n\r\n  The UpgradeAgent is the responsible to create the tokens for the user\r\n  in the new contract.\r\n\r\n  * @param _from Account to upgrade.\r\n  * @param _value Tokens to upgrade.\r\n\r\n  */\r\n  function upgradeFrom(address _from, uint _value) public;\r\n\r\n}\r\n\r\n/**\r\n * A token upgrade mechanism where users can opt-in amount of tokens to the next smart contract revision.\r\n *\r\n */\r\ncontract UpgradeableToken is StandardToken {\r\n\r\n  /** Contract / person who can set the upgrade path. This can be the same as team multisig wallet, as what it is with its default value. */\r\n  address public upgradeMaster;\r\n\r\n  /** The next contract where the tokens will be migrated. */\r\n  UpgradeAgent public upgradeAgent;\r\n\r\n  /** How many tokens we have upgraded by now. */\r\n  uint public totalUpgraded;\r\n\r\n  /**\r\n   * Upgrade states.\r\n   *\r\n   * - NotAllowed: The child contract has not reached a condition where the upgrade can bgun\r\n   * - WaitingForAgent: Token allows upgrade, but we don't have a new agent yet\r\n   * - ReadyToUpgrade: The agent is set, but not a single token has been upgraded yet\r\n   * - Upgrading: Upgrade agent is set and the balance holders can upgrade their tokens\r\n   *\r\n   */\r\n  enum UpgradeState {Unknown, NotAllowed, WaitingForAgent, ReadyToUpgrade, Upgrading}\r\n\r\n  /**\r\n   * Somebody has upgraded some of his tokens.\r\n   */\r\n  event Upgrade(address indexed _from, address indexed _to, uint _value);\r\n\r\n  /**\r\n   * New upgrade agent available.\r\n   */\r\n  event UpgradeAgentSet(address agent);\r\n\r\n  /**\r\n   * Do not allow construction without upgrade master set.\r\n   */\r\n  function UpgradeableToken(address _upgradeMaster) {\r\n    setUpgradeMaster(_upgradeMaster);\r\n  }\r\n\r\n  /**\r\n   * Allow the token holder to upgrade some of their tokens to a new contract.\r\n   */\r\n  function upgrade(uint value) public {\r\n    UpgradeState state = getUpgradeState();\r\n    // Ensure it's not called in a bad state\r\n    require(state == UpgradeState.ReadyToUpgrade || state == UpgradeState.Upgrading);\r\n\r\n    // Validate input value.\r\n    require(value != 0);\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(value);\r\n\r\n    // Take tokens out from circulation\r\n    totalSupply = totalSupply.sub(value);\r\n    totalUpgraded = totalUpgraded.add(value);\r\n\r\n    // Upgrade agent reissues the tokens\r\n    upgradeAgent.upgradeFrom(msg.sender, value);\r\n    Upgrade(msg.sender, upgradeAgent, value);\r\n  }\r\n\r\n  /**\r\n   * Set an upgrade agent that handles the upgrade process\r\n   */\r\n  function setUpgradeAgent(address agent) external {\r\n    // Check whether the token is in a state that we could think of upgrading\r\n    require(canUpgrade());\r\n\r\n    require(agent != 0x0);\r\n    // Only a master can designate the next agent\r\n    require(msg.sender == upgradeMaster);\r\n    // Upgrade has already begun for an agent\r\n    require(getUpgradeState() != UpgradeState.Upgrading);\r\n\r\n    upgradeAgent = UpgradeAgent(agent);\r\n\r\n    // Bad interface\r\n    require(upgradeAgent.isUpgradeAgent());\r\n    // Make sure that token supplies match in source and target\r\n    require(upgradeAgent.originalSupply() == totalSupply);\r\n\r\n    UpgradeAgentSet(upgradeAgent);\r\n  }\r\n\r\n  /**\r\n   * Get the state of the token upgrade.\r\n   */\r\n  function getUpgradeState() public constant returns(UpgradeState) {\r\n    if (!canUpgrade()) return UpgradeState.NotAllowed;\r\n    else if (address(upgradeAgent) == 0x00) return UpgradeState.WaitingForAgent;\r\n    else if (totalUpgraded == 0) return UpgradeState.ReadyToUpgrade;\r\n    else return UpgradeState.Upgrading;\r\n  }\r\n\r\n  /**\r\n   * Change the upgrade master.\r\n   *\r\n   * This allows us to set a new owner for the upgrade mechanism.\r\n   */\r\n  function changeUpgradeMaster(address new_master) public {\r\n    require(msg.sender == upgradeMaster);\r\n    setUpgradeMaster(new_master);\r\n  }\r\n\r\n  /**\r\n   * Internal upgrade master setter.\r\n   */\r\n  function setUpgradeMaster(address new_master) private {\r\n    require(new_master != 0x0);\r\n    upgradeMaster = new_master;\r\n  }\r\n\r\n  /**\r\n   * Child contract can enable to provide the condition when the upgrade can begin.\r\n   */\r\n  function canUpgrade() public constant returns(bool) {\r\n     return true;\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * A crowdsale token.\r\n *\r\n * An ERC-20 token designed specifically for crowdsales with investor protection and further development path.\r\n *\r\n * - The token transfer() is disabled until the crowdsale is over\r\n * - The token contract gives an opt-in upgrade path to a new contract\r\n * - The same token can be part of several crowdsales through the approve() mechanism\r\n * - The token can be capped (supply set in the constructor) or uncapped (crowdsale contract can mint new tokens)\r\n *\r\n */\r\ncontract CrowdsaleToken is ReleasableToken, MintableToken, UpgradeableToken, FractionalERC20 {\r\n\r\n  event UpdatedTokenInformation(string newName, string newSymbol);\r\n\r\n  string public name;\r\n\r\n  string public symbol;\r\n\r\n  /**\r\n   * Construct the token.\r\n   *\r\n   * This token must be created through a team multisig wallet, so that it is owned by that wallet.\r\n   *\r\n   * @param _name Token name\r\n   * @param _symbol Token symbol - typically it's all caps\r\n   * @param _initialSupply How many tokens we start with\r\n   * @param _decimals Number of decimal places\r\n   * @param _mintable Are new tokens created over the crowdsale or do we distribute only the initial supply? Note that when the token becomes transferable the minting always ends.\r\n   */\r\n  function CrowdsaleToken(string _name, string _symbol, uint _initialSupply, uint8 _decimals, address _multisig, bool _mintable)\r\n    UpgradeableToken(_multisig) MintableToken(_initialSupply, _multisig, _mintable) {\r\n    name = _name;\r\n    symbol = _symbol;\r\n    decimals = _decimals;\r\n  }\r\n\r\n  /**\r\n   * When token is released to be transferable, prohibit new token creation.\r\n   */\r\n  function releaseTokenTransfer() public onlyReleaseAgent {\r\n    mintingFinished = true;\r\n    super.releaseTokenTransfer();\r\n  }\r\n\r\n  /**\r\n   * Allow upgrade agent functionality to kick in only if the crowdsale was a success.\r\n   */\r\n  function canUpgrade() public constant returns(bool) {\r\n    return released && super.canUpgrade();\r\n  }\r\n\r\n  /**\r\n   * Owner can update token information here\r\n   */\r\n  function setTokenInformation(string _name, string _symbol) onlyOwner {\r\n    name = _name;\r\n    symbol = _symbol;\r\n\r\n    UpdatedTokenInformation(name, symbol);\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * Abstract base contract for token sales.\r\n *\r\n * Handles\r\n * - start and end dates\r\n * - accepting investments\r\n * - minimum funding goal and refund\r\n * - various statistics during the crowdfund\r\n * - different pricing strategies\r\n * - different investment policies (require server side customer id, allow only whitelisted addresses)\r\n *\r\n */\r\ncontract Crowdsale is Haltable {\r\n\r\n  using SafeMath for uint;\r\n\r\n  /* The token we are selling */\r\n  CrowdsaleToken public token;\r\n\r\n  /* How we are going to price our offering */\r\n  PricingStrategy public pricingStrategy;\r\n\r\n  /* How we are going to limit our offering */\r\n  CeilingStrategy public ceilingStrategy;\r\n\r\n  /* Post-success callback */\r\n  FinalizeAgent public finalizeAgent;\r\n\r\n  /* ether will be transferred to this address */\r\n  address public multisigWallet;\r\n\r\n  /* if the funding goal is not reached, investors may withdraw their funds */\r\n  uint public minimumFundingGoal;\r\n\r\n  /* the funding cannot exceed this cap; may be set later on during the crowdsale */\r\n  uint public weiFundingCap = 0;\r\n\r\n  /* the starting block number of the crowdsale */\r\n  uint public startsAt;\r\n\r\n  /* the ending block number of the crowdsale */\r\n  uint public endsAt;\r\n\r\n  /* the number of tokens already sold through this contract*/\r\n  uint public tokensSold = 0;\r\n\r\n  /* How many wei of funding we have raised */\r\n  uint public weiRaised = 0;\r\n\r\n  /* How many distinct addresses have invested */\r\n  uint public investorCount = 0;\r\n\r\n  /* How many wei we have returned back to the contract after a failed crowdfund. */\r\n  uint public loadedRefund = 0;\r\n\r\n  /* How many wei we have given back to investors.*/\r\n  uint public weiRefunded = 0;\r\n\r\n  /* Has this crowdsale been finalized */\r\n  bool public finalized;\r\n\r\n  /* Do we need to have a unique contributor id for each customer */\r\n  bool public requireCustomerId;\r\n\r\n  /** How many ETH each address has invested in this crowdsale */\r\n  mapping (address => uint) public investedAmountOf;\r\n\r\n  /** How many tokens this crowdsale has credited for each investor address */\r\n  mapping (address => uint) public tokenAmountOf;\r\n\r\n  /** Addresses that are allowed to invest even before ICO offical opens. For testing, for ICO partners, etc. */\r\n  mapping (address => bool) public earlyParticipantWhitelist;\r\n\r\n  /** This is for manual testing of the interaction with the owner's wallet. You can set it to any value and inspect this in a blockchain explorer to see that crowdsale interaction works. */\r\n  uint8 public ownerTestValue;\r\n\r\n  /** State machine\r\n   *\r\n   * - Prefunding: We have not reached the starting block yet\r\n   * - Funding: Active crowdsale\r\n   * - Success: Minimum funding goal reached\r\n   * - Failure: Minimum funding goal not reached before the ending block\r\n   * - Finalized: The finalize function has been called and succesfully executed\r\n   * - Refunding: Refunds are loaded on the contract to be reclaimed by investors.\r\n   */\r\n  enum State{Unknown, PreFunding, Funding, Success, Failure, Finalized, Refunding}\r\n\r\n\r\n  // A new investment was made\r\n  event Invested(address investor, uint weiAmount, uint tokenAmount, uint128 customerId);\r\n\r\n  // Refund was processed for a contributor\r\n  event Refund(address investor, uint weiAmount);\r\n\r\n  // The rules about what kind of investments we accept were changed\r\n  event InvestmentPolicyChanged(bool requireCId);\r\n\r\n  // Address early participation whitelist status changed\r\n  event Whitelisted(address addr, bool status);\r\n\r\n  // Crowdsale's finalize function has been called\r\n  event Finalized();\r\n\r\n  // A new funding cap has been set\r\n  event FundingCapSet(uint newFundingCap);\r\n\r\n  function Crowdsale(address _multisigWallet, uint _start, uint _end, uint _minimumFundingGoal) internal {\r\n    setMultisig(_multisigWallet);\r\n\r\n    // Don't mess the dates\r\n    require(_start != 0 && _end != 0);\r\n    require(block.number < _start && _start < _end);\r\n    startsAt = _start;\r\n    endsAt = _end;\r\n\r\n    // Minimum funding goal can be zero\r\n    minimumFundingGoal = _minimumFundingGoal;\r\n  }\r\n\r\n  /**\r\n   * Don't expect to just send in money and get tokens.\r\n   */\r\n  function() payable {\r\n    require(false);\r\n  }\r\n\r\n  /**\r\n   * Make an investment.\r\n   *\r\n   * Crowdsale must be running for one to invest.\r\n   * We must have not pressed the emergency brake.\r\n   *\r\n   * @param receiver The Ethereum address who receives the tokens\r\n   * @param customerId (optional) UUID v4 to track the successful payments on the server side\r\n   *\r\n   */\r\n  function investInternal(address receiver, uint128 customerId) stopInEmergency notFinished private {\r\n    // Determine if it's a good time to accept investment from this participant\r\n    if (getState() == State.PreFunding) {\r\n      // Are we whitelisted for early deposit\r\n      require(earlyParticipantWhitelist[receiver]);\r\n    }\r\n\r\n    uint weiAmount = ceilingStrategy.weiAllowedToReceive(msg.value, weiRaised, investedAmountOf[receiver], weiFundingCap);\r\n    uint tokenAmount = pricingStrategy.calculatePrice(weiAmount, weiRaised, tokensSold, msg.sender, token.decimals());\r\n    \r\n    // Dust transaction if no tokens can be given\r\n    require(tokenAmount != 0);\r\n\r\n    if (investedAmountOf[receiver] == 0) {\r\n      // A new investor\r\n      investorCount++;\r\n    }\r\n    updateInvestorFunds(tokenAmount, weiAmount, receiver, customerId);\r\n\r\n    // Pocket the money\r\n    multisigWallet.transfer(weiAmount);\r\n\r\n    // Return excess of money\r\n    uint weiToReturn = msg.value.sub(weiAmount);\r\n    if (weiToReturn > 0) {\r\n      msg.sender.transfer(weiToReturn);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Preallocate tokens for the early investors.\r\n   *\r\n   * Preallocated tokens have been sold before the actual crowdsale opens.\r\n   * This function mints the tokens and moves the crowdsale needle.\r\n   *\r\n   * No money is exchanged, as the crowdsale team already have received the payment.\r\n   *\r\n   * @param fullTokens tokens as full tokens - decimal places added internally\r\n   * @param weiPrice Price of a single full token in wei\r\n   *\r\n   */\r\n  function preallocate(address receiver, uint fullTokens, uint weiPrice) public onlyOwner notFinished {\r\n    require(receiver != address(0));\r\n    uint tokenAmount = fullTokens.mul(10**uint(token.decimals()));\r\n    require(tokenAmount != 0);\r\n    uint weiAmount = weiPrice.mul(tokenAmount); // This can also be 0, in which case we give out tokens for free\r\n    updateInvestorFunds(tokenAmount, weiAmount, receiver , 0);\r\n  }\r\n\r\n  /**\r\n   * Private function to update accounting in the crowdsale.\r\n   */\r\n  function updateInvestorFunds(uint tokenAmount, uint weiAmount, address receiver, uint128 customerId) private {\r\n    // Update investor\r\n    investedAmountOf[receiver] = investedAmountOf[receiver].add(weiAmount);\r\n    tokenAmountOf[receiver] = tokenAmountOf[receiver].add(tokenAmount);\r\n\r\n    // Update totals\r\n    weiRaised = weiRaised.add(weiAmount);\r\n    tokensSold = tokensSold.add(tokenAmount);\r\n\r\n    assignTokens(receiver, tokenAmount);\r\n    // Tell us that the investment was completed successfully\r\n    Invested(receiver, weiAmount, tokenAmount, customerId);\r\n  }\r\n\r\n\r\n  /**\r\n   * Allow the owner to set a funding cap on the crowdsale.\r\n   * The new cap should be higher than the minimum funding goal.\r\n   * \r\n   * @param newCap minimum target cap that may be relaxed if it was already broken.\r\n   */\r\n  function setFundingCap(uint newCap) public onlyOwner notFinished {\r\n    weiFundingCap = ceilingStrategy.relaxFundingCap(newCap, weiRaised);\r\n    require(weiFundingCap >= minimumFundingGoal);\r\n    FundingCapSet(weiFundingCap);\r\n  }\r\n\r\n  /**\r\n   * Invest to tokens, recognize the payer.\r\n   *\r\n   */\r\n  function buyWithCustomerId(uint128 customerId) public payable {\r\n    require(customerId != 0);  // UUIDv4 sanity check\r\n    investInternal(msg.sender, customerId);\r\n  }\r\n\r\n  /**\r\n   * The basic entry point to participate in the crowdsale process.\r\n   *\r\n   * Pay for funding, get invested tokens back in the sender address.\r\n   */\r\n  function buy() public payable {\r\n    require(!requireCustomerId); // Crowdsale needs to track participants for thank you email\r\n    investInternal(msg.sender, 0);\r\n  }\r\n\r\n  /**\r\n   * Finalize a succcesful crowdsale.\r\n   *\r\n   * The owner can trigger a call the contract that provides post-crowdsale actions, like releasing the tokens.\r\n   */\r\n  function finalize() public inState(State.Success) onlyOwner stopInEmergency {\r\n    finalizeAgent.finalizeCrowdsale(token);\r\n    finalized = true;\r\n    Finalized();\r\n  }\r\n\r\n  /**\r\n   * Set policy do we need to have server-side customer ids for the investments.\r\n   *\r\n   */\r\n  function setRequireCustomerId(bool value) public onlyOwner stopInEmergency {\r\n    requireCustomerId = value;\r\n    InvestmentPolicyChanged(requireCustomerId);\r\n  }\r\n\r\n  /**\r\n   * Allow addresses to do early participation.\r\n   *\r\n   */\r\n  function setEarlyParticipantWhitelist(address addr, bool status) public onlyOwner notFinished stopInEmergency {\r\n    earlyParticipantWhitelist[addr] = status;\r\n    Whitelisted(addr, status);\r\n  }\r\n\r\n  /**\r\n   * Allow to (re)set pricing strategy.\r\n   */\r\n  function setPricingStrategy(PricingStrategy addr) internal {\r\n    // Disallow setting a bad agent\r\n    require(addr.isPricingStrategy());\r\n    pricingStrategy = addr;\r\n  }\r\n\r\n  /**\r\n   * Allow to (re)set ceiling strategy.\r\n   */\r\n  function setCeilingStrategy(CeilingStrategy addr) internal {\r\n    // Disallow setting a bad agent\r\n    require(addr.isCeilingStrategy());\r\n    ceilingStrategy = addr;\r\n  }\r\n\r\n  /**\r\n   * Allow to (re)set finalize agent.\r\n   */\r\n  function setFinalizeAgent(FinalizeAgent addr) internal {\r\n    // Disallow setting a bad agent\r\n    require(addr.isFinalizeAgent());\r\n    finalizeAgent = addr;\r\n    require(isFinalizerSane());\r\n  }\r\n\r\n  /**\r\n   * Internal setter for the multisig wallet\r\n   */\r\n  function setMultisig(address addr) internal {\r\n    require(addr != 0);\r\n    multisigWallet = addr;\r\n  }\r\n\r\n  /**\r\n   * Allow load refunds back on the contract for the refunding.\r\n   *\r\n   * The team can transfer the funds back on the smart contract in the case that the minimum goal was not reached.\r\n   */\r\n  function loadRefund() public payable inState(State.Failure) stopInEmergency {\r\n    require(msg.value >= weiRaised);\r\n    require(weiRefunded == 0);\r\n    uint excedent = msg.value.sub(weiRaised);\r\n    loadedRefund = loadedRefund.add(msg.value.sub(excedent));\r\n    investedAmountOf[msg.sender].add(excedent);\r\n  }\r\n\r\n  /**\r\n   * Investors can claim refund.\r\n   */\r\n  function refund() public inState(State.Refunding) stopInEmergency {\r\n    uint weiValue = investedAmountOf[msg.sender];\r\n    require(weiValue != 0);\r\n    investedAmountOf[msg.sender] = 0;\r\n    weiRefunded = weiRefunded.add(weiValue);\r\n    Refund(msg.sender, weiValue);\r\n    msg.sender.transfer(weiValue);\r\n  }\r\n\r\n  /**\r\n   * @return true if the crowdsale has raised enough money to be a success\r\n   */\r\n  function isMinimumGoalReached() public constant returns (bool reached) {\r\n    return weiRaised >= minimumFundingGoal;\r\n  }\r\n\r\n  /**\r\n   * Check if the contract relationship looks good.\r\n   */\r\n  function isFinalizerSane() public constant returns (bool sane) {\r\n    return finalizeAgent.isSane(token);\r\n  }\r\n\r\n  /**\r\n   * Crowdfund state machine management.\r\n   *\r\n   * This function has the timed transition builtin.\r\n   * So there is no chance of the variable being stale.\r\n   */\r\n  function getState() public constant returns (State) {\r\n    if (finalized) return State.Finalized;\r\n    else if (block.number < startsAt) return State.PreFunding;\r\n    else if (block.number <= endsAt && !ceilingStrategy.isCrowdsaleFull(weiRaised, weiFundingCap)) return State.Funding;\r\n    else if (isMinimumGoalReached()) return State.Success;\r\n    else if (!isMinimumGoalReached() && weiRaised > 0 && loadedRefund >= weiRaised) return State.Refunding;\r\n    else return State.Failure;\r\n  }\r\n\r\n  /** This is for manual testing of multisig wallet interaction */\r\n  function setOwnerTestValue(uint8 val) public onlyOwner stopInEmergency {\r\n    ownerTestValue = val;\r\n  }\r\n\r\n  function assignTokens(address receiver, uint tokenAmount) private {\r\n    token.mint(receiver, tokenAmount);\r\n  }\r\n\r\n  /** Interface marker. */\r\n  function isCrowdsale() public constant returns (bool) {\r\n    return true;\r\n  }\r\n\r\n  //\r\n  // Modifiers\r\n  //\r\n\r\n  /** Modifier allowing execution only if the crowdsale is currently running.  */\r\n  modifier inState(State state) {\r\n    require(getState() == state);\r\n    _;\r\n  }\r\n\r\n  modifier notFinished() {\r\n    State current_state = getState();\r\n    require(current_state == State.PreFunding || current_state == State.Funding);\r\n    _;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * Interface for defining crowdsale pricing.\r\n */\r\ncontract PricingStrategy {\r\n\r\n  /** Interface declaration. */\r\n  function isPricingStrategy() public constant returns (bool) {\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * When somebody tries to buy tokens for X eth, calculate how many tokens they get.\r\n   *\r\n   *\r\n   * @param value - What is the value of the transaction sent in as wei\r\n   * @param weiRaised - how much money has been raised this far\r\n   * @param tokensSold - how many tokens have been sold this far\r\n   * @param msgSender - who is the investor of this transaction\r\n   * @param decimals - how many decimal units the token has\r\n   * @return Amount of tokens the investor receives\r\n   */\r\n  function calculatePrice(uint value, uint weiRaised, uint tokensSold, address msgSender, uint decimals) public constant returns (uint tokenAmount);\r\n}\r\n\r\n/**\r\n * Fixed crowdsale pricing - everybody gets the same price.\r\n */\r\ncontract FlatPricing is PricingStrategy {\r\n\r\n  using SafeMath for uint;\r\n\r\n  /* How many weis one token costs */\r\n  uint public oneTokenInWei;\r\n\r\n  function FlatPricing(uint _oneTokenInWei) {\r\n    oneTokenInWei = _oneTokenInWei;\r\n  }\r\n\r\n  /**\r\n   * Calculate the current price for buy in amount.\r\n   *\r\n   * @ param  {uint value} Buy-in value in wei.\r\n   * @ param\r\n   * @ param\r\n   * @ param\r\n   * @ param  {uint decimals} The decimals used by the token representation (e.g. given by FractionalERC20).\r\n   */\r\n  function calculatePrice(uint value, uint, uint, address, uint decimals) public constant returns (uint) {\r\n    uint multiplier = 10 ** decimals;\r\n    return value.mul(multiplier).div(oneTokenInWei);\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * Interface for defining crowdsale ceiling.\r\n */\r\ncontract CeilingStrategy {\r\n\r\n  /** Interface declaration. */\r\n  function isCeilingStrategy() public constant returns (bool) {\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * When somebody tries to buy tokens for X wei, calculate how many weis they are allowed to use.\r\n   *\r\n   *\r\n   * @param _value - What is the value of the transaction sent in as wei.\r\n   * @param _weiRaised - How much money has been raised so far.\r\n   * @param _weiInvestedBySender - the investment made by the address that is sending the transaction.\r\n   * @param _weiFundingCap - the caller's declared total cap. May be reinterpreted by the implementation of the CeilingStrategy.\r\n   * @return Amount of wei the crowdsale can receive.\r\n   */\r\n  function weiAllowedToReceive(uint _value, uint _weiRaised, uint _weiInvestedBySender, uint _weiFundingCap) public constant returns (uint amount);\r\n\r\n  function isCrowdsaleFull(uint _weiRaised, uint _weiFundingCap) public constant returns (bool);\r\n\r\n  /**\r\n   * Calculate a new cap if the provided one is not above the amount already raised.\r\n   *\r\n   *\r\n   * @param _newCap - The potential new cap.\r\n   * @param _weiRaised - How much money has been raised so far.\r\n   * @return The adjusted cap.\r\n   */\r\n  function relaxFundingCap(uint _newCap, uint _weiRaised) public constant returns (uint);\r\n\r\n}\r\n\r\n/**\r\n * Fixed cap investment per address and crowdsale\r\n */\r\ncontract FixedCeiling is CeilingStrategy {\r\n    using SafeMath for uint;\r\n\r\n    /* When relaxing a cap is necessary, we use this multiple to determine the relaxed cap */\r\n    uint public chunkedWeiMultiple;\r\n    /* The limit an individual address can invest */\r\n    uint public weiLimitPerAddress;\r\n\r\n    function FixedCeiling(uint multiple, uint limit) {\r\n        chunkedWeiMultiple = multiple;\r\n        weiLimitPerAddress = limit;\r\n    }\r\n\r\n    function weiAllowedToReceive(uint tentativeAmount, uint weiRaised, uint weiInvestedBySender, uint weiFundingCap) public constant returns (uint) {\r\n        // First, we limit per address investment\r\n        uint totalOfSender = tentativeAmount.add(weiInvestedBySender);\r\n        if (totalOfSender > weiLimitPerAddress) tentativeAmount = weiLimitPerAddress.sub(weiInvestedBySender);\r\n        // Then, we check the funding cap\r\n        if (weiFundingCap == 0) return tentativeAmount;\r\n        uint total = tentativeAmount.add(weiRaised);\r\n        if (total < weiFundingCap) return tentativeAmount;\r\n        else return weiFundingCap.sub(weiRaised);\r\n    }\r\n\r\n    function isCrowdsaleFull(uint weiRaised, uint weiFundingCap) public constant returns (bool) {\r\n        return weiFundingCap > 0 && weiRaised >= weiFundingCap;\r\n    }\r\n\r\n    /* If the new target cap has not been reached yet, it's fine as it is */\r\n    function relaxFundingCap(uint newCap, uint weiRaised) public constant returns (uint) {\r\n        if (newCap > weiRaised) return newCap;\r\n        else return weiRaised.div(chunkedWeiMultiple).add(1).mul(chunkedWeiMultiple);\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * Finalize agent defines what happens at the end of a succesful crowdsale.\r\n *\r\n * - Allocate tokens for founders, bounties and community\r\n * - Make tokens transferable\r\n * - etc.\r\n */\r\ncontract FinalizeAgent {\r\n\r\n  function isFinalizeAgent() public constant returns(bool) {\r\n    return true;\r\n  }\r\n\r\n  /** Return true if we can run finalizeCrowdsale() properly.\r\n   *\r\n   * This is a safety check function that doesn't allow crowdsale to begin\r\n   * unless the finalizer has been set up properly.\r\n   */\r\n  function isSane(CrowdsaleToken token) public constant returns (bool);\r\n\r\n  /** Called once by crowdsale finalize() if the sale was a success. */\r\n  function finalizeCrowdsale(CrowdsaleToken token) public;\r\n\r\n}\r\n\r\n/**\r\n * At the end of the successful crowdsale allocate % bonus of tokens to the team.\r\n *\r\n * Unlock tokens.\r\n *\r\n * BonusAllocationFinal must be set as the minting agent for the MintableToken.\r\n *\r\n */\r\ncontract BonusFinalizeAgent is FinalizeAgent {\r\n\r\n  using SafeMath for uint;\r\n\r\n  Crowdsale public crowdsale;\r\n\r\n  /** Total percent of tokens minted to the team at the end of the sale as base points\r\n  bonus tokens = tokensSold * bonusBasePoints * 0.0001         */\r\n  uint public bonusBasePoints;\r\n\r\n  /** Implementation detail. This is the divisor of the base points **/\r\n  uint private constant basePointsDivisor = 10000;\r\n\r\n  /** Where we move the tokens at the end of the sale. */\r\n  address public teamMultisig;\r\n\r\n  /* How many bonus tokens we allocated */\r\n  uint public allocatedBonus;\r\n\r\n  function BonusFinalizeAgent(Crowdsale _crowdsale, uint _bonusBasePoints, address _teamMultisig) {\r\n    require(address(_crowdsale) != 0 && address(_teamMultisig) != 0);\r\n    crowdsale = _crowdsale;\r\n    teamMultisig = _teamMultisig;\r\n    bonusBasePoints = _bonusBasePoints;\r\n  }\r\n\r\n  /* Can we run finalize properly */\r\n  function isSane(CrowdsaleToken token) public constant returns (bool) {\r\n    return token.mintAgents(address(this)) && token.releaseAgent() == address(this);\r\n  }\r\n\r\n  /** Called once by crowdsale finalize() if the sale was a success. */\r\n  function finalizeCrowdsale(CrowdsaleToken token) {\r\n    require(msg.sender == address(crowdsale));\r\n\r\n    // How many % points of tokens the founders and others get\r\n    uint tokensSold = crowdsale.tokensSold();\r\n    uint saleBasePoints = basePointsDivisor.sub(bonusBasePoints);\r\n    allocatedBonus = tokensSold.mul(bonusBasePoints).div(saleBasePoints);\r\n\r\n    // Move tokens to the team multisig wallet\r\n    token.mint(teamMultisig, allocatedBonus);\r\n\r\n    // Make token transferable\r\n    token.releaseTokenTransfer();\r\n  }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"finalizeCrowdsale\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isFinalizeAgent\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allocatedBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusBasePoints\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"isSane\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsale\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamMultisig\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_crowdsale\",\"type\":\"address\"},{\"name\":\"_bonusBasePoints\",\"type\":\"uint256\"},{\"name\":\"_teamMultisig\",\"type\":\"address\"}],\"payable\":false,\"type\":\"constructor\"}]","ContractName":"BonusFinalizeAgent","CompilerVersion":"v0.4.13+commit.fb4cb1a","OptimizationUsed":"1","Runs":"0","ConstructorArguments":"000000000000000000000000B9aac097F4DADcD6F06761EB470346415eF28D5A0000000000000000000000000000000000000000000000000000000000000BB8000000000000000000000000800E1Dcc20D95e60fF8B3106e6EaA1cB73D5D16f","Library":"","SwarmSource":"bzzr://8c3e8aafa45fe0ec40295a985ca9c7030124689ff513961d3cb9ef0f75e44d06"}]}