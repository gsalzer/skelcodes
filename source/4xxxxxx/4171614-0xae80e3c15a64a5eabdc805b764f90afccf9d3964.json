{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.15;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Ownable {\r\n\r\n    address public contractOwner;\r\n    \r\n    event OwnershipTransfer(address _from, address _to);\r\n\r\n    modifier onlyOwner(){\r\n        require(msg.sender == contractOwner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) onlyOwner {\r\n        address oldOwner = contractOwner;\r\n        contractOwner = newOwner;\r\n        OwnershipTransfer(oldOwner,newOwner);\r\n    }\r\n}\r\n\r\ncontract Claimable is Ownable {\r\n\r\n    address public pendingOwner;\r\n\r\n    event PendingOwnershipTransfer(address _from, address _to);\r\n\r\n    modifier onlyPendingOwner(){\r\n        require(msg.sender == pendingOwner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) onlyOwner {\r\n        pendingOwner = newOwner;\r\n        PendingOwnershipTransfer(contractOwner,pendingOwner);\r\n    }\r\n\r\n    function claimOwnership() onlyPendingOwner {\r\n        address oldOwner = contractOwner;\r\n        contractOwner = pendingOwner;\r\n        pendingOwner = 0x0;\r\n        OwnershipTransfer(oldOwner,contractOwner);\r\n    }\r\n\r\n}\r\n\r\ncontract ERC20Basic {\r\n\r\n    uint256 public totalSupply;\r\n\r\n    function balanceOf(address _owner) constant returns (uint256 balance);\r\n    function transfer(address _to, uint256 amount) returns (bool result);\r\n\r\n    event Transfer(address _from, address _to, uint256 amount);\r\n}\r\n\r\ncontract TrueVeganCoin is ERC20Basic {\r\n\r\n    string public tokenName = \"True Vegan Coin\";  \r\n    string public tokenSymbol = \"TVC\"; \r\n\r\n    uint256 public constant decimals = 18;\r\n\r\n    mapping(address => uint256) balances;\r\n\r\n    function TrueVeganCoin() {\r\n        totalSupply = 55 * (10**6) * 10**decimals; // 55 millions\r\n        balances[msg.sender] += totalSupply;\r\n    }\r\n\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function transfer(address _to, uint256 amount) returns (bool result) {\r\n        require(amount > 0);\r\n        require(balances[msg.sender] >= amount);\r\n        balances[msg.sender] -= amount;\r\n        balances[_to] += amount;\r\n        Transfer(msg.sender, _to, amount);\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract TrueVeganCoinPresale is Claimable {\r\n    using SafeMath for uint256;\r\n\r\n    address public tvcEthFund = 0xeD89922D1Fe9e5ad9B997Ef315a4A14ba7b090CD;\r\n\r\n    TrueVeganCoin public tvc = TrueVeganCoin(0xC645AEAAa073D73254a49156E69B3E16bb3A25e4);\r\n\r\n    uint256 public totalTokenSupply = 55 * 10**6 * 10**tvc.decimals(); \r\n    uint256 public currentTokenSupply = totalTokenSupply;\r\n\r\n    uint256 public tokenExchangeRate = 1300; // token per eth\r\n\r\n    uint256 public saleStartUnixTime = 1503100799; // Friday, 18-Aug-17 23:59:59 UTC\r\n    uint256 public saleEndUnixTime = 1506816001; // Sunday, 01-Oct-17 00:00:01 UTC\r\n\r\n    bool public saleIsClosed = false;\r\n\r\n    event PresaleEntry(address buyer, uint256 tokens);\r\n    event PresaleClosed(uint256 soldTokens, uint256 amountRaised);\r\n\r\n    function TrueVeganCoinPresale() {\r\n        contractOwner = msg.sender;\r\n    }\r\n\r\n    function () payable {\r\n        assert(block.timestamp >= saleStartUnixTime);\r\n        assert(block.timestamp < saleEndUnixTime);\r\n        require(msg.value > 0);\r\n        require(!saleIsClosed);\r\n\r\n        uint256 tokens = msg.value.mul(tokenExchangeRate);\r\n\r\n        assert(currentTokenSupply - tokens >= 0);\r\n        currentTokenSupply -= tokens;\r\n\r\n        if (!tvc.transfer(msg.sender,tokens)) {\r\n            revert();\r\n        }\r\n\r\n        PresaleEntry(msg.sender,tokens);\r\n    }\r\n\r\n    function endSale() onlyOwner {\r\n        assert(block.timestamp > saleEndUnixTime || currentTokenSupply == 0);\r\n        assert(!saleIsClosed);\r\n\r\n        saleIsClosed = true;\r\n        uint256 amountRaised = this.balance;\r\n        uint256 tokenSold = totalTokenSupply - currentTokenSupply;\r\n\r\n        if (!tvcEthFund.send(amountRaised)) {\r\n            revert();\r\n        }\r\n        PresaleClosed(tokenSold, amountRaised);\r\n    }\r\n\r\n\r\n    function claimUnsoldCoins() onlyOwner {\r\n        assert(block.timestamp > saleEndUnixTime);\r\n        assert(saleIsClosed);\r\n        uint256 amount = currentTokenSupply;\r\n        currentTokenSupply = 0;\r\n        // send eventually unsold tokens to contract owner\r\n        if (!tvc.transfer(contractOwner,amount)) {\r\n            revert();\r\n        }\r\n    }\r\n    \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"saleIsClosed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimUnsoldCoins\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalTokenSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleStartUnixTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tvcEthFund\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"endSale\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenExchangeRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleEndUnixTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentTokenSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tvc\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"PresaleEntry\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"soldTokens\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amountRaised\",\"type\":\"uint256\"}],\"name\":\"PresaleClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"PendingOwnershipTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransfer\",\"type\":\"event\"}]","ContractName":"TrueVeganCoinPresale","CompilerVersion":"v0.4.15+commit.bbb8e64f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://f538e0f61bec643eacf9692117c4d1c09d63ee0276db6b98aca76b9705dc83c5"}]}