{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13;\r\n\r\n/*\r\n\r\nMonetha Buyer Withdraw Helper Contract\r\n=======================================\r\n\r\nWithdraws your allotment of Monetha (MTH) tokens from the Monetha Buyer contract\r\nAuthor: /u/troythus (aka @troyth)\r\n\r\nNote that the Monetha tokens will not be available until after Sept 5, 2017 at 2pm UTC\r\nAny attempts to send ETH to this contract in advance of this time will forfeit that ETH\r\n\r\n*/\r\n\r\n\r\ncontract MBInterface {\r\n    // interface to list of balances by investor wallet address\r\n    // solidity compiler automatically generates getter function for public vars\r\n    function balances(address user) returns (uint256 balance);\r\n    // interface to the withdraw function\r\n    function withdraw(address user);\r\n}\r\n\r\n\r\ncontract MonethaBuyerWithdrawHelper{\r\n    // utility contract developer address\r\n    address public owner = 0x570dccd747758603612E79B270E8beD38f935503;\r\n    // address of original Monetha Buyer contract created by cintix\r\n    address MonethaBuyerAddr = 0x820b5D21D1b1125B1aaD51951F6e032A07CaEC65;\r\n    // dynamically calculated minimum fee of 1% to trigger withdraw function on MonethaBuyer contract\r\n    uint256 min_fee;\r\n\r\n    // store the amount of ETH donated by supporters\r\n    mapping (address => uint256) public supporterBalances;\r\n\r\n    // constructor\r\n    function WithdrawMonethaBuyerUtility(){\r\n    }\r\n\r\n    // transfers ETH held by the contract to the owner\r\n    function claim () returns (bool success){\r\n        require(msg.sender == owner);\r\n        if(msg.sender == owner){\r\n            owner.transfer(this.balance);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    // receives donations in ETH\r\n    function donate() payable {\r\n        //receives donations, logs address of donator and amount given\r\n        supporterBalances[msg.sender] += msg.value;\r\n    }\r\n\r\n    // default function called when someone sends ETH to this contract\r\n    // triggers the withdraw function on MonethaBuyer contract with their address\r\n    function () payable {\r\n        // set up interface to Monetha Buyer contract\r\n        MBInterface MB = MBInterface(MonethaBuyerAddr);\r\n\r\n        // make sure wallet has not already been withdrawn and did investe in Monetha Buyer\r\n        if(MB.balances(msg.sender) != 0){\r\n            // determine minimum fee as 1% of investment in ETH\r\n            min_fee = MB.balances(msg.sender) / 100;\r\n\r\n            // cap to 3 ETH\r\n            if(min_fee > 3000000000000000000){\r\n                min_fee = 3000000000000000000;\r\n            }\r\n\r\n            // if min fee sent, call the withdraw function on MonethaBuyer\r\n            if(msg.value >= min_fee){\r\n                MB.withdraw( msg.sender );\r\n            }\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"WithdrawMonethaBuyerUtility\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claim\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"supporterBalances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"donate\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"MonethaBuyerWithdrawHelper","CompilerVersion":"v0.4.16+commit.d7661dd9","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://7dd385b7243f12e28a1c67bc9361a13498bcffb67128a9eb18b35997be632aeb"}]}