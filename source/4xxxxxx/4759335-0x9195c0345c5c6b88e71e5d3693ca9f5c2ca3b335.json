{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13;\r\n\r\ncontract Privileges {\r\n    // A person who owns the contract\r\n    address public owner;\r\n    // A person who can update the CENT price\r\n    address public trusted;\r\n\r\n    function Privileges() public payable {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function setTrusted(address addr) onlyOwner public {\r\n        trusted = addr;\r\n    }\r\n\r\n    function setNewOwner(address newOwner) onlyOwner public {\r\n        owner = newOwner;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    modifier onlyTrusted {\r\n        require(msg.sender == trusted || msg.sender == owner);\r\n        _;\r\n    }\r\n}\r\n\r\ncontract SafeMath {\r\n    function safeAdd(uint x, uint y) internal pure returns (uint) {\r\n        uint256 z = x + y;\r\n        assert((z >= x) && (z >= y));\r\n        return z;\r\n    }\r\n\r\n    function safeSub(uint x, uint y) internal pure returns (uint) {\r\n        assert(x >= y);\r\n        uint256 z = x - y;\r\n        return z;\r\n    }\r\n\r\n    function safeMul(uint x, uint y) internal pure returns (uint) {\r\n        uint256 z = x * y;\r\n        assert((x == 0)||(z/x == y));\r\n        return z;\r\n    }\r\n\r\n    function safeDiv(uint a, uint b) internal pure returns (uint) {\r\n        uint c = a / b;\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract Presale {\r\n\r\n    uint numberOfPurchasers = 0;\r\n\r\n    mapping (uint => address) presaleAddresses;\r\n    mapping (address => uint) tokensToSend;\r\n\r\n    function Presale() public {\r\n        addPurchaser(0x41c8f018d10f500d231f723017389da5FF9F45F2, 191625 * ((1 ether / 1 wei) / 10));      \r\n    }\r\n\r\n    function addPurchaser(address addr, uint tokens) private {\r\n        presaleAddresses[numberOfPurchasers] = addr;\r\n        tokensToSend[addr] = tokens;\r\n        numberOfPurchasers++;\r\n    }\r\n\r\n}\r\n\r\ncontract Casper is SafeMath, Privileges, Presale {    \r\n\r\n    string public constant NAME = \"Casper Pre-ICO Token\";\r\n    string public constant SYMBOL = \"CSPT\";\r\n    uint public constant DECIMALS = 18;\r\n\r\n    uint public constant MIN_PRICE = 750; // 600USD per Ether\r\n    uint public constant MAX_PRICE = 1250; // 1000USD per Ether\r\n    uint public price = 1040;  // 832USD per Ehter\r\n    uint public totalSupply = 0;\r\n\r\n    // PreICO hard cap\r\n    uint public constant TOKEN_SUPPLY_LIMIT = 1300000 * (1 ether / 1 wei); // 1 300 000 CSPT\r\n\r\n    // PreICO timings\r\n    uint public beginTime;\r\n    uint public endTime;\r\n\r\n    uint public index = 0;\r\n\r\n    bool sendPresale = true;\r\n\r\n    mapping (address => uint) balances;\r\n    mapping (uint => address) participants;\r\n\r\n\r\n    function Casper() Privileges() public {\r\n        beginTime = now;\r\n        endTime = now + 2 weeks;\r\n    }\r\n\r\n    function() payable public {\r\n        require (now < endTime);\r\n        require (totalSupply < TOKEN_SUPPLY_LIMIT);\r\n        uint newTokens = msg.value * price;\r\n        if (newTokens + totalSupply <= TOKEN_SUPPLY_LIMIT) {\r\n            balances[msg.sender] = safeAdd(balances[msg.sender], newTokens);\r\n            totalSupply = safeAdd(totalSupply, newTokens);    \r\n        } else {\r\n            uint tokens = safeSub(TOKEN_SUPPLY_LIMIT, totalSupply); \r\n            balances[msg.sender] = safeAdd(balances[msg.sender], tokens);\r\n            totalSupply = TOKEN_SUPPLY_LIMIT;\r\n        }\r\n        addParicipant(msg.sender);\r\n    }\r\n\r\n    function balanceOf(address addr) public constant returns (uint) {\r\n        return balances[addr];\r\n    }\r\n\r\n    function setPrice(uint newPrice) onlyTrusted public {\r\n        require (newPrice > MIN_PRICE && newPrice < MAX_PRICE);\r\n        price = newPrice;\r\n    }\r\n\r\n    function sendPresaleTokens() onlyOwner public {\r\n        require(sendPresale);\r\n        for (uint i = 0; i < numberOfPurchasers; i++) {\r\n            address addr = presaleAddresses[i];\r\n            uint tokens = tokensToSend[addr];\r\n            balances[addr] = tokens;\r\n            totalSupply = safeAdd(totalSupply, tokens);  \r\n        }\r\n        index = safeAdd(index, numberOfPurchasers);\r\n        sendPresale = false;\r\n    }\r\n\r\n    function withdrawEther(uint eth) onlyOwner public {\r\n        owner.transfer(eth);\r\n    }\r\n\r\n    function addParicipant(address addr) private {\r\n        participants[index] = addr;\r\n        index++;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"MAX_PRICE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setTrusted\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN_SUPPLY_LIMIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"index\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DECIMALS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"withdrawEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"sendPresaleTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"trusted\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beginTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MIN_PRICE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"setNewOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SYMBOL\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"Casper","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://6e2c353c04478ebb8849f69f75ed61119560fe0e26a4e773c7c4e7c9da5d5f07"}]}