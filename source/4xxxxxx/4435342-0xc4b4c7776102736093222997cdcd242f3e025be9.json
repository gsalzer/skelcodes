{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.15;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\ncontract PreSaleToken {\r\n    using SafeMath for uint256;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    event AllowExchanger(address indexed exchanger);\r\n    event RevokeExchanger(address indexed exchanger);\r\n    event Mint(address indexed to, uint256 amount);\r\n    event MintFinished();\r\n    event Exchange(address indexed from, uint256 exchangedValue, string symbol, uint256 grantedValue);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /// The owner of the contract.\r\n    address public owner;\r\n\r\n    /// The total number of minted tokens, excluding destroyed tokens.\r\n    uint256 public totalSupply;\r\n\r\n    /// The token balance of each address.\r\n    mapping(address => uint256) balances;\r\n\r\n    /// The full list of addresses we have minted tokens for, stored for\r\n    /// exchange purposes.\r\n    address[] public holders;\r\n\r\n    /// Whether the token is still mintable.\r\n    bool public mintingFinished = false;\r\n\r\n    /// Addresses allowed to exchange the presale tokens for the final\r\n    /// and/or intermediary tokens.\r\n    mapping(address => bool) public exchangers;\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    modifier onlyExchanger() {\r\n        require(exchangers[msg.sender]);\r\n        _;\r\n    }\r\n\r\n    function PreSaleToken() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function allowExchanger(address _exchanger) onlyOwner public {\r\n        require(mintingFinished);\r\n        require(_exchanger != 0x0);\r\n        require(!exchangers[_exchanger]);\r\n\r\n        exchangers[_exchanger] = true;\r\n        AllowExchanger(_exchanger);\r\n    }\r\n\r\n    function exchange(\r\n        address _from,\r\n        uint256 _amount,\r\n        string _symbol,\r\n        uint256 _grantedValue\r\n    )\r\n        onlyExchanger\r\n        public\r\n        returns (bool)\r\n    {\r\n        require(mintingFinished); // Always true due to exchangers requiring the same condition\r\n        require(_from != 0x0);\r\n        require(!exchangers[_from]);\r\n        require(_amount > 0);\r\n        require(_amount <= balances[_from]);\r\n\r\n        balances[_from] = balances[_from].sub(_amount);\r\n        balances[msg.sender] = balances[msg.sender].add(_amount);\r\n        Exchange(\r\n            _from,\r\n            _amount,\r\n            _symbol,\r\n            _grantedValue\r\n        );\r\n        Transfer(_from, msg.sender, _amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    function finishMinting() onlyOwner public returns (bool) {\r\n        require(!mintingFinished);\r\n\r\n        mintingFinished = true;\r\n        MintFinished();\r\n\r\n        return true;\r\n    }\r\n\r\n    function mint(address _to, uint256 _amount) onlyOwner public returns (bool) {\r\n        require(_to != 0x0);\r\n        require(!mintingFinished);\r\n        require(_amount > 0);\r\n\r\n        totalSupply = totalSupply.add(_amount);\r\n        balances[_to] = balances[_to].add(_amount);\r\n        holders.push(_to);\r\n        Mint(_to, _amount);\r\n        Transfer(0x0, _to, _amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    function revokeExchanger(address _exchanger) onlyOwner public {\r\n        require(mintingFinished);\r\n        require(_exchanger != 0x0);\r\n        require(exchangers[_exchanger]);\r\n\r\n        delete exchangers[_exchanger];\r\n        RevokeExchanger(_exchanger);\r\n    }\r\n\r\n    function transferOwnership(address _to) onlyOwner public {\r\n        require(_to != address(0));\r\n        OwnershipTransferred(owner, _to);\r\n        owner = _to;\r\n    }\r\n\r\n    function balanceOf(address _owner) public constant returns (uint256) {\r\n        return balances[_owner];\r\n    }\r\n}\r\n\r\n\r\ncontract PreSale {\r\n    using SafeMath for uint256;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n    event Pause();\r\n    event Unpause();\r\n    event Withdrawal(address indexed wallet, uint256 weiAmount);\r\n    event Extended(uint256 until);\r\n    event Finalized();\r\n    event Refunding();\r\n    event Refunded(address indexed beneficiary, uint256 weiAmount);\r\n    event Whitelisted(address indexed participant, uint256 weiAmount);\r\n\r\n    /// The owner of the contract.\r\n    address public owner;\r\n\r\n    /// The token we're selling.\r\n    PreSaleToken public token;\r\n\r\n    /// The minimum goal to reach. If the goal is not reached, finishing\r\n    /// the sale will enable refunds.\r\n    uint256 public goal;\r\n\r\n    /// The sale period.\r\n    uint256 public startTime;\r\n    uint256 public endTime;\r\n    uint256 public timeExtension;\r\n\r\n    /// The numnber of tokens to mint per wei.\r\n    uint256 public rate;\r\n\r\n    /// The total number of wei raised. Note that the contract's balance may\r\n    /// differ from this value if someone has decided to forcefully send us\r\n    /// ether.\r\n    uint256 public weiRaised;\r\n\r\n    /// The wallet that will receive the contract's balance once the sale\r\n    /// finishes and the minimum goal is met.\r\n    address public wallet;\r\n\r\n    /// The list of addresses that are allowed to participate in the sale,\r\n    /// and up to what amount.\r\n    mapping(address => uint256) public whitelisted;\r\n\r\n    /// The amount of wei invested by each investor.\r\n    mapping(address => uint256) public deposited;\r\n\r\n    /// An enumerable list of investors.\r\n    address[] public investors;\r\n\r\n    /// Whether the sale is paused.\r\n    bool public paused = false;\r\n\r\n    /// Whether the sale has finished, and when.\r\n    bool public finished = false;\r\n    uint256 public finishedAt;\r\n\r\n    /// Whether we're accepting refunds.\r\n    bool public refunding = false;\r\n\r\n    /// The total number of wei refunded.\r\n    uint256 public weiRefunded;\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    modifier saleOpen() {\r\n        require(!finished);\r\n        require(!paused);\r\n        require(now >= startTime);\r\n        require(now <= endTime + timeExtension);\r\n        _;\r\n    }\r\n\r\n    function PreSale(\r\n        uint256 _goal,\r\n        uint256 _startTime,\r\n        uint256 _endTime,\r\n        uint256 _rate,\r\n        address _wallet\r\n    )\r\n        payable\r\n    {\r\n        require(msg.value > 0);\r\n        require(_goal > 0);\r\n        require(_startTime >= now);\r\n        require(_endTime >= _startTime);\r\n        require(_rate > 0);\r\n        require(_wallet != 0x0);\r\n\r\n        owner = msg.sender;\r\n        goal = _goal;\r\n        startTime = _startTime;\r\n        endTime = _endTime;\r\n        rate = _rate;\r\n        wallet = _wallet;\r\n        token = new PreSaleToken();\r\n\r\n        wallet.transfer(msg.value);\r\n    }\r\n\r\n    function () payable {\r\n        buyTokens(msg.sender);\r\n    }\r\n\r\n    function buyTokens(address _beneficiary) saleOpen public payable {\r\n        require(_beneficiary != address(0));\r\n        require(msg.value > 0);\r\n\r\n        uint256 weiAmount = msg.value;\r\n        uint256 newDeposited = deposited[_beneficiary].add(weiAmount);\r\n\r\n        require(newDeposited <= whitelisted[_beneficiary]);\r\n\r\n        uint256 tokens = weiAmount.mul(rate);\r\n\r\n        deposited[_beneficiary] = newDeposited;\r\n        investors.push(_beneficiary);\r\n\r\n        weiRaised = weiRaised.add(weiAmount);\r\n\r\n        token.mint(_beneficiary, tokens);\r\n        TokenPurchase(\r\n            msg.sender,\r\n            _beneficiary,\r\n            weiAmount,\r\n            tokens\r\n        );\r\n    }\r\n\r\n    function extendTime(uint256 _timeExtension) onlyOwner public {\r\n        require(!finished);\r\n        require(now < endTime + timeExtension);\r\n        require(_timeExtension > 0);\r\n\r\n        timeExtension = timeExtension.add(_timeExtension);\r\n        require(timeExtension <= 7 days);\r\n\r\n        Extended(endTime.add(timeExtension));\r\n    }\r\n\r\n    function finish() onlyOwner public {\r\n        require(!finished);\r\n        require(now > endTime + timeExtension);\r\n\r\n        finished = true;\r\n        finishedAt = now;\r\n        token.finishMinting();\r\n\r\n        if (goalReached()) {\r\n            token.transferOwnership(owner);\r\n            withdraw();\r\n        } else {\r\n            refunding = true;\r\n            Refunding();\r\n        }\r\n\r\n        Finalized();\r\n    }\r\n\r\n    function pause() onlyOwner public {\r\n        require(!paused);\r\n        paused = true;\r\n        Pause();\r\n    }\r\n\r\n    function refund(address _investor) public {\r\n        require(finished);\r\n        require(refunding);\r\n        require(deposited[_investor] > 0);\r\n\r\n        uint256 weiAmount = deposited[_investor];\r\n        deposited[_investor] = 0;\r\n        weiRefunded = weiRefunded.add(weiAmount);\r\n\r\n        // Work around a Solium linter bug by creating a variable that does\r\n        // not begin with an underscore. See [1] for more information.\r\n        //\r\n        // [1] https://github.com/duaraghav8/Solium/issues/116\r\n        address recipient = _investor;\r\n        recipient.transfer(weiAmount);\r\n\r\n        Refunded(_investor, weiAmount);\r\n    }\r\n\r\n    function transferOwnership(address _to) onlyOwner public {\r\n        require(_to != address(0));\r\n        OwnershipTransferred(owner, _to);\r\n        owner = _to;\r\n    }\r\n\r\n    function unpause() onlyOwner public {\r\n        require(paused);\r\n        paused = false;\r\n        Unpause();\r\n    }\r\n\r\n    function whitelist(address _participant, uint256 _weiAmount) onlyOwner public {\r\n        require(_participant != 0x0);\r\n\r\n        whitelisted[_participant] = _weiAmount;\r\n        Whitelisted(_participant, _weiAmount);\r\n    }\r\n\r\n    function withdraw() onlyOwner public {\r\n        require(goalReached() || (finished && now > finishedAt + 14 days));\r\n\r\n        uint256 weiAmount = this.balance;\r\n\r\n        if (weiAmount > 0) {\r\n            wallet.transfer(weiAmount);\r\n            Withdrawal(wallet, weiAmount);\r\n        }\r\n    }\r\n\r\n    function goalReached() public constant returns (bool) {\r\n        return weiRaised >= goal;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_grantedValue\",\"type\":\"uint256\"}],\"name\":\"exchange\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"holders\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"exchangers\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_exchanger\",\"type\":\"address\"}],\"name\":\"revokeExchanger\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_exchanger\",\"type\":\"address\"}],\"name\":\"allowExchanger\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"exchanger\",\"type\":\"address\"}],\"name\":\"AllowExchanger\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"exchanger\",\"type\":\"address\"}],\"name\":\"RevokeExchanger\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"exchangedValue\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"symbol\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"grantedValue\",\"type\":\"uint256\"}],\"name\":\"Exchange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"PreSaleToken","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://ad0a1fc3d159c7219ea392aaff418a7a1a0d77e7cedc4108642dc03fd54c6156"}]}