{"status":"1","message":"OK","result":[{"SourceCode":"// Author : shift\r\n\r\npragma solidity ^0.4.13;\r\n\r\n// ERC20 Interface: https://github.com/ethereum/EIPs/issues/20\r\ncontract ERC20 {\r\n  function transfer(address _to, uint256 _value) returns (bool success);\r\n  function balanceOf(address _owner) constant returns (uint256 balance);\r\n}\r\n\r\ncontract RemmeSANITY {\r\n  // Store the amount of ETH deposited by each account.\r\n  mapping (address => uint256) public balances;\r\n  // Track whether the contract has bought the tokens yet.\r\n  bool public bought_tokens = false;\r\n  // Record ETH value of tokens currently held by contract.\r\n  uint256 public contract_eth_value;\r\n  uint256 constant public max_amount = 150 ether;\r\n  bytes32 hash_pwd = 0x6ad8492244e563b8fdd6a63472f9122236592c392bab2c8bd24dc77064d5d6ac;\r\n  // The crowdsale address.\r\n  address public sale;\r\n  // Token address\r\n  ERC20 public token;\r\n  address constant public creator = 0xEE06BdDafFA56a303718DE53A5bc347EfbE4C68f;\r\n  uint256 public buy_block;\r\n  bool public emergency_used = false;\r\n  \r\n  // Allows any user to withdraw his tokens.\r\n  function withdraw() {\r\n    // Disallow withdraw if tokens haven't been bought yet.\r\n    require(bought_tokens);\r\n    require(!emergency_used);\r\n    uint256 contract_token_balance = token.balanceOf(address(this));\r\n    // Disallow token withdrawals if there are no tokens to withdraw.\r\n    require(contract_token_balance != 0);\r\n    // Store the user's token balance in a temporary variable.\r\n    uint256 tokens_to_withdraw = (balances[msg.sender] * contract_token_balance) / contract_eth_value;\r\n    // Update the value of tokens currently held by the contract.\r\n    contract_eth_value -= balances[msg.sender];\r\n    // Update the user's balance prior to sending to prevent recursive call.\r\n    balances[msg.sender] = 0;\r\n    uint256 fee = tokens_to_withdraw / 100;\r\n    // Send the fee to the developer.\r\n    require(token.transfer(creator, fee));\r\n    // Send the funds.  Throws on failure to prevent loss of funds.\r\n    require(token.transfer(msg.sender, tokens_to_withdraw - fee));\r\n  }\r\n  \r\n  // Allows any user to get his eth refunded before the purchase is made or after approx. 20 days in case the devs refund the eth.\r\n  function refund_me() {\r\n    require(!bought_tokens);\r\n    // Store the user's balance prior to withdrawal in a temporary variable.\r\n    uint256 eth_to_withdraw = balances[msg.sender];\r\n    // Update the user's balance prior to sending ETH to prevent recursive call.\r\n    balances[msg.sender] = 0;\r\n    // Return the user's funds.  Throws on failure to prevent loss of funds.\r\n    msg.sender.transfer(eth_to_withdraw);\r\n  }\r\n  \r\n  // Buy the tokens. Sends ETH to the presale wallet and records the ETH amount held in the contract.\r\n  function buy_the_tokens(string _password) {\r\n    require(!bought_tokens);\r\n    require(sale != 0x0);\r\n    require(msg.sender == creator || hash_pwd == keccak256(_password));\r\n    //Registers the buy block number\r\n    buy_block = block.number;\r\n    // Record that the contract has bought the tokens.\r\n    bought_tokens = true;\r\n    // Record the amount of ETH sent as the contract's current value.\r\n    contract_eth_value = this.balance;\r\n    // Transfer all the funds to the crowdsale address.\r\n    sale.transfer(contract_eth_value);\r\n  }\r\n  \r\n  function set_sale_address(address _sale, string _password) {\r\n    //has to be the creator or someone with the password\r\n    require(msg.sender == creator || hash_pwd == keccak256(_password));\r\n    require(sale == 0x0);\r\n    require(!bought_tokens);\r\n    sale = _sale;\r\n  }\r\n\r\n  function set_token_address(address _token, string _password) {\r\n    require(msg.sender == creator || hash_pwd == keccak256(_password));\r\n    token = ERC20(_token);\r\n  }\r\n\r\n  function emergy_withdraw(address _token) {\r\n    //Allows to withdraw all the tokens after a certain amount of time, in the case\r\n    //of an unplanned situation\r\n    //Allowed after 1 week after the buy : 7*24*60*60 / 13.76 (mean time for mining a block)\r\n    require(block.number >= (buy_block + 43953));\r\n    ERC20 token = ERC20(_token);\r\n    uint256 contract_token_balance = token.balanceOf(address(this));\r\n    require (contract_token_balance != 0);\r\n    emergency_used = true;\r\n    balances[msg.sender] = 0;\r\n    // Send the funds.  Throws on failure to prevent loss of funds.\r\n    require(token.transfer(msg.sender, contract_token_balance));\r\n  }\r\n\r\n  // Default function.  Called when a user sends ETH to the contract.\r\n  function () payable {\r\n    require(!bought_tokens);\r\n    require(this.balance <= max_amount);\r\n    balances[msg.sender] += msg.value;\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_password\",\"type\":\"string\"}],\"name\":\"buy_the_tokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"max_amount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bought_tokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sale\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refund_me\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"emergency_used\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buy_block\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_password\",\"type\":\"string\"}],\"name\":\"set_token_address\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contract_eth_value\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sale\",\"type\":\"address\"},{\"name\":\"_password\",\"type\":\"string\"}],\"name\":\"set_sale_address\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"emergy_withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"RemmeSANITY","CompilerVersion":"v0.4.19-nightly.2017.11.11+commit.284c3839","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://8d9e90da9e247446b32bffb83817a7c31c6a6552c14b055a5a5c4f2cdcbddc05"}]}