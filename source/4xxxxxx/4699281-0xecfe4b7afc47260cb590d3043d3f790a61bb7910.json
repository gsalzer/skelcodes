{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\ncontract ForeignToken {\r\n    function balanceOf(address _owner) constant returns (uint256);\r\n    function transfer(address _to, uint256 _value) returns (bool);\r\n}\r\n\r\ninterface Token { \r\n    function transfer(address _to, uint256 _value) returns (bool);\r\n    function totalSupply() constant returns (uint256 supply);\r\n    function balanceOf(address _owner) constant returns (uint256 balance);\r\n}\r\n\r\ncontract EbyteDistribution {\r\n    \r\n    mapping (address => uint256) balances;\r\n    mapping (address => bool) public blacklist;\r\n    Token public ebyteToken;\r\n    address public owner;\r\n    uint256 public rate = 100000000;\r\n    uint256 public percentage = 20;\r\n    uint256 public ethBalance = 10000000000;\r\n    uint256 public ebyteBalance = 100;\r\n    bool public contractLocked = true;\r\n    \r\n    event sendTokens(address indexed to, uint256 value);\r\n    event Locked();\r\n    event Unlocked();\r\n\r\n    function EbyteDistribution(address _tokenAddress, address _owner) {\r\n        ebyteToken = Token(_tokenAddress);\r\n        owner = _owner;\r\n    }\r\n    \r\n    function transferOwnership(address newOwner) onlyOwner {\r\n        if (newOwner != address(0)) {\r\n        owner = newOwner;\r\n        }\r\n    }\r\n    \r\n    function setParameters(uint256 _Rate, uint256 _Percentage, uint256 _EthBalance, \r\n    uint256 _EbyteBalance) onlyOwner public {\r\n        rate = _Rate;\r\n        percentage = _Percentage;\r\n        ethBalance = _EthBalance;\r\n        ebyteBalance = _EbyteBalance;\r\n    }\r\n    \r\n    modifier onlyWhitelist() {\r\n        require(blacklist[msg.sender] == false);\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner == msg.sender);\r\n        _;\r\n    }\r\n    \r\n    modifier isUnlocked() {\r\n        require(!contractLocked);\r\n        _;\r\n    }\r\n    \r\n    function enableWhitelist(address[] addresses) onlyOwner {\r\n        for (uint i = 0; i < addresses.length; i++) {\r\n            blacklist[addresses[i]] = false;\r\n        }\r\n    }\r\n\r\n    function disableWhitelist(address[] addresses) onlyOwner {\r\n        for (uint i = 0; i < addresses.length; i++) {\r\n            blacklist[addresses[i]] = true;\r\n        }\r\n    }\r\n    \r\n    function lockContract() onlyOwner public returns (bool) {\r\n        contractLocked = true;\r\n        Locked();\r\n        return true;\r\n    }\r\n    \r\n    function unlockContract() onlyOwner public returns (bool) {\r\n        contractLocked = false;\r\n        Unlocked();\r\n        return false;\r\n    }\r\n\r\n    function balanceOf(address _holder) constant returns (uint256 balance) {\r\n        return balances[_holder];\r\n    }\r\n    \r\n    function getTokenBalance(address who) constant public returns (uint){\r\n        uint bal = ebyteToken.balanceOf(who);\r\n        return bal;\r\n    }\r\n    \r\n    function getEthBalance(address _addr) constant public returns(uint) {\r\n        return _addr.balance;\r\n    }\r\n    \r\n    function distributeEbyte(address[] addresses, uint256 value) onlyOwner public {\r\n        for (uint i = 0; i < addresses.length; i++) {\r\n            sendTokens(addresses[i], value);\r\n            ebyteToken.transfer(addresses[i], value);\r\n        }\r\n    }\r\n\r\n    function distributeEbyteForETH(address[] addresses) onlyOwner public {\r\n        for (uint i = 0; i < addresses.length; i++) {\r\n            if (getEthBalance(addresses[i]) < ethBalance) {\r\n                continue;\r\n            }\r\n            uint256 ethMulti = getEthBalance(addresses[i]) / 1000000000000000000;\r\n            uint256 toDistr = rate * ethMulti;\r\n            sendTokens(addresses[i], toDistr);\r\n            ebyteToken.transfer(addresses[i], toDistr);\r\n        }\r\n    }\r\n    \r\n    function distributeEbyteForEBYTE(address[] addresses) onlyOwner public {\r\n        for (uint i = 0; i < addresses.length; i++) {\r\n            if (getTokenBalance(addresses[i]) < ebyteBalance) {\r\n                continue;\r\n            }\r\n            uint256 toDistr = (getTokenBalance(addresses[i]) / 100) * percentage;\r\n            sendTokens(addresses[i], toDistr);\r\n            ebyteToken.transfer(addresses[i], toDistr);\r\n        }\r\n    }\r\n    \r\n    function distribution(address[] addresses) onlyOwner public {\r\n\r\n        for (uint i = 0; i < addresses.length; i++) {\r\n            distributeEbyteForEBYTE(addresses);\r\n            distributeEbyteForETH(addresses);\r\n            break;\r\n        }\r\n    }\r\n  \r\n    function () payable onlyWhitelist isUnlocked public {\r\n        address investor = msg.sender;\r\n        uint256 toGiveT = (getTokenBalance(investor) / 100) * percentage;\r\n        uint256 ethMulti = getEthBalance(investor) / 1000000000;\r\n        uint256 toGiveE = (rate * ethMulti) / 1000000000;\r\n        sendTokens(investor, toGiveT);\r\n        ebyteToken.transfer(investor, toGiveT);\r\n        sendTokens(investor, toGiveE);\r\n        ebyteToken.transfer(investor, toGiveE);\r\n        blacklist[investor] = true;\r\n    }\r\n    \r\n    function tokensAvailable() constant returns (uint256) {\r\n        return ebyteToken.balanceOf(this);\r\n    }\r\n    \r\n    function withdraw() onlyOwner public {\r\n        uint256 etherBalance = this.balance;\r\n        owner.transfer(etherBalance);\r\n    }\r\n    \r\n    function withdrawForeignTokens(address _tokenContract) onlyOwner public returns (bool) {\r\n        ForeignToken token = ForeignToken(_tokenContract);\r\n        uint256 amount = token.balanceOf(address(this));\r\n        return token.transfer(owner, amount);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"addresses\",\"type\":\"address[]\"}],\"name\":\"distribution\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ebyteBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unlockContract\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractLocked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"getTokenBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getEthBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addresses\",\"type\":\"address[]\"}],\"name\":\"disableWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensAvailable\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_holder\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"lockContract\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addresses\",\"type\":\"address[]\"}],\"name\":\"distributeEbyteForETH\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addresses\",\"type\":\"address[]\"}],\"name\":\"enableWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ebyteToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addresses\",\"type\":\"address[]\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"distributeEbyte\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"percentage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenContract\",\"type\":\"address\"}],\"name\":\"withdrawForeignTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addresses\",\"type\":\"address[]\"}],\"name\":\"distributeEbyteForEBYTE\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"blacklist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_Rate\",\"type\":\"uint256\"},{\"name\":\"_Percentage\",\"type\":\"uint256\"},{\"name\":\"_EthBalance\",\"type\":\"uint256\"},{\"name\":\"_EbyteBalance\",\"type\":\"uint256\"}],\"name\":\"setParameters\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"sendTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Locked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unlocked\",\"type\":\"event\"}]","ContractName":"EbyteDistribution","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000a65Ee5Fd259d94294c4eF030d1a62EeB465b9438000000000000000000000000CC0e068fB54F16abeC3c5D9e008133a518BB244A","Library":"","SwarmSource":"bzzr://57464a3103c5464615b12062426f030a5a94efe83b68751edf5a64d86f7b285b"}]}