{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.15;\r\n\r\ncontract owned \r\n{\r\n\taddress public owner;\r\n\r\n\tfunction owned() public\r\n\t{\r\n\t\towner = msg.sender;\r\n\t}\r\n\r\n\tfunction changeOwner(address newOwner) public onlyOwner \r\n\t{\r\n\t\towner = newOwner;\r\n\t}\r\n\r\n\tmodifier onlyOwner \r\n\t{\r\n\t\trequire(msg.sender == owner);\r\n\t\t_;\r\n\t}\r\n}\r\n\r\ncontract ERC20 {\r\n\tfunction totalSupply() public constant returns (uint totalTokenCount);\r\n\tfunction balanceOf(address _owner) public constant returns (uint balance);\r\n\tfunction transfer(address _to, uint _value) public returns (bool success);\r\n\tfunction transferFrom(address _from, address _to, uint _value) public returns (bool success);\r\n\tfunction approve(address _spender, uint _value) public returns (bool success);\r\n\tfunction allowance(address _owner, address _spender) public constant returns (uint remaining);\r\n\tevent Transfer(address indexed _from, address indexed _to, uint _value);\r\n\tevent Approval(address indexed _owner, address indexed _spender, uint _value);\r\n}\r\n\r\n\r\n\r\ncontract Token is ERC20, owned \r\n{\r\n\tstring public constant symbol = \"GMBC\";\r\n\tstring public constant name = \"GMBC\";\r\n\tuint8 public constant decimals = 18;\r\n\r\n\tuint256 _totalSupply = 0;\r\n\t\r\n\tevent Burned(address backer, uint _value);\r\n \r\n\t// Balances for each account\r\n\tmapping(address => uint256) balances;\r\n\r\n\tmapping(address => uint256) lockedTillTime;\r\n \r\n\t// Owner of account approves the transfer of an amount to another account\r\n\tmapping(address => mapping (address => uint256)) allowed;\r\n\r\n\taddress public crowdsale;\r\n\r\n\tfunction changeCrowdsale(address newCrowdsale) public onlyOwner \r\n\t{\r\n\t\tcrowdsale = newCrowdsale;\r\n\t}\r\n\r\n\tmodifier onlyOwnerOrCrowdsale \r\n\t{\r\n\t\trequire(msg.sender == owner || msg.sender == crowdsale);\r\n\t\t_;\r\n\t}\r\n\r\n\tfunction safeAdd(uint256 _x, uint256 _y) internal pure returns (uint256) \r\n\t{\r\n\t\tuint256 z = _x + _y;\r\n\t\tassert(z >= _x);\r\n\t\treturn z;\r\n\t}\r\n\r\n\tfunction safeSub(uint256 _x, uint256 _y) internal pure returns (uint256) \r\n\t{\r\n\t\tassert(_x >= _y);\r\n\t\treturn _x - _y;\r\n\t}\r\n\t\r\n\tfunction totalSupply() public constant returns (uint256 totalTokenCount) \r\n\t{\r\n\t\treturn _totalSupply;\r\n\t}\r\n \r\n\t// What is the balance of a particular account?\r\n\tfunction balanceOf(address _owner) public constant returns (uint256 balance) \r\n\t{\r\n\t\treturn balances[_owner];\r\n\t}\r\n\r\n\tfunction getUnlockTime(address _owner) public constant returns (uint256 unlockTime) \r\n\t{\r\n\t\treturn lockedTillTime[_owner];\r\n\t}\r\n\r\n\tfunction isUnlocked(address _owner) public constant returns (bool unlocked) \r\n\t{\r\n\t\treturn lockedTillTime[_owner] < now;\r\n\t}\r\n \r\n\t// Transfer the balance from owner's account to another account\r\n\tfunction transfer(address _to, uint256 _amount) public returns (bool success) \r\n\t{\r\n\t\tif (balances[msg.sender] >= _amount \r\n\t\t\t&& _amount > 0\r\n\t\t\t&& balances[_to] + _amount > balances[_to]\r\n\t\t\t&& isUnlocked(msg.sender)) \r\n\t\t{\r\n\t\t\tbalances[msg.sender] -= _amount;\r\n\t\t\tbalances[_to] += _amount;\r\n\t\t\tTransfer(msg.sender, _to, _amount);\r\n\t\t\treturn true;\r\n\t\t} else {\r\n\t\t\trevert();\r\n\t\t}\r\n\t}\r\n \r\n\t// Send _value amount of tokens from address _from to address _to\r\n\t// The transferFrom method is used for a withdraw workflow, allowing contracts to send\r\n\t// tokens on your behalf, for example to \"deposit\" to a contract address and/or to charge\r\n\t// fees in sub-currencies; the command should fail unless the _from account has\r\n\t// deliberately authorized the sender of the message via some mechanism; we propose\r\n\t// these standardized APIs for approval:\r\n\tfunction transferFrom(\r\n\t\taddress _from,\r\n\t\taddress _to,\r\n\t\tuint256 _amount\r\n\t) public returns (bool success) \r\n\t{\r\n\t\tif (balances[_from] >= _amount\r\n\t\t\t&& allowed[_from][msg.sender] >= _amount\r\n\t\t\t&& _amount > 0\r\n\t\t\t&& balances[_to] + _amount > balances[_to] \r\n\t\t\t&& isUnlocked(_from))\r\n\t\t{\r\n\t\t\tbalances[_from] -= _amount;\r\n\t\t\tallowed[_from][msg.sender] -= _amount;\r\n\t\t\tbalances[_to] += _amount;\r\n\t\t\tTransfer(_from, _to, _amount);\r\n\t\t\treturn true;\r\n\t\t} else {\r\n\t\t\trevert();\r\n\t\t}\r\n\t}\r\n \r\n\t// Allow _spender to withdraw from your account, multiple times, up to the _value amount.\r\n\t// If this function is called again it overwrites the current allowance with _value.\r\n\tfunction approve(address _spender, uint256 _amount) public returns (bool success) \r\n\t{\r\n\t\tallowed[msg.sender][_spender] = _amount;\r\n\t\tApproval(msg.sender, _spender, _amount);\r\n\t\treturn true;\r\n\t}\r\n \r\n\tfunction allowance(address _owner, address _spender) public constant returns (uint256 remaining) \r\n\t{\r\n\t\treturn allowed[_owner][_spender];\r\n\t}\r\n\r\n\tfunction mint(address target, uint256 mintedAmount, uint256 lockTime) public onlyOwnerOrCrowdsale \r\n\t{\r\n\t\trequire(mintedAmount > 0);\r\n\r\n\t\tbalances[target] = safeAdd(balances[target], mintedAmount);\r\n\t\t_totalSupply = safeAdd(_totalSupply, mintedAmount);\r\n\r\n\t\tif (lockedTillTime[target] < lockTime)\r\n\t\t{\r\n\t\t\tlockedTillTime[target] = lockTime;\r\n\t\t}\r\n\t}\r\n\r\n\tfunction burn(address target, uint256 burnedAmount) public onlyOwnerOrCrowdsale\r\n\t{\r\n\t\trequire(burnedAmount > 0);\r\n\r\n\t\tif (balances[target] >= burnedAmount)\r\n\t\t{\r\n\t\t\tbalances[target] -= burnedAmount;\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tburnedAmount = balances[target];\r\n\t\t\tbalances[target] = 0;\r\n\t\t}\r\n\r\n\t\t_totalSupply = safeSub(_totalSupply, burnedAmount);\r\n\t\tBurned(target, burnedAmount);\r\n\t}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"mintedAmount\",\"type\":\"uint256\"},{\"name\":\"lockTime\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"totalTokenCount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"isUnlocked\",\"outputs\":[{\"name\":\"unlocked\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsale\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"burnedAmount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCrowdsale\",\"type\":\"address\"}],\"name\":\"changeCrowdsale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getUnlockTime\",\"outputs\":[{\"name\":\"unlockTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"backer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Burned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"Token","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://9b5b3f074b8687cefe01934340deb408766d5a3ce014fcdb1da3d0c96497a37e"}]}