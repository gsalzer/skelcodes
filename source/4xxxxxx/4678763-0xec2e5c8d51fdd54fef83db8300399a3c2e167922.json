{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) \r\n  {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) \r\n  {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) \r\n  {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) \r\n  {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n */\r\ncontract Ownable \r\n{\r\n  address public owner;\r\n\r\n  event OwnerChanged(address indexed _oldOwner, address indexed _newOwner);\r\n\t\r\n\tfunction Ownable() public\r\n  {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  modifier onlyOwner() \r\n  {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  function changeOwner(address _newOwner) onlyOwner public \r\n  {\r\n    require(_newOwner != address(0));\r\n    \r\n    address oldOwner = owner;\r\n    if (oldOwner != _newOwner)\r\n    {\r\n    \towner = _newOwner;\r\n    \t\r\n    \tOwnerChanged(oldOwner, _newOwner);\r\n    }\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title Manageable\r\n */\r\ncontract Manageable is Ownable\r\n{\r\n\taddress public manager;\r\n\t\r\n\tevent ManagerChanged(address indexed _oldManager, address _newManager);\r\n\t\r\n\tfunction Manageable() public\r\n\t{\r\n\t\tmanager = msg.sender;\r\n\t}\r\n\t\r\n\tmodifier onlyManager()\r\n\t{\r\n\t\trequire(msg.sender == manager);\r\n\t\t_;\r\n\t}\r\n\t\r\n\tmodifier onlyOwnerOrManager() \r\n\t{\r\n\t\trequire(msg.sender == owner || msg.sender == manager);\r\n\t\t_;\r\n\t}\r\n\t\r\n\tfunction changeManager(address _newManager) onlyOwner public \r\n\t{\r\n\t\trequire(_newManager != address(0));\r\n\t\t\r\n\t\taddress oldManager = manager;\r\n\t\tif (oldManager != _newManager)\r\n\t\t{\r\n\t\t\tmanager = _newManager;\r\n\t\t\t\r\n\t\t\tManagerChanged(oldManager, _newManager);\r\n\t\t}\r\n\t}\r\n\t\r\n}\r\n\r\n\r\n/**\r\n * @title CrowdsaleToken\r\n */\r\ncontract CrowdsaleToken is Manageable\r\n{\r\n  using SafeMath for uint256;\r\n\r\n  string public constant name     = \"EBCoin\";\r\n  string public constant symbol   = \"EBC\";\r\n  uint8  public constant decimals = 18;\r\n  \r\n  uint256 public totalSupply;\r\n  mapping(address => uint256) balances;\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n  mapping (address => uint256) public releaseTime;\r\n  bool public released;\r\n\r\n  event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n  event Mint(address indexed _to, uint256 _value);\r\n  event ReleaseTimeChanged(address indexed _owner, uint256 _oldReleaseTime, uint256 _newReleaseTime);\r\n  event ReleasedChanged(bool _oldReleased, bool _newReleased);\r\n\r\n  modifier canTransfer(address _from)\r\n  {\r\n  \tif (releaseTime[_from] == 0)\r\n  \t{\r\n  \t\trequire(released);\r\n  \t}\r\n  \telse\r\n  \t{\r\n  \t\trequire(releaseTime[_from] <= now);\r\n  \t}\r\n  \t_;\r\n  }\r\n\r\n  function balanceOf(address _owner) public constant returns (uint256)\r\n  {\r\n    return balances[_owner];\r\n  }\r\n\r\n  function transfer(address _to, uint256 _value) canTransfer(msg.sender) public returns (bool) \r\n  {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    \r\n    Transfer(msg.sender, _to, _value);\r\n    \r\n    return true;\r\n  }\r\n\r\n  function allowance(address _owner, address _spender) public constant returns (uint256) \r\n  {\r\n    return allowed[_owner][_spender];\r\n  }\r\n  \r\n  function transferFrom(address _from, address _to, uint256 _value) canTransfer(_from) public returns (bool) \r\n  {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    \r\n    Transfer(_from, _to, _value);\r\n    \r\n    return true;\r\n  }\r\n  \r\n  function allocate(address _sale, address _investor, uint256 _value) onlyOwnerOrManager public \r\n  {\r\n  \trequire(_sale != address(0));\r\n  \tCrowdsale sale = Crowdsale(_sale);\r\n  \taddress pool = sale.pool();\r\n\r\n    require(_investor != address(0));\r\n    require(_value <= balances[pool]);\r\n    require(_value <= allowed[pool][msg.sender]);\r\n\r\n    balances[pool] = balances[pool].sub(_value);\r\n    balances[_investor] = balances[_investor].add(_value);\r\n    allowed[pool][_sale] = allowed[pool][_sale].sub(_value);\r\n    \r\n    Transfer(pool, _investor, _value);\r\n  }\r\n  \r\n  function deallocate(address _sale, address _investor, uint256 _value) onlyOwnerOrManager public \r\n  {\r\n  \trequire(_sale != address(0));\r\n  \tCrowdsale sale = Crowdsale(_sale);\r\n  \taddress pool = sale.pool();\r\n  \t\r\n    require(_investor != address(0));\r\n  \trequire(_value <= balances[_investor]);\r\n  \t\r\n  \tbalances[_investor] = balances[_investor].sub(_value);\r\n  \tbalances[pool] = balances[pool].add(_value);\r\n  \tallowed[pool][_sale] = allowed[pool][_sale].add(_value);\r\n  \t\r\n  \tTransfer(_investor, pool, _value);\r\n  }\r\n\r\n \tfunction approve(address _spender, uint256 _value) public returns (bool) \r\n \t{\r\n    allowed[msg.sender][_spender] = _value;\r\n    \r\n    Approval(msg.sender, _spender, _value);\r\n    \r\n    return true;\r\n  }\r\n\r\n  function mint(address _to, uint256 _value, uint256 _releaseTime) onlyOwnerOrManager public returns (bool) \r\n  {\r\n  \trequire(_to != address(0));\r\n  \t\r\n    totalSupply = totalSupply.add(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    \r\n    Mint(_to, _value);\r\n    Transfer(0x0, _to, _value);\r\n    \r\n    setReleaseTime(_to, _releaseTime);\r\n    \r\n    return true;\r\n  }\r\n\r\n  function setReleaseTime(address _owner, uint256 _newReleaseTime) onlyOwnerOrManager public\r\n  {\r\n    require(_owner != address(0));\r\n    \r\n  \tuint256 oldReleaseTime = releaseTime[_owner];\r\n  \tif (oldReleaseTime != _newReleaseTime)\r\n  \t{\r\n  \t\treleaseTime[_owner] = _newReleaseTime;\r\n    \r\n    \tReleaseTimeChanged(_owner, oldReleaseTime, _newReleaseTime);\r\n    }\r\n  }\r\n  \r\n  function setReleased(bool _newReleased) onlyOwnerOrManager public\r\n  {\r\n  \tbool oldReleased = released;\r\n  \tif (oldReleased != _newReleased)\r\n  \t{\r\n  \t\treleased = _newReleased;\r\n  \t\r\n  \t\tReleasedChanged(oldReleased, _newReleased);\r\n  \t}\r\n  }\r\n  \r\n}\r\n\r\n\r\n/**\r\n * @title Crowdsale\r\n */\r\ncontract Crowdsale is Manageable\r\n{\r\n  using SafeMath for uint256;\r\n\r\n  CrowdsaleToken public token;\r\n\r\n  uint256 public startTime;\r\n  uint256 public endTime  ;\r\n\r\n  uint256 public rate;\r\n  \r\n  uint256 public constant decimals = 18;\r\n  \r\n  uint256 public tokenSaleWeiCap;\t\t\r\n  uint256 public tokenSaleWeiGoal;\t\r\n  uint256 public tokenSaleWeiMax;\t\t\r\n  uint256 public tokenSaleWeiMin;\t\t\r\n  \r\n  address public pool; \r\n  address public wallet;\r\n\r\n  bool public isFinalized = false;\r\n\r\n  enum State { Created, Active, Closed }\r\n\r\n  uint256 public totalAllocated;\r\n  mapping (address => uint256) public allocated;\r\n  \r\n  uint256 public totalDeposited;\r\n  mapping (address => uint256) public deposited;\r\n\r\n  State public state;\r\n\r\n  event Closed();\r\n  event Finalized();\r\n  event FundWithdrawed(uint256 ethAmount);\r\n  event TokenPurchased(address indexed _purchaser, address indexed _investor, uint256 _value, uint256 _amount, bytes _data);\r\n  event TokenReturned(address indexed _investor, uint256 _value);\r\n\r\n  function Crowdsale() public\r\n  {\r\n  \tstate = State.Created;\r\n  }\r\n  \r\n  function initCrowdsale(address _pool, address _token, uint256 _startTime, uint256 _endTime, uint256 _rate, uint256 _tokenSaleWeiCap, uint256 _tokenSaleWeiGoal, uint256 _tokenSaleWeiMax, uint256 _tokenSaleWeiMin, address _wallet) onlyOwnerOrManager public\r\n  {\r\n    require(state == State.Created);\r\n  \trequire(_pool != address(0));\r\n    require(_token != address(0));\r\n    require(_startTime >= now);\r\n    require(_endTime >= _startTime);\r\n    require(_endTime >= now);\r\n    require(_rate > 0);\r\n    require(_tokenSaleWeiCap >= _tokenSaleWeiGoal);\r\n    require(_wallet != 0x0);\r\n    \r\n    state = State.Active;\r\n    \r\n    pool             = _pool;\r\n    token            = CrowdsaleToken(_token);\r\n    startTime        = _startTime;\r\n    endTime          = _endTime;\r\n    rate             = _rate;\r\n    tokenSaleWeiCap  = _tokenSaleWeiCap;\r\n    tokenSaleWeiGoal = _tokenSaleWeiGoal;\r\n    tokenSaleWeiMax  = _tokenSaleWeiMax;\r\n    tokenSaleWeiMin  = _tokenSaleWeiMin;\r\n    wallet           = _wallet;\r\n  }\r\n\r\n  function allocation(address _investor) public constant returns (uint256)\r\n  {\r\n  \treturn allocated[_investor];\r\n  }\r\n\r\n  function () payable public\r\n  {\r\n    buyTokens(msg.sender);\r\n  }\r\n\r\n  function buyTokens(address _investor) public payable \r\n  {\r\n    require(_investor != 0x0);\r\n    require(startTime <= now && now <= endTime);\r\n    require(msg.value != 0);\r\n    require(state == State.Active);\r\n    \r\n    require(totalAllocated <= tokenSaleWeiCap);\r\n    \r\n    uint256 ethWeiAmount = msg.value;\r\n    \r\n    uint256 tokenWeiAmount = ethWeiAmount.mul(rate);\r\n    \r\n    uint256 personTokenWeiAmount = allocated[_investor].add(tokenWeiAmount);\r\n    \r\n    require(tokenSaleWeiMin <= personTokenWeiAmount);\r\n    require(personTokenWeiAmount <= tokenSaleWeiMax);\r\n    \r\n    totalAllocated = totalAllocated.add(tokenWeiAmount);\r\n\r\n    totalDeposited = totalDeposited.add(ethWeiAmount);\r\n    \r\n    allocated[_investor] = personTokenWeiAmount;\r\n    \r\n    deposited[_investor] = deposited[_investor].add(ethWeiAmount);\r\n    \r\n    token.allocate(this, _investor, tokenWeiAmount);\r\n    \r\n    TokenPurchased(msg.sender, _investor, ethWeiAmount, tokenWeiAmount, msg.data);\r\n  }\r\n\r\n  function deallocate(address _investor, uint256 _value) onlyOwnerOrManager public \r\n  {\r\n  \trequire(_investor != address(0));\r\n  \trequire(_value > 0);\r\n    require(_value <= allocated[_investor]);\r\n\r\n\t\ttotalAllocated = totalAllocated.sub(_value);\r\n\t\t\r\n\t\tallocated[_investor] = allocated[_investor].sub(_value);\r\n\t\t\r\n\t\ttoken.deallocate(this, _investor, _value);\r\n\t\t\r\n\t\tTokenReturned(_investor, _value);\r\n  }\r\n\r\n  function goalReached() public constant returns (bool)\r\n  {\r\n    return totalAllocated >= tokenSaleWeiGoal;\r\n  }\r\n\r\n  function hasEnded() public constant returns (bool) \r\n  {\r\n    bool capReached = (totalAllocated >= tokenSaleWeiCap);\r\n    return (now > endTime) || capReached;\r\n  }\r\n\r\n  function finalize() onlyOwnerOrManager public \r\n  {\r\n    require(!isFinalized);\r\n    require(hasEnded());\r\n\r\n    if (goalReached()) \r\n    {\r\n      close();\r\n    } \r\n    \r\n    Finalized();\r\n\r\n    isFinalized = true;\r\n  }\r\n\r\n  function close() onlyOwnerOrManager public\r\n  {\r\n    require(state == State.Active);\r\n    \r\n    state = State.Closed;\r\n    \r\n    Closed();\r\n  }\r\n\r\n  function withdraw() onlyOwnerOrManager public\r\n  {\r\n  \trequire(state == State.Closed);\r\n  \t\r\n  \tuint256 depositedValue = this.balance;\r\n  \tif (depositedValue > 0)\r\n  \t{\r\n  \t\twallet.transfer(depositedValue);\r\n  \t\r\n  \t\tFundWithdrawed(depositedValue);\r\n  \t}\r\n  }\r\n  \r\n}\r\n\r\n\r\n/**\r\n * @title CrowdsaleManager\r\n */\r\ncontract CrowdsaleManager is Manageable \r\n{\r\n  using SafeMath for uint256;\r\n  \r\n  uint256 public constant decimals = 18;\r\n\r\n  CrowdsaleToken public token;\r\n  Crowdsale      public sale1;\r\n  Crowdsale      public sale2;\r\n  Crowdsale      public sale3;\r\n  \r\n  address public constant tokenReserved1Deposit = 0x6EE96ba492a738BDD080d7353516133ea806DDee;\r\n  address public constant tokenReserved2Deposit = 0xAFBcB72fE97A5191d03E328dE07BB217dA21EaE4;\r\n  address public constant tokenReserved3Deposit = 0xd7118eE872870040d86495f13E61b88EE5C93586;\r\n  address public constant tokenReserved4Deposit = 0x08ce2b3512aE0387495AB5f61e6B0Cf846Ae59a7;\r\n  \r\n  address public constant withdrawWallet1       = 0xf8dafE5ee19a28b95Ad93e05575269EcEE19DDf2;\r\n  address public constant withdrawWallet2       = 0x6f4aF515ECcE22EA0D1AB82F8742E058Ac4d9cb3;\r\n  address public constant withdrawWallet3       = 0xd172E0DEe60Af67dA3019Ad539ce3190a191d71D;\r\n\r\n  uint256 public constant tokenSale      = 750000000 * 10**decimals + 3000 * 1000 * 10**decimals;\r\n  uint256 public constant tokenReserved1 = 150000000 * 10**decimals - 3000 * 1000 * 10**decimals;\r\n  uint256 public constant tokenReserved2 = 270000000 * 10**decimals;           \t\t\t \r\n  uint256 public constant tokenReserved3 = 105000000 * 10**decimals;                \t\t\r\n  uint256 public constant tokenReserved4 = 225000000 * 10**decimals;                      \t\r\n  \r\n  function CrowdsaleManager() public\r\n  {\r\n  }\r\n  \r\n  function createToken() onlyOwnerOrManager public\r\n  {\r\n    token = new CrowdsaleToken();\r\n  }\r\n  \r\n  function mintToken() onlyOwnerOrManager public\r\n  {\r\n    token.mint(this                 , tokenSale     , now       );\r\n    token.mint(tokenReserved1Deposit, tokenReserved1, now       );\r\n    token.mint(tokenReserved2Deposit, tokenReserved2, 1544158800);\r\n    token.mint(tokenReserved3Deposit, tokenReserved3, 1544158800);\r\n    token.mint(tokenReserved4Deposit, tokenReserved4, 0         );\r\n  }\r\n  \r\n  function createSale1() onlyOwnerOrManager public\r\n  {\r\n    sale1 = new Crowdsale();\r\n  }\r\n  \r\n  function initSale1() onlyOwnerOrManager public\r\n  {\r\n    uint256 startTime \t\t\t\t= 1512622800;\r\n    uint256 endTime   \t\t\t\t= 1515301200;\r\n    uint256 rate      \t\t\t\t= 3450;\t\t\r\n    \r\n    uint256 tokenSaleWeiCap\t\t= 150000000000000000000000000;\r\n    uint256 tokenSaleWeiGoal\t=  10350000000000000000000000;\t\t\r\n    uint256 tokenSaleWeiMax\t\t=    345000000000000000000000;\t\r\n    uint256 tokenSaleWeiMin\t\t=      3450000000000000000000;\t\r\n    \r\n    sale1.initCrowdsale(this, token, startTime, endTime, rate, tokenSaleWeiCap, tokenSaleWeiGoal, tokenSaleWeiMax, tokenSaleWeiMin, withdrawWallet1);\r\n    \r\n    token.approve(sale1, tokenSaleWeiCap.add(tokenSaleWeiMax));\r\n    \r\n    token.changeManager(sale1);\r\n  }\r\n  \r\n  function finalizeSale1() onlyOwnerOrManager public\r\n  {\r\n  \tsale1.finalize();\r\n  }\r\n  \r\n  function closeSale1() onlyOwnerOrManager public\r\n  {\r\n  \tsale1.close();\r\n  }\r\n  \r\n  function withdrawSale1() onlyOwnerOrManager public\r\n  {\r\n  \tsale1.withdraw();\r\n  }\r\n  \r\n  function createSale2() onlyOwnerOrManager public\r\n  {\r\n    sale2 = new Crowdsale();\r\n  }\r\n  \r\n  function initSale2() onlyOwnerOrManager public\r\n  {\r\n    uint256 startTime \t\t\t\t= 1515474000;\r\n    uint256 endTime   \t\t\t\t= 1517288400;\r\n    uint256 rate      \t\t\t\t= 3000;\t\t\r\n    \r\n    uint256 tokenSaleWeiCap\t\t= 375000000000000000000000000;\r\n    uint256 tokenSaleWeiGoal\t=                           0;\t\t\r\n    uint256 tokenSaleWeiMax\t\t=   3000000000000000000000000;\t\r\n    uint256 tokenSaleWeiMin\t\t=      3000000000000000000000;\t\r\n\r\n   \ttokenSaleWeiCap = tokenSaleWeiCap.add(sale1.tokenSaleWeiCap());\r\n   \ttokenSaleWeiCap = tokenSaleWeiCap.sub(sale1.totalAllocated());\r\n    \r\n    sale2.initCrowdsale(this, token, startTime, endTime, rate, tokenSaleWeiCap, tokenSaleWeiGoal, tokenSaleWeiMax, tokenSaleWeiMin, withdrawWallet2);\r\n    \r\n    token.approve(sale2, tokenSaleWeiCap.add(tokenSaleWeiMax));\r\n    \r\n    token.changeManager(sale2);\r\n  }\r\n  \r\n  function finalizeSale2() onlyOwnerOrManager public\r\n  {\r\n  \tsale2.finalize();\r\n  }\r\n  \r\n  function closeSale2() onlyOwnerOrManager public\r\n  {\r\n  \tsale2.close();\r\n  }\r\n  \r\n  function withdrawSale2() onlyOwnerOrManager public\r\n  {\r\n  \tsale2.withdraw();\r\n  }\r\n  \r\n  function createSale3() onlyOwnerOrManager public\r\n  {\r\n    sale3 = new Crowdsale();\r\n  }\r\n  \r\n  function initSale3(uint256 _startTime, uint256 _endTime, uint256 _rate, uint256 _cap, uint256 _goal, uint256 _max, uint _min) onlyOwnerOrManager public\r\n  {\r\n    require(_startTime >= now);\r\n    require(_endTime >= _startTime);\r\n    require(_rate > 0);\r\n    require(_cap >= _goal);\r\n  \r\n    uint256 startTime \t\t\t\t= _startTime;\r\n    uint256 endTime   \t\t\t\t= _endTime;\r\n    uint256 rate      \t\t\t\t= _rate;\r\n    \r\n    uint256 tokenSaleWeiCap\t\t= _cap;\r\n    uint256 tokenSaleWeiGoal\t= _goal;\t\r\n    uint256 tokenSaleWeiMax\t\t= _max;\t\r\n    uint256 tokenSaleWeiMin\t\t= _min;\t\r\n\r\n    sale3.initCrowdsale(this, token, startTime, endTime, rate, tokenSaleWeiCap, tokenSaleWeiGoal, tokenSaleWeiMax, tokenSaleWeiMin, withdrawWallet3);\r\n    \r\n    token.approve(sale3, tokenSaleWeiCap.add(tokenSaleWeiMax));\r\n    \r\n    token.changeManager(sale3);\r\n  }\r\n  \r\n  function finalizeSale3() onlyOwnerOrManager public\r\n  {\r\n  \tsale3.finalize();\r\n  }\r\n  \r\n  function closeSale3() onlyOwnerOrManager public\r\n  {\r\n  \tsale3.close();\r\n  }\r\n  \r\n  function withdrawSale3() onlyOwnerOrManager public\r\n  {\r\n  \tsale3.withdraw();\r\n  }\r\n  \r\n  function releaseTokenTransfer(bool _newReleased) onlyOwner public\r\n  {\r\n  \ttoken.setReleased(_newReleased);\r\n  }\r\n  \r\n  function changeTokenManager(address _newManager) onlyOwner public\r\n  {\r\n  \ttoken.changeManager(_newManager);\r\n  }\r\n  \r\n  function changeSaleManager(address _sale, address _newManager) onlyOwner public\r\n  {\r\n  \trequire(_sale != address(0));\r\n  \tCrowdsale sale = Crowdsale(_sale);\r\n  \t\r\n  \tsale.changeManager(_newManager);\r\n  }\r\n  \r\n  function deallocate(address _sale, address _investor) onlyOwner public\r\n  {\r\n  \trequire(_sale != address(0));\r\n  \tCrowdsale sale = Crowdsale(_sale);\r\n  \t\r\n  \tuint256 allocatedValue = sale.allocation(_investor);\r\n  \t\r\n  \tsale.deallocate(_investor, allocatedValue);\r\n  }\r\n  \r\n  function promotionAllocate(address _investor, uint256 _value) onlyOwner public\r\n  {\r\n  \ttoken.transfer(_investor, _value);\r\n  }\r\n  \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_releaseTime\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sale\",\"type\":\"address\"},{\"name\":\"_investor\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"allocate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"releaseTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_newReleaseTime\",\"type\":\"uint256\"}],\"name\":\"setReleaseTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sale\",\"type\":\"address\"},{\"name\":\"_investor\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"deallocate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"released\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newManager\",\"type\":\"address\"}],\"name\":\"changeManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newReleased\",\"type\":\"bool\"}],\"name\":\"setReleased\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_oldReleaseTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_newReleaseTime\",\"type\":\"uint256\"}],\"name\":\"ReleaseTimeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_oldReleased\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"_newReleased\",\"type\":\"bool\"}],\"name\":\"ReleasedChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_oldManager\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_newManager\",\"type\":\"address\"}],\"name\":\"ManagerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"}]","ContractName":"CrowdsaleToken","CompilerVersion":"v0.4.11+commit.68ef5810","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://3e9c309c536e61af351215833ce199420c4297415f71d73d0fbbbc9170e21d67"}]}