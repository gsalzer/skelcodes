{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.16;\r\n/**\r\n* @title ICO CONTRACT\r\n* @dev ERC-20 Token Standard Compliant\r\n* @author Fares A. Akel C.\r\n*/\r\n\r\n/**\r\n * @title SafeMath by OpenZeppelin\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n\r\n}\r\n\r\ncontract token {\r\n\r\n    mapping (address => uint256) public balanceOf;\r\n    function transfer(address _to, uint256 _value);\r\n\r\n    }\r\n\r\ncontract ICO {\r\n    using SafeMath for uint256;\r\n    //This ico have 2 stages\r\n    enum State {\r\n        Ongoin,\r\n        Successful\r\n    }\r\n    //public variables\r\n    State public state = State.Ongoin; //Set initial stage\r\n    uint256 public startTime = now; //block-time when it was deployed\r\n    //List of prices, as both, eth and token have 18 decimal, its a direct factor\r\n    uint256 public price = 1500; //1500 tokens per eth fixed\r\n    uint256 public totalRaised; //eth in wei\r\n    uint256 public totalDistributed; //tokens with decimals\r\n    uint256 public ICOdeadline; //deadline\r\n    uint256 public closedAt; //time when it finished\r\n    token public tokenReward; //token address used as reward\r\n    address public creator; //creator of the contract\r\n    address public beneficiary; //beneficiary of the contract\r\n    string public campaignUrl; //URL of the campaing\r\n    uint8 constant version = 1;\r\n\r\n    //events for log\r\n    event LogFundingReceived(address _addr, uint _amount, uint _currentTotal);\r\n    event LogBeneficiaryPaid(address _beneficiaryAddress);\r\n    event LogFundingSuccessful(uint _totalRaised);\r\n    event LogFunderInitialized(\r\n        address _creator,\r\n        address _beneficiary,\r\n        string _url,\r\n        uint256 _ICOdeadline);\r\n    event LogContributorsPayout(address _addr, uint _amount);\r\n\r\n    modifier notFinished() {\r\n        require(state != State.Successful);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @notice ICO constructor\r\n    * @param _campaignUrl is the ICO _url\r\n    * @param _addressOfTokenUsedAsReward is the token distributed\r\n    * @param _timeInDaysForICO is the days the campaing will last\r\n    */\r\n    function ICO (string _campaignUrl, token _addressOfTokenUsedAsReward, uint256 _timeInDaysForICO) public {\r\n        creator = msg.sender; //creator wallet address\r\n        beneficiary = msg.sender; //beneficiary wallet address\r\n        campaignUrl = _campaignUrl; //URL of the campaing\r\n        tokenReward = token(_addressOfTokenUsedAsReward); //token used as reward\r\n        ICOdeadline = startTime + _timeInDaysForICO * 1 days; //deadline is _timeInDaysForICO days from now\r\n\r\n        //logs\r\n        LogFunderInitialized(\r\n            creator,\r\n            beneficiary,\r\n            campaignUrl,\r\n            ICOdeadline);\r\n    }\r\n\r\n    /**\r\n    * @notice contribution handler\r\n    * @dev user must provide enough gas\r\n    */\r\n    function contribute() public notFinished payable {\r\n\r\n        uint256 tokenBought;\r\n        totalRaised = totalRaised.add(msg.value); //increase raised counter\r\n        tokenBought = msg.value.mul(price); //calculate how much tokens will be sent\r\n        totalDistributed = totalDistributed.add(tokenBought); //increase distributed token counter\r\n        require(beneficiary.send(msg.value)); //transfer funds\r\n        tokenReward.transfer(msg.sender,tokenBought); //transfer tokens\r\n        \r\n        //logs\r\n        LogFundingReceived(msg.sender, msg.value, totalRaised);\r\n        LogContributorsPayout(msg.sender, tokenBought);\r\n        checkIfFundingCompleteOrExpired();\r\n\r\n    }\r\n\r\n    /**\r\n    * @notice check status\r\n    */\r\n    function checkIfFundingCompleteOrExpired() public {\r\n        \r\n        if(now > ICOdeadline && state!=State.Successful ) { //if we reach ico deadline and its not Successful yet\r\n            state = State.Successful; //ico becomes Successful\r\n            closedAt = now; //we complete now\r\n            \r\n            LogFundingSuccessful(totalRaised); //we log the finish\r\n            finished(); //and execute closure\r\n        }\r\n    }\r\n\r\n   /**\r\n    * @notice closure handler\r\n    */\r\n    function finished() public { //When finished eth and tokens remaining are transfered to beneficiary\r\n        require(state == State.Successful); //only when Successful\r\n        require(beneficiary.send(this.balance)); //we require the transfer has been sent\r\n\r\n        uint256 remaining = tokenReward.balanceOf(this); //get the total tokens remaining\r\n        tokenReward.transfer(beneficiary,remaining); //transfer remaining tokens to the beneficiary\r\n\r\n        LogBeneficiaryPaid(beneficiary);\r\n    }\r\n\r\n    /**\r\n    * @dev user must provide enough gas\r\n    */\r\n    function () public payable {\r\n        contribute(); //this function require more gas than a normal callback function, sender must provide it\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenReward\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"checkIfFundingCompleteOrExpired\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ICOdeadline\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"closedAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finished\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"contribute\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalDistributed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"campaignUrl\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_campaignUrl\",\"type\":\"string\"},{\"name\":\"_addressOfTokenUsedAsReward\",\"type\":\"address\"},{\"name\":\"_timeInDaysForICO\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_currentTotal\",\"type\":\"uint256\"}],\"name\":\"LogFundingReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_beneficiaryAddress\",\"type\":\"address\"}],\"name\":\"LogBeneficiaryPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_totalRaised\",\"type\":\"uint256\"}],\"name\":\"LogFundingSuccessful\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_creator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_url\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_ICOdeadline\",\"type\":\"uint256\"}],\"name\":\"LogFunderInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"LogContributorsPayout\",\"type\":\"event\"}]","ContractName":"ICO","CompilerVersion":"v0.4.16+commit.d7661dd9","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000600000000000000000000000002e21dfee620608aef6f023533c4db4c5eacb47560000000000000000000000000000000000000000000000000000000000000026000000000000000000000000000000000000000000000000000000000000001768747470733a2f2f7777772e626c756e6e65722e636f6d000000000000000000","Library":"","SwarmSource":"bzzr://5c2e2abc724c4818c31865f1058224873df0a8df567c15250aa5496ceecb27a3"}]}