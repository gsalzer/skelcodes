{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.16;\r\n\r\n// copyright contact@bytether.com\r\n\r\ncontract BasicAccessControl {\r\n    address public owner;\r\n    address[] public moderators;\r\n\r\n    function BasicAccessControl() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    modifier onlyModerators() {\r\n        if (msg.sender != owner) {\r\n            bool found = false;\r\n            for (uint index = 0; index < moderators.length; index++) {\r\n                if (moderators[index] == msg.sender) {\r\n                    found = true;\r\n                    break;\r\n                }\r\n            }\r\n            require(found);\r\n        }\r\n        _;\r\n    }\r\n\r\n    function ChangeOwner(address _newOwner) onlyOwner public {\r\n        if (_newOwner != address(0)) {\r\n            owner = _newOwner;\r\n        }\r\n    }\r\n\r\n    function Kill() onlyOwner public {\r\n        selfdestruct(owner);\r\n    }\r\n\r\n    function AddModerator(address _newModerator) onlyOwner public {\r\n        if (_newModerator != address(0)) {\r\n            for (uint index = 0; index < moderators.length; index++) {\r\n                if (moderators[index] == _newModerator) {\r\n                    return;\r\n                }\r\n            }\r\n            moderators.push(_newModerator);\r\n        }\r\n    }\r\n    \r\n    function RemoveModerator(address _oldModerator) onlyOwner public {\r\n        uint foundIndex = 0;\r\n        for (; foundIndex < moderators.length; foundIndex++) {\r\n            if (moderators[foundIndex] == _oldModerator) {\r\n                break;\r\n            }\r\n        }\r\n        if (foundIndex < moderators.length) {\r\n            moderators[foundIndex] = moderators[moderators.length-1];\r\n            delete moderators[moderators.length-1];\r\n            moderators.length--;\r\n        }\r\n    }\r\n}\r\n\r\ninterface TokenRecipient { \r\n    function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public; \r\n}\r\n\r\ninterface CrossForkDistribution {\r\n    function getDistributedAmount(uint64 _requestId, string _btcAddress, address _receiver) public;\r\n}\r\n\r\ninterface CrossForkCallback {\r\n    function callbackCrossFork(uint64 _requestId, uint256 _amount, bytes32 _referCodeHash) public;\r\n}\r\n\r\ncontract TokenERC20 {\r\n    uint256 public totalSupply;\r\n\r\n    mapping (address => uint256) public balanceOf;\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Burn(address indexed from, uint256 value);\r\n\r\n    function _transfer(address _from, address _to, uint _value) internal {\r\n        require(_to != 0x0);\r\n        require(balanceOf[_from] >= _value);\r\n        require(balanceOf[_to] + _value > balanceOf[_to]);\r\n        uint previousBalances = balanceOf[_from] + balanceOf[_to];\r\n        balanceOf[_from] -= _value;\r\n        balanceOf[_to] += _value;\r\n        Transfer(_from, _to, _value);\r\n        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public {\r\n        _transfer(msg.sender, _to, _value);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        require(_value <= allowance[_from][msg.sender]);\r\n        allowance[_from][msg.sender] -= _value;\r\n        _transfer(_from, _to, _value);\r\n        return true; \r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool success) {\r\n        allowance[msg.sender][_spender] = _value;\r\n        return true;\r\n    }\r\n\r\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) {\r\n        TokenRecipient spender = TokenRecipient(_spender);\r\n        if (approve(_spender, _value)) {\r\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\r\n            return true;\r\n        }\r\n    }\r\n\r\n    function burn(uint256 _value) public returns (bool success) {\r\n        require(balanceOf[msg.sender] >= _value);\r\n        balanceOf[msg.sender] -= _value;\r\n        totalSupply -= _value;\r\n        Burn(msg.sender, _value);\r\n        return true;\r\n    }\r\n\r\n    function burnFrom(address _from, uint256 _value) public returns (bool success) {\r\n        require(balanceOf[_from] >= _value);\r\n        require(_value <= allowance[_from][msg.sender]);\r\n        balanceOf[_from] -= _value;\r\n        allowance[_from][msg.sender] -= _value;\r\n        totalSupply -= _value;\r\n        Burn(_from, _value);\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract BTHToken is BasicAccessControl, TokenERC20, CrossForkCallback {\r\n    // metadata\r\n    string public constant name = \"Bytether\";\r\n    string public constant symbol = \"BTH\";\r\n    uint256 public constant decimals = 18;\r\n    string public version = \"1.0\";\r\n    \r\n    // cross fork data\r\n    enum ForkResultCode { \r\n        SUCCESS,\r\n        TRIGGERED,\r\n        RECEIVED,\r\n        PENDING,\r\n        FAILED,\r\n        ID_MISMATCH,\r\n        NOT_ENOUGH_BALANCE,\r\n        NOT_RECEIVED\r\n    }\r\n    enum ClaimReferResultCode {\r\n        SUCCESS,\r\n        NOT_ENOUGH_BALANCE\r\n    }\r\n    struct CrossForkData {\r\n        string btcAddress;\r\n        address receiver;\r\n        uint256 amount;\r\n        bytes32 referCodeHash;\r\n        uint createTime;\r\n    }\r\n    uint64 public crossForkCount = 0;\r\n    uint public referBenefitRate = 10; // 10 btc -> 1 bth\r\n    bool public crossForking = false;\r\n    mapping (uint64 => CrossForkData) crossForkMapping;\r\n    mapping (string => uint64) crossForkIds;\r\n    mapping (bytes32 => uint256) referBenefits; // referCodeHash -> bth amount\r\n    address public crossForkDistribution = 0x0; // crossfork contract\r\n    uint256 public constant satoshi_bth_decimals = 10 ** 10;\r\n    \r\n    event LogRevertCrossFork(bytes32 indexed btcAddressHash, address indexed receiver, uint64 indexed requestId, uint256 amount, ForkResultCode result);\r\n    event LogTriggerCrossFork(bytes32 indexed btcAddressHash, uint64 indexed requestId, ForkResultCode result);\r\n    event LogCrossFork(uint64 indexed requestId, address receiver, uint256 amount, ForkResultCode result);\r\n    event LogClaimReferBenefit(bytes32 indexed referCodeHash, address receiver, uint256 amount, ClaimReferResultCode result);\r\n    \r\n    // deposit address\r\n    address public crossForkFundDeposit; // deposit address for cross fork\r\n    address public bthFundDeposit; // deposit address for user growth pool & marketing\r\n    address public developerFundDeposit; // deposit address for developer fund\r\n    \r\n    // fund distribution\r\n    uint256 public crossForkFund = 17 * (10**6) * 10**decimals; //17m reserved for BitCoin Cross-Fork\r\n    uint256 public marketingFund = 2  * (10**6) * 10**decimals; //2m reserved for marketing\r\n    uint256 public userPoolFund  = 1  * (10**6) * 10**decimals; //1m for user growth pool\r\n    uint256 public developerFund = 1  * (10**6) * 10**decimals; //1m reserved for developers\r\n    \r\n    // for future feature\r\n    uint256 public sellPrice;\r\n    uint256 public buyPrice;\r\n    bool public trading = false;\r\n    mapping (address => bool) public frozenAccount;\r\n    event FrozenFunds(address target, bool frozen);\r\n    \r\n    // modifier\r\n    modifier isCrossForking {\r\n        require(crossForking == true || msg.sender == owner);\r\n        require(crossForkDistribution != 0x0);\r\n        _;\r\n    }\r\n    \r\n    modifier isTrading {\r\n        require(trading == true || msg.sender == owner);\r\n        _;\r\n    } \r\n\r\n    // constructor\r\n    function BTHToken(address _crossForkDistribution, address _crossForkFundDeposit, address _bthFundDeposit, address _developerFundDeposit) public {\r\n        totalSupply = crossForkFund + marketingFund + userPoolFund + developerFund;\r\n        crossForkDistribution = _crossForkDistribution;\r\n        crossForkFundDeposit = _crossForkFundDeposit;\r\n        bthFundDeposit = _bthFundDeposit;\r\n        developerFundDeposit = _developerFundDeposit;\r\n        \r\n        balanceOf[crossForkFundDeposit] += crossForkFund;\r\n        balanceOf[bthFundDeposit] += marketingFund + userPoolFund;\r\n        balanceOf[developerFundDeposit] += developerFund;\r\n    }\r\n\r\n    function () payable public {}\r\n    \r\n    // only admin\r\n    function setCrossForkDistribution(address _crossForkDistribution) onlyOwner public {\r\n        crossForkDistribution = _crossForkDistribution;\r\n    }\r\n\r\n    function setDepositAddress(address _crossForkFund, address _bthFund, address _developerFund) onlyOwner public {\r\n        crossForkFundDeposit = _crossForkFund;\r\n        bthFundDeposit = _bthFund;\r\n        developerFundDeposit = _developerFund;\r\n    }\r\n\r\n    function setPrices(uint256 _newSellPrice, uint256 _newBuyPrice) onlyOwner public {\r\n        sellPrice = _newSellPrice;\r\n        buyPrice = _newBuyPrice;\r\n    }\r\n\r\n    function setReferBenefitRate(uint _rate) onlyOwner public {\r\n        referBenefitRate = _rate;\r\n    }\r\n    \r\n    // only moderators\r\n    function toggleCrossForking() onlyModerators public {\r\n        crossForking = !crossForking;\r\n    }\r\n    \r\n    function toggleTrading() onlyModerators public {\r\n        trading = !trading;\r\n    }\r\n    \r\n    function claimReferBenefit(string _referCode, address _receiver) onlyModerators public {\r\n        bytes32 referCodeHash = keccak256(_referCode);\r\n        uint256 totalAmount = referBenefits[referCodeHash];\r\n        if (totalAmount==0) {\r\n            LogClaimReferBenefit(referCodeHash, _receiver, 0, ClaimReferResultCode.SUCCESS);\r\n            return;\r\n        }\r\n        if (balanceOf[bthFundDeposit] < totalAmount) {\r\n            LogClaimReferBenefit(referCodeHash, _receiver, 0, ClaimReferResultCode.NOT_ENOUGH_BALANCE);\r\n            return;\r\n        }\r\n        \r\n        referBenefits[referCodeHash] = 0;\r\n        balanceOf[bthFundDeposit] -= totalAmount;\r\n        balanceOf[_receiver] += totalAmount;\r\n        LogClaimReferBenefit(referCodeHash, _receiver, totalAmount, ClaimReferResultCode.SUCCESS);\r\n    }\r\n\r\n    // in case there is an error\r\n    function revertCrossFork(string _btcAddress) onlyModerators public {\r\n        bytes32 btcAddressHash = keccak256(_btcAddress);\r\n        uint64 requestId = crossForkIds[_btcAddress];\r\n        if (requestId == 0) {\r\n            LogRevertCrossFork(btcAddressHash, 0x0, 0, 0, ForkResultCode.NOT_RECEIVED);\r\n            return;\r\n        }\r\n        CrossForkData storage crossForkData = crossForkMapping[requestId];\r\n        uint256 amount = crossForkData.amount;        \r\n        address receiver = crossForkData.receiver;\r\n        if (balanceOf[receiver] < crossForkData.amount) {\r\n            LogRevertCrossFork(btcAddressHash, receiver, requestId, amount, ForkResultCode.NOT_ENOUGH_BALANCE);\r\n            return;\r\n        }\r\n        \r\n        // revert\r\n        balanceOf[crossForkData.receiver] -= crossForkData.amount;\r\n        balanceOf[crossForkFundDeposit] += crossForkData.amount;\r\n        crossForkIds[_btcAddress] = 0;\r\n        crossForkData.btcAddress = \"\";\r\n        crossForkData.receiver = 0x0;\r\n        crossForkData.amount = 0;\r\n        crossForkData.createTime = 0;\r\n        \r\n        // revert refer claimable amount if possible\r\n        if (referBenefits[crossForkData.referCodeHash] > 0) {\r\n            uint256 deductAmount = crossForkData.amount;\r\n            if (referBenefits[crossForkData.referCodeHash] < deductAmount) {\r\n                deductAmount = referBenefits[crossForkData.referCodeHash];\r\n            }\r\n            referBenefits[crossForkData.referCodeHash] -= deductAmount;\r\n        }\r\n        \r\n        LogRevertCrossFork(btcAddressHash, receiver, requestId, amount, ForkResultCode.SUCCESS);\r\n    }\r\n\r\n    // public\r\n    function getCrossForkId(string _btcAddress) constant public returns(uint64) {\r\n        return crossForkIds[_btcAddress];\r\n    }\r\n    \r\n    function getCrossForkData(uint64 _id) constant public returns(string, address, uint256, uint) {\r\n        CrossForkData storage crossForkData = crossForkMapping[_id];\r\n        return (crossForkData.btcAddress, crossForkData.receiver, crossForkData.amount, crossForkData.createTime);\r\n    }\r\n    \r\n    function getReferBenefit(string _referCode) constant public returns(uint256) {\r\n        return referBenefits[keccak256(_referCode)];\r\n    }\r\n    \r\n    function callbackCrossFork(uint64 _requestId, uint256 _amount, bytes32 _referCodeHash) public {\r\n        if (msg.sender != crossForkDistribution || _amount == 0) {\r\n            LogCrossFork(_requestId, 0x0, 0, ForkResultCode.FAILED);\r\n            return;\r\n        }\r\n        CrossForkData storage crossForkData = crossForkMapping[_requestId];\r\n        if (crossForkData.receiver == 0x0) {\r\n            LogCrossFork(_requestId, crossForkData.receiver, 0, ForkResultCode.ID_MISMATCH);\r\n            return;\r\n        }\r\n        if (crossForkIds[crossForkData.btcAddress] != 0) {\r\n            LogCrossFork(_requestId, crossForkData.receiver, crossForkData.amount, ForkResultCode.RECEIVED);\r\n            return;\r\n        }\r\n        crossForkIds[crossForkData.btcAddress] = _requestId;\r\n        crossForkData.amount = _amount*satoshi_bth_decimals;\r\n        \r\n        // add fund for address\r\n        if (balanceOf[crossForkFundDeposit] < crossForkData.amount) {\r\n            LogCrossFork(_requestId, crossForkData.receiver, crossForkData.amount, ForkResultCode.NOT_ENOUGH_BALANCE);\r\n            return;\r\n        }\r\n        balanceOf[crossForkFundDeposit] -= crossForkData.amount;\r\n        balanceOf[crossForkData.receiver] += crossForkData.amount;\r\n        if (referBenefitRate > 0) {\r\n            crossForkData.referCodeHash = _referCodeHash;\r\n            referBenefits[_referCodeHash] += crossForkData.amount / referBenefitRate;\r\n        }\r\n        \r\n        LogCrossFork(_requestId, crossForkData.receiver, crossForkData.amount, ForkResultCode.SUCCESS);\r\n    }\r\n    \r\n    function triggerCrossFork(string _btcAddress) isCrossForking public returns(ForkResultCode) {\r\n        bytes32 btcAddressHash = keccak256(_btcAddress);\r\n        if (crossForkIds[_btcAddress] > 0) {\r\n            LogTriggerCrossFork(btcAddressHash, crossForkIds[_btcAddress], ForkResultCode.RECEIVED);\r\n            return ForkResultCode.RECEIVED;\r\n        }\r\n\r\n        crossForkCount += 1;\r\n        CrossForkData storage crossForkData = crossForkMapping[crossForkCount];\r\n        crossForkData.btcAddress = _btcAddress;\r\n        crossForkData.receiver = msg.sender;\r\n        crossForkData.amount = 0;\r\n        crossForkData.createTime = now;\r\n        CrossForkDistribution crossfork = CrossForkDistribution(crossForkDistribution);\r\n        crossfork.getDistributedAmount(crossForkCount, _btcAddress, msg.sender);\r\n        LogTriggerCrossFork(btcAddressHash, crossForkIds[_btcAddress], ForkResultCode.TRIGGERED);\r\n        return ForkResultCode.TRIGGERED;\r\n    }\r\n    \r\n    function _transfer(address _from, address _to, uint _value) internal {\r\n        require (_to != 0x0);\r\n        require (balanceOf[_from] > _value);\r\n        require (balanceOf[_to] + _value > balanceOf[_to]);\r\n        require(!frozenAccount[_from]);\r\n        require(!frozenAccount[_to]);\r\n        balanceOf[_from] -= _value;\r\n        balanceOf[_to] += _value;\r\n        Transfer(_from, _to, _value);\r\n    }\r\n    \r\n    function freezeAccount(address _target, bool _freeze) onlyOwner public {\r\n        frozenAccount[_target] = _freeze;\r\n        FrozenFunds(_target, _freeze);\r\n    }\r\n    \r\n    function buy() payable isTrading public {\r\n        uint amount = msg.value / buyPrice;\r\n        _transfer(this, msg.sender, amount);\r\n    }\r\n\r\n    function sell(uint256 amount) isTrading public {\r\n        require(this.balance >= amount * sellPrice);\r\n        _transfer(msg.sender, this, amount);\r\n        msg.sender.transfer(amount * sellPrice);\r\n    }\r\n    \r\n    \r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_crossForkFund\",\"type\":\"address\"},{\"name\":\"_bthFund\",\"type\":\"address\"},{\"name\":\"_developerFund\",\"type\":\"address\"}],\"name\":\"setDepositAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newSellPrice\",\"type\":\"uint256\"},{\"name\":\"_newBuyPrice\",\"type\":\"uint256\"}],\"name\":\"setPrices\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crossForkFundDeposit\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"toggleTrading\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crossForkFund\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_btcAddress\",\"type\":\"string\"}],\"name\":\"triggerCrossFork\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bthFundDeposit\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"userPoolFund\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint64\"}],\"name\":\"getCrossForkData\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"referBenefitRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_referCode\",\"type\":\"string\"},{\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"claimReferBenefit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_requestId\",\"type\":\"uint64\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_referCodeHash\",\"type\":\"bytes32\"}],\"name\":\"callbackCrossFork\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_btcAddress\",\"type\":\"string\"}],\"name\":\"revertCrossFork\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"toggleCrossForking\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newModerator\",\"type\":\"address\"}],\"name\":\"AddModerator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_crossForkDistribution\",\"type\":\"address\"}],\"name\":\"setCrossForkDistribution\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"developerFundDeposit\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crossForking\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crossForkCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"developerFund\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crossForkDistribution\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_oldModerator\",\"type\":\"address\"}],\"name\":\"RemoveModerator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"moderators\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"Kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"satoshi_bth_decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_btcAddress\",\"type\":\"string\"}],\"name\":\"getCrossForkId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"setReferBenefitRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"},{\"name\":\"_freeze\",\"type\":\"bool\"}],\"name\":\"freezeAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"trading\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_referCode\",\"type\":\"string\"}],\"name\":\"getReferBenefit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"marketingFund\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"ChangeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_crossForkDistribution\",\"type\":\"address\"},{\"name\":\"_crossForkFundDeposit\",\"type\":\"address\"},{\"name\":\"_bthFundDeposit\",\"type\":\"address\"},{\"name\":\"_developerFundDeposit\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"btcAddressHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"requestId\",\"type\":\"uint64\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"result\",\"type\":\"uint8\"}],\"name\":\"LogRevertCrossFork\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"btcAddressHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"requestId\",\"type\":\"uint64\"},{\"indexed\":false,\"name\":\"result\",\"type\":\"uint8\"}],\"name\":\"LogTriggerCrossFork\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"requestId\",\"type\":\"uint64\"},{\"indexed\":false,\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"result\",\"type\":\"uint8\"}],\"name\":\"LogCrossFork\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"referCodeHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"result\",\"type\":\"uint8\"}],\"name\":\"LogClaimReferBenefit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"FrozenFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"}]","ContractName":"BTHToken","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000009ef2767b5c265cd032a94601203639abcd9cb92f000000000000000000000000b241799acafd92f1597d27ccc382c31cdb374785000000000000000000000000a81135aa1630307e52097b605791f293865a7bbc000000000000000000000000dc34edb880f2ec86243274d94026fbf307f80e89","Library":"","SwarmSource":"bzzr://9e181b768832c4e6725776d8378957a62bcbd8d46202f1b635d74164792014e6"}]}