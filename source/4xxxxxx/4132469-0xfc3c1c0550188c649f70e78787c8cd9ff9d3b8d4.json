{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\n/**\r\n                +----+\r\n               /    /|\r\n   by cubic   +----+ |\r\n   2017       |    | +\r\n              |    |/\r\n              +----+\r\n*/\r\n\r\ncontract Cubic {\r\n\r\n    uint public creationTime = now;\r\n    address public owner = msg.sender;\r\n    uint256 public totalEthHandled = 0; \r\n    uint public rate = 0; \r\n    Cube[] public Cubes;\r\n\r\n    /*\r\n    Events\r\n    */\r\n\r\n    event Freeze(address indexed from, address indexed cubeAddress, uint amount, uint unlockedAfter, string api);\r\n    event Deliver(address indexed cube, address indexed destination, uint amount);\r\n\r\n    /*\r\n    Public/External functions\r\n    */\r\n\r\n    function() payable { }\r\n\r\n    function getCubeCount() external constant returns(uint) {\r\n        return Cubes.length;\r\n    }\r\n\r\n    function freeze(uint blocks) external payable {\r\n        secure(blocks, 'cubic');\r\n    }\r\n\r\n    function freezeAPI(uint blocks, string api) external payable {\r\n        secure(blocks, api);\r\n    }\r\n\r\n    function forgetCube(Cube iceCube) external {\r\n\r\n        uint id = iceCube.id();\r\n        require(msg.sender == address(Cubes[id]));\r\n\r\n        if (id != Cubes.length - 1) {\r\n            Cubes[id] = Cubes[Cubes.length - 1];\r\n            Cubes[id].setId(id);\r\n        }\r\n        Cubes.length--;        \r\n\r\n        Deliver(address(iceCube), iceCube.destination(), iceCube.balance);\r\n    }\r\n\r\n    /*\r\n    Only Owner\r\n    */\r\n\r\n    function withdraw() external {\r\n        require(msg.sender == owner);        \r\n        owner.transfer(this.balance);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) external {\r\n        require(msg.sender == owner);        \r\n        owner = newOwner;\r\n    }\r\n\r\n    /*\r\n    Private\r\n    */\r\n\r\n\tfunction secure(uint blocks, string api) private {\r\n\r\n        require(msg.value > 0);\r\n        uint amountToFreeze = msg.value; \r\n        totalEthHandled = add(totalEthHandled, amountToFreeze);\r\n          \r\n        /* \r\n         The rate starts at zero, over time as this \r\n         contract is trusted the higher the fee \r\n         becomes with an upward limit of half of one\r\n         percent (.50%). The owner of the contract CAN NOT \r\n         adjust this. \r\n        */\r\n        if (rate != 200 ) {\r\n\r\n            if (totalEthHandled > 5000 ether) {\r\n                setRate(200);  //.50 of one percent\r\n            } else if (totalEthHandled > 1000 ether) { \r\n                setRate(500);  //.20 of one percent\r\n            } else if (totalEthHandled > 100 ether) { \r\n                setRate(1000); //.10 of one percent\r\n            }\r\n        }\r\n\r\n        if (rate > 0) {\r\n            uint fee = div(amountToFreeze, rate);\r\n            amountToFreeze = sub(amountToFreeze, fee);\r\n        }\r\n\r\n        Cube newCube = (new Cube).value(amountToFreeze)(msg.sender, add(block.number, blocks), this);\r\n        newCube.setId(Cubes.push(newCube) - 1);\r\n        Freeze(msg.sender, address(newCube), amountToFreeze, add(block.number, blocks), api);\r\n\t}\r\n\r\n    function setRate(uint _newRate) private {\r\n        rate = _newRate; \r\n    }\r\n\r\n    function add(uint a, uint b) private returns (uint) {\r\n        uint c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n\r\n    function div(uint a, uint b) private returns (uint) {\r\n        assert(b > 0);\r\n        uint c = a / b;\r\n        assert(a == b * c + a % b);\r\n        return c;\r\n    }\r\n\r\n    function sub(uint a, uint b) private returns (uint) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n}\r\n\r\ncontract Cube {\r\n\r\n    address public destination;\r\n    Cubic public cubicContract;    \r\n    uint public unlockedAfter;\r\n    uint public id;\r\n    \r\n\tfunction Cube(address _destination, uint _unlockedAfter, Cubic _cubicContract) payable {\r\n\t\tdestination = _destination;\r\n\t\tunlockedAfter = _unlockedAfter;\r\n        cubicContract = _cubicContract;       \r\n\t}\r\n\r\n    function() payable {\r\n        require(msg.value == 0);\r\n    }\r\n\r\n    function setId(uint _id) external {\r\n        require(msg.sender == address(cubicContract));\r\n        id = _id; \r\n    }\r\n\r\n    function deliver() external {\r\n        assert(block.number > unlockedAfter); \r\n        cubicContract.forgetCube(this);\r\n\t\tselfdestruct(destination);\t\t\r\n\t}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCubeCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"iceCube\",\"type\":\"address\"}],\"name\":\"forgetCube\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Cubes\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"blocks\",\"type\":\"uint256\"}],\"name\":\"freeze\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"creationTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalEthHandled\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"blocks\",\"type\":\"uint256\"},{\"name\":\"api\",\"type\":\"string\"}],\"name\":\"freezeAPI\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"cubeAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"unlockedAfter\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"api\",\"type\":\"string\"}],\"name\":\"Freeze\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"cube\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"destination\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deliver\",\"type\":\"event\"}]","ContractName":"Cubic","CompilerVersion":"v0.4.11+commit.68ef5810","OptimizationUsed":"1","Runs":"0","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://0f55a9bf2c71884b0a81669f67074aab70f2dd93528b67cd275d954d8978a325"}]}