{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public constant returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\npragma solidity ^0.4.11;\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n\r\ncontract DebtToken {\r\n  using SafeMath for uint256;\r\n  /**\r\n  Recognition data\r\n  */\r\n  string public name;\r\n  string public symbol;\r\n  string public version = 'DT0.1';\r\n  uint256 public decimals = 18;\r\n\r\n  /**\r\n  ERC20 properties\r\n  */\r\n  uint256 public totalSupply;\r\n  mapping(address => uint256) public balances;\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n  /**\r\n  Mintable Token properties\r\n  */\r\n  bool public mintingFinished = true;\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n\r\n  /**\r\n  Actual logic data\r\n  */\r\n  uint256 public dayLength;//Number of seconds in a day\r\n  uint256 public loanTerm;//Loan term in days\r\n  uint256 public exchangeRate; //Exchange rate for Ether to loan coins\r\n  uint256 public initialSupply; //Keep record of Initial value of Loan\r\n  uint256 public loanActivation; //Timestamp the loan was funded\r\n\r\n  uint256 public interestRatePerCycle; //Interest rate per interest cycle\r\n  uint256 public interestCycleLength; //Total number of days per interest cycle\r\n\r\n  uint256 public totalInterestCycles; //Total number of interest cycles completed\r\n  uint256 public lastInterestCycle; //Keep record of Initial value of Loan\r\n\r\n  address public lender; //The address from which the loan will be funded, and to which the refund will be directed\r\n  address public borrower;\r\n\r\n  uint256 public constant PERCENT_DIVISOR = 100;\r\n\r\n  function DebtToken(\r\n      string _tokenName,\r\n      string _tokenSymbol,\r\n      uint256 _initialAmount,\r\n      uint256 _exchangeRate,\r\n      uint256 _dayLength,\r\n      uint256 _loanTerm,\r\n      uint256 _loanCycle,\r\n      uint256 _interestRatePerCycle,\r\n      address _lender,\r\n      address _borrower\r\n      ) {\r\n\r\n      require(_exchangeRate > 0);\r\n      require(_initialAmount > 0);\r\n      require(_dayLength > 0);\r\n      require(_loanCycle > 0);\r\n\r\n      require(_lender != 0x0);\r\n      require(_borrower != 0x0);\r\n\r\n      exchangeRate = _exchangeRate;                           // Exchange rate for the coins\r\n      initialSupply = _initialAmount.mul(exchangeRate);            // Update initial supply\r\n      totalSupply = initialSupply;                           //Update total supply\r\n      balances[_borrower] = initialSupply;                 // Give the creator all initial tokens\r\n\r\n      name = _tokenName;                                    // Amount of decimals for display purposes\r\n      symbol = _tokenSymbol;                              // Set the symbol for display purposes\r\n\r\n      dayLength = _dayLength;                             //Set the length of each day in seconds...For dev purposes\r\n      loanTerm = _loanTerm;                               //Set the number of days, for loan maturity\r\n      interestCycleLength = _loanCycle;                   //set the Interest cycle period\r\n      interestRatePerCycle = _interestRatePerCycle;                      //Set the Interest rate per cycle\r\n      lender = _lender;                             //set lender address\r\n      borrower = _borrower;\r\n\r\n      Transfer(0,_borrower,totalSupply);//Allow funding be tracked\r\n  }\r\n\r\n  /**\r\n  Debt token functionality\r\n   */\r\n  function actualTotalSupply() public constant returns(uint) {\r\n    uint256 coins;\r\n    uint256 cycle;\r\n    (coins,cycle) = calculateInterestDue();\r\n    return totalSupply.add(coins);\r\n  }\r\n\r\n  /**\r\n  Fetch total value of loan in wei (Initial +interest)\r\n  */\r\n  function getLoanValue(bool initial) public constant returns(uint){\r\n    //TODO get a more dynamic way to calculate\r\n    if(initial == true)\r\n      return initialSupply.div(exchangeRate);\r\n    else{\r\n      uint totalTokens = actualTotalSupply().sub(balances[borrower]);\r\n      return totalTokens.div(exchangeRate);\r\n    }\r\n  }\r\n\r\n  /**\r\n  Fetch total coins gained from interest\r\n  */\r\n  function getInterest() public constant returns (uint){\r\n    return actualTotalSupply().sub(initialSupply);\r\n  }\r\n\r\n  /**\r\n  Checks that caller's address is the lender\r\n  */\r\n  function isLender() private constant returns(bool){\r\n    return msg.sender == lender;\r\n  }\r\n\r\n  /**\r\n  Check that caller's address is the borrower\r\n  */\r\n  function isBorrower() private constant returns (bool){\r\n    return msg.sender == borrower;\r\n  }\r\n\r\n  function isLoanFunded() public constant returns(bool) {\r\n    return balances[lender] > 0 && balances[borrower] == 0;\r\n  }\r\n\r\n  /**\r\n  Check if the loan is mature for interest\r\n  */\r\n  function isTermOver() public constant returns (bool){\r\n    if(loanActivation == 0)\r\n      return false;\r\n    else\r\n      return now >= loanActivation.add( dayLength.mul(loanTerm) );\r\n  }\r\n\r\n  /**\r\n  Check if updateInterest() needs to be called before refundLoan()\r\n  */\r\n  function isInterestStatusUpdated() public constant returns(bool){\r\n    if(!isTermOver())\r\n      return true;\r\n    else\r\n      return !( now >= lastInterestCycle.add( interestCycleLength.mul(dayLength) ) );\r\n  }\r\n\r\n  /**\r\n  calculate the total number of passed interest cycles and coin value\r\n  */\r\n  function calculateInterestDue() public constant returns(uint256 _coins,uint256 _cycle){\r\n    if(!isTermOver() || !isLoanFunded())\r\n      return (0,0);\r\n    else{\r\n      uint timeDiff = now.sub(lastInterestCycle);\r\n      _cycle = timeDiff.div(dayLength.mul(interestCycleLength) );\r\n      _coins = _cycle.mul( interestRatePerCycle.mul(initialSupply) ).div(PERCENT_DIVISOR);//Delayed division to avoid too early floor\r\n    }\r\n  }\r\n\r\n  /**\r\n  Update the interest of the contract\r\n  */\r\n  function updateInterest() public {\r\n    require( isTermOver() );\r\n    uint interest_coins;\r\n    uint256 interest_cycle;\r\n    (interest_coins,interest_cycle) = calculateInterestDue();\r\n    assert(interest_coins > 0 && interest_cycle > 0);\r\n    totalInterestCycles =  totalInterestCycles.add(interest_cycle);\r\n    lastInterestCycle = lastInterestCycle.add( interest_cycle.mul( interestCycleLength.mul(dayLength) ) );\r\n    mint(lender , interest_coins);\r\n  }\r\n\r\n  /**\r\n  Make payment to inititate loan\r\n  */\r\n  function fundLoan() public payable{\r\n    require(isLender());\r\n    require(msg.value == getLoanValue(true)); //Ensure input available\r\n    require(!isLoanFunded()); //Avoid double payment\r\n\r\n    loanActivation = now;  //store the time loan was activated\r\n    lastInterestCycle = now.add(dayLength.mul(loanTerm) ) ; //store the date interest matures\r\n    mintingFinished = false;                 //Enable minting\r\n    transferFrom(borrower,lender,totalSupply);\r\n\r\n    borrower.transfer(msg.value);\r\n  }\r\n\r\n  /**\r\n  Make payment to refund loan\r\n  */\r\n  function refundLoan() onlyBorrower public payable{\r\n    if(! isInterestStatusUpdated() )\r\n        updateInterest(); //Ensure Interest is updated\r\n\r\n    require(msg.value == getLoanValue(false));\r\n    require(isLoanFunded());\r\n\r\n    finishMinting() ;//Prevent further Minting\r\n    transferFrom(lender,borrower,totalSupply);\r\n\r\n    lender.transfer(msg.value);\r\n  }\r\n\r\n  /**\r\n  Partial ERC20 functionality\r\n   */\r\n\r\n  function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value) internal {\r\n    require(_to != address(0));\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(_from, _to, _value);\r\n  }\r\n\r\n  /**\r\n  MintableToken functionality\r\n   */\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(address _to, uint256 _amount) canMint internal returns (bool) {\r\n    totalSupply = totalSupply.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    Mint(_to, _amount);\r\n    Transfer(0x0, _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() onlyBorrower internal returns (bool) {\r\n    mintingFinished = true;\r\n    MintFinished();\r\n    return true;\r\n  }\r\n\r\n\r\n  /**\r\n  Fallback function\r\n  */\r\n  function() public payable{\r\n    require(initialSupply > 0);//Stop the whole process if initialSupply not set\r\n    if(isBorrower())\r\n      refundLoan();\r\n    else if(isLender())\r\n      fundLoan();\r\n    else revert(); //Throw if neither of cases apply, ensure no free money\r\n  }\r\n\r\n  /**\r\n  Modifiers\r\n  */\r\n  modifier onlyBorrower() {\r\n    require(isBorrower());\r\n    _;\r\n  }\r\n}\r\n\r\ncontract DebtTokenDeployer is Ownable{\r\n\r\n    address public dayTokenAddress;\r\n    uint public dayTokenFees; //DAY tokens to be paid for deploying custom DAY contract\r\n    ERC20 dayToken;\r\n\r\n    event FeeUpdated(uint _fee, uint _time);\r\n    event DebtTokenCreated(address  _creator, address _debtTokenAddress, uint256 _time);\r\n\r\n    function DebtTokenDeployer(address _dayTokenAddress, uint _dayTokenFees){\r\n        dayTokenAddress = _dayTokenAddress;\r\n        dayTokenFees = _dayTokenFees;\r\n        dayToken = ERC20(dayTokenAddress);\r\n    }\r\n\r\n    function updateDayTokenFees(uint _dayTokenFees) onlyOwner public {\r\n        dayTokenFees = _dayTokenFees;\r\n        FeeUpdated(dayTokenFees, now);\r\n    }\r\n\r\n    function createDebtToken(string _tokenName,\r\n        string _tokenSymbol,\r\n        uint256 _initialAmount,\r\n        uint256 _exchangeRate,\r\n        uint256 _dayLength,\r\n        uint256 _loanTerm,\r\n        uint256 _loanCycle,\r\n        uint256 _intrestRatePerCycle,\r\n        address _lender)\r\n    public\r\n    {\r\n        if(dayToken.transferFrom(msg.sender, this, dayTokenFees)){\r\n            DebtToken newDebtToken = new DebtToken(_tokenName, _tokenSymbol, _initialAmount, _exchangeRate,\r\n                 _dayLength, _loanTerm, _loanCycle,\r\n                _intrestRatePerCycle, _lender, msg.sender);\r\n            DebtTokenCreated(msg.sender, address(newDebtToken), now);\r\n        }\r\n    }\r\n\r\n    // to collect all fees paid till now\r\n    function fetchDayTokens() onlyOwner public {\r\n        dayToken.transfer(owner, dayToken.balanceOf(this));\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"isLoanFunded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isTermOver\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"calculateInterestDue\",\"outputs\":[{\"name\":\"_coins\",\"type\":\"uint256\"},{\"name\":\"_cycle\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"loanActivation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"loanTerm\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"exchangeRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PERCENT_DIVISOR\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"interestRatePerCycle\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastInterestCycle\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isInterestStatusUpdated\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalInterestCycles\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"borrower\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"fundLoan\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"interestCycleLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dayLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lender\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"initial\",\"type\":\"bool\"}],\"name\":\"getLoanValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"updateInterest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"actualTotalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refundLoan\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getInterest\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tokenName\",\"type\":\"string\"},{\"name\":\"_tokenSymbol\",\"type\":\"string\"},{\"name\":\"_initialAmount\",\"type\":\"uint256\"},{\"name\":\"_exchangeRate\",\"type\":\"uint256\"},{\"name\":\"_dayLength\",\"type\":\"uint256\"},{\"name\":\"_loanTerm\",\"type\":\"uint256\"},{\"name\":\"_loanCycle\",\"type\":\"uint256\"},{\"name\":\"_interestRatePerCycle\",\"type\":\"uint256\"},{\"name\":\"_lender\",\"type\":\"address\"},{\"name\":\"_borrower\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"}]","ContractName":"DebtToken","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000001800000000000000000000000000000000000000000000000004563918244f4000000000000000000000000000000000000000000000000000000000000000009c4000000000000000000000000000000000000000000000000000000000000a8c000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000001e000000000000000000000000b55bfb993f5f5a8b67564ff526dab9acc5057dde00000000000000000000000028013bf56eafd00664afc2d9ba649930976227b2000000000000000000000000000000000000000000000000000000000000000e44534320312e312e30204c6f616e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000074453434c4f414e00000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://0c32c631da7d0e1abcb245288790bb3c10a4ecc56465e6d10c52a75543b836da"}]}