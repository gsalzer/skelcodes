{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.15;\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public constant returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n\r\n    uint256 _allowance = allowed[_from][msg.sender];\r\n\r\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n    // require (_value <= _allowance);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   */\r\n  function increaseApproval (address _spender, uint _addedValue)\r\n    returns (bool success) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  function decreaseApproval (address _spender, uint _subtractedValue)\r\n    returns (bool success) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\ncontract MintableToken is StandardToken, Ownable {\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\r\n    totalSupply = totalSupply.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    Mint(_to, _amount);\r\n    Transfer(0x0, _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() onlyOwner public returns (bool) {\r\n    mintingFinished = true;\r\n    MintFinished();\r\n    return true;\r\n  }\r\n}\r\n\r\ncontract IDealToken {\r\n    function spend(address _from, uint256 _value) returns (bool success);\r\n}\r\n\r\ncontract DealToken is MintableToken, IDealToken {\r\n    string public constant name = \"Deal Token\";\r\n    string public constant symbol = \"DEAL\";\r\n    uint8 public constant decimals = 0;\r\n\r\n    uint256 public totalTokensBurnt = 0;\r\n\r\n    event TokensSpent(address indexed _from, uint256 _value);\r\n\r\n    /**\r\n     * @dev - Empty constructor\r\n     */\r\n    function DealToken() public { }\r\n\r\n    /**\r\n     * @dev - Function that allows foreground contract to spend (burn) the tokens.\r\n     * @param _from - Account to withdraw from.\r\n     * @param _value - Number of tokens to withdraw.\r\n     * @return - A boolean that indicates if the operation was successful.\r\n     */\r\n    function spend(address _from, uint256 _value) public returns (bool) {\r\n        require(_value > 0);\r\n\r\n        if (balances[_from] < _value || allowed[_from][msg.sender] < _value) {\r\n            return false;\r\n        }\r\n\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        balances[_from] = balances[_from].sub(_value);\r\n        totalTokensBurnt = totalTokensBurnt.add(_value);\r\n        totalSupply = totalSupply.sub(_value);\r\n        TokensSpent(_from, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev - Allow another contract to spend some tokens on your behalf\r\n     * @param _spender - Contract that will spend the tokens\r\n     * @param _value - Amount of tokens to spend\r\n     * @param _extraData - Additional data to pass to the receiveApproval\r\n     * @return -  A boolean that indicates if the operation was successful.\r\n     */\r\n    function approveAndCall(ITokenRecipient _spender, uint256 _value, bytes _extraData) public returns (bool) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        _spender.receiveApproval(msg.sender, _value, this, _extraData);\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract IForeground {\r\n    function payConversionFromTransaction(uint256 _promotionID, address _recipientAddress, uint256 _transactionAmount) external payable;\r\n    function createNewDynamicPaymentAddress(uint256 _promotionID, address referrer) external;\r\n    function calculateTotalDue(uint256 _promotionID, uint256 _transactionAmount) public constant returns (uint256 _totalPayment);\r\n}\r\n\r\ncontract IForegroundEnabledContract {\r\n   function receiveEtherFromForegroundAddress(address _originatingAddress, address _relayedFromAddress, uint256 _promotionID, address _referrer) public payable;\r\n}\r\n\r\ncontract ForegroundCaller is IForegroundEnabledContract {\r\n    IForeground public foreground;\r\n\r\n    function ForegroundCaller(IForeground _foreground) public {\r\n        foreground = _foreground;\r\n    }\r\n\r\n    //This event is useful for testing whether a contract has implemented Foreground correctly\r\n    //It can even be used prior to the implementing contract going live\r\n    event EtherReceivedFromRelay(address indexed _originatingAddress, uint256 indexed _promotionID, address indexed _referrer);\r\n    event ForegroundPaymentResult(bool _success, uint256 indexed _promotionID, address indexed _referrer, uint256 _value);\r\n    event ContractFunded(address indexed _sender, uint256 _value);\r\n\r\n    //Note: we don't use the \"relayedFromAddress\" variable here, but it seems like it should still be part of the API\r\n    function receiveEtherFromForegroundAddress(address _originatingAddress, address _relayedFromAddress, uint256 _promotionID, address _referrer) public payable {\r\n        //NOTE: available Ether may be less than msg.value after this call\r\n        //NOTE: originatingAddress indicates the true sender of the funds at this point, not msg.sender\r\n        EtherReceivedFromRelay(_originatingAddress, _promotionID, _referrer);\r\n\r\n        uint256 _amountSpent = receiveEtherFromRelayAddress(_originatingAddress, msg.value);\r\n\r\n        //NOTE: This makes a call to an external contract (Foreground), but does not use .call -- this seems unavoidable\r\n        uint256 _paymentToForeground = foreground.calculateTotalDue(_promotionID, _amountSpent);\r\n        //NOTE: Using .call in order to swallow any exceptions\r\n        bool _success = foreground.call.gas(1000000).value(_paymentToForeground)(bytes4(keccak256(\"payConversionFromTransaction(uint256,address,uint256)\")), _promotionID, _referrer, _amountSpent);\r\n        ForegroundPaymentResult(_success, _promotionID, _referrer, msg.value);\r\n    }\r\n\r\n    //Abstract function to be implemented by advertiser's contract\r\n    function receiveEtherFromRelayAddress(address _originatingAddress, uint256 _amount) internal returns(uint256 _amountSpent);\r\n\r\n    //Function allows for additional funds to be added to the contract (without purchasing tokens)\r\n    function fundContract() payable {\r\n        ContractFunded(msg.sender, msg.value);\r\n    }\r\n}\r\n\r\ncontract ForegroundTokenSale is Ownable, ForegroundCaller {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 public publicTokenCap;\r\n    uint256 public baseTokenPrice;\r\n    uint256 public currentTokenPrice;\r\n\r\n    uint256 public priceStepDuration;\r\n\r\n    uint256 public numberOfParticipants;\r\n    uint256 public maxSaleBalance;\r\n    uint256 public minSaleBalance;\r\n    uint256 public saleBalance;\r\n    uint256 public tokenBalance;\r\n\r\n    uint256 public startBlock;\r\n    uint256 public endBlock;\r\n\r\n    address public saleWalletAddress;\r\n\r\n    address public devTeamTokenAddress;\r\n    address public partnershipsTokenAddress;\r\n    address public incentiveTokenAddress;\r\n    address public bountyTokenAddress;\r\n\r\n    bool public saleSuspended = false;\r\n\r\n    DealToken public dealToken;\r\n    SaleState public state;\r\n\r\n    mapping (address => PurchaseDetails) public purchases;\r\n\r\n    struct PurchaseDetails {\r\n        uint256 tokenBalance;\r\n        uint256 weiBalance;\r\n    }\r\n\r\n    enum SaleState {Prepared, Deployed, Configured, Started, Ended, Finalized, Refunding}\r\n\r\n    event TokenPurchased(address indexed buyer, uint256 tokenPrice, uint256 txAmount, uint256 actualPurchaseAmount, uint256 refundedAmount, uint256 tokensPurchased);\r\n    event SaleStarted();\r\n    event SaleEnded();\r\n    event Claimed(address indexed owner, uint256 tokensClaimed);\r\n    event Refunded(address indexed buyer, uint256 amountRefunded);\r\n\r\n    /**\r\n     * @dev - modifier that evaluates which state the sale should be in. Functions that use this modifier cannot be constant due to potential state change\r\n     */\r\n    modifier evaluateSaleState {\r\n        require(saleSuspended == false);\r\n\r\n        if (state == SaleState.Configured && block.number >= startBlock) {\r\n            state = SaleState.Started;\r\n            SaleStarted();\r\n        }\r\n\r\n        if (state == SaleState.Started) {\r\n            setCurrentPrice();\r\n        }\r\n\r\n        if (state == SaleState.Started && (block.number > endBlock || saleBalance == maxSaleBalance || maxSaleBalance.sub(saleBalance) < currentTokenPrice)) {\r\n            endSale();\r\n        }\r\n\r\n        if (state == SaleState.Ended) {\r\n            finalizeSale();\r\n        }\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev - Constructor for the Foreground token sale contract\r\n     * @param _publicTokenCap - Max number of tokens made available to the public\r\n     * @param _tokenFloor - Min number of tokens to be sold to be considered a successful sale\r\n     * @param _tokenRate - Initial price per token\r\n     * @param _foreground - Address of the Foreground contract that gets passed on to ForegroundCaller\r\n     */\r\n    function ForegroundTokenSale(\r\n        uint256 _publicTokenCap,\r\n        uint256 _tokenFloor,\r\n        uint256 _tokenRate,\r\n        IForeground _foreground\r\n    )\r\n        public\r\n        ForegroundCaller(_foreground)\r\n    {\r\n        require(_publicTokenCap > 0);\r\n        require(_tokenFloor < _publicTokenCap);\r\n        require(_tokenRate > 0);\r\n\r\n        publicTokenCap = _publicTokenCap;\r\n        baseTokenPrice = _tokenRate;\r\n        currentTokenPrice = _tokenRate;\r\n\r\n        dealToken = new DealToken();\r\n        maxSaleBalance = publicTokenCap.mul(currentTokenPrice);\r\n        minSaleBalance = _tokenFloor.mul(currentTokenPrice);\r\n        state = SaleState.Deployed;\r\n    }\r\n\r\n    /**\r\n     * @dev - Default payable function. Will result in tokens being purchased\r\n     */\r\n    function() public payable {\r\n        purchaseToken(msg.sender, msg.value);\r\n    }\r\n\r\n    /**\r\n     * @dev - Configure specific params of the sale. Can only be called once\r\n     * @param _startBlock - Block the sale should start at\r\n     * @param _endBlock - Block the sale should end at\r\n     * @param _wallet - Sale wallet address - funds will be transferred here once sale is done\r\n     * @param _stepDuration - How many blocks to wait to increase price\r\n     * @param _devAddress - Address for the tokens distributed for Foreground development purposes\r\n     * @param _partnershipAddress - Address for the tokens distributed for Foreground partnerships\r\n     * @param _incentiveAddress - Address for the tokens distributed for Foreground incentives\r\n     * @param _bountyAddress - Address for the tokens distributed for Foreground bounties\r\n     */\r\n    function configureSale(\r\n        uint256 _startBlock,\r\n        uint256 _endBlock,\r\n        address _wallet,\r\n        uint256 _stepDuration,\r\n        address _devAddress,\r\n        address _partnershipAddress,\r\n        address _incentiveAddress,\r\n        address _bountyAddress\r\n    )\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(_startBlock >= block.number);\r\n        require(_endBlock >= _startBlock);\r\n        require(state == SaleState.Deployed);\r\n        require(_wallet != 0x0);\r\n        require(_stepDuration > 0);\r\n        require(_devAddress != 0x0);\r\n        require(_partnershipAddress != 0x0);\r\n        require(_incentiveAddress != 0x0);\r\n        require(_bountyAddress != 0x0);\r\n\r\n        state = SaleState.Configured;\r\n        startBlock = _startBlock;\r\n        endBlock = _endBlock;\r\n        saleWalletAddress = _wallet;\r\n        priceStepDuration = _stepDuration;\r\n        devTeamTokenAddress = _devAddress;\r\n        partnershipsTokenAddress = _partnershipAddress;\r\n        incentiveTokenAddress = _incentiveAddress;\r\n        bountyTokenAddress = _bountyAddress;\r\n    }\r\n\r\n    /**\r\n     * @dev - Claim tokens once sale is over\r\n     */\r\n    function claimToken()\r\n        external\r\n        evaluateSaleState\r\n    {\r\n        require(state == SaleState.Finalized);\r\n        require(purchases[msg.sender].tokenBalance > 0);\r\n\r\n        uint256 _tokensPurchased = purchases[msg.sender].tokenBalance;\r\n        purchases[msg.sender].tokenBalance = 0;\r\n        purchases[msg.sender].weiBalance = 0;\r\n\r\n        /* Transfer the tokens */\r\n        dealToken.transfer(msg.sender, _tokensPurchased);\r\n        Claimed(msg.sender, _tokensPurchased);\r\n    }\r\n\r\n    /**\r\n     * @dev - Claim a refund if the token sale did not reach its minimum value\r\n     */\r\n    function claimRefund()\r\n        external\r\n    {\r\n        require(state == SaleState.Refunding);\r\n\r\n        uint256 _amountToRefund = purchases[msg.sender].weiBalance;\r\n        require(_amountToRefund > 0);\r\n        purchases[msg.sender].weiBalance = 0;\r\n        purchases[msg.sender].tokenBalance = 0;\r\n        msg.sender.transfer(_amountToRefund);\r\n        Refunded(msg.sender, _amountToRefund);\r\n    }\r\n\r\n    /**\r\n     * @dev - Ability for contract owner to suspend the sale if necessary\r\n     * @param _suspend - Boolean value to indicate whether the sale is suspended or not\r\n     */\r\n    function suspendSale(bool _suspend)\r\n        external\r\n        onlyOwner\r\n    {\r\n        saleSuspended = _suspend;\r\n    }\r\n\r\n    /**\r\n     * @dev - Returns the correct sale state based on the current block number\r\n     * @return - current sale state and current sale price\r\n     */\r\n    function updateLatestSaleState()\r\n        external\r\n        evaluateSaleState\r\n        returns (uint256)\r\n    {\r\n        return uint256(state);\r\n    }\r\n\r\n    /**\r\n     * @dev - Purchase a DEAL token. Sale must be in the correct state\r\n     * @param _recipient - address to assign the purchased tokens to\r\n     * @param _amount - eth value of tokens to be purchased\r\n     */\r\n    function purchaseToken(address _recipient, uint256 _amount)\r\n        internal\r\n        evaluateSaleState\r\n        returns (uint256)\r\n    {\r\n        require(state == SaleState.Started);\r\n        require(_amount >= currentTokenPrice);\r\n\r\n        uint256 _saleRemainingBalance = maxSaleBalance.sub(saleBalance);\r\n        bool _shouldEndSale = false;\r\n\r\n        /* Ensure purchaseAmount buys exact amount of tokens, refund the rest immediately */\r\n        uint256 _amountToRefund = _amount % currentTokenPrice;\r\n        uint256 _purchaseAmount = _amount.sub(_amountToRefund);\r\n\r\n        /* This purchase will push us over the max balance - so refund that amount that is over */\r\n        if (_saleRemainingBalance < _purchaseAmount) {\r\n            uint256 _endOfSaleRefund = _saleRemainingBalance % currentTokenPrice;\r\n            _amountToRefund = _amountToRefund.add(_purchaseAmount.sub(_saleRemainingBalance).add(_endOfSaleRefund));\r\n            _purchaseAmount = _saleRemainingBalance.sub(_endOfSaleRefund);\r\n            _shouldEndSale = true;\r\n        }\r\n\r\n        /* Count the number of unique participants */\r\n        if (purchases[_recipient].tokenBalance == 0) {\r\n            numberOfParticipants = numberOfParticipants.add(1);\r\n        }\r\n\r\n        uint256 _tokensPurchased = _purchaseAmount.div(currentTokenPrice);\r\n        purchases[_recipient].tokenBalance = purchases[_recipient].tokenBalance.add(_tokensPurchased);\r\n        purchases[_recipient].weiBalance = purchases[_recipient].weiBalance.add(_purchaseAmount);\r\n        saleBalance = saleBalance.add(_purchaseAmount);\r\n        tokenBalance = tokenBalance.add(_tokensPurchased);\r\n\r\n        if (_purchaseAmount == _saleRemainingBalance || _shouldEndSale) {\r\n            endSale();\r\n        }\r\n\r\n        /* Refund amounts due if there are any */\r\n        if (_amountToRefund > 0) {\r\n            _recipient.transfer(_amountToRefund);\r\n        }\r\n\r\n        TokenPurchased(_recipient, currentTokenPrice, msg.value, _purchaseAmount, _amountToRefund, _tokensPurchased);\r\n        return _purchaseAmount;\r\n    }\r\n\r\n    /**\r\n     * @dev - Implementation of Foreground function to receive payment\r\n     * @param _originatingAddress - address to assign the purchased tokens to\r\n     * @param _amount - eth value of tokens to be purchased\r\n     * @return - The actual amount spent to buy tokens after taking sale state and refunds into account\r\n     */\r\n    function receiveEtherFromRelayAddress(address _originatingAddress, uint256 _amount)\r\n        internal\r\n        returns (uint256)\r\n    {\r\n        return purchaseToken(_originatingAddress, _amount);\r\n    }\r\n\r\n    /**\r\n     * @dev - Internal function to calculate and store the current token price based on block number\r\n     */\r\n    function setCurrentPrice() internal {\r\n        uint256 _saleBlockNo = block.number - startBlock;\r\n        uint256 _numIncreases = _saleBlockNo.div(priceStepDuration);\r\n\r\n        if (_numIncreases == 0)\r\n            currentTokenPrice = baseTokenPrice;\r\n        else if (_numIncreases == 1)\r\n            currentTokenPrice = 0.06 ether;\r\n        else if (_numIncreases == 2)\r\n            currentTokenPrice = 0.065 ether;\r\n        else if (_numIncreases == 3)\r\n            currentTokenPrice = 0.07 ether;\r\n        else if (_numIncreases >= 4)\r\n            currentTokenPrice = 0.08 ether;\r\n    }\r\n\r\n    /**\r\n     * @dev - Sale end condition reached, determine if sale was successful and set state accordingly\r\n     */\r\n    function endSale() internal {\r\n        /* If we didn't reach the min value - set state to refund so that funds can reclaimed by sale participants */\r\n        if (saleBalance < minSaleBalance) {\r\n            state = SaleState.Refunding;\r\n        } else {\r\n            state = SaleState.Ended;\r\n            /* Mint the tokens and distribute internally */\r\n            mintTokens();\r\n        }\r\n        SaleEnded();\r\n    }\r\n\r\n    /**\r\n     * @dev - Mints tokens and distributes pre-allocated tokens to Foreground addresses\r\n     */\r\n    function mintTokens() internal {\r\n        uint256 _totalTokens = (tokenBalance.mul(10 ** 18)).div(74).mul(100);\r\n\r\n        /* Mint the tokens and assign them all to the TokenSaleContract for distribution */\r\n        dealToken.mint(address(this), _totalTokens.div(10 ** 18));\r\n\r\n        /* Distribute non public tokens */\r\n        dealToken.transfer(devTeamTokenAddress, (_totalTokens.mul(10).div(100)).div(10 ** 18));\r\n        dealToken.transfer(partnershipsTokenAddress, (_totalTokens.mul(10).div(100)).div(10 ** 18));\r\n        dealToken.transfer(incentiveTokenAddress, (_totalTokens.mul(4).div(100)).div(10 ** 18));\r\n        dealToken.transfer(bountyTokenAddress, (_totalTokens.mul(2).div(100)).div(10 ** 18));\r\n\r\n        /* Finish minting so that no more tokens can be minted */\r\n        dealToken.finishMinting();\r\n    }\r\n\r\n    /**\r\n     * @dev - Finalizes the sale transfers the contract balance to the sale wallet.\r\n     */\r\n    function finalizeSale() internal {\r\n        state = SaleState.Finalized;\r\n        /* Transfer contract balance to sale wallet */\r\n        saleWalletAddress.transfer(this.balance);\r\n    }\r\n}\r\n\r\ncontract ITokenRecipient {\r\n\tfunction receiveApproval(address _from, uint _value, address _token, bytes _extraData);\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"devTeamTokenAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"baseTokenPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"incentiveTokenAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimToken\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxSaleBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleSuspended\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dealToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_suspend\",\"type\":\"bool\"}],\"name\":\"suspendSale\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"priceStepDuration\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_originatingAddress\",\"type\":\"address\"},{\"name\":\"_relayedFromAddress\",\"type\":\"address\"},{\"name\":\"_promotionID\",\"type\":\"uint256\"},{\"name\":\"_referrer\",\"type\":\"address\"}],\"name\":\"receiveEtherFromForegroundAddress\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"publicTokenCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"updateLatestSaleState\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentTokenPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numberOfParticipants\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_startBlock\",\"type\":\"uint256\"},{\"name\":\"_endBlock\",\"type\":\"uint256\"},{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_stepDuration\",\"type\":\"uint256\"},{\"name\":\"_devAddress\",\"type\":\"address\"},{\"name\":\"_partnershipAddress\",\"type\":\"address\"},{\"name\":\"_incentiveAddress\",\"type\":\"address\"},{\"name\":\"_bountyAddress\",\"type\":\"address\"}],\"name\":\"configureSale\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"purchases\",\"outputs\":[{\"name\":\"tokenBalance\",\"type\":\"uint256\"},{\"name\":\"weiBalance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleWalletAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"foreground\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minSaleBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bountyTokenAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimRefund\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"fundContract\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"partnershipsTokenAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_publicTokenCap\",\"type\":\"uint256\"},{\"name\":\"_tokenFloor\",\"type\":\"uint256\"},{\"name\":\"_tokenRate\",\"type\":\"uint256\"},{\"name\":\"_foreground\",\"type\":\"address\"}],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"txAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"actualPurchaseAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"refundedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokensPurchased\",\"type\":\"uint256\"}],\"name\":\"TokenPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"SaleStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"SaleEnded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokensClaimed\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amountRefunded\",\"type\":\"uint256\"}],\"name\":\"Refunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_originatingAddress\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_promotionID\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_referrer\",\"type\":\"address\"}],\"name\":\"EtherReceivedFromRelay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_success\",\"type\":\"bool\"},{\"indexed\":true,\"name\":\"_promotionID\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_referrer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"ForegroundPaymentResult\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"ContractFunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"ForegroundTokenSale","CompilerVersion":"v0.4.15+commit.bbb8e64f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000514c80000000000000000000000000000000000000000000000000000000000004e2000000000000000000000000000000000000000000000000000b1a2bc2ec500000000000000000000000000003ae1f8f5c667056ae4667d305cdd27377106b7ed","Library":"","SwarmSource":"bzzr://994d93a8323a8b7350768f80538ddedc4da5117373b42df1b9e6b7888d1743df"}]}