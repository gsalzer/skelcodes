{"status":"1","message":"OK","result":[{"SourceCode":"// Copyright (C) 2017 DappHub, LLC\r\n\r\npragma solidity ^0.4.11;\r\n\r\n//import \"ds-exec/exec.sol\";\r\n\r\ncontract DSExec {\r\n    function tryExec( address target, bytes calldata, uint value)\r\n    internal\r\n    returns (bool call_ret)\r\n    {\r\n        return target.call.value(value)(calldata);\r\n    }\r\n    function exec( address target, bytes calldata, uint value)\r\n    internal\r\n    {\r\n        if(!tryExec(target, calldata, value)) {\r\n            throw;\r\n        }\r\n    }\r\n\r\n    // Convenience aliases\r\n    function exec( address t, bytes c )\r\n    internal\r\n    {\r\n        exec(t, c, 0);\r\n    }\r\n    function exec( address t, uint256 v )\r\n    internal\r\n    {\r\n        bytes memory c; exec(t, c, v);\r\n    }\r\n    function tryExec( address t, bytes c )\r\n    internal\r\n    returns (bool)\r\n    {\r\n        return tryExec(t, c, 0);\r\n    }\r\n    function tryExec( address t, uint256 v )\r\n    internal\r\n    returns (bool)\r\n    {\r\n        bytes memory c; return tryExec(t, c, v);\r\n    }\r\n}\r\n\r\n//import \"ds-auth/auth.sol\";\r\ncontract DSAuthority {\r\n    function canCall(\r\n    address src, address dst, bytes4 sig\r\n    ) constant returns (bool);\r\n}\r\n\r\ncontract DSAuthEvents {\r\n    event LogSetAuthority (address indexed authority);\r\n    event LogSetOwner     (address indexed owner);\r\n}\r\n\r\ncontract DSAuth is DSAuthEvents {\r\n    DSAuthority  public  authority;\r\n    address      public  owner;\r\n\r\n    function DSAuth() {\r\n        owner = msg.sender;\r\n        LogSetOwner(msg.sender);\r\n    }\r\n\r\n    function setOwner(address owner_)\r\n    auth\r\n    {\r\n        owner = owner_;\r\n        LogSetOwner(owner);\r\n    }\r\n\r\n    function setAuthority(DSAuthority authority_)\r\n    auth\r\n    {\r\n        authority = authority_;\r\n        LogSetAuthority(authority);\r\n    }\r\n\r\n    modifier auth {\r\n        assert(isAuthorized(msg.sender, msg.sig));\r\n        _;\r\n    }\r\n\r\n    function isAuthorized(address src, bytes4 sig) internal returns (bool) {\r\n        if (src == address(this)) {\r\n            return true;\r\n        } else if (src == owner) {\r\n            return true;\r\n        } else if (authority == DSAuthority(0)) {\r\n            return false;\r\n        } else {\r\n            return authority.canCall(src, this, sig);\r\n        }\r\n    }\r\n\r\n    function assert(bool x) internal {\r\n        if (!x) throw;\r\n    }\r\n}\r\n\r\n//import \"ds-note/note.sol\";\r\ncontract DSNote {\r\n    event LogNote(\r\n    bytes4   indexed  sig,\r\n    address  indexed  guy,\r\n    bytes32  indexed  foo,\r\n    bytes32  indexed  bar,\r\n    uint        wad,\r\n    bytes             fax\r\n    ) anonymous;\r\n\r\n    modifier note {\r\n        bytes32 foo;\r\n        bytes32 bar;\r\n\r\n        assembly {\r\n        foo := calldataload(4)\r\n        bar := calldataload(36)\r\n        }\r\n\r\n        LogNote(msg.sig, msg.sender, foo, bar, msg.value, msg.data);\r\n\r\n        _;\r\n    }\r\n}\r\n\r\n\r\n//import \"ds-math/math.sol\";\r\ncontract DSMath {\r\n\r\n    /*\r\n    standard uint256 functions\r\n     */\r\n\r\n    function add(uint256 x, uint256 y) constant internal returns (uint256 z) {\r\n        assert((z = x + y) >= x);\r\n    }\r\n\r\n    function sub(uint256 x, uint256 y) constant internal returns (uint256 z) {\r\n        assert((z = x - y) <= x);\r\n    }\r\n\r\n    function mul(uint256 x, uint256 y) constant internal returns (uint256 z) {\r\n        z = x * y;\r\n        assert(x == 0 || z / x == y);\r\n    }\r\n\r\n    function div(uint256 x, uint256 y) constant internal returns (uint256 z) {\r\n        z = x / y;\r\n    }\r\n\r\n    function min(uint256 x, uint256 y) constant internal returns (uint256 z) {\r\n        return x <= y ? x : y;\r\n    }\r\n    function max(uint256 x, uint256 y) constant internal returns (uint256 z) {\r\n        return x >= y ? x : y;\r\n    }\r\n\r\n    /*\r\n    uint128 functions (h is for half)\r\n     */\r\n\r\n\r\n    function hadd(uint128 x, uint128 y) constant internal returns (uint128 z) {\r\n        assert((z = x + y) >= x);\r\n    }\r\n\r\n    function hsub(uint128 x, uint128 y) constant internal returns (uint128 z) {\r\n        assert((z = x - y) <= x);\r\n    }\r\n\r\n    function hmul(uint128 x, uint128 y) constant internal returns (uint128 z) {\r\n        z = x * y;\r\n        assert(x == 0 || z / x == y);\r\n    }\r\n\r\n    function hdiv(uint128 x, uint128 y) constant internal returns (uint128 z) {\r\n        z = x / y;\r\n    }\r\n\r\n    function hmin(uint128 x, uint128 y) constant internal returns (uint128 z) {\r\n        return x <= y ? x : y;\r\n    }\r\n    function hmax(uint128 x, uint128 y) constant internal returns (uint128 z) {\r\n        return x >= y ? x : y;\r\n    }\r\n\r\n\r\n    /*\r\n    int256 functions\r\n     */\r\n\r\n    function imin(int256 x, int256 y) constant internal returns (int256 z) {\r\n        return x <= y ? x : y;\r\n    }\r\n    function imax(int256 x, int256 y) constant internal returns (int256 z) {\r\n        return x >= y ? x : y;\r\n    }\r\n\r\n    /*\r\n    WAD math\r\n     */\r\n\r\n    uint128 constant WAD = 10 ** 18;\r\n\r\n    function wadd(uint128 x, uint128 y) constant internal returns (uint128) {\r\n        return hadd(x, y);\r\n    }\r\n\r\n    function wsub(uint128 x, uint128 y) constant internal returns (uint128) {\r\n        return hsub(x, y);\r\n    }\r\n\r\n    function wmul(uint128 x, uint128 y) constant internal returns (uint128 z) {\r\n        z = cast((uint256(x) * y + WAD / 2) / WAD);\r\n    }\r\n\r\n    function wdiv(uint128 x, uint128 y) constant internal returns (uint128 z) {\r\n        z = cast((uint256(x) * WAD + y / 2) / y);\r\n    }\r\n\r\n    function wmin(uint128 x, uint128 y) constant internal returns (uint128) {\r\n        return hmin(x, y);\r\n    }\r\n    function wmax(uint128 x, uint128 y) constant internal returns (uint128) {\r\n        return hmax(x, y);\r\n    }\r\n\r\n    /*\r\n    RAY math\r\n     */\r\n\r\n    uint128 constant RAY = 10 ** 27;\r\n\r\n    function radd(uint128 x, uint128 y) constant internal returns (uint128) {\r\n        return hadd(x, y);\r\n    }\r\n\r\n    function rsub(uint128 x, uint128 y) constant internal returns (uint128) {\r\n        return hsub(x, y);\r\n    }\r\n\r\n    function rmul(uint128 x, uint128 y) constant internal returns (uint128 z) {\r\n        z = cast((uint256(x) * y + RAY / 2) / RAY);\r\n    }\r\n\r\n    function rdiv(uint128 x, uint128 y) constant internal returns (uint128 z) {\r\n        z = cast((uint256(x) * RAY + y / 2) / y);\r\n    }\r\n\r\n    function rpow(uint128 x, uint64 n) constant internal returns (uint128 z) {\r\n        // This famous algorithm is called \"exponentiation by squaring\"\r\n        // and calculates x^n with x as fixed-point and n as regular unsigned.\r\n        //\r\n        // It's O(log n), instead of O(n) for naive repeated multiplication.\r\n        //\r\n        // These facts are why it works:\r\n        //\r\n        //  If n is even, then x^n = (x^2)^(n/2).\r\n        //  If n is odd,  then x^n = x * x^(n-1),\r\n        //   and applying the equation for even x gives\r\n        //    x^n = x * (x^2)^((n-1) / 2).\r\n        //\r\n        //  Also, EVM division is flooring and\r\n        //    floor[(n-1) / 2] = floor[n / 2].\r\n\r\n        z = n % 2 != 0 ? x : RAY;\r\n\r\n        for (n /= 2; n != 0; n /= 2) {\r\n            x = rmul(x, x);\r\n\r\n            if (n % 2 != 0) {\r\n                z = rmul(z, x);\r\n            }\r\n        }\r\n    }\r\n\r\n    function rmin(uint128 x, uint128 y) constant internal returns (uint128) {\r\n        return hmin(x, y);\r\n    }\r\n    function rmax(uint128 x, uint128 y) constant internal returns (uint128) {\r\n        return hmax(x, y);\r\n    }\r\n\r\n    function cast(uint256 x) constant internal returns (uint128 z) {\r\n        assert((z = uint128(x)) == x);\r\n    }\r\n\r\n}\r\n\r\n//import \"erc20/erc20.sol\";\r\ncontract ERC20 {\r\n    function totalSupply() constant returns (uint supply);\r\n    function balanceOf( address who ) constant returns (uint value);\r\n    function allowance( address owner, address spender ) constant returns (uint _allowance);\r\n\r\n    function transfer( address to, uint value) returns (bool ok);\r\n    function transferFrom( address from, address to, uint value) returns (bool ok);\r\n    function approve( address spender, uint value ) returns (bool ok);\r\n\r\n    event Transfer( address indexed from, address indexed to, uint value);\r\n    event Approval( address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\n\r\n\r\n//import \"ds-token/base.sol\";\r\ncontract DSTokenBase is ERC20, DSMath {\r\n    uint256                                            _supply;\r\n    mapping (address => uint256)                       _balances;\r\n    mapping (address => mapping (address => uint256))  _approvals;\r\n\r\n    function DSTokenBase(uint256 supply) {\r\n        _balances[msg.sender] = supply;\r\n        _supply = supply;\r\n    }\r\n\r\n    function totalSupply() constant returns (uint256) {\r\n        return _supply;\r\n    }\r\n    function balanceOf(address src) constant returns (uint256) {\r\n        return _balances[src];\r\n    }\r\n    function allowance(address src, address guy) constant returns (uint256) {\r\n        return _approvals[src][guy];\r\n    }\r\n\r\n    function transfer(address dst, uint wad) returns (bool) {\r\n        assert(_balances[msg.sender] >= wad);\r\n\r\n        _balances[msg.sender] = sub(_balances[msg.sender], wad);\r\n        _balances[dst] = add(_balances[dst], wad);\r\n\r\n        Transfer(msg.sender, dst, wad);\r\n\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address src, address dst, uint wad) returns (bool) {\r\n        assert(_balances[src] >= wad);\r\n        assert(_approvals[src][msg.sender] >= wad);\r\n\r\n        _approvals[src][msg.sender] = sub(_approvals[src][msg.sender], wad);\r\n        _balances[src] = sub(_balances[src], wad);\r\n        _balances[dst] = add(_balances[dst], wad);\r\n\r\n        Transfer(src, dst, wad);\r\n\r\n        return true;\r\n    }\r\n\r\n    function approve(address guy, uint256 wad) returns (bool) {\r\n        _approvals[msg.sender][guy] = wad;\r\n\r\n        Approval(msg.sender, guy, wad);\r\n\r\n        return true;\r\n    }\r\n\r\n}\r\n\r\n\r\n//import \"ds-stop/stop.sol\";\r\ncontract DSStop is DSAuth, DSNote {\r\n\r\n    bool public stopped;\r\n\r\n    modifier stoppable {\r\n        assert (!stopped);\r\n        _;\r\n    }\r\n    function stop() auth note {\r\n        stopped = true;\r\n    }\r\n    function start() auth note {\r\n        stopped = false;\r\n    }\r\n\r\n}\r\n\r\n\r\n//import \"ds-token/token.sol\";\r\ncontract DSToken is DSTokenBase(0), DSStop {\r\n\r\n    bytes32  public  symbol;\r\n    uint256  public  decimals = 18; // standard token precision. override to customize\r\n    address  public  generator;\r\n\r\n    modifier onlyGenerator {\r\n        if(msg.sender!=generator) throw;\r\n        _;\r\n    }\r\n\r\n    function DSToken(bytes32 symbol_) {\r\n        symbol = symbol_;\r\n        generator=msg.sender;\r\n    }\r\n\r\n    function transfer(address dst, uint wad) stoppable note returns (bool) {\r\n        return super.transfer(dst, wad);\r\n    }\r\n    function transferFrom(\r\n    address src, address dst, uint wad\r\n    ) stoppable note returns (bool) {\r\n        return super.transferFrom(src, dst, wad);\r\n    }\r\n    function approve(address guy, uint wad) stoppable note returns (bool) {\r\n        return super.approve(guy, wad);\r\n    }\r\n\r\n    function push(address dst, uint128 wad) returns (bool) {\r\n        return transfer(dst, wad);\r\n    }\r\n    function pull(address src, uint128 wad) returns (bool) {\r\n        return transferFrom(src, msg.sender, wad);\r\n    }\r\n\r\n    function mint(uint128 wad) auth stoppable note {\r\n        _balances[msg.sender] = add(_balances[msg.sender], wad);\r\n        _supply = add(_supply, wad);\r\n    }\r\n    function burn(uint128 wad) auth stoppable note {\r\n        _balances[msg.sender] = sub(_balances[msg.sender], wad);\r\n        _supply = sub(_supply, wad);\r\n    }\r\n\r\n    // owner can transfer token even stop,\r\n    function generatorTransfer(address dst, uint wad) onlyGenerator note returns (bool) {\r\n        return super.transfer(dst, wad);\r\n    }\r\n\r\n    // Optional token name\r\n\r\n    bytes32   public  name = \"\";\r\n\r\n    function setName(bytes32 name_) auth {\r\n        name = name_;\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract kkkTokenSale is DSStop, DSMath, DSExec {\r\n\r\n    DSToken public kkk;\r\n\r\n    // kkk PRICES (ETH/kkk)\r\n    uint128 public constant PUBLIC_SALE_PRICE = 200000 ether;\r\n\r\n    uint128 public constant TOTAL_SUPPLY = 10 ** 11 * 1 ether;  // 100 billion kkk in total\r\n\r\n    uint128 public constant SELL_SOFT_LIMIT = TOTAL_SUPPLY * 12 / 100; // soft limit is 12% , 60000 eth\r\n    uint128 public constant SELL_HARD_LIMIT = TOTAL_SUPPLY * 16 / 100; // hard limit is 16% , 80000 eth\r\n\r\n    uint128 public constant FUTURE_DISTRIBUTE_LIMIT = TOTAL_SUPPLY * 84 / 100; // 84% for future distribution\r\n\r\n    uint128 public constant USER_BUY_LIMIT = 500 ether; // 500 ether limit\r\n    uint128 public constant MAX_GAS_PRICE = 50000000000;  // 50GWei\r\n\r\n    uint public startTime;\r\n    uint public endTime;\r\n\r\n    bool public moreThanSoftLimit;\r\n\r\n    mapping (address => uint)  public  userBuys; // limit to 500 eth\r\n\r\n    address public destFoundation; //multisig account , 4-of-6\r\n\r\n    uint128 public sold;\r\n    uint128 public constant soldByChannels = 40000 * 200000 ether; // 2 ICO websites, each 20000 eth\r\n\r\n    function kkkTokenSale(uint startTime_, address destFoundation_) {\r\n\r\n        kkk = new DSToken(\"kkk\");\r\n\r\n        destFoundation = destFoundation_;\r\n\r\n        startTime = startTime_;\r\n        endTime = startTime + 14 days;\r\n\r\n        sold = soldByChannels; // sold by 3rd party ICO websites;\r\n        kkk.mint(TOTAL_SUPPLY);\r\n\r\n        kkk.transfer(destFoundation, FUTURE_DISTRIBUTE_LIMIT);\r\n        kkk.transfer(destFoundation, soldByChannels);\r\n\r\n        //disable transfer\r\n        kkk.stop();\r\n    }\r\n\r\n    // overrideable for easy testing\r\n    function time() constant returns (uint) {\r\n        return now;\r\n    }\r\n\r\n    function isContract(address _addr) constant internal returns(bool) {\r\n        uint size;\r\n        if (_addr == 0) return false;\r\n        assembly {\r\n        size := extcodesize(_addr)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    function canBuy(uint total) returns (bool) {\r\n        return total <= USER_BUY_LIMIT;\r\n    }\r\n\r\n    function() payable stoppable note {\r\n\r\n        require(!isContract(msg.sender));\r\n        require(msg.value >= 0.01 ether);\r\n        require(tx.gasprice <= MAX_GAS_PRICE);\r\n\r\n        assert(time() >= startTime && time() < endTime);\r\n\r\n        var toFund = cast(msg.value);\r\n\r\n        var requested = wmul(toFund, PUBLIC_SALE_PRICE);\r\n\r\n        // selling SELL_HARD_LIMIT tokens ends the sale\r\n        if( add(sold, requested) >= SELL_HARD_LIMIT) {\r\n            requested = SELL_HARD_LIMIT - sold;\r\n            toFund = wdiv(requested, PUBLIC_SALE_PRICE);\r\n\r\n            endTime = time();\r\n        }\r\n\r\n        // User cannot buy more than USER_BUY_LIMIT\r\n        var totalUserBuy = add(userBuys[msg.sender], toFund);\r\n        assert(canBuy(totalUserBuy));\r\n        userBuys[msg.sender] = totalUserBuy;\r\n\r\n        sold = hadd(sold, requested);\r\n\r\n        // Soft limit triggers the sale to close in 24 hours\r\n        if( !moreThanSoftLimit && sold >= SELL_SOFT_LIMIT ) {\r\n            moreThanSoftLimit = true;\r\n            endTime = time() + 24 hours; // last 24 hours after soft limit,\r\n        }\r\n\r\n        kkk.start();\r\n        kkk.transfer(msg.sender, requested);\r\n        kkk.stop();\r\n\r\n        exec(destFoundation, toFund); // send collected ETH to multisig\r\n\r\n        // return excess ETH to the user\r\n        uint toReturn = sub(msg.value, toFund);\r\n        if(toReturn > 0) {\r\n            exec(msg.sender, toReturn);\r\n        }\r\n    }\r\n\r\n    function setStartTime(uint startTime_) auth note {\r\n        require(time() <= startTime && time() <= startTime_);\r\n\r\n        startTime = startTime_;\r\n        endTime = startTime + 14 days;\r\n    }\r\n\r\n    function finalize() auth note {\r\n        require(time() >= endTime);\r\n\r\n        // enable transfer\r\n        kkk.start();\r\n\r\n        // transfer undistributed kkk\r\n        kkk.transfer(destFoundation, kkk.balanceOf(this));\r\n\r\n        // owner -> destFoundation\r\n        kkk.setOwner(destFoundation);\r\n    }\r\n\r\n\r\n    // @notice This method can be used by the controller to extract mistakenly\r\n    //  sent tokens to this contract.\r\n    // @param dst The address that will be receiving the tokens\r\n    // @param wad The amount of tokens to transfer\r\n    // @param _token The address of the token contract that you want to recover\r\n    function transferTokens(address dst, uint wad, address _token) public auth note {\r\n        ERC20 token = ERC20(_token);\r\n        token.transfer(dst, wad);\r\n    }\r\n\r\n    function summary()constant returns(\r\n        uint128 _sold,\r\n        uint _startTime,\r\n        uint _endTime)\r\n        {\r\n        _sold = sold;\r\n        _startTime = startTime;\r\n        _endTime = endTime;\r\n        return;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"sold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint128\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stop\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PUBLIC_SALE_PRICE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint128\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"destFoundation\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"time\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FUTURE_DISTRIBUTE_LIMIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint128\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kkk\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"soldByChannels\",\"outputs\":[{\"name\":\"\",\"type\":\"uint128\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"total\",\"type\":\"uint256\"}],\"name\":\"canBuy\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"startTime_\",\"type\":\"uint256\"}],\"name\":\"setStartTime\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"userBuys\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"dst\",\"type\":\"address\"},{\"name\":\"wad\",\"type\":\"uint256\"},{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"transferTokens\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stopped\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SELL_HARD_LIMIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint128\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"authority_\",\"type\":\"address\"}],\"name\":\"setAuthority\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SELL_SOFT_LIMIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint128\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOTAL_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint128\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"summary\",\"outputs\":[{\"name\":\"_sold\",\"type\":\"uint128\"},{\"name\":\"_startTime\",\"type\":\"uint256\"},{\"name\":\"_endTime\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"start\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"authority\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"moreThanSoftLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"USER_BUY_LIMIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint128\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_GAS_PRICE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint128\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"startTime_\",\"type\":\"uint256\"},{\"name\":\"destFoundation_\",\"type\":\"address\"}],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":true,\"inputs\":[{\"indexed\":true,\"name\":\"sig\",\"type\":\"bytes4\"},{\"indexed\":true,\"name\":\"guy\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"foo\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"bar\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"wad\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"fax\",\"type\":\"bytes\"}],\"name\":\"LogNote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"LogSetAuthority\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"LogSetOwner\",\"type\":\"event\"}]","ContractName":"kkkTokenSale","CompilerVersion":"v0.4.15+commit.bbb8e64f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000059aa9d40000000000000000000000000bc1ab7f58a95cf307ba5ee18cf06b7ed0120da7a","Library":"","SwarmSource":"bzzr://c773071e878a7e2f6956f74913c2a78e90b42c6ea93138f57c4428243bca0869"}]}