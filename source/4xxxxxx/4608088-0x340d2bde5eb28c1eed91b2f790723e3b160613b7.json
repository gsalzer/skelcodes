{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13;\r\n\r\ninterface MigrationAgent {\r\n  function migrateFrom(address _from, uint256 _value);\r\n}\r\n\r\ncontract PoolAllocations {\r\n\r\n  // ERC20 basic token contract being held\r\n  ERC20Basic public token;\r\n\r\n // allocations map\r\n  mapping (address => lockEntry) public allocations;\r\n\r\n  // lock entry\r\n  struct lockEntry {\r\n      uint256 totalAmount;        // total amount of token for a user\r\n      uint256 firstReleaseAmount; // amount to be released \r\n      uint256 nextRelease;        // amount to be released every month\r\n      uint256 restOfTokens;       // the rest of tokens if not divisible\r\n      bool isFirstRelease;        // just flag\r\n      uint numPayoutCycles;       // only after 3 years\r\n  }\r\n\r\n  // max number of payout cycles\r\n  uint public maxNumOfPayoutCycles;\r\n\r\n  // first release date\r\n  uint public startDay;\r\n\r\n  // defines how many of cycles should be released immediately\r\n  uint public cyclesStartFrom = 1;\r\n\r\n  uint public payoutCycleInDays;\r\n\r\n  function PoolAllocations(ERC20Basic _token) public {\r\n    token = _token;\r\n  }\r\n\r\n  /**\r\n   * @dev claims tokens held by time lock\r\n   */\r\n  function claim() public {\r\n    require(now >= startDay);\r\n\r\n     var elem = allocations[msg.sender];\r\n    require(elem.numPayoutCycles > 0);\r\n\r\n    uint256 tokens = 0;\r\n    uint cycles = getPayoutCycles(elem.numPayoutCycles);\r\n\r\n    if (elem.isFirstRelease) {\r\n      elem.isFirstRelease = false;\r\n      tokens += elem.firstReleaseAmount;\r\n      tokens += elem.restOfTokens;\r\n    } else {\r\n      require(cycles > 0);\r\n    }\r\n\r\n    tokens += elem.nextRelease * cycles;\r\n\r\n    elem.numPayoutCycles -= cycles;\r\n\r\n    assert(token.transfer(msg.sender, tokens));\r\n  }\r\n\r\n  function getPayoutCycles(uint payoutCyclesLeft) private constant returns (uint) {\r\n    uint cycles = uint((now - startDay) / payoutCycleInDays) + cyclesStartFrom;\r\n\r\n    if (cycles > maxNumOfPayoutCycles) {\r\n       cycles = maxNumOfPayoutCycles;\r\n    }\r\n\r\n    return cycles - (maxNumOfPayoutCycles - payoutCyclesLeft);\r\n  }\r\n\r\n  function createAllocationEntry(uint256 total, uint256 first, uint256 next, uint256 rest) internal returns(lockEntry) {\r\n    return lockEntry(total, // total\r\n                     first, // first\r\n                     next,  // next\r\n                     rest,  // rest\r\n                     true,  //isFirstRelease\r\n                     maxNumOfPayoutCycles); //payoutCyclesLeft\r\n  }\r\n}\r\n\r\ncontract PoolBLock is PoolAllocations {\r\n\r\n  uint256 public constant totalAmount = 911567810300063801255851777;\r\n\r\n  function PoolBLock(ERC20Basic _token) PoolAllocations(_token) {\r\n\r\n    // setup policy\r\n    maxNumOfPayoutCycles = 5; // 20% * 5 = 100%\r\n    startDay = now;\r\n    cyclesStartFrom = 1; // the first payout cycles is released immediately\r\n    payoutCycleInDays = 180 days; // 20% of tokens will be released every 6 months\r\n\r\n    // allocations\r\n    allocations[0x2f09079059b85c11DdA29ed62FF26F99b7469950] = createAllocationEntry(182313562060012760251170355, 0, 36462712412002552050234071, 0);\r\n    allocations[0x3634acA3cf97dCC40584dB02d53E290b5b4b65FA] = createAllocationEntry(182313562060012760251170355, 0, 36462712412002552050234071, 0);\r\n    allocations[0x768D9F044b9c8350b041897f08cA77AE871AeF1C] = createAllocationEntry(182313562060012760251170355, 0, 36462712412002552050234071, 0);\r\n    allocations[0xb96De72d3fee8c7B6c096Ddeab93bf0b3De848c4] = createAllocationEntry(182313562060012760251170355, 0, 36462712412002552050234071, 0);\r\n    allocations[0x2f97bfD7a479857a9028339Ce2426Fc3C62D96Bd] = createAllocationEntry(182313562060012760251170357, 0, 36462712412002552050234071, 2);\r\n  }\r\n}\r\n\r\ncontract PoolCLock is PoolAllocations {\r\n\r\n  uint256 public constant totalAmount = 911567810300063801255851777;\r\n\r\n  function PoolCLock(ERC20Basic _token) PoolAllocations(_token) {\r\n    \r\n    // setup policy\r\n    maxNumOfPayoutCycles = 5; // 20% * 5 = 100%\r\n    startDay = now;\r\n    cyclesStartFrom = 1; // the first payout cycles is released immediately\r\n    payoutCycleInDays = 180 days; // 20% of tokens will be released every 6 months\r\n\r\n    // allocations\r\n    allocations[0x0d02A3365dFd745f76225A0119fdD148955f821E] = createAllocationEntry(182313562060012760251170355, 0, 36462712412002552050234071, 0);\r\n    allocations[0x0deF4A4De337771c22Ac8C8D4b9C5Fec496841A5] = createAllocationEntry(182313562060012760251170355, 0, 36462712412002552050234071, 0);\r\n    allocations[0x467600367BdBA1d852dbd8C1661a5E6a2Be5F6C8] = createAllocationEntry(182313562060012760251170355, 0, 36462712412002552050234071, 0);\r\n    allocations[0x92E01739142386E4820eC8ddC3AFfF69de99641a] = createAllocationEntry(182313562060012760251170355, 0, 36462712412002552050234071, 0);\r\n    allocations[0x1E0a7E0706373d0b76752448ED33cA1E4070753A] = createAllocationEntry(182313562060012760251170357, 0, 36462712412002552050234071, 2);\r\n  }\r\n}\r\n\r\ncontract PoolDLock is PoolAllocations {\r\n\r\n  uint256 public constant totalAmount = 546940686180038280753511066;\r\n\r\n  function PoolDLock(ERC20Basic _token) PoolAllocations(_token) {\r\n    \r\n    // setup policy\r\n    maxNumOfPayoutCycles = 36; // total * .5 / 36\r\n    startDay = now + 3 years;  // first release date\r\n    cyclesStartFrom = 0;\r\n    payoutCycleInDays = 30 days; // 1/36 of tokens will be released every month\r\n\r\n    // allocations\r\n    allocations[0x4311F6F65B411f546c7DD8841A344614297Dbf62] = createAllocationEntry(\r\n      182313562060012760251170355, // total\r\n      91156781030006380125585177,  // first release\r\n      2532132806389066114599588,   // next release\r\n      10                           // the rest\r\n    );\r\n     allocations[0x3b52Ab408cd499A1456af83AC095fCa23C014e0d] = createAllocationEntry(\r\n      182313562060012760251170355, // total\r\n      91156781030006380125585177,  // first release\r\n      2532132806389066114599588,   // next release\r\n      10                           // the rest\r\n    );\r\n     allocations[0x728D5312FbbdFBcC1b9582E619f6ceB6412B98E4] = createAllocationEntry(\r\n      182313562060012760251170356, // total\r\n      91156781030006380125585177,  // first release\r\n      2532132806389066114599588,   // next release\r\n      11                           // the rest\r\n    );\r\n  }\r\n}\r\n\r\ncontract Pausable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n  address public owner;\r\n\r\n  function Pausable(address _owner) {\r\n    owner = _owner;\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev modifier to allow actions only when the contract IS paused\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev modifier to allow actions only when the contract IS NOT paused\r\n   */\r\n  modifier whenPaused {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused returns (bool) {\r\n    paused = true;\r\n    Pause();\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused returns (bool) {\r\n    paused = false;\r\n    Unpause();\r\n    return true;\r\n  }\r\n}\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) constant returns (uint256);\r\n  function transfer(address to, uint256 value) returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n   * @dev Fix for the ERC20 short address attack.\r\n   */\r\n  modifier onlyPayloadSize(uint numwords) {\r\n      assert(msg.data.length == numwords * 32 + 4);\r\n      _;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) onlyPayloadSize(2) returns (bool) {\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of. \r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) returns (bool);\r\n  function approve(address spender, uint256 value) returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amout of tokens to be transfered\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) onlyPayloadSize(3) returns (bool) {\r\n    var _allowance = allowed[_from][msg.sender];\r\n\r\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n    // require (_value <= _allowance);\r\n\r\n    balances[_to] = balances[_to].add(_value);\r\n    balances[_from] = balances[_from].sub(_value);\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) onlyPayloadSize(2) returns (bool) {\r\n\r\n    // To change the approve amount you first have to reduce the addresses`\r\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n    //  already 0 to mitigate the race condition described here:\r\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifing the amount of tokens still avaible for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n}\r\n\r\ncontract BlockvToken is StandardToken, Pausable {\r\n\r\n  string public constant name = \"BLOCKv Token\"; // Set the token name for display\r\n  string public constant symbol = \"VEE\";        // Set the token symbol for display\r\n  uint8  public constant decimals = 18;         // Set the number of decimals for display\r\n\r\n  PoolBLock public poolBLock;\r\n  PoolCLock public poolCLock;\r\n  PoolDLock public poolDLock;\r\n\r\n  uint256 public constant totalAmountOfTokens = 3646271241200255205023407108;\r\n  uint256 public constant amountOfTokensPoolA = 1276194934420089321758192488;\r\n  uint256 public constant amountOfTokensPoolB = 911567810300063801255851777;\r\n  uint256 public constant amountOfTokensPoolC = 911567810300063801255851777;\r\n  uint256 public constant amountOfTokensPoolD = 546940686180038280753511066;\r\n\r\n  // migration\r\n  address public migrationMaster;\r\n  address public migrationAgent;\r\n  uint256 public totalMigrated;\r\n  event Migrate(address indexed _from, address indexed _to, uint256 _value);\r\n\r\n  /**\r\n   * @dev BlockvToken Constructor\r\n   * Runs only on initial contract creation.\r\n   */\r\n  function BlockvToken(address _migrationMaster) Pausable(_migrationMaster) {\r\n    require(_migrationMaster != 0);\r\n    migrationMaster = _migrationMaster;\r\n\r\n    totalSupply = totalAmountOfTokens; // Set the total supply\r\n\r\n    balances[msg.sender] = amountOfTokensPoolA;\r\n    Transfer(0x0, msg.sender, amountOfTokensPoolA);\r\n  \r\n    // time-locked tokens\r\n    poolBLock = new PoolBLock(this);\r\n    poolCLock = new PoolCLock(this);\r\n    poolDLock = new PoolDLock(this);\r\n\r\n    balances[poolBLock] = amountOfTokensPoolB;\r\n    balances[poolCLock] = amountOfTokensPoolC;\r\n    balances[poolDLock] = amountOfTokensPoolD;\r\n\r\n    Transfer(0x0, poolBLock, amountOfTokensPoolB);\r\n    Transfer(0x0, poolCLock, amountOfTokensPoolC);\r\n    Transfer(0x0, poolDLock, amountOfTokensPoolD);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfer token for a specified address when not paused\r\n   * @param _to The address to transfer to.\r\n   * @param _value The amount to be transferred.\r\n   */\r\n  function transfer(address _to, uint256 _value) whenNotPaused returns (bool) {\r\n    require(_to != address(0));\r\n    require(_to != address(this));\r\n    return super.transfer(_to, _value);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another when not paused\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) whenNotPaused returns (bool) {\r\n    require(_to != address(0));\r\n    require(_from != _to);\r\n    require(_to != address(this));\r\n    return super.transferFrom(_from, _to, _value);\r\n  }\r\n\r\n  /**\r\n   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender when not paused.\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) whenNotPaused returns (bool) {\r\n    require(_spender != address(0));\r\n    require(_spender != address(this));\r\n    return super.approve(_spender, _value);\r\n  }\r\n\r\n  /**\r\n  * Token migration support:\r\n  */\r\n\r\n  /** \r\n  * @notice Migrate tokens to the new token contract.\r\n  * @dev Required state: Operational Migration\r\n  * @param _value The amount of token to be migrated\r\n  */\r\n  function migrate(uint256 _value) external {\r\n    require(migrationAgent != 0);\r\n    require(_value != 0);\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    totalSupply = totalSupply.sub(_value);\r\n    totalMigrated = totalMigrated.add(_value);\r\n    MigrationAgent(migrationAgent).migrateFrom(msg.sender, _value);\r\n    \r\n    Migrate(msg.sender, migrationAgent, _value);\r\n  }\r\n\r\n  /**\r\n  * @dev Set address of migration target contract and enable migration process.\r\n  * @param _agent The address of the MigrationAgent contract\r\n  */\r\n  function setMigrationAgent(address _agent) external {\r\n    require(_agent != 0);\r\n    require(migrationAgent == 0);\r\n    require(msg.sender == migrationMaster);\r\n\r\n    migrationAgent = _agent;\r\n  }\r\n\r\n  function setMigrationMaster(address _master) external {\r\n    require(_master != 0);\r\n    require(msg.sender == migrationMaster);\r\n\r\n    migrationMaster = _master;\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"poolDLock\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_master\",\"type\":\"address\"}],\"name\":\"setMigrationMaster\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"poolBLock\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"amountOfTokensPoolA\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"migrate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"migrationMaster\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"poolCLock\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"amountOfTokensPoolB\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_agent\",\"type\":\"address\"}],\"name\":\"setMigrationAgent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"migrationAgent\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalMigrated\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"amountOfTokensPoolC\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalAmountOfTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"amountOfTokensPoolD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_migrationMaster\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Migrate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"BlockvToken","CompilerVersion":"v0.4.17+commit.bdeb9e52","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000006CFA1A9CB5C94087f418B3cA45338e5Fd9c511B9","Library":"","SwarmSource":"bzzr://c6a34536db6fc0608a713bea6dbad42f113850027b7d137e28efc0b58eb5b46c"}]}