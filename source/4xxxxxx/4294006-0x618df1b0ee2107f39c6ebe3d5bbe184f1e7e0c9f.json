{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13;\r\n\r\nlibrary Strings {\r\n    struct slice {\r\n        uint _len;\r\n        uint _ptr;\r\n    }\r\n\r\n    function memcpy(uint dest, uint src, uint len) private {\r\n        // Copy word-length chunks while possible\r\n        for(; len >= 32; len -= 32) {\r\n            assembly {\r\n                mstore(dest, mload(src))\r\n            }\r\n            dest += 32;\r\n            src += 32;\r\n        }\r\n\r\n        // Copy remaining bytes\r\n        uint mask = 256 ** (32 - len) - 1;\r\n        assembly {\r\n            let srcpart := and(mload(src), not(mask))\r\n            let destpart := and(mload(dest), mask)\r\n            mstore(dest, or(destpart, srcpart))\r\n        }\r\n    }\r\n\r\n    /*\r\n     * @dev Returns a slice containing the entire string.\r\n     * @param self The string to make a slice from.\r\n     * @return A newly allocated slice containing the entire string.\r\n     */\r\n    function toSlice(string self) internal returns (slice) {\r\n        uint ptr;\r\n        assembly {\r\n            ptr := add(self, 0x20)\r\n        }\r\n        return slice(bytes(self).length, ptr);\r\n    }\r\n\r\n    /*\r\n     * @dev Returns the length of a null-terminated bytes32 string.\r\n     * @param self The value to find the length of.\r\n     * @return The length of the string, from 0 to 32.\r\n     */\r\n    function len(bytes32 self) internal returns (uint) {\r\n        uint ret;\r\n        if (self == 0)\r\n            return 0;\r\n        if (self & 0xffffffffffffffffffffffffffffffff == 0) {\r\n            ret += 16;\r\n            self = bytes32(uint(self) / 0x100000000000000000000000000000000);\r\n        }\r\n        if (self & 0xffffffffffffffff == 0) {\r\n            ret += 8;\r\n            self = bytes32(uint(self) / 0x10000000000000000);\r\n        }\r\n        if (self & 0xffffffff == 0) {\r\n            ret += 4;\r\n            self = bytes32(uint(self) / 0x100000000);\r\n        }\r\n        if (self & 0xffff == 0) {\r\n            ret += 2;\r\n            self = bytes32(uint(self) / 0x10000);\r\n        }\r\n        if (self & 0xff == 0) {\r\n            ret += 1;\r\n        }\r\n        return 32 - ret;\r\n    }\r\n\r\n    /*\r\n     * @dev Returns a slice containing the entire bytes32, interpreted as a\r\n     *      null-termintaed utf-8 string.\r\n     * @param self The bytes32 value to convert to a slice.\r\n     * @return A new slice containing the value of the input argument up to the\r\n     *         first null.\r\n     */\r\n    function toSliceB32(bytes32 self) internal returns (slice ret) {\r\n        // Allocate space for `self` in memory, copy it there, and point ret at it\r\n        assembly {\r\n            let ptr := mload(0x40)\r\n            mstore(0x40, add(ptr, 0x20))\r\n            mstore(ptr, self)\r\n            mstore(add(ret, 0x20), ptr)\r\n        }\r\n        ret._len = len(self);\r\n    }\r\n\r\n    /*\r\n     * @dev Returns a new slice containing the same data as the current slice.\r\n     * @param self The slice to copy.\r\n     * @return A new slice containing the same data as `self`.\r\n     */\r\n    function copy(slice self) internal returns (slice) {\r\n        return slice(self._len, self._ptr);\r\n    }\r\n\r\n    /*\r\n     * @dev Copies a slice to a new string.\r\n     * @param self The slice to copy.\r\n     * @return A newly allocated string containing the slice's text.\r\n     */\r\n    function toString(slice self) internal returns (string) {\r\n        var ret = new string(self._len);\r\n        uint retptr;\r\n        assembly { retptr := add(ret, 32) }\r\n\r\n        memcpy(retptr, self._ptr, self._len);\r\n        return ret;\r\n    }\r\n\r\n    /*\r\n     * @dev Returns the length in runes of the slice. Note that this operation\r\n     *      takes time proportional to the length of the slice; avoid using it\r\n     *      in loops, and call `slice.empty()` if you only need to know whether\r\n     *      the slice is empty or not.\r\n     * @param self The slice to operate on.\r\n     * @return The length of the slice in runes.\r\n     */\r\n    function len(slice self) internal returns (uint) {\r\n        // Starting at ptr-31 means the LSB will be the byte we care about\r\n        var ptr = self._ptr - 31;\r\n        var end = ptr + self._len;\r\n        for (uint len = 0; ptr < end; len++) {\r\n            uint8 b;\r\n            assembly { b := and(mload(ptr), 0xFF) }\r\n            if (b < 0x80) {\r\n                ptr += 1;\r\n            } else if(b < 0xE0) {\r\n                ptr += 2;\r\n            } else if(b < 0xF0) {\r\n                ptr += 3;\r\n            } else if(b < 0xF8) {\r\n                ptr += 4;\r\n            } else if(b < 0xFC) {\r\n                ptr += 5;\r\n            } else {\r\n                ptr += 6;\r\n            }\r\n        }\r\n        return len;\r\n    }\r\n\r\n    /*\r\n     * @dev Returns true if the slice is empty (has a length of 0).\r\n     * @param self The slice to operate on.\r\n     * @return True if the slice is empty, False otherwise.\r\n     */\r\n    function empty(slice self) internal returns (bool) {\r\n        return self._len == 0;\r\n    }\r\n\r\n    /*\r\n     * @dev Returns a positive number if `other` comes lexicographically after\r\n     *      `self`, a negative number if it comes before, or zero if the\r\n     *      contents of the two slices are equal. Comparison is done per-rune,\r\n     *      on unicode codepoints.\r\n     * @param self The first slice to compare.\r\n     * @param other The second slice to compare.\r\n     * @return The result of the comparison.\r\n     */\r\n    function compare(slice self, slice other) internal returns (int) {\r\n        uint shortest = self._len;\r\n        if (other._len < self._len)\r\n            shortest = other._len;\r\n\r\n        var selfptr = self._ptr;\r\n        var otherptr = other._ptr;\r\n        for (uint idx = 0; idx < shortest; idx += 32) {\r\n            uint a;\r\n            uint b;\r\n            assembly {\r\n                a := mload(selfptr)\r\n                b := mload(otherptr)\r\n            }\r\n            if (a != b) {\r\n                // Mask out irrelevant bytes and check again\r\n                uint mask = ~(2 ** (8 * (32 - shortest + idx)) - 1);\r\n                var diff = (a & mask) - (b & mask);\r\n                if (diff != 0)\r\n                    return int(diff);\r\n            }\r\n            selfptr += 32;\r\n            otherptr += 32;\r\n        }\r\n        return int(self._len) - int(other._len);\r\n    }\r\n\r\n    /*\r\n     * @dev Returns true if the two slices contain the same text.\r\n     * @param self The first slice to compare.\r\n     * @param self The second slice to compare.\r\n     * @return True if the slices are equal, false otherwise.\r\n     */\r\n    function equals(slice self, slice other) internal returns (bool) {\r\n        return compare(self, other) == 0;\r\n    }\r\n\r\n    /*\r\n     * @dev Extracts the first rune in the slice into `rune`, advancing the\r\n     *      slice to point to the next rune and returning `self`.\r\n     * @param self The slice to operate on.\r\n     * @param rune The slice that will contain the first rune.\r\n     * @return `rune`.\r\n     */\r\n    function nextRune(slice self, slice rune) internal returns (slice) {\r\n        rune._ptr = self._ptr;\r\n\r\n        if (self._len == 0) {\r\n            rune._len = 0;\r\n            return rune;\r\n        }\r\n\r\n        uint len;\r\n        uint b;\r\n        // Load the first byte of the rune into the LSBs of b\r\n        assembly { b := and(mload(sub(mload(add(self, 32)), 31)), 0xFF) }\r\n        if (b < 0x80) {\r\n            len = 1;\r\n        } else if(b < 0xE0) {\r\n            len = 2;\r\n        } else if(b < 0xF0) {\r\n            len = 3;\r\n        } else {\r\n            len = 4;\r\n        }\r\n\r\n        // Check for truncated codepoints\r\n        if (len > self._len) {\r\n            rune._len = self._len;\r\n            self._ptr += self._len;\r\n            self._len = 0;\r\n            return rune;\r\n        }\r\n\r\n        self._ptr += len;\r\n        self._len -= len;\r\n        rune._len = len;\r\n        return rune;\r\n    }\r\n\r\n    /*\r\n     * @dev Returns the first rune in the slice, advancing the slice to point\r\n     *      to the next rune.\r\n     * @param self The slice to operate on.\r\n     * @return A slice containing only the first rune from `self`.\r\n     */\r\n    function nextRune(slice self) internal returns (slice ret) {\r\n        nextRune(self, ret);\r\n    }\r\n\r\n    /*\r\n     * @dev Returns the number of the first codepoint in the slice.\r\n     * @param self The slice to operate on.\r\n     * @return The number of the first codepoint in the slice.\r\n     */\r\n    function ord(slice self) internal returns (uint ret) {\r\n        if (self._len == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint word;\r\n        uint len;\r\n        uint div = 2 ** 248;\r\n\r\n        // Load the rune into the MSBs of b\r\n        assembly { word:= mload(mload(add(self, 32))) }\r\n        var b = word / div;\r\n        if (b < 0x80) {\r\n            ret = b;\r\n            len = 1;\r\n        } else if(b < 0xE0) {\r\n            ret = b & 0x1F;\r\n            len = 2;\r\n        } else if(b < 0xF0) {\r\n            ret = b & 0x0F;\r\n            len = 3;\r\n        } else {\r\n            ret = b & 0x07;\r\n            len = 4;\r\n        }\r\n\r\n        // Check for truncated codepoints\r\n        if (len > self._len) {\r\n            return 0;\r\n        }\r\n\r\n        for (uint i = 1; i < len; i++) {\r\n            div = div / 256;\r\n            b = (word / div) & 0xFF;\r\n            if (b & 0xC0 != 0x80) {\r\n                // Invalid UTF-8 sequence\r\n                return 0;\r\n            }\r\n            ret = (ret * 64) | (b & 0x3F);\r\n        }\r\n\r\n        return ret;\r\n    }\r\n\r\n    /*\r\n     * @dev Returns the keccak-256 hash of the slice.\r\n     * @param self The slice to hash.\r\n     * @return The hash of the slice.\r\n     */\r\n    function keccak(slice self) internal returns (bytes32 ret) {\r\n        assembly {\r\n            ret := sha3(mload(add(self, 32)), mload(self))\r\n        }\r\n    }\r\n\r\n    /*\r\n     * @dev Returns true if `self` starts with `needle`.\r\n     * @param self The slice to operate on.\r\n     * @param needle The slice to search for.\r\n     * @return True if the slice starts with the provided text, false otherwise.\r\n     */\r\n    function startsWith(slice self, slice needle) internal returns (bool) {\r\n        if (self._len < needle._len) {\r\n            return false;\r\n        }\r\n\r\n        if (self._ptr == needle._ptr) {\r\n            return true;\r\n        }\r\n\r\n        bool equal;\r\n        assembly {\r\n            let len := mload(needle)\r\n            let selfptr := mload(add(self, 0x20))\r\n            let needleptr := mload(add(needle, 0x20))\r\n            equal := eq(sha3(selfptr, len), sha3(needleptr, len))\r\n        }\r\n        return equal;\r\n    }\r\n\r\n    /*\r\n     * @dev If `self` starts with `needle`, `needle` is removed from the\r\n     *      beginning of `self`. Otherwise, `self` is unmodified.\r\n     * @param self The slice to operate on.\r\n     * @param needle The slice to search for.\r\n     * @return `self`\r\n     */\r\n    function beyond(slice self, slice needle) internal returns (slice) {\r\n        if (self._len < needle._len) {\r\n            return self;\r\n        }\r\n\r\n        bool equal = true;\r\n        if (self._ptr != needle._ptr) {\r\n            assembly {\r\n                let len := mload(needle)\r\n                let selfptr := mload(add(self, 0x20))\r\n                let needleptr := mload(add(needle, 0x20))\r\n                equal := eq(sha3(selfptr, len), sha3(needleptr, len))\r\n            }\r\n        }\r\n\r\n        if (equal) {\r\n            self._len -= needle._len;\r\n            self._ptr += needle._len;\r\n        }\r\n\r\n        return self;\r\n    }\r\n\r\n    /*\r\n     * @dev Returns true if the slice ends with `needle`.\r\n     * @param self The slice to operate on.\r\n     * @param needle The slice to search for.\r\n     * @return True if the slice starts with the provided text, false otherwise.\r\n     */\r\n    function endsWith(slice self, slice needle) internal returns (bool) {\r\n        if (self._len < needle._len) {\r\n            return false;\r\n        }\r\n\r\n        var selfptr = self._ptr + self._len - needle._len;\r\n\r\n        if (selfptr == needle._ptr) {\r\n            return true;\r\n        }\r\n\r\n        bool equal;\r\n        assembly {\r\n            let len := mload(needle)\r\n            let needleptr := mload(add(needle, 0x20))\r\n            equal := eq(sha3(selfptr, len), sha3(needleptr, len))\r\n        }\r\n\r\n        return equal;\r\n    }\r\n\r\n    /*\r\n     * @dev If `self` ends with `needle`, `needle` is removed from the\r\n     *      end of `self`. Otherwise, `self` is unmodified.\r\n     * @param self The slice to operate on.\r\n     * @param needle The slice to search for.\r\n     * @return `self`\r\n     */\r\n    function until(slice self, slice needle) internal returns (slice) {\r\n        if (self._len < needle._len) {\r\n            return self;\r\n        }\r\n\r\n        var selfptr = self._ptr + self._len - needle._len;\r\n        bool equal = true;\r\n        if (selfptr != needle._ptr) {\r\n            assembly {\r\n                let len := mload(needle)\r\n                let needleptr := mload(add(needle, 0x20))\r\n                equal := eq(sha3(selfptr, len), sha3(needleptr, len))\r\n            }\r\n        }\r\n\r\n        if (equal) {\r\n            self._len -= needle._len;\r\n        }\r\n\r\n        return self;\r\n    }\r\n\r\n    // Returns the memory address of the first byte of the first occurrence of\r\n    // `needle` in `self`, or the first byte after `self` if not found.\r\n    function findPtr(uint selflen, uint selfptr, uint needlelen, uint needleptr) private returns (uint) {\r\n        uint ptr;\r\n        uint idx;\r\n\r\n        if (needlelen <= selflen) {\r\n            if (needlelen <= 32) {\r\n                // Optimized assembly for 68 gas per byte on short strings\r\n                assembly {\r\n                    let mask := not(sub(exp(2, mul(8, sub(32, needlelen))), 1))\r\n                    let needledata := and(mload(needleptr), mask)\r\n                    let end := add(selfptr, sub(selflen, needlelen))\r\n                    ptr := selfptr\r\n                    loop:\r\n                    jumpi(exit, eq(and(mload(ptr), mask), needledata))\r\n                    ptr := add(ptr, 1)\r\n                    jumpi(loop, lt(sub(ptr, 1), end))\r\n                    ptr := add(selfptr, selflen)\r\n                    exit:\r\n                }\r\n                return ptr;\r\n            } else {\r\n                // For long needles, use hashing\r\n                bytes32 hash;\r\n                assembly { hash := sha3(needleptr, needlelen) }\r\n                ptr = selfptr;\r\n                for (idx = 0; idx <= selflen - needlelen; idx++) {\r\n                    bytes32 testHash;\r\n                    assembly { testHash := sha3(ptr, needlelen) }\r\n                    if (hash == testHash)\r\n                        return ptr;\r\n                    ptr += 1;\r\n                }\r\n            }\r\n        }\r\n        return selfptr + selflen;\r\n    }\r\n\r\n    // Returns the memory address of the first byte after the last occurrence of\r\n    // `needle` in `self`, or the address of `self` if not found.\r\n    function rfindPtr(uint selflen, uint selfptr, uint needlelen, uint needleptr) private returns (uint) {\r\n        uint ptr;\r\n\r\n        if (needlelen <= selflen) {\r\n            if (needlelen <= 32) {\r\n                // Optimized assembly for 69 gas per byte on short strings\r\n                assembly {\r\n                    let mask := not(sub(exp(2, mul(8, sub(32, needlelen))), 1))\r\n                    let needledata := and(mload(needleptr), mask)\r\n                    ptr := add(selfptr, sub(selflen, needlelen))\r\n                    loop:\r\n                    jumpi(ret, eq(and(mload(ptr), mask), needledata))\r\n                    ptr := sub(ptr, 1)\r\n                    jumpi(loop, gt(add(ptr, 1), selfptr))\r\n                    ptr := selfptr\r\n                    jump(exit)\r\n                    ret:\r\n                    ptr := add(ptr, needlelen)\r\n                    exit:\r\n                }\r\n                return ptr;\r\n            } else {\r\n                // For long needles, use hashing\r\n                bytes32 hash;\r\n                assembly { hash := sha3(needleptr, needlelen) }\r\n                ptr = selfptr + (selflen - needlelen);\r\n                while (ptr >= selfptr) {\r\n                    bytes32 testHash;\r\n                    assembly { testHash := sha3(ptr, needlelen) }\r\n                    if (hash == testHash)\r\n                        return ptr + needlelen;\r\n                    ptr -= 1;\r\n                }\r\n            }\r\n        }\r\n        return selfptr;\r\n    }\r\n\r\n    /*\r\n     * @dev Modifies `self` to contain everything from the first occurrence of\r\n     *      `needle` to the end of the slice. `self` is set to the empty slice\r\n     *      if `needle` is not found.\r\n     * @param self The slice to search and modify.\r\n     * @param needle The text to search for.\r\n     * @return `self`.\r\n     */\r\n    function find(slice self, slice needle) internal returns (slice) {\r\n        uint ptr = findPtr(self._len, self._ptr, needle._len, needle._ptr);\r\n        self._len -= ptr - self._ptr;\r\n        self._ptr = ptr;\r\n        return self;\r\n    }\r\n\r\n    /*\r\n     * @dev Modifies `self` to contain the part of the string from the start of\r\n     *      `self` to the end of the first occurrence of `needle`. If `needle`\r\n     *      is not found, `self` is set to the empty slice.\r\n     * @param self The slice to search and modify.\r\n     * @param needle The text to search for.\r\n     * @return `self`.\r\n     */\r\n    function rfind(slice self, slice needle) internal returns (slice) {\r\n        uint ptr = rfindPtr(self._len, self._ptr, needle._len, needle._ptr);\r\n        self._len = ptr - self._ptr;\r\n        return self;\r\n    }\r\n\r\n    /*\r\n     * @dev Splits the slice, setting `self` to everything after the first\r\n     *      occurrence of `needle`, and `token` to everything before it. If\r\n     *      `needle` does not occur in `self`, `self` is set to the empty slice,\r\n     *      and `token` is set to the entirety of `self`.\r\n     * @param self The slice to split.\r\n     * @param needle The text to search for in `self`.\r\n     * @param token An output parameter to which the first token is written.\r\n     * @return `token`.\r\n     */\r\n    function split(slice self, slice needle, slice token) internal returns (slice) {\r\n        uint ptr = findPtr(self._len, self._ptr, needle._len, needle._ptr);\r\n        token._ptr = self._ptr;\r\n        token._len = ptr - self._ptr;\r\n        if (ptr == self._ptr + self._len) {\r\n            // Not found\r\n            self._len = 0;\r\n        } else {\r\n            self._len -= token._len + needle._len;\r\n            self._ptr = ptr + needle._len;\r\n        }\r\n        return token;\r\n    }\r\n\r\n    /*\r\n     * @dev Splits the slice, setting `self` to everything after the first\r\n     *      occurrence of `needle`, and returning everything before it. If\r\n     *      `needle` does not occur in `self`, `self` is set to the empty slice,\r\n     *      and the entirety of `self` is returned.\r\n     * @param self The slice to split.\r\n     * @param needle The text to search for in `self`.\r\n     * @return The part of `self` up to the first occurrence of `delim`.\r\n     */\r\n    function split(slice self, slice needle) internal returns (slice token) {\r\n        split(self, needle, token);\r\n    }\r\n\r\n    /*\r\n     * @dev Splits the slice, setting `self` to everything before the last\r\n     *      occurrence of `needle`, and `token` to everything after it. If\r\n     *      `needle` does not occur in `self`, `self` is set to the empty slice,\r\n     *      and `token` is set to the entirety of `self`.\r\n     * @param self The slice to split.\r\n     * @param needle The text to search for in `self`.\r\n     * @param token An output parameter to which the first token is written.\r\n     * @return `token`.\r\n     */\r\n    function rsplit(slice self, slice needle, slice token) internal returns (slice) {\r\n        uint ptr = rfindPtr(self._len, self._ptr, needle._len, needle._ptr);\r\n        token._ptr = ptr;\r\n        token._len = self._len - (ptr - self._ptr);\r\n        if (ptr == self._ptr) {\r\n            // Not found\r\n            self._len = 0;\r\n        } else {\r\n            self._len -= token._len + needle._len;\r\n        }\r\n        return token;\r\n    }\r\n\r\n    /*\r\n     * @dev Splits the slice, setting `self` to everything before the last\r\n     *      occurrence of `needle`, and returning everything after it. If\r\n     *      `needle` does not occur in `self`, `self` is set to the empty slice,\r\n     *      and the entirety of `self` is returned.\r\n     * @param self The slice to split.\r\n     * @param needle The text to search for in `self`.\r\n     * @return The part of `self` after the last occurrence of `delim`.\r\n     */\r\n    function rsplit(slice self, slice needle) internal returns (slice token) {\r\n        rsplit(self, needle, token);\r\n    }\r\n\r\n    /*\r\n     * @dev Counts the number of nonoverlapping occurrences of `needle` in `self`.\r\n     * @param self The slice to search.\r\n     * @param needle The text to search for in `self`.\r\n     * @return The number of occurrences of `needle` found in `self`.\r\n     */\r\n    function count(slice self, slice needle) internal returns (uint count) {\r\n        uint ptr = findPtr(self._len, self._ptr, needle._len, needle._ptr) + needle._len;\r\n        while (ptr <= self._ptr + self._len) {\r\n            count++;\r\n            ptr = findPtr(self._len - (ptr - self._ptr), ptr, needle._len, needle._ptr) + needle._len;\r\n        }\r\n    }\r\n\r\n    /*\r\n     * @dev Returns True if `self` contains `needle`.\r\n     * @param self The slice to search.\r\n     * @param needle The text to search for in `self`.\r\n     * @return True if `needle` is found in `self`, false otherwise.\r\n     */\r\n    function contains(slice self, slice needle) internal returns (bool) {\r\n        return rfindPtr(self._len, self._ptr, needle._len, needle._ptr) != self._ptr;\r\n    }\r\n\r\n    /*\r\n     * @dev Returns a newly allocated string containing the concatenation of\r\n     *      `self` and `other`.\r\n     * @param self The first slice to concatenate.\r\n     * @param other The second slice to concatenate.\r\n     * @return The concatenation of the two strings.\r\n     */\r\n    function concat(slice self, slice other) internal returns (string) {\r\n        var ret = new string(self._len + other._len);\r\n        uint retptr;\r\n        assembly { retptr := add(ret, 32) }\r\n        memcpy(retptr, self._ptr, self._len);\r\n        memcpy(retptr + self._len, other._ptr, other._len);\r\n        return ret;\r\n    }\r\n\r\n    /*\r\n     * @dev Joins an array of slices, using `self` as a delimiter, returning a\r\n     *      newly allocated string.\r\n     * @param self The delimiter to use.\r\n     * @param parts A list of slices to join.\r\n     * @return A newly allocated string containing all the slices in `parts`,\r\n     *         joined with `self`.\r\n     */\r\n    function join(slice self, slice[] parts) internal returns (string) {\r\n        if (parts.length == 0)\r\n            return \"\";\r\n\r\n        uint len = self._len * (parts.length - 1);\r\n        for(uint i = 0; i < parts.length; i++)\r\n            len += parts[i]._len;\r\n\r\n        var ret = new string(len);\r\n        uint retptr;\r\n        assembly { retptr := add(ret, 32) }\r\n\r\n        for(i = 0; i < parts.length; i++) {\r\n            memcpy(retptr, parts[i]._ptr, parts[i]._len);\r\n            retptr += parts[i]._len;\r\n            if (i < parts.length - 1) {\r\n                memcpy(retptr, self._ptr, self._len);\r\n                retptr += self._len;\r\n            }\r\n        }\r\n\r\n        return ret;\r\n    }\r\n}\r\n\r\nlibrary ConvertStringByte {\r\n  function bytes32ToString(bytes32 x) constant returns (string) {\r\n    bytes memory bytesString = new bytes(32);\r\n    uint charCount = 0;\r\n    for (uint j = 0; j < 32; j++) {\r\n      byte char = byte(bytes32(uint(x) * 2 ** (8 * j)));\r\n      if (char != 0) {\r\n          bytesString[charCount] = char;\r\n          charCount++;\r\n      }\r\n    }\r\n    bytes memory bytesStringTrimmed = new bytes(charCount);\r\n    for (j = 0; j < charCount; j++) {\r\n      bytesStringTrimmed[j] = bytesString[j];\r\n    }\r\n    return string(bytesStringTrimmed);\r\n  }\r\n\r\n  function stringToBytes32(string memory source) returns (bytes32 result) {\r\n    assembly {\r\n      result := mload(add(source, 32))\r\n    }\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner {\r\n    if (newOwner != address(0)) {\r\n      owner = newOwner;\r\n    }\r\n  }\r\n\r\n}\r\n\r\n\r\ncontract Platinum is Ownable {\r\n  using SafeMath for uint256;\r\n  using Strings for *;\r\n\r\n  // ========= 宣告 =========\r\n  string public version = \"0.0.1\";\r\n  // 基本單位\r\n  string public unit = \"oz\";\r\n  // 總供給量\r\n  uint256 public total;\r\n  // 存貨\r\n  struct Bullion {\r\n    string index;\r\n    string unit;\r\n    uint256 amount;\r\n    string ipfs;\r\n  }\r\n  bytes32[] public storehouseIndex;\r\n  mapping (bytes32 => Bullion) public storehouse;\r\n  // 掛勾貨幣\r\n  address public token;\r\n  // 匯率 1白金：白金幣\r\n  uint256 public rate = 10;\r\n  // PlatinumToken 實例\r\n  PlatinumToken coin;\r\n\r\n\r\n\r\n\r\n\r\n  // ========= 初始化 =========\r\n  function Platinum() {\r\n\r\n  }\r\n\r\n\r\n\r\n\r\n  // ========= event =========\r\n  event Stock (\r\n    string index,\r\n    string unit,\r\n    uint256 amount,\r\n    string ipfs,\r\n    uint256 total\r\n  );\r\n\r\n  event Ship (\r\n    string index,\r\n    uint256 total\r\n  );\r\n\r\n  event Mint (\r\n    uint256 amount,\r\n    uint256 total\r\n  );\r\n\r\n  event Alchemy (\r\n    uint256 amount,\r\n    uint256 total\r\n  );\r\n\r\n  event Buy (\r\n    string index,\r\n    address from,\r\n    uint256 fee,\r\n    uint256 price\r\n  );\r\n\r\n\r\n\r\n\r\n\r\n\r\n  // ========= 擁有者方法 =========\r\n\r\n  /**\r\n   * 操作存貨-進貨\r\n   *\r\n   * 此方法執行：\r\n   *  - 紀錄新增的白金，紀錄資訊：\r\n   *    - index: 白金編號\r\n   *    - unit: 白金單位\r\n   *    - amount: 數量\r\n   *    - ipfs: 白金證明URL\r\n   *  - 增加白金總庫存數量，量為amount\r\n   *\r\n   * Requires:\r\n   *  - 執行者須為owner\r\n   *  - 白金編號index不能重複\r\n   *  - 單位須等於目前合約所設定的單位\r\n   *  - 量amount需大於0\r\n   *\r\n   * Returns:\r\n   *  - bool: 執行成功時，回傳true\r\n   *\r\n   * Events:\r\n   *  - Stock: 執行成功時觸發\r\n   */\r\n  function stock(string _index, string _unit, uint256 _amount, string _ipfs) onlyOwner returns (bool) {\r\n    bytes32 _bindex = ConvertStringByte.stringToBytes32(_index);\r\n\r\n    require(_amount > 0);\r\n    require(_unit.toSlice().equals(unit.toSlice()));\r\n    require(!(storehouse[_bindex].amount > 0));\r\n\r\n    Bullion bullion = storehouse[_bindex];\r\n    bullion.index = _index;\r\n    bullion.unit = _unit;\r\n    bullion.amount = _amount;\r\n    bullion.ipfs = _ipfs;\r\n\r\n    // 加入倉儲目錄\r\n    storehouseIndex.push(_bindex);\r\n    // 加入倉儲\r\n    storehouse[_bindex] = bullion;\r\n\r\n    // 增加總庫存\r\n    total = total.add(_amount);\r\n\r\n    Stock(bullion.index, bullion.unit, bullion.amount, bullion.ipfs, total);\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * 操作存貨-出貨\r\n   *\r\n   * 此方法執行：\r\n   *  - 移除白金庫存\r\n   *  - 減少白金總庫存量，量為白金庫存的數量\r\n   *\r\n   * Requires:\r\n   *  - 執行者為owner\r\n   *  - 白金編號index需存在於紀錄（已使用stock方法新增該庫存）\r\n   *  - 白金總庫存需足夠，大於指定白金庫存的數量\r\n   *\r\n   * Returns:\r\n   *  - bool: 執行成功時，回傳true\r\n   *\r\n   * Events:\r\n   *  - Ship: 執行成功時觸發\r\n   */\r\n  function ship(string _index) onlyOwner returns (bool) {\r\n    bytes32 _bindex = ConvertStringByte.stringToBytes32(_index);\r\n\r\n    require(storehouse[_bindex].amount > 0);\r\n    Bullion bullion = storehouse[_bindex];\r\n    require(total.sub(bullion.amount) >= 0);\r\n\r\n    uint256 tmpAmount = bullion.amount;\r\n\r\n    for (uint256 index = 0; index < storehouseIndex.length; index++) {\r\n      Bullion _bullion = storehouse[storehouseIndex[index]];\r\n      if (_bullion.index.toSlice().equals(_index.toSlice())) {\r\n        // 從倉儲目錄移除\r\n        delete storehouseIndex[index];\r\n      }\r\n    }\r\n    // 從倉儲移除\r\n    delete storehouse[_bindex];\r\n    // 減少總庫存\r\n    total = total.sub(tmpAmount);\r\n\r\n    Ship(bullion.index, total);\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * 鑄幣\r\n   *\r\n   * 此方法執行：\r\n   *  - 增加白金代幣數量\r\n   *  - 減少總白金庫存\r\n   *\r\n   * Requires:\r\n   *  - 執行者為owner\r\n   *  - 白金總庫存需足夠，即大於等於ptAmount\r\n   *  - 白金代幣合約需已設定（setTokenAddress方法）\r\n   *\r\n   * Returns:\r\n   *  - bool: 執行成功時，回傳true\r\n   *\r\n   * Events:\r\n   *  - Mint: 執行成功時觸發\r\n   */\r\n  function mint(uint256 _ptAmount) onlyOwner returns (bool) {\r\n    require(token != 0x0);\r\n\r\n    uint256 amount = convert2PlatinumToken(_ptAmount);\r\n    // 發送token的增加涵式\r\n    bool produced = coin.produce(amount);\r\n    require(produced);\r\n\r\n    total = total.sub(_ptAmount);\r\n\r\n    Mint(_ptAmount, total);\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * 煉金\r\n   *\r\n   * 此方法執行：\r\n   *  - 減少白金代幣\r\n   *  - 增加總白金庫存\r\n   *\r\n   * Requires:\r\n   *  - 執行者為owner\r\n   *  - 需已設定白金代幣合約（setTokenAddress方法）\r\n   *  - 白金代幣owner所擁有的代幣足夠，即tokenAmount小於等於代幣owner的白金代幣數量\r\n   *\r\n   * Returns:\r\n   *  - bool: 執行成功，回傳true\r\n   *\r\n   * Events:\r\n   *  - Alchemy: 執行成功時觸發\r\n   */\r\n  function alchemy(uint256 _tokenAmount) onlyOwner returns (bool) {\r\n    require(token != 0x0);\r\n\r\n    uint256 amount = convert2Platinum(_tokenAmount);\r\n    bool reduced = coin.reduce(_tokenAmount);\r\n    require(reduced);\r\n\r\n    total = total.add(amount);\r\n\r\n    Alchemy(amount, total);\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * 設定-匯率\r\n   *\r\n   * 匯率規則:\r\n   *  - 白金數量 * 匯率 = 白金代幣數量\r\n   *  - 白金代幣數量 / 匯率 = 白金數量\r\n   *\r\n   * Requires:\r\n   *  - 執行者為owner\r\n   *  - 匯率rate需大於0\r\n   *\r\n   * Returns:\r\n   *  - bool: 執行成功，回傳true\r\n   */\r\n  function setRate(uint256 _rate) onlyOwner returns (bool) {\r\n    require(_rate > 0);\r\n\r\n    rate = _rate;\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * 設定-Token地址\r\n   *\r\n   * 設定白金合約地址\r\n   *\r\n   * Requires:\r\n   *  - 執行者為owner\r\n   *  - 合約地址address不為0\r\n   *\r\n   * Returns:\r\n   *  - bool: 執行成功，回傳true\r\n   */\r\n  function setTokenAddress(address _address) onlyOwner returns (bool) {\r\n    require(_address != 0x0);\r\n\r\n    coin = PlatinumToken(_address);\r\n    token = _address;\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * 購買金條\r\n   *\r\n   * 此方法執行：\r\n   *  - 扣除buyer的白金代幣\r\n   *  - 移除白金庫存，代表buyer已從庫存買走白金\r\n   *\r\n   * Requires:\r\n   *  - 執行者為owner\r\n   *  - 白金編號index需存在於紀錄（已使用stock方法新增該庫存）\r\n   *\r\n   * Returns:\r\n   *  - bool: 執行成功，回傳true\r\n   *\r\n   * Events:\r\n   *  - Buy: 執行成功時觸發\r\n   */\r\n  function buy(string _index, address buyer) onlyOwner returns (bool) {\r\n    require(token != 0x0);\r\n    bytes32 _bindex = ConvertStringByte.stringToBytes32(_index);\r\n    uint256 fee = coin.fee();\r\n    require(storehouse[_bindex].amount > 0);\r\n\r\n    Bullion bullion = storehouse[_bindex];\r\n    uint256 tokenPrice = convert2PlatinumToken(bullion.amount);\r\n    uint256 tokenPriceFee = tokenPrice.add(fee);\r\n\r\n    // 轉帳\r\n    bool transfered = coin.transferFrom(buyer, coin.owner(), tokenPriceFee);\r\n    require(transfered);\r\n\r\n    // 直接把剛剛賣出的價格煉金\r\n    bool reduced = coin.reduce(tokenPrice);\r\n    require(reduced);\r\n\r\n    // 減少庫存\r\n    for (uint256 index = 0; index < storehouseIndex.length; index++) {\r\n      Bullion _bullion = storehouse[storehouseIndex[index]];\r\n      if (_bullion.index.toSlice().equals(_index.toSlice())) {\r\n        // 從倉儲目錄移除\r\n        delete storehouseIndex[index];\r\n      }\r\n    }\r\n    // 從倉儲移除\r\n    delete storehouse[_bindex];\r\n\r\n    Buy(_index, buyer, fee, tokenPrice);\r\n\r\n    return true;\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n  // ========= 公共方法 =========\r\n\r\n  // 比率轉換-白金幣換白金\r\n  function convert2Platinum(uint256 _amount) constant returns (uint256) {\r\n    return _amount.div(rate);\r\n  }\r\n\r\n  // 比率轉換-白金換白金幣\r\n  function convert2PlatinumToken(uint256 _amount) constant returns (uint256) {\r\n    return _amount.mul(rate);\r\n  }\r\n\r\n  // 金條資訊\r\n  function info(string _index) constant returns (string, string, uint256, string) {\r\n    bytes32 _bindex = ConvertStringByte.stringToBytes32(_index);\r\n    require(storehouse[_bindex].amount > 0);\r\n\r\n    Bullion bullion = storehouse[_bindex];\r\n\r\n    return (bullion.index, bullion.unit, bullion.amount, bullion.ipfs);\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) constant returns (uint256);\r\n  function transfer(address to, uint256 value) returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) returns (bool);\r\n  function approve(address spender, uint256 value) returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\ncontract PlatinumToken is Ownable, ERC20 {\r\n  using SafeMath for uint256;\r\n  // ========= 宣告 =========\r\n\r\n  // 版本\r\n  string public version = \"0.0.1\";\r\n  // 名稱\r\n  string public name;\r\n  // 標記\r\n  string public symbol;\r\n  // 小數點位數\r\n  uint256 public decimals;\r\n  // 白金合約地址\r\n  address public platinum;\r\n\r\n  mapping (address => mapping (address => uint256)) allowed;\r\n  mapping(address => uint256) balances;\r\n  // 總供給量\r\n  uint256 public totalSupply;\r\n  // 手續費\r\n  uint256 public fee = 10;\r\n\r\n  // ========= 初始化 =========\r\n  function PlatinumToken(\r\n    uint256 initialSupply,\r\n    string tokenName,\r\n    uint8 decimalUnits,\r\n    string tokenSymbol\r\n    ) {\r\n    balances[msg.sender] = initialSupply;\r\n    totalSupply = initialSupply;\r\n    name = tokenName;\r\n    symbol = tokenSymbol;\r\n    decimals = decimalUnits;\r\n  }\r\n\r\n  // ========= 權限控管 =========\r\n  modifier isPlatinumContract() {\r\n    require(platinum != 0x0);\r\n    require(msg.sender == platinum);\r\n    _;\r\n  }\r\n\r\n  modifier isOwnerOrPlatinumContract() {\r\n    require(msg.sender != address(0) && (msg.sender == platinum || msg.sender == owner));\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * 增產\r\n   *\r\n   *  此方法執行：\r\n   *    - 增加owner的balance，量為指定的amount\r\n   *    - 增加totalSupply，量為指定的amount\r\n   *\r\n   *  Requires:\r\n   *    - 執行者為白金合約（可透過setPlatinumAddress方法設定）\r\n   *    - amount須設定為0以上\r\n   *\r\n   *  Return:\r\n   *    - bool: 執行成功回傳true\r\n   */\r\n  function produce(uint256 amount) isPlatinumContract returns (bool) {\r\n    balances[owner] = balances[owner].add(amount);\r\n    totalSupply = totalSupply.add(amount);\r\n\r\n    return true;\r\n  }\r\n\r\n  /** 減產\r\n   *\r\n   *  此方法執行：\r\n   *    - 減少owner的balance，量為指定的amount\r\n   *    - 減少totalSupply，量為指定的amount\r\n   *\r\n   *  Requires:\r\n   *    - 執行者為白金合約（可透過setPlatinumAddress方法設定）\r\n   *    - amount須設定為0以上\r\n   *    - owner的balance需大於等於指定的amount\r\n   *    - totalSupply需大於等於指定的amount\r\n   *\r\n   *  Return:\r\n   *    - bool: 執行成功回傳true\r\n   */\r\n  function reduce(uint256 amount) isPlatinumContract returns (bool) {\r\n    require(balances[owner].sub(amount) >= 0);\r\n    require(totalSupply.sub(amount) >= 0);\r\n\r\n    balances[owner] = balances[owner].sub(amount);\r\n    totalSupply = totalSupply.sub(amount);\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * 設定-白金合約地址\r\n   *\r\n   * 此方法執行：\r\n   *  - 修改此合約所認識的白金合約地址，此地址決定能執行produce和reduce方法的合約\r\n   *\r\n   * Requires:\r\n   *  - 執行者須為owner\r\n   *  - 地址不能設為0\r\n   *\r\n   * Returns:\r\n   *  - bool: 設定成功時回傳true\r\n   */\r\n  function setPlatinumAddress(address _address) onlyOwner returns (bool) {\r\n    require(_address != 0x0);\r\n\r\n    platinum = _address;\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * 設定-手續費\r\n   *\r\n   * 手續費規則：\r\n   *  - 購買金條時，代幣量總量增加手續費為總扣除代幣總量\r\n   *\r\n   * Requires:\r\n   *  - 執行者為owner\r\n   *\r\n   * Returns:\r\n   *  - bool: 執行成功，回傳true\r\n   */\r\n  function setFee(uint256 _fee) onlyOwner returns (bool) {\r\n    require(_fee >= 0);\r\n\r\n    fee = _fee;\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * 交易，轉移白金代幣\r\n   *\r\n   * 此方法執行：\r\n   *  - 減少from的白金代幣，量為value\r\n   *  - 增加to的白金代幣，量為value\r\n   *\r\n   * Requires:\r\n   *  - 執行者為owner\r\n   *\r\n   * Returns:\r\n   *  - bool: 執行成功回傳true\r\n   *\r\n   * Events:\r\n   *  - Transfer: 執行成功時，觸發此事件\r\n   */\r\n  function transfer(address _to, uint256 _value) onlyOwner returns (bool) {\r\n    balances[owner] = balances[owner].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n\r\n    Transfer(owner, _to, _value);\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * 查詢白金代幣餘額\r\n   *\r\n   * Returns:\r\n   *  - balance: 指定address的白金代幣餘額\r\n   */\r\n  function balanceOf(address _owner) constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n  /**\r\n   * 轉帳\r\n   *\r\n   * 實際將approve過的token數量進行交易\r\n   *\r\n   * 此方法執行：\r\n   *  - 交易指定數量的代幣\r\n   *\r\n   * Requires:\r\n   *  - 交易的代幣數量value需大於0\r\n   *  - allowed的代幣數量需大於value（allowed的代幣先由呼叫approve方法設定）\r\n   *\r\n   * Returns:\r\n   *  - bool: 執行成功，回傳true\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) isOwnerOrPlatinumContract returns (bool) {\r\n    var _allowance = allowed[_from][owner];\r\n\r\n    uint256 valueSubFee = _value.sub(fee);\r\n\r\n    balances[_to] = balances[_to].add(valueSubFee);\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[owner] = balances[owner].add(fee);\r\n    allowed[_from][owner] = _allowance.sub(_value);\r\n\r\n    Transfer(_from, _to, _value);\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * 轉帳 - 允許\r\n   *\r\n   * 允許一定數量的代幣可以轉帳至owner\r\n   *\r\n   * 欲修改允許值，需先執行此方法將value設為0，再執行一次此方法將value設為指定值\r\n   *\r\n   * 此方法操作：\r\n   *  - 修改allowed值，紀錄sender允許轉帳value數量代幣給owner\r\n   *  - allowed值有設定時，value須為0\r\n   *  - allowed值未設定時，value不為0\r\n   *\r\n   * Returns:\r\n   *  - bool: 執行成功，回傳true\r\n   */\r\n  function approve(address _dummy, uint256 _value) returns (bool) {\r\n    // To change the approve amount you first have to reduce the addresses`\r\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n    //  already 0 to mitigate the race condition described here:\r\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    require((_value == 0) || (allowed[msg.sender][owner] == 0));\r\n\r\n    allowed[msg.sender][owner] = _value;\r\n    Approval(msg.sender, owner, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * 轉帳 - 查詢允許值\r\n   *\r\n   * Returns:\r\n   *  - unit256: 允許值\r\n   */\r\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * 刪除合約\r\n   *\r\n   * 此方法呼叫合約內建的selfdestruct方法\r\n   */\r\n  function suicide() onlyOwner returns (bool) {\r\n    selfdestruct(owner);\r\n    return true;\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_dummy\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"produce\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"reduce\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setPlatinumAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"platinum\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"suicide\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"initialSupply\",\"type\":\"uint256\"},{\"name\":\"tokenName\",\"type\":\"string\"},{\"name\":\"decimalUnits\",\"type\":\"uint8\"},{\"name\":\"tokenSymbol\",\"type\":\"string\"}],\"payable\":false,\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"PlatinumToken","CompilerVersion":"v0.4.13+commit.fb4cb1a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000007426974436170730000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044943415000000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://452688d292b27cd3ce9c7134fe4c29f2750a74ebd057a99f3a9322dc6b2ca285"}]}