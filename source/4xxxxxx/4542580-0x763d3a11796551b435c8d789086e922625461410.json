{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.16;\r\n\r\n  contract ERC20 {\r\n     function totalSupply() constant returns (uint256 totalsupply);\r\n     function balanceOf(address _owner) constant returns (uint256 balance);\r\n     function transfer(address _to, uint256 _value) returns (bool success);\r\n     function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\r\n     function approve(address _spender, uint256 _value) returns (bool success);\r\n     function allowance(address _owner, address _spender) constant returns (uint256 remaining);\r\n     event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n     event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n  }\r\n  \r\n  contract TCASH is ERC20 {\r\n     string public constant symbol = \"TCASH\";\r\n     string public constant name = \"Tcash\";\r\n     uint8 public constant decimals = 8;\r\n     uint256 _totalSupply = 88000000 * 10**8;\r\n     \r\n\r\n     address public owner;\r\n  \r\n     mapping(address => uint256) balances;\r\n  \r\n     mapping(address => mapping (address => uint256)) allowed;\r\n     \r\n  \r\n     function TCASH() {\r\n         owner = msg.sender;\r\n         balances[owner] = 88000000 * 10**8;\r\n     }\r\n     \r\n     modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n     \r\n     \r\n    function distributeTCASH(address[] addresses) onlyOwner {\r\n         for (uint i = 0; i < addresses.length; i++) {\r\n             balances[owner] -= 245719916000;\r\n             balances[addresses[i]] += 245719916000;\r\n             Transfer(owner, addresses[i], 245719916000);\r\n         }\r\n     }\r\n     \r\n  \r\n     function totalSupply() constant returns (uint256 totalsupply) {\r\n         totalsupply = _totalSupply;\r\n     }\r\n  \r\n\r\n     function balanceOf(address _owner) constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n     }\r\n \r\n     function transfer(address _to, uint256 _amount) returns (bool success) {\r\n         if (balances[msg.sender] >= _amount \r\n            && _amount > 0\r\n             && balances[_to] + _amount > balances[_to]) {\r\n             balances[msg.sender] -= _amount;\r\n             balances[_to] += _amount;\r\n             Transfer(msg.sender, _to, _amount);\r\n            return true;\r\n         } else {\r\n             return false;\r\n         }\r\n     }\r\n     \r\n     \r\n     function transferFrom(\r\n         address _from,\r\n         address _to,\r\n         uint256 _amount\r\n     ) returns (bool success) {\r\n         if (balances[_from] >= _amount\r\n             && allowed[_from][msg.sender] >= _amount\r\n             && _amount > 0\r\n             && balances[_to] + _amount > balances[_to]) {\r\n             balances[_from] -= _amount;\r\n             allowed[_from][msg.sender] -= _amount;\r\n             balances[_to] += _amount;\r\n             Transfer(_from, _to, _amount);\r\n             return true;\r\n         } else {\r\n            return false;\r\n         }\r\n     }\r\n \r\n     function approve(address _spender, uint256 _amount) returns (bool success) {\r\n         allowed[msg.sender][_spender] = _amount;\r\n        Approval(msg.sender, _spender, _amount);\r\n         return true;\r\n     }\r\n  \r\n     function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n         return allowed[_owner][_spender];\r\n    }\r\n  }\r\n\r\ncontract TcashCrowdsale {\r\n    address public founder;\r\n    address public target;\r\n    uint256 public weiRaised;\r\n    uint256 public tokenIssued;\r\n    uint256 public contributors;\r\n    TCASH public tokenReward;\r\n    uint256 public phase = 0;\r\n    bool public halted = false;\r\n    bool crowdsaleClosed = false;\r\n\r\n    uint256[10] public priceToken = [\r\n        2600,\r\n        2500,\r\n        2400,\r\n        2300,\r\n        2200,\r\n        2100,\r\n        2000,\r\n        2000,\r\n        2000,\r\n        2000\r\n    ];\r\n\r\n    uint256 public constant HARDCAP = 20000 ether;\r\n    uint256 public constant MULTIPLIER = 10 ** 10;\r\n\r\n     /*\r\n     * MODIFIERS\r\n     */\r\n     modifier onlyFounder() {\r\n        require(msg.sender == founder);\r\n        _;\r\n     }\r\n\r\n    /**\r\n     * Constrctor function\r\n     *\r\n     * Setup the escrow account address, all ethers will be sent to this address.\r\n     *\r\n     *\r\n     * addressOfToken address Of Token Used As Reward\r\n     *\r\n     */\r\n    function TcashCrowdsale (\r\n        address _target,\r\n        address addressOfToken\r\n    ) {\r\n        require(msg.sender != 0x0);\r\n        require(_target != 0x0);\r\n        require(addressOfToken != 0x0);\r\n        target = _target;\r\n        founder = msg.sender;\r\n        tokenReward = TCASH(addressOfToken);\r\n    }\r\n\r\n    function safeAdd(uint256 a, uint256 b) internal constant returns (uint256) {\r\n      uint256 c = a + b;\r\n      require(c >= a);\r\n      return c;\r\n    }\r\n\r\n    function safeMul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n      uint256 c = a * b;\r\n      require(a == 0 || c / a == b);\r\n      return c;\r\n    }\r\n\r\n    function safeDiv(uint256 a, uint256 b) internal constant returns (uint256) {\r\n      // require(b > 0); // Solidity automatically throws when dividing by 0\r\n      uint256 c = a / b;\r\n      // require(a == b * c + a % b); // There is no case in which this doesn't hold\r\n      return c;\r\n    }\r\n\r\n    /**\r\n     * Fallback function\r\n     *\r\n     * The function without name is the default function that is\r\n     * called whenever anyone sends funds to a contract\r\n     */\r\n    function () payable {\r\n        buyToken(msg.sender);\r\n    }\r\n\r\n    function buyToken(address receiver) payable {\r\n        require(!halted);\r\n        require(!crowdsaleClosed);\r\n        require(receiver != 0x0);\r\n        require(receiver != target);\r\n        require(msg.value >= 0.01 ether);\r\n        require(weiRaised <= HARDCAP);\r\n        uint256 weiAmount = msg.value;\r\n        uint256 tokens = computeTokenAmount(weiAmount);\r\n        if (tokenReward.transfer(receiver, tokens)) {\r\n           tokenIssued = safeAdd(tokenIssued, tokens);\r\n        } else {\r\n           revert();\r\n        }\r\n        weiRaised = safeAdd(weiRaised, weiAmount);\r\n        contributors = safeAdd(contributors, 1);\r\n        if (!target.send(weiAmount)) {\r\n           revert();\r\n        }\r\n    }\r\n\r\n    function price() constant returns (uint256 tokens) {\r\n        tokens = priceToken[phase];\r\n    }\r\n\r\n    function computeTokenAmount(uint256 weiAmount) internal constant returns (uint256 tokens) {\r\n        tokens = safeMul(safeDiv(weiAmount, MULTIPLIER), priceToken[phase]);\r\n    }\r\n\r\n    /**\r\n     * Emergency Stop crowdsale.\r\n     *\r\n     */\r\n    function halt() onlyFounder {\r\n        halted = true;\r\n    }\r\n\r\n    /**\r\n     * Resume crowdsale.\r\n     *\r\n     */\r\n    function unhalt() onlyFounder {\r\n        halted = false;\r\n    }\r\n\r\n    /**\r\n     * set crowdsale phase\r\n     *\r\n     */\r\n    function setPhase(uint256 nPhase) onlyFounder {\r\n        require((nPhase < priceToken.length) && (nPhase >= 0));\r\n        phase = nPhase;\r\n    }\r\n\r\n    /**\r\n     * Withdraw unsale Token\r\n     *\r\n     */\r\n    function tokenWithdraw(address receiver, uint256 tokens) onlyFounder {\r\n        require(receiver != 0x0);\r\n        require(tokens > 0);\r\n        if (!tokenReward.transfer(receiver, tokens)) {\r\n           revert();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * close Crowdsale\r\n     *\r\n     * Close the crowdsale\r\n     */\r\n    function closeCrowdsale() onlyFounder {\r\n        crowdsaleClosed = true;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"MULTIPLIER\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"nPhase\",\"type\":\"uint256\"}],\"name\":\"setPhase\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"HARDCAP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"founder\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenIssued\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"halt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenReward\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contributors\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"buyToken\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"closeCrowdsale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"name\":\"tokens\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"phase\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"halted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"receiver\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"tokenWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unhalt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"target\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"priceToken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"},{\"name\":\"addressOfToken\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"TcashCrowdsale","CompilerVersion":"v0.4.16+commit.d7661dd9","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000cdf20c113e93d31b05fe2d34b336a1bf8e9ba8cc000000000000000000000000b8742486c723793cf5162bb5d3425ed9cd73d049","Library":"","SwarmSource":"bzzr://22f59d206a681728a0c0c6d7499cb248bad5e236c2b190422c1de0eb71435771"}]}