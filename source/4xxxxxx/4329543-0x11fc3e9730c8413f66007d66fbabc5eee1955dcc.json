{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13;\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public constant returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   */\r\n  function increaseApproval (address _spender, uint _addedValue) public returns (bool success) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  function decreaseApproval (address _spender, uint _subtractedValue) public returns (bool success) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n/////////////////////////////////////////////////////////\r\n//////////////// Token contract start////////////////////\r\n/////////////////////////////////////////////////////////\r\n\r\ncontract CryptoGripInitiative is StandardToken, Ownable {\r\n    string  public  constant name = \"Crypto Grip Initiative\";\r\n\r\n    string  public  constant symbol = \"CGI\";\r\n\r\n    uint    public  constant decimals = 18;\r\n\r\n    uint    public  saleStartTime;\r\n\r\n    uint    public  saleEndTime;\r\n\r\n    address public  tokenSaleContract;\r\n\r\n    modifier onlyWhenTransferEnabled() {\r\n        if (now <= saleEndTime && now >= saleStartTime) {\r\n            require(msg.sender == tokenSaleContract || msg.sender == owner);\r\n        }\r\n        _;\r\n    }\r\n\r\n    modifier validDestination(address to) {\r\n        require(to != address(0x0));\r\n        require(to != address(this));\r\n        _;\r\n    }\r\n\r\n    function CryptoGripInitiative(uint tokenTotalAmount, uint startTime, uint endTime, address admin) {\r\n        // Mint all tokens. Then disable minting forever.\r\n        balances[msg.sender] = tokenTotalAmount;\r\n        totalSupply = tokenTotalAmount;\r\n        Transfer(address(0x0), msg.sender, tokenTotalAmount);\r\n\r\n        saleStartTime = startTime;\r\n        saleEndTime = endTime;\r\n\r\n        tokenSaleContract = msg.sender;\r\n        transferOwnership(admin);\r\n        // admin could drain tokens that were sent here by mistake\r\n    }\r\n\r\n    function transfer(address _to, uint _value)\r\n    onlyWhenTransferEnabled\r\n    validDestination(_to)\r\n    returns (bool) {\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint _value)\r\n    onlyWhenTransferEnabled\r\n    validDestination(_to)\r\n    returns (bool) {\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n    event Burn(address indexed _burner, uint _value);\r\n\r\n    function burn(uint _value) onlyWhenTransferEnabled\r\n    returns (bool){\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        totalSupply = totalSupply.sub(_value);\r\n        Burn(msg.sender, _value);\r\n        Transfer(msg.sender, address(0x0), _value);\r\n        return true;\r\n    }\r\n\r\n    //    // save some gas by making only one contract call\r\n    //    function burnFrom(address _from, uint256 _value) onlyWhenTransferEnabled\r\n    //    returns (bool) {\r\n    //        assert(transferFrom(_from, msg.sender, _value));\r\n    //        return burn(_value);\r\n    //    }\r\n\r\n    function emergencyERC20Drain(ERC20 token, uint amount) onlyOwner {\r\n        token.transfer(owner, amount);\r\n    }\r\n}\r\n\r\n\r\n/////////////////////////////////////////////////////////\r\n/////////////// Whitelist contract start/////////////////\r\n/////////////////////////////////////////////////////////\r\n\r\n\r\ncontract Whitelist {\r\n    address public owner;\r\n\r\n    address public sale;\r\n\r\n    mapping (address => uint) public accepted;\r\n\r\n    function Whitelist(address _owner, address _sale) {\r\n        owner = _owner;\r\n        sale = _sale;\r\n    }\r\n\r\n    function accept(address a, uint amountInWei) {\r\n        assert(msg.sender == owner || msg.sender == sale);\r\n\r\n        accepted[a] = amountInWei * 10 ** 18;\r\n    }\r\n\r\n    function setSale(address sale_) {\r\n        assert(msg.sender == owner);\r\n\r\n        sale = sale_;\r\n    }\r\n\r\n    function getCap(address _user) constant returns (uint) {\r\n        uint cap = accepted[_user];\r\n        return cap;\r\n    }\r\n}\r\n\r\n\r\n/////////////////////////////////////////////////////////\r\n///////// Contributor Approver contract start////////////\r\n/////////////////////////////////////////////////////////\r\n\r\ncontract ContributorApprover {\r\n    Whitelist public list;\r\n\r\n    mapping (address => uint)    public participated;\r\n\r\n    uint public presaleStartTime;\r\n\r\n    uint public remainingPresaleCap;\r\n\r\n    uint public remainingPublicSaleCap;\r\n\r\n    uint                      public openSaleStartTime;\r\n\r\n    uint                      public openSaleEndTime;\r\n\r\n    using SafeMath for uint;\r\n\r\n\r\n    function ContributorApprover(\r\n    Whitelist _whitelistContract,\r\n    uint preIcoCap,\r\n    uint IcoCap,\r\n    uint _presaleStartTime,\r\n    uint _openSaleStartTime,\r\n    uint _openSaleEndTime) {\r\n        list = _whitelistContract;\r\n        openSaleStartTime = _openSaleStartTime;\r\n        openSaleEndTime = _openSaleEndTime;\r\n        presaleStartTime = _presaleStartTime;\r\n        remainingPresaleCap = preIcoCap * 10 ** 18;\r\n        remainingPublicSaleCap = IcoCap * 10 ** 18;\r\n\r\n        //    Check that presale is earlier than opensale\r\n        require(presaleStartTime < openSaleStartTime);\r\n        //    Check that open sale start is earlier than end\r\n        require(openSaleStartTime < openSaleEndTime);\r\n    }\r\n\r\n    // this is a seperate function so user could query it before crowdsale starts\r\n    function contributorCap(address contributor) constant returns (uint) {\r\n        return list.getCap(contributor);\r\n    }\r\n\r\n    function eligible(address contributor, uint amountInWei) constant returns (uint) {\r\n        //        Presale not started yet\r\n        if (now < presaleStartTime) return 0;\r\n        //    Both presale and public sale have ended\r\n        if (now >= openSaleEndTime) return 0;\r\n\r\n        //        Presale\r\n        if (now < openSaleStartTime) {\r\n            //        Presale cap limit reached\r\n            if (remainingPresaleCap <= 0) {\r\n                return 0;\r\n            }\r\n            //            Get initial cap\r\n            uint cap = contributorCap(contributor);\r\n            // Account for already invested amount\r\n            uint remainedCap = cap.sub(participated[contributor]);\r\n            //        Presale cap almost reached\r\n            if (remainedCap > remainingPresaleCap) {\r\n                remainedCap = remainingPresaleCap;\r\n            }\r\n            //            Remaining cap is bigger than contribution\r\n            if (remainedCap > amountInWei) return amountInWei;\r\n            //            Remaining cap is smaller than contribution\r\n            else return remainedCap;\r\n        }\r\n        //        Public sale\r\n        else {\r\n            //           Public sale  cap limit reached\r\n            if (remainingPublicSaleCap <= 0) {\r\n                return 0;\r\n            }\r\n            //            Public sale cap almost reached\r\n            if (amountInWei > remainingPublicSaleCap) {\r\n                return remainingPublicSaleCap;\r\n            }\r\n            //            Public sale cap is bigger than contribution\r\n            else {\r\n                return amountInWei;\r\n            }\r\n        }\r\n    }\r\n\r\n    function eligibleTestAndIncrement(address contributor, uint amountInWei) internal returns (uint) {\r\n        uint result = eligible(contributor, amountInWei);\r\n        participated[contributor] = participated[contributor].add(result);\r\n        //    Presale\r\n        if (now < openSaleStartTime) {\r\n            //        Decrement presale cap\r\n            remainingPresaleCap = remainingPresaleCap.sub(result);\r\n        }\r\n        //        Publicsale\r\n        else {\r\n            //        Decrement publicsale cap\r\n            remainingPublicSaleCap = remainingPublicSaleCap.sub(result);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    function saleEnded() constant returns (bool) {\r\n        return now > openSaleEndTime;\r\n    }\r\n\r\n    function saleStarted() constant returns (bool) {\r\n        return now >= presaleStartTime;\r\n    }\r\n\r\n    function publicSaleStarted() constant returns (bool) {\r\n        return now >= openSaleStartTime;\r\n    }\r\n}\r\n\r\n\r\n/////////////////////////////////////////////////////////\r\n///////// Token Sale contract start /////////////////////\r\n/////////////////////////////////////////////////////////\r\n\r\ncontract CryptoGripTokenSale is ContributorApprover {\r\n    uint    public  constant tokensPerEthPresale = 1055;\r\n\r\n    uint    public  constant tokensPerEthPublicSale = 755;\r\n\r\n    address             public admin;\r\n\r\n    address             public gripWallet;\r\n\r\n    CryptoGripInitiative public token;\r\n\r\n    uint                public raisedWei;\r\n\r\n    bool                public haltSale;\r\n\r\n    function CryptoGripTokenSale(address _admin,\r\n    address _gripWallet,\r\n    Whitelist _whiteListContract,\r\n    uint _totalTokenSupply,\r\n    uint _premintedTokenSupply,\r\n    uint _presaleStartTime,\r\n    uint _publicSaleStartTime,\r\n    uint _publicSaleEndTime,\r\n    uint _presaleCap,\r\n    uint _publicSaleCap)\r\n\r\n    ContributorApprover(_whiteListContract,\r\n    _presaleCap,\r\n    _publicSaleCap,\r\n    _presaleStartTime,\r\n    _publicSaleStartTime,\r\n    _publicSaleEndTime)\r\n    {\r\n        admin = _admin;\r\n        gripWallet = _gripWallet;\r\n\r\n        token = new CryptoGripInitiative(_totalTokenSupply * 10 ** 18, _presaleStartTime, _publicSaleEndTime, _admin);\r\n\r\n        // transfer preminted tokens to company wallet\r\n        token.transfer(gripWallet, _premintedTokenSupply * 10 ** 18);\r\n    }\r\n\r\n    function setHaltSale(bool halt) {\r\n        require(msg.sender == admin);\r\n        haltSale = halt;\r\n    }\r\n\r\n    function() payable {\r\n        buy(msg.sender);\r\n    }\r\n\r\n    event Buy(address _buyer, uint _tokens, uint _payedWei);\r\n\r\n    function buy(address recipient) payable returns (uint){\r\n        require(tx.gasprice <= 50000000000 wei);\r\n\r\n        require(!haltSale);\r\n        require(saleStarted());\r\n        require(!saleEnded());\r\n\r\n        uint weiPayment = eligibleTestAndIncrement(recipient, msg.value);\r\n\r\n        require(weiPayment > 0);\r\n\r\n        // send to msg.sender, not to recipient\r\n        if (msg.value > weiPayment) {\r\n            msg.sender.transfer(msg.value.sub(weiPayment));\r\n        }\r\n\r\n        // send payment to wallet\r\n        sendETHToMultiSig(weiPayment);\r\n        raisedWei = raisedWei.add(weiPayment);\r\n\r\n        uint recievedTokens = 0;\r\n\r\n        if (now < openSaleStartTime) {\r\n            recievedTokens = weiPayment.mul(tokensPerEthPresale);\r\n        }\r\n        else {\r\n            recievedTokens = weiPayment.mul(tokensPerEthPublicSale);\r\n        }\r\n\r\n        assert(token.transfer(recipient, recievedTokens));\r\n\r\n\r\n        Buy(recipient, recievedTokens, weiPayment);\r\n\r\n        return weiPayment;\r\n    }\r\n\r\n    function sendETHToMultiSig(uint value) internal {\r\n        gripWallet.transfer(value);\r\n    }\r\n\r\n    event FinalizeSale();\r\n    // function is callable by everyone\r\n    function finalizeSale() {\r\n        require(saleEnded());\r\n        require(msg.sender == admin);\r\n\r\n        // burn remaining tokens\r\n        token.burn(token.balanceOf(this));\r\n\r\n        FinalizeSale();\r\n    }\r\n\r\n    // ETH balance is always expected to be 0.\r\n    // but in case something went wrong, we use this function to extract the eth.\r\n    function emergencyDrain(ERC20 anyToken) returns (bool){\r\n        require(msg.sender == admin);\r\n        require(saleEnded());\r\n\r\n        if (this.balance > 0) {\r\n            sendETHToMultiSig(this.balance);\r\n        }\r\n\r\n        if (anyToken != address(0x0)) {\r\n            assert(anyToken.transfer(gripWallet, anyToken.balanceOf(this)));\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    // just to check that funds goes to the right place\r\n    // tokens are not given in return\r\n    function debugBuy() payable {\r\n        require(msg.value == 123);\r\n        sendETHToMultiSig(msg.value);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"remainingPresaleCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"openSaleStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"list\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"contributor\",\"type\":\"address\"},{\"name\":\"amountInWei\",\"type\":\"uint256\"}],\"name\":\"eligible\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"contributor\",\"type\":\"address\"}],\"name\":\"contributorCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalizeSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleStarted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"haltSale\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"halt\",\"type\":\"bool\"}],\"name\":\"setHaltSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gripWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"anyToken\",\"type\":\"address\"}],\"name\":\"emergencyDrain\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensPerEthPresale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"remainingPublicSaleCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"publicSaleStarted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presaleStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"debugBuy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"participated\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"raisedWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensPerEthPublicSale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"openSaleEndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"buy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_admin\",\"type\":\"address\"},{\"name\":\"_gripWallet\",\"type\":\"address\"},{\"name\":\"_whiteListContract\",\"type\":\"address\"},{\"name\":\"_totalTokenSupply\",\"type\":\"uint256\"},{\"name\":\"_premintedTokenSupply\",\"type\":\"uint256\"},{\"name\":\"_presaleStartTime\",\"type\":\"uint256\"},{\"name\":\"_publicSaleStartTime\",\"type\":\"uint256\"},{\"name\":\"_publicSaleEndTime\",\"type\":\"uint256\"},{\"name\":\"_presaleCap\",\"type\":\"uint256\"},{\"name\":\"_publicSaleCap\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokens\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_payedWei\",\"type\":\"uint256\"}],\"name\":\"Buy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"FinalizeSale\",\"type\":\"event\"}]","ContractName":"CryptoGripTokenSale","CompilerVersion":"v0.4.16+commit.d7661dd9","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000e0f53a08d17767e6c07e2e7438f99d6ab331fa100000000000000000000000017cd1008a1bc5ff17dd60498d21276e6506e89c30000000000000000000000007927f1914e92f332543bac0798a3836239805db500000000000000000000000000000000000000000000000000000000000f42400000000000000000000000000000000000000000000000000000000000030d400000000000000000000000000000000000000000000000000000000059d030000000000000000000000000000000000000000000000000000000000059e2a4ff000000000000000000000000000000000000000000000000000000005a0b837f00000000000000000000000000000000000000000000000000000000000000960000000000000000000000000000000000000000000000000000000000000352","Library":"","SwarmSource":"bzzr://c0391fca18e458cc8463e1fd3207e5119fdbcc460384b2e08a5b02631a0c514d"}]}