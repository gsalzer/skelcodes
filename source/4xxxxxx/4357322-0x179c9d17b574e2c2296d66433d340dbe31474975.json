{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.15;\r\n\r\n/// @title SafeMath\r\n/// @dev Math operations with safety checks that throw on error.\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/// @title Ownable\r\n/// @dev The Ownable contract has an owner address, and provides basic authorization control\r\n/// functions, this simplifies the implementation of \"user permissions\".\r\ncontract Ownable {\r\n\r\n  // EVENTS\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  // PUBLIC FUNCTIONS\r\n\r\n  /// @dev The Ownable constructor sets the original `owner` of the contract to the sender account.\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /// @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n  /// @param newOwner The address to transfer ownership to.\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n  // MODIFIERS\r\n\r\n  /// @dev Throws if called by any account other than the owner.\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  // FIELDS\r\n\r\n  address public owner;\r\n}\r\n\r\n\r\ncontract DaoOwnable is Ownable{\r\n\r\n    address public dao = address(0);\r\n\r\n    event DaoOwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the dao.\r\n     */\r\n    modifier onlyDao() {\r\n        require(msg.sender == dao);\r\n        _;\r\n    }\r\n\r\n    modifier onlyDaoOrOwner() {\r\n        require(msg.sender == dao || msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newDao.\r\n     * @param newDao The address to transfer ownership to.\r\n     */\r\n    function transferDao(address newDao) onlyOwner {\r\n        require(newDao != address(0));\r\n        dao = newDao;\r\n        DaoOwnershipTransferred(owner, newDao);\r\n    }\r\n\r\n}\r\n\r\ncontract DepositRegistry {\r\n    // This is the function that actually insert a record.\r\n    function register(address key, uint256 amount, address depositOwner);\r\n\r\n    // Unregister a given record\r\n    function unregister(address key);\r\n\r\n    function transfer(address key, address newOwner, address sender);\r\n\r\n    function spend(address key, uint256 amount);\r\n\r\n    function refill(address key, uint256 amount);\r\n\r\n    // Tells whether a given key is registered.\r\n    function isRegistered(address key) constant returns(bool);\r\n\r\n    function getDepositOwner(address key) constant returns(address);\r\n\r\n    function getDeposit(address key) constant returns(uint256 amount);\r\n\r\n    function getDepositRecord(address key) constant returns(address owner, uint time, uint256 amount, address depositOwner);\r\n\r\n    function hasEnough(address key, uint256 amount) constant returns(bool);\r\n\r\n    function kill();\r\n}\r\n\r\ncontract DepositRegistryImpl is DepositRegistry, DaoOwnable {\r\n    using SafeMath for uint256;\r\n\r\n    uint public creationTime = now;\r\n\r\n    // This struct keeps all data for a Deposit.\r\n    struct Deposit {\r\n        // Keeps the address of this record creator.\r\n        address owner;\r\n        // Keeps the time when this record was created.\r\n        uint time;\r\n        // Keeps the index of the keys array for fast lookup\r\n        uint keysIndex;\r\n        // Deposit left\r\n        uint256 amount;\r\n    }\r\n\r\n    // This mapping keeps the records of this Registry.\r\n    mapping(address => Deposit) records;\r\n\r\n    // Keeps the total numbers of records in this Registry.\r\n    uint public numDeposits;\r\n\r\n    // Keeps a list of all keys to interate the records.\r\n    address[] public keys;\r\n\r\n    // This is the function that actually insert a record.\r\n    function register(address key, uint256 amount, address depositOwner) onlyDaoOrOwner {\r\n        require(records[key].time == 0);\r\n        records[key].time = now;\r\n        records[key].owner = depositOwner;\r\n        records[key].keysIndex = keys.length;\r\n        keys.length++;\r\n        keys[keys.length - 1] = key;\r\n        records[key].amount = amount;\r\n        numDeposits++;\r\n    }\r\n\r\n    // Unregister a given record\r\n    function unregister(address key) onlyDaoOrOwner {\r\n        uint keysIndex = records[key].keysIndex;\r\n        delete records[key];\r\n        numDeposits--;\r\n        keys[keysIndex] = keys[keys.length - 1];\r\n        records[keys[keysIndex]].keysIndex = keysIndex;\r\n        keys.length--;\r\n    }\r\n\r\n    // Transfer ownership of a given record.\r\n    function transfer(address key, address newOwner, address sender) onlyDaoOrOwner {\r\n        require(records[key].owner == sender);\r\n        records[key].owner = newOwner;\r\n    }\r\n\r\n    // Tells whether a given key is registered.\r\n    function isRegistered(address key) constant returns(bool) {\r\n        return records[key].time != 0;\r\n    }\r\n\r\n    function getDepositOwner(address key) constant returns (address) {\r\n        return records[key].owner;\r\n    }\r\n\r\n    function getDeposit(address key) constant returns(uint256 amount) {\r\n        Deposit storage record = records[key];\r\n        amount = record.amount;\r\n    }\r\n\r\n    function getDepositRecord(address key) constant returns(address owner, uint time, uint256 amount, address depositOwner) {\r\n        Deposit storage record = records[key];\r\n        owner = record.owner;\r\n        time = record.time;\r\n        amount = record.amount;\r\n        depositOwner = record.owner;\r\n    }\r\n\r\n    function hasEnough(address key, uint256 amount) constant returns(bool) {\r\n        Deposit storage deposit = records[key];\r\n        return deposit.amount >= amount;\r\n    }\r\n\r\n    function spend(address key, uint256 amount) onlyDaoOrOwner {\r\n        require(isRegistered(key));\r\n        records[key].amount = records[key].amount.sub(amount);\r\n    }\r\n\r\n    function refill(address key, uint256 amount) onlyDaoOrOwner {\r\n        require(isRegistered(key));\r\n        records[key].amount = records[key].amount.add(amount);\r\n    }\r\n\r\n    function kill() onlyOwner {\r\n        selfdestruct(owner);\r\n    }\r\n}\r\n\r\ncontract SecurityDepositRegistry is DepositRegistryImpl{\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"key\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"refill\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"keys\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"key\",\"type\":\"address\"}],\"name\":\"unregister\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"key\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"hasEnough\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"key\",\"type\":\"address\"}],\"name\":\"getDepositRecord\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"time\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"depositOwner\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dao\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"key\",\"type\":\"address\"},{\"name\":\"newOwner\",\"type\":\"address\"},{\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"key\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"depositOwner\",\"type\":\"address\"}],\"name\":\"register\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"key\",\"type\":\"address\"}],\"name\":\"getDepositOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"key\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"spend\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numDeposits\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"key\",\"type\":\"address\"}],\"name\":\"isRegistered\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"creationTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"key\",\"type\":\"address\"}],\"name\":\"getDeposit\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newDao\",\"type\":\"address\"}],\"name\":\"transferDao\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"DaoOwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"SecurityDepositRegistry","CompilerVersion":"v0.4.15+commit.bbb8e64f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://25efa7ff6add448c535d9daab18b47ef8396b049af5c32d290dd6a9d2b31eeac"}]}