{"status":"1","message":"OK","result":[{"SourceCode":"//! FrozenToken ECR20-compliant token contract\r\n//! By Parity Technologies, 2017.\r\n//! Released under the Apache Licence 2.\r\n\r\npragma solidity ^0.4.17;\r\n\r\n// Owned contract.\r\ncontract Owned {\r\n\tmodifier only_owner { require (msg.sender == owner); _; }\r\n\r\n\tevent NewOwner(address indexed old, address indexed current);\r\n\r\n\tfunction setOwner(address _new) public only_owner { NewOwner(owner, _new); owner = _new; }\r\n\r\n\taddress public owner;\r\n}\r\n\r\n// FrozenToken, a bit like an ECR20 token (though not - as it doesn't\r\n// implement most of the API).\r\n// All token balances are generally non-transferable.\r\n// All \"tokens\" belong to the owner (who is uniquely liquid) at construction.\r\n// Liquid accounts can make other accounts liquid and send their tokens\r\n// to other axccounts.\r\ncontract FrozenToken is Owned {\r\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n\t// this is as basic as can be, only the associated balance & allowances\r\n\tstruct Account {\r\n\t\tuint balance;\r\n\t\tbool liquid;\r\n\t}\r\n\r\n\t// constructor sets the parameters of execution, _totalSupply is all units\r\n\tfunction FrozenToken(uint _totalSupply, address _owner)\r\n        public\r\n\t\twhen_non_zero(_totalSupply)\r\n\t{\r\n\t\ttotalSupply = _totalSupply;\r\n\t\towner = _owner;\r\n\t\taccounts[_owner].balance = totalSupply;\r\n\t\taccounts[_owner].liquid = true;\r\n\t}\r\n\r\n\t// balance of a specific address\r\n\tfunction balanceOf(address _who) public constant returns (uint256) {\r\n\t\treturn accounts[_who].balance;\r\n\t}\r\n\r\n\t// make an account liquid: only liquid accounts can do this.\r\n\tfunction makeLiquid(address _to)\r\n\t\tpublic\r\n\t\twhen_liquid(msg.sender)\r\n\t\treturns(bool)\r\n\t{\r\n\t\taccounts[_to].liquid = true;\r\n\t\treturn true;\r\n\t}\r\n\r\n\t// transfer\r\n\tfunction transfer(address _to, uint256 _value)\r\n\t\tpublic\r\n\t\twhen_owns(msg.sender, _value)\r\n\t\twhen_liquid(msg.sender)\r\n\t\treturns(bool)\r\n\t{\r\n\t\tTransfer(msg.sender, _to, _value);\r\n\t\taccounts[msg.sender].balance -= _value;\r\n\t\taccounts[_to].balance += _value;\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\t// no default function, simple contract only, entry-level users\r\n\tfunction() public {\r\n\t\tassert(false);\r\n\t}\r\n\r\n\t// the balance should be available\r\n\tmodifier when_owns(address _owner, uint _amount) {\r\n\t\trequire (accounts[_owner].balance >= _amount);\r\n\t\t_;\r\n\t}\r\n\r\n\tmodifier when_liquid(address who) {\r\n\t\trequire (accounts[who].liquid);\r\n\t\t_;\r\n\t}\r\n\r\n\t// a value should be > 0\r\n\tmodifier when_non_zero(uint _value) {\r\n\t\trequire (_value > 0);\r\n\t\t_;\r\n\t}\r\n\r\n\t// Available token supply\r\n\tuint public totalSupply;\r\n\r\n\t// Storage and mapping of all balances & allowances\r\n\tmapping (address => Account) accounts;\r\n\r\n\t// Conventional metadata.\r\n\tstring public constant name = \"DOT Allocation Indicator\";\r\n\tstring public constant symbol = \"DOT\";\r\n\tuint8 public constant decimals = 3;\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_new\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"makeLiquid\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_totalSupply\",\"type\":\"uint256\"},{\"name\":\"_owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"old\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"current\",\"type\":\"address\"}],\"name\":\"NewOwner\",\"type\":\"event\"}]","ContractName":"FrozenToken","CompilerVersion":"v0.4.17+commit.bdeb9e52","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000002540be40000000000000000000000000000b46c2526e227482e2ebb8f4c69e4674d262e75","Library":"","SwarmSource":"bzzr://228dfae3e67abcdc7f73fb3f83a7d23f45acd853774acad9d2e1ac83b940fbe9"}]}