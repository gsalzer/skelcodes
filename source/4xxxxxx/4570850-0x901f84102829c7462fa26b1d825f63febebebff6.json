{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13;\r\ncontract SafeMath {\r\n\r\n    function safeAdd(uint256 x, uint256 y) internal returns(uint256) {\r\n        uint256 z = x + y;\r\n        assert((z >= x) && (z >= y));\r\n        return z;\r\n    }\r\n\r\n    function safeSubtract(uint256 x, uint256 y) internal returns(uint256) {\r\n        assert(x >= y);\r\n        uint256 z = x - y;\r\n        return z;\r\n    }\r\n\r\n    function safeMult(uint256 x, uint256 y) internal returns(uint256) {\r\n        uint256 z = x * y;\r\n        assert((x == 0)||(z/x == y));\r\n        return z;\r\n    }\r\n}\r\n\r\ncontract PrivateCityToken {\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\r\n}\r\n\r\n\r\ncontract PrivateCityCrowdsale is SafeMath{\r\n\r\n    uint256 public totalSupply;\r\n    // Deposit address of account controlled by the creators\r\n    address public ethFundDeposit = 0x4574C2A0a1C39114Fe794dD1A3D1A5F90C92AD90;\r\n    address public tokenExchangeAddress = 0xD9fc693CA2C5CF060D10E182a078a0A4CFF1F4d6;\r\n    address public tokenAccountAddress = 0xdca42D3220681C3beaF3dD0631D06536c39beB67;\r\n    //Access to token contract for tokens exchange\r\n    PrivateCityToken public tokenExchange;\r\n\r\n    // Fundraising parameters\r\n    enum ContractState { Fundraising }\r\n    ContractState public state;\r\n\r\n    uint256 public constant decimals = 18;\r\n    //start date: 11/24/2017 @ 00:00 (GMT-8)\r\n    uint public startDate = 1511510400;\r\n    //start date: 1/01/2018 @ 00:00 (GMT-8)\r\n    uint public endDate = 1514793600;\r\n    \r\n    uint256 public constant TOKEN_MIN = 1 * 10**decimals; // 1 PCT\r\n\r\n    // We need to keep track of how much ether have been contributed, since we have a cap for ETH too\r\n    uint256 public totalReceivedEth = 0;\r\n\t\r\n\r\n    // Constructor\r\n    function PrivateCityCrowdsale()\r\n    {\r\n        // Contract state\r\n        state = ContractState.Fundraising;\r\n        tokenExchange = PrivateCityToken(tokenExchangeAddress);\r\n        totalSupply = 0;\r\n    }\r\n\r\n    \r\n    function ()\r\n    payable\r\n    external\r\n    {\r\n        require(now >= startDate);\r\n        require(now <= endDate);\r\n        require(msg.value > 0);\r\n        \r\n\r\n        // First we check the ETH cap, as it's easier to calculate, return\r\n        // the contribution if the cap has been reached already\r\n        uint256 checkedReceivedEth = safeAdd(totalReceivedEth, msg.value);\r\n\r\n        // If all is fine with the ETH cap, we continue to check the\r\n        // minimum amount of tokens\r\n        uint256 tokens = safeMult(msg.value, getCurrentTokenPrice());\r\n        require(tokens >= TOKEN_MIN);\r\n\r\n        totalReceivedEth = checkedReceivedEth;\r\n        totalSupply = safeAdd(totalSupply, tokens);\r\n        ethFundDeposit.transfer(msg.value);\r\n        if(!tokenExchange.transferFrom(tokenAccountAddress, msg.sender, tokens)) revert();\r\n            \r\n\r\n    }\r\n\r\n\r\n    /// @dev Returns the current token price\r\n    function getCurrentTokenPrice()\r\n    private\r\n    constant\r\n    returns (uint256 currentPrice)\r\n    {\r\n        return 6000;//bonuses are not implied!\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"startDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenExchange\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalReceivedEth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethFundDeposit\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenAccountAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN_MIN\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenExchangeAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"}]","ContractName":"PrivateCityCrowdsale","CompilerVersion":"v0.4.13+commit.fb4cb1a","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://10610a465af6e600256a10b4e70e0031ec89fb4e1b4003c0b90fa4f9990035b7"}]}