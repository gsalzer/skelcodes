{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.15;\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public constant returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeERC20 {\r\n  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\r\n    assert(token.transfer(to, value));\r\n  }\r\n\r\n  function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\r\n    assert(token.transferFrom(from, to, value));\r\n  }\r\n\r\n  function safeApprove(ERC20 token, address spender, uint256 value) internal {\r\n    assert(token.approve(spender, value));\r\n  }\r\n}\r\n\r\ncontract TokenVesting is Ownable {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for ERC20Basic;\r\n\r\n    ERC20Basic token;\r\n    // vesting\r\n    mapping (address => uint256) totalVestedAmount;\r\n\r\n    struct Vesting {\r\n        uint256 amount;\r\n        uint256 vestingDate;\r\n    }\r\n\r\n    address[] accountKeys;\r\n    mapping (address => Vesting[]) public vestingAccounts;\r\n\r\n    // events\r\n    event Vest(address indexed beneficiary, uint256 amount);\r\n    event VestingCreated(address indexed beneficiary, uint256 amount, uint256 vestingDate);\r\n\r\n    // modifiers here\r\n    modifier tokenSet() {\r\n        require(address(token) != address(0));\r\n        _;\r\n    }\r\n\r\n    // vesting constructor\r\n    function TokenVesting(address token_address){\r\n       require(token_address != address(0));\r\n       token = ERC20Basic(token_address);\r\n    }\r\n\r\n    // set vesting token address\r\n    function setVestingToken(address token_address) external onlyOwner {\r\n        require(token_address != address(0));\r\n        token = ERC20Basic(token_address);\r\n    }\r\n\r\n    // create vesting by introducing beneficiary addres, total token amount, start date, duration for each vest period and number of periods\r\n    function createVestingByDurationAndSplits(address user, uint256 total_amount, uint256 startDate, uint256 durationPerVesting, uint256 times) public onlyOwner tokenSet {\r\n        require(user != address(0));\r\n        require(startDate >= now);\r\n        require(times > 0);\r\n        require(durationPerVesting > 0);\r\n        uint256 vestingDate = startDate;\r\n        uint256 i;\r\n        uint256 amount = total_amount.div(times);\r\n        for (i = 0; i < times; i++) {\r\n            vestingDate = vestingDate.add(durationPerVesting);\r\n            if (vestingAccounts[user].length == 0){\r\n                accountKeys.push(user);\r\n            }\r\n            vestingAccounts[user].push(Vesting(amount, vestingDate));\r\n            VestingCreated(user, amount, vestingDate);\r\n        }\r\n    }\r\n\r\n    // get current user total granted token amount\r\n    function getVestingAmountByNow(address user) constant returns (uint256){\r\n        uint256 amount;\r\n        uint256 i;\r\n        for (i = 0; i < vestingAccounts[user].length; i++) {\r\n            if (vestingAccounts[user][i].vestingDate < now) {\r\n                amount = amount.add(vestingAccounts[user][i].amount);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    // get user available vesting amount, total amount - received amount\r\n    function getAvailableVestingAmount(address user) constant returns (uint256){\r\n        uint256 amount;\r\n        amount = getVestingAmountByNow(user);\r\n        amount = amount.sub(totalVestedAmount[user]);\r\n        return amount;\r\n    }\r\n\r\n    // get list of vesting users address\r\n    function getAccountKeys(uint256 page) external constant returns (address[10]){\r\n        address[10] memory accountList;\r\n        uint256 i;\r\n        for (i=0 + page * 10; i<10; i++){\r\n            if (i < accountKeys.length){\r\n                accountList[i - page * 10] = accountKeys[i];\r\n            }\r\n        }\r\n        return accountList;\r\n    }\r\n\r\n    // vest\r\n    function vest() external tokenSet {\r\n        uint256 availableAmount = getAvailableVestingAmount(msg.sender);\r\n        require(availableAmount > 0);\r\n        totalVestedAmount[msg.sender] = totalVestedAmount[msg.sender].add(availableAmount);\r\n        token.transfer(msg.sender, availableAmount);\r\n        Vest(msg.sender, availableAmount);\r\n    }\r\n\r\n    // drain all eth and tokens to owner in an emergency situation\r\n    function drain() external onlyOwner {\r\n        owner.transfer(this.balance);\r\n        token.transfer(owner, this.balance);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"page\",\"type\":\"uint256\"}],\"name\":\"getAccountKeys\",\"outputs\":[{\"name\":\"\",\"type\":\"address[10]\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token_address\",\"type\":\"address\"}],\"name\":\"setVestingToken\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"total_amount\",\"type\":\"uint256\"},{\"name\":\"startDate\",\"type\":\"uint256\"},{\"name\":\"durationPerVesting\",\"type\":\"uint256\"},{\"name\":\"times\",\"type\":\"uint256\"}],\"name\":\"createVestingByDurationAndSplits\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"vest\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getVestingAmountByNow\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getAvailableVestingAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"drain\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"vestingAccounts\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"vestingDate\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"token_address\",\"type\":\"address\"}],\"payable\":false,\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Vest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"vestingDate\",\"type\":\"uint256\"}],\"name\":\"VestingCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"TokenVesting","CompilerVersion":"v0.4.15+commit.bbb8e64f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000002ae965cd3d2b6d186e87d9586fc3bdbfc667cacc","Library":"","SwarmSource":"bzzr://4cb6da655905d6ff4bee2dca3feac5713b759762f6fb51ff2c6cce374bbc8faf"}]}