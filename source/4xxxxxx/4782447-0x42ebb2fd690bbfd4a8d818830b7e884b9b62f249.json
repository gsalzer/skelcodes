{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\ncontract AbstractTRMBalances {\r\n    mapping(address => bool) public oldBalances;\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) constant returns (uint256);\r\n  function transfer(address to, uint256 value) returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) returns (bool);\r\n  function approve(address spender, uint256 value) returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    \r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n  \r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances. \r\n */\r\ncontract BasicToken is ERC20Basic {\r\n    \r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) returns (bool) {\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of. \r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) allowed;\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amout of tokens to be transfered\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\r\n    var _allowance = allowed[_from][msg.sender];\r\n\r\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n    // require (_value <= _allowance);\r\n\r\n    balances[_to] = balances[_to].add(_value);\r\n    balances[_from] = balances[_from].sub(_value);\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) returns (bool) {\r\n\r\n    // To change the approve amount you first have to reduce the addresses`\r\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n    //  already 0 to mitigate the race condition described here:\r\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifing the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    \r\n  address public owner;\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner {\r\n    require(newOwner != address(0));      \r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Mintable token\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\r\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n */\r\n\r\ncontract MintableToken is StandardToken, Ownable {\r\n    \r\n  event Mint(address indexed to, uint256 amount);\r\n  \r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will recieve the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(address _to, uint256 _amount) onlyOwner canMint returns (bool) {\r\n    totalSupply = totalSupply.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    //Mint(_to, _amount);\r\n    Transfer(address(0), _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() onlyOwner returns (bool) {\r\n    mintingFinished = true;\r\n    MintFinished();\r\n    return true;\r\n  }\r\n  \r\n}\r\n\r\ncontract TRM2TokenCoin is MintableToken {\r\n    \r\n    string public constant name = \"TerraMiner\";\r\n    \r\n    string public constant symbol = \"TRM2\";\r\n    \r\n    uint32 public constant decimals = 8;\r\n    \r\n}\r\n\r\n\r\n\r\ncontract Crowdsale is Ownable, AbstractTRMBalances {\r\n    event NewContribution(address indexed holder, uint256 tokenAmount, uint256 etherAmount);\r\n    \r\n    using SafeMath for uint;\r\n    \r\n    uint public ETHUSD;\r\n    \r\n    address multisig;\r\n    \r\n    address manager;\r\n\r\n    TRM2TokenCoin public token = new TRM2TokenCoin();\r\n\r\n    uint public startPreSale;\r\n    uint public endPreSale;\r\n    \r\n    uint public startPreICO;\r\n    uint public endPreICO;\r\n    \r\n    uint public startICO;\r\n    uint public endICO;\r\n    \r\n    uint public startPostICO;\r\n    uint public endPostICO;    \r\n    \r\n    uint hardcap;\r\n    \r\n    bool pause;\r\n    \r\n    AbstractTRMBalances oldBalancesP1;\r\n    AbstractTRMBalances oldBalancesP2;   \r\n    \r\n\r\n    function Crowdsale() {\r\n        //кошелек на который зачисляются средства\r\n        multisig = 0xc2CDcE18deEcC1d5274D882aEd0FB082B813FFE8;\r\n        //адрес кошелька управляющего контрактом\r\n        manager = 0xf5c723B7Cc90eaA3bEec7B05D6bbeBCd9AFAA69a;\r\n        //курс эфира к токенам \r\n        ETHUSD = 70000;\r\n        \r\n        //время   \r\n        startPreSale = now;\r\n        endPreSale = 1515974400; //Mon, 15 Jan 2018 00:00:00 GMT\r\n        \r\n        startPreICO = 1514332800; // Wed, 27 Dec 2017 00:00:00 GMT\r\n        endPreICO = 1517443200; // Thu, 01 Feb 2018 00:00:00 GMT\r\n\r\n        startICO = 1517443200; // Thu, 01 Feb 2018 00:00:00 GMT\r\n        endICO = 1519862400; // Thu, 01 Mar 2018 00:00:00 GMT\r\n        \r\n        startPostICO = 1519862400; // Thu, 01 Mar 2018 00:00:00 GMT\r\n        endPostICO = 1522540800; // Sun, 01 Apr 2018 00:00:00 GMT\r\n\t\t\r\n        //максимальное число сбора в токенах\r\n        hardcap = 250000000 * 100000000;\r\n        //пауза  \r\n        pause = false;\r\n        \r\n        oldBalancesP1 = AbstractTRMBalances(0xfcc6C3C19dcD67c282fFE27Ea79F1181693dA194);\r\n        oldBalancesP2 = AbstractTRMBalances(0x4B7a1c77323c1e2ED6BcE44152b30092CAA9B1D3);\r\n    }\r\n\r\n    modifier saleIsOn() {\r\n        require((now >= startPreSale && now < endPreSale) || (now >= startPreICO && now < endPreICO) || (now >= startICO && now < endICO) || (now >= startPostICO && now < endPostICO));\r\n    \trequire(pause!=true);\r\n    \t_;\r\n    }\r\n\t\r\n    modifier isUnderHardCap() {\r\n        require(token.totalSupply() < hardcap);\r\n        _;\r\n    }\r\n\r\n    function finishMinting() public {\r\n        require(msg.sender == manager);\r\n        token.finishMinting();\r\n        token.transferOwnership(manager);\r\n    }\r\n\r\n    function createTokens() isUnderHardCap saleIsOn payable {\r\n\r\n        uint256 sum = msg.value;\r\n        uint256 sumUSD = msg.value.mul(ETHUSD).div(100);\r\n\r\n       //require(msg.value > 0);\r\n        require(sumUSD.div(1000000000000000000) > 100);\r\n        \r\n        uint256 totalSupply = token.totalSupply();\r\n        \r\n        uint256 numTokens = 0;\r\n        \r\n        uint256 tokenRest = 0;\r\n        uint256 tokenPrice = 8 * 1000000000000000000;\r\n        \r\n        \r\n        //PreSale\r\n        //------------------------------------\r\n        if( (now >= startPreSale && now < endPreSale ) && ((oldBalancesP1.oldBalances(msg.sender) == true)||(oldBalancesP2.oldBalances(msg.sender) == true)) ){\r\n            \r\n            tokenPrice = 35 * 100000000000000000; \r\n\r\n            numTokens = sumUSD.mul(100000000).div(tokenPrice);\r\n            \r\n        } else {\r\n            //------------------------------------\r\n            \r\n            //PreICO\r\n            //------------------------------------\r\n            if(now >= startPreICO && now < endPreICO){\r\n                \r\n                tokenPrice = 7 ether; \r\n                if(sum >= 151 ether){\r\n                   tokenPrice = 35 * 100000000000000000;\r\n                } else if(sum >= 66 ether){\r\n                   tokenPrice = 40 * 100000000000000000;\r\n                } else if(sum >= 10 ether){\r\n                   tokenPrice = 45 * 100000000000000000;\r\n                } else if(sum >= 5 ether){\r\n                   tokenPrice = 50 * 100000000000000000;\r\n                }\r\n                \r\n                numTokens = sumUSD.mul(100000000).div(tokenPrice);\r\n                \r\n            }\r\n            //------------------------------------        \r\n            \r\n            //ICO\r\n            //------------------------------------\r\n            if(now >= startICO && now < endICO){\r\n                \r\n                tokenPrice = 7 ether; \r\n                if(sum >= 151 ether){\r\n                   tokenPrice = 40 * 100000000000000000;\r\n                } else if(sum >= 66 ether){\r\n                   tokenPrice = 50 * 100000000000000000;\r\n                } else if(sum >= 10 ether){\r\n                   tokenPrice = 55 * 100000000000000000;\r\n                } else if(sum >= 5 ether){\r\n                   tokenPrice = 60 * 100000000000000000;\r\n                } \r\n                \r\n                numTokens = sumUSD.mul(100000000).div(tokenPrice);\r\n                \r\n            }\r\n            //------------------------------------\r\n            \r\n            //PostICO\r\n            //------------------------------------\r\n            if(now >= startPostICO && now < endPostICO){\r\n                \r\n                tokenPrice = 8 ether; \r\n                if(sum >= 151 ether){\r\n                   tokenPrice = 45 * 100000000000000000;\r\n                } else if(sum >= 66 ether){\r\n                   tokenPrice = 55 * 100000000000000000;\r\n                } else if(sum >= 10 ether){\r\n                   tokenPrice = 60 * 100000000000000000;\r\n                } else if(sum >= 5 ether){\r\n                   tokenPrice = 65 * 100000000000000000;\r\n                } \r\n                \r\n                numTokens = sumUSD.mul(100000000).div(tokenPrice);\r\n                \r\n            }\r\n            //------------------------------------  \r\n        }\r\n\r\n        require(msg.value > 0);\r\n        require(numTokens > 0);\r\n        \r\n        tokenRest = hardcap.sub(totalSupply);\r\n        require(tokenRest >= numTokens);\r\n        \r\n        token.mint(msg.sender, numTokens);\r\n        multisig.transfer(msg.value);\r\n        \r\n        NewContribution(msg.sender, numTokens, msg.value);\r\n        \r\n        \r\n    }\r\n\r\n    function() external payable {\r\n        createTokens();\r\n    }\r\n\r\n    function mint(address _to, uint _value) {\r\n        require(msg.sender == manager);\r\n        uint256 tokenRest = hardcap.sub(token.totalSupply());\r\n        require(tokenRest > 0);\r\n        if(_value > tokenRest)\r\n            _value = tokenRest;\r\n        token.mint(_to, _value);   \r\n    }    \r\n    \r\n    function setETHUSD( uint256 _newPrice ) {\r\n        require(msg.sender == manager);\r\n        ETHUSD = _newPrice;\r\n    }    \r\n    \r\n    function setPause( bool _newPause ) {\r\n        require(msg.sender == manager);\r\n        pause = _newPause;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endICO\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startPreSale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ETHUSD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endPreICO\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startICO\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endPostICO\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"createTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startPreICO\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"oldBalances\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newPause\",\"type\":\"bool\"}],\"name\":\"setPause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newPrice\",\"type\":\"uint256\"}],\"name\":\"setETHUSD\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endPreSale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startPostICO\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"etherAmount\",\"type\":\"uint256\"}],\"name\":\"NewContribution\",\"type\":\"event\"}]","ContractName":"Crowdsale","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://024a8a2a65333279e73f02d310cc9aac9cd09d916083470594afe4819e9da431"}]}