{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.8;\r\n\r\n    \r\n// ERC Token Standard #20 Interface\r\n\r\ncontract ERC20Interface {// Get the total token supply\r\nfunction totalSupply() constant returns (uint256 totalSupply);\r\n\r\n// Get the account balance of another account with address _owner\r\nfunction balanceOf(address _owner) constant returns (uint256 balance);\r\n\r\n// Send _value amount of tokens to address _to\r\nfunction transfer(address _to, uint256 _value) returns (bool success);\r\n  \r\n// Send _value amount of tokens from address _from to address _to\r\nfunction transferFrom(address _from, address _to, uint256 _value) returns (bool success);\r\n \r\n// Allow _spender to withdraw from your account, multiple times, up to the _value amount.\r\n// If this function is called again it overwrites the current allowance with _value.\r\n// this function is required for some DEX functionality\r\nfunction approve(address _spender, uint256 _value) returns (bool success);\r\n  \r\n// Returns the amount which _spender is still allowed to withdraw from _owner\r\nfunction allowance(address _owner, address _spender) constant returns (uint256 remaining);\r\n  \r\n// Triggered when tokens are transferred.\r\nevent Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n  \r\n// Triggered whenever approve(address _spender, uint256 _value) is called.\r\nevent Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n  \r\ncontract AbrasaCoin is ERC20Interface {\r\nstring public constant symbol = \"ABC\";\r\nstring public constant name = \"Abrasa Coin\";\r\nuint8 public constant decimals = 18;\r\nuint256 _totalSupply = 100000000000000000000000000;\r\n \r\n// Owner of this contract\r\naddress public owner;\r\n  \r\n// Balances for each account\r\nmapping(address => uint256) balances;\r\n  \r\n// Owner of account approves the transfer of an amount to another account\r\nmapping(address => mapping (address => uint256)) allowed;\r\n  \r\n// Functions with this modifier can only be executed by the owner\r\nmodifier onlyOwner() {\r\nif (msg.sender != owner) {\r\nthrow;\r\n}\r\n         _;\r\n}\r\n  \r\n// Constructor\r\nfunction FixedSupplyToken() {\r\nowner = msg.sender;\r\nbalances[owner] = _totalSupply;\r\n}\r\n  \r\nfunction totalSupply() constant returns (uint256 totalSupply) {\r\ntotalSupply = _totalSupply;\r\n     }\r\n  \r\n// What is the balance of a particular account?\r\n     function balanceOf(address _owner) constant returns (uint256 balance) {\r\nreturn balances[_owner];\r\n     }\r\n  \r\n// Transfer the balance from owner's account to another account\r\nfunction transfer(address _to, uint256 _amount) returns (bool success) {\r\nif (balances[msg.sender] >= _amount \r\n&& _amount > 0\r\n&& balances[_to] + _amount > balances[_to]) {\r\nbalances[msg.sender] -= _amount;\r\nbalances[_to] += _amount;\r\nTransfer(msg.sender, _to, _amount);\r\nreturn true;\r\n         } else {\r\n             return false;\r\n         }\r\n     }\r\n  \r\n// Send _value amount of tokens from address _from to address _to\r\n// The transferFrom method is used for a withdraw workflow, allowing contracts to send\r\n// tokens on your behalf, for example to \"deposit\" to a contract address and/or to charge\r\n// fees in sub-currencies; the command should fail unless the _from account has\r\n// deliberately authorized the sender of the message via some mechanism; we propose\r\n// these standardized APIs for approval:\r\n     function transferFrom(\r\n         address _from,\r\n         address _to,\r\n         uint256 _amount\r\n     ) returns (bool success) {\r\n         if (balances[_from] >= _amount\r\n             && allowed[_from][msg.sender] >= _amount\r\n             && _amount > 0\r\n             && balances[_to] + _amount > balances[_to]) {\r\n             balances[_from] -= _amount;\r\n             allowed[_from][msg.sender] -= _amount;\r\n             balances[_to] += _amount;\r\n             Transfer(_from, _to, _amount);\r\n             return true;\r\n         } else {\r\n             return false;\r\n         }\r\n     }\r\n  \r\n// Allow _spender to withdraw from your account, multiple times, up to the _value amount.\r\n// If this function is called again it overwrites the current allowance with _value.\r\nfunction approve(address _spender, uint256 _amount) returns (bool success) {\r\n     allowed[msg.sender][_spender] = _amount;\r\n         Approval(msg.sender, _spender, _amount);\r\n         return true;\r\n     }\r\n  \r\n function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n     return allowed[_owner][_spender];\r\n        }\r\n }","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"FixedSupplyToken\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"AbrasaCoin","CompilerVersion":"v0.4.11+commit.68ef5810","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://fed18ae6f4dd2082f7e4cc3c04da8e119ee266e726c3088908f72f41655ac6d9"}]}