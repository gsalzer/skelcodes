{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\n// ERC20 token interface is implemented only partially.\r\n\r\ncontract ARIToken {\r\n\r\n    /// @dev Constructor\r\n    /// @param _tokenManager Token manager address.\r\n    function ARIToken(address _tokenManager, address _escrow) {\r\n        tokenManager = _tokenManager;\r\n        escrow = _escrow;\r\n    }\r\n\r\n\r\n    /*/\r\n     *  Constants\r\n    /*/\r\n\r\n    string public constant name = \"ARI Token\";\r\n    string public constant symbol = \"ARI\";\r\n    uint   public constant decimals = 18;\r\n\r\n    /*/\r\n     *  Token state\r\n    /*/\r\n\r\n    enum Phase {\r\n        Created,\r\n        Running,\r\n        Paused,\r\n        Migrating,\r\n        Migrated\r\n    }\r\n\r\n    Phase public currentPhase = Phase.Created;\r\n    uint public totalSupply = 0; // amount of tokens already sold\r\n\r\n    uint public price = 2000;\r\n    uint public tokenSupplyLimit = 2000 * 10000 * (1 ether / 1 wei);\r\n\r\n    bool public transferable = false;\r\n\r\n    // Token manager has exclusive priveleges to call administrative\r\n    // functions on this contract.\r\n    address public tokenManager;\r\n\r\n    // Gathered funds can be withdrawn only to escrow's address.\r\n    address public escrow;\r\n\r\n    // Crowdsale manager has exclusive priveleges to burn presale tokens.\r\n    address public crowdsaleManager;\r\n\r\n    mapping (address => uint256) private balance;\r\n\r\n\r\n    modifier onlyTokenManager()     { if(msg.sender != tokenManager) throw; _; }\r\n    modifier onlyCrowdsaleManager() { if(msg.sender != crowdsaleManager) throw; _; }\r\n\r\n\r\n    /*/\r\n     *  Events\r\n    /*/\r\n\r\n    event LogBuy(address indexed owner, uint value);\r\n    event LogBurn(address indexed owner, uint value);\r\n    event LogPhaseSwitch(Phase newPhase);\r\n    /* This generates a public event on the blockchain that will notify clients */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n\r\n    /*/\r\n     *  Public functions\r\n    /*/\r\n\r\n    function() payable {\r\n        buyTokens(msg.sender);\r\n    }\r\n\r\n    /// @dev Lets buy you some tokens.\r\n    function buyTokens(address _buyer) public payable {\r\n        // Available only if presale is running.\r\n        if(currentPhase != Phase.Running) throw;\r\n\r\n        if(msg.value <= 0) throw;\r\n        uint newTokens = msg.value * price;\r\n        if (totalSupply + newTokens > tokenSupplyLimit) throw;\r\n        balance[_buyer] += newTokens;\r\n        totalSupply += newTokens;\r\n        LogBuy(_buyer, newTokens);\r\n    }\r\n\r\n\r\n    /// @dev Returns number of tokens owned by given address.\r\n    /// @param _owner Address of token owner.\r\n    function burnTokens(address _owner) public\r\n        onlyCrowdsaleManager\r\n    {\r\n        // Available only during migration phase\r\n        if(currentPhase != Phase.Migrating) throw;\r\n\r\n        uint tokens = balance[_owner];\r\n        if(tokens == 0) throw;\r\n        balance[_owner] = 0;\r\n        totalSupply -= tokens;\r\n        LogBurn(_owner, tokens);\r\n\r\n        // Automatically switch phase when migration is done.\r\n        if(totalSupply == 0) {\r\n            currentPhase = Phase.Migrated;\r\n            LogPhaseSwitch(Phase.Migrated);\r\n        }\r\n    }\r\n\r\n\r\n    /// @dev Returns number of tokens owned by given address.\r\n    /// @param _owner Address of token owner.\r\n    function balanceOf(address _owner) constant returns (uint256) {\r\n        return balance[_owner];\r\n    }\r\n\r\n\r\n    /*/\r\n     *  Administrative functions\r\n    /*/\r\n\r\n    function setPresalePhase(Phase _nextPhase) public\r\n        onlyTokenManager\r\n    {\r\n        bool canSwitchPhase\r\n            =  (currentPhase == Phase.Created && _nextPhase == Phase.Running)\r\n            || (currentPhase == Phase.Running && _nextPhase == Phase.Paused)\r\n                // switch to migration phase only if crowdsale manager is set\r\n            || ((currentPhase == Phase.Running || currentPhase == Phase.Paused)\r\n                && _nextPhase == Phase.Migrating\r\n                && crowdsaleManager != 0x0)\r\n            || (currentPhase == Phase.Paused && _nextPhase == Phase.Running)\r\n                // switch to migrated only if everyting is migrated\r\n            || (currentPhase == Phase.Migrating && _nextPhase == Phase.Migrated\r\n                && totalSupply == 0);\r\n\r\n        if(!canSwitchPhase) throw;\r\n        currentPhase = _nextPhase;\r\n        LogPhaseSwitch(_nextPhase);\r\n    }\r\n\r\n\r\n    function withdrawEther() public\r\n        onlyTokenManager\r\n    {\r\n        // Available at any phase.\r\n        if(this.balance > 0) {\r\n            if(!escrow.send(this.balance)) throw;\r\n        }\r\n    }\r\n\r\n\r\n    function setCrowdsaleManager(address _mgr) public\r\n        onlyTokenManager\r\n    {\r\n        // You can't change crowdsale contract when migration is in progress.\r\n        if(currentPhase == Phase.Migrating) throw;\r\n        crowdsaleManager = _mgr;\r\n    }\r\n    \r\n    /* Send coins */\r\n    function transfer(address _to, uint256 _value) {\r\n        if (!transferable) throw;\r\n        if (balance[msg.sender] < _value) throw;           // Check if the sender has enough\r\n        if (balance[_to] + _value < balance[_to]) throw; // Check for overflows\r\n        balance[msg.sender] -= _value;                     // Subtract from the sender\r\n        balance[_to] += _value;                            // Add the same to the recipient\r\n        Transfer(msg.sender, _to, _value);                   // Notify anyone listening that this transfer took place\r\n    }\r\n    \r\n    function setTransferable(bool _value) public\r\n        onlyTokenManager\r\n    {\r\n        transferable = _value;\r\n    }\r\n    \r\n    function setPrice(uint256 _price) public\r\n        onlyTokenManager\r\n    {\r\n        if(currentPhase != Phase.Paused) throw;\r\n        if(_price <= 0) throw;\r\n\r\n        price = _price;\r\n    }\r\n\r\n    function setTokenSupplyLimit(uint256 _value) public\r\n        onlyTokenManager\r\n    {\r\n        if(currentPhase != Phase.Paused) throw;\r\n        if(_value <= 0) throw;\r\n\r\n        uint _tokenSupplyLimit;\r\n        _tokenSupplyLimit = _value * (1 ether / 1 wei);\r\n\r\n        if(totalSupply > _tokenSupplyLimit) throw;\r\n\r\n        tokenSupplyLimit = _tokenSupplyLimit;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"currentPhase\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nextPhase\",\"type\":\"uint8\"}],\"name\":\"setPresalePhase\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenSupplyLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenManager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleManager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_mgr\",\"type\":\"address\"}],\"name\":\"setCrowdsaleManager\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawEther\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transferable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"setTransferable\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"burnTokens\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"escrow\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_buyer\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setTokenSupplyLimit\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tokenManager\",\"type\":\"address\"},{\"name\":\"_escrow\",\"type\":\"address\"}],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"LogBuy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"LogBurn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newPhase\",\"type\":\"uint8\"}],\"name\":\"LogPhaseSwitch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"ARIToken","CompilerVersion":"v0.4.11+commit.68ef5810","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000d80A292A8866A5893e1578a640b0D88B2ff8F3a40000000000000000000000003a496FD92704ce69C992841cA19432535cd14636","Library":"","SwarmSource":"bzzr://c1f68279afe6eec726c9eacc061b0599b2d9cd6aa48adf1127183052053d75cd"}]}