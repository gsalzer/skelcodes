{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.14;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control \r\n * functions, this simplifies the implementation of \"user permissions\". \r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  /** \r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev revert()s if called by any account other than the owner. \r\n   */\r\n  modifier onlyOwner() {\r\n    if (msg.sender != owner) {\r\n      revert();\r\n    }\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to. \r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner {\r\n    if (newOwner != address(0)) {\r\n      owner = newOwner;\r\n    }\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n/**\r\n * Math operations with safety checks\r\n */\r\nlibrary SafeMath {\r\n  \r\n  \r\n  function mul256(uint256 a, uint256 b) internal returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div256(uint256 a, uint256 b) internal returns (uint256) {\r\n    require(b > 0); // Solidity automatically revert()s when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub256(uint256 a, uint256 b) internal returns (uint256) {\r\n    require(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add256(uint256 a, uint256 b) internal returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }  \r\n  \r\n\r\n  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n    return a < b ? a : b;\r\n  }\r\n\r\n  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    return a < b ? a : b;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) constant returns (uint256);\r\n  function transfer(address to, uint256 value);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev ERC20 interface with allowances. \r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value);\r\n  function approve(address spender, uint256 value);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances. \r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n   * @dev Fix for the ERC20 short address attack.\r\n   */\r\n  modifier onlyPayloadSize(uint size) {\r\n     if(msg.data.length < size + 4) {\r\n       revert();\r\n     }\r\n     _;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) onlyPayloadSize(2 * 32) {\r\n    balances[msg.sender] = balances[msg.sender].sub256(_value);\r\n    balances[_to] = balances[_to].add256(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of. \r\n  * @return An uint representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n * @dev Implemantation of the basic standart token.\r\n */\r\ncontract StandardToken is BasicToken, ERC20 {\r\n\r\n  mapping (address => mapping (address => uint256)) allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint the amout of tokens to be transfered\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) onlyPayloadSize(3 * 32) {\r\n    var _allowance = allowed[_from][msg.sender];\r\n\r\n    // Check is not needed because sub(_allowance, _value) will already revert() if this condition is not met\r\n    // if (_value > _allowance) revert();\r\n\r\n    balances[_to] = balances[_to].add256(_value);\r\n    balances[_from] = balances[_from].sub256(_value);\r\n    allowed[_from][msg.sender] = _allowance.sub256(_value);\r\n    Transfer(_from, _to, _value);\r\n  }\r\n\r\n  /**\r\n   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) {\r\n\r\n    //  To change the approve amount you first have to reduce the addresses\r\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n    //  already 0 to mitigate the race condition described here:\r\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    if ((_value != 0) && (allowed[msg.sender][_spender] != 0)) revert();\r\n\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens than an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint specifing the amount of tokens still avaible for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title LuckyToken\r\n * @dev The main Lucky token contract\r\n * \r\n */\r\n \r\ncontract LuckyToken is StandardToken, Ownable{\r\n  string public name = \"Lucky888Coin\";\r\n  string public symbol = \"LKY\";\r\n  uint public decimals = 18;\r\n\r\n  event TokenBurned(uint256 value);\r\n  \r\n  function LuckyToken() {\r\n    totalSupply = (10 ** 8) * (10 ** decimals);\r\n    balances[msg.sender] = totalSupply;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the owner to burn the token\r\n   * @param _value number of tokens to be burned.\r\n   */\r\n  function burn(uint _value) onlyOwner {\r\n    require(balances[msg.sender] >= _value);\r\n    balances[msg.sender] = balances[msg.sender].sub256(_value);\r\n    totalSupply = totalSupply.sub256(_value);\r\n    TokenBurned(_value);\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title InitialTeuTokenSale\r\n * @dev The Initial TEU token sale contract\r\n * \r\n */\r\ncontract initialTeuTokenSale is Ownable {\r\n  using SafeMath for uint256;\r\n  event LogPeriodStart(uint period);\r\n  event LogCollectionStart(uint period);\r\n  event LogContribution(address indexed contributorAddress, uint256 weiAmount, uint period);\r\n  event LogCollect(address indexed contributorAddress, uint256 tokenAmount, uint period); \r\n\r\n  LuckyToken                                       private  token; \r\n  mapping(uint => address)                       private  walletOfPeriod;\r\n  uint256                                        private  minContribution = 0.1 ether;\r\n  uint                                           private  saleStart;\r\n  bool                                           private  isTokenCollectable = false;\r\n  mapping(uint => uint)                          private  periodStart;\r\n  mapping(uint => uint)                          private  periodDeadline;\r\n  mapping(uint => uint256)                       private  periodTokenPool;\r\n\r\n  mapping(uint => mapping (address => uint256))  private  contribution;  \r\n  mapping(uint => uint256)                       private  periodContribution;  \r\n  mapping(uint => mapping (address => bool))     private  collected;  \r\n  mapping(uint => mapping (address => uint256))  private  tokenCollected;  \r\n  \r\n  uint public totalPeriod = 0;\r\n  uint public currentPeriod = 0;\r\n\r\n\r\n  /**\r\n   * @dev Initialise the contract\r\n   * @param _tokenAddress address of TEU token\r\n   * @param _walletPeriod1 address of period 1 wallet\r\n   * @param _walletPeriod2 address of period 2 wallet\r\n   * @param _tokenPoolPeriod1 amount of pool of token in period 1\r\n   * @param _tokenPoolPeriod2 amount of pool of token in period 2\r\n   * @param _saleStartDate start date / time of the token sale\r\n   */\r\n  function initTokenSale (address _tokenAddress\r\n  , address _walletPeriod1, address _walletPeriod2\r\n  , uint256 _tokenPoolPeriod1, uint256 _tokenPoolPeriod2\r\n  , uint _saleStartDate) onlyOwner {\r\n    assert(totalPeriod == 0);\r\n    assert(_tokenAddress != address(0));\r\n    assert(_walletPeriod1 != address(0));\r\n    assert(_walletPeriod2 != address(0));\r\n    walletOfPeriod[1] = _walletPeriod1;\r\n    walletOfPeriod[2] = _walletPeriod2;\r\n    periodTokenPool[1] = _tokenPoolPeriod1;\r\n    periodTokenPool[2] = _tokenPoolPeriod2;\r\n    token = LuckyToken(_tokenAddress);\r\n    assert(token.owner() == owner);\r\n    setPeriodStart(_saleStartDate);\r\n \r\n  }\r\n  \r\n  \r\n  /**\r\n   * @dev Allows the owner to set the starting time.\r\n   * @param _saleStartDate the new sales start date / time\r\n   */  \r\n  function setPeriodStart(uint _saleStartDate) onlyOwner beforeSaleStart private {\r\n    totalPeriod = 0;\r\n    saleStart = _saleStartDate;\r\n    \r\n    uint period1_contributionInterval = 14 days;\r\n    uint period1_collectionInterval = 14 days;\r\n    uint period2_contributionInterval = 7 days;\r\n    \r\n    addPeriod(saleStart, saleStart + period1_contributionInterval);\r\n    addPeriod(saleStart + period1_contributionInterval + period1_collectionInterval, saleStart + period1_contributionInterval + period1_collectionInterval + period2_contributionInterval);\r\n\r\n    currentPeriod = 1;    \r\n  } \r\n  \r\n  function addPeriod(uint _periodStart, uint _periodDeadline) onlyOwner beforeSaleEnd private {\r\n    require(_periodStart >= now && _periodDeadline > _periodStart && (totalPeriod == 0 || _periodStart > periodDeadline[totalPeriod]));\r\n    totalPeriod = totalPeriod + 1;\r\n    periodStart[totalPeriod] = _periodStart;\r\n    periodDeadline[totalPeriod] = _periodDeadline;\r\n    periodContribution[totalPeriod] = 0;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Call this method to let the contract to go into next period of sales\r\n   */\r\n  function goNextPeriod() onlyOwner public {\r\n    for (uint i = 1; i <= totalPeriod; i++) {\r\n        if (currentPeriod < totalPeriod && now >= periodStart[currentPeriod + 1]) {\r\n            currentPeriod = currentPeriod + 1;\r\n            isTokenCollectable = false;\r\n            LogPeriodStart(currentPeriod);\r\n        }\r\n    }\r\n    \r\n  }\r\n\r\n  /**\r\n   * @dev Call this method to let the contract to allow token collection after the contribution period\r\n   */  \r\n  function goTokenCollection() onlyOwner public {\r\n    require(currentPeriod > 0 && now > periodDeadline[currentPeriod] && !isTokenCollectable);\r\n    isTokenCollectable = true;\r\n    LogCollectionStart(currentPeriod);\r\n  }\r\n\r\n  /**\r\n   * @dev modifier to allow contribution only when the sale is ON\r\n   */\r\n  modifier saleIsOn() {\r\n    require(currentPeriod > 0 && now >= periodStart[currentPeriod] && now < periodDeadline[currentPeriod]);\r\n    _;\r\n  }\r\n  \r\n  /**\r\n   * @dev modifier to allow collection only when the collection is ON\r\n   */\r\n  modifier collectIsOn() {\r\n    require(isTokenCollectable && currentPeriod > 0 && now > periodDeadline[currentPeriod] && (currentPeriod == totalPeriod || now < periodStart[currentPeriod + 1]));\r\n    _;\r\n  }\r\n  \r\n  /**\r\n   * @dev modifier to ensure it is before start of first period of sale\r\n   */  \r\n  modifier beforeSaleStart() {\r\n    require(totalPeriod == 0 || now < periodStart[1]);\r\n    _;  \r\n  }\r\n  /**\r\n   * @dev modifier to ensure it is before the deadline of last sale period\r\n   */  \r\n   \r\n  modifier beforeSaleEnd() {\r\n    require(currentPeriod == 0 || now < periodDeadline[totalPeriod]);\r\n    _;\r\n  }\r\n  /**\r\n   * @dev modifier to ensure it is after the deadline of last sale period\r\n   */ \r\n  modifier afterSaleEnd() {\r\n    require(currentPeriod > 0 && now > periodDeadline[totalPeriod]);\r\n    _;\r\n  }\r\n  \r\n  modifier overMinContribution() {\r\n    require(msg.value >= minContribution);\r\n    _;\r\n  }\r\n  \r\n  \r\n  /**\r\n   * @dev record the contribution of a contribution \r\n   */\r\n  function contribute() private saleIsOn overMinContribution {\r\n    contribution[currentPeriod][msg.sender] = contribution[currentPeriod][msg.sender].add256(msg.value);\r\n    periodContribution[currentPeriod] = periodContribution[currentPeriod].add256(msg.value);\r\n    assert(walletOfPeriod[currentPeriod].send(msg.value));\r\n    LogContribution(msg.sender, msg.value, currentPeriod);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows contributor to collect all token alloted for all period after preiod deadline\r\n   */\r\n  function collectToken() public collectIsOn {\r\n    uint256 _tokenCollected = 0;\r\n    for (uint i = 1; i <= totalPeriod; i++) {\r\n        if (!collected[i][msg.sender] && contribution[i][msg.sender] > 0)\r\n        {\r\n            _tokenCollected = contribution[i][msg.sender].mul256(periodTokenPool[i]).div256(periodContribution[i]);\r\n\r\n            collected[i][msg.sender] = true;\r\n            token.transfer(msg.sender, _tokenCollected);\r\n\r\n            tokenCollected[i][msg.sender] = _tokenCollected;\r\n            LogCollect(msg.sender, _tokenCollected, i);\r\n        }\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allow owner to transfer out the token in the contract\r\n   * @param _to address to transfer to\r\n   * @param _amount amount to transfer\r\n   */  \r\n  function transferTokenOut(address _to, uint256 _amount) public onlyOwner {\r\n    token.transfer(_to, _amount);\r\n  }\r\n\r\n  /**\r\n   * @dev Allow owner to transfer out the ether in the contract\r\n   * @param _to address to transfer to\r\n   * @param _amount amount to transfer\r\n   */  \r\n  function transferEtherOut(address _to, uint256 _amount) public onlyOwner {\r\n    assert(_to.send(_amount));\r\n  }  \r\n\r\n  /**\r\n   * @dev to get the contribution amount of any contributor under different period\r\n   * @param _period period to get the contribution amount\r\n   * @param _contributor contributor to get the conribution amount\r\n   */  \r\n  function contributionOf(uint _period, address _contributor) public constant returns (uint256) {\r\n    return contribution[_period][_contributor] ;\r\n  }\r\n\r\n  /**\r\n   * @dev to get the total contribution amount of a given period\r\n   * @param _period period to get the contribution amount\r\n   */  \r\n  function periodContributionOf(uint _period) public constant returns (uint256) {\r\n    return periodContribution[_period];\r\n  }\r\n\r\n  /**\r\n   * @dev to check if token is collected by any contributor under different period\r\n   * @param _period period to get the collected status\r\n   * @param _contributor contributor to get collected status\r\n   */  \r\n  function isTokenCollected(uint _period, address _contributor) public constant returns (bool) {\r\n    return collected[_period][_contributor] ;\r\n  }\r\n  \r\n  /**\r\n   * @dev to get the amount of token collected by any contributor under different period\r\n   * @param _period period to get the amount\r\n   * @param _contributor contributor to get amont\r\n   */  \r\n  function tokenCollectedOf(uint _period, address _contributor) public constant returns (uint256) {\r\n    return tokenCollected[_period][_contributor] ;\r\n  }\r\n\r\n  /**\r\n   * @dev Fallback function which receives ether and create the appropriate number of tokens for the \r\n   * msg.sender.\r\n   */\r\n  function() external payable {\r\n    contribute();\r\n  }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TokenBurned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"LuckyToken","CompilerVersion":"v0.4.14+commit.c2215d46","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://f3da68f19bb83e27451da3fec4a6342c890e5b51cd97c4799227e3161503ad3b"}]}