{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.16;\r\n\r\n// Original author: Cintix\r\n// Modified by: Moonlambos, yakois\r\n\r\n// ERC20 Interface: https://github.com/ethereum/EIPs/issues/20\r\ncontract ERC20 {\r\n  function transfer(address _to, uint256 _value) returns (bool success);\r\n  function balanceOf(address _owner) constant returns (uint256 balance);\r\n}\r\n\r\ncontract RequestSale {\r\n  // Store the amount of ETH deposited by each account.\r\n  mapping (address => uint256) public balances;\r\n  // Track whether the contract has bought the tokens yet.\r\n  bool public bought_tokens;\r\n  // Record ETH value of tokens currently held by contract.\r\n  uint256 public contract_eth_value;\r\n  // Maximum amount of user ETH contract will accept.\r\n  uint256 public eth_cap = 500 ether;\r\n  // The minimum amount of ETH that must be deposited before the buy-in can be performed.\r\n  uint256 constant public min_required_amount = 60 ether;\r\n  // The owner's address.\r\n  address public owner;\r\n  // The crowdsale address. Can be verified at: https://request.network/#/presale.\r\n  address public sale = 0xa579E31b930796e3Df50A56829cF82Db98b6F4B3;\r\n  \r\n  //Constructor. Sets the sender as the owner of the contract.\r\n  function RequestSale() {\r\n    owner = msg.sender;\r\n  }\r\n  \r\n  // Allows any user to withdraw his tokens.\r\n  // Token's ERC20 address as argument as it is unknow at the time of deployement.\r\n  function perform_withdrawal(address tokenAddress) {\r\n    // Tokens must be bought\r\n    require(bought_tokens);\r\n    // Retrieve current token balance of contract\r\n    ERC20 token = ERC20(tokenAddress);\r\n    uint256 contract_token_balance = token.balanceOf(address(this));\r\n    // Disallow token withdrawals if there are no tokens to withdraw.\r\n    require(contract_token_balance != 0);\r\n    // Store the user's token balance in a temporary variable.\r\n    uint256 tokens_to_withdraw = (balances[msg.sender] * contract_token_balance) / contract_eth_value;\r\n    // Update the value of tokens currently held by the contract.\r\n    contract_eth_value -= balances[msg.sender];\r\n    // Update the user's balance prior to sending to prevent recursive call.\r\n    balances[msg.sender] = 0;\r\n    // Send the funds.  Throws on failure to prevent loss of funds.\r\n    require(token.transfer(msg.sender, tokens_to_withdraw));\r\n  }\r\n  \r\n  // Allows any caller to get his eth refunded.\r\n  function refund_me() {\r\n    // Store the user's balance prior to withdrawal in a temporary variable.\r\n    uint256 eth_to_withdraw = balances[msg.sender];\r\n    // Update the user's balance prior to sending ETH to prevent recursive call.\r\n    balances[msg.sender] = 0;\r\n    // Return the user's funds.  Throws on failure to prevent loss of funds.\r\n    msg.sender.transfer(eth_to_withdraw);\r\n  }\r\n  \r\n  // Buy the tokens. Sends ETH to the presale wallet and records the ETH amount held in the contract.\r\n  function buy_the_tokens() {\r\n    // Only allow the owner to perform the buy in.\r\n    require(msg.sender == owner);\r\n    // Short circuit to save gas if the contract has already bought tokens.\r\n    require(!bought_tokens);\r\n    // The pre-sale address has to be set.\r\n    require(sale != 0x0);\r\n    // Throw if the contract balance is less than the minimum required amount.\r\n    require(this.balance >= min_required_amount);\r\n    // Record that the contract has bought the tokens.\r\n    bought_tokens = true;\r\n    // Record the amount of ETH sent as the contract's current value.\r\n    contract_eth_value = this.balance;\r\n    // Transfer all the funds to the crowdsale address.\r\n    require(sale.call.value(contract_eth_value)());\r\n  }\r\n\r\n  function upgrade_cap() {\r\n    // Only the owner can raise the cap.\r\n    require(msg.sender == owner);\r\n    // Raise the cap.\r\n    eth_cap = 1000 ether;\r\n    \r\n  }\r\n  \r\n  // Default function.  Called when a user sends ETH to the contract.\r\n  function () payable {\r\n    // Only allow deposits if the contract hasn't already purchased the tokens.\r\n    require(!bought_tokens);\r\n    // Only allow deposits that won't exceed the contract's ETH cap.\r\n    require(this.balance + msg.value < eth_cap);\r\n    // Update records of deposited ETH to include the received amount.\r\n    balances[msg.sender] += msg.value;\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buy_the_tokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"min_required_amount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bought_tokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sale\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"perform_withdrawal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refund_me\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contract_eth_value\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"upgrade_cap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"eth_cap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"RequestSale","CompilerVersion":"v0.4.16+commit.d7661dd9","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://3c2e4f55d45c08f75f3d22ec897df5014fcfb66512e6ea1709b4b103e42b6be9"}]}