{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Token {\r\n    function issue(address _recipient, uint256 _value) returns (bool success) {}\r\n    function issueAtIco(address _recipient, uint256 _value, uint256 _icoNumber) returns (bool success) {}\r\n    function totalSupply() constant returns (uint256 supply) {}\r\n    function unlock() returns (bool success) {}\r\n}\r\n\r\ncontract RICHCrowdsale {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    // Crowdsale addresses\r\n    address public creator; // Creator (1% funding)\r\n    address public buyBackFund; // Fund for buying back and burning (48% funding)\r\n    address public humanityFund; // Humanity fund (51% funding)\r\n\r\n    // Withdrawal rules\r\n    uint256 public creatorWithdraw = 0; // Current withdrawed\r\n    uint256 public maxCreatorWithdraw = 5 * 10 ** 3 * 10**18; // First 5.000 ETH\r\n    uint256 public percentageHumanityFund = 51; // Percentage goes to Humanity fund\r\n    uint256 public percentageBuyBackFund = 49; // Percentage goes to Buy-back fund\r\n\r\n    // Eth to token rate\r\n    uint256 public currentMarketRate = 1; // Current market price ETH/RCH. Will be updated before each ico\r\n    uint256 public minimumIcoRate = 240; // ETH/dollar rate. Minimum rate at wich will be issued RICH token, 1$ = 1RCH\r\n    uint256 public minAcceptedEthAmount = 4 finney; // 0.004 ether\r\n\r\n    // ICOs specification\r\n    uint256 public maxTotalSupply = 1000000000 * 10**8; // 1 mlrd. tokens\r\n\r\n    mapping (uint256 => uint256) icoTokenIssued; // Issued in each ICO\r\n    uint256 public totalTokenIssued; // Total of issued tokens\r\n\r\n    uint256 public icoPeriod = 10 days;\r\n    uint256 public noIcoPeriod = 10 days;\r\n    uint256 public maxIssuedTokensPerIco = 10**6 * 10**8; // 1 mil.\r\n    uint256 public preIcoPeriod = 30 days;\r\n\r\n    uint256 public bonusPreIco = 50;\r\n    uint256 public bonusFirstIco = 30;\r\n    uint256 public bonusSecondIco = 10;\r\n\r\n    uint256 public bonusSubscription = 5;\r\n    mapping (address => uint256) subsriptionBonusTokensIssued;\r\n\r\n    // Balances\r\n    mapping (address => uint256) balances;\r\n    mapping (address => uint256) tokenBalances;\r\n    mapping (address => mapping (uint256 => uint256)) tokenBalancesPerIco;\r\n\r\n    enum Stages {\r\n        Countdown,\r\n        PreIco,\r\n        PriorityIco,\r\n        OpenIco,\r\n        Ico, // [PreIco, PriorityIco, OpenIco]\r\n        NoIco,\r\n        Ended\r\n    }\r\n\r\n    Stages public stage = Stages.Countdown;\r\n\r\n    // Crowdsale times\r\n    uint public start;\r\n    uint public preIcoStart;\r\n\r\n    // Rich token\r\n    Token public richToken;\r\n\r\n    /**\r\n     * Throw if at stage other than current stage\r\n     *\r\n     * @param _stage expected stage to test for\r\n     */\r\n    modifier atStage(Stages _stage) {\r\n        updateState();\r\n\r\n        if (stage != _stage && _stage != Stages.Ico) {\r\n            throw;\r\n        }\r\n\r\n        if (stage != Stages.PriorityIco && stage != Stages.OpenIco && stage != Stages.PreIco) {\r\n            throw;\r\n        }\r\n        _;\r\n    }\r\n\r\n\r\n    /**\r\n     * Throw if sender is not creator\r\n     */\r\n    modifier onlyCreator() {\r\n        if (creator != msg.sender) {\r\n            throw;\r\n        }\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * Get bonus for provided ICO number\r\n     *\r\n     * @param _currentIco current ico number\r\n     * @return percentage\r\n     */\r\n    function getPercentageBonusForIco(uint256 _currentIco) returns (uint256 percentage) {\r\n        updateState();\r\n\r\n        if (stage == Stages.PreIco) {\r\n            return bonusPreIco;\r\n        }\r\n\r\n        if (_currentIco == 1) {\r\n            return bonusFirstIco;\r\n        }\r\n\r\n        if (_currentIco == 2) {\r\n            return bonusSecondIco;\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * Get ethereum balance of `_investor`\r\n     *\r\n     * @param _investor The address from which the balance will be retrieved\r\n     * @return The balance\r\n     */\r\n    function balanceOf(address _investor) constant returns (uint256 balance) {\r\n        return balances[_investor];\r\n    }\r\n\r\n    /**\r\n     * Construct\r\n     *\r\n     * @param _tokenAddress The address of the Rich token contact\r\n     * @param _creator Contract creator\r\n     * @param _start Start of the first ICO\r\n     * @param _preIcoStart Start of pre-ICO\r\n     */\r\n    function RICHCrowdsale(address _tokenAddress, address _creator, uint256 _start, uint256 _preIcoStart) {\r\n        richToken = Token(_tokenAddress);\r\n        creator = _creator;\r\n        start = _start;\r\n        preIcoStart = _preIcoStart;\r\n    }\r\n\r\n    /**\r\n     * Set current market rate ETH/RICH. Will be caled by creator before each ICO\r\n     *\r\n     * @param _currentMarketRate current ETH/RICH rate at the market\r\n     */\r\n    function setCurrentMarketRate(uint256 _currentMarketRate) onlyCreator returns (uint256) {\r\n        currentMarketRate = _currentMarketRate;\r\n    }\r\n\r\n    /**\r\n     * Set minimum ICO rate (ETH/dollar) in order to achieve max price of 1$ for 1 RCH.\r\n     * Will be called by creator before each ICO\r\n     *\r\n     * @param _minimumIcoRate current ETH/dollar rate at the market\r\n     */\r\n    function setMinimumIcoRate(uint256 _minimumIcoRate) onlyCreator returns (uint256) {\r\n        minimumIcoRate = _minimumIcoRate;\r\n    }\r\n\r\n    /**\r\n     * Set humanity fund address\r\n     *\r\n     * @param _humanityFund Humanity fund address\r\n     */\r\n    function setHumanityFund(address _humanityFund) onlyCreator {\r\n        humanityFund = _humanityFund;\r\n    }\r\n\r\n    /**\r\n     * Set buy back fund address\r\n     *\r\n     * @param _buyBackFund Bay back fund address\r\n     */\r\n    function setBuyBackFund(address _buyBackFund) onlyCreator {\r\n        buyBackFund = _buyBackFund;\r\n    }\r\n\r\n    /**\r\n     * Get current rate at which will be issued tokens\r\n     *\r\n     * @return rate How many tokens will be issued for one ETH\r\n     */\r\n    function getRate() returns (uint256 rate) {\r\n        if (currentMarketRate * 12 / 10 < minimumIcoRate) {\r\n            return minimumIcoRate;\r\n        }\r\n\r\n        return currentMarketRate * 12 / 10;\r\n    }\r\n\r\n    /**\r\n     * Retrun pecentage of tokens owned by provided investor\r\n     *\r\n     * @param _investor address of investor\r\n     * @param exeptInIco ICO number that will be excluded from calculation (usually current ICO number)\r\n     * @return investor rate, 1000000 = 100%\r\n     */\r\n    function getInvestorTokenPercentage(address _investor, uint256 exeptInIco) returns (uint256 percentage) {\r\n        uint256 deductionInvestor = 0;\r\n        uint256 deductionIco = 0;\r\n\r\n        if (exeptInIco >= 0) {\r\n            deductionInvestor = tokenBalancesPerIco[_investor][exeptInIco];\r\n            deductionIco = icoTokenIssued[exeptInIco];\r\n        }\r\n\r\n        if (totalTokenIssued - deductionIco == 0) {\r\n            return 0;\r\n        }\r\n\r\n        return 1000000 * (tokenBalances[_investor] - deductionInvestor) / (totalTokenIssued - deductionIco);\r\n    }\r\n\r\n    /**\r\n     * Convert `_wei` to an amount in RICH using\r\n     * the current rate\r\n     *\r\n     * @param _wei amount of wei to convert\r\n     * @return The amount in RICH\r\n     */\r\n    function toRICH(uint256 _wei) returns (uint256 amount) {\r\n        uint256 rate = getRate();\r\n\r\n        return _wei * rate * 10**8 / 1 ether; // 10**8 for 8 decimals\r\n    }\r\n\r\n    /**\r\n     * Return ICO number (PreIco has index 0)\r\n     *\r\n     * @return ICO number\r\n     */\r\n    function getCurrentIcoNumber() returns (uint256 amount) {\r\n        uint256 timeBehind = now - start;\r\n        if (now < start) {\r\n            return 0;\r\n        }\r\n\r\n        return 1 + ((timeBehind - (timeBehind % (icoPeriod + noIcoPeriod))) / (icoPeriod + noIcoPeriod));\r\n    }\r\n\r\n    /**\r\n     * Update crowd sale stage based on current time and ICO periods\r\n     */\r\n    function updateState() {\r\n        uint256 timeBehind = now - start;\r\n        uint256 currentIcoNumber = getCurrentIcoNumber();\r\n\r\n        if (icoTokenIssued[currentIcoNumber] >= maxIssuedTokensPerIco) {\r\n            stage = Stages.NoIco;\r\n            return;\r\n        }\r\n\r\n        if (totalTokenIssued >= maxTotalSupply) {\r\n            stage = Stages.Ended;\r\n            return;\r\n        }\r\n\r\n        if (now >= preIcoStart && now <= preIcoStart + preIcoPeriod) {\r\n            stage = Stages.PreIco;\r\n            return;\r\n        }\r\n\r\n        if (now < start) {\r\n            stage = Stages.Countdown;\r\n            return;\r\n        }\r\n\r\n        uint256 timeFromIcoStart = timeBehind - (currentIcoNumber - 1) * (icoPeriod + noIcoPeriod);\r\n\r\n        if (timeFromIcoStart > icoPeriod) {\r\n            stage = Stages.NoIco;\r\n            return;\r\n        }\r\n\r\n        if (timeFromIcoStart > icoPeriod / 2) {\r\n            stage = Stages.OpenIco;\r\n            return;\r\n        }\r\n\r\n        stage = Stages.PriorityIco;\r\n    }\r\n\r\n\r\n    /**\r\n     * Transfer appropriate percentage of raised amount to the company address and humanity and buy back fund\r\n     */\r\n    function withdraw() onlyCreator {\r\n        uint256 ethBalance = this.balance;\r\n        uint256 amountToSend = ethBalance - 100000000;\r\n\r\n        if (creatorWithdraw < maxCreatorWithdraw) {\r\n            if (amountToSend > maxCreatorWithdraw - creatorWithdraw) {\r\n                amountToSend = maxCreatorWithdraw - creatorWithdraw;\r\n            }\r\n\r\n            if (!creator.send(amountToSend)) {\r\n                throw;\r\n            }\r\n\r\n            creatorWithdraw += amountToSend;\r\n            return;\r\n        }\r\n\r\n        uint256 ethForHumanityFund = amountToSend * percentageHumanityFund / 100;\r\n        uint256 ethForBuyBackFund = amountToSend * percentageBuyBackFund / 100;\r\n\r\n        if (!humanityFund.send(ethForHumanityFund)) {\r\n            throw;\r\n        }\r\n\r\n        if (!buyBackFund.send(ethForBuyBackFund)) {\r\n            throw;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Add additional bonus tokens for subscribed investors\r\n     *\r\n     * @param investorAddress Address of investor\r\n     */\r\n    function sendSubscriptionBonus(address investorAddress) onlyCreator {\r\n        uint256 subscriptionBonus = tokenBalances[investorAddress] * bonusSubscription / 100;\r\n\r\n        if (subsriptionBonusTokensIssued[investorAddress] < subscriptionBonus) {\r\n            uint256 toBeIssued = subscriptionBonus - subsriptionBonusTokensIssued[investorAddress];\r\n            if (!richToken.issue(investorAddress, toBeIssued)) {\r\n                throw;\r\n            }\r\n\r\n            subsriptionBonusTokensIssued[investorAddress] += toBeIssued;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Receives Eth and issue RICH tokens to the sender\r\n     */\r\n    function () payable atStage(Stages.Ico) {\r\n        uint256 receivedEth = msg.value;\r\n\r\n        if (receivedEth < minAcceptedEthAmount) {\r\n            throw;\r\n        }\r\n\r\n        uint256 tokensToBeIssued = toRICH(receivedEth);\r\n        uint256 currentIco = getCurrentIcoNumber();\r\n\r\n        //add bonus\r\n        tokensToBeIssued = tokensToBeIssued + (tokensToBeIssued * getPercentageBonusForIco(currentIco) / 100);\r\n\r\n        if (tokensToBeIssued == 0 || icoTokenIssued[currentIco] + tokensToBeIssued > maxIssuedTokensPerIco) {\r\n            throw;\r\n        }\r\n\r\n        if (stage == Stages.PriorityIco) {\r\n            uint256 alreadyBoughtInIco = tokenBalancesPerIco[msg.sender][currentIco];\r\n            uint256 canBuyTokensInThisIco = maxIssuedTokensPerIco * getInvestorTokenPercentage(msg.sender, currentIco) / 1000000;\r\n\r\n            if (tokensToBeIssued > canBuyTokensInThisIco - alreadyBoughtInIco) {\r\n                throw;\r\n            }\r\n        }\r\n\r\n        if (!richToken.issue(msg.sender, tokensToBeIssued)) {\r\n            throw;\r\n        }\r\n\r\n        icoTokenIssued[currentIco] += tokensToBeIssued;\r\n        totalTokenIssued += tokensToBeIssued;\r\n        balances[msg.sender] += receivedEth;\r\n        tokenBalances[msg.sender] += tokensToBeIssued;\r\n        tokenBalancesPerIco[msg.sender][currentIco] += tokensToBeIssued;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxIssuedTokensPerIco\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"updateState\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getCurrentIcoNumber\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxTotalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minimumIcoRate\",\"type\":\"uint256\"}],\"name\":\"setMinimumIcoRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preIcoStart\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preIcoPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusSecondIco\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimumIcoRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxCreatorWithdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalTokenIssued\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"humanityFund\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"creatorWithdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getRate\",\"outputs\":[{\"name\":\"rate\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"percentageBuyBackFund\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wei\",\"type\":\"uint256\"}],\"name\":\"toRICH\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusPreIco\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_investor\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"richToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentMarketRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"investorAddress\",\"type\":\"address\"}],\"name\":\"sendSubscriptionBonus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"noIcoPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_currentIco\",\"type\":\"uint256\"}],\"name\":\"getPercentageBonusForIco\",\"outputs\":[{\"name\":\"percentage\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"start\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_currentMarketRate\",\"type\":\"uint256\"}],\"name\":\"setCurrentMarketRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_humanityFund\",\"type\":\"address\"}],\"name\":\"setHumanityFund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyBackFund\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"percentageHumanityFund\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusFirstIco\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_investor\",\"type\":\"address\"},{\"name\":\"exeptInIco\",\"type\":\"uint256\"}],\"name\":\"getInvestorTokenPercentage\",\"outputs\":[{\"name\":\"percentage\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minAcceptedEthAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusSubscription\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_buyBackFund\",\"type\":\"address\"}],\"name\":\"setBuyBackFund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_creator\",\"type\":\"address\"},{\"name\":\"_start\",\"type\":\"uint256\"},{\"name\":\"_preIcoStart\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"RICHCrowdsale","CompilerVersion":"v0.4.16+commit.d7661dd9","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000af12b1b76202fdfd9e584e2e4e230250e8eb84940000000000000000000000008a2b4d371173382900cd8ef5897a4ec1dc362d2b0000000000000000000000000000000000000000000000000000000059e331a00000000000000000000000000000000000000000000000000000000059bba4a0","Library":"","SwarmSource":"bzzr://64f9c002fb4adb7e8e863b75716c85ebdc68cf7b92d03b4ffad65b209faa3b3e"}]}