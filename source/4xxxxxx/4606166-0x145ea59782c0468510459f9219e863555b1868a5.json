{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13;\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract RefundVault is Ownable {\r\n  using SafeMath for uint256;\r\n\r\n  enum State { Active, Refunding, Closed }\r\n\r\n  mapping (address => uint256) public deposited;\r\n  address public wallet;\r\n  State public state;\r\n\r\n  event Closed();\r\n  event RefundsEnabled();\r\n  event Refunded(address indexed beneficiary, uint256 weiAmount);\r\n\r\n  function RefundVault(address _wallet) {\r\n    require(_wallet != 0x0);\r\n    wallet = _wallet;\r\n    state = State.Active;\r\n  }\r\n\r\n  function deposit(address investor) onlyOwner public payable {\r\n    require(state == State.Active);\r\n    deposited[investor] = deposited[investor].add(msg.value);\r\n  }\r\n\r\n  function close() onlyOwner public {\r\n    require(state == State.Active);\r\n    state = State.Closed;\r\n    Closed();\r\n    wallet.transfer(this.balance);\r\n  }\r\n\r\n  function enableRefunds() onlyOwner public {\r\n    require(state == State.Active);\r\n    state = State.Refunding;\r\n    RefundsEnabled();\r\n  }\r\n\r\n  function refund(address investor) public {\r\n    require(state == State.Refunding);\r\n    uint256 depositedValue = deposited[investor];\r\n    deposited[investor] = 0;\r\n    investor.transfer(depositedValue);\r\n    Refunded(investor, depositedValue);\r\n  }\r\n}\r\n\r\ncontract Crowdsale {\r\n  using SafeMath for uint256;\r\n\r\n  // The token being sold\r\n  MintableToken public token;\r\n\r\n  // start and end timestamps where investments are allowed (both inclusive)\r\n  uint256 public startTime;\r\n  uint256 public endTime;\r\n\r\n  // address where funds are collected\r\n  address public wallet;\r\n\r\n  // how many token units a buyer gets per wei\r\n  uint256 public rate;\r\n\r\n  // amount of raised money in wei\r\n  uint256 public weiRaised;\r\n\r\n  /**\r\n   * event for token purchase logging\r\n   * @param purchaser who paid for the tokens\r\n   * @param beneficiary who got the tokens\r\n   * @param value weis paid for purchase\r\n   * @param amount amount of tokens purchased\r\n   */\r\n  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n\r\n\r\n  function Crowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet) {\r\n    require(_startTime >= now);\r\n    require(_endTime >= _startTime);\r\n    require(_rate > 0);\r\n    require(_wallet != 0x0);\r\n\r\n    token = createTokenContract();\r\n    startTime = _startTime;\r\n    endTime = _endTime;\r\n    rate = _rate;\r\n    wallet = _wallet;\r\n  }\r\n\r\n  // creates the token to be sold.\r\n  // override this method to have crowdsale of a specific mintable token.\r\n  function createTokenContract() internal returns (MintableToken) {\r\n    return new MintableToken();\r\n  }\r\n\r\n\r\n  // fallback function can be used to buy tokens\r\n  function () payable {\r\n    buyTokens(msg.sender);\r\n  }\r\n\r\n  // low level token purchase function\r\n  function buyTokens(address beneficiary) public payable {\r\n    require(beneficiary != 0x0);\r\n    require(validPurchase());\r\n\r\n    uint256 weiAmount = msg.value;\r\n\r\n    // calculate token amount to be created\r\n    uint256 tokens = weiAmount.mul(rate);\r\n\r\n    // update state\r\n    weiRaised = weiRaised.add(weiAmount);\r\n\r\n    token.mint(beneficiary, tokens);\r\n    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\r\n\r\n    forwardFunds();\r\n  }\r\n\r\n  // send ether to the fund collection wallet\r\n  // override to create custom fund forwarding mechanisms\r\n  function forwardFunds() internal {\r\n    wallet.transfer(msg.value);\r\n  }\r\n\r\n  // @return true if the transaction can buy tokens\r\n  function validPurchase() internal constant returns (bool) {\r\n    bool withinPeriod = now >= startTime && now <= endTime;\r\n    bool nonZeroPurchase = msg.value != 0;\r\n    return withinPeriod && nonZeroPurchase;\r\n  }\r\n\r\n  // @return true if crowdsale event has ended\r\n  function hasEnded() public constant returns (bool) {\r\n    return now > endTime;\r\n  }\r\n\r\n\r\n}\r\n\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    Unpause();\r\n  }\r\n}\r\n\r\ncontract CappedCrowdsale is Crowdsale {\r\n  using SafeMath for uint256;\r\n\r\n  uint256 public cap;\r\n\r\n  function CappedCrowdsale(uint256 _cap) {\r\n    require(_cap > 0);\r\n    cap = _cap;\r\n  }\r\n\r\n  // overriding Crowdsale#validPurchase to add extra cap logic\r\n  // @return true if investors can buy at the moment\r\n  function validPurchase() internal constant returns (bool) {\r\n    bool withinCap = weiRaised.add(msg.value) <= cap;\r\n    return super.validPurchase() && withinCap;\r\n  }\r\n\r\n  // overriding Crowdsale#hasEnded to add cap logic\r\n  // @return true if crowdsale event has ended\r\n  function hasEnded() public constant returns (bool) {\r\n    bool capReached = weiRaised >= cap;\r\n    return super.hasEnded() || capReached;\r\n  }\r\n\r\n}\r\n\r\ncontract FinalizableCrowdsale is Crowdsale, Ownable {\r\n  using SafeMath for uint256;\r\n\r\n  bool public isFinalized = false;\r\n\r\n  event Finalized();\r\n\r\n  /**\r\n   * @dev Must be called after crowdsale ends, to do some extra finalization\r\n   * work. Calls the contract's finalization function.\r\n   */\r\n  function finalize() onlyOwner public {\r\n    require(!isFinalized);\r\n    require(hasEnded());\r\n\r\n    finalization();\r\n    Finalized();\r\n\r\n    isFinalized = true;\r\n  }\r\n\r\n  /**\r\n   * @dev Can be overridden to add finalization logic. The overriding function\r\n   * should call super.finalization() to ensure the chain of finalization is\r\n   * executed entirely.\r\n   */\r\n  function finalization() internal {\r\n  }\r\n}\r\n\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public constant returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract RefundableCrowdsale is FinalizableCrowdsale {\r\n  using SafeMath for uint256;\r\n\r\n  // minimum amount of funds to be raised in weis\r\n  uint256 public goal;\r\n\r\n  // refund vault used to hold funds while crowdsale is running\r\n  RefundVault public vault;\r\n\r\n  function RefundableCrowdsale(uint256 _goal) {\r\n    require(_goal > 0);\r\n    vault = new RefundVault(wallet);\r\n    goal = _goal;\r\n  }\r\n\r\n  // We're overriding the fund forwarding from Crowdsale.\r\n  // In addition to sending the funds, we want to call\r\n  // the RefundVault deposit function\r\n  function forwardFunds() internal {\r\n    vault.deposit.value(msg.value)(msg.sender);\r\n  }\r\n\r\n  // if crowdsale is unsuccessful, investors can claim refunds here\r\n  function claimRefund() public {\r\n    require(isFinalized);\r\n    require(!goalReached());\r\n\r\n    vault.refund(msg.sender);\r\n  }\r\n\r\n  // vault finalization task, called when owner calls finalize()\r\n  function finalization() internal {\r\n    if (goalReached()) {\r\n      vault.close();\r\n    } else {\r\n      vault.enableRefunds();\r\n    }\r\n\r\n    super.finalization();\r\n  }\r\n\r\n  function goalReached() public constant returns (bool) {\r\n    return weiRaised >= goal;\r\n  }\r\n\r\n}\r\n\r\ncontract ZakemFansCrowdsale is Pausable, RefundableCrowdsale, CappedCrowdsale {\r\n        /**\r\n           Address of the wallet of the founders.\r\n           In this wallet, part of the facilitating tokens will be stored, and they will be locked for 24 months.\r\n         */\r\n        address public foundersWallet;\r\n\r\n        /**\r\n           Address of the wallet used to pay out bounties.\r\n           In this wallet, part of the facilitating tokens will be stored.\r\n         */\r\n        address public bountiesWallet;\r\n\r\n        /**\r\n           Keeps track of how many tokens have been raised so far.\r\n           Used to know when `goal` and `cap` have been reached.\r\n         */\r\n        uint256 public purchasedTokensRaised;\r\n\r\n        /**\r\n           The amount of tokens that were sold in the Presale before the Crowdsale.\r\n           Given during construction of this contract.\r\n         */\r\n        uint256 public purchasedTokensRaisedDuringPresale;\r\n\r\n        /**\r\n           Helper property to ensure that 1/12 of `cap` does not need to be re-calculated every time.\r\n         */\r\n        uint256 oneTwelfthOfCap;\r\n\r\n        /**\r\n           @dev Constructor of the ZakemFansCrowdsale contract\r\n\r\n           @param _startTime time (Solidity UNIX timestamp) from when it is allowed to buy FINC.\r\n           @param _endTime time (Solidity UNIX timestamp) until which it is allowed to buy FINC. (Should be larger than startTime)\r\n           @param _rate Number of tokens created per ether. (Since Ether and ZakemCoin use the same number of decimal places, this can be read as direct conversion rate of Ether -> ZakemCoin.)\r\n           @param _wallet The wallet of ZakemFans itself, to which some of the facilitating tokens will be sent.\r\n           @param _bountiesWallet The wallet used to pay out bounties, to which some of the facilitating tokens will be sent.\r\n           @param _foundersWallet The wallet used for the founders, to which some of the facilitating tokens will be sent.\r\n           @param _goal The minimum goal (in 1 * 10^(-18) tokens) that the Crowdsale needs to reach.\r\n           @param _cap The maximum cap (in 1 * 10^(-18) tokens) that the Crowdsale can reach.\r\n           @param _token The address where the ZakemCoin contract was deployed prior to creating this contract.\r\n           @param _purchasedTokensRaisedDuringPresale The amount (in 1 * 18^18 tokens) that was purchased during the presale.\r\n         */\r\n        function ZakemFansCrowdsale (\r\n                uint256 _startTime,\r\n                uint256 _endTime,\r\n                uint256 _rate,\r\n                address _wallet,\r\n                address _bountiesWallet,\r\n                address _foundersWallet,\r\n                uint256 _goal,\r\n                uint256 _cap,\r\n                address _token,\r\n                uint256 _purchasedTokensRaisedDuringPresale\r\n                )\r\n                Crowdsale(_startTime, _endTime, _rate, _wallet)\r\n                RefundableCrowdsale(_goal)\r\n                CappedCrowdsale(_cap)\r\n        {\r\n                require(_goal < _cap);\r\n\r\n                bountiesWallet = _bountiesWallet;\r\n                foundersWallet = _foundersWallet;\r\n                token = ZakemCoin(_token);\r\n                weiRaised = 0;\r\n\r\n                purchasedTokensRaisedDuringPresale = _purchasedTokensRaisedDuringPresale;\r\n                purchasedTokensRaised = purchasedTokensRaisedDuringPresale;\r\n\r\n                oneTwelfthOfCap = _cap / 12;\r\n        }\r\n\r\n        /*\r\n          Overrides Crowdsale.createTokenContract,\r\n          because the ZakemFansCrowdsale uses an already-deployed\r\n          token, so there is no need to internally deploy a contract.\r\n        */\r\n        function createTokenContract() internal returns (MintableToken) {\r\n                return MintableToken(0x0);\r\n        }\r\n\r\n        /*\r\n         * Overrides version of Crowdsale.buyTokens because:\r\n         * - The Wei->FFC rate depends on how many tokens have already been sold (see `currentBonusRate()`).\r\n         * - Also mint tokens sent to ZakemFans and the Founders at the same time.\r\n         */\r\n        function buyTokens(address beneficiary) public payable whenNotPaused {\r\n                require(beneficiary != 0x0);\r\n\r\n                uint256 weiAmount = msg.value;\r\n\r\n                // calculate token amount to be created\r\n                uint256 purchasedTokens = weiAmount.div(rate);\r\n                require(validPurchase(purchasedTokens));\r\n                purchasedTokens = purchasedTokens.mul(currentBonusRate()).div(100);\r\n                require(purchasedTokens != 0);\r\n\r\n                // update state\r\n                weiRaised = weiRaised.add(weiAmount);\r\n                purchasedTokensRaised = purchasedTokensRaised.add(purchasedTokens);\r\n\r\n                // Mint tokens for beneficiary\r\n                token.mint(beneficiary, purchasedTokens);\r\n                TokenPurchase(msg.sender, beneficiary, weiAmount, purchasedTokens);\r\n\r\n                mintTokensForFacilitators(purchasedTokens);\r\n\r\n                forwardFunds();\r\n        }\r\n\r\n        /* Overrides RefundableCrowdsale#goalReached\r\n           since we count the goal in purchased tokens, instead of in Wei.\r\n           @return true if crowdsale has reached more funds than the minimum goal.\r\n        */\r\n        function goalReached() public constant returns (bool) {\r\n                return purchasedTokensRaised >= goal;\r\n        }\r\n\r\n        /**\r\n           Overrides CappedCrowdsale#hasEnded to add cap logic in tokens\r\n           @return true if crowdsale event has ended\r\n        */\r\n        function hasEnded() public constant returns (bool) {\r\n                bool capReached = purchasedTokensRaised >= cap;\r\n                return Crowdsale.hasEnded() || capReached;\r\n        }\r\n\r\n        /**\r\n           replaces CappedCrowdsale#validPurchase to add extra cap logic in tokens\r\n           @param purchasedTokens Amount of tokens that were purchased (in the smallest, 1 * 10^(-18) denomination)\r\n           @return true if investors are allowed to purchase tokens at the moment.\r\n        */\r\n        function validPurchase(uint256 purchasedTokens) internal constant returns (bool) {\r\n                /* bool withinCap = purchasedTokensRaised.add(purchasedTokens) <= cap; */\r\n                /* return Crowdsale.validPurchase() && withinCap; */\r\n                bool withinCap = purchasedTokensRaised.add(purchasedTokens) <= cap;\r\n                return Crowdsale.validPurchase() && withinCap;\r\n        }\r\n\r\n        /**\r\n           @dev Mints the tokens for the facilitating parties.\r\n\r\n           @dev In total, (20/13) * `purchasedTokens` tokens are created.\r\n           @dev 13/13th of these are for the Beneficiary.\r\n           @dev 7/13th of these are minted for the Facilitators as follows:\r\n           @dev   1/13th -> Founders\r\n           @dev   2/13th -> Bounties\r\n           @dev   4/13th -> ZakemFans\r\n\r\n           @dev Note that all result rational amounts are floored since the EVM only works with integer arithmetic.\r\n        */\r\n        function mintTokensForFacilitators(uint256 purchasedTokens) internal {\r\n                // Mint tokens for ZakemFans and Founders\r\n                uint256 fintechfans_tokens = purchasedTokens.mul(4).div(13);\r\n                uint256 bounties_tokens = purchasedTokens.mul(2).div(13);\r\n                uint256 founders_tokens = purchasedTokens.mul(1).div(13);\r\n                token.mint(wallet, fintechfans_tokens);\r\n                token.mint(bountiesWallet, bounties_tokens);\r\n                token.mint(foundersWallet, founders_tokens);/* TODO Locked vault? */\r\n        }\r\n\r\n        /**\r\n           @dev returns the current bonus rate. This is a call that can be done at any time.\r\n\r\n           @return a fixed-size number that is the total percentage of tokens that will be created. (100 * the bonus ratio)\r\n\r\n           @dev When < 2 million tokens purchased, this will be 125%, which is equivalent to a 20% discount\r\n           @dev When < 4 million tokens purchased, 118%, which is equivalent to a 15% discount.\r\n           @dev When < 6 million tokens purchased, 111%, which is equivalent to a 10% discount.\r\n           @dev When < 9 million tokens purchased, 105%, which is equivalent to a 5% discount.\r\n           @dev Otherwise, there is no bonus and the function returns 100%.\r\n        */\r\n        function currentBonusRate() public constant returns (uint) {\r\n                if(purchasedTokensRaised < (2 * oneTwelfthOfCap)) return 125/*.25*/; // 20% discount\r\n                if(purchasedTokensRaised < (4 * oneTwelfthOfCap)) return 118/*.1764705882352942*/; // 15% discount\r\n                if(purchasedTokensRaised < (6 * oneTwelfthOfCap)) return 111/*.1111111111111112*/; // 10% discount\r\n                if(purchasedTokensRaised < (9 * oneTwelfthOfCap)) return 105/*.0526315789473684*/; // 5% discount\r\n                return 100;\r\n        }\r\n}\r\n\r\ncontract TheZakemFansCrowdsale is ZakemFansCrowdsale {\r\n    function TheZakemFansCrowdsale()\r\n        ZakemFansCrowdsale(\r\n            1511380200, // _startTime time (Solidity UNIX timestamp) from when it is allowed to buy FINC.\r\n            1511384400, // _endTime time (Solidity UNIX timestamp) until which it is allowed to buy FINC. (Should be larger than startTime)\r\n            2, // _rate Number of tokens created per ether. (Since Ether and ZakemCoin use the same number of decimal places, this can be read as direct conversion rate of Ether -> ZakemCoin.)\r\n            0xd5D29f18B8C2C7157B6BF38111C9318b9604BdED, // _wallet The wallet of ZakemFans itself, to which some of the facilitating tokens will be sent.\r\n            0x6B1964119841f3f5363D7EA08120642FE487410E, // _bountiesWallet The wallet used to pay out bounties, to which some of the facilitating tokens will be sent.\r\n            0x9a123fDd708eD0931Fb4938C5b2E2462B6D23390, // _foundersWallet The wallet used for the founders, to which some of the facilitating tokens will be sent.\r\n            1e16, // _goal The minimum goal (in 1 * 10^(-18) tokens) that the Crowdsale needs to reach.\r\n            12e16, // _cap The maximum cap (in 1 * 10^(-18) tokens) that the Crowdsale can reach.\r\n            0xaaC5b7048114d70b759E9EA17AFA4Ff969931a4a, // _token The address where the ZakemCoin contract was deployed prior to creating this contract.\r\n            0  // _purchasedTokensRaisedDuringPresale The amount (in 1 * 18^18 tokens) that was purchased during the presale.\r\n            )\r\n    {\r\n    }\r\n}\r\n\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n\r\n    uint256 _allowance = allowed[_from][msg.sender];\r\n\r\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n    // require (_value <= _allowance);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   */\r\n  function increaseApproval (address _spender, uint _addedValue)\r\n    returns (bool success) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  function decreaseApproval (address _spender, uint _subtractedValue)\r\n    returns (bool success) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\ncontract MintableToken is StandardToken, Ownable {\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\r\n    totalSupply = totalSupply.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    Mint(_to, _amount);\r\n    Transfer(0x0, _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() onlyOwner public returns (bool) {\r\n    mintingFinished = true;\r\n    MintFinished();\r\n    return true;\r\n  }\r\n}\r\n\r\ncontract BurnableToken is StandardToken {\r\n\r\n    event Burn(address indexed burner, uint256 value);\r\n\r\n    /**\r\n     * @dev Burns a specific amount of tokens.\r\n     * @param _value The amount of token to be burned.\r\n     */\r\n    function burn(uint256 _value) public {\r\n        require(_value > 0);\r\n\r\n        address burner = msg.sender;\r\n        balances[burner] = balances[burner].sub(_value);\r\n        totalSupply = totalSupply.sub(_value);\r\n        Burn(burner, _value);\r\n    }\r\n}\r\n\r\ncontract ApprovedBurnableToken is BurnableToken {\r\n\r\n        /**\r\n           Sent when `burner` burns some `value` of `owners` tokens.\r\n        */\r\n        event BurnFrom(address indexed owner, // The address whose tokens were burned.\r\n                       address indexed burner, // The address that executed the `burnFrom` call\r\n                       uint256 value           // The amount of tokens that were burned.\r\n                );\r\n\r\n        /**\r\n           @dev Burns a specific amount of tokens of another account that `msg.sender`\r\n           was approved to burn tokens for using `approveBurn` earlier.\r\n           @param _owner The address to burn tokens from.\r\n           @param _value The amount of token to be burned.\r\n        */\r\n        function burnFrom(address _owner, uint256 _value) public {\r\n                require(_value > 0);\r\n                require(_value <= balances[_owner]);\r\n                require(_value <= allowed[_owner][msg.sender]);\r\n                // no need to require value <= totalSupply, since that would imply the\r\n                // sender's balance is greater than the totalSupply, which *should* be an assertion failure\r\n\r\n                address burner = msg.sender;\r\n                balances[_owner] = balances[_owner].sub(_value);\r\n                allowed[_owner][burner] = allowed[_owner][burner].sub(_value);\r\n                totalSupply = totalSupply.sub(_value);\r\n\r\n                BurnFrom(_owner, burner, _value);\r\n                Burn(_owner, _value);\r\n        }\r\n}\r\n\r\ncontract UnlockedAfterMintingToken is MintableToken {\r\n\r\n    /**\r\n       Ensures certain calls can only be made when minting is finished.\r\n\r\n       The calls that are restricted are any calls that allow direct or indirect transferral of funds.\r\n     */\r\n    modifier whenMintingFinished() {\r\n        require(mintingFinished);\r\n        _;\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public whenMintingFinished returns (bool) {\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n    /**\r\n      @dev Transfer tokens from one address to another\r\n      @param _from address The address which you want to send tokens from\r\n      @param _to address The address which you want to transfer to\r\n      @param _value uint256 the amount of tokens to be transferred\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) public whenMintingFinished returns (bool) {\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n    /**\r\n      @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n      @dev NOTE: This call is considered deprecated, and only included for proper compliance with ERC20.\r\n      @dev Rather than use this call, use `increaseApproval` and `decreaseApproval` instead, whenever possible.\r\n      @dev The reason for this, is that using `approve` directly when your allowance is nonzero results in an exploitable situation:\r\n      @dev https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n\r\n      @param _spender The address which will spend the funds.\r\n      @param _value The amount of tokens to be spent.\r\n     */\r\n    function approve(address _spender, uint256 _value) public whenMintingFinished returns (bool) {\r\n        return super.approve(_spender, _value);\r\n    }\r\n\r\n    /**\r\n      @dev approve should only be called when allowed[_spender] == 0. To alter the\r\n      @dev allowed value it is better to use this function, because it is safer.\r\n      @dev (And making `approve` safe manually would require making two calls made in separate blocks.)\r\n\r\n      This method was adapted from the one in use by the MonolithDAO Token.\r\n     */\r\n    function increaseApproval(address _spender, uint _addedValue) public whenMintingFinished returns (bool success) {\r\n        return super.increaseApproval(_spender, _addedValue);\r\n    }\r\n\r\n    /**\r\n       @dev approve should only be called when allowed[_spender] == 0. To alter the\r\n       @dev allowed value it is better to use this function, because it is safer.\r\n       @dev (And making `approve` safe manually would require making two calls made in separate blocks.)\r\n\r\n       This method was adapted from the one in use by the MonolithDAO Token.\r\n    */\r\n    function decreaseApproval(address _spender, uint _subtractedValue) public whenMintingFinished returns (bool success) {\r\n        return super.decreaseApproval(_spender, _subtractedValue);\r\n    }\r\n\r\n    // TODO Prevent burning?\r\n}\r\n\r\ncontract ZakemCoin is UnlockedAfterMintingToken, ApprovedBurnableToken {\r\n        /**\r\n           @dev We do not expect this to change ever after deployment,\r\n           @dev but it is a way to identify different versions of the ZakemCoin during development.\r\n        */\r\n        uint8 public constant contractVersion = 1;\r\n\r\n        /**\r\n           @dev The name of the ZakemCoin, specified as indicated in ERC20.\r\n         */\r\n        string public constant name = \"ZakemCoin\";\r\n\r\n        /**\r\n           @dev The abbreviation FINC, specified as indicated in ERC20.\r\n        */\r\n        string public constant symbol = \"FINC\";\r\n\r\n        /**\r\n           @dev The smallest denomination of the ZakemCoin is 1 * 10^(-18) FINC. `decimals` is specified as indicated in ERC20.\r\n        */\r\n        uint8 public constant decimals = 18;\r\n\r\n        // TODO extractToken function to allow people to retrieve token-funds sent here by mistake?\r\n\r\n        // TODO ERC223-interface\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractVersion\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"BurnFrom\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"ZakemCoin","CompilerVersion":"v0.4.15+commit.bbb8e64f","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://3c28a11d0c71cea1084feb102ebda53598f0a744be8cc1a4e670fc9bfaf0dd37"}]}