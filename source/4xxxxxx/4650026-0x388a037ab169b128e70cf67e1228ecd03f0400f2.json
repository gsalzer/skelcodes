{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13;\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract SplitPayment {\r\n  using SafeMath for uint256;\r\n\r\n  uint256 public totalShares = 0;\r\n  uint256 public totalReleased = 0;\r\n\r\n  mapping(address => uint256) public shares;\r\n  mapping(address => uint256) public released;\r\n  address[] public payees;\r\n\r\n  /**\r\n   * @dev Constructor\r\n   */\r\n  function SplitPayment(address[] _payees, uint256[] _shares) public {\r\n    require(_payees.length == _shares.length);\r\n\r\n    for (uint256 i = 0; i < _payees.length; i++) {\r\n      addPayee(_payees[i], _shares[i]);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Add a new payee to the contract.\r\n   * @param _payee The address of the payee to add.\r\n   * @param _shares The number of shares owned by the payee.\r\n   */\r\n  function addPayee(address _payee, uint256 _shares) internal {\r\n    require(_payee != address(0));\r\n    require(_shares > 0);\r\n    require(shares[_payee] == 0);\r\n\r\n    payees.push(_payee);\r\n    shares[_payee] = _shares;\r\n    totalShares = totalShares.add(_shares);\r\n  }\r\n\r\n  /**\r\n   * @dev Claim your share of the balance.\r\n   */\r\n  function claim() public {\r\n    address payee = msg.sender;\r\n\r\n    require(shares[payee] > 0);\r\n\r\n    uint256 totalReceived = this.balance.add(totalReleased);\r\n    uint256 payment = totalReceived.mul(shares[payee]).div(totalShares).sub(released[payee]);\r\n\r\n    require(payment != 0);\r\n    require(this.balance >= payment);\r\n\r\n    released[payee] = released[payee].add(payment);\r\n    totalReleased = totalReleased.add(payment);\r\n\r\n    payee.transfer(payment);\r\n  }\r\n}\r\n\r\ncontract DonationSplitter is SplitPayment {\r\n    function DonationSplitter (address[] _payees, uint256[] _shares)\r\n        SplitPayment(_payees, _shares)\r\n        public\r\n    {\r\n\r\n    }\r\n\r\n    // accept ether\r\n    function () public payable {}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"totalShares\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"payees\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"released\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"shares\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalReleased\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_payees\",\"type\":\"address[]\"},{\"name\":\"_shares\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"DonationSplitter","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000000400000000000000000000000023e0619e5339184cf21ad78a3fede6c4d12bc467000000000000000000000000ef9ab8658f145319e97ce96ecd7b3903b34801280000000000000000000000007cb57b5a97eabe94205c07890be4c1ad31e486a80000000000000000000000009ae80465047dc67876b8f95bd17b187e3a4a482a0000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000003200000000000000000000000000000000000000000000000000000000000000230000000000000000000000000000000000000000000000000000000000000005","Library":"","SwarmSource":"bzzr://e57b776e3fb2bb7fd7c95d22fd36390945048a805809481b62c8e374a1dcb76b"}]}