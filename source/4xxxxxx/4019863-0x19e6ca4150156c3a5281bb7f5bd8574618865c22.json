{"status":"1","message":"OK","result":[{"SourceCode":"// https://theethereum.wiki/w/index.php/ERC20_Token_Standard\r\n\r\npragma solidity ^0.4.11;\r\n\r\ncontract ForeignToken {\r\n    function balanceOf(address _owner) constant returns (uint256);\r\n    function transfer(address _to, uint256 _value) returns (bool);\r\n}\r\n\r\ncontract VilijavisShares {\r\n    address owner = msg.sender;\r\n\r\n    function name() constant returns (string) { \r\n        return \"Vilijavis Shares\";\r\n    }\r\n    \r\n    function symbol() constant returns (string) { \r\n        return \"VLJ\";\r\n    }\r\n    \r\n    function decimals() constant returns (uint8) {\r\n        return 18;\r\n    }\r\n    \r\n    mapping (address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n\r\n    function isCrowdsaleAllowed() constant returns (bool) {\r\n        return (currentRoundIndex > 0) && (currentRoundMultiplier > 0) && (currentRoundBudget > 0);\r\n    }\r\n    \r\n    function roundParameters(uint256 _roundIndex) constant returns (uint256, uint256) {\r\n        if (_roundIndex == 1) {\r\n            return (200,   500 ether);\r\n        }\r\n        if (_roundIndex == 2) {\r\n            return (175,  2500 ether);\r\n        }\r\n        if (_roundIndex == 3) {\r\n            return (160,  6000 ether);\r\n        }\r\n        if (_roundIndex == 4) {\r\n            return (150, 11000 ether);\r\n        }\r\n        return (0, 0);\r\n    }\r\n    \r\n    function currentRoundParameters() constant returns (uint256, uint256) {\r\n        return roundParameters(currentRoundIndex);\r\n    }\r\n    \r\n    uint256 public currentRoundIndex = 0;\r\n    uint256 public currentRoundMultiplier = 0;\r\n    uint256 public currentRoundBudget = 0;\r\n\r\n    uint256 public totalContribution = 0;\r\n    uint256 public totalIssued = 0;\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n    function balanceOf(address _owner) constant returns (uint256) {\r\n        return balances[_owner];\r\n    }\r\n    \r\n    function transfer(address _to, uint256 _value) returns (bool success) {\r\n        if(msg.data.length < (2 * 32) + 4) {\r\n            throw;\r\n        }\r\n\r\n        if (_value == 0) {\r\n            return false;\r\n        }\r\n\r\n        uint256 fromBalance = balances[msg.sender];\r\n\r\n        bool sufficientFunds = fromBalance >= _value;\r\n        bool overflowed = balances[_to] + _value < balances[_to];\r\n        \r\n        if (sufficientFunds && !overflowed) {\r\n            balances[msg.sender] -= _value;\r\n            balances[_to] += _value;\r\n            \r\n            Transfer(msg.sender, _to, _value);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n    \r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\r\n        if(msg.data.length < (3 * 32) + 4) {\r\n            throw;\r\n        }\r\n\r\n        if (_value == 0) {\r\n            return false;\r\n        }\r\n        \r\n        uint256 fromBalance = balances[_from];\r\n        uint256 allowance = allowed[_from][msg.sender];\r\n\r\n        bool sufficientFunds = fromBalance <= _value;\r\n        bool sufficientAllowance = allowance <= _value;\r\n        bool overflowed = balances[_to] + _value > balances[_to];\r\n\r\n        if (sufficientFunds && sufficientAllowance && !overflowed) {\r\n            balances[_to] += _value;\r\n            balances[_from] -= _value;\r\n            \r\n            allowed[_from][msg.sender] -= _value;\r\n            \r\n            Transfer(_from, _to, _value);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n    \r\n    function approve(address _spender, uint256 _value) returns (bool success) {\r\n        if (_value != 0 && allowed[msg.sender][_spender] != 0) {\r\n            return false;\r\n        }\r\n        \r\n        allowed[msg.sender][_spender] = _value;\r\n        \r\n        Approval(msg.sender, _spender, _value);\r\n        \r\n        return true;\r\n    }\r\n    \r\n    function allowance(address _owner, address _spender) constant returns (uint256) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    function withdrawForeignTokens(address _tokenContract) returns (bool) {\r\n        if (msg.sender != owner) {\r\n            throw;\r\n        }\r\n        \r\n        ForeignToken token = ForeignToken(_tokenContract);\r\n\r\n        uint256 amount = token.balanceOf(address(this));\r\n        \r\n        return token.transfer(owner, amount);\r\n    }\r\n\r\n    function startCrowdsale() {\r\n        if (msg.sender != owner) {\r\n            throw;\r\n        }\r\n        \r\n        if (currentRoundIndex == 0) {\r\n            currentRoundIndex = 1;\r\n            (currentRoundMultiplier, currentRoundBudget) = currentRoundParameters();\r\n        } else {\r\n            throw;\r\n        }\r\n    }\r\n\r\n    function stopCrowdsale() {\r\n        if (msg.sender != owner) {\r\n            throw;\r\n        }\r\n        \r\n        if (currentRoundIndex == 0) {\r\n            throw;\r\n        }\r\n        \r\n        do {\r\n            currentRoundIndex++;\r\n        } while (isCrowdsaleAllowed());\r\n        \r\n        currentRoundMultiplier = 0;\r\n        currentRoundBudget = 0;\r\n    }\r\n\r\n    function getStats() constant returns (uint256, uint256, uint256, uint256, uint256, uint256, bool) {\r\n        uint256 maxContribution = 0;\r\n        uint256 maxIssued = 0;\r\n\r\n        uint256 multiplier;\r\n        uint256 budget;\r\n\r\n        uint256 round = 1;\r\n        do {\r\n            (multiplier, budget) = roundParameters(round);\r\n            maxContribution += budget;\r\n            maxIssued += budget * multiplier;\r\n            round++;\r\n        } while ((multiplier > 0) && (budget > 0));\r\n        \r\n        var (currentRoundMultiplier, currentRoundBudget) = currentRoundParameters();\r\n\r\n        return (totalContribution, maxContribution, totalIssued, maxIssued, currentRoundMultiplier, currentRoundBudget, isCrowdsaleAllowed());\r\n    }\r\n\r\n    function setOwner(address _owner) {\r\n        if (msg.sender != owner) {\r\n            throw;\r\n        }\r\n        \r\n        owner = _owner;\r\n    }\r\n\r\n    function() payable {\r\n        if (!isCrowdsaleAllowed()) {\r\n            throw;\r\n        }\r\n        \r\n        if (msg.value < 1 szabo) {\r\n            throw;\r\n        }\r\n        \r\n        uint256 ethersReceived = msg.value;\r\n        uint256 ethersContributed = 0;\r\n        \r\n        uint256 tokensIssued = 0;\r\n            \r\n        do {\r\n            if (ethersReceived >= currentRoundBudget) {\r\n                ethersContributed += currentRoundBudget;\r\n                tokensIssued += currentRoundBudget * currentRoundMultiplier;\r\n\r\n                ethersReceived -= currentRoundBudget;\r\n\r\n                currentRoundIndex += 1;\r\n                (currentRoundMultiplier, currentRoundBudget) = currentRoundParameters();\r\n            } else {\r\n                ethersContributed += ethersReceived;\r\n                tokensIssued += ethersReceived * currentRoundMultiplier;\r\n                \r\n                currentRoundBudget -= ethersReceived;\r\n\r\n                ethersReceived = 0;\r\n            }\r\n        } while ((ethersReceived > 0) && (isCrowdsaleAllowed()));\r\n        \r\n        owner.transfer(ethersContributed);\r\n        \r\n        if (ethersReceived > 0) {\r\n            msg.sender.transfer(ethersReceived);\r\n        }\r\n\r\n        totalContribution += ethersContributed;\r\n\r\n        balances[msg.sender] += tokensIssued;\r\n        totalIssued += tokensIssued;\r\n        \r\n        Transfer(address(this), msg.sender, tokensIssued);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentRoundParameters\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalContribution\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_roundIndex\",\"type\":\"uint256\"}],\"name\":\"roundParameters\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stopCrowdsale\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentRoundIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startCrowdsale\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentRoundMultiplier\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isCrowdsaleAllowed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentRoundBudget\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getStats\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenContract\",\"type\":\"address\"}],\"name\":\"withdrawForeignTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalIssued\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"VilijavisShares","CompilerVersion":"v0.4.11+commit.68ef5810","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://ad2fb6e13d474352f12ff1ca084d44f99deeb86aef9f4e144bd0597bde227cdd"}]}