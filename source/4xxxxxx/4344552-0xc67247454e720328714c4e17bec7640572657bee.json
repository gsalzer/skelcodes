{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.2;\r\ncontract Deed {\r\n    address public owner;\r\n    address public previousOwner;\r\n}\r\ncontract Registry {\r\n    function owner(bytes32 _hash) public constant returns (address);\r\n}\r\ncontract Registrar {\r\n    function transfer(bytes32 _hash, address newOwner) public;\r\n    function entries(bytes32 _hash) public constant returns (uint, Deed, uint, uint, uint);\r\n}\r\ncontract Permissioned {\r\n    mapping(address=>mapping(bytes32=>bool)) internal permissions;\r\n    bytes32 internal constant PERM_SUPERUSER = keccak256(\"_superuser\");\r\n    function Permissioned() public {\r\n        permissions[msg.sender][PERM_SUPERUSER] = true;\r\n    }\r\n    modifier ifPermitted(address addr, bytes32 permission) {\r\n        require(permissions[addr][permission] || permissions[addr][PERM_SUPERUSER]);\r\n        _;\r\n    }\r\n    function isPermitted(address addr, bytes32 permission) public constant returns (bool) {\r\n        return(permissions[addr][permission] || permissions[addr][PERM_SUPERUSER]);\r\n    }\r\n    function setPermission(address addr, bytes32 permission, bool allowed) public ifPermitted(msg.sender, PERM_SUPERUSER) {\r\n        permissions[addr][permission] = allowed;\r\n    }\r\n}\r\ncontract RegistryRef {\r\n    function owner(bytes32 node) public constant returns (address);\r\n}\r\ncontract ReverseRegistrarRef {\r\n    function setName(string name) public returns (bytes32 node);\r\n}\r\ncontract ENSReverseRegister {\r\n    function ENSReverseRegister(address registry, string name) public {\r\n        if (registry != 0) {\r\n            var reverseRegistrar = RegistryRef(registry).owner(0x91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e2);\r\n            if (reverseRegistrar != 0) {\r\n                ReverseRegistrarRef(reverseRegistrar).setName(name);\r\n            }\r\n        }\r\n    }\r\n}\r\ncontract Pausable is Permissioned {\r\n    event Pause();\r\n    event Unpause();\r\n    bool public paused = false;\r\n    bytes32 internal constant PERM_PAUSE = keccak256(\"_pausable\");\r\n    modifier ifNotPaused() {\r\n        require(!paused);\r\n        _;\r\n    }\r\n    modifier ifPaused {\r\n        require(paused);\r\n        _;\r\n    }\r\n    function pause() public ifPermitted(msg.sender, PERM_PAUSE) ifNotPaused returns (bool) {\r\n        paused = true;\r\n        Pause();\r\n        return true;\r\n    }\r\n    function unpause() public ifPermitted(msg.sender, PERM_PAUSE) ifPaused returns (bool) {\r\n        paused = false;\r\n        Unpause();\r\n        return true;\r\n    }\r\n}\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n    function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\ncontract DomainSale is ENSReverseRegister, Pausable {\r\n    using SafeMath for uint256;\r\n    Registrar public registrar;\r\n    mapping (string => Sale) private sales;\r\n    mapping (address => uint256) private balances;\r\n    uint256 private constant AUCTION_DURATION = 24 hours;\r\n    uint256 private constant HIGH_BID_KICKIN = 7 days;\r\n    uint256 private constant NORMAL_BID_INCREASE_PERCENTAGE = 10;\r\n    uint256 private constant HIGH_BID_INCREASE_PERCENTAGE = 50;\r\n    uint256 private constant SELLER_SALE_PERCENTAGE = 90;\r\n    uint256 private constant START_REFERRER_SALE_PERCENTAGE = 5;\r\n    uint256 private constant BID_REFERRER_SALE_PERCENTAGE = 5;\r\n    string private constant CONTRACT_ENS = \"domainsale.eth\";\r\n    bytes32 private constant NAMEHASH_ETH = 0x93cdeb708b7545dc668eb9280176169d1c33cfd8ed6f04690a0bcc88a93fc4ae;\r\n    struct Sale {\r\n        uint256 price;\r\n        uint256 reserve;\r\n        uint256 lastBid;\r\n        address lastBidder;\r\n        uint256 auctionStarted;\r\n        uint256 auctionEnds;\r\n        address startReferrer;\r\n        address bidReferrer;\r\n    }\r\n    event Offer(address indexed seller, string name, uint256 price, uint256 reserve);\r\n    event Bid(address indexed bidder, string name, uint256 bid);\r\n    event Transfer(address indexed seller, address indexed buyer, string name, uint256 value);\r\n    event Cancel(string name);\r\n    event Withdraw(address indexed recipient, uint256 amount);\r\n    modifier onlyNameSeller(string _name) {\r\n        Deed deed;\r\n        (,deed,,,) = registrar.entries(keccak256(_name));\r\n        require(deed.owner() == address(this));\r\n        require(deed.previousOwner() == msg.sender);\r\n        _;\r\n    }\r\n    modifier deedValid(string _name) {\r\n        address deed;\r\n        (,deed,,,) = registrar.entries(keccak256(_name));\r\n        require(deed != 0);\r\n        _;\r\n    }\r\n    modifier auctionNotStarted(string _name) {\r\n        require(sales[_name].auctionStarted == 0);\r\n        _;\r\n    }\r\n    modifier canBid(string _name) {\r\n        require(sales[_name].reserve != 0);\r\n        _;\r\n    }\r\n    modifier canBuy(string _name) {\r\n        require(sales[_name].price != 0);\r\n        _;\r\n    }\r\n    function DomainSale(address _registry) public ENSReverseRegister(_registry, CONTRACT_ENS) {\r\n        registrar = Registrar(Registry(_registry).owner(NAMEHASH_ETH));\r\n    }\r\n    function sale(string _name) public constant returns (uint256, uint256, uint256, address, uint256, uint256) {\r\n        Sale storage s = sales[_name];\r\n        return (s.price, s.reserve, s.lastBid, s.lastBidder, s.auctionStarted, s.auctionEnds);\r\n    }\r\n    function isAuction(string _name) public constant returns (bool) {\r\n        return sales[_name].reserve != 0;\r\n    }\r\n    function isBuyable(string _name) public constant returns (bool) {\r\n        return sales[_name].price != 0 && sales[_name].auctionStarted == 0;\r\n    }\r\n    function auctionStarted(string _name) public constant returns (bool) {\r\n        return sales[_name].lastBid != 0;\r\n    }\r\n    function auctionEnds(string _name) public constant returns (uint256) {\r\n        return sales[_name].auctionEnds;\r\n    }\r\n    function minimumBid(string _name) public constant returns (uint256) {\r\n        Sale storage s = sales[_name];\r\n        if (s.auctionStarted == 0) {\r\n            return s.reserve;\r\n        } else if (s.auctionStarted.add(HIGH_BID_KICKIN) > now) {\r\n            return s.lastBid.add(s.lastBid.mul(NORMAL_BID_INCREASE_PERCENTAGE).div(100));\r\n        } else {\r\n            return s.lastBid.add(s.lastBid.mul(HIGH_BID_INCREASE_PERCENTAGE).div(100));\r\n        }\r\n    }\r\n    function price(string _name) public constant returns (uint256) {\r\n        return sales[_name].price;\r\n    }\r\n    function balance(address addr) public constant returns (uint256) {\r\n        return balances[addr];\r\n    }\r\n    function offer(string _name, uint256 _price, uint256 reserve, address referrer) onlyNameSeller(_name) auctionNotStarted(_name) deedValid(_name) ifNotPaused public {\r\n        require(_price == 0 || _price > reserve);\r\n        require(_price != 0 || reserve != 0);\r\n        Sale storage s = sales[_name];\r\n        s.reserve = reserve;\r\n        s.price = _price;\r\n        s.startReferrer = referrer;\r\n        Offer(msg.sender, _name, _price, reserve);\r\n    }\r\n    function cancel(string _name) onlyNameSeller(_name) auctionNotStarted(_name) deedValid(_name) ifNotPaused public {\r\n        delete sales[_name];\r\n        registrar.transfer(keccak256(_name), msg.sender);\r\n        Cancel(_name);\r\n    }\r\n    function buy(string _name, address bidReferrer) canBuy(_name) deedValid(_name) ifNotPaused public payable {\r\n        Sale storage s = sales[_name];\r\n        require(msg.value >= s.price);\r\n        require(s.auctionStarted == 0);\r\n        Deed deed;\r\n        (,deed,,,) = registrar.entries(keccak256(_name));\r\n        address previousOwner = deed.previousOwner();\r\n        registrar.transfer(keccak256(_name), msg.sender);\r\n        Transfer(previousOwner, msg.sender, _name, msg.value);\r\n        distributeFunds(msg.value, previousOwner, s.startReferrer, bidReferrer);\r\n        delete sales[_name];\r\n        withdraw();\r\n    }\r\n    function bid(string _name, address bidReferrer) canBid(_name) deedValid(_name) ifNotPaused public payable {\r\n        require(msg.value >= minimumBid(_name));\r\n        Sale storage s = sales[_name];\r\n        require(s.auctionStarted == 0 || now < s.auctionEnds);\r\n        if (s.auctionStarted == 0) {\r\n          s.auctionStarted = now;\r\n        } else {\r\n          balances[s.lastBidder] = balances[s.lastBidder].add(s.lastBid);\r\n        }\r\n        s.lastBidder = msg.sender;\r\n        s.lastBid = msg.value;\r\n        s.auctionEnds = now.add(AUCTION_DURATION);\r\n        s.bidReferrer = bidReferrer;\r\n        Bid(msg.sender, _name, msg.value);\r\n        withdraw();\r\n    }\r\n    function finish(string _name) deedValid(_name) ifNotPaused public {\r\n        Sale storage s = sales[_name];\r\n        require(now > s.auctionEnds);\r\n        Deed deed;\r\n        (,deed,,,) = registrar.entries(keccak256(_name));\r\n        address previousOwner = deed.previousOwner();\r\n        registrar.transfer(keccak256(_name), s.lastBidder);\r\n        Transfer(previousOwner, s.lastBidder, _name, s.lastBid);\r\n        distributeFunds(s.lastBid, previousOwner, s.startReferrer, s.bidReferrer);\r\n        delete sales[_name];\r\n        withdraw();\r\n    }\r\n    function withdraw() ifNotPaused public {\r\n        uint256 amount = balances[msg.sender];\r\n        if (amount > 0) {\r\n            balances[msg.sender] = 0;\r\n            msg.sender.transfer(amount);\r\n            Withdraw(msg.sender, amount);\r\n        }\r\n    }\r\n    function invalidate(string _name) ifNotPaused public {\r\n        address deed;\r\n        (,deed,,,) = registrar.entries(keccak256(_name));\r\n        require(deed == 0);\r\n        Sale storage s = sales[_name];\r\n        balances[s.lastBidder] = balances[s.lastBidder].add(s.lastBid);\r\n        delete sales[_name];\r\n        Cancel(_name);\r\n        withdraw();\r\n    }\r\n    function distributeFunds(uint256 amount, address seller, address startReferrer, address bidReferrer) internal {\r\n        uint256 startReferrerFunds = amount.mul(START_REFERRER_SALE_PERCENTAGE).div(100);\r\n        balances[startReferrer] = balances[startReferrer].add(startReferrerFunds);\r\n        uint256 bidReferrerFunds = amount.mul(BID_REFERRER_SALE_PERCENTAGE).div(100);\r\n        balances[bidReferrer] = balances[bidReferrer].add(bidReferrerFunds);\r\n        uint256 sellerFunds = amount.sub(startReferrerFunds).sub(bidReferrerFunds);\r\n        balances[seller] = balances[seller].add(sellerFunds);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"sale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"invalidate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"cancel\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"registrar\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"auctionStarted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"finish\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"permission\",\"type\":\"bytes32\"},{\"name\":\"allowed\",\"type\":\"bool\"}],\"name\":\"setPermission\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"minimumBid\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"bidReferrer\",\"type\":\"address\"}],\"name\":\"bid\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"auctionEnds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"isBuyable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"isAuction\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"reserve\",\"type\":\"uint256\"},{\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"offer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"bidReferrer\",\"type\":\"address\"}],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"permission\",\"type\":\"bytes32\"}],\"name\":\"isPermitted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"balance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_registry\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"reserve\",\"type\":\"uint256\"}],\"name\":\"Offer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"bid\",\"type\":\"uint256\"}],\"name\":\"Bid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"}],\"name\":\"Cancel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"}]","ContractName":"DomainSale","CompilerVersion":"v0.4.17+commit.bdeb9e52","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000314159265dd8dbb310642f98f50c066173c1259b","Library":"","SwarmSource":"bzzr://25dacb6f7d902934174bab7f31374d43ce5bcb004f0c10ac3efd5367924ca067"}]}