{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n/**\r\n * @title Mintable token\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\r\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n */\r\n\r\ncontract MintableToken is StandardToken, Ownable {\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\r\n    _amount = _amount * 1 ether;\r\n    totalSupply = totalSupply.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    Mint(_to, _amount);\r\n    Transfer(address(0), _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() onlyOwner canMint public returns (bool) {\r\n    mintingFinished = true;\r\n    MintFinished();\r\n    return true;\r\n  }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title Token Wrapper with constructor\r\n * @dev Customized mintable ERC20 Token\r\n * @dev Token to support 2 owners only.\r\n */\r\ncontract PUBLICCOIN is Ownable, MintableToken {\r\n  //Event for Presale transfers\r\n  //event TokenPreSaleTransfer(address indexed purchaser, address indexed beneficiary, uint256 amount);\r\n\r\n  // Token details\r\n  string public constant name = \"Public Coin\";\r\n  string public constant symbol = \"PUBLIC\";\r\n\r\n  // 18 decimal places, the same as ETH.\r\n  uint8 public constant decimals = 18;\r\n\r\n  /**\r\n    @dev Constructor. Sets the initial supplies and transfer advisor/founders/presale tokens to the given account\r\n    @param _owner1 The address of the first owner\r\n    @param _owner1Percentage The preallocate percentage of tokens belong to the first owner\r\n    @param _owner2 The address of the second owner\r\n    @param _owner2Percentage The preallocate percentage of tokens belong to the second owner\r\n    @param _cap the maximum totalsupply in number of tokens //before multiply to 10**18\r\n   */\r\n  function PUBLICCOIN (address _owner1, uint8 _owner1Percentage, address _owner2, uint8 _owner2Percentage, uint256 _cap) public {\r\n      //Total of 17M tokens\r\n      require(_owner1Percentage+_owner2Percentage<50);//sanity check\r\n      require(_cap >0);\r\n      totalSupply = 0; //initialize total supply\r\n      // 12% for owner1, 6% for owner 2\r\n      mint(_owner1, _cap *_owner1Percentage / 100);\r\n      mint(_owner2, _cap *_owner2Percentage / 100);\r\n\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Token Generation Event for PublicCoin\r\n * credit: part of this contract was created from OpenZeppelin Code\r\n * @dev It allows multiple Capped CrowdSales. i.e. every crowdsale with capped token limit.\r\n * Simplified the deployment function for owner, just click & start, no configuration parameters\r\n */\r\ncontract Crowdsale is Ownable\r\n{\r\n    using SafeMath for uint256;\r\n\r\n    // The token being sold\r\n    PUBLICCOIN public token;\r\n    // the account to which all incoming ether will be transferred\r\n    // Flag to track the crowdsale status (Active/InActive)\r\n    bool public crowdSaleOn = false;\r\n\r\n    // Current crowdsale sate variables\r\n    uint256 constant totalCap = 17*10**6;  // Max avaialble number of tokens in total including presale (unit token)\r\n    uint256 constant crowdSaleCap = 14*10**6*(1 ether);  // Max avaialble number of tokens for crowdsale 18 M (unit wei)\r\n    uint256 constant bonusPeriod = 1 days; //change to 1 days when deploying\r\n    uint256 constant tokensPerEther = 3750;\r\n    uint256 public startTime; // Crowdsale start time\r\n    uint256 public endTime;  // Crowdsale end time\r\n    uint256 public weiRaised = 0;  // Total amount ether/wei collected\r\n    uint256 public tokensMinted = 0; // Total number of tokens minted/sold so far in this crowdsale\r\n    uint256 public currentRate = 3750;\r\n    //first_owner receives 90% of ico fund in eth, second_owner receives 10%.\r\n    //first_owner keeps 12% of token, second_owner keeps 6% token, 82% token for public sale\r\n    //For transparency this must be hardcoded and uploaded to etherscan.io\r\n    address constant firstOwner = 0xf878bDc344097449Df3F2c2DC6Ed491e9DeF71f5;\r\n    address constant secondOwner = 0x0B993E8Ee11B18BD99FCf7b2df5555385A661f7e;\r\n    uint8 constant firstOwnerETHPercentage= 90;\r\n    uint8 constant secondOwnerETHPercentage= 10;\r\n    uint8 constant firstOwnerTokenPercentage= 12;\r\n    uint8 constant secondOwnerTokenPercentage= 6;\r\n    uint256 constant minPurchase = (1*1 ether)/10; //0.1 eth minimum\r\n\r\n    // Event to be registered when a successful token purchase happens\r\n    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n\r\n    /** Modifiers to verify the status of the crowdsale*/\r\n    modifier activeCrowdSale() {\r\n        require(crowdSaleOn);\r\n        _;\r\n    }\r\n    modifier inactiveCrowdSale() {\r\n        require(!crowdSaleOn);\r\n        _;\r\n    }\r\n\r\n    /**\r\n        @dev constructor. Intializes the token to be traded using this contract\r\n     */\r\n    function Crowdsale() public {\r\n        token = new PUBLICCOIN(firstOwner,firstOwnerTokenPercentage,secondOwner,secondOwnerTokenPercentage, totalCap);\r\n    }\r\n\r\n    /**\r\n      @dev function to start the crowdsale. it will be called once for each crowdsale session\r\n      @return A boolean that indicates if the operation is successful\r\n     */\r\n    function startCrowdsale() inactiveCrowdSale onlyOwner public returns (bool) {\r\n        startTime =  uint256(now);\r\n        //endTime = now + 30 days;\r\n        endTime = now + 3*bonusPeriod;\r\n        crowdSaleOn = true;\r\n        weiRaised = 0;\r\n        tokensMinted = 0;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n      @dev function to stop crowdsale session.it will be called once for every crowdsale session and it can be called only its owner\r\n      @return A boolean that indicates if the operation is successful\r\n     */\r\n    function endCrowdsale() activeCrowdSale onlyOwner public returns (bool) {\r\n        require(now >= endTime);\r\n        crowdSaleOn = false;\r\n        token.finishMinting();\r\n        return true;\r\n    }\r\n\r\n    /**\r\n      @dev function to calculate and return the discounted token rate based on the current timeslot\r\n      @return _discountedRate for the current timeslot\r\n      return rate of Y wei per 1 Token)\r\n      base rate without bonus : 1 ether = 3 750 tokens\r\n      rate changes after 11 days\r\n      the first 1 day: 35% bonus, next 3 days: 15% bonus , last 27 days : 0%\r\n      hardcoded\r\n     */\r\n    function findCurrentRate() constant private returns (uint256 _discountedRate) {\r\n\r\n        uint256 elapsedTime = now.sub(startTime);\r\n        uint256 baseRate = (1*1 ether)/tokensPerEther;\r\n\r\n        if (elapsedTime <= bonusPeriod){ // x<= 1days\r\n            _discountedRate = baseRate.mul(100).div(135);\r\n        }else{\r\n            if (elapsedTime < 2*bonusPeriod){ //1days < x <= 3 days\r\n              _discountedRate = baseRate.mul(100).div(115);\r\n              }else{\r\n              _discountedRate = baseRate;\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n      @dev  fallback function can be used to buy tokens\r\n      */\r\n    function () payable public {\r\n        buyTokens(msg.sender);\r\n    }\r\n\r\n    /**\r\n      @dev  low level token purchase function\r\n      */\r\n    function buyTokens(address beneficiary) activeCrowdSale public payable {\r\n        require(beneficiary != 0x0);\r\n        require(now >= startTime);\r\n        require(now <= endTime);\r\n        require(msg.value >= minPurchase); //enforce minimum value of a tx\r\n\r\n        // amount ether sent to the contract.. normalized to wei\r\n        uint256 weiAmount = msg.value;\r\n        weiRaised = weiRaised.add(weiAmount);\r\n\r\n\r\n        // Find out Token value in wei ( Y wei per 1 Token)\r\n        uint256 rate = findCurrentRate();\r\n        //uint256 rate = uint256(1 * 1 ether).div(currentRate);\r\n        require(rate > 0);\r\n        //update public variable for viewing only, as requested\r\n        currentRate = (1*1 ether)/rate;\r\n        // Find out the number of tokens for given wei and normalize to ether so that tokens can be minted\r\n        // by token contract\r\n        uint256 numTokens = weiAmount.div(rate);\r\n        require(numTokens > 0);\r\n        require(tokensMinted.add(numTokens.mul(1 ether)) <= crowdSaleCap);\r\n        tokensMinted = tokensMinted.add(numTokens.mul(1 ether));\r\n\r\n        // Mint the tokens and trasfer to the buyer\r\n        token.mint(beneficiary, numTokens);\r\n        TokenPurchase(msg.sender, beneficiary, weiAmount, numTokens);\r\n        // Transfer the ether to owners according to their share and close the purchase\r\n        firstOwner.transfer(weiAmount*firstOwnerETHPercentage/100);\r\n        secondOwner.transfer(weiAmount*secondOwnerETHPercentage/100);\r\n\r\n    }\r\n\r\n    // ETH balance is always expected to be 0 after the crowsale.\r\n    // but in case something went wrong, we use this function to extract the eth.\r\n    // Security idea from kyber.network crowdsale\r\n    // This should never be used\r\n    function emergencyDrain(ERC20 anyToken) inactiveCrowdSale onlyOwner public returns(bool){\r\n        if( this.balance > 0 ) {\r\n            owner.transfer( this.balance );\r\n        }\r\n\r\n        if( anyToken != address(0x0) ) {\r\n            assert( anyToken.transfer(owner, anyToken.balanceOf(this)) );\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"endCrowdsale\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdSaleOn\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensMinted\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"anyToken\",\"type\":\"address\"}],\"name\":\"emergencyDrain\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startCrowdsale\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Crowdsale","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://9df0a99db46a0c2cd4de90e07cc01956217114ebe6c764e9e438fc8ff00cecfc"}]}