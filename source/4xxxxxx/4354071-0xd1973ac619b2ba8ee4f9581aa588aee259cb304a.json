{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *  Crowdfunding.sol v1.0.0\r\n * \r\n *  Bilal Arif - https://twitter.com/furusiyya_\r\n *  Notary Platform\r\n */\r\n\r\npragma solidity ^0.4.16;\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n    \r\n    function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n    \r\n    function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n    \r\n    function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\ncontract Ownable {\r\n     /*\r\n      @title Ownable\r\n      @dev The Ownable contract has an owner address, and provides basic authorization control\r\n      functions, this simplifies the implementation of \"user permissions\".\r\n    */\r\n\r\n  address public owner;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable(address _owner){\r\n    owner = _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n  \r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n}\r\ncontract ReentrancyGuard {\r\n\r\n  /**\r\n   * @dev We use a single lock for the whole contract.\r\n   */\r\n  bool private rentrancy_lock = false;\r\n\r\n  /**\r\n   * @dev Prevents a contract from calling itself, directly or indirectly.\r\n   * @notice If you mark a function `nonReentrant`, you should also\r\n   * mark it `external`. Calling one nonReentrant function from\r\n   * another is not supported. Instead, you can implement a\r\n   * `private` function doing the actual work, and a `external`\r\n   * wrapper marked as `nonReentrant`.\r\n   */\r\n  modifier nonReentrant() {\r\n    require(!rentrancy_lock);\r\n    rentrancy_lock = true;\r\n    _;\r\n    rentrancy_lock = false;\r\n  }\r\n\r\n}\r\ncontract Pausable is Ownable {\r\n  \r\n  event Pause(bool indexed state);\r\n\r\n  bool private paused = false;\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev return the current state of contract\r\n   */\r\n  function Paused() external constant returns(bool){ return paused; }\r\n\r\n  /**\r\n   * @dev called by the owner to pause or unpause, triggers stopped state\r\n   * on first call and returns to normal state on second call\r\n   */\r\n  function tweakState() external onlyOwner {\r\n    paused = !paused;\r\n    Pause(paused);\r\n  }\r\n\r\n}\r\n\r\ncontract Crowdfunding is Pausable, ReentrancyGuard {\r\n\r\n      using SafeMath for uint256;\r\n    \r\n      /* the starting time of the crowdsale */\r\n      uint256 private startsAt;\r\n    \r\n      /* the ending time of the crowdsale */\r\n      uint256 private endsAt;\r\n    \r\n      /* how many token units a buyer gets per wei */\r\n      uint256 private rate;\r\n    \r\n      /* How many wei of funding we have received so far */\r\n      uint256 private weiRaised = 0;\r\n    \r\n      /* How many distinct addresses have invested */\r\n      uint256 private investorCount = 0;\r\n      \r\n      /* How many total investments have been made */\r\n      uint256 private totalInvestments = 0;\r\n      \r\n      /* Address of multiSig contract*/\r\n      address private multiSig;\r\n      \r\n      /* Address of tokenStore*/\r\n      address private tokenStore;\r\n      \r\n      /* Address of pre-ico contract*/\r\n      NotaryPlatformToken private token;\r\n     \r\n    \r\n      /** How much ETH each address has invested to this crowdsale */\r\n      mapping (address => uint256) private investedAmountOf;\r\n    \r\n      /** Whitelisted addresses */\r\n      mapping (address => bool) private whiteListed;\r\n      \r\n      /** State machine\r\n       *\r\n       * - Prefunding: We have not passed start time yet\r\n       * - Funding: Active crowdsale\r\n       * - Closed: Funding is closed.\r\n       */\r\n      enum State{PreFunding, Funding, Closed}\r\n    \r\n      /**\r\n       * event for token purchase logging\r\n       * @param purchaser who paid for the tokens\r\n       * @param beneficiary who got the tokens\r\n       * @param value weis paid for purchase\r\n       * @param amount amount of tokens purchased\r\n       */\r\n      event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n      // Funds transfer to other address\r\n      event Transfer(address indexed receiver, uint256 weiAmount);\r\n    \r\n      // Crowdsale end time has been changed\r\n      event EndsAtChanged(uint256 endTimestamp);\r\n    \r\n      event NewExchangeRate(uint256 indexed _rate);\r\n      event TokenContractAddress(address indexed oldAddress,address indexed newAddress);\r\n      event TokenStoreUpdated(address indexed oldAddress,address indexed newAddress);\r\n      event WalletAddressUpdated(address indexed oldAddress,address indexed newAddress);\r\n      event WhiteListUpdated(address indexed investor, bool status);\r\n      event BonusesUpdated(address indexed investor, bool status);\r\n\r\n      function Crowdfunding() \r\n      Ownable(0x0587e235a5906ed8143d026dE530D77AD82F8A92)\r\n      {\r\n        require(earlyBirds());       // load bonuses\r\n        \r\n        multiSig = 0x1D1739F37a103f0D7a5f5736fEd2E77DE9863450;\r\n        tokenStore = 0x244092a2FECFC48259cf810b63BA3B3c0B811DCe;\r\n        \r\n        token = NotaryPlatformToken(0xbA5787e07a0636A756f4B4d517b595dbA24239EF);\r\n        require(token.isTokenContract());\r\n    \r\n        startsAt = now + 2 minutes;\r\n        endsAt = now + 31 minutes;\r\n        rate = 2730;\r\n      }\r\n    \r\n      /**\r\n       * Allow investor to just send in money\r\n       */\r\n      function() nonZero payable{\r\n        buy(msg.sender);\r\n      }\r\n    \r\n      /**\r\n       * Make an investment.\r\n       *\r\n       * Crowdsale must be running for one to invest.\r\n       * We must have not pressed the emergency brake.\r\n       *\r\n       * @param receiver The Ethereum address who will receive tokens\r\n       *\r\n       */\r\n      function buy(address receiver) public whenNotPaused nonReentrant inState(State.Funding) nonZero payable returns(bool){\r\n        require(receiver != 0x00);\r\n        require(whiteListed[receiver] || isEarlyBird(receiver));\r\n\r\n        if(investedAmountOf[msg.sender] == 0) {\r\n          // A new investor\r\n          investorCount++;\r\n        }\r\n    \r\n        // count all investments\r\n        totalInvestments++;\r\n    \r\n        // Update investor\r\n        investedAmountOf[msg.sender] = investedAmountOf[msg.sender].add(msg.value);\r\n        \r\n        // Up total accumulated fudns\r\n        weiRaised = weiRaised.add(msg.value);\r\n        \r\n        uint256 value = getBonus(receiver,msg.value);\r\n        \r\n        // calculate token amount to be transfered\r\n        uint256 tokens = value.mul(rate);\r\n        \r\n        // Transfer NTRY tokens to receiver address\r\n        if(!token.transferFrom(tokenStore,receiver,tokens)){\r\n            revert();\r\n        }\r\n        \r\n        // Tell us purchase was success\r\n        TokenPurchase(msg.sender, receiver, msg.value, tokens);\r\n        \r\n        // Pocket the money\r\n        forwardFunds();\r\n        \r\n        return true;\r\n      }\r\n      \r\n      \r\n      // send ether to the fund collection wallet\r\n      function forwardFunds() internal {\r\n        multiSig.transfer(msg.value);\r\n      }\r\n    \r\n    \r\n     // getters, constant functions\r\n    \r\n      /**\r\n       * @return address of multisignature wallet \r\n       */\r\n      function multiSigAddress() external constant returns(address){\r\n          return multiSig;\r\n      }\r\n      \r\n      /**\r\n       * @return address of Notary Platform token\r\n       */\r\n      function tokenContractAddress() external constant returns(address){\r\n          return token;\r\n      }\r\n      \r\n      /**\r\n       * @return address of NTRY tokens owner\r\n       */\r\n      function tokenStoreAddress() external constant returns(address){\r\n          return tokenStore;\r\n      }\r\n      \r\n      /**\r\n       * @return startDate Crowdsale opening date\r\n       */\r\n      function fundingStartAt() external constant returns(uint256 ){\r\n          return startsAt;\r\n      }\r\n      \r\n      /**\r\n       * @return endDate Crowdsale closing date\r\n       */\r\n      function fundingEndsAt() external constant returns(uint256){\r\n          return endsAt;\r\n      }\r\n      \r\n      /**\r\n       * @return investors Total of distinct investors\r\n       */\r\n      function distinctInvestors() external constant returns(uint256){\r\n          return investorCount;\r\n      }\r\n      \r\n      /**\r\n       * @return investments Crowdsale closing date\r\n       */\r\n      function investments() external constant returns(uint256){\r\n          return totalInvestments;\r\n      }\r\n      \r\n      /**\r\n       * @param _addr Address of investor\r\n       * @return Number of ethers invested by investor \r\n       */\r\n      function investedAmoun(address _addr) external constant returns(uint256){\r\n          require(_addr != 0x00);\r\n          return investedAmountOf[_addr];\r\n      }\r\n      \r\n       /**\r\n       * @return total of amount of wie collected by the contract \r\n       */\r\n      function fundingRaised() external constant returns (uint256){\r\n        return weiRaised;\r\n      }\r\n\r\n      /**\r\n       * @return exchage rate of ethers to NTRY tokens \r\n       */\r\n      function exchnageRate() external constant returns (uint256){\r\n        return rate;\r\n      }\r\n\r\n      /**\r\n       * @return the status of the contract if it is allowed to participate. \r\n       */\r\n      function isWhiteListed(address _address) external constant returns(bool){\r\n        require(_address != 0x00);\r\n        return whiteListed[_address];\r\n      }\r\n      \r\n      /**\r\n       * Crowdfund state machine management.\r\n       *\r\n       * We make it a function and do not assign the result to a variable, so there is no chance of the variable being stale.\r\n       */\r\n      function getState() public constant returns (State) {\r\n        if (now < startsAt) return State.PreFunding;\r\n        else if (now <= endsAt) return State.Funding;\r\n        else if (now > endsAt) return State.Closed;\r\n      }\r\n      \r\n      // Setters, onlyOwner functions\r\n      \r\n       /**\r\n       * @param _newAddress is address of multisignature wallet\r\n       * @return true for case of success\r\n       */\r\n      function updateMultiSig(address _newAddress) external onlyOwner returns(bool){\r\n          require(_newAddress != 0x00);\r\n          WalletAddressUpdated(multiSig,_newAddress);\r\n          multiSig = _newAddress;\r\n          return true;\r\n      }\r\n      \r\n       /**\r\n       * @param _newAddress is address of NTRY token contract\r\n       * @return true for case of success\r\n       */\r\n      function updateTokenContractAddr(address _newAddress) external onlyOwner returns(bool){\r\n          require(_newAddress != 0x00);\r\n          TokenContractAddress(token,_newAddress);\r\n          token = NotaryPlatformToken(_newAddress);\r\n          return true;\r\n      }\r\n      \r\n       /**\r\n       * @param _newAddress is address of NTRY tokens owner\r\n       * @return true for case of success\r\n       */\r\n      function updateTokenStore(address _newAddress) external onlyOwner returns(bool){\r\n          require(_newAddress != 0x00);\r\n          TokenStoreUpdated(tokenStore,_newAddress);\r\n          tokenStore = _newAddress;\r\n          return true;\r\n      }\r\n      \r\n      /**\r\n       * Allow crowdsale owner to close early or extend the crowdsale.\r\n       *\r\n       * This is useful e.g. for a manual soft cap implementation:\r\n       * - after X amount is reached determine manual closing\r\n       *\r\n       * This may put the crowdsale to an invalid state,\r\n       * but we trust owners know what they are doing.\r\n       *\r\n       */\r\n      function updateEndsAt(uint256 _endsAt) external  onlyOwner {\r\n        \r\n        // Don't change past\r\n        require(_endsAt > now);\r\n    \r\n        endsAt = _endsAt;\r\n        EndsAtChanged(_endsAt);\r\n      }\r\n\r\n      /**\r\n       * Allow crowdsale owner to change exchange rate.\r\n       */\r\n      function updateExchangeRate(uint256 _newRate) external onlyOwner {\r\n        \r\n        // Don't change past\r\n        require(_newRate > 0);\r\n    \r\n        rate = _newRate;\r\n        NewExchangeRate(_newRate);\r\n      }\r\n\r\n      function updateWhiteList(address _address,bool _status) external onlyOwner returns(bool){\r\n        require(_address != 0x00);\r\n        whiteListed[_address] = _status;\r\n        WhiteListUpdated(_address, _status);\r\n        return true;\r\n      }\r\n    \r\n    \r\n      /** Interface marker. */\r\n      function isCrowdsale() external constant returns (bool) {\r\n        return true;\r\n      }\r\n    \r\n      //\r\n      // Modifiers\r\n      //\r\n      /** Modifier allowing execution only if the crowdsale is currently running.  */\r\n      modifier inState(State state) {\r\n        require(getState() == state);\r\n        _;\r\n      }\r\n    \r\n      /** Modifier allowing execution only if received value is greater than zero */\r\n      modifier nonZero(){\r\n        require(msg.value >= 75000000000000000);\r\n        _;\r\n      }\r\n\r\n\r\n      //////////////////////////////////// Bonuses ////////////////////////////////\r\n\r\n      mapping (address => bool) private bonuses;\r\n\r\n      function earlyBirds() private returns(bool){\r\n        bonuses[0x017ABCC1012A7FfA811bBe4a26804f9DDac1Af4D] = true;\r\n        bonuses[0x1156ABCBA63ACC64162b0bbf67726a3E5eA1E157] = true;\r\n        bonuses[0xEAC8483261078517528DE64956dBD405f631265c] = true;\r\n        bonuses[0xB0b0D639b612937D50dd26eA6dc668e7AE51642A] = true;\r\n        bonuses[0x417535DEF791d7BBFBC97b0f743a4Da67fD9eC3B] = true;\r\n        bonuses[0x6723f81CDc9a5D5ef2Fe1bFbEdb4f83Bd017D3dC] = true;\r\n        bonuses[0xb9Bd4f154Bb5F2BE5E7Db0357C54720c7f35405d] = true;\r\n        bonuses[0x21CA5617f0cd02f13075C7c22f7231D061F09189] = true;\r\n        bonuses[0x0a6Cd7e558c69baF7388bb0B3432E29Ecc29ac55] = true;\r\n        bonuses[0x6a7f63709422A986A953904c64F10D945c8AfBA1] = true;\r\n        bonuses[0x7E046CB5cE19De94b2D0966B04bD8EF90cDC35d3] = true;\r\n        bonuses[0x1C3118b84988f42007c548e62DFF47A12c955886] = true;\r\n        bonuses[0x7736154662ba56C57B2Be628Fe0e44A609d33Dfb] = true;\r\n        bonuses[0xCcC8d4410a825F3644D3a5BBC0E9dF4ac6B491B3] = true;\r\n        bonuses[0x9Eff6628545E1475C73dF7B72978C2dF90eDFeeD] = true;\r\n        bonuses[0x235377dFB1Da49e39692Ac2635ef091c1b1cF63A] = true;\r\n        bonuses[0x6a8d793026BeBaef1a57e3802DD4bB6B1C844755] = true;\r\n        bonuses[0x26c32811447c8D0878b2daE7F4538AE32de82d57] = true;\r\n        bonuses[0x9CEdb0e60B3C2C1cd9A2ee2E18FD3f68870AF230] = true;\r\n        bonuses[0x28E102d747dF8Ae2cBBD0266911eFB609986515d] = true;\r\n        bonuses[0x5b35061Cc9891c3616Ea05d1423e4CbCfdDF1829] = true;\r\n        bonuses[0x47f2404fa0da21Af5b49F8E011DF851B69C24Aa4] = true;\r\n        bonuses[0x046ec2a3a16e76d5dFb0CFD0BF75C7CA6EB8A4A2] = true;\r\n        bonuses[0x01eD3975993c8BebfF2fb6a7472679C6F7b408Fb] = true;\r\n        bonuses[0x011afc4522663a310AF1b72C5853258CCb2C8f80] = true;\r\n        bonuses[0x3A167819Fd49F3021b91D840a03f4205413e316B] = true;\r\n        bonuses[0xd895E6E5E0a13EC2A16e7bdDD6C1151B01128488] = true;\r\n        bonuses[0xE5d4AaFC54CF15051BBE0bA11f65dE4f4Ccedbc0] = true;\r\n        bonuses[0x21C4ff1738940B3A4216D686f2e63C8dbcb7DC44] = true;\r\n        bonuses[0x196a484dB36D2F2049559551c182209143Db4606] = true;\r\n        bonuses[0x001E0d294383d5b4136476648aCc8D04a6461Ae3] = true;\r\n        bonuses[0x2052004ee9C9a923393a0062748223C1c76a7b59] = true;\r\n        bonuses[0x80844Fb6785c1EaB7671584E73b0a2363599CB2F] = true;\r\n        bonuses[0x526127775D489Af1d7e24bF4e7A8161088Fb90ff] = true;\r\n        bonuses[0xD4340FeF5D32F2754A67bF42a44f4CEc14540606] = true;\r\n        bonuses[0x51A51933721E4ADA68F8C0C36Ca6E37914A8c609] = true;\r\n        bonuses[0xD0780AB2AA7309E139A1513c49fB2127DdC30D3d] = true;\r\n        bonuses[0xE4AFF5ECB1c686F56C16f7dbd5d6a8Da9E200ab7] = true;\r\n        bonuses[0x04bC746A174F53A3e1b5776d5A28f3421A8aE4d0] = true;\r\n        bonuses[0x0D5f69C67DAE06ce606246A8bd88B552d1DdE140] = true;\r\n        bonuses[0x8854f86F4fBd88C4F16c4F3d5A5500de6d082AdC] = true;\r\n        bonuses[0x73c8711F2653749DdEFd7d14Ab84b0c4419B91A5] = true;\r\n        bonuses[0xb8B0eb45463d0CBc85423120bCf57B3283D68D42] = true;\r\n        bonuses[0x7924c67c07376cf7C4473D27BeE92FE82DFD26c5] = true;\r\n        bonuses[0xa6A14A81eC752e0ed5391A22818F44aA240FFBB1] = true;\r\n        bonuses[0xdF88295a162671EFC14f3276A467d31a5AFb63AC] = true;\r\n        bonuses[0xC1c113c60ebf7d92A3D78ff7122435A1e307cE05] = true;\r\n        bonuses[0x1EAaD141CaBA0C85EB28E0172a30dd8561dde030] = true;\r\n        bonuses[0xDE3270049C833fF2A52F18C7718227eb36a92323] = true;\r\n        bonuses[0x2348f7A9313B33Db329182f4FA78Bc0f94d2F040] = true;\r\n        bonuses[0x07c9CC6C24aBDdaB4a7aD82c813b059DD04a7F07] = true;\r\n        bonuses[0xd45BF2dEBD1C4196158DcB177D1Ae910949DC00A] = true;\r\n        bonuses[0xD1F3A1A16F4ab35e5e795Ce3f49Ee2DfF2dD683B] = true;\r\n        bonuses[0x6D567fa2031D42905c40a7E9CFF6c30b8DA4abf6] = true;\r\n        bonuses[0x4aF3b3947D4b4323C241c99eB7FD3ddcAbaef0d7] = true;\r\n        bonuses[0x386167E3c00AAfd9f83a89c05E0fB7e1c2720095] = true;\r\n        bonuses[0x916F356Ccf821be928201505c59a44891168DC08] = true;\r\n        bonuses[0x47cb69881e03213D1EC6e80FCD375bD167336621] = true;\r\n        bonuses[0x36cFB5A6be6b130CfcEb934d3Ca72c1D72c3A7D8] = true;\r\n        bonuses[0x1b29291cF6a57EE008b45f529210d6D5c5f19D91] = true;\r\n        bonuses[0xe6D0Bb9FBb78F10a111bc345058a9a90265622F3] = true;\r\n        bonuses[0x3e83Fc87256142dD2FDEeDc49980f4F9Be9BB1FB] = true;\r\n        bonuses[0xf360b24a530d29C96a26C2E34C0DAbCAB12639F4] = true;\r\n        bonuses[0xF49C6e7e36A714Bbc162E31cA23a04E44DcaF567] = true;\r\n        bonuses[0xa2Ac3516A33e990C8A3ce7845749BaB7C63128C0] = true;\r\n        bonuses[0xdC5984a2673c46B68036076026810FfDfFB695B8] = true;\r\n        bonuses[0xfFfdFaeF43029d6C749CEFf04f65187Bd50A5311] = true;\r\n        bonuses[0xe752737DD519715ab0FA9538949D7F9249c7c168] = true;\r\n        bonuses[0x580d0572DBD9F27C75d5FcC88a6075cE32924C2B] = true;\r\n        bonuses[0x6ee541808C463116A82D76649dA0502935fA8D08] = true;\r\n        bonuses[0xA68B4208E0b7aACef5e7cF8d6691d5B973bAd119] = true;\r\n        bonuses[0x737069E6f9F02062F4D651C5C8C03D50F6Fc99C6] = true;\r\n        bonuses[0x00550191FAc279632f5Ff23d06Cb317139543840] = true;\r\n        bonuses[0x9e6EB194E26649B1F17e5BafBcAbE26B5db433E2] = true;\r\n        bonuses[0x186a813b9fB34d727fE1ED2DFd40D87d1c8431a6] = true;\r\n        bonuses[0x7De8D937a3b2b254199F5D3B38F14c0D0f009Ff8] = true;\r\n        bonuses[0x8f066F3D9f75789d9f126Fdd7cFBcC38a768985D] = true;\r\n        bonuses[0x7D1826Fa8C84608a6C2d5a61Ed5A433D020AA543] = true;\r\n        return true;\r\n      }\r\n\r\n      function updateBonuses(address _address,bool _status) external onlyOwner returns(bool){\r\n        require(_address != 0x00);\r\n        bonuses[_address] = _status;\r\n        BonusesUpdated(_address,_status);\r\n        return true;\r\n      }\r\n\r\n      function getBonus(address _address,uint256 _value) private returns(uint256){\r\n        if(bonuses[_address]){\r\n           // 10% bonus\r\n           if(_value > 166 ether){\r\n            return (_value*11)/10;\r\n           }\r\n           // 7.5% bonus\r\n           if(_value > 33 ether){\r\n            return (_value*43)/40;\r\n           }\r\n           return (_value*21)/20;\r\n        }\r\n        return _value;\r\n      }\r\n\r\n      function isEarlyBird(address _address) constant returns(bool){\r\n        require(_address != 0x00);\r\n        return bonuses[_address];\r\n      }\r\n}\r\n\r\ncontract NotaryPlatformToken{\r\n    function isTokenContract() returns (bool);\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool);\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"multiSigAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getState\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundingEndsAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isCrowdsale\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"updateBonuses\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_endsAt\",\"type\":\"uint256\"}],\"name\":\"updateEndsAt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenStoreAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isWhiteListed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isEarlyBird\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenContractAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"distinctInvestors\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundingStartAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"updateWhiteList\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"exchnageRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"tweakState\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newRate\",\"type\":\"uint256\"}],\"name\":\"updateExchangeRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"updateTokenStore\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundingRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"investments\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"investedAmoun\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"buy\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"updateMultiSig\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"updateTokenContractAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"weiAmount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"endTimestamp\",\"type\":\"uint256\"}],\"name\":\"EndsAtChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"NewExchangeRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"oldAddress\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"TokenContractAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"oldAddress\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"TokenStoreUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"oldAddress\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"WalletAddressUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"WhiteListUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"BonusesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Crowdfunding","CompilerVersion":"v0.4.17+commit.bdeb9e52","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://b4dd234003adfa45820b78a7545db40aed3413a9d17accc220c004845fa52700"}]}