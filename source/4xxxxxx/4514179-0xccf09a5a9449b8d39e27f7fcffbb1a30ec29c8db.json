{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13;\r\n\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public constant returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\ncontract VeTokenizedAssetRegistry is Ownable {\r\n\r\n    //--- Definitions\r\n\r\n    struct Asset {\r\n        address addr;\r\n        string meta;\r\n    }\r\n\r\n    //--- Storage\r\n\r\n    mapping (string => Asset) assets;\r\n\r\n    //--- Constructor\r\n\r\n    function VeTokenizedAssetRegistry()\r\n        Ownable\r\n    {\r\n    }\r\n\r\n    //--- Events\r\n\r\n    event AssetCreated(\r\n        address indexed addr\r\n    );\r\n\r\n    event AssetRegistered(\r\n        address indexed addr,\r\n        string symbol,\r\n        string name,\r\n        string description,\r\n        uint256 decimals\r\n    );\r\n\r\n    event MetaUpdated(string symbol, string meta);\r\n\r\n    //--- Public mutable functions\r\n\r\n    function create(\r\n        string symbol,\r\n        string name,\r\n        string description,\r\n        uint256 decimals,\r\n        string source,\r\n        string proof,\r\n        uint256 totalSupply,\r\n        string meta\r\n    )\r\n        public\r\n        onlyOwner\r\n        returns (address)\r\n    {\r\n        VeTokenizedAsset asset = new VeTokenizedAsset();\r\n        asset.setup(\r\n            symbol,\r\n            name,\r\n            description,\r\n            decimals,\r\n            source,\r\n            proof,\r\n            totalSupply\r\n        );\r\n\r\n        asset.transferOwnership(msg.sender);\r\n\r\n        AssetCreated(asset);\r\n\r\n        register(\r\n            asset,\r\n            symbol,\r\n            name,\r\n            description,\r\n            decimals,\r\n            meta\r\n        );\r\n\r\n        return asset;\r\n    }\r\n\r\n    function register(\r\n        address addr,\r\n        string symbol,\r\n        string name,\r\n        string description,\r\n        uint256 decimals,\r\n        string meta\r\n    )\r\n        public\r\n        onlyOwner\r\n    {\r\n        assets[symbol].addr = addr;\r\n\r\n        AssetRegistered(\r\n            addr,\r\n            symbol,\r\n            name,\r\n            description,\r\n            decimals\r\n        );\r\n\r\n        updateMeta(symbol, meta);\r\n    }\r\n\r\n    function updateMeta(string symbol, string meta) public onlyOwner {\r\n        assets[symbol].meta = meta;\r\n\r\n        MetaUpdated(symbol, meta);\r\n    }\r\n\r\n    function getAsset(string symbol) public constant returns (address addr, string meta) {\r\n        Asset storage asset = assets[symbol];\r\n        addr = asset.addr;\r\n        meta = asset.meta;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n\r\n    uint256 _allowance = allowed[_from][msg.sender];\r\n\r\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n    // require (_value <= _allowance);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   */\r\n  function increaseApproval (address _spender, uint _addedValue)\r\n    returns (bool success) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  function decreaseApproval (address _spender, uint _subtractedValue)\r\n    returns (bool success) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\ncontract VeTokenizedAsset is StandardToken, Ownable {\r\n\r\n    //--- Definitions\r\n\r\n    using SafeMath for uint256;\r\n\r\n    //--- Storage\r\n\r\n    bool public configured;\r\n    string public symbol;\r\n    string public name;\r\n    string public description;\r\n    uint256 public decimals;\r\n    string public source;\r\n    string public proof;\r\n    uint256 public totalSupply;\r\n\r\n    //--- Construction\r\n\r\n    function VeTokenizedAsset() {\r\n        // asset should be parametrized using `setup()` function\r\n    }\r\n\r\n    //--- Events\r\n\r\n    event SourceChanged(string newSource, string newProof, uint256 newTotalSupply);\r\n    event SupplyChanged(uint256 newTotalSupply);\r\n\r\n    //--- Public mutable functions\r\n\r\n    function setup(\r\n        string _symbol,\r\n        string _name,\r\n        string _description,\r\n        uint256 _decimals,\r\n        string _source,\r\n        string _proof,\r\n        uint256 _totalSupply\r\n    )\r\n        public\r\n        onlyOwner\r\n    {\r\n        require(!configured);\r\n        require(bytes(_symbol).length > 0);\r\n        require(bytes(_name).length > 0);\r\n        require(_decimals > 0 && _decimals <= 32);\r\n\r\n        symbol = _symbol;\r\n        name = _name;\r\n        description = _description;\r\n        decimals = _decimals;\r\n        source = _source;\r\n        proof = _proof;\r\n        totalSupply = _totalSupply;\r\n        configured = true;\r\n\r\n        balances[owner] = _totalSupply;\r\n\r\n        SourceChanged(_source, _proof, _totalSupply);\r\n    }\r\n\r\n    function changeSource(string newSource, string newProof, uint256 newTotalSupply) onlyOwner {\r\n        uint256 prevBalance = balances[owner];\r\n\r\n        if (newTotalSupply < totalSupply) {\r\n            uint256 decrease = totalSupply.sub(newTotalSupply);\r\n            balances[owner] = prevBalance.sub(decrease); // throws when balance is insufficient\r\n        } else if (newTotalSupply > totalSupply) {\r\n            uint256 increase = newTotalSupply.sub(totalSupply);\r\n            balances[owner] = prevBalance.add(increase);\r\n        }\r\n\r\n        source = newSource;\r\n        proof = newProof;\r\n        totalSupply = newTotalSupply;\r\n\r\n        SourceChanged(newSource, newProof, newTotalSupply);\r\n    }\r\n\r\n    function mint(uint256 amount) public onlyOwner {\r\n        require(amount > 0);\r\n\r\n        totalSupply = totalSupply.add(amount);\r\n        balances[owner] = balances[owner].add(amount);\r\n\r\n        SupplyChanged(totalSupply);\r\n    }\r\n\r\n    function burn(uint256 amount) public onlyOwner {\r\n        require(amount > 0);\r\n        require(amount <= balances[owner]);\r\n\r\n        totalSupply = totalSupply.sub(amount);\r\n        balances[owner] = balances[owner].sub(amount); // throws when balance is insufficient\r\n\r\n        SupplyChanged(totalSupply);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"symbol\",\"type\":\"string\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"description\",\"type\":\"string\"},{\"name\":\"decimals\",\"type\":\"uint256\"},{\"name\":\"source\",\"type\":\"string\"},{\"name\":\"proof\",\"type\":\"string\"},{\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"name\":\"meta\",\"type\":\"string\"}],\"name\":\"create\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"symbol\",\"type\":\"string\"},{\"name\":\"meta\",\"type\":\"string\"}],\"name\":\"updateMeta\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"symbol\",\"type\":\"string\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"description\",\"type\":\"string\"},{\"name\":\"decimals\",\"type\":\"uint256\"},{\"name\":\"meta\",\"type\":\"string\"}],\"name\":\"register\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"getAsset\",\"outputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"meta\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"AssetCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"symbol\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"description\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"decimals\",\"type\":\"uint256\"}],\"name\":\"AssetRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"symbol\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"meta\",\"type\":\"string\"}],\"name\":\"MetaUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"VeTokenizedAssetRegistry","CompilerVersion":"v0.4.13+commit.fb4cb1a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://9e305dd07ae382e251d1168a1e8d52ea26b560ef81966a9822e13a839f8d8075"}]}