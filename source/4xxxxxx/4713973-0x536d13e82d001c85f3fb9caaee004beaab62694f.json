{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n// This contract has the burn option\r\ninterface token {\r\n    function transfer(address receiver, uint amount);\r\n    function burn(uint256 _value) returns (bool);\r\n    function balanceOf(address _address) returns (uint256);\r\n}\r\ncontract owned {\r\n    address public owner;\r\n\r\n    function owned() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n}\r\n\r\ncontract SafeMath {\r\n    //internals\r\n\r\n    function safeMul(uint a, uint b) internal returns(uint) {\r\n        uint c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function safeSub(uint a, uint b) internal returns(uint) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function safeAdd(uint a, uint b) internal returns(uint) {\r\n        uint c = a + b;\r\n        assert(c >= a && c >= b);\r\n        return c;\r\n    }\r\n\r\n}\r\n\r\ncontract BTCxCrowdsale is owned, SafeMath {\r\n    address public beneficiary;\r\n    uint public fundingGoal;\r\n    uint public amountRaised;  //The amount being raised by the crowdsale\r\n    /* the end date of the crowdsale*/\r\n    uint public deadline; /* the end date of the crowdsale*/\r\n    uint public rate; //rate for the crowdsale\r\n    uint public tokenDecimals;\r\n    token public tokenReward; //\r\n    uint public tokensSold = 0;  //the amount of UzmanbuCoin sold  \r\n    /* the start date of the crowdsale*/\r\n    uint public start; /* the start date of the crowdsale*/\r\n    mapping(address => uint256) public balanceOf;  //Ether deposited by the investor\r\n    // bool fundingGoalReached = false;\r\n    bool crowdsaleClosed = false; //It will be true when the crowsale gets closed\r\n\r\n    event GoalReached(address beneficiary, uint capital);\r\n    event FundTransfer(address backer, uint amount, bool isContribution);\r\n\r\n    /**\r\n     * Constrctor function\r\n     *\r\n     * Setup the owner\r\n     */\r\n    function Crowdsale( ) {\r\n        beneficiary = 0x781AC8C2D6dc017c4259A1f06123659A4f6dFeD8;\r\n        rate = 2; \r\n        tokenDecimals=8;\r\n        fundingGoal = 14700000 * (10 ** tokenDecimals); \r\n        start = 1512831600; //      12/11/2017 @ 2:00pm (UTC)\r\n        deadline =1515628740; //    01/10/2018 @ 11:59pm (UTC)\r\n        tokenReward = token(0x5A82De3515fC4A4Db9BA9E869F269A1e85300092); //Token address. Modify by the current token address\r\n    }    \r\n\r\n    /**\r\n     * Fallback function\r\n     *\r\n     * The function without name is the default function that is called whenever anyone sends funds to a contract\r\n     */\r\n     /*\r\n   \r\n     */\r\n    function () payable {\r\n        uint amount = msg.value;  //amount received by the contract\r\n        uint numTokens; //number of token which will be send to the investor\r\n        numTokens = getNumTokens(amount);   //It will be true if the soft capital was reached\r\n        require(numTokens>0 && !crowdsaleClosed && now > start && now < deadline);\r\n        balanceOf[msg.sender] = safeAdd(balanceOf[msg.sender], amount);\r\n        amountRaised = safeAdd(amountRaised, amount); //Amount raised increments with the amount received by the investor\r\n        tokensSold += numTokens; //Tokens sold increased too\r\n        tokenReward.transfer(msg.sender, numTokens); //The contract sends the corresponding tokens to the investor\r\n        beneficiary.transfer(amount);               //Forward ether to beneficiary\r\n        FundTransfer(msg.sender, amount, true);\r\n    }\r\n    /*\r\n    It calculates the amount of tokens to send to the investor \r\n    */\r\n    function getNumTokens(uint _value) internal returns(uint numTokens) {\r\n        numTokens = safeMul(_value,rate)/(10 ** tokenDecimals); //Number of tokens to give is equal to the amount received by the rate \r\n        return numTokens;\r\n    }\r\n\r\n    modifier afterDeadline() { if (now >= deadline) _; }\r\n\r\n    /**\r\n     * Check if goal was reached\r\n     *\r\n     * Checks if the goal or time limit has been reached and ends the campaign and burn the tokens\r\n     */\r\n    function checkGoalReached() afterDeadline {\r\n        require(msg.sender == owner); //Checks if the one who executes the function is the owner of the contract\r\n        if (tokensSold >=fundingGoal){\r\n            GoalReached(beneficiary, amountRaised);\r\n        }\r\n        tokenReward.burn(tokenReward.balanceOf(this)); //Burns all the remaining tokens in the contract \r\n        crowdsaleClosed = true; //The crowdsale gets closed if it has expired\r\n    }\r\n\r\n\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"checkGoalReached\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"deadline\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenDecimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenReward\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundingGoal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"amountRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"start\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"Crowdsale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"capital\",\"type\":\"uint256\"}],\"name\":\"GoalReached\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"backer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"isContribution\",\"type\":\"bool\"}],\"name\":\"FundTransfer\",\"type\":\"event\"}]","ContractName":"BTCxCrowdsale","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://06902d3dde89df06b56ee240e7c3742b12e1cc6126dd515d2fc1c30fa080b76b"}]}