{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.10;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Crowdsale {\r\n\r\n\tusing SafeMath for uint256;\r\n\r\n\taddress public owner;\r\n\taddress public multisig;\r\n\tuint256 public totalRaised;\r\n\tuint256 public constant hardCap = 20000 ether;\r\n\tmapping(address => bool) public whitelist;\r\n\r\n\tmodifier isWhitelisted() {\r\n\t\trequire(whitelist[msg.sender]);\r\n\t\t_;\r\n\t}\r\n\r\n\tmodifier onlyOwner() {\r\n\t\trequire(msg.sender == owner);\r\n\t\t_;\r\n\t}\r\n\r\n\tmodifier belowCap() {\r\n\t\trequire(totalRaised < hardCap);\r\n\t\t_;\r\n\t}\r\n\r\n\tfunction Crowdsale(address _multisig) {\r\n\t\trequire (_multisig != 0);\r\n\t\towner = msg.sender;\r\n\t\tmultisig = _multisig;\r\n\t}\r\n\r\n\tfunction whitelistAddress(address _user) onlyOwner {\r\n\t\twhitelist[_user] = true;\r\n\t}\r\n\r\n\tfunction whitelistAddresses(address[] _users) onlyOwner {\r\n\t\tfor (uint i = 0; i < _users.length; i++) {\r\n\t\t\twhitelist[_users[i]] = true;\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction() payable isWhitelisted belowCap {\r\n\t\ttotalRaised = totalRaised.add(msg.value);\r\n\t\tuint contribution = msg.value;\r\n\t\tif (totalRaised > hardCap) {\r\n\t\t\tuint refundAmount = totalRaised.sub(hardCap);\r\n\t\t\tmsg.sender.transfer(refundAmount);\r\n\t\t\tcontribution = contribution.sub(refundAmount);\r\n\t\t\trefundAmount = 0;\r\n\t\t\ttotalRaised = hardCap;\r\n\t\t}\r\n\t\tmultisig.transfer(contribution);\r\n\t}\r\n\r\n\tfunction withdrawStuck() onlyOwner {\r\n\t\tmultisig.transfer(this.balance);\r\n\t}\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_users\",\"type\":\"address[]\"}],\"name\":\"whitelistAddresses\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"whitelistAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"multisig\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawStuck\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hardCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_multisig\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"Crowdsale","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000fBE55DE3383ec44c39FF839FbAF9A6d769251544","Library":"","SwarmSource":"bzzr://ca8860bc98ecbf23057eb7c556a2ae9688ed41c41b115322497fe1e9f0e68683"}]}