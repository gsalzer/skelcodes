{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\nThis file is part of the PROOF Contract.\r\n\r\nThe PROOF Contract is free software: you can redistribute it and/or\r\nmodify it under the terms of the GNU lesser General Public License as published\r\nby the Free Software Foundation, either version 3 of the License, or\r\n(at your option) any later version.\r\n\r\nThe PROOF Contract is distributed in the hope that it will be useful,\r\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\r\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\nGNU lesser General Public License for more details.\r\n\r\nYou should have received a copy of the GNU lesser General Public License\r\nalong with the PROOF Contract. If not, see <http://www.gnu.org/licenses/>.\r\n\r\n@author Ilya Svirin <i.svirin@nordavind.ru>\r\n*/\r\n\r\npragma solidity ^0.4.0;\r\n\r\ncontract owned {\r\n    address public owner;\r\n    address public newOwner;\r\n\r\n    function owned() payable {\r\n        owner = msg.sender;\r\n    }\r\n    \r\n    modifier onlyOwner {\r\n        require(owner == msg.sender);\r\n        _;\r\n    }\r\n\r\n    function changeOwner(address _owner) onlyOwner public {\r\n        require(_owner != 0);\r\n        newOwner = _owner;\r\n    }\r\n    \r\n    function confirmOwner() public {\r\n        require(newOwner == msg.sender);\r\n        owner = newOwner;\r\n        delete newOwner;\r\n    }\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 {\r\n    uint public totalSupply;\r\n    function balanceOf(address who) constant returns (uint);\r\n    function transfer(address to, uint value);\r\n    function allowance(address owner, address spender) constant returns (uint);\r\n    function transferFrom(address from, address to, uint value);\r\n    function approve(address spender, uint value);\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n}\r\n\r\ncontract ManualMigration is owned, ERC20 {\r\n    mapping (address => uint) internal balances;\r\n    address public migrationHost;\r\n\r\n    function ManualMigration(address _migrationHost) payable owned() {\r\n        migrationHost = _migrationHost;\r\n        //balances[this] = ERC20(migrationHost).balanceOf(migrationHost);\r\n    }\r\n\r\n    function migrateManual(address _tokensHolder) onlyOwner {\r\n        require(migrationHost != 0);\r\n        uint tokens = ERC20(migrationHost).balanceOf(_tokensHolder);\r\n        tokens = tokens * 125 / 100;\r\n        balances[_tokensHolder] = tokens;\r\n        totalSupply += tokens;\r\n        Transfer(migrationHost, _tokensHolder, tokens);\r\n    }\r\n    \r\n    function sealManualMigration() onlyOwner {\r\n        delete migrationHost;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Crowdsale implementation\r\n */\r\ncontract Crowdsale is ManualMigration {\r\n    uint    public etherPrice;\r\n    address public crowdsaleOwner;\r\n    uint    public totalLimitUSD;\r\n    uint    public minimalSuccessUSD;\r\n    uint    public collectedUSD;\r\n\r\n    enum State { Disabled, PreICO, CompletePreICO, Crowdsale, Enabled, Migration }\r\n    event NewState(State state);\r\n    State   public state = State.Disabled;\r\n    uint    public crowdsaleStartTime;\r\n    uint    public crowdsaleFinishTime;\r\n\r\n    modifier enabledState {\r\n        require(state == State.Enabled);\r\n        _;\r\n    }\r\n\r\n    modifier enabledOrMigrationState {\r\n        require(state == State.Enabled || state == State.Migration);\r\n        _;\r\n    }\r\n\r\n    struct Investor {\r\n        uint amountTokens;\r\n        uint amountWei;\r\n    }\r\n    mapping (address => Investor) public investors;\r\n    mapping (uint => address)     public investorsIter;\r\n    uint                          public numberOfInvestors;\r\n\r\n    function Crowdsale(address _migrationHost)\r\n        payable ManualMigration(_migrationHost) {\r\n    }\r\n    \r\n    function () payable {\r\n        require(state == State.PreICO || state == State.Crowdsale);\r\n        require(now < crowdsaleFinishTime);\r\n        uint valueWei = msg.value;\r\n        uint valueUSD = valueWei * etherPrice / 1000000000000000000;\r\n        if (collectedUSD + valueUSD > totalLimitUSD) { // don't need so much ether\r\n            valueUSD = totalLimitUSD - collectedUSD;\r\n            valueWei = valueUSD * 1000000000000000000 / etherPrice;\r\n            require(msg.sender.call.gas(3000000).value(msg.value - valueWei)());\r\n            collectedUSD = totalLimitUSD; // to be sure!\r\n        } else {\r\n            collectedUSD += valueUSD;\r\n        }\r\n        mintTokens(msg.sender, valueUSD, valueWei);\r\n    }\r\n\r\n    function depositUSD(address _who, uint _valueUSD) public onlyOwner {\r\n        require(state == State.PreICO || state == State.Crowdsale);\r\n        require(now < crowdsaleFinishTime);\r\n        require(collectedUSD + _valueUSD <= totalLimitUSD);\r\n        collectedUSD += _valueUSD;\r\n        mintTokens(_who, _valueUSD, 0);\r\n    }\r\n\r\n    function mintTokens(address _who, uint _valueUSD, uint _valueWei) internal {\r\n        uint tokensPerUSD = 100;\r\n        if (state == State.PreICO) {\r\n            if (now < crowdsaleStartTime + 1 days && _valueUSD >= 50000) {\r\n                tokensPerUSD = 150;\r\n            } else {\r\n                tokensPerUSD = 125;\r\n            }\r\n        } else if (state == State.Crowdsale) {\r\n            if (now < crowdsaleStartTime + 1 days) {\r\n                tokensPerUSD = 115;\r\n            } else if (now < crowdsaleStartTime + 1 weeks) {\r\n                tokensPerUSD = 110;\r\n            }\r\n        }\r\n        uint tokens = tokensPerUSD * _valueUSD;\r\n        require(balances[_who] + tokens > balances[_who]); // overflow\r\n        require(tokens > 0);\r\n        Investor storage inv = investors[_who];\r\n        if (inv.amountTokens == 0) { // new investor\r\n            investorsIter[numberOfInvestors++] = _who;\r\n        }\r\n        inv.amountTokens += tokens;\r\n        inv.amountWei += _valueWei;\r\n        balances[_who] += tokens;\r\n        Transfer(this, _who, tokens);\r\n        totalSupply += tokens;\r\n    }\r\n    \r\n    function startTokensSale(\r\n            address _crowdsaleOwner,\r\n            uint    _crowdsaleDurationDays,\r\n            uint    _totalLimitUSD,\r\n            uint    _minimalSuccessUSD,\r\n            uint    _etherPrice) public onlyOwner {\r\n        require(state == State.Disabled || state == State.CompletePreICO);\r\n        crowdsaleStartTime = now;\r\n        crowdsaleOwner = _crowdsaleOwner;\r\n        etherPrice = _etherPrice;\r\n        delete numberOfInvestors;\r\n        delete collectedUSD;\r\n        crowdsaleFinishTime = now + _crowdsaleDurationDays * 1 days;\r\n        totalLimitUSD = _totalLimitUSD;\r\n        minimalSuccessUSD = _minimalSuccessUSD;\r\n        if (state == State.Disabled) {\r\n            state = State.PreICO;\r\n        } else {\r\n            state = State.Crowdsale;\r\n        }\r\n        NewState(state);\r\n    }\r\n    \r\n    function timeToFinishTokensSale() public constant returns(uint t) {\r\n        require(state == State.PreICO || state == State.Crowdsale);\r\n        if (now > crowdsaleFinishTime) {\r\n            t = 0;\r\n        } else {\r\n            t = crowdsaleFinishTime - now;\r\n        }\r\n    }\r\n    \r\n    function finishTokensSale(uint _investorsToProcess) public {\r\n        require(state == State.PreICO || state == State.Crowdsale);\r\n        require(now >= crowdsaleFinishTime || collectedUSD == totalLimitUSD ||\r\n            (collectedUSD >= minimalSuccessUSD && msg.sender == owner));\r\n        if (collectedUSD < minimalSuccessUSD) {\r\n            // Investors can get their ether calling withdrawBack() function\r\n            while (_investorsToProcess > 0 && numberOfInvestors > 0) {\r\n                address addr = investorsIter[--numberOfInvestors];\r\n                Investor memory inv = investors[addr];\r\n                balances[addr] -= inv.amountTokens;\r\n                totalSupply -= inv.amountTokens;\r\n                Transfer(addr, this, inv.amountTokens);\r\n                --_investorsToProcess;\r\n                delete investorsIter[numberOfInvestors];\r\n            }\r\n            if (numberOfInvestors > 0) {\r\n                return;\r\n            }\r\n            if (state == State.PreICO) {\r\n                state = State.Disabled;\r\n            } else {\r\n                state = State.CompletePreICO;\r\n            }\r\n        } else {\r\n            while (_investorsToProcess > 0 && numberOfInvestors > 0) {\r\n                --numberOfInvestors;\r\n                --_investorsToProcess;\r\n                delete investors[investorsIter[numberOfInvestors]];\r\n                delete investorsIter[numberOfInvestors];\r\n            }\r\n            if (numberOfInvestors > 0) {\r\n                return;\r\n            }\r\n            if (state == State.PreICO) {\r\n                require(crowdsaleOwner.call.gas(3000000).value(this.balance)());\r\n                state = State.CompletePreICO;\r\n            } else {\r\n                require(crowdsaleOwner.call.gas(3000000).value(minimalSuccessUSD * 1000000000000000000 / etherPrice)());\r\n                // Create additional tokens for owner (30% of complete totalSupply)\r\n                uint tokens = 3 * totalSupply / 7;\r\n                balances[owner] = tokens;\r\n                totalSupply += tokens;\r\n                Transfer(this, owner, tokens);\r\n                state = State.Enabled;\r\n            }\r\n        }\r\n        NewState(state);\r\n    }\r\n    \r\n    // This function must be called by token holder in case of crowdsale failed\r\n    function withdrawBack() public {\r\n        require(state == State.Disabled || state == State.CompletePreICO);\r\n        uint value = investors[msg.sender].amountWei;\r\n        if (value > 0) {\r\n            delete investors[msg.sender];\r\n            require(msg.sender.call.gas(3000000).value(value)());\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @title Abstract interface for PROOF operating from registered external controllers\r\n */\r\ncontract Fund {\r\n    function transferFund(address _to, uint _value);\r\n}\r\n\r\n/**\r\n * @title Token PROOF implementation\r\n */\r\ncontract Token is Crowdsale, Fund {\r\n    \r\n    string  public standard    = 'Token 0.1';\r\n    string  public name        = 'PROOF';\r\n    string  public symbol      = \"PF\";\r\n    uint8   public decimals    = 0;\r\n\r\n    mapping (address => mapping (address => uint)) public allowed;\r\n    mapping (address => bool) public externalControllers;\r\n\r\n    modifier onlyTokenHolders {\r\n        require(balances[msg.sender] != 0);\r\n        _;\r\n    }\r\n\r\n    // Fix for the ERC20 short address attack\r\n    modifier onlyPayloadSize(uint size) {\r\n        require(msg.data.length >= size + 4);\r\n        _;\r\n    }\r\n\r\n    modifier externalController {\r\n        require(externalControllers[msg.sender]);\r\n        _;\r\n    }\r\n\r\n    function Token(address _migrationHost)\r\n        payable Crowdsale(_migrationHost) {}\r\n\r\n    function balanceOf(address who) constant returns (uint) {\r\n        return balances[who];\r\n    }\r\n\r\n    function transfer(address _to, uint _value)\r\n        public enabledState onlyPayloadSize(2 * 32) {\r\n        require(balances[msg.sender] >= _value);\r\n        require(balances[_to] + _value >= balances[_to]); // overflow\r\n        balances[msg.sender] -= _value;\r\n        balances[_to] += _value;\r\n        Transfer(msg.sender, _to, _value);\r\n    }\r\n    \r\n    function transferFrom(address _from, address _to, uint _value)\r\n        public enabledState onlyPayloadSize(3 * 32) {\r\n        require(balances[_from] >= _value);\r\n        require(balances[_to] + _value >= balances[_to]); // overflow\r\n        require(allowed[_from][msg.sender] >= _value);\r\n        balances[_from] -= _value;\r\n        balances[_to] += _value;\r\n        allowed[_from][msg.sender] -= _value;\r\n        Transfer(_from, _to, _value);\r\n    }\r\n\r\n    function approve(address _spender, uint _value) public enabledState {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) public constant enabledState\r\n        returns (uint remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    function transferFund(address _to, uint _value) public externalController {\r\n        require(balances[this] >= _value);\r\n        require(balances[_to] + _value >= balances[_to]); // overflow\r\n        balances[this] -= _value;\r\n        balances[_to] += _value;\r\n        Transfer(this, _to, _value);\r\n    }\r\n}\r\n\r\ncontract ProofVote is Token {\r\n\r\n    function ProofVote(address _migrationHost)\r\n        payable Token(_migrationHost) {}\r\n\r\n    event VotingStarted(uint weiReqFund, VoteReason voteReason);\r\n    event Voted(address indexed voter, bool inSupport);\r\n    event VotingFinished(bool inSupport);\r\n\r\n    enum Vote { NoVote, VoteYea, VoteNay }\r\n    enum VoteReason { Nothing, ReqFund, Migration, UpdateContract }\r\n\r\n    uint public weiReqFund;\r\n    uint public votingDeadline;\r\n    uint public numberOfVotes;\r\n    uint public yea;\r\n    uint public nay;\r\n    VoteReason  voteReason;\r\n    mapping (address => Vote) public votes;\r\n    mapping (uint => address) public votesIter;\r\n\r\n    address public migrationAgent;\r\n    address public migrationAgentCandidate;\r\n    address public externalControllerCandidate;\r\n\r\n    function startVoting(uint _weiReqFund) public enabledOrMigrationState onlyOwner {\r\n        require(_weiReqFund > 0);\r\n        internalStartVoting(_weiReqFund, VoteReason.ReqFund, 7);\r\n    }\r\n\r\n    function internalStartVoting(uint _weiReqFund, VoteReason _voteReason, uint _votingDurationDays) internal {\r\n        require(voteReason == VoteReason.Nothing && _weiReqFund <= this.balance);\r\n        weiReqFund = _weiReqFund;\r\n        votingDeadline = now + _votingDurationDays * 1 days;\r\n        voteReason = _voteReason;\r\n        delete yea;\r\n        delete nay;\r\n        VotingStarted(_weiReqFund, _voteReason);\r\n    }\r\n    \r\n    function votingInfo() public constant\r\n        returns(uint _weiReqFund, uint _timeToFinish, VoteReason _voteReason) {\r\n        _weiReqFund = weiReqFund;\r\n        _voteReason = voteReason;\r\n        if (votingDeadline <= now) {\r\n            _timeToFinish = 0;\r\n        } else {\r\n            _timeToFinish = votingDeadline - now;\r\n        }\r\n    }\r\n\r\n    function vote(bool _inSupport) public onlyTokenHolders returns (uint voteId) {\r\n        require(voteReason != VoteReason.Nothing);\r\n        require(votes[msg.sender] == Vote.NoVote);\r\n        require(votingDeadline > now);\r\n        voteId = numberOfVotes++;\r\n        votesIter[voteId] = msg.sender;\r\n        if (_inSupport) {\r\n            votes[msg.sender] = Vote.VoteYea;\r\n        } else {\r\n            votes[msg.sender] = Vote.VoteNay;\r\n        }\r\n        Voted(msg.sender, _inSupport);\r\n        return voteId;\r\n    }\r\n\r\n    function finishVoting(uint _votesToProcess) public returns (bool _inSupport) {\r\n        require(voteReason != VoteReason.Nothing);\r\n        require(now >= votingDeadline);\r\n\r\n        while (_votesToProcess > 0 && numberOfVotes > 0) {\r\n            address voter = votesIter[--numberOfVotes];\r\n            Vote v = votes[voter];\r\n            uint voteWeight = balances[voter];\r\n            if (v == Vote.VoteYea) {\r\n                yea += voteWeight;\r\n            } else if (v == Vote.VoteNay) {\r\n                nay += voteWeight;\r\n            }\r\n            delete votes[voter];\r\n            delete votesIter[numberOfVotes];\r\n            --_votesToProcess;\r\n        }\r\n        if (numberOfVotes > 0) {\r\n            _inSupport = false;\r\n            return;\r\n        }\r\n\r\n        _inSupport = (yea > nay);\r\n        uint weiForSend = weiReqFund;\r\n        delete weiReqFund;\r\n        delete votingDeadline;\r\n        delete numberOfVotes;\r\n\r\n        if (_inSupport) {\r\n            if (voteReason == VoteReason.ReqFund) {\r\n                require(owner.call.gas(3000000).value(weiForSend)());\r\n            } else if (voteReason == VoteReason.Migration) {\r\n                migrationAgent = migrationAgentCandidate;\r\n                require(migrationAgent.call.gas(3000000).value(this.balance)());\r\n                delete migrationAgentCandidate;\r\n                state = State.Migration;\r\n            } else if (voteReason == VoteReason.UpdateContract) {\r\n                externalControllers[externalControllerCandidate] = true;\r\n                delete externalControllerCandidate;\r\n            }\r\n        }\r\n\r\n        delete voteReason;\r\n        VotingFinished(_inSupport);\r\n    }\r\n}\r\n\r\n/**\r\n * @title Migration agent intefrace for possibility of moving tokens\r\n *        to another contract\r\n */\r\ncontract MigrationAgent {\r\n    function migrateFrom(address _from, uint _value);\r\n}\r\n\r\n/**\r\n * @title Migration functionality for possibility of moving tokens\r\n *        to another contract\r\n */\r\ncontract TokenMigration is ProofVote {\r\n    \r\n    uint public totalMigrated;\r\n\r\n    event Migrate(address indexed from, address indexed to, uint value);\r\n\r\n    function TokenMigration(address _migrationHost) payable ProofVote(_migrationHost) {}\r\n\r\n    // Migrate _value of tokens to the new token contract\r\n    function migrate() external {\r\n        require(state == State.Migration);\r\n        uint value = balances[msg.sender];\r\n        balances[msg.sender] -= value;\r\n        Transfer(msg.sender, this, value);\r\n        totalSupply -= value;\r\n        totalMigrated += value;\r\n        MigrationAgent(migrationAgent).migrateFrom(msg.sender, value);\r\n        Migrate(msg.sender, migrationAgent, value);\r\n    }\r\n\r\n    function setMigrationAgent(address _agent) external onlyOwner {\r\n        require(migrationAgent == 0 && _agent != 0);\r\n        migrationAgentCandidate = _agent;\r\n        internalStartVoting(0, VoteReason.Migration, 2);\r\n    }\r\n}\r\n\r\ncontract ProofFund is TokenMigration {\r\n\r\n    function ProofFund(address _migrationHost)\r\n        payable TokenMigration(_migrationHost) {}\r\n\r\n    function addExternalController(address _externalControllerCandidate) public onlyOwner {\r\n        require(_externalControllerCandidate != 0);\r\n        externalControllerCandidate = _externalControllerCandidate;\r\n        internalStartVoting(0, VoteReason.UpdateContract, 2);\r\n    }\r\n\r\n    function removeExternalController(address _externalController) public onlyOwner {\r\n        delete externalControllers[_externalController];\r\n    }\r\n}\r\n\r\n/**\r\n * @title Proof interface\r\n */\r\ncontract ProofAbstract {\r\n    function swypeCode(address _who) returns (uint16 _swype);\r\n    function setHash(address _who, uint16 _swype, bytes32 _hash);\r\n}\r\n\r\ncontract Proof is ProofFund {\r\n\r\n    uint    public priceInTokens;\r\n    uint    public teamFee;\r\n    address public proofImpl;\r\n\r\n    function Proof(address _migrationHost)\r\n        payable ProofFund(_migrationHost) {}\r\n\r\n    function setPrice(uint _priceInTokens) public onlyOwner {\r\n        require(_priceInTokens >= 2);\r\n        teamFee = _priceInTokens / 10;\r\n        if (teamFee == 0) {\r\n            teamFee = 1;\r\n        }\r\n        priceInTokens = _priceInTokens - teamFee;\r\n    }\r\n\r\n    function setProofImpl(address _proofImpl) public onlyOwner {\r\n        proofImpl = _proofImpl;\r\n    }\r\n\r\n    function swypeCode() public returns (uint16 _swype) {\r\n        require(proofImpl != 0);\r\n        _swype = ProofAbstract(proofImpl).swypeCode(msg.sender);\r\n    }\r\n    \r\n    function setHash(uint16 _swype, bytes32 _hash) public {\r\n        require(proofImpl != 0);\r\n        transfer(owner, teamFee);\r\n        transfer(this, priceInTokens);\r\n        ProofAbstract(proofImpl).setHash(msg.sender, _swype, _hash);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"votingDeadline\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"investorsIter\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawBack\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"migrationAgentCandidate\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numberOfVotes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimalSuccessUSD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"yea\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"votingInfo\",\"outputs\":[{\"name\":\"_weiReqFund\",\"type\":\"uint256\"},{\"name\":\"_timeToFinish\",\"type\":\"uint256\"},{\"name\":\"_voteReason\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numberOfInvestors\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"collectedUSD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_externalController\",\"type\":\"address\"}],\"name\":\"removeExternalController\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiReqFund\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_weiReqFund\",\"type\":\"uint256\"}],\"name\":\"startVoting\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"swypeCode\",\"outputs\":[{\"name\":\"_swype\",\"type\":\"uint16\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_investorsToProcess\",\"type\":\"uint256\"}],\"name\":\"finishTokensSale\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_inSupport\",\"type\":\"bool\"}],\"name\":\"vote\",\"outputs\":[{\"name\":\"voteId\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"standard\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_proofImpl\",\"type\":\"address\"}],\"name\":\"setProofImpl\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_crowdsaleOwner\",\"type\":\"address\"},{\"name\":\"_crowdsaleDurationDays\",\"type\":\"uint256\"},{\"name\":\"_totalLimitUSD\",\"type\":\"uint256\"},{\"name\":\"_minimalSuccessUSD\",\"type\":\"uint256\"},{\"name\":\"_etherPrice\",\"type\":\"uint256\"}],\"name\":\"startTokensSale\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"investors\",\"outputs\":[{\"name\":\"amountTokens\",\"type\":\"uint256\"},{\"name\":\"amountWei\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_agent\",\"type\":\"address\"}],\"name\":\"setMigrationAgent\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"timeToFinishTokensSale\",\"outputs\":[{\"name\":\"t\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalLimitUSD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"externalControllers\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"migrationAgent\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"priceInTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_externalControllerCandidate\",\"type\":\"address\"}],\"name\":\"addExternalController\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"migrate\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_priceInTokens\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"proofImpl\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalMigrated\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"externalControllerCandidate\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleFinishTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"etherPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"migrationHost\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_votesToProcess\",\"type\":\"uint256\"}],\"name\":\"finishVoting\",\"outputs\":[{\"name\":\"_inSupport\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"confirmOwner\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_swype\",\"type\":\"uint16\"},{\"name\":\"_hash\",\"type\":\"bytes32\"}],\"name\":\"setHash\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"votes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"},{\"name\":\"_valueUSD\",\"type\":\"uint256\"}],\"name\":\"depositUSD\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFund\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nay\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"votesIter\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"sealManualMigration\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokensHolder\",\"type\":\"address\"}],\"name\":\"migrateManual\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_migrationHost\",\"type\":\"address\"}],\"payable\":true,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Migrate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"weiReqFund\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"voteReason\",\"type\":\"uint8\"}],\"name\":\"VotingStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"inSupport\",\"type\":\"bool\"}],\"name\":\"Voted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"inSupport\",\"type\":\"bool\"}],\"name\":\"VotingFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"state\",\"type\":\"uint8\"}],\"name\":\"NewState\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"Proof","CompilerVersion":"v0.4.13+commit.fb4cb1a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000a2f44d258b1714463099205eeedbee2337b120b5","Library":"","SwarmSource":"bzzr://8d0993cab0378253dea58d4c3fa73bb5be1f78581d10979ad3aaff70a4867a63"}]}