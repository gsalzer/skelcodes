{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.15;\r\n\r\n\r\ncontract Owned {\r\n    // The address of the account of the current owner\r\n    address public owner;\r\n\r\n    // The publiser is the inital owner\r\n    function Owned() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * Access is restricted to the current owner\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * Transfer ownership to `_newOwner`\r\n     *\r\n     * @param _newOwner The address of the account that will become the new owner\r\n     */\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        owner = _newOwner;\r\n    }\r\n}\r\n\r\n\r\n// ERC Token Standard #20 Interface\r\n// https://github.com/ethereum/EIPs/issues/20\r\ncontract ERC20Interface {\r\n    // Total supply\r\n    uint256 public totalSupply; // Implicit getter\r\n\r\n    // Get the account balance of another account with address _owner\r\n    function balanceOf(address _owner) constant returns (uint256 balance);\r\n\r\n    // Send _amount amount of tokens to address _to\r\n    function transfer(address _to, uint256 _amount) returns (bool success);\r\n\r\n    // Send _amount amount of tokens from address _from to address _to\r\n    function transferFrom(address _from, address _to, uint256 _amount) returns (bool success);\r\n\r\n    // Allow _spender to withdraw from your account, multiple times, up to the _amount amount.\r\n    // If this function is called again it overwrites the current allowance with _amount.\r\n    // this function is required for some DEX functionality\r\n    function approve(address _spender, uint256 _amount) returns (bool success);\r\n\r\n    // Returns the amount which _spender is still allowed to withdraw from _owner\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\r\n\r\n    // Triggered when tokens are transferred.\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _amount);\r\n\r\n    // Triggered whenever approve(address _spender, uint256 _amount) is called.\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _amount);\r\n}\r\n\r\n\r\n/**\r\n * Implements ERC 20 Token standard: https://github.com/ethereum/EIPs/issues/20\r\n *\r\n * Modified version of https://github.com/ConsenSys/Tokens that implements the\r\n * original Token contract, an abstract contract for the full ERC 20 Token standard\r\n */\r\ncontract EngravedToken is ERC20Interface, Owned {\r\n    string public constant symbol = \"EGR\";\r\n    string public constant name = \"Engraved Token\";\r\n    uint8 public constant decimals = 3;\r\n\r\n    // Core team incentive distribution\r\n    bool public incentiveDistributionStarted = false;\r\n    uint256 public incentiveDistributionDate = 0;\r\n    uint256 public incentiveDistributionRound = 1;\r\n    uint256 public incentiveDistributionMaxRounds = 4;\r\n    uint256 public incentiveDistributionInterval = 1 years;\r\n    uint256 public incentiveDistributionRoundDenominator = 2;\r\n\r\n    // Core team incentives\r\n    struct Incentive {\r\n        address recipient;\r\n        uint8 percentage;\r\n    }\r\n\r\n    Incentive[] public incentives;\r\n\r\n    // Token starts if the locked state restricting transfers\r\n    bool public locked;\r\n\r\n    // Balances for each account\r\n    mapping(address => uint256) balances;\r\n\r\n    // Owner of account approves the transfer of an amount to another account\r\n    mapping(address => mapping (address => uint256)) allowed;\r\n\r\n    // Constructor\r\n    function EngravedToken() {\r\n        owner = msg.sender;\r\n        balances[owner] = 0;\r\n        totalSupply = 0;\r\n        locked = true;\r\n\r\n        incentives.push(Incentive(0xCA73c8705cbc5942f42Ad39bC7EAeCA8228894BB, 5)); // 5% founder\r\n        incentives.push(Incentive(0xd721f5c14a4AF2625AF1E1E107Cc148C8660BA72, 5)); // 5% founder\r\n    }\r\n\r\n    /**\r\n     * Get balance of `_owner`\r\n     *\r\n     * @param _owner The address from which the balance will be retrieved\r\n     * @return The balance\r\n     */\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    /**\r\n     * Send `_amount` token to `_to` from `msg.sender`\r\n     *\r\n     * @param _to The address of the recipient\r\n     * @param _amount The amount of token to be transferred\r\n     * @return Whether the transfer was successful or not\r\n     */\r\n    function transfer(address _to, uint256 _amount) returns (bool success) {\r\n\r\n        require(!locked);\r\n        require(balances[msg.sender] >= _amount);\r\n        require(_amount > 0);\r\n        assert(balances[_to] + _amount > balances[_to]);\r\n\r\n        balances[msg.sender] -= _amount;\r\n        balances[_to] += _amount;\r\n        Transfer(msg.sender, _to, _amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Send `_amount` token to `_to` from `_from` on the condition it is approved by `_from`\r\n     *\r\n     * @param _from The address of the sender\r\n     * @param _to The address of the recipient\r\n     * @param _amount The amount of token to be transferred\r\n     * @return Whether the transfer was successful or not\r\n     */\r\n    function transferFrom (\r\n        address _from,\r\n        address _to,\r\n        uint256 _amount\r\n    ) public returns (bool success) {\r\n        require(!locked);\r\n        require(balances[_from] >= _amount);\r\n        require(allowed[_from][msg.sender] >= _amount);\r\n        require(_amount > 0);\r\n        assert(balances[_to] + _amount > balances[_to]);\r\n\r\n        balances[_from] -= _amount;\r\n        allowed[_from][msg.sender] -= _amount;\r\n        balances[_to] += _amount;\r\n        Transfer(_from, _to, _amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * `msg.sender` approves `_spender` to spend `_amount` tokens\r\n     *\r\n     * @param _spender The address of the account able to transfer the tokens\r\n     * @param _amount The amount of tokens to be approved for transfer\r\n     * @return Whether the approval was successful or not\r\n     */\r\n    function approve(address _spender, uint256 _amount) returns (bool success) {\r\n        require(!locked);\r\n\r\n        // Update allowance\r\n        allowed[msg.sender][_spender] = _amount;\r\n\r\n        // Notify listners\r\n        Approval(msg.sender, _spender, _amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Get the amount of remaining tokens that `_spender` is allowed to spend from `_owner`\r\n     *\r\n     * @param _owner The address of the account owning tokens\r\n     * @param _spender The address of the account able to transfer the tokens\r\n     * @return Amount of remaining tokens allowed to spent\r\n     */\r\n    function allowance(address _owner, address _spender) public constant returns (\r\n        uint256 remaining\r\n    ) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    /**\r\n     * Starts incentive distribution\r\n     *\r\n     * Called by the crowdsale contract when tokenholders voted\r\n     * for the transfer of ownership of the token contract to DCorp\r\n     *\r\n     * @return Whether the incentive distribution was started\r\n     */\r\n    function startIncentiveDistribution() public onlyOwner returns (bool success) {\r\n        if (!incentiveDistributionStarted) {\r\n            incentiveDistributionDate = now;\r\n            incentiveDistributionStarted = true;\r\n        }\r\n\r\n        return incentiveDistributionStarted;\r\n    }\r\n\r\n    /**\r\n     * Distributes incentives over the core team members as\r\n     * described in the whitepaper\r\n     */\r\n    function withdrawIncentives() public {\r\n        // Crowdsale triggers incentive distribution\r\n        require(incentiveDistributionStarted);\r\n\r\n        // Enforce max distribution rounds\r\n        require(incentiveDistributionRound < incentiveDistributionMaxRounds);\r\n\r\n        // Enforce time interval\r\n        require(now > incentiveDistributionDate);\r\n\r\n        uint256 totalSupplyToDate = totalSupply;\r\n        uint256 denominator = 1;\r\n\r\n        // Incentive decreased each round\r\n        if (incentiveDistributionRound > 1) {\r\n            denominator = incentiveDistributionRoundDenominator**(incentiveDistributionRound - 1);\r\n        }\r\n\r\n        for (uint256 i = 0; i < incentives.length; i++) {\r\n\r\n            uint256 amount = totalSupplyToDate * incentives[i].percentage / 10**2 / denominator;\r\n            address recipient = incentives[i].recipient;\r\n\r\n            // Create tokens\r\n            balances[recipient] += amount;\r\n            totalSupply += amount;\r\n\r\n            // Notify listeners\r\n            Transfer(0, this, amount);\r\n            Transfer(this, recipient, amount);\r\n        }\r\n\r\n        // Next round\r\n        incentiveDistributionDate = now + incentiveDistributionInterval;\r\n        incentiveDistributionRound++;\r\n    }\r\n\r\n    /**\r\n     * Unlocks the token irreversibly so that the transfering of value is enabled\r\n     *\r\n     * @return Whether the unlocking was successful or not\r\n     */\r\n    function unlock() public onlyOwner returns (bool success) {\r\n        locked = false;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Issues `_amount` new tokens to `_recipient` (_amount < 0 guarantees that tokens are never removed)\r\n     *\r\n     * @param _recipient The address to which the tokens will be issued\r\n     * @param _amount The amount of new tokens to issue\r\n     * @return Whether the approval was successful or not\r\n     */\r\n    function issue(address _recipient, uint256 _amount) public onlyOwner returns (bool success) {\r\n        // Guarantee positive\r\n        require(_amount >= 0);\r\n\r\n        // Create tokens\r\n        balances[_recipient] += _amount;\r\n        totalSupply += _amount;\r\n\r\n        // Notify listners\r\n        Transfer(0, owner, _amount);\r\n        Transfer(owner, _recipient, _amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Prevents accidental sending of ether\r\n     */\r\n    function () {\r\n        assert(false);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"incentiveDistributionStarted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"incentiveDistributionRoundDenominator\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startIncentiveDistribution\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"incentiveDistributionRound\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"incentiveDistributionInterval\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipient\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"issue\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unlock\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"incentiveDistributionMaxRounds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"locked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawIncentives\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"incentives\",\"outputs\":[{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"percentage\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"incentiveDistributionDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":false,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"EngravedToken","CompilerVersion":"v0.4.15+commit.bbb8e64f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://ee8a9c112372068917fa2b65babde5ec40a1ed85ee49b77026307e6890f95d2d"}]}