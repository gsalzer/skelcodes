{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n\r\ncontract Draw is Ownable {\r\n\r\n    address[9] private players;\r\n    address public last_winner;\r\n    uint public draw_number;\r\n    uint public slots_left;\r\n    uint private MAX_PLAYERS = players.length;\r\n    uint private counter = 0;\r\n    uint private t0 = now;\r\n    uint private tdelta;\r\n    uint private index;\r\n    uint private owner_balance = 0 finney;\r\n\r\n    function Draw() public {\r\n        initGame();\r\n        draw_number = 1;\r\n        last_winner = address(0);\r\n    }\r\n\r\n    function initGame() internal {\r\n        counter = 0;\r\n        slots_left = MAX_PLAYERS;\r\n        draw_number++;\r\n        for (uint i = 0; i < players.length; i++) {\r\n            players[i] = address(0);\r\n        }\r\n    }\r\n\r\n    function () external payable {\r\n        for (uint i = 0; i < players.length; i++) {\r\n            require(players[i] != msg.sender);\r\n        }\r\n        joinGame();\r\n    }\r\n\r\n    function joinGame() public payable {\r\n        require(msg.sender != owner);\r\n        require(msg.value == 100 finney);\r\n        require(counter < MAX_PLAYERS);\r\n\r\n        players[counter] = msg.sender;\r\n        counter++;\r\n        slots_left = MAX_PLAYERS - counter;\r\n\r\n        if (counter >= MAX_PLAYERS) {\r\n            last_winner = endGame();\r\n        }\r\n    }\r\n\r\n    function endGame() internal returns (address winner) {\r\n        require(this.balance - owner_balance >= 900 finney);\r\n        tdelta = now - t0;\r\n        index = uint(tdelta % MAX_PLAYERS);\r\n        t0 = now;\r\n        winner = players[index];\r\n        initGame();\r\n        winner.transfer(855 finney);\r\n        owner_balance = owner_balance + 45 finney;\r\n    }\r\n\r\n    function getBalance() public view onlyOwner returns (uint) {\r\n        return owner_balance;\r\n    }\r\n\r\n    function withdrawlBalance() public onlyOwner {\r\n        msg.sender.transfer(owner_balance);\r\n        owner_balance = 0;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"draw_number\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"slots_left\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"last_winner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"joinGame\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawlBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Draw","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://47de19f3f53d7742fdc32f05ee519ab813cc9b12cd582edc721f39430cd9144a"}]}