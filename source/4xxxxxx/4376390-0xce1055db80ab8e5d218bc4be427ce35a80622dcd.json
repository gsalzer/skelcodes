{"status":"1","message":"OK","result":[{"SourceCode":"contract ERC20Interface {\r\n    // Get the total token supply\r\n    function totalSupply() public constant returns (uint256 _totalSupply);\r\n \r\n    // Get the account balance of another account with address _owner\r\n    function balanceOf(address _owner) public constant returns (uint256 balance);\r\n \r\n    // Send _value amount of tokens to address _to\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n  \r\n    // Triggered when tokens are transferred.\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n \r\n    // Triggered whenever approve(address _spender, uint256 _value) is called.\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n \r\ncontract KR is ERC20Interface {\r\n    uint public constant decimals = 10;\r\n\r\n    string public constant symbol = \"KR\";\r\n    string public constant name = \"KR\";\r\n\r\n    uint private constant icoSupplyRatio = 30;  // percentage of _icoSupply in _totalSupply. Preset: 30%\r\n    uint private constant bonusRatio = 20;   // sale bonus percentage\r\n    uint private constant bonusBound = 10;  // First 10% of totalSupply get bonus\r\n    uint private constant initialPrice = 5000; // Initially, 5000KR KR = 1 ETH\r\n\r\n    bool public _selling = true;\r\n    uint public _totalSupply = 10 ** 19; // total supply is 10^19 unit, equivalent to 10^9 KRC\r\n    uint public _originalBuyPrice = (10 ** 18) / (initialPrice * 10**decimals); // original buy in wei of one unit. Ajustable.\r\n\r\n    // Owner of this contract\r\n    address public owner;\r\n \r\n    // Balances KRC for each account\r\n    mapping(address => uint256) balances;\r\n    \r\n    // _icoSupply is the avalable unit. Initially, it is _totalSupply\r\n    // uint public _icoSupply = _totalSupply - (_totalSupply * bonusBound)/100 * bonusRatio;\r\n    uint public _icoSupply = (_totalSupply * icoSupplyRatio) / 100;\r\n    \r\n    // amount of units with bonus\r\n    uint public bonusRemain = (_totalSupply * bonusBound) / 100;//10% _totalSupply\r\n\r\n\r\n    /* Functions with this modifier can only be executed by the owner\r\n     */\r\n    modifier onlyOwner() {\r\n        if (msg.sender != owner) {\r\n            revert();\r\n        }\r\n        _;\r\n    }\r\n\r\n    /* Functions with this modifier can only be executed by users except owners\r\n     */\r\n    modifier onlyNotOwner() {\r\n        if (msg.sender == owner) {\r\n            revert();\r\n        }\r\n        _;\r\n    }\r\n\r\n    /* Functions with this modifier check on sale status\r\n     * Only allow sale if _selling is on\r\n     */\r\n    modifier onSale() {\r\n        if (!_selling || (_icoSupply <= 0) ) { \r\n            revert();\r\n        }\r\n        _;\r\n    }\r\n\r\n    /* Functions with this modifier check the validity of original buy price\r\n     */\r\n    modifier validOriginalBuyPrice() {\r\n        if(_originalBuyPrice <= 0) {\r\n            revert();\r\n        }\r\n        _;\r\n    }\r\n\r\n    /// @dev Constructor\r\n    function KR() \r\n        public {\r\n        owner = msg.sender;\r\n        balances[owner] = _totalSupply;\r\n    }\r\n    \r\n    /// @dev Gets totalSupply\r\n    /// @return Total supply\r\n    function totalSupply()\r\n        public \r\n        constant \r\n        returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n \r\n    /// @dev Gets account's balance\r\n    /// @param _addr Address of the account\r\n    /// @return Account balance\r\n    function balanceOf(address _addr) \r\n        public\r\n        constant \r\n        returns (uint256) {\r\n        return balances[_addr];\r\n    }\r\n \r\n    /// @dev Transfers the balance from Multisig wallet to an account\r\n    /// @param _to Recipient address\r\n    /// @param _amount Transfered amount in unit\r\n    /// @return Transfer status\r\n    function transfer(address _to, uint256 _amount)\r\n        public \r\n        returns (bool) {\r\n        // if sender's balance has enough unit and amount > 0, \r\n        //      and the sum is not overflow,\r\n        // then do transfer \r\n        if ( (balances[msg.sender] >= _amount) &&\r\n             (_amount > 0) && \r\n             (balances[_to] + _amount > balances[_to]) ) {  \r\n\r\n            balances[msg.sender] -= _amount;\r\n            balances[_to] += _amount;\r\n            Transfer(msg.sender, _to, _amount);\r\n            \r\n            return true;\r\n\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /// @dev Enables sale \r\n    function turnOnSale() onlyOwner \r\n        public {\r\n        _selling = true;\r\n    }\r\n\r\n    /// @dev Disables sale\r\n    function turnOffSale() onlyOwner \r\n        public {\r\n        _selling = false;\r\n    }\r\n\r\n    /// @dev Gets selling status\r\n    function isSellingNow() \r\n        public \r\n        constant\r\n        returns (bool) {\r\n        return _selling;\r\n    }\r\n\r\n    /// @dev Updates buy price (owner ONLY)\r\n    /// @param newBuyPrice New buy price (in unit)\r\n    function setBuyPrice(uint newBuyPrice) onlyOwner \r\n        public {\r\n        _originalBuyPrice = newBuyPrice;\r\n    }\r\n    \r\n    /*\r\n     *  Exchange wei for KR.\r\n     *  modifier _icoSupply > 0\r\n     *  if requestedCoin > _icoSupply \r\n     *      revert\r\n     *  \r\n     *  Buy transaction must follow this policy:\r\n     *      if requestedCoin < bonusRemain\r\n     *          actualCoin = requestedCoin + 20%requestedCoin\r\n     *          bonusRemain -= requestedCoin\r\n     *          _icoSupply -= requestedCoin\r\n     *      else\r\n     *          actualCoin = requestedCoin + 20%bonusRemain\r\n     *          _icoSupply -= requested\r\n     *          bonusRemain = 0\r\n     *\r\n     *   Return: \r\n     *       amount: actual amount of units sold.\r\n     *\r\n     *   NOTE: msg.value is in wei\r\n     */ \r\n    /// @dev Buys KR\r\n    /// @return Amount of actual sold units \r\n    function buy() payable onlyNotOwner validOriginalBuyPrice onSale \r\n        public\r\n        returns (uint256 amount) {\r\n        // convert buy amount in wei to number of unit want to buy\r\n        uint requestedUnits = msg.value / _originalBuyPrice ;\r\n        \r\n        //check requestedUnits > _icoSupply\r\n        if(requestedUnits > _icoSupply){\r\n            revert();\r\n        }\r\n        \r\n        // amount of KR bought\r\n        uint actualSoldUnits = 0;\r\n\r\n        // If bonus is available and requested amount of units is less than bonus amount\r\n        if (requestedUnits < bonusRemain) {\r\n            // calculate actual sold units with bonus to the requested amount of units\r\n            actualSoldUnits = requestedUnits + ((requestedUnits*bonusRatio) / 100); \r\n            // decrease _icoSupply\r\n            _icoSupply -= requestedUnits;\r\n            \r\n            // decrease available bonus amount\r\n            bonusRemain -= requestedUnits;\r\n        }\r\n        else {\r\n            // calculate actual sold units with bonus - if available - to the requested amount of units\r\n            actualSoldUnits = requestedUnits + (bonusRemain * bonusRatio) / 100;\r\n            \r\n            // otherwise, decrease _icoSupply by the requested amount\r\n            _icoSupply -= requestedUnits;\r\n\r\n            // no more bonus\r\n            bonusRemain = 0;\r\n        }\r\n\r\n        // prepare transfer data\r\n        balances[owner] -= actualSoldUnits;\r\n        balances[msg.sender] += actualSoldUnits;\r\n\r\n        //transfer ETH to owner\r\n        owner.transfer(msg.value);\r\n        \r\n        // submit transfer\r\n        Transfer(owner, msg.sender, requestedUnits);\r\n\r\n        return requestedUnits;\r\n    }\r\n    \r\n    /// @dev Withdraws Ether in contract (Owner only)\r\n    function withdraw() onlyOwner \r\n        public \r\n        returns (bool) {\r\n        return owner.send(this.balance);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"turnOffSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_icoSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusRemain\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newBuyPrice\",\"type\":\"uint256\"}],\"name\":\"setBuyPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_originalBuyPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isSellingNow\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buy\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"turnOnSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_selling\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"KR","CompilerVersion":"v0.4.17+commit.bdeb9e52","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://609920e42a0958ad1ea54bd6aa93901344783203bd84f2f2f291ed95018f4ef8"}]}