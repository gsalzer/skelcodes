{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.17;\r\n\r\n\r\n/// @title SafeMath\r\n/// @dev Math operations with safety checks that throw on error.\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n/// @title ERC20 interface\r\n/// @dev Full ERC20 interface described at https://github.com/ethereum/EIPs/issues/20.\r\ncontract ERC20 {\r\n\r\n  // EVENTS\r\n\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n  // PUBLIC FUNCTIONS\r\n\r\n  function transfer(address _to, uint256 _value) public returns (bool);\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool);\r\n  function approve(address _spender, uint256 _value) public returns (bool);\r\n  function balanceOf(address _owner) public constant returns (uint256);\r\n  function allowance(address _owner, address _spender) public constant returns (uint256);\r\n\r\n  // FIELDS\r\n\r\n  uint256 public totalSupply;\r\n}\r\n\r\n\r\n/// @title Standard ERC20 token\r\n/// @dev Implementation of the basic standard token.\r\ncontract StandardToken is ERC20 {\r\n  using SafeMath for uint256;\r\n\r\n  // PUBLIC FUNCTIONS\r\n\r\n  /// @dev Transfers tokens to a specified address.\r\n  /// @param _to The address which you want to transfer to.\r\n  /// @param _value The amount of tokens to be transferred.\r\n  /// @return A boolean that indicates if the operation was successful.\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n  \r\n  /// @dev Transfers tokens from one address to another.\r\n  /// @param _from The address which you want to send tokens from.\r\n  /// @param _to The address which you want to transfer to.\r\n  /// @param _value The amount of tokens to be transferred.\r\n  /// @return A boolean that indicates if the operation was successful.\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowances[_from][msg.sender]);\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowances[_from][msg.sender] = allowances[_from][msg.sender].sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /// @dev Approves the specified address to spend the specified amount of tokens on behalf of msg.sender.\r\n  /// Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n  /// and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n  /// race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n  /// https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n  /// @param _spender The address which will spend tokens.\r\n  /// @param _value The amount of tokens to be spent.\r\n  /// @return A boolean that indicates if the operation was successful.\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowances[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /// @dev Gets the balance of the specified address.\r\n  /// @param _owner The address to query the balance of.\r\n  /// @return An uint256 representing the amount owned by the specified address.\r\n  function balanceOf(address _owner) public constant returns (uint256) {\r\n    return balances[_owner];\r\n  }\r\n\r\n  /// @dev Function to check the amount of tokens that an owner allowances to a spender.\r\n  /// @param _owner The address which owns tokens.\r\n  /// @param _spender The address which will spend tokens.\r\n  /// @return A uint256 specifying the amount of tokens still available for the spender.\r\n  function allowance(address _owner, address _spender) public constant returns (uint256) {\r\n    return allowances[_owner][_spender];\r\n  }\r\n\r\n  // FIELDS\r\n\r\n  mapping (address => uint256) balances;\r\n  mapping (address => mapping (address => uint256)) allowances;\r\n}\r\n\r\n\r\n/// @title Ownable\r\n/// @dev The Ownable contract has an owner address, and provides basic authorization control\r\n/// functions, this simplifies the implementation of \"user permissions\".\r\ncontract Ownable {\r\n\r\n  // EVENTS\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  // PUBLIC FUNCTIONS\r\n\r\n  /// @dev The Ownable constructor sets the original `owner` of the contract to the sender account.\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /// @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n  /// @param newOwner The address to transfer ownership to.\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n  // MODIFIERS\r\n\r\n  /// @dev Throws if called by any account other than the owner.\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  // FIELDS\r\n\r\n  address public owner;\r\n}\r\n\r\n\r\n/// @title Papyrus Prototype Token (PRP) smart contract.\r\ncontract PapyrusPrototypeToken is StandardToken, Ownable {\r\n\r\n  // EVENTS\r\n\r\n  event Mint(address indexed to, uint256 amount, uint256 priceUsd);\r\n  event MintFinished();\r\n  event Burn(address indexed burner, uint256 amount);\r\n  event TransferableChanged(bool transferable);\r\n\r\n  // PUBLIC FUNCTIONS\r\n\r\n  // If ether is sent to this address, send it back\r\n  function() public { revert(); }\r\n\r\n  // Check transfer ability and sender address before transfer\r\n  function transfer(address _to, uint256 _value) canTransfer public returns (bool) {\r\n    return super.transfer(_to, _value);\r\n  }\r\n\r\n  // Check transfer ability and sender address before transfer\r\n  function transferFrom(address _from, address _to, uint256 _value) canTransfer public returns (bool) {\r\n    return super.transferFrom(_from, _to, _value);\r\n  }\r\n\r\n  /// @dev Function to mint tokens.\r\n  /// @param _to The address that will receive the minted tokens.\r\n  /// @param _amount The amount of tokens to mint.\r\n  /// @param _priceUsd The price of minted token at moment of purchase in USD with 18 decimals.\r\n  /// @return A boolean that indicates if the operation was successful.\r\n  function mint(address _to, uint256 _amount, uint256 _priceUsd) onlyOwner canMint public returns (bool) {\r\n    totalSupply = totalSupply.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    if (_priceUsd != 0) {\r\n      uint256 amountUsd = _amount.mul(_priceUsd).div(10**18);\r\n      totalCollected = totalCollected.add(amountUsd);\r\n    }\r\n    Mint(_to, _amount, _priceUsd);\r\n    Transfer(0x0, _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /// @dev Function to stop minting new tokens.\r\n  /// @return A boolean that indicates if the operation was successful.\r\n  function finishMinting() onlyOwner canMint public returns (bool) {\r\n    mintingFinished = true;\r\n    MintFinished();\r\n    return true;\r\n  }\r\n\r\n  /// @dev Burns a specific amount of tokens.\r\n  /// @param _value The amount of token to be burned.\r\n  function burn(uint256 _value) public {\r\n    require(_value > 0);\r\n    require(_value <= balances[msg.sender]);\r\n    address burner = msg.sender;\r\n    balances[burner] = balances[burner].sub(_value);\r\n    totalSupply = totalSupply.sub(_value);\r\n    totalBurned = totalBurned.add(_value);\r\n    Burn(burner, _value);\r\n  }\r\n\r\n  /// @dev Change ability to transfer tokens by users.\r\n  /// @return A boolean that indicates if the operation was successful.\r\n  function setTransferable(bool _transferable) onlyOwner public returns (bool) {\r\n    require(transferable != _transferable);\r\n    transferable = _transferable;\r\n    TransferableChanged(transferable);\r\n    return true;\r\n  }\r\n\r\n  // MODIFIERS\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  modifier canTransfer() {\r\n    require(transferable || msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  // FIELDS\r\n\r\n  // Standard fields used to describe the token\r\n  string public name = \"Papyrus Prototype Token\";\r\n  string public symbol = \"PRP\";\r\n  string public version = \"H0.1\";\r\n  uint8 public decimals = 18;\r\n\r\n  // At the start of the token existence token is not transferable\r\n  bool public transferable = false;\r\n\r\n  // Will be set to true when minting tokens will be finished\r\n  bool public mintingFinished = false;\r\n\r\n  // Amount of burned tokens\r\n  uint256 public totalBurned;\r\n\r\n  // Amount of USD (with 18 decimals) collected during sale phase\r\n  uint256 public totalCollected;\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_priceUsd\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transferable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_transferable\",\"type\":\"bool\"}],\"name\":\"setTransferable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalBurned\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalCollected\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"priceUsd\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"transferable\",\"type\":\"bool\"}],\"name\":\"TransferableChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"PapyrusPrototypeToken","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://b03bce624aa211283f00edf594925f192a279d8dabb179efe6f93d1f7662b1d8"}]}