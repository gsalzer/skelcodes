{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.15;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) constant returns (uint256);\r\n  function transfer(address to, uint256 value) returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) returns (bool) {\r\n    require(_to != address(0));\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) returns (bool);\r\n  function approve(address spender, uint256 value) returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\r\n    require(_to != address(0));\r\n\r\n    var _allowance = allowed[_from][msg.sender];\r\n\r\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n    // require (_value <= _allowance);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) returns (bool) {\r\n\r\n    // To change the approve amount you first have to reduce the addresses`\r\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n    //  already 0 to mitigate the race condition described here:\r\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   */\r\n  function increaseApproval (address _spender, uint _addedValue)\r\n    returns (bool success) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  function decreaseApproval (address _spender, uint _subtractedValue)\r\n    returns (bool success) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title SimpleToken\r\n * @dev Very simple ERC20 Token example, where all tokens are pre-assigned to the creator.\r\n * Note they can later distribute these tokens as they wish using `transfer` and other\r\n * `StandardToken` functions.\r\n */\r\ncontract OpportyToken is StandardToken {\r\n\r\n  string public constant name = \"OpportyToken\";\r\n  string public constant symbol = \"OPP\";\r\n  uint8 public constant decimals = 18;\r\n\r\n  uint256 public constant INITIAL_SUPPLY = 1000000000 * (10 ** uint256(decimals));\r\n\r\n  /**\r\n   * @dev Contructor that gives msg.sender all of existing tokens.\r\n   */\r\n  function OpportyToken() {\r\n    totalSupply = INITIAL_SUPPLY;\r\n    balances[msg.sender] = INITIAL_SUPPLY;\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    Unpause();\r\n  }\r\n}\r\n\r\ncontract HoldPresaleContract is Ownable {\r\n  using SafeMath for uint256;\r\n  // Addresses and contracts\r\n  OpportyToken public OppToken;\r\n  address private presaleCont;\r\n\r\n  struct Holder {\r\n    bool isActive;\r\n    uint tokens;\r\n    uint8 holdPeriod;\r\n    uint holdPeriodTimestamp;\r\n    bool withdrawed;\r\n  }\r\n\r\n  mapping(address => Holder) public holderList;\r\n  mapping(uint => address) private holderIndexes;\r\n\r\n  mapping (uint => address) private assetOwners;\r\n  mapping (address => uint) private assetOwnersIndex;\r\n  uint public assetOwnersIndexes;\r\n\r\n  uint private holderIndex;\r\n\r\n  event TokensTransfered(address contributor , uint amount);\r\n  event Hold(address sender, address contributor, uint amount, uint8 holdPeriod);\r\n\r\n  modifier onlyAssetsOwners() {\r\n    require(assetOwnersIndex[msg.sender] > 0);\r\n    _;\r\n  }\r\n\r\n  /* constructor */\r\n  function HoldPresaleContract(address _OppToken) {\r\n    OppToken = OpportyToken(_OppToken);\r\n  }\r\n\r\n  function setPresaleCont(address pres)  public onlyOwner\r\n  {\r\n    presaleCont = pres;\r\n  }\r\n\r\n  function addHolder(address holder, uint tokens, uint8 timed, uint timest) onlyAssetsOwners external {\r\n    if (holderList[holder].isActive == false) {\r\n      holderList[holder].isActive = true;\r\n      holderList[holder].tokens = tokens;\r\n      holderList[holder].holdPeriod = timed;\r\n      holderList[holder].holdPeriodTimestamp = timest;\r\n      holderIndexes[holderIndex] = holder;\r\n      holderIndex++;\r\n    } else {\r\n      holderList[holder].tokens += tokens;\r\n      holderList[holder].holdPeriod = timed;\r\n      holderList[holder].holdPeriodTimestamp = timest;\r\n    }\r\n    Hold(msg.sender, holder, tokens, timed);\r\n  }\r\n\r\n  function getBalance() constant returns (uint) {\r\n    return OppToken.balanceOf(this);\r\n  }\r\n\r\n  function unlockTokens() external {\r\n    address contributor = msg.sender;\r\n\r\n    if (holderList[contributor].isActive && !holderList[contributor].withdrawed) {\r\n      if (now >= holderList[contributor].holdPeriodTimestamp) {\r\n        if ( OppToken.transfer( msg.sender, holderList[contributor].tokens ) ) {\r\n          holderList[contributor].withdrawed = true;\r\n          TokensTransfered(contributor,  holderList[contributor].tokens);\r\n        }\r\n      } else {\r\n        revert();\r\n      }\r\n    } else {\r\n      revert();\r\n    }\r\n  }\r\n\r\n  function addAssetsOwner(address _owner) public onlyOwner {\r\n    assetOwnersIndexes++;\r\n    assetOwners[assetOwnersIndexes] = _owner;\r\n    assetOwnersIndex[_owner] = assetOwnersIndexes;\r\n  }\r\n  function removeAssetsOwner(address _owner) public onlyOwner {\r\n    uint index = assetOwnersIndex[_owner];\r\n    delete assetOwnersIndex[_owner];\r\n    delete assetOwners[index];\r\n    assetOwnersIndexes--;\r\n  }\r\n  function getAssetsOwners(uint _index) onlyOwner public constant returns (address) {\r\n    return assetOwners[_index];\r\n  }\r\n}\r\n\r\ncontract OpportyPresale is Pausable {\r\n  using SafeMath for uint256;\r\n\r\n  OpportyToken public token;\r\n\r\n  HoldPresaleContract public holdContract;\r\n\r\n  enum SaleState  { NEW, SALE, ENDED }\r\n  SaleState public state;\r\n\r\n  uint public endDate;\r\n  uint public endSaleDate;\r\n\r\n  // address where funds are collected\r\n  address private wallet;\r\n\r\n  // total ETH collected\r\n  uint public ethRaised;\r\n\r\n  uint private price;\r\n\r\n  uint public tokenRaised;\r\n  bool public tokensTransferredToHold;\r\n\r\n  /* Events */\r\n  event SaleStarted(uint blockNumber);\r\n  event SaleEnded(uint blockNumber);\r\n  event FundTransfered(address contrib, uint amount);\r\n  event WithdrawedEthToWallet(uint amount);\r\n  event ManualChangeEndDate(uint beforeDate, uint afterDate);\r\n  event TokensTransferedToHold(address hold, uint amount);\r\n  event AddedToWhiteList(address inv, uint amount, uint8 holdPeriod, uint8 bonus);\r\n  event AddedToHolder( address sender, uint tokenAmount, uint8 holdPeriod, uint holdTimestamp);\r\n\r\n  struct WhitelistContributor {\r\n    bool isActive;\r\n    uint invAmount;\r\n    uint8 holdPeriod;\r\n    uint holdTimestamp;\r\n    uint8 bonus;\r\n    bool payed;\r\n  }\r\n\r\n  mapping(address => WhitelistContributor) public whiteList;\r\n  mapping(uint => address) private whitelistIndexes;\r\n  uint private whitelistIndex;\r\n\r\n  /* constructor */\r\n  function OpportyPresale(\r\n    address tokenAddress,\r\n    address walletAddress,\r\n    uint end,\r\n    uint endSale,\r\n    address holdCont )\r\n  {\r\n    token = OpportyToken(tokenAddress);\r\n    state = SaleState.NEW;\r\n\r\n    endDate     = end;\r\n    endSaleDate = endSale;\r\n    price       = 0.0002 * 1 ether;\r\n    wallet      = walletAddress;\r\n\r\n    holdContract = HoldPresaleContract(holdCont);\r\n  }\r\n\r\n  function startPresale() public onlyOwner {\r\n    require(state == SaleState.NEW);\r\n    state = SaleState.SALE;\r\n    SaleStarted(block.number);\r\n  }\r\n\r\n  function endPresale() public onlyOwner {\r\n    require(state == SaleState.SALE);\r\n    state = SaleState.ENDED;\r\n    SaleEnded(block.number);\r\n  }\r\n\r\n  function addToWhitelist(address inv, uint amount, uint8 holdPeriod, uint8 bonus) public onlyOwner {\r\n    require(state == SaleState.NEW || state == SaleState.SALE);\r\n    require(holdPeriod == 1 || holdPeriod == 3 || holdPeriod == 6 || holdPeriod == 12);\r\n\r\n    amount = amount * (10 ** 18);\r\n\r\n    if (whiteList[inv].isActive == false) {\r\n      whiteList[inv].isActive = true;\r\n      whiteList[inv].payed    = false;\r\n      whitelistIndexes[whitelistIndex] = inv;\r\n      whitelistIndex++;\r\n    }\r\n\r\n    whiteList[inv].invAmount  = amount;\r\n    whiteList[inv].holdPeriod = holdPeriod;\r\n    whiteList[inv].bonus = bonus;\r\n\r\n    if (whiteList[inv].holdPeriod==1)  whiteList[inv].holdTimestamp = endSaleDate.add(30 days); else\r\n    if (whiteList[inv].holdPeriod==3)  whiteList[inv].holdTimestamp = endSaleDate.add(92 days); else\r\n    if (whiteList[inv].holdPeriod==6)  whiteList[inv].holdTimestamp = endSaleDate.add(182 days); else\r\n    if (whiteList[inv].holdPeriod==12) whiteList[inv].holdTimestamp = endSaleDate.add(1 years);\r\n\r\n    AddedToWhiteList(inv, whiteList[inv].invAmount, whiteList[inv].holdPeriod,  whiteList[inv].bonus);\r\n  }\r\n\r\n  function() whenNotPaused public payable {\r\n    require(state == SaleState.SALE);\r\n    require(msg.value >= 0.3 ether);\r\n    require(whiteList[msg.sender].isActive);\r\n\r\n    if (now > endDate) {\r\n      state = SaleState.ENDED;\r\n      msg.sender.transfer(msg.value);\r\n      return ;\r\n    }\r\n\r\n    WhitelistContributor memory contrib = whiteList[msg.sender];\r\n    require(contrib.invAmount <= msg.value || contrib.payed);\r\n\r\n    if(whiteList[msg.sender].payed == false) {\r\n      whiteList[msg.sender].payed = true;\r\n    }\r\n\r\n    ethRaised += msg.value;\r\n\r\n    uint tokenAmount  = msg.value.div(price);\r\n    tokenAmount += tokenAmount.mul(contrib.bonus).div(100);\r\n    tokenAmount *= 10 ** 18;\r\n\r\n    tokenRaised += tokenAmount;\r\n\r\n    holdContract.addHolder(msg.sender, tokenAmount, contrib.holdPeriod, contrib.holdTimestamp);\r\n    AddedToHolder(msg.sender, tokenAmount, contrib.holdPeriod, contrib.holdTimestamp);\r\n    FundTransfered(msg.sender, msg.value);\r\n  }\r\n\r\n  function getBalanceContract() internal returns (uint) {\r\n    return token.balanceOf(this);\r\n  }\r\n\r\n  function sendTokensToHold() public onlyOwner {\r\n    require(state == SaleState.ENDED);\r\n\r\n    require(getBalanceContract() >= tokenRaised);\r\n\r\n    if (token.transfer(holdContract, tokenRaised )) {\r\n      tokensTransferredToHold = true;\r\n      TokensTransferedToHold(holdContract, tokenRaised );\r\n    }\r\n  }\r\n\r\n  function getTokensBack() public onlyOwner {\r\n    require(state == SaleState.ENDED);\r\n    require(tokensTransferredToHold == true);\r\n    uint balance;\r\n    balance = getBalanceContract() ;\r\n    token.transfer(msg.sender, balance);\r\n  }\r\n\r\n  function withdrawEth() {\r\n    require(this.balance != 0);\r\n    require(state == SaleState.ENDED);\r\n    require(msg.sender == wallet);\r\n    require(tokensTransferredToHold == true);\r\n    uint bal = this.balance;\r\n    wallet.transfer(bal);\r\n    WithdrawedEthToWallet(bal);\r\n  }\r\n\r\n  function setEndSaleDate(uint date) public onlyOwner {\r\n    require(state == SaleState.NEW);\r\n    require(date > now);\r\n    uint oldEndDate = endSaleDate;\r\n    endSaleDate = date;\r\n    ManualChangeEndDate(oldEndDate, date);\r\n  }\r\n\r\n  function setEndDate(uint date) public onlyOwner {\r\n    require(state == SaleState.NEW || state == SaleState.SALE);\r\n    require(date > now);\r\n    uint oldEndDate = endDate;\r\n    endDate = date;\r\n    ManualChangeEndDate(oldEndDate, date);\r\n  }\r\n\r\n  function getTokenBalance() constant returns (uint) {\r\n    return token.balanceOf(this);\r\n  }\r\n\r\n  function getEthRaised() constant external returns (uint) {\r\n    return ethRaised;\r\n  }\r\n}\r\n\r\n\r\n\r\ncontract OpportySaleBonus is Ownable {\r\n  using SafeMath for uint256;\r\n\r\n  uint private startDate;\r\n\r\n  /* bonus from time */\r\n  uint private firstBonusPhase;\r\n  uint private firstExtraBonus;\r\n  uint private secondBonusPhase;\r\n  uint private secondExtraBonus;\r\n  uint private thirdBonusPhase;\r\n  uint private thirdExtraBonus;\r\n  uint private fourBonusPhase;\r\n  uint private fourExtraBonus;\r\n  uint private fifthBonusPhase;\r\n  uint private fifthExtraBonus;\r\n  uint private sixthBonusPhase;\r\n  uint private sixthExtraBonus;\r\n\r\n  /**\r\n  * @dev constructor\r\n  * 20% '1st 24 hours'\r\n  * 15% '2-4 days'\r\n  * 12% '5-9 days'\r\n  * 10% '10-14 days'\r\n  * 8%  '15-19 days'\r\n  * 5%  '20-24 days'\r\n  * 0%  '25-28 days'\r\n  */\r\n  function OpportySaleBonus(uint _startDate) {\r\n    startDate = _startDate;\r\n\r\n    firstBonusPhase   = startDate.add(1 days);\r\n    firstExtraBonus   = 20;\r\n    secondBonusPhase  = startDate.add(4 days);\r\n    secondExtraBonus  = 15;\r\n    thirdBonusPhase   = startDate.add(9 days);\r\n    thirdExtraBonus   = 12;\r\n    fourBonusPhase    = startDate.add(14 days);\r\n    fourExtraBonus    = 10;\r\n    fifthBonusPhase   = startDate.add(19 days);\r\n    fifthExtraBonus   = 8;\r\n    sixthBonusPhase   = startDate.add(24 days);\r\n    sixthExtraBonus   = 5;\r\n  }\r\n\r\n  /**\r\n * @dev Calculate bonus for hours\r\n * @return token bonus\r\n */\r\n  function calculateBonusForHours(uint256 _tokens) returns(uint256) {\r\n    if (now >= startDate && now <= firstBonusPhase ) {\r\n      return _tokens.mul(firstExtraBonus).div(100);\r\n    } else\r\n    if (now <= secondBonusPhase ) {\r\n      return _tokens.mul(secondExtraBonus).div(100);\r\n    } else\r\n    if (now <= thirdBonusPhase ) {\r\n      return _tokens.mul(thirdExtraBonus).div(100);\r\n    } else\r\n    if (now <= fourBonusPhase ) {\r\n      return _tokens.mul(fourExtraBonus).div(100);\r\n    } else\r\n    if (now <= fifthBonusPhase ) {\r\n      return _tokens.mul(fifthExtraBonus).div(100);\r\n    } else\r\n    if (now <= sixthBonusPhase ) {\r\n      return _tokens.mul(sixthExtraBonus).div(100);\r\n    } else\r\n    return 0;\r\n  }\r\n\r\n  function changeStartDate(uint _date) onlyOwner {\r\n    startDate = _date;\r\n    firstBonusPhase   = startDate.add(1 days);\r\n    secondBonusPhase  = startDate.add(4 days);\r\n    thirdBonusPhase   = startDate.add(9 days);\r\n    fourBonusPhase    = startDate.add(14 days);\r\n    fifthBonusPhase   = startDate.add(19 days);\r\n    sixthBonusPhase   = startDate.add(24 days);\r\n  }\r\n\r\n  /**\r\n * @dev return current bonus percent\r\n */\r\n  function getBonus() public constant returns (uint) {\r\n    if (now >= startDate && now <= firstBonusPhase ) {\r\n      return firstExtraBonus;\r\n    } else\r\n    if ( now <= secondBonusPhase ) {\r\n      return secondExtraBonus;\r\n    } else\r\n    if ( now <= thirdBonusPhase ) {\r\n      return thirdExtraBonus;\r\n    } else\r\n    if ( now <= fourBonusPhase ) {\r\n      return fourExtraBonus;\r\n    } else\r\n    if ( now <= fifthBonusPhase ) {\r\n      return fifthExtraBonus;\r\n    } else\r\n    if ( now <= sixthBonusPhase ) {\r\n      return sixthExtraBonus;\r\n    } else\r\n    return 0;\r\n  }\r\n\r\n}\r\n\r\ncontract OpportySale is Pausable {\r\n\r\n  using SafeMath for uint256;\r\n\r\n  OpportyToken public token;\r\n\r\n  // minimum goal ETH\r\n  uint private SOFTCAP;\r\n  // maximum goal ETH\r\n  uint private HARDCAP;\r\n\r\n  // start and end timestamps where investments are allowed\r\n  uint private startDate;\r\n  uint private endDate;\r\n\r\n  uint private price;\r\n\r\n  // total ETH collected\r\n  uint private ethRaised;\r\n  // total token sales\r\n  uint private totalTokens;\r\n  // how many tokens sent to investors\r\n  uint private withdrawedTokens;\r\n  // minimum ETH investment amount\r\n  uint private minimalContribution;\r\n\r\n  bool releasedTokens;\r\n\r\n  // address where funds are collected\r\n  address public wallet;\r\n  // address where funds will be frozen\r\n  HoldPresaleContract public holdContract;\r\n  OpportyPresale private presale;\r\n  OpportySaleBonus private bonus;\r\n\r\n  //minimum of tokens that must be on the contract for the start\r\n  uint private minimumTokensToStart = 150000000 * (10 ** 18);\r\n\r\n  struct ContributorData {\r\n    bool isActive;\r\n    uint contributionAmount;// total ETH\r\n    uint tokensIssued;// total token\r\n    uint bonusAmount;// total bonus token\r\n  }\r\n\r\n  enum SaleState  { NEW, SALE, ENDED }\r\n  SaleState private state;\r\n\r\n  mapping(address => ContributorData) public contributorList;\r\n  uint private nextContributorIndex;\r\n  uint private nextContributorToClaim;\r\n  uint private nextContributorToTransferTokens;\r\n\r\n  mapping(uint => address) private contributorIndexes;\r\n  mapping(address => bool) private hasClaimedEthWhenFail; //address who got a refund\r\n  mapping(address => bool) private hasWithdrawedTokens; //address who got a tokens\r\n\r\n  /* Events */\r\n  event CrowdsaleStarted(uint blockNumber);\r\n  event CrowdsaleEnded(uint blockNumber);\r\n  event SoftCapReached(uint blockNumber);\r\n  event HardCapReached(uint blockNumber);\r\n  event FundTransfered(address contrib, uint amount);\r\n  event TokensTransfered(address contributor , uint amount);\r\n  event Refunded(address ref, uint amount);\r\n  event ErrorSendingETH(address to, uint amount);\r\n  event WithdrawedEthToWallet(uint amount);\r\n  event ManualChangeStartDate(uint beforeDate, uint afterDate);\r\n  event ManualChangeEndDate(uint beforeDate, uint afterDate);\r\n  event TokensTransferedToHold(address hold, uint amount);\r\n  event TokensTransferedToOwner(address hold, uint amount);\r\n\r\n  function OpportySale(\r\n    address tokenAddress,\r\n    address walletAddress,\r\n    uint start,\r\n    uint end,\r\n    address holdCont,\r\n    address presaleCont )\r\n  {\r\n    token = OpportyToken(tokenAddress);\r\n    state = SaleState.NEW;\r\n    SOFTCAP   = 1000 * 1 ether;\r\n    HARDCAP   = 50000 * 1 ether;\r\n    price     = 0.0002 * 1 ether;\r\n    startDate = start;\r\n    endDate   = end;\r\n    minimalContribution = 0.3 * 1 ether;\r\n    releasedTokens = false;\r\n\r\n    wallet = walletAddress;\r\n    holdContract = HoldPresaleContract(holdCont);\r\n    presale = OpportyPresale(presaleCont);\r\n    bonus   = new OpportySaleBonus(start);\r\n  }\r\n\r\n  /* Setters */\r\n\r\n  function setStartDate(uint date) onlyOwner {\r\n    require(state == SaleState.NEW);\r\n    require(date < endDate);\r\n    uint oldStartDate = startDate;\r\n    startDate = date;\r\n    bonus.changeStartDate(date);\r\n    ManualChangeStartDate(oldStartDate, date);\r\n  }\r\n  function setEndDate(uint date) onlyOwner {\r\n    require(state == SaleState.NEW || state == SaleState.SALE);\r\n    require(date > now && date > startDate);\r\n    uint oldEndDate = endDate;\r\n    endDate = date;\r\n    ManualChangeEndDate(oldEndDate, date);\r\n  }\r\n  function setSoftCap(uint softCap) onlyOwner {\r\n    require(state == SaleState.NEW);\r\n    SOFTCAP = softCap;\r\n  }\r\n  function setHardCap(uint hardCap) onlyOwner {\r\n    require(state == SaleState.NEW);\r\n    HARDCAP = hardCap;\r\n  }\r\n\r\n  /* The function without name is the default function that is called whenever anyone sends funds to a contract */\r\n  function() whenNotPaused public payable {\r\n    require(msg.value != 0);\r\n\r\n    if (state == SaleState.ENDED) {\r\n      revert();\r\n    }\r\n\r\n    bool chstate = checkCrowdsaleState();\r\n\r\n    if (state == SaleState.SALE) {\r\n      processTransaction(msg.sender, msg.value);\r\n    }\r\n    else {\r\n      refundTransaction(chstate);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Checks if the goal or time limit has been reached and ends the campaign\r\n   * @return false when contract does not accept tokens\r\n   */\r\n  function checkCrowdsaleState() internal returns (bool){\r\n    if (getEthRaised() >= HARDCAP && state != SaleState.ENDED) {\r\n      state = SaleState.ENDED;\r\n      HardCapReached(block.number); // Close the crowdsale\r\n      CrowdsaleEnded(block.number);\r\n      return true;\r\n    }\r\n\r\n    if(now > startDate && now <= endDate) {\r\n      if (state == SaleState.SALE && checkBalanceContract() >= minimumTokensToStart ) {\r\n        return true;\r\n      }\r\n    } else {\r\n      if (state != SaleState.ENDED && now > endDate) {\r\n        state = SaleState.ENDED;\r\n        CrowdsaleEnded(block.number);\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * @dev Token purchase\r\n   */\r\n  function processTransaction(address _contributor, uint _amount) internal {\r\n\r\n    require(msg.value >= minimalContribution);\r\n\r\n    uint maxContribution = calculateMaxContribution();\r\n    uint contributionAmount = _amount;\r\n    uint returnAmount = 0;\r\n\r\n    if (maxContribution < _amount) {\r\n      contributionAmount = maxContribution;\r\n      returnAmount = _amount - maxContribution;\r\n    }\r\n    uint ethrai = getEthRaised() ;\r\n    if (ethrai + contributionAmount >= SOFTCAP && SOFTCAP > ethrai) {\r\n      SoftCapReached(block.number);\r\n    }\r\n\r\n    if (contributorList[_contributor].isActive == false) {\r\n      contributorList[_contributor].isActive = true;\r\n      contributorList[_contributor].contributionAmount = contributionAmount;\r\n      contributorIndexes[nextContributorIndex] = _contributor;\r\n      nextContributorIndex++;\r\n    } else {\r\n      contributorList[_contributor].contributionAmount += contributionAmount;\r\n    }\r\n\r\n    ethRaised += contributionAmount;\r\n\r\n    FundTransfered(_contributor, contributionAmount);\r\n\r\n    uint tokenAmount  = contributionAmount.div(price);\r\n    uint timeBonus    = bonus.calculateBonusForHours(tokenAmount);\r\n\r\n    if (tokenAmount > 0) {\r\n      contributorList[_contributor].tokensIssued += tokenAmount.add(timeBonus);\r\n      contributorList[_contributor].bonusAmount += timeBonus;\r\n      totalTokens += tokenAmount.add(timeBonus);\r\n    }\r\n\r\n    if (returnAmount != 0) {\r\n      _contributor.transfer(returnAmount);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev It is necessary for a correct change of status in the event of completion of the campaign.\r\n   * @param _stateChanged if true transfer ETH back\r\n   */\r\n  function refundTransaction(bool _stateChanged) internal {\r\n    if (_stateChanged) {\r\n      msg.sender.transfer(msg.value);\r\n    } else{\r\n      revert();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev transfer remains tokens after the completion of crowdsale\r\n   */\r\n  function releaseTokens() onlyOwner {\r\n    require (state == SaleState.ENDED);\r\n\r\n    uint cbalance = checkBalanceContract();\r\n\r\n    require (cbalance != 0);\r\n    require (withdrawedTokens >= totalTokens || getEthRaised() < SOFTCAP);\r\n\r\n    if (getEthRaised() >= SOFTCAP) {\r\n      if (releasedTokens == true) {\r\n        if (token.transfer(msg.sender, cbalance ) ) {\r\n          TokensTransferedToOwner(msg.sender , cbalance );\r\n        }\r\n      } else {\r\n        if (token.transfer(holdContract, cbalance ) ) {\r\n          holdContract.addHolder(msg.sender, cbalance, 1, endDate.add(182 days) );\r\n          releasedTokens = true;\r\n          TokensTransferedToHold(holdContract , cbalance );\r\n        }\r\n      }\r\n    } else {\r\n      if (token.transfer(msg.sender, cbalance) ) {\r\n        TokensTransferedToOwner(msg.sender , cbalance );\r\n      }\r\n    }\r\n  }\r\n\r\n  function checkBalanceContract() internal returns (uint) {\r\n    return token.balanceOf(this);\r\n  }\r\n\r\n  /**\r\n   * @dev if crowdsale is successful, investors can claim token here\r\n   */\r\n  function getTokens() whenNotPaused {\r\n    uint er =  getEthRaised();\r\n    require((now > endDate && er >= SOFTCAP )  || ( er >= HARDCAP)  );\r\n    require(state == SaleState.ENDED);\r\n    require(contributorList[msg.sender].tokensIssued > 0);\r\n    require(!hasWithdrawedTokens[msg.sender]);\r\n\r\n    uint tokenCount = contributorList[msg.sender].tokensIssued;\r\n\r\n    if (token.transfer(msg.sender, tokenCount * (10 ** 18) )) {\r\n      TokensTransfered(msg.sender , tokenCount * (10 ** 18) );\r\n      withdrawedTokens += tokenCount;\r\n      hasWithdrawedTokens[msg.sender] = true;\r\n    }\r\n\r\n  }\r\n  function batchReturnTokens(uint _numberOfReturns) onlyOwner whenNotPaused {\r\n    uint er = getEthRaised();\r\n    require((now > endDate && er >= SOFTCAP )  || (er >= HARDCAP)  );\r\n    require(state == SaleState.ENDED);\r\n\r\n    address currentParticipantAddress;\r\n    uint tokensCount;\r\n\r\n    for (uint cnt = 0; cnt < _numberOfReturns; cnt++) {\r\n      currentParticipantAddress = contributorIndexes[nextContributorToTransferTokens];\r\n      if (currentParticipantAddress == 0x0) return;\r\n      if (!hasWithdrawedTokens[currentParticipantAddress]) {\r\n        tokensCount = contributorList[currentParticipantAddress].tokensIssued;\r\n        hasWithdrawedTokens[currentParticipantAddress] = true;\r\n        if (token.transfer(currentParticipantAddress, tokensCount * (10 ** 18))) {\r\n          TokensTransfered(currentParticipantAddress, tokensCount * (10 ** 18));\r\n          withdrawedTokens += tokensCount;\r\n          hasWithdrawedTokens[msg.sender] = true;\r\n        }\r\n      }\r\n      nextContributorToTransferTokens += 1;\r\n    }\r\n\r\n  }\r\n\r\n  /**\r\n   * @dev if crowdsale is unsuccessful, investors can claim refunds here\r\n   */\r\n  function refund() whenNotPaused {\r\n    require(now > endDate && getEthRaised() < SOFTCAP);\r\n    require(contributorList[msg.sender].contributionAmount > 0);\r\n    require(!hasClaimedEthWhenFail[msg.sender]);\r\n\r\n    uint ethContributed = contributorList[msg.sender].contributionAmount;\r\n    hasClaimedEthWhenFail[msg.sender] = true;\r\n    if (!msg.sender.send(ethContributed)) {\r\n      ErrorSendingETH(msg.sender, ethContributed);\r\n    } else {\r\n      Refunded(msg.sender, ethContributed);\r\n    }\r\n  }\r\n  function batchReturnEthIfFailed(uint _numberOfReturns) onlyOwner whenNotPaused {\r\n    require(now > endDate && getEthRaised() < SOFTCAP);\r\n    address currentParticipantAddress;\r\n    uint contribution;\r\n    for (uint cnt = 0; cnt < _numberOfReturns; cnt++) {\r\n      currentParticipantAddress = contributorIndexes[nextContributorToClaim];\r\n      if (currentParticipantAddress == 0x0) return;\r\n      if (!hasClaimedEthWhenFail[currentParticipantAddress]) {\r\n        contribution = contributorList[currentParticipantAddress].contributionAmount;\r\n        hasClaimedEthWhenFail[currentParticipantAddress] = true;\r\n\r\n        if (!currentParticipantAddress.send(contribution)){\r\n          ErrorSendingETH(currentParticipantAddress, contribution);\r\n        } else {\r\n          Refunded(currentParticipantAddress, contribution);\r\n        }\r\n      }\r\n      nextContributorToClaim += 1;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev transfer funds ETH to multisig wallet if reached minimum goal\r\n   */\r\n  function withdrawEth() {\r\n    require(this.balance != 0);\r\n    require(getEthRaised() >= SOFTCAP);\r\n    require(msg.sender == wallet);\r\n    uint bal = this.balance;\r\n    wallet.transfer(bal);\r\n    WithdrawedEthToWallet(bal);\r\n  }\r\n\r\n  function withdrawRemainingBalanceForManualRecovery() onlyOwner {\r\n    require(this.balance != 0);\r\n    require(now > endDate);\r\n    require(contributorIndexes[nextContributorToClaim] == 0x0);\r\n    msg.sender.transfer(this.balance);\r\n  }\r\n\r\n  /**\r\n   * @dev Manual start crowdsale.\r\n   */\r\n  function startCrowdsale() onlyOwner  {\r\n    require(now > startDate && now <= endDate);\r\n    require(state == SaleState.NEW);\r\n    require(checkBalanceContract() >= minimumTokensToStart);\r\n\r\n    state = SaleState.SALE;\r\n    CrowdsaleStarted(block.number);\r\n  }\r\n\r\n  /* Getters */\r\n\r\n  function getAccountsNumber() constant returns (uint) {\r\n    return nextContributorIndex;\r\n  }\r\n\r\n  function getEthRaised() constant returns (uint) {\r\n    uint pre = presale.getEthRaised();\r\n    return pre + ethRaised;\r\n  }\r\n\r\n  function getTokensTotal() constant returns (uint) {\r\n    return totalTokens;\r\n  }\r\n\r\n  function getWithdrawedToken() constant returns (uint) {\r\n    return withdrawedTokens;\r\n  }\r\n\r\n  function calculateMaxContribution() constant returns (uint) {\r\n    return HARDCAP - getEthRaised();\r\n  }\r\n\r\n  function getSoftCap() constant returns(uint) {\r\n    return SOFTCAP;\r\n  }\r\n\r\n  function getHardCap() constant returns(uint) {\r\n    return HARDCAP;\r\n  }\r\n\r\n  function getSaleStatus() constant returns (uint) {\r\n    return uint(state);\r\n  }\r\n\r\n  function getStartDate() constant returns (uint) {\r\n    return startDate;\r\n  }\r\n\r\n  function getEndDate() constant returns (uint) {\r\n    return endDate;\r\n  }\r\n\r\n  // @return true if crowdsale event has ended\r\n  function hasEnded() public constant returns (bool) {\r\n    return now > endDate || state == SaleState.ENDED;\r\n  }\r\n\r\n  function getTokenBalance() constant returns (uint) {\r\n    return token.balanceOf(this);\r\n  }\r\n\r\n  /**\r\n   * @dev return current bonus percent\r\n   */\r\n  function getCurrentBonus() public constant returns (uint) {\r\n    if(now > endDate || state == SaleState.ENDED) {\r\n      return 0;\r\n    }\r\n    return bonus.getBonus();\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"withdrawRemainingBalanceForManualRecovery\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getEthRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"date\",\"type\":\"uint256\"}],\"name\":\"setEndDate\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSoftCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refund\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getWithdrawedToken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTokensTotal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getStartDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_numberOfReturns\",\"type\":\"uint256\"}],\"name\":\"batchReturnEthIfFailed\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTokenBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"date\",\"type\":\"uint256\"}],\"name\":\"setStartDate\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"calculateMaxContribution\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSaleStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"holdContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"contributorList\",\"outputs\":[{\"name\":\"isActive\",\"type\":\"bool\"},{\"name\":\"contributionAmount\",\"type\":\"uint256\"},{\"name\":\"tokensIssued\",\"type\":\"uint256\"},{\"name\":\"bonusAmount\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawEth\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAccountsNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startCrowdsale\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_numberOfReturns\",\"type\":\"uint256\"}],\"name\":\"batchReturnTokens\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"releaseTokens\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getTokens\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getEndDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getHardCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"hardCap\",\"type\":\"uint256\"}],\"name\":\"setHardCap\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"softCap\",\"type\":\"uint256\"}],\"name\":\"setSoftCap\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"walletAddress\",\"type\":\"address\"},{\"name\":\"start\",\"type\":\"uint256\"},{\"name\":\"end\",\"type\":\"uint256\"},{\"name\":\"holdCont\",\"type\":\"address\"},{\"name\":\"presaleCont\",\"type\":\"address\"}],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"CrowdsaleStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"CrowdsaleEnded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"SoftCapReached\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"HardCapReached\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contrib\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FundTransfered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contributor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensTransfered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ref\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Refunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ErrorSendingETH\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawedEthToWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"beforeDate\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"afterDate\",\"type\":\"uint256\"}],\"name\":\"ManualChangeStartDate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"beforeDate\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"afterDate\",\"type\":\"uint256\"}],\"name\":\"ManualChangeEndDate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"hold\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensTransferedToHold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"hold\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensTransferedToOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"OpportySale","CompilerVersion":"v0.4.15+commit.bbb8e64f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000008ef7c0cf8fe68076446803bb9035bd2a3a5e1581000000000000000000000000ba743bcf558e8a56142dbab9500f7a7ff5b635910000000000000000000000000000000000000000000000000000000059f31fc0000000000000000000000000000000000000000000000000000000005a18b27f000000000000000000000000bd367c347fc8e0a9b2da08717bcc22bb3fd878eb000000000000000000000000ca67e92833c2de6bf3a444127fa0c60092255bf4","Library":"","SwarmSource":"bzzr://a309bf4cd16c161ff4f8cd672f7877a5a16afa9615a3f808e7d3b101d0faea96"}]}