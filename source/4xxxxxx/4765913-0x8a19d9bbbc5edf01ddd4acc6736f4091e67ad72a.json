{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\ncontract SafeMath {\r\n\r\n    function safeMul(uint a, uint b) internal pure returns (uint) {\r\n        uint c = a * b;\r\n        require(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function safeDiv(uint a, uint b) internal pure returns (uint) {\r\n        require(b > 0);\r\n        uint c = a / b;\r\n        require(a == b * c + a % b);\r\n        return c;\r\n    }\r\n\r\n    function safeSub(uint a, uint b) internal pure returns (uint) {\r\n        require(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function safeAdd(uint a, uint b) internal pure returns (uint) {\r\n        uint c = a + b;\r\n        require(c >= a && c >= b);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract AlsToken {\r\n    function balanceOf(address _owner) public constant returns (uint256);\r\n    function transfer(address receiver, uint amount) public;\r\n}\r\n\r\ncontract Owned {\r\n\r\n    address internal owner;\r\n\r\n    function Owned() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require (msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) external onlyOwner {\r\n        owner = newOwner;\r\n    }\r\n\r\n    function getOwner() public constant returns (address currentOwner) {\r\n        return owner;\r\n    }\r\n}\r\n\r\ncontract AlsIco is Owned, SafeMath {\r\n\r\n    // Crowdsale start time in seconds since epoch.\r\n    // Equivalent to Wednesday, December 20th 2017, 3 pm London time.\r\n    uint256 public constant crowdsaleStartTime = 1513782000;\r\n\r\n    // Crowdsale end time in seconds since epoch.\r\n    // Equivalent to Tuesday, February 20th 2018, 3 pm London time.\r\n    uint256 public constant crowdsaleEndTime = 1519138800;\r\n\r\n    // One thousand ALS with 18 decimals [10 to the power of 21 (3 + 18) tokens].\r\n    uint256 private constant oneThousandAls = uint256(10) ** 21;\r\n\r\n    uint public amountRaised;\r\n    uint public tokensSold;\r\n    AlsToken public alsToken;\r\n\r\n    event FundTransfer(address backer, uint amount, bool isContribution);\r\n\r\n    function AlsIco() public {\r\n        alsToken = AlsToken(0xbCeC57361649E5dA917efa9F992FBCA0a2529350);\r\n    }\r\n\r\n    modifier onlyAfterStart() {\r\n        require(now >= crowdsaleStartTime);\r\n        _;\r\n    }\r\n\r\n    modifier onlyBeforeEnd() {\r\n        require(now <= crowdsaleEndTime);\r\n        _;\r\n    }\r\n\r\n    // Returns how many ALS are given in exchange for 1 ETH.\r\n    function getPrice() public constant onlyAfterStart onlyBeforeEnd returns (uint256) {\r\n        if (tokensSold < 1600 * oneThousandAls) {\r\n            // Firs 2% (equivalent to first 1.600.000 ALS) get 70% bonus (equivalent to 17000 ALS per 1 ETH).\r\n            return 17000;\r\n        } else if (tokensSold < 8000 * oneThousandAls) {\r\n            // Firs 10% (equivalent to first 8.000.000 ALS) get 30% bonus (equivalent to 13000 ALS per 1 ETH).\r\n            return 13000;\r\n        } else if (tokensSold < 16000 * oneThousandAls) {\r\n            // Firs 20% (equivalent to first 16.000.000 ALS) get 10% bonus (equivalent to 11000 ALS per 1 ETH).\r\n            return 11000;\r\n        } else if (tokensSold < 40000 * oneThousandAls) {\r\n            // Firs 50% (equivalent to first 40.000.000 ALS) get 5% bonus (equivalent to 10500 ALS per 1 ETH).\r\n            return 10500;\r\n        } else {\r\n            // The rest of the tokens (after 50%) will be sold without a bonus.\r\n            return 10000;\r\n        }\r\n    }\r\n\r\n    function () payable public onlyAfterStart onlyBeforeEnd {\r\n        uint256 availableTokens = alsToken.balanceOf(this);\r\n        require (availableTokens > 0);\r\n\r\n        uint256 etherAmount = msg.value;\r\n        require(etherAmount > 0);\r\n\r\n        uint256 price = getPrice();\r\n        uint256 tokenAmount = safeMul(etherAmount, price);\r\n\r\n        if (tokenAmount <= availableTokens) {\r\n            amountRaised = safeAdd(amountRaised, etherAmount);\r\n            tokensSold = safeAdd(tokensSold, tokenAmount);\r\n\r\n            alsToken.transfer(msg.sender, tokenAmount);\r\n            FundTransfer(msg.sender, etherAmount, true);\r\n        } else {\r\n            uint256 etherToSpend = safeDiv(availableTokens, price);\r\n            amountRaised = safeAdd(amountRaised, etherToSpend);\r\n            tokensSold = safeAdd(tokensSold, availableTokens);\r\n\r\n            alsToken.transfer(msg.sender, availableTokens);\r\n            FundTransfer(msg.sender, etherToSpend, true);\r\n\r\n            // Return the rest of the funds back to the caller.\r\n            uint256 amountToRefund = safeSub(etherAmount, etherToSpend);\r\n            msg.sender.transfer(amountToRefund);\r\n        }\r\n    }\r\n\r\n    function withdrawEther(uint _amount) external onlyOwner {\r\n        require(this.balance >= _amount);\r\n        owner.transfer(_amount);\r\n        FundTransfer(owner, _amount, false);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleEndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"alsToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"amountRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"name\":\"currentOwner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"backer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"isContribution\",\"type\":\"bool\"}],\"name\":\"FundTransfer\",\"type\":\"event\"}]","ContractName":"AlsIco","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://9e62a0603b993193cde1637c504e3e63527add16020e33d4c8798035549b6432"}]}