{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\nlibrary SafeMath {\r\n  function mul(uint a, uint b) internal returns (uint) {\r\n    uint c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n  function div(uint a, uint b) internal returns (uint) {\r\n    assert(b > 0);\r\n    uint c = a / b;\r\n    assert(a == b * c + a % b);\r\n    return c;\r\n  }\r\n  function sub(uint a, uint b) internal returns (uint) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n  function add(uint a, uint b) internal returns (uint) {\r\n    uint c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n    return a >= b ? a : b;\r\n  }\r\n  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n    return a < b ? a : b;\r\n  }\r\n  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    return a >= b ? a : b;\r\n  }\r\n  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    return a < b ? a : b;\r\n  }\r\n  function assert(bool assertion) internal {\r\n    if (!assertion) {\r\n      throw;\r\n    }\r\n  }\r\n}\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    function Ownable() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        if (msg.sender != owner) throw;\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) onlyOwner {\r\n        if (newOwner != address(0)) {\r\n            owner = newOwner;\r\n        }\r\n    }\r\n}\r\ncontract Pausable is Ownable {\r\n  bool public stopped;\r\n\r\n  modifier stopInEmergency {\r\n    if (stopped) {\r\n      throw;\r\n    }\r\n    _;\r\n  }\r\n  modifier onlyInEmergency {\r\n    if (!stopped) {\r\n      throw;\r\n    }\r\n    _;\r\n  }\r\n\r\n  // called by the owner on emergency, triggers stopped state\r\n  function emergencyStop() external onlyOwner {\r\n    stopped = true;\r\n  }\r\n\r\n  // called by the owner on end of emergency, returns to normal state\r\n  function release() external onlyOwner onlyInEmergency {\r\n    stopped = false;\r\n  }\r\n\r\n}\r\ncontract ERC20Basic {\r\n  uint public totalSupply;\r\n  function balanceOf(address who) constant returns (uint);\r\n  function transfer(address to, uint value);\r\n  event Transfer(address indexed from, address indexed to, uint value);\r\n}\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) constant returns (uint);\r\n  function transferFrom(address from, address to, uint value);\r\n  function approve(address spender, uint value);\r\n  event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\ncontract PullPayment {\r\n\r\n  using SafeMath for uint;\r\n\r\n  mapping(address => uint) public payments;\r\n\r\n  event LogRefundETH(address to, uint value);\r\n\r\n\r\n  /**\r\n  *  Store sent amount as credit to be pulled, called by payer\r\n  **/\r\n  function asyncSend(address dest, uint amount) internal {\r\n    payments[dest] = payments[dest].add(amount);\r\n  }\r\n\r\n  // withdraw accumulated balance, called by payee\r\n  function withdrawPayments() {\r\n    address payee = msg.sender;\r\n    uint payment = payments[payee];\r\n\r\n    if (payment == 0) {\r\n      throw;\r\n    }\r\n\r\n    if (this.balance < payment) {\r\n      throw;\r\n    }\r\n\r\n    payments[payee] = 0;\r\n\r\n    if (!payee.send(payment)) {\r\n      throw;\r\n    }\r\n    LogRefundETH(payee,payment);\r\n  }\r\n}\r\ncontract BasicToken is ERC20Basic {\r\n\r\n  using SafeMath for uint;\r\n\r\n  mapping(address => uint) balances;\r\n\r\n  /*\r\n   * Fix for the ERC20 short address attack\r\n  */\r\n  modifier onlyPayloadSize(uint size) {\r\n     if(msg.data.length < size + 4) {\r\n       throw;\r\n     }\r\n     _;\r\n  }\r\n\r\n  function transfer(address _to, uint _value) onlyPayloadSize(2 * 32) {\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n  }\r\n\r\n  function balanceOf(address _owner) constant returns (uint balance) {\r\n    return balances[_owner];\r\n  }\r\n}\r\ncontract StandardToken is BasicToken, ERC20 {\r\n  mapping (address => mapping (address => uint)) allowed;\r\n\r\n  function transferFrom(address _from, address _to, uint _value) onlyPayloadSize(3 * 32) {\r\n    var _allowance = allowed[_from][msg.sender];\r\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n    // if (_value > _allowance) throw;\r\n    balances[_to] = balances[_to].add(_value);\r\n    balances[_from] = balances[_from].sub(_value);\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    Transfer(_from, _to, _value);\r\n  }\r\n  function approve(address _spender, uint _value) {\r\n    // To change the approve amount you first have to reduce the addresses`\r\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n    //  already 0 to mitigate the race condition described here:\r\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    if ((_value != 0) && (allowed[msg.sender][_spender] != 0)) throw;\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n  }\r\n\r\n  function allowance(address _owner, address _spender) constant returns (uint remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n}\r\ncontract SggCoin is StandardToken, Ownable {\r\n  string public constant name = \"SggCoin\";\r\n  string public constant symbol = \"SGG\";\r\n  uint public constant decimals = 6;\r\n\r\n\r\n  // Constructor\r\n  function SggCoin() {\r\n      totalSupply = 1000000000000000;     // one billion\r\n      balances[msg.sender] = totalSupply; // Send all tokens to owner\r\n  }\r\n\r\n  /**\r\n   *  Burn away the specified amount of SggCoin tokens\r\n   */\r\n  function burn(uint _value) onlyOwner returns (bool) {\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    totalSupply = totalSupply.sub(_value);\r\n    Transfer(msg.sender, 0x0, _value);\r\n    return true;\r\n  }\r\n\r\n}\r\n/*\r\n  Crowdsale Smart Contract for the StuffGoGo Project\r\n  Created and deployed by DAAPPS company\r\n  This smart contract collects ETH, and in return emits SggCoin tokens to the backers\r\n*/\r\ncontract Crowdsale is Pausable, PullPayment {\r\n\r\n    using SafeMath for uint;\r\n\r\n  \tstruct Backer {\r\n\t\tuint weiReceived; // Amount of Ether given\r\n\t\tuint coinSent;\r\n\t}\r\n\r\n\t/*\r\n\t* Constants\r\n\t*/\r\n\tuint public constant MIN_CAP = 5000000000;           // min: 5,000 SggCoins = 1 eth\r\n\tuint public constant MAX_CAP = 500000000000000;      // max: 500,000,000 SggCoins = 100000 eth\r\n\tuint public constant MIN_INVEST_ETHER = 100 finney;  // 0.1 eth\r\n\tuint private constant CROWDSALE_PERIOD = 28 days;    // 4 weeks\r\n\tuint public constant COIN_PER_ETHER = 5000000000;    // 5,000 SggCoins/ETH\r\n\r\n\r\n\t/*\r\n\t* Variables\r\n\t*/\r\n\t/* SggCoin contract reference */\r\n\tSggCoin public coin;\r\n    /* Multisig contract that will receive the Ether */\r\n\taddress public multisigEther;\r\n\t/* Number of Ether received */\r\n\tuint public etherReceived;\r\n\t/* Number of SggCoins sent to Ether contributors */\r\n\tuint public coinSentToEther;\r\n\t/* Crowdsale start time */\r\n\tuint public startTime;\r\n\t/* Crowdsale end time */\r\n\tuint public endTime;\r\n \t/* Is crowdsale still on going */\r\n\tbool public crowdsaleClosed;\r\n\r\n\t/* Backers Ether indexed by their Ethereum address */\r\n\tmapping(address => Backer) public backers;\r\n\r\n\r\n\t/*\r\n\t* Modifiers\r\n\t*/\r\n\tmodifier minCapNotReached() {\r\n\t\tif ((now < endTime) || coinSentToEther >= MIN_CAP ) throw;\r\n\t\t_;\r\n\t}\r\n\r\n\tmodifier respectTimeFrame() {\r\n\t\tif ((now < startTime) || (now > endTime )) throw;\r\n\t\t_;\r\n\t}\r\n\r\n\t/*\r\n\t * Event\r\n\t*/\r\n\tevent LogReceivedETH(address addr, uint value);\r\n\tevent LogCoinsEmited(address indexed from, uint amount);\r\n\r\n\t/*\r\n\t * Constructor\r\n\t*/\r\n\tfunction Crowdsale(address _SggCoinAddress, address _to) {\r\n\t\tcoin = SggCoin(_SggCoinAddress);\r\n\t\tmultisigEther = _to;\r\n\t}\r\n\r\n\t/*\r\n\t * The fallback function corresponds to a donation in ETH\r\n\t */\r\n\tfunction() stopInEmergency respectTimeFrame payable {\r\n\t\treceiveETH(msg.sender);\r\n\t}\r\n\r\n\t/*\r\n\t * To call to start the crowdsale\r\n\t */\r\n\tfunction start() onlyOwner {\r\n\t\tif (startTime != 0) throw; // Crowdsale was already started\r\n\r\n\t\tstartTime = now ;\r\n\t\tendTime =  now + CROWDSALE_PERIOD;\r\n\t}\r\n\r\n\t/*\r\n\t *\tReceives a donation in Ether\r\n\t*/\r\n\tfunction receiveETH(address beneficiary) internal {\r\n\t\tif (msg.value < MIN_INVEST_ETHER) throw; // Don't accept funding under a predefined threshold\r\n\r\n\t\tuint coinToSend = bonus(msg.value.mul(COIN_PER_ETHER).div(1 ether)); // Compute the number of SggCoin to send\r\n\t\tif (coinToSend.add(coinSentToEther) > MAX_CAP) throw;\r\n\r\n\t\tBacker backer = backers[beneficiary];\r\n\t\tcoin.transfer(beneficiary, coinToSend); // Transfer SggCoins right now\r\n\r\n\t\tbacker.coinSent = backer.coinSent.add(coinToSend);\r\n\t\tbacker.weiReceived = backer.weiReceived.add(msg.value); // Update the total wei collected during the crowdfunding for this backer\r\n\r\n\t\tetherReceived = etherReceived.add(msg.value); // Update the total wei collected during the crowdfunding\r\n\t\tcoinSentToEther = coinSentToEther.add(coinToSend);\r\n\r\n\t\t// Send events\r\n\t\tLogCoinsEmited(msg.sender ,coinToSend);\r\n\t\tLogReceivedETH(beneficiary, etherReceived);\r\n\t}\r\n\r\n\r\n\t/*\r\n\t *Compute the SggCoin bonus according to the investment period\r\n\t */\r\n\tfunction bonus(uint amount) internal constant returns (uint) {\r\n\t\tif (now < startTime.add(2 days)) return amount.add(amount.div(5));   // bonus 20%\r\n\t\treturn amount;\r\n\t}\r\n\r\n\t/*\r\n\t * Finalize the crowdsale, should be called after the refund period\r\n\t*/\r\n\tfunction finalize() onlyOwner public {\r\n\r\n\t\tif (now < endTime) { // Cannot finalise before CROWDSALE_PERIOD or before selling all coins\r\n\t\t\tif (coinSentToEther == MAX_CAP) {\r\n\t\t\t} else {\r\n\t\t\t\tthrow;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (coinSentToEther < MIN_CAP && now < endTime + 15 days) throw; // If MIN_CAP is not reached donors have 15days to get refund before we can finalise\r\n\r\n\t\tif (!multisigEther.send(this.balance)) throw; // Move the remaining Ether to the multisig address\r\n\r\n\t\tuint remains = coin.balanceOf(this);\r\n\t\tif (remains > 0) { // Burn the rest of SggCoins\r\n\t\t\tif (!coin.burn(remains)) throw ;\r\n\t\t}\r\n\t\tcrowdsaleClosed = true;\r\n\t}\r\n\r\n\t/*\r\n\t* Failsafe drain\r\n\t*/\r\n\tfunction drain() onlyOwner {\r\n\t\tif (!owner.send(this.balance)) throw;\r\n\t}\r\n\r\n\t/**\r\n\t * Allow to change the team multisig address in the case of emergency.\r\n\t */\r\n\tfunction setMultisig(address addr) onlyOwner public {\r\n\t\tif (addr == address(0)) throw;\r\n\t\tmultisigEther = addr;\r\n\t}\r\n\r\n\t/**\r\n\t * Manually back SggCoin owner address.\r\n\t */\r\n\tfunction backSggCoinOwner() onlyOwner public {\r\n\t\tcoin.transferOwnership(owner);\r\n\t}\r\n\r\n\t/**\r\n\t * Transfer remains to owner in case if impossible to do min invest\r\n\t */\r\n\tfunction getRemainCoins() onlyOwner public {\r\n\t\tvar remains = MAX_CAP - coinSentToEther;\r\n\t\tuint minCoinsToSell = bonus(MIN_INVEST_ETHER.mul(COIN_PER_ETHER) / (1 ether));\r\n\r\n\t\tif(remains > minCoinsToSell) throw;\r\n\r\n\t\tBacker backer = backers[owner];\r\n\t\tcoin.transfer(owner, remains); // Transfer SggCoins right now\r\n\r\n\t\tbacker.coinSent = backer.coinSent.add(remains);\r\n\r\n\t\tcoinSentToEther = coinSentToEther.add(remains);\r\n\r\n\t\t// Send events\r\n\t\tLogCoinsEmited(this ,remains);\r\n\t\tLogReceivedETH(owner, etherReceived);\r\n\t}\r\n\r\n\r\n\t/*\r\n  \t * When MIN_CAP is not reach:\r\n  \t * 1) backer call the \"approve\" function of the SggCoin token contract with the amount of all SggCoins they got in order to be refund\r\n  \t * 2) backer call the \"refund\" function of the Crowdsale contract with the same amount of SggCoins\r\n   \t * 3) backer call the \"withdrawPayments\" function of the Crowdsale contract to get a refund in ETH\r\n   \t */\r\n\tfunction refund(uint _value) minCapNotReached public {\r\n\r\n\t\tif (_value != backers[msg.sender].coinSent) throw; // compare value from backer balance\r\n\r\n\t\tcoin.transferFrom(msg.sender, address(this), _value); // get the token back to the crowdsale contract\r\n\r\n\t\tif (!coin.burn(_value)) throw ; // token sent for refund are burnt\r\n\r\n\t\tuint ETHToSend = backers[msg.sender].weiReceived;\r\n\t\tbackers[msg.sender].weiReceived=0;\r\n\r\n\t\tif (ETHToSend > 0) {\r\n\t\t\tasyncSend(msg.sender, ETHToSend); // pull payment to get refund in ETH\r\n\t\t}\r\n\t}\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"SggCoin","CompilerVersion":"v0.4.13+commit.fb4cb1a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://38c8c3d7c70ff23f8cc842b742ab6061fd2f63f6f8af375c2d06076a3dab8668"}]}