{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.16;\r\n\r\n// copyright contact@Etheremon.com\r\n\r\ncontract SafeMath {\r\n\r\n    /* function assert(bool assertion) internal { */\r\n    /*   if (!assertion) { */\r\n    /*     throw; */\r\n    /*   } */\r\n    /* }      // assert no longer needed once solidity is on 0.4.10 */\r\n\r\n    function safeAdd(uint256 x, uint256 y) pure internal returns(uint256) {\r\n      uint256 z = x + y;\r\n      assert((z >= x) && (z >= y));\r\n      return z;\r\n    }\r\n\r\n    function safeSubtract(uint256 x, uint256 y) pure internal returns(uint256) {\r\n      assert(x >= y);\r\n      uint256 z = x - y;\r\n      return z;\r\n    }\r\n\r\n    function safeMult(uint256 x, uint256 y) pure internal returns(uint256) {\r\n      uint256 z = x * y;\r\n      assert((x == 0)||(z/x == y));\r\n      return z;\r\n    }\r\n\r\n}\r\n\r\ncontract BasicAccessControl {\r\n    address public owner;\r\n    // address[] public moderators;\r\n    uint16 public totalModerators = 0;\r\n    mapping (address => bool) public moderators;\r\n    bool public isMaintaining = true;\r\n\r\n    function BasicAccessControl() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    modifier onlyModerators() {\r\n        require(msg.sender == owner || moderators[msg.sender] == true);\r\n        _;\r\n    }\r\n\r\n    modifier isActive {\r\n        require(!isMaintaining);\r\n        _;\r\n    }\r\n\r\n    function ChangeOwner(address _newOwner) onlyOwner public {\r\n        if (_newOwner != address(0)) {\r\n            owner = _newOwner;\r\n        }\r\n    }\r\n\r\n\r\n    function AddModerator(address _newModerator) onlyOwner public {\r\n        if (moderators[_newModerator] == false) {\r\n            moderators[_newModerator] = true;\r\n            totalModerators += 1;\r\n        }\r\n    }\r\n    \r\n    function RemoveModerator(address _oldModerator) onlyOwner public {\r\n        if (moderators[_oldModerator] == true) {\r\n            moderators[_oldModerator] = false;\r\n            totalModerators -= 1;\r\n        }\r\n    }\r\n\r\n    function UpdateMaintaining(bool _isMaintaining) onlyOwner public {\r\n        isMaintaining = _isMaintaining;\r\n    }\r\n}\r\n\r\ncontract EtheremonEnum {\r\n\r\n    enum ResultCode {\r\n        SUCCESS,\r\n        ERROR_CLASS_NOT_FOUND,\r\n        ERROR_LOW_BALANCE,\r\n        ERROR_SEND_FAIL,\r\n        ERROR_NOT_TRAINER,\r\n        ERROR_NOT_ENOUGH_MONEY,\r\n        ERROR_INVALID_AMOUNT,\r\n        ERROR_OBJ_NOT_FOUND,\r\n        ERROR_OBJ_INVALID_OWNERSHIP\r\n    }\r\n    \r\n    enum ArrayType {\r\n        CLASS_TYPE,\r\n        STAT_STEP,\r\n        STAT_START,\r\n        STAT_BASE,\r\n        OBJ_SKILL\r\n    }\r\n}\r\n\r\ncontract EtheremonDataBase is EtheremonEnum, BasicAccessControl, SafeMath {\r\n    \r\n    uint64 public totalMonster;\r\n    uint32 public totalClass;\r\n    \r\n    // write\r\n    function addElementToArrayType(ArrayType _type, uint64 _id, uint8 _value) onlyModerators public returns(uint);\r\n    function removeElementOfArrayType(ArrayType _type, uint64 _id, uint8 _value) onlyModerators public returns(uint);\r\n    function setMonsterClass(uint32 _classId, uint256 _price, uint256 _returnPrice, bool _catchable) onlyModerators public returns(uint32);\r\n    function addMonsterObj(uint32 _classId, address _trainer, string _name) onlyModerators public returns(uint64);\r\n    function setMonsterObj(uint64 _objId, string _name, uint32 _exp, uint32 _createIndex, uint32 _lastClaimIndex) onlyModerators public;\r\n    function increaseMonsterExp(uint64 _objId, uint32 amount) onlyModerators public;\r\n    function decreaseMonsterExp(uint64 _objId, uint32 amount) onlyModerators public;\r\n    function removeMonsterIdMapping(address _trainer, uint64 _monsterId) onlyModerators public;\r\n    function addMonsterIdMapping(address _trainer, uint64 _monsterId) onlyModerators public;\r\n    function clearMonsterReturnBalance(uint64 _monsterId) onlyModerators public returns(uint256 amount);\r\n    function collectAllReturnBalance(address _trainer) onlyModerators public returns(uint256 amount);\r\n    function transferMonster(address _from, address _to, uint64 _monsterId) onlyModerators public returns(ResultCode);\r\n    function addExtraBalance(address _trainer, uint256 _amount) onlyModerators public returns(uint256);\r\n    function deductExtraBalance(address _trainer, uint256 _amount) onlyModerators public returns(uint256);\r\n    function setExtraBalance(address _trainer, uint256 _amount) onlyModerators public;\r\n    \r\n    // read\r\n    function getSizeArrayType(ArrayType _type, uint64 _id) constant public returns(uint);\r\n    function getElementInArrayType(ArrayType _type, uint64 _id, uint _index) constant public returns(uint8);\r\n    function getMonsterClass(uint32 _classId) constant public returns(uint32 classId, uint256 price, uint256 returnPrice, uint32 total, bool catchable);\r\n    function getMonsterObj(uint64 _objId) constant public returns(uint64 objId, uint32 classId, address trainer, uint32 exp, uint32 createIndex, uint32 lastClaimIndex, uint createTime);\r\n    function getMonsterName(uint64 _objId) constant public returns(string name);\r\n    function getExtraBalance(address _trainer) constant public returns(uint256);\r\n    function getMonsterDexSize(address _trainer) constant public returns(uint);\r\n    function getMonsterObjId(address _trainer, uint index) constant public returns(uint64);\r\n    function getExpectedBalance(address _trainer) constant public returns(uint256);\r\n    function getMonsterReturn(uint64 _objId) constant public returns(uint256 current, uint256 total);\r\n}\r\n\r\ninterface EtheremonBattleInterface {\r\n    function isOnBattle(uint64 _objId) constant external returns(bool) ;\r\n    function getMonsterCP(uint64 _objId) constant external returns(uint64);\r\n}\r\n\r\ncontract EtheremonTrade is EtheremonEnum, BasicAccessControl, SafeMath {\r\n    \r\n    uint8 constant public GEN0_NO = 24;\r\n\r\n    struct MonsterClassAcc {\r\n        uint32 classId;\r\n        uint256 price;\r\n        uint256 returnPrice;\r\n        uint32 total;\r\n        bool catchable;\r\n    }\r\n\r\n    struct MonsterObjAcc {\r\n        uint64 monsterId;\r\n        uint32 classId;\r\n        address trainer;\r\n        string name;\r\n        uint32 exp;\r\n        uint32 createIndex;\r\n        uint32 lastClaimIndex;\r\n        uint createTime;\r\n    }\r\n    \r\n    // Gen0 has return price & no longer can be caught when this contract is deployed\r\n    struct Gen0Config {\r\n        uint32 classId;\r\n        uint256 originalPrice;\r\n        uint256 returnPrice;\r\n        uint32 total; // total caught (not count those from eggs)\r\n    }\r\n    \r\n    struct BorrowItem {\r\n        uint index;\r\n        address owner;\r\n        address borrower;\r\n        uint256 price;\r\n        bool lent;\r\n        uint releaseTime;\r\n    }\r\n    \r\n    struct SellingItem {\r\n        uint index;\r\n        uint256 price;\r\n    }\r\n    \r\n    struct SoldItem {\r\n        uint64 objId;\r\n        uint256 price;\r\n        uint time;\r\n    }\r\n    \r\n    // data contract\r\n    address public dataContract;\r\n    address public battleContract;\r\n    mapping(uint32 => Gen0Config) public gen0Config;\r\n    \r\n    // for selling\r\n    mapping(uint64 => SellingItem) public sellingDict;\r\n    uint32 public totalSellingItem;\r\n    uint64[] public sellingList;\r\n    \r\n    // for borrowing\r\n    mapping(uint64 => BorrowItem) public borrowingDict;\r\n    uint32 public totalBorrowingItem;\r\n    uint64[] public borrowingList;\r\n    \r\n    mapping(address => uint64[]) public lendingList;\r\n    mapping(address => SoldItem[]) public soldList;\r\n    \r\n    // trading fee\r\n    uint16 public tradingFeePercentage = 1;\r\n    uint8 public maxLendingItem = 10;\r\n    \r\n    modifier requireDataContract {\r\n        require(dataContract != address(0));\r\n        _;\r\n    }\r\n    \r\n    modifier requireBattleContract {\r\n        require(battleContract != address(0));\r\n        _;\r\n    }\r\n    \r\n    // event\r\n    event EventPlaceSellOrder(address indexed seller, uint64 objId);\r\n    event EventBuyItem(address indexed buyer, uint64 objId);\r\n    event EventOfferBorrowingItem(address indexed lender, uint64 objId);\r\n    event EventAcceptBorrowItem(address indexed borrower, uint64 objId);\r\n    event EventGetBackItem(address indexed owner, uint64 objId);\r\n    event EventFreeTransferItem(address indexed sender, address indexed receiver, uint64 objId);\r\n    event EventRelease(address indexed trainer, uint64 objId);\r\n    \r\n    // constructor\r\n    function EtheremonTrade(address _dataContract, address _battleContract) public {\r\n        dataContract = _dataContract;\r\n        battleContract = _battleContract;\r\n    }\r\n    \r\n     // admin & moderators\r\n    function setOriginalPriceGen0() onlyModerators public {\r\n        gen0Config[1] = Gen0Config(1, 0.3 ether, 0.003 ether, 374);\r\n        gen0Config[2] = Gen0Config(2, 0.3 ether, 0.003 ether, 408);\r\n        gen0Config[3] = Gen0Config(3, 0.3 ether, 0.003 ether, 373);\r\n        gen0Config[4] = Gen0Config(4, 0.2 ether, 0.002 ether, 437);\r\n        gen0Config[5] = Gen0Config(5, 0.1 ether, 0.001 ether, 497);\r\n        gen0Config[6] = Gen0Config(6, 0.3 ether, 0.003 ether, 380); \r\n        gen0Config[7] = Gen0Config(7, 0.2 ether, 0.002 ether, 345);\r\n        gen0Config[8] = Gen0Config(8, 0.1 ether, 0.001 ether, 518); \r\n        gen0Config[9] = Gen0Config(9, 0.1 ether, 0.001 ether, 447);\r\n        gen0Config[10] = Gen0Config(10, 0.2 ether, 0.002 ether, 380); \r\n        gen0Config[11] = Gen0Config(11, 0.2 ether, 0.002 ether, 354);\r\n        gen0Config[12] = Gen0Config(12, 0.2 ether, 0.002 ether, 346);\r\n        gen0Config[13] = Gen0Config(13, 0.2 ether, 0.002 ether, 351); \r\n        gen0Config[14] = Gen0Config(14, 0.2 ether, 0.002 ether, 338);\r\n        gen0Config[15] = Gen0Config(15, 0.2 ether, 0.002 ether, 341);\r\n        gen0Config[16] = Gen0Config(16, 0.35 ether, 0.0035 ether, 384);\r\n        gen0Config[17] = Gen0Config(17, 1 ether, 0.01 ether, 305); \r\n        gen0Config[18] = Gen0Config(18, 0.1 ether, 0.001 ether, 427);\r\n        gen0Config[19] = Gen0Config(19, 1 ether, 0.01 ether, 304);\r\n        gen0Config[20] = Gen0Config(20, 0.4 ether, 0.05 ether, 82);\r\n        gen0Config[21] = Gen0Config(21, 1, 1, 123);\r\n        gen0Config[22] = Gen0Config(22, 0.2 ether, 0.001 ether, 468);\r\n        gen0Config[23] = Gen0Config(23, 0.5 ether, 0.0025 ether, 302);\r\n        gen0Config[24] = Gen0Config(24, 1 ether, 0.005 ether, 195);\r\n    }\r\n    \r\n    function setContract(address _dataContract, address _battleContract) onlyModerators public {\r\n        dataContract = _dataContract;\r\n        battleContract = _battleContract;\r\n    }\r\n    \r\n    function updateConfig(uint16 _fee, uint8 _maxLendingItem) onlyModerators public {\r\n        tradingFeePercentage = _fee;\r\n        maxLendingItem = _maxLendingItem;\r\n    }\r\n    \r\n    function withdrawEther(address _sendTo, uint _amount) onlyModerators public {\r\n        // no user money is kept in this contract, only trasaction fee\r\n        if (_amount > this.balance) {\r\n            revert();\r\n        }\r\n        _sendTo.transfer(_amount);\r\n    }\r\n    \r\n    \r\n    // helper\r\n    function removeSellingItem(uint64 _itemId) private {\r\n        SellingItem storage item = sellingDict[_itemId];\r\n        if (item.index == 0)\r\n            return;\r\n        \r\n        if (item.index <= sellingList.length) {\r\n            // Move an existing element into the vacated key slot.\r\n            sellingDict[sellingList[sellingList.length-1]].index = item.index;\r\n            sellingList[item.index-1] = sellingList[sellingList.length-1];\r\n            sellingList.length -= 1;\r\n            delete sellingDict[_itemId];\r\n        }\r\n    }\r\n    \r\n    function addSellingItem(uint64 _itemId, uint256 _price) private {\r\n        SellingItem storage item = sellingDict[_itemId];\r\n        item.price = _price;\r\n        \r\n        if (item.index == 0) {\r\n            item.index = ++sellingList.length;\r\n            sellingList[item.index - 1] = _itemId;\r\n        }\r\n    }\r\n\r\n    function removeBorrowingItem(uint64 _itemId) private {\r\n        BorrowItem storage item = borrowingDict[_itemId];\r\n        if (item.index == 0)\r\n            return;\r\n        \r\n        if (item.index <= borrowingList.length) {\r\n            // Move an existing element into the vacated key slot.\r\n            borrowingDict[borrowingList[borrowingList.length-1]].index = item.index;\r\n            borrowingList[item.index-1] = borrowingList[borrowingList.length-1];\r\n            borrowingList.length -= 1;\r\n            delete borrowingDict[_itemId];\r\n        }\r\n    }\r\n\r\n    function addBorrowingItem(address _owner, uint64 _itemId, uint256 _price, uint _releaseTime) private {\r\n        BorrowItem storage item = borrowingDict[_itemId];\r\n        item.owner = _owner;\r\n        item.borrower = address(0);\r\n        item.price = _price;\r\n        item.lent = false;\r\n        item.releaseTime = _releaseTime;\r\n        \r\n        if (item.index == 0) {\r\n            item.index = ++borrowingList.length;\r\n            borrowingList[item.index - 1] = _itemId;\r\n        }\r\n    }\r\n    \r\n    function transferMonster(address _to, uint64 _objId) private {\r\n        EtheremonDataBase data = EtheremonDataBase(dataContract);\r\n\r\n        MonsterObjAcc memory obj;\r\n        (obj.monsterId, obj.classId, obj.trainer, obj.exp, obj.createIndex, obj.lastClaimIndex, obj.createTime) = data.getMonsterObj(_objId);\r\n\r\n        // clear balance for gen 0\r\n        if (obj.classId <= GEN0_NO) {\r\n            Gen0Config storage gen0 = gen0Config[obj.classId];\r\n            if (gen0.classId == obj.classId) {\r\n                if (obj.lastClaimIndex < gen0.total) {\r\n                    uint32 gap = uint32(safeSubtract(gen0.total, obj.lastClaimIndex));\r\n                    if (gap > 0) {\r\n                        data.addExtraBalance(obj.trainer, safeMult(gap, gen0.returnPrice));\r\n                        // reset total (accept name is cleared :( )\r\n                        data.setMonsterObj(obj.monsterId, \" name me \", obj.exp, obj.createIndex, gen0.total);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        \r\n        // transfer owner\r\n        data.removeMonsterIdMapping(obj.trainer, _objId);\r\n        data.addMonsterIdMapping(_to, _objId);\r\n    }\r\n    \r\n    function addItemLendingList(address _trainer, uint64 _objId) private {\r\n        if (_trainer != address(0)) {\r\n            uint64[] storage objList = lendingList[_trainer];\r\n            for (uint index = 0; index < objList.length; index++) {\r\n                if (objList[index] == _objId) {\r\n                    return;\r\n                }\r\n            }\r\n            objList.push(_objId);\r\n        }\r\n    }\r\n    \r\n    function removeItemLendingList(address _trainer, uint64 _objId) private {\r\n        uint foundIndex = 0;\r\n        uint64[] storage objList = lendingList[_trainer];\r\n        for (; foundIndex < objList.length; foundIndex++) {\r\n            if (objList[foundIndex] == _objId) {\r\n                break;\r\n            }\r\n        }\r\n        if (foundIndex < objList.length) {\r\n            objList[foundIndex] = objList[objList.length-1];\r\n            delete objList[objList.length-1];\r\n            objList.length--;\r\n        }\r\n    }\r\n    \r\n    // public\r\n    function placeSellOrder(uint64 _objId, uint256 _price) requireDataContract requireBattleContract isActive external {\r\n        if (_price == 0)\r\n            revert();\r\n        // not on borrowing\r\n        BorrowItem storage item = borrowingDict[_objId];\r\n        if (item.index > 0)\r\n            revert();\r\n        // not on battle \r\n        EtheremonBattleInterface battle = EtheremonBattleInterface(battleContract);\r\n        if (battle.isOnBattle(_objId))\r\n            revert();\r\n        \r\n        // check ownership\r\n        EtheremonDataBase data = EtheremonDataBase(dataContract);\r\n        MonsterObjAcc memory obj;\r\n        uint32 _ = 0;\r\n        (obj.monsterId, obj.classId, obj.trainer, obj.exp, _, _, obj.createTime) = data.getMonsterObj(_objId);\r\n        \r\n        if (obj.monsterId != _objId) {\r\n            revert();\r\n        }\r\n        \r\n        if (obj.trainer != msg.sender) {\r\n            revert();\r\n        }\r\n        \r\n        // on selling, then just update price\r\n        if (sellingDict[_objId].index > 0){\r\n            sellingDict[_objId].price = _price;\r\n        } else {\r\n            addSellingItem(_objId, _price);\r\n        }\r\n        EventPlaceSellOrder(msg.sender, _objId);\r\n    }\r\n    \r\n    function removeSellOrder(uint64 _objId) requireDataContract requireBattleContract isActive external {\r\n        if (sellingDict[_objId].index == 0)\r\n            revert();\r\n        \r\n        // check ownership\r\n        EtheremonDataBase data = EtheremonDataBase(dataContract);\r\n        MonsterObjAcc memory obj;\r\n        uint32 _ = 0;\r\n        (obj.monsterId, obj.classId, obj.trainer, obj.exp, _, _, obj.createTime) = data.getMonsterObj(_objId);\r\n        \r\n        if (obj.monsterId != _objId) {\r\n            revert();\r\n        }\r\n        \r\n        if (obj.trainer != msg.sender) {\r\n            revert();\r\n        }\r\n        \r\n        removeSellingItem(_objId);\r\n    }\r\n    \r\n    function buyItem(uint64 _objId) requireDataContract requireBattleContract isActive external payable {\r\n        // check item is valid to sell \r\n        uint256 requestPrice = sellingDict[_objId].price;\r\n        if (requestPrice == 0 || msg.value != requestPrice) {\r\n            revert();\r\n        }\r\n        \r\n        // check obj\r\n        EtheremonDataBase data = EtheremonDataBase(dataContract);\r\n        MonsterObjAcc memory obj;\r\n        uint32 _ = 0;\r\n        (obj.monsterId, obj.classId, obj.trainer, obj.exp, _, _, obj.createTime) = data.getMonsterObj(_objId);\r\n        if (obj.monsterId != _objId) {\r\n            revert();\r\n        }\r\n        // can not buy from yourself\r\n        if (obj.trainer == msg.sender) {\r\n            revert();\r\n        }\r\n        \r\n        address oldTrainer = obj.trainer;\r\n        uint256 fee = requestPrice * tradingFeePercentage / 100;\r\n        removeSellingItem(_objId);\r\n        transferMonster(msg.sender, _objId);\r\n        oldTrainer.transfer(safeSubtract(requestPrice, fee));\r\n        \r\n        SoldItem memory soldItem = SoldItem(_objId, requestPrice, block.timestamp);\r\n        soldList[oldTrainer].push(soldItem);\r\n        EventBuyItem(msg.sender, _objId);\r\n    }\r\n    \r\n    function offerBorrowingItem(uint64 _objId, uint256 _price, uint _releaseTime) requireDataContract requireBattleContract isActive external {\r\n        // make sure it is not on sale \r\n        if (sellingDict[_objId].price > 0 || _price == 0)\r\n            revert();\r\n        // not on lent\r\n        BorrowItem storage item = borrowingDict[_objId];\r\n        if (item.lent == true)\r\n            revert();\r\n        // not on battle \r\n        EtheremonBattleInterface battle = EtheremonBattleInterface(battleContract);\r\n        if (battle.isOnBattle(_objId))\r\n            revert();\r\n        \r\n        \r\n        // check ownership\r\n        EtheremonDataBase data = EtheremonDataBase(dataContract);\r\n        MonsterObjAcc memory obj;\r\n        uint32 _ = 0;\r\n        (obj.monsterId, obj.classId, obj.trainer, obj.exp, _, _, obj.createTime) = data.getMonsterObj(_objId);\r\n        \r\n        if (obj.monsterId != _objId) {\r\n            revert();\r\n        }\r\n        \r\n        if (obj.trainer != msg.sender) {\r\n            revert();\r\n        }\r\n        \r\n        if (item.index > 0) {\r\n            // update info \r\n            item.price = _price;\r\n            item.releaseTime = _releaseTime;\r\n        } else {\r\n            addBorrowingItem(msg.sender, _objId, _price, _releaseTime);\r\n        }\r\n        EventOfferBorrowingItem(msg.sender, _objId);\r\n    }\r\n    \r\n    function removeBorrowingOfferItem(uint64 _objId) requireDataContract requireBattleContract isActive external {\r\n        BorrowItem storage item = borrowingDict[_objId];\r\n        if (item.index == 0)\r\n            revert();\r\n        \r\n        if (item.owner != msg.sender)\r\n            revert();\r\n        if (item.lent == true)\r\n            revert();\r\n        \r\n        removeBorrowingItem(_objId);\r\n    }\r\n    \r\n    function borrowItem(uint64 _objId) requireDataContract requireBattleContract isActive external payable {\r\n        BorrowItem storage item = borrowingDict[_objId];\r\n        if (item.index == 0)\r\n            revert();\r\n        if (item.lent == true)\r\n            revert();\r\n        uint256 itemPrice = item.price;\r\n        if (itemPrice != msg.value)\r\n            revert();\r\n        \r\n\r\n        // check obj\r\n        EtheremonDataBase data = EtheremonDataBase(dataContract);\r\n        MonsterObjAcc memory obj;\r\n        uint32 _ = 0;\r\n        (obj.monsterId, obj.classId, obj.trainer, obj.exp, _, _, obj.createTime) = data.getMonsterObj(_objId);\r\n        if (obj.monsterId != _objId) {\r\n            revert();\r\n        }\r\n        // can not borrow from yourself\r\n        if (obj.trainer == msg.sender) {\r\n            revert();\r\n        }\r\n        \r\n        uint256 fee = itemPrice * tradingFeePercentage / 100;\r\n        item.borrower = msg.sender;\r\n        item.releaseTime += block.timestamp;\r\n        item.lent = true;\r\n        address oldOwner = obj.trainer;\r\n        transferMonster(msg.sender, _objId);\r\n        oldOwner.transfer(safeSubtract(itemPrice, fee));\r\n        addItemLendingList(oldOwner, _objId);\r\n        EventAcceptBorrowItem(msg.sender, _objId);\r\n    }\r\n    \r\n    function getBackLendingItem(uint64 _objId) requireDataContract requireBattleContract isActive external {\r\n        BorrowItem storage item = borrowingDict[_objId];\r\n        if (item.index == 0)\r\n            revert();\r\n        if (item.lent == false)\r\n            revert();\r\n        if (item.releaseTime > block.timestamp)\r\n            revert();\r\n        \r\n        if (msg.sender != item.owner)\r\n            revert();\r\n        \r\n        removeBorrowingItem(_objId);\r\n        transferMonster(msg.sender, _objId);\r\n        removeItemLendingList(msg.sender, _objId);\r\n        EventGetBackItem(msg.sender, _objId);\r\n    }\r\n    \r\n    function freeTransferItem(uint64 _objId, address _receiver) requireDataContract requireBattleContract external {\r\n        // make sure it is not on sale \r\n        if (sellingDict[_objId].price > 0)\r\n            revert();\r\n        // not on borrowing\r\n        BorrowItem storage item = borrowingDict[_objId];\r\n        if (item.index > 0)\r\n            revert();\r\n        // not on battle \r\n        EtheremonBattleInterface battle = EtheremonBattleInterface(battleContract);\r\n        if (battle.isOnBattle(_objId))\r\n            revert();\r\n        \r\n        // check ownership\r\n        EtheremonDataBase data = EtheremonDataBase(dataContract);\r\n        MonsterObjAcc memory obj;\r\n        uint32 _ = 0;\r\n        (obj.monsterId, obj.classId, obj.trainer, obj.exp, _, _, obj.createTime) = data.getMonsterObj(_objId);\r\n        \r\n        if (obj.monsterId != _objId) {\r\n            revert();\r\n        }\r\n        \r\n        if (obj.trainer != msg.sender) {\r\n            revert();\r\n        }\r\n        \r\n        transferMonster(_receiver, _objId);\r\n        EventFreeTransferItem(msg.sender, _receiver, _objId);\r\n    }\r\n    \r\n    function release(uint64 _objId) requireDataContract requireBattleContract external {\r\n        // make sure it is not on sale \r\n        if (sellingDict[_objId].price > 0)\r\n            revert();\r\n        // not on borrowing\r\n        BorrowItem storage item = borrowingDict[_objId];\r\n        if (item.index > 0)\r\n            revert();\r\n        // not on battle \r\n        EtheremonBattleInterface battle = EtheremonBattleInterface(battleContract);\r\n        if (battle.isOnBattle(_objId))\r\n            revert();\r\n        \r\n        // check ownership\r\n        EtheremonDataBase data = EtheremonDataBase(dataContract);\r\n        MonsterObjAcc memory obj;\r\n        uint32 _ = 0;\r\n        (obj.monsterId, obj.classId, obj.trainer, obj.exp, _, _, obj.createTime) = data.getMonsterObj(_objId);\r\n        \r\n        // can not release gen 0\r\n        if (obj.classId <= GEN0_NO) {\r\n            revert();\r\n        }\r\n        \r\n        if (obj.monsterId != _objId) {\r\n            revert();\r\n        }\r\n        \r\n        if (obj.trainer != msg.sender) {\r\n            revert();\r\n        }\r\n        \r\n        data.removeMonsterIdMapping(msg.sender, _objId);\r\n        EventRelease(msg.sender, _objId);\r\n    }\r\n    \r\n    // read access\r\n    \r\n    function getBasicObjInfo(uint64 _objId) constant public returns(uint32, address, uint32, uint32){\r\n        EtheremonDataBase data = EtheremonDataBase(dataContract);\r\n        MonsterObjAcc memory obj;\r\n        (obj.monsterId, obj.classId, obj.trainer, obj.exp, obj.createIndex, obj.lastClaimIndex, obj.createTime) = data.getMonsterObj(_objId);\r\n        return (obj.classId, obj.trainer, obj.exp, obj.createIndex);\r\n    }\r\n    \r\n    function getBasicObjInfoWithBp(uint64 _objId) constant public returns(uint32, uint32, uint32, uint64) {\r\n        EtheremonDataBase data = EtheremonDataBase(dataContract);\r\n        MonsterObjAcc memory obj;\r\n        (obj.monsterId, obj.classId, obj.trainer, obj.exp, obj.createIndex, obj.lastClaimIndex, obj.createTime) = data.getMonsterObj(_objId);\r\n        EtheremonBattleInterface battle = EtheremonBattleInterface(battleContract);\r\n        uint64 bp = battle.getMonsterCP(_objId);\r\n        return (obj.classId, obj.exp, obj.createIndex, bp);\r\n    }\r\n    \r\n    function getTotalSellingItem() constant external returns(uint) {\r\n        return sellingList.length;\r\n    }\r\n\r\n    function getSellingItem(uint _index) constant external returns(uint64 objId, uint32 classId, uint32 exp, uint64 bp, address trainer, uint createIndex, uint256 price) {\r\n        objId = sellingList[_index];\r\n        if (objId > 0) {\r\n            (classId, trainer, exp, createIndex) = getBasicObjInfo(objId);\r\n            EtheremonBattleInterface battle = EtheremonBattleInterface(battleContract);\r\n            bp = battle.getMonsterCP(objId);\r\n            price = sellingDict[objId].price;\r\n        }\r\n    }\r\n    \r\n    function getSellingItemByObjId(uint64 _objId) constant external returns(uint32 classId, uint32 exp, uint64 bp, address trainer, uint createIndex, uint256 price) {\r\n        price = sellingDict[_objId].price;\r\n        if (price > 0) {\r\n            (classId, trainer, exp, createIndex) = getBasicObjInfo(_objId);\r\n            EtheremonBattleInterface battle = EtheremonBattleInterface(battleContract);\r\n            bp = battle.getMonsterCP(_objId);\r\n        }\r\n    }\r\n\r\n    function getTotalBorrowingItem() constant external returns(uint) {\r\n        return borrowingList.length;\r\n    }\r\n\r\n    function getBorrowingItem(uint _index) constant external returns(uint64 objId, address owner, address borrower, \r\n        uint256 price, bool lent, uint releaseTime, uint32 classId, uint32 exp, uint32 createIndex, uint64 bp) {\r\n        objId = borrowingList[_index];\r\n        BorrowItem storage item = borrowingDict[objId];\r\n        owner = item.owner;\r\n        borrower = item.borrower;\r\n        price = item.price;\r\n        lent = item.lent;\r\n        releaseTime = item.releaseTime;\r\n        \r\n        (classId, exp, createIndex, bp) = getBasicObjInfoWithBp(objId);\r\n    }\r\n    \r\n    function getBorrowingItemByObjId(uint64 _objId) constant external returns(uint index, address owner, address borrower, \r\n        uint256 price, bool lent, uint releaseTime, uint32 classId, uint32 exp, uint32 createIndex, uint64 bp) {\r\n        BorrowItem storage item = borrowingDict[_objId];\r\n        index = item.index;\r\n        owner = item.owner;\r\n        borrower = item.borrower;\r\n        price = item.price;\r\n        lent = item.lent;\r\n        releaseTime = item.releaseTime;\r\n        \r\n        (classId, exp, createIndex, bp) = getBasicObjInfoWithBp(_objId);\r\n    }\r\n    \r\n    function getSoldItemLength(address _trainer) constant external returns(uint) {\r\n        return soldList[_trainer].length;\r\n    }\r\n    \r\n    function getSoldItem(address _trainer, uint _index) constant external returns(uint64 objId, uint32 classId, uint32 exp, uint64 bp, address currentOwner, \r\n        uint createIndex, uint256 price, uint time) {\r\n        if (_index > soldList[_trainer].length)\r\n            return;\r\n        SoldItem memory soldItem = soldList[_trainer][_index];\r\n        objId = soldItem.objId;\r\n        price = soldItem.price;\r\n        time = soldItem.time;\r\n        if (objId > 0) {\r\n            (classId, currentOwner, exp, createIndex) = getBasicObjInfo(objId);\r\n            EtheremonBattleInterface battle = EtheremonBattleInterface(battleContract);\r\n            bp = battle.getMonsterCP(objId);\r\n        }\r\n    }\r\n    \r\n    function getLendingItemLength(address _trainer) constant external returns(uint) {\r\n        return lendingList[_trainer].length;\r\n    }\r\n    \r\n    function getLendingItemInfo(address _trainer, uint _index) constant external returns(uint64 objId, address owner, address borrower, \r\n        uint256 price, bool lent, uint releaseTime, uint32 classId, uint32 exp, uint32 createIndex, uint64 bp) {\r\n        if (_index > lendingList[_trainer].length)\r\n            return;\r\n        objId = lendingList[_trainer][_index];\r\n        BorrowItem storage item = borrowingDict[objId];\r\n        owner = item.owner;\r\n        borrower = item.borrower;\r\n        price = item.price;\r\n        lent = item.lent;\r\n        releaseTime = item.releaseTime;\r\n        \r\n        (classId, exp, createIndex, bp) = getBasicObjInfoWithBp(objId);\r\n    }\r\n    \r\n    function getTradingInfo(uint64 _objId) constant external returns(uint256 sellingPrice, uint256 lendingPrice, bool lent, uint releaseTime) {\r\n        sellingPrice = sellingDict[_objId].price;\r\n        BorrowItem storage item = borrowingDict[_objId];\r\n        lendingPrice = item.price;\r\n        lent = item.lent;\r\n        releaseTime = item.releaseTime;\r\n    }\r\n    \r\n    function isOnTrading(uint64 _objId) constant external returns(bool) {\r\n        return (sellingDict[_objId].price > 0 || borrowingDict[_objId].owner != address(0));\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getTotalBorrowingItem\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_objId\",\"type\":\"uint64\"}],\"name\":\"getTradingInfo\",\"outputs\":[{\"name\":\"sellingPrice\",\"type\":\"uint256\"},{\"name\":\"lendingPrice\",\"type\":\"uint256\"},{\"name\":\"lent\",\"type\":\"bool\"},{\"name\":\"releaseTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_objId\",\"type\":\"uint64\"},{\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"freeTransferItem\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"sellingDict\",\"outputs\":[{\"name\":\"index\",\"type\":\"uint256\"},{\"name\":\"price\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dataContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"gen0Config\",\"outputs\":[{\"name\":\"classId\",\"type\":\"uint32\"},{\"name\":\"originalPrice\",\"type\":\"uint256\"},{\"name\":\"returnPrice\",\"type\":\"uint256\"},{\"name\":\"total\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_objId\",\"type\":\"uint64\"}],\"name\":\"getSellingItemByObjId\",\"outputs\":[{\"name\":\"classId\",\"type\":\"uint32\"},{\"name\":\"exp\",\"type\":\"uint32\"},{\"name\":\"bp\",\"type\":\"uint64\"},{\"name\":\"trainer\",\"type\":\"address\"},{\"name\":\"createIndex\",\"type\":\"uint256\"},{\"name\":\"price\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"moderators\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxLendingItem\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_dataContract\",\"type\":\"address\"},{\"name\":\"_battleContract\",\"type\":\"address\"}],\"name\":\"setContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_objId\",\"type\":\"uint64\"},{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"_releaseTime\",\"type\":\"uint256\"}],\"name\":\"offerBorrowingItem\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_trainer\",\"type\":\"address\"}],\"name\":\"getSoldItemLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_objId\",\"type\":\"uint64\"}],\"name\":\"release\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"battleContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_trainer\",\"type\":\"address\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getSoldItem\",\"outputs\":[{\"name\":\"objId\",\"type\":\"uint64\"},{\"name\":\"classId\",\"type\":\"uint32\"},{\"name\":\"exp\",\"type\":\"uint32\"},{\"name\":\"bp\",\"type\":\"uint64\"},{\"name\":\"currentOwner\",\"type\":\"address\"},{\"name\":\"createIndex\",\"type\":\"uint256\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"time\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_isMaintaining\",\"type\":\"bool\"}],\"name\":\"UpdateMaintaining\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_objId\",\"type\":\"uint64\"}],\"name\":\"getBackLendingItem\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalModerators\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_objId\",\"type\":\"uint64\"}],\"name\":\"getBorrowingItemByObjId\",\"outputs\":[{\"name\":\"index\",\"type\":\"uint256\"},{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"borrower\",\"type\":\"address\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"lent\",\"type\":\"bool\"},{\"name\":\"releaseTime\",\"type\":\"uint256\"},{\"name\":\"classId\",\"type\":\"uint32\"},{\"name\":\"exp\",\"type\":\"uint32\"},{\"name\":\"createIndex\",\"type\":\"uint32\"},{\"name\":\"bp\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalBorrowingItem\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"borrowingDict\",\"outputs\":[{\"name\":\"index\",\"type\":\"uint256\"},{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"borrower\",\"type\":\"address\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"lent\",\"type\":\"bool\"},{\"name\":\"releaseTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sendTo\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_objId\",\"type\":\"uint64\"}],\"name\":\"getBasicObjInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint32\"},{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_objId\",\"type\":\"uint64\"}],\"name\":\"removeBorrowingOfferItem\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalSellingItem\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setOriginalPriceGen0\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newModerator\",\"type\":\"address\"}],\"name\":\"AddModerator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fee\",\"type\":\"uint16\"},{\"name\":\"_maxLendingItem\",\"type\":\"uint8\"}],\"name\":\"updateConfig\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GEN0_NO\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_objId\",\"type\":\"uint64\"}],\"name\":\"getBasicObjInfoWithBp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"},{\"name\":\"\",\"type\":\"uint32\"},{\"name\":\"\",\"type\":\"uint32\"},{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getSellingItem\",\"outputs\":[{\"name\":\"objId\",\"type\":\"uint64\"},{\"name\":\"classId\",\"type\":\"uint32\"},{\"name\":\"exp\",\"type\":\"uint32\"},{\"name\":\"bp\",\"type\":\"uint64\"},{\"name\":\"trainer\",\"type\":\"address\"},{\"name\":\"createIndex\",\"type\":\"uint256\"},{\"name\":\"price\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"sellingList\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_objId\",\"type\":\"uint64\"}],\"name\":\"isOnTrading\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_trainer\",\"type\":\"address\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getLendingItemInfo\",\"outputs\":[{\"name\":\"objId\",\"type\":\"uint64\"},{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"borrower\",\"type\":\"address\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"lent\",\"type\":\"bool\"},{\"name\":\"releaseTime\",\"type\":\"uint256\"},{\"name\":\"classId\",\"type\":\"uint32\"},{\"name\":\"exp\",\"type\":\"uint32\"},{\"name\":\"createIndex\",\"type\":\"uint32\"},{\"name\":\"bp\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tradingFeePercentage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"borrowingList\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_oldModerator\",\"type\":\"address\"}],\"name\":\"RemoveModerator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"soldList\",\"outputs\":[{\"name\":\"objId\",\"type\":\"uint64\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"time\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_objId\",\"type\":\"uint64\"},{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"placeSellOrder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_trainer\",\"type\":\"address\"}],\"name\":\"getLendingItemLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_objId\",\"type\":\"uint64\"}],\"name\":\"buyItem\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSellingItem\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_objId\",\"type\":\"uint64\"}],\"name\":\"removeSellOrder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lendingList\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_objId\",\"type\":\"uint64\"}],\"name\":\"borrowItem\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isMaintaining\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"ChangeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getBorrowingItem\",\"outputs\":[{\"name\":\"objId\",\"type\":\"uint64\"},{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"borrower\",\"type\":\"address\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"lent\",\"type\":\"bool\"},{\"name\":\"releaseTime\",\"type\":\"uint256\"},{\"name\":\"classId\",\"type\":\"uint32\"},{\"name\":\"exp\",\"type\":\"uint32\"},{\"name\":\"createIndex\",\"type\":\"uint32\"},{\"name\":\"bp\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_dataContract\",\"type\":\"address\"},{\"name\":\"_battleContract\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"objId\",\"type\":\"uint64\"}],\"name\":\"EventPlaceSellOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"objId\",\"type\":\"uint64\"}],\"name\":\"EventBuyItem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"lender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"objId\",\"type\":\"uint64\"}],\"name\":\"EventOfferBorrowingItem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"objId\",\"type\":\"uint64\"}],\"name\":\"EventAcceptBorrowItem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"objId\",\"type\":\"uint64\"}],\"name\":\"EventGetBackItem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"objId\",\"type\":\"uint64\"}],\"name\":\"EventFreeTransferItem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"trainer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"objId\",\"type\":\"uint64\"}],\"name\":\"EventRelease\",\"type\":\"event\"}]","ContractName":"EtheremonTrade","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000abc1c404424bdf24c19a5cc5ef8f47781d18eb3e0000000000000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://73bb2bd72813d7046e86d3c077137127791d6f12c219717e2b389720d91d3185"}]}