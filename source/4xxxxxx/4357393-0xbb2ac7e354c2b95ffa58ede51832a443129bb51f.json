{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.15;\r\n\r\n/// @title Ownable\r\n/// @dev The Ownable contract has an owner address, and provides basic authorization control\r\n/// functions, this simplifies the implementation of \"user permissions\".\r\ncontract Ownable {\r\n\r\n  // EVENTS\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  // PUBLIC FUNCTIONS\r\n\r\n  /// @dev The Ownable constructor sets the original `owner` of the contract to the sender account.\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /// @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n  /// @param newOwner The address to transfer ownership to.\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n  // MODIFIERS\r\n\r\n  /// @dev Throws if called by any account other than the owner.\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  // FIELDS\r\n\r\n  address public owner;\r\n}\r\n\r\n/// @title ERC20 interface\r\n/// @dev Full ERC20 interface described at https://github.com/ethereum/EIPs/issues/20.\r\ncontract ERC20 {\r\n\r\n  // EVENTS\r\n\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n  // PUBLIC FUNCTIONS\r\n\r\n  function transfer(address _to, uint256 _value) public returns (bool);\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool);\r\n  function approve(address _spender, uint256 _value) public returns (bool);\r\n  function balanceOf(address _owner) public constant returns (uint256);\r\n  function allowance(address _owner, address _spender) public constant returns (uint256);\r\n\r\n  // FIELDS\r\n\r\n  uint256 public totalSupply;\r\n}\r\n\r\ncontract WithToken {\r\n    ERC20 public token;\r\n}\r\n\r\ncontract SSPTypeAware {\r\n    enum SSPType { Gate, Direct }\r\n}\r\n\r\ncontract SSPRegistry is SSPTypeAware{\r\n    // This is the function that actually insert a record.\r\n    function register(address key, SSPType sspType, uint16 publisherFee, address recordOwner);\r\n\r\n    // Updates the values of the given record.\r\n    function updatePublisherFee(address key, uint16 newFee, address sender);\r\n\r\n    function applyKarmaDiff(address key, uint256[2] diff);\r\n\r\n    // Unregister a given record\r\n    function unregister(address key, address sender);\r\n\r\n    //Transfer ownership of record\r\n    function transfer(address key, address newOwner, address sender);\r\n\r\n    function getOwner(address key) constant returns(address);\r\n\r\n    // Tells whether a given key is registered.\r\n    function isRegistered(address key) constant returns(bool);\r\n\r\n    function getSSP(address key) constant returns(address sspAddress, SSPType sspType, uint16 publisherFee, uint256[2] karma, address recordOwner);\r\n\r\n    function getAllSSP() constant returns(address[] addresses, SSPType[] sspTypes, uint16[] publisherFees, uint256[2][] karmas, address[] recordOwners);\r\n\r\n    function kill();\r\n}\r\n\r\ncontract PublisherRegistry {\r\n    // This is the function that actually insert a record.\r\n    function register(address key, bytes32[5] url, address recordOwner);\r\n\r\n    // Updates the values of the given record.\r\n    function updateUrl(address key, bytes32[5] url, address sender);\r\n\r\n    function applyKarmaDiff(address key, uint256[2] diff);\r\n\r\n    // Unregister a given record\r\n    function unregister(address key, address sender);\r\n\r\n    //Transfer ownership of record\r\n    function transfer(address key, address newOwner, address sender);\r\n\r\n    function getOwner(address key) constant returns(address);\r\n\r\n    // Tells whether a given key is registered.\r\n    function isRegistered(address key) constant returns(bool);\r\n\r\n    function getPublisher(address key) constant returns(address publisherAddress, bytes32[5] url, uint256[2] karma, address recordOwner);\r\n\r\n    //@dev Get list of all registered publishers\r\n    //@return Returns array of addresses registered as DSP with register times\r\n    function getAllPublishers() constant returns(address[] addresses, bytes32[5][] urls, uint256[2][] karmas, address[] recordOwners);\r\n\r\n    function kill();\r\n}\r\n\r\ncontract DSPTypeAware {\r\n    enum DSPType { Gate, Direct }\r\n}\r\n\r\ncontract DSPRegistry is DSPTypeAware{\r\n    // This is the function that actually insert a record.\r\n    function register(address key, DSPType dspType, bytes32[5] url, address recordOwner);\r\n\r\n    // Updates the values of the given record.\r\n    function updateUrl(address key, bytes32[5] url, address sender);\r\n\r\n    function applyKarmaDiff(address key, uint256[2] diff);\r\n\r\n    // Unregister a given record\r\n    function unregister(address key, address sender);\r\n\r\n    // Transfer ownership of a given record.\r\n    function transfer(address key, address newOwner, address sender);\r\n\r\n    function getOwner(address key) constant returns(address);\r\n\r\n    // Tells whether a given key is registered.\r\n    function isRegistered(address key) constant returns(bool);\r\n\r\n    function getDSP(address key) constant returns(address dspAddress, DSPType dspType, bytes32[5] url, uint256[2] karma, address recordOwner);\r\n\r\n    //@dev Get list of all registered dsp\r\n    //@return Returns array of addresses registered as DSP with register times\r\n    function getAllDSP() constant returns(address[] addresses, DSPType[] dspTypes, bytes32[5][] urls, uint256[2][] karmas, address[] recordOwners) ;\r\n\r\n    function kill();\r\n}\r\n\r\ncontract DepositRegistry {\r\n    // This is the function that actually insert a record.\r\n    function register(address key, uint256 amount, address depositOwner);\r\n\r\n    // Unregister a given record\r\n    function unregister(address key);\r\n\r\n    function transfer(address key, address newOwner, address sender);\r\n\r\n    function spend(address key, uint256 amount);\r\n\r\n    function refill(address key, uint256 amount);\r\n\r\n    // Tells whether a given key is registered.\r\n    function isRegistered(address key) constant returns(bool);\r\n\r\n    function getDepositOwner(address key) constant returns(address);\r\n\r\n    function getDeposit(address key) constant returns(uint256 amount);\r\n\r\n    function getDepositRecord(address key) constant returns(address owner, uint time, uint256 amount, address depositOwner);\r\n\r\n    function hasEnough(address key, uint256 amount) constant returns(bool);\r\n\r\n    function kill();\r\n}\r\n\r\ncontract AuditorRegistry {\r\n    // This is the function that actually insert a record.\r\n    function register(address key, address recordOwner);\r\n\r\n    function applyKarmaDiff(address key, uint256[2] diff);\r\n\r\n    // Unregister a given record\r\n    function unregister(address key, address sender);\r\n\r\n    //Transfer ownership of record\r\n    function transfer(address key, address newOwner, address sender);\r\n\r\n    function getOwner(address key) constant returns(address);\r\n\r\n    // Tells whether a given key is registered.\r\n    function isRegistered(address key) constant returns(bool);\r\n\r\n    function getAuditor(address key) constant returns(address auditorAddress, uint256[2] karma, address recordOwner);\r\n\r\n    //@dev Get list of all registered dsp\r\n    //@return Returns array of addresses registered as DSP with register times\r\n    function getAllAuditors() constant returns(address[] addresses, uint256[2][] karmas, address[] recordOwners);\r\n\r\n    function kill();\r\n}\r\n\r\ncontract DepositAware is WithToken{\r\n    function returnDeposit(address depositAccount, DepositRegistry depositRegistry) internal {\r\n        if (depositRegistry.isRegistered(depositAccount)) {\r\n            uint256 amount = depositRegistry.getDeposit(depositAccount);\r\n            address depositOwner = depositRegistry.getDepositOwner(depositAccount);\r\n            if (amount > 0) {\r\n                token.transfer(depositOwner, amount);\r\n                depositRegistry.unregister(depositAccount);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ncontract SecurityDepositAware is DepositAware{\r\n    uint256 constant SECURITY_DEPOSIT_SIZE = 10;\r\n\r\n    DepositRegistry public securityDepositRegistry;\r\n\r\n    function receiveSecurityDeposit(address depositAccount) internal {\r\n        token.transferFrom(msg.sender, this, SECURITY_DEPOSIT_SIZE);\r\n        securityDepositRegistry.register(depositAccount, SECURITY_DEPOSIT_SIZE, msg.sender);\r\n    }\r\n\r\n    function transferSecurityDeposit(address depositAccount, address newOwner) {\r\n        securityDepositRegistry.transfer(depositAccount, newOwner, msg.sender);\r\n    }\r\n}\r\n\r\ncontract AuditorRegistrar is SecurityDepositAware{\r\n    AuditorRegistry public auditorRegistry;\r\n\r\n    event AuditorRegistered(address auditorAddress);\r\n    event AuditorUnregistered(address auditorAddress);\r\n\r\n    //@dev Retrieve information about registered Auditor\r\n    //@return Address of registered Auditor and time when registered\r\n    function findAuditor(address addr) constant returns(address auditorAddress, uint256[2] karma, address recordOwner) {\r\n        return auditorRegistry.getAuditor(addr);\r\n    }\r\n\r\n    //@dev check if Auditor registered\r\n    function isAuditorRegistered(address key) constant returns(bool) {\r\n        return auditorRegistry.isRegistered(key);\r\n    }\r\n\r\n    //@dev Register organisation as Auditor\r\n    //@param auditorAddress address of wallet to register\r\n    function registerAuditor(address auditorAddress) {\r\n        receiveSecurityDeposit(auditorAddress);\r\n        auditorRegistry.register(auditorAddress, msg.sender);\r\n        AuditorRegistered(auditorAddress);\r\n    }\r\n\r\n    //@dev Unregister Auditor and return unused deposit\r\n    //@param Address of Auditor to be unregistered\r\n    function unregisterAuditor(address auditorAddress) {\r\n        returnDeposit(auditorAddress, securityDepositRegistry);\r\n        auditorRegistry.unregister(auditorAddress, msg.sender);\r\n        AuditorUnregistered(auditorAddress);\r\n    }\r\n\r\n    //@dev transfer ownership of this Auditor record\r\n    //@param address of Auditor\r\n    //@param address of new owner\r\n    function transferAuditorRecord(address key, address newOwner) {\r\n        auditorRegistry.transfer(key, newOwner, msg.sender);\r\n    }\r\n}\r\n\r\ncontract DSPRegistrar is DSPTypeAware, SecurityDepositAware {\r\n    DSPRegistry public dspRegistry;\r\n\r\n    event DSPRegistered(address dspAddress);\r\n    event DSPUnregistered(address dspAddress);\r\n    event DSPParametersChanged(address dspAddress);\r\n\r\n    //@dev Retrieve information about registered DSP\r\n    //@return Address of registered DSP and time when registered\r\n    function findDsp(address addr) constant returns(address dspAddress, DSPType dspType, bytes32[5] url, uint256[2] karma, address recordOwner) {\r\n        return dspRegistry.getDSP(addr);\r\n    }\r\n\r\n    //@dev Register organisation as DSP\r\n    //@param dspAddress address of wallet to register\r\n    function registerDsp(address dspAddress, DSPType dspType, bytes32[5] url) {\r\n        receiveSecurityDeposit(dspAddress);\r\n        dspRegistry.register(dspAddress, dspType, url, msg.sender);\r\n        DSPRegistered(dspAddress);\r\n    }\r\n\r\n    //@dev check if DSP registered\r\n    function isDspRegistered(address key) constant returns(bool) {\r\n        return dspRegistry.isRegistered(key);\r\n    }\r\n\r\n    //@dev Unregister DSP and return unused deposit\r\n    //@param Address of DSP to be unregistered\r\n    function unregisterDsp(address dspAddress) {\r\n        returnDeposit(dspAddress, securityDepositRegistry);\r\n        dspRegistry.unregister(dspAddress, msg.sender);\r\n        DSPUnregistered(dspAddress);\r\n    }\r\n\r\n    //@dev Change url of DSP\r\n    //@param address of DSP to change\r\n    //@param new url\r\n    function updateUrl(address key, bytes32[5] url) {\r\n        dspRegistry.updateUrl(key, url, msg.sender);\r\n        DSPParametersChanged(key);\r\n    }\r\n\r\n    //@dev transfer ownership of this DSP record\r\n    //@param address of DSP\r\n    //@param address of new owner\r\n    function transferDSPRecord(address key, address newOwner) {\r\n        dspRegistry.transfer(key, newOwner, msg.sender);\r\n    }\r\n}\r\n\r\ncontract PublisherRegistrar is SecurityDepositAware{\r\n    PublisherRegistry public publisherRegistry;\r\n\r\n    event PublisherRegistered(address publisherAddress);\r\n    event PublisherUnregistered(address publisherAddress);\r\n    event PublisherParametersChanged(address publisherAddress);\r\n\r\n    //@dev Retrieve information about registered Publisher\r\n    //@return Address of registered Publisher and time when registered\r\n    function findPublisher(address addr) constant returns(address publisherAddress, bytes32[5] url, uint256[2] karma, address recordOwner) {\r\n        return publisherRegistry.getPublisher(addr);\r\n    }\r\n\r\n    function isPublisherRegistered(address key) constant returns(bool) {\r\n        return publisherRegistry.isRegistered(key);\r\n    }\r\n\r\n    //@dev Register organisation as Publisher\r\n    //@param publisherAddress address of wallet to register\r\n    function registerPublisher(address publisherAddress, bytes32[5] url) {\r\n        receiveSecurityDeposit(publisherAddress);\r\n        publisherRegistry.register(publisherAddress, url, msg.sender);\r\n        PublisherRegistered(publisherAddress);\r\n    }\r\n\r\n    //@dev Unregister Publisher and return unused deposit\r\n    //@param Address of Publisher to be unregistered\r\n    function unregisterPublisher(address publisherAddress) {\r\n        returnDeposit(publisherAddress, securityDepositRegistry);\r\n        publisherRegistry.unregister(publisherAddress, msg.sender);\r\n        PublisherUnregistered(publisherAddress);\r\n    }\r\n\r\n    //@dev transfer ownership of this Publisher record\r\n    //@param address of Publisher\r\n    //@param address of new owner\r\n    function transferPublisherRecord(address key, address newOwner) {\r\n        publisherRegistry.transfer(key, newOwner, msg.sender);\r\n    }\r\n}\r\n\r\ncontract SSPRegistrar is SSPTypeAware, SecurityDepositAware{\r\n    SSPRegistry public sspRegistry;\r\n\r\n    event SSPRegistered(address sspAddress);\r\n    event SSPUnregistered(address sspAddress);\r\n    event SSPParametersChanged(address sspAddress);\r\n\r\n    //@dev Retrieve information about registered SSP\r\n    //@return Address of registered SSP and time when registered\r\n    function findSsp(address sspAddr) constant returns(address sspAddress, SSPType sspType, uint16 publisherFee, uint256[2] karma, address recordOwner) {\r\n        return sspRegistry.getSSP(sspAddr);\r\n    }\r\n\r\n    //@dev Register organisation as SSP\r\n    //@param sspAddress address of wallet to register\r\n    function registerSsp(address sspAddress, SSPType sspType, uint16 publisherFee) {\r\n        receiveSecurityDeposit(sspAddress);\r\n        sspRegistry.register(sspAddress, sspType, publisherFee, msg.sender);\r\n        SSPRegistered(sspAddress);\r\n    }\r\n\r\n    //@dev check if SSP registered\r\n    function isSspRegistered(address key) constant returns(bool) {\r\n        return sspRegistry.isRegistered(key);\r\n    }\r\n\r\n    //@dev Unregister SSP and return unused deposit\r\n    //@param Address of SSP to be unregistered\r\n    function unregisterSsp(address sspAddress) {\r\n        returnDeposit(sspAddress, securityDepositRegistry);\r\n        sspRegistry.unregister(sspAddress, msg.sender);\r\n        SSPUnregistered(sspAddress);\r\n    }\r\n\r\n    //@dev Change publisher fee of SSP\r\n    //@param address of SSP to change\r\n    //@param new publisher fee\r\n    function updatePublisherFee(address key, uint16 newFee) {\r\n        sspRegistry.updatePublisherFee(key, newFee, msg.sender);\r\n        SSPParametersChanged(key);\r\n    }\r\n\r\n    //@dev transfer ownership of this SSP record\r\n    //@param address of SSP\r\n    //@param address of new owner\r\n    function transferSSPRecord(address key, address newOwner) {\r\n        sspRegistry.transfer(key, newOwner, msg.sender);\r\n    }\r\n}\r\n\r\ncontract ChannelApi {\r\n    function applyRuntimeUpdate(address from, address to, uint impressionsCount, uint fraudCount);\r\n\r\n    function applyAuditorsCheckUpdate(address from, address to, uint fraudCountDelta);\r\n}\r\n\r\ncontract RegistryProvider {\r\n    function replaceSSPRegistry(SSPRegistry newRegistry);\r\n\r\n    function replaceDSPRegistry(DSPRegistry newRegistry);\r\n\r\n    function replacePublisherRegistry(PublisherRegistry newRegistry) ;\r\n\r\n    function replaceAuditorRegistry(AuditorRegistry newRegistry);\r\n\r\n    function replaceSecurityDepositRegistry(DepositRegistry newRegistry);\r\n\r\n    function getSSPRegistry() internal constant returns (SSPRegistry);\r\n\r\n    function getDSPRegistry() internal constant returns (DSPRegistry);\r\n\r\n    function getPublisherRegistry() internal constant returns (PublisherRegistry);\r\n\r\n    function getAuditorRegistry() internal constant returns (AuditorRegistry);\r\n\r\n    function getSecurityDepositRegistry() internal constant returns (DepositRegistry);\r\n}\r\n\r\ncontract StateChannelListener is RegistryProvider, ChannelApi {\r\n    address channelContractAddress;\r\n\r\n    event ChannelContractAddressChanged(address indexed previousAddress, address indexed newAddress);\r\n\r\n    function applyRuntimeUpdate(address from, address to, uint impressionsCount, uint fraudCount) onlyChannelContract {\r\n        uint256[2] storage karmaDiff;\r\n        karmaDiff[0] = impressionsCount;\r\n        karmaDiff[1] = 0;\r\n        if (getDSPRegistry().isRegistered(from)) {\r\n            getDSPRegistry().applyKarmaDiff(from, karmaDiff);\r\n        } else if (getSSPRegistry().isRegistered(from)) {\r\n            getSSPRegistry().applyKarmaDiff(from, karmaDiff);\r\n        }\r\n\r\n        karmaDiff[1] = fraudCount;\r\n        if (getSSPRegistry().isRegistered(to)) {\r\n            karmaDiff[0] = 0;\r\n            getSSPRegistry().applyKarmaDiff(to, karmaDiff);\r\n        } else if (getPublisherRegistry().isRegistered(to)) {\r\n            karmaDiff[0] = impressionsCount;\r\n            getPublisherRegistry().applyKarmaDiff(to, karmaDiff);\r\n        }\r\n    }\r\n\r\n    function applyAuditorsCheckUpdate(address from, address to, uint fraudCountDelta) onlyChannelContract {\r\n        //To be implemented\r\n    }\r\n\r\n    modifier onlyChannelContract() {\r\n        require(msg.sender == channelContractAddress);\r\n        _;\r\n    }\r\n}\r\n\r\ncontract PapyrusDAO is WithToken,\r\n                       RegistryProvider,\r\n                       StateChannelListener,\r\n                       SSPRegistrar,\r\n                       DSPRegistrar,\r\n                       PublisherRegistrar,\r\n                       AuditorRegistrar,\r\n                       Ownable {\r\n\r\n    function PapyrusDAO(ERC20 papyrusToken,\r\n                        SSPRegistry _sspRegistry,\r\n                        DSPRegistry _dspRegistry,\r\n                        PublisherRegistry _publisherRegistry,\r\n                        AuditorRegistry _auditorRegistry,\r\n                        DepositRegistry _securityDepositRegistry\r\n    ) {\r\n        token = papyrusToken;\r\n        sspRegistry = _sspRegistry;\r\n        dspRegistry = _dspRegistry;\r\n        publisherRegistry = _publisherRegistry;\r\n        auditorRegistry = _auditorRegistry;\r\n        securityDepositRegistry = _securityDepositRegistry;\r\n    }\r\n\r\n    event DepositsTransferred(address newDao, uint256 sum);\r\n    event SSPRegistryReplaced(address from, address to);\r\n    event DSPRegistryReplaced(address from, address to);\r\n    event PublisherRegistryReplaced(address from, address to);\r\n    event AuditorRegistryReplaced(address from, address to);\r\n    event SecurityDepositRegistryReplaced(address from, address to);\r\n\r\n    function replaceSSPRegistry(SSPRegistry newRegistry) onlyOwner {\r\n        address old = sspRegistry;\r\n        sspRegistry = newRegistry;\r\n        SSPRegistryReplaced(old, newRegistry);\r\n    }\r\n\r\n    function replaceDSPRegistry(DSPRegistry newRegistry) onlyOwner {\r\n        address old = dspRegistry;\r\n        dspRegistry = newRegistry;\r\n        DSPRegistryReplaced(old, newRegistry);\r\n    }\r\n\r\n    function replacePublisherRegistry(PublisherRegistry newRegistry) onlyOwner {\r\n        address old = publisherRegistry;\r\n        publisherRegistry = newRegistry;\r\n        PublisherRegistryReplaced(old, publisherRegistry);\r\n    }\r\n\r\n    function replaceAuditorRegistry(AuditorRegistry newRegistry) onlyOwner {\r\n        address old = auditorRegistry;\r\n        auditorRegistry = newRegistry;\r\n        AuditorRegistryReplaced(old, auditorRegistry);\r\n    }\r\n\r\n    function replaceSecurityDepositRegistry(DepositRegistry newRegistry) onlyOwner {\r\n        address old = securityDepositRegistry;\r\n        securityDepositRegistry = newRegistry;\r\n        SecurityDepositRegistryReplaced(old, securityDepositRegistry);\r\n    }\r\n\r\n    function replaceChannelContractAddress(address newChannelContract) onlyOwner public {\r\n        require(newChannelContract != address(0));\r\n        ChannelContractAddressChanged(channelContractAddress, newChannelContract);\r\n        channelContractAddress = newChannelContract;\r\n    }\r\n\r\n    function getSSPRegistry() internal constant returns (SSPRegistry) {\r\n        return sspRegistry;\r\n    }\r\n\r\n    function getDSPRegistry() internal constant returns (DSPRegistry) {\r\n        return dspRegistry;\r\n    }\r\n\r\n    function getPublisherRegistry() internal constant returns (PublisherRegistry) {\r\n        return publisherRegistry;\r\n    }\r\n\r\n    function getAuditorRegistry() internal constant returns (AuditorRegistry) {\r\n        return auditorRegistry;\r\n    }\r\n\r\n    function getSecurityDepositRegistry() internal constant returns (DepositRegistry) {\r\n        return securityDepositRegistry;\r\n    }\r\n\r\n    function transferDepositsToNewDao(address newDao) onlyOwner {\r\n        uint256 depositSum = token.balanceOf(this);\r\n        token.transfer(newDao, depositSum);\r\n        DepositsTransferred(newDao, depositSum);\r\n    }\r\n\r\n    function kill() onlyOwner {\r\n        selfdestruct(owner);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"depositAccount\",\"type\":\"address\"},{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferSecurityDeposit\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sspAddress\",\"type\":\"address\"}],\"name\":\"unregisterSsp\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newRegistry\",\"type\":\"address\"}],\"name\":\"replaceSSPRegistry\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"publisherRegistry\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"key\",\"type\":\"address\"},{\"name\":\"newFee\",\"type\":\"uint16\"}],\"name\":\"updatePublisherFee\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"key\",\"type\":\"address\"},{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferDSPRecord\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newRegistry\",\"type\":\"address\"}],\"name\":\"replaceDSPRegistry\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sspRegistry\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newRegistry\",\"type\":\"address\"}],\"name\":\"replaceAuditorRegistry\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"findDsp\",\"outputs\":[{\"name\":\"dspAddress\",\"type\":\"address\"},{\"name\":\"dspType\",\"type\":\"uint8\"},{\"name\":\"url\",\"type\":\"bytes32[5]\"},{\"name\":\"karma\",\"type\":\"uint256[2]\"},{\"name\":\"recordOwner\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"dspAddress\",\"type\":\"address\"}],\"name\":\"unregisterDsp\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"key\",\"type\":\"address\"},{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferPublisherRecord\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"key\",\"type\":\"address\"}],\"name\":\"isSspRegistered\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"publisherAddress\",\"type\":\"address\"},{\"name\":\"url\",\"type\":\"bytes32[5]\"}],\"name\":\"registerPublisher\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"findPublisher\",\"outputs\":[{\"name\":\"publisherAddress\",\"type\":\"address\"},{\"name\":\"url\",\"type\":\"bytes32[5]\"},{\"name\":\"karma\",\"type\":\"uint256[2]\"},{\"name\":\"recordOwner\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"key\",\"type\":\"address\"},{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferSSPRecord\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"key\",\"type\":\"address\"}],\"name\":\"isAuditorRegistered\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"impressionsCount\",\"type\":\"uint256\"},{\"name\":\"fraudCount\",\"type\":\"uint256\"}],\"name\":\"applyRuntimeUpdate\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"securityDepositRegistry\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sspAddress\",\"type\":\"address\"},{\"name\":\"sspType\",\"type\":\"uint8\"},{\"name\":\"publisherFee\",\"type\":\"uint16\"}],\"name\":\"registerSsp\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newChannelContract\",\"type\":\"address\"}],\"name\":\"replaceChannelContractAddress\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"key\",\"type\":\"address\"},{\"name\":\"url\",\"type\":\"bytes32[5]\"}],\"name\":\"updateUrl\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"publisherAddress\",\"type\":\"address\"}],\"name\":\"unregisterPublisher\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"fraudCountDelta\",\"type\":\"uint256\"}],\"name\":\"applyAuditorsCheckUpdate\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"findAuditor\",\"outputs\":[{\"name\":\"auditorAddress\",\"type\":\"address\"},{\"name\":\"karma\",\"type\":\"uint256[2]\"},{\"name\":\"recordOwner\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dspRegistry\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newDao\",\"type\":\"address\"}],\"name\":\"transferDepositsToNewDao\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"key\",\"type\":\"address\"},{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferAuditorRecord\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newRegistry\",\"type\":\"address\"}],\"name\":\"replacePublisherRegistry\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"key\",\"type\":\"address\"}],\"name\":\"isDspRegistered\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newRegistry\",\"type\":\"address\"}],\"name\":\"replaceSecurityDepositRegistry\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"key\",\"type\":\"address\"}],\"name\":\"isPublisherRegistered\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"auditorRegistry\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"sspAddr\",\"type\":\"address\"}],\"name\":\"findSsp\",\"outputs\":[{\"name\":\"sspAddress\",\"type\":\"address\"},{\"name\":\"sspType\",\"type\":\"uint8\"},{\"name\":\"publisherFee\",\"type\":\"uint16\"},{\"name\":\"karma\",\"type\":\"uint256[2]\"},{\"name\":\"recordOwner\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"auditorAddress\",\"type\":\"address\"}],\"name\":\"registerAuditor\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"dspAddress\",\"type\":\"address\"},{\"name\":\"dspType\",\"type\":\"uint8\"},{\"name\":\"url\",\"type\":\"bytes32[5]\"}],\"name\":\"registerDsp\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"auditorAddress\",\"type\":\"address\"}],\"name\":\"unregisterAuditor\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"papyrusToken\",\"type\":\"address\"},{\"name\":\"_sspRegistry\",\"type\":\"address\"},{\"name\":\"_dspRegistry\",\"type\":\"address\"},{\"name\":\"_publisherRegistry\",\"type\":\"address\"},{\"name\":\"_auditorRegistry\",\"type\":\"address\"},{\"name\":\"_securityDepositRegistry\",\"type\":\"address\"}],\"payable\":false,\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newDao\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"sum\",\"type\":\"uint256\"}],\"name\":\"DepositsTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"}],\"name\":\"SSPRegistryReplaced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"}],\"name\":\"DSPRegistryReplaced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"}],\"name\":\"PublisherRegistryReplaced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"}],\"name\":\"AuditorRegistryReplaced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"}],\"name\":\"SecurityDepositRegistryReplaced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"auditorAddress\",\"type\":\"address\"}],\"name\":\"AuditorRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"auditorAddress\",\"type\":\"address\"}],\"name\":\"AuditorUnregistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"publisherAddress\",\"type\":\"address\"}],\"name\":\"PublisherRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"publisherAddress\",\"type\":\"address\"}],\"name\":\"PublisherUnregistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"publisherAddress\",\"type\":\"address\"}],\"name\":\"PublisherParametersChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"dspAddress\",\"type\":\"address\"}],\"name\":\"DSPRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"dspAddress\",\"type\":\"address\"}],\"name\":\"DSPUnregistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"dspAddress\",\"type\":\"address\"}],\"name\":\"DSPParametersChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sspAddress\",\"type\":\"address\"}],\"name\":\"SSPRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sspAddress\",\"type\":\"address\"}],\"name\":\"SSPUnregistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sspAddress\",\"type\":\"address\"}],\"name\":\"SSPParametersChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousAddress\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"ChannelContractAddressChanged\",\"type\":\"event\"}]","ContractName":"PapyrusDAO","CompilerVersion":"v0.4.15+commit.bbb8e64f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000beb4adc711aab72b12d89e2044c826bd32f9fd7c000000000000000000000000925a8d5cc55b0d780b5cab4f21447c4bae0a3b0100000000000000000000000083be80931a025c9e317ad140802edd01b2989bd70000000000000000000000003b9dbdd83e96954d2611f45f3a87f1dd2094dc4e00000000000000000000000013faa706b880abb9f01363e1cfa71efc2cee8286000000000000000000000000179c9d17b574e2c2296d66433d340dbe31474975","Library":"","SwarmSource":"bzzr://8dc7acdd461bb182e834818bd346d20e947cbc4c0859744f5ad226d7ce443f89"}]}