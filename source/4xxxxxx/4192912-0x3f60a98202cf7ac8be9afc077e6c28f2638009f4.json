{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.15; //MMMMMMM*~+> Self-documenting smart contract. <+~*M //\r\n// MMMMWKkk0KNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWNKOkOKWMMMMMM //\r\n// MMMMXl.....,cdOXWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWXOo:,.....dNMMMM //\r\n// MMMWd.        .'cxKWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMW0d:'.        .xMMMM //\r\n// MMMK,   ......   ..:xXWMMMMMMMMMMMMMMMMMMMMMMMMMMMMWKd;.    .....    :XMMM //\r\n// MMWd.   .;;;,,'..   .'lkXNWWNNNWMMMMMMMMMMWNNWWWNKkc..  ...',;;;,.   .kMMM //\r\n// MMNc   .,::::::;,'..   ..,;;,,dNMMMMMMMMMMXl,;;;,..   ..';;::::::'.  .lWMM //\r\n// MM0'   .;:::::::;;'..        ;0MMMMMMMMMMMWO'        ..,;;:::::::;.   ;KMM //\r\n// MMx.  .';::::;,'...        .:0MMMMMMMMMMMMMWO;.        ...';;::::;..  .OMM //\r\n// MWd.  .,:::;'..          .,xNMMMMMMMMMMMMMMMMXd'.          ..,;:::'.  .xMM //\r\n// MNl.  .,:;'..         .,ckNMMMMMMMMMMMMMMMMMMMMXxc'.         ..';:,.  .dWM //\r\n// MNc   .,,..    .;:clox0NWXXWMMMMMMMMMMMMMMMMMMWXXWXOxolc:;.    ..,'.  .oWM //\r\n// MNc   ...     .oWMMMNXNMW0odXMMMMMMMMMMMMMMMMKooKWMNXNMMMNc.     ...  .oWM //\r\n// MNc.          ;KMMMMNkokNMXlcKMMMMMMMMMMMMMM0coNMNxoOWMMMM0,          .oWM //\r\n// MNc         .;0MMMMMMWO:dNMNoxWMMMMMMMMMMMMNddNMNocKMMMMMMWO,         .oWM //\r\n// MX:        .lXMMMMMMMMM0lOMMNXWMMMMMMMMMMMMWXNMMklKMMMMMMMMM0:.       .lNM //\r\n// MX;      .;kWMMMMMMMMMMMXNMMMMMMMMMMMMMMMMMMMMMMNNMMMMMMMMMMMNx,.      cNM //\r\n// MO.    .:kNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNx:.  . ,0M //\r\n// Wl..':dKWMMMMMMMWNK000KNMMMMMMMMMMMMMMMMMMMMMMMMMWNK000KNMMMMMMMMW0o;...dW //\r\n// NxdOXWMMMMMMMW0olcc::;,,cxXWMMMMMMMMMMMMMMMMMMWKd:,,;::ccld0WMMMMMMMWKkokW //\r\n// MMMMMMMMMMMWOlcd0XWWWN0x:.,OMMMMMMMMMMMMMMMMMWk,'cxKNWWWXOdcl0MMMMMMMMMMMM //\r\n// MMMMMMMMMMMWKKWMMMMMMMMMWK0XMMMMMMMMMMMMMMMMMMXOXWMMMMMMMMMN0XMMMMMMMMMMMM //\r\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWK0OOOO0KWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM //\r\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNo.......'xWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM //\r\n// MMMNKOkkkk0XNMMMMMMMMMMMMMMMMMMWO;.    .:0WMMMMMMMMMMMMMMMMMWNKOkkkkOKNMMM //\r\n// MMWXOkxddoddxxkKWMMMMMMMMMMMMMMMMXo...'dNMMMMMMMMMMMMMMMMN0kxxdodddxk0XMMM //\r\n// MMMMMMMMMMMMWNKKNMMMMMMMMMMMMMMMMWOc,,c0WMMMMMMMMMMMMMMMMXKKNWMMMMMMMMMMMM //\r\n// MMMMMMMMWXKKXXNWMMMMMMMMMMWWWWWX0xcclc:cxKNWWWWWMMMMMMMMMMWNXXKKXWMMMMMMMM //\r\n// MMMWXOxdoooddxkO0NMMMMMMMWKkfoahheitNX0GlikkdakXMMMMMMMWX0OkxddooddxOXWMMM //\r\n// MMMWXKKNNWMMMMMWWWMMMMMMMMMWNXXXNWMMMMMMWXXXXNWMMMMMMMMMWWWMMMMWWNXKKNWMMM //\r\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM //\r\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM //\r\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM Lucky* MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM //\r\n// MMM> *~+> we are the MMMMMMMMMMMM Number MMMMMMM> we are the <+~* <MMMMMMM //\r\n// MMMMMMMMMM> music <MMMMMMMMMMMMMM ------ MMMMMMMMMM> dreamer <MMMMMMMMMMMM //\r\n// MMMMMMMM> *~+> makers <MMMMM<MMMM Random MMMMMMMMMMMMM> of <MMMMMMMMMMMMMM //\r\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM Ledger MMMMMMMMMMMMMM> dreams. <+~* <MMM //\r\n// M> palimpsest by <MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM //\r\n// ~> arkimedes.eth <~+~+~+~~+~+~+~~+~+~+~~+~+~+~~+~+~+~> VIII*XXII*MMXVII <~ //\r\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM //\r\n\r\n/**\r\n * Manages contract ownership.\r\n */\r\ncontract Owned {\r\n    address public owner;\r\n    function owned() {\r\n        owner = msg.sender;\r\n    }\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    function transferOwnership(address _newOwner) onlyOwner {\r\n        owner = _newOwner;\r\n    }\r\n}\r\n\r\n/**\r\n * SafeMath\r\n * Math operations with safety checks that throw on error.\r\n * Taking ideas from FirstBlood token. Enhanced by OpenZeppelin.\r\n */\r\ncontract SafeMath {\r\n  function mul(uint256 a, uint256 b)\r\n  internal\r\n  constant\r\n  returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n  function div(uint256 a, uint256 b)\r\n  internal\r\n  constant\r\n  returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n  function sub(uint256 a, uint256 b)\r\n  internal\r\n  constant\r\n  returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n  function add(uint256 a, uint256 b)\r\n  internal\r\n  constant\r\n  returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * Random number generator from mined block hash.\r\n */\r\ncontract Random is SafeMath {\r\n    // Generates a random number from 1 to max based on the last block hash.\r\n    function generateRandomNumber(uint blockNumber, uint max)\r\n    public\r\n    constant \r\n    returns(uint) {\r\n        //\r\n        // block.blockhash(uint blockNumber)\r\n        // returns\r\n        // (bytes32): hash of the given block\r\n        // \r\n        // +!+!+! only works for 256 most recent blocks excluding current !+!+!+\r\n        // \r\n        // requests generated from expired blocks\r\n        // will still get a random number,\r\n        // but they will be considered less secure\r\n        // as it introduces a potential vulnerability.\r\n        // \r\n        return(add(uint(sha3(block.blockhash(blockNumber))) % max, 1));\r\n    }\r\n}\r\n\r\n/**\r\n * Returns most recent expired block. \r\n * Know if the block number use with generateRandomNumber\r\n * is actually the hash that generates the number.\r\n */\r\ncontract Fresh is SafeMath {\r\n    function expiredBlock()\r\n    internal\r\n    constant \r\n    returns(uint) {\r\n        uint256 expired = block.number;\r\n        if (expired > 256) {\r\n            expired = sub(expired, 256);\r\n        }\r\n        return expired;\r\n    }\r\n}\r\n\r\n/**\r\n * RandomLedger is the main public interface for a random number ledger.\r\n * \r\n * The ledger feature embraces the blockchain capablities,\r\n * leveaged by the Event logs generated by Ethereum Smart Contracts.\r\n * \"Events are inheritable members of contracts. When they are called,\r\n * they cause the arguments to be stored in the transaction's log \r\n * - a special data structure in the blockchain. These logs are associated with \r\n * the address of the contract and will be incorporated into the blockchain and \r\n * stay there as long as a block is accessible (forever as of Frontier \r\n * and Homestead, but this might change with Serenity).\" \r\n * ++ Read more in the solidity#events documentation. ++\r\n * \r\n * To make a request:\r\n * Step 1: Call requestNumber with the `cost` as the value\r\n * Step 2: Wait waitTime in blocks past the block which mines transaction for requestNumber\r\n * Step 3: Call revealNumber to generate the number, and make it publicly accessable in the UI.\r\n *         this is required to create the Events which generate the Ledger. \r\n */\r\ncontract RandomLedger is Owned {\r\n    // ~> cost to generate a random number in Wei.\r\n    uint256 public cost;\r\n    // ~> waitTime is the number of blocks before random is generated.\r\n    uint8 public defaultWaitTime;\r\n    // ~> set default max\r\n    uint256 public defaultMax;\r\n    //\r\n    // RandomNumber represents one number.\r\n    struct RandomNumber {\r\n        address requestProxy;\r\n        uint256 renderedNumber;\r\n        uint256 originBlock;\r\n        uint256 max;\r\n        // blocks to wait,\r\n        // also maintains pending state\r\n        uint8 waitTime;\r\n        // was the number revealed within the 256 block window\r\n        uint256 expired;\r\n    }\r\n    //\r\n    // for Number Ledger\r\n    event EventRandomLedgerRequested(address requestor, uint256 max, uint256 originBlock, uint8 waitTime, address indexed requestProxy);\r\n    event EventRandomLedgerRevealed(address requestor, uint256 originBlock, uint256 renderedNumber, uint256 expiredBlock, address indexed requestProxy);\r\n    \r\n    mapping (address => RandomNumber) public randomNumbers;\r\n    mapping (address => bool) public whiteList;\r\n\r\n    function requestNumber(address _requestor, uint256 _max, uint8 _waitTime) payable public;\r\n    function revealNumber(address _requestor) payable public;\r\n}\r\n\r\n/**\r\n * Lucky Number :: Random Ledger [Number Generator] Service *~+>\r\n * Any contract or address can make a request from this implementation\r\n * on behalf of any other address as a requestProxy.\r\n */\r\ncontract RandomLedgerService is RandomLedger, Random, Fresh {\r\n\r\n    // Initialize state +.+.+.\r\n    function RandomLedgerService() {\r\n        owned();\r\n        cost = 20000000000000000; // 0.02 ether // 20 finney\r\n        defaultMax = 15; // generate number between 1 and 15\r\n        defaultWaitTime = 3; // 3 blocks\r\n    }\r\n\r\n    // Let owner customize defauts.\r\n    // Allow the owner to set max.\r\n    function setMax(uint256 _max)\r\n    onlyOwner\r\n    public\r\n    returns (bool) {\r\n        defaultMax = _max;\r\n        return true;\r\n    }\r\n\r\n    // Allow the owner to set waitTime. (in blocks)\r\n    function setWaitTime(uint8 _waitTime)\r\n    onlyOwner\r\n    public\r\n    returns (bool) {\r\n        defaultWaitTime = _waitTime;\r\n        return true;\r\n    }\r\n\r\n    // Allow the owner to set cost.\r\n    function setCost(uint256 _cost)\r\n    onlyOwner\r\n    public\r\n    returns (bool) {\r\n        cost = _cost;\r\n        return true;\r\n    }\r\n\r\n    // Allow the owner to set a transaction proxy\r\n    // which can perform value exchanges on behalf of this contract.\r\n    // (unrelated to the requestProxy which is not whiteList)\r\n    function enableProxy(address _proxy)\r\n    onlyOwner\r\n    public\r\n    returns (bool) {\r\n        whiteList[_proxy] = true;\r\n        return whiteList[_proxy];\r\n    }\r\n\r\n    function removeProxy(address _proxy)\r\n    onlyOwner\r\n    public\r\n    returns (bool) {\r\n        delete whiteList[_proxy];\r\n        return true;\r\n    }\r\n\r\n    // Allow the owner to cash out the holdings of this contract.\r\n    function withdraw(address _recipient, uint256 _balance)\r\n    onlyOwner\r\n    public\r\n    returns (bool) {\r\n        _recipient.transfer(_balance);\r\n        return true;\r\n    }\r\n\r\n    // Assume that simple transactions are trying to request a number,\r\n    // unless it is from the owner.\r\n    function () payable public {\r\n        assert(msg.sender != owner);\r\n        // make a quick request\r\n        // *~+> use default max and waitTime\r\n        requestNumber(msg.sender, defaultMax, defaultWaitTime);\r\n    }\r\n    \r\n    // Request a Number ... *~>\r\n    function requestNumber(address _requestor, uint256 _max, uint8 _waitTime)\r\n    payable \r\n    public {\r\n        // external requirement: \r\n        // value must exceed cost\r\n        // unless address is whitelisted\r\n        if (!whiteList[msg.sender]) {\r\n            require(!(msg.value < cost));\r\n        }\r\n        // internal requirement: \r\n        // request address must not have pending number\r\n        assert(!isRequestPending(_requestor));\r\n        // set pending number with default max and waitTime\r\n        randomNumbers[_requestor] = RandomNumber({\r\n            requestProxy: tx.origin, // requestProxy: original address that kicked off the transaction\r\n            renderedNumber: 0,\r\n            max: defaultMax,\r\n            originBlock: block.number,\r\n            expired: 0,\r\n            waitTime: defaultWaitTime\r\n        });\r\n        // custom number configurations\r\n        if (_max > 1) {\r\n            randomNumbers[_requestor].max = _max;\r\n        }\r\n        // max 250 wait to leave a few blocks\r\n        // for the reveal transction to occur\r\n        // and write from the pending numbers block\r\n        // before it expires\r\n        if (_waitTime > 0 && _waitTime < 250) {\r\n            randomNumbers[_requestor].waitTime = _waitTime;\r\n        }\r\n        // log event +.+.+.\r\n        EventRandomLedgerRequested(_requestor, randomNumbers[_requestor].max, randomNumbers[_requestor].originBlock, randomNumbers[_requestor].waitTime, randomNumbers[_requestor].requestProxy);\r\n    }\r\n\r\n    // Reveal your number ... *~>\r\n    // Only requestor or proxy can generate the number\r\n    function revealNumber(address _requestor)\r\n    public\r\n    payable {\r\n        assert(_canReveal(_requestor, msg.sender));\r\n        // waitTime has passed, render this requestor's number.\r\n        _revealNumber(_requestor);\r\n    }\r\n\r\n    // Internal implementation of revealNumber().\r\n    function _revealNumber(address _requestor) \r\n    internal {\r\n        uint256 luckyBlock = _revealBlock(_requestor);\r\n        //\r\n        // TIME LIMITATION ~> should handle in user interface\r\n        // blocks older than (currentBlock - 256) \r\n        // \"expire\" and read the same hash as most recent valid block\r\n        randomNumbers[_requestor].expired = expiredBlock();\r\n        // *~+> get number!\r\n        randomNumbers[_requestor].renderedNumber = generateRandomNumber(luckyBlock, randomNumbers[_requestor].max);\r\n        // log event +.+.+.\r\n        EventRandomLedgerRevealed(_requestor, randomNumbers[_requestor].originBlock, randomNumbers[_requestor].renderedNumber, randomNumbers[_requestor].expired, randomNumbers[_requestor].requestProxy);\r\n        // zero out wait blocks since this is now inactive (for state management)\r\n        randomNumbers[_requestor].waitTime = 0;\r\n    }\r\n\r\n    function canReveal(address _requestor)\r\n    public\r\n    constant\r\n    returns (bool, uint, uint) {\r\n        return (_canReveal(_requestor, msg.sender), _remainingBlocks(_requestor), _revealBlock(_requestor));\r\n    }\r\n\r\n    function _canReveal(address _requestor, address _proxy) \r\n    internal\r\n    constant\r\n    returns (bool) {\r\n        // check for pending number request\r\n        if (isRequestPending(_requestor)) {\r\n            // check for no remaining blocks to be mined\r\n            // must wait for `randomNumbers[_requestor].waitTime` to be excceeded\r\n            if (_remainingBlocks(_requestor) == 0) {\r\n                // check for ownership\r\n                if (randomNumbers[_requestor].requestProxy == _requestor || randomNumbers[_requestor].requestProxy == _proxy) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function _remainingBlocks(address _requestor)\r\n    internal\r\n    constant\r\n    returns (uint) {\r\n        uint256 revealBlock = add(randomNumbers[_requestor].originBlock, randomNumbers[_requestor].waitTime);\r\n        uint256 remainingBlocks = 0;\r\n        if (revealBlock > block.number) {\r\n            remainingBlocks = sub(revealBlock, block.number);\r\n        }\r\n        return remainingBlocks;\r\n    }\r\n\r\n    function _revealBlock(address _requestor)\r\n    internal\r\n    constant\r\n    returns (uint) {\r\n        // add wait block time\r\n        // to creation block time\r\n        // then subtract 1\r\n        return add(randomNumbers[_requestor].originBlock, randomNumbers[_requestor].waitTime);\r\n    }\r\n\r\n\r\n    function getNumber(address _requestor)\r\n    public\r\n    constant\r\n    returns (uint, uint, uint, uint) {\r\n        return (randomNumbers[_requestor].renderedNumber, randomNumbers[_requestor].max, randomNumbers[_requestor].originBlock, randomNumbers[_requestor].expired);\r\n    }\r\n\r\n    // is a number request pending for the address\r\n    function isRequestPending(address _requestor)\r\n    public\r\n    constant\r\n    returns (bool) {\r\n        if (randomNumbers[_requestor].renderedNumber == 0 && randomNumbers[_requestor].waitTime > 0) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n// 0xMMWKkk0KN/>HBBi/MASSa/DANTi/LANTen.MI.MI.MI.M+.+.+.M->MMWNKOkOKWJ.J.J.M*~+>\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"cost\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_requestor\",\"type\":\"address\"},{\"name\":\"_max\",\"type\":\"uint256\"},{\"name\":\"_waitTime\",\"type\":\"uint8\"}],\"name\":\"requestNumber\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_requestor\",\"type\":\"address\"}],\"name\":\"revealNumber\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_requestor\",\"type\":\"address\"}],\"name\":\"isRequestPending\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_max\",\"type\":\"uint256\"}],\"name\":\"setMax\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whiteList\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_cost\",\"type\":\"uint256\"}],\"name\":\"setCost\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_waitTime\",\"type\":\"uint8\"}],\"name\":\"setWaitTime\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"generateRandomNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"randomNumbers\",\"outputs\":[{\"name\":\"requestProxy\",\"type\":\"address\"},{\"name\":\"renderedNumber\",\"type\":\"uint256\"},{\"name\":\"originBlock\",\"type\":\"uint256\"},{\"name\":\"max\",\"type\":\"uint256\"},{\"name\":\"waitTime\",\"type\":\"uint8\"},{\"name\":\"expired\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"defaultWaitTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_requestor\",\"type\":\"address\"}],\"name\":\"canReveal\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_requestor\",\"type\":\"address\"}],\"name\":\"getNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"defaultMax\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_proxy\",\"type\":\"address\"}],\"name\":\"enableProxy\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_proxy\",\"type\":\"address\"}],\"name\":\"removeProxy\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"owned\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipient\",\"type\":\"address\"},{\"name\":\"_balance\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"requestor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"max\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"originBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"waitTime\",\"type\":\"uint8\"},{\"indexed\":true,\"name\":\"requestProxy\",\"type\":\"address\"}],\"name\":\"EventRandomLedgerRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"requestor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"originBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"renderedNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"expiredBlock\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"requestProxy\",\"type\":\"address\"}],\"name\":\"EventRandomLedgerRevealed\",\"type\":\"event\"}]","ContractName":"RandomLedgerService","CompilerVersion":"v0.4.15+commit.bbb8e64f","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://44afc91722ce2e6727364fba5c236f20060e8b177cb3641dbe459c183453d87c"}]}