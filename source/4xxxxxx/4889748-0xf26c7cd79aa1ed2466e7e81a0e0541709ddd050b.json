{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\n/**\r\n * @title Crowdsale\r\n * @dev Crowdsale is a base contract for managing a token crowdsale.\r\n * Crowdsales have a start and end timestamps, where investors can make\r\n * token purchases and the crowdsale will assign them tokens based\r\n * on a token per ETH rate. Funds collected are forwarded to a wallet\r\n * as they arrive.\r\n */\r\n \r\n \r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) constant public returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) tokenBalances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(tokenBalances[msg.sender]>=_value);\r\n    tokenBalances[msg.sender] = tokenBalances[msg.sender].sub(_value);\r\n    tokenBalances[_to] = tokenBalances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) constant public returns (uint256 balance) {\r\n    return tokenBalances[_owner];\r\n  }\r\n\r\n}\r\n\r\ncontract BTC20Token is BasicToken,Ownable {\r\n\r\n   using SafeMath for uint256;\r\n   \r\n   //TODO: Change the name and the symbol\r\n   string public constant name = \"BTC20\";\r\n   string public constant symbol = \"BTC20\";\r\n   uint256 public constant decimals = 18;\r\n\r\n   uint256 public constant INITIAL_SUPPLY = 21000000;\r\n   event Debug(string message, address addr, uint256 number);\r\n  /**\r\n   * @dev Contructor that gives msg.sender all of existing tokens.\r\n   */\r\n    function BTC20Token(address wallet) public {\r\n        owner = msg.sender;\r\n        totalSupply = INITIAL_SUPPLY * 10 ** 18;\r\n        tokenBalances[wallet] = totalSupply;   //Since we divided the token into 10^18 parts\r\n    }\r\n\r\n    function mint(address wallet, address buyer, uint256 tokenAmount) public onlyOwner {\r\n      require(tokenBalances[wallet] >= tokenAmount);               // checks if it has enough to sell\r\n      tokenBalances[buyer] = tokenBalances[buyer].add(tokenAmount);                  // adds the amount to buyer's balance\r\n      tokenBalances[wallet] = tokenBalances[wallet].sub(tokenAmount);                        // subtracts amount from seller's balance\r\n      Transfer(wallet, buyer, tokenAmount); \r\n    }\r\n  function showMyTokenBalance(address addr) public view returns (uint tokenBalance) {\r\n        tokenBalance = tokenBalances[addr];\r\n    }\r\n}\r\ncontract BTC20Crowdsale {\r\n  using SafeMath for uint256;\r\n \r\n  // The token being sold\r\n  BTC20Token public token;\r\n\r\n  // start and end timestamps where investments are allowed (both inclusive)\r\n  uint256 public startTime;\r\n  uint256 public endTime;\r\n\r\n  // address where funds are collected\r\n  // address where tokens are deposited and from where we send tokens to buyers\r\n  address public wallet;\r\n\r\n  // how many token units a buyer gets per wei\r\n  uint256 public ratePerWei = 50000;\r\n\r\n  // amount of raised money in wei\r\n  uint256 public weiRaised;\r\n\r\n  uint256 TOKENS_SOLD;\r\n  uint256 maxTokensToSale = 15000000 * 10 ** 18;\r\n  uint256 minimumContribution = 5 * 10 ** 16; //0.05 is the minimum contribution\r\n\r\n  /**\r\n   * event for token purchase logging\r\n   * @param purchaser who paid for the tokens\r\n   * @param beneficiary who got the tokens\r\n   * @param value weis paid for purchase\r\n   * @param amount amount of tokens purchased\r\n   */\r\n  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n\r\n\r\n  function BTC20Crowdsale(uint256 _startTime, address _wallet) public \r\n  {\r\n    startTime = _startTime;   \r\n    endTime = startTime + 14 days;\r\n    \r\n    require(endTime >= startTime);\r\n    require(_wallet != 0x0);\r\n\r\n    wallet = _wallet;\r\n    token = createTokenContract(wallet);\r\n    \r\n  }\r\n  // creates the token to be sold.\r\n  function createTokenContract(address wall) internal returns (BTC20Token) {\r\n    return new BTC20Token(wall);\r\n  }\r\n\r\n\r\n  // fallback function can be used to buy tokens\r\n  function () public payable {\r\n    buyTokens(msg.sender);\r\n  }\r\n\r\n  //determine the rate of the token w.r.t. time elapsed\r\n  function determineBonus(uint tokens) internal view returns (uint256 bonus) {\r\n    uint256 timeElapsed = now - startTime;\r\n    uint256 timeElapsedInWeeks = timeElapsed.div(7 days);\r\n    if (timeElapsedInWeeks == 0)\r\n    {\r\n      bonus = tokens.mul(50); //50% bonus\r\n      bonus = bonus.div(100);\r\n    }\r\n    else if (timeElapsedInWeeks == 1)\r\n    {\r\n      bonus = tokens.mul(25); //25% bonus\r\n      bonus = bonus.div(100);\r\n    }\r\n    else\r\n    {\r\n        bonus = 0;   //No tokens to be transferred - ICO time is over\r\n    }\r\n  }\r\n\r\n  // low level token purchase function\r\n  // Minimum purchase can be of 1 ETH\r\n  \r\n  function buyTokens(address beneficiary) public payable {\r\n    require(beneficiary != 0x0);\r\n    require(validPurchase());\r\n    require(msg.value>= minimumContribution);\r\n    require(TOKENS_SOLD<maxTokensToSale);\r\n    uint256 weiAmount = msg.value;\r\n    \r\n    // calculate token amount to be created\r\n    \r\n    uint256 tokens = weiAmount.mul(ratePerWei);\r\n    uint256 bonus = determineBonus(tokens);\r\n    tokens = tokens.add(bonus);\r\n    require(TOKENS_SOLD+tokens<=maxTokensToSale);\r\n    \r\n    // update state\r\n    weiRaised = weiRaised.add(weiAmount);\r\n\r\n    token.mint(wallet, beneficiary, tokens); \r\n    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\r\n    TOKENS_SOLD = TOKENS_SOLD.add(tokens);\r\n    forwardFunds();\r\n  }\r\n\r\n  // send ether to the fund collection wallet\r\n  // override to create custom fund forwarding mechanisms\r\n  function forwardFunds() internal {\r\n    wallet.transfer(msg.value);\r\n  }\r\n\r\n  // @return true if the transaction can buy tokens\r\n  function validPurchase() internal constant returns (bool) {\r\n    bool withinPeriod = now >= startTime && now <= endTime;\r\n    bool nonZeroPurchase = msg.value != 0;\r\n    return withinPeriod && nonZeroPurchase;\r\n  }\r\n\r\n  // @return true if crowdsale event has ended\r\n  function hasEnded() public constant returns (bool) {\r\n    return now > endTime;\r\n  }\r\n  \r\n   \r\n    function changeEndDate(uint256 endTimeUnixTimestamp) public returns(bool) {\r\n        require (msg.sender == wallet);\r\n        endTime = endTimeUnixTimestamp;\r\n    }\r\n    function changeStartDate(uint256 startTimeUnixTimestamp) public returns(bool) {\r\n        require (msg.sender == wallet);\r\n        startTime = startTimeUnixTimestamp;\r\n    }\r\n    function setPriceRate(uint256 newPrice) public returns (bool) {\r\n        require (msg.sender == wallet);\r\n        ratePerWei = newPrice;\r\n    }\r\n    \r\n    function changeMinimumContribution(uint256 minContribution) public returns (bool) {\r\n        require (msg.sender == wallet);\r\n        minimumContribution = minContribution * 10 ** 15;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"startTimeUnixTimestamp\",\"type\":\"uint256\"}],\"name\":\"changeStartDate\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"endTimeUnixTimestamp\",\"type\":\"uint256\"}],\"name\":\"changeEndDate\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"setPriceRate\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"minContribution\",\"type\":\"uint256\"}],\"name\":\"changeMinimumContribution\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ratePerWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_startTime\",\"type\":\"uint256\"},{\"name\":\"_wallet\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"}]","ContractName":"BTC20Crowdsale","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000005a57fa8000000000000000000000000058ae31670a7db87a117eef6bbc347b764e1a162e","Library":"","SwarmSource":"bzzr://b3e28fd25f40b3512df9c1e7741fdc555294597090d168abf498ab4190b6ecb7"}]}