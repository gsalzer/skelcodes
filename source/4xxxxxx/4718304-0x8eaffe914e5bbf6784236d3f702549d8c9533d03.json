{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^ 0.4.18;\r\n\r\n/**\r\n    Data format\r\n\r\n    32 bytes = 128bits\r\n    \r\n    ---\r\n     0 10 eth (enough for 1M Ether)\r\n    10 4  votes\r\n    14 4  first timestamp\r\n    18 10 name \r\n    28 1  approved 0=no 1=yes\r\n    29 1  selected 0=no 1=yes\r\n    30 2  list position \r\n\r\n    ---\r\n\r\n */\r\ncontract CryptoBabyName {\r\n    uint8 constant S_NAME_POS = 18;\r\n    uint8 constant S_NAME_SIZE = 10;\r\n    uint8 constant S_SCORE_POS = 0;\r\n    uint8 constant S_SCORE_SIZE = 10;\r\n    uint8 constant S_VOTES_POS = 10;\r\n    uint8 constant S_VOTES_SIZE = 4;\r\n    uint8 constant S_TIMESTAMP_POS = 14;\r\n    uint8 constant S_TIMESTAMP_SIZE = 4;\r\n    uint8 constant S_APPROVED_POS = 28;\r\n    uint8 constant S_APPROVED_SIZE = 1;\r\n    uint8 constant S_SELECTED_POS = 29;\r\n    uint8 constant S_SELECTED_SIZE = 1;\r\n\r\n\r\n    address public owner;\r\n    address public beneficiary;\r\n\r\n    mapping(bytes10 => uint) leaderboard;\r\n    mapping(address => mapping(bytes10 => uint)) voters;\r\n\r\n    uint[100] allNames;\r\n\r\n    mapping(string => string) metadata;\r\n\r\n\r\n    uint babyName;\r\n    uint babyBirthday;\r\n\r\n    uint counter = 0;\r\n    modifier restricted() {\r\n        if (msg.sender == owner) _;\r\n    }\r\n\r\n    function CryptoBabyName() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    event Vote(address voter, string name, uint value);\r\n    event NewSuggestion(address voter, string name, uint number);\r\n    event BabyBorn(string name, uint birthday);\r\n\r\n    // VOTING\r\n    /// @notice Voting. Send any amount of Ether to vote. \r\n    /// @param name Name to vote for. 2-10 characters of English Alphabet\r\n    function vote(string name) external payable{\r\n        _vote(name, msg.value, msg.sender);\r\n    }\r\n\r\n    function () public payable{\r\n        if (msg.data.length >= 2 && msg.data.length <= 10) {\r\n            _vote(string(msg.data), msg.value, msg.sender);\r\n        }\r\n    }\r\n\r\n    function _vote(string name, uint value, address voter) private {\r\n        require(babyName == 0);\r\n\r\n        bytes10 name10 = normalizeAndCheckName(bytes(name));\r\n        if (leaderboard[name10] != 0) { //existing name\r\n            uint newVal = leaderboard[name10];\r\n            newVal = addToPart(newVal, S_SCORE_POS, S_SCORE_SIZE, value);//value\r\n            newVal = addToPart(newVal, S_VOTES_POS, S_VOTES_SIZE, 1);//vote count\r\n\r\n            _update(name10, newVal);\r\n        } else { //new name\r\n            uint uni = 0xFFFF;//0xFFFF = unsaved mark\r\n            uni = setPart(uni, S_SCORE_POS, S_SCORE_SIZE, value);\r\n            uint uname = uint(name10);\r\n            uni = setPart(uni, S_NAME_POS, S_NAME_SIZE, uname);\r\n            uni = setPart(uni, S_VOTES_POS, S_VOTES_SIZE, 1);\r\n            uni = setPart(uni, S_TIMESTAMP_POS, S_TIMESTAMP_SIZE, block.timestamp);\r\n\r\n            uni |= 0xFFFF;//mark unsaved\r\n            _update(name10, uni);\r\n            counter += 1;\r\n            NewSuggestion(voter, name, counter);\r\n        }\r\n\r\n        voters[voter][name10] += value; //save voter info\r\n\r\n        Vote(voter, name, value);\r\n    }\r\n\r\n    function didVoteForName(address voter, string name) public view returns(uint value){\r\n        value = voters[voter][normalizeAndCheckName(bytes(name))];\r\n    }\r\n\r\n    function _update(bytes10 name10, uint updated) private {\r\n        uint16 idx = uint16(updated);\r\n        if (idx == 0xFFFF) {\r\n            uint currentBottom;\r\n            uint bottomIndex;\r\n            (currentBottom, bottomIndex) = bottomName();\r\n\r\n            if (updated > currentBottom) {\r\n                //remove old score\r\n                if (getPart(currentBottom, S_SCORE_POS, S_SCORE_SIZE) > 0) {\r\n                    currentBottom = currentBottom | uint(0xFFFF);//remove index\r\n                    bytes10 bottomName10 = bytes10(getPart(currentBottom, S_NAME_POS, S_NAME_SIZE));\r\n                    leaderboard[bottomName10] = currentBottom;\r\n                }\r\n                //update the new one\r\n                updated = (updated & ~uint(0xFFFF)) | bottomIndex;\r\n                allNames[bottomIndex] = updated;\r\n            }\r\n        } else {\r\n            allNames[idx] = updated;\r\n        }\r\n        leaderboard[name10] = updated;\r\n    }\r\n\r\n    function getPart(uint val, uint8 pos, uint8 sizeBytes) private pure returns(uint result){\r\n        uint mask = makeMask(sizeBytes);\r\n        result = (val >> ((32 - (pos + sizeBytes)) * 8)) & mask;\r\n    }\r\n\r\n    function makeMask(uint8 size) pure private returns(uint mask){\r\n        mask = (uint(1) << (size * 8)) - 1;\r\n    }\r\n\r\n    function setPart(uint val, uint8 pos, uint8 sizeBytes, uint newValue) private pure returns(uint result){\r\n        uint mask = makeMask(sizeBytes);\r\n        result = (val & ~(mask << (((32 - (pos + sizeBytes)) * 8)))) | ((newValue & mask) << (((32 - (pos + sizeBytes)) * 8)));\r\n    }\r\n\r\n    function addToPart(uint val, uint8 pos, uint8 sizeBytes, uint value) private pure returns(uint result){\r\n        result = setPart(val, pos, sizeBytes, getPart(val, pos, sizeBytes) + value);\r\n    }\r\n\r\n\r\n    //GETING RESULTS\r\n\r\n    function bottomName() public view returns(uint name, uint index){\r\n        uint16 n = uint16(allNames.length);\r\n        uint j = 0;\r\n        name = allNames[0];\r\n        index = 0;\r\n        for (j = 1; j < n; j++) {\r\n            uint t = allNames[j];\r\n            if (t < name) {\r\n                name = t;\r\n                index = j;\r\n            }\r\n        }\r\n    }\r\n\r\n    function getTopN(uint nn) public view returns(uint[] top){\r\n        uint n = nn;\r\n        if (n > allNames.length) {\r\n            n = allNames.length;\r\n        }\r\n        top = new uint[](n);\r\n        uint cnt = allNames.length;\r\n        uint usedNames;\r\n\r\n        for (uint j = 0; j < n; j++ ) {\r\n            uint maxI = 0;\r\n            uint maxScore = 0;\r\n            bool found = false;\r\n            for (uint i = 0; i < cnt; i++ ) {\r\n                if (allNames[i] > maxScore) {\r\n                    if ((usedNames & (uint(1) << i)) == 0) {\r\n                        maxScore = allNames[i];\r\n                        maxI = i;\r\n                        found = true;\r\n                    }\r\n                }\r\n            }\r\n            if (found) {\r\n                usedNames |= uint(1) << maxI;\r\n                top[j] = maxScore;\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    function getTopNames() external view returns(uint[100]){\r\n        return allNames;\r\n    }\r\n\r\n    function getCount() external view returns(uint count){\r\n        count = counter;\r\n    }\r\n\r\n    function getScoreForName(string name) external view returns(uint){\r\n        return leaderboard[normalizeAndCheckName(bytes(name))];\r\n    }\r\n\r\n    //approval\r\n\r\n    function approve(string name, uint8 approval) external {\r\n        require(msg.sender == owner);\r\n\r\n        bytes10 name10 = normalizeAndCheckName(bytes(name));\r\n        uint uname = leaderboard[name10];\r\n        if (uname != 0) {\r\n            uname = setPart(uname, S_APPROVED_POS, S_APPROVED_SIZE, approval);\r\n            _update(name10, uname);\r\n        }\r\n    }\r\n\r\n\r\n\r\n    function redeem(uint _value) external{\r\n        require(msg.sender == owner);\r\n        uint value = _value;\r\n\r\n        if (value == 0) {\r\n            value = this.balance;\r\n        }\r\n        owner.transfer(value);\r\n    }\r\n\r\n    //\r\n    function babyBornEndVoting(string name, uint birthday) external returns(uint finalName){\r\n        require(msg.sender == owner);\r\n\r\n        bytes10 name10 = normalizeAndCheckName(bytes(name));\r\n        finalName = leaderboard[name10];\r\n        if (finalName != 0) {\r\n            babyName = finalName;\r\n            babyBirthday = birthday;\r\n            BabyBorn(name, birthday);\r\n        }\r\n    }\r\n\r\n    function getSelectedName() external view returns(uint name, uint birthday){\r\n        name = babyName;\r\n        birthday = babyBirthday;\r\n    }\r\n\r\n\r\n    function normalizeAndCheckName(bytes name) private pure returns(bytes10 name10){\r\n        require(name.length <= 10);\r\n        require(name.length >= 2);\r\n        for (uint8 i = 0; i < name.length; i++ ) {\r\n            bytes1 chr = name[i] & ~0x20;//UPERCASE\r\n            require(chr >= 0x41 && chr <= 0x5A);//only A-Z\r\n            name[i] = chr;\r\n            name10 |= bytes10(chr) >> (8 * i);\r\n        }\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getSelectedName\",\"outputs\":[{\"name\":\"name\",\"type\":\"uint256\"},{\"name\":\"birthday\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"name\",\"type\":\"string\"}],\"name\":\"getScoreForName\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"birthday\",\"type\":\"uint256\"}],\"name\":\"babyBornEndVoting\",\"outputs\":[{\"name\":\"finalName\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"voter\",\"type\":\"address\"},{\"name\":\"name\",\"type\":\"string\"}],\"name\":\"didVoteForName\",\"outputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bottomName\",\"outputs\":[{\"name\":\"name\",\"type\":\"uint256\"},{\"name\":\"index\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"nn\",\"type\":\"uint256\"}],\"name\":\"getTopN\",\"outputs\":[{\"name\":\"top\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"approval\",\"type\":\"uint8\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCount\",\"outputs\":[{\"name\":\"count\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTopNames\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[100]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"name\",\"type\":\"string\"}],\"name\":\"vote\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Vote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"number\",\"type\":\"uint256\"}],\"name\":\"NewSuggestion\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"birthday\",\"type\":\"uint256\"}],\"name\":\"BabyBorn\",\"type\":\"event\"}]","ContractName":"CryptoBabyName","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://ca7e32fa3882e7a717cbc15f5d7eeddba37c397d8ebf55ea3521f7caccda8076"}]}