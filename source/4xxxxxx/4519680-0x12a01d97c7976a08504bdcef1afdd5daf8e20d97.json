{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\n * This contract is a registry which maps the Ethereum Address to their\r\n *  endpoint i.e sockets.\r\n * The Ethereum address registers his address in this registry.\r\n * @proofsuite was here testing on the mainnet\r\n*/\r\n\r\npragma solidity ^0.4.11;\r\n\r\ncontract EndpointRegistry{\r\n    string constant public contract_version = \"0.2._\";\r\n\r\n    event AddressRegistered(address indexed eth_address, string socket);\r\n\r\n    // Mapping of Ethereum Addresses => SocketEndpoints\r\n    mapping (address => string) address_to_socket;\r\n    // Mapping of SocketEndpoints => Ethereum Addresses\r\n    mapping (string => address) socket_to_address;\r\n    // list of all the Registered Addresses , still not used.\r\n    address[] eth_addresses;\r\n\r\n    modifier noEmptyString(string str)\r\n    {\r\n        require(equals(str, \"\") != true);\r\n        _;\r\n    }\r\n\r\n    /*\r\n     * @notice Registers the Ethereum Address to the Endpoint socket.\r\n     * @dev Registers the Ethereum Address to the Endpoint socket.\r\n     * @param string of socket in this format \"127.0.0.1:40001\"\r\n     */\r\n    function registerEndpoint(string socket)\r\n        public\r\n        noEmptyString(socket)\r\n    {\r\n        string storage old_socket = address_to_socket[msg.sender];\r\n\r\n        // Compare if the new socket matches the old one, if it does just return\r\n        if (equals(old_socket, socket)) {\r\n            return;\r\n        }\r\n\r\n        // Put the ethereum address 0 in front of the old_socket,old_socket:0x0\r\n        socket_to_address[old_socket] = address(0);\r\n        address_to_socket[msg.sender] = socket;\r\n        socket_to_address[socket] = msg.sender;\r\n        AddressRegistered(msg.sender, socket);\r\n    }\r\n\r\n    /*\r\n     * @notice Finds the socket if given an Ethereum Address\r\n     * @dev Finds the socket if given an Ethereum Address\r\n     * @param An eth_address which is a 20 byte Ethereum Address\r\n     * @return A socket which the current Ethereum Address is using.\r\n     */\r\n    function findEndpointByAddress(address eth_address) public constant returns (string socket)\r\n    {\r\n        return address_to_socket[eth_address];\r\n    }\r\n\r\n    /*\r\n     * @notice Finds Ethreum Address if given an existing socket address\r\n     * @dev Finds Ethreum Address if given an existing socket address\r\n     * @param string of socket in this format \"127.0.0.1:40001\"\r\n     * @return An ethereum address\r\n     */\r\n    function findAddressByEndpoint(string socket) public constant returns (address eth_address)\r\n    {\r\n        return socket_to_address[socket];\r\n    }\r\n\r\n    function equals(string a, string b) internal pure returns (bool result)\r\n    {\r\n        if (keccak256(a) == keccak256(b)) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"eth_address\",\"type\":\"address\"}],\"name\":\"findEndpointByAddress\",\"outputs\":[{\"name\":\"socket\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"socket\",\"type\":\"string\"}],\"name\":\"registerEndpoint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"socket\",\"type\":\"string\"}],\"name\":\"findAddressByEndpoint\",\"outputs\":[{\"name\":\"eth_address\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contract_version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"eth_address\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"socket\",\"type\":\"string\"}],\"name\":\"AddressRegistered\",\"type\":\"event\"}]","ContractName":"EndpointRegistry","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://8bcb2d02333244248bbb537dcdbd9aa401b07d17863d9c1f3f138295c0641ff0"}]}