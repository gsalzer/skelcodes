{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13;\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner {\r\n    if (newOwner != address(0)) {\r\n      owner = newOwner;\r\n    }\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) constant returns (uint256);\r\n  function transfer(address to, uint256 value) returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) returns (bool);\r\n  function approve(address spender, uint256 value) returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances. \r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) returns (bool) {\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of. \r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amout of tokens to be transfered\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\r\n    var _allowance = allowed[_from][msg.sender];\r\n\r\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n    // require (_value <= _allowance);\r\n\r\n    balances[_to] = balances[_to].add(_value);\r\n    balances[_from] = balances[_from].sub(_value);\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) returns (bool) {\r\n\r\n    // To change the approve amount you first have to reduce the addresses`\r\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n    //  already 0 to mitigate the race condition described here:\r\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifing the amount of tokens still avaible for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\ncontract CRCToken is StandardToken,Ownable{\r\n\t//the base info of the token \r\n\tstring public name;\r\n\tstring public symbol;\r\n\tstring public constant version = \"1.0\";\r\n\tuint256 public constant decimals = 18;\r\n\r\n\tuint256 public constant MAX_SUPPLY = 500000000 * 10**decimals;\r\n\tuint256 public constant quota = MAX_SUPPLY/100;\r\n\r\n\t//the percentage of all usages\r\n\tuint256 public constant allOfferingPercentage = 50;\r\n\tuint256 public constant teamKeepingPercentage = 15;\r\n\tuint256 public constant communityContributionPercentage = 35;\r\n\r\n\t//the quota of all usages\r\n\tuint256 public constant allOfferingQuota = quota*allOfferingPercentage;\r\n\tuint256 public constant teamKeepingQuota = quota*teamKeepingPercentage;\r\n\tuint256 public constant communityContributionQuota = quota*communityContributionPercentage;\r\n\r\n\t//the cap of diff offering channel\r\n\t//this percentage must less the the allOfferingPercentage\r\n\tuint256 public constant privateOfferingPercentage = 10;\r\n\tuint256 public constant privateOfferingCap = quota*privateOfferingPercentage;\r\n\r\n\t//diff rate of the diff offering channel\r\n\tuint256 public constant publicOfferingExchangeRate = 25000;\r\n\tuint256 public constant privateOfferingExchangeRate = 50000;\r\n\r\n\t//need to edit\r\n\taddress public etherProceedsAccount;\r\n\taddress public crcWithdrawAccount;\r\n\r\n\t//dependency on the start day\r\n\tuint256 public fundingStartBlock;\r\n\tuint256 public fundingEndBlock;\r\n\tuint256 public teamKeepingLockEndBlock ;\r\n\r\n\tuint256 public privateOfferingSupply;\r\n\tuint256 public allOfferingSupply;\r\n\tuint256 public teamWithdrawSupply;\r\n\tuint256 public communityContributionSupply;\r\n\r\n\r\n\r\n\t// bool public isFinalized;// switched to true in operational state\r\n\r\n\tevent CreateCRC(address indexed _to, uint256 _value);\r\n\r\n\t// uint256 public\r\n\r\n\tfunction CRCToken(){\r\n\t\tname = \"CRCToken\";\r\n\t\tsymbol =\"CRC\";\r\n\r\n\t\tetherProceedsAccount = 0x5390f9D18A7131aC9C532C1dcD1bEAb3e8A44cbF;\r\n\t\tcrcWithdrawAccount = 0xb353425bA4FE2670DaC1230da934498252E692bD;\r\n\r\n\t\tfundingStartBlock=4263161;\r\n\t\tfundingEndBlock=4313561;\r\n\t\tteamKeepingLockEndBlock=5577161;\r\n\r\n\t\ttotalSupply = 0 ;\r\n\t\tprivateOfferingSupply=0;\r\n\t\tallOfferingSupply=0;\r\n\t\tteamWithdrawSupply=0;\r\n\t\tcommunityContributionSupply=0;\r\n\t}\r\n\r\n\r\n\tmodifier beforeFundingStartBlock(){\r\n\t\tassert(getCurrentBlockNum() < fundingStartBlock);\r\n\t\t_;\r\n\t}\r\n\r\n\tmodifier notBeforeFundingStartBlock(){\r\n\t\tassert(getCurrentBlockNum() >= fundingStartBlock);\r\n\t\t_;\r\n\t}\r\n\tmodifier notAfterFundingEndBlock(){\r\n\t\tassert(getCurrentBlockNum() < fundingEndBlock);\r\n\t\t_;\r\n\t}\r\n\tmodifier notBeforeTeamKeepingLockEndBlock(){\r\n\t\tassert(getCurrentBlockNum() >= teamKeepingLockEndBlock);\r\n\t\t_;\r\n\t}\r\n\r\n\tmodifier totalSupplyNotReached(uint256 _ethContribution,uint rate){\r\n\t\tassert(totalSupply.add(_ethContribution.mul(rate)) <= MAX_SUPPLY);\r\n\t\t_;\r\n\t}\r\n\tmodifier allOfferingNotReached(uint256 _ethContribution,uint rate){\r\n\t\tassert(allOfferingSupply.add(_ethContribution.mul(rate)) <= allOfferingQuota);\r\n\t\t_;\r\n\t}\t \r\n\r\n\tmodifier privateOfferingCapNotReached(uint256 _ethContribution){\r\n\t\tassert(privateOfferingSupply.add(_ethContribution.mul(privateOfferingExchangeRate)) <= privateOfferingCap);\r\n\t\t_;\r\n\t}\t \r\n\t\r\n\r\n\tmodifier etherProceedsAccountOnly(){\r\n\t\tassert(msg.sender == getEtherProceedsAccount());\r\n\t\t_;\r\n\t}\r\n\tmodifier crcWithdrawAccountOnly(){\r\n\t\tassert(msg.sender == getCrcWithdrawAccount());\r\n\t\t_;\r\n\t}\r\n\r\n\r\n\r\n\r\n\tfunction processFunding(address receiver,uint256 _value,uint256 fundingRate) internal\r\n\t\ttotalSupplyNotReached(_value,fundingRate)\r\n\t\tallOfferingNotReached(_value,fundingRate)\r\n\r\n\t{\r\n\t\tuint256 tokenAmount = _value.mul(fundingRate);\r\n\t\ttotalSupply=totalSupply.add(tokenAmount);\r\n\t\tallOfferingSupply=allOfferingSupply.add(tokenAmount);\r\n\t\tbalances[receiver] += tokenAmount;  // safeAdd not needed; bad semantics to use here\r\n\t\tCreateCRC(receiver, tokenAmount);\t // logs token creation\r\n\t}\r\n\r\n\r\n\tfunction () payable external{\r\n\t\tif(getCurrentBlockNum()<=fundingStartBlock){\r\n\t\t\tprocessPrivateFunding(msg.sender);\r\n\t\t}else{\r\n\t\t\tprocessEthPulicFunding(msg.sender);\r\n\t\t}\r\n\r\n\r\n\t}\r\n\r\n\tfunction processEthPulicFunding(address receiver) internal\r\n\t notBeforeFundingStartBlock\r\n\t notAfterFundingEndBlock\r\n\t{\r\n\t\tprocessFunding(receiver,msg.value,publicOfferingExchangeRate);\r\n\t}\r\n\t\r\n\r\n\tfunction processPrivateFunding(address receiver) internal\r\n\t beforeFundingStartBlock\r\n\t privateOfferingCapNotReached(msg.value)\r\n\t{\r\n\t\tuint256 tokenAmount = msg.value.mul(privateOfferingExchangeRate);\r\n\t\tprivateOfferingSupply=privateOfferingSupply.add(tokenAmount);\r\n\t\tprocessFunding(receiver,msg.value,privateOfferingExchangeRate);\r\n\t}  \r\n\r\n\tfunction icoPlatformWithdraw(uint256 _value) external\r\n\t\tcrcWithdrawAccountOnly\r\n\t{\r\n\t\tprocessFunding(msg.sender,_value,1);\r\n\t}\r\n\r\n\tfunction teamKeepingWithdraw(uint256 tokenAmount) external\r\n\t   crcWithdrawAccountOnly\r\n\t   notBeforeTeamKeepingLockEndBlock\r\n\t{\r\n\t\tassert(teamWithdrawSupply.add(tokenAmount)<=teamKeepingQuota);\r\n\t\tassert(totalSupply.add(tokenAmount)<=MAX_SUPPLY);\r\n\t\tteamWithdrawSupply=teamWithdrawSupply.add(tokenAmount);\r\n\t\ttotalSupply=totalSupply.add(tokenAmount);\r\n\t\tbalances[msg.sender]+=tokenAmount;\r\n\t\tCreateCRC(msg.sender, tokenAmount);\r\n\t}\r\n\r\n\tfunction communityContributionWithdraw(uint256 tokenAmount) external\r\n\t    crcWithdrawAccountOnly\r\n\t{\r\n\t\tassert(communityContributionSupply.add(tokenAmount)<=communityContributionQuota);\r\n\t\tassert(totalSupply.add(tokenAmount)<=MAX_SUPPLY);\r\n\t\tcommunityContributionSupply=communityContributionSupply.add(tokenAmount);\r\n\t\ttotalSupply=totalSupply.add(tokenAmount);\r\n\t\tbalances[msg.sender] += tokenAmount;\r\n\t\tCreateCRC(msg.sender, tokenAmount);\r\n\t}\r\n\r\n\tfunction etherProceeds() external\r\n\t\tetherProceedsAccountOnly\r\n\t{\r\n\t\tif(!msg.sender.send(this.balance)) revert();\r\n\t}\r\n\t\r\n\r\n\r\n\r\n\tfunction getCurrentBlockNum()  internal returns (uint256){\r\n\t\treturn block.number;\r\n\t}\r\n\r\n\tfunction getEtherProceedsAccount() internal  returns (address){\r\n\t\treturn etherProceedsAccount;\r\n\t}\r\n\r\n\r\n\tfunction getCrcWithdrawAccount() internal returns (address){\r\n\t\treturn crcWithdrawAccount;\r\n\t}\r\n\r\n\tfunction setName(string _name) external\r\n\t\tonlyOwner\r\n\t{\r\n\t\tname=_name;\r\n\t}\r\n\r\n\tfunction setSymbol(string _symbol) external\r\n\t\tonlyOwner\r\n\t{\r\n\t\tsymbol=_symbol;\r\n\t}\r\n\r\n\r\n\tfunction setEtherProceedsAccount(address _etherProceedsAccount) external\r\n\t\tonlyOwner\r\n\t{\r\n\t\tetherProceedsAccount=_etherProceedsAccount;\r\n\t}\r\n\r\n\tfunction setCrcWithdrawAccount(address _crcWithdrawAccount) external\r\n\t\tonlyOwner\r\n\t{\r\n\t\tcrcWithdrawAccount=_crcWithdrawAccount;\r\n\t}\r\n\r\n\tfunction setFundingBlock(uint256 _fundingStartBlock,uint256 _fundingEndBlock,uint256 _teamKeepingLockEndBlock) external\r\n\t\tonlyOwner\r\n\t{\r\n\r\n\t\tfundingStartBlock=_fundingStartBlock;\r\n\t\tfundingEndBlock = _fundingEndBlock;\r\n\t\tteamKeepingLockEndBlock = _teamKeepingLockEndBlock;\r\n\t}\r\n\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"communityContributionPercentage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allOfferingQuota\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"privateOfferingCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allOfferingPercentage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamWithdrawSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fundingStartBlock\",\"type\":\"uint256\"},{\"name\":\"_fundingEndBlock\",\"type\":\"uint256\"},{\"name\":\"_teamKeepingLockEndBlock\",\"type\":\"uint256\"}],\"name\":\"setFundingBlock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_crcWithdrawAccount\",\"type\":\"address\"}],\"name\":\"setCrcWithdrawAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"teamKeepingWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"privateOfferingExchangeRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allOfferingSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"communityContributionSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"publicOfferingExchangeRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamKeepingLockEndBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"etherProceeds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crcWithdrawAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"privateOfferingPercentage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundingEndBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamKeepingPercentage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamKeepingQuota\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_etherProceedsAccount\",\"type\":\"address\"}],\"name\":\"setEtherProceedsAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"setSymbol\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"icoPlatformWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"setName\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"quota\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"privateOfferingSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundingStartBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"communityContributionQuota\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"communityContributionWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"etherProceedsAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"CreateCRC\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"CRCToken","CompilerVersion":"v0.4.16+commit.d7661dd9","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://45adcab678cbcef3574afbfbbef328b1eb24c00242da5004981d3f4912ec14c2"}]}