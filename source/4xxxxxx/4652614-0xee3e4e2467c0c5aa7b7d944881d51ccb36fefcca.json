{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.15;\r\n\r\n// File: contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n * Based on OpenZeppelin\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: contracts/token/ERC20Basic.sol\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n *\r\n * Based on OpenZeppelin\r\n */\r\ncontract ERC20Basic {\r\n    uint256 public totalSupply;\r\n    function balanceOf(address who) public constant returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// File: contracts/token/ERC20.sol\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n *\r\n * Based on OpenZeppelin\r\n */\r\n\r\ncontract ERC20 is ERC20Basic {\r\n    function allowance(address owner, address spender) public constant returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/token/StandardToken.sol\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n *\r\n * Based on OpenZeppelin\r\n */\r\ncontract StandardToken is ERC20 {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) balances;\r\n\r\n    mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n    /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[msg.sender]);\r\n\r\n        // SafeMath.sub will throw if there is not enough balance.\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the balance of the specified address.\r\n    * @param _owner The address to query the the balance of.\r\n    * @return An uint256 representing the amount owned by the passed address.\r\n    */\r\n    function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another\r\n     * @param _from address The address which you want to send tokens from\r\n     * @param _to address The address which you want to transfer to\r\n     * @param _value uint256 the amount of tokens to be transferred\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[_from]);\r\n        require(_value <= allowed[_from][msg.sender]);\r\n\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n     *\r\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _value The amount of tokens to be spent.\r\n     */\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n     * @param _owner address The address which owns the funds.\r\n     * @param _spender address The address which will spend the funds.\r\n     * @return A uint256 specifying the amount of tokens still available for the spender.\r\n     */\r\n    function allowance(address _owner, address _spender) public constant returns (uint256) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    /**\r\n     * approve should be called when allowed[_spender] == 0. To increment\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     */\r\n    function increaseApproval (address _spender, uint _addedValue) public returns (bool) {\r\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n    function decreaseApproval (address _spender, uint _subtractedValue) public returns (bool) {\r\n        uint oldValue = allowed[msg.sender][_spender];\r\n        if (_subtractedValue > oldValue) {\r\n            allowed[msg.sender][_spender] = 0;\r\n        } else {\r\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n        }\r\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/token/BurnableToken.sol\r\n\r\n/**\r\n * @title Burnable Token\r\n *\r\n * @dev based on OpenZeppelin\r\n */\r\ncontract BurnableToken is StandardToken {\r\n\r\n    event Burn(address indexed burner, uint256 value);\r\n\r\n    /**\r\n     * @dev Burns a specific amount of tokens.\r\n     * @param _value The amount of token to be burned.\r\n     */\r\n    function burn(uint256 _value) public {\r\n        require(_value > 0);\r\n        require(_value <= balances[msg.sender]);\r\n\r\n        address burner = msg.sender;\r\n        balances[burner] = balances[burner].sub(_value);\r\n        totalSupply = totalSupply.sub(_value);\r\n        Burn(burner, _value);\r\n    }\r\n}\r\n\r\n// File: contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n * Based on OpenZeppelin\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/ownership/Claimable.sol\r\n\r\n/**\r\n * @title Claimable\r\n * @dev Extension for the Ownable contract, where the ownership needs to be claimed.\r\n * This allows the new owner to accept the transfer.\r\n * Based on OpenZeppelin\r\n */\r\ncontract Claimable is Ownable {\r\n    address public pendingOwner;\r\n\r\n    /**\r\n     * @dev Modifier throws if called by any account other than the pendingOwner.\r\n     */\r\n    modifier onlyPendingOwner() {\r\n        require(msg.sender == pendingOwner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to set the pendingOwner address.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) onlyOwner public {\r\n        pendingOwner = newOwner;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the pendingOwner address to finalize the transfer.\r\n     */\r\n    function claimOwnership() onlyPendingOwner public {\r\n        OwnershipTransferred(owner, pendingOwner);\r\n        owner = pendingOwner;\r\n        pendingOwner = address(0);\r\n    }\r\n}\r\n\r\n// File: contracts/token/ReleasableToken.sol\r\n\r\n/**\r\n * Define interface for releasing the token transfer after a successful crowdsale.\r\n *\r\n */\r\ncontract ReleasableToken is ERC20, Claimable {\r\n\r\n    /* The finalizer contract that allows unlift the transfer limits on this token */\r\n    address public releaseAgent;\r\n\r\n    /** A crowdsale contract can release us to the wild if ICO success. If false we are are in transfer lock up period.*/\r\n    bool public released = false;\r\n\r\n    /** Map of agents that are allowed to transfer tokens regardless of the lock down period. These are crowdsale contracts and possible the team multisig itself. */\r\n    mapping (address => bool) public transferAgents;\r\n\r\n    /**\r\n     * Limit token transfer until the crowdsale is over.\r\n     *\r\n     */\r\n    modifier canTransfer(address _sender) {\r\n        if(!released) {\r\n            assert(transferAgents[_sender]);\r\n        }\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * Set the contract that can call release and make the token transferable.\r\n     *\r\n     * Design choice. Allow reset the release agent to fix fat finger mistakes.\r\n     */\r\n    function setReleaseAgent(address addr) onlyOwner inReleaseState(false) public {\r\n        require(addr != 0x0);\r\n        // We don't do interface check here as we might want to a normal wallet address to act as a release agent\r\n        releaseAgent = addr;\r\n    }\r\n\r\n    /**\r\n     * Owner can allow a particular address (a crowdsale contract) to transfer tokens despite the lock up period.\r\n     */\r\n    function setTransferAgent(address addr, bool state) onlyOwner inReleaseState(false) public {\r\n        require(addr != 0x0);\r\n        transferAgents[addr] = state;\r\n    }\r\n\r\n    /**\r\n     * One way function to release the tokens to the wild.\r\n     *\r\n     * Can be called only from the release agent that is the final ICO contract. It is only called if the crowdsale has been success (first milestone reached).\r\n     */\r\n    function releaseTokenTransfer() public onlyReleaseAgent {\r\n        released = true;\r\n    }\r\n\r\n    /** The function can be called only before or after the tokens have been releasesd */\r\n    modifier inReleaseState(bool releaseState) {\r\n        require(releaseState == released);\r\n        _;\r\n    }\r\n\r\n    /** The function can be called only by a whitelisted release agent. */\r\n    modifier onlyReleaseAgent() {\r\n        require(msg.sender == releaseAgent);\r\n        _;\r\n    }\r\n\r\n    function transfer(address _to, uint _value) canTransfer(msg.sender) returns (bool success) {\r\n        // Call StandardToken.transfer()\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint _value) canTransfer(_from) returns (bool success) {\r\n        // Call StandardToken.transferForm()\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/token/CrowdsaleToken.sol\r\n\r\n/**\r\n * @title Base crowdsale token interface\r\n */\r\ncontract CrowdsaleToken is BurnableToken, ReleasableToken {\r\n    uint public decimals;\r\n}\r\n\r\n// File: contracts/crowdsale/FinalizeAgent.sol\r\n\r\n/**\r\n * @title Finalize Agent Abstract Contract\r\n * Finalize agent defines what happens at the end of successful crowdsale.\r\n */\r\ncontract FinalizeAgent {\r\n\r\n  function isFinalizeAgent() public constant returns(bool) {\r\n    return true;\r\n  }\r\n\r\n  function isSane() public constant returns (bool);\r\n\r\n  function finalizeCrowdsale();\r\n\r\n}\r\n\r\n// File: contracts/lifecycle/Pausable.sol\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n *\r\n */\r\ncontract Pausable is Ownable {\r\n    event Pause();\r\n    event Unpause();\r\n\r\n    bool public paused = false;\r\n\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!paused);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(paused);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev called by the owner to pause, triggers stopped state\r\n     */\r\n    function pause() onlyOwner whenNotPaused public {\r\n        paused = true;\r\n        Pause();\r\n    }\r\n\r\n    /**\r\n     * @dev called by the owner to unpause, returns to normal state\r\n     */\r\n    function unpause() onlyOwner whenPaused public {\r\n        paused = false;\r\n        Unpause();\r\n    }\r\n}\r\n\r\n// File: contracts/crowdsale/InvestmentPolicyCrowdsale.sol\r\n\r\n/**\r\n * @title Investment Policy Abstract Contract\r\n *\r\n * @dev based on TokenMarketNet\r\n *\r\n * Apache License, version 2.0 https://github.com/AlgoryProject/algory-ico/blob/master/LICENSE\r\n */\r\ncontract InvestmentPolicyCrowdsale is Pausable {\r\n\r\n    /* Do we need to have unique contributor id for each customer */\r\n    bool public requireCustomerId = false;\r\n\r\n    /**\r\n      * Do we verify that contributor has been cleared on the server side (accredited investors only).\r\n      * This method was first used in FirstBlood crowdsale to ensure all contributors have accepted terms on sale (on the web).\r\n      */\r\n    bool public requiredSignedAddress = false;\r\n\r\n    /* Server side address that signed allowed contributors (Ethereum addresses) that can participate the crowdsale */\r\n    address public signerAddress;\r\n\r\n    event InvestmentPolicyChanged(bool newRequireCustomerId, bool newRequiredSignedAddress, address newSignerAddress);\r\n\r\n    /**\r\n     * Set policy do we need to have server-side customer ids for the investments.\r\n     *\r\n     */\r\n    function setRequireCustomerId(bool value) onlyOwner external{\r\n        requireCustomerId = value;\r\n        InvestmentPolicyChanged(requireCustomerId, requiredSignedAddress, signerAddress);\r\n    }\r\n\r\n    /**\r\n     * Set policy if all investors must be cleared on the server side first.\r\n     *\r\n     * This is e.g. for the accredited investor clearing.\r\n     *\r\n     */\r\n    function setRequireSignedAddress(bool value, address _signerAddress) external onlyOwner {\r\n        requiredSignedAddress = value;\r\n        signerAddress = _signerAddress;\r\n        InvestmentPolicyChanged(requireCustomerId, requiredSignedAddress, signerAddress);\r\n    }\r\n\r\n    /**\r\n     * Invest to tokens, recognize the payer and clear his address.\r\n     */\r\n    function buyWithSignedAddress(uint128 customerId, uint8 v, bytes32 r, bytes32 s) external payable {\r\n        require(requiredSignedAddress);\r\n        bytes memory prefix = \"\\x19Ethereum Signed Message:\\n32\";\r\n        bytes32 hash = sha3(prefix, sha3(msg.sender));\r\n        assert(ecrecover(hash, v, r, s) == signerAddress);\r\n        require(customerId != 0);  // UUIDv4 sanity check\r\n        investInternal(msg.sender, customerId);\r\n    }\r\n\r\n    /**\r\n     * Invest to tokens, recognize the payer.\r\n     *\r\n     */\r\n    function buyWithCustomerId(uint128 customerId) external payable {\r\n        require(requireCustomerId);\r\n        require(customerId != 0);\r\n        investInternal(msg.sender, customerId);\r\n    }\r\n\r\n\r\n    function investInternal(address receiver, uint128 customerId) whenNotPaused internal;\r\n}\r\n\r\n// File: contracts/crowdsale/PricingStrategy.sol\r\n\r\n/**\r\n * Pricing Strategy - Abstract contract for defining crowdsale pricing.\r\n */\r\ncontract PricingStrategy {\r\n\r\n  // How many tokens per one investor is allowed in presale\r\n  uint public presaleMaxValue = 0;\r\n\r\n  function isPricingStrategy() external constant returns (bool) {\r\n      return true;\r\n  }\r\n\r\n  function getPresaleMaxValue() public constant returns (uint) {\r\n      return presaleMaxValue;\r\n  }\r\n\r\n  function isPresaleFull(uint weiRaised) public constant returns (bool);\r\n\r\n  function getAmountOfTokens(uint value, uint weiRaised) public constant returns (uint tokensAmount);\r\n}\r\n\r\n// File: contracts/crowdsale/AlgoryCrowdsale.sol\r\n\r\n/**\r\n * @title Algory Crowdsale\r\n *\r\n * @dev based on TokenMarketNet\r\n *\r\n * Apache License, version 2.0 https://github.com/AlgoryProject/algory-ico/blob/master/LICENSE\r\n */\r\n\r\ncontract AlgoryCrowdsale is InvestmentPolicyCrowdsale {\r\n\r\n    /* Max investment count when we are still allowed to change the multisig address */\r\n    uint constant public MAX_INVESTMENTS_BEFORE_MULTISIG_CHANGE = 5;\r\n\r\n    using SafeMath for uint;\r\n\r\n    /* The token we are selling */\r\n    CrowdsaleToken public token;\r\n\r\n    /* How we are going to price our offering */\r\n    PricingStrategy public pricingStrategy;\r\n\r\n    /* Post-success callback */\r\n    FinalizeAgent public finalizeAgent;\r\n\r\n    /* tokens will be transfered from this address */\r\n    address public multisigWallet;\r\n\r\n    /* The party who holds the full token pool and has approve()'ed tokens for this crowdsale */\r\n    address public beneficiary;\r\n\r\n    /* the UNIX timestamp start date of the presale */\r\n    uint public presaleStartsAt;\r\n\r\n    /* the UNIX timestamp start date of the crowdsale */\r\n    uint public startsAt;\r\n\r\n    /* the UNIX timestamp end date of the crowdsale */\r\n    uint public endsAt;\r\n\r\n    /* the number of tokens already sold through this contract*/\r\n    uint public tokensSold = 0;\r\n\r\n    /* How many wei of funding we have raised */\r\n    uint public weiRaised = 0;\r\n\r\n    /** How many wei we have in whitelist declarations*/\r\n    uint public whitelistWeiRaised = 0;\r\n\r\n    /* Calculate incoming funds from presale contracts and addresses */\r\n    uint public presaleWeiRaised = 0;\r\n\r\n    /* How many distinct addresses have invested */\r\n    uint public investorCount = 0;\r\n\r\n    /* How much wei we have returned back to the contract after a failed crowdfund. */\r\n    uint public loadedRefund = 0;\r\n\r\n    /* How much wei we have given back to investors.*/\r\n    uint public weiRefunded = 0;\r\n\r\n    /* Has this crowdsale been finalized */\r\n    bool public finalized = false;\r\n\r\n    /* Allow investors refund theirs money */\r\n    bool public allowRefund = false;\r\n\r\n    // Has tokens preallocated */\r\n    bool private isPreallocated = false;\r\n\r\n    /** How much ETH each address has invested to this crowdsale */\r\n    mapping (address => uint256) public investedAmountOf;\r\n\r\n    /** How much tokens this crowdsale has credited for each investor address */\r\n    mapping (address => uint256) public tokenAmountOf;\r\n\r\n    /** Addresses and amount in weis that are allowed to invest even before ICO official opens. */\r\n    mapping (address => uint) public earlyParticipantWhitelist;\r\n\r\n    /** State machine\r\n     *\r\n     * - Preparing: All contract initialization calls and variables have not been set yet\r\n     * - PreFunding: We have not passed start time yet, allow buy for whitelisted participants\r\n     * - Funding: Active crowdsale\r\n     * - Success: Passed end time or crowdsale is full (all tokens sold)\r\n     * - Finalized: The finalized has been called and successfully executed\r\n     * - Refunding: Refunds are loaded on the contract for reclaim.\r\n     */\r\n    enum State{Unknown, Preparing, PreFunding, Funding, Success, Failure, Finalized, Refunding}\r\n\r\n    // A new investment was made\r\n    event Invested(address investor, uint weiAmount, uint tokenAmount, uint128 customerId);\r\n\r\n    // Refund was processed for a contributor\r\n    event Refund(address investor, uint weiAmount);\r\n\r\n    // Address early participation whitelist status changed\r\n    event Whitelisted(address addr, uint value);\r\n\r\n    // Crowdsale time boundary has changed\r\n    event TimeBoundaryChanged(string timeBoundary, uint timestamp);\r\n\r\n    /** Modified allowing execution only if the crowdsale is currently running.  */\r\n    modifier inState(State state) {\r\n        require(getState() == state);\r\n        _;\r\n    }\r\n\r\n    function AlgoryCrowdsale(address _token, address _beneficiary, PricingStrategy _pricingStrategy, address _multisigWallet, uint _presaleStart, uint _start, uint _end) public {\r\n        owner = msg.sender;\r\n        token = CrowdsaleToken(_token);\r\n        beneficiary = _beneficiary;\r\n\r\n        presaleStartsAt = _presaleStart;\r\n        startsAt = _start;\r\n        endsAt = _end;\r\n\r\n        require(now < presaleStartsAt && presaleStartsAt <= startsAt && startsAt < endsAt);\r\n\r\n        setPricingStrategy(_pricingStrategy);\r\n        setMultisigWallet(_multisigWallet);\r\n\r\n        require(beneficiary != 0x0 && address(token) != 0x0);\r\n        assert(token.balanceOf(beneficiary) == token.totalSupply());\r\n\r\n    }\r\n\r\n    function prepareCrowdsale() onlyOwner external {\r\n        require(!isPreallocated);\r\n        require(isAllTokensApproved());\r\n        preallocateTokens();\r\n        isPreallocated = true;\r\n    }\r\n\r\n    /**\r\n     * Allow to send money and get tokens.\r\n     */\r\n    function() payable {\r\n        require(!requireCustomerId); // Crowdsale needs to track participants for thank you email\r\n        require(!requiredSignedAddress); // Crowdsale allows only server-side signed participants\r\n        investInternal(msg.sender, 0);\r\n    }\r\n\r\n    function setFinalizeAgent(FinalizeAgent agent) onlyOwner external{\r\n        finalizeAgent = agent;\r\n        require(finalizeAgent.isFinalizeAgent());\r\n        require(finalizeAgent.isSane());\r\n    }\r\n\r\n    function setPresaleStartsAt(uint presaleStart) inState(State.Preparing) onlyOwner external {\r\n        require(presaleStart <= startsAt && presaleStart < endsAt);\r\n        presaleStartsAt = presaleStart;\r\n        TimeBoundaryChanged('presaleStartsAt', presaleStartsAt);\r\n    }\r\n\r\n    function setStartsAt(uint start) onlyOwner external {\r\n        require(presaleStartsAt < start && start < endsAt);\r\n        State state = getState();\r\n        assert(state == State.Preparing || state == State.PreFunding);\r\n        startsAt = start;\r\n        TimeBoundaryChanged('startsAt', startsAt);\r\n    }\r\n\r\n    function setEndsAt(uint end) onlyOwner external {\r\n        require(end > startsAt && end > presaleStartsAt);\r\n        endsAt = end;\r\n        TimeBoundaryChanged('endsAt', endsAt);\r\n    }\r\n\r\n    function loadEarlyParticipantsWhitelist(address[] participantsArray, uint[] valuesArray) onlyOwner external {\r\n        address participant = 0x0;\r\n        uint value = 0;\r\n        for (uint i = 0; i < participantsArray.length; i++) {\r\n            participant = participantsArray[i];\r\n            value = valuesArray[i];\r\n            setEarlyParticipantWhitelist(participant, value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Finalize a successful crowdsale.\r\n     */\r\n    function finalize() inState(State.Success) onlyOwner whenNotPaused external {\r\n        require(!finalized);\r\n        finalizeAgent.finalizeCrowdsale();\r\n        finalized = true;\r\n    }\r\n\r\n    function allowRefunding(bool val) onlyOwner external {\r\n        State state = getState();\r\n        require(paused || state == State.Success || state == State.Failure || state == State.Refunding);\r\n        allowRefund = val;\r\n    }\r\n\r\n    function loadRefund() inState(State.Failure) external payable {\r\n        require(msg.value != 0);\r\n        loadedRefund = loadedRefund.add(msg.value);\r\n    }\r\n\r\n    function refund() inState(State.Refunding) external {\r\n        require(allowRefund);\r\n        uint256 weiValue = investedAmountOf[msg.sender];\r\n        require(weiValue != 0);\r\n        investedAmountOf[msg.sender] = 0;\r\n        weiRefunded = weiRefunded.add(weiValue);\r\n        Refund(msg.sender, weiValue);\r\n        msg.sender.transfer(weiValue);\r\n    }\r\n\r\n    function setPricingStrategy(PricingStrategy _pricingStrategy) onlyOwner public {\r\n        State state = getState();\r\n        if (state == State.PreFunding || state == State.Funding) {\r\n            require(paused);\r\n        }\r\n        pricingStrategy = _pricingStrategy;\r\n        require(pricingStrategy.isPricingStrategy());\r\n    }\r\n\r\n    function setMultisigWallet(address wallet) onlyOwner public {\r\n        require(wallet != 0x0);\r\n        require(investorCount <= MAX_INVESTMENTS_BEFORE_MULTISIG_CHANGE);\r\n        multisigWallet = wallet;\r\n    }\r\n\r\n    function setEarlyParticipantWhitelist(address participant, uint value) onlyOwner public {\r\n        require(value != 0 && participant != 0x0);\r\n        require(value <= pricingStrategy.getPresaleMaxValue());\r\n        assert(!pricingStrategy.isPresaleFull(whitelistWeiRaised));\r\n        if(earlyParticipantWhitelist[participant] > 0) {\r\n            whitelistWeiRaised = whitelistWeiRaised.sub(earlyParticipantWhitelist[participant]);\r\n        }\r\n        earlyParticipantWhitelist[participant] = value;\r\n        whitelistWeiRaised = whitelistWeiRaised.add(value);\r\n        Whitelisted(participant, value);\r\n    }\r\n\r\n    function getTokensLeft() public constant returns (uint) {\r\n        return token.allowance(beneficiary, this);\r\n    }\r\n\r\n    function isCrowdsaleFull() public constant returns (bool) {\r\n        return getTokensLeft() == 0;\r\n    }\r\n\r\n    function getState() public constant returns (State) {\r\n        if(finalized) return State.Finalized;\r\n        else if (!isPreallocated) return State.Preparing;\r\n        else if (address(finalizeAgent) == 0) return State.Preparing;\r\n        else if (block.timestamp < presaleStartsAt) return State.Preparing;\r\n        else if (block.timestamp >= presaleStartsAt && block.timestamp < startsAt) return State.PreFunding;\r\n        else if (block.timestamp <= endsAt && block.timestamp >= startsAt && !isCrowdsaleFull()) return State.Funding;\r\n        else if (!allowRefund && isCrowdsaleFull()) return State.Success;\r\n        else if (!allowRefund && block.timestamp > endsAt) return State.Success;\r\n        else if (allowRefund && weiRaised > 0 && loadedRefund >= weiRaised) return State.Refunding;\r\n        else return State.Failure;\r\n    }\r\n\r\n    /**\r\n     * Check is crowdsale can be able to transfer all tokens from beneficiary\r\n     */\r\n    function isAllTokensApproved() private constant returns (bool) {\r\n        return getTokensLeft() == token.totalSupply() - tokensSold\r\n                && token.transferAgents(beneficiary);\r\n    }\r\n\r\n    function isBreakingCap(uint tokenAmount) private constant returns (bool limitBroken) {\r\n        return tokenAmount > getTokensLeft();\r\n    }\r\n\r\n    function investInternal(address receiver, uint128 customerId) whenNotPaused internal{\r\n        State state = getState();\r\n        require(state == State.PreFunding || state == State.Funding);\r\n        uint weiAmount = msg.value;\r\n        uint tokenAmount = 0;\r\n\r\n\r\n        if (state == State.PreFunding) {\r\n            require(earlyParticipantWhitelist[receiver] > 0);\r\n            require(weiAmount <= earlyParticipantWhitelist[receiver]);\r\n            assert(!pricingStrategy.isPresaleFull(presaleWeiRaised));\r\n        }\r\n\r\n        tokenAmount = pricingStrategy.getAmountOfTokens(weiAmount, weiRaised);\r\n        require(tokenAmount > 0);\r\n        if (investedAmountOf[receiver] == 0) {\r\n            investorCount++;\r\n        }\r\n\r\n        investedAmountOf[receiver] = investedAmountOf[receiver].add(weiAmount);\r\n        tokenAmountOf[receiver] = tokenAmountOf[receiver].add(tokenAmount);\r\n        weiRaised = weiRaised.add(weiAmount);\r\n        tokensSold = tokensSold.add(tokenAmount);\r\n\r\n        if (state == State.PreFunding) {\r\n            presaleWeiRaised = presaleWeiRaised.add(weiAmount);\r\n            earlyParticipantWhitelist[receiver] = earlyParticipantWhitelist[receiver].sub(weiAmount);\r\n        }\r\n\r\n        require(!isBreakingCap(tokenAmount));\r\n\r\n        assignTokens(receiver, tokenAmount);\r\n\r\n        require(multisigWallet.send(weiAmount));\r\n\r\n        Invested(receiver, weiAmount, tokenAmount, customerId);\r\n    }\r\n\r\n    function assignTokens(address receiver, uint tokenAmount) private {\r\n        require(token.transferFrom(beneficiary, receiver, tokenAmount));\r\n    }\r\n\r\n    /**\r\n     * Preallocate tokens for developers, company and bounty\r\n     */\r\n    function preallocateTokens() private {\r\n        uint multiplier = 10 ** 18;\r\n        assignTokens(0xc8337b3e03f5946854e6C5d2F5f3Ad0511Bb2599, 4300000 * multiplier); // developers\r\n        assignTokens(0x354d755460A677B60A2B5e025A3b7397856b518E, 4100000 * multiplier); // company\r\n        assignTokens(0x6AC724A02A4f47179A89d4A7532ED7030F55fD34, 2400000 * multiplier); // bounty\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"requireCustomerId\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endsAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getState\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"agent\",\"type\":\"address\"}],\"name\":\"setFinalizeAgent\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"investedAmountOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"finalizeAgent\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"val\",\"type\":\"bool\"}],\"name\":\"allowRefunding\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presaleStartsAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_pricingStrategy\",\"type\":\"address\"}],\"name\":\"setPricingStrategy\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"participant\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setEarlyParticipantWhitelist\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refund\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"signerAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRefunded\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_INVESTMENTS_BEFORE_MULTISIG_CHANGE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"setMultisigWallet\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"end\",\"type\":\"uint256\"}],\"name\":\"setEndsAt\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pricingStrategy\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"loadedRefund\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"presaleStart\",\"type\":\"uint256\"}],\"name\":\"setPresaleStartsAt\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setRequireCustomerId\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"loadRefund\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"multisigWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenAmountOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"customerId\",\"type\":\"uint128\"}],\"name\":\"buyWithCustomerId\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"whitelistWeiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"participantsArray\",\"type\":\"address[]\"},{\"name\":\"valuesArray\",\"type\":\"uint256[]\"}],\"name\":\"loadEarlyParticipantsWhitelist\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startsAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"finalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"start\",\"type\":\"uint256\"}],\"name\":\"setStartsAt\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"earlyParticipantWhitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"requiredSignedAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isCrowdsaleFull\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"investorCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTokensLeft\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"prepareCrowdsale\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"bool\"},{\"name\":\"_signerAddress\",\"type\":\"address\"}],\"name\":\"setRequireSignedAddress\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"customerId\",\"type\":\"uint128\"},{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"buyWithSignedAddress\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presaleWeiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allowRefund\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_pricingStrategy\",\"type\":\"address\"},{\"name\":\"_multisigWallet\",\"type\":\"address\"},{\"name\":\"_presaleStart\",\"type\":\"uint256\"},{\"name\":\"_start\",\"type\":\"uint256\"},{\"name\":\"_end\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"weiAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"customerId\",\"type\":\"uint128\"}],\"name\":\"Invested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"weiAmount\",\"type\":\"uint256\"}],\"name\":\"Refund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Whitelisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"timeBoundary\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"TimeBoundaryChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newRequireCustomerId\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"newRequiredSignedAddress\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"newSignerAddress\",\"type\":\"address\"}],\"name\":\"InvestmentPolicyChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"AlgoryCrowdsale","CompilerVersion":"v0.4.15+commit.bbb8e64f","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000016b0a1a87ae8af5c792fabc429c4fe248834842b000000000000000000000000fa79253cbd5671df91dccae40a29ee2cf2eb60f0000000000000000000000000943e885c8c008c8e2abef1332b3aa129d56beb42000000000000000000000000723f74668599c9327138bc97bff04eb9ad44a3fa000000000000000000000000000000000000000000000000000000005a294960000000000000000000000000000000000000000000000000000000005a2a9ae0000000000000000000000000000000000000000000000000000000005a537960","Library":"","SwarmSource":"bzzr://7a044c99be51a2860e3b19b6eadcd715c8b75a5f935135bc2be0bb3619ec8217"}]}