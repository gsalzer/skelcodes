{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.13;\r\n\r\n/**\r\n * @title Wallet Getter Library\r\n * @author Majoolr.io\r\n *\r\n * version 1.0.0\r\n * Copyright (c) 2017 Majoolr, LLC\r\n * The MIT License (MIT)\r\n * https://github.com/Majoolr/ethereum-libraries/blob/master/LICENSE\r\n *\r\n * The Wallet Library family is inspired by the multisig wallets built by Consensys\r\n * at https://github.com/ConsenSys/MultiSigWallet and Parity at\r\n * https://github.com/paritytech/contracts/blob/master/Wallet.sol with added\r\n * functionality. Majoolr works on open source projects in the Ethereum\r\n * community with the purpose of testing, documenting, and deploying reusable\r\n * code onto the blockchain to improve security and usability of smart contracts.\r\n * Majoolr also strives to educate non-profits, schools, and other community\r\n * members about the application of blockchain technology. For further\r\n * information: majoolr.io, consensys.net, paritytech.io\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\r\n * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\r\n * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\r\n * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\r\n * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\n\r\nlibrary WalletGetterLib {\r\n\r\n  /*Getter Functions*/\r\n\r\n  /// @dev Get list of wallet owners, will return fixed 50 until fork\r\n  /// @param self Wallet in contract storage\r\n  /// @return address[51] Returns entire 51 owner slots\r\n  function getOwners(WalletMainLib.WalletData storage self) constant returns (address[51]) {\r\n    address[51] memory o;\r\n    for(uint i = 0; i<self.owners.length; i++){\r\n      o[i] = self.owners[i];\r\n    }\r\n    return o;\r\n  }\r\n\r\n  /// @dev Get index of an owner\r\n  /// @param self Wallet in contract storage\r\n  /// @param _owner Address of owner\r\n  /// @return uint Index of the owner\r\n  function getOwnerIndex(WalletMainLib.WalletData storage self, address _owner) constant returns (uint) {\r\n    return self.ownerIndex[_owner];\r\n  }\r\n\r\n  /// @dev Get max number of wallet owners\r\n  /// @param self Wallet in contract storage\r\n  /// @return uint Maximum number of owners\r\n  function getMaxOwners(WalletMainLib.WalletData storage self) constant returns (uint) {\r\n    return self.maxOwners;\r\n  }\r\n\r\n  /// @dev Get number of wallet owners\r\n  /// @param self Wallet in contract storage\r\n  /// @return uint Number of owners\r\n  function getOwnerCount(WalletMainLib.WalletData storage self) constant returns (uint) {\r\n    return self.owners.length - 1;\r\n  }\r\n\r\n  /// @dev Get sig requirements for administrative changes\r\n  /// @param self Wallet in contract storage\r\n  /// @return uint Number of sigs required\r\n  function getRequiredAdmin(WalletMainLib.WalletData storage self) constant returns (uint) {\r\n    return self.requiredAdmin;\r\n  }\r\n\r\n  /// @dev Get sig requirements for minor tx spends\r\n  /// @param self Wallet in contract storage\r\n  /// @return uint Number of sigs required\r\n  function getRequiredMinor(WalletMainLib.WalletData storage self) constant returns (uint) {\r\n    return self.requiredMinor;\r\n  }\r\n\r\n  /// @dev Get sig requirements for major tx spends\r\n  /// @param self Wallet in contract storage\r\n  /// @return uint Number of sigs required\r\n  function getRequiredMajor(WalletMainLib.WalletData storage self) constant returns (uint) {\r\n    return self.requiredMajor;\r\n  }\r\n\r\n  /// @dev Get current day spend for token\r\n  /// @param self Wallet in contract storage\r\n  /// @param _token Address of token, 0 for ether\r\n  /// @return uint[2] 0-index is day timestamp, 1-index is the day spend\r\n  function getCurrentSpend(WalletMainLib.WalletData storage self, address _token) constant returns (uint[2]) {\r\n    uint[2] memory cs;\r\n    cs[0] = self.currentSpend[_token][0];\r\n    cs[1] = self.currentSpend[_token][1];\r\n    return cs;\r\n  }\r\n\r\n  /// @dev Get major tx threshold per token\r\n  /// @param self Wallet in contract storage\r\n  /// @param _token Address of token, 0 for ether\r\n  /// @return uint Threshold amount\r\n  function getMajorThreshold(WalletMainLib.WalletData storage self, address _token) constant returns (uint) {\r\n    return self.majorThreshold[_token];\r\n  }\r\n\r\n  /// @dev Get last 10 transactions for the day, fixed at 10 until fork\r\n  /// @param self Wallet in contract storage\r\n  /// @param _date Timestamp of day requested\r\n  /// @return bytes32[10] Last 10 tx's starting with latest\r\n  function getTransactions(WalletMainLib.WalletData storage self, uint _date) constant returns (bytes32[10]) {\r\n    bytes32[10] memory t;\r\n    uint li = self.transactions[_date].length - 1;\r\n    for(uint i = li; i >= 0; i--){\r\n      t[li - i] = self.transactions[_date][i];\r\n    }\r\n    return t;\r\n  }\r\n\r\n  /// @dev Get the number of tx's with the same id\r\n  /// @param self Wallet in contract storage\r\n  /// @param _id ID of transactions requested\r\n  /// @return uint Number of tx's with same ID\r\n  function getTransactionLength(WalletMainLib.WalletData storage self, bytes32 _id) constant returns (uint) {\r\n    return self.transactionInfo[_id].length;\r\n  }\r\n\r\n  /// @dev Get list of confirmations for a tx, use getTransactionLength to get latest number\r\n  /// @param self Wallet in contract storage\r\n  /// @param _id ID of transaction requested\r\n  /// @param _number The transaction index number\r\n  /// @return uint256[50] Returns list of confirmations, fixed at 50 until fork\r\n  function getTransactionConfirms(WalletMainLib.WalletData storage self,\r\n                                  bytes32 _id,\r\n                                  uint _number)\r\n                                  constant returns (uint256[50])\r\n  {\r\n    uint256[50] memory tc;\r\n    for(uint i = 0; i<self.transactionInfo[_id][_number].confirmedOwners.length; i++){\r\n      tc[i] = self.transactionInfo[_id][_number].confirmedOwners[i];\r\n    }\r\n    return tc;\r\n  }\r\n\r\n  /// @dev Retrieve tx confirmation count\r\n  /// @param self Wallet in contract storage\r\n  /// @param _id ID of transaction requested\r\n  /// @param _number The transaction index number\r\n  /// @return uint Returns the current number of tx confirmations\r\n  function getTransactionConfirmCount(WalletMainLib.WalletData storage self,\r\n                           bytes32 _id,\r\n                           uint _number)\r\n                           constant returns(uint)\r\n  {\r\n    return self.transactionInfo[_id][_number].confirmCount;\r\n  }\r\n\r\n  /// @dev Retrieve if transaction was successful\r\n  /// @param self Wallet in contract storage\r\n  /// @param _id ID of transaction requested\r\n  /// @param _number The transaction index number\r\n  /// @return bool Returns true if tx successfully executed, false otherwise\r\n  function getTransactionSuccess(WalletMainLib.WalletData storage self,\r\n                                 bytes32 _id,\r\n                                 uint _number)\r\n                                 constant returns (bool)\r\n  {\r\n    return self.transactionInfo[_id][_number].success;\r\n  }\r\n}\r\n\r\npragma solidity 0.4.13;\r\n\r\n/**\r\n * @title Wallet Main Library\r\n * @author Majoolr.io\r\n *\r\n * version 1.0.0\r\n * Copyright (c) 2017 Majoolr, LLC\r\n * The MIT License (MIT)\r\n * https://github.com/Majoolr/ethereum-libraries/blob/master/LICENSE\r\n *\r\n * The Wallet Library family is inspired by the multisig wallets built by Consensys\r\n * at https://github.com/ConsenSys/MultiSigWallet and Parity at\r\n * https://github.com/paritytech/contracts/blob/master/Wallet.sol with added\r\n * functionality. Majoolr works on open source projects in the Ethereum\r\n * community with the purpose of testing, documenting, and deploying reusable\r\n * code onto the blockchain to improve security and usability of smart contracts.\r\n * Majoolr also strives to educate non-profits, schools, and other community\r\n * members about the application of blockchain technology. For further\r\n * information: majoolr.io, consensys.net, paritytech.io\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\r\n * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\r\n * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\r\n * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\r\n * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\n\r\nlibrary WalletMainLib {\r\n  using Array256Lib for uint256[];\r\n  using BasicMathLib for uint;\r\n\r\n  struct WalletData {\r\n    uint maxOwners; //Maximum wallet owners, should be 50\r\n    address[] owners; //Array of all owners\r\n    uint requiredAdmin; //Number of sigs required for administrative changes\r\n    uint requiredMajor; //Number of sigs required for major transactions\r\n    uint requiredMinor; //Number of sigs required for minor transactions\r\n\r\n    // The amount of a token spent per day, ether is at address mapping 0,\r\n    // all other tokens defined by address. uint[0] corresponds to the current\r\n    // day,  uint[1] is the spend amount\r\n    mapping (address => uint[2]) currentSpend;\r\n    //The day spend threshold for transactions to be major, ether at 0, all others by address\r\n    mapping (address => uint) majorThreshold;\r\n    //Array of transactions per day, uint is the day timestamp, bytes32 is the transaction id\r\n    mapping (uint => bytes32[]) transactions;\r\n    //Tracks the index of each owner in the owners Array\r\n    mapping (address => uint) ownerIndex;\r\n    //Array of Transaction's by id, new tx's with exact inputs as previous tx will add to array\r\n    mapping (bytes32 => Transaction[]) transactionInfo;\r\n\r\n  }\r\n\r\n  struct Transaction {\r\n    uint day; //Timestamp of the day initialized\r\n    uint value; //Amount of ether being sent\r\n    address tokenAdress; //Address of token transferred\r\n    uint amount; //Amount of tokens transferred\r\n    bytes data; //Temp location for pending transactions, erased after final confirmation\r\n    uint256[] confirmedOwners; //Array of owners confirming transaction\r\n    uint confirmCount; //Tracks the number of confirms\r\n    uint confirmRequired; //Number of sigs required for this transaction\r\n    bool success; //True after final confirmation\r\n  }\r\n\r\n  /*Events*/\r\n  event LogRevokeNotice(bytes32 txid, address sender, uint confirmsNeeded);\r\n  event LogTransactionFailed(bytes32 txid, address sender);\r\n  event LogTransactionConfirmed(bytes32 txid, address sender, uint confirmsNeeded);\r\n  event LogTransactionComplete(bytes32 txid, address target, uint value, bytes data);\r\n  event LogContractCreated(address newContract, uint value);\r\n  event LogErrMsg(string msg);\r\n\r\n  /// @dev Constructor\r\n  /// @param self The wallet in contract storage\r\n  /// @param _owners Array of initial owners\r\n  /// @param _requiredAdmin Set number of sigs for administrative tasks\r\n  /// @param _requiredMajor Set number of sigs for major tx\r\n  /// @param _requiredMinor Set number of sigs for minor tx\r\n  /// @param _majorThreshold Set major tx threshold amount for ether\r\n  /// @return Will return true when complete\r\n  function init(WalletData storage self,\r\n                address[] _owners,\r\n                uint _requiredAdmin,\r\n                uint _requiredMajor,\r\n                uint _requiredMinor,\r\n                uint _majorThreshold) returns (bool)\r\n  {\r\n    require(self.owners.length == 0);\r\n    require(_owners.length >= _requiredAdmin && _requiredAdmin > 0);\r\n    require(_owners.length >= _requiredMajor && _requiredMajor > 0);\r\n    require(_owners.length >= _requiredMinor && _requiredMinor > 0);\r\n    self.owners.push(0); //Leave index-0 empty for easier owner checks\r\n\r\n    for (uint i=0; i<_owners.length; i++) {\r\n      require(_owners[i] != 0);\r\n      self.owners.push(_owners[i]);\r\n      self.ownerIndex[_owners[i]] = i+1;\r\n    }\r\n    self.requiredAdmin = _requiredAdmin;\r\n    self.requiredMajor = _requiredMajor;\r\n    self.requiredMinor = _requiredMinor;\r\n    self.maxOwners = 50; //Limits to 50 owners, should create wallet pools for more owners\r\n    self.majorThreshold[0] = _majorThreshold; //Sets ether threshold at address 0\r\n\r\n    return true;\r\n  }\r\n\r\n  /*Checks*/\r\n\r\n  /// @dev Verifies a confirming owner has not confirmed already\r\n  /// @param self Contract wallet in storage\r\n  /// @param _id ID of the tx being checked\r\n  /// @param _number Index number of this tx\r\n  /// @return Returns true if check passes, false otherwise\r\n  function checkNotConfirmed(WalletData storage self, bytes32 _id, uint _number)\r\n           constant returns (bool)\r\n  {\r\n    require(self.ownerIndex[msg.sender] > 0);\r\n    uint _txLen = self.transactionInfo[_id].length;\r\n\r\n    if(_txLen == 0 || _number >= _txLen){\r\n      LogErrMsg(\"Tx not initiated\");\r\n      LogTransactionFailed(_id, msg.sender);\r\n      return false;\r\n    }\r\n\r\n    if(self.transactionInfo[_id][_number].success){\r\n      LogErrMsg(\"Transaction already complete\");\r\n      LogTransactionFailed(_id, msg.sender);\r\n      return false;\r\n    }\r\n\r\n    //Function from Majoolr.io array utility library\r\n    bool found;\r\n    uint index;\r\n    (found, index) = self.transactionInfo[_id][_number].confirmedOwners.indexOf(uint(msg.sender), false);\r\n    if(found){\r\n      LogErrMsg(\"Owner already confirmed\");\r\n      LogTransactionFailed(_id, msg.sender);\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  /*Utility Functions*/\r\n\r\n  /// @dev Used later to calculate the number of confirmations needed for tx\r\n  /// @param _required Number of sigs required\r\n  /// @param _count Current number of sigs\r\n  function calcConfirmsNeeded(uint _required, uint _count) constant returns (uint){\r\n    return _required - _count;\r\n  }\r\n\r\n  /// @dev Used to check if tx is moving tokens and parses amount\r\n  /// @param _txData Data for proposed tx\r\n  /// @return bool True if transaction is moving tokens\r\n  /// @return uint Amount of tokens involved, 0 if not spending tx\r\n  function getAmount(bytes _txData) constant returns (bool,uint) {\r\n    bytes32 getSig;\r\n    bytes4 sig;\r\n    bytes4 tSig = 0xa9059cbb; //transfer func signature\r\n    bytes4 aSig = 0x095ea7b3; //approve func signature\r\n    bytes4 tfSig = 0x23b872dd; //transferFrom func signature\r\n    bool transfer;\r\n    bytes32 _amountData;\r\n    uint _amount;\r\n\r\n    assembly { getSig := mload(add(_txData,0x20)) }\r\n    sig = bytes4(getSig);\r\n    if(sig ==  tSig || sig == aSig){\r\n      transfer = true;\r\n      assembly { _amountData := mload(add(_txData,0x44)) }\r\n      _amount = uint(_amountData);\r\n    } else if(sig == tfSig){\r\n      transfer = true;\r\n      assembly { _amountData := mload(add(_txData,0x64)) }\r\n      _amount = uint(_amountData);\r\n    }\r\n    return (transfer,_amount);\r\n  }\r\n\r\n  /// @dev Retrieves sig requirement for spending tx\r\n  /// @param self Contract wallet in storage\r\n  /// @param _to Target address of transaction\r\n  /// @param _value Amount of ether spend\r\n  /// @param _isTransfer True if transferring other tokens, false otherwise\r\n  /// @param _amount Amount of tokens being transferred, 0 if not a transfer tx\r\n  /// @return uint The required sigs for tx\r\n  function getRequired(WalletData storage self,\r\n                       address _to,\r\n                       uint _value,\r\n                       bool _isTransfer,\r\n                       uint _amount)\r\n                       returns (uint)\r\n  {\r\n    bool err;\r\n    uint res;\r\n    bool major = true;\r\n    //Reset spend if this is first check of the day\r\n    if((now/ 1 days) > self.currentSpend[0][0]){\r\n      self.currentSpend[0][0] = now / 1 days;\r\n      self.currentSpend[0][1] = 0;\r\n    }\r\n\r\n    (err, res) = self.currentSpend[0][1].plus(_value);\r\n    if(err){\r\n      LogErrMsg(\"Overflow eth spend\");\r\n      return 0;\r\n    }\r\n\r\n    if(res < self.majorThreshold[0])\r\n      major = false;\r\n\r\n    if(_to != 0 && _isTransfer){\r\n      if((now / 1 days) > self.currentSpend[_to][0]){\r\n        self.currentSpend[_to][0] = now / 1 days;\r\n        self.currentSpend[_to][1] = 0;\r\n      }\r\n\r\n      (err, res) = self.currentSpend[_to][1].plus(_amount);\r\n      if(err){\r\n        LogErrMsg(\"Overflow token spend\");\r\n        return 0;\r\n      }\r\n      if(res >= self.majorThreshold[_to])\r\n        major = true;\r\n    }\r\n\r\n    return major ? self.requiredMajor : self.requiredMinor;\r\n  }\r\n\r\n  /// @dev Function to create new contract\r\n  /// @param _txData Transaction data\r\n  /// @param _value Amount of eth sending to new contract\r\n  function createContract(bytes _txData, uint _value) {\r\n    address _newContract;\r\n    bool allGood;\r\n\r\n    assembly {\r\n      _newContract := create(_value, add(_txData, 0x20), mload(_txData))\r\n      allGood := gt(extcodesize(_newContract),0)\r\n    }\r\n    require(allGood);\r\n    LogContractCreated(_newContract, _value);\r\n  }\r\n\r\n  /*Primary Function*/\r\n\r\n  /// @dev Create and execute transaction from wallet\r\n  /// @param self Wallet in contract storage\r\n  /// @param _to Address of target\r\n  /// @param _value Amount of ether sending\r\n  /// @param _txData Data for executing transaction\r\n  /// @param _confirm True if confirming, false if revoking confirmation\r\n  /// @param _data Message data passed from wallet contract\r\n  /// @return bool Returns true if successful, false otherwise\r\n  /// @return bytes32 Returns the tx ID, can be used for confirm/revoke functions\r\n  function serveTx(WalletData storage self,\r\n                   address _to,\r\n                   uint _value,\r\n                   bytes _txData,\r\n                   bool _confirm,\r\n                   bytes _data)\r\n                   returns (bool,bytes32)\r\n  {\r\n    bytes32 _id = sha3(\"serveTx\",_to,_value,_txData);\r\n    uint _number = self.transactionInfo[_id].length;\r\n    uint _required = self.requiredMajor;\r\n\r\n    //Run checks if not called from generic confirm/revoke function\r\n    if(msg.sender != address(this)){\r\n      bool allGood;\r\n      uint _amount;\r\n      // if the owner is revoking his/her confirmation but doesn't know the\r\n      // specific transaction id hash\r\n      if(!_confirm) {\r\n        allGood = revokeConfirm(self, _id);\r\n        return (allGood,_id);\r\n      } else { // else confirming the transaction\r\n        //if this is a new transaction id or if a previous identical transaction had already succeeded\r\n        if(_number == 0 || self.transactionInfo[_id][_number - 1].success){\r\n          require(self.ownerIndex[msg.sender] > 0);\r\n\r\n          //Reuse allGood due to stack limit\r\n          if(_to != 0)\r\n            (allGood,_amount) = getAmount(_txData);\r\n\r\n          _required = getRequired(self, _to, _value, allGood,_amount);\r\n          if(_required == 0)\r\n            return (false, _id);\r\n\r\n          // add this transaction to the wallets record and initialize the settings\r\n          self.transactionInfo[_id].length++;\r\n          self.transactionInfo[_id][_number].confirmRequired = _required;\r\n          self.transactionInfo[_id][_number].day = now / 1 days;\r\n          self.transactions[now / 1 days].push(_id);\r\n        } else { // else the transaction is already pending\r\n          _number--; // set the index to the index of the existing transaction\r\n          //make sure the sender isn't already confirmed\r\n          allGood = checkNotConfirmed(self, _id, _number);\r\n          if(!allGood)\r\n            return (false,_id);\r\n        }\r\n      }\r\n\r\n      // add the senders confirmation to the transaction\r\n      self.transactionInfo[_id][_number].confirmedOwners.push(uint(msg.sender));\r\n      self.transactionInfo[_id][_number].confirmCount++;\r\n    }else {\r\n      // else were calling from generic confirm/revoke function, set the\r\n      // _number index to the index of the existing transaction\r\n      _number--;\r\n    }\r\n\r\n    // if there are enough confirmations\r\n    if(self.transactionInfo[_id][_number].confirmCount ==\r\n       self.transactionInfo[_id][_number].confirmRequired)\r\n    {\r\n      // execute the transaction\r\n      self.currentSpend[0][1] += _value;\r\n      self.currentSpend[_to][1] += _amount;\r\n      self.transactionInfo[_id][_number].success = true;\r\n\r\n      if(_to == 0){\r\n        //Failure is self contained in method\r\n        createContract(_txData, _value);\r\n      } else {\r\n        require(_to.call.value(_value)(_txData));\r\n      }\r\n      delete self.transactionInfo[_id][_number].data;\r\n      LogTransactionComplete(_id, _to, _value, _data);\r\n    } else {\r\n      if(self.transactionInfo[_id][_number].data.length == 0)\r\n        self.transactionInfo[_id][_number].data = _data;\r\n\r\n      uint confirmsNeeded = calcConfirmsNeeded(self.transactionInfo[_id][_number].confirmRequired,\r\n                                               self.transactionInfo[_id][_number].confirmCount);\r\n      LogTransactionConfirmed(_id, msg.sender, confirmsNeeded);\r\n    }\r\n\r\n    return (true,_id);\r\n  }\r\n\r\n  /*Confirm/Revoke functions using tx ID*/\r\n\r\n  /// @dev Confirms a current pending tx, will execute if final confirmation\r\n  /// @param self Wallet in contract storage\r\n  /// @param _id ID of the transaction\r\n  /// @return Returns true if successful, false otherwise\r\n  function confirmTx(WalletData storage self, bytes32 _id) returns (bool){\r\n    require(self.ownerIndex[msg.sender] > 0);\r\n    uint _number = self.transactionInfo[_id].length;\r\n    bool ret;\r\n\r\n    if(_number == 0){\r\n      LogErrMsg(\"Tx not initiated\");\r\n      LogTransactionFailed(_id, msg.sender);\r\n      return false;\r\n    }\r\n\r\n    _number--;\r\n    bool allGood = checkNotConfirmed(self, _id, _number);\r\n    if(!allGood)\r\n      return false;\r\n\r\n    self.transactionInfo[_id][_number].confirmedOwners.push(uint256(msg.sender));\r\n    self.transactionInfo[_id][_number].confirmCount++;\r\n\r\n    if(self.transactionInfo[_id][_number].confirmCount ==\r\n       self.transactionInfo[_id][_number].confirmRequired)\r\n    {\r\n      address a = address(this);\r\n      require(a.call(self.transactionInfo[_id][_number].data));\r\n    } else {\r\n      uint confirmsNeeded = calcConfirmsNeeded(self.transactionInfo[_id][_number].confirmRequired,\r\n                                               self.transactionInfo[_id][_number].confirmCount);\r\n\r\n      LogTransactionConfirmed(_id, msg.sender, confirmsNeeded);\r\n      ret = true;\r\n    }\r\n\r\n    return ret;\r\n  }\r\n\r\n  /// @dev Revokes a prior confirmation from sender, call with tx ID\r\n  /// @param self Wallet in contract storage\r\n  /// @param _id ID of the transaction\r\n  /// @return Returns true if successful, false otherwise\r\n  function revokeConfirm(WalletData storage self, bytes32 _id)\r\n           returns (bool)\r\n  {\r\n    require(self.ownerIndex[msg.sender] > 0);\r\n    uint _number = self.transactionInfo[_id].length;\r\n\r\n    if(_number == 0){\r\n      LogErrMsg(\"Tx not initiated\");\r\n      LogTransactionFailed(_id, msg.sender);\r\n      return false;\r\n    }\r\n\r\n    _number--;\r\n    if(self.transactionInfo[_id][_number].success){\r\n      LogErrMsg(\"Transaction already complete\");\r\n      LogTransactionFailed(_id, msg.sender);\r\n      return false;\r\n    }\r\n\r\n    //Function from Majoolr.io array utility library\r\n    bool found;\r\n    uint index;\r\n    (found, index) = self.transactionInfo[_id][_number].confirmedOwners.indexOf(uint(msg.sender), false);\r\n    if(!found){\r\n      LogErrMsg(\"Owner has not confirmed tx\");\r\n      LogTransactionFailed(_id, msg.sender);\r\n      return false;\r\n    }\r\n    self.transactionInfo[_id][_number].confirmedOwners[index] = 0;\r\n    self.transactionInfo[_id][_number].confirmCount--;\r\n\r\n    uint confirmsNeeded = calcConfirmsNeeded(self.transactionInfo[_id][_number].confirmRequired,\r\n                                             self.transactionInfo[_id][_number].confirmCount);\r\n    //Transaction removed if all sigs revoked but id remains in wallet transaction list\r\n    if(self.transactionInfo[_id][_number].confirmCount == 0)\r\n      self.transactionInfo[_id].length--;\r\n\r\n    LogRevokeNotice(_id, msg.sender, confirmsNeeded);\r\n    return true;\r\n  }\r\n}\r\n\r\npragma solidity ^0.4.13;\r\n\r\n/**\r\n * @title Array256 Library\r\n * @author Majoolr.io\r\n *\r\n * version 1.0.0\r\n * Copyright (c) 2017 Majoolr, LLC\r\n * The MIT License (MIT)\r\n * https://github.com/Majoolr/ethereum-libraries/blob/master/LICENSE\r\n *\r\n * The Array256 Library provides a few utility functions to work with\r\n * storage uint256[] types in place. Majoolr works on open source projects in\r\n * the Ethereum community with the purpose of testing, documenting, and deploying\r\n * reusable code onto the blockchain to improve security and usability of smart\r\n * contracts. Majoolr also strives to educate non-profits, schools, and other\r\n * community members about the application of blockchain technology.\r\n * For further information: majoolr.io\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\r\n * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\r\n * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\r\n * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\r\n * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\n\r\nlibrary Array256Lib {\r\n\r\n  /// @dev Sum vector\r\n  /// @param self Storage array containing uint256 type variables\r\n  /// @return sum The sum of all elements, does not check for overflow\r\n  function sumElements(uint256[] storage self) constant returns(uint256 sum) {\r\n    assembly {\r\n      mstore(0x60,self_slot)\r\n\r\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\r\n        sum := add(sload(add(sha3(0x60,0x20),i)),sum)\r\n      }\r\n    }\r\n  }\r\n\r\n  /// @dev Returns the max value in an array.\r\n  /// @param self Storage array containing uint256 type variables\r\n  /// @return maxValue The highest value in the array\r\n  function getMax(uint256[] storage self) constant returns(uint256 maxValue) {\r\n    assembly {\r\n      mstore(0x60,self_slot)\r\n      maxValue := sload(sha3(0x60,0x20))\r\n\r\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\r\n        switch gt(sload(add(sha3(0x60,0x20),i)), maxValue)\r\n        case 1 {\r\n          maxValue := sload(add(sha3(0x60,0x20),i))\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /// @dev Returns the minimum value in an array.\r\n  /// @param self Storage array containing uint256 type variables\r\n  /// @return minValue The highest value in the array\r\n  function getMin(uint256[] storage self) constant returns(uint256 minValue) {\r\n    assembly {\r\n      mstore(0x60,self_slot)\r\n      minValue := sload(sha3(0x60,0x20))\r\n\r\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\r\n        switch gt(sload(add(sha3(0x60,0x20),i)), minValue)\r\n        case 0 {\r\n          minValue := sload(add(sha3(0x60,0x20),i))\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /// @dev Finds the index of a given value in an array\r\n  /// @param self Storage array containing uint256 type variables\r\n  /// @param value The value to search for\r\n  /// @param isSorted True if the array is sorted, false otherwise\r\n  /// @return found True if the value was found, false otherwise\r\n  /// @return index The index of the given value, returns 0 if found is false\r\n  function indexOf(uint256[] storage self, uint256 value, bool isSorted) constant\r\n           returns(bool found, uint256 index) {\r\n    assembly{\r\n      mstore(0x60,self_slot)\r\n      switch isSorted\r\n      case 1 {\r\n        let high := sub(sload(self_slot),1)\r\n        let mid := 0\r\n        let low := 0\r\n        for { } iszero(gt(low, high)) { } {\r\n          mid := div(add(low,high),2)\r\n\r\n          switch lt(sload(add(sha3(0x60,0x20),mid)),value)\r\n          case 1 {\r\n             low := add(mid,1)\r\n          }\r\n          case 0 {\r\n            switch gt(sload(add(sha3(0x60,0x20),mid)),value)\r\n            case 1 {\r\n              high := sub(mid,1)\r\n            }\r\n            case 0 {\r\n              found := 1\r\n              index := mid\r\n              low := add(high,1)\r\n            }\r\n          }\r\n        }\r\n      }\r\n      case 0 {\r\n        for { let low := 0 } lt(low, sload(self_slot)) { low := add(low, 1) } {\r\n          switch eq(sload(add(sha3(0x60,0x20),low)), value)\r\n          case 1 {\r\n            found := 1\r\n            index := low\r\n            low := sload(self_slot)\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /// @dev Utility function for heapSort\r\n  /// @param index The index of child node\r\n  /// @return pI The parent node index\r\n  function getParentI(uint256 index) constant private returns (uint256 pI) {\r\n    uint256 i = index - 1;\r\n    pI = i/2;\r\n  }\r\n\r\n  /// @dev Utility function for heapSort\r\n  /// @param index The index of parent node\r\n  /// @return lcI The index of left child\r\n  function getLeftChildI(uint256 index) constant private returns (uint256 lcI) {\r\n    uint256 i = index * 2;\r\n    lcI = i + 1;\r\n  }\r\n\r\n  /// @dev Sorts given array in place\r\n  /// @param self Storage array containing uint256 type variables\r\n  function heapSort(uint256[] storage self) {\r\n    uint256 end = self.length - 1;\r\n    uint256 start = getParentI(end);\r\n    uint256 root = start;\r\n    uint256 lChild;\r\n    uint256 rChild;\r\n    uint256 swap;\r\n    uint256 temp;\r\n    while(start >= 0){\r\n      root = start;\r\n      lChild = getLeftChildI(start);\r\n      while(lChild <= end){\r\n        rChild = lChild + 1;\r\n        swap = root;\r\n        if(self[swap] < self[lChild])\r\n          swap = lChild;\r\n        if((rChild <= end) && (self[swap]<self[rChild]))\r\n          swap = rChild;\r\n        if(swap == root)\r\n          lChild = end+1;\r\n        else {\r\n          temp = self[swap];\r\n          self[swap] = self[root];\r\n          self[root] = temp;\r\n          root = swap;\r\n          lChild = getLeftChildI(root);\r\n        }\r\n      }\r\n      if(start == 0)\r\n        break;\r\n      else\r\n        start = start - 1;\r\n    }\r\n    while(end > 0){\r\n      temp = self[end];\r\n      self[end] = self[0];\r\n      self[0] = temp;\r\n      end = end - 1;\r\n      root = 0;\r\n      lChild = getLeftChildI(0);\r\n      while(lChild <= end){\r\n        rChild = lChild + 1;\r\n        swap = root;\r\n        if(self[swap] < self[lChild])\r\n          swap = lChild;\r\n        if((rChild <= end) && (self[swap]<self[rChild]))\r\n          swap = rChild;\r\n        if(swap == root)\r\n          lChild = end + 1;\r\n        else {\r\n          temp = self[swap];\r\n          self[swap] = self[root];\r\n          self[root] = temp;\r\n          root = swap;\r\n          lChild = getLeftChildI(root);\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\npragma solidity ^0.4.13;\r\n\r\n/**\r\n * @title Basic Math Library\r\n * @author Majoolr.io\r\n *\r\n * version 1.1.0\r\n * Copyright (c) 2017 Majoolr, LLC\r\n * The MIT License (MIT)\r\n * https://github.com/Majoolr/ethereum-libraries/blob/master/LICENSE\r\n *\r\n * The Basic Math Library is inspired by the Safe Math library written by\r\n * OpenZeppelin at https://github.com/OpenZeppelin/zeppelin-solidity/ .\r\n * Majoolr works on open source projects in the Ethereum community with the\r\n * purpose of testing, documenting, and deploying reusable code onto the\r\n * blockchain to improve security and usability of smart contracts. Majoolr\r\n * also strives to educate non-profits, schools, and other community members\r\n * about the application of blockchain technology.\r\n * For further information: majoolr.io, openzeppelin.org\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\r\n * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\r\n * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\r\n * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\r\n * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\n\r\nlibrary BasicMathLib {\r\n  event Err(string typeErr);\r\n\r\n  /// @dev Multiplies two numbers and checks for overflow before returning.\r\n  /// Does not throw but rather logs an Err event if there is overflow.\r\n  /// @param a First number\r\n  /// @param b Second number\r\n  /// @return err False normally, or true if there is overflow\r\n  /// @return res The product of a and b, or 0 if there is overflow\r\n  function times(uint256 a, uint256 b) constant returns (bool err,uint256 res) {\r\n    assembly{\r\n      res := mul(a,b)\r\n      switch or(iszero(b), eq(div(res,b), a))\r\n      case 0 {\r\n        err := 1\r\n        res := 0\r\n      }\r\n    }\r\n    if (err)\r\n      Err(\"times func overflow\");\r\n  }\r\n\r\n  /// @dev Divides two numbers but checks for 0 in the divisor first.\r\n  /// Does not throw but rather logs an Err event if 0 is in the divisor.\r\n  /// @param a First number\r\n  /// @param b Second number\r\n  /// @return err False normally, or true if `b` is 0\r\n  /// @return res The quotient of a and b, or 0 if `b` is 0\r\n  function dividedBy(uint256 a, uint256 b) constant returns (bool err,uint256 res) {\r\n    assembly{\r\n      switch iszero(b)\r\n      case 0 {\r\n        res := div(a,b)\r\n        mstore(add(mload(0x40),0x20),res)\r\n        return(mload(0x40),0x40)\r\n      }\r\n    }\r\n    Err(\"tried to divide by zero\");\r\n    return (true, 0);\r\n  }\r\n\r\n  /// @dev Adds two numbers and checks for overflow before returning.\r\n  /// Does not throw but rather logs an Err event if there is overflow.\r\n  /// @param a First number\r\n  /// @param b Second number\r\n  /// @return err False normally, or true if there is overflow\r\n  /// @return res The sum of a and b, or 0 if there is overflow\r\n  function plus(uint256 a, uint256 b) constant returns (bool err, uint256 res) {\r\n    assembly{\r\n      res := add(a,b)\r\n      switch and(eq(sub(res,b), a), or(gt(res,b),eq(res,b)))\r\n      case 0 {\r\n        err := 1\r\n        res := 0\r\n      }\r\n    }\r\n    if (err)\r\n      Err(\"plus func overflow\");\r\n  }\r\n\r\n  /// @dev Subtracts two numbers and checks for underflow before returning.\r\n  /// Does not throw but rather logs an Err event if there is underflow.\r\n  /// @param a First number\r\n  /// @param b Second number\r\n  /// @return err False normally, or true if there is underflow\r\n  /// @return res The difference between a and b, or 0 if there is underflow\r\n  function minus(uint256 a, uint256 b) constant returns (bool err,uint256 res) {\r\n    assembly{\r\n      res := sub(a,b)\r\n      switch eq(and(eq(add(res,b), a), or(lt(res,a), eq(res,a))), 1)\r\n      case 0 {\r\n        err := 1\r\n        res := 0\r\n      }\r\n    }\r\n    if (err)\r\n      Err(\"minus func underflow\");\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"self\",\"type\":\"WalletMainLib.WalletData storage\"}],\"name\":\"getMaxOwners\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"self\",\"type\":\"WalletMainLib.WalletData storage\"},{\"name\":\"_id\",\"type\":\"bytes32\"},{\"name\":\"_number\",\"type\":\"uint256\"}],\"name\":\"getTransactionConfirmCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"self\",\"type\":\"WalletMainLib.WalletData storage\"},{\"name\":\"_date\",\"type\":\"uint256\"}],\"name\":\"getTransactions\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32[10]\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"self\",\"type\":\"WalletMainLib.WalletData storage\"}],\"name\":\"getRequiredAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"self\",\"type\":\"WalletMainLib.WalletData storage\"},{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getOwnerIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"self\",\"type\":\"WalletMainLib.WalletData storage\"}],\"name\":\"getRequiredMajor\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"self\",\"type\":\"WalletMainLib.WalletData storage\"}],\"name\":\"getOwnerCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"self\",\"type\":\"WalletMainLib.WalletData storage\"},{\"name\":\"_id\",\"type\":\"bytes32\"},{\"name\":\"_number\",\"type\":\"uint256\"}],\"name\":\"getTransactionSuccess\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"self\",\"type\":\"WalletMainLib.WalletData storage\"},{\"name\":\"_id\",\"type\":\"bytes32\"},{\"name\":\"_number\",\"type\":\"uint256\"}],\"name\":\"getTransactionConfirms\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[50]\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"self\",\"type\":\"WalletMainLib.WalletData storage\"},{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getMajorThreshold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"self\",\"type\":\"WalletMainLib.WalletData storage\"},{\"name\":\"_id\",\"type\":\"bytes32\"}],\"name\":\"getTransactionLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"self\",\"type\":\"WalletMainLib.WalletData storage\"}],\"name\":\"getOwners\",\"outputs\":[{\"name\":\"\",\"type\":\"address[51]\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"self\",\"type\":\"WalletMainLib.WalletData storage\"},{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getCurrentSpend\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[2]\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"self\",\"type\":\"WalletMainLib.WalletData storage\"}],\"name\":\"getRequiredMinor\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"}]","ContractName":"WalletGetterLib","CompilerVersion":"v0.4.13+commit.fb4cb1a","OptimizationUsed":"1","Runs":"0","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://61ef7e00a04c4125e4e7c96a8427fba00979b90ecc6cb5216abacf8c4959f0dc"}]}