{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.15;\r\n\r\ncontract ElcoinICO {\r\n\r\n  // Constants\r\n  // =========\r\n\r\n  uint256 public constant tokensPerEth = 300; // ELC per ETH\r\n  uint256 public constant tokenLimit = 60 * 1e6 * 1e18;\r\n  uint256 public constant tokensForSale = tokenLimit * 50 / 100;\r\n  uint256 public presaleSold = 0;\r\n  uint256 public startTime = 1511038800; // 19 November 2017 18:00 UTC\r\n  uint256 public endTime = 1517778000; // 05 February 2018 18:00 UTC\r\n\r\n  // Events\r\n  // ======\r\n\r\n  event RunIco();\r\n  event PauseIco();\r\n  event FinishIco(address team, address foundation, address advisors, address bounty);\r\n\r\n\r\n  // State variables\r\n  // ===============\r\n\r\n  ELC public elc;\r\n\r\n  address public team;\r\n  modifier teamOnly { require(msg.sender == team); _; }\r\n\r\n  enum IcoState { Presale, Running, Paused, Finished }\r\n  IcoState public icoState = IcoState.Presale;\r\n\r\n\r\n  // Constructor\r\n  // ===========\r\n\r\n  function ElcoinICO(address _team) public {\r\n    team = _team;\r\n    elc = new ELC(this, tokenLimit);\r\n  }\r\n\r\n\r\n  // Public functions\r\n  // ================\r\n\r\n  // Here you can buy some tokens (just don't forget to provide enough gas).\r\n  function() external payable {\r\n    buyFor(msg.sender);\r\n  }\r\n\r\n\r\n  function buyFor(address _investor) public payable {\r\n    require(icoState == IcoState.Running);\r\n    require(msg.value > 0);\r\n    buy(_investor, msg.value);\r\n  }\r\n\r\n\r\n  function getPresaleTotal(uint256 _value) public constant returns (uint256) {\r\n     if(_value < 10 ether) {\r\n      return _value * tokensPerEth;\r\n    }\r\n\r\n    if(_value >= 10 ether && _value < 100 ether) {\r\n      return calcPresaleDiscount(_value, 3);\r\n    }\r\n\r\n    if(_value >= 100 ether && _value < 1000 ether) {\r\n      return calcPresaleDiscount(_value, 5);\r\n    }\r\n\r\n    if(_value >= 1000 ether) {\r\n      return calcPresaleDiscount(_value, 10);\r\n    }\r\n  }\r\n\r\nfunction getTimeBonus(uint time) public constant returns (uint) {\r\n        if (time < startTime + 1 weeks) return 200;\r\n        if (time < startTime + 2 weeks) return 150;\r\n        if (time < startTime + 3 weeks) return 100;\r\n        if (time < startTime + 4 weeks) return 50;\r\n        return 0;\r\n    }\r\n\r\n  function getTotal(uint256 _value) public constant returns (uint256) {\r\n    uint256 _elcValue = _value * tokensPerEth;\r\n    uint256 _bonus = getBonus(_elcValue, elc.totalSupply() - presaleSold);\r\n\r\n    return _elcValue + _bonus;\r\n  }\r\n\r\n\r\n  function getBonus(uint256 _elcValue, uint256 _sold) public constant returns (uint256) {\r\n    uint256[8] memory _bonusPattern = [ uint256(150), 130, 110, 90, 70, 50, 30, 10 ];\r\n    uint256 _step = (tokensForSale - presaleSold) / 10;\r\n    uint256 _bonus = 0;\r\n\r\n    for(uint8 i = 0; i < _bonusPattern.length; ++i) {\r\n      uint256 _min = _step * i;\r\n      uint256 _max = _step * (i + 1);\r\n      if(_sold >= _min && _sold < _max) {\r\n        uint256 _bonusPart = min(_elcValue, _max - _sold);\r\n        _bonus += _bonusPart * _bonusPattern[i] / 1000;\r\n        _elcValue -= _bonusPart;\r\n        _sold  += _bonusPart;\r\n      }\r\n    }\r\n\r\n    return _bonus;\r\n  }\r\n\r\n\r\n  // Priveleged functions\r\n  // ====================\r\n\r\n  function mintForEarlyInvestors(address[] _investors, uint256[] _values) external teamOnly {\r\n    require(_investors.length == _values.length);\r\n    for (uint256 i = 0; i < _investors.length; ++i) {\r\n      mintPresaleTokens(_investors[i], _values[i]);\r\n    }\r\n  }\r\n\r\n\r\n  function mintFor(address _investor, uint256 _elcValue) external teamOnly {\r\n    require(icoState != IcoState.Finished);\r\n    require(elc.totalSupply() + _elcValue <= tokensForSale);\r\n\r\n    elc.mint(_investor, _elcValue);\r\n  }\r\n\r\n\r\n  function withdrawEther(uint256 _value) external teamOnly {\r\n    team.transfer(_value);\r\n  }\r\n\r\n\r\n  // Save tokens from contract\r\n  function withdrawToken(address _tokenContract, uint256 _value) external teamOnly {\r\n    ERC20 _token = ERC20(_tokenContract);\r\n    _token.transfer(team, _value);\r\n  }\r\n\r\n\r\n  function withdrawTokenFromElc(address _tokenContract, uint256 _value) external teamOnly {\r\n    elc.withdrawToken(_tokenContract, team, _value);\r\n  }\r\n\r\n\r\n  // ICO state management: start / pause / finish\r\n  // --------------------------------------------\r\n\r\n  function startIco() external teamOnly {\r\n    require(icoState == IcoState.Presale || icoState == IcoState.Paused);\r\n    icoState = IcoState.Running;\r\n    RunIco();\r\n  }\r\n\r\n\r\n  function pauseIco() external teamOnly {\r\n    require(icoState == IcoState.Running);\r\n    icoState = IcoState.Paused;\r\n    PauseIco();\r\n  }\r\n\r\n\r\n  function finishIco(address _team, address _foundation, address _advisors, address _bounty) external teamOnly {\r\n    require(icoState == IcoState.Running || icoState == IcoState.Paused);\r\n\r\n    icoState = IcoState.Finished;\r\n    uint256 _teamFund = elc.totalSupply() * 2 / 2;\r\n\r\n    uint256 _den = 10000;\r\n    elc.mint(_team, _teamFund * 4000 / _den);\r\n    elc.mint(_foundation, _teamFund * 4000 / _den);\r\n    elc.mint(_advisors, _teamFund * 1000 / _den);\r\n    elc.mint(_bounty, _teamFund  * 1000 / _den);\r\n\r\n    elc.defrost();\r\n\r\n    FinishIco(_team, _foundation, _advisors, _bounty);\r\n  }\r\n\r\n\r\n  // Private functions\r\n  // =================\r\n\r\n  function mintPresaleTokens(address _investor, uint256 _value) internal {\r\n    require(icoState == IcoState.Presale);\r\n    require(_value > 0);\r\n\r\n    uint256 _elcValue = getPresaleTotal(_value);\r\n\r\n    uint256 timeBonusAmount = _elcValue * getTimeBonus(now) / 1000;\r\n\r\n     _elcValue += timeBonusAmount;\r\n\r\n    require(elc.totalSupply() + _elcValue <= tokensForSale);\r\n\r\n    elc.mint(_investor, _elcValue);\r\n    presaleSold += _elcValue;\r\n  }\r\n\r\n\r\n  function calcPresaleDiscount(uint256 _value, uint256 _percent) internal constant returns (uint256) {\r\n    return _value * tokensPerEth * 100 / (100 - _percent);\r\n  }\r\n\r\n  function min(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    return a < b ? a : b;\r\n  }\r\n\r\n  function buy(address _investor, uint256 _value) internal {\r\n    uint256 _total = getTotal(_value);\r\n\r\n    require(elc.totalSupply() + _total <= tokensForSale);\r\n\r\n    elc.mint(_investor, _total);\r\n  }\r\n}\r\n\r\nlibrary Math {\r\n  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n    return a < b ? a : b;\r\n  }\r\n\r\n  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    return a < b ? a : b;\r\n  }\r\n}\r\n\r\n\r\n// @title SafeMath * @dev Math operations with safety checks that throw on error\r\n \r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n// @title ERC20Basic  * @dev Simpler version of ERC20 interface  * @dev see https://github.com/ethereum/EIPs/issues/179\r\n \r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public constant returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n//  @title ERC20 interface  * @dev see https://github.com/ethereum/EIPs/issues/20\r\n \r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// @title Basic token  * @dev Basic version of StandardToken, with no allowances.\r\n \r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  // @dev transfer token for a specified address   * @param _to The address to transfer to.   * @param _value The amount to be transferred.\r\n  \r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  // @dev Gets the balance of the specified address.  * @param _owner The address to query the the balance of.\r\n  // @return An uint256 representing the amount owned by the passed address.\r\n  \r\n  function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n//\r\n// @title Standard ERC20 token\r\n//\r\n// @dev Implementation of the basic standard token.\r\n// @dev https://github.com/ethereum/EIPs/issues/20\r\n// @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n \r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) allowed;\r\n\r\n\r\n   //\r\n   // @dev Transfer tokens from one address to another\r\n   // @param _from address The address which you want to send tokens from\r\n  // @param _to address The address which you want to transfer to\r\n   //* @param _value uint256 the amount of tokens to be transferred\r\n   \r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n\r\n    uint256 _allowance = allowed[_from][msg.sender];\r\n\r\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n    // require (_value <= _allowance);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  //\r\n   // @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   //\r\n   // Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   // and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   // race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   // https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   // @param _spender The address which will spend the funds.\r\n   // @param _value The amount of tokens to be spent.\r\n   \r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  // @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   // @param _owner address The address which owns the funds.\r\n   // @param _spender address The address which will spend the funds.\r\n   // @return A uint256 specifying the amount of tokens still available for the spender.\r\n   \r\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n // approve should be called when allowed[_spender] == 0. To increment\r\n   // allowed value is better to use this function to avoid 2 calls (and wait until\r\n   // the first transaction is mined)\r\n   // From MonolithDAO Token.sol\r\n   \r\n   \r\n   \r\n  \r\n  function increaseApproval (address _spender, uint _addedValue)\r\n    public returns (bool success) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  function decreaseApproval (address _spender, uint _subtractedValue)\r\n    public returns (bool success) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\ncontract ELC is StandardToken {\r\n\r\n  // Constants\r\n  // =========\r\n\r\n  string public constant name = \"Elcoin Token\";\r\n  string public constant symbol = \"ELC\";\r\n  uint8 public constant decimals = 18;\r\n  uint256 public tokenLimit;\r\n\r\n\r\n  // State variables\r\n  // ===============\r\n\r\n  address public ico;\r\n  modifier icoOnly { require(msg.sender == ico); _; }\r\n\r\n  // Tokens are frozen until ICO ends.\r\n  bool public tokensAreFrozen = true;\r\n\r\n\r\n  // Constructor\r\n  // ===========\r\n\r\n  function ELC(address _ico, uint256 _tokenLimit) public {\r\n    ico = _ico;\r\n    tokenLimit = _tokenLimit;\r\n  }\r\n\r\n\r\n  // Priveleged functions\r\n  // ====================\r\n\r\n  // Mint few tokens and transfer them to some address.\r\n  function mint(address _holder, uint256 _value) external icoOnly {\r\n    require(_holder != address(0));\r\n    require(_value != 0);\r\n    require(totalSupply + _value <= tokenLimit);\r\n\r\n    balances[_holder] += _value;\r\n    totalSupply += _value;\r\n    Transfer(0x0, _holder, _value);\r\n  }\r\n\r\n\r\n  // Allow token transfer.\r\n  function defrost() external icoOnly {\r\n    tokensAreFrozen = false;\r\n  }\r\n\r\n\r\n  // Save tokens from contract\r\n  function withdrawToken(address _tokenContract, address where, uint256 _value) external icoOnly {\r\n    ERC20 _token = ERC20(_tokenContract);\r\n    _token.transfer(where, _value);\r\n  }\r\n\r\n\r\n  // ERC20 functions\r\n  // =========================\r\n\r\n  function transfer(address _to, uint256 _value)  public returns (bool) {\r\n    require(!tokensAreFrozen);\r\n    return super.transfer(_to, _value);\r\n  }\r\n\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(!tokensAreFrozen);\r\n    return super.transferFrom(_from, _to, _value);\r\n  }\r\n\r\n\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    require(!tokensAreFrozen);\r\n    return super.approve(_spender, _value);\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"getPresaleTotal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensForSale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenContract\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"withdrawTokenFromElc\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"getTotal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"elc\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"withdrawEther\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoState\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presaleSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_investor\",\"type\":\"address\"}],\"name\":\"buyFor\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"team\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startIco\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_elcValue\",\"type\":\"uint256\"},{\"name\":\"_sold\",\"type\":\"uint256\"}],\"name\":\"getBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenContract\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_investors\",\"type\":\"address[]\"},{\"name\":\"_values\",\"type\":\"uint256[]\"}],\"name\":\"mintForEarlyInvestors\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"getTimeBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pauseIco\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensPerEth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_investor\",\"type\":\"address\"},{\"name\":\"_elcValue\",\"type\":\"uint256\"}],\"name\":\"mintFor\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_team\",\"type\":\"address\"},{\"name\":\"_foundation\",\"type\":\"address\"},{\"name\":\"_advisors\",\"type\":\"address\"},{\"name\":\"_bounty\",\"type\":\"address\"}],\"name\":\"finishIco\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_team\",\"type\":\"address\"}],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"RunIco\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"PauseIco\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"team\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"foundation\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"advisors\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"bounty\",\"type\":\"address\"}],\"name\":\"FinishIco\",\"type\":\"event\"}]","ContractName":"ElcoinICO","CompilerVersion":"v0.4.15+commit.bbb8e64f","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000072116915A101374A1974d6e44437d15cBaA97166","Library":"","SwarmSource":"bzzr://40c1168dd5da17519e797c2fa007cabeb43e6c5e86559d920c40d2a11717b6d4"}]}