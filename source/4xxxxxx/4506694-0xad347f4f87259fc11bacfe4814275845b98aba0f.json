{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.15;\r\n\r\nlibrary SafeMath {\r\n    \r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n \r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n \r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n \r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Ownable {\r\n    \r\n  address public owner;\r\n \r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  function transferOwnership(address newOwner) onlyOwner {\r\n    require(newOwner != address(0));      \r\n    owner = newOwner;\r\n  }\r\n \r\n}\r\n\r\ncontract SingleTokenCoin {\r\n  function totalSupply() constant returns(uint256);\r\n  function finishMinting();\r\n  function moveUnsold(address _addr);\r\n  function setFreeze(address _addr);\r\n  function removeFreeze(address _addr);\r\n  function transfer(address _to, uint256 _value);\r\n  function newTransferManualTokensnewTransfer(address _from, address _to, uint256 _value) returns (bool);\r\n  function transferTokens(address _to, uint256 _amount, uint256 freezeTime, uint256 _type);\r\n  function transferTokens(address _from, address _to, uint256 _amount, uint256 freezeTime, uint256 _type);\r\n  function withdrowTokens(address _address, uint256 _tokens);\r\n  function setTotalSupply(address _addr);\r\n  function tokenTransferOwnership(address _address);\r\n  function getOwnerToken() constant returns(address);\r\n}\r\n\r\ncontract WrapperOraclize {\r\n  function update(string datasource, string arg) payable;\r\n  function getWrapperData() constant returns(bytes32);\r\n  function() external payable;\r\n}\r\n\r\ncontract Crowdsale is Ownable {\r\n\r\n  //string public ETHUSD;\r\n\r\n  using SafeMath for uint256;\r\n\r\n  //SingleTokenCoin public token = SingleTokenCoin(0xf579F37FE3129c4C897d2a9561f9D8DbEa3A0943);\r\n    SingleTokenCoin public token;\r\n\r\n  //Address from testnet\r\n  //WrapperOraclize private wrapper = WrapperOraclize(0x676b33cdcc3fa7b994ca6d16cd3c9dfe3c64ec52);\r\n\r\n  //Address from mainnet\r\n  WrapperOraclize private wrapper = WrapperOraclize(0xfC484c66daE464CC6055d7a4782Ec8761dc9842F);\r\n\r\n  uint256 private angel_sale_start;\r\n  uint256 private angel_sale_finish;\r\n\r\n  uint256 private pre_sale_start;\r\n  uint256 private pre_sale_finish;\r\n\r\n  uint256 private public_sale_start;\r\n  uint256 private public_sale_finish;\r\n\r\n  bool private isAngel;\r\n  bool private isPreSale;\r\n  bool private isPublic;\r\n\r\n  uint256 private angel_rate;\r\n  uint256 private public_rate;\r\n\r\n  uint256 private decimals;\r\n\r\n  uint256 private totalETH;\r\n\r\n  address public coreTeamAddr;\r\n  address public itDevAddr;\r\n  address public futDevAddr;\r\n  address public commFoundAddr;\r\n  address public socWarefareAddr;\r\n  address public marketingAddr;\r\n\r\n  address public unsoldAddr;\r\n  address public collectAddr;  \r\n  \r\n  bool public mintingFinished = false;\r\n\r\n  //Storage for Founding Buyers Token\r\n  mapping(address => uint256) private founding_buyers_token;  // 0\r\n\r\n  //Storage for Angel Buyers ETH\r\n  mapping(address => uint256) private angel_buyers_eth;       // 2\r\n\r\n  //Storage for Angel Buyers Token\r\n  mapping(address => uint256) private angel_buyers_token;     // 2\r\n\r\n  //Storage for Angel Buyers ETH\r\n  mapping(address => uint256) private pre_sale_buyers_eth;    // 1\r\n\r\n  //Storage for Angel Buyers Token\r\n  mapping(address => uint256) private pre_sale_buyers_token;  // 1\r\n\r\n  //Storage for Angel Buyers Token\r\n  mapping(address => uint256) private pe_buyers_token;        // 3\r\n\r\n  //Storage for Angel Buyers ETH\r\n  mapping(address => uint256) private public_buyers_eth;      // 4\r\n\r\n  //Storage for Angel Buyers Token\r\n  mapping(address => uint256) private public_buyers_token;    // 4\r\n\r\n  address[] private founding_investors; // 0\r\n  address[] private pre_sale_investors; // 1\r\n  address[] private angel_investors;    // 2\r\n  address[] private pe_investors;       // 3\r\n  address[] private public_investors;   // 4\r\n\r\n  uint256 private soldTokens;\r\n  \r\n  uint256 private maxcup;\r\n\r\n  uint256 private totalAmount; \r\n  uint256 private foundingAmount; \r\n  uint256 private angelAmount;  \r\n  uint256 private preSaleAmount;\r\n  uint256 private PEInvestorAmount;\r\n  uint256 private publicSaleAmount;\r\n\r\n  uint256 private coreTeamAmount;\r\n  uint256 private coreTeamAuto;\r\n  uint256 private coreTeamManual;\r\n  uint256 private itDevAmount;  \r\n  uint256 private futDevAmount; \r\n  uint256 private commFoundAmount;\r\n  uint256 private socWarefareAmount;\r\n  uint256 private marketingAmount;\r\n\r\n  uint256 private angel_sale_sold;\r\n  uint256 private pre_sale_sold;\r\n  uint256 private public_sale_sold;\r\n  uint256 private founding_sold;\r\n  uint256 private peInvestors_sold;\r\n\r\n  uint256 private angel_sale_totalETH;\r\n  uint256 private pre_sale_totalETH;\r\n  uint256 private public_sale_totalETH;\r\n\r\n  uint256 private firstPhaseAmount;\r\n  uint256 private secondPhaseAmount; \r\n  uint256 private thirdPhaseAmount;  \r\n  uint256 private fourPhaseAmount;\r\n\r\n  uint256 private firstPhaseDiscount;\r\n  uint256 private secondPhaseDiscount;\r\n  uint256 private thirdPhaseDiscount;\r\n  uint256 private fourPhaseDiscount;\r\n\r\n  uint256 private currentPhase;\r\n\r\n  bool private moveTokens;\r\n\r\n  bool withdrowTokensComplete = false;  \r\n\r\n  function Crowdsale(address token_addr) {\r\n\r\n    token = SingleTokenCoin(token_addr);\r\n\r\n    //set calculate rate from USD\r\n    public_rate = 3546099290780141; // ~ 1 USD\r\n\r\n    angel_rate = 20;\r\n\r\n    decimals = 35460992907801; // 18 decimals\r\n\r\n    //now\r\n    angel_sale_start = now - 3 days;\r\n    //06.12.2017 08:30 AM\r\n    angel_sale_finish = 1510488000;\r\n\r\n    //07.12.2017 08:30 AM\r\n    pre_sale_start = 1510491600;\r\n    //06 .01.2018 08:30 AM\r\n    pre_sale_finish = 1512561600;\r\n\r\n    //07.01.2018 08:30 AM\r\n    //public_sale_start = 1512565200;\r\n    public_sale_start = 1512565200;\r\n    //10.01.2018 08:30 AM\r\n    public_sale_finish = public_sale_start + 14 days;\r\n\r\n    moveTokens = false;\r\n    \r\n    isAngel = true;\r\n    isPreSale = false;\r\n    isPublic = false;\r\n\r\n    currentPhase = 1;\r\n\r\n    founding_sold = 0;\r\n    peInvestors_sold = 0;\r\n    angel_sale_sold = 0;\r\n    pre_sale_sold = 0;\r\n    public_sale_sold = 0;\r\n\r\n    angel_sale_totalETH = 0;\r\n    pre_sale_totalETH = 0;\r\n    public_sale_totalETH = 0;\r\n\r\n    firstPhaseAmount = 18750000E18;     // 18 750 000;  // with 18 decimals\r\n    secondPhaseAmount = 37500000E18;    // 37 500 000;  // with 18 decimals\r\n    thirdPhaseAmount = 56250000E18;     // 56 250 000;  // with 18 decimals-\r\n    fourPhaseAmount = 75000000E18;      // 75 000 000;  // with 18 decimals\r\n\r\n    firstPhaseDiscount = 30;\r\n    secondPhaseDiscount = 40;\r\n    thirdPhaseDiscount = 50;\r\n    fourPhaseDiscount = 60;\r\n\r\n    totalAmount = 500000000E18;         // 500 000 000;  // with 18 decimals\r\n    foundingAmount = 10000000E18;       //  10 000 000;  // with 18 decimals\r\n    angelAmount = 25000000E18;          //  25 000 000;  // with 18 decimals\r\n    preSaleAmount = 75000000E18;        //  75 000 000;  // with 18 decimals\r\n    PEInvestorAmount = 50000000E18;     //  50 000 000;  // with 18 decimals\r\n    publicSaleAmount = 100000000E18;    // 100 000 000;  // with 18 decimals\r\n\r\n    coreTeamAmount = 100000000E18;      // 100 000 000;  // with 18 decimals\r\n    coreTeamAuto = 60000000E18;         //  60 000 000;  // with 18 decimals\r\n    coreTeamManual = 40000000E18;       //  40 000 000;  // with 18 decimals\r\n    itDevAmount = 50000000E18;          //  50 000 000;  // with 18 decimals\r\n    futDevAmount = 50000000E18;         //  50 000 000;  // with 18 decimals\r\n    commFoundAmount = 15000000E18;      //  15 000 000;  // with 18 decimals\r\n    socWarefareAmount = 10000000E18;    //  10 000 000;  // with 18 decimals\r\n    marketingAmount = 15000000E18;      //  15 000 000;  // with 18 decimals\r\n\r\n    mintingFinished = false;\r\n\r\n    coreTeamAddr = 0xB0A3A845cfA5e2baCD3925Af85c59dE4D32D874f;\r\n    itDevAddr = 0x61528ffdCd4BC26c81c88423018780b399Fbb8e7;\r\n    futDevAddr = 0xA1f9C3F137496e6b8bA4445d15b0986CaA22FDe3;\r\n    commFoundAddr = 0xC30a0E7FFad754A9AD2A1C1cFeB10e05f7C7aB6A;\r\n    socWarefareAddr = 0xd5d692C89C83313579d02C94F4faE600fe30D1d9;\r\n    marketingAddr = 0x5490510072b929273F65dba4B72c96cd45A99b5A;\r\n\r\n    unsoldAddr = 0x18051b5b0F1FDb4D44eACF2FA49f19bB80105Fc1;\r\n    collectAddr = 0xB338121B8e5dA0900a6E8580321293f3CF52E58D;\r\n\r\n  }\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  function setFreeze(address _addr) public onlyOwner {\r\n    token.setFreeze(_addr);\r\n  }\r\n\r\n  function removeFreeze(address _addr) public onlyOwner {\r\n    token.removeFreeze(_addr);\r\n  }\r\n\r\n  function moveUnsold() public onlyOwner {\r\n    angelAmount = 0;\r\n    preSaleAmount = 0;\r\n    publicSaleAmount = 0;\r\n\r\n    angel_sale_sold = 0;\r\n    pre_sale_sold = 0;\r\n    public_sale_sold = 0;\r\n    token.moveUnsold(unsoldAddr);\r\n  }\r\n\r\n  function newTransferManualTokensnewTransfer(address _from, address _to, uint256 _value) onlyOwner returns (bool) {\r\n    return token.newTransferManualTokensnewTransfer(_from, _to, _value);\r\n  }\r\n\r\n  function() external payable {\r\n    mint();    \r\n  }\r\n\r\n  function bytesToUInt(bytes32 v) private constant returns (uint ret) {\r\n    if (v == 0x0) {\r\n        revert();\r\n    }\r\n\r\n    uint digit;\r\n\r\n    for (uint i = 0; i < 32; i++) {\r\n      digit = uint((uint(v) / (2 ** (8 * (31 - i)))) & 0xff);\r\n      if (digit == 0 || digit == 46) {\r\n          break;\r\n      }\r\n      else if (digit < 48 || digit > 57) {\r\n          revert();\r\n      }\r\n      ret *= 10;\r\n      ret += (digit - 48);\r\n    }\r\n    return ret;\r\n  }\r\n\r\n  function calculateRate() public constant returns(uint256) {\r\n    bytes32 result = getWrapperData();\r\n    uint256 usd = bytesToUInt(result);\r\n\r\n    uint256 price = 1 ether / usd; //price for 1 BMC //4545454545454546;\r\n\r\n    return price;\r\n  }\r\n\r\n  function calculatePrice(uint256 _usd, uint256 _pre_sale_sold) private constant returns(uint256) {\r\n    \r\n    if (currentPhase == 1 && pre_sale_sold + _pre_sale_sold <= firstPhaseAmount) {\r\n      return _usd.mul(firstPhaseDiscount).div(100);\r\n    }\r\n\r\n    if (currentPhase == 2 && pre_sale_sold + _pre_sale_sold > firstPhaseAmount && pre_sale_sold + _pre_sale_sold <= secondPhaseAmount) {\r\n      return _usd.mul(secondPhaseDiscount).div(100);\r\n    }\r\n\r\n    if (currentPhase == 3 && pre_sale_sold + _pre_sale_sold > secondPhaseAmount && pre_sale_sold + _pre_sale_sold <= thirdPhaseAmount) {\r\n      return _usd.mul(thirdPhaseDiscount).div(100);\r\n    }\r\n\r\n    if (currentPhase == 4 && pre_sale_sold + _pre_sale_sold > thirdPhaseAmount && pre_sale_sold + _pre_sale_sold <= fourPhaseAmount) {\r\n      return _usd.mul(fourPhaseDiscount).div(100);\r\n    }\r\n\r\n    return _usd;\r\n  }\r\n\r\n  function sendToAddress(address _address, uint256 _tokens, uint256 _type) canMint onlyOwner public {\r\n\r\n   if (_type != 1 && _type != 2 && _type != 3) {\r\n     revert();\r\n   }\r\n\r\n    //Founding\r\n    if (_type == 1) {\r\n      if (founding_sold + _tokens > foundingAmount) {\r\n        revert();\r\n      }\r\n\r\n      if (founding_buyers_token[_address] == 0) {\r\n        founding_investors.push(_address);\r\n      }\r\n\r\n      require(foundingAmount >= _tokens);\r\n\r\n      founding_buyers_token[_address] = founding_buyers_token[_address].add(_tokens);\r\n    \r\n      founding_sold = founding_sold + _tokens;\r\n\r\n      token.transferTokens(_address, _tokens, public_sale_start, 1);\r\n\r\n      foundingAmount = foundingAmount - _tokens;\r\n    }\r\n    // PE Investors\r\n    if (_type == 2) {\r\n      if (peInvestors_sold + _tokens > PEInvestorAmount) {\r\n        revert();\r\n      }\r\n\r\n      if (pe_buyers_token[_address] == 0) {\r\n        pe_investors.push(_address);\r\n      }\r\n\r\n      require(PEInvestorAmount >= _tokens);\r\n\r\n      pe_buyers_token[_address] = pe_buyers_token[_address].add(_tokens);\r\n    \r\n      peInvestors_sold = peInvestors_sold + _tokens;\r\n      \r\n      token.transferTokens(_address, _tokens, public_sale_start, 2);\r\n\r\n      PEInvestorAmount = PEInvestorAmount - _tokens;\r\n    }\r\n    //Core Team\r\n    if (_type == 3) {\r\n      require(coreTeamAmount >= _tokens);\r\n      token.transferTokens(coreTeamAddr, _address, _tokens, public_sale_start, 3);\r\n      coreTeamAmount = coreTeamAmount - _tokens;\r\n    } else {\r\n      soldTokens = soldTokens + _tokens;\r\n    }\r\n  }\r\n\r\n  modifier isICOFinished() {\r\n    if (now > public_sale_finish) {\r\n      finishMinting();\r\n    }\r\n    _;\r\n  }\r\n\r\n  modifier isAnyStage() {\r\n    if (now > angel_sale_finish && now > pre_sale_finish && now > public_sale_finish) {\r\n      revert();\r\n    }\r\n\r\n    if (now < angel_sale_start && now < pre_sale_start && now < public_sale_start) {\r\n      revert();\r\n    }\r\n\r\n    _;\r\n  }\r\n\r\n  function setTransferOwnership(address _address) public onlyOwner {\r\n\r\n    transferOwnership(_address);\r\n  }\r\n\r\n  //only for demonstrate Test Version\r\n  function setAngelDate(uint256 _time) public onlyOwner {\r\n    angel_sale_start = _time;\r\n  }\r\n\r\n  //only for demonstrate Test Version\r\n  function setPreSaleDate(uint256 _time) public onlyOwner {\r\n    pre_sale_start = _time;\r\n  }\r\n\r\n  //only for demonstrate Test Version\r\n  function setPublicSaleDate(uint256 _time) public onlyOwner {\r\n    public_sale_start = _time;\r\n  }\r\n\r\n  function getStartDates() public constant returns(uint256 _angel_sale_start, uint256 _pre_sale_start, uint256 _public_sale_start) {\r\n    return (angel_sale_start, pre_sale_start, public_sale_start);\r\n  }\r\n\r\n  //only for demonstrate Test Version\r\n  function setAngelFinishDate(uint256 _time) public onlyOwner {\r\n    angel_sale_finish = _time;\r\n  }\r\n\r\n  //only for demonstrate Test Version\r\n  function setPreSaleFinishDate(uint256 _time) public onlyOwner {\r\n    pre_sale_finish = _time;\r\n  }\r\n\r\n  //only for demonstrate Test Version\r\n  function setPublicSaleFinishDate(uint256 _time) public onlyOwner {\r\n    public_sale_finish = _time;\r\n  }\r\n\r\n  function getFinishDates() public constant returns(uint256 _angel_sale_finish, uint256 _pre_sale_finish, uint256 _public_sale_finish) {\r\n    return (angel_sale_finish, pre_sale_finish, public_sale_finish);\r\n  }\r\n\r\n  function mint() public canMint isICOFinished isAnyStage payable {\r\n\r\n    if (now > angel_sale_finish && now < pre_sale_finish) {\r\n      isPreSale = true;\r\n      isAngel = false;\r\n    }\r\n\r\n    if (now > pre_sale_finish && now < public_sale_finish) {\r\n      isPreSale = false;\r\n      isAngel = false;\r\n      isPublic = true;\r\n    }\r\n\r\n    if (now > angel_sale_finish && now < pre_sale_start) {\r\n      revert();\r\n    }\r\n\r\n    if (now > pre_sale_finish && now < public_sale_start) {\r\n      revert();\r\n    }\r\n\r\n    if (isAngel && angelAmount == angel_sale_sold) {\r\n      revert();\r\n    }\r\n\r\n    if (isPreSale && preSaleAmount == pre_sale_sold) {\r\n      revert();\r\n    }\r\n\r\n    if (isPublic && publicSaleAmount == public_sale_sold) {\r\n      revert();\r\n    }\r\n\r\n    public_rate = calculateRate();\r\n\r\n    uint256 eth = msg.value * 1E18;\r\n\r\n    uint256 discountPrice = 0;\r\n\r\n    if (isPreSale) {\r\n      discountPrice = calculatePrice(public_rate, 0);\r\n      pre_sale_totalETH = pre_sale_totalETH + eth;\r\n    }\r\n\r\n    if (isAngel) {\r\n      discountPrice = public_rate.mul(angel_rate).div(100);\r\n      angel_sale_totalETH = angel_sale_totalETH + eth;\r\n    }\r\n\r\n    uint currentRate = 0;\r\n\r\n    if (isPublic) {\r\n      currentRate = public_rate;\r\n      public_sale_totalETH = public_sale_totalETH + eth;\r\n    } else {\r\n      currentRate = discountPrice;\r\n    }\r\n\r\n    if (eth < currentRate) {\r\n      revert();\r\n    }\r\n\r\n    uint256 tokens = eth.div(currentRate);\r\n\r\n    if (isPublic && !moveTokens) {\r\n      if (angelAmount > angel_sale_sold) {\r\n        uint256 angelRemainder = angelAmount - angel_sale_sold;\r\n        publicSaleAmount = publicSaleAmount + angelRemainder;\r\n      }\r\n      if (preSaleAmount > pre_sale_sold) {\r\n        uint256 preSaleRemainder = preSaleAmount - pre_sale_sold;\r\n        publicSaleAmount = publicSaleAmount + preSaleRemainder;\r\n      }\r\n      moveTokens = true;\r\n    }\r\n\r\n    if (isPreSale) {\r\n      uint256 availableTokensPhase = 0;\r\n      uint256 ethToRefundPhase = 0;\r\n\r\n      uint256 remETH = 0;\r\n\r\n      uint256 totalTokensPhase = 0;\r\n\r\n      if (currentPhase == 1 && pre_sale_sold + tokens > firstPhaseAmount) {\r\n        (availableTokensPhase, ethToRefundPhase) = calculateMinorRefund(firstPhaseAmount, pre_sale_sold, currentRate, tokens);\r\n        totalTokensPhase = availableTokensPhase;\r\n\r\n        remETH = ethToRefundPhase;\r\n\r\n        currentPhase = 2;\r\n\r\n        currentRate = calculatePrice(pre_sale_sold, totalTokensPhase);\r\n        tokens = remETH.div(currentRate);\r\n      }\r\n\r\n      if (currentPhase == 2 && pre_sale_sold + tokens + totalTokensPhase > secondPhaseAmount) {\r\n        (availableTokensPhase, ethToRefundPhase) = calculateMinorRefund(secondPhaseAmount, pre_sale_sold, currentRate, tokens);\r\n        totalTokensPhase = totalTokensPhase + availableTokensPhase;\r\n        \r\n        remETH = ethToRefundPhase;\r\n\r\n        currentPhase = 3;\r\n\r\n        currentRate = calculatePrice(pre_sale_sold, totalTokensPhase);\r\n        tokens = remETH.div(currentRate);\r\n      }\r\n\r\n      if (currentPhase == 3 && pre_sale_sold + tokens + totalTokensPhase > thirdPhaseAmount) {\r\n        (availableTokensPhase, ethToRefundPhase) = calculateMinorRefund(thirdPhaseAmount, pre_sale_sold, currentRate, tokens);\r\n        totalTokensPhase = totalTokensPhase + availableTokensPhase;\r\n        \r\n        remETH = ethToRefundPhase;\r\n\r\n        currentPhase = 4;\r\n\r\n        currentRate = calculatePrice(pre_sale_sold, totalTokensPhase);\r\n        tokens = remETH.div(currentRate);\r\n      }\r\n\r\n      if (currentPhase == 4 && pre_sale_sold + tokens + totalTokensPhase > fourPhaseAmount) {\r\n        (availableTokensPhase, ethToRefundPhase) = calculateMinorRefund(fourPhaseAmount, pre_sale_sold, currentRate, tokens);\r\n        totalTokensPhase = totalTokensPhase + availableTokensPhase;\r\n        \r\n        remETH = ethToRefundPhase;\r\n\r\n        currentPhase = 0;\r\n\r\n        currentRate = calculatePrice(pre_sale_sold, totalTokensPhase);\r\n        tokens = remETH.div(currentRate);\r\n      }\r\n\r\n      tokens = tokens + totalTokensPhase;\r\n    }\r\n\r\n    if (isPreSale) {\r\n      if (pre_sale_sold + tokens > preSaleAmount) {\r\n        (availableTokensPhase, ethToRefundPhase) = calculateMinorRefund(preSaleAmount, pre_sale_sold, currentRate, tokens);\r\n        tokens = availableTokensPhase;\r\n        eth = eth - ethToRefundPhase;\r\n        refund(ethToRefundPhase);\r\n      }\r\n    }\r\n\r\n    if (isAngel) {\r\n      if (angel_sale_sold + tokens > angelAmount) {\r\n        (availableTokensPhase, ethToRefundPhase) = calculateMinorRefund(angelAmount, angel_sale_sold, currentRate, tokens);\r\n        tokens = availableTokensPhase;\r\n        eth = eth - ethToRefundPhase;\r\n        refund(ethToRefundPhase);\r\n        \r\n      }    \r\n    }\r\n\r\n    if (isPublic) {\r\n      if (public_sale_sold + tokens > publicSaleAmount) {\r\n        (availableTokensPhase, ethToRefundPhase) = calculateMinorRefund(publicSaleAmount, public_sale_sold, currentRate, tokens);\r\n        tokens = availableTokensPhase;\r\n        eth = eth - ethToRefundPhase;\r\n        refund(ethToRefundPhase);\r\n        \r\n      }\r\n    }\r\n\r\n    saveInfoAboutInvestors(msg.sender, eth, tokens);\r\n\r\n    if (isAngel) {\r\n      token.transferTokens(msg.sender, tokens, public_sale_start, 0);\r\n    } else {\r\n      // 0 - not freeze time; 4 - not freeze type currently;\r\n      token.transferTokens(msg.sender, tokens, 0, 4);\r\n    }\r\n\r\n    soldTokens = soldTokens + tokens;\r\n    \r\n    totalETH = totalETH + eth;\r\n  }\r\n\r\n  function calculateMinorRefund(uint256 _maxcup, uint256 _sold, uint256 _rate, uint256 _tokens) private returns(uint256 _availableTokens, uint256 _ethToRefund) {\r\n    uint256 availableTokens = _maxcup - _sold;\r\n    uint256 tokensForRefund = _tokens - availableTokens;\r\n    uint256 refundETH = tokensForRefund * _rate;\r\n\r\n    return (availableTokens, refundETH);\r\n  }\r\n\r\n  function withdrowETH() public onlyOwner {\r\n    require(now > public_sale_finish);\r\n\r\n    collectAddr.transfer(this.balance);\r\n  }\r\n\r\n  function withdrowTokens() public onlyOwner {    \r\n    if (!withdrowTokensComplete) {\r\n      \r\n      token.withdrowTokens(coreTeamAddr, coreTeamAmount);\r\n      token.withdrowTokens(itDevAddr, itDevAmount);\r\n      token.withdrowTokens(futDevAddr, futDevAmount);\r\n      token.withdrowTokens(commFoundAddr, commFoundAmount);\r\n      token.withdrowTokens(socWarefareAddr, socWarefareAmount);\r\n      token.withdrowTokens(marketingAddr, marketingAmount);\r\n\r\n      withdrowTokensComplete = true;\r\n    }\r\n  }\r\n\r\n  function saveInfoAboutInvestors(address _address, uint256 _amount, uint256 _tokens) private {\r\n    if (isAngel) {\r\n      if (angel_buyers_token[_address] == 0) {\r\n        angel_investors.push(_address);\r\n      }\r\n\r\n      angel_buyers_eth[_address] = angel_buyers_eth[_address].add(_amount);\r\n\r\n      angel_buyers_token[_address] = angel_buyers_token[_address].add(_tokens);\r\n\r\n      angel_sale_sold = angel_sale_sold + _tokens;\r\n    }\r\n\r\n    if (isPreSale) {\r\n      if (pre_sale_buyers_token[_address] == 0) {\r\n        pre_sale_investors.push(_address);\r\n      }\r\n\r\n      pre_sale_buyers_eth[_address] = pre_sale_buyers_eth[_address].add(_amount);\r\n\r\n      pre_sale_buyers_token[_address] = pre_sale_buyers_token[_address].add(_tokens);\r\n    \r\n      pre_sale_sold = pre_sale_sold + _tokens;\r\n    }\r\n\r\n    if (isPublic) {\r\n      if (public_buyers_token[_address] == 0) {\r\n        public_investors.push(_address);\r\n      }\r\n\r\n      public_buyers_eth[_address] = public_buyers_eth[_address].add(_amount);\r\n\r\n      public_buyers_token[_address] = public_buyers_token[_address].add(_tokens);\r\n    \r\n      public_sale_sold = public_sale_sold + _tokens;\r\n    }\r\n  }\r\n\r\n  // Change for private when deploy to main net\r\n  function finishMinting() public onlyOwner {\r\n\r\n    if (mintingFinished) {\r\n      revert();\r\n    }\r\n\r\n    token.finishMinting();\r\n\r\n    mintingFinished = true;\r\n  }\r\n\r\n  function getFinishStatus() public constant returns(bool) {\r\n    return mintingFinished;\r\n  }\r\n\r\n  function refund(uint256 _amount) private {\r\n    msg.sender.transfer(_amount);\r\n  }\r\n\r\n  function getBalanceContract() public constant returns(uint256) {\r\n    return this.balance;\r\n  }\r\n\r\n  function getSoldToken() public constant returns(uint256 _soldTokens, uint256 _angel_sale_sold, uint256 _pre_sale_sold, uint256 _public_sale_sold, uint256 _founding_sold, uint256 _peInvestors_sold) {\r\n    return (soldTokens, angel_sale_sold, pre_sale_sold, public_sale_sold, founding_sold, peInvestors_sold);\r\n  }\r\n\r\n  function getInvestorsTokens(address _address, uint256 _type) public constant returns(uint256) {\r\n    if (_type == 0) {\r\n      return founding_buyers_token[_address];\r\n    }\r\n    if (_type == 1) {\r\n      return pre_sale_buyers_token[_address];\r\n    }\r\n    if (_type == 2) {\r\n      return angel_buyers_token[_address];\r\n    }\r\n    if (_type == 3) {\r\n      return pe_buyers_token[_address];\r\n    }\r\n    if (_type == 4) {\r\n      return public_buyers_token[_address];\r\n    }\r\n  }\r\n\r\n  function getInvestorsCount(uint256 _type) public constant returns(uint256) {\r\n    if (_type == 0) {\r\n      return founding_investors.length;\r\n    }\r\n    if (_type == 1) {\r\n      return pre_sale_investors.length;\r\n    }\r\n    if (_type == 2) {\r\n      return angel_investors.length;\r\n    }\r\n    if (_type == 3) {\r\n      return pe_investors.length;\r\n    }\r\n    if (_type == 4) {\r\n      return public_investors.length;\r\n    }\r\n  }\r\n\r\n  function getInvestorByIndex(uint256 _index, uint256 _type) public constant returns(address) {\r\n    if (_type == 0) {\r\n      return founding_investors[_index];\r\n    }\r\n    if (_type == 1) {\r\n      return pre_sale_investors[_index];\r\n    }\r\n    if (_type == 2) {\r\n      return angel_investors[_index];\r\n    }\r\n    if (_type == 3) {\r\n      return pe_investors[_index];\r\n    }\r\n    if (_type == 4) {\r\n      return public_investors[_index];\r\n    }\r\n  }\r\n\r\n  function getLeftToken() public constant returns(uint256 _all_left, uint256 _founding_left, uint256 _angel_left, uint256 _preSaleAmount_left, uint256 _PEInvestorAmount_left, uint256 _publicSaleAmount_left) {\r\n    uint256 all_left = token.totalSupply() != 0 ? token.totalSupply() - soldTokens : token.totalSupply();\r\n    uint256 founding_left = foundingAmount != 0 ? foundingAmount - founding_sold : foundingAmount;\r\n    uint256 angel_left = angelAmount != 0 ? angelAmount - angel_sale_sold : angelAmount;\r\n    uint256 preSaleAmount_left = preSaleAmount != 0 ? preSaleAmount - pre_sale_sold : preSaleAmount;\r\n    uint256 PEInvestorAmount_left = PEInvestorAmount != 0 ? PEInvestorAmount - peInvestors_sold : PEInvestorAmount;\r\n    uint256 publicSaleAmount_left = publicSaleAmount != 0 ? publicSaleAmount - public_sale_sold : publicSaleAmount;\r\n\r\n    return (all_left, founding_left, angel_left, preSaleAmount_left, PEInvestorAmount_left, publicSaleAmount_left);\r\n  }\r\n\r\n  function getTotalToken() public constant returns(uint256 _totalToken, uint256 _foundingAmount, uint256 _angelAmount, uint256 _preSaleAmount, uint256 _PEInvestorAmount, uint256 _publicSaleAmount) {\r\n    return (token.totalSupply(), foundingAmount, angelAmount, preSaleAmount, PEInvestorAmount, publicSaleAmount);\r\n  }\r\n\r\n  function getTotalETH() public constant returns(uint256 _totalETH, uint256 _angel_sale_totalETH, uint256 _pre_sale_totalETH, uint256 _public_sale_totalETH) {\r\n    return (totalETH, angel_sale_totalETH, pre_sale_totalETH, public_sale_totalETH);\r\n  }\r\n\r\n  function getCurrentPrice() public constant returns(uint256) {  \r\n    uint256 price = calculateRate();\r\n    return calculatePrice(price, 0);\r\n  }\r\n\r\n  function getContractAddress() public constant returns(address) {\r\n    return this;\r\n  }\r\n\r\n  function getOwner() public constant returns(address) {\r\n    return owner;\r\n  }\r\n\r\n  function sendOracleData() public payable {\r\n    if (msg.value != 0) {\r\n        wrapper.transfer(msg.value);\r\n    }\r\n    \r\n    wrapper.update(\"URL\", \"json(https://api.kraken.com/0/public/Ticker?pair=ETHUSD).result.XETHZUSD.c.0\");\r\n  }\r\n\r\n  function getWrapperData() public constant returns(bytes32) {\r\n    return wrapper.getWrapperData();\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_tokens\",\"type\":\"uint256\"},{\"name\":\"_type\",\"type\":\"uint256\"}],\"name\":\"sendToAddress\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"setPublicSaleDate\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"mint\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setFreeze\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getContractAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"collectAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalToken\",\"outputs\":[{\"name\":\"_totalToken\",\"type\":\"uint256\"},{\"name\":\"_foundingAmount\",\"type\":\"uint256\"},{\"name\":\"_angelAmount\",\"type\":\"uint256\"},{\"name\":\"_preSaleAmount\",\"type\":\"uint256\"},{\"name\":\"_PEInvestorAmount\",\"type\":\"uint256\"},{\"name\":\"_publicSaleAmount\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getWrapperData\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"marketingAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"socWarefareAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLeftToken\",\"outputs\":[{\"name\":\"_all_left\",\"type\":\"uint256\"},{\"name\":\"_founding_left\",\"type\":\"uint256\"},{\"name\":\"_angel_left\",\"type\":\"uint256\"},{\"name\":\"_preSaleAmount_left\",\"type\":\"uint256\"},{\"name\":\"_PEInvestorAmount_left\",\"type\":\"uint256\"},{\"name\":\"_publicSaleAmount_left\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"setPreSaleFinishDate\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_type\",\"type\":\"uint256\"}],\"name\":\"getInvestorsTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"futDevAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalETH\",\"outputs\":[{\"name\":\"_totalETH\",\"type\":\"uint256\"},{\"name\":\"_angel_sale_totalETH\",\"type\":\"uint256\"},{\"name\":\"_pre_sale_totalETH\",\"type\":\"uint256\"},{\"name\":\"_public_sale_totalETH\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"setAngelFinishDate\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBalanceContract\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"setPublicSaleFinishDate\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrowTokens\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_type\",\"type\":\"uint256\"}],\"name\":\"getInvestorsCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"setPreSaleDate\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"setAngelDate\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getFinishDates\",\"outputs\":[{\"name\":\"_angel_sale_finish\",\"type\":\"uint256\"},{\"name\":\"_pre_sale_finish\",\"type\":\"uint256\"},{\"name\":\"_public_sale_finish\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getFinishStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"itDevAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"newTransferManualTokensnewTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"calculateRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"coreTeamAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"sendOracleData\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"removeFreeze\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getStartDates\",\"outputs\":[{\"name\":\"_angel_sale_start\",\"type\":\"uint256\"},{\"name\":\"_pre_sale_start\",\"type\":\"uint256\"},{\"name\":\"_public_sale_start\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"unsoldAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setTransferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"moveUnsold\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"},{\"name\":\"_type\",\"type\":\"uint256\"}],\"name\":\"getInvestorByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrowETH\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSoldToken\",\"outputs\":[{\"name\":\"_soldTokens\",\"type\":\"uint256\"},{\"name\":\"_angel_sale_sold\",\"type\":\"uint256\"},{\"name\":\"_pre_sale_sold\",\"type\":\"uint256\"},{\"name\":\"_public_sale_sold\",\"type\":\"uint256\"},{\"name\":\"_founding_sold\",\"type\":\"uint256\"},{\"name\":\"_peInvestors_sold\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"commFoundAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"token_addr\",\"type\":\"address\"}],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"}]","ContractName":"Crowdsale","CompilerVersion":"v0.4.15+commit.bbb8e64f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000004e3dedad69e87b41305ca4ae1e65da50dc64cc08","Library":"","SwarmSource":"bzzr://1f46fa064c4943709309fb4b60904c36eee1ee035796f0f039f85fa05ed38832"}]}