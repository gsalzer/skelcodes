{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.15;\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    //Variables\r\n    address public owner;\r\n\r\n    address public newOwner;\r\n\r\n    //    Modifiers\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    function Ownable() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param _newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        require(_newOwner != address(0));\r\n        newOwner = _newOwner;\r\n    }\r\n\r\n    function acceptOwnership() public {\r\n        if (msg.sender == newOwner) {\r\n            owner = newOwner;\r\n            newOwner = address(0);\r\n        }\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract TokenRecipient {\r\n    function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public;\r\n}\r\n\r\n\r\ncontract ERC20 is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    /* Public variables of the token */\r\n    uint256 public initialSupply;\r\n\r\n    uint256 public creationBlock;\r\n\r\n    uint8 public decimals;\r\n\r\n    string public name;\r\n\r\n    string public symbol;\r\n\r\n    string public standard;\r\n\r\n    bool public locked;\r\n\r\n    bool public transferFrozen;\r\n\r\n    mapping (address => uint256) public balances;\r\n\r\n    mapping (address => mapping (address => uint256)) public allowed;\r\n\r\n    /* This generates a public event on the blockchain that will notify clients */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n\r\n    modifier onlyPayloadSize(uint _numwords) {\r\n        assert(msg.data.length == _numwords * 32 + 4);\r\n        _;\r\n    }\r\n\r\n    /* Initializes contract with initial supply tokens to the creator of the contract */\r\n    function ERC20(\r\n        uint256 _initialSupply,\r\n        string _tokenName,\r\n        uint8 _decimalUnits,\r\n        string _tokenSymbol,\r\n        bool _transferAllSupplyToOwner,\r\n        bool _locked\r\n    )\r\n        public\r\n    {\r\n        standard = \"ERC20 0.1\";\r\n\r\n        initialSupply = _initialSupply;\r\n\r\n        if (_transferAllSupplyToOwner) {\r\n            setBalance(msg.sender, initialSupply);\r\n        } else {\r\n            setBalance(this, initialSupply);\r\n        }\r\n\r\n        name = _tokenName;\r\n        // Set the name for display purposes\r\n        symbol = _tokenSymbol;\r\n        // Set the symbol for display purposes\r\n        decimals = _decimalUnits;\r\n        // Amount of decimals for display purposes\r\n        locked = _locked;\r\n        creationBlock = block.number;\r\n    }\r\n\r\n    /* public methods */\r\n    function transfer(address _to, uint256 _value) public onlyPayloadSize(2) returns (bool) {\r\n        require(locked == false);\r\n        require(transferFrozen == false);\r\n    \r\n        bool status = transferInternal(msg.sender, _to, _value);\r\n\r\n        require(status == true);\r\n\r\n        return true;\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool success) {\r\n        if (locked) {\r\n            return false;\r\n        }\r\n\r\n        allowed[msg.sender][_spender] = _value;\r\n\r\n        Approval(msg.sender, _spender, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) {\r\n        if (locked) {\r\n            return false;\r\n        }\r\n\r\n        TokenRecipient spender = TokenRecipient(_spender);\r\n\r\n        if (approve(_spender, _value)) {\r\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\r\n            return true;\r\n        }\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public onlyPayloadSize(3) returns (bool success) {\r\n        if (locked) {\r\n            return false;\r\n        }\r\n\r\n        if (transferFrozen) {\r\n            return false;\r\n        }\r\n\r\n        if (allowed[_from][msg.sender] < _value) {\r\n            return false;\r\n        }\r\n\r\n        bool _success = transferInternal(_from, _to, _value);\r\n\r\n        if (_success) {\r\n            allowed[_from][msg.sender] -= _value;\r\n        }\r\n\r\n        return _success;\r\n    }\r\n\r\n    /*constant functions*/\r\n    function totalSupply() public constant returns (uint256) {\r\n        return initialSupply;\r\n    }\r\n\r\n    function balanceOf(address _address) public constant returns (uint256 balance) {\r\n        return balances[_address];\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    /* internal functions*/\r\n    function setBalance(address _holder, uint256 _amount) internal {\r\n        balances[_holder] = _amount;\r\n    }\r\n\r\n    function transferInternal(address _from, address _to, uint256 _value) internal returns (bool success) {\r\n        require(locked == false);\r\n        require(transferFrozen == false);\r\n\r\n        if (_value == 0) {\r\n            Transfer(_from, _to, _value);\r\n\r\n            return true;\r\n        }\r\n\r\n        if (balances[_from] < _value) {\r\n            return false;\r\n        }\r\n\r\n        setBalance(_from, balances[_from].sub(_value));\r\n        setBalance(_to, balances[_to].add(_value));\r\n\r\n        Transfer(_from, _to, _value);\r\n\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract ERC223 {\r\n    event Transfer(address indexed from, address indexed to, uint value, bytes indexed data);\r\n    function transfer(address to, uint value, bytes data) public returns (bool ok);\r\n    function transfer(address to, uint value, bytes data, string customFallback) public returns (bool ok);\r\n}\r\n\r\n\r\ncontract ContractReceiver {\r\n    function tokenFallback(address _from, uint _value, bytes _data) public;\r\n}\r\n\r\n/*\r\n    Based on https://github.com/Dexaran/ERC223-token-standard/blob/Recommended/ERC223_Token.sol\r\n*/\r\n\r\ncontract ERC223Token is ERC223, ERC20 {\r\n    function ERC223Token(\r\n        uint256 _initialSupply,\r\n        string tokenName,\r\n        uint8 decimalUnits,\r\n        string tokenSymbol,\r\n        bool transferAllSupplyToOwner,\r\n        bool _locked\r\n    )\r\n        public\r\n        ERC20(_initialSupply, tokenName, decimalUnits, tokenSymbol, transferAllSupplyToOwner, _locked)\r\n    {\r\n        \r\n    }\r\n\r\n    function transfer(address to, uint256 value, bytes data) public returns (bool success) {\r\n        require(locked == false);\r\n        \r\n        bool status = transferInternal(msg.sender, to, value, data);\r\n\r\n        return status;\r\n    }\r\n\r\n    function transfer(address to, uint value, bytes data, string customFallback) public returns (bool success) {\r\n        require(locked == false);\r\n\r\n        bool status = transferInternal(msg.sender, to, value, data, true, customFallback);\r\n\r\n        return status;\r\n    }\r\n\r\n// rollback changes to transferInternal for transferFrom\r\n    function transferFrom(address _from, address _to, uint256 _value) public onlyPayloadSize(3) returns (bool success) {\r\n        if (locked) {\r\n            return false;\r\n        }\r\n\r\n        if (transferFrozen) {\r\n            return false;\r\n        }\r\n\r\n        if (allowed[_from][msg.sender] < _value) {\r\n            return false;\r\n        }\r\n\r\n        bool _success = super.transferInternal(_from, _to, _value);\r\n\r\n        if (_success) {\r\n            allowed[_from][msg.sender] -= _value;\r\n        }\r\n\r\n        return _success;\r\n    }\r\n\r\n    function transferInternal(address from, address to, uint256 value, bytes data) internal returns (bool success) {\r\n        return transferInternal(from, to, value, data, false, \"\");\r\n    }\r\n\r\n    function transferInternal(\r\n        address from,\r\n        address to,\r\n        uint256 value,\r\n        bytes data,\r\n        bool useCustomFallback,\r\n        string customFallback\r\n    )\r\n        internal returns (bool success)\r\n    {\r\n        bool status = super.transferInternal(from, to, value);\r\n\r\n        if (status) {\r\n            if (isContract(to)) {\r\n                ContractReceiver receiver = ContractReceiver(to);\r\n\r\n                if (useCustomFallback) {\r\n                    // solhint-disable-next-line avoid-call-value\r\n                    require(receiver.call.value(0)(bytes4(keccak256(customFallback)), from, value, data) == true);\r\n                } else {\r\n                    receiver.tokenFallback(from, value, data);\r\n                }\r\n            }\r\n\r\n            Transfer(from, to, value, data);\r\n        }\r\n\r\n        return status;\r\n    }\r\n\r\n    function transferInternal(address from, address to, uint256 value) internal returns (bool success) {\r\n        require(locked == false);\r\n\r\n        bytes memory data;\r\n\r\n        return transferInternal(from, to, value, data, false, \"\");\r\n    }\r\n\r\n    //assemble the given address bytecode. If bytecode exists then the _addr is a contract.\r\n    function isContract(address _addr) private returns (bool) {\r\n        uint length;\r\n        assembly {\r\n        //retrieve the size of the code on target address, this needs assembly\r\n            length := extcodesize(_addr)\r\n        }\r\n        return (length > 0);\r\n    }\r\n}\r\n\r\n/*\r\nThis contract manages the minters and the modifier to allow mint to happen only if called by minters\r\nThis contract contains basic minting functionality though\r\n*/\r\ncontract MintingERC20 is ERC223Token {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    uint256 public maxSupply;\r\n\r\n    mapping (address => bool) public minters;\r\n\r\n    modifier onlyMinters () {\r\n        require(true == minters[msg.sender]);\r\n        _;\r\n    }\r\n\r\n    function MintingERC20(\r\n        uint256 _initialSupply,\r\n        uint256 _maxSupply,\r\n        string _tokenName,\r\n        uint8 _decimals,\r\n        string _symbol,\r\n        bool _transferAllSupplyToOwner,\r\n        bool _locked\r\n    )\r\n        ERC223Token(_initialSupply, _tokenName, _decimals, _symbol, _transferAllSupplyToOwner, _locked)\r\n    {\r\n        minters[msg.sender] = true;\r\n        maxSupply = _maxSupply;\r\n    }\r\n\r\n    function addMinter(address _newMinter) public onlyOwner {\r\n        minters[_newMinter] = true;\r\n    }\r\n\r\n    function removeMinter(address _minter) public onlyOwner {\r\n        minters[_minter] = false;\r\n    }\r\n\r\n    function mint(address _addr, uint256 _amount) public onlyMinters returns (uint256) {\r\n        return internalMint(_addr, _amount);\r\n    }\r\n\r\n    function internalMint(address _addr, uint256 _amount) internal returns (uint256) {\r\n        if (_amount == uint256(0)) {\r\n            return uint256(0);\r\n        }\r\n\r\n        if (totalSupply().add(_amount) > maxSupply) {\r\n            return uint256(0);\r\n        }\r\n\r\n        initialSupply = initialSupply.add(_amount);\r\n        balances[_addr] = balances[_addr].add(_amount);\r\n        Transfer(0, _addr, _amount);\r\n\r\n        return _amount;\r\n    }\r\n}\r\n\r\n\r\ncontract AbstractClaimableToken {\r\n    function claimedTokens(address _holder, uint256 _tokens) public;\r\n}\r\n\r\n\r\ncontract GenesisToken is MintingERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    /* variables */\r\n    uint256 public emitTokensSince;\r\n\r\n    TokenEmission[] public emissions;\r\n\r\n    mapping(address => uint256) public lastClaims;\r\n\r\n    /* structs */\r\n    struct TokenEmission {\r\n        uint256 blockDuration;      // duration of block in secs\r\n        uint256 blockTokens;        // tokens per block\r\n        uint256 periodEndsAt;     // duration in secs\r\n        bool removed;\r\n    }\r\n\r\n    /* events */\r\n    event ClaimedTokens(address _holder, uint256 _since, uint256 _till, uint256 _tokens);\r\n\r\n    /* constructor */\r\n    function GenesisToken(\r\n        uint256 _totalSupply,\r\n        uint8 _precision,\r\n        string _name,\r\n        string _symbol,\r\n        bool _transferAllSupplyToOwner,\r\n        bool _locked,\r\n        uint256 _emitTokensSince,\r\n        uint256 _maxSupply\r\n    )\r\n        public\r\n        MintingERC20(_totalSupply, _maxSupply, _name, _precision, _symbol, _transferAllSupplyToOwner, _locked)\r\n    {\r\n        standard = \"GenesisToken 0.1\";\r\n        emitTokensSince = _emitTokensSince;\r\n    }\r\n\r\n    function addTokenEmission(uint256 _blockDuration, uint256 _blockTokens, uint256 _periodEndsAt) public onlyOwner {\r\n        emissions.push(TokenEmission(_blockDuration, _blockTokens, _periodEndsAt, false));\r\n    }\r\n\r\n    function removeTokenEmission(uint256 _i) public onlyOwner {\r\n        require(_i < emissions.length);\r\n\r\n        emissions[_i].removed = true;\r\n    }\r\n\r\n    function updateTokenEmission(uint256 _i, uint256 _blockDuration, uint256 _blockTokens, uint256 _periodEndsAt)\r\n        public\r\n        onlyOwner\r\n    {\r\n        require(_i < emissions.length);\r\n\r\n        emissions[_i].blockDuration = _blockDuration;\r\n        emissions[_i].blockTokens = _blockTokens;\r\n        emissions[_i].periodEndsAt = _periodEndsAt;\r\n    }\r\n\r\n    function claim() public returns (uint256) {\r\n        require(false == locked);\r\n\r\n        uint256 currentBalance = balanceOf(msg.sender);\r\n        uint256 currentTotalSupply = totalSupply();\r\n\r\n        return claimInternal(block.timestamp, msg.sender, currentBalance, currentTotalSupply);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        return claimableTransferFrom(block.timestamp, _from, _to, _value);\r\n    }\r\n\r\n    function calculateEmissionTokens(\r\n        uint256 _lastClaimedAt,\r\n        uint256 _currentTime,\r\n        uint256 _currentBalance,\r\n        uint256 _totalSupply\r\n    )\r\n        public constant returns (uint256 tokens)\r\n    {\r\n        uint256 totalTokens = 0;\r\n\r\n        uint256 newCurrentTime = _lastClaimedAt;\r\n        uint256 remainingSeconds = _currentTime.sub(_lastClaimedAt);\r\n\r\n        uint256 collectedTokensPerPeriod;\r\n\r\n        for (uint256 i = 0; i < emissions.length; i++) {\r\n            TokenEmission storage emission = emissions[i];\r\n\r\n            if (emission.removed) {\r\n                continue;\r\n            }\r\n\r\n            if (newCurrentTime < emission.periodEndsAt) {\r\n                if (newCurrentTime.add(remainingSeconds) > emission.periodEndsAt) {\r\n                    uint256 diff = emission.periodEndsAt.sub(newCurrentTime);\r\n\r\n                    collectedTokensPerPeriod = getPeriodMinedTokens(\r\n                    diff, _currentBalance,\r\n                    emission.blockDuration, emission.blockTokens,\r\n                    _totalSupply);\r\n\r\n                    totalTokens += collectedTokensPerPeriod;\r\n\r\n                    newCurrentTime += diff;\r\n                    remainingSeconds -= diff;\r\n                } else {\r\n                    collectedTokensPerPeriod = getPeriodMinedTokens(\r\n                        remainingSeconds, _currentBalance,\r\n                        emission.blockDuration, emission.blockTokens,\r\n                        _totalSupply\r\n                    );\r\n\r\n                    totalTokens += collectedTokensPerPeriod;\r\n\r\n                    newCurrentTime += remainingSeconds;\r\n                    remainingSeconds = 0;\r\n                }\r\n            }\r\n\r\n            if (remainingSeconds == 0) {\r\n                break;\r\n            }\r\n        }\r\n\r\n        return totalTokens;\r\n    }\r\n\r\n    /* internal methods */\r\n    function getPeriodMinedTokens(\r\n        uint256 _duration, uint256 _balance,\r\n        uint256 _blockDuration, uint256 _blockTokens,\r\n        uint256\r\n    )\r\n    internal returns (uint256)\r\n    {\r\n        uint256 blocks = _duration.div(_blockDuration);\r\n\r\n        return blocks.mul(_blockTokens).mul(_balance).div(maxSupply);\r\n    }\r\n\r\n    function tokensClaimedHook(address _holder, uint256 _since, uint256 _till, uint256 _tokens) internal {\r\n        ClaimedTokens(_holder, _since, _till, _tokens);\r\n    }\r\n\r\n    function claimInternal(\r\n        uint256 _time,\r\n        address _address,\r\n        uint256 _currentBalance,\r\n        uint256 _currentTotalSupply\r\n    )\r\n    internal returns (uint256)\r\n    {\r\n        if (_time < emitTokensSince) {\r\n            lastClaims[_address] = emitTokensSince;\r\n\r\n            return 0;\r\n        }\r\n\r\n        if (_currentBalance == 0) {\r\n            lastClaims[_address] = _time;\r\n\r\n            return 0;\r\n        }\r\n\r\n        uint256 lastClaimAt = lastClaims[_address];\r\n\r\n        if (lastClaimAt == 0) {\r\n            lastClaims[_address] = emitTokensSince;\r\n            lastClaimAt = emitTokensSince;\r\n        }\r\n\r\n        if (lastClaimAt >= _time) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 tokens = calculateEmissionTokens(lastClaimAt, _time, _currentBalance, _currentTotalSupply);\r\n\r\n        if (tokens > 0) {\r\n            tokensClaimedHook(_address, lastClaimAt, _time, tokens);\r\n\r\n            lastClaims[_address] = _time;\r\n        \r\n            return tokens;\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    function claimableTransfer(\r\n        uint256 _time,\r\n        address _from,\r\n        address _to,\r\n        uint256 _value,\r\n        bytes _data,\r\n        bool _useCustomFallback,\r\n        string _customFallback\r\n    )\r\n    internal returns (bool success)\r\n    {\r\n        uint256 senderCurrentBalance = balanceOf(_from);\r\n        uint256 receiverCurrentBalance = balanceOf(_to);\r\n\r\n        uint256 _totalSupply = totalSupply();\r\n\r\n        bool status = super.transferInternal(_from, _to, _value, _data, _useCustomFallback, _customFallback);\r\n\r\n        require(status);\r\n\r\n        claimInternal(_time, _from, senderCurrentBalance, _totalSupply);\r\n        claimInternal(_time, _to, receiverCurrentBalance, _totalSupply);\r\n\r\n        return true;\r\n    }\r\n\r\n    function transferInternal(\r\n        address _from,\r\n        address _to,\r\n        uint256 _value,\r\n        bytes _data,\r\n        bool _useCustomFallback,\r\n        string _customFallback\r\n    )\r\n    internal returns (bool success)\r\n    {\r\n        return claimableTransfer(block.timestamp, _from, _to, _value, _data, _useCustomFallback, _customFallback);\r\n    }\r\n\r\n    function claimableTransferFrom(\r\n        uint256 _time,\r\n        address _from,\r\n        address _to,\r\n        uint256 _value\r\n    )\r\n    internal returns (bool success)\r\n    {\r\n        uint256 senderCurrentBalance = balanceOf(_from);\r\n        uint256 receiverCurrentBalance = balanceOf(_to);\r\n\r\n        uint256 _totalSupply = totalSupply();\r\n\r\n        bool status = super.transferFrom(_from, _to, _value);\r\n\r\n        if (status) {\r\n            claimInternal(_time, _from, senderCurrentBalance, _totalSupply);\r\n            claimInternal(_time, _to, receiverCurrentBalance, _totalSupply);\r\n        }\r\n        \r\n        return status;\r\n    }\r\n\r\n    function internalMint(address _addr, uint256 _amount) internal returns (uint256) {\r\n        claimInternal(now, _addr, balanceOf(_addr), totalSupply());\r\n\r\n        uint256 minted = super.internalMint(_addr, _amount);\r\n\r\n        return minted;\r\n    }\r\n}\r\n\r\ncontract CLC is MintingERC20, AbstractClaimableToken {\r\n    uint256 public createdAt;\r\n    Clout public genesisToken;\r\n\r\n    function CLC(uint256 _maxSupply, uint8 decimals, Clout _genesisToken, bool transferAllSupplyToOwner) public\r\n        MintingERC20(0, _maxSupply, \"CLC\", decimals, \"CLC\", transferAllSupplyToOwner, false)\r\n    {\r\n        createdAt = now;\r\n        standard = \"CLC 0.1\";\r\n        genesisToken = _genesisToken;\r\n    }\r\n\r\n    function claimedTokens(address _holder, uint256 _tokens) public {\r\n        require(msg.sender == address(genesisToken));\r\n\r\n        uint256 minted = internalMint(_holder, _tokens);\r\n\r\n        require(minted == _tokens);\r\n    }\r\n\r\n    function setGenesisToken(Clout _genesisToken) public onlyOwner {\r\n        genesisToken = _genesisToken;\r\n    }\r\n\r\n    function setTransferFrozen(bool _frozen) public onlyOwner {\r\n        transferFrozen = _frozen;\r\n    }\r\n\r\n    function setLocked(bool _locked) public onlyOwner {\r\n        locked = _locked;\r\n    }\r\n}\r\n\r\n\r\ncontract Clout is GenesisToken {\r\n    AbstractClaimableToken public claimableToken;\r\n    uint256 public createdAt;\r\n\r\n    mapping (address => bool) public issuers;\r\n\r\n    function Clout(uint256 emitTokensSince,\r\n        bool init,\r\n        uint256 initialSupply,\r\n        uint8 decimals,\r\n        string tokenName,\r\n        string tokenSymbol,\r\n        bool transferAllSupplyToOwner\r\n    )\r\n        public\r\n        GenesisToken(\r\n            0,\r\n            decimals,\r\n            tokenName,\r\n            tokenSymbol,\r\n            transferAllSupplyToOwner,\r\n            false,\r\n            emitTokensSince,\r\n            initialSupply\r\n        )\r\n        // solhint-disable-next-line function-max-lines\r\n    {\r\n        standard = \"Clout 0.1\";\r\n\r\n        createdAt = now;\r\n\r\n        // emissions\r\n        if (init) {\r\n//            uint256 period0 = createdAt;\r\n//            uint256 period1 = 1514764800; // 2018-01-01T00:00:00Z\r\n//            uint256 period2 = 1577836800; // 2020-01-01T00:00:00Z\r\n//            uint256 period3 = 1672531200; // 2023-01-01T00:00:00Z\r\n//            uint256 period4 = 1798761600; // 2027-01-01T00:00:00Z\r\n//            uint256 period5 = 1956528000; // 2032-01-01T00:00:00Z\r\n//            uint256 period6 = 2145916800; // 2038-01-01T00:00:00Z\r\n//            uint256 period7 = 2366841600; // 2045-01-01T00:00:00Z\r\n//            uint256 period8 = 2619302400; // 2053-01-01T00:00:00Z\r\n//            uint256 period9 = 2903299200; // 2062-01-01T00:00:00Z\r\n\r\n            uint256 blockDuration = 15;\r\n\r\n            // after ico till 2018-01-01\r\n            emissions.push(\r\n                TokenEmission(\r\n                    blockDuration,\r\n                    100000000 * 10 ** 18 / ((1514764800 - emitTokensSince) / blockDuration), // tokens\r\n                    1514764800, // till\r\n                    false // removed\r\n                )\r\n            );\r\n\r\n            // till 2020-01-01. blocks 4,204,800, tokens per block 2.378234399E19\r\n            emissions.push(\r\n                TokenEmission(\r\n                    blockDuration,\r\n                    100000000 * 10 ** 18 / ((1577836800 - 1514764800) / blockDuration), // tokens\r\n                    1577836800, // till\r\n                    false // removed\r\n                )\r\n            );\r\n\r\n            // till 2023-01-01, blocks 6,312,960, tokens per block 1.584042985E19\r\n            emissions.push(\r\n                TokenEmission(\r\n                    blockDuration,\r\n                    100000000 * 10 ** 18 / ((1672531200 - 1577836800) / blockDuration), // tokens\r\n                    1672531200, // till\r\n                    false // removed\r\n                )\r\n            );\r\n\r\n            // till 2027-01-01, blocks 8,415,360, tokens per block 1.188303293E19\r\n            emissions.push(\r\n                TokenEmission(\r\n                    blockDuration,\r\n                    100000000 * 10 ** 18 / ((1798761600 - 1672531200) / blockDuration), // tokens\r\n                    1798761600, // till\r\n                    false // removed\r\n                )\r\n            );\r\n\r\n            // till 2032-01-01, blocks 10,517,760, tokens per block 9.507727881E18\r\n            emissions.push(\r\n                TokenEmission(\r\n                    blockDuration,\r\n                    100000000 * 10 ** 18 / ((1956528000 - 1798761600) / blockDuration), // tokens\r\n                    1956528000, // till\r\n                    false // removed\r\n                )\r\n            );\r\n\r\n            // till 2038-01-01, blocks 12,625,920, tokens per block 7.920214923E18\r\n            emissions.push(\r\n                TokenEmission(\r\n                    blockDuration,\r\n                    100000000 * 10 ** 18 / ((2145916800 - 1956528000) / blockDuration), // tokens\r\n                    2145916800, // till\r\n                    false // removed\r\n                )\r\n            );\r\n\r\n            // till 2045-01-01, blocks 14,728,320, tokens per block 6.789640638E18\r\n            emissions.push(\r\n                TokenEmission(\r\n                    blockDuration,\r\n                    100000000 * 10 ** 18 / ((2366841600 - 2145916800) / blockDuration), // tokens\r\n                    2366841600, // till\r\n                    false // removed\r\n                )\r\n            );\r\n\r\n            // till 2053-01-01, blocks 16,830,720, tokens per block 5.941516465E18\r\n            emissions.push(\r\n                TokenEmission(\r\n                    blockDuration,\r\n                    100000000 * 10 ** 18 / ((2619302400 - 2366841600) / blockDuration), // tokens\r\n                    2619302400, // till\r\n                    false // removed\r\n                )\r\n            );\r\n\r\n            // till 2062-01-01, blocks 18,933,120, tokens per block 5.281749654E18\r\n            emissions.push(\r\n                TokenEmission(\r\n                    blockDuration,\r\n                    100000000 * 10 ** 18 / ((2903299200 - 2619302400) / blockDuration), // tokens\r\n                    2903299200, // till\r\n                    false // removed\r\n                )\r\n            );\r\n        }\r\n    }\r\n\r\n    function setEmissions(uint256[] array) public onlyOwner {\r\n        require(array.length % 4 == 0);\r\n\r\n        delete emissions;\r\n\r\n        for (uint256 i = 0; i < array.length; i += 4) {\r\n            emissions.push(TokenEmission(array[i], array[i + 1], array[i + 2], array[i + 3] == 0 ? false : true));\r\n        }\r\n    }\r\n\r\n    function setClaimableToken(AbstractClaimableToken _token) public onlyOwner {\r\n        claimableToken = _token;\r\n    }\r\n\r\n    function setTransferFrozen(bool _frozen) public onlyOwner {\r\n        transferFrozen = _frozen;\r\n    }\r\n\r\n    function setLocked(bool _locked) public onlyOwner {\r\n        locked = _locked;\r\n    }\r\n\r\n    function tokensClaimedHook(address _holder, uint256 since, uint256 till, uint256 amount) internal {\r\n        if (claimableToken != address(0)) {\r\n            claimableToken.claimedTokens(_holder, amount);\r\n        }\r\n\r\n        ClaimedTokens(_holder, since, till, amount);\r\n    }\r\n}\r\n\r\ncontract Multivest is Ownable {\r\n    /* public variables */\r\n    mapping (address => bool) public allowedMultivests;\r\n\r\n    /* events */\r\n    event MultivestSet(address multivest);\r\n\r\n    event MultivestUnset(address multivest);\r\n\r\n    event Contribution(address _holder, uint256 value, uint256 tokens);\r\n\r\n    modifier onlyAllowedMultivests() {\r\n        require(true == allowedMultivests[msg.sender]);\r\n        _;\r\n    }\r\n\r\n    /* constructor */\r\n    function Multivest(address multivest) {\r\n        allowedMultivests[multivest] = true;\r\n    }\r\n\r\n    /* public methods */\r\n    function setAllowedMultivest(address _address) public onlyOwner {\r\n        allowedMultivests[_address] = true;\r\n    }\r\n\r\n    function unsetAllowedMultivest(address _address) public onlyOwner {\r\n        allowedMultivests[_address] = false;\r\n    }\r\n\r\n    function multivestBuy(\r\n        address _holder,\r\n        uint256 _value\r\n    )\r\n    public\r\n    onlyAllowedMultivests\r\n    {\r\n        bool status = buy(_holder, block.timestamp, _value);\r\n\r\n        require(status == true);\r\n    }\r\n\r\n    function multivestBuy(\r\n        bytes32 _hash,\r\n        uint8 _v,\r\n        bytes32 _r,\r\n        bytes32 _s\r\n    )\r\n        public payable\r\n    {\r\n        require(_hash == keccak256(msg.sender));\r\n        require(allowedMultivests[verify(_hash, _v, _r, _s)] == true);\r\n        bool status = buy(msg.sender, block.timestamp, msg.value);\r\n\r\n        require(status == true);\r\n    }\r\n\r\n    function verify(bytes32 hash, uint8 v, bytes32 r, bytes32 s) public constant returns (address) {\r\n        bytes memory prefix = \"\\x19Ethereum Signed Message:\\n32\";\r\n\r\n        return ecrecover(keccak256(prefix, hash), v, r, s);\r\n    }\r\n\r\n    function buy(address _address, uint256 _time, uint256 _value) internal returns (bool);\r\n}\r\n\r\n\r\n\r\ncontract ICO is Ownable, Multivest {\r\n    uint256 public icoSince;\r\n    uint256 public icoTill;\r\n\r\n    uint8 public decimals;\r\n\r\n    mapping(address => uint256) public holderEthers;\r\n    uint256 public collectedEthers;\r\n    uint256 public soldTokens;\r\n\r\n    uint256 public minEthToContribute;\r\n\r\n    Phase[] public phases;\r\n\r\n    bool public locked;\r\n\r\n    Clout public clout;\r\n    CLC public clc;\r\n\r\n    address[] public etherReceivers;\r\n    address public etherMasterWallet;\r\n\r\n    struct Phase {\r\n        uint256 price;\r\n        uint256 maxAmount;\r\n    }\r\n\r\n    event Contribution(address _holder, uint256 _ethers, uint256 _clouts, uint256 _clcs);\r\n\r\n    function ICO(\r\n        uint256 _icoSince,\r\n        uint256 _icoTill,\r\n        uint8 _decimals,\r\n        uint256 price1,\r\n        uint256 price2,\r\n        uint256 price3,\r\n        Clout _clout,\r\n        CLC _clc,\r\n        uint256 _minEthToContribute,\r\n        bool _locked\r\n    )\r\n        public\r\n        Multivest(msg.sender)\r\n    {\r\n        icoSince = _icoSince;\r\n        icoTill = _icoTill;\r\n        decimals = _decimals;\r\n        locked = _locked;\r\n\r\n        clout = _clout;\r\n        clc = _clc;\r\n\r\n        if (_minEthToContribute > 0) {\r\n            minEthToContribute = _minEthToContribute;\r\n        } else {\r\n            minEthToContribute = 0;\r\n        }\r\n\r\n        phases.push(Phase(price1, 5000000 * (uint256(10) ** decimals)));\r\n        phases.push(Phase(price2, 3000000 * (uint256(10) ** decimals)));\r\n        phases.push(Phase(price3, 2000000 * (uint256(10) ** decimals)));\r\n    }\r\n\r\n    function () payable {\r\n        bool status = buy(msg.sender, block.timestamp, msg.value);\r\n\r\n        require(status == true);\r\n    }\r\n\r\n    function setEtherReceivers(\r\n        address _masterWallet,\r\n        address[] _etherReceivers\r\n    )\r\n        public onlyOwner\r\n    {\r\n        require(_masterWallet != address(0));\r\n        require(_etherReceivers.length == 4);\r\n        require(_etherReceivers[0] != address(0));\r\n        require(_etherReceivers[1] != address(0));\r\n        require(_etherReceivers[2] != address(0));\r\n        require(_etherReceivers[3] != address(0));\r\n\r\n        etherMasterWallet = _masterWallet;\r\n        etherReceivers = _etherReceivers;\r\n    }\r\n\r\n    function setPrice(uint256 price1, uint256 price2, uint256 price3) public onlyOwner {\r\n        phases[0].price = price1;\r\n        phases[1].price = price2;\r\n        phases[2].price = price3;\r\n    }\r\n\r\n    function setPeriod(uint256 since, uint256 till) public onlyOwner {\r\n        icoSince = since;\r\n        icoTill = till;\r\n    }\r\n\r\n    function setClout(Clout _clout) public onlyOwner {\r\n        clout = _clout;\r\n    }\r\n\r\n    function setCLC(CLC _clc) public onlyOwner {\r\n        clc = _clc;\r\n    }\r\n\r\n    function setLocked(bool _locked) public onlyOwner {\r\n        locked = _locked;\r\n    }\r\n\r\n    function getIcoTokensAmount(uint256 _soldTokens, uint256 _value) public constant returns (uint256) {\r\n        uint256 amount;\r\n\r\n        uint256 newSoldTokens = _soldTokens;\r\n        uint256 remainingValue = _value;\r\n    \r\n        for (uint i = 0; i < phases.length; i++) {\r\n            Phase storage phase = phases[i];\r\n\r\n            uint256 tokens = remainingValue * (uint256(10) ** decimals) / phase.price;\r\n\r\n            if (phase.maxAmount > newSoldTokens) {\r\n                if (newSoldTokens + tokens > phase.maxAmount) {\r\n                    uint256 diff = phase.maxAmount - tokens;\r\n\r\n                    amount += diff;\r\n\r\n                    // get optimal amount of ethers for this phase\r\n                    uint256 phaseEthers = diff * phase.price / (uint256(10) ** decimals);\r\n\r\n                    remainingValue -= phaseEthers;\r\n                    newSoldTokens += (phaseEthers * (uint256(10) ** decimals) / phase.price);\r\n                } else {\r\n                    amount += tokens;\r\n\r\n                    newSoldTokens += tokens;\r\n\r\n                    remainingValue = 0;\r\n                }\r\n            }\r\n\r\n            if (remainingValue == 0) {\r\n                break;\r\n            }\r\n        }\r\n\r\n        if (remainingValue > 0) {\r\n            return 0;\r\n        }\r\n\r\n        return amount;\r\n    }\r\n\r\n    // solhint-disable-next-line code-complexity\r\n    function transferEthers() public onlyOwner {\r\n        require(this.balance > 0);\r\n        require(etherReceivers.length == 4);\r\n        require(etherMasterWallet != address(0));\r\n\r\n        // ether balance on smart contract\r\n        if (this.balance > 0) {\r\n            uint256 balance = this.balance;\r\n\r\n            etherReceivers[0].transfer(balance * 15 / 100);\r\n\r\n            etherReceivers[1].transfer(balance * 15 / 100);\r\n\r\n            etherReceivers[2].transfer(balance * 10 / 100);\r\n\r\n            etherReceivers[3].transfer(balance * 10 / 100);\r\n\r\n            // send rest to master wallet\r\n\r\n            etherMasterWallet.transfer(this.balance);\r\n        }\r\n    }\r\n\r\n    function buy(address _address, uint256 _time, uint256 _value) internal returns (bool) {\r\n        if (locked == true) {\r\n            return false;\r\n        }\r\n\r\n        if (_time < icoSince) {\r\n            return false;\r\n        }\r\n\r\n        if (_time > icoTill) {\r\n            return false;\r\n        }\r\n\r\n        if (_value < minEthToContribute || _value == 0) {\r\n            return false;\r\n        }\r\n\r\n        uint256 amount = getIcoTokensAmount(soldTokens, _value);\r\n\r\n        if (amount == 0) {\r\n            return false;\r\n        }\r\n\r\n        uint256 cloutMinted = clout.mint(_address, amount);\r\n        uint256 clcMinted = clc.mint(_address, amount);\r\n\r\n        require(cloutMinted == amount);\r\n        require(clcMinted == amount);\r\n\r\n        soldTokens += amount;\r\n        collectedEthers += _value;\r\n        holderEthers[_address] += _value;\r\n\r\n        Contribution(_address, _value, amount, amount);\r\n\r\n        return true;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"creationBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_locked\",\"type\":\"bool\"}],\"name\":\"setLocked\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_genesisToken\",\"type\":\"address\"}],\"name\":\"setGenesisToken\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minter\",\"type\":\"address\"}],\"name\":\"removeMinter\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"standard\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newMinter\",\"type\":\"address\"}],\"name\":\"addMinter\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transferFrozen\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"createdAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"locked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_holder\",\"type\":\"address\"},{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"claimedTokens\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_frozen\",\"type\":\"bool\"}],\"name\":\"setTransferFrozen\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"minters\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"},{\"name\":\"customFallback\",\"type\":\"string\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"genesisToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_maxSupply\",\"type\":\"uint256\"},{\"name\":\"decimals\",\"type\":\"uint8\"},{\"name\":\"_genesisToken\",\"type\":\"address\"},{\"name\":\"transferAllSupplyToOwner\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"CLC","CompilerVersion":"v0.4.15+commit.bbb8e64f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000033b2e3c9fd0803ce800000000000000000000000000000000000000000000000000000000000000000000120000000000000000000000005ba49fcf7c9dce67d6a9fc92cc51c8e77cba5b7a0000000000000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://f9ed871002b5925d09b4be87545dd9637e68f5536880173d3ec867823f9a70df"}]}