{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13;\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  function transferOwnership(address newOwner) onlyOwner {\r\n    if (newOwner != address(0)) {\r\n      owner = newOwner;\r\n    }\r\n  }\r\n}\r\n\r\ncontract AccountModifiers is Ownable {\r\n\r\n  uint defaultTakerFeeDiscount;\r\n  uint defaultRebatePercentage;\r\n  \r\n  mapping (address => uint) takerFeeDiscounts;   // in % of taker fee (Eg: 100 for 100%)\r\n  mapping (address => uint) rebatePercentages;   // in % of taker fee charged\r\n  \r\n  function setDefaults(uint _defaultTakerFeeDiscount, uint _defaultRebatePercentage) onlyOwner {\r\n    defaultTakerFeeDiscount = _defaultTakerFeeDiscount;\r\n    defaultRebatePercentage = _defaultRebatePercentage;\r\n  }\r\n\r\n  function setModifiers(address _user, uint _takeFeeDiscount, uint _rebatePercentage) onlyOwner {\r\n    takerFeeDiscounts[_user] = _takeFeeDiscount;\r\n    rebatePercentages[_user] = _rebatePercentage;\r\n  }\r\n\r\n  function takerFeeDiscount(address _user) internal constant returns (uint) {\r\n    return defaultTakerFeeDiscount > takerFeeDiscounts[_user] ? defaultTakerFeeDiscount : takerFeeDiscounts[_user];\r\n  }\r\n\r\n  function rebatePercentage(address _user) internal constant returns (uint) {\r\n    return defaultRebatePercentage > rebatePercentages[_user] ? defaultRebatePercentage : rebatePercentages[_user];\r\n  }\r\n\r\n  function accountModifiers(address _user) constant returns(uint, uint) {\r\n    return (takerFeeDiscount(_user), rebatePercentage(_user));\r\n  }\r\n\r\n  function tradeModifiers(address _maker, address _taker) constant returns(uint, uint) {\r\n    return (takerFeeDiscount(_taker), rebatePercentage(_maker));\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_defaultTakerFeeDiscount\",\"type\":\"uint256\"},{\"name\":\"_defaultRebatePercentage\",\"type\":\"uint256\"}],\"name\":\"setDefaults\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_takeFeeDiscount\",\"type\":\"uint256\"},{\"name\":\"_rebatePercentage\",\"type\":\"uint256\"}],\"name\":\"setModifiers\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_maker\",\"type\":\"address\"},{\"name\":\"_taker\",\"type\":\"address\"}],\"name\":\"tradeModifiers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"accountModifiers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"}]","ContractName":"AccountModifiers","CompilerVersion":"v0.4.13+commit.fb4cb1a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://e3ec4269e1db53b233c6136f966c414b1eb7615b23b0d586be9e729efdf2faba"}]}