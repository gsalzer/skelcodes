{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.16;\r\n\r\ncontract owned {\r\n    address public owner;\r\n\r\n    function owned() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        if (msg.sender != owner) {\r\n            revert();\r\n        }\r\n        _;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n\tfunction mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n\t\tuint256 c = a * b;\r\n\t\tassert(a == 0 || c / a == b);\r\n\t\treturn c;\r\n\t}\r\n\r\n\tfunction div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n\t\t// assert(b > 0); // Solidity automatically throws when dividing by 0\r\n\t\tuint256 c = a / b;\r\n\t\t// assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\t\treturn c;\r\n\t}\r\n\r\n\tfunction sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n\t\tassert(b <= a);\r\n\t\treturn a - b;\r\n\t}\r\n\r\n\tfunction add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n\t\tuint256 c = a + b;\r\n\t\tassert(c >= a);\r\n\t\treturn c;\r\n\t}\r\n}\r\n\r\ncontract GexCryptoPresale is owned {\r\n\r\n    uint public presaleStart;\r\n    uint public saleEnd;\r\n    uint256 public presaleBonus;\r\n    uint256 public buyingPrice;\r\n    uint256 public totalInvestors;\r\n\r\n    function GexCryptoPresale() {\r\n        presaleStart = 1508011200; \r\n        saleEnd = 1512972000;\r\n        presaleBonus = 30;\r\n        buyingPrice = 350877190000000;\r\n    }\r\n\r\n    event EtherTransfer(address indexed _from,address indexed _to,uint256 _value);\r\n\r\n    function changeTiming(uint _presaleStart,uint _saleEnd) onlyOwner {\r\n        presaleStart = _presaleStart;\r\n        saleEnd = _saleEnd;\r\n    }\r\n\r\n    function changeBonus(uint256 _presaleBonus) onlyOwner {\r\n        presaleBonus = _presaleBonus;\r\n    }\r\n\r\n    function changeBuyingPrice(uint256 _buyingPrice) onlyOwner {\r\n        buyingPrice = _buyingPrice;\r\n    }\r\n\r\n    function withdrawEther(address _account) onlyOwner payable returns (bool success) {\r\n        require(_account.send(this.balance));\r\n\r\n        EtherTransfer(this, _account, this.balance);\r\n        return true;\r\n    }\r\n\r\n    function destroyContract() {\r\n        if (msg.sender == owner) {\r\n            selfdestruct(owner);\r\n        }\r\n    }\r\n\r\n    function () payable {\r\n        uint256 tokens = msg.value / buyingPrice;\r\n        totalInvestors = totalInvestors + 1;\r\n        if (presaleStart < now && saleEnd > now) {\r\n            require(msg.value >= 1 ether);\r\n        } else {\r\n            revert();\r\n        }\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"destroyContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalInvestors\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyingPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presaleBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_presaleStart\",\"type\":\"uint256\"},{\"name\":\"_saleEnd\",\"type\":\"uint256\"}],\"name\":\"changeTiming\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"withdrawEther\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_buyingPrice\",\"type\":\"uint256\"}],\"name\":\"changeBuyingPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleEnd\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_presaleBonus\",\"type\":\"uint256\"}],\"name\":\"changeBonus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presaleStart\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"EtherTransfer\",\"type\":\"event\"}]","ContractName":"GexCryptoPresale","CompilerVersion":"v0.4.16+commit.d7661dd9","OptimizationUsed":"0","Runs":"0","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://7d4936fafc5cf3982f9dd697194306e84442d631d88b0ece33c1a46bf3036ab2"}]}