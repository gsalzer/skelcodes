{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.15;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner {\r\n    require(newOwner != address(0));\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title Claimable\r\n * @dev Extension for the Ownable contract, where the ownership needs to be claimed.\r\n * This allows the new owner to accept the transfer.\r\n */\r\ncontract Claimable is Ownable {\r\n  address public pendingOwner;\r\n\r\n  /**\r\n   * @dev Modifier throws if called by any account other than the pendingOwner.\r\n   */\r\n  modifier onlyPendingOwner() {\r\n    require(msg.sender == pendingOwner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to set the pendingOwner address.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner {\r\n    pendingOwner = newOwner;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the pendingOwner address to finalize the transfer.\r\n   */\r\n  function claimOwnership() onlyPendingOwner {\r\n    owner = pendingOwner;\r\n    pendingOwner = 0x0;\r\n  }\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) constant returns (uint256);\r\n  function transfer(address to, uint256 value) returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) returns (bool);\r\n  function approve(address spender, uint256 value) returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) returns (bool) {\r\n    require(_to != address(0));\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\r\n    require(_to != address(0));\r\n\r\n    var _allowance = allowed[_from][msg.sender];\r\n\r\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n    // require (_value <= _allowance);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) returns (bool) {\r\n\r\n    // To change the approve amount you first have to reduce the addresses`\r\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n    //  already 0 to mitigate the race condition described here:\r\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   */\r\n  function increaseApproval (address _spender, uint _addedValue)\r\n    returns (bool success) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  function decreaseApproval (address _spender, uint _subtractedValue)\r\n    returns (bool success) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title Mintable token\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\r\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n */\r\n\r\ncontract MintableToken is StandardToken, Ownable {\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(address _to, uint256 _amount) onlyOwner canMint returns (bool) {\r\n    totalSupply = totalSupply.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    Mint(_to, _amount);\r\n    Transfer(0x0, _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() onlyOwner returns (bool) {\r\n    mintingFinished = true;\r\n    MintFinished();\r\n    return true;\r\n  }\r\n}\r\n\r\n/*\r\n* Horizon State Decision Token Contract\r\n*\r\n* Version 0.9\r\n*\r\n* Author Nimo Naamani\r\n*\r\n* This smart contract code is Copyright 2017 Horizon State (https://Horizonstate.com)\r\n*\r\n* Licensed under the Apache License, version 2.0: http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* @title Horizon State Token\r\n* @dev ERC20 Decision Token (HST)\r\n* @author Nimo Naamani\r\n*\r\n* HST tokens have 18 decimal places. The smallest meaningful (and transferable)\r\n* unit is therefore 0.000000000000000001 HST. This unit is called a 'danni'.\r\n*\r\n* 1 HST = 1 * 10**18 = 1000000000000000000 dannis.\r\n*\r\n* Maximum total HST supply is 1 Billion.\r\n* This is equivalent to 1000000000 * 10**18 = 1e27 dannis.\r\n*\r\n* HST are mintable on demand (as they are being purchased), which means that\r\n* 1 Billion is the maximum.\r\n*/\r\n\r\n// @title The Horizon State Decision Token (HST)\r\ncontract DecisionToken is MintableToken, Claimable {\r\n\r\n  using SafeMath for uint256;\r\n\r\n  // Name to appear in ERC20 wallets\r\n  string public constant name = \"Decision Token\";\r\n\r\n  // Symbol for the Decision Token to appear in ERC20 wallets\r\n  string public constant symbol = \"HST\";\r\n\r\n  // Version of the source contract\r\n  string public constant version = \"1.0\";\r\n\r\n  // Number of decimals for token display\r\n  uint8 public constant decimals = 18;\r\n\r\n  // Release timestamp. As part of the contract, tokens can only be transfered\r\n  // 10 days after this trigger is set\r\n  uint256 public triggerTime = 0;\r\n\r\n  // @title modifier to allow actions only when the token can be released\r\n  modifier onlyWhenReleased() {\r\n    require(now >= triggerTime);\r\n    _;\r\n  }\r\n\r\n\r\n  // @dev Constructor for the DecisionToken.\r\n  // Initialise the trigger (the sale contract will init this to the expected end time)\r\n  function DecisionToken() MintableToken() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  // @title Transfer tokens.\r\n  // @dev This contract overrides the transfer() function to only work when released\r\n  function transfer(address _to, uint256 _value) onlyWhenReleased returns (bool) {\r\n    return super.transfer(_to, _value);\r\n  }\r\n\r\n  // @title Allow transfers from\r\n  // @dev This contract overrides the transferFrom() function to only work when released\r\n  function transferFrom(address _from, address _to, uint256 _value) onlyWhenReleased returns (bool) {\r\n    return super.transferFrom(_from, _to, _value);\r\n  }\r\n\r\n  // @title finish minting of the token.\r\n  // @dev This contract overrides the finishMinting function to trigger the token lock countdown\r\n  function finishMinting() onlyOwner returns (bool) {\r\n    require(triggerTime==0);\r\n    triggerTime = now.add(10 days);\r\n    return super.finishMinting();\r\n  }\r\n}\r\n\r\n/**\r\n* Horizon State Token Sale Contract\r\n*\r\n* Version 0.9\r\n*\r\n* @author Nimo Naamani\r\n*\r\n* This smart contract code is Copyright 2017 Horizon State (https://Horizonstate.com)\r\n*\r\n* Licensed under the Apache License, version 2.0: http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n*/\r\n\r\n// @title The DC Token Sale contract\r\n// @dev A crowdsale contract with stages of tokens-per-eth based on time elapsed\r\n// Capped by maximum number of tokens; Time constrained\r\ncontract DecisionTokenSale is Claimable {\r\n  using SafeMath for uint256;\r\n\r\n  // Start timestamp where investments are open to the public.\r\n  // Before this timestamp - only whitelisted addresses allowed to buy.\r\n  uint256 public startTime;\r\n\r\n  // End time. investments can only go up to this timestamp.\r\n  // Note that the sale can end before that, if the token cap is reached.\r\n  uint256 public endTime;\r\n\r\n  // Presale (whitelist only) buyers receive this many tokens per ETH\r\n  uint256 public constant presaleTokenRate = 3750;\r\n\r\n  // 1st day buyers receive this many tokens per ETH\r\n  uint256 public constant earlyBirdTokenRate = 3500;\r\n\r\n  // Day 2-8 buyers receive this many tokens per ETH\r\n  uint256 public constant secondStageTokenRate = 3250;\r\n\r\n  // Day 9-16 buyers receive this many tokens per ETH\r\n  uint256 public constant thirdStageTokenRate = 3000;\r\n\r\n  // Maximum total number of tokens ever created, taking into account 18 decimals.\r\n  uint256 public constant tokenCap =  10**9 * 10**18;\r\n\r\n  // Initial HorizonState allocation (reserve), taking into account 18 decimals.\r\n  uint256 public constant tokenReserve = 4 * (10**8) * 10**18;\r\n\r\n  // The Decision Token that is sold with this token sale\r\n  DecisionToken public token;\r\n\r\n  // The address where the funds are kept\r\n  address public wallet;\r\n\r\n  // Holds the addresses that are whitelisted to participate in the presale.\r\n  // Sales to these addresses are allowed before saleStart\r\n  mapping (address => bool) whiteListedForPresale;\r\n\r\n  // @title Event for token purchase logging\r\n  event TokenPurchase(address indexed purchaser, uint256 value, uint256 amount);\r\n\r\n  // @title Event to log user added to whitelist\r\n  event LogUserAddedToWhiteList(address indexed user);\r\n\r\n  //@title Event to log user removed from whitelist\r\n  event LogUserUserRemovedFromWhiteList(address indexed user);\r\n\r\n\r\n  // @title Constructor\r\n  // @param _startTime: A timestamp for when the sale is to start.\r\n  // @param _wallet - The wallet where the token sale proceeds are to be stored\r\n  function DecisionTokenSale(uint256 _startTime, address _wallet) {\r\n    require(_startTime >= now);\r\n    require(_wallet != 0x0);\r\n    startTime = _startTime;\r\n    endTime = startTime.add(14 days);\r\n    wallet = _wallet;\r\n\r\n    // Create the token contract itself.\r\n    token = createTokenContract();\r\n\r\n    // Mint the reserve tokens to the owner of the sale contract.\r\n    token.mint(owner, tokenReserve);\r\n  }\r\n\r\n  // @title Create the token contract from this sale\r\n  // @dev Creates the contract for token to be sold.\r\n  function createTokenContract() internal returns (DecisionToken) {\r\n    return new DecisionToken();\r\n  }\r\n\r\n  // @title Buy Decision Tokens\r\n  // @dev Use this function to buy tokens through the sale\r\n  function buyTokens() payable {\r\n    require(msg.sender != 0x0);\r\n    require(msg.value != 0);\r\n    require(whiteListedForPresale[msg.sender] || now >= startTime);\r\n    require(!hasEnded());\r\n\r\n    // Calculate token amount to be created\r\n    uint256 tokens = calculateTokenAmount(msg.value);\r\n\r\n    if (token.totalSupply().add(tokens) > tokenCap) {\r\n      revert();\r\n    }\r\n\r\n    // Add the new tokens to the beneficiary\r\n    token.mint(msg.sender, tokens);\r\n\r\n    // Notify that a token purchase was performed\r\n    TokenPurchase(msg.sender, msg.value, tokens);\r\n\r\n    // Put the funds in the token sale wallet\r\n    wallet.transfer(msg.value);\r\n  }\r\n\r\n  // @dev This is fallback function can be used to buy tokens\r\n  function () payable {\r\n    buyTokens();\r\n  }\r\n\r\n  // @title Calculate how many tokens per Ether\r\n  // The token sale has different rates based on time of purchase, as per the token\r\n  // sale whitepaper and Horizon State's Token Sale page.\r\n  // Presale:  : 3750 tokens per Ether\r\n  // Day 1     : 3500 tokens per Ether\r\n  // Days 2-8  : 3250 tokens per Ether\r\n  // Days 9-16 : 3000 tokens per Ether\r\n  //\r\n  // A note for calculation: As the number of decimals on the token is 18, which\r\n  // is identical to the wei per eth - the calculation performed here can use the\r\n  // number of tokens per ETH with no further modification.\r\n  //\r\n  // @param _weiAmount : How much wei the buyer wants to spend on tokens\r\n  // @return the number of tokens for this purchase.\r\n  function calculateTokenAmount(uint256 _weiAmount) internal constant returns (uint256) {\r\n    if (now >= startTime + 8 days) {\r\n      return _weiAmount.mul(thirdStageTokenRate);\r\n    }\r\n    if (now >= startTime + 1 days) {\r\n      return _weiAmount.mul(secondStageTokenRate);\r\n    }\r\n    if (now >= startTime) {\r\n      return _weiAmount.mul(earlyBirdTokenRate);\r\n    }\r\n    return _weiAmount.mul(presaleTokenRate);\r\n  }\r\n\r\n  // @title Check whether this sale has ended.\r\n  // @dev This is a utility function to help consumers figure out whether the sale\r\n  // has already ended.\r\n  // The sale is considered done when the token's minting finished, or when the current\r\n  // time has passed the sale's end time\r\n  // @return true if crowdsale event has ended\r\n  function hasEnded() public constant returns (bool) {\r\n    return now > endTime;\r\n  }\r\n\r\n  // @title White list a buyer for the presale.\r\n  // @dev Allow the owner of this contract to whitelist a buyer.\r\n  // Whitelisted buyers may buy in the presale, i.e before the sale starts.\r\n  // @param _buyer : The buyer address to whitelist\r\n  function whiteListAddress(address _buyer) onlyOwner {\r\n    require(_buyer != 0x0);\r\n    whiteListedForPresale[_buyer] = true;\r\n    LogUserAddedToWhiteList(_buyer);\r\n  }\r\n\r\n  // @title Whitelist an list of buyers for the presale\r\n  // @dev Allow the owner of this contract to whitelist multiple buyers in batch.\r\n  // Whitelisted buyers may buy in the presale, i.e before the sale starts.\r\n  // @param _buyers : The buyer addresses to whitelist\r\n  function addWhiteListedAddressesInBatch(address[] _buyers) onlyOwner {\r\n    require(_buyers.length < 1000);\r\n    for (uint i = 0; i < _buyers.length; i++) {\r\n      whiteListAddress(_buyers[i]);\r\n    }\r\n  }\r\n\r\n  // @title Remove a buyer from the whitelist.\r\n  // @dev Allow the owner of this contract to remove a buyer from the white list.\r\n  // @param _buyer : The buyer address to remove from the whitelist\r\n  function removeWhiteListedAddress(address _buyer) onlyOwner {\r\n    whiteListedForPresale[_buyer] = false;\r\n  }\r\n\r\n  // @title Terminate the contract\r\n  // @dev Allow the owner of this contract to terminate it\r\n  // It also transfers the token ownership to the owner of the sale contract.\r\n  function destroy() onlyOwner {\r\n    token.finishMinting();\r\n    token.transferOwnership(msg.sender);\r\n    selfdestruct(owner);\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"triggerTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"DecisionToken","CompilerVersion":"v0.4.17+commit.bdeb9e52","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://e8208f6c68c613e42c61b843ac4b86405c55875765838591fff54279e7eff608"}]}