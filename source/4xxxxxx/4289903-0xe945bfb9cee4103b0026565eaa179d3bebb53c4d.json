{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.16;\r\n\r\n\r\n/**\r\n * @title Contract owner definition\r\n */\r\ncontract Owned {\r\n\r\n    /* Owner's address */\r\n    address owner;\r\n\r\n    /**\r\n     * @dev Constructor, records msg.sender as contract owner\r\n     */\r\n    function Owned() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Validates if msg.sender is an owner\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n}\r\n\r\n/** \r\n * @title Standard token interface (ERC 20)\r\n * \r\n * https://github.com/ethereum/EIPs/issues/20\r\n */\r\ninterface ERC20 {\r\n    \r\n// Functions:\r\n    \r\n    /**\r\n     * @return total amount of tokens\r\n     */\r\n    function totalSupply() constant returns (uint256);\r\n\r\n    /** \r\n     * @param _owner The address from which the balance will be retrieved\r\n     * @return The balance\r\n     */\r\n    function balanceOf(address _owner) constant returns (uint256);\r\n\r\n    /** \r\n     * @notice send `_value` token to `_to` from `msg.sender`\r\n     * \r\n     * @param _to The address of the recipient\r\n     * @param _value The amount of token to be transferred\r\n     * @return Whether the transfer was successful or not\r\n     */\r\n    function transfer(address _to, uint256 _value) returns (bool);\r\n\r\n    /** \r\n     * @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\r\n     * \r\n     * @param _from The address of the sender\r\n     * @param _to The address of the recipient\r\n     * @param _value The amount of token to be transferred\r\n     * @return Whether the transfer was successful or not\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool);\r\n\r\n    /** \r\n     * @notice `msg.sender` approves `_addr` to spend `_value` tokens\r\n     * \r\n     * @param _spender The address of the account able to transfer the tokens\r\n     * @param _value The amount of wei to be approved for transfer\r\n     * @return Whether the approval was successful or not\r\n     */\r\n    function approve(address _spender, uint256 _value) returns (bool);\r\n\r\n    /** \r\n     * @param _owner The address of the account owning tokens\r\n     * @param _spender The address of the account able to transfer the tokens\r\n     * @return Amount of remaining tokens allowed to spent\r\n     */\r\n    function allowance(address _owner, address _spender) constant returns (uint256);\r\n\r\n// Events:\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\n\r\n/**\r\n * @title Implementation of ERC 20 interface with holders list\r\n */\r\ncontract Token is ERC20 {\r\n\r\n    /// Name of the token\r\n    string public name;\r\n    /// Token symbol\r\n    string public symbol;\r\n\r\n    /// Fixed point description\r\n    uint8 public decimals;\r\n\r\n    /// Qty of supplied tokens\r\n    uint256 public totalSupply;\r\n\r\n    /// Token holders list\r\n    address[] public holders;\r\n    /* address => index in array of hodlers, index starts from 1 */\r\n    mapping(address => uint256) index;\r\n\r\n    /* Token holders map */\r\n    mapping(address => uint256) balances;\r\n    /* Token transfer approvals */\r\n    mapping(address => mapping(address => uint256)) allowances;\r\n\r\n    /**\r\n     * @dev Constructs Token with given `_name`, `_symbol` and `_decimals`\r\n     */\r\n    function Token(string _name, string _symbol, uint8 _decimals) {\r\n        name = _name;\r\n        symbol = _symbol;\r\n        decimals = _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev Get balance of given address\r\n     *\r\n     * @param _owner The address to request balance from\r\n     * @return The balance\r\n     */\r\n    function balanceOf(address _owner) constant returns (uint256) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer own tokens to given address\r\n     * @notice send `_value` token to `_to` from `msg.sender`\r\n     *\r\n     * @param _to The address of the recipient\r\n     * @param _value The amount of token to be transferred\r\n     * @return Whether the transfer was successful or not\r\n     */\r\n    function transfer(address _to, uint256 _value) returns (bool) {\r\n\r\n        // balance check\r\n        if (balances[msg.sender] >= _value) {\r\n\r\n            // transfer\r\n            balances[msg.sender] -= _value;\r\n            balances[_to] += _value;\r\n\r\n            // push new holder if _value > 0\r\n            if (_value > 0 && index[_to] == 0) {\r\n                index[_to] = holders.push(_to);\r\n            }\r\n\r\n            Transfer(msg.sender, _to, _value);\r\n\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer tokens between addresses using approvals\r\n     * @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\r\n     *\r\n     * @param _from The address of the sender\r\n     * @param _to The address of the recipient\r\n     * @param _value The amount of token to be transferred\r\n     * @return Whether the transfer was successful or not\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\r\n\r\n        // approved balance check\r\n        if (allowances[_from][msg.sender] >= _value &&\r\n            balances[_from] >= _value ) {\r\n\r\n            // hit approved amount\r\n            allowances[_from][msg.sender] -= _value;\r\n\r\n            // transfer\r\n            balances[_from] -= _value;\r\n            balances[_to] += _value;\r\n\r\n            // push new holder if _value > 0\r\n            if (_value > 0 && index[_to] == 0) {\r\n                index[_to] = holders.push(_to);\r\n            }\r\n\r\n            Transfer(_from, _to, _value);\r\n\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @dev Approve token transfer with specific amount\r\n     * @notice `msg.sender` approves `_addr` to spend `_value` tokens\r\n     *\r\n     * @param _spender The address of the account able to transfer the tokens\r\n     * @param _value The amount of wei to be approved for transfer\r\n     * @return Whether the approval was successful or not\r\n     */\r\n    function approve(address _spender, uint256 _value) returns (bool) {\r\n        allowances[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Get amount of tokens approved for transfer\r\n     *\r\n     * @param _owner The address of the account owning tokens\r\n     * @param _spender The address of the account able to transfer the tokens\r\n     * @return Amount of remaining tokens allowed to spent\r\n     */\r\n    function allowance(address _owner, address _spender) constant returns (uint256) {\r\n        return allowances[_owner][_spender];\r\n    }\r\n\r\n    /**\r\n     * @dev Convenient way to reset approval for given address, not a part of ERC20\r\n     *\r\n     * @param _spender the address\r\n     */\r\n    function unapprove(address _spender) {\r\n        allowances[msg.sender][_spender] = 0;\r\n    }\r\n\r\n    /**\r\n     * @return total amount of tokens\r\n     */\r\n    function totalSupply() constant returns (uint256) {\r\n        return totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns count of token holders\r\n     */\r\n    function holderCount() constant returns (uint256) {\r\n        return holders.length;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Cat's Token, miaow!!!\r\n *\r\n * @dev Defines token with name \"Cat's Token\", symbol \"CTS\"\r\n * and 3 digits after the point\r\n */\r\ncontract Cat is Token(\"Test's Token\", \"TTS\", 3), Owned {\r\n\r\n    /**\r\n     * @dev Emits specified number of tokens. Only owner can emit.\r\n     * Emitted tokens are credited to owner's account\r\n     *\r\n     * @param _value number of emitting tokens\r\n     * @return true if emission succeeded, false otherwise\r\n     */\r\n    function emit(uint256 _value) onlyOwner returns (bool) {\r\n\r\n        // overflow check\r\n        assert(totalSupply + _value >= totalSupply);\r\n\r\n        // emission\r\n        totalSupply += _value;\r\n        balances[owner] += _value;\r\n\r\n        return true;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"emit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"holderCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"holders\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"unapprove\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"Cat","CompilerVersion":"v0.4.16+commit.d7661dd9","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://1336fd40e8c445b59e4b02fe26f2e1d6648f6cd2f87819a541ee1057adfe6309"}]}