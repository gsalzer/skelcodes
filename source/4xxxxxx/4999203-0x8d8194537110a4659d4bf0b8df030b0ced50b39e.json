{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    Unpause();\r\n  }\r\n}\r\n\r\nlibrary Math {\r\n  function max64(uint64 a, uint64 b) internal pure returns (uint64) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min64(uint64 a, uint64 b) internal pure returns (uint64) {\r\n    return a < b ? a : b;\r\n  }\r\n\r\n  function max256(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min256(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return a < b ? a : b;\r\n  }\r\n}\r\n\r\ncontract Destructible is Ownable {\r\n\r\n  function Destructible() public payable { }\r\n\r\n  /**\r\n   * @dev Transfers the current balance to the owner and terminates the contract.\r\n   */\r\n  function destroy() onlyOwner public {\r\n    selfdestruct(owner);\r\n  }\r\n\r\n  function destroyAndSend(address _recipient) onlyOwner public {\r\n    selfdestruct(_recipient);\r\n  }\r\n}\r\n\r\ncontract ProfitSharing is Ownable, Destructible, Pausable {\r\n    using SafeMath for uint256;\r\n\r\n    struct Period {\r\n        uint128 endTime;\r\n        uint128 block;\r\n        uint128 balance;\r\n    }\r\n\r\n    // public\r\n    BalanceHistoryToken public token;\r\n    uint256 public periodDuration;\r\n    Period public currentPeriod;\r\n    mapping(address => mapping(uint => bool)) public payments;\r\n\r\n    // internal\r\n\r\n    // events\r\n    event PaymentCompleted(address indexed requester, uint indexed paymentPeriodBlock, uint amount);\r\n    event PeriodReset(uint block, uint endTime, uint balance, uint totalSupply);\r\n\r\n    /// @dev Constructor of the contract\r\n    function ProfitSharing(address _tokenAddress) public {\r\n        periodDuration = 4 weeks;\r\n        resetPeriod();\r\n        token = BalanceHistoryToken(_tokenAddress);\r\n    }\r\n\r\n    /// @dev Default payable fallback. \r\n    function () public payable {\r\n    }\r\n\r\n    /// @dev Withdraws the full amount shared with the sender.\r\n    function withdraw() public whenNotPaused {\r\n        withdrawFor(msg.sender);\r\n    }\r\n\r\n    /// @dev Allows someone to call withdraw on behalf of someone else. \r\n    /// Useful if we expose via web3 but metamask account is different than owner of tokens.\r\n    function withdrawFor(address tokenOwner) public whenNotPaused {\r\n        // Ensure that this address hasn't been previously paid out for this period.\r\n        require(!payments[tokenOwner][currentPeriod.block]);\r\n        \r\n        // Check if it is time to calculate the next payout period.\r\n        resetPeriod();\r\n\r\n        // Calculate the amount of the current payout period\r\n        uint payment = getPaymentTotal(tokenOwner);\r\n        require(payment > 0);\r\n        assert(this.balance >= payment);\r\n\r\n        payments[tokenOwner][currentPeriod.block] = true;\r\n        PaymentCompleted(tokenOwner, currentPeriod.block, payment);\r\n        tokenOwner.transfer(payment);\r\n    }\r\n\r\n    /// @dev Resets the period given the duration of the current period\r\n    function resetPeriod() internal {\r\n        uint nowTime = getNow();\r\n        if (currentPeriod.endTime < nowTime) {\r\n            currentPeriod.endTime = uint128(nowTime.add(periodDuration)); \r\n            currentPeriod.block = uint128(block.number);\r\n            currentPeriod.balance = uint128(this.balance);\r\n            if (token != address(0x0)) {\r\n                PeriodReset(block.number, nowTime.add(periodDuration), this.balance, token.totalSupply());\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @dev Gets the total payment amount for the sender given the current period.\r\n    function getPaymentTotal(address tokenOwner) public constant returns (uint256) {\r\n        if (payments[tokenOwner][currentPeriod.block]) {\r\n            return 0;\r\n        }\r\n\r\n        // Get the amount of balance at the beginning of the payment period\r\n        uint tokenOwnerBalance = token.balanceOfAtBlock(tokenOwner, currentPeriod.block);\r\n\r\n        // Calculate the amount of the current payout period\r\n        return calculatePayment(tokenOwnerBalance);\r\n    }\r\n\r\n    /// @dev Updates the token address of the payment type.\r\n    function updateToken(address tokenAddress) public onlyOwner {\r\n        token = BalanceHistoryToken(tokenAddress);\r\n    }\r\n\r\n    /// @dev Calculates the payment given the sender balance for the current period.\r\n    function calculatePayment(uint tokenOwnerBalance) public constant returns(uint) {\r\n        return tokenOwnerBalance.mul(currentPeriod.balance).div(token.totalSupply());\r\n    }\r\n\r\n    /// @dev Internal function for mocking purposes\r\n    function getNow() internal view returns (uint256) {\r\n        return now;\r\n    }\r\n\r\n    /// @dev Updates the period duration\r\n    function updatePeriodDuration(uint newPeriodDuration) public onlyOwner {\r\n        require(newPeriodDuration > 0);\r\n        periodDuration = newPeriodDuration;\r\n    }\r\n\r\n    /// @dev Forces a period reset\r\n    function forceResetPeriod() public onlyOwner {\r\n        uint nowTime = getNow();\r\n        currentPeriod.endTime = uint128(nowTime.add(periodDuration)); \r\n        currentPeriod.block = uint128(block.number);\r\n        currentPeriod.balance = uint128(this.balance);\r\n        if (token != address(0x0)) {\r\n            PeriodReset(block.number, nowTime.add(periodDuration), this.balance, token.totalSupply());\r\n        }\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract FullERC20 {\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n  \r\n  uint256 public totalSupply;\r\n  uint8 public decimals;\r\n\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n}\r\n\r\ncontract BalanceHistoryToken is FullERC20 {\r\n  function balanceOfAtBlock(address who, uint256 blockNumber) public view returns (uint256);\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"currentPeriod\",\"outputs\":[{\"name\":\"endTime\",\"type\":\"uint128\"},{\"name\":\"block\",\"type\":\"uint128\"},{\"name\":\"balance\",\"type\":\"uint128\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newPeriodDuration\",\"type\":\"uint256\"}],\"name\":\"updatePeriodDuration\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"forceResetPeriod\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"updateToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"destroy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwnerBalance\",\"type\":\"uint256\"}],\"name\":\"calculatePayment\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"withdrawFor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"getPaymentTotal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"payments\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"periodDuration\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"destroyAndSend\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"requester\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"paymentPeriodBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PaymentCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"block\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"endTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"balance\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"name\":\"PeriodReset\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"ProfitSharing","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000ce831af117375e6286eb3c46d696ee3dbf4f4f50","Library":"","SwarmSource":"bzzr://9d7710bd7f6b029a4c1a1a05ccfe6b2564b8ec257a6234c198ba676b026dfd4c"}]}