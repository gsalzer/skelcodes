{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n/* @file\r\n * @title BTRCTOKEN\r\n * @version 1.2.0\r\n*/\r\ncontract BTRCTOKEN {\r\n  \r\n  string public constant symbol = \"BTRC\";\r\n  string public constant name = \"BITUBER\";\r\n  \r\n  uint8 public constant decimals = 18;\r\n  \r\n  uint256 public constant _maxSupply = 33000000000000000000000000; \r\n  uint256 public _totalSupply = 0;\r\n  uint256 private price = 2500;\r\n  \r\n  bool public workingState = true;\r\n  bool public transferAllowed = true;\r\n  bool private generationState = true;\r\n  \r\n  address private owner;\r\n  address private cur_coin;\r\n  \r\n  mapping (address => uint256) balances;\r\n  mapping (address => mapping (address => uint256)) allowed;\r\n  mapping (address => uint256) private etherClients;\r\n\r\n  event FundsGot(address indexed _sender, uint256 _value);\r\n  event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n  \r\n  event TokenGenerationEnabled();\r\n  event TokenGenerationDisabled();\r\n  \r\n  event ContractEnabled();\r\n  event ContractDisabled();\r\n  event TransferEnabled();\r\n  \r\n  event TransferDisabled();\r\n  event CurrentCoin(address coin);\r\n  event Refund(address client, uint256 amount, uint256 tokens);\r\n  event TokensSent(address client, uint256 amount);\r\n  event PaymentGot(bool result);\r\n  \r\n  modifier onlyOwner {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  modifier ownerAndCoin {\r\n    require((msg.sender == owner)||(msg.sender == cur_coin));\r\n    _;\r\n  }\r\n\r\n  modifier producibleFlag {\r\n    require((generationState == true)&&(_totalSupply<_maxSupply));\r\n    _;\r\n  }\r\n\r\n  modifier workingFlag {\r\n    require(workingState == true);\r\n    _;\r\n  }\r\n\r\n\r\n  modifier transferFlag {\r\n    require(transferAllowed == true);\r\n    _;\r\n  }\r\n\r\n  function BTRCTOKEN() public payable {\r\n    owner = msg.sender;\r\n    enableContract();\r\n  }\r\n\r\n\r\n  function refund(address _client, uint256 _amount, uint256 _tokens) public workingFlag ownerAndCoin {\r\n    balances[_client] -= _tokens;\r\n    balances[address(this)] += _tokens;\r\n    _client.transfer(_amount);\r\n    Refund(_client, _amount, _tokens);\r\n  }\r\n\r\n\r\n  function kill() public onlyOwner {\r\n    require(workingState == false);\r\n    selfdestruct(owner);\r\n  }\r\n\r\n\r\n  function setCurrentCoin(address current) public onlyOwner workingFlag {\r\n    cur_coin = current;\r\n    CurrentCoin(cur_coin);\r\n  }\r\n\r\n  //work controller functions\r\n  function enableContract() public onlyOwner {\r\n    workingState = true;\r\n    ContractEnabled();\r\n  }\r\n\r\n\r\n  function disableContract() public onlyOwner {\r\n    workingState = false;\r\n    ContractDisabled();\r\n  }\r\n\r\n\r\n  function contractState() public view returns (string state) {\r\n    if (workingState) {\r\n      state = \"Working\";\r\n    }\r\n    else {\r\n      state = \"Stopped\";\r\n    }\r\n  }\r\n\r\n\r\n  function enableGeneration() public onlyOwner {\r\n    if(_totalSupply<_maxSupply) {\r\n\t\tgenerationState = true;\r\n\t\tTokenGenerationEnabled();\r\n\t} else {\r\n\t\tgenerationState = false;\r\n\t}\r\n  }\r\n\r\n  function disableGeneration() public onlyOwner {\r\n    generationState = false;\r\n    TokenGenerationDisabled();\r\n  }\r\n\r\n  function tokenGenerationState() public view returns (string state) {\r\n    if (generationState) {\r\n      state = \"Working\";\r\n    }\r\n    else {\r\n      state = \"Stopped\";\r\n    }\r\n  }\r\n  \r\n  \r\n  //transfer controller functions\r\n  function enableTransfer() public onlyOwner {\r\n    transferAllowed = true;\r\n    TransferEnabled();\r\n  }\r\n  function disableTransfer() public onlyOwner {\r\n    transferAllowed = false;\r\n    TransferDisabled();\r\n  }\r\n  function transferState() public view returns (string state) {\r\n    if (transferAllowed) {\r\n      state = \"Working\";\r\n    }\r\n    else {\r\n      state = \"Stopped\";\r\n    }\r\n  }\r\n  \r\n\r\n  //token controller functions\r\n  function generateTokens(address _client, uint256 _amount) public ownerAndCoin workingFlag producibleFlag {\r\n\t\r\n\tif(_totalSupply<=_maxSupply) {\r\n\t\r\n\t\tif(_totalSupply+_amount>_maxSupply) {\r\n\t\t\t_amount = (_totalSupply+_amount)-_maxSupply;\r\n\t\t}\r\n\t\t\r\n\t\tif (_client == address(this))\r\n\t\t{\r\n\t\t\tbalances[address(this)] += _amount;\r\n\t\t\t_totalSupply += _amount;\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t  if (balances[address(this)] >= _amount)\r\n\t\t  {\r\n\t\t\ttransferFrom(address(this), _client, _amount);\r\n\t\t  }\r\n\t\t  else\r\n\t\t  {\r\n\t\t\tuint256 de = _amount - balances[address(this)];\r\n\t\t\ttransferFrom(address(this), _client, balances[address(this)]);\r\n\t\t\t_totalSupply += de;\r\n\t\t\tbalances[_client] += de;\r\n\t\t  }\r\n\t\t}\r\n\t\t\r\n\t\tTokensSent(_client, _amount);\r\n\t\t\r\n\t\tif(_totalSupply>=_maxSupply) {\r\n\t\t\tgenerationState = false;\r\n\t\t\tTokenGenerationDisabled();\r\n\t\t}\t\r\n\t\r\n\t} else {\r\n\t\t\r\n\t\t\tgenerationState = false;\r\n\t\t\tTokenGenerationDisabled();\r\n\t\t\r\n\t}\r\n\t\r\n\t\r\n  }\r\n  function setPrice(uint256 _price) public onlyOwner {\r\n    price = _price;\r\n  }\r\n  function getPrice() public view returns (uint256 _price) {\r\n    _price = price;\r\n  }\r\n  //send ether function (working)\r\n  function () public workingFlag payable {\r\n    bool ret = false;\r\n    if (generationState) {\r\n       ret = cur_coin.call(bytes4(keccak256(\"pay(address,uint256,uint256)\")), msg.sender, msg.value, price);\r\n    }\r\n    PaymentGot(ret);\r\n  }\r\n  function totalSupply() public constant workingFlag returns (uint256 totalsupply) {\r\n\ttotalsupply = _totalSupply;\r\n  }\r\n  //ERC20 Interface\r\n  function balanceOf(address _owner) public constant workingFlag returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n  function transfer(address _to, uint256 _value) public workingFlag returns (bool success) {\r\n    if (balances[msg.sender] >= _value\r\n      && _value > 0\r\n      && balances[_to] + _value > balances[_to])\r\n      {\r\n        if ((msg.sender == address(this))||(_to == address(this))) {\r\n          balances[msg.sender] -= _value;\r\n          balances[_to] += _value;\r\n          Transfer(msg.sender, _to, _value);\r\n          return true;\r\n        }\r\n        else {\r\n          if (transferAllowed == true) {\r\n            balances[msg.sender] -= _value;\r\n            balances[_to] += _value;\r\n            Transfer(msg.sender, _to, _value);\r\n            return true;\r\n          }\r\n          else {\r\n            return false;\r\n          }\r\n        }\r\n      }\r\n      else {\r\n        return false;\r\n      }\r\n  }\r\n  function transferFrom(address _from, address _to, uint256 _value) public workingFlag returns (bool success) {\r\n    if ((msg.sender == cur_coin)||(msg.sender == owner)) {\r\n      allowed[_from][_to] = _value;\r\n    }\r\n    if (balances[_from] >= _value\r\n      && allowed[_from][_to] >= _value\r\n      && _value > 0\r\n      && balances[_to] + _value > balances[_to])\r\n      {\r\n        if ((_from == address(this))||(_to == address(this))) {\r\n          balances[_from] -= _value;\r\n          allowed[_from][_to] -= _value;\r\n          balances[_to] += _value;\r\n          Transfer(_from, _to, _value);\r\n          return true;\r\n        }\r\n        else {\r\n          if (transferAllowed == true) {\r\n            balances[_from] -= _value;\r\n            allowed[_from][_to] -= _value;\r\n            balances[_to] += _value;\r\n            Transfer(_from, _to, _value);\r\n            return true;\r\n          }\r\n          else {\r\n            return false;\r\n          }\r\n        }\r\n      }\r\n      else {\r\n        return false;\r\n      }\r\n  }\r\n  function approve(address _spender, uint256 _value) public returns (bool success) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"current\",\"type\":\"address\"}],\"name\":\"setCurrentCoin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"totalsupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_client\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"refund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_maxSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"disableGeneration\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transferAllowed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"enableContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"enableGeneration\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenGenerationState\",\"outputs\":[{\"name\":\"state\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_client\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"generateTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractState\",\"outputs\":[{\"name\":\"state\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"disableContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transferState\",\"outputs\":[{\"name\":\"state\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPrice\",\"outputs\":[{\"name\":\"_price\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"workingState\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"disableTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"enableTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"FundsGot\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"TokenGenerationEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"TokenGenerationDisabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ContractEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ContractDisabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"TransferEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"TransferDisabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"coin\",\"type\":\"address\"}],\"name\":\"CurrentCoin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"client\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Refund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"client\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"result\",\"type\":\"bool\"}],\"name\":\"PaymentGot\",\"type\":\"event\"}]","ContractName":"BTRCTOKEN","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://d2d44325b5f9eb9d005d196a2f3ae5579c154deb5aed0bdac3fbbf994ee2c78c"}]}