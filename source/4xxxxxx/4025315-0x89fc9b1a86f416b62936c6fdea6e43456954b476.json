{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity^0.4.11;\r\n\r\n// This is a hash bounty market which allows to set a bounty for a preimage of\r\n//  a given hash (e.g. a password)\r\n\r\n// Feel free to use the following code for any ethical purposes.\r\n\r\ncontract HashBounty {\r\n    event HashSolved (\r\n        address solver,\r\n        string solution,\r\n        bytes32 hash\r\n    );\r\n    \r\n    struct Bounty {\r\n        bytes32 hash;\r\n        uint reward;\r\n        bool isClaimed;\r\n    }\r\n    \r\n    mapping (uint => Bounty) bounties;\r\n    uint bountyIndex = 0;\r\n    \r\n    address owner;\r\n    uint fees = 0;\r\n    \r\n    function HashBounty() {\r\n        owner = msg.sender;\r\n    }\r\n    \r\n    function setBounty(bytes32 hash) payable returns (uint) {\r\n        uint reward;\r\n        if (msg.value < 0.001 ether)\r\n            throw;\r\n        \r\n        reward = msg.value - 0.001 ether;\r\n        fees += 0.001 ether;\r\n        \r\n        bounties[bountyIndex++] = Bounty(hash, reward, false);\r\n        \r\n        return bountyIndex - 1;\r\n    }\r\n    \r\n    function claimBounty(uint claimIndex, string solution) {\r\n        bytes32 hash = sha256(solution);\r\n        \r\n        if (bounties[claimIndex].hash == hash) {\r\n            HashSolved(msg.sender, solution, bounties[claimIndex].hash);\r\n            bounties[claimIndex].isClaimed = true;\r\n            msg.sender.transfer(bounties[claimIndex].reward);\r\n        } else {\r\n            throw;\r\n        }\r\n    }\r\n    \r\n    function addBountyReward(uint index) payable {\r\n        if (!bounties[index].isClaimed && bounties[index].hash != 0x0) {\r\n            bounties[index].reward += msg.value;\r\n        } else {\r\n            throw;\r\n        }\r\n    }\r\n    \r\n    function collectFees() {\r\n        owner.transfer(fees);\r\n        fees = 0;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"setBounty\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"claimIndex\",\"type\":\"uint256\"},{\"name\":\"solution\",\"type\":\"string\"}],\"name\":\"claimBounty\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"collectFees\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"addBountyReward\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"solver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"solution\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"HashSolved\",\"type\":\"event\"}]","ContractName":"HashBounty","CompilerVersion":"v0.4.11+commit.68ef5810","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://d23598ee6c11cbee2497fdfa5245821d07aeefa4b04a87bb0faf0bdb0e43db65"}]}