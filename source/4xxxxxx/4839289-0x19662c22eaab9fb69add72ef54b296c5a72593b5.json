{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n\r\nlibrary SafeMath {\r\n    \r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\ncontract Ownable {\r\n\r\n    address public owner;\r\n\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function Ownable() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract ERC20Basic {\r\n\r\n    uint256 public totalSupply;\r\n  \r\n    function balanceOf(address who) public view returns (uint256);\r\n  \r\n    function transfer(address to, uint256 value) public returns (bool);\r\n  \r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\ncontract BasicToken is ERC20Basic {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) balances;\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[msg.sender]);\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function balanceOf(address _owner) public view returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract ERC20 is ERC20Basic {\r\n\r\n    function allowance(address owner, address spender) public view returns (uint256);\r\n\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n    mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[_from]);\r\n        require(_value <= allowed[_from][msg.sender]);\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) public view returns (uint256) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n        uint oldValue = allowed[msg.sender][_spender];\r\n        if (_subtractedValue > oldValue) {\r\n            allowed[msg.sender][_spender] = 0;\r\n        } else {\r\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n        }\r\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n}\r\n\r\n\r\ncontract ReleasableToken is StandardToken, Ownable {\r\n\r\n    address public releaseAgent;\r\n\r\n    bool public released = false;\r\n\r\n    event Released();\r\n\r\n    event ReleaseAgentSet(address releaseAgent);\r\n\r\n    event TransferAgentSet(address transferAgent, bool status);\r\n\r\n    mapping (address => bool) public transferAgents;\r\n\r\n    modifier canTransfer(address _sender) {\r\n        require(released || transferAgents[_sender]);\r\n        _;\r\n    }\r\n\r\n    modifier inReleaseState(bool releaseState) {\r\n        require(releaseState == released);\r\n        _;\r\n    }\r\n\r\n    modifier onlyReleaseAgent() {\r\n        require(msg.sender == releaseAgent);\r\n        _;\r\n    }\r\n\r\n    function setReleaseAgent(address addr) public onlyOwner inReleaseState(false) {\r\n        ReleaseAgentSet(addr);\r\n        releaseAgent = addr;\r\n    }\r\n\r\n    function setTransferAgent(address addr, bool state) public onlyOwner inReleaseState(false) {\r\n        TransferAgentSet(addr, state);\r\n        transferAgents[addr] = state;\r\n    }\r\n\r\n    function releaseTokenTransfer() public onlyReleaseAgent {\r\n        Released();\r\n        released = true;\r\n    }\r\n\r\n    function transfer(address _to, \r\n                      uint _value) public canTransfer(msg.sender) returns (bool success) {\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n    function transferFrom(address _from, \r\n                          address _to, \r\n                          uint _value) public canTransfer(_from) returns (bool success) {\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n}\r\n\r\n\r\ncontract TruMintableToken is ReleasableToken {\r\n    \r\n    using SafeMath for uint256;\r\n    using SafeMath for uint;\r\n\r\n    bool public mintingFinished = false;\r\n\r\n    bool public preSaleComplete = false;\r\n\r\n    bool public saleComplete = false;\r\n\r\n    event Minted(address indexed _to, uint256 _amount);\r\n\r\n    event MintFinished(address indexed _executor);\r\n    \r\n    event PreSaleComplete(address indexed _executor);\r\n\r\n    event SaleComplete(address indexed _executor);\r\n\r\n    modifier canMint() {\r\n        require(!mintingFinished);\r\n        _;\r\n    }\r\n\r\n    function mint(address _to, uint256 _amount) public onlyOwner canMint returns (bool) {\r\n        require(_amount > 0);\r\n        require(_to != address(0));\r\n        totalSupply = totalSupply.add(_amount);\r\n        balances[_to] = balances[_to].add(_amount);\r\n        Minted(_to, _amount);\r\n        Transfer(0x0, _to, _amount);\r\n        return true;\r\n    }\r\n\r\n    function finishMinting(bool _presale, bool _sale) public onlyOwner returns (bool) {\r\n        require(_sale != _presale);\r\n        if (_presale == true) {\r\n            preSaleComplete = true;\r\n            PreSaleComplete(msg.sender);\r\n            return true;\r\n        }\r\n        require(preSaleComplete == true);\r\n        saleComplete = true;\r\n        SaleComplete(msg.sender);\r\n        mintingFinished = true;\r\n        MintFinished(msg.sender);\r\n        return true;\r\n    }\r\n}\r\n\r\n\r\ncontract UpgradeAgent {\r\n    \r\n    uint public originalSupply;\r\n\r\n    function isUpgradeAgent() public pure returns (bool) {\r\n        return true;\r\n    }\r\n\r\n    function upgradeFrom(address _from, uint256 _value) public;\r\n}\r\n\r\n\r\ncontract TruUpgradeableToken is StandardToken {\r\n\r\n    using SafeMath for uint256;\r\n    using SafeMath for uint;\r\n\r\n    address public upgradeMaster;\r\n\r\n    UpgradeAgent public upgradeAgent;\r\n\r\n    uint256 public totalUpgraded;\r\n\r\n    bool private isUpgradeable = true;\r\n\r\n    enum UpgradeState {Unknown, NotAllowed, WaitingForAgent, ReadyToUpgrade, Upgrading}\r\n\r\n    event Upgrade(address indexed from, \r\n        address indexed to, \r\n        uint256 upgradeValue);\r\n\r\n    event UpgradeAgentSet(address indexed agent, \r\n        address indexed executor);\r\n\r\n    event NewUpgradedAmount(uint256 originalBalance, \r\n        uint256 newBalance, \r\n        address indexed executor);\r\n    \r\n    modifier onlyUpgradeMaster() {\r\n        require(msg.sender == upgradeMaster);\r\n        _;\r\n    }\r\n\r\n    function TruUpgradeableToken(address _upgradeMaster) public {\r\n        require(_upgradeMaster != address(0));\r\n        upgradeMaster = _upgradeMaster;\r\n    }\r\n\r\n    function upgrade(uint256 _value) public {\r\n        UpgradeState state = getUpgradeState();\r\n        require((state == UpgradeState.ReadyToUpgrade) || (state == UpgradeState.Upgrading));\r\n        require(_value > 0);\r\n        require(balances[msg.sender] >= _value);\r\n        uint256 upgradedAmount = totalUpgraded.add(_value);\r\n        uint256 senderBalance = balances[msg.sender];\r\n        uint256 newSenderBalance = senderBalance.sub(_value);      \r\n        uint256 newTotalSupply = totalSupply.sub(_value);\r\n        balances[msg.sender] = newSenderBalance;\r\n        totalSupply = newTotalSupply;        \r\n        NewUpgradedAmount(totalUpgraded, newTotalSupply, msg.sender);\r\n        totalUpgraded = upgradedAmount;\r\n        upgradeAgent.upgradeFrom(msg.sender, _value);\r\n        Upgrade(msg.sender, upgradeAgent, _value);\r\n    }\r\n\r\n    function setUpgradeAgent(address _agent) public onlyUpgradeMaster {\r\n        require(_agent != address(0));\r\n        require(canUpgrade());\r\n        require(getUpgradeState() != UpgradeState.Upgrading);\r\n        UpgradeAgent newUAgent = UpgradeAgent(_agent);\r\n        require(newUAgent.isUpgradeAgent());\r\n        require(newUAgent.originalSupply() == totalSupply);\r\n        UpgradeAgentSet(upgradeAgent, msg.sender);\r\n        upgradeAgent = newUAgent;\r\n    }\r\n\r\n    function getUpgradeState() public constant returns(UpgradeState) {\r\n        if (!canUpgrade())\r\n            return UpgradeState.NotAllowed;\r\n        else if (upgradeAgent == address(0))\r\n            return UpgradeState.WaitingForAgent;\r\n        else if (totalUpgraded == 0)\r\n            return UpgradeState.ReadyToUpgrade;\r\n        else \r\n            return UpgradeState.Upgrading;\r\n    }\r\n\r\n    function setUpgradeMaster(address _master) public onlyUpgradeMaster {\r\n        require(_master != address(0));\r\n        upgradeMaster = _master;\r\n    }\r\n\r\n    function canUpgrade() public constant returns(bool) {\r\n        return isUpgradeable;\r\n    }\r\n}\r\n\r\n\r\ncontract TruReputationToken is TruMintableToken, TruUpgradeableToken {\r\n\r\n    using SafeMath for uint256;\r\n    \r\n    using SafeMath for uint;\r\n\r\n    uint8 public constant decimals = 18;\r\n\r\n    string public constant name = \"Tru Reputation Token\";\r\n\r\n    string public constant symbol = \"TRU\";\r\n\r\n    address public execBoard = 0x0;\r\n\r\n    event BoardAddressChanged(address indexed oldAddress, \r\n        address indexed newAddress, \r\n        address indexed executor);\r\n\r\n    modifier onlyExecBoard() {\r\n        require(msg.sender == execBoard);\r\n        _;\r\n    }\r\n\r\n    function TruReputationToken() public TruUpgradeableToken(msg.sender) {\r\n        execBoard = msg.sender;\r\n        BoardAddressChanged(0x0, msg.sender, msg.sender);\r\n    }\r\n    \r\n    function changeBoardAddress(address _newAddress) public onlyExecBoard {\r\n        require(_newAddress != address(0));\r\n        require(_newAddress != execBoard);\r\n        address oldAddress = execBoard;\r\n        execBoard = _newAddress;\r\n        BoardAddressChanged(oldAddress, _newAddress, msg.sender);\r\n    }\r\n\r\n    function canUpgrade() public constant returns(bool) {\r\n        return released && super.canUpgrade();\r\n    }\r\n\r\n    function setUpgradeMaster(address _master) public onlyOwner {\r\n        super.setUpgradeMaster(_master);\r\n    }\r\n}\r\n\r\n\r\ncontract Haltable is Ownable {\r\n\r\n    bool public halted;\r\n\r\n    event HaltStatus(bool status);\r\n\r\n    modifier stopInEmergency {\r\n        require(!halted);\r\n        _;\r\n    }\r\n\r\n    modifier onlyInEmergency {\r\n        require(halted);\r\n        _;\r\n    }\r\n\r\n    function halt() external onlyOwner {\r\n        halted = true;\r\n        HaltStatus(halted);\r\n    }\r\n\r\n    function unhalt() external onlyOwner onlyInEmergency {\r\n        halted = false;\r\n        HaltStatus(halted);\r\n    }\r\n}\r\n\r\n\r\ncontract TruSale is Ownable, Haltable {\r\n    \r\n    using SafeMath for uint256;\r\n  \r\n    TruReputationToken public truToken;\r\n\r\n    uint256 public saleStartTime;\r\n    \r\n    uint256 public saleEndTime;\r\n\r\n    uint public purchaserCount = 0;\r\n\r\n    address public multiSigWallet;\r\n\r\n    uint256 public constant BASE_RATE = 1000;\r\n  \r\n    uint256 public constant PRESALE_RATE = 1250;\r\n\r\n    uint256 public constant SALE_RATE = 1125;\r\n\r\n    uint256 public constant MIN_AMOUNT = 1 * 10**18;\r\n\r\n    uint256 public constant MAX_AMOUNT = 20 * 10**18;\r\n\r\n    uint256 public weiRaised;\r\n\r\n    uint256 public cap;\r\n\r\n    bool public isCompleted = false;\r\n\r\n    bool public isPreSale = false;\r\n\r\n    bool public isCrowdSale = false;\r\n\r\n    uint256 public soldTokens = 0;\r\n\r\n    mapping(address => uint256) public purchasedAmount;\r\n\r\n    mapping(address => uint256) public tokenAmount;\r\n\r\n    mapping (address => bool) public purchaserWhiteList;\r\n\r\n    event TokenPurchased(\r\n        address indexed purchaser, \r\n        address indexed recipient, \r\n        uint256 weiValue, \r\n        uint256 tokenAmount);\r\n\r\n    event WhiteListUpdated(address indexed purchaserAddress, \r\n        bool whitelistStatus, \r\n        address indexed executor);\r\n\r\n    event EndChanged(uint256 oldEnd, \r\n        uint256 newEnd, \r\n        address indexed executor);\r\n\r\n    event Completed(address indexed executor);\r\n\r\n    modifier onlyTokenOwner(address _tokenOwner) {\r\n        require(msg.sender == _tokenOwner);\r\n        _;\r\n    }\r\n\r\n    function TruSale(uint256 _startTime, \r\n        uint256 _endTime, \r\n        address _token, \r\n        address _saleWallet) public {\r\n        require(_token != address(0));\r\n        TruReputationToken tToken = TruReputationToken(_token);\r\n        address tokenOwner = tToken.owner();\r\n        createSale(_startTime, _endTime, _token, _saleWallet, tokenOwner);\r\n    }\r\n\r\n    function buy() public payable stopInEmergency {\r\n        require(checkSaleValid());\r\n        validatePurchase(msg.sender);\r\n    }\r\n\r\n    function updateWhitelist(address _purchaser, uint _status) public onlyOwner {\r\n        require(_purchaser != address(0));\r\n        bool boolStatus = false;\r\n        if (_status == 0) {\r\n            boolStatus = false;\r\n        } else if (_status == 1) {\r\n            boolStatus = true;\r\n        } else {\r\n            revert();\r\n        }\r\n        WhiteListUpdated(_purchaser, boolStatus, msg.sender);\r\n        purchaserWhiteList[_purchaser] = boolStatus;\r\n    }\r\n\r\n    function changeEndTime(uint256 _endTime) public onlyOwner {\r\n        require(_endTime >= saleStartTime);\r\n        EndChanged(saleEndTime, _endTime, msg.sender);\r\n        saleEndTime = _endTime;\r\n    }\r\n\r\n    function hasEnded() public constant returns (bool) {\r\n        bool isCapHit = weiRaised >= cap;\r\n        bool isExpired = now > saleEndTime;\r\n        return isExpired || isCapHit;\r\n    }\r\n    \r\n    function checkSaleValid() internal constant returns (bool) {\r\n        bool afterStart = now >= saleStartTime;\r\n        bool beforeEnd = now <= saleEndTime;\r\n        bool capNotHit = weiRaised.add(msg.value) <= cap;\r\n        return afterStart && beforeEnd && capNotHit;\r\n    }\r\n\r\n    function validatePurchase(address _purchaser) internal stopInEmergency {\r\n        require(_purchaser != address(0));\r\n        require(msg.value > 0);\r\n        buyTokens(_purchaser);\r\n    }\r\n\r\n    function forwardFunds() internal {\r\n        multiSigWallet.transfer(msg.value);\r\n    }\r\n\r\n    function createSale(\r\n        uint256 _startTime, \r\n        uint256 _endTime, \r\n        address _token, \r\n        address _saleWallet, \r\n        address _tokenOwner) \r\n        internal onlyTokenOwner(_tokenOwner) \r\n    {\r\n        require(now <= _startTime);\r\n        require(_endTime >= _startTime);\r\n        require(_saleWallet != address(0));\r\n        truToken = TruReputationToken(_token);\r\n        multiSigWallet = _saleWallet;\r\n        saleStartTime = _startTime;\r\n        saleEndTime = _endTime;\r\n    }\r\n\r\n    function buyTokens(address _purchaser) private {\r\n        uint256 weiTotal = msg.value;\r\n        require(weiTotal >= MIN_AMOUNT);\r\n        if (weiTotal > MAX_AMOUNT) {\r\n            require(purchaserWhiteList[msg.sender]); \r\n        }\r\n        if (purchasedAmount[msg.sender] != 0 && !purchaserWhiteList[msg.sender]) {\r\n            uint256 totalPurchased = purchasedAmount[msg.sender];\r\n            totalPurchased = totalPurchased.add(weiTotal);\r\n            require(totalPurchased < MAX_AMOUNT);\r\n        }\r\n        uint256 tokenRate = BASE_RATE;    \r\n        if (isPreSale) {\r\n            tokenRate = PRESALE_RATE;\r\n        }\r\n        if (isCrowdSale) {\r\n            tokenRate = SALE_RATE;\r\n        }\r\n        uint256 noOfTokens = weiTotal.mul(tokenRate);\r\n        weiRaised = weiRaised.add(weiTotal);\r\n        if (purchasedAmount[msg.sender] == 0) {\r\n            purchaserCount++;\r\n        }\r\n        soldTokens = soldTokens.add(noOfTokens);\r\n        purchasedAmount[msg.sender] = purchasedAmount[msg.sender].add(msg.value);\r\n        tokenAmount[msg.sender] = tokenAmount[msg.sender].add(noOfTokens);\r\n        truToken.mint(_purchaser, noOfTokens);\r\n        TokenPurchased(msg.sender,\r\n        _purchaser,\r\n        weiTotal,\r\n        noOfTokens);\r\n        forwardFunds();\r\n    }\r\n}\r\n\r\n\r\ncontract TruPreSale is TruSale {\r\n    \r\n    using SafeMath for uint256;\r\n    \r\n    uint256 public constant PRESALE_CAP = 4000 * 10**18;\r\n    \r\n    function TruPreSale(\r\n        uint256 _startTime, \r\n        uint256 _endTime, \r\n        address _token,\r\n        address _saleWallet) public TruSale(_startTime, _endTime, _token, _saleWallet) \r\n    {\r\n        isPreSale = true;\r\n        isCrowdSale = false;\r\n        cap = PRESALE_CAP;\r\n    }\r\n    \r\n    function finalise() public onlyOwner {\r\n        require(!isCompleted);\r\n        require(hasEnded());\r\n\r\n        completion();\r\n        Completed(msg.sender);\r\n\r\n        isCompleted = true;\r\n    }\r\n\r\n    function completion() internal {\r\n        uint256 poolTokens = truToken.totalSupply();\r\n        truToken.mint(multiSigWallet, poolTokens);\r\n        truToken.finishMinting(true, false);\r\n        truToken.transferOwnership(msg.sender);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"truToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"purchaserCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isCrowdSale\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_purchaser\",\"type\":\"address\"},{\"name\":\"_status\",\"type\":\"uint256\"}],\"name\":\"updateWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_endTime\",\"type\":\"uint256\"}],\"name\":\"changeEndTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRESALE_RATE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BASE_RATE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"purchasedAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"multiSigWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isPreSale\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"halt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"soldTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SALE_RATE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalise\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"halted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRESALE_CAP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unhalt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_AMOUNT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MIN_AMOUNT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleEndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"purchaserWhiteList\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isCompleted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_startTime\",\"type\":\"uint256\"},{\"name\":\"_endTime\",\"type\":\"uint256\"},{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_saleWallet\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"weiValue\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaserAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"whitelistStatus\",\"type\":\"bool\"},{\"indexed\":true,\"name\":\"executor\",\"type\":\"address\"}],\"name\":\"WhiteListUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldEnd\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newEnd\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"executor\",\"type\":\"address\"}],\"name\":\"EndChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"executor\",\"type\":\"address\"}],\"name\":\"Completed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"HaltStatus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"TruPreSale","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000005a4dfb20000000000000000000000000000000000000000000000000000000005a9d15200000000000000000000000009d8571a8f168251851748cbc98b0e7168d249c7d00000000000000000000000033358ad0d06fafa08aeebffb3f66acd05f6d08be","Library":"","SwarmSource":"bzzr://f1ea5d28bb6d79d007c54b5f0b515eaa1b406927f6562beaeb398cce41fe0ad0"}]}