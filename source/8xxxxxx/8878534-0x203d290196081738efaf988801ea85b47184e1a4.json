{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\npragma experimental ABIEncoderV2;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be aplied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * > Note: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// Fund for Cycling Activity reward\r\ncontract Fund is\r\n    Ownable\r\n{\r\n  /////////////////////////\r\n  // Member Variable\r\n  /*\r\n    name:               member name or nickname\r\n    usedKm:             when member claim, usedKm add activityKm\r\n    activityKm:         activityKm for claim, just valid current activity\r\n    updatedActivityID:  last km updated activityID\r\n    isClaimed:            is current activity claimed?\r\n\r\n    * if no claim and activity over, activityKm invalid\r\n  */\r\n  struct Member {\r\n    string name;\r\n    uint256 usedKm;\r\n    uint256 activityKm;\r\n    uint256 updatedActivityID;\r\n    bool isClaimed;\r\n  }\r\n\r\n  mapping(address=>Member) public members;\r\n  mapping(address=>bool) public isMember;\r\n  // End of Member Variable\r\n  /////////////////////////\r\n\r\n  /////////////////////////\r\n  // Activity Variable\r\n  enum ActivityStatus {\r\n    END,    // default Activity End\r\n    START,\r\n    CLAIM\r\n  }\r\n\r\n  uint256 public totalKm;\r\n  uint256 public activityID;\r\n  uint256 public activityTotalKm;\r\n  ActivityStatus public activityStatus;\r\n\r\n  mapping(uint256=>bool) private isUsedActivityID;\r\n  // End of Activity Variable\r\n  /////////////////////////\r\n\r\n  /////////////////////////\r\n  // Reward Variable\r\n  uint256 public totalReward;\r\n  uint256 public usedReward;\r\n  // End of Reward Variable\r\n  /////////////////////////\r\n\r\n  /////////////////////////\r\n  // Events\r\n  event RegisterMember(address member, string name);\r\n  event DeregisterMember(address member);\r\n  event SetName(address member, string name);\r\n  event SetAddress(address oldAddress,  address newAddress);\r\n  event StartActivity(uint256 id, uint256 reward);\r\n  event AdditionalReward(uint256 id, uint256 addReward);\r\n  event AddKm(uint256 id, address member, uint256 addKm);\r\n  event SubKm(uint256 id, address member, uint256 subKm);\r\n  event StartClaim();\r\n  event Claim(uint256 id, address member, uint256 activityKm, uint256 reward);\r\n  event EndActivity(uint256 surplus);\r\n  // End of Events\r\n  /////////////////////////\r\n\r\n  /////////////////////////\r\n  // Member Manage\r\n  modifier onlyMember() {\r\n    require(\r\n      isMember[msg.sender],\r\n      \"NOT_MEMBER\"\r\n    );\r\n    _;\r\n  }\r\n\r\n  function registerMembers(address[] memory _members, string[] memory _names) public onlyOwner {\r\n    require(\r\n      _members.length == _names.length,\r\n      \"REGISTER_LENGTH_NOT_EQUAL\"\r\n    );\r\n\r\n    for(uint i = 0; i < _members.length; i++) {\r\n      require(\r\n        !isMember[_members[i]],\r\n        \"MEMBER_REGISTERED\"\r\n      );\r\n\r\n      members[_members[i]] = Member({\r\n        name: _names[i],\r\n        usedKm: 0,\r\n        activityKm: 0,\r\n        updatedActivityID: 0,\r\n        isClaimed: false});\r\n      isMember[_members[i]] = true;\r\n\r\n      emit RegisterMember(_members[i], _names[i]);\r\n    }\r\n  }\r\n\r\n  function deregisterMembers(address[] memory _members) public onlyOwner {\r\n    for(uint i = 0; i < _members.length; i++) {\r\n      isMember[_members[i]] = false;\r\n\r\n      emit DeregisterMember(_members[i]);\r\n    }\r\n  }\r\n\r\n  function setName(string memory _name) public onlyMember {\r\n    members[msg.sender].name = _name;\r\n\r\n    emit SetName(msg.sender, _name);\r\n  }\r\n\r\n  function setAddress(address _newAddress) public onlyMember {\r\n    require(\r\n      !isMember[_newAddress],\r\n      \"MEMBER_REGISTERED\"\r\n    );\r\n\r\n    members[_newAddress] = members[msg.sender];\r\n    isMember[_newAddress] = true;\r\n    isMember[msg.sender] = false;\r\n\r\n    emit SetAddress(msg.sender, _newAddress);\r\n  }\r\n  // End of Member Manage\r\n  /////////////////////////\r\n\r\n\r\n  /////////////////////////\r\n  // Organize Activity\r\n  /* activity flow:\r\n    start(owner) ->  update Km(owner, add or sub) -> startClaim(owner)\r\n    -> claim(member) -> end(owner)\r\n  */\r\n  function startActivity(uint256 _id) public payable onlyOwner {\r\n    require(\r\n      activityStatus == ActivityStatus.END,\r\n      \"ACTIVITY_NOT_END\"\r\n    );\r\n\r\n    require(\r\n      !isUsedActivityID[_id],\r\n      \"USED_ACTIVITYID\"\r\n    );\r\n\r\n    activityID = _id;\r\n    activityStatus = ActivityStatus.START;\r\n\r\n    totalReward = msg.value;\r\n\r\n    isUsedActivityID[activityID] = true;\r\n\r\n    emit StartActivity(activityID, totalReward);\r\n  }\r\n\r\n  // Send more ETH to Fund Conctact be activity reward\r\n  function() external payable{\r\n    require(\r\n      activityStatus == ActivityStatus.START,\r\n      \"ACTIVITY_NOT_START\"\r\n    );\r\n\r\n    totalReward = SafeMath.add(totalReward, msg.value);\r\n\r\n    emit AdditionalReward(activityID, msg.value);\r\n  }\r\n\r\n  function addKm(address[] memory _members, uint256[] memory _kms) public onlyOwner{\r\n    require(\r\n      activityStatus == ActivityStatus.START,\r\n      \"ACTIVITY_NOT_START\"\r\n    );\r\n\r\n    require(\r\n      _members.length == _kms.length,\r\n      \"UPDATEKM_LENGTH_NOT_EQUAL\"\r\n    );\r\n\r\n    for(uint i = 0; i < _members.length; i++) {\r\n      require(\r\n        isMember[_members[i]],\r\n        \"NOT_MEMBER\"\r\n      );\r\n\r\n      if(members[_members[i]].updatedActivityID != activityID) {\r\n        members[_members[i]].activityKm = 0;\r\n        members[_members[i]].updatedActivityID = activityID;\r\n        members[_members[i]].isClaimed = false;\r\n      }\r\n\r\n      members[_members[i]].activityKm = SafeMath.add(\r\n        members[_members[i]].activityKm,\r\n        _kms[i]); \r\n\r\n      activityTotalKm = SafeMath.add(activityTotalKm, _kms[i]);\r\n\r\n      emit AddKm(activityID, _members[i], _kms[i]);\r\n    }\r\n  }\r\n\r\n  function subKm(address[] memory _members, uint256[] memory _kms) public onlyOwner{\r\n    require(\r\n      activityStatus == ActivityStatus.START,\r\n      \"ACTIVITY_NOT_START\"\r\n    );\r\n\r\n    require(\r\n      _members.length == _kms.length,\r\n      \"UPDATEKM_LENGTH_NOT_EQUAL\"\r\n    );\r\n\r\n    for(uint i = 0; i < _members.length; i++) {\r\n      require(\r\n        isMember[_members[i]],\r\n        \"NOT_MEMBER\"\r\n      );\r\n\r\n      require(\r\n        members[_members[i]].updatedActivityID == activityID,\r\n        \"NO_KM_UPDATE\"\r\n      );\r\n\r\n      require(\r\n        members[_members[i]].activityKm > _kms[i],\r\n        \"KM_MORE_THEN_ACTIVITYKM\"\r\n      );\r\n\r\n      members[_members[i]].activityKm = SafeMath.sub(\r\n        members[_members[i]].activityKm,\r\n        _kms[i]);\r\n\r\n      activityTotalKm = SafeMath.sub(activityTotalKm, _kms[i]);\r\n\r\n      emit SubKm(activityID, _members[i], _kms[i]);\r\n    }\r\n  }\r\n\r\n  function startClaim() public onlyOwner {\r\n    require(\r\n      activityStatus == ActivityStatus.START,\r\n      \"ACTIVITY_NOT_START\"\r\n    );\r\n\r\n    activityStatus = ActivityStatus.CLAIM;\r\n\r\n    emit StartClaim();\r\n  }\r\n\r\n  function claim() public onlyMember {\r\n    require(\r\n      activityStatus == ActivityStatus.CLAIM,\r\n      \"ACTIVITY_NOT_CLAIM\"\r\n    );\r\n\r\n    require(\r\n      members[msg.sender].updatedActivityID == activityID,\r\n      \"ACTIVITYID_NOT_EQUAL\"\r\n    );\r\n\r\n    require(\r\n      !members[msg.sender].isClaimed,\r\n      \"IS_CLAIMED\"\r\n    );\r\n\r\n    members[msg.sender].isClaimed = true;\r\n    members[msg.sender].usedKm = SafeMath.add(\r\n      members[msg.sender].usedKm,\r\n      members[msg.sender].activityKm\r\n    );\r\n    totalKm = SafeMath.add(totalKm, members[msg.sender].activityKm);\r\n\r\n    uint256 value = SafeMath.div(\r\n      SafeMath.mul(\r\n        totalReward,\r\n        members[msg.sender].activityKm),\r\n      activityTotalKm\r\n    );\r\n\r\n    usedReward = SafeMath.add(usedReward, value);\r\n    msg.sender.transfer(value);\r\n\r\n    emit Claim(activityID, msg.sender, members[msg.sender].activityKm, value);\r\n  }\r\n\r\n  // endActivity whatever activity status\r\n  function endActivity() public onlyOwner {\r\n    activityStatus = ActivityStatus.END;\r\n\r\n    activityID = 0;\r\n    activityTotalKm = 0;\r\n    totalReward = 0;\r\n    usedReward = 0;\r\n\r\n    uint256 value = address(this).balance;\r\n    msg.sender.transfer(value);\r\n\r\n    emit EndActivity(value);\r\n  }\r\n  // End of Organize Activity\r\n  /////////////////////////\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"addKm\",\"type\":\"uint256\"}],\"name\":\"AddKm\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"addReward\",\"type\":\"uint256\"}],\"name\":\"AdditionalReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"activityKm\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"}],\"name\":\"DeregisterMember\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"surplus\",\"type\":\"uint256\"}],\"name\":\"EndActivity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"RegisterMember\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"SetAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"SetName\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"StartActivity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"StartClaim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"subKm\",\"type\":\"uint256\"}],\"name\":\"SubKm\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[],\"name\":\"activityID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"activityStatus\",\"outputs\":[{\"internalType\":\"enum Fund.ActivityStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"activityTotalKm\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_members\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_kms\",\"type\":\"uint256[]\"}],\"name\":\"addKm\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_members\",\"type\":\"address[]\"}],\"name\":\"deregisterMembers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"endActivity\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isMember\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"members\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"usedKm\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"activityKm\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedActivityID\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isClaimed\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_members\",\"type\":\"address[]\"},{\"internalType\":\"string[]\",\"name\":\"_names\",\"type\":\"string[]\"}],\"name\":\"registerMembers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"setAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"setName\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"startActivity\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startClaim\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_members\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_kms\",\"type\":\"uint256[]\"}],\"name\":\"subKm\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalKm\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"usedReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Fund","CompilerVersion":"v0.5.12+commit.7709ece9","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://26dde7499e3710624ebb079645dcf725594e2843070e9dc7c9ecd749f825eabf"}]}