{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n\r\n\r\n/**\r\n * @title ERC20 interface \r\n * \r\n */\r\ncontract ERC20 {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n \r\n\r\n/**\r\n * @title OwnableWithAdmin \r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract OwnableWithAdmin {\r\n  address public owner;\r\n  address public adminOwner;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n    adminOwner = msg.sender;\r\n  }\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the admin.\r\n   */\r\n  modifier onlyAdmin() {\r\n    require(msg.sender == adminOwner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner or admin.\r\n   */\r\n  modifier onlyOwnerOrAdmin() {\r\n    require(msg.sender == adminOwner || msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current adminOwner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferAdminOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(adminOwner, newOwner);\r\n    adminOwner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n  /**\r\n  * @dev Multiplies two numbers, reverts on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n      // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n      // benefit is lost if 'b' is also tested.\r\n      // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n      if (a == 0) {\r\n          return 0;\r\n      }\r\n\r\n      uint256 c = a * b;\r\n      require(c / a == b);\r\n\r\n      return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n      // Solidity only automatically asserts when dividing by 0\r\n      require(b > 0);\r\n      uint256 c = a / b;\r\n      // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n      return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n      require(b <= a);\r\n      uint256 c = a - b;\r\n\r\n      return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, reverts on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n      uint256 c = a + b;\r\n      require(c >= a);\r\n\r\n      return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n  * reverts when dividing by zero.\r\n  */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n      require(b != 0);\r\n      return a % b;\r\n  }\r\n \r\n\r\n  function uint2str(uint i) internal pure returns (string){\r\n      if (i == 0) return \"0\";\r\n      uint j = i;\r\n      uint length;\r\n      while (j != 0){\r\n          length++;\r\n          j /= 10;\r\n      }\r\n      bytes memory bstr = new bytes(length);\r\n      uint k = length - 1;\r\n      while (i != 0){\r\n          bstr[k--] = byte(48 + i % 10);\r\n          i /= 10;\r\n      }\r\n      return string(bstr);\r\n  }\r\n \r\n  \r\n}\r\n\r\n\r\n\r\n/**\r\n * @title AirDrop Light Direct Airdrop\r\n * @notice Contract is not payable.\r\n * Owner or admin can allocate tokens.\r\n * Tokens will be released direct. \r\n *\r\n *\r\n */\r\ncontract AirDropLight is OwnableWithAdmin {\r\n  using SafeMath for uint256;\r\n\r\n  event AirDropFailed(address recipient, uint256 amount);\r\n  \r\n  // Amount of tokens claimed\r\n  uint256 public grandTotalClaimed = 0;\r\n\r\n  // The token being sold\r\n  ERC20 public token;\r\n\r\n  // Max amount in one airdrop\r\n  uint256  maxDirect = 1500 * (10**uint256(18));\r\n\r\n  // Recipients\r\n  mapping(address => bool) public recipients;\r\n\r\n  // List of all addresses\r\n  address[] public addresses;\r\n   \r\n  constructor(ERC20 _token) public {\r\n     \r\n    require(_token != address(0));\r\n\r\n    token = _token;\r\n\r\n  }\r\n\r\n  \r\n  /**\r\n   * @dev fallback function ***DO NOT OVERRIDE***\r\n   */\r\n  function () public {\r\n    //Not payable\r\n  }\r\n\r\n\r\n  /**\r\n    * @dev Transfer tokens direct\r\n    * @param _recipients Array of wallets\r\n    * @param _tokenAmount Amount Allocated tokens + 18 decimals\r\n    */\r\n  function transferManyDirect (address[] _recipients, uint256 _tokenAmount) onlyOwnerOrAdmin  public{\r\n    for (uint256 i = 0; i < _recipients.length; i++) {\r\n      \r\n      if(!recipients[_recipients[i]] && _tokenAmount < maxDirect){        \r\n        transferDirect(_recipients[i],_tokenAmount);\r\n      }else{\r\n        emit AirDropFailed(_recipients[i], _tokenAmount);\r\n      }\r\n      \r\n    }    \r\n  }\r\n\r\n        \r\n  /**\r\n    * @dev Transfer tokens direct to recipient without allocation. \r\n    * _recipient can only get one transaction and _tokenAmount can't be above maxDirect value\r\n    *  \r\n    */\r\n  function transferDirect(address _recipient,uint256 _tokenAmount) public{\r\n\r\n    // Check if contract has tokens\r\n    require(token.balanceOf(this)>=_tokenAmount);\r\n    \r\n    // Check max value\r\n    require(_tokenAmount < maxDirect );\r\n\r\n    // Check if recipient already have received tokens\r\n    // Only one airdrop per _recipient\r\n    require(!recipients[_recipient]); \r\n    recipients[_recipient] = true;\r\n  \r\n    // Transfer tokens\r\n    require(token.transfer(_recipient, _tokenAmount));\r\n\r\n    // Add claimed tokens to grandTotalClaimed\r\n    grandTotalClaimed = grandTotalClaimed.add(_tokenAmount);\r\n\r\n\r\n    // Emit event success\r\n    // emit AirDropSuccess(_recipient, _tokenAmount); \r\n     \r\n  }\r\n  \r\n\r\n  // Allow transfer of tokens back to owner or reserve wallet\r\n  function returnTokens() public onlyOwner {\r\n    uint256 balance = token.balanceOf(this);\r\n    require(token.transfer(owner, balance));\r\n  }\r\n\r\n  // Owner can transfer tokens that are sent here by mistake\r\n  function refundTokens(address _recipient, ERC20 _token) public onlyOwner {\r\n    uint256 balance = _token.balanceOf(this);\r\n    require(_token.transfer(_recipient, balance));\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title BNXAirDropLight\r\n *  \r\n *\r\n*/\r\ncontract BNXAirDropLight is AirDropLight {\r\n  constructor(   \r\n    ERC20 _token\r\n  ) public AirDropLight(_token) {\r\n\r\n     \r\n\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferAdminOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"adminOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipients\",\"type\":\"address[]\"},{\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"transferManyDirect\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipient\",\"type\":\"address\"},{\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"transferDirect\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipient\",\"type\":\"address\"},{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"refundTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"grandTotalClaimed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"recipients\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"addresses\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"returnTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AirDropFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"BNXAirDropLight","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000060ce1dd8f8bffd69994170ae66bc50be8bd6b839","Library":"","LicenseType":"None","SwarmSource":"bzzr://f2490515d70b155ce3e2811f47c0447e20b5593a04b1a863af61bba9b9332b86"}]}