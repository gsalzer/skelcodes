{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/lib/interface/ICelerWallet.sol\r\n\r\npragma solidity ^0.5.1;\r\n\r\n/**\r\n * @title CelerWallet interface\r\n */\r\ninterface ICelerWallet {\r\n    function create(address[] calldata _owners, address _operator, bytes32 _nonce) external returns(bytes32);\r\n\r\n    function depositETH(bytes32 _walletId) external payable;\r\n\r\n    function depositERC20(bytes32 _walletId, address _tokenAddress, uint _amount) external;\r\n    \r\n    function withdraw(bytes32 _walletId, address _tokenAddress, address _receiver, uint _amount) external;\r\n\r\n    function transferToWallet(bytes32 _fromWalletId, bytes32 _toWalletId, address _tokenAddress, address _receiver, uint _amount) external;\r\n\r\n    function transferOperatorship(bytes32 _walletId, address _newOperator) external;\r\n\r\n    function proposeNewOperator(bytes32 _walletId, address _newOperator) external;\r\n\r\n    function drainToken(address _tokenAddress, address _receiver, uint _amount) external;\r\n\r\n    function getWalletOwners(bytes32 _walletId) external view returns(address[] memory);\r\n\r\n    function getOperator(bytes32 _walletId) external view returns(address);\r\n\r\n    function getBalance(bytes32 _walletId, address _tokenAddress) external view returns(uint);\r\n\r\n    function getProposedNewOperator(bytes32 _walletId) external view returns(address);\r\n\r\n    function getProposalVote(bytes32 _walletId, address _owner) external view returns(bool);\r\n\r\n    event CreateWallet(bytes32 indexed walletId, address[] indexed owners, address indexed operator);\r\n\r\n    event DepositToWallet(bytes32 indexed walletId, address indexed tokenAddress, uint amount);\r\n\r\n    event WithdrawFromWallet(bytes32 indexed walletId, address indexed tokenAddress, address indexed receiver, uint amount);\r\n\r\n    event TransferToWallet(bytes32 indexed fromWalletId, bytes32 indexed toWalletId, address indexed tokenAddress, address receiver, uint amount);\r\n\r\n    event ChangeOperator(bytes32 indexed walletId, address indexed oldOperator, address indexed newOperator);\r\n\r\n    event ProposeNewOperator(bytes32 indexed walletId, address indexed newOperator, address indexed proposer);\r\n\r\n    event DrainToken(address indexed tokenAddress, address indexed receiver, uint amount);\r\n}\r\n\r\n// File: contracts/lib/interface/IEthPool.sol\r\n\r\npragma solidity ^0.5.1;\r\n\r\n/**\r\n * @title EthPool interface\r\n */\r\ninterface IEthPool {\r\n    function deposit(address _receiver) external payable;\r\n\r\n    function withdraw(uint _value) external;\r\n\r\n    function approve(address _spender, uint _value) external returns (bool);\r\n\r\n    function transferFrom(address _from, address payable _to, uint _value) external returns (bool);\r\n\r\n    function transferToCelerWallet(address _from, address _walletAddr, bytes32 _walletId, uint _value) external returns (bool);\r\n\r\n    function increaseAllowance(address _spender, uint _addedValue) external returns (bool);\r\n\r\n    function decreaseAllowance(address _spender, uint _subtractedValue) external returns (bool);\r\n\r\n    function balanceOf(address _owner) external view returns (uint);\r\n\r\n    function allowance(address _owner, address _spender) external view returns (uint);\r\n\r\n    event Deposit(address indexed receiver, uint value);\r\n    \r\n    // transfer from \"from\" account inside EthPool to real \"to\" address outside EthPool\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    \r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\n// File: contracts/lib/interface/IPayRegistry.sol\r\n\r\npragma solidity ^0.5.1;\r\n\r\n/**\r\n * @title PayRegistry interface\r\n */\r\ninterface IPayRegistry {\r\n    function calculatePayId(bytes32 _payHash, address _setter) external pure returns(bytes32);\r\n\r\n    function setPayAmount(bytes32 _payHash, uint _amt) external;\r\n\r\n    function setPayDeadline(bytes32 _payHash, uint _deadline) external;\r\n\r\n    function setPayInfo(bytes32 _payHash, uint _amt, uint _deadline) external;\r\n\r\n    function setPayAmounts(bytes32[] calldata _payHashes, uint[] calldata _amts) external;\r\n\r\n    function setPayDeadlines(bytes32[] calldata _payHashes, uint[] calldata _deadlines) external;\r\n\r\n    function setPayInfos(bytes32[] calldata _payHashes, uint[] calldata _amts, uint[] calldata _deadlines) external;\r\n\r\n    function getPayAmounts(\r\n        bytes32[] calldata _payIds,\r\n        uint _lastPayResolveDeadline\r\n    ) external view returns(uint[] memory);\r\n\r\n    function getPayInfo(bytes32 _payId) external view returns(uint, uint);\r\n\r\n    event PayInfoUpdate(bytes32 indexed payId, uint amount, uint resolveDeadline);\r\n}\r\n\r\n// File: contracts/lib/data/Pb.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n// runtime proto sol library\r\nlibrary Pb {\r\n    enum WireType { Varint, Fixed64, LengthDelim, StartGroup, EndGroup, Fixed32 }\r\n\r\n    struct Buffer {\r\n        uint idx;  // the start index of next read. when idx=b.length, we're done\r\n        bytes b;   // hold serialized proto msg, readonly\r\n    }\r\n\r\n    // create a new in-memory Buffer object from raw msg bytes\r\n    function fromBytes(bytes memory raw) internal pure returns (Buffer memory buf) {\r\n        buf.b = raw;\r\n        buf.idx = 0;\r\n    }\r\n\r\n    // whether there are unread bytes\r\n    function hasMore(Buffer memory buf) internal pure returns (bool) {\r\n        return buf.idx < buf.b.length;\r\n    }\r\n\r\n    // decode current field number and wiretype\r\n    function decKey(Buffer memory buf) internal pure returns (uint tag, WireType wiretype) {\r\n        uint v = decVarint(buf);\r\n        tag = v / 8;\r\n        wiretype = WireType(v & 7);\r\n    }\r\n\r\n    // count tag occurrences, return an array due to no memory map support\r\n\t// have to create array for (maxtag+1) size. cnts[tag] = occurrences\r\n\t// should keep buf.idx unchanged because this is only a count function\r\n    function cntTags(Buffer memory buf, uint maxtag) internal pure returns (uint[] memory cnts) {\r\n        uint originalIdx = buf.idx;\r\n        cnts = new uint[](maxtag+1);  // protobuf's tags are from 1 rather than 0\r\n        uint tag;\r\n        WireType wire;\r\n        while (hasMore(buf)) {\r\n            (tag, wire) = decKey(buf);\r\n            cnts[tag] += 1;\r\n            skipValue(buf, wire);\r\n        }\r\n        buf.idx = originalIdx;\r\n    }\r\n\r\n    // read varint from current buf idx, move buf.idx to next read, return the int value\r\n    function decVarint(Buffer memory buf) internal pure returns (uint v) {\r\n        bytes10 tmp;  // proto int is at most 10 bytes (7 bits can be used per byte)\r\n        bytes memory bb = buf.b;  // get buf.b mem addr to use in assembly\r\n        v = buf.idx;  // use v to save one additional uint variable\r\n        assembly {\r\n            tmp := mload(add(add(bb, 32), v)) // load 10 bytes from buf.b[buf.idx] to tmp\r\n        }\r\n        uint b; // store current byte content\r\n        v = 0; // reset to 0 for return value\r\n        for (uint i=0; i<10; i++) {\r\n            assembly {\r\n                b := byte(i, tmp)  // don't use tmp[i] because it does bound check and costs extra\r\n            }\r\n            v |= (b & 0x7F) << (i * 7);\r\n            if (b & 0x80 == 0) {\r\n                buf.idx += i + 1;\r\n                return v;\r\n            }\r\n        }\r\n        revert(); // i=10, invalid varint stream\r\n    }\r\n\r\n    // read length delimited field and return bytes\r\n    function decBytes(Buffer memory buf) internal pure returns (bytes memory b) {\r\n        uint len = decVarint(buf);\r\n        uint end = buf.idx + len;\r\n        require(end <= buf.b.length);  // avoid overflow\r\n        b = new bytes(len);\r\n        bytes memory bufB = buf.b;  // get buf.b mem addr to use in assembly\r\n        uint bStart;\r\n        uint bufBStart = buf.idx;\r\n        assembly {\r\n            bStart := add(b, 32)\r\n            bufBStart := add(add(bufB, 32), bufBStart)\r\n        }\r\n        for (uint i=0; i<len; i+=32) {\r\n            assembly{\r\n                mstore(add(bStart, i), mload(add(bufBStart, i)))\r\n            }\r\n        }\r\n        buf.idx = end;\r\n    }\r\n\r\n    // return packed ints\r\n    function decPacked(Buffer memory buf) internal pure returns (uint[] memory t) {\r\n        uint len = decVarint(buf);\r\n        uint end = buf.idx + len;\r\n        require(end <= buf.b.length);  // avoid overflow\r\n        // array in memory must be init w/ known length\r\n        // so we have to create a tmp array w/ max possible len first\r\n        uint[] memory tmp = new uint[](len);\r\n        uint i = 0; // count how many ints are there\r\n        while (buf.idx < end) {\r\n            tmp[i] = decVarint(buf);\r\n            i++;\r\n        }\r\n        t = new uint[](i); // init t with correct length\r\n        for (uint j=0; j<i; j++) {\r\n            t[j] = tmp[j];\r\n        }\r\n        return t;\r\n    }\r\n\r\n    // move idx pass current value field, to beginning of next tag or msg end\r\n    function skipValue(Buffer memory buf, WireType wire) internal pure {\r\n        if (wire == WireType.Varint) { decVarint(buf); }\r\n        else if (wire == WireType.LengthDelim) {\r\n            uint len = decVarint(buf);\r\n            buf.idx += len; // skip len bytes value data\r\n            require(buf.idx <= buf.b.length);  // avoid overflow\r\n        } else { revert(); }  // unsupported wiretype\r\n    }\r\n\r\n    // type conversion help utils\r\n    function _bool(uint x) internal pure returns (bool v) {\r\n        return x != 0;\r\n    }\r\n\r\n    function _uint256(bytes memory b) internal pure returns (uint256 v) {\r\n        require(b.length <= 32);  // b's length must be smaller than or equal to 32\r\n        assembly { v := mload(add(b, 32)) }  // load all 32bytes to v\r\n        v = v >> (8 * (32 - b.length));  // only first b.length is valid\r\n    }\r\n\r\n    function _address(bytes memory b) internal pure returns (address v) {\r\n        v = _addressPayable(b);\r\n    }\r\n\r\n    function _addressPayable(bytes memory b) internal pure returns (address payable v) {\r\n        require(b.length == 20);\r\n        //load 32bytes then shift right 12 bytes\r\n        assembly { v := div(mload(add(b, 32)), 0x1000000000000000000000000) }\r\n    }\r\n\r\n    function _bytes32(bytes memory b) internal pure returns (bytes32 v) {\r\n        require(b.length == 32);\r\n        assembly { v := mload(add(b, 32)) }\r\n    }\r\n\r\n    // uint[] to uint8[]\r\n    function uint8s(uint[] memory arr) internal pure returns (uint8[] memory t) {\r\n        t = new uint8[](arr.length);\r\n        for (uint i = 0; i < t.length; i++) { t[i] = uint8(arr[i]); }\r\n    }\r\n\r\n    function uint32s(uint[] memory arr) internal pure returns (uint32[] memory t) {\r\n        t = new uint32[](arr.length);\r\n        for (uint i = 0; i < t.length; i++) { t[i] = uint32(arr[i]); }\r\n    }\r\n\r\n    function uint64s(uint[] memory arr) internal pure returns (uint64[] memory t) {\r\n        t = new uint64[](arr.length);\r\n        for (uint i = 0; i < t.length; i++) { t[i] = uint64(arr[i]); }\r\n    }\r\n\r\n    function bools(uint[] memory arr) internal pure returns (bool[] memory t) {\r\n        t = new bool[](arr.length);\r\n        for (uint i = 0; i < t.length; i++) { t[i] = arr[i]!=0; }\r\n    }\r\n}\r\n\r\n// File: contracts/lib/data/PbEntity.sol\r\n\r\n// Code generated by protoc-gen-sol. DO NOT EDIT.\r\n// source: entity.proto\r\npragma solidity ^0.5.0;\r\n\r\n\r\nlibrary PbEntity {\r\n    using Pb for Pb.Buffer;  // so we can call Pb funcs on Buffer obj\r\n\r\n    enum TokenType { INVALID, ETH, ERC20 }\r\n\r\n    // TokenType[] decode function\r\n    function TokenTypes(uint[] memory arr) internal pure returns (TokenType[] memory t) {\r\n        t = new TokenType[](arr.length);\r\n        for (uint i = 0; i < t.length; i++) { t[i] = TokenType(arr[i]); }\r\n    }\r\n\r\n    enum TransferFunctionType { BOOLEAN_AND, BOOLEAN_OR, BOOLEAN_CIRCUIT, NUMERIC_ADD, NUMERIC_MAX, NUMERIC_MIN }\r\n\r\n    // TransferFunctionType[] decode function\r\n    function TransferFunctionTypes(uint[] memory arr) internal pure returns (TransferFunctionType[] memory t) {\r\n        t = new TransferFunctionType[](arr.length);\r\n        for (uint i = 0; i < t.length; i++) { t[i] = TransferFunctionType(arr[i]); }\r\n    }\r\n\r\n    enum ConditionType { HASH_LOCK, DEPLOYED_CONTRACT, VIRTUAL_CONTRACT }\r\n\r\n    // ConditionType[] decode function\r\n    function ConditionTypes(uint[] memory arr) internal pure returns (ConditionType[] memory t) {\r\n        t = new ConditionType[](arr.length);\r\n        for (uint i = 0; i < t.length; i++) { t[i] = ConditionType(arr[i]); }\r\n    }\r\n\r\n    struct AccountAmtPair {\r\n        address account;   // tag: 1\r\n        uint256 amt;   // tag: 2\r\n    } // end struct AccountAmtPair\r\n\r\n    function decAccountAmtPair(bytes memory raw) internal pure returns (AccountAmtPair memory m) {\r\n        Pb.Buffer memory buf = Pb.fromBytes(raw);\r\n\r\n        uint tag;\r\n        Pb.WireType wire;\r\n        while (buf.hasMore()) {\r\n            (tag, wire) = buf.decKey();\r\n            if (false) {} // solidity has no switch/case\r\n            else if (tag == 1) {\r\n                m.account = Pb._address(buf.decBytes());\r\n            }\r\n            else if (tag == 2) {\r\n                m.amt = Pb._uint256(buf.decBytes());\r\n            }\r\n            else { buf.skipValue(wire); } // skip value of unknown tag\r\n        }\r\n    } // end decoder AccountAmtPair\r\n\r\n    struct TokenInfo {\r\n        TokenType tokenType;   // tag: 1\r\n        address tokenAddress;   // tag: 2\r\n    } // end struct TokenInfo\r\n\r\n    function decTokenInfo(bytes memory raw) internal pure returns (TokenInfo memory m) {\r\n        Pb.Buffer memory buf = Pb.fromBytes(raw);\r\n\r\n        uint tag;\r\n        Pb.WireType wire;\r\n        while (buf.hasMore()) {\r\n            (tag, wire) = buf.decKey();\r\n            if (false) {} // solidity has no switch/case\r\n            else if (tag == 1) {\r\n                m.tokenType = TokenType(buf.decVarint());\r\n            }\r\n            else if (tag == 2) {\r\n                m.tokenAddress = Pb._address(buf.decBytes());\r\n            }\r\n            else { buf.skipValue(wire); } // skip value of unknown tag\r\n        }\r\n    } // end decoder TokenInfo\r\n\r\n    struct TokenDistribution {\r\n        TokenInfo token;   // tag: 1\r\n        AccountAmtPair[] distribution;   // tag: 2\r\n    } // end struct TokenDistribution\r\n\r\n    function decTokenDistribution(bytes memory raw) internal pure returns (TokenDistribution memory m) {\r\n        Pb.Buffer memory buf = Pb.fromBytes(raw);\r\n\r\n        uint[] memory cnts = buf.cntTags(2);\r\n        m.distribution = new AccountAmtPair[](cnts[2]);\r\n        cnts[2] = 0;  // reset counter for later use\r\n        \r\n        uint tag;\r\n        Pb.WireType wire;\r\n        while (buf.hasMore()) {\r\n            (tag, wire) = buf.decKey();\r\n            if (false) {} // solidity has no switch/case\r\n            else if (tag == 1) {\r\n                m.token = decTokenInfo(buf.decBytes());\r\n            }\r\n            else if (tag == 2) {\r\n                m.distribution[cnts[2]] = decAccountAmtPair(buf.decBytes());\r\n                cnts[2]++;\r\n            }\r\n            else { buf.skipValue(wire); } // skip value of unknown tag\r\n        }\r\n    } // end decoder TokenDistribution\r\n\r\n    struct TokenTransfer {\r\n        TokenInfo token;   // tag: 1\r\n        AccountAmtPair receiver;   // tag: 2\r\n    } // end struct TokenTransfer\r\n\r\n    function decTokenTransfer(bytes memory raw) internal pure returns (TokenTransfer memory m) {\r\n        Pb.Buffer memory buf = Pb.fromBytes(raw);\r\n\r\n        uint tag;\r\n        Pb.WireType wire;\r\n        while (buf.hasMore()) {\r\n            (tag, wire) = buf.decKey();\r\n            if (false) {} // solidity has no switch/case\r\n            else if (tag == 1) {\r\n                m.token = decTokenInfo(buf.decBytes());\r\n            }\r\n            else if (tag == 2) {\r\n                m.receiver = decAccountAmtPair(buf.decBytes());\r\n            }\r\n            else { buf.skipValue(wire); } // skip value of unknown tag\r\n        }\r\n    } // end decoder TokenTransfer\r\n\r\n    struct SimplexPaymentChannel {\r\n        bytes32 channelId;   // tag: 1\r\n        address peerFrom;   // tag: 2\r\n        uint seqNum;   // tag: 3\r\n        TokenTransfer transferToPeer;   // tag: 4\r\n        PayIdList pendingPayIds;   // tag: 5\r\n        uint lastPayResolveDeadline;   // tag: 6\r\n        uint256 totalPendingAmount;   // tag: 7\r\n    } // end struct SimplexPaymentChannel\r\n\r\n    function decSimplexPaymentChannel(bytes memory raw) internal pure returns (SimplexPaymentChannel memory m) {\r\n        Pb.Buffer memory buf = Pb.fromBytes(raw);\r\n\r\n        uint tag;\r\n        Pb.WireType wire;\r\n        while (buf.hasMore()) {\r\n            (tag, wire) = buf.decKey();\r\n            if (false) {} // solidity has no switch/case\r\n            else if (tag == 1) {\r\n                m.channelId = Pb._bytes32(buf.decBytes());\r\n            }\r\n            else if (tag == 2) {\r\n                m.peerFrom = Pb._address(buf.decBytes());\r\n            }\r\n            else if (tag == 3) {\r\n                m.seqNum = uint(buf.decVarint());\r\n            }\r\n            else if (tag == 4) {\r\n                m.transferToPeer = decTokenTransfer(buf.decBytes());\r\n            }\r\n            else if (tag == 5) {\r\n                m.pendingPayIds = decPayIdList(buf.decBytes());\r\n            }\r\n            else if (tag == 6) {\r\n                m.lastPayResolveDeadline = uint(buf.decVarint());\r\n            }\r\n            else if (tag == 7) {\r\n                m.totalPendingAmount = Pb._uint256(buf.decBytes());\r\n            }\r\n            else { buf.skipValue(wire); } // skip value of unknown tag\r\n        }\r\n    } // end decoder SimplexPaymentChannel\r\n\r\n    struct PayIdList {\r\n        bytes32[] payIds;   // tag: 1\r\n        bytes32 nextListHash;   // tag: 2\r\n    } // end struct PayIdList\r\n\r\n    function decPayIdList(bytes memory raw) internal pure returns (PayIdList memory m) {\r\n        Pb.Buffer memory buf = Pb.fromBytes(raw);\r\n\r\n        uint[] memory cnts = buf.cntTags(2);\r\n        m.payIds = new bytes32[](cnts[1]);\r\n        cnts[1] = 0;  // reset counter for later use\r\n        \r\n        uint tag;\r\n        Pb.WireType wire;\r\n        while (buf.hasMore()) {\r\n            (tag, wire) = buf.decKey();\r\n            if (false) {} // solidity has no switch/case\r\n            else if (tag == 1) {\r\n                m.payIds[cnts[1]] = Pb._bytes32(buf.decBytes());\r\n                cnts[1]++;\r\n            }\r\n            else if (tag == 2) {\r\n                m.nextListHash = Pb._bytes32(buf.decBytes());\r\n            }\r\n            else { buf.skipValue(wire); } // skip value of unknown tag\r\n        }\r\n    } // end decoder PayIdList\r\n\r\n    struct TransferFunction {\r\n        TransferFunctionType logicType;   // tag: 1\r\n        TokenTransfer maxTransfer;   // tag: 2\r\n    } // end struct TransferFunction\r\n\r\n    function decTransferFunction(bytes memory raw) internal pure returns (TransferFunction memory m) {\r\n        Pb.Buffer memory buf = Pb.fromBytes(raw);\r\n\r\n        uint tag;\r\n        Pb.WireType wire;\r\n        while (buf.hasMore()) {\r\n            (tag, wire) = buf.decKey();\r\n            if (false) {} // solidity has no switch/case\r\n            else if (tag == 1) {\r\n                m.logicType = TransferFunctionType(buf.decVarint());\r\n            }\r\n            else if (tag == 2) {\r\n                m.maxTransfer = decTokenTransfer(buf.decBytes());\r\n            }\r\n            else { buf.skipValue(wire); } // skip value of unknown tag\r\n        }\r\n    } // end decoder TransferFunction\r\n\r\n    struct ConditionalPay {\r\n        uint payTimestamp;   // tag: 1\r\n        address src;   // tag: 2\r\n        address dest;   // tag: 3\r\n        Condition[] conditions;   // tag: 4\r\n        TransferFunction transferFunc;   // tag: 5\r\n        uint resolveDeadline;   // tag: 6\r\n        uint resolveTimeout;   // tag: 7\r\n        address payResolver;   // tag: 8\r\n    } // end struct ConditionalPay\r\n\r\n    function decConditionalPay(bytes memory raw) internal pure returns (ConditionalPay memory m) {\r\n        Pb.Buffer memory buf = Pb.fromBytes(raw);\r\n\r\n        uint[] memory cnts = buf.cntTags(8);\r\n        m.conditions = new Condition[](cnts[4]);\r\n        cnts[4] = 0;  // reset counter for later use\r\n        \r\n        uint tag;\r\n        Pb.WireType wire;\r\n        while (buf.hasMore()) {\r\n            (tag, wire) = buf.decKey();\r\n            if (false) {} // solidity has no switch/case\r\n            else if (tag == 1) {\r\n                m.payTimestamp = uint(buf.decVarint());\r\n            }\r\n            else if (tag == 2) {\r\n                m.src = Pb._address(buf.decBytes());\r\n            }\r\n            else if (tag == 3) {\r\n                m.dest = Pb._address(buf.decBytes());\r\n            }\r\n            else if (tag == 4) {\r\n                m.conditions[cnts[4]] = decCondition(buf.decBytes());\r\n                cnts[4]++;\r\n            }\r\n            else if (tag == 5) {\r\n                m.transferFunc = decTransferFunction(buf.decBytes());\r\n            }\r\n            else if (tag == 6) {\r\n                m.resolveDeadline = uint(buf.decVarint());\r\n            }\r\n            else if (tag == 7) {\r\n                m.resolveTimeout = uint(buf.decVarint());\r\n            }\r\n            else if (tag == 8) {\r\n                m.payResolver = Pb._address(buf.decBytes());\r\n            }\r\n            else { buf.skipValue(wire); } // skip value of unknown tag\r\n        }\r\n    } // end decoder ConditionalPay\r\n\r\n    struct CondPayResult {\r\n        bytes condPay;   // tag: 1\r\n        uint256 amount;   // tag: 2\r\n    } // end struct CondPayResult\r\n\r\n    function decCondPayResult(bytes memory raw) internal pure returns (CondPayResult memory m) {\r\n        Pb.Buffer memory buf = Pb.fromBytes(raw);\r\n\r\n        uint tag;\r\n        Pb.WireType wire;\r\n        while (buf.hasMore()) {\r\n            (tag, wire) = buf.decKey();\r\n            if (false) {} // solidity has no switch/case\r\n            else if (tag == 1) {\r\n                m.condPay = bytes(buf.decBytes());\r\n            }\r\n            else if (tag == 2) {\r\n                m.amount = Pb._uint256(buf.decBytes());\r\n            }\r\n            else { buf.skipValue(wire); } // skip value of unknown tag\r\n        }\r\n    } // end decoder CondPayResult\r\n\r\n    struct VouchedCondPayResult {\r\n        bytes condPayResult;   // tag: 1\r\n        bytes sigOfSrc;   // tag: 2\r\n        bytes sigOfDest;   // tag: 3\r\n    } // end struct VouchedCondPayResult\r\n\r\n    function decVouchedCondPayResult(bytes memory raw) internal pure returns (VouchedCondPayResult memory m) {\r\n        Pb.Buffer memory buf = Pb.fromBytes(raw);\r\n\r\n        uint tag;\r\n        Pb.WireType wire;\r\n        while (buf.hasMore()) {\r\n            (tag, wire) = buf.decKey();\r\n            if (false) {} // solidity has no switch/case\r\n            else if (tag == 1) {\r\n                m.condPayResult = bytes(buf.decBytes());\r\n            }\r\n            else if (tag == 2) {\r\n                m.sigOfSrc = bytes(buf.decBytes());\r\n            }\r\n            else if (tag == 3) {\r\n                m.sigOfDest = bytes(buf.decBytes());\r\n            }\r\n            else { buf.skipValue(wire); } // skip value of unknown tag\r\n        }\r\n    } // end decoder VouchedCondPayResult\r\n\r\n    struct Condition {\r\n        ConditionType conditionType;   // tag: 1\r\n        bytes32 hashLock;   // tag: 2\r\n        address deployedContractAddress;   // tag: 3\r\n        bytes32 virtualContractAddress;   // tag: 4\r\n        bytes argsQueryFinalization;   // tag: 5\r\n        bytes argsQueryOutcome;   // tag: 6\r\n    } // end struct Condition\r\n\r\n    function decCondition(bytes memory raw) internal pure returns (Condition memory m) {\r\n        Pb.Buffer memory buf = Pb.fromBytes(raw);\r\n\r\n        uint tag;\r\n        Pb.WireType wire;\r\n        while (buf.hasMore()) {\r\n            (tag, wire) = buf.decKey();\r\n            if (false) {} // solidity has no switch/case\r\n            else if (tag == 1) {\r\n                m.conditionType = ConditionType(buf.decVarint());\r\n            }\r\n            else if (tag == 2) {\r\n                m.hashLock = Pb._bytes32(buf.decBytes());\r\n            }\r\n            else if (tag == 3) {\r\n                m.deployedContractAddress = Pb._address(buf.decBytes());\r\n            }\r\n            else if (tag == 4) {\r\n                m.virtualContractAddress = Pb._bytes32(buf.decBytes());\r\n            }\r\n            else if (tag == 5) {\r\n                m.argsQueryFinalization = bytes(buf.decBytes());\r\n            }\r\n            else if (tag == 6) {\r\n                m.argsQueryOutcome = bytes(buf.decBytes());\r\n            }\r\n            else { buf.skipValue(wire); } // skip value of unknown tag\r\n        }\r\n    } // end decoder Condition\r\n\r\n    struct CooperativeWithdrawInfo {\r\n        bytes32 channelId;   // tag: 1\r\n        uint seqNum;   // tag: 2\r\n        AccountAmtPair withdraw;   // tag: 3\r\n        uint withdrawDeadline;   // tag: 4\r\n        bytes32 recipientChannelId;   // tag: 5\r\n    } // end struct CooperativeWithdrawInfo\r\n\r\n    function decCooperativeWithdrawInfo(bytes memory raw) internal pure returns (CooperativeWithdrawInfo memory m) {\r\n        Pb.Buffer memory buf = Pb.fromBytes(raw);\r\n\r\n        uint tag;\r\n        Pb.WireType wire;\r\n        while (buf.hasMore()) {\r\n            (tag, wire) = buf.decKey();\r\n            if (false) {} // solidity has no switch/case\r\n            else if (tag == 1) {\r\n                m.channelId = Pb._bytes32(buf.decBytes());\r\n            }\r\n            else if (tag == 2) {\r\n                m.seqNum = uint(buf.decVarint());\r\n            }\r\n            else if (tag == 3) {\r\n                m.withdraw = decAccountAmtPair(buf.decBytes());\r\n            }\r\n            else if (tag == 4) {\r\n                m.withdrawDeadline = uint(buf.decVarint());\r\n            }\r\n            else if (tag == 5) {\r\n                m.recipientChannelId = Pb._bytes32(buf.decBytes());\r\n            }\r\n            else { buf.skipValue(wire); } // skip value of unknown tag\r\n        }\r\n    } // end decoder CooperativeWithdrawInfo\r\n\r\n    struct PaymentChannelInitializer {\r\n        TokenDistribution initDistribution;   // tag: 1\r\n        uint openDeadline;   // tag: 2\r\n        uint disputeTimeout;   // tag: 3\r\n        uint msgValueReceiver;   // tag: 4\r\n    } // end struct PaymentChannelInitializer\r\n\r\n    function decPaymentChannelInitializer(bytes memory raw) internal pure returns (PaymentChannelInitializer memory m) {\r\n        Pb.Buffer memory buf = Pb.fromBytes(raw);\r\n\r\n        uint tag;\r\n        Pb.WireType wire;\r\n        while (buf.hasMore()) {\r\n            (tag, wire) = buf.decKey();\r\n            if (false) {} // solidity has no switch/case\r\n            else if (tag == 1) {\r\n                m.initDistribution = decTokenDistribution(buf.decBytes());\r\n            }\r\n            else if (tag == 2) {\r\n                m.openDeadline = uint(buf.decVarint());\r\n            }\r\n            else if (tag == 3) {\r\n                m.disputeTimeout = uint(buf.decVarint());\r\n            }\r\n            else if (tag == 4) {\r\n                m.msgValueReceiver = uint(buf.decVarint());\r\n            }\r\n            else { buf.skipValue(wire); } // skip value of unknown tag\r\n        }\r\n    } // end decoder PaymentChannelInitializer\r\n\r\n    struct CooperativeSettleInfo {\r\n        bytes32 channelId;   // tag: 1\r\n        uint seqNum;   // tag: 2\r\n        AccountAmtPair[] settleBalance;   // tag: 3\r\n        uint settleDeadline;   // tag: 4\r\n    } // end struct CooperativeSettleInfo\r\n\r\n    function decCooperativeSettleInfo(bytes memory raw) internal pure returns (CooperativeSettleInfo memory m) {\r\n        Pb.Buffer memory buf = Pb.fromBytes(raw);\r\n\r\n        uint[] memory cnts = buf.cntTags(4);\r\n        m.settleBalance = new AccountAmtPair[](cnts[3]);\r\n        cnts[3] = 0;  // reset counter for later use\r\n        \r\n        uint tag;\r\n        Pb.WireType wire;\r\n        while (buf.hasMore()) {\r\n            (tag, wire) = buf.decKey();\r\n            if (false) {} // solidity has no switch/case\r\n            else if (tag == 1) {\r\n                m.channelId = Pb._bytes32(buf.decBytes());\r\n            }\r\n            else if (tag == 2) {\r\n                m.seqNum = uint(buf.decVarint());\r\n            }\r\n            else if (tag == 3) {\r\n                m.settleBalance[cnts[3]] = decAccountAmtPair(buf.decBytes());\r\n                cnts[3]++;\r\n            }\r\n            else if (tag == 4) {\r\n                m.settleDeadline = uint(buf.decVarint());\r\n            }\r\n            else { buf.skipValue(wire); } // skip value of unknown tag\r\n        }\r\n    } // end decoder CooperativeSettleInfo\r\n\r\n    struct ChannelMigrationInfo {\r\n        bytes32 channelId;   // tag: 1\r\n        address fromLedgerAddress;   // tag: 2\r\n        address toLedgerAddress;   // tag: 3\r\n        uint migrationDeadline;   // tag: 4\r\n    } // end struct ChannelMigrationInfo\r\n\r\n    function decChannelMigrationInfo(bytes memory raw) internal pure returns (ChannelMigrationInfo memory m) {\r\n        Pb.Buffer memory buf = Pb.fromBytes(raw);\r\n\r\n        uint tag;\r\n        Pb.WireType wire;\r\n        while (buf.hasMore()) {\r\n            (tag, wire) = buf.decKey();\r\n            if (false) {} // solidity has no switch/case\r\n            else if (tag == 1) {\r\n                m.channelId = Pb._bytes32(buf.decBytes());\r\n            }\r\n            else if (tag == 2) {\r\n                m.fromLedgerAddress = Pb._address(buf.decBytes());\r\n            }\r\n            else if (tag == 3) {\r\n                m.toLedgerAddress = Pb._address(buf.decBytes());\r\n            }\r\n            else if (tag == 4) {\r\n                m.migrationDeadline = uint(buf.decVarint());\r\n            }\r\n            else { buf.skipValue(wire); } // skip value of unknown tag\r\n        }\r\n    } // end decoder ChannelMigrationInfo\r\n\r\n}\r\n\r\n// File: contracts/lib/ledgerlib/LedgerStruct.sol\r\n\r\npragma solidity ^0.5.1;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Ledger Struct Library\r\n * @notice CelerLedger library defining all used structs\r\n */\r\nlibrary LedgerStruct {\r\n    enum ChannelStatus { Uninitialized, Operable, Settling, Closed, Migrated }\r\n\r\n    struct PeerState {\r\n        uint seqNum;\r\n        // balance sent out to the other peer of the channel, no need to record amtIn\r\n        uint transferOut;\r\n        bytes32 nextPayIdListHash;\r\n        uint lastPayResolveDeadline;\r\n        uint pendingPayOut;\r\n    }\r\n\r\n    struct PeerProfile {\r\n        address peerAddr;\r\n        // the (monotone increasing) amount that this peer deposit into this channel\r\n        uint deposit;\r\n        // the (monotone increasing) amount that this peer withdraw from this channel\r\n        uint withdrawal;\r\n        PeerState state;\r\n    }\r\n\r\n    struct WithdrawIntent {\r\n        address receiver;\r\n        uint amount;\r\n        uint requestTime;\r\n        bytes32 recipientChannelId;\r\n    }\r\n\r\n    // Channel is a representation of the state channel between peers which puts the funds\r\n    // in CelerWallet and is hosted by a CelerLedger. The status of a state channel can\r\n    // be migrated from one CelerLedger instance to another CelerLedger instance with probably\r\n    // different operation logic.\r\n    struct Channel {\r\n        // the time after which peers can confirmSettle and before which peers can intendSettle\r\n        uint settleFinalizedTime;\r\n        uint disputeTimeout;\r\n        PbEntity.TokenInfo token;\r\n        ChannelStatus status;\r\n        // record the new CelerLedger address after channel migration\r\n        address migratedTo;\r\n        // only support 2-peer channel for now\r\n        PeerProfile[2] peerProfiles;\r\n        uint cooperativeWithdrawSeqNum;\r\n        WithdrawIntent withdrawIntent;\r\n    }\r\n\r\n    // Ledger is a host to record and operate the activities of many state\r\n    // channels with specific operation logic.\r\n    struct Ledger {\r\n        // ChannelStatus => number of channels\r\n        mapping(uint => uint) channelStatusNums;\r\n        IEthPool ethPool;\r\n        IPayRegistry payRegistry;\r\n        ICelerWallet celerWallet;\r\n        // per channel deposit limits for different tokens\r\n        mapping(address => uint) balanceLimits;\r\n        // whether deposit limits of all tokens have been enabled\r\n        bool balanceLimitsEnabled;\r\n        mapping(bytes32 => Channel) channelMap;\r\n    }\r\n}\r\n\r\n// File: contracts/lib/ledgerlib/LedgerBalanceLimit.sol\r\n\r\npragma solidity ^0.5.1;\r\n\r\n\r\n/**\r\n * @title Ledger Balance Limit Library\r\n * @notice CelerLedger library about balance limits\r\n */\r\nlibrary LedgerBalanceLimit {\r\n    /**\r\n     * @notice Set the balance limits of given tokens\r\n     * @param _self storage data of CelerLedger contract\r\n     * @param _tokenAddrs addresses of the tokens (address(0) is for ETH)\r\n     * @param _limits balance limits of the tokens\r\n     */\r\n    function setBalanceLimits(\r\n        LedgerStruct.Ledger storage _self,\r\n        address[] calldata _tokenAddrs,\r\n        uint[] calldata _limits\r\n    )\r\n        external\r\n    {\r\n        require(_tokenAddrs.length == _limits.length, \"Lengths do not match\");\r\n        for (uint i = 0; i < _tokenAddrs.length; i++) {\r\n            _self.balanceLimits[_tokenAddrs[i]] = _limits[i];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Disable balance limits of all tokens\r\n     * @param _self storage data of CelerLedger contract\r\n     */\r\n    function disableBalanceLimits(LedgerStruct.Ledger storage _self) external {\r\n        _self.balanceLimitsEnabled = false;\r\n    }\r\n\r\n    /**\r\n     * @notice Enable balance limits of all tokens\r\n     * @param _self storage data of CelerLedger contract\r\n     */\r\n    function enableBalanceLimits(LedgerStruct.Ledger storage _self) external {\r\n        _self.balanceLimitsEnabled = true;\r\n    }\r\n\r\n    /**\r\n     * @notice Return balance limit of given token\r\n     * @param _self storage data of CelerLedger contract\r\n     * @param _tokenAddr query token address\r\n     * @return token balance limit\r\n     */\r\n    function getBalanceLimit(\r\n        LedgerStruct.Ledger storage _self,\r\n        address _tokenAddr\r\n    )\r\n        external\r\n        view\r\n        returns(uint)\r\n    {\r\n        return _self.balanceLimits[_tokenAddr];\r\n    }\r\n\r\n    /**\r\n     * @notice Return balanceLimitsEnabled\r\n     * @param _self storage data of CelerLedger contract\r\n     * @return balanceLimitsEnabled\r\n     */\r\n    function getBalanceLimitsEnabled(LedgerStruct.Ledger storage _self) external view returns(bool) {\r\n        return _self.balanceLimitsEnabled;\r\n    }\r\n}","ABI":"[]","ContractName":"LedgerBalanceLimit","CompilerVersion":"v0.5.10+commit.5a6ea5b1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"byzantium","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"bzzr://d3a36790a24413bc56526d34d99c8b65de822854badbfca269e5cedd5fc000e8"}]}