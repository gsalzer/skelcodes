{"status":"1","message":"OK","result":[{"SourceCode":"// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be aplied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * > Note: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see `ERC20Detailed`.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a `Transfer` event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through `transferFrom`. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when `approve` or `transferFrom` are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * > Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an `Approval` event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a `Transfer` event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to `approve`. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the `IERC20` interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using `_mint`.\r\n * For a generic mechanism see `ERC20Mintable`.\r\n *\r\n * *For a detailed writeup see our guide [How to implement supply\r\n * mechanisms](https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226).*\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an `Approval` event is emitted on calls to `transferFrom`.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard `decreaseAllowance` and `increaseAllowance`\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See `IERC20.approve`.\r\n */\r\ncontract ERC20 is IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    /**\r\n     * @dev See `IERC20.totalSupply`.\r\n     */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See `IERC20.balanceOf`.\r\n     */\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See `IERC20.transfer`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See `IERC20.allowance`.\r\n     */\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See `IERC20.approve`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 value) public returns (bool) {\r\n        _approve(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See `IERC20.transferFrom`.\r\n     *\r\n     * Emits an `Approval` event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of `ERC20`;\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `value`.\r\n     * - the caller must have allowance for `sender`'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to `approve` that can be used as a mitigation for\r\n     * problems described in `IERC20.approve`.\r\n     *\r\n     * Emits an `Approval` event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to `approve` that can be used as a mitigation for\r\n     * problems described in `IERC20.approve`.\r\n     *\r\n     * Emits an `Approval` event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to `transfer`, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a `Transfer` event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _balances[sender] = _balances[sender].sub(amount);\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a `Transfer` event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n     /**\r\n     * @dev Destoys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a `Transfer` event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 value) internal {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _totalSupply = _totalSupply.sub(value);\r\n        _balances[account] = _balances[account].sub(value);\r\n        emit Transfer(account, address(0), value);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n     *\r\n     * This is internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an `Approval` event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 value) internal {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = value;\r\n        emit Approval(owner, spender, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Destoys `amount` tokens from `account`.`amount` is then deducted\r\n     * from the caller's allowance.\r\n     *\r\n     * See `_burn` and `_approve`.\r\n     */\r\n    function _burnFrom(address account, uint256 amount) internal {\r\n        _burn(account, amount);\r\n        _approve(account, msg.sender, _allowances[account][msg.sender].sub(amount));\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/access/Roles.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @title Roles\r\n * @dev Library for managing addresses assigned to a Role.\r\n */\r\nlibrary Roles {\r\n    struct Role {\r\n        mapping (address => bool) bearer;\r\n    }\r\n\r\n    /**\r\n     * @dev Give an account access to this role.\r\n     */\r\n    function add(Role storage role, address account) internal {\r\n        require(!has(role, account), \"Roles: account already has role\");\r\n        role.bearer[account] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Remove an account's access to this role.\r\n     */\r\n    function remove(Role storage role, address account) internal {\r\n        require(has(role, account), \"Roles: account does not have role\");\r\n        role.bearer[account] = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Check if an account has this role.\r\n     * @return bool\r\n     */\r\n    function has(Role storage role, address account) internal view returns (bool) {\r\n        require(account != address(0), \"Roles: account is the zero address\");\r\n        return role.bearer[account];\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/access/roles/MinterRole.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\ncontract MinterRole {\r\n    using Roles for Roles.Role;\r\n\r\n    event MinterAdded(address indexed account);\r\n    event MinterRemoved(address indexed account);\r\n\r\n    Roles.Role private _minters;\r\n\r\n    constructor () internal {\r\n        _addMinter(msg.sender);\r\n    }\r\n\r\n    modifier onlyMinter() {\r\n        require(isMinter(msg.sender), \"MinterRole: caller does not have the Minter role\");\r\n        _;\r\n    }\r\n\r\n    function isMinter(address account) public view returns (bool) {\r\n        return _minters.has(account);\r\n    }\r\n\r\n    function addMinter(address account) public onlyMinter {\r\n        _addMinter(account);\r\n    }\r\n\r\n    function renounceMinter() public {\r\n        _removeMinter(msg.sender);\r\n    }\r\n\r\n    function _addMinter(address account) internal {\r\n        _minters.add(account);\r\n        emit MinterAdded(account);\r\n    }\r\n\r\n    function _removeMinter(address account) internal {\r\n        _minters.remove(account);\r\n        emit MinterRemoved(account);\r\n    }\r\n}\r\n\r\n// File: contracts/token/ERC20Interface.sol\r\n\r\npragma solidity 0.5.9;\r\n\r\n\r\ninterface ERC20Interface {\r\n  // Standard ERC-20 interface.\r\n  function transfer(address to, uint256 value) external returns (bool);\r\n  function approve(address spender, uint256 value) external returns (bool);\r\n  function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n  function totalSupply() external view returns (uint256);\r\n  function balanceOf(address who) external view returns (uint256);\r\n  function allowance(address owner, address spender) external view returns (uint256);\r\n  // Extension of ERC-20 interface to support supply adjustment.\r\n  function mint(address to, uint256 value) external returns (bool);\r\n  function burn(address from, uint256 value) external returns (bool);\r\n}\r\n\r\n// File: contracts/token/ERC20Base.sol\r\n\r\npragma solidity 0.5.9;\r\n\r\n\r\n\r\n\r\n\r\n/// \"ERC20Base\" is the standard ERC-20 implementation that allows its minter to mint tokens. Both BandToken and\r\n/// CommunityToken extend from ERC20Base. In addition to the standard functions, the class provides `transferAndCall`\r\n/// function, which performs a transfer and invokes the given function using the provided data. If the destination\r\n/// contract uses \"ERC20Acceptor\" interface, it can verify that the caller properly sends appropriate amount of tokens.\r\ncontract ERC20Base is ERC20Interface, ERC20, MinterRole {\r\n  string public name;\r\n  string public symbol;\r\n  uint8 public decimals = 18;\r\n\r\n  constructor(string memory _name, string memory _symbol) public {\r\n    name = _name;\r\n    symbol = _symbol;\r\n  }\r\n\r\n  function transferAndCall(address to, uint256 value, bytes4 sig, bytes memory data) public returns (bool) {\r\n    require(to != address(this));\r\n    _transfer(msg.sender, to, value);\r\n    (bool success,) = to.call(abi.encodePacked(sig, uint256(msg.sender), value, data));\r\n    require(success);\r\n    return true;\r\n  }\r\n\r\n  function mint(address to, uint256 value) public onlyMinter returns (bool) {\r\n    _mint(to, value);\r\n    return true;\r\n  }\r\n\r\n  function burn(address from, uint256 value) public onlyMinter returns (bool) {\r\n    _burn(from, value);\r\n    return true;\r\n  }\r\n}\r\n\r\n// File: contracts/token/SnapshotToken.sol\r\n\r\npragma solidity 0.5.9;\r\n\r\n\r\n\r\n\r\ncontract SnapshotToken is ERC20Base {\r\n  using SafeMath for uint256;\r\n\r\n  /// IMPORTANT: votingPowers are kept as a linked list of ALL historical changes.\r\n  /// - This allows the contract to figure out voting power of the address at any nonce `n`, by\r\n  /// searching for the node that has the biggest nonce that is not greater than `n`.\r\n  /// - For efficiency, nonce and power are packed into one uint256 integer, with the top 64 bits\r\n  /// representing nonce, and the bottom 192 bits representing voting power.\r\n  mapping (address => mapping(uint256 => uint256)) _votingPower;\r\n  mapping (address => uint256) public votingPowerChangeCount;\r\n  uint256 public votingPowerChangeNonce = 0;\r\n\r\n  /// Returns user voting power at the given index, that is, as of the user's index^th voting power change\r\n  function historicalVotingPowerAtIndex(address owner, uint256 index) public view returns (uint256) {\r\n    require(index <= votingPowerChangeCount[owner]);\r\n    return _votingPower[owner][index] & ((1 << 192) - 1);  // Lower 192 bits\r\n  }\r\n\r\n  /// Returns user voting power at the given time. Under the hood, this performs binary search\r\n  /// to look for the largest index at which the nonce is not greater than 'nonce'.\r\n  /// The voting power at that index is the returning value.\r\n  function historicalVotingPowerAtNonce(address owner, uint256 nonce) public view returns (uint256) {\r\n    require(nonce <= votingPowerChangeNonce && nonce < (1 << 64));\r\n    uint256 start = 0;\r\n    uint256 end = votingPowerChangeCount[owner];\r\n    while (start < end) {\r\n      uint256 mid = start.add(end).add(1).div(2); /// Use (start+end+1)/2 to prevent infinite loop.\r\n      if ((_votingPower[owner][mid] >> 192) > nonce) {  /// Upper 64-bit nonce\r\n        /// If midTime > nonce, this mid can't possibly be the answer.\r\n        end = mid.sub(1);\r\n      } else {\r\n        /// Otherwise, search on the greater side, but still keep mid as a possible option.\r\n        start = mid;\r\n      }\r\n    }\r\n    return historicalVotingPowerAtIndex(owner, start);\r\n  }\r\n\r\n  function _transfer(address from, address to, uint256 value) internal {\r\n    super._transfer(from, to, value);\r\n    votingPowerChangeNonce = votingPowerChangeNonce.add(1);\r\n    _changeVotingPower(from);\r\n    _changeVotingPower(to);\r\n  }\r\n\r\n  function _mint(address account, uint256 amount) internal {\r\n    super._mint(account, amount);\r\n    votingPowerChangeNonce = votingPowerChangeNonce.add(1);\r\n    _changeVotingPower(account);\r\n  }\r\n\r\n  function _burn(address account, uint256 amount) internal {\r\n    super._burn(account, amount);\r\n    votingPowerChangeNonce = votingPowerChangeNonce.add(1);\r\n    _changeVotingPower(account);\r\n  }\r\n\r\n  function _changeVotingPower(address account) internal {\r\n    uint256 currentIndex = votingPowerChangeCount[account];\r\n    uint256 newPower = balanceOf(account);\r\n    require(newPower < (1 << 192));\r\n    require(votingPowerChangeNonce < (1 << 64));\r\n    currentIndex = currentIndex.add(1);\r\n    votingPowerChangeCount[account] = currentIndex;\r\n    _votingPower[account][currentIndex] = (votingPowerChangeNonce << 192) | newPower;\r\n  }\r\n}\r\n\r\n// File: contracts/BandToken.sol\r\n\r\npragma solidity 0.5.9;\r\n\r\n\r\n\r\n\r\n/// \"BandToken\" is the native ERC-20 token of Band Protocol.\r\ncontract BandToken is ERC20Base(\"BandToken\", \"BAND\"), SnapshotToken {}\r\n\r\n// File: contracts/data/WhiteListInterface.sol\r\n\r\npragma solidity 0.5.9;\r\n\r\ninterface WhiteListInterface {\r\n  function verify(address reader) external view returns (bool);\r\n}\r\n\r\n// File: contracts/exchange/BandExchangeInterface.sol\r\n\r\npragma solidity 0.5.9;\r\n\r\n\r\ninterface BandExchangeInterface {\r\n  function convertFromEthToBand() external payable returns (uint256);\r\n}\r\n\r\n// File: contracts/BandRegistry.sol\r\n\r\npragma solidity 0.5.9;\r\n\r\n\r\n\r\n\r\n\r\n\r\n/// \"BandRegistry\" keeps the addresses of three main smart contracts inside of Band Protocol ecosystem:\r\n///   1. \"band\" - Band Protocol's native ERC-20 token.\r\n///   2. \"exchange\" - Decentralized exchange for converting ETH to Band and vice versa.\r\n///   3. \"whiteList\" - Smart contract for validating non-malicious data consumers.\r\ncontract BandRegistry is Ownable {\r\n  BandToken public band;\r\n  BandExchangeInterface public exchange;\r\n  WhiteListInterface public whiteList;\r\n\r\n  constructor(BandToken _band, BandExchangeInterface _exchange) public {\r\n    band = _band;\r\n    exchange = _exchange;\r\n  }\r\n\r\n  function verify(address reader) public view returns (bool) {\r\n    if (address(whiteList) == address(0)) return true;\r\n    return whiteList.verify(reader);\r\n  }\r\n\r\n  function setWhiteList(WhiteListInterface _whiteList) public onlyOwner {\r\n    whiteList = _whiteList;\r\n  }\r\n\r\n  function setExchange(BandExchangeInterface _exchange) public onlyOwner {\r\n    exchange = _exchange;\r\n  }\r\n}\r\n\r\n// File: contracts/data/QueryInterface.sol\r\n\r\npragma solidity 0.5.9;\r\n\r\n\r\n\r\n/// \"QueryInterface\" provides the standard `query` method for querying Band Protocol's curated data. The function\r\n/// makes sure that query callers are not blacklisted and pay appropriate fee, as specified by `queryPrice` prior\r\n/// to calling the meat `queryImpl` function.\r\ncontract QueryInterface {\r\n  enum QueryStatus { INVALID, OK, NOT_AVAILABLE, DISAGREEMENT }\r\n  event Query(address indexed caller, bytes input, QueryStatus status);\r\n  BandRegistry public registry;\r\n\r\n  constructor(BandRegistry _registry) public {\r\n    registry = _registry;\r\n  }\r\n\r\n  function query(bytes calldata input)\r\n    external payable returns (bytes32 output, uint256 updatedAt, QueryStatus status)\r\n  {\r\n    require(registry.verify(msg.sender));\r\n    uint256 price = queryPrice();\r\n    require(msg.value >= price);\r\n    if (msg.value > price) msg.sender.transfer(msg.value - price);\r\n    (output, updatedAt, status) = queryImpl(input);\r\n    emit Query(msg.sender, input, status);\r\n  }\r\n\r\n  function queryPrice() public view returns (uint256);\r\n  function queryImpl(bytes memory input)\r\n    internal returns (bytes32 output, uint256 updatedAt, QueryStatus status);\r\n}\r\n\r\n// File: contracts/utils/Fractional.sol\r\n\r\npragma solidity 0.5.9;\r\n\r\n\r\n\r\n/// \"Fractional\" library facilitate fixed point decimal computation. In Band Protocol, fixed point decimal can be\r\n/// represented using `uint256` data type. The decimal is fixed at 18 digits and `mulFrac` can be used to multiply\r\n/// the fixed point decimal with an ordinary `uint256` value.\r\nlibrary Fractional {\r\n  using SafeMath for uint256;\r\n  uint256 internal constant DENOMINATOR = 1e18;\r\n\r\n  function getDenominator() internal pure returns (uint256) {\r\n    return DENOMINATOR;\r\n  }\r\n\r\n  function mulFrac(uint256 numerator, uint256 value) internal pure returns(uint256) {\r\n    return numerator.mul(value).div(DENOMINATOR);\r\n  }\r\n}\r\n\r\n// File: contracts/token/ERC20Acceptor.sol\r\n\r\npragma solidity 0.5.9;\r\n\r\n\r\n\r\n/// \"ERC20Acceptor\" is a utility smart contract that provides `requireToken` modifier for any contract that intends\r\n/// to have functions that accept ERC-20 token transfer to inherit.\r\ncontract ERC20Acceptor {\r\n  /// A modifer to decorate function that requires ERC-20 transfer. If called by ERC-20\r\n  /// contract, the modifier trusts that the transfer already occurs. Otherwise, the modifier\r\n  /// invokes 'transferFrom' to ensure that appropriate amount of tokens is paid properly.\r\n  modifier requireToken(ERC20Interface token, address sender, uint256 amount) {\r\n    if (msg.sender != address(token)) {\r\n      require(sender == msg.sender);\r\n      require(token.transferFrom(sender, address(this), amount));\r\n    }\r\n    _;\r\n  }\r\n}\r\n\r\n// File: contracts/utils/Expression.sol\r\n\r\npragma solidity 0.5.9;\r\n\r\n\r\ninterface Expression {\r\n  /// Return the result of evaluating the expression given a variable value\r\n  function evaluate(uint256 x) external view returns (uint256);\r\n}\r\n\r\n// File: contracts/Parameters.sol\r\n\r\npragma solidity 0.5.9;\r\n\r\n\r\n\r\n\r\n\r\n\r\n/// \"Parameters\" contract controls how other smart contracts behave through a key-value mapping, which other contracts\r\n/// will query using `get` or `getRaw` functions. Every dataset community has one governance parameters contract.\r\n/// Additionally, there is one parameter contract that is controlled by BandToken for protocol-wide parameters.\r\n/// Conducting parameter changes can be done through the following process.\r\n///   1. Anyone can propose for a change by sending a `propose` transaction, which will assign an ID to the proposal.\r\n///   2. While the proposal is open, token holders can vote for approval or rejection through `vote` function.\r\n///   3. After the voting period ends, if the proposal receives enough participation and support, it will get accepted.\r\n///      `resolve` function must to be called to trigger the decision process.\r\n///   4. Additionally, to facilitate unanimous parameter changes, a proposal is automatically resolved prior to its\r\n///      expiration if more than the required percentage of ALL tokens approve the proposal.\r\n/// Parameters contract uses the following parameters for its internal logic. These parameters can be change via the\r\n/// same proposal process.\r\n///   `params:expiration_time`: Number of seconds that a proposal stays open after getting proposed.\r\n///   `params:min_participation_pct`: % of tokens required to participate in order for a proposal to be considered.\r\n///   `params:support_required_pct`: % of participating tokens required to approve a proposal.\r\n/// Parameters contract is \"Ownable\" initially to allow its owner to overrule the parameters during the initial\r\n/// deployment as a measure against possible smart contract vulnerabilities. Owner can be set to 0x0 address afterwards.\r\ncontract Parameters is Ownable {\r\n  using SafeMath for uint256;\r\n  using Fractional for uint256;\r\n\r\n  event ProposalProposed(uint256 indexed proposalId, address indexed proposer, bytes32 reasonHash);\r\n  event ProposalVoted(uint256 indexed proposalId, address indexed voter, bool vote, uint256 votingPower);\r\n  event ProposalAccepted(uint256 indexed proposalId);\r\n  event ProposalRejected(uint256 indexed proposalId);\r\n  event ParameterChanged(bytes32 indexed key, uint256 value);\r\n  event ParameterProposed(uint256 indexed proposalId, bytes32 indexed key, uint256 value);\r\n\r\n  struct ParameterValue { bool existed; uint256 value; }\r\n  struct KeyValue { bytes32 key; uint256 value; }\r\n  enum ProposalState { INVALID, OPEN, ACCEPTED, REJECTED }\r\n\r\n  struct Proposal {\r\n    uint256 changesCount;                   /// The number of parameter changes\r\n    mapping (uint256 => KeyValue) changes;  /// The list of parameter changes in proposal\r\n    uint256 snapshotNonce;                  /// The votingPowerNonce to count voting power\r\n    uint256 expirationTime;                 /// The time at which this proposal resolves\r\n    uint256 voteSupportRequiredPct;         /// Threshold % for determining proposal acceptance\r\n    uint256 voteMinParticipation;           /// The minimum # of votes required\r\n    uint256 totalVotingPower;               /// The total voting power at this snapshotNonce\r\n    uint256 yesCount;                       /// The current total number of YES votes\r\n    uint256 noCount;                        /// The current total number of NO votes\r\n    mapping (address => bool) isVoted;      /// Mapping for check who already voted\r\n    ProposalState proposalState;            /// Current state of this proposal.\r\n  }\r\n\r\n  SnapshotToken public token;\r\n  Proposal[] public proposals;\r\n  mapping (bytes32 => ParameterValue) public params;\r\n\r\n  constructor(SnapshotToken _token) public {\r\n    token = _token;\r\n  }\r\n\r\n  function get(bytes8 namespace, bytes24 key) public view returns (uint256) {\r\n    uint8 namespaceSize = 0;\r\n    while (namespaceSize < 8 && namespace[namespaceSize] != byte(0)) ++namespaceSize;\r\n    return getRaw(bytes32(namespace) | (bytes32(key) >> (8 * namespaceSize)));\r\n  }\r\n\r\n  function getRaw(bytes32 rawKey) public view returns (uint256) {\r\n    ParameterValue storage param = params[rawKey];\r\n    require(param.existed);\r\n    return param.value;\r\n  }\r\n\r\n  function set(bytes8 namespace, bytes24[] memory keys, uint256[] memory values) public onlyOwner {\r\n    require(keys.length == values.length);\r\n    bytes32[] memory rawKeys = new bytes32[](keys.length);\r\n    uint8 namespaceSize = 0;\r\n    while (namespaceSize < 8 && namespace[namespaceSize] != byte(0)) ++namespaceSize;\r\n    for (uint256 i = 0; i < keys.length; i++) {\r\n      rawKeys[i] = bytes32(namespace) | bytes32(keys[i]) >> (8 * namespaceSize);\r\n    }\r\n    setRaw(rawKeys, values);\r\n  }\r\n\r\n  function setRaw(bytes32[] memory rawKeys, uint256[] memory values) public onlyOwner {\r\n    require(rawKeys.length == values.length);\r\n    for (uint256 i = 0; i < rawKeys.length; i++) {\r\n      params[rawKeys[i]].existed = true;\r\n      params[rawKeys[i]].value = values[i];\r\n      emit ParameterChanged(rawKeys[i], values[i]);\r\n    }\r\n  }\r\n\r\n  function getProposalChange(uint256 proposalId, uint256 changeIndex) public view returns (bytes32, uint256) {\r\n    KeyValue memory keyValue = proposals[proposalId].changes[changeIndex];\r\n    return (keyValue.key, keyValue.value);\r\n  }\r\n\r\n  function propose(bytes32 reasonHash, bytes32[] calldata keys, uint256[] calldata values) external {\r\n    require(keys.length == values.length);\r\n    uint256 proposalId = proposals.length;\r\n    proposals.push(Proposal({\r\n      changesCount: keys.length,\r\n      snapshotNonce: token.votingPowerChangeNonce(),\r\n      expirationTime: now.add(getRaw(\"params:expiration_time\")),\r\n      voteSupportRequiredPct: getRaw(\"params:support_required_pct\"),\r\n      voteMinParticipation: getRaw(\"params:min_participation_pct\").mulFrac(token.totalSupply()),\r\n      totalVotingPower: token.totalSupply(),\r\n      yesCount: 0,\r\n      noCount: 0,\r\n      proposalState: ProposalState.OPEN\r\n    }));\r\n    emit ProposalProposed(proposalId, msg.sender, reasonHash);\r\n    for (uint256 index = 0; index < keys.length; ++index) {\r\n      bytes32 key = keys[index];\r\n      uint256 value = values[index];\r\n      emit ParameterProposed(proposalId, key, value);\r\n      proposals[proposalId].changes[index] = KeyValue({key: key, value: value});\r\n    }\r\n  }\r\n\r\n  function vote(uint256 proposalId, bool accepted) public {\r\n    Proposal storage proposal = proposals[proposalId];\r\n    require(proposal.proposalState == ProposalState.OPEN);\r\n    require(now < proposal.expirationTime);\r\n    require(!proposal.isVoted[msg.sender]);\r\n    uint256 votingPower = token.historicalVotingPowerAtNonce(msg.sender, proposal.snapshotNonce);\r\n    require(votingPower > 0);\r\n    if (accepted) {\r\n      proposal.yesCount = proposal.yesCount.add(votingPower);\r\n    } else {\r\n      proposal.noCount = proposal.noCount.add(votingPower);\r\n    }\r\n    proposal.isVoted[msg.sender] = true;\r\n    emit ProposalVoted(proposalId, msg.sender, accepted, votingPower);\r\n    uint256 minVoteToAccept = proposal.voteSupportRequiredPct.mulFrac(proposal.totalVotingPower);\r\n    uint256 minVoteToReject = proposal.totalVotingPower.sub(minVoteToAccept);\r\n    if (proposal.yesCount >= minVoteToAccept) {\r\n      _acceptProposal(proposalId);\r\n    } else if (proposal.noCount > minVoteToReject) {\r\n      _rejectProposal(proposalId);\r\n    }\r\n  }\r\n\r\n  function resolve(uint256 proposalId) public {\r\n    Proposal storage proposal = proposals[proposalId];\r\n    require(proposal.proposalState == ProposalState.OPEN);\r\n    require(now >= proposal.expirationTime);\r\n    uint256 yesCount = proposal.yesCount;\r\n    uint256 noCount = proposal.noCount;\r\n    uint256 totalCount = yesCount.add(noCount);\r\n    if (totalCount >= proposal.voteMinParticipation &&\r\n        yesCount.mul(Fractional.getDenominator()) >= proposal.voteSupportRequiredPct.mul(totalCount)) {\r\n      _acceptProposal(proposalId);\r\n    } else {\r\n      _rejectProposal(proposalId);\r\n    }\r\n  }\r\n\r\n  function _acceptProposal(uint256 proposalId) internal {\r\n    Proposal storage proposal = proposals[proposalId];\r\n    proposal.proposalState = ProposalState.ACCEPTED;\r\n    for (uint256 index = 0; index < proposal.changesCount; ++index) {\r\n      bytes32 key = proposal.changes[index].key;\r\n      uint256 value = proposal.changes[index].value;\r\n      params[key].existed = true;\r\n      params[key].value = value;\r\n      emit ParameterChanged(key, value);\r\n    }\r\n    emit ProposalAccepted(proposalId);\r\n  }\r\n\r\n  function _rejectProposal(uint256 proposalId) internal {\r\n    Proposal storage proposal = proposals[proposalId];\r\n    proposal.proposalState = ProposalState.REJECTED;\r\n    emit ProposalRejected(proposalId);\r\n  }\r\n}\r\n\r\n// File: contracts/exchange/BondingCurve.sol\r\n\r\npragma solidity 0.5.9;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract BondingCurve is ERC20Acceptor {\r\n  using SafeMath for uint256;\r\n  using Fractional for uint256;\r\n\r\n  event Buy(address indexed buyer, uint256 bondedTokenAmount, uint256 collateralTokenAmount);\r\n  event Sell(address indexed seller, uint256 bondedTokenAmount, uint256 collateralTokenAmount);\r\n  event Deflate(address indexed burner, uint256 burnedAmount);\r\n  event RevenueCollect(address indexed beneficiary, uint256 bondedTokenAmount);\r\n\r\n  ERC20Interface public collateralToken;\r\n  ERC20Interface public bondedToken;\r\n  Parameters public params;\r\n\r\n  uint256 public currentMintedTokens;\r\n  uint256 public currentCollateral;\r\n  uint256 public lastInflationTime = now;\r\n\r\n  constructor(ERC20Interface _collateralToken, ERC20Interface _bondedToken, Parameters _params) public {\r\n    collateralToken = _collateralToken;\r\n    bondedToken = _bondedToken;\r\n    params = _params;\r\n  }\r\n\r\n  function getRevenueBeneficiary() public view returns (address) {\r\n    address beneficiary = address(params.getRaw(\"bonding:revenue_beneficiary\"));\r\n    require(beneficiary != address(0));\r\n    return beneficiary;\r\n  }\r\n\r\n  function getInflationRateNumerator() public view returns (uint256) {\r\n    return params.getRaw(\"bonding:inflation_rate\");\r\n  }\r\n\r\n  function getLiquiditySpreadNumerator() public view returns (uint256) {\r\n    return params.getRaw(\"bonding:liquidity_spread\");\r\n  }\r\n\r\n  function getCollateralExpression() public view returns (Expression) {\r\n    return Expression(address(params.getRaw(\"bonding:curve_expression\")));\r\n  }\r\n\r\n  function getCollateralAtSupply(uint256 tokenSupply) public view returns (uint256) {\r\n    Expression collateralExpression = getCollateralExpression();\r\n    uint256 collateralFromEquationAtCurrent = collateralExpression.evaluate(currentMintedTokens);\r\n    uint256 collateralFromEquationAtSupply = collateralExpression.evaluate(tokenSupply);\r\n    if (collateralFromEquationAtCurrent == 0) {\r\n      return collateralFromEquationAtSupply;\r\n    } else {\r\n      return collateralFromEquationAtSupply.mul(currentCollateral).div(collateralFromEquationAtCurrent);\r\n    }\r\n  }\r\n\r\n  function curveMultiplier() public view returns (uint256) {\r\n    return currentCollateral.mul(Fractional.getDenominator()).div(getCollateralExpression().evaluate(currentMintedTokens));\r\n  }\r\n\r\n  function getBuyPrice(uint256 tokenValue) public view returns (uint256) {\r\n    uint256 nextSupply = currentMintedTokens.add(tokenValue);\r\n    return getCollateralAtSupply(nextSupply).sub(currentCollateral);\r\n  }\r\n\r\n  function getSellPrice(uint256 tokenValue) public view returns (uint256) {\r\n    uint256 currentSupply = currentMintedTokens;\r\n    require(currentSupply >= tokenValue);\r\n    uint256 nextSupply = currentMintedTokens.sub(tokenValue);\r\n    return currentCollateral.sub(getCollateralAtSupply(nextSupply));\r\n  }\r\n\r\n  modifier _adjustAutoInflation() {\r\n    uint256 currentSupply = currentMintedTokens;\r\n    if (lastInflationTime < now) {\r\n      uint256 pastSeconds = now.sub(lastInflationTime);\r\n      uint256 inflatingSupply = getInflationRateNumerator().mul(pastSeconds).mulFrac(currentSupply);\r\n      if (inflatingSupply != 0) {\r\n        currentMintedTokens = currentMintedTokens.add(inflatingSupply);\r\n        _rewardBondingCurveOwner(inflatingSupply);\r\n      }\r\n    }\r\n    lastInflationTime = now;\r\n    _;\r\n  }\r\n\r\n  function buy(address buyer, uint256 priceLimit, uint256 buyAmount)\r\n    public\r\n    requireToken(collateralToken, buyer, priceLimit)\r\n    _adjustAutoInflation\r\n  {\r\n    uint256 liquiditySpread = getLiquiditySpreadNumerator().mulFrac(buyAmount);\r\n    uint256 totalMintAmount = buyAmount.add(liquiditySpread);\r\n    uint256 buyPrice = getBuyPrice(totalMintAmount);\r\n    require(buyPrice > 0 && buyPrice <= priceLimit);\r\n    if (priceLimit > buyPrice) {\r\n      require(collateralToken.transfer(buyer, priceLimit.sub(buyPrice)));\r\n    }\r\n    require(bondedToken.mint(buyer, buyAmount));\r\n    if (liquiditySpread > 0) {\r\n      _rewardBondingCurveOwner(liquiditySpread);\r\n    }\r\n    currentMintedTokens = currentMintedTokens.add(totalMintAmount);\r\n    currentCollateral = currentCollateral.add(buyPrice);\r\n    emit Buy(buyer, buyAmount, buyPrice);\r\n  }\r\n\r\n  function sell(address seller, uint256 sellAmount, uint256 priceLimit)\r\n    public\r\n    requireToken(bondedToken, seller, sellAmount)\r\n    _adjustAutoInflation\r\n  {\r\n    uint256 sellPrice = getSellPrice(sellAmount);\r\n    require(sellPrice > 0 && sellPrice >= priceLimit);\r\n    require(bondedToken.burn(address(this), sellAmount));\r\n    require(collateralToken.transfer(seller, sellPrice));\r\n    currentMintedTokens = currentMintedTokens.sub(sellAmount);\r\n    currentCollateral = currentCollateral.sub(sellPrice);\r\n    emit Sell(seller, sellAmount, sellPrice);\r\n  }\r\n\r\n  function deflate(address burner, uint256 burnAmount) public requireToken(bondedToken, burner, burnAmount) {\r\n    require(bondedToken.burn(address(this), burnAmount));\r\n    currentMintedTokens = currentMintedTokens.sub(burnAmount);\r\n    emit Deflate(burner, burnAmount);\r\n  }\r\n\r\n  function _rewardBondingCurveOwner(uint256 rewardAmount) internal {\r\n    address beneficiary = getRevenueBeneficiary();\r\n    require(bondedToken.mint(beneficiary, rewardAmount));\r\n    emit RevenueCollect(beneficiary, rewardAmount);\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/math/Math.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary Math {\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow, so we distribute\r\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/access/roles/CapperRole.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\ncontract CapperRole {\r\n    using Roles for Roles.Role;\r\n\r\n    event CapperAdded(address indexed account);\r\n    event CapperRemoved(address indexed account);\r\n\r\n    Roles.Role private _cappers;\r\n\r\n    constructor () internal {\r\n        _addCapper(msg.sender);\r\n    }\r\n\r\n    modifier onlyCapper() {\r\n        require(isCapper(msg.sender), \"CapperRole: caller does not have the Capper role\");\r\n        _;\r\n    }\r\n\r\n    function isCapper(address account) public view returns (bool) {\r\n        return _cappers.has(account);\r\n    }\r\n\r\n    function addCapper(address account) public onlyCapper {\r\n        _addCapper(account);\r\n    }\r\n\r\n    function renounceCapper() public {\r\n        _removeCapper(msg.sender);\r\n    }\r\n\r\n    function _addCapper(address account) internal {\r\n        _cappers.add(account);\r\n        emit CapperAdded(account);\r\n    }\r\n\r\n    function _removeCapper(address account) internal {\r\n        _cappers.remove(account);\r\n        emit CapperRemoved(account);\r\n    }\r\n}\r\n\r\n// File: contracts/token/LockableToken.sol\r\n\r\npragma solidity 0.5.9;\r\n\r\n\r\n\r\n\r\n\r\n\r\n/// \"LockableToken\" adds token locking functionality to ERC-20 smart contract. The authorized addresses (Cappers) are\r\n/// allowed to lock tokens from any token holder to prevent token transfers up to that amount. If a token holder is\r\n/// locked by multiple cappers, the maximum number is used as the amount of locked tokens.\r\ncontract LockableToken is ERC20Base, CapperRole {\r\n  using SafeMath for uint256;\r\n\r\n  event TokenLocked(address indexed locker, address indexed owner, uint256 value);\r\n  event TokenUnlocked(address indexed locker, address indexed owner, uint256 value);\r\n\r\n  uint256 constant NOT_FOUND = uint256(-1);\r\n\r\n  struct TokenLock {\r\n    address locker;\r\n    uint256 value;\r\n  }\r\n\r\n  mapping (address => TokenLock[]) _locks;\r\n\r\n  function getLockedToken(address owner) public view returns (uint256) {\r\n    TokenLock[] storage locks = _locks[owner];\r\n    uint256 maxLock = 0;\r\n    for (uint256 i = 0; i < locks.length; ++i) {\r\n      maxLock = Math.max(maxLock, locks[i].value);\r\n    }\r\n    return maxLock;\r\n  }\r\n\r\n  function getLockedTokenAt(address owner, address locker) public view returns (uint256) {\r\n    uint256 index = _getTokenLockIndex(owner, locker);\r\n    if (index != NOT_FOUND) return _locks[owner][index].value;\r\n    else return 0;\r\n  }\r\n\r\n  function unlockedBalanceOf(address owner) public view returns (uint256) {\r\n    return balanceOf(owner).sub(getLockedToken(owner));\r\n  }\r\n\r\n  function lock(address owner, uint256 value) public onlyCapper returns (bool) {\r\n    uint256 index = _getTokenLockIndex(owner, msg.sender);\r\n    if (index != NOT_FOUND) {\r\n      uint256 currentLock = _locks[owner][index].value;\r\n      require(balanceOf(owner) >= currentLock.add(value));\r\n      _locks[owner][index].value = currentLock.add(value);\r\n    } else {\r\n      require(balanceOf(owner) >= value);\r\n      _locks[owner].push(TokenLock(msg.sender, value));\r\n    }\r\n    emit TokenLocked(msg.sender, owner, value);\r\n    return true;\r\n  }\r\n\r\n  function unlock(address owner, uint256 value) public returns (bool) {\r\n    uint256 index = _getTokenLockIndex(owner, msg.sender);\r\n    require(index != NOT_FOUND);\r\n    TokenLock[] storage locks = _locks[owner];\r\n    require(locks[index].value >= value);\r\n    locks[index].value = locks[index].value.sub(value);\r\n    if (locks[index].value == 0) {\r\n      if (index != locks.length - 1) {\r\n        locks[index] = locks[locks.length - 1];\r\n      }\r\n      locks.pop();\r\n    }\r\n    emit TokenUnlocked(msg.sender, owner, value);\r\n    return true;\r\n  }\r\n\r\n  function _getTokenLockIndex(address owner, address locker) internal view returns (uint256) {\r\n    TokenLock[] storage locks = _locks[owner];\r\n    for (uint256 i = 0; i < locks.length; ++i) {\r\n      if (locks[i].locker == locker) return i;\r\n    }\r\n    return NOT_FOUND;\r\n  }\r\n\r\n  function _transfer(address from, address to, uint256 value) internal {\r\n    require(unlockedBalanceOf(from) >= value);\r\n    super._transfer(from, to, value);\r\n  }\r\n\r\n  function _burn(address account, uint256 value) internal {\r\n    require(unlockedBalanceOf(account) >= value);\r\n    super._burn(account, value);\r\n  }\r\n}\r\n\r\n// File: contracts/data/TCDBase.sol\r\n\r\npragma solidity 0.5.9;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/// \"TCDBase\" is the base class for Band Protocol's Token-Curated DataSources implementation. The contract essentially\r\n/// keeps track of a sorted list of trusted data sources, based on the total amount of token stake the data sources\r\n/// have. Any one can apply for a new data source using `register` function. Token holders can `stake` or `unstake`\r\n/// for any existing data sources. This class is abstract, so it needs to be extended by a subclass that utilizes\r\n/// the list of active data sources (See AggTCD and MultiSigTCD). Fees are collected in ETH and are converted to\r\n/// dataset tokens during `distributeFee` function call.\r\ncontract TCDBase is QueryInterface {\r\n  using Fractional for uint256;\r\n  using SafeMath for uint256;\r\n\r\n  event DataSourceRegistered(address indexed dataSource, address indexed owner, uint256 stake);\r\n  event DataSourceStaked(address indexed dataSource, address indexed participant, uint256 stake);\r\n  event DataSourceUnstaked(address indexed dataSource, address indexed participant, uint256 unstake);\r\n  event FeeDistributed(address indexed dataSource, uint256 totalReward, uint256 ownerReward);\r\n  event WithdrawReceiptCreated(uint256 receiptIndex, address indexed owner, uint256 amount, uint64 withdrawTime);\r\n  event WithdrawReceiptUnlocked(uint256 receiptIndex, address indexed owner, uint256 amount);\r\n\r\n  enum Order {EQ, LT, GT}\r\n\r\n  struct DataSourceInfo {\r\n    address owner;\r\n    uint256 stake;\r\n    uint256 totalOwnerships;\r\n    mapping (address => uint256) tokenLocks;\r\n    mapping (address => uint256) ownerships;\r\n  }\r\n\r\n  struct WithdrawReceipt {\r\n    address owner;\r\n    uint256 amount;\r\n    uint64 withdrawTime;\r\n    bool isWithdrawn;\r\n  }\r\n\r\n  mapping (address => DataSourceInfo) public infoMap;\r\n  mapping (address => address) activeList;\r\n  mapping (address => address) reserveList;\r\n  uint256 public activeCount;\r\n  uint256 public reserveCount;\r\n\r\n  address constant internal NOT_FOUND = address(0x00);\r\n  address constant internal ACTIVE_GUARD = address(0x01);\r\n  address constant internal RESERVE_GUARD = address(0x02);\r\n  WithdrawReceipt[] public withdrawReceipts;\r\n\r\n  BondingCurve public bondingCurve;\r\n  Parameters public params;\r\n  LockableToken public token;\r\n  uint256 public undistributedReward;\r\n  bytes8 public prefix;\r\n\r\n  constructor(bytes8 _prefix, BondingCurve _bondingCurve, Parameters _params, BandRegistry _registry) public QueryInterface(_registry) {\r\n    bondingCurve = _bondingCurve;\r\n    params = _params;\r\n    prefix = _prefix;\r\n    token = LockableToken(address(_bondingCurve.bondedToken()));\r\n    _registry.band().approve(address(_bondingCurve), 2 ** 256 - 1);\r\n    activeList[ACTIVE_GUARD] = ACTIVE_GUARD;\r\n    reserveList[RESERVE_GUARD] = RESERVE_GUARD;\r\n  }\r\n\r\n  function getOwnership(address dataSource, address staker) public view returns (uint256) {\r\n    return infoMap[dataSource].ownerships[staker];\r\n  }\r\n\r\n  function getStake(address dataSource, address staker) public view returns (uint256) {\r\n    DataSourceInfo storage provider = infoMap[dataSource];\r\n    if (provider.totalOwnerships == 0) return 0;\r\n    return provider.ownerships[staker].mul(provider.stake).div(provider.totalOwnerships);\r\n  }\r\n\r\n  function register(address dataSource, address prevDataSource, uint256 initialStake) public {\r\n    require(dataSource != NOT_FOUND && dataSource != ACTIVE_GUARD && dataSource != RESERVE_GUARD);\r\n    require(infoMap[dataSource].totalOwnerships == 0);\r\n    require(initialStake > 0 && initialStake >= params.get(prefix, \"min_provider_stake\"));\r\n    require(token.lock(msg.sender, initialStake));\r\n    infoMap[dataSource] = DataSourceInfo({\r\n      owner: msg.sender,\r\n      stake: initialStake,\r\n      totalOwnerships: initialStake\r\n    });\r\n    infoMap[dataSource].ownerships[msg.sender] = initialStake;\r\n    infoMap[dataSource].tokenLocks[msg.sender] = initialStake;\r\n    emit DataSourceRegistered(dataSource, msg.sender, initialStake);\r\n    _addDataSource(dataSource, prevDataSource);\r\n    _rebalanceLists();\r\n  }\r\n\r\n  function stake(address dataSource, address prevDataSource, address newPrevDataSource, uint256 value) public {\r\n    require(token.lock(msg.sender, value));\r\n    _removeDataSource(dataSource, prevDataSource);\r\n    DataSourceInfo storage provider = infoMap[dataSource];\r\n    uint256 newStakerTokenLock = provider.tokenLocks[msg.sender].add(value);\r\n    provider.tokenLocks[msg.sender] = newStakerTokenLock;\r\n    _stake(msg.sender, value, dataSource);\r\n    if (getStake(dataSource, provider.owner) >= params.get(prefix, \"min_provider_stake\")) {\r\n      _addDataSource(dataSource, newPrevDataSource);\r\n    }\r\n    _rebalanceLists();\r\n  }\r\n\r\n  function unstake(address dataSource, address prevDataSource, address newPrevDataSource, uint256 withdrawOwnership) public {\r\n    DataSourceInfo storage provider = infoMap[dataSource];\r\n    require(withdrawOwnership <= provider.ownerships[msg.sender]);\r\n    _removeDataSource(dataSource, prevDataSource);\r\n    uint256 newOwnership = provider.totalOwnerships.sub(withdrawOwnership);\r\n    uint256 currentStakerStake = getStake(dataSource, msg.sender);\r\n    if (currentStakerStake > provider.tokenLocks[msg.sender]) {\r\n      uint256 unrealizedStake = currentStakerStake.sub(provider.tokenLocks[msg.sender]);\r\n      require(token.transfer(msg.sender, unrealizedStake));\r\n      require(token.lock(msg.sender, unrealizedStake));\r\n    }\r\n    uint256 withdrawAmount = provider.stake.mul(withdrawOwnership).div(provider.totalOwnerships);\r\n    uint256 newStake = provider.stake.sub(withdrawAmount);\r\n    uint256 newStakerTokenLock = currentStakerStake.sub(withdrawAmount);\r\n    uint256 newStakerOwnership = provider.ownerships[msg.sender].sub(withdrawOwnership);\r\n    provider.stake = newStake;\r\n    provider.totalOwnerships = newOwnership;\r\n    provider.ownerships[msg.sender] = newStakerOwnership;\r\n    provider.tokenLocks[msg.sender] = newStakerTokenLock;\r\n    uint256 delay;\r\n    if (msg.sender == provider.owner && (delay = params.get(prefix, \"withdraw_delay\")) > 0) {\r\n      uint256 withdrawTime = now.add(delay);\r\n      require(withdrawTime < (1 << 64));\r\n      withdrawReceipts.push(WithdrawReceipt({\r\n        owner: provider.owner,\r\n        amount: withdrawAmount,\r\n        withdrawTime: uint64(withdrawTime),\r\n        isWithdrawn: false\r\n      }));\r\n      emit WithdrawReceiptCreated(withdrawReceipts.length - 1, provider.owner, withdrawAmount, uint64(withdrawTime));\r\n    } else {\r\n      require(token.unlock(msg.sender, withdrawAmount));\r\n    }\r\n    emit DataSourceUnstaked(dataSource, msg.sender, withdrawAmount);\r\n    if (getStake(dataSource, provider.owner) >= params.get(prefix, \"min_provider_stake\")) {\r\n      _addDataSource(dataSource, newPrevDataSource);\r\n    }\r\n    _rebalanceLists();\r\n  }\r\n\r\n  function addETHFee() public payable {}\r\n\r\n  function addTokenFee(uint256 tokenAmount) public {\r\n    token.transferFrom(msg.sender, address(this), tokenAmount);\r\n    undistributedReward = undistributedReward.add(tokenAmount);\r\n  }\r\n\r\n  function distributeFee(uint256 tokenAmount) public {\r\n    require(address(this).balance > 0);\r\n    registry.exchange().convertFromEthToBand.value(address(this).balance)();\r\n    bondingCurve.buy(address(this), registry.band().balanceOf(address(this)), tokenAmount);\r\n    undistributedReward = undistributedReward.add(tokenAmount);\r\n    uint256 providerReward = undistributedReward.div(activeCount);\r\n    uint256 ownerPercentage = params.get(prefix, \"owner_revenue_pct\");\r\n    uint256 ownerReward = ownerPercentage.mulFrac(providerReward);\r\n    uint256 stakeIncreased = providerReward.sub(ownerReward);\r\n    address dataSourceAddress = activeList[ACTIVE_GUARD];\r\n    while (dataSourceAddress != ACTIVE_GUARD) {\r\n      DataSourceInfo storage provider = infoMap[dataSourceAddress];\r\n      provider.stake = provider.stake.add(stakeIncreased);\r\n      if (ownerReward > 0) _stake(provider.owner, ownerReward, dataSourceAddress);\r\n      undistributedReward = undistributedReward.sub(providerReward);\r\n      emit FeeDistributed(dataSourceAddress, providerReward, ownerReward);\r\n      dataSourceAddress = activeList[dataSourceAddress];\r\n    }\r\n  }\r\n\r\n  function distributeStakeReward(uint256 tokenAmount) public {\r\n    token.transferFrom(msg.sender, address(this), tokenAmount);\r\n    uint256 remainingReward = tokenAmount;\r\n    uint256 stakeReward = tokenAmount.div(activeCount);\r\n    address dataSourceAddress = activeList[ACTIVE_GUARD];\r\n    while (dataSourceAddress != ACTIVE_GUARD) {\r\n      DataSourceInfo storage provider = infoMap[dataSourceAddress];\r\n      provider.stake = provider.stake.add(stakeReward);\r\n      remainingReward = remainingReward.sub(stakeReward);\r\n      emit FeeDistributed(dataSourceAddress, stakeReward, 0);\r\n      dataSourceAddress = activeList[dataSourceAddress];\r\n    }\r\n    undistributedReward = undistributedReward.add(remainingReward);\r\n  }\r\n\r\n  function unlockTokenFromReceipt(uint256 receiptId) public {\r\n    WithdrawReceipt storage receipt = withdrawReceipts[receiptId];\r\n    require(!receipt.isWithdrawn && now >= receipt.withdrawTime);\r\n    receipt.isWithdrawn = true;\r\n    require(token.unlock(receipt.owner, receipt.amount));\r\n    emit WithdrawReceiptUnlocked(receiptId, receipt.owner, receipt.amount);\r\n  }\r\n\r\n  function _stake(address staker, uint256 value, address dataSource) internal {\r\n    DataSourceInfo storage provider = infoMap[dataSource];\r\n    require(provider.totalOwnerships > 0);\r\n    uint256 newStake = provider.stake.add(value);\r\n    uint256 newtotalOwnerships = newStake.mul(provider.totalOwnerships).div(provider.stake);\r\n    uint256 newStakerOwnership = provider.ownerships[staker].add(newtotalOwnerships.sub(provider.totalOwnerships));\r\n    provider.ownerships[staker] = newStakerOwnership;\r\n    provider.stake = newStake;\r\n    provider.totalOwnerships = newtotalOwnerships;\r\n    emit DataSourceStaked(dataSource, staker, value);\r\n  }\r\n\r\n  function _compare(address dataSourceLeft, address dataSourceRight) internal view returns (Order) {\r\n    if (dataSourceLeft == dataSourceRight) return Order.EQ;\r\n    DataSourceInfo storage leftProvider = infoMap[dataSourceLeft];\r\n    DataSourceInfo storage rightProvider = infoMap[dataSourceRight];\r\n    if (leftProvider.stake != rightProvider.stake) return leftProvider.stake < rightProvider.stake ? Order.LT : Order.GT;\r\n    return uint256(dataSourceLeft) < uint256(dataSourceRight) ? Order.LT : Order.GT; /// Arbitrary tie-breaker\r\n  }\r\n\r\n  function _findPrevDataSource(address dataSource) internal view returns (address) {\r\n    if (activeCount != 0 && _compare(dataSource, activeList[ACTIVE_GUARD]) != Order.LT) {\r\n      address currentIndex = ACTIVE_GUARD;\r\n      while (activeList[currentIndex] != ACTIVE_GUARD) {\r\n        address nextIndex = activeList[currentIndex];\r\n        if (_compare(dataSource, nextIndex) == Order.GT) currentIndex = nextIndex;\r\n        else break;\r\n      }\r\n      return currentIndex;\r\n    } else if (reserveCount != 0) {\r\n      address currentIndex = RESERVE_GUARD;\r\n      while (reserveList[currentIndex] != RESERVE_GUARD) {\r\n        address nextIndex = reserveList[currentIndex];\r\n        if (_compare(dataSource, nextIndex) == Order.LT) currentIndex = nextIndex;\r\n        else break;\r\n      }\r\n      return currentIndex;\r\n    } else {\r\n      return RESERVE_GUARD;\r\n    }\r\n  }\r\n\r\n  function _addDataSource(address dataSource, address _prevDataSource) internal {\r\n    address prevDataSource = _prevDataSource == NOT_FOUND ? _findPrevDataSource(dataSource) : _prevDataSource;\r\n    if (activeList[prevDataSource] != NOT_FOUND) {\r\n      if (prevDataSource == ACTIVE_GUARD) require(reserveCount == 0 || _compare(dataSource, reserveList[RESERVE_GUARD]) == Order.GT);\r\n      else require(_compare(dataSource, prevDataSource) == Order.GT);\r\n      require(activeList[prevDataSource] == ACTIVE_GUARD || _compare(activeList[prevDataSource], dataSource) == Order.GT);\r\n      activeList[dataSource] = activeList[prevDataSource];\r\n      activeList[prevDataSource] = dataSource;\r\n      activeCount++;\r\n    } else if (reserveList[prevDataSource] != NOT_FOUND) {\r\n      if (prevDataSource == RESERVE_GUARD) require(activeCount == 0 || _compare(activeList[ACTIVE_GUARD], dataSource) == Order.GT);\r\n      else require(_compare(prevDataSource, dataSource) == Order.GT);\r\n      require(reserveList[prevDataSource] == RESERVE_GUARD || _compare(dataSource, reserveList[prevDataSource]) == Order.GT);\r\n      reserveList[dataSource] = reserveList[prevDataSource];\r\n      reserveList[prevDataSource] = dataSource;\r\n      reserveCount++;\r\n    } else {\r\n      revert();\r\n    }\r\n  }\r\n\r\n  function _removeDataSource(address dataSource, address _prevDataSource) internal {\r\n    if (activeList[dataSource] == NOT_FOUND && reserveList[dataSource] == NOT_FOUND) return;\r\n    address prevDataSource = _prevDataSource == NOT_FOUND ? _findPrevDataSource(dataSource) : _prevDataSource;\r\n    if (activeList[prevDataSource] != NOT_FOUND) {\r\n      require(dataSource != ACTIVE_GUARD);\r\n      require(activeList[prevDataSource] == dataSource);\r\n      activeList[prevDataSource] = activeList[dataSource];\r\n      activeList[dataSource] = NOT_FOUND;\r\n      activeCount--;\r\n    } else if (reserveList[prevDataSource] != NOT_FOUND) {\r\n      require(dataSource != RESERVE_GUARD);\r\n      require(reserveList[prevDataSource] == dataSource);\r\n      reserveList[prevDataSource] = reserveList[dataSource];\r\n      reserveList[dataSource] = NOT_FOUND;\r\n      reserveCount--;\r\n    }\r\n  }\r\n\r\n  function _rebalanceLists() internal {\r\n    uint256 maxProviderCount = params.get(prefix, \"max_provider_count\");\r\n    while (activeCount < maxProviderCount && reserveCount > 0) {\r\n      address dataSource = reserveList[RESERVE_GUARD];\r\n      _removeDataSource(dataSource, RESERVE_GUARD);\r\n      _addDataSource(dataSource, ACTIVE_GUARD);\r\n    }\r\n    while (activeCount > maxProviderCount) {\r\n      address dataSource = activeList[ACTIVE_GUARD];\r\n      _removeDataSource(dataSource, ACTIVE_GUARD);\r\n      _addDataSource(dataSource, RESERVE_GUARD);\r\n    }\r\n  }\r\n}\r\n\r\n// File: contracts/data/OffchainAggTCD.sol\r\n\r\npragma solidity 0.5.9;\r\n\r\n\r\n\r\n\r\n/// \"OffchainAggTCD\" is a TCD that curates a list of trusted addresses. Data points from all reporters are aggregated\r\n/// off-chain and reported using `report` function with ECDSA signatures. Data providers are responsible for combining\r\n/// data points into one aggregated value together with timestamp and status, which will be reported to this contract.\r\ncontract OffchainAggTCD is TCDBase {\r\n  using SafeMath for uint256;\r\n\r\n  event DataUpdated(bytes key, uint256 value, uint64 timestamp, QueryStatus status);\r\n\r\n  struct DataPoint {\r\n    uint256 value;\r\n    uint64 timestamp;\r\n    QueryStatus status;\r\n  }\r\n\r\n  mapping (bytes => DataPoint) private aggData;\r\n\r\n  constructor(bytes8 _prefix, BondingCurve _bondingCurve, Parameters _params, BandRegistry _registry)\r\n    public TCDBase(_prefix, _bondingCurve, _params, _registry) {}\r\n\r\n  function queryPrice() public view returns (uint256) {\r\n    return params.get(prefix, \"query_price\");\r\n  }\r\n\r\n  function report(\r\n    bytes calldata key, uint256 value, uint64 timestamp, QueryStatus status,\r\n    uint8[] calldata v, bytes32[] calldata r, bytes32[] calldata s\r\n  ) external {\r\n    require(v.length == r.length && v.length == s.length);\r\n    uint256 validSignatures = 0;\r\n    bytes32 message = keccak256(abi.encodePacked(\r\n      \"\\x19Ethereum Signed Message:\\n32\",\r\n      keccak256(abi.encodePacked(key, value, timestamp, status, address(this))))\r\n    );\r\n    address lastSigner = address(0);\r\n    for (uint256 i = 0; i < v.length; ++i) {\r\n      address recovered = ecrecover(message, v[i], r[i], s[i]);\r\n      require(recovered > lastSigner);\r\n      lastSigner = recovered;\r\n      if (activeList[recovered] != NOT_FOUND) {\r\n        validSignatures++;\r\n      }\r\n    }\r\n    require(validSignatures.mul(3) > activeCount.mul(2));\r\n    require(timestamp > aggData[key].timestamp && uint256(timestamp) <= now);\r\n    aggData[key] = DataPoint({\r\n      value: value,\r\n      timestamp: timestamp,\r\n      status: status\r\n    });\r\n    emit DataUpdated(key, value, timestamp, status);\r\n  }\r\n\r\n  function queryImpl(bytes memory input) internal returns (bytes32 output, uint256 updatedAt, QueryStatus status) {\r\n    DataPoint storage data = aggData[input];\r\n    if (data.timestamp == 0) return (\"\", 0, QueryStatus.NOT_AVAILABLE);\r\n    if (data.status != QueryStatus.OK) return (\"\", data.timestamp, data.status);\r\n    return (bytes32(data.value), data.timestamp, QueryStatus.OK);\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"distributeFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reserveCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"undistributedReward\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"distributeStakeReward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"key\",\"type\":\"bytes\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"timestamp\",\"type\":\"uint64\"},{\"name\":\"status\",\"type\":\"uint8\"},{\"name\":\"v\",\"type\":\"uint8[]\"},{\"name\":\"r\",\"type\":\"bytes32[]\"},{\"name\":\"s\",\"type\":\"bytes32[]\"}],\"name\":\"report\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"activeCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"addETHFee\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"dataSource\",\"type\":\"address\"},{\"name\":\"prevDataSource\",\"type\":\"address\"},{\"name\":\"initialStake\",\"type\":\"uint256\"}],\"name\":\"register\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"dataSource\",\"type\":\"address\"},{\"name\":\"prevDataSource\",\"type\":\"address\"},{\"name\":\"newPrevDataSource\",\"type\":\"address\"},{\"name\":\"withdrawOwnership\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"withdrawReceipts\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"withdrawTime\",\"type\":\"uint64\"},{\"name\":\"isWithdrawn\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"addTokenFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"prefix\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"dataSource\",\"type\":\"address\"},{\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"getStake\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"dataSource\",\"type\":\"address\"},{\"name\":\"prevDataSource\",\"type\":\"address\"},{\"name\":\"newPrevDataSource\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"dataSource\",\"type\":\"address\"},{\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"getOwnership\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"receiptId\",\"type\":\"uint256\"}],\"name\":\"unlockTokenFromReceipt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"queryPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"params\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"infoMap\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"stake\",\"type\":\"uint256\"},{\"name\":\"totalOwnerships\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"input\",\"type\":\"bytes\"}],\"name\":\"query\",\"outputs\":[{\"name\":\"output\",\"type\":\"bytes32\"},{\"name\":\"updatedAt\",\"type\":\"uint256\"},{\"name\":\"status\",\"type\":\"uint8\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bondingCurve\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_prefix\",\"type\":\"bytes8\"},{\"name\":\"_bondingCurve\",\"type\":\"address\"},{\"name\":\"_params\",\"type\":\"address\"},{\"name\":\"_registry\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"key\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint64\"},{\"indexed\":false,\"name\":\"status\",\"type\":\"uint8\"}],\"name\":\"DataUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"dataSource\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"stake\",\"type\":\"uint256\"}],\"name\":\"DataSourceRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"dataSource\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"participant\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"stake\",\"type\":\"uint256\"}],\"name\":\"DataSourceStaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"dataSource\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"participant\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"unstake\",\"type\":\"uint256\"}],\"name\":\"DataSourceUnstaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"dataSource\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"totalReward\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ownerReward\",\"type\":\"uint256\"}],\"name\":\"FeeDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"receiptIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"withdrawTime\",\"type\":\"uint64\"}],\"name\":\"WithdrawReceiptCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"receiptIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawReceiptUnlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"input\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"status\",\"type\":\"uint8\"}],\"name\":\"Query\",\"type\":\"event\"}]","ContractName":"OffchainAggTCD","CompilerVersion":"v0.5.9+commit.e560f70d","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"7463643a00000000000000000000000000000000000000000000000000000000000000000000000000000000e5f32f9b531672889c72d2ba8be73f3a33c5c73e000000000000000000000000584dd3df26bd6f6cdfd9b08b85130e9c53709cec0000000000000000000000003a897d9ba6e5cd65de56babcd95a4f69c8b852a0","Library":"","LicenseType":"None","SwarmSource":"bzzr://6e2d65525ffe5df529169adaec7939f2688fdbbc490b7f26ed4f983349dd66b7"}]}