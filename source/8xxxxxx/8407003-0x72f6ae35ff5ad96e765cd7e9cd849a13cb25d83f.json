{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.11;\r\n\r\ncontract Owned {\r\n    // State variable\r\n    address payable owner;\r\n\r\n    // Modifiers\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Only owner can call this function.\");\r\n        _;\r\n    }\r\n\r\n    // constructor\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n}\r\n\r\ncontract MoneyPotSystem is Owned {\r\n\r\n    // Custom types\r\n    struct Donation {\r\n        address payable donor;\r\n        uint amount;\r\n    }\r\n\r\n    struct MoneyPot {\r\n        uint id;\r\n        address payable author;\r\n        address payable beneficiary;\r\n        string name;\r\n        string description;\r\n        address[] donors;\r\n        mapping(uint32 => Donation) donations;\r\n        uint32 donationsCounter;\r\n        bool open;\r\n        uint feesAmount;\r\n    }\r\n\r\n    // State variables\r\n    mapping(uint => MoneyPot) public moneypots;\r\n    mapping(address => uint256[]) public addressToMoneyPot;\r\n\r\n    uint fees;\r\n    uint feesAmount;\r\n\r\n    uint moneypotCounter;\r\n\r\n    bool contractOpen;\r\n\r\n    // Modifiers\r\n    modifier onlyContractOpen() {\r\n        require(contractOpen == true);\r\n        _;\r\n    }\r\n\r\n    // Events\r\n    event createMoneyPotEvent (\r\n        uint indexed _id,\r\n        address payable indexed _author,\r\n        string _name,\r\n        uint _feesAmount,\r\n        address[] _donors\r\n    );\r\n\r\n    event chipInEvent (\r\n        uint indexed _id,\r\n        address payable indexed _donor,\r\n        uint256 _amount,\r\n        string _name,\r\n        uint _donation,\r\n        uint32 indexed _donationId\r\n    );\r\n\r\n    event closeEvent (\r\n        uint indexed _id,\r\n        address payable indexed _benefeciary,\r\n        uint256 _amount,\r\n        string _name,\r\n        address payable indexed _sender\r\n    );\r\n\r\n    event addDonorEvent(\r\n        uint indexed _id,\r\n        address payable indexed _donor\r\n    );\r\n\r\n    event feesAmountChangeEvent(\r\n        uint _oldFeesAmount,\r\n        uint _newFeesAmount\r\n    );\r\n\r\n    event withdrawFeesEvent(\r\n        uint _feesAmount\r\n    );\r\n\r\n    constructor() public {\r\n        moneypotCounter = 0;\r\n        fees = 0;\r\n        feesAmount = 6800000000000000; // 0.0068 ether\r\n        contractOpen = true;\r\n    }\r\n\r\n    function createMoneyPot(string memory _name, string memory _description, address payable _benefeciary, address[] memory _donors) onlyContractOpen public {\r\n\r\n        address[] memory donors = new address[](_donors.length + 1);\r\n\r\n        address payable author = msg.sender;\r\n        uint moneyPotId = moneypotCounter;\r\n\r\n        uint j = 0;\r\n        for (j; j < _donors.length; j++) {\r\n            require(author != _donors[j]);\r\n\r\n            donors[j] = _donors[j];\r\n            // add money pot id to donor money pot list\r\n            addressToMoneyPot[_donors[j]].push(moneyPotId);\r\n        }\r\n\r\n        // add author to donor\r\n        donors[j] = msg.sender;\r\n        // add money pot id to author money pot list\r\n        addressToMoneyPot[msg.sender].push(moneyPotId);\r\n\r\n        // Add money pot to benefeciary money pot list, if benefeciary is not author\r\n        if (msg.sender != _benefeciary) {\r\n            addressToMoneyPot[_benefeciary].push(moneyPotId);\r\n        }\r\n\r\n        moneypots[moneypotCounter] = MoneyPot(moneyPotId, author, _benefeciary, _name, _description, donors, 0, true, feesAmount);\r\n\r\n        // trigger the event\r\n        emit createMoneyPotEvent(moneypotCounter, author, _name, feesAmount, _donors);\r\n\r\n        moneypotCounter++;\r\n\r\n    }\r\n\r\n    function addDonor(uint _id, address payable _donor) public {\r\n\r\n        // we check whether the money pot exists\r\n        require(_id >= 0 && _id <= moneypotCounter);\r\n\r\n        MoneyPot storage myMoneyPot = moneypots[_id];\r\n\r\n        // we check if moneypot is open\r\n        require(myMoneyPot.open);\r\n\r\n        //check caller is author\r\n        require(myMoneyPot.author == msg.sender);\r\n\r\n        // check if donor already exist\r\n        bool donorFound = false;\r\n\r\n        for (uint j = 0; j < myMoneyPot.donors.length; j++) {\r\n            if (myMoneyPot.donors[j] == _donor) {\r\n                donorFound = true;\r\n                break;\r\n            }\r\n        }\r\n        require(!donorFound);\r\n\r\n        // Add donor\r\n        myMoneyPot.donors.push(_donor);\r\n\r\n        // le bénéficiaire possède deja l'identififiant de son pot commun\r\n        if(myMoneyPot.beneficiary != _donor) {\r\n            addressToMoneyPot[_donor].push(_id);\r\n        }\r\n\r\n        emit addDonorEvent(_id, _donor);\r\n    }\r\n    // fetch the number of money pots in the truffleContract\r\n    function getNumberOfMoneyPots() public view returns (uint256) {\r\n        return moneypotCounter;\r\n    }\r\n\r\n    function getNumberOfMyMoneyPots() public view returns (uint256) {\r\n        return addressToMoneyPot[msg.sender].length;\r\n    }\r\n\r\n    function getMyMoneyPotsIds(address who) public view returns (uint256[] memory) {\r\n        return addressToMoneyPot[who];\r\n    }\r\n\r\n    function getDonors(uint256 moneyPotId) public view returns (address[] memory) {\r\n        return moneypots[moneyPotId].donors;\r\n    }\r\n\r\n    function getDonation(uint moneyPotId, uint32 donationId) public view returns (address donor, uint amount) {\r\n\r\n        Donation storage donation = moneypots[moneyPotId].donations[donationId];\r\n\r\n        return (donation.donor, donation.amount);\r\n    }\r\n\r\n    function chipIn(uint _id) payable public {\r\n        require(moneypotCounter > 0);\r\n\r\n        // we check whether the money pot exists\r\n        require(_id >= 0 && _id <= moneypotCounter);\r\n\r\n        // we retrieve the article\r\n        MoneyPot storage myMoneyPot = moneypots[_id];\r\n\r\n        // we check if moneypot is open\r\n        require(myMoneyPot.open);\r\n\r\n        //forbidden to give if you are not a donor\r\n        bool donorFound = false;\r\n\r\n        for (uint j = 0; j < myMoneyPot.donors.length; j++) {\r\n            if (myMoneyPot.donors[j] == msg.sender) {\r\n                donorFound = true;\r\n                break;\r\n            }\r\n        }\r\n\r\n        require(donorFound);\r\n\r\n        fees = fees + myMoneyPot.feesAmount;\r\n\r\n        uint donation = msg.value - myMoneyPot.feesAmount;\r\n\r\n        // Add donation\r\n        myMoneyPot.donations[myMoneyPot.donationsCounter] = Donation(msg.sender, donation);\r\n\r\n        // trigger the event\r\n        emit chipInEvent(_id, msg.sender, msg.value, myMoneyPot.name, donation, myMoneyPot.donationsCounter);\r\n\r\n        myMoneyPot.donationsCounter += 1;\r\n\r\n    }\r\n\r\n    function withdrawFees() onlyOwner public {\r\n        owner.transfer(fees);\r\n        emit withdrawFeesEvent(fees);\r\n        fees = 0;\r\n    }\r\n\r\n    function getFeesAmount() public view returns (uint) {\r\n        return feesAmount;\r\n    }\r\n\r\n    function setFeesAmount(uint _amount) onlyOwner public {\r\n        require(feesAmount != _amount);\r\n\r\n        emit feesAmountChangeEvent(feesAmount, _amount);\r\n        feesAmount = _amount;\r\n    }\r\n\r\n    function getFees() onlyOwner public view returns (uint) {\r\n        return fees;\r\n    }\r\n\r\n    function getMoneyPotAmount(uint _id) public view returns (uint256) {\r\n        require(moneypotCounter > 0);\r\n\r\n        // we check whether the money pot exists\r\n        require(_id >= 0 && _id <= moneypotCounter);\r\n\r\n        // we retrieve the article\r\n        MoneyPot storage myMoneyPot = moneypots[_id];\r\n\r\n        uint256 amount = 0;\r\n\r\n        for (uint32 j = 0; j < myMoneyPot.donationsCounter; j++) {\r\n            amount += myMoneyPot.donations[j].amount;\r\n        }\r\n\r\n        return amount;\r\n    }\r\n\r\n    function close(uint _id) public {\r\n        require(moneypotCounter > 0);\r\n\r\n        require(_id >= 0 && _id <= moneypotCounter);\r\n\r\n        MoneyPot storage myMoneyPot = moneypots[_id];\r\n\r\n        //check caller is author or beneficiary or truffleContract owner\r\n        require(msg.sender == myMoneyPot.author || msg.sender == myMoneyPot.beneficiary || msg.sender == owner);\r\n\r\n        //check open\r\n        require(myMoneyPot.open);\r\n\r\n        uint amount = getMoneyPotAmount(myMoneyPot.id);\r\n\r\n        myMoneyPot.open = false;\r\n\r\n        myMoneyPot.beneficiary.transfer(amount);\r\n\r\n        emit closeEvent(_id, myMoneyPot.beneficiary, amount, myMoneyPot.name, msg.sender);\r\n    }\r\n\r\n    function closeAllMoneypot() onlyOwner public {\r\n\r\n        for (uint i = 0; i < moneypotCounter; i++) {\r\n\r\n            MoneyPot storage moneyPot = moneypots[i];\r\n            if (moneyPot.open) {\r\n                close(moneyPot.id);\r\n            }\r\n        }\r\n    }\r\n\r\n    function closeContract() onlyOwner public {\r\n        require(contractOpen);\r\n        contractOpen = false;\r\n    }\r\n\r\n    function openContract() onlyOwner public {\r\n        require(!contractOpen);\r\n        contractOpen = true;\r\n    }\r\n\r\n    function isOpen() public view returns (bool) {\r\n        return contractOpen;\r\n    }\r\n\r\n    // kill the smart contract\r\n    function kill() onlyOwner public {\r\n        withdrawFees();\r\n        closeAllMoneypot();\r\n        selfdestruct(owner);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"close\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"moneyPotId\",\"type\":\"uint256\"}],\"name\":\"getDonors\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"moneypots\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"author\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint32\",\"name\":\"donationsCounter\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"open\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"feesAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawFees\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"addressToMoneyPot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"},{\"internalType\":\"address payable\",\"name\":\"_benefeciary\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_donors\",\"type\":\"address[]\"}],\"name\":\"createMoneyPot\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"closeAllMoneypot\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"moneyPotId\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"donationId\",\"type\":\"uint32\"}],\"name\":\"getDonation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"donor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"closeContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getNumberOfMyMoneyPots\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getMoneyPotAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getFeesAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_donor\",\"type\":\"address\"}],\"name\":\"addDonor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"getMyMoneyPotsIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setFeesAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"openContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"chipIn\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getNumberOfMoneyPots\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address payable\",\"name\":\"_author\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_feesAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"_donors\",\"type\":\"address[]\"}],\"name\":\"createMoneyPotEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address payable\",\"name\":\"_donor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_donation\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"_donationId\",\"type\":\"uint32\"}],\"name\":\"chipInEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address payable\",\"name\":\"_benefeciary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address payable\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"closeEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address payable\",\"name\":\"_donor\",\"type\":\"address\"}],\"name\":\"addDonorEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_oldFeesAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newFeesAmount\",\"type\":\"uint256\"}],\"name\":\"feesAmountChangeEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_feesAmount\",\"type\":\"uint256\"}],\"name\":\"withdrawFeesEvent\",\"type\":\"event\"}]","ContractName":"MoneyPotSystem","CompilerVersion":"v0.5.11+commit.c082d0b4","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://57051e76be2a43eea300665a4c3dd226374638ab466422593e1a29df97ae734e"}]}