{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.10;\r\n\r\ninterface IERC20 {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address who) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"Error: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"Error: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n    \r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b > 0, \"Error: division overflow\"); \r\n    uint256 c = a / b;\r\n\r\n    return c;\r\n  }\r\n  \r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    require((c / a == b), \"Error: multiplication overflow\");\r\n    return c;\r\n  }\r\n  \r\n}\r\n\r\n\r\ncontract ERC20 is IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address owner) public view returns (uint256) {\r\n        return _balances[owner];\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function transfer(address to, uint256 value) public returns (bool) {\r\n        _transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n\r\n    function approve(address spender, uint256 value) public returns (bool) {\r\n        _approve(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\r\n        _transfer(from, to, value);\r\n        _approve(from, msg.sender, _allowances[from][msg.sender].sub(value));\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));\r\n        return true;\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 value) internal {\r\n        require(to != address(0), \"ERC20: transfer to the zero address not allowed\");\r\n\r\n        _balances[from] = _balances[from].sub(value);\r\n        _balances[to] = _balances[to].add(value);\r\n        emit Transfer(from, to, value);\r\n    }\r\n\r\n    function _mint(address account, uint256 value) internal {\r\n        require(account != address(0), \"ERC20: mint to the zero address not allowed\");\r\n\r\n        _totalSupply = _totalSupply.add(value);\r\n        _balances[account] = _balances[account].add(value);\r\n        emit Transfer(address(0), account, value);\r\n    }\r\n\r\n    function _burn(address account, uint256 value) internal {\r\n        require(account != address(0), \"ERC20: burn from the zero address not allowed\");\r\n\r\n        _totalSupply = _totalSupply.sub(value);\r\n        _balances[account] = _balances[account].sub(value);\r\n        emit Transfer(account, address(0), value);\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 value) internal {\r\n        require(owner != address(0), \"ERC20: approve from the zero address not allowed\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address not allowed\");\r\n\r\n        _allowances[owner][spender] = value;\r\n        emit Approval(owner, spender, value);\r\n    }\r\n\r\n    function _burnFrom(address account, uint256 value) internal {\r\n        _burn(account, value);\r\n        _approve(account, msg.sender, _allowances[account][msg.sender].sub(value));\r\n    }\r\n    \r\n    function distribution(address[] memory holdersAddresses, uint256[] memory volumeArray, uint256 _todayEmission, uint256 totalVolume, uint256 _emissionLeft, uint256 _emitCap) internal returns (uint256) {\r\n        require((_emitCap>_totalSupply), \"Emission: Emission capacity has been reached\");\r\n        \r\n        uint256 amountEmitted = 0;\r\n        _todayEmission = _todayEmission.mul(10000);\r\n        uint256 amount = _todayEmission.div(totalVolume);\r\n        for (uint i = 0; i < holdersAddresses.length; i++) {\r\n            \r\n            uint256 volume = volumeArray[i];\r\n            uint256 toTransfer = amount.mul(volume);\r\n            toTransfer = toTransfer.div(10000);\r\n            address holderAddr = holdersAddresses[i];\r\n            if(toTransfer > 0){\r\n                if (_emissionLeft >= toTransfer) {\r\n                    _mint(holderAddr, toTransfer);\r\n                    _emissionLeft = _emissionLeft.sub(toTransfer);\r\n                    amountEmitted = amountEmitted.add(toTransfer);\r\n                }\r\n            }\r\n        }\r\n        return amountEmitted;\r\n    }\r\n    \r\n}\r\n\r\n\r\ncontract ERC20Burnable is ERC20 {\r\n    function burn(uint256 value) public {\r\n        _burn(msg.sender, value);\r\n    }\r\n\r\n    function burnFrom(address from, uint256 value) public {\r\n        _burnFrom(from, value);\r\n    }\r\n}\r\n\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Access: You are not allowed to perform this action\");\r\n        _;\r\n    }\r\n\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\ncontract ERC20Detailed is IERC20 {\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = decimals;\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n}\r\n\r\ncontract PicToken is ERC20, ERC20Detailed, Ownable, ERC20Burnable {\r\n  using SafeMath for uint256;\r\n\r\n  uint8 constant DECIMALS = 18;\r\n\r\n  uint256 private constant _emitCap = 50000000 * (10 ** uint256(DECIMALS));\r\n  uint256 private _emitted;\r\n  uint256 private todayEmission;\r\n  uint256 private todayEmissionLeft;\r\n  uint256 constant lowerBound = 20; // 3 decimal: Actual value=0.02\r\n  uint256 constant upperBound = 100; // 3 decimal: Actual value=0.10\r\n  \r\n  uint constant oneDay = 86400;\r\n\r\n  uint constant percentDecimals = 100000;\r\n  \r\n  uint createdAt; // Deployment time of the contract \r\n  uint releaseAt = now; // Release time for token emission\r\n  \r\n  event Emit(uint256 emitAmount, uint256 percentage);\r\n  event Distributed(address[] holdersAddresses, uint256[] volumeArray, uint256 totalVolume, uint256 emittedAmount);\r\n\r\n  event AdminChanged(address indexed account);\r\n  \r\n  address private _admin;\r\n  \r\n  modifier onlyAdmin() {\r\n      require(isAdmin(), \"Admin: caller does not have the Admin role\");\r\n      _;\r\n    }\r\n\r\n  function isAdmin() public view returns (bool) {\r\n      return msg.sender == _admin;\r\n  }\r\n\r\n  function changeAdmin(address account) public onlyOwner {\r\n      _changeAdmin(account);\r\n  }\r\n\r\n  function _changeAdmin(address account) internal {\r\n      require(account != address(0), \"Admin: account is the zero address\");\r\n      _admin = account;\r\n      emit AdminChanged(account);\r\n  }  \r\n\r\n  function emitTokens(uint256 _percentage) public onlyAdmin returns (uint256) {\r\n      require((_emitted < _emitCap), \"Error: Emission limit has been reached\");\r\n      require((releaseAt <= now), \"Error: Release time has not passed\");\r\n\r\n      if (_percentage <= lowerBound) {\r\n          _percentage = lowerBound;\r\n      }\r\n      if (_percentage >= upperBound) {\r\n          _percentage = upperBound;\r\n      }\r\n      \r\n      releaseAt = releaseAt + oneDay; //Increase by one day 86400\r\n      \r\n      // Calculate amount to emit\r\n      uint256 _emitAmount = _percentage.mul(_emitCap);\r\n      _emitAmount = _emitAmount.div(percentDecimals); // dividing by percentage decimals (1000) + percentage (100)\r\n      \r\n      // update emitted amount\r\n      _emitted = _emitted.add(_emitAmount);\r\n      \r\n      // update today's emitted amount\r\n      todayEmission = _emitAmount;\r\n      todayEmissionLeft = todayEmission;\r\n      \r\n      // Log emit event\r\n      emit Emit(_emitAmount, _percentage);\r\n      \r\n      return _emitAmount;\r\n\r\n  }\r\n  \r\n    function distribute(address[] memory holdersAddresses, uint256[] memory volumeArray, uint256 totalVolume) public onlyAdmin returns (uint256) {\r\n      // Distribute the emitted tokens\r\n      require((todayEmissionLeft > 0), \"Error: Distribution reached limit\");\r\n      uint256 _amount = distribution(holdersAddresses, volumeArray, todayEmission, totalVolume, todayEmissionLeft, _emitCap);\r\n      todayEmissionLeft = todayEmissionLeft.sub(_amount);\r\n      emit Distributed(holdersAddresses, volumeArray, totalVolume, _amount);\r\n      return _amount;\r\n    }\r\n  \r\n    function getTodayEmission() public view returns (uint256) {\r\n        return todayEmission;\r\n    }\r\n    \r\n    function getTodayEmissionLeft() public view returns (uint256) {\r\n        return todayEmissionLeft;\r\n    }\r\n  \r\n    function emitable() public view returns (bool) {\r\n        return (releaseAt <= now);\r\n    }\r\n  \r\n    function totalEmitCap() public pure returns (uint256) {\r\n        return _emitCap;\r\n    }\r\n\r\n    function emitted() public view returns (uint256) {\r\n        return _emitted;\r\n    }\r\n \r\n\r\n  constructor () public ERC20Detailed(\"THE PIC TOKEN\", \"PIC\", DECIMALS) {\r\n      createdAt = now;\r\n      \r\n      // Amount to be returned to players who earned old PIC tokens\r\n      // Old PIC token address = 0xa1a56d66d6ec3b4c4310cf511cce040c67a6cbb2\r\n      // This amount will be swaped 1:1 with Old PIC\r\n      address emitTransferAccount = 0xf59aaab6B3685b23a9d8D19dC705861Ca9D37842;\r\n      uint256 _AmountEmittedAlready = 539950 * (10 ** uint256(DECIMALS));\r\n      _emitted = _emitted.add(_AmountEmittedAlready);\r\n      _mint(emitTransferAccount, _AmountEmittedAlready);\r\n      \r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTodayEmission\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalEmitCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"emitable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"emitted\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_percentage\",\"type\":\"uint256\"}],\"name\":\"emitTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTodayEmissionLeft\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"holdersAddresses\",\"type\":\"address[]\"},{\"name\":\"volumeArray\",\"type\":\"uint256[]\"},{\"name\":\"totalVolume\",\"type\":\"uint256\"}],\"name\":\"distribute\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"emitAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"percentage\",\"type\":\"uint256\"}],\"name\":\"Emit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"holdersAddresses\",\"type\":\"address[]\"},{\"indexed\":false,\"name\":\"volumeArray\",\"type\":\"uint256[]\"},{\"indexed\":false,\"name\":\"totalVolume\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"emittedAmount\",\"type\":\"uint256\"}],\"name\":\"Distributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"PicToken","CompilerVersion":"v0.5.10+commit.5a6ea5b1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://cce7d3c1dbe3f4304e35795d1f5fc383143ecbff5e96fe721771c4280b813dc7"}]}