{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.4;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Unsigned math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Multiplies two unsigned integers, reverts on overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        \r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n       \r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n       \r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds two unsigned integers, reverts on overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n     * reverts when dividing by zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n/**\r\n* @title interface of ERC 20 token\r\n* \r\n*/\r\n\r\ninterface IERC20 {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address who) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\n \r\nlibrary SafeERC20 {\r\n    \r\n    using SafeMath for uint256;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        require(token.transfer(to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        require(token.transferFrom(from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        require((value == 0) || (token.allowance(msg.sender, spender) == 0));\r\n        require(token.approve(spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        require(token.approve(spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value);\r\n        require(token.approve(spender, newAllowance));\r\n    }\r\n}\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @return the address of the owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner());\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @return true if `msg.sender` is the owner of the contract.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to relinquish control of the contract.\r\n     * @notice Warning!!!! only be used when owner address is compromised\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract TokenVesting is Ownable{\r\n    \r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n    \r\n    struct VestedToken{\r\n        uint256 cliff;\r\n        uint256 start;\r\n        uint256 duration;\r\n        uint256 releasedToken;\r\n        uint256 totalToken;\r\n        bool revoked;\r\n    }\r\n    \r\n    mapping (address => VestedToken) public vestedUser; \r\n    \r\n    // default Vesting parameter values\r\n    uint256 private _cliff = 2592000; // 30 days period\r\n    uint256 private _duration = 93312000; // for 3 years\r\n    bool private _revoked = false;\r\n    \r\n    IERC20 public LCXToken;\r\n    \r\n    event TokenReleased(address indexed account, uint256 amount);\r\n    event VestingRevoked(address indexed account);\r\n    \r\n    /**\r\n     * @dev Its a modifier in which we authenticate the caller is owner or LCXToken Smart Contract\r\n     */ \r\n    modifier onlyLCXTokenAndOwner() {\r\n        require(msg.sender==owner() || msg.sender == address(LCXToken));\r\n        _;\r\n    }\r\n    \r\n    /**\r\n     * @dev First we have to set token address before doing any thing \r\n     * @param token LCX Smart contract Address\r\n     */\r\n     \r\n    function setTokenAddress(IERC20 token) public onlyOwner returns(bool){\r\n        LCXToken = token;\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * @dev this will set the beneficiary with default vesting \r\n     * parameters ie, every month for 3 years\r\n     * @param account address of the beneficiary for vesting\r\n     * @param amount  totalToken to be vested\r\n     */\r\n     \r\n     function setDefaultVesting(address account, uint256 amount) public onlyLCXTokenAndOwner returns(bool){\r\n         _setDefaultVesting(account, amount);\r\n         return true;\r\n     }\r\n     \r\n     /**\r\n      *@dev Internal function to set default vesting parameters\r\n      */\r\n      \r\n     function _setDefaultVesting(address account, uint256 amount)  internal {\r\n         require(account!=address(0));\r\n         VestedToken storage vested = vestedUser[account];\r\n         vested.cliff = _cliff;\r\n         vested.start = block.timestamp;\r\n         vested.duration = _duration;\r\n         vested.totalToken = amount;\r\n         vested.releasedToken = 0;\r\n         vested.revoked = _revoked;\r\n     }\r\n     \r\n     \r\n     /**\r\n     * @dev this will set the beneficiary with vesting \r\n     * parameters provided\r\n     * @param account address of the beneficiary for vesting\r\n     * @param amount  totalToken to be vested\r\n     * @param cliff In seconds of one period in vesting\r\n     * @param duration In seconds of total vesting \r\n     * @param startAt UNIX timestamp in seconds from where vesting will start\r\n     */\r\n     \r\n     function setVesting(address account, uint256 amount, uint256 cliff, uint256 duration, uint256 startAt ) public onlyLCXTokenAndOwner  returns(bool){\r\n         _setVesting(account, amount, cliff, duration, startAt);\r\n         return true;\r\n     }\r\n     \r\n     /**\r\n      * @dev Internal function to set default vesting parameters\r\n      * @param account address of the beneficiary for vesting\r\n      * @param amount  totalToken to be vested\r\n      * @param cliff In seconds of one period in vestin\r\n      * @param duration In seconds of total vesting duration\r\n      * @param startAt UNIX timestamp in seconds from where vesting will start\r\n      *\r\n      */\r\n     \r\n     function _setVesting(address account, uint256 amount, uint256 cliff, uint256 duration, uint256 startAt) internal {\r\n         \r\n         require(account!=address(0));\r\n         require(cliff<=duration);\r\n         VestedToken storage vested = vestedUser[account];\r\n         vested.cliff = cliff;\r\n         vested.start = startAt;\r\n         vested.duration = duration;\r\n         vested.totalToken = amount;\r\n         vested.releasedToken = 0;\r\n         vested.revoked = false;\r\n     }\r\n\r\n    /**\r\n     * @notice Transfers vested tokens to beneficiary.\r\n     * anyone can release their token \r\n     */\r\n     \r\n    function releaseMyToken() public returns(bool) {\r\n        releaseToken(msg.sender);\r\n        return true;\r\n    }\r\n    \r\n     /**\r\n     * @notice Transfers vested tokens to the given account.\r\n     * @param account address of the vested user\r\n     */\r\n    function releaseToken(address account) public {\r\n       require(account != address(0));\r\n       VestedToken storage vested = vestedUser[account];\r\n       uint256 unreleasedToken = _releasableAmount(account);  // total releasable token currently\r\n       require(unreleasedToken>0);\r\n       vested.releasedToken = vested.releasedToken.add(unreleasedToken);\r\n       LCXToken.safeTransfer(account,unreleasedToken);\r\n       emit TokenReleased(account, unreleasedToken);\r\n    }\r\n    \r\n    /**\r\n     * @dev Calculates the amount that has already vested but hasn't been released yet.\r\n     * @param account address of user\r\n     */\r\n    function _releasableAmount(address account) internal view returns (uint256) {\r\n        return _vestedAmount(account).sub(vestedUser[account].releasedToken);\r\n    }\r\n\r\n  \r\n    /**\r\n     * @dev Calculates the amount that has already vested.\r\n     * @param account address of the user\r\n     */\r\n    function _vestedAmount(address account) internal view returns (uint256) {\r\n        VestedToken storage vested = vestedUser[account];\r\n        uint256 totalToken = vested.totalToken;\r\n        if(block.timestamp <  vested.start.add(vested.cliff)){\r\n            return 0;\r\n        }else if(block.timestamp >= vested.start.add(vested.duration) || vested.revoked){\r\n            return totalToken;\r\n        }else{\r\n            uint256 numberOfPeriods = (block.timestamp.sub(vested.start)).div(vested.cliff);\r\n            return totalToken.mul(numberOfPeriods.mul(vested.cliff)).div(vested.duration);\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * @notice Allows the owner to revoke the vesting. Tokens already vested\r\n     * remain in the contract, the rest are returned to the owner.\r\n     * @param account address in which the vesting is revoked\r\n     */\r\n    function revoke(address account) public onlyOwner {\r\n        VestedToken storage vested = vestedUser[account];\r\n        require(!vested.revoked);\r\n        uint256 balance = vested.totalToken;\r\n        uint256 vestedAmount = _vestedAmount(account);\r\n        uint256 refund = balance.sub(vestedAmount);\r\n        require(refund > 0);\r\n        vested.revoked = true;\r\n        vested.totalToken = vestedAmount;\r\n        LCXToken.safeTransfer(owner(), refund);\r\n        emit VestingRevoked(account);\r\n    }\r\n    \r\n    \r\n    \r\n    \r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setDefaultVesting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"setTokenAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"cliff\",\"type\":\"uint256\"},{\"name\":\"duration\",\"type\":\"uint256\"},{\"name\":\"startAt\",\"type\":\"uint256\"}],\"name\":\"setVesting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revoke\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"releaseMyToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"vestedUser\",\"outputs\":[{\"name\":\"cliff\",\"type\":\"uint256\"},{\"name\":\"start\",\"type\":\"uint256\"},{\"name\":\"duration\",\"type\":\"uint256\"},{\"name\":\"releasedToken\",\"type\":\"uint256\"},{\"name\":\"totalToken\",\"type\":\"uint256\"},{\"name\":\"revoked\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"LCXToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"releaseToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"VestingRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"TokenVesting","CompilerVersion":"v0.5.4+commit.9549d8ff","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://670ff9a26b8986c95d05427c4a94b6b374bd54d3c696aac6377e6e5711642908"}]}