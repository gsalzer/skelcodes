{"status":"1","message":"OK","result":[{"SourceCode":"\n// File: contracts/external/SafeMath.sol\n\npragma solidity 0.5.12;\n\n\n/**\n * @title Math provides arithmetic functions for uint type pairs.\n * You can safely `plus`, `minus`, `times`, and `divide` uint numbers without fear of integer overflow.\n * You can also find the `min` and `max` of two numbers.\n */\nlibrary SafeMath {\n\n  function min(uint x, uint y) internal pure returns (uint) { return x <= y ? x : y; }\n  function max(uint x, uint y) internal pure returns (uint) { return x >= y ? x : y; }\n\n\n  /** @dev adds two numbers, reverts on overflow */\n  function plus(uint x, uint y) internal pure returns (uint z) { require((z = x + y) >= x, \"bad addition\"); }\n\n  /** @dev subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend) */\n  function minus(uint x, uint y) internal pure returns (uint z) { require((z = x - y) <= x, \"bad subtraction\"); }\n\n\n  /** @dev multiplies two numbers, reverts on overflow */\n  function times(uint x, uint y) internal pure returns (uint z) { require(y == 0 || (z = x * y) / y == x, \"bad multiplication\"); }\n\n  /** @dev divides two numbers and returns the remainder (unsigned integer modulo), reverts when dividing by zero */\n  function mod(uint x, uint y) internal pure returns (uint z) {\n    require(y != 0, \"bad modulo; using 0 as divisor\");\n    z = x % y;\n  }\n\n  /** @dev Integer division of two numbers truncating the quotient, reverts on division by zero */\n  function div(uint a, uint b) internal pure returns (uint c) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n  }\n\n}\n\n// File: contracts/gluon/GluonView.sol\n\npragma solidity 0.5.12;\n\n\ninterface GluonView {\n  function app(uint32 id) external view returns (address current, address proposal, uint activationBlock);\n  function current(uint32 id) external view returns (address);\n  function history(uint32 id) external view returns (address[] memory);\n  function getBalance(uint32 id, address asset) external view returns (uint);\n  function isAnyLogic(uint32 id, address logic) external view returns (bool);\n  function isAppOwner(uint32 id, address appOwner) external view returns (bool);\n  function proposals(address logic) external view returns (bool);\n  function totalAppsCount() external view returns(uint32);\n}\n\n// File: contracts/gluon/GluonCentric.sol\n\npragma solidity 0.5.12;\n\n\n\ncontract GluonCentric {\n  uint32 internal constant REGISTRY_INDEX = 0;\n  uint32 internal constant STAKE_INDEX = 1;\n\n  uint32 public id;\n  address public gluon;\n\n  constructor(uint32 id_, address gluon_) public {\n    id = id_;\n    gluon = gluon_;\n  }\n\n  modifier onlyCurrentLogic { require(currentLogic() == msg.sender, \"invalid sender; must be current logic contract\"); _; }\n  modifier onlyGluon { require(gluon == msg.sender, \"invalid sender; must be gluon contract\"); _; }\n  modifier onlyOwner { require(GluonView(gluon).isAppOwner(id, msg.sender), \"invalid sender; must be app owner\"); _; }\n\n  function currentLogic() public view returns (address) { return GluonView(gluon).current(id); }\n}\n\n// File: contracts/apps/stake/StakeData.sol\n\npragma solidity 0.5.12;\n\n\n\n\ncontract StakeData is GluonCentric {\n  using SafeMath for uint;\n\n  mapping(address => address[]) public accountToProposals;\n  mapping(address => bool[]) public accountToSides;\n  mapping(address => mapping(bool => uint)) public voteTally; // proposal => side(true/false) => totalVotes\n  mapping(address => address) public accountLocation; // account => logic\n  mapping(address => uint) public balance;\n\n  constructor(address gluon) GluonCentric(STAKE_INDEX, gluon) public { }\n\n  function updateAccountLocation(address account, address logic) external onlyCurrentLogic { accountLocation[account] = logic; }\n\n  function updateBalance(address account, uint quantity) external onlyCurrentLogic { balance[account] = quantity; }\n\n  function voteAppUpgrade(address proposal, address account, bool side, uint quantity) external onlyCurrentLogic returns (uint, uint) {\n    uint index = getVoteIndex(account, proposal);\n    bool firstVote = index == accountToProposals[account].length;\n    require(firstVote || accountToSides[account][index] != side, \"cannot vote same side again\");\n    if (firstVote) {\n      accountToProposals[account].push(proposal);\n      accountToSides[account].push(side);\n    } else {\n      voteTally[proposal][!side] = voteTally[proposal][!side].minus(quantity);\n      accountToSides[account][index] = side;\n    }\n    voteTally[proposal][side] = voteTally[proposal][side].plus(quantity);\n    return getVoteTally(proposal);\n  }\n\n  function deleteVoteTally(address proposal) external onlyCurrentLogic {\n    voteTally[proposal][true] = voteTally[proposal][false] = 0;\n  }\n\n  function getVoteIndex(address account, address proposal) public view returns (uint) {\n    address[] memory proposals = accountToProposals[account];\n    for (uint i = 0; i < proposals.length; i++) {\n      if (proposals[i] == proposal) return i;\n    }\n    return proposals.length;\n  }\n\n  function getAllProposals(address account) external view returns (address[] memory proposals, bool[] memory sides) {\n    proposals = accountToProposals[account];\n    sides = accountToSides[account];\n  }\n\n  function removeResolvedProposals(address account) external onlyCurrentLogic {\n    if (accountToProposals[account].length == 0) return;\n    address[] storage allProposed = accountToProposals[account];\n    bool[] storage sides = accountToSides[account];\n    for (uint i = allProposed.length; i > 0; i--) {\n      if (!GluonView(gluon).proposals(allProposed[i - 1])) {\n        allProposed[i - 1] = allProposed[allProposed.length - 1];\n        allProposed.pop();\n        sides[i - 1] = sides[sides.length - 1];\n        sides.pop();\n      }\n    }\n  }\n\n  function updateVotes(address proposal, bool side, uint quantity, bool increased) external onlyCurrentLogic returns (uint approvals, uint disapprovals) {\n    uint tally = voteTally[proposal][side];\n    voteTally[proposal][side] = increased ? tally.plus(quantity) : tally.minus(quantity);\n    return getVoteTally(proposal);\n  }\n\n  function getVoteTally(address proposal) public view returns (uint approvals, uint disapprovals) {\n    approvals = voteTally[proposal][true];\n    disapprovals = voteTally[proposal][false];\n  }\n\n}\n","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"gluon\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"accountLocation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"accountToProposals\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"accountToSides\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentLogic\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"proposal\",\"type\":\"address\"}],\"name\":\"deleteVoteTally\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAllProposals\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"proposals\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"sides\",\"type\":\"bool[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"proposal\",\"type\":\"address\"}],\"name\":\"getVoteIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"proposal\",\"type\":\"address\"}],\"name\":\"getVoteTally\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"approvals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"disapprovals\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gluon\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"id\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeResolvedProposals\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"logic\",\"type\":\"address\"}],\"name\":\"updateAccountLocation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"updateBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"proposal\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"side\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"increased\",\"type\":\"bool\"}],\"name\":\"updateVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"approvals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"disapprovals\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"proposal\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"side\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"voteAppUpgrade\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"name\":\"voteTally\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"StakeData","CompilerVersion":"v0.5.12+commit.7709ece9","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000075ace7a086ea0fb1a79e43cc6331ad053d8c67cb","Library":"","LicenseType":"","SwarmSource":"bzzr://817e900459418be6adbd229404eeefd378f33857326c14f576141962353954be"}]}