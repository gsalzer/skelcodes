{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.11;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath \r\n{\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) \r\n  {\r\n    if (a == 0) \r\n    {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) \r\n  {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) \r\n  {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) \r\n  {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable \r\n{\r\n    address public owner;\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor() public\r\n    {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() \r\n    {\r\n        assert(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) onlyOwner public\r\n    {\r\n        assert(newOwner != address(0));\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract Token\r\n{\r\n   mapping(address => mapping (address => uint256)) allowed;\r\n   function transfer(address to, uint256 value) public returns (bool);\r\n   function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n}\r\n\r\n//////////////////\r\n// Permissions\r\n//                               Admin       User\r\n// CRUD users                      x\r\n// depositTokens                   x\r\n// returnTokens                    x\r\n// getTokensAvailableToMe                     x\r\n// withdrawTokens                             x\r\n////////\r\n\r\ncontract CraftrDropper is Ownable\r\n{\r\n    using SafeMath for uint256;\r\n    \r\n    Token CRAFTRToken;\r\n    address contractAddress;\r\n\r\n    struct TokenAirdrop \r\n    {\r\n        address contractAddress;\r\n        uint contractAddressID; // The id of the airdrop within a token address\r\n        address tokenOwner;\r\n        uint airdropDate;\r\n        uint tokenBalance; // Current balance\r\n        uint totalDropped; // Total to distribute\r\n        uint usersAtDate; // How many users were signed at airdrop date\r\n    }\r\n\r\n    struct User \r\n    {\r\n        address userAddress;\r\n        uint signupDate;\r\n        uint value;\r\n        // User -> Airdrop id# -> balance\r\n        mapping (address => mapping (uint => uint)) withdrawnBalances;\r\n    }\r\n\r\n    // Maps the tokens available in contract. Keyed by token address\r\n    mapping (address => TokenAirdrop[]) public airdropSupply;\r\n\r\n    // Users List\r\n    mapping (address => User) public signups;\r\n    uint public userSignupCount = 0;\r\n\r\n    // Admins List\r\n    mapping (address => bool) public admins;\r\n\r\n    modifier onlyOwner \r\n    {\r\n        assert(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    modifier onlyAdmin \r\n    {\r\n        assert(msg.sender == owner || admins[msg.sender]);\r\n        _;\r\n    }\r\n\r\n    event TokenDeposited(address _contractAddress, address _airdropper,uint _distributionSupply,uint creationDate);\r\n    event UserAdded(address _userAddress, uint _value, uint _signupDate);\r\n    event UsersAdded(address[] _userAddress, uint _value, uint _signupDate);\r\n    event TokenWithdrawn(address _contractAddress, address _userAddress, uint _tokensWithdrawn, uint _withdrawalDate);\r\n\r\n    constructor(address _tokenContract) public \r\n    {\r\n        contractAddress = _tokenContract;\r\n        CRAFTRToken = Token(_tokenContract);\r\n    }\r\n\r\n    /////////////////////\r\n    // Owner / Admin functions\r\n    /////////////////////\r\n\r\n    /**\r\n     * @dev allows owner to grant/revoke admin privileges to other accounts\r\n     * @param _admin is the account to be granted/revoked admin privileges\r\n     * @param isAdmin is whether or not to grant or revoke privileges.\r\n     */\r\n    function setAdmin(address _admin, bool isAdmin) public onlyOwner\r\n    {\r\n        admins[_admin] = isAdmin;\r\n    }\r\n    \r\n    function insertUser(address _user, uint _value) public onlyAdmin \r\n    {\r\n        require(signups[_user].userAddress == address(0));\r\n        _value = _value.mul(10**18);\r\n        signups[_user] = User(_user,now,_value);\r\n        userSignupCount++;\r\n        emit UserAdded(_user,_value,now);\r\n    }\r\n\r\n    function insertUsers(address[] memory _users, uint _value) public onlyOwner \r\n    {\r\n        _value = _value.mul(10**18);\r\n        for (uint i = 0; i < _users.length; i++)\r\n        {\r\n            require(signups[_users[i]].userAddress == address(0));\r\n            signups[_users[i]] = User(_users[i],now,_value);\r\n            userSignupCount++;\r\n        }\r\n        emit UsersAdded(_users,_value,now);\r\n    }\r\n\r\n    function deleteUser(address _user) public onlyAdmin\r\n    {\r\n        require(signups[_user].userAddress == _user);\r\n        delete signups[_user];\r\n        userSignupCount--;\r\n    }\r\n\r\n    function deleteUsers(address[] memory _users) public onlyOwner\r\n    {\r\n        for (uint i = 0; i < _users.length; i++)\r\n        {\r\n            require(signups[_users[i]].userAddress == _users[i]);\r\n            delete signups[_users[i]];\r\n            userSignupCount--;\r\n        }\r\n    }\r\n\r\n     /**\r\n     * @dev Transfers tokens to contract and sets the Token Airdrop\r\n     * @notice Before calling this function, you must have given the Token Contract\r\n     * an allowance of the tokens to distribute.\r\n     * Call approve([this contract's address],_distributionSupply); on the ERC20 token cotnract first\r\n     * @param _distributionSupply is the tokens that will be evenly distributed among all current users\r\n     * Enter the number of tokens (the function multiplies by the token decimals)\r\n     */\r\n    function depositTokens(uint _distributionSupply) public onlyOwner\r\n    {\r\n        //Multiply number entered by token decimals.\r\n        _distributionSupply = _distributionSupply.mul(10**18);\r\n\r\n        TokenAirdrop memory ta = TokenAirdrop(contractAddress,airdropSupply[contractAddress].length,msg.sender,now,_distributionSupply,_distributionSupply,userSignupCount);\r\n        airdropSupply[contractAddress].push(ta);\r\n\r\n        // Transfer the tokens\r\n        CRAFTRToken.transferFrom(msg.sender,address(this),_distributionSupply);\r\n\r\n        emit TokenDeposited(contractAddress,ta.tokenOwner,ta.totalDropped,ta.airdropDate);\r\n    }\r\n\r\n    /**\r\n     * @dev returns unclaimed tokens to the airdropper\r\n     */\r\n    function returnTokens() public onlyOwner\r\n    {\r\n        uint tokensToReturn = 0;\r\n\r\n        for (uint i = 0; i < airdropSupply[contractAddress].length; i++)\r\n        {\r\n            TokenAirdrop storage ta = airdropSupply[contractAddress][i];\r\n            if(msg.sender == ta.tokenOwner)\r\n            {\r\n                tokensToReturn = tokensToReturn.add(ta.tokenBalance);\r\n                ta.tokenBalance = 0;\r\n            }\r\n        }\r\n        CRAFTRToken.transfer(msg.sender,tokensToReturn);\r\n        emit TokenWithdrawn(contractAddress,msg.sender,tokensToReturn,now);\r\n    }\r\n\r\n    /////////////////////\r\n    // User functions\r\n    /////////////////////\r\n\r\n    /**\r\n     * @dev calculates the amount of tokens the user will be able to withdraw\r\n     * Given a token address, the function checks all airdrops with the same address\r\n     * @return totalTokensAvailable is the tokens calculated\r\n     */\r\n    function getTokensAvailableToMe(address myAddress) view public returns (uint)\r\n    {\r\n        // Get User instance, given the sender account\r\n        User storage user = signups[myAddress];\r\n        require(user.userAddress != address(0));\r\n\r\n        uint totalTokensAvailable = 0;\r\n        for (uint i = 0; i < airdropSupply[contractAddress].length; i++)\r\n        {\r\n            uint _withdrawnBalance = user.withdrawnBalances[contractAddress][i];\r\n\r\n            // if the user has not alreay withdrawn the tokens, count them\r\n            if(_withdrawnBalance < user.value)\r\n            {\r\n                totalTokensAvailable = totalTokensAvailable.add(user.value);\r\n            }\r\n        }\r\n        // Readable output\r\n        totalTokensAvailable = totalTokensAvailable.div(10**18);\r\n        return totalTokensAvailable;\r\n    }\r\n\r\n    /**\r\n     * @dev calculates and withdraws the amount of tokens the user has been awarded by airdrops\r\n     * Given a token address, the function checks all airdrops with the same\r\n     * address and withdraws the corresponding tokens for the user.\r\n     */\r\n    function withdrawTokens() public \r\n    {\r\n        // Get the instance of the current user\r\n        User storage user = signups[msg.sender];\r\n        // Check if user exists\r\n        require(user.userAddress != address(0));\r\n\r\n        uint totalTokensToTransfer = 0;\r\n\r\n        // For each airdrop made for this token (token owner may have done several airdrops at any given point)\r\n        for (uint i = 0; i < airdropSupply[contractAddress].length; i++)\r\n        {\r\n            TokenAirdrop storage ta = airdropSupply[contractAddress][i];\r\n\r\n            uint _withdrawnBalance = user.withdrawnBalances[contractAddress][i];\r\n\r\n            // if the user has not alreay withdrawn the tokens\r\n            if(_withdrawnBalance < user.value)\r\n            {\r\n                // Register the tokens withdrawn by the user and total tokens withdrawn\r\n                user.withdrawnBalances[contractAddress][i] = user.value;\r\n\r\n                // substract tokens to be withdrawn from total amount reserved for airdrops\r\n                ta.tokenBalance = ta.tokenBalance.sub(user.value);\r\n\r\n                // instance the tokens to be paid\r\n                totalTokensToTransfer = totalTokensToTransfer.add(user.value);\r\n            }\r\n        }\r\n\r\n        // Transfer tokens from all airdrops that correspond to this user\r\n        CRAFTRToken.transfer(msg.sender,totalTokensToTransfer);\r\n\r\n        delete signups[msg.sender];\r\n        userSignupCount--;\r\n\r\n        emit TokenWithdrawn(contractAddress,msg.sender,totalTokensToTransfer,now);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"userSignupCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"signups\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"signupDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"insertUsers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"insertUser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"admins\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"airdropSupply\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"contractAddressID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"airdropDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDropped\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usersAtDate\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isAdmin\",\"type\":\"bool\"}],\"name\":\"setAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"deleteUser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"myAddress\",\"type\":\"address\"}],\"name\":\"getTokensAvailableToMe\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"}],\"name\":\"deleteUsers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_distributionSupply\",\"type\":\"uint256\"}],\"name\":\"depositTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"returnTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenContract\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_contractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_airdropper\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_distributionSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"creationDate\",\"type\":\"uint256\"}],\"name\":\"TokenDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_signupDate\",\"type\":\"uint256\"}],\"name\":\"UserAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"_userAddress\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_signupDate\",\"type\":\"uint256\"}],\"name\":\"UsersAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_contractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokensWithdrawn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_withdrawalDate\",\"type\":\"uint256\"}],\"name\":\"TokenWithdrawn\",\"type\":\"event\"}]","ContractName":"CraftrDropper","CompilerVersion":"v0.5.11+commit.c082d0b4","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000002784dcd08f4b1bb25af84fd0b702e2aa5d5d1d64","Library":"","LicenseType":"None","SwarmSource":"bzzr://18324b502fdb6f76de8c3a0e9b12e08f47867fa4153ea3dfb21d425ca18d622a"}]}