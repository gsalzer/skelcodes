{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/IAllocationStrategy.sol\r\n\r\npragma solidity ^0.5.8;\r\n\r\n/**\r\n * @notice Allocation strategy for assets.\r\n *         - It invests the underlying assets into some yield generating contracts,\r\n *           usually lending contracts, in return it gets new assets aka. saving assets.\r\n *         - Sainv assets can be redeemed back to the underlying assets plus interest any time.\r\n */\r\ninterface IAllocationStrategy {\r\n\r\n    /**\r\n     * @notice Underlying asset for the strategy\r\n     * @return address Underlying asset address\r\n     */\r\n    function underlying() external view returns (address);\r\n\r\n    /**\r\n     * @notice Calculates the exchange rate from the underlying to the saving assets\r\n     * @return uint256 Calculated exchange rate scaled by 1e18\r\n     */\r\n    function exchangeRateStored() external view returns (uint256);\r\n\r\n    /**\r\n      * @notice Applies accrued interest to all savings\r\n      * @dev This should calculates interest accrued from the last checkpointed\r\n      *      block up to the current block and writes new checkpoint to storage.\r\n      * @return bool success(true) or failure(false)\r\n      */\r\n    function accrueInterest() external returns (bool);\r\n\r\n    /**\r\n     * @notice Sender supplies underlying assets into the market and receives saving assets in exchange\r\n     * @dev Interst shall be accrued\r\n     * @param investAmount The amount of the underlying asset to supply\r\n     * @return uint256 Amount of saving assets created\r\n     */\r\n    function investUnderlying(uint256 investAmount) external returns (uint256);\r\n\r\n    /**\r\n     * @notice Sender redeems saving assets in exchange for a specified amount of underlying asset\r\n     * @dev Interst shall be accrued\r\n     * @param redeemAmount The amount of underlying to redeem\r\n     * @return uint256 Amount of saving assets burned\r\n     */\r\n    function redeemUnderlying(uint256 redeemAmount) external returns (uint256);\r\n\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see `ERC20Detailed`.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a `Transfer` event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through `transferFrom`. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when `approve` or `transferFrom` are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * > Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an `Approval` event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a `Transfer` event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to `approve`. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: compound/contracts/CErc20Interface.sol\r\n\r\npragma solidity >=0.4.21 <0.6.0;\r\n\r\n// converted from ethereum/contracts/compound/abi/CErc20.json\r\ninterface CErc20Interface {\r\n\r\n    function name() external view returns (\r\n        string memory\r\n    );\r\n\r\n    function approve(\r\n        address spender,\r\n        uint256 amount\r\n    ) external returns (\r\n        bool\r\n    );\r\n\r\n    function repayBorrow(\r\n        uint256 repayAmount\r\n    ) external returns (\r\n        uint256\r\n    );\r\n\r\n    function reserveFactorMantissa() external view returns (\r\n        uint256\r\n    );\r\n\r\n    function borrowBalanceCurrent(\r\n        address account\r\n    ) external returns (\r\n        uint256\r\n    );\r\n\r\n    function totalSupply() external view returns (\r\n        uint256\r\n    );\r\n\r\n    function exchangeRateStored() external view returns (\r\n        uint256\r\n    );\r\n\r\n    function transferFrom(\r\n        address src,\r\n        address dst,\r\n        uint256 amount\r\n    ) external returns (\r\n        bool\r\n    );\r\n\r\n    function repayBorrowBehalf(\r\n        address borrower,\r\n        uint256 repayAmount\r\n    ) external returns (\r\n        uint256\r\n    );\r\n\r\n    function pendingAdmin() external view returns (\r\n        address\r\n    );\r\n\r\n    function decimals() external view returns (\r\n        uint256\r\n    );\r\n\r\n    function balanceOfUnderlying(\r\n        address owner\r\n    ) external returns (\r\n        uint256\r\n    );\r\n\r\n    function getCash() external view returns (\r\n        uint256\r\n    );\r\n\r\n    function _setComptroller(\r\n        address newComptroller\r\n    ) external returns (\r\n        uint256\r\n    );\r\n\r\n    function totalBorrows() external view returns (\r\n        uint256\r\n    );\r\n\r\n    function comptroller() external view returns (\r\n        address\r\n    );\r\n\r\n    function _reduceReserves(\r\n        uint256 reduceAmount\r\n    ) external returns (\r\n        uint256\r\n    );\r\n\r\n    function initialExchangeRateMantissa() external view returns (\r\n        uint256\r\n    );\r\n\r\n    function accrualBlockNumber() external view returns (\r\n        uint256\r\n    );\r\n\r\n    function underlying() external view returns (\r\n        address\r\n    );\r\n\r\n    function balanceOf(\r\n        address owner\r\n    ) external view returns (\r\n        uint256\r\n    );\r\n\r\n    function totalBorrowsCurrent() external returns (\r\n        uint256\r\n    );\r\n\r\n    function redeemUnderlying(\r\n        uint256 redeemAmount\r\n    ) external returns (\r\n        uint256\r\n    );\r\n\r\n    function totalReserves() external view returns (\r\n        uint256\r\n    );\r\n\r\n    function symbol() external view returns (\r\n        string memory\r\n    );\r\n\r\n    function borrowBalanceStored(\r\n        address account\r\n    ) external view returns (\r\n        uint256\r\n    );\r\n\r\n    function mint(\r\n        uint256 mintAmount\r\n    ) external returns (\r\n        uint256\r\n    );\r\n\r\n    function accrueInterest() external returns (\r\n        uint256\r\n    );\r\n\r\n    function transfer(\r\n        address dst,\r\n        uint256 amount\r\n    ) external returns (\r\n        bool\r\n    );\r\n\r\n    function borrowIndex() external view returns (\r\n        uint256\r\n    );\r\n\r\n    function supplyRatePerBlock() external view returns (\r\n        uint256\r\n    );\r\n\r\n    function seize(\r\n        address liquidator,\r\n        address borrower,\r\n        uint256 seizeTokens\r\n    ) external returns (\r\n        uint256\r\n    );\r\n\r\n    function _setPendingAdmin(\r\n        address newPendingAdmin\r\n    ) external returns (\r\n        uint256\r\n    );\r\n\r\n    function exchangeRateCurrent() external returns (\r\n        uint256\r\n    );\r\n\r\n    function getAccountSnapshot(\r\n        address account\r\n    ) external view returns (\r\n        uint256,\r\n        uint256,\r\n        uint256,\r\n        uint256\r\n    );\r\n\r\n    function borrow(\r\n        uint256 borrowAmount\r\n    ) external returns (\r\n        uint256\r\n    );\r\n\r\n    function redeem(\r\n        uint256 redeemTokens\r\n    ) external returns (\r\n        uint256\r\n    );\r\n\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) external view returns (\r\n        uint256\r\n    );\r\n\r\n    function _acceptAdmin() external returns (\r\n        uint256\r\n    );\r\n\r\n    function _setInterestRateModel(\r\n        address newInterestRateModel\r\n    ) external returns (\r\n        uint256\r\n    );\r\n\r\n    function interestRateModel() external view returns (\r\n        address\r\n    );\r\n\r\n    function liquidateBorrow(\r\n        address borrower,\r\n        uint256 repayAmount,\r\n        address cTokenCollateral\r\n    ) external returns (\r\n        uint256\r\n    );\r\n\r\n    function admin() external view returns (\r\n        address\r\n    );\r\n\r\n    function borrowRatePerBlock() external view returns (\r\n        uint256\r\n    );\r\n\r\n    function _setReserveFactor(\r\n        uint256 newReserveFactorMantissa\r\n    ) external returns (\r\n        uint256\r\n    );\r\n\r\n    function isCToken() external view returns (\r\n        bool\r\n    );\r\n\r\n    /*\r\n    constructor(\r\n        address underlying_,\r\n        address comptroller_,\r\n        address interestRateModel_,\r\n        uint256 initialExchangeRateMantissa_,\r\n        string  calldata name_,\r\n        string  calldata symbol_,\r\n        uint256 decimals_\r\n    );\r\n    */\r\n\r\n    event AccrueInterest(\r\n        uint256 interestAccumulated,\r\n        uint256 borrowIndex,\r\n        uint256 totalBorrows\r\n    );\r\n\r\n    event Mint(\r\n        address minter,\r\n        uint256 mintAmount,\r\n        uint256 mintTokens\r\n    );\r\n\r\n    event Redeem(\r\n        address redeemer,\r\n        uint256 redeemAmount,\r\n        uint256 redeemTokens\r\n    );\r\n\r\n    event Borrow(\r\n        address borrower,\r\n        uint256 borrowAmount,\r\n        uint256 accountBorrows,\r\n        uint256 totalBorrows\r\n    );\r\n\r\n    event RepayBorrow(\r\n        address payer,\r\n        address borrower,\r\n        uint256 repayAmount,\r\n        uint256 accountBorrows,\r\n        uint256 totalBorrows\r\n    );\r\n\r\n    event LiquidateBorrow(\r\n        address liquidator,\r\n        address borrower,\r\n        uint256 repayAmount,\r\n        address cTokenCollateral,\r\n        uint256 seizeTokens\r\n    );\r\n\r\n    event NewPendingAdmin(\r\n        address oldPendingAdmin,\r\n        address newPendingAdmin\r\n    );\r\n\r\n    event NewAdmin(\r\n        address oldAdmin,\r\n        address newAdmin\r\n    );\r\n\r\n    event NewComptroller(\r\n        address oldComptroller,\r\n        address newComptroller\r\n    );\r\n\r\n    event NewMarketInterestRateModel(\r\n        address oldInterestRateModel,\r\n        address newInterestRateModel\r\n    );\r\n\r\n    event NewReserveFactor(\r\n        uint256 oldReserveFactorMantissa,\r\n        uint256 newReserveFactorMantissa\r\n    );\r\n\r\n    event ReservesReduced(\r\n        address admin,\r\n        uint256 reduceAmount,\r\n        uint256 newTotalReserves\r\n    );\r\n\r\n    event Failure(\r\n        uint256 error,\r\n        uint256 info,\r\n        uint256 detail\r\n    );\r\n\r\n    event Transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    );\r\n\r\n    event Approval(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    );\r\n\r\n}\r\n\r\n// File: contracts/CompoundAllocationStrategy.sol\r\n\r\npragma solidity ^0.5.8;\r\n\r\n\r\n\r\n\r\ncontract CompoundAllocationStrategy is IAllocationStrategy {\r\n\r\n    CErc20Interface cToken;\r\n    IERC20 token;\r\n\r\n    constructor(CErc20Interface cToken_) public {\r\n        cToken = cToken_;\r\n        token = IERC20(cToken.underlying());\r\n    }\r\n\r\n    /// @dev ISavingStrategy.underlying implementation\r\n    function underlying() external view returns (address) {\r\n        return cToken.underlying();\r\n    }\r\n\r\n    /// @dev ISavingStrategy.exchangeRateStored implementation\r\n    function exchangeRateStored() external view returns (uint256) {\r\n        return cToken.exchangeRateStored();\r\n    }\r\n\r\n    /// @dev ISavingStrategy.accrueInterest implementation\r\n    function accrueInterest() external returns (bool) {\r\n        return cToken.accrueInterest() == 0;\r\n    }\r\n\r\n    /// @dev ISavingStrategy.investUnderlying implementation\r\n    function investUnderlying(uint256 investAmount) external returns (uint256) {\r\n        token.transferFrom(msg.sender, address(this), investAmount);\r\n        token.approve(address(cToken), investAmount);\r\n        uint256 cTotalBefore = cToken.totalSupply();\r\n        // TODO should we handle mint failure?\r\n        require(cToken.mint(investAmount) == 0, \"mint failed\");\r\n        uint256 cTotalAfter = cToken.totalSupply();\r\n        uint256 cCreatedAmount;\r\n        if (cTotalAfter > cTotalBefore) {\r\n            cCreatedAmount = cTotalAfter - cTotalBefore;\r\n        } // else can there be case that we mint but we get less cTokens!?\\\r\n        return cCreatedAmount;\r\n    }\r\n\r\n    /// @dev ISavingStrategy.redeemUnderlying implementation\r\n    function redeemUnderlying(uint256 redeemAmount) external returns (uint256) {\r\n        uint256 cTotalBefore = cToken.totalSupply();\r\n        // TODO should we handle redeem failure?\r\n        require(cToken.redeemUnderlying(redeemAmount) == 0, \"redeemUnderlying failed\");\r\n        uint256 cTotalAfter = cToken.totalSupply();\r\n        uint256 cBurnedAmount;\r\n        if (cTotalAfter < cTotalBefore) {\r\n            cBurnedAmount = cTotalBefore - cTotalAfter;\r\n        } // else can there be case that we end up with more cTokens ?!\r\n        token.transfer(msg.sender, redeemAmount);\r\n        return cBurnedAmount;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"exchangeRateStored\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"underlying\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"redeemAmount\",\"type\":\"uint256\"}],\"name\":\"redeemUnderlying\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"accrueInterest\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"investAmount\",\"type\":\"uint256\"}],\"name\":\"investUnderlying\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"cToken_\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"CompoundAllocationStrategy","CompilerVersion":"v0.5.8+commit.23d335f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000f5dce57282a584d2746faf1593d3121fcac444dc","Library":"","SwarmSource":"bzzr://3f52261236bac4bf964d9a4cafb5b310de21ad6755500b58151eb9dfda3ba84f"}]}