{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.26;\r\n\r\n//This is the public contract for the NebliDex decentralized exchange\r\n//This exchange can be used to trade cryptocurrencies in a decentralized way without intermediaries or proxy tokens\r\n//As of June 26th, 2019, the exchange website can be found at www.neblidex.xyz\r\n\r\n//Contract source based on code provided from: https://github.com/jchittoda/eth-atomic-swap/\r\n\r\ncontract NebliDex_AtomicSwap {\r\n  struct Swap {\r\n    uint256 timelock;\r\n    uint256 value;\r\n    address ethTrader;\r\n    address withdrawTrader;\r\n    bytes32 secretLock;\r\n    bytes secretKey;\r\n  }\r\n\r\n  enum States {\r\n    INVALID,\r\n    OPEN,\r\n    CLOSED,\r\n    EXPIRED\r\n  }\r\n\r\n  mapping (bytes32 => Swap) private swaps;\r\n  mapping (bytes32 => States) private swapStates;\r\n\r\n  event Open(bytes32 _swapID, address _withdrawTrader);\r\n  event Expire(bytes32 _swapID);\r\n  event Close(bytes32 _swapID, bytes _secretKey);\r\n\r\n  modifier onlyInvalidSwaps(bytes32 _swapID) {\r\n    require (swapStates[_swapID] == States.INVALID);\r\n    _;\r\n  }\r\n\r\n  modifier onlyOpenSwaps(bytes32 _swapID) {\r\n    require (swapStates[_swapID] == States.OPEN);\r\n    _;\r\n  }\r\n\r\n  modifier onlyClosedSwaps(bytes32 _swapID) {\r\n    require (swapStates[_swapID] == States.CLOSED);\r\n    _;\r\n  }\r\n\r\n  modifier onlyExpiredSwaps(bytes32 _swapID) {\r\n    require (now >= swaps[_swapID].timelock);\r\n    _;\r\n  }\r\n\r\n  // Cannot redeem amount if timelock has expired\r\n  modifier onlyNotExpiredSwaps(bytes32 _swapID) {\r\n    require (now < swaps[_swapID].timelock);\r\n    _;\r\n  }\r\n\r\n  modifier onlyWithSecretKey(bytes32 _swapID, bytes _secretKey) {\r\n    require (_secretKey.length == 33); // The key must be this length across the board\r\n    require (swaps[_swapID].secretLock == sha256(_secretKey));\r\n    _;\r\n  }\r\n\r\n  function open(bytes32 _swapID, address _withdrawTrader, uint256 _timelock) public onlyInvalidSwaps(_swapID) payable {\r\n    // Store the details of the swap.\r\n    // The secret lock is the swapID\r\n    Swap memory swap = Swap({\r\n      timelock: _timelock,\r\n      value: msg.value,\r\n      ethTrader: msg.sender,\r\n      withdrawTrader: _withdrawTrader,\r\n      secretLock: _swapID,\r\n      secretKey: new bytes(0)\r\n    });\r\n    swaps[_swapID] = swap;\r\n    swapStates[_swapID] = States.OPEN;\r\n\r\n    // Trigger open event.\r\n    emit Open(_swapID, _withdrawTrader);\r\n  }\r\n\r\n  function redeem(bytes32 _swapID, bytes _secretKey) public onlyOpenSwaps(_swapID) onlyNotExpiredSwaps(_swapID) onlyWithSecretKey(_swapID, _secretKey) {\r\n    // Redeem the value from the contract.\r\n    Swap memory swap = swaps[_swapID];\r\n    swaps[_swapID].secretKey = _secretKey;\r\n    swapStates[_swapID] = States.CLOSED;\r\n\r\n    // Transfer the ETH funds from this contract to the withdrawing trader.\r\n    swap.withdrawTrader.transfer(swap.value);\r\n\r\n    // Trigger close event.\r\n    emit Close(_swapID, _secretKey);\r\n  }\r\n\r\n  function refund(bytes32 _swapID) public onlyOpenSwaps(_swapID) onlyExpiredSwaps(_swapID) {\r\n    // Expire the swap.\r\n    Swap memory swap = swaps[_swapID];\r\n    swapStates[_swapID] = States.EXPIRED;\r\n\r\n    // Transfer the ETH value from this contract back to the ETH trader.\r\n   swap.ethTrader.transfer(swap.value);\r\n\r\n     // Trigger expire event.\r\n    emit Expire(_swapID);\r\n  }\r\n\r\n  function check(bytes32 _swapID) public view returns (uint256 timelock, uint256 value, address withdrawTrader, bytes32 secretLock) {\r\n    Swap memory swap = swaps[_swapID];\r\n    return (swap.timelock, swap.value, swap.withdrawTrader, swap.secretLock);\r\n  }\r\n\r\n  function checkSecretKey(bytes32 _swapID) public view onlyClosedSwaps(_swapID) returns (bytes secretKey) {\r\n    Swap memory swap = swaps[_swapID];\r\n    return swap.secretKey;\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_swapID\",\"type\":\"bytes32\"}],\"name\":\"check\",\"outputs\":[{\"name\":\"timelock\",\"type\":\"uint256\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"withdrawTrader\",\"type\":\"address\"},{\"name\":\"secretLock\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_swapID\",\"type\":\"bytes32\"}],\"name\":\"refund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_swapID\",\"type\":\"bytes32\"}],\"name\":\"checkSecretKey\",\"outputs\":[{\"name\":\"secretKey\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_swapID\",\"type\":\"bytes32\"},{\"name\":\"_secretKey\",\"type\":\"bytes\"}],\"name\":\"redeem\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_swapID\",\"type\":\"bytes32\"},{\"name\":\"_withdrawTrader\",\"type\":\"address\"},{\"name\":\"_timelock\",\"type\":\"uint256\"}],\"name\":\"open\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_swapID\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_withdrawTrader\",\"type\":\"address\"}],\"name\":\"Open\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_swapID\",\"type\":\"bytes32\"}],\"name\":\"Expire\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_swapID\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_secretKey\",\"type\":\"bytes\"}],\"name\":\"Close\",\"type\":\"event\"}]","ContractName":"NebliDex_AtomicSwap","CompilerVersion":"v0.4.26+commit.4563c3fc","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://bc31c686a0914939214ee965543968a9bf24be74d784fde9b3a034386dc37c39"}]}