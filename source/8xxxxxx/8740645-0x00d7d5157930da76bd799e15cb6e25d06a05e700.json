{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.4.22 <0.6.0;\r\n\r\ncontract Airdrop {\r\n    \r\n    address payable chairman;\r\n    mapping(address => Registrant) public registrants;\r\n    mapping(uint256 => address) public registrantArr;\r\n    uint256 public nRegistrants;\r\n    mapping(bytes32 => address) nameToAddress;\r\n    bool public registrationsOpen;\r\n    uint256 public maxReferrals;\r\n    address public maxReferrer;\r\n    uint256 public totalClaims;\r\n    uint256[4] public params;\r\n    \r\n    struct Registrant {\r\n        bytes32 telegramHash;\r\n        uint8 status; //0: not verified, 1: verified, 2: tokens received\r\n        bool verified;\r\n        bool canClaim;\r\n        bool created;\r\n        address referrer;\r\n        mapping (uint256 => address) referrals;\r\n        uint256 nReferred;\r\n        uint256 nReferredVerified;\r\n    }\r\n    \r\n    Token token;\r\n    address public tokenAddr = 0xd254fdE0eee65F3b75D01F5247bA260630A14B18;\r\n    \r\n    function claimTokens() external {\r\n        require(registrationsOpen == false);\r\n        require(totalClaims > 0);\r\n        require(registrants[msg.sender].canClaim);\r\n        token.transfer(msg.sender, canClaim(msg.sender) * token.balanceOf(address(this)) / totalClaims);\r\n        registrants[msg.sender].status = 2;\r\n    }\r\n    \r\n    function setVerification(bytes32 telegramHash, bool verification) external {\r\n        require(msg.sender == chairman);\r\n        require(registrationsOpen == false);\r\n        if (!registrants[nameToAddress[telegramHash]].verified && verification) {\r\n            registrants[nameToAddress[telegramHash]].verified = verification;\r\n            registrants[registrants[nameToAddress[telegramHash]].referrer].nReferredVerified++;\r\n            if (registrants[registrants[nameToAddress[telegramHash]].referrer].nReferredVerified > maxReferrals) {\r\n                maxReferrals = registrants[registrants[nameToAddress[telegramHash]].referrer].nReferredVerified;\r\n                maxReferrer = registrants[nameToAddress[telegramHash]].referrer;\r\n            }\r\n            return;\r\n        }\r\n        if (registrants[nameToAddress[telegramHash]].verified && !verification) {\r\n            registrants[nameToAddress[telegramHash]].verified = verification;\r\n            registrants[registrants[nameToAddress[telegramHash]].referrer].nReferredVerified--;\r\n        }\r\n    }\r\n    \r\n    function calcTotalClaims() public view returns(uint256) {\r\n        // call after verification\r\n        uint256 res=0;\r\n        for (uint256 i=0; i<nRegistrants; i++) {\r\n            res += canClaim(registrantArr[i]); \r\n        }\r\n        return res;\r\n    }\r\n    \r\n    function calcStandardClaim() public view returns(uint256) {\r\n        return 1000 * token.balanceOf(address(this)) / totalClaims;\r\n    }\r\n    \r\n    function finishVerification() public {\r\n        require(msg.sender == chairman);\r\n        require(registrationsOpen == false);\r\n\r\n        totalClaims = calcTotalClaims();\r\n    }\r\n    \r\n    function finishVerificationManual(uint256 _totalClaims) public {\r\n        require(msg.sender == chairman);\r\n        require(registrationsOpen == false);\r\n\r\n        totalClaims = _totalClaims;\r\n    }\r\n    function startVerification() public {\r\n        require(msg.sender == chairman);\r\n        registrationsOpen = false;\r\n    }\r\n    \r\n    function canClaimtelegramHash(bytes32 telegramHash) external view returns(uint256) {\r\n        return canClaim(nameToAddress[telegramHash]);\r\n    }\r\n    \r\n    function canClaim(address addr) public view returns(uint256) {\r\n        if (registrants[addr].status >= 2) {\r\n            return 0;\r\n        }\r\n        if (!registrants[addr].verified) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 res = params[0]; // 200\r\n        for (uint256 i=0; i<registrants[addr].nReferred; i++) {\r\n            if (registrants[registrants[addr].referrals[i]].verified) { \r\n                res += params[1]; // 400\r\n            }\r\n            if (res >= params[2]) { // 1000\r\n                break;\r\n            }\r\n        }\r\n        if (addr == maxReferrer) {\r\n            res += params[3]; // 10000\r\n        }\r\n        return res;\r\n    }\r\n    \r\n    function _register(address payable _addr, bytes32 referrer, bytes32 telegramHash) internal {\r\n        require(registrationsOpen);\r\n        require(_addr.balance > 100 finney, \"100 finney minimum balance required\");\r\n        require(registrants[_addr].created == false, \"already created\");\r\n        require(nameToAddress[telegramHash] == address(0x0), \"telegramHash username already registered\");\r\n        require(nameToAddress[referrer] != address(0x0) || _addr == chairman, \"must have referrer\");\r\n\r\n        nameToAddress[telegramHash] = _addr;\r\n        registrants[_addr].status = 1;\r\n        registrants[_addr].telegramHash = telegramHash;\r\n        registrants[_addr].referrer = nameToAddress[referrer];\r\n        registrants[_addr].verified = false;\r\n        registrants[_addr].created = true;\r\n        \r\n        registrantArr[nRegistrants] = msg.sender;\r\n        nRegistrants++;\r\n        \r\n        if (_addr == chairman) {\r\n            return;\r\n        }\r\n\r\n        registrants[nameToAddress[referrer]].referrals[registrants[nameToAddress[referrer]].nReferred] = _addr;\r\n        registrants[nameToAddress[referrer]].nReferred++;\r\n    }\r\n    \r\n    function register(bytes32 referrer, bytes32 telegramHash) public {\r\n        _register(msg.sender, referrer, telegramHash);\r\n    }\r\n    \r\n    function registerManual(address payable _addr, bytes32 referrer, bytes32 telegramHash) public {\r\n        require(msg.sender == chairman);\r\n        _register(_addr, referrer, telegramHash);\r\n    }\r\n    \r\n    \r\n    function retrieveUnclaimed() external {\r\n        require(msg.sender == chairman);\r\n        //add mintime\r\n        token.transfer(msg.sender, token.balanceOf(address(this)));\r\n    }\r\n    \r\n    function getAddress(bytes32 telegramHash) public view returns (address) {\r\n        require(msg.sender == chairman);\r\n        return nameToAddress[telegramHash];\r\n    }\r\n    \r\n    \r\n    function setParams(uint256[4] memory _params) public {\r\n        require(msg.sender == chairman);\r\n        params = _params;\r\n    }\r\n    \r\n    constructor(bytes32 telegramHash) public {\r\n        chairman = msg.sender;\r\n        registrationsOpen = true;\r\n        uint256[4] memory _params;\r\n        _params[0] = 200;\r\n        _params[1] = 400;\r\n        _params[2] = 1000;\r\n        _params[3] = 10000;\r\n        setParams(_params);\r\n        register(0, telegramHash);\r\n        registrants[msg.sender].verified = true;\r\n        token = Token(tokenAddr);\r\n    }\r\n} \r\n\r\ncontract Token {\r\n    mapping(address => uint256) public balanceOf;\r\n    function transfer(address to, uint256 value) public returns (bool success) {\r\n\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"telegramHash\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"constant\":true,\"inputs\":[],\"name\":\"calcStandardClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"calcTotalClaims\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"canClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"telegramHash\",\"type\":\"bytes32\"}],\"name\":\"canClaimtelegramHash\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishVerification\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalClaims\",\"type\":\"uint256\"}],\"name\":\"finishVerificationManual\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"telegramHash\",\"type\":\"bytes32\"}],\"name\":\"getAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxReferrals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxReferrer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nRegistrants\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"params\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"referrer\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"telegramHash\",\"type\":\"bytes32\"}],\"name\":\"register\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"referrer\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"telegramHash\",\"type\":\"bytes32\"}],\"name\":\"registerManual\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"registrantArr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"registrants\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"telegramHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"verified\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"canClaim\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"created\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nReferred\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nReferredVerified\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"registrationsOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"retrieveUnclaimed\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256[4]\",\"name\":\"_params\",\"type\":\"uint256[4]\"}],\"name\":\"setParams\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"telegramHash\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"verification\",\"type\":\"bool\"}],\"name\":\"setVerification\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startVerification\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalClaims\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Airdrop","CompilerVersion":"v0.5.12+commit.7709ece9","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"6804344c42f9828f4ed9a6c5b674bf9dec975a7c49eb6a2b1a01500b4f4d9f02","Library":"","LicenseType":"None","SwarmSource":"bzzr://3a5c16cb203cb303a4798df0ed653ee240f54074b7a7d8ed9e534972832dd08e"}]}