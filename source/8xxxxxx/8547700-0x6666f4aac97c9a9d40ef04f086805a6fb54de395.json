{"status":"1","message":"OK","result":[{"SourceCode":"// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\npragma solidity 0.5.10;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @return the address of the owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner());\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @return true if `msg.sender` is the owner of the contract.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to relinquish control of the contract.\r\n     * @notice Renouncing to ownership will leave the contract without an owner.\r\n     * It will not be possible to call the functions with the `onlyOwner`\r\n     * modifier anymore.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\npragma solidity 0.5.10;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Unsigned math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n    * @dev Multiplies two unsigned integers, reverts on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two unsigned integers, reverts on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n    * reverts when dividing by zero.\r\n    */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/access/Roles.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @title Roles\r\n * @dev Library for managing addresses assigned to a Role.\r\n */\r\nlibrary Roles {\r\n    struct Role {\r\n        mapping (address => bool) bearer;\r\n    }\r\n\r\n    /**\r\n     * @dev give an account access to this role\r\n     */\r\n    function add(Role storage role, address account) internal {\r\n        require(account != address(0));\r\n        require(!has(role, account));\r\n\r\n        role.bearer[account] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev remove an account's access to this role\r\n     */\r\n    function remove(Role storage role, address account) internal {\r\n        require(account != address(0));\r\n        require(has(role, account));\r\n\r\n        role.bearer[account] = false;\r\n    }\r\n\r\n    /**\r\n     * @dev check if an account has this role\r\n     * @return bool\r\n     */\r\n    function has(Role storage role, address account) internal view returns (bool) {\r\n        require(account != address(0));\r\n        return role.bearer[account];\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/access/roles/PauserRole.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\ncontract PauserRole {\r\n    using Roles for Roles.Role;\r\n\r\n    event PauserAdded(address indexed account);\r\n    event PauserRemoved(address indexed account);\r\n\r\n    Roles.Role private _pausers;\r\n\r\n    constructor () internal {\r\n        _addPauser(msg.sender);\r\n    }\r\n\r\n    modifier onlyPauser() {\r\n        require(isPauser(msg.sender));\r\n        _;\r\n    }\r\n\r\n    function isPauser(address account) public view returns (bool) {\r\n        return _pausers.has(account);\r\n    }\r\n\r\n    function addPauser(address account) public onlyPauser {\r\n        _addPauser(account);\r\n    }\r\n\r\n    function renouncePauser() public {\r\n        _removePauser(msg.sender);\r\n    }\r\n\r\n    function _addPauser(address account) internal {\r\n        _pausers.add(account);\r\n        emit PauserAdded(account);\r\n    }\r\n\r\n    function _removePauser(address account) internal {\r\n        _pausers.remove(account);\r\n        emit PauserRemoved(account);\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/lifecycle/Pausable.sol\r\n\r\npragma solidity 0.5.10;\r\n\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is PauserRole {\r\n    event Paused(address account);\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    constructor () internal {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @return true if the contract is paused, false otherwise.\r\n     */\r\n    function paused() public view returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!_paused);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(_paused);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev called by the owner to pause, triggers stopped state\r\n     */\r\n    function pause() public onlyPauser whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev called by the owner to unpause, returns to normal state\r\n     */\r\n    function unpause() public onlyPauser whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(msg.sender);\r\n    }\r\n}\r\n\r\n// File: contracts/ShareDispenser.sol\r\n\r\n/**\r\n* MIT License with Automated License Fee Payments\r\n*\r\n* Copyright (c) 2019 Equility AG (alethena.com)\r\n*\r\n* Permission is hereby granted to any person obtaining a copy of this software\r\n* and associated documentation files (the \"Software\"), to deal in the Software\r\n* without restriction, including without limitation the rights to use, copy,\r\n* modify, merge, publish, distribute, sublicense, and/or sell copies of the\r\n* Software, and to permit persons to whom the Software is furnished to do so,\r\n* subject to the following conditions:\r\n*\r\n* - The above copyright notice and this permission notice shall be included in\r\n*   all copies or substantial portions of the Software.\r\n* - All automated license fee payments integrated into this and related Software\r\n*   are preserved.\r\n*\r\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n* SOFTWARE.\r\n*/\r\npragma solidity 0.5.10;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Alethena Share Dispenser for Draggable ServiceHunter Shares (DSHS)\r\n * @author Benjamin Rickenbacher, benjamin@alethena.com\r\n * @dev This contract uses the open-zeppelin library.\r\n *\r\n * This smart contract is intended to serve as a tool that ServiceHunter AG can use to\r\n * provide liquidity for their DSHS.\r\n *\r\n * The currency used for payment is the Crypto Franc XCHF (https://www.swisscryptotokens.ch/)\r\n * which makes it possible to quote DSHS prices directly in Swiss Francs.\r\n *\r\n * ServiceHunter AG can allocate a certain number of DSHS and (optionally) also some XCHF\r\n * to the Share Dispenser and defines a linear price dependency.\r\n **/\r\n\r\ninterface ERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function transfer(address to, uint tokens) external returns (bool success);\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool success);\r\n    function totalShares() external view returns (uint256);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n}\r\n\r\n\r\ncontract ShareDispenser is Ownable, Pausable {\r\n    constructor(\r\n        address initialXCHFContractAddress,\r\n        address initialDSHSContractAddress,\r\n        address initialusageFeeAddress,\r\n        address initialBackendAddress\r\n        ) public {\r\n\r\n        require(initialXCHFContractAddress != address(0), \"XCHF does not reside at address 0!\");\r\n        require(initialDSHSContractAddress != address(0), \"DSHS does not reside at address 0!\");\r\n        require(initialusageFeeAddress != address(0), \"Usage fee address cannot be 0!\");\r\n\r\n        XCHFContractAddress = initialXCHFContractAddress;\r\n        DSHSContractAddress = initialDSHSContractAddress;\r\n        usageFeeAddress = initialusageFeeAddress;\r\n        backendAddress = initialBackendAddress;\r\n    }\r\n\r\n    /*\r\n     * Fallback function to prevent accidentally sending Ether to the contract\r\n     * It is still possible to force Ether into the contract as this cannot be prevented fully.\r\n     * Sending Ether to this contract does not create any problems for the contract, but the Ether will be lost.\r\n    */\r\n\r\n    function () external payable {\r\n        revert(\"This contract does not accept Ether.\");\r\n    }\r\n\r\n    using SafeMath for uint256;\r\n\r\n    // Variables\r\n\r\n    address public XCHFContractAddress;     // Address where XCHF is deployed\r\n    address public DSHSContractAddress;     // Address where DSHS is deployed\r\n    address public usageFeeAddress;         // Address where usage fee is collected\r\n    address public backendAddress;          // Address used by backend server (triggers buy/sell)\r\n\r\n    uint256 public usageFeeBSP  = 90;       // 0.9% usage fee (10000 basis points = 100%)\r\n    uint256 public minVolume = 1;          // Minimum number of shares to buy/sell\r\n\r\n    uint256 public minPriceInXCHF = 200*10**18; // Minimum price\r\n    uint256 public maxPriceInXCHF = 600*10**18; // Maximum price\r\n    uint256 public initialNumberOfShares = 400; //Price slope (TBD)\r\n\r\n    bool public buyEnabled = true;\r\n    bool public sellEnabled = true;\r\n\r\n    // Events\r\n\r\n    event XCHFContractAddressSet(address newXCHFContractAddress);\r\n    event DSHSContractAddressSet(address newDSHSContractAddress);\r\n    event UsageFeeAddressSet(address newUsageFeeAddress);\r\n\r\n    event SharesPurchased(address indexed buyer, uint256 amount, uint256 price, uint256 nextPrice);\r\n    event SharesSold(address indexed seller, uint256 amount, uint256 buyBackPrice, uint256 nextPrice);\r\n\r\n    event TokensRetrieved(address contractAddress, address indexed to, uint256 amount);\r\n\r\n    event UsageFeeSet(uint256 usageFee);\r\n    event MinVolumeSet(uint256 minVolume);\r\n    event MinPriceSet(uint256 minPrice);\r\n    event MaxPriceSet(uint256 maxPrice);\r\n    event InitialNumberOfSharesSet(uint256 initialNumberOfShares);\r\n\r\n    event BuyStatusChanged(bool newStatus);\r\n    event SellStatusChanged(bool newStatus);\r\n\r\n\r\n    // Function for buying shares\r\n\r\n    function buyShares(address buyer, uint256 numberOfSharesToBuy) public whenNotPaused() returns (bool) {\r\n\r\n        // Check that buying is enabled\r\n        require(buyEnabled, \"Buying is currenty disabled\");\r\n        require(numberOfSharesToBuy >= minVolume, \"Volume too low\");\r\n\r\n        // Check user is allowed to trigger buy\r\n        require(msg.sender == buyer || msg.sender == backendAddress, \"You do not have permission to trigger buying shares for someone else.\");\r\n\r\n        // Fetch the price (excluding the usage fee)\r\n        uint256 sharesAvailable = getERC20Balance(DSHSContractAddress);\r\n        uint256 price = getCumulatedPrice(numberOfSharesToBuy, sharesAvailable);\r\n\r\n        // Check that there are enough shares available\r\n        require(sharesAvailable >= numberOfSharesToBuy, \"Not enough shares available\");\r\n\r\n       // Compute usage fee\r\n        uint256 usageFee = price.mul(usageFeeBSP).div(10000);\r\n\r\n        // Check that allowance is set XCHF balance is sufficient to cover price + usage fee\r\n        require(getERC20Available(XCHFContractAddress, buyer) >= price.add(usageFee), \"Payment not authorized or funds insufficient\");\r\n\r\n        // Instantiate contracts\r\n        ERC20 DSHS = ERC20(DSHSContractAddress);\r\n        ERC20 XCHF = ERC20(XCHFContractAddress);\r\n\r\n        // Transfer usage fee and total price\r\n        require(XCHF.transferFrom(buyer, usageFeeAddress, usageFee), \"Usage fee transfer failed\");\r\n        require(XCHF.transferFrom(buyer, address(this), price), \"XCHF payment failed\");\r\n\r\n        // Transfer the shares\r\n        require(DSHS.transfer(buyer, numberOfSharesToBuy), \"Share transfer failed\");\r\n        uint256 nextPrice = getCumulatedPrice(1, sharesAvailable.sub(numberOfSharesToBuy));\r\n        emit SharesPurchased(buyer, numberOfSharesToBuy, price, nextPrice);\r\n        return true;\r\n    }\r\n\r\n    // Function for selling shares\r\n\r\n    function sellShares(address seller, uint256 numberOfSharesToSell, uint256 limitInXCHF) public whenNotPaused() returns (bool) {\r\n\r\n        // Check that selling is enabled\r\n        require(sellEnabled, \"Selling is currenty disabled\");\r\n        require(numberOfSharesToSell >= minVolume, \"Volume too low\");\r\n\r\n        // Check user is allowed to trigger sale;\r\n        require(msg.sender == seller || msg.sender == backendAddress, \"You do not have permission to trigger selling shares for someone else.\");\r\n\r\n        uint256 XCHFAvailable = getERC20Balance(XCHFContractAddress);\r\n        uint256 sharesAvailable = getERC20Balance(DSHSContractAddress);\r\n\r\n        // The full price. The usage fee is deducted from this to obtain the seller's payout\r\n        uint256 price = getCumulatedBuyBackPrice(numberOfSharesToSell, sharesAvailable);\r\n        require(limitInXCHF <= price, \"Price too low\");\r\n\r\n        // Check that XCHF reserve is sufficient\r\n        require(XCHFAvailable >= price, \"Reserves to small to buy back this amount of shares\");\r\n\r\n        // Check that seller has sufficient shares and allowance is set\r\n        require(getERC20Available(DSHSContractAddress, seller) >= numberOfSharesToSell, \"Seller doesn't have enough shares\");\r\n\r\n        // Instantiate contracts\r\n        ERC20 DSHS = ERC20(DSHSContractAddress);\r\n        ERC20 XCHF = ERC20(XCHFContractAddress);\r\n\r\n        // Transfer the shares\r\n        require(DSHS.transferFrom(seller, address(this), numberOfSharesToSell), \"Share transfer failed\");\r\n\r\n        // Compute usage fee\r\n        uint256 usageFee = price.mul(usageFeeBSP).div(10000);\r\n\r\n        // Transfer usage fee and buyback price\r\n        require(XCHF.transfer(usageFeeAddress, usageFee), \"Usage fee transfer failed\");\r\n        require(XCHF.transfer(seller, price.sub(usageFee)), \"XCHF payment failed\");\r\n        uint256 nextPrice = getCumulatedBuyBackPrice(1, sharesAvailable.add(numberOfSharesToSell));\r\n        emit SharesSold(seller, numberOfSharesToSell, price, nextPrice);\r\n        return true;\r\n    }\r\n\r\n    // Getters for ERC20 balances (for convenience)\r\n\r\n    function getERC20Balance(address contractAddress) public view returns (uint256) {\r\n        ERC20 contractInstance = ERC20(contractAddress);\r\n        return contractInstance.balanceOf(address(this));\r\n    }\r\n\r\n    function getERC20Available(address contractAddress, address owner) public view returns (uint256) {\r\n        ERC20 contractInstance = ERC20(contractAddress);\r\n        uint256 allowed = contractInstance.allowance(owner, address(this));\r\n        uint256 bal = contractInstance.balanceOf(owner);\r\n        return (allowed <= bal) ? allowed : bal;\r\n    }\r\n\r\n    // Price getters\r\n\r\n    function getCumulatedPrice(uint256 amount, uint256 supply) public view returns (uint256) {\r\n        uint256 cumulatedPrice = 0;\r\n        if (supply <= initialNumberOfShares) {\r\n            uint256 first = initialNumberOfShares.add(1).sub(supply);\r\n            uint256 last = first.add(amount).sub(1);\r\n            cumulatedPrice = helper(first, last);\r\n        } else if (supply.sub(amount) >= initialNumberOfShares) {\r\n            cumulatedPrice = minPriceInXCHF.mul(amount);\r\n        } else {\r\n            cumulatedPrice = supply.sub(initialNumberOfShares).mul(minPriceInXCHF);\r\n            uint256 first = 1;\r\n            uint256 last = amount.sub(supply.sub(initialNumberOfShares));\r\n            cumulatedPrice = cumulatedPrice.add(helper(first,last));\r\n        }\r\n\r\n        return cumulatedPrice;\r\n    }\r\n\r\n    function getCumulatedBuyBackPrice(uint256 amount, uint256 supply) public view returns (uint256) {\r\n        return getCumulatedPrice(amount, supply.add(amount)); // For symmetry reasons\r\n    }\r\n\r\n    // Function to retrieve DSHS or XCHF from contract\r\n    // This can also be used to retrieve any other ERC-20 token sent to the smart contract by accident\r\n\r\n    function retrieveERC20(address contractAddress, address to, uint256 amount) public onlyOwner() returns(bool) {\r\n        ERC20 contractInstance = ERC20(contractAddress);\r\n        require(contractInstance.transfer(to, amount), \"Transfer failed\");\r\n        emit TokensRetrieved(contractAddress, to, amount);\r\n        return true;\r\n    }\r\n\r\n    // Setters for addresses\r\n\r\n    function setXCHFContractAddress(address newXCHFContractAddress) public onlyOwner() {\r\n        require(newXCHFContractAddress != address(0), \"XCHF does not reside at address 0\");\r\n        XCHFContractAddress = newXCHFContractAddress;\r\n        emit XCHFContractAddressSet(XCHFContractAddress);\r\n    }\r\n\r\n    function setDSHSContractAddress(address newDSHSContractAddress) public onlyOwner() {\r\n        require(newDSHSContractAddress != address(0), \"DSHS does not reside at address 0\");\r\n        DSHSContractAddress = newDSHSContractAddress;\r\n        emit DSHSContractAddressSet(DSHSContractAddress);\r\n    }\r\n\r\n    function setUsageFeeAddress(address newUsageFeeAddress) public onlyOwner() {\r\n        require(newUsageFeeAddress != address(0), \"DSHS does not reside at address 0\");\r\n        usageFeeAddress = newUsageFeeAddress;\r\n        emit UsageFeeAddressSet(usageFeeAddress);\r\n    }\r\n\r\n    function setBackendAddress(address newBackendAddress) public onlyOwner() {\r\n        backendAddress = newBackendAddress;\r\n    }\r\n\r\n    // Setters for constants\r\n\r\n    function setUsageFee(uint256 newUsageFeeInBSP) public onlyOwner() {\r\n        require(newUsageFeeInBSP <= 10000, \"Usage fee must be given in basis points\");\r\n        usageFeeBSP = newUsageFeeInBSP;\r\n        emit UsageFeeSet(usageFeeBSP);\r\n    }\r\n\r\n    function setMinVolume(uint256 newMinVolume) public onlyOwner() {\r\n        require(newMinVolume > 0, \"Minimum volume can't be zero\");\r\n        minVolume = newMinVolume;\r\n        emit MinVolumeSet(minVolume);\r\n    }\r\n\r\n    function setminPriceInXCHF(uint256 newMinPriceInRappen) public onlyOwner() {\r\n        require(newMinPriceInRappen > 0, \"Price must be positive number\");\r\n        minPriceInXCHF = newMinPriceInRappen.mul(10**16);\r\n        require(minPriceInXCHF <= maxPriceInXCHF, \"Minimum price cannot exceed maximum price\");\r\n        emit MinPriceSet(minPriceInXCHF);\r\n    }\r\n\r\n    function setmaxPriceInXCHF(uint256 newMaxPriceInRappen) public onlyOwner() {\r\n        require(newMaxPriceInRappen > 0, \"Price must be positive number\");\r\n        maxPriceInXCHF = newMaxPriceInRappen.mul(10**16);\r\n        require(minPriceInXCHF <= maxPriceInXCHF, \"Minimum price cannot exceed maximum price\");\r\n        emit MaxPriceSet(maxPriceInXCHF);\r\n    }\r\n\r\n    function setInitialNumberOfShares(uint256 newInitialNumberOfShares) public onlyOwner() {\r\n        require(newInitialNumberOfShares > 0, \"Initial number of shares must be positive\");\r\n        initialNumberOfShares = newInitialNumberOfShares;\r\n        emit InitialNumberOfSharesSet(initialNumberOfShares);\r\n    }\r\n\r\n    // Enable buy and sell separately\r\n\r\n    function buyStatus(bool newStatus) public onlyOwner() {\r\n        buyEnabled = newStatus;\r\n        emit BuyStatusChanged(newStatus);\r\n    }\r\n\r\n    function sellStatus(bool newStatus) public onlyOwner() {\r\n        sellEnabled = newStatus;\r\n        emit SellStatusChanged(newStatus);\r\n    }\r\n\r\n    // Helper functions\r\n\r\n    function helper(uint256 first, uint256 last) internal view returns (uint256) {\r\n        uint256 tempa = last.sub(first).add(1).mul(minPriceInXCHF);                                   // (l-m+1)*p_min\r\n        uint256 tempb = maxPriceInXCHF.sub(minPriceInXCHF).div(initialNumberOfShares.sub(1)).div(2);  // (p_max-p_min)/(2(N-1))\r\n        uint256 tempc = last.mul(last).add(first.mul(3)).sub(last).sub(first.mul(first)).sub(2);      // l*l+3*m-l-m*m-2)\r\n        return tempb.mul(tempc).add(tempa);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"newXCHFContractAddress\",\"type\":\"address\"}],\"name\":\"setXCHFContractAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DSHSContractAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newInitialNumberOfShares\",\"type\":\"uint256\"}],\"name\":\"setInitialNumberOfShares\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"contractAddress\",\"type\":\"address\"},{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getERC20Available\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"usageFeeAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"backendAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newBackendAddress\",\"type\":\"address\"}],\"name\":\"setBackendAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"XCHFContractAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newStatus\",\"type\":\"bool\"}],\"name\":\"sellStatus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"supply\",\"type\":\"uint256\"}],\"name\":\"getCumulatedPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"seller\",\"type\":\"address\"},{\"name\":\"numberOfSharesToSell\",\"type\":\"uint256\"},{\"name\":\"limitInXCHF\",\"type\":\"uint256\"}],\"name\":\"sellShares\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minPriceInXCHF\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isPauser\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newMinPriceInRappen\",\"type\":\"uint256\"}],\"name\":\"setminPriceInXCHF\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newMinVolume\",\"type\":\"uint256\"}],\"name\":\"setMinVolume\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellEnabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"buyer\",\"type\":\"address\"},{\"name\":\"numberOfSharesToBuy\",\"type\":\"uint256\"}],\"name\":\"buyShares\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renouncePauser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newUsageFeeAddress\",\"type\":\"address\"}],\"name\":\"setUsageFeeAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"usageFeeBSP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialNumberOfShares\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addPauser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newMaxPriceInRappen\",\"type\":\"uint256\"}],\"name\":\"setmaxPriceInXCHF\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newStatus\",\"type\":\"bool\"}],\"name\":\"buyStatus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newDSHSContractAddress\",\"type\":\"address\"}],\"name\":\"setDSHSContractAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxPriceInXCHF\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"getERC20Balance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"contractAddress\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"retrieveERC20\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"supply\",\"type\":\"uint256\"}],\"name\":\"getCumulatedBuyBackPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minVolume\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyEnabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newUsageFeeInBSP\",\"type\":\"uint256\"}],\"name\":\"setUsageFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"initialXCHFContractAddress\",\"type\":\"address\"},{\"name\":\"initialDSHSContractAddress\",\"type\":\"address\"},{\"name\":\"initialusageFeeAddress\",\"type\":\"address\"},{\"name\":\"initialBackendAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newXCHFContractAddress\",\"type\":\"address\"}],\"name\":\"XCHFContractAddressSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newDSHSContractAddress\",\"type\":\"address\"}],\"name\":\"DSHSContractAddressSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newUsageFeeAddress\",\"type\":\"address\"}],\"name\":\"UsageFeeAddressSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"nextPrice\",\"type\":\"uint256\"}],\"name\":\"SharesPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"buyBackPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"nextPrice\",\"type\":\"uint256\"}],\"name\":\"SharesSold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensRetrieved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"usageFee\",\"type\":\"uint256\"}],\"name\":\"UsageFeeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"minVolume\",\"type\":\"uint256\"}],\"name\":\"MinVolumeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"minPrice\",\"type\":\"uint256\"}],\"name\":\"MinPriceSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"maxPrice\",\"type\":\"uint256\"}],\"name\":\"MaxPriceSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"initialNumberOfShares\",\"type\":\"uint256\"}],\"name\":\"InitialNumberOfSharesSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newStatus\",\"type\":\"bool\"}],\"name\":\"BuyStatusChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newStatus\",\"type\":\"bool\"}],\"name\":\"SellStatusChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"ShareDispenser","CompilerVersion":"v0.5.10+commit.5a6ea5b1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000b4272071ecadd69d933adcd19ca99fe80664fc08000000000000000000000000414324b0aba49fb14cbfb37be40d8d78a2edf447000000000000000000000000025a554f1b6ffbcb323c916328c55e64f6ad5af7000000000000000000000000529cf557e8650ffe58018ada5e190a7ef7a6b60b","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://a65f83e3f218693bd29b4df210921e86a58171390b9e5cfce59d29c81e7074c0"}]}