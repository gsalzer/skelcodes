{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.12;  /*\r\n \r\n \r\n \r\n \r\n    ___________________________________________________________________\r\n      _      _                                        ______           \r\n      |  |  /          /                                /              \r\n    --|-/|-/-----__---/----__----__---_--_----__-------/-------__------\r\n      |/ |/    /___) /   /   ' /   ) / /  ) /___)     /      /   )     \r\n    __/__|____(___ _/___(___ _(___/_/_/__/_(___ _____/______(___/__o_o_\r\n    \r\n\r\n\r\n    \r\n    \r\n    \r\n    ██████╗ ██╗████████╗██████╗  █████╗ ██╗   ██╗███████╗██████╗     ██████╗ ███████╗██╗  ██╗\r\n    ██╔══██╗██║╚══██╔══╝██╔══██╗██╔══██╗╚██╗ ██╔╝██╔════╝██╔══██╗    ██╔══██╗██╔════╝╚██╗██╔╝\r\n    ██████╔╝██║   ██║   ██████╔╝███████║ ╚████╔╝ █████╗  ██████╔╝    ██║  ██║█████╗   ╚███╔╝ \r\n    ██╔══██╗██║   ██║   ██╔═══╝ ██╔══██║  ╚██╔╝  ██╔══╝  ██╔══██╗    ██║  ██║██╔══╝   ██╔██╗ \r\n    ██████╔╝██║   ██║   ██║     ██║  ██║   ██║   ███████╗██║  ██║    ██████╔╝███████╗██╔╝ ██╗\r\n    ╚═════╝ ╚═╝   ╚═╝   ╚═╝     ╚═╝  ╚═╝   ╚═╝   ╚══════╝╚═╝  ╚═╝    ╚═════╝ ╚══════╝╚═╝  ╚═╝\r\n                                                                                             \r\n                                                                                                     \r\n     \r\n\r\n\r\n------------------------------------------------------------------------------------------------------\r\n Copyright (c) 2019 Onwards Bitpayer DEX Inc. ( https://bitpayer.io )\r\n Contract designed with ❤ by EtherAuthority  ( https://EtherAuthority.io )\r\n------------------------------------------------------------------------------------------------------\r\n*/\r\n\r\n\r\n//*******************************************************************\r\n//------------------------ SafeMath Library -------------------------\r\n//*******************************************************************\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\ninterface ERC20Essential \r\n{\r\n\r\n    function transfer(address _to, uint256 _amount) external returns (bool);\r\n    function transferFrom(address _from, address _to, uint256 _amount) external returns (bool);\r\n\r\n}\r\n\r\n\r\n\r\n\r\n//*******************************************************************//\r\n//------------------ Contract to Manage Ownership -------------------//\r\n//*******************************************************************//\r\n    \r\ncontract owned {\r\n    address public owner;\r\n    address public newOwner;\r\n\r\n\r\n    event OwnershipTransferred(uint256 curTime, address indexed _from, address indexed _to);\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n\r\n    function onlyOwnerTransferOwnership(address _newOwner) public onlyOwner {\r\n        newOwner = _newOwner;\r\n    }\r\n\r\n    //this flow is to prevent transferring ownership to wrong wallet by mistake\r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner);\r\n        emit OwnershipTransferred(now, owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = address(0);\r\n    }\r\n}\r\n\r\n\r\n\r\ncontract BitpayerDEX is owned {\r\n  using SafeMath for uint256;\r\n  bool public safeGuard; // To hault all non owner functions in case of imergency - by default false\r\n  address public feeAccount; //the account that will receive fees\r\n  uint public tradingFee = 30; // 30 = 0.3%\r\n  \r\n  //referrals\r\n  uint256 public refPercent = 10;  // percent to calculate referal bonous - by default 10% of trading fee\r\n  \r\n  mapping (address => mapping (address => uint)) public tokens; //mapping of token addresses to mapping of account balances (token=0 means Ether)\r\n  mapping (address => mapping (bytes32 => bool)) public orders; //mapping of user accounts to mapping of order hashes to booleans (true = submitted by user, equivalent to offchain signature)\r\n  mapping (address => mapping (bytes32 => uint)) public orderFills; //mapping of user accounts to mapping of order hashes to uints (amount of order that has been filled)\r\n  \r\n  /* Mapping to track referrer. The second address is the address of referrer, the Up-line/ Sponsor */\r\n  mapping (address => address) public referrers;\r\n  /* Mapping to track referrer bonus for all the referrers */\r\n  mapping (address => uint) public referrerBonusBalance;\r\n  \r\n  event Order(uint256 curTime, address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires,  address user);\r\n  event Cancel(uint256 curTime, address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, address user, uint8 v, bytes32 r, bytes32 s);\r\n  event Trade(uint256 curTime, address tokenGet, uint amountGet, address tokenGive, uint amountGive, address get, address give);\r\n  event Deposit(uint256 curTime, address token, address user, uint amount, uint balance);\r\n  event Withdraw(uint256 curTime, address token, address user, uint amount, uint balance);\r\n  event OwnerWithdrawTradingFee(address indexed owner, uint256 amount);\r\n  \r\n  // Events to track ether transfer to referrers\r\n  event ReferrerBonus(address indexed referer, address indexed trader, uint256 referralBonus, uint256 timestamp );\r\n  event ReferrerBonusWithdrawn(address indexed referrer, uint256 indexed amount);\r\n\r\n  \r\n\r\n    constructor() public {\r\n        feeAccount = msg.sender;\r\n    }\r\n\r\n    function changeSafeguardStatus() onlyOwner public\r\n    {\r\n        if (safeGuard == false)\r\n        {\r\n            safeGuard = true;\r\n        }\r\n        else\r\n        {\r\n            safeGuard = false;    \r\n        }\r\n    }\r\n\r\n    //Calculate percent and return result\r\n    function calculatePercentage(uint256 PercentOf, uint256 percentTo ) internal pure returns (uint256) \r\n    {\r\n        uint256 factor = 10000;\r\n        require(percentTo <= factor);\r\n        uint256 c = PercentOf.mul(percentTo).div(factor);\r\n        return c;\r\n    }  \r\n\r\n\r\n\r\n    \r\n  // contract without fallback automatically reject incoming ether\r\n  // function() external {  }\r\n\r\n\r\n  function changeFeeAccount(address feeAccount_) public onlyOwner {\r\n    feeAccount = feeAccount_;\r\n  }\r\n\r\n  function changetradingFee(uint tradingFee_) public onlyOwner{\r\n    //require(tradingFee_ <= tradingFee);\r\n    tradingFee = tradingFee_;\r\n  }\r\n  \r\n  function availableTradingFeeOwner() public view returns(uint256){\r\n      //it only holds ether as fee\r\n      return tokens[address(0)][feeAccount];\r\n  }\r\n  \r\n  function withdrawTradingFeeOwner() public onlyOwner returns (string memory){\r\n      uint256 amount = availableTradingFeeOwner();\r\n      require (amount > 0, 'Nothing to withdraw');\r\n      \r\n      tokens[address(0)][feeAccount] = 0;\r\n      \r\n      msg.sender.transfer(amount);\r\n      \r\n      emit OwnerWithdrawTradingFee(owner, amount);\r\n      \r\n  }\r\n\r\n  function deposit() public payable {\r\n    tokens[address(0)][msg.sender] = tokens[address(0)][msg.sender].add(msg.value);\r\n    emit Deposit(now, address(0), msg.sender, msg.value, tokens[address(0)][msg.sender]);\r\n  }\r\n\r\n  function withdraw(uint amount) public {\r\n    require(!safeGuard,\"System Paused by Admin\");\r\n    require(tokens[address(0)][msg.sender] >= amount);\r\n    tokens[address(0)][msg.sender] = tokens[address(0)][msg.sender].sub(amount);\r\n    msg.sender.transfer(amount);\r\n    emit Withdraw(now, address(0), msg.sender, amount, tokens[address(0)][msg.sender]);\r\n  }\r\n\r\n  function depositToken(address token, uint amount) public {\r\n    //remember to call Token(address).approve(this, amount) or this contract will not be able to do the transfer on your behalf.\r\n    require(token!=address(0));\r\n    require(ERC20Essential(token).transferFrom(msg.sender, address(this), amount));\r\n    tokens[token][msg.sender] = tokens[token][msg.sender].add(amount);\r\n    emit Deposit(now, token, msg.sender, amount, tokens[token][msg.sender]);\r\n  }\r\n\t\r\n  function withdrawToken(address token, uint amount) public {\r\n    require(!safeGuard,\"System Paused by Admin\");\r\n    require(token!=address(0));\r\n    require(tokens[token][msg.sender] >= amount);\r\n    tokens[token][msg.sender] = tokens[token][msg.sender].sub(amount);\r\n\t  ERC20Essential(token).transfer(msg.sender, amount);\r\n    emit Withdraw(now, token, msg.sender, amount, tokens[token][msg.sender]);\r\n  }\r\n\r\n  function balanceOf(address token, address user) public view returns (uint) {\r\n    return tokens[token][user];\r\n  }\r\n\r\n  function order(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires) public {\r\n    bytes32 hash = keccak256(abi.encodePacked(this, tokenGet, amountGet, tokenGive, amountGive, expires));\r\n    orders[msg.sender][hash] = true;\r\n    emit Order(now, tokenGet, amountGet, tokenGive, amountGive, expires, msg.sender);\r\n  }\r\n\r\n\r\n    /* address[4] addressArray elements\r\n        0 = tokenGet\r\n        1 = tokenGive\r\n        2 = tradeMaker\r\n        3 = referrer\r\n    */\r\n  function trade(address[4] memory addressArray, uint amountGet, uint amountGive, uint expires, uint8 v, bytes32 r, bytes32 s, uint amount) public {\r\n    require(!safeGuard,\"System Paused by Admin\");\r\n    //amount is in amountGet terms\r\n    bytes32 hash = keccak256(abi.encodePacked(this, addressArray[0], amountGet, addressArray[1], amountGive, expires));\r\n    require((\r\n      (orders[addressArray[2]][hash] || ecrecover(keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash)),v,r,s) == addressArray[2]) &&\r\n      block.number <= expires &&\r\n      orderFills[addressArray[2]][hash].add(amount) <= amountGet\r\n    ));\r\n    tradeBalances(addressArray[0], amountGet, addressArray[1], amountGive, addressArray[2], amount, addressArray[3]);\r\n    orderFills[addressArray[2]][hash] = orderFills[addressArray[2]][hash].add(amount);\r\n    \r\n    \r\n    emit Trade(now, addressArray[0], amount, addressArray[1], amountGive * amount / amountGet, addressArray[2], msg.sender);\r\n  }\r\n\r\n  function tradeBalances(address tokenGet, uint amountGet, address tokenGive, uint amountGive, address user, uint amount, address referrer) internal {\r\n    \r\n    uint tradingFeeXfer = calculatePercentage(amount,tradingFee);\r\n    \r\n    //processing referrers bonus - which is % of the trading fee\r\n    processReferrerBonus(referrer, tradingFeeXfer);\r\n\r\n    tokens[tokenGet][msg.sender] = tokens[tokenGet][msg.sender].sub(amount.add(tradingFeeXfer));\r\n    tokens[tokenGet][user] = tokens[tokenGet][user].add(amount.sub(tradingFeeXfer));\r\n    tokens[address(0)][feeAccount] = tokens[address(0)][feeAccount].add(tradingFeeXfer);\r\n\r\n    tokens[tokenGive][user] = tokens[tokenGive][user].sub(amountGive.mul(amount) / amountGet);\r\n    tokens[tokenGive][msg.sender] = tokens[tokenGive][msg.sender].add(amountGive.mul(amount) / amountGet);\r\n  }\r\n  \r\n  \r\n\r\n  function testTrade(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, address user, uint8 v, bytes32 r, bytes32 s, uint amount, address sender) public view returns(bool) {\r\n    \r\n    if (!(\r\n      tokens[tokenGet][sender] >= amount &&\r\n      availableVolume(tokenGet, amountGet, tokenGive, amountGive, expires, user, v, r, s) >= amount\r\n    )) return false;\r\n    return true;\r\n  }\r\n\r\n  function availableVolume(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, address user, uint8 v, bytes32 r, bytes32 s) public view returns(uint) {\r\n    bytes32 hash = keccak256(abi.encodePacked(this, tokenGet, amountGet, tokenGive, amountGive, expires));\r\n    uint available1;\r\n    if (!(\r\n      (orders[user][hash] || ecrecover(keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash)),v,r,s) == user) &&\r\n      block.number <= expires\r\n    )) return 0;\r\n    available1 = tokens[tokenGive][user].mul(amountGet) / amountGive;\r\n    \r\n    if (amountGet.sub(orderFills[user][hash])<available1) return amountGet.sub(orderFills[user][hash]);\r\n    return available1;\r\n    \r\n  }\r\n\r\n  function amountFilled(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, address user) public view returns(uint) {\r\n    bytes32 hash = keccak256(abi.encodePacked(this, tokenGet, amountGet, tokenGive, amountGive, expires));\r\n    return orderFills[user][hash];\r\n  }\r\n\r\n  function cancelOrder(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint8 v, bytes32 r, bytes32 s) public {\r\n    require(!safeGuard,\"System Paused by Admin\");\r\n    bytes32 hash = keccak256(abi.encodePacked(this, tokenGet, amountGet, tokenGive, amountGive, expires));\r\n    require((orders[msg.sender][hash] || ecrecover(keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash)),v,r,s) == msg.sender));\r\n    orderFills[msg.sender][hash] = amountGet;\r\n    emit Cancel(now, tokenGet, amountGet, tokenGive, amountGive, expires, msg.sender, v, r, s);\r\n  }\r\n\r\n\r\n\r\n//==================================================//\r\n//              REFERRAL SECTION CODE               //\r\n//==================================================//\r\n\r\nfunction processReferrerBonus(address _referrer, uint256 _tradingFeeLocal) internal {\r\n      \r\n      address existingReferrer = referrers[msg.sender];\r\n      \r\n      if(_referrer != address(0) && existingReferrer != address(0) ){\r\n        referrerBonusBalance[existingReferrer] += _tradingFeeLocal * refPercent / 100;\r\n        emit ReferrerBonus(_referrer, msg.sender, _tradingFeeLocal * refPercent / 100, now );\r\n      }\r\n      else if(_referrer != address(0) && existingReferrer == address(0) ){\r\n        //no referrer exist, but provided in trade function call\r\n        referrerBonusBalance[_referrer] += _tradingFeeLocal * refPercent / 100;\r\n        referrers[msg.sender] = _referrer;\r\n        emit ReferrerBonus(_referrer, msg.sender, _tradingFeeLocal * refPercent / 100, now );\r\n      }\r\n  }\r\n  \r\n  function changeRefPercent(uint256 newRefPercent) public onlyOwner returns (string memory){\r\n      require(newRefPercent <= 100, 'newRefPercent can not be more than 100');\r\n      refPercent = newRefPercent;\r\n      return \"refPool fee updated successfully\";\r\n  }\r\n  \r\n  /**\r\n        * Function will allow users to withdraw their referrer bonus  \r\n    */\r\n    function claimReferrerBonus() public returns(bool) {\r\n        \r\n        address payable msgSender = msg.sender;\r\n        \r\n        uint256 referralBonus = referrerBonusBalance[msgSender];\r\n        \r\n        require(referralBonus > 0, 'Insufficient referrer bonus');\r\n        referrerBonusBalance[msgSender] = 0;\r\n        \r\n        \r\n        //transfer the referrer bonus\r\n        msgSender.transfer(referralBonus);\r\n        \r\n        //fire event\r\n        emit ReferrerBonusWithdrawn(msgSender, referralBonus);\r\n        \r\n        return true;\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"curTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenGet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountGet\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenGive\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountGive\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expires\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"Cancel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"curTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"curTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenGet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountGet\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenGive\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountGive\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expires\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"Order\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"OwnerWithdrawTradingFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"curTime\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"referralBonus\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ReferrerBonus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ReferrerBonusWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"curTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenGet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountGet\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenGive\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountGive\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"get\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"give\",\"type\":\"address\"}],\"name\":\"Trade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"curTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenGet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountGet\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenGive\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountGive\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expires\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"amountFilled\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"availableTradingFeeOwner\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenGet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountGet\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenGive\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountGive\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expires\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"availableVolume\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenGet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountGet\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenGive\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountGive\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expires\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"cancelOrder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeAccount_\",\"type\":\"address\"}],\"name\":\"changeFeeAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newRefPercent\",\"type\":\"uint256\"}],\"name\":\"changeRefPercent\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"changeSafeguardStatus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tradingFee_\",\"type\":\"uint256\"}],\"name\":\"changetradingFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimReferrerBonus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeAccount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"onlyOwnerTransferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenGet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountGet\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenGive\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountGive\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expires\",\"type\":\"uint256\"}],\"name\":\"order\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"orderFills\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"orders\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"refPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referrerBonusBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referrers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"safeGuard\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenGet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountGet\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenGive\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountGive\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expires\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"testTrade\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[4]\",\"name\":\"addressArray\",\"type\":\"address[4]\"},{\"internalType\":\"uint256\",\"name\":\"amountGet\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountGive\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expires\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"trade\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tradingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawTradingFeeOwner\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"BitpayerDEX","CompilerVersion":"v0.5.12+commit.7709ece9","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://5b131885573fae6259b13734da6962d5302ff3c709e48b54c345e881cf440667"}]}