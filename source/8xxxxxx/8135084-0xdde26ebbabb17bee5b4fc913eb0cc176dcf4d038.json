{"status":"1","message":"OK","result":[{"SourceCode":"{\"SafeMath.sol\":{\"content\":\"// solium-disable linebreak-style\\r\\npragma solidity ^0.4.24;\\r\\n\\r\\n//https://github.com/OpenZeppelin/openzeppelin-solidity\\r\\n/**\\r\\n * @title SafeMath\\r\\n * @dev Math operations with safety checks that throw on error\\r\\n */\\r\\nlibrary SafeMath {\\r\\n\\r\\n    /**\\r\\n    * @dev Multiplies two numbers, throws on overflow.\\r\\n    */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n        uint256 c = a * b;\\r\\n        assert(c / a == b);\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Integer division of two numbers, truncating the quotient.\\r\\n    */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // assert(b \\u003e 0); // Solidity automatically throws when dividing by 0\\r\\n        uint256 c = a / b;\\r\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\\r\\n    */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        assert(b \\u003c= a);\\r\\n        return a - b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Adds two numbers, throws on overflow.\\r\\n    */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        assert(c \\u003e= a);\\r\\n        return c;\\r\\n    }\\r\\n}\\r\\n\"},\"Token.sol\":{\"content\":\"// solium-disable linebreak-style\\r\\npragma solidity ^0.4.24;\\r\\n\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\n\\r\\n/**\\r\\n* ERC Token Standard #20 Interface\\r\\n* https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\\r\\n */\\r\\ncontract ERC20Interface {\\r\\n    function totalSupply() public view returns (uint256);\\r\\n    function balanceOf(address tokenOwner) public view returns (uint256 balance);\\r\\n    function allowance(address tokenOwner, address spender) public view returns (uint256 remaining);\\r\\n    function transfer(address to, uint tokens) public returns (bool success);\\r\\n    function approve(address spender, uint tokens) public returns (bool success);\\r\\n    function transferFrom(address from, address to, uint256 tokens) public returns (bool success);\\r\\n\\r\\n    event Transfer(address indexed from, address indexed to, uint256 tokens);\\r\\n    event Approval(address indexed tokenOwner, address indexed spender, uint256 tokens);\\r\\n}\\r\\n\\r\\ncontract ERC20Base is ERC20Interface {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    string public symbol;\\r\\n    string public name;\\r\\n    uint8 public decimals;\\r\\n    uint public totalSupply_;\\r\\n    address public owner;\\r\\n\\r\\n    mapping(address =\\u003e uint) balances;\\r\\n    mapping(address =\\u003e mapping(address =\\u003e uint)) allowed;\\r\\n\\r\\n    /** \\r\\n    * @dev Constructor\\r\\n    */\\r\\n    constructor(address _owner) public {\\r\\n        symbol = \\\"ABM\\\";\\r\\n        name = \\\"ABMatrix Shareholding Token\\\";\\r\\n        decimals = 18;\\r\\n        totalSupply_ = 1 * (10 ** 7) * (10 ** 18);\\r\\n        owner = _owner;\\r\\n        balances[owner] = totalSupply_;\\r\\n        emit Transfer(address(0), owner, totalSupply_);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(msg.sender == owner, \\\"caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev total number of tokens in existence\\r\\n    */\\r\\n    function totalSupply() public view returns (uint256) {\\r\\n        return totalSupply_;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Gets the balance of the specified address.\\r\\n    * @param _owner The address to query the the balance of.\\r\\n    * @return An uint256 representing the amount owned by the passed address.\\r\\n    */\\r\\n    function balanceOf(address _owner) public view returns (uint256 balance) {\\r\\n        return balances[_owner];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev transfer token for a specified address\\r\\n    * @param _to The address to transfer to.\\r\\n    * @param _value The amount to be transferred.\\r\\n    */\\r\\n    function transfer(address _to, uint _value) public returns (bool success) {\\r\\n        require(_to != address(0));\\r\\n        require(_value \\u003c= balances[msg.sender]);\\r\\n\\r\\n        balances[msg.sender] = balances[msg.sender].sub(_value);\\r\\n        balances[_to] = balances[_to].add(_value);\\r\\n        emit Transfer(msg.sender, _to, _value);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\r\\n    * @param _spender The address which will spend the funds.\\r\\n    * @param _value The amount of tokens to be spent.\\r\\n    */\\r\\n    function approve(address _spender, uint256 _value) public returns (bool) {\\r\\n        allowed[msg.sender][_spender] = _value;\\r\\n        emit Approval(msg.sender, _spender, _value);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Transfer tokens from one address to another\\r\\n    * @param _from address The address which you want to send tokens from\\r\\n    * @param _to address The address which you want to transfer to\\r\\n    * @param _value uint256 the amount of tokens to be transferred\\r\\n    */\\r\\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\\r\\n        require(_to != address(0));\\r\\n        require(_value \\u003c= balances[_from]);\\r\\n        require(_value \\u003c= allowed[_from][msg.sender]);\\r\\n\\r\\n        balances[_from] = balances[_from].sub(_value);\\r\\n        balances[_to] = balances[_to].add(_value);\\r\\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\\r\\n        emit Transfer(_from, _to, _value);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Function to check the amount of tokens that an owner allowed to a spender.\\r\\n    * @param _owner address The address which owns the funds.\\r\\n    * @param _spender address The address which will spend the funds.\\r\\n    * @return A uint256 specifying the amount of tokens still available for the spender.\\r\\n    */\\r\\n    function allowance(address _owner, address _spender) public view returns (uint256) {\\r\\n        return allowed[_owner][_spender];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Destoys `amount` tokens, reducing the total supply.\\r\\n     * @param _account the address which to burn.\\r\\n     * @param _amount must have at least `amount` tokens.\\r\\n     */\\r\\n    function burn(address _account, uint256 _amount) public onlyOwner {\\r\\n        require(_account != address(0), \\\"burn to the zero address\\\");\\r\\n        \\r\\n        totalSupply_ = totalSupply_.sub(_amount);\\r\\n        balances[_account] = balances[_account].sub(_amount);\\r\\n        emit Transfer(_account, address(0), _amount);\\r\\n    }\\r\\n\\r\\n    /** \\r\\n     * @dev Creates `amount` tokens and assigns them to `account`, increasing\\r\\n     * the total supply.\\r\\n     * @param _account the address which to fund.\\r\\n     * @param _amount the amount of funds.\\r\\n     */\\r\\n    function mint(address _account, uint256 _amount) public onlyOwner {\\r\\n        require(_account != address(0), \\\"mint to the zero address\\\");\\r\\n\\r\\n        totalSupply_ = totalSupply_.add(_amount);\\r\\n        balances[_account] = balances[_account].add(_amount);\\r\\n        emit Transfer(address(0), _account, _amount);\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract Token is ERC20Base {\\r\\n    constructor() public\\r\\n        ERC20Base(0x68307D03aaD558716061762b9B62F0F5d17C5c4a)\\r\\n    {\\r\\n    }\\r\\n}\"}}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"Token","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://17896094f06313deddc7adf3c0dee12733e79561ccd3dcdaf2019eca57321da8"}]}