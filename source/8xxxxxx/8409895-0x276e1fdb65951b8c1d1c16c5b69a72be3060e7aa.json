{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\n\n\n/**\n * @title Spawn\n * @author 0age\n * @notice This contract provides creation code that is used by Spawner in order\n * to initialize and deploy eip-1167 minimal proxies for a given logic contract.\n */\ncontract Spawn {\n  constructor(\n    address logicContract,\n    bytes memory initializationCalldata\n  ) public payable {\n    // delegatecall into the logic contract to perform initialization.\n    (bool ok, ) = logicContract.delegatecall(initializationCalldata);\n    if (!ok) {\n      // pass along failure message from delegatecall and revert.\n      assembly {\n        returndatacopy(0, 0, returndatasize)\n        revert(0, returndatasize)\n      }\n    }\n\n    // place eip-1167 runtime code in memory.\n    bytes memory runtimeCode = abi.encodePacked(\n      bytes10(0x363d3d373d3d3d363d73),\n      logicContract,\n      bytes15(0x5af43d82803e903d91602b57fd5bf3)\n    );\n\n    // return eip-1167 code to write it to spawned contract runtime.\n    assembly {\n      return(add(0x20, runtimeCode), 45) // eip-1167 runtime code, length\n    }\n  }\n}\n\n/**\n * @title Spawner\n * @author 0age\n * @notice This contract spawns and initializes eip-1167 minimal proxies that\n * point to existing logic contracts. The logic contracts need to have an\n * intitializer function that should only callable when no contract exists at\n * their current address (i.e. it is being `DELEGATECALL`ed from a constructor).\n */\ncontract Spawner {\n  /**\n   * @notice Internal function for spawning an eip-1167 minimal proxy using\n   * `CREATE2`.\n   * @param logicContract address The address of the logic contract.\n   * @param initializationCalldata bytes The calldata that will be supplied to\n   * the `DELEGATECALL` from the spawned contract to the logic contract during\n   * contract creation.\n   * @return The address of the newly-spawned contract.\n   */\n  function _spawn(\n    address logicContract,\n    bytes memory initializationCalldata\n  ) internal returns (address spawnedContract) {\n    // place creation code and constructor args of contract to spawn in memory.\n    bytes memory initCode = abi.encodePacked(\n      type(Spawn).creationCode,\n      abi.encode(logicContract, initializationCalldata)\n    );\n\n    // spawn the contract using `CREATE2`.\n    spawnedContract = _spawnCreate2(initCode);\n  }\n\n  /**\n   * @notice Internal view function for finding the address of the next standard\n   * eip-1167 minimal proxy created using `CREATE2` with a given logic contract\n   * and initialization calldata payload.\n   * @param logicContract address The address of the logic contract.\n   * @param initializationCalldata bytes The calldata that will be supplied to\n   * the `DELEGATECALL` from the spawned contract to the logic contract during\n   * contract creation.\n   * @return The address of the next spawned minimal proxy contract with the\n   * given parameters.\n   */\n  function _computeNextAddress(\n    address logicContract,\n    bytes memory initializationCalldata\n  ) internal view returns (address target) {\n    // place creation code and constructor args of contract to spawn in memory.\n    bytes memory initCode = abi.encodePacked(\n      type(Spawn).creationCode,\n      abi.encode(logicContract, initializationCalldata)\n    );\n\n    // get target address using the constructed initialization code.\n    (, target) = _getSaltAndTarget(initCode);\n  }\n\n\n  /**\n   * @notice Private function for spawning a compact eip-1167 minimal proxy\n   * using `CREATE2`. Provides logic that is reused by internal functions. A\n   * salt will also be chosen based on the calling address and a computed nonce\n   * that prevents deployments to existing addresses.\n   * @param initCode bytes The contract creation code.\n   * @return The address of the newly-spawned contract.\n   */\n  function _spawnCreate2(\n    bytes memory initCode\n  ) private returns (address spawnedContract) {\n    // get salt to use during deployment using the supplied initialization code.\n    (bytes32 salt, ) = _getSaltAndTarget(initCode);\n\n    assembly {\n      let encoded_data := add(0x20, initCode) // load initialization code.\n      let encoded_size := mload(initCode)     // load the init code's length.\n      spawnedContract := create2(             // call `CREATE2` w/ 4 arguments.\n        callvalue,                            // forward any supplied endowment.\n        encoded_data,                         // pass in initialization code.\n        encoded_size,                         // pass in init code's length.\n        salt                                  // pass in the salt value.\n      )\n\n      // pass along failure message from failed contract deployment and revert.\n      if iszero(spawnedContract) {\n        returndatacopy(0, 0, returndatasize)\n        revert(0, returndatasize)\n      }\n    }\n  }\n\n  /**\n   * @notice Private function for determining the salt and the target deployment\n   * address for the next spawned contract (using create2) based on the contract\n   * creation code.\n   */\n  function _getSaltAndTarget(\n    bytes memory initCode\n  ) private view returns (bytes32 salt, address target) {\n    // get the keccak256 hash of the init code for address derivation.\n    bytes32 initCodeHash = keccak256(initCode);\n\n    // set the initial nonce to be provided when constructing the salt.\n    uint256 nonce = 0;\n\n    // declare variable for code size of derived address.\n    uint256 codeSize;\n\n    while (true) {\n      // derive `CREATE2` salt using `msg.sender` and nonce.\n      salt = keccak256(abi.encodePacked(msg.sender, nonce));\n\n      target = address(    // derive the target deployment address.\n        uint160(                   // downcast to match the address type.\n          uint256(                 // cast to uint to truncate upper digits.\n            keccak256(             // compute CREATE2 hash using 4 inputs.\n              abi.encodePacked(    // pack all inputs to the hash together.\n                bytes1(0xff),      // pass in the control character.\n                address(this),     // pass in the address of this contract.\n                salt,              // pass in the salt from above.\n                initCodeHash       // pass in hash of contract creation code.\n              )\n            )\n          )\n        )\n      );\n\n      // determine if a contract is already deployed to the target address.\n      assembly { codeSize := extcodesize(target) }\n\n      // exit the loop if no contract is deployed to the target address.\n      if (codeSize == 0) {\n        break;\n      }\n\n      // otherwise, increment the nonce and derive a new salt.\n      nonce++;\n    }\n  }\n}\n\n\ninterface iRegistry {\n\n    enum FactoryStatus { Unregistered, Registered, Retired }\n\n    event FactoryAdded(address owner, address factory, uint256 factoryID, bytes extraData);\n    event FactoryRetired(address owner, address factory, uint256 factoryID);\n    event InstanceRegistered(address instance, uint256 instanceIndex, address indexed creator, address indexed factory, uint256 indexed factoryID);\n\n    // factory state functions\n\n    function addFactory(address factory, bytes calldata extraData ) external;\n    function retireFactory(address factory) external;\n\n    // factory view functions\n\n    function getFactoryCount() external view returns (uint256 count);\n    function getFactoryStatus(address factory) external view returns (FactoryStatus status);\n    function getFactoryID(address factory) external view returns (uint16 factoryID);\n    function getFactoryData(address factory) external view returns (bytes memory extraData);\n    function getFactoryAddress(uint16 factoryID) external view returns (address factory);\n    function getFactory(address factory) external view returns (FactoryStatus state, uint16 factoryID, bytes memory extraData);\n    function getFactories() external view returns (address[] memory factories);\n    function getPaginatedFactories(uint256 startIndex, uint256 endIndex) external view returns (address[] memory factories);\n\n    // instance state functions\n\n    function register(address instance, address creator, uint80 extraData) external;\n\n    // instance view functions\n\n    function getInstanceType() external view returns (bytes4 instanceType);\n    function getInstanceCount() external view returns (uint256 count);\n    function getInstance(uint256 index) external view returns (address instance);\n    function getInstances() external view returns (address[] memory instances);\n    function getPaginatedInstances(uint256 startIndex, uint256 endIndex) external view returns (address[] memory instances);\n}\n\n\n\ncontract Metadata {\n\n    bytes private _staticMetadata;\n    bytes private _variableMetadata;\n\n    event StaticMetadataSet(bytes staticMetadata);\n    event VariableMetadataSet(bytes variableMetadata);\n\n    // state functions\n\n    function _setStaticMetadata(bytes memory staticMetadata) internal {\n        require(_staticMetadata.length == 0, \"static metadata cannot be changed\");\n        _staticMetadata = staticMetadata;\n        emit StaticMetadataSet(staticMetadata);\n    }\n\n    function _setVariableMetadata(bytes memory variableMetadata) internal {\n        _variableMetadata = variableMetadata;\n        emit VariableMetadataSet(variableMetadata);\n    }\n\n    // view functions\n\n    function getMetadata() public view returns (bytes memory staticMetadata, bytes memory variableMetadata) {\n        staticMetadata = _staticMetadata;\n        variableMetadata = _variableMetadata;\n    }\n}\n\n\n\ncontract Operated {\n\n    address private _operator;\n    bool private _status;\n\n    event OperatorUpdated(address operator, bool status);\n\n    // state functions\n\n    function _setOperator(address operator) internal {\n        require(_operator != operator, \"cannot set same operator\");\n        _operator = operator;\n        emit OperatorUpdated(operator, hasActiveOperator());\n    }\n\n    function _transferOperator(address operator) internal {\n        // transferring operator-ship implies there was an operator set before this\n        require(_operator != address(0), \"operator not set\");\n        _setOperator(operator);\n    }\n\n    function _renounceOperator() internal {\n        require(hasActiveOperator(), \"only when operator active\");\n        _operator = address(0);\n        _status = false;\n        emit OperatorUpdated(address(0), false);\n    }\n\n    function _activateOperator() internal {\n        require(!hasActiveOperator(), \"only when operator not active\");\n        _status = true;\n        emit OperatorUpdated(_operator, true);\n    }\n\n    function _deactivateOperator() internal {\n        require(hasActiveOperator(), \"only when operator active\");\n        _status = false;\n        emit OperatorUpdated(_operator, false);\n    }\n\n    // view functions\n\n    function getOperator() public view returns (address operator) {\n        operator = _operator;\n    }\n\n    function isOperator(address caller) public view returns (bool ok) {\n        return (caller == getOperator());\n    }\n\n    function hasActiveOperator() public view returns (bool ok) {\n        return _status;\n    }\n\n    function isActiveOperator(address caller) public view returns (bool ok) {\n        return (isOperator(caller) && hasActiveOperator());\n    }\n\n}\n\n\n/* TODO: Update eip165 interface\n *  bytes4(keccak256('create(bytes)')) == 0xcf5ba53f\n *  bytes4(keccak256('getInstanceType()')) == 0x18c2f4cf\n *  bytes4(keccak256('getInstanceRegistry()')) == 0xa5e13904\n *  bytes4(keccak256('getImplementation()')) == 0xaaf10f42\n *\n *  => 0xcf5ba53f ^ 0x18c2f4cf ^ 0xa5e13904 ^ 0xaaf10f42 == 0xd88967b6\n */\n interface iFactory {\n\n     event InstanceCreated(address indexed instance, address indexed creator, string initABI, bytes initData);\n\n     function create(bytes calldata initData) external returns (address instance);\n     function getInitdataABI() external view returns (string memory initABI);\n     function getInstanceRegistry() external view returns (address instanceRegistry);\n     function getTemplate() external view returns (address template);\n\n     function getInstanceCreator(address instance) external view returns (address creator);\n     function getInstanceType() external view returns (bytes4 instanceType);\n     function getInstanceCount() external view returns (uint256 count);\n     function getInstance(uint256 index) external view returns (address instance);\n     function getInstances() external view returns (address[] memory instances);\n     function getPaginatedInstances(uint256 startIndex, uint256 endIndex) external view returns (address[] memory instances);\n }\n\n\n\n/**\n * @title MultiHashWrapper\n * @dev Contract that handles multi hash data structures and encoding/decoding\n *   Learn more here: https://github.com/multiformats/multihash\n */\ncontract MultiHashWrapper {\n\n    // bytes32 hash first to fill the first storage slot\n    struct MultiHash {\n        bytes32 hash;\n        uint8 hashFunction;\n        uint8 digestSize;\n    }\n\n    /**\n    * @dev Given a multihash struct, returns the full base58-encoded hash\n    * @param multihash MultiHash struct that has the hashFunction, digestSize and the hash\n    * @return the base58-encoded full hash\n    */\n    function _combineMultiHash(MultiHash memory multihash) internal pure returns (bytes memory) {\n        bytes memory out = new bytes(34);\n\n        out[0] = byte(multihash.hashFunction);\n        out[1] = byte(multihash.digestSize);\n\n        uint8 i;\n        for (i = 0; i < 32; i++) {\n          out[i+2] = multihash.hash[i];\n        }\n\n        return out;\n    }\n\n    /**\n    * @dev Given a base58-encoded  hash, divides into its individual parts and returns a struct\n    * @param source base58-encoded  hash\n    * @return MultiHash that has the hashFunction, digestSize and the hash\n    */\n    function _splitMultiHash(bytes memory source) internal pure returns (MultiHash memory) {\n        require(source.length == 34, \"length of source must be 34\");\n\n        uint8 hashFunction = uint8(source[0]);\n        uint8 digestSize = uint8(source[1]);\n        bytes32 hash;\n\n        assembly {\n          hash := mload(add(source, 34))\n        }\n\n        return (MultiHash({\n          hashFunction: hashFunction,\n          digestSize: digestSize,\n          hash: hash\n        }));\n    }\n}\n\n\n\n\ncontract Factory is Spawner {\n\n    address[] private _instances;\n    mapping (address => address) private _instanceCreator;\n\n    /* NOTE: The following items can be hardcoded as constant to save ~200 gas/create */\n    address private _templateContract;\n    string private _initdataABI;\n    address private _instanceRegistry;\n    bytes4 private _instanceType;\n\n    event InstanceCreated(address indexed instance, address indexed creator, bytes callData);\n\n    function _initialize(address instanceRegistry, address templateContract, bytes4 instanceType, string memory initdataABI) internal {\n        // set instance registry\n        _instanceRegistry = instanceRegistry;\n        // set logic contract\n        _templateContract = templateContract;\n        // set initdataABI\n        _initdataABI = initdataABI;\n        // validate correct instance registry\n        require(instanceType == iRegistry(instanceRegistry).getInstanceType(), 'incorrect instance type');\n        // set instanceType\n        _instanceType = instanceType;\n    }\n\n    // IFactory methods\n\n    function _create(bytes memory callData) internal returns (address instance) {\n        // deploy new contract: initialize it & write minimal proxy to runtime.\n        instance = Spawner._spawn(getTemplate(), callData);\n        // add the instance to the array\n        _instances.push(instance);\n        // set instance creator\n        _instanceCreator[instance] = msg.sender;\n        // add the instance to the instance registry\n        iRegistry(getInstanceRegistry()).register(instance, msg.sender, uint64(0));\n        // emit event\n        emit InstanceCreated(instance, msg.sender, callData);\n    }\n\n    function getInstanceCreator(address instance) public view returns (address creator) {\n        creator = _instanceCreator[instance];\n    }\n\n    function getInstanceType() public view returns (bytes4 instanceType) {\n        instanceType = _instanceType;\n    }\n\n    function getInitdataABI() public view returns (string memory initdataABI) {\n        initdataABI = _initdataABI;\n    }\n\n    function getInstanceRegistry() public view returns (address instanceRegistry) {\n        instanceRegistry = _instanceRegistry;\n    }\n\n    function getTemplate() public view returns (address template) {\n        template = _templateContract;\n    }\n\n    function getInstanceCount() public view returns (uint256 count) {\n        count = _instances.length;\n    }\n\n    function getInstance(uint256 index) public view returns (address instance) {\n        require(index < _instances.length, \"index out of range\");\n        instance = _instances[index];\n    }\n\n    function getInstances() public view returns (address[] memory instances) {\n        instances = _instances;\n    }\n\n    // Note: startIndex is inclusive, endIndex exclusive\n    function getPaginatedInstances(uint256 startIndex, uint256 endIndex) public view returns (address[] memory instances) {\n        require(startIndex < endIndex, \"startIndex must be less than endIndex\");\n        require(endIndex <= _instances.length, \"end index out of range\");\n\n        // initialize fixed size memory array\n        address[] memory range = new address[](endIndex - startIndex);\n\n        // Populate array with addresses in range\n        for (uint256 i = startIndex; i < endIndex; i++) {\n            range[i - startIndex] = _instances[i];\n        }\n\n        // return array of addresses\n        instances = range;\n    }\n\n}\n\n\n\ncontract Template {\n\n    address private _factory;\n\n    // modifiers\n\n    modifier initializeTemplate() {\n        // set factory\n        _factory = msg.sender;\n\n        // only allow function to be delegatecalled from within a constructor.\n        uint32 codeSize;\n        assembly { codeSize := extcodesize(address) }\n        require(codeSize == 0, \"must be called within contract constructor\");\n        _;\n    }\n\n    // view functions\n\n    function getCreator() public view returns (address creator) {\n        // iFactory(...) would revert if _factory address is not actually a factory contract\n        creator = iFactory(_factory).getInstanceCreator(address(this));\n    }\n\n    function isCreator(address caller) public view returns (bool ok) {\n        ok = (caller == getCreator());\n    }\n\n}\n\n\n\ncontract ProofHash is MultiHashWrapper {\n\n    MultiHash private _proofHash;\n\n    event ProofHashSet(address caller, bytes proofHash);\n\n    // state functions\n\n    function _setProofHash(bytes memory proofHash) internal {\n        _proofHash = MultiHashWrapper._splitMultiHash(proofHash);\n        emit ProofHashSet(msg.sender, proofHash);\n    }\n\n    // view functions\n\n    function getProofHash() public view returns (bytes memory proofHash) {\n        proofHash = MultiHashWrapper._combineMultiHash(_proofHash);\n    }\n\n}\n\n\n\n\n\n\ncontract Post is ProofHash, Operated, Metadata, Template {\n\n    event Created(address operator, bytes proofHash, bytes staticMetadata, bytes variableMetadata);\n\n    function initialize(\n        address operator,\n        bytes memory proofHash,\n        bytes memory staticMetadata,\n        bytes memory variableMetadata\n    ) public initializeTemplate() {\n        // set storage variables\n        ProofHash._setProofHash(proofHash);\n\n        // set operator\n        if (operator != address(0)) {\n            Operated._setOperator(operator);\n            Operated._activateOperator();\n        }\n\n        // set static metadata\n        Metadata._setStaticMetadata(staticMetadata);\n\n        // set variable metadata\n        Metadata._setVariableMetadata(variableMetadata);\n\n        // emit event\n        emit Created(operator, proofHash, staticMetadata, variableMetadata);\n    }\n\n    // state functions\n\n    function setVariableMetadata(bytes memory variableMetadata) public {\n        // only active operator or creator\n        require(Template.isCreator(msg.sender) || Operated.isActiveOperator(msg.sender), \"only active operator or creator\");\n\n        // set metadata in storage\n        Metadata._setVariableMetadata(variableMetadata);\n    }\n\n}\n\n\n\n\ncontract Post_Factory is Factory {\n\n    constructor(address instanceRegistry) public {\n        // deploy template contract\n        address templateContract = address(new Post());\n        // set instance type\n        bytes4 instanceType = bytes4(keccak256(bytes('Post')));\n        // set initdataABI\n        string memory initdataABI = '(address,bytes,bytes,bytes)';\n        // initialize factory params\n        Factory._initialize(instanceRegistry, templateContract, instanceType, initdataABI);\n    }\n\n    event ExplicitInitData(address operator, bytes proofHash, bytes staticMetadata, bytes variableMetadata);\n\n    function create(bytes memory callData) public returns (address instance) {\n        // deploy instance\n        instance = Factory._create(callData);\n    }\n\n    function createEncoded(bytes memory initdata) public returns (address instance) {\n        // decode initdata\n        (\n            address operator,\n            bytes memory proofHash,\n            bytes memory staticMetadata,\n            bytes memory variableMetadata\n        ) = abi.decode(initdata, (address,bytes,bytes,bytes));\n\n        // call explicit create\n        instance = createExplicit(operator, proofHash, staticMetadata, variableMetadata);\n    }\n\n    function createExplicit(\n        address operator,\n        bytes memory proofHash,\n        bytes memory staticMetadata,\n        bytes memory variableMetadata\n    ) public returns (address instance) {\n        // declare template in memory\n        Post template;\n\n        // construct the data payload used when initializing the new contract.\n        bytes memory callData = abi.encodeWithSelector(\n            template.initialize.selector, // selector\n            operator,\n            proofHash,\n            staticMetadata,\n            variableMetadata\n        );\n\n        // deploy instance\n        instance = Factory._create(callData);\n\n        // emit event\n        emit ExplicitInitData(operator, proofHash, staticMetadata, variableMetadata);\n    }\n\n}\n\n\n\n\n\n\n\ncontract Feed is Operated, Metadata, Template {\n\n    address[] private _posts;\n    address private _postRegistry;\n\n    event PostCreated(address post, address postFactory, bytes initData);\n\n    function initialize(\n        address operator,\n        address postRegistry,\n        bytes memory feedStaticMetadata\n    ) public initializeTemplate() {\n        // set operator\n        if (operator != address(0)) {\n            Operated._setOperator(operator);\n            Operated._activateOperator();\n        }\n\n        // set post registry\n        _postRegistry = postRegistry;\n\n        // set static metadata\n        Metadata._setStaticMetadata(feedStaticMetadata);\n    }\n\n    // state functions\n\n    function createPost(address postFactory, bytes memory initData) public returns (address post) {\n        // only active operator or creator\n        require(Template.isCreator(msg.sender) || Operated.isActiveOperator(msg.sender), \"only active operator or creator\");\n\n        // validate factory is registered\n        require(\n            iRegistry(_postRegistry).getFactoryStatus(postFactory) == iRegistry.FactoryStatus.Registered,\n            \"factory is not actively registered\"\n        );\n\n        // spawn new post contract\n        post = Post_Factory(postFactory).createEncoded(initData);\n\n        // add to array of posts\n        _posts.push(post);\n\n        // emit event\n        emit PostCreated(post, postFactory, initData);\n    }\n\n    function setFeedVariableMetadata(bytes memory feedVariableMetadata) public {\n        // only active operator or creator\n        require(Template.isCreator(msg.sender) || Operated.isActiveOperator(msg.sender), \"only active operator or creator\");\n\n        Metadata._setVariableMetadata(feedVariableMetadata);\n    }\n\n    function setPostVariableMetadata(address post, bytes memory postVariableMetadata) public {\n        // only active operator or creator\n        require(Template.isCreator(msg.sender) || Operated.isActiveOperator(msg.sender), \"only active operator or creator\");\n\n        Post(post).setVariableMetadata(postVariableMetadata);\n    }\n\n    // view functions\n\n    function getPosts() public view returns (address[] memory posts) {\n        posts = _posts;\n    }\n\n    function getPostRegistry() public view returns (address postRegistry) {\n        postRegistry = _postRegistry;\n    }\n\n}\n\n\n\n\ncontract Feed_Factory is Factory {\n\n    constructor(address instanceRegistry) public {\n        // deploy template contract\n        address templateContract = address(new Feed());\n        // set instance type\n        bytes4 instanceType = bytes4(keccak256(bytes('Post')));\n        // set initdataABI\n        string memory initdataABI = '(address,address,bytes)';\n        // initialize factory params\n        Factory._initialize(instanceRegistry, templateContract, instanceType, initdataABI);\n    }\n\n    event ExplicitInitData(address operator, address postRegistry, bytes feedStaticMetadata);\n\n    function create(bytes memory callData) public returns (address instance) {\n        // deploy instance\n        instance = Factory._create(callData);\n    }\n\n    function createEncoded(bytes memory initdata) public returns (address instance) {\n        // decode initdata\n        (\n            address operator,\n            address postRegistry,\n            bytes memory feedStaticMetadata\n        ) = abi.decode(initdata, (address,address,bytes));\n\n        // call explicit create\n        instance = createExplicit(operator, postRegistry, feedStaticMetadata);\n    }\n\n    function createExplicit(\n        address operator,\n        address postRegistry,\n        bytes memory feedStaticMetadata\n    ) public returns (address instance) {\n        // declare template in memory\n        Feed template;\n\n        // construct the data payload used when initializing the new contract.\n        bytes memory callData = abi.encodeWithSelector(\n            template.initialize.selector, // selector\n            operator,\n            postRegistry,\n            feedStaticMetadata\n        );\n\n        // deploy instance\n        instance = Factory._create(callData);\n\n        // emit event\n        emit ExplicitInitData(operator, postRegistry, feedStaticMetadata);\n    }\n\n}\n","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getInstanceType\",\"outputs\":[{\"name\":\"instanceType\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTemplate\",\"outputs\":[{\"name\":\"template\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"instance\",\"type\":\"address\"}],\"name\":\"getInstanceCreator\",\"outputs\":[{\"name\":\"creator\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"initdata\",\"type\":\"bytes\"}],\"name\":\"createEncoded\",\"outputs\":[{\"name\":\"instance\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"operator\",\"type\":\"address\"},{\"name\":\"postRegistry\",\"type\":\"address\"},{\"name\":\"feedStaticMetadata\",\"type\":\"bytes\"}],\"name\":\"createExplicit\",\"outputs\":[{\"name\":\"instance\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getInstanceRegistry\",\"outputs\":[{\"name\":\"instanceRegistry\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getInitdataABI\",\"outputs\":[{\"name\":\"initdataABI\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getInstanceCount\",\"outputs\":[{\"name\":\"count\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"startIndex\",\"type\":\"uint256\"},{\"name\":\"endIndex\",\"type\":\"uint256\"}],\"name\":\"getPaginatedInstances\",\"outputs\":[{\"name\":\"instances\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"callData\",\"type\":\"bytes\"}],\"name\":\"create\",\"outputs\":[{\"name\":\"instance\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getInstances\",\"outputs\":[{\"name\":\"instances\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getInstance\",\"outputs\":[{\"name\":\"instance\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"instanceRegistry\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"postRegistry\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"feedStaticMetadata\",\"type\":\"bytes\"}],\"name\":\"ExplicitInitData\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"instance\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"callData\",\"type\":\"bytes\"}],\"name\":\"InstanceCreated\",\"type\":\"event\"}]","ContractName":"Feed_Factory","CompilerVersion":"v0.5.7+commit.6da8b019","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000f9f79cee69175b51e4ab2b2d231460b61ebb2688","Library":"","SwarmSource":"bzzr://6b8c4bb2a71aa47fe021706bb95e15d639f77f92425e35135a38cf7f6151ea9f"}]}