{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.7;\r\n\r\ninterface IERC20 {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n    function balanceOf(address who) external view returns (uint256);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n}\r\n\r\ninterface CTokenInterface {\r\n    function mint(uint mintAmount) external returns (uint); // For ERC20\r\n\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n    function allowance(address, address) external view returns (uint);\r\n    function approve(address, uint) external;\r\n    function transfer(address, uint) external returns (bool);\r\n    function transferFrom(address, address, uint) external returns (bool);\r\n}\r\n\r\ninterface KyberInterface {\r\n\r\n    function trade(\r\n        address src,\r\n        uint srcAmount,\r\n        address dest,\r\n        address destAddress,\r\n        uint maxDestAmount,\r\n        uint minConversionRate,\r\n        address walletId\r\n    ) external payable returns (uint);\r\n\r\n    function getExpectedRate(address src, address dest, uint srcQty) external view returns (uint, uint);\r\n\r\n}\r\n\r\n\r\ncontract Helper {\r\n\r\n    address public kyberProxy = 0x818E6FECD516Ecc3849DAf6845e3EC868087B755;\r\n    address public ethAddr = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n    address public daiAddr = 0x89d24A6b4CcB1B6fAA2625fE562bDD9a23260359;\r\n    address public cdaiAddr = 0xF5DCe57282A584D2746FaF1593d3121Fcac444dC;\r\n    address payable public admin = 0x372e2D6f74eFA2C5A4C72DAC4A31da09E8505995;\r\n\r\n    function setApproval(IERC20 tknContract, address to, uint srcAmt) internal returns (uint) {\r\n        uint tokenAllowance = tknContract.allowance(address(this), to);\r\n        if (srcAmt > tokenAllowance) {\r\n            tknContract.approve(to, 2**255);\r\n        }\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract BankResolver is Helper {\r\n\r\n    function swapAndLend(address src, uint srcAmt) public payable {\r\n\r\n        if (src != ethAddr) {\r\n            setApproval(IERC20(src), kyberProxy, srcAmt);\r\n            require(IERC20(src).transferFrom(msg.sender, address(this), srcAmt), \"Token-Approved?\");\r\n        }\r\n\r\n        if (src == ethAddr) {\r\n            require(msg.value != 0, \"No-Eth-To-Swap\");\r\n            KyberInterface(kyberProxy).trade.value(msg.value)(\r\n                src,\r\n                msg.value,\r\n                daiAddr,\r\n                address(this),\r\n                2**255,\r\n                0,\r\n                address(0)\r\n            );\r\n        } else if (src != daiAddr) {\r\n            require(msg.value != 0, \"No-Token-To-Swap\");\r\n            KyberInterface(kyberProxy).trade.value(0)(\r\n                src,\r\n                srcAmt,\r\n                daiAddr,\r\n                address(this),\r\n                2**255,\r\n                0,\r\n                address(0)\r\n            );\r\n        }\r\n\r\n        uint daiBal = IERC20(daiAddr).balanceOf(address(this));\r\n\r\n        require(daiBal != 0, \"No-Dai-To-Deposit\");\r\n\r\n        CTokenInterface cDaiContract = CTokenInterface(cdaiAddr);\r\n        assert(cDaiContract.mint(daiBal) == 0);\r\n\r\n        uint cdaiBal = cDaiContract.balanceOf(address(this));\r\n\r\n        require(cDaiContract.transfer(msg.sender, cdaiBal), \"Transfer-failed\");\r\n\r\n    }\r\n\r\n    function transferLockedAsset(address token) public {\r\n        if (token == ethAddr) {\r\n            admin.transfer(address(this).balance);\r\n        } else {\r\n            uint tokenBal = IERC20(token).balanceOf(address(this));\r\n            IERC20(token).transfer(admin, tokenBal);\r\n        }\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract PocketBank is BankResolver {\r\n\r\n    constructor() public {\r\n        setApproval(IERC20(daiAddr), cdaiAddr, 10**30);\r\n    }\r\n\r\n    function() external payable {}\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"src\",\"type\":\"address\"},{\"name\":\"srcAmt\",\"type\":\"uint256\"}],\"name\":\"swapAndLend\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cdaiAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"transferLockedAsset\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"daiAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kyberProxy\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"PocketBank","CompilerVersion":"v0.5.8+commit.23d335f2","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://0ca929e0d7b32d7bbed7feb47429a555fa8a719f6a3e3c5dce0963fff495316a"}]}