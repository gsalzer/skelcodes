{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.11;\r\n\r\ncontract EtherDie {\r\n    address payable owner;\r\n    uint256 public maxSendPercentage = 5;\r\n    uint256 public prizePercentage = 10;\r\n    uint256 public winPercentage = 60;\r\n    event Winnings(uint256);\r\n    bool locked;\r\n\r\n    modifier noReentrancy() {\r\n        require(!locked,\"Reentrant call\");\r\n        locked = true;\r\n        _;\r\n        locked = false;\r\n    }\r\n\r\n    constructor() public payable {\r\n        owner = msg.sender;\r\n    }\r\n\r\n     function () external payable {\r\n        // donate here\r\n    }\r\n\r\n    function send() public payable noReentrancy {\r\n        require(msg.value <= 5 ether && msg.value < address(this).balance * maxSendPercentage / 100, \"sending too much\");\r\n        if (random() < winPercentage) {\r\n            uint winnings = msg.value * prizePercentage / 100;\r\n            emit Winnings(winnings);\r\n            msg.sender.transfer(msg.value + winnings);\r\n        }\r\n    }\r\n\r\n    function withdraw(uint256 _wei) public payable {\r\n        require(owner == msg.sender,  \"cannot withdraw\");\r\n        owner.transfer(_wei);\r\n    }\r\n\r\n    function setPrizePercentage(uint256 _prizePercentage) public {\r\n        require(owner == msg.sender,  \"cannot set price percentage\");\r\n        prizePercentage = _prizePercentage;\r\n    }\r\n\r\n    function setMaxSendPercentage(uint256 _maxSendPercentage) public {\r\n        require(owner == msg.sender,  \"cannot set max send percentage\");\r\n        maxSendPercentage = _maxSendPercentage;\r\n    }\r\n\r\n    function setWinPercentage(uint256 _winPercentage) public {\r\n        require(owner == msg.sender,  \"cannot set win percentage\");\r\n        winPercentage = _winPercentage;\r\n    }\r\n\r\n    function random() private view returns(uint){\r\n        uint source = block.difficulty + now;\r\n        bytes memory source_b = toBytes(source);\r\n        return uint(keccak256(source_b)) % 100;\r\n    }\r\n\r\n    function toBytes(uint256 x) private pure returns (bytes memory b) {\r\n        b = new bytes(32);\r\n        assembly { mstore(add(b, 32), x) }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"winPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"prizePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_wei\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxSendPercentage\",\"type\":\"uint256\"}],\"name\":\"setMaxSendPercentage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_winPercentage\",\"type\":\"uint256\"}],\"name\":\"setWinPercentage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxSendPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"send\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_prizePercentage\",\"type\":\"uint256\"}],\"name\":\"setPrizePercentage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Winnings\",\"type\":\"event\"}]","ContractName":"EtherDie","CompilerVersion":"v0.5.11+commit.c082d0b4","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://4947355a8e97a625adeb103d18b30a345bac89149c56eff1dca4fcac57dbe787"}]}