{"status":"1","message":"OK","result":[{"SourceCode":"# Modified from: https://github.com/ethereum/vyper/blob/master/examples/tokens/ERC721.vy\r\n\r\ncontract ERC721Receiver:\r\n    def onERC721Received(\r\n        _operator: address,\r\n        _from: address,\r\n        _tokenId: uint256,\r\n        _data: bytes[1024]\r\n    ) -> bytes32: modifying\r\n\r\ncontract URI:\r\n    def tokenURI(_tokenId: uint256) -> string[128]: constant\r\n\r\ncontract Socks:\r\n    def totalSupply() -> uint256: constant\r\n\r\nTransfer: event({_from: indexed(address), _to: indexed(address), _tokenId: indexed(uint256)})\r\nApproval: event({_owner: indexed(address), _approved: indexed(address), _tokenId: indexed(uint256)})\r\nApprovalForAll: event({_owner: indexed(address), _operator: indexed(address), _approved: bool})\r\n\r\nname: public(string[32])\r\nsymbol: public(string[32])\r\ntotalSupply: public(uint256)\r\n\r\nminter: public(address)\r\nsocks: public(Socks)\r\nnewURI: public(address)\r\n\r\nownerOf: public(map(uint256, address))                     # map(tokenId, owner)\r\nbalanceOf: public(map(address, uint256))                   # map(owner, balance)\r\ngetApproved: public(map(uint256, address))                 # map(tokenId, approvedSpender)\r\nisApprovedForAll: public(map(address, map(address, bool))) # map(owner, map(operator, bool))\r\nsupportsInterface: public(map(bytes32, bool))              # map(interfaceId, bool)\r\nownerIndexToTokenId: map(address, map(uint256, uint256))   # map(owner, map(index, tokenId))\r\ntokenIdToIndex: map(uint256, uint256)                      # map(tokenId, index)\r\n\r\nERC165_INTERFACE_ID: constant(bytes32) = 0x0000000000000000000000000000000000000000000000000000000001ffc9a7\r\nERC721_ENUMERABLE_INTERFACE_ID: constant(bytes32) = 0x00000000000000000000000000000000000000000000000000000000780e9d63\r\nERC721_METADATA_INTERFACE_ID: constant(bytes32) = 0x000000000000000000000000000000000000000000000000000000005b5e139f\r\nERC721_INTERFACE_ID: constant(bytes32) = 0x0000000000000000000000000000000000000000000000000000000080ac58cd\r\n\r\n\r\n@public\r\ndef __init__():\r\n    self.name = 'Unisocks'\r\n    self.symbol = 'S0CKS'\r\n    self.minter = msg.sender\r\n    self.socks = Socks(0x23B608675a2B2fB1890d3ABBd85c5775c51691d5)\r\n    self.supportsInterface[ERC165_INTERFACE_ID] = True\r\n    self.supportsInterface[ERC721_ENUMERABLE_INTERFACE_ID] = True\r\n    self.supportsInterface[ERC721_METADATA_INTERFACE_ID] = True\r\n    self.supportsInterface[ERC721_INTERFACE_ID] = True\r\n\r\n\r\n@public\r\n@constant\r\ndef tokenURI(_tokenId: uint256) -> string[128]:\r\n    if (self.newURI == ZERO_ADDRESS):\r\n        return 'https://cloudflare-ipfs.com/ipfs/QmNZEeAN1zk6hLoHHREVkZ7PoPYaoH7n6LR6w9QAcEc29h'\r\n    else:\r\n        return URI(self.newURI).tokenURI(_tokenId)\r\n\r\n\r\n# Token index is same as ID and can't change\r\n@public\r\n@constant\r\ndef tokenByIndex(_index: uint256) -> uint256:\r\n    assert _index < self.totalSupply\r\n    return _index\r\n\r\n@public\r\n@constant\r\ndef tokenOfOwnerByIndex(_owner: address, _index: uint256) -> uint256:\r\n    assert _index < self.balanceOf[_owner]\r\n    return self.ownerIndexToTokenId[_owner][_index]\r\n\r\n@private\r\ndef _transferFrom(_from: address, _to: address, _tokenId: uint256, _sender: address):\r\n    _owner: address = self.ownerOf[_tokenId]\r\n    # Check requirements\r\n    assert _owner == _from and _to != ZERO_ADDRESS\r\n    _senderIsOwner: bool = _sender == _owner\r\n    _senderIsApproved: bool = _sender == self.getApproved[_tokenId]\r\n    _senderIsApprovedForAll: bool = self.isApprovedForAll[_owner][_sender]\r\n    assert _senderIsOwner or _senderIsApproved or _senderIsApprovedForAll\r\n    # Update ownerIndexToTokenId for _from\r\n    _highestIndexFrom: uint256 = self.balanceOf[_from] - 1   # get highest index of _from\r\n    _tokenIdIndexFrom: uint256 = self.tokenIdToIndex[_tokenId] # get index of _from where _tokenId is\r\n    if _highestIndexFrom == _tokenIdIndexFrom:               # _tokenId is the last token in _from's list\r\n        self.ownerIndexToTokenId[_from][_highestIndexFrom] = 0\r\n    else:\r\n        self.ownerIndexToTokenId[_from][_tokenIdIndexFrom] = self.ownerIndexToTokenId[_from][_highestIndexFrom]\r\n        self.ownerIndexToTokenId[_from][_highestIndexFrom] = 0\r\n    # Update ownerIndexToTokenId for _to\r\n    _newHighestIndexTo: uint256 = self.balanceOf[_to]\r\n    self.ownerIndexToTokenId[_to][_newHighestIndexTo] = _tokenId\r\n    # Update tokenIdToIndex\r\n    self.tokenIdToIndex[_tokenId] = _newHighestIndexTo\r\n    # update ownerOf and balanceOf\r\n    self.ownerOf[_tokenId] = _to\r\n    self.balanceOf[_from] -= 1\r\n    self.balanceOf[_to] += 1\r\n    # Clear approval.\r\n    if self.getApproved[_tokenId] != ZERO_ADDRESS:\r\n        self.getApproved[_tokenId] = ZERO_ADDRESS\r\n    log.Transfer(_from, _to, _tokenId)\r\n\r\n\r\n@public\r\ndef transferFrom(_from: address, _to: address, _tokenId: uint256):\r\n    self._transferFrom(_from, _to, _tokenId, msg.sender)\r\n\r\n\r\n@public\r\ndef safeTransferFrom(_from: address, _to: address, _tokenId: uint256, _data: bytes[1024]=\"\"):\r\n    self._transferFrom(_from, _to, _tokenId, msg.sender)\r\n    if _to.is_contract:\r\n        returnValue: bytes32 = ERC721Receiver(_to).onERC721Received(msg.sender, _from, _tokenId, _data)\r\n        # Throws if transfer destination is a contract which does not implement 'onERC721Received'\r\n        assert returnValue == method_id('onERC721Received(address,address,uint256,bytes)', bytes32)\r\n\r\n\r\n@public\r\ndef approve(_approved: address, _tokenId: uint256):\r\n    owner: address = self.ownerOf[_tokenId]\r\n    # Check requirements\r\n    senderIsOwner: bool = msg.sender == owner\r\n    senderIsApprovedForAll: bool = (self.isApprovedForAll[owner])[msg.sender]\r\n    assert senderIsOwner or senderIsApprovedForAll\r\n    # Set the approval\r\n    self.getApproved[_tokenId] = _approved\r\n    log.Approval(owner, _approved, _tokenId)\r\n\r\n\r\n@public\r\ndef setApprovalForAll(_operator: address, _approved: bool):\r\n    assert _operator != msg.sender\r\n    self.isApprovedForAll[msg.sender][_operator] = _approved\r\n    log.ApprovalForAll(msg.sender, _operator, _approved)\r\n\r\n\r\n@public\r\ndef mint(_to: address) -> bool:\r\n    assert msg.sender == self.minter and _to != ZERO_ADDRESS\r\n    _tokenId: uint256 = self.totalSupply\r\n    _toBal: uint256 = self.balanceOf[_to]\r\n    # can only mint if a sock has been burned\r\n    _socksSupply: uint256 = self.socks.totalSupply()\r\n    _socksBurned: uint256 = 500 * 10**18 - _socksSupply\r\n    assert _tokenId * 10**18 < _socksBurned\r\n    # update mappings\r\n    self.ownerOf[_tokenId] = _to\r\n    self.balanceOf[_to] += 1\r\n    self.ownerIndexToTokenId[_to][_toBal] = _tokenId\r\n    self.tokenIdToIndex[_tokenId] = _toBal\r\n    self.totalSupply += 1\r\n    log.Transfer(ZERO_ADDRESS, _to, _tokenId)\r\n    return True\r\n\r\n\r\n@public\r\ndef changeMinter(_minter: address):\r\n    assert msg.sender == self.minter\r\n    self.minter = _minter\r\n\r\n@public\r\ndef changeURI(_newURI: address):\r\n    assert msg.sender == self.minter\r\n    self.newURI = _newURI","ABI":"[{\"name\":\"Transfer\",\"inputs\":[{\"type\":\"address\",\"name\":\"_from\",\"indexed\":true},{\"type\":\"address\",\"name\":\"_to\",\"indexed\":true},{\"type\":\"uint256\",\"name\":\"_tokenId\",\"indexed\":true}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"Approval\",\"inputs\":[{\"type\":\"address\",\"name\":\"_owner\",\"indexed\":true},{\"type\":\"address\",\"name\":\"_approved\",\"indexed\":true},{\"type\":\"uint256\",\"name\":\"_tokenId\",\"indexed\":true}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"ApprovalForAll\",\"inputs\":[{\"type\":\"address\",\"name\":\"_owner\",\"indexed\":true},{\"type\":\"address\",\"name\":\"_operator\",\"indexed\":true},{\"type\":\"bool\",\"name\":\"_approved\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"outputs\":[],\"inputs\":[],\"constant\":false,\"payable\":false,\"type\":\"constructor\"},{\"name\":\"tokenURI\",\"outputs\":[{\"type\":\"string\",\"name\":\"out\"}],\"inputs\":[{\"type\":\"uint256\",\"name\":\"_tokenId\"}],\"constant\":true,\"payable\":false,\"type\":\"function\",\"gas\":22405},{\"name\":\"tokenByIndex\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"out\"}],\"inputs\":[{\"type\":\"uint256\",\"name\":\"_index\"}],\"constant\":true,\"payable\":false,\"type\":\"function\",\"gas\":631},{\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"out\"}],\"inputs\":[{\"type\":\"address\",\"name\":\"_owner\"},{\"type\":\"uint256\",\"name\":\"_index\"}],\"constant\":true,\"payable\":false,\"type\":\"function\",\"gas\":1248},{\"name\":\"transferFrom\",\"outputs\":[],\"inputs\":[{\"type\":\"address\",\"name\":\"_from\"},{\"type\":\"address\",\"name\":\"_to\"},{\"type\":\"uint256\",\"name\":\"_tokenId\"}],\"constant\":false,\"payable\":false,\"type\":\"function\",\"gas\":259486},{\"name\":\"safeTransferFrom\",\"outputs\":[],\"inputs\":[{\"type\":\"address\",\"name\":\"_from\"},{\"type\":\"address\",\"name\":\"_to\"},{\"type\":\"uint256\",\"name\":\"_tokenId\"}],\"constant\":false,\"payable\":false,\"type\":\"function\"},{\"name\":\"safeTransferFrom\",\"outputs\":[],\"inputs\":[{\"type\":\"address\",\"name\":\"_from\"},{\"type\":\"address\",\"name\":\"_to\"},{\"type\":\"uint256\",\"name\":\"_tokenId\"},{\"type\":\"bytes\",\"name\":\"_data\"}],\"constant\":false,\"payable\":false,\"type\":\"function\"},{\"name\":\"approve\",\"outputs\":[],\"inputs\":[{\"type\":\"address\",\"name\":\"_approved\"},{\"type\":\"uint256\",\"name\":\"_tokenId\"}],\"constant\":false,\"payable\":false,\"type\":\"function\",\"gas\":38422},{\"name\":\"setApprovalForAll\",\"outputs\":[],\"inputs\":[{\"type\":\"address\",\"name\":\"_operator\"},{\"type\":\"bool\",\"name\":\"_approved\"}],\"constant\":false,\"payable\":false,\"type\":\"function\",\"gas\":38016},{\"name\":\"mint\",\"outputs\":[{\"type\":\"bool\",\"name\":\"out\"}],\"inputs\":[{\"type\":\"address\",\"name\":\"_to\"}],\"constant\":false,\"payable\":false,\"type\":\"function\",\"gas\":182636},{\"name\":\"changeMinter\",\"outputs\":[],\"inputs\":[{\"type\":\"address\",\"name\":\"_minter\"}],\"constant\":false,\"payable\":false,\"type\":\"function\",\"gas\":35897},{\"name\":\"changeURI\",\"outputs\":[],\"inputs\":[{\"type\":\"address\",\"name\":\"_newURI\"}],\"constant\":false,\"payable\":false,\"type\":\"function\",\"gas\":35927},{\"name\":\"name\",\"outputs\":[{\"type\":\"string\",\"name\":\"out\"}],\"inputs\":[],\"constant\":true,\"payable\":false,\"type\":\"function\",\"gas\":6612},{\"name\":\"symbol\",\"outputs\":[{\"type\":\"string\",\"name\":\"out\"}],\"inputs\":[],\"constant\":true,\"payable\":false,\"type\":\"function\",\"gas\":6642},{\"name\":\"totalSupply\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"out\"}],\"inputs\":[],\"constant\":true,\"payable\":false,\"type\":\"function\",\"gas\":873},{\"name\":\"minter\",\"outputs\":[{\"type\":\"address\",\"name\":\"out\"}],\"inputs\":[],\"constant\":true,\"payable\":false,\"type\":\"function\",\"gas\":903},{\"name\":\"socks\",\"outputs\":[{\"type\":\"address\",\"name\":\"out\",\"unit\":\"Socks\"}],\"inputs\":[],\"constant\":true,\"payable\":false,\"type\":\"function\",\"gas\":933},{\"name\":\"newURI\",\"outputs\":[{\"type\":\"address\",\"name\":\"out\"}],\"inputs\":[],\"constant\":true,\"payable\":false,\"type\":\"function\",\"gas\":963},{\"name\":\"ownerOf\",\"outputs\":[{\"type\":\"address\",\"name\":\"out\"}],\"inputs\":[{\"type\":\"uint256\",\"name\":\"arg0\"}],\"constant\":true,\"payable\":false,\"type\":\"function\",\"gas\":1126},{\"name\":\"balanceOf\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"out\"}],\"inputs\":[{\"type\":\"address\",\"name\":\"arg0\"}],\"constant\":true,\"payable\":false,\"type\":\"function\",\"gas\":1195},{\"name\":\"getApproved\",\"outputs\":[{\"type\":\"address\",\"name\":\"out\"}],\"inputs\":[{\"type\":\"uint256\",\"name\":\"arg0\"}],\"constant\":true,\"payable\":false,\"type\":\"function\",\"gas\":1186},{\"name\":\"isApprovedForAll\",\"outputs\":[{\"type\":\"bool\",\"name\":\"out\"}],\"inputs\":[{\"type\":\"address\",\"name\":\"arg0\"},{\"type\":\"address\",\"name\":\"arg1\"}],\"constant\":true,\"payable\":false,\"type\":\"function\",\"gas\":1415},{\"name\":\"supportsInterface\",\"outputs\":[{\"type\":\"bool\",\"name\":\"out\"}],\"inputs\":[{\"type\":\"bytes32\",\"name\":\"arg0\"}],\"constant\":true,\"payable\":false,\"type\":\"function\",\"gas\":1246}]","ContractName":"Vyper_contract","CompilerVersion":"vyper:0.1.0b10","OptimizationUsed":"0","Runs":"0","ConstructorArguments":"","Library":"","LicenseType":"GNU GPLv3","SwarmSource":""}]}