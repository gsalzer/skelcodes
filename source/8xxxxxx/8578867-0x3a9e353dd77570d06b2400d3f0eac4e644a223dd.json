{"status":"1","message":"OK","result":[{"SourceCode":"interface ENS {\r\n    // Logged when the owner of a node assigns a new owner to a subnode.\r\n    event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\r\n\r\n    // Logged when the owner of a node transfers ownership to a new account.\r\n    event Transfer(bytes32 indexed node, address owner);\r\n\r\n    // Logged when the resolver for a node changes.\r\n    event NewResolver(bytes32 indexed node, address resolver);\r\n\r\n    // Logged when the TTL of a node changes\r\n    event NewTTL(bytes32 indexed node, uint64 ttl);\r\n\r\n    function setSubnodeOwner(bytes32 node, bytes32 label, address owner) external;\r\n    function setResolver(bytes32 node, address resolver) external;\r\n    function setOwner(bytes32 node, address owner) external;\r\n    function setTTL(bytes32 node, uint64 ttl) external;\r\n    function owner(bytes32 node) external view returns (address);\r\n    function resolver(bytes32 node) external view returns (address);\r\n    function ttl(bytes32 node) external view returns (uint64);\r\n}\r\n\r\ninterface Resolver{\r\n    event AddrChanged(bytes32 indexed node, address a);\r\n    event NameChanged(bytes32 indexed node, string name);\r\n    event ABIChanged(bytes32 indexed node, uint256 indexed contentType);\r\n    event PubkeyChanged(bytes32 indexed node, bytes32 x, bytes32 y);\r\n    event TextChanged(bytes32 indexed node, string indexedKey, string key);\r\n    event ContenthashChanged(bytes32 indexed node, bytes hash);\r\n    /* Deprecated events */\r\n    event ContentChanged(bytes32 indexed node, bytes32 hash);\r\n\r\n    function ABI(bytes32 node, uint256 contentTypes) external view returns (uint256, bytes memory);\r\n    function addr(bytes32 node) external view returns (address);\r\n    function contenthash(bytes32 node) external view returns (bytes memory);\r\n    function dnsrr(bytes32 node) external view returns (bytes memory);\r\n    function name(bytes32 node) external view returns (string memory);\r\n    function pubkey(bytes32 node) external view returns (bytes32 x, bytes32 y);\r\n    function text(bytes32 node, string calldata key) external view returns (string memory);\r\n    function interfaceImplementer(bytes32 node, bytes4 interfaceID) external view returns (address);\r\n\r\n    function setABI(bytes32 node, uint256 contentType, bytes calldata data) external;\r\n    function setAddr(bytes32 node, address addr) external;\r\n    function setContenthash(bytes32 node, bytes calldata hash) external;\r\n    function setDnsrr(bytes32 node, bytes calldata data) external;\r\n    function setName(bytes32 node, string calldata _name) external;\r\n    function setPubkey(bytes32 node, bytes32 x, bytes32 y) external;\r\n    function setText(bytes32 node, string calldata key, string calldata value) external;\r\n    function setInterface(bytes32 node, bytes4 interfaceID, address implementer) external;\r\n\r\n    function supportsInterface(bytes4 interfaceID) external pure returns (bool);\r\n\r\n    /* Deprecated functions */\r\n    function content(bytes32 node) external view returns (bytes32);\r\n    function multihash(bytes32 node) external view returns (bytes memory);\r\n    function setContent(bytes32 node, bytes32 hash) external;\r\n    function setMultihash(bytes32 node, bytes calldata hash) external;\r\n}\r\n\r\ncontract FIFSRegistrar {\r\n    ENS ens;\r\n    bytes32 rootNode;\r\n\r\n    modifier only_owner(bytes32 label) {\r\n        address currentOwner = ens.owner(keccak256(abi.encodePacked(rootNode, label)));\r\n        require(currentOwner == address(0x0) || currentOwner == msg.sender);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * Constructor.\r\n     * @param ensAddr The address of the ENS registry.\r\n     * @param node The node that this registrar administers.\r\n     */\r\n    constructor(ENS ensAddr, bytes32 node) public {\r\n        ens = ensAddr;\r\n        rootNode = node;\r\n    }\r\n\r\n    /**\r\n     * Register a name, or change the owner of an existing registration.\r\n     * @param label The hash of the label to register.\r\n     * @param owner The address of the new owner.\r\n     */\r\n    function register(bytes32 label, address owner) public only_owner(label) {\r\n        ens.setSubnodeOwner(rootNode, label, owner);\r\n    }\r\n}\r\n\r\ncontract RegistrationProxy\r\n{\r\n\tfunction registerENS(\r\n\t\tENS      ens,\r\n\t\tResolver resolver,\r\n\t\tbytes32  domain,\r\n\t\tbytes32  label,\r\n\t\taddress  addr)\r\n\texternal\r\n\t{\r\n\t\t// compute nodeHash\r\n\t\tbytes32 node = keccak256(abi.encode(domain, label));\r\n\t\t// get FIFSRegistrar for this domain\r\n\t\tFIFSRegistrar fifs = FIFSRegistrar(ens.owner(domain));\r\n\t\t// register new label\r\n\t\tfifs.register(label, address(this));\r\n\t\t// setup node & give ownership\r\n\t\tens.setResolver(node, address(resolver));\r\n\t\tresolver.setAddr(node, addr);\r\n\t\tens.setOwner(node, addr);\r\n\t}\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"internalType\":\"contract ENS\",\"name\":\"ens\",\"type\":\"address\"},{\"internalType\":\"contract Resolver\",\"name\":\"resolver\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"domain\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"label\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"registerENS\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"RegistrationProxy","CompilerVersion":"v0.5.11+commit.c082d0b4","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://0e6d1f11b779ff2fe317f17fed878478800340d3e3a0b54c2411d79b189a1b6e"}]}