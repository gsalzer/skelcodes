{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.1;\r\n\r\n/*********************************************************************************\r\n *********************************************************************************\r\n *\r\n * Name of the project: Token With A Message\r\n * Author: Juan Livingston \r\n * TWM\r\n *\r\n *********************************************************************************\r\n ********************************************************************************/\r\n\r\ncontract ContractReceiver {   \r\n    function tokenFallback(address _from, uint _value, bytes memory _data) public {\r\n    }\r\n}\r\n\r\n /* New ERC20 contract interface */\r\n\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) view public returns(uint256);\r\n  function transfer(address to, uint256 value) public returns(bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// The GXVC token ERC223\r\n\r\ncontract TWMToken {\r\n\r\n    // Token public variables\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals; \r\n    string public version = 'v1';\r\n    uint256 public totalSupply;\r\n    uint public price;\r\n    bool locked;\r\n\r\n    address rootAddress;\r\n    address payable Owner;\r\n    uint multiplier = 1; // For 0 decimals\r\n    address swapperAddress; // Can bypass a lock\r\n\r\n    mapping(address => uint256) balances;\r\n    mapping(address => mapping(address => uint256)) allowed;\r\n    mapping(address => bool) freezed;\r\n\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Message(string _message);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event Error(string _message);\r\n\r\n\r\n    // Modifiers\r\n\r\n    modifier onlyOwner() {\r\n        if ( msg.sender != rootAddress && msg.sender != Owner ) revert();\r\n        _;\r\n    }\r\n\r\n    modifier onlyRoot() {\r\n        if ( msg.sender != rootAddress ) revert();\r\n        _;\r\n    }\r\n\r\n    modifier isUnlocked() {\r\n    \tif ( locked && msg.sender != rootAddress && msg.sender != Owner ) revert();\r\n\t\t_;    \t\r\n    }\r\n\r\n    modifier isUnfreezed(address _to) {\r\n    \tif ( freezed[msg.sender] || freezed[_to] ) revert();\r\n    \t_;\r\n    }\r\n\r\n    modifier validate(string memory _message , uint _value) {\r\n        if ( _value < 1 ) {\r\n            emit Error(\"Send some tokens\");\r\n            return;\r\n        }\r\n        if( bytes(_message).length == 0 ) {\r\n            emit Error(\"Send your message?\");\r\n            return;\r\n        }\r\n        _;\r\n    }\r\n\r\n    // Safe math\r\n    function safeAdd(uint x, uint y) internal returns (uint z) {\r\n        require((z = x + y) >= x);\r\n    }\r\n    function safeSub(uint x, uint y) internal returns (uint z) {\r\n        require((z = x - y) <= x);\r\n    }\r\n\r\n\r\n    // TWM Token constructor\r\n    constructor() public {        \r\n        locked = false;\r\n        totalSupply = 1000000000 * multiplier; // 1,000,000 tokens\r\n        name = 'Token With A Message'; \r\n        symbol = 'TWM'; \r\n        decimals = 0; \r\n        rootAddress = msg.sender;        \r\n        Owner = msg.sender;\r\n        price = 0.001 * 10 ** 18; // 0.001 ether\r\n        balances[rootAddress] = totalSupply; \r\n        allowed[rootAddress][swapperAddress] = totalSupply;\r\n    }\r\n\r\n\r\n\t// ERC223 Access functions\r\n\r\n\r\n\r\n    // Only root function\r\n\r\n    function changeRoot(address _newrootAddress) onlyRoot public returns(bool){\r\n    \t\tallowed[rootAddress][swapperAddress] = 0; // Removes allowance to old rootAddress\r\n            rootAddress = _newrootAddress;\r\n            return true;\r\n    }\r\n\r\n\r\n    // Only owner functions\r\n\r\n    function changeOwner(address payable _newOwner) onlyOwner public returns(bool) {\r\n            Owner = _newOwner;\r\n            return true;\r\n    }\r\n\r\n    function changeSwapperAdd(address _newSwapper) onlyOwner public returns(bool) {\r\n    \t\tallowed[rootAddress][swapperAddress] = 0; // Removes allowance to old rootAddress\r\n            swapperAddress = _newSwapper;\r\n            return true;\r\n    }\r\n       \r\n    function unlock() onlyOwner public returns(bool) {\r\n        locked = false;\r\n        return true;\r\n    }\r\n\r\n    function lock() onlyOwner public returns(bool) {\r\n        locked = true;\r\n        return true;\r\n    }\r\n\r\n\r\n    function burn(uint256 _value) onlyOwner public returns(bool) {\r\n        if ( balances[msg.sender] < _value ) revert();\r\n        balances[msg.sender] = safeSub( balances[msg.sender] , _value );\r\n        totalSupply = safeSub( totalSupply,  _value );\r\n        emit Transfer(msg.sender, address(0),_value);\r\n        return true;\r\n    }\r\n\r\n// Payables\r\n\r\nfunction() payable external  {\r\n    uint tokensToSend = msg.value/price;\r\n    require(tokensToSend > 0);\r\n    uint surplus = safeSub(msg.value,tokensToSend*price);\r\n\r\n    require(balances[rootAddress] >= tokensToSend);\r\n    balances[rootAddress] = safeSub(balances[rootAddress], tokensToSend);\r\n    balances[msg.sender] = safeAdd(balances[msg.sender], tokensToSend);\r\n    emit Transfer(address(0),msg.sender,tokensToSend);\r\n    emit Message(\"Welcome!\");\r\n\r\n    if (surplus > 0) msg.sender.send(surplus);\r\n}\r\n\r\nfunction sendToken(address _token,address _to , uint _value) onlyOwner public  returns(bool) {\r\n    ERC20Basic Token = ERC20Basic(_token);\r\n    return( Token.transfer(_to, _value) );\r\n}\r\n\r\nfunction flushEth() onlyOwner public {\r\n    Owner.send(address(this).balance);\r\n}\r\n\r\n\r\nfunction getPrice() public returns(uint _price) {\r\n    return price;\r\n}\r\n\r\n    // Public getters\r\n\r\n    function isLocked() view  public returns(bool) {\r\n        return locked;\r\n    }\r\n\r\n\r\n\r\n  // Standard function transfer similar to ERC20 transfer\r\n  function transfer(address _to, uint _value, string memory _message) isUnlocked validate(_message , _value) public returns (bool success) {\r\n    if (balances[msg.sender] < _value) return false;\r\n    balances[msg.sender] = safeSub(balances[msg.sender], _value);\r\n    balances[_to] = safeAdd(balances[_to], _value);\r\n    emit Transfer(msg.sender,_to,_value);\r\n    emit Message(_message);\r\n    return true;\r\n    }\r\n\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value, string memory _message) validate(_message , _value) public returns(bool) {\r\n\r\n        if ( locked && msg.sender != swapperAddress ) return false; \r\n        if ( freezed[_from] || freezed[_to] ) return false; // Check if destination address is freezed\r\n        if ( balances[_from] < _value ) return false; // Check if the sender has enough\r\n    \tif ( _value > allowed[_from][msg.sender] ) return false; // Check allowance\r\n\r\n        balances[_from] = safeSub(balances[_from] , _value); // Subtract from the sender\r\n        balances[_to] = safeAdd(balances[_to] , _value); // Add the same to the recipient\r\n\r\n        allowed[_from][msg.sender] = safeSub( allowed[_from][msg.sender] , _value );\r\n\r\n        emit Transfer(_from,_to,_value);\r\n        emit Message(_message);\r\n        return true;\r\n    }\r\n\r\n\r\n    function balanceOf(address _owner) view public returns(uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n\r\n    function approve(address _spender, uint _value) public returns(bool) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n\r\n    function allowance(address _owner, address _spender) view public  returns(uint256) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_message\",\"type\":\"string\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"flushEth\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"sendToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newrootAddress\",\"type\":\"address\"}],\"name\":\"changeRoot\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_message\",\"type\":\"string\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newSwapper\",\"type\":\"address\"}],\"name\":\"changeSwapperAdd\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getPrice\",\"outputs\":[{\"name\":\"_price\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isLocked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unlock\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"lock\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_message\",\"type\":\"string\"}],\"name\":\"Message\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_message\",\"type\":\"string\"}],\"name\":\"Error\",\"type\":\"event\"}]","ContractName":"TWMToken","CompilerVersion":"v0.5.1+commit.c8a2cb62","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://ed8c1e68cce53f63c8a6675a036d3ac587cf02459b16f414ea189e7fcf360acc"}]}