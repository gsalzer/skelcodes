{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n * Copyright 2017-2019, bZeroX, LLC. All Rights Reserved.\r\n * Adapted from MultiSigWalletWithTimeLock.sol, Copyright 2017 ZeroEx Intl.\r\n * Licensed under the Apache License, Version 2.0.\r\n */\r\n\r\npragma solidity 0.5.3;\r\n\r\n/// @title Multisignature wallet - Allows multiple parties to agree on transactions before execution.\r\n/// @author Stefan George - <stefan.george@consensys.net>\r\ncontract MultiSigWallet {\r\n\r\n    /*\r\n     *  Events\r\n     */\r\n    event Confirmation(address indexed sender, uint256 indexed transactionId);\r\n    event Revocation(address indexed sender, uint256 indexed transactionId);\r\n    event Submission(uint256 indexed transactionId);\r\n    event Execution(uint256 indexed transactionId);\r\n    event ExecutionFailure(uint256 indexed transactionId);\r\n    event Deposit(address indexed sender, uint256 value);\r\n    event OwnerAddition(address indexed owner);\r\n    event OwnerRemoval(address indexed owner);\r\n    event RequirementChange(uint256 required);\r\n\r\n    /*\r\n     *  Constants\r\n     */\r\n    uint256 constant public MAX_OWNER_COUNT = 50;\r\n\r\n    /*\r\n     *  Storage\r\n     */\r\n    mapping (uint256 => Transaction) public transactions;\r\n    mapping (uint256 => mapping (address => bool)) public confirmations;\r\n    mapping (address => bool) public isOwner;\r\n    address[] public owners;\r\n    uint256 public required;\r\n    uint256 public transactionCount;\r\n\r\n    struct Transaction {\r\n        address destination;\r\n        uint256 value;\r\n        bytes data;\r\n        bool executed;\r\n    }\r\n\r\n    /*\r\n     *  Modifiers\r\n     */\r\n    modifier onlyWallet() {\r\n        require(msg.sender == address(this));\r\n        _;\r\n    }\r\n\r\n    modifier ownerDoesNotExist(address owner) {\r\n        require(!isOwner[owner]);\r\n        _;\r\n    }\r\n\r\n    modifier ownerExists(address owner) {\r\n        require(isOwner[owner]);\r\n        _;\r\n    }\r\n\r\n    modifier transactionExists(uint256 transactionId) {\r\n        require(transactions[transactionId].destination != address(0));\r\n        _;\r\n    }\r\n\r\n    modifier confirmed(uint256 transactionId, address owner) {\r\n        require(confirmations[transactionId][owner]);\r\n        _;\r\n    }\r\n\r\n    modifier notConfirmed(uint256 transactionId, address owner) {\r\n        require(!confirmations[transactionId][owner]);\r\n        _;\r\n    }\r\n\r\n    modifier notExecuted(uint256 transactionId) {\r\n        require(!transactions[transactionId].executed);\r\n        _;\r\n    }\r\n\r\n    modifier notNull(address _address) {\r\n        require(_address != address(0));\r\n        _;\r\n    }\r\n\r\n    modifier validRequirement(uint256 ownerCount, uint256 _required) {\r\n        require(ownerCount <= MAX_OWNER_COUNT\r\n            && _required <= ownerCount\r\n            && _required != 0\r\n            && ownerCount != 0);\r\n        _;\r\n    }\r\n\r\n    /// @dev Fallback function allows to deposit ether.\r\n    function()\r\n        external\r\n        payable\r\n    {\r\n        if (msg.value != 0)\r\n            emit Deposit(msg.sender, msg.value);\r\n    }\r\n\r\n    /*\r\n     * Public functions\r\n     */\r\n    /// @dev Contract constructor sets initial owners and required number of confirmations.\r\n    /// @param _owners List of initial owners.\r\n    /// @param _required Number of required confirmations.\r\n    constructor(address[] memory _owners, uint256 _required)\r\n        public\r\n        validRequirement(_owners.length, _required)\r\n    {\r\n        for (uint256 i=0; i < _owners.length; i++) {\r\n            require(!isOwner[_owners[i]] && _owners[i] != address(0));\r\n            isOwner[_owners[i]] = true;\r\n        }\r\n        owners = _owners;\r\n        required = _required;\r\n    }\r\n\r\n    /// @dev Allows to add a new owner. Transaction has to be sent by wallet.\r\n    /// @param owner Address of new owner.\r\n    function addOwner(address owner)\r\n        public\r\n        onlyWallet\r\n        ownerDoesNotExist(owner)\r\n        notNull(owner)\r\n        validRequirement(owners.length + 1, required)\r\n    {\r\n        isOwner[owner] = true;\r\n        owners.push(owner);\r\n        emit OwnerAddition(owner);\r\n    }\r\n\r\n    /// @dev Allows to remove an owner. Transaction has to be sent by wallet.\r\n    /// @param owner Address of owner.\r\n    function removeOwner(address owner)\r\n        public\r\n        onlyWallet\r\n        ownerExists(owner)\r\n    {\r\n        isOwner[owner] = false;\r\n        for (uint256 i=0; i<owners.length - 1; i++)\r\n            if (owners[i] == owner) {\r\n                owners[i] = owners[owners.length - 1];\r\n                break;\r\n            }\r\n        owners.length -= 1;\r\n        if (required > owners.length)\r\n            changeRequirement(owners.length);\r\n        emit OwnerRemoval(owner);\r\n    }\r\n\r\n    /// @dev Allows to replace an owner with a new owner. Transaction has to be sent by wallet.\r\n    /// @param owner Address of owner to be replaced.\r\n    /// @param newOwner Address of new owner.\r\n    function replaceOwner(address owner, address newOwner)\r\n        public\r\n        onlyWallet\r\n        ownerExists(owner)\r\n        ownerDoesNotExist(newOwner)\r\n    {\r\n        for (uint256 i=0; i<owners.length; i++)\r\n            if (owners[i] == owner) {\r\n                owners[i] = newOwner;\r\n                break;\r\n            }\r\n        isOwner[owner] = false;\r\n        isOwner[newOwner] = true;\r\n        emit OwnerRemoval(owner);\r\n        emit OwnerAddition(newOwner);\r\n    }\r\n\r\n    /// @dev Allows to change the number of required confirmations. Transaction has to be sent by wallet.\r\n    /// @param _required Number of required confirmations.\r\n    function changeRequirement(uint256 _required)\r\n        public\r\n        onlyWallet\r\n        validRequirement(owners.length, _required)\r\n    {\r\n        required = _required;\r\n        emit RequirementChange(_required);\r\n    }\r\n\r\n    /// @dev Allows an owner to submit and confirm a transaction.\r\n    /// @param destination Transaction target address.\r\n    /// @param value Transaction ether value.\r\n    /// @param data Transaction data payload.\r\n    /// @return Returns transaction ID.\r\n    function submitTransaction(address destination, uint256 value, bytes memory data)\r\n        public\r\n        returns (uint256 transactionId)\r\n    {\r\n        transactionId = addTransaction(destination, value, data);\r\n        confirmTransaction(transactionId);\r\n    }\r\n\r\n    /// @dev Allows an owner to confirm a transaction.\r\n    /// @param transactionId Transaction ID.\r\n    function confirmTransaction(uint256 transactionId)\r\n        public\r\n        ownerExists(msg.sender)\r\n        transactionExists(transactionId)\r\n        notConfirmed(transactionId, msg.sender)\r\n    {\r\n        confirmations[transactionId][msg.sender] = true;\r\n        emit Confirmation(msg.sender, transactionId);\r\n        executeTransaction(transactionId);\r\n    }\r\n\r\n    /// @dev Allows an owner to revoke a confirmation for a transaction.\r\n    /// @param transactionId Transaction ID.\r\n    function revokeConfirmation(uint256 transactionId)\r\n        public\r\n        ownerExists(msg.sender)\r\n        confirmed(transactionId, msg.sender)\r\n        notExecuted(transactionId)\r\n    {\r\n        confirmations[transactionId][msg.sender] = false;\r\n        emit Revocation(msg.sender, transactionId);\r\n    }\r\n\r\n    /// @dev Allows anyone to execute a confirmed transaction.\r\n    /// @param transactionId Transaction ID.\r\n    function executeTransaction(uint256 transactionId)\r\n        public\r\n        ownerExists(msg.sender)\r\n        confirmed(transactionId, msg.sender)\r\n        notExecuted(transactionId)\r\n    {\r\n        if (isConfirmed(transactionId)) {\r\n            Transaction storage txn = transactions[transactionId];\r\n            txn.executed = true;\r\n            if (external_call(txn.destination, txn.value, txn.data.length, txn.data))\r\n                emit Execution(transactionId);\r\n            else {\r\n                emit ExecutionFailure(transactionId);\r\n                txn.executed = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    // call has been separated into its own function in order to take advantage\r\n    // of the Solidity's code generator to produce a loop that copies tx.data into memory.\r\n    function external_call(address destination, uint256 value, uint256 dataLength, bytes memory data) internal returns (bool) {\r\n        bool result;\r\n        assembly {\r\n            let x := mload(0x40)   // \"Allocate\" memory for output (0x40 is where \"free memory\" pointer is stored by convention)\r\n            let d := add(data, 32) // First 32 bytes are the padded length of data, so exclude that\r\n            result := call(\r\n                sub(gas, 34710),   // 34710 is the value that solidity is currently emitting\r\n                                   // It includes callGas (700) + callVeryLow (3, to pay for SUB) + callValueTransferGas (9000) +\r\n                                   // callNewAccountGas (25000, in case the destination address does not exist and needs creating)\r\n                destination,\r\n                value,\r\n                d,\r\n                dataLength,        // Size of the input (in bytes) - this is what fixes the padding problem\r\n                x,\r\n                0                  // Output is ignored, therefore the output size is zero\r\n            )\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /// @dev Returns the confirmation status of a transaction.\r\n    /// @param transactionId Transaction ID.\r\n    /// @return Confirmation status.\r\n    function isConfirmed(uint256 transactionId)\r\n        public\r\n        view\r\n        returns (bool)\r\n    {\r\n        uint256 count = 0;\r\n        for (uint256 i=0; i<owners.length; i++) {\r\n            if (confirmations[transactionId][owners[i]])\r\n                count += 1;\r\n            if (count == required)\r\n                return true;\r\n        }\r\n    }\r\n\r\n    /*\r\n     * Internal functions\r\n     */\r\n    /// @dev Adds a new transaction to the transaction mapping, if transaction does not exist yet.\r\n    /// @param destination Transaction target address.\r\n    /// @param value Transaction ether value.\r\n    /// @param data Transaction data payload.\r\n    /// @return Returns transaction ID.\r\n    function addTransaction(address destination, uint256 value, bytes memory data)\r\n        internal\r\n        notNull(destination)\r\n        returns (uint256 transactionId)\r\n    {\r\n        transactionId = transactionCount;\r\n        transactions[transactionId] = Transaction({\r\n            destination: destination,\r\n            value: value,\r\n            data: data,\r\n            executed: false\r\n        });\r\n        transactionCount += 1;\r\n        emit Submission(transactionId);\r\n    }\r\n\r\n    /*\r\n     * Web3 call functions\r\n     */\r\n    /// @dev Returns number of confirmations of a transaction.\r\n    /// @param transactionId Transaction ID.\r\n    /// @return Number of confirmations.\r\n    function getConfirmationCount(uint256 transactionId)\r\n        public\r\n        view\r\n        returns (uint256 count)\r\n    {\r\n        for (uint256 i=0; i<owners.length; i++)\r\n            if (confirmations[transactionId][owners[i]])\r\n                count += 1;\r\n    }\r\n\r\n    /// @dev Returns total number of transactions after filers are applied.\r\n    /// @param pending Include pending transactions.\r\n    /// @param executed Include executed transactions.\r\n    /// @return Total number of transactions after filters are applied.\r\n    function getTransactionCount(bool pending, bool executed)\r\n        public\r\n        view\r\n        returns (uint256 count)\r\n    {\r\n        for (uint256 i=0; i<transactionCount; i++)\r\n            if (   pending && !transactions[i].executed\r\n                || executed && transactions[i].executed)\r\n                count += 1;\r\n    }\r\n\r\n    /// @dev Returns list of owners.\r\n    /// @return List of owner addresses.\r\n    function getOwners()\r\n        public\r\n        view\r\n        returns (address[] memory)\r\n    {\r\n        return owners;\r\n    }\r\n\r\n    /// @dev Returns array with owner addresses, which confirmed transaction.\r\n    /// @param transactionId Transaction ID.\r\n    /// @return Returns array of owner addresses.\r\n    function getConfirmations(uint256 transactionId)\r\n        public\r\n        view\r\n        returns (address[] memory _confirmations)\r\n    {\r\n        address[] memory confirmationsTemp = new address[](owners.length);\r\n        uint256 count = 0;\r\n        uint256 i;\r\n        for (i=0; i<owners.length; i++)\r\n            if (confirmations[transactionId][owners[i]]) {\r\n                confirmationsTemp[count] = owners[i];\r\n                count += 1;\r\n            }\r\n        _confirmations = new address[](count);\r\n        for (i=0; i<count; i++)\r\n            _confirmations[i] = confirmationsTemp[i];\r\n    }\r\n\r\n    /// @dev Returns list of transaction IDs in defined range.\r\n    /// @param from Index start position of transaction array.\r\n    /// @param to Index end position of transaction array.\r\n    /// @param pending Include pending transactions.\r\n    /// @param executed Include executed transactions.\r\n    /// @return Returns array of transaction IDs.\r\n    function getTransactionIds(uint256 from, uint256 to, bool pending, bool executed)\r\n        public\r\n        view\r\n        returns (uint256[] memory _transactionIds)\r\n    {\r\n        uint256[] memory transactionIdsTemp = new uint256[](transactionCount);\r\n        uint256 count = 0;\r\n        uint256 i;\r\n        for (i=0; i<transactionCount; i++)\r\n            if (   pending && !transactions[i].executed\r\n                || executed && transactions[i].executed)\r\n            {\r\n                transactionIdsTemp[count] = i;\r\n                count += 1;\r\n            }\r\n        _transactionIds = new uint256[](to - from);\r\n        for (i=from; i<to; i++)\r\n            _transactionIds[i - from] = transactionIdsTemp[i];\r\n    }\r\n}\r\n\r\ncontract MultiSigWalletWithCustomTimeLocks is MultiSigWallet {\r\n\r\n    event ConfirmationTimeSet(uint256 indexed transactionId, uint256 confirmationTime);\r\n    event TimeLockDefaultChange(uint256 secondsTimeLockedDefault);\r\n    event TimeLockCustomChange(string funcHeader, uint256 secondsTimeLockedCustom);\r\n    event TimeLockCustomRemove(string funcHeader);\r\n\r\n    struct CustomTimeLock {\r\n        uint256 secondsTimeLocked;\r\n        bool isSet;\r\n    }\r\n\r\n    uint256 public secondsTimeLockedDefault; // default timelock for functions without a custom setting\r\n    mapping (bytes4 => CustomTimeLock) public customTimeLocks; // mapping of function headers to CustomTimeLock structs\r\n    string[] public customTimeLockFunctions; // array of functions with custom values\r\n\r\n    mapping (uint256 => uint256) public confirmationTimes;\r\n\r\n    modifier notFullyConfirmed(uint256 transactionId) {\r\n        require(!isConfirmed(transactionId), \"is confirmed\");\r\n        _;\r\n    }\r\n\r\n    modifier fullyConfirmed(uint256 transactionId) {\r\n        require(isConfirmed(transactionId), \"not confirmed\");\r\n        _;\r\n    }\r\n\r\n    modifier passedTimeLock(uint256 transactionId) {\r\n        uint256 timelock = getSecondsTimeLockedByTx(transactionId);\r\n        require(timelock == 0 || block.timestamp >= confirmationTimes[transactionId] + timelock, \"not passed timelock\");\r\n        _;\r\n    }\r\n\r\n    /*\r\n     * Public functions\r\n     */\r\n\r\n    /// @dev Contract constructor sets initial owners, required number of confirmations, and time lock.\r\n    /// @param _owners List of initial owners.\r\n    /// @param _required Number of required confirmations.\r\n    /// @param _secondsTimeLockedDefault Default duration needed after a transaction is confirmed and before it becomes executable, in seconds.\r\n    constructor(address[] memory _owners, uint256 _required, uint256 _secondsTimeLockedDefault)\r\n        public\r\n        MultiSigWallet(_owners, _required)\r\n    {\r\n        secondsTimeLockedDefault = _secondsTimeLockedDefault;\r\n\r\n        customTimeLockFunctions.push(\"transferOwnership(address)\");\r\n        customTimeLocks[bytes4(keccak256(\"transferOwnership(address)\"))].isSet = true;\r\n        customTimeLocks[bytes4(keccak256(\"transferOwnership(address)\"))].secondsTimeLocked = 172800;\r\n\r\n        customTimeLockFunctions.push(\"transferBZxOwnership(address)\");\r\n        customTimeLocks[bytes4(keccak256(\"transferBZxOwnership(address)\"))].isSet = true;\r\n        customTimeLocks[bytes4(keccak256(\"transferBZxOwnership(address)\"))].secondsTimeLocked = 172800;\r\n\r\n        customTimeLockFunctions.push(\"setBZxAddresses(address,address,address,address,address,address,address)\");\r\n        customTimeLocks[bytes4(keccak256(\"setBZxAddresses(address,address,address,address,address,address,address)\"))].isSet = true;\r\n        customTimeLocks[bytes4(keccak256(\"setBZxAddresses(address,address,address,address,address,address,address)\"))].secondsTimeLocked = 172800;\r\n\r\n        customTimeLockFunctions.push(\"setVault(address)\");\r\n        customTimeLocks[bytes4(keccak256(\"setVault(address)\"))].isSet = true;\r\n        customTimeLocks[bytes4(keccak256(\"setVault(address)\"))].secondsTimeLocked = 172800;\r\n\r\n        customTimeLockFunctions.push(\"addOwner(address)\");\r\n        customTimeLocks[bytes4(keccak256(\"addOwner(address)\"))].isSet = true;\r\n        customTimeLocks[bytes4(keccak256(\"addOwner(address)\"))].secondsTimeLocked = 172800;\r\n\r\n        customTimeLockFunctions.push(\"removeOwner(address)\");\r\n        customTimeLocks[bytes4(keccak256(\"removeOwner(address)\"))].isSet = true;\r\n        customTimeLocks[bytes4(keccak256(\"removeOwner(address)\"))].secondsTimeLocked = 172800;\r\n\r\n        customTimeLockFunctions.push(\"replaceOwner(address,address)\");\r\n        customTimeLocks[bytes4(keccak256(\"replaceOwner(address,address)\"))].isSet = true;\r\n        customTimeLocks[bytes4(keccak256(\"replaceOwner(address,address)\"))].secondsTimeLocked = 172800;\r\n\r\n        customTimeLockFunctions.push(\"changeRequirement(uint256)\");\r\n        customTimeLocks[bytes4(keccak256(\"changeRequirement(uint256)\"))].isSet = true;\r\n        customTimeLocks[bytes4(keccak256(\"changeRequirement(uint256)\"))].secondsTimeLocked = 172800;\r\n\r\n        customTimeLockFunctions.push(\"changeDefaultTimeLock(uint256)\");\r\n        customTimeLocks[bytes4(keccak256(\"changeDefaultTimeLock(uint256)\"))].isSet = true;\r\n        customTimeLocks[bytes4(keccak256(\"changeDefaultTimeLock(uint256)\"))].secondsTimeLocked = 172800;\r\n\r\n        customTimeLockFunctions.push(\"changeCustomTimeLock(string,uint256)\");\r\n        customTimeLocks[bytes4(keccak256(\"changeCustomTimeLock(string,uint256)\"))].isSet = true;\r\n        customTimeLocks[bytes4(keccak256(\"changeCustomTimeLock(string,uint256)\"))].secondsTimeLocked = 172800;\r\n\r\n        customTimeLockFunctions.push(\"removeCustomTimeLock(string)\");\r\n        customTimeLocks[bytes4(keccak256(\"removeCustomTimeLock(string)\"))].isSet = true;\r\n        customTimeLocks[bytes4(keccak256(\"removeCustomTimeLock(string)\"))].secondsTimeLocked = 172800;\r\n\r\n        customTimeLockFunctions.push(\"toggleTargetPause(string,bool)\");\r\n        customTimeLocks[bytes4(keccak256(\"toggleTargetPause(string,bool)\"))].isSet = true;\r\n        customTimeLocks[bytes4(keccak256(\"toggleTargetPause(string,bool)\"))].secondsTimeLocked = 0;\r\n\r\n        customTimeLockFunctions.push(\"toggleMintingPause(string,bool)\");\r\n        customTimeLocks[bytes4(keccak256(\"toggleMintingPause(string,bool)\"))].isSet = true;\r\n        customTimeLocks[bytes4(keccak256(\"toggleMintingPause(string,bool)\"))].secondsTimeLocked = 0;\r\n    }\r\n\r\n    /// @dev Changes the default duration of the time lock for transactions.\r\n    /// @param _secondsTimeLockedDefault Default duration needed after a transaction is confirmed and before it becomes executable, in seconds.\r\n    function changeDefaultTimeLock(uint256 _secondsTimeLockedDefault)\r\n        public\r\n        onlyWallet\r\n    {\r\n        secondsTimeLockedDefault = _secondsTimeLockedDefault;\r\n        emit TimeLockDefaultChange(_secondsTimeLockedDefault);\r\n    }\r\n\r\n    /// @dev Changes the custom duration of the time lock for transactions to a specific function.\r\n    /// @param _funcId example: \"functionName(address[8],uint256[11],bytes,address,uint256,bytes)\"\r\n    /// @param _secondsTimeLockedCustom Custom duration needed after a transaction is confirmed and before it becomes executable, in seconds.\r\n    function changeCustomTimeLock(string memory _funcId, uint256 _secondsTimeLockedCustom)\r\n        public\r\n        onlyWallet\r\n    {\r\n        bytes4 f = bytes4(keccak256(abi.encodePacked(_funcId)));\r\n        if (!customTimeLocks[f].isSet) {\r\n            customTimeLocks[f].isSet = true;\r\n            customTimeLockFunctions.push(_funcId);\r\n        }\r\n        customTimeLocks[f].secondsTimeLocked = _secondsTimeLockedCustom;\r\n        emit TimeLockCustomChange(_funcId, _secondsTimeLockedCustom);\r\n    }\r\n\r\n    /// @dev Removes the custom duration of the time lock for transactions to a specific function.\r\n    /// @param _funcId example: \"functionName(address[8],uint256[11],bytes,address,uint256,bytes)\"\r\n    function removeCustomTimeLock(string memory _funcId)\r\n        public\r\n        onlyWallet\r\n    {\r\n        bytes4 f = bytes4(keccak256(abi.encodePacked(_funcId)));\r\n        if (!customTimeLocks[f].isSet)\r\n            revert(\"not set\");\r\n\r\n        for (uint256 i=0; i < customTimeLockFunctions.length; i++) {\r\n            if (keccak256(bytes(customTimeLockFunctions[i])) == keccak256(bytes(_funcId))) {\r\n                if (i < customTimeLockFunctions.length - 1)\r\n                    customTimeLockFunctions[i] = customTimeLockFunctions[customTimeLockFunctions.length - 1];\r\n                customTimeLockFunctions.length--;\r\n\r\n                customTimeLocks[f].secondsTimeLocked = 0;\r\n                customTimeLocks[f].isSet = false;\r\n\r\n                emit TimeLockCustomRemove(_funcId);\r\n\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @dev Allows an owner to confirm a transaction.\r\n    /// @param transactionId Transaction ID.\r\n    function confirmTransaction(uint256 transactionId)\r\n        public\r\n        ownerExists(msg.sender)\r\n        transactionExists(transactionId)\r\n        notConfirmed(transactionId, msg.sender)\r\n        notFullyConfirmed(transactionId)\r\n    {\r\n        confirmations[transactionId][msg.sender] = true;\r\n        emit Confirmation(msg.sender, transactionId);\r\n        if (getSecondsTimeLockedByTx(transactionId) > 0 && isConfirmed(transactionId)) {\r\n            setConfirmationTime(transactionId, block.timestamp);\r\n        }\r\n    }\r\n\r\n    /// @dev Allows an owner to revoke a confirmation for a transaction.\r\n    /// @param transactionId Transaction ID.\r\n    function revokeConfirmation(uint256 transactionId)\r\n        public\r\n        ownerExists(msg.sender)\r\n        confirmed(transactionId, msg.sender)\r\n        notExecuted(transactionId)\r\n        notFullyConfirmed(transactionId)\r\n    {\r\n        confirmations[transactionId][msg.sender] = false;\r\n        emit Revocation(msg.sender, transactionId);\r\n    }\r\n\r\n    /// @dev Allows anyone to execute a confirmed transaction.\r\n    /// @param transactionId Transaction ID.\r\n    function executeTransaction(uint256 transactionId)\r\n        public\r\n        notExecuted(transactionId)\r\n        fullyConfirmed(transactionId)\r\n        passedTimeLock(transactionId)\r\n    {\r\n        Transaction storage txn = transactions[transactionId];\r\n        txn.executed = true;\r\n        if (external_call(txn.destination, txn.value, txn.data.length, txn.data))\r\n            emit Execution(transactionId);\r\n        else {\r\n            emit ExecutionFailure(transactionId);\r\n            txn.executed = false;\r\n        }\r\n    }\r\n\r\n    /// @dev Returns the custom timelock for a function, or the default timelock if a custom value isn't set\r\n    /// @param _funcId Function signature (encoded bytes)\r\n    /// @return Timelock value\r\n    function getSecondsTimeLocked(bytes4 _funcId)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        if (customTimeLocks[_funcId].isSet)\r\n            return customTimeLocks[_funcId].secondsTimeLocked;\r\n        else\r\n            return secondsTimeLockedDefault;\r\n    }\r\n\r\n    /// @dev Returns the custom timelock for a function, or the default timelock if a custom value isn't set\r\n    /// @param _funcId Function signature (complete string)\r\n    /// @return Timelock value\r\n    function getSecondsTimeLockedByString(string memory _funcId)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return (getSecondsTimeLocked(bytes4(keccak256(abi.encodePacked(_funcId)))));\r\n    }\r\n\r\n    /// @dev Returns the custom timelock for a transaction, or the default timelock if a custom value isn't set\r\n    /// @param transactionId Transaction ID.\r\n    /// @return Timelock value\r\n    function getSecondsTimeLockedByTx(uint256 transactionId)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        Transaction memory txn = transactions[transactionId];\r\n        bytes memory data = txn.data;\r\n        bytes4 funcId;\r\n        assembly {\r\n            funcId := mload(add(data, 32))\r\n        }\r\n        return (getSecondsTimeLocked(funcId));\r\n    }\r\n\r\n    /// @dev Returns the number of seconds until a fully confirmed transaction can be executed\r\n    /// @param transactionId Transaction ID.\r\n    /// @return Seconds in the timelock remaining\r\n    function getTimeLockSecondsRemaining(uint256 transactionId)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint256 timelock = getSecondsTimeLockedByTx(transactionId);\r\n        if (timelock > 0 && confirmationTimes[transactionId] > 0) {\r\n            uint256 timelockEnding = confirmationTimes[transactionId] + timelock;\r\n            if (timelockEnding > block.timestamp)\r\n                return timelockEnding - block.timestamp;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    /*\r\n     * Internal functions\r\n     */\r\n\r\n    /// @dev Sets the time of when a submission first passed.\r\n    function setConfirmationTime(uint256 transactionId, uint256 confirmationTime)\r\n        internal\r\n    {\r\n        confirmationTimes[transactionId] = confirmationTime;\r\n        emit ConfirmationTimeSet(transactionId, confirmationTime);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"owners\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"removeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_funcId\",\"type\":\"string\"}],\"name\":\"getSecondsTimeLockedByString\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"revokeConfirmation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"confirmations\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"pending\",\"type\":\"bool\"},{\"name\":\"executed\",\"type\":\"bool\"}],\"name\":\"getTransactionCount\",\"outputs\":[{\"name\":\"count\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"name\":\"customTimeLocks\",\"outputs\":[{\"name\":\"secondsTimeLocked\",\"type\":\"uint256\"},{\"name\":\"isSet\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_funcId\",\"type\":\"string\"}],\"name\":\"removeCustomTimeLock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"addOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"isConfirmed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"getTimeLockSecondsRemaining\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"getConfirmationCount\",\"outputs\":[{\"name\":\"count\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_secondsTimeLockedDefault\",\"type\":\"uint256\"}],\"name\":\"changeDefaultTimeLock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transactions\",\"outputs\":[{\"name\":\"destination\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"},{\"name\":\"executed\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwners\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_funcId\",\"type\":\"string\"},{\"name\":\"_secondsTimeLockedCustom\",\"type\":\"uint256\"}],\"name\":\"changeCustomTimeLock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"from\",\"type\":\"uint256\"},{\"name\":\"to\",\"type\":\"uint256\"},{\"name\":\"pending\",\"type\":\"bool\"},{\"name\":\"executed\",\"type\":\"bool\"}],\"name\":\"getTransactionIds\",\"outputs\":[{\"name\":\"_transactionIds\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"secondsTimeLockedDefault\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"getConfirmations\",\"outputs\":[{\"name\":\"_confirmations\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transactionCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_required\",\"type\":\"uint256\"}],\"name\":\"changeRequirement\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"customTimeLockFunctions\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"confirmTransaction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"destination\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"submitTransaction\",\"outputs\":[{\"name\":\"transactionId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"confirmationTimes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_OWNER_COUNT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"required\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"replaceOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"executeTransaction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_funcId\",\"type\":\"bytes4\"}],\"name\":\"getSecondsTimeLocked\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"getSecondsTimeLockedByTx\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_owners\",\"type\":\"address[]\"},{\"name\":\"_required\",\"type\":\"uint256\"},{\"name\":\"_secondsTimeLockedDefault\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"transactionId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"confirmationTime\",\"type\":\"uint256\"}],\"name\":\"ConfirmationTimeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"secondsTimeLockedDefault\",\"type\":\"uint256\"}],\"name\":\"TimeLockDefaultChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"funcHeader\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"secondsTimeLockedCustom\",\"type\":\"uint256\"}],\"name\":\"TimeLockCustomChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"funcHeader\",\"type\":\"string\"}],\"name\":\"TimeLockCustomRemove\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"Confirmation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"Revocation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"Submission\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"Execution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"ExecutionFailure\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnerAddition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnerRemoval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"required\",\"type\":\"uint256\"}],\"name\":\"RequirementChange\",\"type\":\"event\"}]","ContractName":"MultiSigWalletWithCustomTimeLocks","CompilerVersion":"v0.5.3+commit.10d17f24","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000bd6d77cdb31c2086684aa0e2af05d525d89781100000000000000000000000001e2827a03bfa12a459a4929c5b10353b6d593df7","Library":"","LicenseType":"None","SwarmSource":"bzzr://7712cb65d075b01acdd890eb2d880c4065afca5d22c1d3b5a055ce7442687308"}]}