{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.8;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0, \"SafeMath: division by zero\");\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n}\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be aplied to your functions to restrict their use to\n * the owner.\n */\ncontract Ownable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () internal {\n        _owner = msg.sender;\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Returns true if the caller is the current owner.\n     */\n    function isOwner() public view returns (bool) {\n        return msg.sender == _owner;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * > Note: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the `nonReentrant` modifier\n * available, which can be aplied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n */\ncontract ReentrancyGuard {\n    /// @dev counter to allow mutex lock with only one SSTORE operation\n    uint256 private _guardCounter;\n\n    constructor () internal {\n        // The counter starts at one to prevent changing it from zero to a non-zero\n        // value, which is a more expensive operation.\n        _guardCounter = 1;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _guardCounter += 1;\n        uint256 localCounter = _guardCounter;\n        _;\n        require(localCounter == _guardCounter, \"ReentrancyGuard: reentrant call\");\n    }\n}\n\ninterface IMiniMeToken {\n    function balanceOf(address _owner) external view returns (uint256 balance);\n    function totalSupply() external view returns(uint);\n    function generateTokens(address _owner, uint _amount) external returns (bool);\n    function destroyTokens(address _owner, uint _amount) external returns (bool);\n    function totalSupplyAt(uint _blockNumber) external view returns(uint);\n    function balanceOfAt(address _holder, uint _blockNumber) external view returns (uint);\n    function transferOwnership(address newOwner) external;\n}\n\n/// @dev The token controller contract must implement these functions\ncontract TokenController {\n  /// @notice Called when `_owner` sends ether to the MiniMe Token contract\n  /// @param _owner The address that sent the ether to create tokens\n  /// @return True if the ether is accepted, false if it throws\n  function proxyPayment(address _owner) public payable returns(bool);\n\n  /// @notice Notifies the controller about a token transfer allowing the\n  ///  controller to react if desired\n  /// @param _from The origin of the transfer\n  /// @param _to The destination of the transfer\n  /// @param _amount The amount of the transfer\n  /// @return False if the controller does not authorize the transfer\n  function onTransfer(address _from, address _to, uint _amount) public returns(bool);\n\n  /// @notice Notifies the controller about an approval allowing the\n  ///  controller to react if desired\n  /// @param _owner The address that calls `approve()`\n  /// @param _spender The spender in the `approve()` call\n  /// @param _amount The amount in the `approve()` call\n  /// @return False if the controller does not authorize the approval\n  function onApprove(address _owner, address _spender, uint _amount) public\n    returns(bool);\n}\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n * the optional functions; to access them see `ERC20Detailed`.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a `Transfer` event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through `transferFrom`. This is\n     * zero by default.\n     *\n     * This value changes when `approve` or `transferFrom` are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * > Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an `Approval` event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a `Transfer` event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to `approve`. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @dev Optional functions from the ERC20 standard.\n */\ncontract ERC20Detailed is IERC20 {\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    /**\n     * @dev Sets the values for `name`, `symbol`, and `decimals`. All three of\n     * these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\n        _name = name;\n        _symbol = symbol;\n        _decimals = decimals;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei.\n     *\n     * > Note that this information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * `IERC20.balanceOf` and `IERC20.transfer`.\n     */\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n}\n\n/**\n * @dev Collection of functions related to the address type,\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * This test is non-exhaustive, and there may be false-negatives: during the\n     * execution of a contract's constructor, its address will be reported as\n     * not containing a contract.\n     *\n     * > It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies in extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n}\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value);\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves.\n\n        // A Solidity high level call has three parts:\n        //  1. The target address is checked to verify it contains contract code\n        //  2. The call itself is made, and success asserted\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\n        // solhint-disable-next-line max-line-length\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = address(token).call(data);\n        require(success, \"SafeERC20: low-level call failed\");\n\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n\n/**\n * @title The interface for the Kyber Network smart contract\n * @author Zefram Lou (Zebang Liu)\n */\ninterface KyberNetwork {\n  function getExpectedRate(ERC20Detailed src, ERC20Detailed dest, uint srcQty) external view\n      returns (uint expectedRate, uint slippageRate);\n\n  function tradeWithHint(\n    ERC20Detailed src, uint srcAmount, ERC20Detailed dest, address payable destAddress, uint maxDestAmount,\n    uint minConversionRate, address walletId, bytes calldata hint) external payable returns(uint);\n}\n\n/**\n * @title The smart contract for useful utility functions and constants.\n * @author Zefram Lou (Zebang Liu)\n */\ncontract Utils {\n  using SafeMath for uint256;\n  using SafeERC20 for ERC20Detailed;\n\n  /**\n   * @notice Checks if `_token` is a valid token.\n   * @param _token the token's address\n   */\n  modifier isValidToken(address _token) {\n    require(_token != address(0));\n    if (_token != address(ETH_TOKEN_ADDRESS)) {\n      require(isContract(_token));\n    }\n    _;\n  }\n\n  address public DAI_ADDR;\n  address payable public KYBER_ADDR;\n  \n  bytes public constant PERM_HINT = \"PERM\";\n\n  ERC20Detailed internal constant ETH_TOKEN_ADDRESS = ERC20Detailed(0x00eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee);\n  ERC20Detailed internal dai;\n  KyberNetwork internal kyber;\n\n  uint constant internal PRECISION = (10**18);\n  uint constant internal MAX_QTY   = (10**28); // 10B tokens\n  uint constant internal ETH_DECIMALS = 18;\n  uint constant internal MAX_DECIMALS = 18;\n\n  constructor(\n    address _daiAddr,\n    address payable _kyberAddr\n  ) public {\n    DAI_ADDR = _daiAddr;\n    KYBER_ADDR = _kyberAddr;\n\n    dai = ERC20Detailed(_daiAddr);\n    kyber = KyberNetwork(_kyberAddr);\n  }\n\n  /**\n   * @notice Get the number of decimals of a token\n   * @param _token the token to be queried\n   * @return number of decimals\n   */\n  function getDecimals(ERC20Detailed _token) internal view returns(uint256) {\n    if (address(_token) == address(ETH_TOKEN_ADDRESS)) {\n      return uint256(ETH_DECIMALS);\n    }\n    return uint256(_token.decimals());\n  }\n\n  /**\n   * @notice Get the token balance of an account\n   * @param _token the token to be queried\n   * @param _addr the account whose balance will be returned\n   * @return token balance of the account\n   */\n  function getBalance(ERC20Detailed _token, address _addr) internal view returns(uint256) {\n    if (address(_token) == address(ETH_TOKEN_ADDRESS)) {\n      return uint256(_addr.balance);\n    }\n    return uint256(_token.balanceOf(_addr));\n  }\n\n  /**\n   * @notice Calculates the rate of a trade. The rate is the price of the source token in the dest token, in 18 decimals.\n   *         Note: the rate is on the token level, not the wei level, so for example if 1 Atoken = 10 Btoken, then the rate\n   *         from A to B is 10 * 10**18, regardless of how many decimals each token uses.\n   * @param srcAmount amount of source token\n   * @param destAmount amount of dest token\n   * @param srcDecimals decimals used by source token\n   * @param dstDecimals decimals used by dest token\n   */\n  function calcRateFromQty(uint srcAmount, uint destAmount, uint srcDecimals, uint dstDecimals)\n        internal pure returns(uint)\n  {\n    require(srcAmount <= MAX_QTY);\n    require(destAmount <= MAX_QTY);\n\n    if (dstDecimals >= srcDecimals) {\n      require((dstDecimals - srcDecimals) <= MAX_DECIMALS);\n      return (destAmount * PRECISION / ((10 ** (dstDecimals - srcDecimals)) * srcAmount));\n    } else {\n      require((srcDecimals - dstDecimals) <= MAX_DECIMALS);\n      return (destAmount * PRECISION * (10 ** (srcDecimals - dstDecimals)) / srcAmount);\n    }\n  }\n\n  /**\n   * @notice Wrapper function for doing token conversion on Kyber Network\n   * @param _srcToken the token to convert from\n   * @param _srcAmount the amount of tokens to be converted\n   * @param _destToken the destination token\n   * @return _destPriceInSrc the price of the dest token, in terms of source tokens\n   *         _srcPriceInDest the price of the source token, in terms of dest tokens\n   *         _actualDestAmount actual amount of dest token traded\n   *         _actualSrcAmount actual amount of src token traded\n   */\n  function __kyberTrade(ERC20Detailed _srcToken, uint256 _srcAmount, ERC20Detailed _destToken)\n    internal\n    returns(\n      uint256 _destPriceInSrc,\n      uint256 _srcPriceInDest,\n      uint256 _actualDestAmount,\n      uint256 _actualSrcAmount\n    )\n  {\n    require(_srcToken != _destToken);\n\n    // Get current rate & ensure token is listed on Kyber\n    (, uint256 rate) = kyber.getExpectedRate(_srcToken, _destToken, _srcAmount);\n    require(rate > 0);\n\n    uint256 beforeSrcBalance = getBalance(_srcToken, address(this));\n    uint256 msgValue;\n    if (_srcToken != ETH_TOKEN_ADDRESS) {\n      msgValue = 0;\n      _srcToken.safeApprove(KYBER_ADDR, 0);\n      _srcToken.safeApprove(KYBER_ADDR, _srcAmount);\n    } else {\n      msgValue = _srcAmount;\n    }\n    _actualDestAmount = kyber.tradeWithHint.value(msgValue)(\n      _srcToken,\n      _srcAmount,\n      _destToken,\n      toPayableAddr(address(this)),\n      MAX_QTY,\n      rate,\n      0x332D87209f7c8296389C307eAe170c2440830A47,\n      PERM_HINT\n    );\n    require(_actualDestAmount > 0);\n    if (_srcToken != ETH_TOKEN_ADDRESS) {\n      _srcToken.safeApprove(KYBER_ADDR, 0);\n    }\n\n    _actualSrcAmount = beforeSrcBalance.sub(getBalance(_srcToken, address(this)));\n    _destPriceInSrc = calcRateFromQty(_actualDestAmount, _actualSrcAmount, getDecimals(_destToken), getDecimals(_srcToken));\n    _srcPriceInDest = calcRateFromQty(_actualSrcAmount, _actualDestAmount, getDecimals(_srcToken), getDecimals(_destToken));\n  }\n\n  /**\n   * @notice Checks if an Ethereum account is a smart contract\n   * @param _addr the account to be checked\n   * @return True if the account is a smart contract, false otherwise\n   */\n  function isContract(address _addr) view internal returns(bool) {\n    uint size;\n    if (_addr == address(0)) return false;\n    assembly {\n        size := extcodesize(_addr)\n    }\n    return size>0;\n  }\n\n  function toPayableAddr(address _addr) pure internal returns (address payable) {\n    return address(uint160(_addr));\n  }\n}\n\ninterface BetokenProxyInterface {\n  function betokenFundAddress() external view returns (address payable);\n  function updateBetokenFundAddress() external;\n}\n\n/**\n * @title The storage layout of BetokenFund\n * @author Zefram Lou (Zebang Liu)\n */\ncontract BetokenStorage is Ownable, ReentrancyGuard {\n  using SafeMath for uint256;\n\n  enum CyclePhase { Intermission, Manage }\n  enum VoteDirection { Empty, For, Against }\n  enum Subchunk { Propose, Vote }\n\n  struct Investment {\n    address tokenAddress;\n    uint256 cycleNumber;\n    uint256 stake;\n    uint256 tokenAmount;\n    uint256 buyPrice; // token buy price in 18 decimals in DAI\n    uint256 sellPrice; // token sell price in 18 decimals in DAI\n    uint256 buyTime;\n    uint256 buyCostInDAI;\n    bool isSold;\n  }\n\n  // Fund parameters\n  uint256 public constant COMMISSION_RATE = 20 * (10 ** 16); // The proportion of profits that gets distributed to Kairo holders every cycle.\n  uint256 public constant ASSET_FEE_RATE = 1 * (10 ** 15); // The proportion of fund balance that gets distributed to Kairo holders every cycle.\n  uint256 public constant NEXT_PHASE_REWARD = 1 * (10 ** 18); // Amount of Kairo rewarded to the user who calls nextPhase().\n  uint256 public constant MAX_BUY_KRO_PROP = 1 * (10 ** 16); // max Kairo you can buy is 1% of total supply\n  uint256 public constant FALLBACK_MAX_DONATION = 100 * (10 ** 18); // If payment cap for registration is below 100 DAI, use 100 DAI instead\n  uint256 public constant MIN_KRO_PRICE = 25 * (10 ** 17); // 1 KRO >= 2.5 DAI\n  uint256 public constant COLLATERAL_RATIO_MODIFIER = 75 * (10 ** 16); // Modifies Compound's collateral ratio, gets 2:1 ratio from current 1.5:1 ratio\n  uint256 public constant MIN_RISK_TIME = 9 days; // Mininum risk taken to get full commissions is 9 days * kairoBalance\n  uint256 public constant INACTIVE_THRESHOLD = 6; // Number of inactive cycles after which a manager's Kairo balance can be burned\n  // Upgrade constants\n  uint256 public constant CHUNK_SIZE = 3 days;\n  uint256 public constant PROPOSE_SUBCHUNK_SIZE = 1 days;\n  uint256 public constant CYCLES_TILL_MATURITY = 3;\n  uint256 public constant QUORUM = 10 * (10 ** 16); // 10% quorum\n  uint256 public constant VOTE_SUCCESS_THRESHOLD = 75 * (10 ** 16); // Votes on upgrade candidates need >75% voting weight to pass\n\n  // Instance variables\n\n  // Checks if the token listing initialization has been completed.\n  bool public hasInitializedTokenListings;\n\n  // Address of the Kairo token contract.\n  address public controlTokenAddr;\n\n  // Address of the share token contract.\n  address public shareTokenAddr;\n\n  // Address of the BetokenProxy contract.\n  address payable public proxyAddr;\n\n  // Address of the CompoundOrderFactory contract.\n  address public compoundFactoryAddr;\n\n  // Address of the BetokenLogic contract.\n  address public betokenLogic;\n\n  // Address to which the development team funding will be sent.\n  address payable public devFundingAccount;\n\n  // Address of the previous version of BetokenFund.\n  address payable public previousVersion;\n\n  // The number of the current investment cycle.\n  uint256 public cycleNumber;\n\n  // The amount of funds held by the fund.\n  uint256 public totalFundsInDAI;\n\n  // The start time for the current investment cycle phase, in seconds since Unix epoch.\n  uint256 public startTimeOfCyclePhase;\n\n  // The proportion of Betoken Shares total supply to mint and use for funding the development team. Fixed point decimal.\n  uint256 public devFundingRate;\n\n  // Total amount of commission unclaimed by managers\n  uint256 public totalCommissionLeft;\n\n  // Stores the lengths of each cycle phase in seconds.\n  uint256[2] public phaseLengths;\n\n  // The last cycle where a user redeemed all of their remaining commission.\n  mapping(address => uint256) public lastCommissionRedemption;\n\n  // Marks whether a manager has redeemed their commission for a certain cycle\n  mapping(address => mapping(uint256 => bool)) public hasRedeemedCommissionForCycle;\n\n  // The stake-time measured risk that a manager has taken in a cycle\n  mapping(address => mapping(uint256 => uint256)) public riskTakenInCycle;\n\n  // In case a manager joined the fund during the current cycle, set the fallback base stake for risk threshold calculation\n  mapping(address => uint256) public baseRiskStakeFallback;\n\n  // List of investments of a manager in the current cycle.\n  mapping(address => Investment[]) public userInvestments;\n\n  // List of short/long orders of a manager in the current cycle.\n  mapping(address => address payable[]) public userCompoundOrders;\n\n  // Total commission to be paid for work done in a certain cycle (will be redeemed in the next cycle's Intermission)\n  mapping(uint256 => uint256) public totalCommissionOfCycle;\n\n  // The block number at which the Manage phase ended for a given cycle\n  mapping(uint256 => uint256) public managePhaseEndBlock;\n\n  // The last cycle where a manager made an investment\n  mapping(address => uint256) public lastActiveCycle;\n\n  // Checks if an address points to a whitelisted Kyber token.\n  mapping(address => bool) public isKyberToken;\n\n  // Checks if an address points to a whitelisted Compound token. Returns false for cDAI and other stablecoin CompoundTokens.\n  mapping(address => bool) public isCompoundToken;\n\n  // Check if an address points to a whitelisted Fulcrum position token.\n  mapping(address => bool) public isPositionToken;\n\n  // The current cycle phase.\n  CyclePhase public cyclePhase;\n\n  // Upgrade governance related variables\n  bool public hasFinalizedNextVersion; // Denotes if the address of the next smart contract version has been finalized\n  bool public upgradeVotingActive; // Denotes if the vote for which contract to upgrade to is active\n  address payable public nextVersion; // Address of the next version of BetokenFund.\n  address[5] public proposers; // Manager who proposed the upgrade candidate in a chunk\n  address payable[5] public candidates; // Candidates for a chunk\n  uint256[5] public forVotes; // For votes for a chunk\n  uint256[5] public againstVotes; // Against votes for a chunk\n  uint256 public proposersVotingWeight; // Total voting weight of previous and current proposers. This is used for excluding the voting weight of proposers.\n  mapping(uint256 => mapping(address => VoteDirection[5])) public managerVotes; // Records each manager's vote\n  mapping(uint256 => uint256) public upgradeSignalStrength; // Denotes the amount of Kairo that's signalling in support of beginning the upgrade process during a cycle\n  mapping(uint256 => mapping(address => bool)) public upgradeSignal; // Maps manager address to whether they support initiating an upgrade\n\n  // Contract instances\n  IMiniMeToken internal cToken;\n  IMiniMeToken internal sToken;\n  BetokenProxyInterface internal proxy;\n\n  // Events\n\n  event ChangedPhase(uint256 indexed _cycleNumber, uint256 indexed _newPhase, uint256 _timestamp, uint256 _totalFundsInDAI);\n\n  event Deposit(uint256 indexed _cycleNumber, address indexed _sender, address _tokenAddress, uint256 _tokenAmount, uint256 _daiAmount, uint256 _timestamp);\n  event Withdraw(uint256 indexed _cycleNumber, address indexed _sender, address _tokenAddress, uint256 _tokenAmount, uint256 _daiAmount, uint256 _timestamp);\n\n  event CreatedInvestment(uint256 indexed _cycleNumber, address indexed _sender, uint256 _id, address _tokenAddress, uint256 _stakeInWeis, uint256 _buyPrice, uint256 _costDAIAmount, uint256 _tokenAmount);\n  event SoldInvestment(uint256 indexed _cycleNumber, address indexed _sender, uint256 _id, address _tokenAddress, uint256 _receivedKairo, uint256 _sellPrice, uint256 _earnedDAIAmount);\n\n  event CreatedCompoundOrder(uint256 indexed _cycleNumber, address indexed _sender, uint256 _id, address _order, bool _orderType, address _tokenAddress, uint256 _stakeInWeis, uint256 _costDAIAmount);\n  event SoldCompoundOrder(uint256 indexed _cycleNumber, address indexed _sender, uint256 _id, address _order,  bool _orderType, address _tokenAddress, uint256 _receivedKairo, uint256 _earnedDAIAmount);\n  event RepaidCompoundOrder(uint256 indexed _cycleNumber, address indexed _sender, uint256 _id, address _order, uint256 _repaidDAIAmount);\n\n  event CommissionPaid(uint256 indexed _cycleNumber, address indexed _sender, uint256 _commission);\n  event TotalCommissionPaid(uint256 indexed _cycleNumber, uint256 _totalCommissionInDAI);\n\n  event Register(address indexed _manager, uint256 _donationInDAI, uint256 _kairoReceived);\n  \n  event SignaledUpgrade(uint256 indexed _cycleNumber, address indexed _sender, bool indexed _inSupport);\n  event DeveloperInitiatedUpgrade(uint256 indexed _cycleNumber, address _candidate);\n  event InitiatedUpgrade(uint256 indexed _cycleNumber);\n  event ProposedCandidate(uint256 indexed _cycleNumber, uint256 indexed _voteID, address indexed _sender, address _candidate);\n  event Voted(uint256 indexed _cycleNumber, uint256 indexed _voteID, address indexed _sender, bool _inSupport, uint256 _weight);\n  event FinalizedNextVersion(uint256 indexed _cycleNumber, address _nextVersion);\n\n  /*\n  Helper functions shared by both BetokenLogic & BetokenFund\n  */\n\n  /**\n   * @notice The manage phase is divided into 9 3-day chunks. Determines which chunk the fund's in right now.\n   * @return The index of the current chunk (starts from 0). Returns 0 if not in Manage phase.\n   */\n  function currentChunk() public view returns (uint) {\n    if (cyclePhase != CyclePhase.Manage) {\n      return 0;\n    }\n    return (now - startTimeOfCyclePhase) / CHUNK_SIZE;\n  }\n\n  /**\n   * @notice There are two subchunks in each chunk: propose (1 day) and vote (2 days).\n   *         Determines which subchunk the fund is in right now.\n   * @return The Subchunk the fund is in right now\n   */\n  function currentSubchunk() public view returns (Subchunk _subchunk) {\n    if (cyclePhase != CyclePhase.Manage) {\n      return Subchunk.Vote;\n    }\n    uint256 timeIntoCurrChunk = (now - startTimeOfCyclePhase) % CHUNK_SIZE;\n    return timeIntoCurrChunk < PROPOSE_SUBCHUNK_SIZE ? Subchunk.Propose : Subchunk.Vote;\n  }\n\n  /**\n   * @notice Calculates an account's voting weight based on their Kairo balance\n   *         3 cycles ago\n   * @param _of the account to be queried\n   * @return The account's voting weight\n   */\n  function getVotingWeight(address _of) public view returns (uint256 _weight) {\n    if (cycleNumber <= CYCLES_TILL_MATURITY || _of == address(0)) {\n      return 0;\n    }\n    return cToken.balanceOfAt(_of, managePhaseEndBlock[cycleNumber.sub(CYCLES_TILL_MATURITY)]);\n  }\n\n  /**\n   * @notice Calculates the total voting weight based on the total Kairo supply\n   *         3 cycles ago. The weights of proposers are deducted.\n   * @return The total voting weight right now\n   */\n  function getTotalVotingWeight() public view returns (uint256 _weight) {\n    if (cycleNumber <= CYCLES_TILL_MATURITY) {\n      return 0;\n    }\n    return cToken.totalSupplyAt(managePhaseEndBlock[cycleNumber.sub(CYCLES_TILL_MATURITY)]).sub(proposersVotingWeight);\n  }\n\n  /**\n   * @notice Calculates the current price of Kairo. The price is equal to the amount of DAI each Kairo\n   *         can control, and it's kept above MIN_KRO_PRICE.\n   * @return Kairo's current price\n   */\n  function kairoPrice() public view returns (uint256 _kairoPrice) {\n    if (cToken.totalSupply() == 0) { return MIN_KRO_PRICE; }\n    uint256 controlPerKairo = totalFundsInDAI.mul(10 ** 18).div(cToken.totalSupply());\n    if (controlPerKairo < MIN_KRO_PRICE) {\n      // keep price above minimum price\n      return MIN_KRO_PRICE;\n    }\n    return controlPerKairo;\n  }\n}\n\n// Fulcrum position token\ninterface PositionToken {\n  function mintWithToken(\n    address receiver,\n    address depositTokenAddress,\n    uint256 depositAmount,\n    uint256 maxPriceAllowed)\n    external\n    returns (uint256);\n\n  function burnToToken(\n    address receiver,\n    address burnTokenAddress,\n    uint256 burnAmount,\n    uint256 minPriceAllowed)\n    external\n    returns (uint256);\n\n  function tokenPrice()\n   external\n   view\n   returns (uint256 price);\n\n  function liquidationPrice()\n   external\n   view\n   returns (uint256 price);\n\n  function currentLeverage()\n    external\n    view\n    returns (uint256 leverage);\n\n  function decimals()\n    external\n    view\n    returns (uint8);\n\n  function balanceOf(address account)\n    external\n    view\n    returns (uint256);\n}\n\n// Compound finance comptroller\ninterface Comptroller {\n    function enterMarkets(address[] calldata cTokens) external returns (uint[] memory);\n    function markets(address cToken) external view returns (bool isListed, uint256 collateralFactorMantissa);\n}\n\n// Compound finance's price oracle\ninterface PriceOracle {\n  function getPrice(address asset) external view returns (uint);\n}\n\n// Compound finance ERC20 market interface\ninterface CERC20 {\n  function mint(uint mintAmount) external returns (uint);\n  function redeemUnderlying(uint redeemAmount) external returns (uint);\n  function borrow(uint borrowAmount) external returns (uint);\n  function repayBorrow(uint repayAmount) external returns (uint);\n  function borrowBalanceCurrent(address account) external returns (uint);\n  function exchangeRateCurrent() external returns (uint);\n\n  function balanceOf(address account) external view returns (uint);\n  function decimals() external view returns (uint);\n  function underlying() external view returns (address);\n}\n\ncontract CompoundOrderStorage is Ownable {\n  // Constants\n  uint256 internal constant NEGLIGIBLE_DEBT = 10 ** 14; // we don't care about debts below 10^-4 DAI (0.1 cent)\n  uint256 internal constant MAX_REPAY_STEPS = 3; // Max number of times we attempt to repay remaining debt\n\n  // Contract instances\n  Comptroller public COMPTROLLER; // The Compound comptroller\n  PriceOracle public ORACLE; // The Compound price oracle\n  CERC20 public CDAI; // The Compound DAI market token\n  address public CETH_ADDR;\n\n  // Instance variables\n  uint256 public stake;\n  uint256 public collateralAmountInDAI;\n  uint256 public loanAmountInDAI;\n  uint256 public cycleNumber;\n  uint256 public buyTime; // Timestamp for order execution\n  uint256 public outputAmount; // Records the total output DAI after order is sold\n  address public compoundTokenAddr;\n  bool public isSold;\n  bool public orderType; // True for shorting, false for longing\n\n  // The contract containing the code to be executed\n  address public logicContract;\n}\n\ncontract CompoundOrder is CompoundOrderStorage, Utils {\n  constructor(\n    address _compoundTokenAddr,\n    uint256 _cycleNumber,\n    uint256 _stake,\n    uint256 _collateralAmountInDAI,\n    uint256 _loanAmountInDAI,\n    bool _orderType,\n    address _logicContract,\n    address _daiAddr,\n    address payable _kyberAddr,\n    address _comptrollerAddr,\n    address _priceOracleAddr,\n    address _cDAIAddr,\n    address _cETHAddr\n  ) public Utils(_daiAddr, _kyberAddr)  {\n    // Initialize details of short order\n    require(_compoundTokenAddr != _cDAIAddr);\n    require(_stake > 0 && _collateralAmountInDAI > 0 && _loanAmountInDAI > 0); // Validate inputs\n    stake = _stake;\n    collateralAmountInDAI = _collateralAmountInDAI;\n    loanAmountInDAI = _loanAmountInDAI;\n    cycleNumber = _cycleNumber;\n    compoundTokenAddr = _compoundTokenAddr;\n    orderType = _orderType;\n    logicContract = _logicContract;\n\n    COMPTROLLER = Comptroller(_comptrollerAddr);\n    ORACLE = PriceOracle(_priceOracleAddr);\n    CDAI = CERC20(_cDAIAddr);\n    CETH_ADDR = _cETHAddr;\n  }\n  \n  /**\n   * @notice Executes the Compound order\n   * @param _minPrice the minimum token price\n   * @param _maxPrice the maximum token price\n   */\n  function executeOrder(uint256 _minPrice, uint256 _maxPrice) public {\n    (bool success,) = logicContract.delegatecall(abi.encodeWithSelector(this.executeOrder.selector, _minPrice, _maxPrice));\n    if (!success) { revert(); }\n  }\n\n  /**\n   * @notice Sells the Compound order and returns assets to BetokenFund\n   * @param _minPrice the minimum token price\n   * @param _maxPrice the maximum token price\n   */\n  function sellOrder(uint256 _minPrice, uint256 _maxPrice) public returns (uint256 _inputAmount, uint256 _outputAmount) {\n    (bool success, bytes memory result) = logicContract.delegatecall(abi.encodeWithSelector(this.sellOrder.selector, _minPrice, _maxPrice));\n    if (!success) { revert(); }\n    return abi.decode(result, (uint256, uint256));\n  }\n\n  /**\n   * @notice Repays the loans taken out to prevent the collateral ratio from dropping below threshold\n   * @param _repayAmountInDAI the amount to repay, in DAI\n   */\n  function repayLoan(uint256 _repayAmountInDAI) public {\n    (bool success,) = logicContract.delegatecall(abi.encodeWithSelector(this.repayLoan.selector, _repayAmountInDAI));\n    if (!success) { revert(); }\n  }\n\n  /**\n   * @notice Calculates the current liquidity (supply - collateral) on the Compound platform\n   * @return the liquidity\n   */\n  function getCurrentLiquidityInDAI() public returns (bool _isNegative, uint256 _amount) {\n    (bool success, bytes memory result) = logicContract.delegatecall(abi.encodeWithSelector(this.getCurrentLiquidityInDAI.selector));\n    if (!success) { revert(); }\n    return abi.decode(result, (bool, uint256));\n  }\n\n  /**\n   * @notice Calculates the current collateral ratio on Compound, using 18 decimals\n   * @return the collateral ratio\n   */\n  function getCurrentCollateralRatioInDAI() public returns (uint256 _amount) {\n    (bool success, bytes memory result) = logicContract.delegatecall(abi.encodeWithSelector(this.getCurrentCollateralRatioInDAI.selector));\n    if (!success) { revert(); }\n    return abi.decode(result, (uint256));\n  }\n\n  /**\n   * @notice Calculates the current profit in DAI\n   * @return the profit amount\n   */\n  function getCurrentProfitInDAI() public returns (bool _isNegative, uint256 _amount) {\n    (bool success, bytes memory result) = logicContract.delegatecall(abi.encodeWithSelector(this.getCurrentProfitInDAI.selector));\n    if (!success) { revert(); }\n    return abi.decode(result, (bool, uint256));\n  }\n\n  function getMarketCollateralFactor() public returns (uint256) {\n    (bool success, bytes memory result) = logicContract.delegatecall(abi.encodeWithSelector(this.getMarketCollateralFactor.selector));\n    if (!success) { revert(); }\n    return abi.decode(result, (uint256));\n  }\n\n  function getCurrentCollateralInDAI() public returns (uint256 _amount) {\n    (bool success, bytes memory result) = logicContract.delegatecall(abi.encodeWithSelector(this.getCurrentCollateralInDAI.selector));\n    if (!success) { revert(); }\n    return abi.decode(result, (uint256));\n  }\n\n  function getCurrentBorrowInDAI() public returns (uint256 _amount) {\n    (bool success, bytes memory result) = logicContract.delegatecall(abi.encodeWithSelector(this.getCurrentBorrowInDAI.selector));\n    if (!success) { revert(); }\n    return abi.decode(result, (uint256));\n  }\n\n  function getCurrentCashInDAI() public returns (uint256 _amount) {\n    (bool success, bytes memory result) = logicContract.delegatecall(abi.encodeWithSelector(this.getCurrentCashInDAI.selector));\n    if (!success) { revert(); }\n    return abi.decode(result, (uint256));\n  }\n\n  function() external payable {}\n}\n\ncontract CompoundOrderFactory {\n  address public SHORT_CERC20_LOGIC_CONTRACT;\n  address public SHORT_CEther_LOGIC_CONTRACT;\n  address public LONG_CERC20_LOGIC_CONTRACT;\n  address public LONG_CEther_LOGIC_CONTRACT;\n\n  address public DAI_ADDR;\n  address payable public KYBER_ADDR;\n  address public COMPTROLLER_ADDR;\n  address public ORACLE_ADDR;\n  address public CDAI_ADDR;\n  address public CETH_ADDR;\n\n  constructor(\n    address _shortCERC20LogicContract,\n    address _shortCEtherLogicContract,\n    address _longCERC20LogicContract,\n    address _longCEtherLogicContract,\n    address _daiAddr,\n    address payable _kyberAddr,\n    address _comptrollerAddr,\n    address _priceOracleAddr,\n    address _cDAIAddr,\n    address _cETHAddr\n  ) public {\n    SHORT_CERC20_LOGIC_CONTRACT = _shortCERC20LogicContract;\n    SHORT_CEther_LOGIC_CONTRACT = _shortCEtherLogicContract;\n    LONG_CERC20_LOGIC_CONTRACT = _longCERC20LogicContract;\n    LONG_CEther_LOGIC_CONTRACT = _longCEtherLogicContract;\n\n    DAI_ADDR = _daiAddr;\n    KYBER_ADDR = _kyberAddr;\n    COMPTROLLER_ADDR = _comptrollerAddr;\n    ORACLE_ADDR = _priceOracleAddr;\n    CDAI_ADDR = _cDAIAddr;\n    CETH_ADDR = _cETHAddr;\n  }\n\n  function createOrder(\n    address _compoundTokenAddr,\n    uint256 _cycleNumber,\n    uint256 _stake,\n    uint256 _collateralAmountInDAI,\n    uint256 _loanAmountInDAI,\n    bool _orderType\n  ) public returns (CompoundOrder) {\n    require(_compoundTokenAddr != address(0));\n\n    CompoundOrder order;\n    address logicContract;\n\n    if (_compoundTokenAddr != CETH_ADDR) {\n      logicContract = _orderType ? SHORT_CERC20_LOGIC_CONTRACT : LONG_CERC20_LOGIC_CONTRACT;\n    } else {\n      logicContract = _orderType ? SHORT_CEther_LOGIC_CONTRACT : LONG_CEther_LOGIC_CONTRACT;\n    }\n    order = new CompoundOrder(_compoundTokenAddr, _cycleNumber, _stake, _collateralAmountInDAI, _loanAmountInDAI, _orderType, logicContract, DAI_ADDR, KYBER_ADDR, COMPTROLLER_ADDR, ORACLE_ADDR, CDAI_ADDR, CETH_ADDR);\n    order.transferOwnership(msg.sender);\n    return order;\n  }\n\n  function getMarketCollateralFactor(address _compoundTokenAddr) public view returns (uint256) {\n    Comptroller troll = Comptroller(COMPTROLLER_ADDR);\n    (, uint256 factor) = troll.markets(_compoundTokenAddr);\n    return factor;\n  }\n}\n\n/**\n * @title Part of the functions for BetokenFund\n * @author Zefram Lou (Zebang Liu)\n */\ncontract BetokenLogic is BetokenStorage, Utils(address(0), address(0)) {\n  /**\n   * Upgrading functions\n   */\n\n  /**\n   * @notice Allows the developer to propose a candidate smart contract for the fund to upgrade to.\n   *          The developer may change the candidate during the Intermission phase.\n   * @param _candidate the address of the candidate smart contract\n   * @return True if successfully changed candidate, false otherwise.\n   */\n  function developerInitiateUpgrade(address payable _candidate) public returns (bool _success) {\n    if (_candidate == address(0) || _candidate == address(this) || !__isMature()) {\n      return false;\n    }\n    nextVersion = _candidate;\n    upgradeVotingActive = true;\n    emit DeveloperInitiatedUpgrade(cycleNumber, _candidate);\n    return true;\n  }\n\n  /**\n   * @notice Allows a manager to signal their support of initiating an upgrade. They can change their signal before the end of the Intermission phase.\n   *          Managers who oppose initiating an upgrade don't need to call this function, unless they origianlly signalled in support.\n   *          Signals are reset every cycle.\n   * @param _inSupport True if the manager supports initiating upgrade, false if the manager opposes it.\n   * @return True if successfully changed signal, false if no changes were made.\n   */\n  function signalUpgrade(bool _inSupport) public returns (bool _success) {\n    if (!__isMature()) {\n      return false;\n    }\n\n    if (upgradeSignal[cycleNumber][msg.sender] == false) {\n      if (_inSupport == true) {\n        upgradeSignal[cycleNumber][msg.sender] = true;\n        upgradeSignalStrength[cycleNumber] = upgradeSignalStrength[cycleNumber].add(getVotingWeight(msg.sender));\n      } else {\n        return false;\n      }\n    } else {\n      if (_inSupport == false) {\n        upgradeSignal[cycleNumber][msg.sender] = false;\n        upgradeSignalStrength[cycleNumber] = upgradeSignalStrength[cycleNumber].sub(getVotingWeight(msg.sender));\n      } else {\n        return false;\n      }\n    }\n    emit SignaledUpgrade(cycleNumber, msg.sender, _inSupport);\n    return true;\n  }\n\n  /**\n   * @notice Allows manager to propose a candidate smart contract for the fund to upgrade to. Among the managers who have proposed a candidate,\n   *          the manager with the most voting weight's candidate will be used in the vote. Ties are broken in favor of the larger address.\n   *          The proposer may change the candidate they support during the Propose subchunk in their chunk.\n   * @param _chunkNumber the chunk for which the sender is proposing the candidate\n   * @param _candidate the address of the candidate smart contract\n   * @return True if successfully proposed/changed candidate, false otherwise.\n   */\n  function proposeCandidate(uint256 _chunkNumber, address payable _candidate) public returns (bool _success) {\n    // Input & state check\n    if (!__isValidChunk(_chunkNumber) || currentChunk() != _chunkNumber || currentSubchunk() != Subchunk.Propose ||\n      upgradeVotingActive == false || _candidate == address(0) || msg.sender == address(0) || !__isMature()) {\n      return false;\n    }\n\n    // Ensure msg.sender has not been a proposer before\n    // Ensure candidate hasn't been proposed in previous vote\n    uint256 voteID = _chunkNumber.sub(1);\n    uint256 i;\n    for (i = 0; i < voteID; i = i.add(1)) {\n      if (proposers[i] == msg.sender || candidates[i] == _candidate) {\n        return false;\n      }\n    }\n\n    // Ensure msg.sender has more voting weight than current proposer\n    uint256 senderWeight = getVotingWeight(msg.sender);\n    uint256 currProposerWeight = getVotingWeight(proposers[voteID]);\n    if (senderWeight > currProposerWeight || (senderWeight == currProposerWeight && msg.sender > proposers[voteID]) || msg.sender == proposers[voteID]) {\n      proposers[voteID] = msg.sender;\n      candidates[voteID] = _candidate;\n      proposersVotingWeight = proposersVotingWeight.add(senderWeight).sub(currProposerWeight);\n      emit ProposedCandidate(cycleNumber, voteID, msg.sender, _candidate);\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * @notice Allows a manager to vote for or against a candidate smart contract the fund will upgrade to. The manager may change their vote during\n   *          the Vote subchunk. A manager who has been a proposer may not vote.\n   * @param _inSupport True if the manager supports initiating upgrade, false if the manager opposes it.\n   * @return True if successfully changed vote, false otherwise.\n   */\n  function voteOnCandidate(uint256 _chunkNumber, bool _inSupport) public returns (bool _success) {\n    // Input & state check\n    if (!__isValidChunk(_chunkNumber) || currentChunk() != _chunkNumber || currentSubchunk() != Subchunk.Vote || upgradeVotingActive == false || !__isMature()) {\n      return false;\n    }\n\n    // Ensure msg.sender has not been a proposer before\n    uint256 voteID = _chunkNumber.sub(1);\n    uint256 i;\n    for (i = 0; i < voteID; i = i.add(1)) {\n      if (proposers[i] == msg.sender) {\n        return false;\n      }\n    }\n\n    // Register vote\n    VoteDirection currVote = managerVotes[cycleNumber][msg.sender][voteID];\n    uint256 votingWeight = getVotingWeight(msg.sender);\n    if ((currVote == VoteDirection.Empty || currVote == VoteDirection.Against) && _inSupport) {\n      managerVotes[cycleNumber][msg.sender][voteID] = VoteDirection.For;\n      forVotes[voteID] = forVotes[voteID].add(votingWeight);\n      if (currVote == VoteDirection.Against) {\n        againstVotes[voteID] = againstVotes[voteID].sub(votingWeight);\n      }\n    } else if ((currVote == VoteDirection.Empty || currVote == VoteDirection.For) && !_inSupport) {\n      managerVotes[cycleNumber][msg.sender][voteID] = VoteDirection.Against;\n      againstVotes[voteID] = againstVotes[voteID].add(votingWeight);\n      if (currVote == VoteDirection.For) {\n        forVotes[voteID] = forVotes[voteID].sub(votingWeight);\n      }\n    }\n    emit Voted(cycleNumber, voteID, msg.sender, _inSupport, votingWeight);\n    return true;\n  }\n\n  /**\n   * @notice Performs the necessary state changes after a successful vote\n   * @param _chunkNumber the chunk number of the successful vote\n   * @return True if successful, false otherwise\n   */\n  function finalizeSuccessfulVote(uint256 _chunkNumber) public returns (bool _success) {\n    // Input & state check\n    if (!__isValidChunk(_chunkNumber) || !__isMature()) {\n      return false;\n    }\n\n    // Ensure the given vote was successful\n    if (__voteSuccessful(_chunkNumber) == false) {\n      return false;\n    }\n\n    // Ensure the chunk given has ended\n    if (_chunkNumber >= currentChunk()) {\n      return false;\n    }\n\n    // Ensure no previous vote was successful\n    for (uint256 i = 1; i < _chunkNumber; i = i.add(1)) {\n      if (__voteSuccessful(i)) {\n        return false;\n      }\n    }\n\n    // End voting process\n    upgradeVotingActive = false;\n    nextVersion = candidates[_chunkNumber.sub(1)];\n    hasFinalizedNextVersion = true;\n    return true;\n  }\n\n  /**\n   * @notice Checks if the fund is mature enough for initiating an upgrade\n   * @return True if mature enough, false otherwise\n   */\n  function __isMature() internal view returns (bool) {\n    return cycleNumber > CYCLES_TILL_MATURITY;\n  }\n\n  /**\n   * @notice Checks if a chunk number is valid\n   * @param _chunkNumber the chunk number to be checked\n   * @return True if valid, false otherwise\n   */\n  function __isValidChunk(uint256 _chunkNumber) internal pure returns (bool) {\n    return _chunkNumber >= 1 && _chunkNumber <= 5;\n  }\n\n  /**\n   * @notice Checks if a vote was successful\n   * @param _chunkNumber the chunk number of the vote\n   * @return True if successful, false otherwise\n   */\n  function __voteSuccessful(uint256 _chunkNumber) internal view returns (bool _success) {\n    if (!__isValidChunk(_chunkNumber)) {\n      return false;\n    }\n    uint256 voteID = _chunkNumber.sub(1);\n    return forVotes[voteID].mul(PRECISION).div(forVotes[voteID].add(againstVotes[voteID])) > VOTE_SUCCESS_THRESHOLD\n      && forVotes[voteID].add(againstVotes[voteID]) > getTotalVotingWeight().mul(QUORUM).div(PRECISION);\n  }\n\n\n  /**\n   * Next phase transition handler\n   * @notice Moves the fund to the next phase in the investment cycle.\n   */\n  function nextPhase()\n    public\n  {\n    require(now >= startTimeOfCyclePhase.add(phaseLengths[uint(cyclePhase)]));\n\n    if (cycleNumber == 0) {\n      require(msg.sender == owner());\n    }\n\n    if (cyclePhase == CyclePhase.Intermission) {\n      require(hasFinalizedNextVersion == false); // Shouldn't progress to next phase if upgrading\n\n      // Check if there is enough signal supporting upgrade\n      if (upgradeSignalStrength[cycleNumber] > getTotalVotingWeight().div(2)) {\n        upgradeVotingActive = true;\n        emit InitiatedUpgrade(cycleNumber);\n      }\n    } else if (cyclePhase == CyclePhase.Manage) {\n      // Burn any Kairo left in BetokenFund's account\n      require(cToken.destroyTokens(address(this), cToken.balanceOf(address(this))));\n\n      // Pay out commissions and fees\n      uint256 profit = 0;\n      if (getBalance(dai, address(this)) > totalFundsInDAI.add(totalCommissionLeft)) {\n        profit = getBalance(dai, address(this)).sub(totalFundsInDAI).sub(totalCommissionLeft);\n      }\n      uint256 commissionThisCycle = COMMISSION_RATE.mul(profit).add(ASSET_FEE_RATE.mul(getBalance(dai, address(this)))).div(PRECISION);\n      totalCommissionOfCycle[cycleNumber] = totalCommissionOfCycle[cycleNumber].add(commissionThisCycle); // account for penalties\n      totalCommissionLeft = totalCommissionLeft.add(commissionThisCycle);\n\n      totalFundsInDAI = getBalance(dai, address(this)).sub(totalCommissionLeft);\n\n      // Give the developer Betoken shares inflation funding\n      uint256 devFunding = devFundingRate.mul(sToken.totalSupply()).div(PRECISION);\n      require(sToken.generateTokens(devFundingAccount, devFunding));\n\n      // Emit event\n      emit TotalCommissionPaid(cycleNumber, totalCommissionOfCycle[cycleNumber]);\n\n      managePhaseEndBlock[cycleNumber] = block.number;\n\n      // Clear/update upgrade related data\n      if (nextVersion == address(this)) {\n        // The developer proposed a candidate, but the managers decide to not upgrade at all\n        // Reset upgrade process\n        delete nextVersion;\n        delete hasFinalizedNextVersion;\n      }\n      if (nextVersion == address(0)) {\n        delete proposers;\n        delete candidates;\n        delete forVotes;\n        delete againstVotes;\n        delete upgradeVotingActive;\n        delete proposersVotingWeight;\n      } else {\n        hasFinalizedNextVersion = true;\n        emit FinalizedNextVersion(cycleNumber, nextVersion);\n      }\n\n      // Start new cycle\n      cycleNumber = cycleNumber.add(1);\n    }\n\n    cyclePhase = CyclePhase(addmod(uint(cyclePhase), 1, 2));\n    startTimeOfCyclePhase = now;\n\n    // Reward caller if they're a manager\n    if (cToken.balanceOf(msg.sender) > 0) {\n      require(cToken.generateTokens(msg.sender, NEXT_PHASE_REWARD));\n    }\n\n    emit ChangedPhase(cycleNumber, uint(cyclePhase), now, totalFundsInDAI);\n  }\n\n\n  /**\n   * Manager registration\n   */\n  \n  /**\n   * @notice Calculates the max amount a new manager can pay for an account. Equivalent to 1% of Kairo total supply.\n   *         If less than 100 DAI, returns 100 DAI.\n   * @return the max DAI amount for purchasing a manager account\n   */\n  function maxRegistrationPaymentInDAI() public view returns (uint256 _maxDonationInDAI) {\n    uint256 kroPrice = kairoPrice();\n    _maxDonationInDAI = MAX_BUY_KRO_PROP.mul(cToken.totalSupply()).div(PRECISION).mul(kroPrice).div(PRECISION);\n    if (_maxDonationInDAI < FALLBACK_MAX_DONATION) {\n      _maxDonationInDAI = FALLBACK_MAX_DONATION;\n    }\n  }\n\n  /**\n   * @notice Registers `msg.sender` as a manager, using DAI as payment. The more one pays, the more Kairo one gets.\n   *         There's a max Kairo amount that can be bought, and excess payment will be sent back to sender.\n   * @param _donationInDAI the amount of DAI to be used for registration\n   */\n  function registerWithDAI(uint256 _donationInDAI) public {\n    dai.safeTransferFrom(msg.sender, address(this), _donationInDAI);\n\n    // if DAI value is greater than maximum allowed, return excess DAI to msg.sender\n    uint256 maxDonationInDAI = maxRegistrationPaymentInDAI();\n    if (_donationInDAI > maxDonationInDAI) {\n      dai.safeTransfer(msg.sender, _donationInDAI.sub(maxDonationInDAI));\n      _donationInDAI = maxDonationInDAI;\n    }\n\n    __register(_donationInDAI);\n  }\n\n  /**\n   * @notice Registers `msg.sender` as a manager, using ETH as payment. The more one pays, the more Kairo one gets.\n   *         There's a max Kairo amount that can be bought, and excess payment will be sent back to sender.\n   */\n  function registerWithETH() public payable {\n    uint256 receivedDAI;\n\n    // trade ETH for DAI\n    (,,receivedDAI,) = __kyberTrade(ETH_TOKEN_ADDRESS, msg.value, dai);\n    \n    // if DAI value is greater than maximum allowed, return excess DAI to msg.sender\n    uint256 maxDonationInDAI = maxRegistrationPaymentInDAI();\n    if (receivedDAI > maxDonationInDAI) {\n      dai.safeTransfer(msg.sender, receivedDAI.sub(maxDonationInDAI));\n      receivedDAI = maxDonationInDAI;\n    }\n\n    // register new manager\n    __register(receivedDAI);\n  }\n\n  /**\n   * @notice Registers `msg.sender` as a manager, using tokens as payment. The more one pays, the more Kairo one gets.\n   *         There's a max Kairo amount that can be bought, and excess payment will be sent back to sender.\n   * @param _token the token to be used for payment\n   * @param _donationInTokens the amount of tokens to be used for registration, should use the token's native decimals\n   */\n  function registerWithToken(address _token, uint256 _donationInTokens) public {\n    require(_token != address(0) && _token != address(ETH_TOKEN_ADDRESS) && _token != DAI_ADDR);\n    ERC20Detailed token = ERC20Detailed(_token);\n    require(token.totalSupply() > 0);\n\n    token.safeTransferFrom(msg.sender, address(this), _donationInTokens);\n\n    uint256 receivedDAI;\n\n    (,,receivedDAI,) = __kyberTrade(token, _donationInTokens, dai);\n\n    // if DAI value is greater than maximum allowed, return excess DAI to msg.sender\n    uint256 maxDonationInDAI = maxRegistrationPaymentInDAI();\n    if (receivedDAI > maxDonationInDAI) {\n      dai.safeTransfer(msg.sender, receivedDAI.sub(maxDonationInDAI));\n      receivedDAI = maxDonationInDAI;\n    }\n\n    // register new manager\n    __register(receivedDAI);\n  }\n\n  /**\n   * @notice Registers `msg.sender` as a manager.\n   * @param _donationInDAI the amount of DAI to be used for registration\n   */\n  function __register(uint256 _donationInDAI) internal {\n    require(cToken.balanceOf(msg.sender) == 0 && userInvestments[msg.sender].length == 0 && userCompoundOrders[msg.sender].length == 0); // each address can only join once\n\n    // mint KRO for msg.sender\n    uint256 kroAmount = _donationInDAI.mul(PRECISION).div(kairoPrice());\n    require(cToken.generateTokens(msg.sender, kroAmount));\n\n    // Set risk fallback base stake\n    baseRiskStakeFallback[msg.sender] = kroAmount;\n\n    if (cyclePhase == CyclePhase.Intermission) {\n      // transfer DAI to devFundingAccount\n      dai.safeTransfer(devFundingAccount, _donationInDAI);\n    } else {\n      // keep DAI in the fund\n      totalFundsInDAI = totalFundsInDAI.add(_donationInDAI);\n    }\n    \n    // emit events\n    emit Register(msg.sender, _donationInDAI, kroAmount);\n  }\n\n  /**\n   * @notice Returns the length of the user's investments array.\n   * @return length of the user's investments array\n   */\n  function investmentsCount(address _userAddr) public view returns(uint256 _count) {\n    return userInvestments[_userAddr].length;\n  }\n\n  /**\n   * @notice Creates a new investment for an ERC20 token.\n   * @param _tokenAddress address of the ERC20 token contract\n   * @param _stake amount of Kairos to be staked in support of the investment\n   * @param _minPrice the minimum price for the trade\n   * @param _maxPrice the maximum price for the trade\n   */\n  function createInvestment(\n    address _tokenAddress,\n    uint256 _stake,\n    uint256 _minPrice,\n    uint256 _maxPrice\n  )\n    public\n  {\n    require(_minPrice <= _maxPrice);\n    require(_stake > 0);\n    require(isKyberToken[_tokenAddress] || isPositionToken[_tokenAddress]);\n\n    // Collect stake\n    require(cToken.generateTokens(address(this), _stake));\n    require(cToken.destroyTokens(msg.sender, _stake));\n\n    // Add investment to list\n    userInvestments[msg.sender].push(Investment({\n      tokenAddress: _tokenAddress,\n      cycleNumber: cycleNumber,\n      stake: _stake,\n      tokenAmount: 0,\n      buyPrice: 0,\n      sellPrice: 0,\n      buyTime: now,\n      buyCostInDAI: 0,\n      isSold: false\n    }));\n\n    // Invest\n    uint256 investmentId = investmentsCount(msg.sender).sub(1);\n    (, uint256 actualSrcAmount) = __handleInvestment(investmentId, _minPrice, _maxPrice, true);\n\n    // Update last active cycle\n    lastActiveCycle[msg.sender] = cycleNumber;\n\n    // Emit event\n    emit CreatedInvestment(cycleNumber, msg.sender, investmentId, _tokenAddress, _stake, userInvestments[msg.sender][investmentId].buyPrice, actualSrcAmount, userInvestments[msg.sender][investmentId].tokenAmount);\n  }\n\n  /**\n   * @notice Called by user to sell the assets an investment invested in. Returns the staked Kairo plus rewards/penalties to the user.\n   *         The user can sell only part of the investment by changing _tokenAmount.\n   * @dev When selling only part of an investment, the old investment would be \"fully\" sold and a new investment would be created with\n   *   the original buy price and however much tokens that are not sold.\n   * @param _investmentId the ID of the investment\n   * @param _tokenAmount the amount of tokens to be sold.\n   * @param _minPrice the minimum price for the trade\n   * @param _maxPrice the maximum price for the trade\n   */\n  function sellInvestmentAsset(\n    uint256 _investmentId,\n    uint256 _tokenAmount,\n    uint256 _minPrice,\n    uint256 _maxPrice\n  )\n    public\n  {\n    Investment storage investment = userInvestments[msg.sender][_investmentId];\n    require(investment.buyPrice > 0 && investment.cycleNumber == cycleNumber && !investment.isSold);\n    require(_tokenAmount > 0 && _tokenAmount <= investment.tokenAmount);\n    require(_minPrice <= _maxPrice);\n\n    // Create new investment for leftover tokens\n    bool isPartialSell = false;\n    uint256 stakeOfSoldTokens = investment.stake.mul(_tokenAmount).div(investment.tokenAmount);\n    if (_tokenAmount != investment.tokenAmount) {\n      isPartialSell = true;\n\n      // calculate the part of original DAI cost attributed to the sold tokens\n      uint256 soldBuyCostInDAI = investment.buyCostInDAI.mul(_tokenAmount).div(investment.tokenAmount);\n\n      userInvestments[msg.sender].push(Investment({\n        tokenAddress: investment.tokenAddress,\n        cycleNumber: cycleNumber,\n        stake: investment.stake.sub(stakeOfSoldTokens),\n        tokenAmount: investment.tokenAmount.sub(_tokenAmount),\n        buyPrice: investment.buyPrice,\n        sellPrice: 0,\n        buyTime: investment.buyTime,\n        buyCostInDAI: investment.buyCostInDAI.sub(soldBuyCostInDAI),\n        isSold: false\n      }));\n\n      // update the investment object being sold\n      investment.tokenAmount = _tokenAmount;\n      investment.stake = stakeOfSoldTokens;\n      investment.buyCostInDAI = soldBuyCostInDAI;\n    }\n    \n    // Update investment info\n    investment.isSold = true;\n\n    // Sell asset\n    (uint256 actualDestAmount, uint256 actualSrcAmount) = __handleInvestment(_investmentId, _minPrice, _maxPrice, false);\n    if (isPartialSell) {\n      // If only part of _tokenAmount was successfully sold, put the unsold tokens in the new investment\n      userInvestments[msg.sender][investmentsCount(msg.sender).sub(1)].tokenAmount = userInvestments[msg.sender][investmentsCount(msg.sender).sub(1)].tokenAmount.add(_tokenAmount.sub(actualSrcAmount));\n    }\n\n    // Return staked Kairo\n    uint256 receiveKairoAmount = stakeOfSoldTokens.mul(investment.sellPrice).div(investment.buyPrice);\n    __returnStake(receiveKairoAmount, stakeOfSoldTokens);\n\n    // Record risk taken in investment\n    __recordRisk(investment.stake, investment.buyTime);\n\n    // Update total funds\n    totalFundsInDAI = totalFundsInDAI.sub(investment.buyCostInDAI).add(actualDestAmount);\n    \n    // Emit event\n    if (isPartialSell) {\n      Investment storage newInvestment = userInvestments[msg.sender][investmentsCount(msg.sender).sub(1)];\n      emit CreatedInvestment(\n        cycleNumber, msg.sender, investmentsCount(msg.sender).sub(1),\n        newInvestment.tokenAddress, newInvestment.stake, newInvestment.buyPrice,\n        newInvestment.buyCostInDAI, newInvestment.tokenAmount);\n    }\n    emit SoldInvestment(cycleNumber, msg.sender, _investmentId, investment.tokenAddress, receiveKairoAmount, investment.sellPrice, actualDestAmount);\n  }\n\n  /**\n   * @notice Creates a new Compound order to either short or leverage long a token.\n   * @param _orderType true for a short order, false for a levarage long order\n   * @param _tokenAddress address of the Compound token to be traded\n   * @param _stake amount of Kairos to be staked\n   * @param _minPrice the minimum token price for the trade\n   * @param _maxPrice the maximum token price for the trade\n   */\n  function createCompoundOrder(\n    bool _orderType,\n    address _tokenAddress,\n    uint256 _stake,\n    uint256 _minPrice,\n    uint256 _maxPrice\n  )\n    public\n  {\n    require(_minPrice <= _maxPrice);\n    require(_stake > 0);\n    require(isCompoundToken[_tokenAddress]);\n\n    // Collect stake\n    require(cToken.generateTokens(address(this), _stake));\n    require(cToken.destroyTokens(msg.sender, _stake));\n\n    // Create compound order and execute\n    uint256 collateralAmountInDAI = totalFundsInDAI.mul(_stake).div(cToken.totalSupply());\n    CompoundOrder order = __createCompoundOrder(_orderType, _tokenAddress, _stake, collateralAmountInDAI);\n    dai.safeApprove(address(order), 0);\n    dai.safeApprove(address(order), collateralAmountInDAI);\n    order.executeOrder(_minPrice, _maxPrice);\n\n    // Add order to list\n    userCompoundOrders[msg.sender].push(address(order));\n\n    // Update last active cycle\n    lastActiveCycle[msg.sender] = cycleNumber;\n\n    // Emit event\n    emit CreatedCompoundOrder(cycleNumber, msg.sender, userCompoundOrders[msg.sender].length - 1, address(order), _orderType, _tokenAddress, _stake, collateralAmountInDAI);\n  }\n\n  /**\n   * @notice Sells a compound order\n   * @param _orderId the ID of the order to be sold (index in userCompoundOrders[msg.sender])\n   * @param _minPrice the minimum token price for the trade\n   * @param _maxPrice the maximum token price for the trade\n   */\n  function sellCompoundOrder(\n    uint256 _orderId,\n    uint256 _minPrice,\n    uint256 _maxPrice\n  )\n    public\n  {\n    // Load order info\n    require(userCompoundOrders[msg.sender][_orderId] != address(0));\n    CompoundOrder order = CompoundOrder(userCompoundOrders[msg.sender][_orderId]);\n    require(order.isSold() == false && order.cycleNumber() == cycleNumber);\n\n    // Sell order\n    (uint256 inputAmount, uint256 outputAmount) = order.sellOrder(_minPrice, _maxPrice);\n\n    // Return staked Kairo\n    uint256 stake = order.stake();\n    uint256 receiveKairoAmount = order.stake().mul(outputAmount).div(inputAmount);\n    __returnStake(receiveKairoAmount, stake);\n\n    // Record risk taken\n    __recordRisk(stake, order.buyTime());\n\n    // Update total funds\n    totalFundsInDAI = totalFundsInDAI.sub(inputAmount).add(outputAmount);\n\n    // Emit event\n    emit SoldCompoundOrder(cycleNumber, msg.sender, userCompoundOrders[msg.sender].length - 1, address(order), order.orderType(), order.compoundTokenAddr(), receiveKairoAmount, outputAmount);\n  }\n\n  /**\n   * @notice Repys debt for a Compound order to prevent the collateral ratio from dropping below threshold.\n   * @param _orderId the ID of the Compound order\n   * @param _repayAmountInDAI amount of DAI to use for repaying debt\n   */\n  function repayCompoundOrder(uint256 _orderId, uint256 _repayAmountInDAI) public {\n    // Load order info\n    require(userCompoundOrders[msg.sender][_orderId] != address(0));\n    CompoundOrder order = CompoundOrder(userCompoundOrders[msg.sender][_orderId]);\n    require(order.isSold() == false && order.cycleNumber() == cycleNumber);\n\n    // Repay loan\n    order.repayLoan(_repayAmountInDAI);\n\n    // Emit event\n    emit RepaidCompoundOrder(cycleNumber, msg.sender, userCompoundOrders[msg.sender].length - 1, address(order), _repayAmountInDAI);\n  }\n\n  /**\n   * @notice Handles and investment by doing the necessary trades using __kyberTrade() or Fulcrum trading\n   * @param _investmentId the ID of the investment to be handled\n   * @param _minPrice the minimum price for the trade\n   * @param _maxPrice the maximum price for the trade\n   * @param _buy whether to buy or sell the given investment\n   */\n  function __handleInvestment(uint256 _investmentId, uint256 _minPrice, uint256 _maxPrice, bool _buy)\n    public\n    returns (uint256 _actualDestAmount, uint256 _actualSrcAmount)\n  {\n    Investment storage investment = userInvestments[msg.sender][_investmentId];\n    address token = investment.tokenAddress;\n    if (isPositionToken[token]) {\n      // Fulcrum trading\n      PositionToken pToken = PositionToken(token);\n      uint256 beforeBalance;\n      if (_buy) {\n        _actualSrcAmount = totalFundsInDAI.mul(investment.stake).div(cToken.totalSupply());\n        dai.safeApprove(token, 0);\n        dai.safeApprove(token, _actualSrcAmount);\n        beforeBalance = pToken.balanceOf(address(this));\n        pToken.mintWithToken(address(this), DAI_ADDR, _actualSrcAmount, 0);\n        _actualDestAmount = pToken.balanceOf(address(this)).sub(beforeBalance);\n        require(_actualDestAmount > 0);\n        dai.safeApprove(token, 0);\n\n        investment.buyPrice = calcRateFromQty(_actualDestAmount, _actualSrcAmount, pToken.decimals(), dai.decimals()); // price of pToken in DAI\n        require(_minPrice <= investment.buyPrice && investment.buyPrice <= _maxPrice);\n\n        investment.tokenAmount = _actualDestAmount;\n        investment.buyCostInDAI = _actualSrcAmount;\n      } else {\n        _actualSrcAmount = investment.tokenAmount;\n        beforeBalance = dai.balanceOf(address(this));\n        pToken.burnToToken(address(this), DAI_ADDR, _actualSrcAmount, 0);\n        _actualDestAmount = dai.balanceOf(address(this)).sub(beforeBalance);\n\n        investment.sellPrice = calcRateFromQty(_actualSrcAmount, _actualDestAmount, dai.decimals(), pToken.decimals()); // price of pToken in DAI\n        require(_minPrice <= investment.sellPrice && investment.sellPrice <= _maxPrice);\n      }\n    } else {\n      // Kyber trading\n      uint256 dInS; // price of dest token denominated in src token\n      uint256 sInD; // price of src token denominated in dest token\n      if (_buy) {\n        (dInS, sInD, _actualDestAmount, _actualSrcAmount) = __kyberTrade(dai, totalFundsInDAI.mul(investment.stake).div(cToken.totalSupply()), ERC20Detailed(token));\n        require(_minPrice <= dInS && dInS <= _maxPrice);\n        investment.buyPrice = dInS;\n        investment.tokenAmount = _actualDestAmount;\n        investment.buyCostInDAI = _actualSrcAmount;\n      } else {\n        (dInS, sInD, _actualDestAmount, _actualSrcAmount) = __kyberTrade(ERC20Detailed(token), investment.tokenAmount, dai);\n        require(_minPrice <= sInD && sInD <= _maxPrice);\n        investment.sellPrice = sInD;\n      }\n    }\n  }\n\n  /**\n   * @notice Separated from createCompoundOrder() to avoid stack too deep error\n   */\n  function __createCompoundOrder(\n    bool _orderType, // True for shorting, false for longing\n    address _tokenAddress,\n    uint256 _stake,\n    uint256 _collateralAmountInDAI\n  ) internal returns (CompoundOrder) {\n    CompoundOrderFactory factory = CompoundOrderFactory(compoundFactoryAddr);\n    uint256 loanAmountInDAI = _collateralAmountInDAI.mul(COLLATERAL_RATIO_MODIFIER).div(PRECISION).mul(factory.getMarketCollateralFactor(_tokenAddress)).div(PRECISION);\n    CompoundOrder order = factory.createOrder(\n      _tokenAddress,\n      cycleNumber,\n      _stake,\n      _collateralAmountInDAI,\n      loanAmountInDAI,\n      _orderType\n    );\n    return order;\n  }\n\n  /**\n   * @notice Returns stake to manager after investment is sold, including reward/penalty based on performance\n   */\n  function __returnStake(uint256 _receiveKairoAmount, uint256 _stake) internal {\n    require(cToken.destroyTokens(address(this), _stake));\n    require(cToken.generateTokens(msg.sender, _receiveKairoAmount));\n  }\n\n  /**\n   * @notice Records risk taken in a trade based on stake and time of investment\n   */\n  function __recordRisk(uint256 _stake, uint256 _buyTime) internal {\n    riskTakenInCycle[msg.sender][cycleNumber] = riskTakenInCycle[msg.sender][cycleNumber].add(_stake.mul(now.sub(_buyTime)));\n  }\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"nextVersion\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_orderId\",\"type\":\"uint256\"},{\"name\":\"_repayAmountInDAI\",\"type\":\"uint256\"}],\"name\":\"repayCompoundOrder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_inSupport\",\"type\":\"bool\"}],\"name\":\"signalUpgrade\",\"outputs\":[{\"name\":\"_success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalFundsInDAI\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isKyberToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"devFundingRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"COMMISSION_RATE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_orderId\",\"type\":\"uint256\"},{\"name\":\"_minPrice\",\"type\":\"uint256\"},{\"name\":\"_maxPrice\",\"type\":\"uint256\"}],\"name\":\"sellCompoundOrder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_orderType\",\"type\":\"bool\"},{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_stake\",\"type\":\"uint256\"},{\"name\":\"_minPrice\",\"type\":\"uint256\"},{\"name\":\"_maxPrice\",\"type\":\"uint256\"}],\"name\":\"createCompoundOrder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTimeOfCyclePhase\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isCompoundToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalVotingWeight\",\"outputs\":[{\"name\":\"_weight\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"betokenLogic\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_stake\",\"type\":\"uint256\"},{\"name\":\"_minPrice\",\"type\":\"uint256\"},{\"name\":\"_maxPrice\",\"type\":\"uint256\"}],\"name\":\"createInvestment\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"upgradeSignal\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_donationInTokens\",\"type\":\"uint256\"}],\"name\":\"registerWithToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"QUORUM\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cycleNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_BUY_KRO_PROP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"candidates\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_chunkNumber\",\"type\":\"uint256\"},{\"name\":\"_inSupport\",\"type\":\"bool\"}],\"name\":\"voteOnCandidate\",\"outputs\":[{\"name\":\"_success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"nextPhase\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_candidate\",\"type\":\"address\"}],\"name\":\"developerInitiateUpgrade\",\"outputs\":[{\"name\":\"_success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userCompoundOrders\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_donationInDAI\",\"type\":\"uint256\"}],\"name\":\"registerWithDAI\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CYCLES_TILL_MATURITY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MIN_RISK_TIME\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"phaseLengths\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"baseRiskStakeFallback\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"againstVotes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasFinalizedNextVersion\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proposers\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"proposersVotingWeight\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"COLLATERAL_RATIO_MODIFIER\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_userAddr\",\"type\":\"address\"}],\"name\":\"investmentsCount\",\"outputs\":[{\"name\":\"_count\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_investmentId\",\"type\":\"uint256\"},{\"name\":\"_tokenAmount\",\"type\":\"uint256\"},{\"name\":\"_minPrice\",\"type\":\"uint256\"},{\"name\":\"_maxPrice\",\"type\":\"uint256\"}],\"name\":\"sellInvestmentAsset\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totalCommissionOfCycle\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastCommissionRedemption\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PROPOSE_SUBCHUNK_SIZE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PERM_HINT\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kairoPrice\",\"outputs\":[{\"name\":\"_kairoPrice\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userInvestments\",\"outputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"cycleNumber\",\"type\":\"uint256\"},{\"name\":\"stake\",\"type\":\"uint256\"},{\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"name\":\"buyPrice\",\"type\":\"uint256\"},{\"name\":\"sellPrice\",\"type\":\"uint256\"},{\"name\":\"buyTime\",\"type\":\"uint256\"},{\"name\":\"buyCostInDAI\",\"type\":\"uint256\"},{\"name\":\"isSold\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"upgradeSignalStrength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isPositionToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_investmentId\",\"type\":\"uint256\"},{\"name\":\"_minPrice\",\"type\":\"uint256\"},{\"name\":\"_maxPrice\",\"type\":\"uint256\"},{\"name\":\"_buy\",\"type\":\"bool\"}],\"name\":\"__handleInvestment\",\"outputs\":[{\"name\":\"_actualDestAmount\",\"type\":\"uint256\"},{\"name\":\"_actualSrcAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"compoundFactoryAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_chunkNumber\",\"type\":\"uint256\"},{\"name\":\"_candidate\",\"type\":\"address\"}],\"name\":\"proposeCandidate\",\"outputs\":[{\"name\":\"_success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentSubchunk\",\"outputs\":[{\"name\":\"_subchunk\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"proxyAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"NEXT_PHASE_REWARD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"managePhaseEndBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalCommissionLeft\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ASSET_FEE_RATE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MIN_KRO_PRICE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INACTIVE_THRESHOLD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasInitializedTokenListings\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"riskTakenInCycle\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"registerWithETH\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"KYBER_ADDR\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FALLBACK_MAX_DONATION\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"hasRedeemedCommissionForCycle\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_chunkNumber\",\"type\":\"uint256\"}],\"name\":\"finalizeSuccessfulVote\",\"outputs\":[{\"name\":\"_success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_of\",\"type\":\"address\"}],\"name\":\"getVotingWeight\",\"outputs\":[{\"name\":\"_weight\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"shareTokenAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DAI_ADDR\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"previousVersion\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"upgradeVotingActive\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"controlTokenAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CHUNK_SIZE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"forVotes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentChunk\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"managerVotes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxRegistrationPaymentInDAI\",\"outputs\":[{\"name\":\"_maxDonationInDAI\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"VOTE_SUCCESS_THRESHOLD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cyclePhase\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastActiveCycle\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"devFundingAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_cycleNumber\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_newPhase\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_totalFundsInDAI\",\"type\":\"uint256\"}],\"name\":\"ChangedPhase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_cycleNumber\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_daiAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_cycleNumber\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_daiAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_cycleNumber\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_stakeInWeis\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_buyPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_costDAIAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"CreatedInvestment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_cycleNumber\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_receivedKairo\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_sellPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_earnedDAIAmount\",\"type\":\"uint256\"}],\"name\":\"SoldInvestment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_cycleNumber\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_order\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_orderType\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_stakeInWeis\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_costDAIAmount\",\"type\":\"uint256\"}],\"name\":\"CreatedCompoundOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_cycleNumber\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_order\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_orderType\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_receivedKairo\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_earnedDAIAmount\",\"type\":\"uint256\"}],\"name\":\"SoldCompoundOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_cycleNumber\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_order\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_repaidDAIAmount\",\"type\":\"uint256\"}],\"name\":\"RepaidCompoundOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_cycleNumber\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_commission\",\"type\":\"uint256\"}],\"name\":\"CommissionPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_cycleNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_totalCommissionInDAI\",\"type\":\"uint256\"}],\"name\":\"TotalCommissionPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_manager\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_donationInDAI\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_kairoReceived\",\"type\":\"uint256\"}],\"name\":\"Register\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_cycleNumber\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_inSupport\",\"type\":\"bool\"}],\"name\":\"SignaledUpgrade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_cycleNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_candidate\",\"type\":\"address\"}],\"name\":\"DeveloperInitiatedUpgrade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_cycleNumber\",\"type\":\"uint256\"}],\"name\":\"InitiatedUpgrade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_cycleNumber\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_voteID\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_candidate\",\"type\":\"address\"}],\"name\":\"ProposedCandidate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_cycleNumber\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_voteID\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_inSupport\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"_weight\",\"type\":\"uint256\"}],\"name\":\"Voted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_cycleNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_nextVersion\",\"type\":\"address\"}],\"name\":\"FinalizedNextVersion\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"BetokenLogic","CompilerVersion":"v0.5.8+commit.23d335f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://3b37533ea60cae8f1ef11cbd630579eeb8910ce80eb27bc0660127d1312ce6c1"}]}