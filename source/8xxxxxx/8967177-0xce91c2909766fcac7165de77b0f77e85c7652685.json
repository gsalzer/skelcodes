{"status":"1","message":"OK","result":[{"SourceCode":"{\"AddressUtils.sol\":{\"content\":\"pragma solidity \\u003e=0.4.23 \\u003c0.6.0;\\r\\n\\r\\n/**\\r\\n * Utility library of inline functions on addresses\\r\\n */\\r\\nlibrary AddressUtils {\\r\\n/**\\r\\n   * Returns whether the target address is a contract\\r\\n   * @dev This function will return false if invoked during the constructor of a contract,\\r\\n   * as the code is not actually created until after the constructor finishes.\\r\\n   * @param addr address to check\\r\\n   * @return whether the target address is a contract\\r\\n   */\\r\\nfunction isContract(address addr) internal view returns (bool) {\\r\\n    uint256 size;\\r\\n    // XXX Currently there is no better way to check if there is a       \\r\\n    // contract in an address\\r\\n    // than to check the size of the code at that address.\\r\\n    // See https://ethereum.stackexchange.com/a/14016/36603\\r\\n    // for more details about how this works.\\r\\n    // TODO Check this again before the Serenity release, because\\r\\n    // all addresses will be\\r\\n    // contracts then.\\r\\n    // solium-disable-next-line security/no-inline-assembly\\r\\n    \\r\\n    assembly { size := extcodesize(addr) }\\r\\n    return size \\u003e 0;\\r\\n  }\\r\\n}\\r\\n\"},\"safemath.sol\":{\"content\":\"pragma solidity \\u003e=0.4.17 \\u003c0.6.0;\\r\\n\\r\\n\\r\\n/**\\r\\n * @title SafeMath\\r\\n * @dev Math operations with safety checks that throw on error\\r\\n */\\r\\nlibrary SafeMath {\\r\\n\\r\\n /**\\r\\n * @dev Multiplies two numbers, throws on overflow.\\r\\n */\\r\\n function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n  if (a == 0) {\\r\\n   return 0;\\r\\n  }\\r\\n  uint256 c = a * b;\\r\\n  assert(c / a == b);\\r\\n  return c;\\r\\n }\\r\\n\\r\\n /**\\r\\n * @dev Integer division of two numbers, truncating the quotient.\\r\\n */\\r\\n function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n  // assert(b \\u003e 0); // Solidity automatically throws when dividing by 0\\r\\n  // uint256 c = a / b;\\r\\n  // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\r\\n  return a / b;\\r\\n }\\r\\n\\r\\n /**\\r\\n * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\\r\\n */\\r\\n function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n  assert(b \\u003c= a);\\r\\n  return a - b;\\r\\n }\\r\\n\\r\\n /**\\r\\n * @dev Adds two numbers, throws on overflow.\\r\\n */\\r\\n function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n  uint256 c = a + b;\\r\\n  assert(c \\u003e= a);\\r\\n  return c;\\r\\n }\\r\\n}\"},\"ZBC_Token_ethV1.0.0.sol\":{\"content\":\"pragma solidity \\u003e=0.4.23 \\u003c0.6.0;\\r\\n\\r\\nimport \\\"./safemath.sol\\\"; // this import is automatically injected by Remix.\\r\\nimport \\\"./AddressUtils.sol\\\";  \\r\\n \\r\\ncontract Ownable {\\r\\n\\r\\n    address public tokenOwner;\\r\\n    address public tokenSupervisor;\\r\\n    address public tokenAdmin;\\r\\n       \\r\\n    event OwnershipModify(address indexed previousOwner, address indexed newOwner);\\r\\n    event tokenSupervisorModify(address indexed previousSupervisor, address indexed newSupervisor);\\r\\n    event tokenAdminModify(address indexed previoustokenAdmin, address indexed newtokenAdmin);\\r\\n\\r\\n    constructor () public {\\r\\n        tokenOwner = msg.sender;\\r\\n        tokenSupervisor = msg.sender;\\r\\n        tokenAdmin = msg.sender;\\r\\n    }\\r\\n\\r\\n    modifier onlyTokenOwner() {\\r\\n        require(msg.sender == tokenOwner);\\r\\n        _;\\r\\n    }\\r\\n  \\r\\n    modifier onlyTokenSupervisor() {\\r\\n        require(msg.sender == tokenSupervisor);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyTokenAdmin() {\\r\\n        require(msg.sender == tokenAdmin);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyCLevel() {\\r\\n        require(\\r\\n            msg.sender == tokenOwner ||\\r\\n            msg.sender == tokenSupervisor ||\\r\\n            msg.sender == tokenAdmin\\r\\n        );\\r\\n        _;\\r\\n    }    \\r\\n\\r\\n    function modifyOwner(address _newTokenOwner) onlyTokenOwner public  {\\r\\n      \\r\\n        require(_newTokenOwner != address(0));       \\r\\n        tokenOwner = _newTokenOwner;     \\r\\n        emit OwnershipModify(tokenOwner, _newTokenOwner);       \\r\\n                  \\r\\n    }\\r\\n\\r\\n    function modifySupervisor(address _newSupervisor) onlyTokenOwner public  {\\r\\n        require(_newSupervisor != address(0));\\r\\n        tokenSupervisor = _newSupervisor;    \\r\\n        emit tokenSupervisorModify(tokenSupervisor, _newSupervisor);        \\r\\n                 \\r\\n    }\\r\\n   \\r\\n    function modifyTokenAdmin(address _newTokenAdmin) onlyTokenOwner public  {\\r\\n        require(_newTokenAdmin != address(0));        \\r\\n        tokenAdmin = _newTokenAdmin;     \\r\\n        emit tokenAdminModify(tokenAdmin, _newTokenAdmin);        \\r\\n                 \\r\\n    }     \\r\\n}\\r\\n\\r\\n \\r\\ncontract Pausable is Ownable {\\r\\n\\r\\n    event EventPause();\\r\\n    event EventUnpause();\\r\\n\\r\\n    bool public paused = false;\\r\\n\\r\\n    modifier whenNotPaused() {\\r\\n        require(!paused);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier whenPaused() {\\r\\n        require(paused);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function setPause() onlyCLevel whenNotPaused public {\\r\\n        paused = true;\\r\\n        emit EventPause();\\r\\n    }\\r\\n\\r\\n    function setUnpause() onlyCLevel whenPaused public {\\r\\n        paused = false;\\r\\n        emit EventUnpause();\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\ncontract ERC20Basic {\\r\\n\\r\\n    uint256 public totalSupply;\\r\\n    \\r\\n  \\r\\n    function balanceOf(address who) public view returns (uint256);\\r\\n    \\r\\n\\r\\n    function transfer(address toAddr, uint256 value) public payable returns (bool);\\r\\n    \\r\\n\\r\\n    event Transfer(address indexed fromAddr, address indexed toAddr, uint256 value);\\r\\n}\\r\\n\\r\\ncontract ERC20 is ERC20Basic {\\r\\n\\r\\n    function allowance(address owner, address spender) public view returns (uint256);\\r\\n    \\r\\n    function transferFrom(address fromAddr, address toAddr, uint256 value) public payable returns (bool);\\r\\n    \\r\\n\\r\\n    function approve(address spender, uint256 value) public returns (bool);\\r\\n    \\r\\n\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\n\\r\\ncontract BasicToken is ERC20Basic {\\r\\n\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    mapping(address =\\u003e uint256) public balances;\\r\\n\\r\\n\\r\\n    function balanceOf(address _owner) public view returns (uint256 balance) {\\r\\n        return balances[_owner];\\r\\n    }\\r\\n\\r\\n}\\r\\n\\r\\n//datacontrolcontract\\r\\ncontract StandardToken is ERC20, BasicToken,Ownable {\\r\\n    \\r\\n\\r\\n    mapping (address =\\u003e bool) public frozenAccount;\\r\\n    mapping (address =\\u003e mapping (address =\\u003euint256)) internal allowed;\\r\\n\\r\\n\\r\\n    /* This notifies clients about the amount burnt */\\r\\n    event BurnTokens(address indexed fromAddr, uint256 value);\\r\\n\\t\\r\\n   /* This generates a public event on the blockchain that will notify clients */\\r\\n    event FrozenFunds(address target, bool frozen);\\r\\n    \\r\\n\\r\\n    function transfer(address _toAddr, uint256 _value) public payable returns (bool) {\\r\\n    \\r\\n        require(_toAddr != address(0));\\r\\n        require(!frozenAccount[msg.sender]);           // Check if sender is frozen\\r\\n        require(!frozenAccount[_toAddr]);              // Check if recipient is frozen\\r\\n        require(_value \\u003c= balances[msg.sender]);\\r\\n        \\r\\n        balances[msg.sender] = balances[msg.sender].sub(_value);\\r\\n        balances[_toAddr] = balances[_toAddr].add(_value);\\r\\n        \\r\\n        emit Transfer(msg.sender, _toAddr, _value);\\r\\n        return true;\\r\\n    \\t  }\\r\\n\\r\\n\\r\\n  function transferFrom(address _fromAddr, address _toAddr, uint256 _value) onlyCLevel public payable  returns (bool) {\\r\\n  \\r\\n        // Prevent transfer to 0x0 address. Use burn() instead\\r\\n        require(_toAddr != address(0));\\r\\n        \\r\\n        require(!frozenAccount[_fromAddr]);           // Check if sender is frozen\\r\\n        require(!frozenAccount[_toAddr]);              // Check if recipient is frozen\\r\\n        require(_value \\u003c= balances[_fromAddr]);                     \\r\\n     \\r\\n        require(_value \\u003c= allowed[_fromAddr][msg.sender]);\\r\\n\\r\\n        balances[_fromAddr] = balances[_fromAddr].sub(_value);\\r\\n        balances[_toAddr] = balances[_toAddr].add(_value);\\r\\n        allowed[_fromAddr][msg.sender] = allowed[_fromAddr][msg.sender].sub(_value);\\r\\n        \\r\\n        emit Transfer(_fromAddr, _toAddr, _value);\\r\\n        return true;\\r\\n    \\r\\n    }\\r\\n\\r\\n\\r\\n\\tfunction batchTransfer(address[] memory _receivers, uint256 _value) onlyCLevel public payable returns (bool) {\\r\\n\\t\\t\\r\\n\\t\\t    uint256 cnt = _receivers.length;\\r\\n\\t\\t    \\r\\n\\t\\t    uint256 amount = _value.mul(cnt); \\r\\n\\t\\t    \\r\\n\\t\\t    require(cnt \\u003e 0 \\u0026\\u0026 cnt \\u003c= 20);\\r\\n\\t\\t    \\r\\n\\t\\t    require(_value \\u003e 0 \\u0026\\u0026 balances[msg.sender] \\u003e= amount);\\r\\n\\t\\t    \\r\\n        require(!frozenAccount[msg.sender]);           // Check if sender is frozen\\r\\n \\r\\n\\t\\t    balances[msg.sender] = balances[msg.sender].sub(amount);\\r\\n\\t\\t    \\r\\n\\t\\t    for (uint256 i = 0; i \\u003c cnt; i++) {\\r\\n\\t\\t        balances[_receivers[i]] = balances[_receivers[i]].add(_value);\\r\\n\\t\\t        emit Transfer(msg.sender, _receivers[i], _value);\\r\\n\\t\\t    }\\r\\n\\t\\t    \\r\\n\\t\\t    return true;\\r\\n\\t\\t  }\\r\\n \\r\\n\\r\\n    function approve(address _spender, uint256 _value) public returns (bool) {\\r\\n    \\r\\n        allowed[msg.sender][_spender] = _value;\\r\\n        \\r\\n        emit Approval(msg.sender, _spender, _value);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    //test function \\r\\n    function getMsgSender()  public view  returns (address ) {\\r\\n         return  msg.sender;\\r\\n        }\\r\\n        \\r\\n    function allowance(address _owner, address _spender) public view returns (uint256) {\\r\\n        return allowed[_owner][_spender];\\r\\n    }\\r\\n\\r\\n    function getAccountFreezedInfo(address _owner) public view returns (bool) {\\r\\n        return frozenAccount[_owner];\\r\\n    }\\r\\n\\r\\n    function increaseApproval(address _spender, uint256 _addedValue) public returns (bool) {\\r\\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\\r\\n        \\r\\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function decreaseApproval(address _spender, uint256 _subtractedValue) public returns (bool) {\\r\\n        uint256 oldValue = allowed[msg.sender][_spender];\\r\\n        \\r\\n        if (_subtractedValue \\u003e oldValue) {\\r\\n            allowed[msg.sender][_spender] = 0;\\r\\n        } else {\\r\\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\\r\\n        }\\r\\n        \\r\\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n  function burnTokens(uint256 _burnValue)  onlyTokenOwner public payable  returns (bool success) {\\r\\n       // Check if the sender has enough\\r\\n\\t     require(balances[msg.sender] \\u003e= _burnValue);    \\r\\n\\r\\n\\t     \\r\\n       // Subtract from the sender\\r\\n        balances[msg.sender] = balances[msg.sender].sub(_burnValue);              \\r\\n       // Updates totalSupply\\r\\n        totalSupply = totalSupply.sub(_burnValue);                              \\r\\n        \\r\\n        emit BurnTokens(msg.sender, _burnValue);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n\\r\\n        \\r\\n    function burnTokensFrom(address _fromAddr, uint256 _value) onlyCLevel public payable  returns (bool success) {\\r\\n        \\r\\n        require(balances[_fromAddr] \\u003e= _value);                // Check if the targeted balance is enough\\r\\n       \\r\\n        require(_fromAddr != msg.sender);   \\r\\n        \\r\\n        require(allowed[_fromAddr][msg.sender] \\u003e=_value);  \\r\\n        \\r\\n        allowed[_fromAddr][msg.sender] = allowed[_fromAddr][msg.sender].sub(_value);      \\r\\n         \\r\\n        balances[_fromAddr] = balances[_fromAddr].sub(_value);     // Subtract from the targeted balance\\r\\n       \\r\\n        totalSupply =totalSupply.sub(_value) ;             // Update totalSupply\\r\\n        \\r\\n        emit BurnTokens(_fromAddr, _value);\\r\\n        return true;\\r\\n        }\\r\\n  \\r\\n    function freezeAccount(address _target, bool _freeze) onlyCLevel public  returns (bool success) {\\r\\n        \\r\\n        require(_target != msg.sender);\\r\\n        \\r\\n        frozenAccount[_target] = _freeze;\\r\\n        emit FrozenFunds(_target, _freeze);\\r\\n        return _freeze;\\r\\n        }\\r\\n}\\r\\n\\r\\ncontract PausableToken is StandardToken, Pausable {\\r\\n\\r\\n    function transfer(address _toAddr, uint256 _value) whenNotPaused public payable returns (bool) {\\r\\n        return super.transfer(_toAddr, _value);\\r\\n    }\\r\\n\\r\\n    function transferFrom(address _fromAddr, address _toAddr, uint256 _value) whenNotPaused public payable returns (bool) {\\r\\n        return super.transferFrom(_fromAddr, _toAddr, _value);\\r\\n    }\\r\\n\\r\\n    function  batchTransfer(address[] memory _receivers, uint256 _value) whenNotPaused public payable returns (bool) {\\r\\n        return super.batchTransfer(_receivers, _value);\\r\\n    }\\r\\n\\r\\n\\r\\n    function approve(address _spender, uint256 _value) whenNotPaused public  returns (bool) {\\r\\n        return super.approve(_spender, _value);\\r\\n    }\\r\\n\\r\\n    function increaseApproval(address _spender, uint256 _addedValue) whenNotPaused public  returns (bool success) {\\r\\n        return super.increaseApproval(_spender, _addedValue);\\r\\n    }\\r\\n\\r\\n    function decreaseApproval(address _spender, uint256 _subtractedValue) whenNotPaused public  returns (bool success) {\\r\\n        return super.decreaseApproval(_spender, _subtractedValue);\\r\\n    }\\r\\n    \\r\\n    \\r\\n  function burnTokens( uint256 _burnValue) whenNotPaused public payable returns (bool success) {\\r\\n        return super.burnTokens(_burnValue);\\r\\n    }\\r\\n    \\r\\n  function burnTokensFrom(address _fromAddr, uint256 _burnValue) whenNotPaused public payable returns (bool success) {\\r\\n        return super.burnTokensFrom( _fromAddr,_burnValue);\\r\\n    }    \\r\\n    \\r\\n    //test function \\r\\n  function getMsgSender()   public view returns (address ) {\\r\\n        return super.getMsgSender();\\r\\n    }   \\r\\n    \\r\\n  function freezeAccount(address _target, bool _freeze)  whenNotPaused public  returns (bool success) {\\r\\n        return super.freezeAccount(_target,_freeze);\\r\\n    }   \\r\\n       \\r\\n}\\r\\n\\r\\ncontract CustomToken is PausableToken {\\r\\n\\r\\n    string public name;\\r\\n    string public symbol;\\r\\n    uint8 public decimals ;\\r\\n   \\r\\n    \\r\\n    // Constants\\r\\n    string  public constant tokenName = \\\" ZBT game exchange acceptance token,www.zbt.com\\\";\\r\\n    string  public constant tokenSymbol = \\\"ZBC\\\";\\r\\n    uint8   public constant tokenDecimals = 6;\\r\\n    \\r\\n    uint256 public constant initTokenSUPPLY      = 5000000000 * (10 ** uint256(tokenDecimals));\\r\\n             \\r\\n                                        \\r\\n    constructor () public {\\r\\n\\r\\n        name = tokenName;\\r\\n\\r\\n        symbol = tokenSymbol;\\r\\n\\r\\n        decimals = tokenDecimals;\\r\\n\\r\\n        totalSupply = initTokenSUPPLY;    \\r\\n                \\r\\n        balances[msg.sender] = totalSupply;   \\r\\n\\r\\n    }    \\r\\n\\r\\n}\\r\\n\"}}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"BurnTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EventPause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EventUnpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"FrozenFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipModify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromAddr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previoustokenAdmin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newtokenAdmin\",\"type\":\"address\"}],\"name\":\"tokenAdminModify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousSupervisor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newSupervisor\",\"type\":\"address\"}],\"name\":\"tokenSupervisorModify\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_receivers\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"batchTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_burnValue\",\"type\":\"uint256\"}],\"name\":\"burnTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fromAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_burnValue\",\"type\":\"uint256\"}],\"name\":\"burnTokensFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_freeze\",\"type\":\"bool\"}],\"name\":\"freezeAccount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getAccountFreezedInfo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMsgSender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initTokenSUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newTokenOwner\",\"type\":\"address\"}],\"name\":\"modifyOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newSupervisor\",\"type\":\"address\"}],\"name\":\"modifySupervisor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newTokenAdmin\",\"type\":\"address\"}],\"name\":\"modifyTokenAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setPause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setUnpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenDecimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenSupervisor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenSymbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_toAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fromAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_toAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"}]","ContractName":"CustomToken","CompilerVersion":"v0.5.13+commit.5b0b510c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://750a099ba981f59bd16a02d8e4c6d3ff1239a4059703b3b1b8fe195ef28cd6cf"}]}