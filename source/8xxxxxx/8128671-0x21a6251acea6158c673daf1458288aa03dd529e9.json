{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.9;\r\n\r\n\r\n/**\r\n * @dev Collection of functions related to the address type,\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * This test is non-exhaustive, and there may be false-negatives: during the\r\n     * execution of a contract's constructor, its address will be reported as\r\n     * not containing a contract.\r\n     *\r\n     * > It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an `address` into `address payable`. Note that this is\r\n     * simply a type cast: the actual underlying value is not changed.\r\n     */\r\n    function toPayable(address account) internal pure returns (address payable) {\r\n        return address(uint160(account));\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see `ERC20Detailed`.\r\n */\r\ninterface ERC20 {\r\n    function decimals() external view returns(uint digits);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a `Transfer` event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through `transferFrom`. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when `approve` or `transferFrom` are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * > Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an `Approval` event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a `Transfer` event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to `approve`. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// @title Kyber Network interface\r\ninterface KyberNetworkProxyInterface {\r\n    function tradeWithHint(ERC20 src, uint srcAmount, ERC20 dest, address payable destAddress, uint maxDestAmount,\r\n        uint minConversionRate, address walletId, bytes calldata hint) external payable returns(uint);\r\n\r\n    function maxGasPrice() external view returns(uint);\r\n    function getUserCapInWei(address user) external view returns(uint);\r\n    function getUserCapInTokenWei(address user, ERC20 token) external view returns(uint);\r\n    function enabled() external view returns(bool);\r\n    function info(bytes32 id) external view returns(uint);\r\n\r\n    function getExpectedRate(ERC20 src, ERC20 dest, uint srcQty) external view\r\n        returns (uint expectedRate, uint slippageRate);\r\n}\r\n\r\n\r\ncontract PermissionGroups {\r\n\r\n    address public admin;\r\n    address public pendingAdmin;\r\n    mapping(address=>bool) public operators;\r\n    mapping(address=>bool) public alerters;\r\n\r\n    constructor(address _admin) public {\r\n        admin = _admin;\r\n    }\r\n\r\n    modifier onlyAdmin() {\r\n        require(msg.sender == admin);\r\n        _;\r\n    }\r\n\r\n    modifier onlyOperator() {\r\n        require(operators[msg.sender]);\r\n        _;\r\n    }\r\n\r\n    modifier onlyAlerter() {\r\n        require(alerters[msg.sender]);\r\n        _;\r\n    }\r\n\r\n    event TransferAdminPending(address pendingAdmin);\r\n\r\n    /**\r\n     * @dev Allows the current admin to set the pendingAdmin address.\r\n     * @param newAdmin The address to transfer ownership to.\r\n     */\r\n    function transferAdmin(address newAdmin) public onlyAdmin {\r\n        require(newAdmin != address(0));\r\n        emit TransferAdminPending(pendingAdmin);\r\n        pendingAdmin = newAdmin;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current admin to set the admin in one tx. Useful initial deployment.\r\n     * @param newAdmin The address to transfer ownership to.\r\n     */\r\n    function transferAdminQuickly(address newAdmin) public onlyAdmin {\r\n        require(newAdmin != address(0));\r\n        emit TransferAdminPending(newAdmin);\r\n        emit AdminClaimed(newAdmin, admin);\r\n        admin = newAdmin;\r\n    }\r\n\r\n    event AdminClaimed( address newAdmin, address previousAdmin);\r\n\r\n    /**\r\n     * @dev Allows the pendingAdmin address to finalize the change admin process.\r\n     */\r\n    function claimAdmin() public {\r\n        require(pendingAdmin == msg.sender);\r\n        emit AdminClaimed(pendingAdmin, admin);\r\n        admin = pendingAdmin;\r\n        pendingAdmin = address(0);\r\n    }\r\n\r\n    event AlerterAdded (address newAlerter, bool isAdd);\r\n\r\n    function addAlerter(address newAlerter) public onlyAdmin {\r\n        require(!alerters[newAlerter]); // prevent duplicates.\r\n        alerters[newAlerter] = true;\r\n        emit AlerterAdded(newAlerter, true);\r\n    }\r\n\r\n    function removeAlerter (address alerter) public onlyAdmin {\r\n        require(alerters[alerter]);\r\n        alerters[alerter] = false;\r\n        emit AlerterAdded(alerter, false);\r\n    }\r\n\r\n    event OperatorAdded(address newOperator, bool isAdd);\r\n\r\n    function addOperator(address newOperator) public onlyAdmin {\r\n        require(!operators[newOperator]); // prevent duplicates.\r\n        operators[newOperator] = true;\r\n        emit OperatorAdded(newOperator, true);\r\n    }\r\n\r\n    function removeOperator (address operator) public onlyAdmin {\r\n        require(operators[operator]);\r\n        operators[operator] = false;\r\n        emit OperatorAdded(operator, false);\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(ERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(ERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(ERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(ERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function callOptionalReturn(ERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n        // solhint-disable-next-line max-line-length\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n// File: contracts/Utils.sol\r\n\r\n/// @title Kyber constants contract\r\ncontract Utils {\r\n\r\n   ERC20 constant internal ETH_TOKEN_ADDRESS = ERC20(0x00eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee);\r\n   uint  constant internal PRECISION = (10**18);\r\n   uint  constant internal MAX_QTY   = (10**28); // 10B tokens\r\n   uint  constant internal MAX_RATE  = (PRECISION * 10**6); // up to 1M tokens per ETH\r\n   uint  constant internal MAX_DECIMALS = 18;\r\n   uint  constant internal ETH_DECIMALS = 18;\r\n   mapping(address=>uint) internal decimals;\r\n\r\n   function setDecimals(ERC20 token) internal {\r\n       if (token == ETH_TOKEN_ADDRESS) decimals[address(token)] = ETH_DECIMALS;\r\n       else decimals[address(token)] = token.decimals();\r\n   }\r\n\r\n   function getDecimals(ERC20 token) internal view returns(uint) {\r\n       if (token == ETH_TOKEN_ADDRESS) return ETH_DECIMALS; // save storage access\r\n       uint tokenDecimals = decimals[address(token)];\r\n       // technically, there might be token with decimals 0\r\n       // moreover, very possible that old tokens have decimals 0\r\n       // these tokens will just have higher gas fees.\r\n       if(tokenDecimals == 0) return token.decimals();\r\n\r\n       return tokenDecimals;\r\n   }\r\n\r\n   function calcDstQty(uint srcQty, uint srcDecimals, uint dstDecimals, uint rate) internal pure returns(uint) {\r\n       require(srcQty <= MAX_QTY);\r\n       require(rate <= MAX_RATE);\r\n\r\n       if (dstDecimals >= srcDecimals) {\r\n           require((dstDecimals - srcDecimals) <= MAX_DECIMALS);\r\n           return (srcQty * rate * (10**(dstDecimals - srcDecimals))) / PRECISION;\r\n       } else {\r\n           require((srcDecimals - dstDecimals) <= MAX_DECIMALS);\r\n           return (srcQty * rate) / (PRECISION * (10**(srcDecimals - dstDecimals)));\r\n       }\r\n   }\r\n\r\n   function calcSrcQty(uint dstQty, uint srcDecimals, uint dstDecimals, uint rate) internal pure returns(uint) {\r\n       require(dstQty <= MAX_QTY);\r\n       require(rate <= MAX_RATE);\r\n\r\n       //source quantity is rounded up. to avoid dest quantity being too low.\r\n       uint numerator;\r\n       uint denominator;\r\n       if (srcDecimals >= dstDecimals) {\r\n           require((srcDecimals - dstDecimals) <= MAX_DECIMALS);\r\n           numerator = (PRECISION * dstQty * (10**(srcDecimals - dstDecimals)));\r\n           denominator = rate;\r\n       } else {\r\n           require((dstDecimals - srcDecimals) <= MAX_DECIMALS);\r\n           numerator = (PRECISION * dstQty);\r\n           denominator = (rate * (10**(dstDecimals - srcDecimals)));\r\n       }\r\n       return (numerator + denominator - 1) / denominator; //avoid rounding down errors\r\n   }\r\n}\r\n\r\n// File: contracts/Utils2.sol\r\n\r\ncontract Utils2 is Utils {\r\n\r\n   /// @dev get the balance of a user.\r\n   /// @param token The token type\r\n   /// @return The balance\r\n   function getBalance(ERC20 token, address user) public view returns(uint) {\r\n       if (token == ETH_TOKEN_ADDRESS)\r\n           return user.balance;\r\n       else\r\n           return token.balanceOf(user);\r\n   }\r\n\r\n   function getDecimalsSafe(ERC20 token) internal returns(uint) {\r\n\r\n       if (decimals[address(token)] == 0) {\r\n           setDecimals(token);\r\n       }\r\n\r\n       return decimals[address(token)];\r\n   }\r\n\r\n   function calcDestAmount(ERC20 src, ERC20 dest, uint srcAmount, uint rate) internal view returns(uint) {\r\n       return calcDstQty(srcAmount, getDecimals(src), getDecimals(dest), rate);\r\n   }\r\n\r\n   function calcSrcAmount(ERC20 src, ERC20 dest, uint destAmount, uint rate) internal view returns(uint) {\r\n       return calcSrcQty(destAmount, getDecimals(src), getDecimals(dest), rate);\r\n   }\r\n\r\n   function calcRateFromQty(uint srcAmount, uint destAmount, uint srcDecimals, uint dstDecimals)\r\n       internal pure returns(uint)\r\n   {\r\n       require(srcAmount <= MAX_QTY);\r\n       require(destAmount <= MAX_QTY);\r\n\r\n       if (dstDecimals >= srcDecimals) {\r\n           require((dstDecimals - srcDecimals) <= MAX_DECIMALS);\r\n           return (destAmount * PRECISION / ((10 ** (dstDecimals - srcDecimals)) * srcAmount));\r\n       } else {\r\n           require((srcDecimals - dstDecimals) <= MAX_DECIMALS);\r\n           return (destAmount * PRECISION * (10 ** (srcDecimals - dstDecimals)) / srcAmount);\r\n       }\r\n   }\r\n}\r\n\r\n\r\n/**\r\n * @title Contracts that should be able to recover tokens or ethers can inherit this contract.\r\n * @author Ilan Doron\r\n * @dev Allows to recover any tokens or Ethers received in a contract.\r\n * Should prevent any accidental loss of tokens.\r\n */\r\ncontract Withdrawable is PermissionGroups {\r\n    using SafeERC20 for ERC20;\r\n    constructor(address _admin) public PermissionGroups (_admin) {}\r\n\r\n    event TokenWithdraw(ERC20 token, uint amount, address sendTo);\r\n\r\n    /**\r\n     * @dev Withdraw all ERC20 compatible tokens\r\n     * @param token ERC20 The address of the token contract\r\n     */\r\n    function withdrawToken(ERC20 token, uint amount, address sendTo) external onlyAdmin {\r\n        token.safeTransfer(sendTo, amount);\r\n        emit TokenWithdraw(token, amount, sendTo);\r\n    }\r\n\r\n    event EtherWithdraw(uint amount, address sendTo);\r\n\r\n    /**\r\n     * @dev Withdraw Ethers\r\n     */\r\n    function withdrawEther(uint amount, address payable sendTo) external onlyAdmin {\r\n        sendTo.transfer(amount);\r\n        emit EtherWithdraw(amount, sendTo);\r\n    }\r\n}\r\n\r\n\r\ncontract KyberSwapLimitOrder is Withdrawable {\r\n\r\n    //userAddress => concatenated token addresses => nonce\r\n    mapping(address => mapping(uint256 => uint256)) public nonces;\r\n    bool public tradeEnabled;\r\n    KyberNetworkProxyInterface public kyberNetworkProxy;\r\n    uint256 public constant MAX_DEST_AMOUNT = 2 ** 256 - 1;\r\n    uint256 public constant PRECISION = 10**4;\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for ERC20;\r\n\r\n    //Constructor\r\n    constructor(\r\n        address _admin,\r\n        KyberNetworkProxyInterface _kyberNetworkProxy\r\n    )\r\n        public\r\n        Withdrawable(_admin) {\r\n            require(_admin != address(0));\r\n            require(address(_kyberNetworkProxy) != address(0));\r\n\r\n            kyberNetworkProxy = _kyberNetworkProxy;\r\n        }\r\n\r\n    event TradeEnabled(bool tradeEnabled);\r\n\r\n    function enableTrade() external onlyAdmin {\r\n        tradeEnabled = true;\r\n        emit TradeEnabled(tradeEnabled);\r\n    }\r\n\r\n    function disableTrade() external onlyAdmin {\r\n        tradeEnabled = false;\r\n        emit TradeEnabled(tradeEnabled);\r\n    }\r\n\r\n    function listToken(ERC20 token)\r\n        external\r\n        onlyAdmin\r\n    {\r\n        require(address(token) != address(0));\r\n        /*\r\n        No need to set allowance to zero first, as there's only 1 scenario here (from zero to max allowance).\r\n        No one else can set allowance on behalf of this contract to Kyber.\r\n        */\r\n        token.safeApprove(address(kyberNetworkProxy), MAX_DEST_AMOUNT);\r\n    }\r\n\r\n    struct VerifyParams {\r\n        address user;\r\n        uint8 v;\r\n        uint256 concatenatedTokenAddresses;\r\n        uint256 nonce;\r\n        bytes32 hashedParams;\r\n        bytes32 r;\r\n        bytes32 s;\r\n    }\r\n\r\n    struct TradeInput {\r\n        ERC20 srcToken;\r\n        uint256 srcQty;\r\n        ERC20 destToken;\r\n        address payable destAddress;\r\n        uint256 minConversionRate;\r\n        uint256 feeInPrecision;\r\n    }\r\n\r\n    event LimitOrderExecute(address indexed user, uint256 nonce, address indexed srcToken,\r\n        uint256 actualSrcQty, uint256 destAmount, address indexed destToken,\r\n        address destAddress, uint256 feeInSrcTokenWei);\r\n\r\n    function executeLimitOrder(\r\n        address user,\r\n        uint256 nonce,\r\n        ERC20 srcToken,\r\n        uint256 srcQty,\r\n        ERC20 destToken,\r\n        address payable destAddress,\r\n        uint256 minConversionRate,\r\n        uint256 feeInPrecision,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    )\r\n        onlyOperator\r\n        external\r\n    {\r\n        require(tradeEnabled);\r\n\r\n        VerifyParams memory verifyParams;\r\n        verifyParams.user = user;\r\n        verifyParams.concatenatedTokenAddresses = concatTokenAddresses(address(srcToken), address(destToken));\r\n        verifyParams.nonce = nonce;\r\n        verifyParams.hashedParams = keccak256(abi.encodePacked(\r\n            user, nonce, srcToken, srcQty, destToken, destAddress, minConversionRate, feeInPrecision));\r\n        verifyParams.v = v;\r\n        verifyParams.r = r;\r\n        verifyParams.s = s;\r\n        require(verifyTradeParams(verifyParams));\r\n\r\n        TradeInput memory tradeInput;\r\n        tradeInput.srcToken = srcToken;\r\n        tradeInput.srcQty = srcQty;\r\n        tradeInput.destToken = destToken;\r\n        tradeInput.destAddress = destAddress;\r\n        tradeInput.minConversionRate = minConversionRate;\r\n        tradeInput.feeInPrecision = feeInPrecision;\r\n        trade(tradeInput, verifyParams);\r\n    }\r\n\r\n    event OldOrdersInvalidated(address user, uint256 concatenatedTokenAddresses, uint256 nonce);\r\n\r\n    function invalidateOldOrders(uint256 concatenatedTokenAddresses, uint256 nonce) external {\r\n        require(validAddressInNonce(nonce));\r\n        require(isValidNonce(msg.sender, concatenatedTokenAddresses, nonce));\r\n        updateNonce(msg.sender, concatenatedTokenAddresses, nonce);\r\n        emit OldOrdersInvalidated(msg.sender, concatenatedTokenAddresses, nonce);\r\n    }\r\n\r\n    function concatTokenAddresses(address srcToken, address destToken) public pure returns (uint256) {\r\n        return ((uint256(srcToken) >> 32) << 128) + (uint256(destToken) >> 32);\r\n    }\r\n\r\n    function validAddressInNonce(uint256 nonce) public view returns (bool) {\r\n        //check that first 16 bytes in nonce corresponds to first 16 bytes of contract address\r\n        return (nonce >> 128) == (uint256(address(this)) >> 32);\r\n    }\r\n\r\n    function isValidNonce(address user, uint256 concatenatedTokenAddresses, uint256 nonce) public view returns (bool) {\r\n        return nonce > nonces[user][concatenatedTokenAddresses];\r\n    }\r\n\r\n    function verifySignature(bytes32 hash, uint8 v, bytes32 r, bytes32 s, address user) public pure returns (bool) {\r\n        //Users have to sign the message using wallets (Trezor, Ledger, Geth)\r\n        //These wallets prepend a prefix to the data to prevent some malicious signing scheme\r\n        //Eg. website that tries to trick users to sign an Ethereum message\r\n        //https://ethereum.stackexchange.com/questions/15364/ecrecover-from-geth-and-web3-eth-sign\r\n        bytes memory prefix = \"\\x19Ethereum Signed Message:\\n32\";\r\n        bytes32 prefixedHash = keccak256(abi.encodePacked(prefix, hash));\r\n        return ecrecover(prefixedHash, v, r, s) == user;\r\n    }\r\n\r\n    //used SafeMath lib\r\n    function deductFee(uint256 srcQty, uint256 feeInPrecision) public pure returns\r\n    (uint256 actualSrcQty, uint256 feeInSrcTokenWei) {\r\n        require(feeInPrecision <= 100 * PRECISION);\r\n        feeInSrcTokenWei = srcQty.mul(feeInPrecision).div(100 * PRECISION);\r\n        actualSrcQty = srcQty.sub(feeInSrcTokenWei);\r\n    }\r\n\r\n    event NonceUpdated(address user, uint256 concatenatedTokenAddresses, uint256 nonce);\r\n\r\n    function updateNonce(address user, uint256 concatenatedTokenAddresses, uint256 nonce) internal {\r\n        nonces[user][concatenatedTokenAddresses] = nonce;\r\n        emit NonceUpdated(user, concatenatedTokenAddresses, nonce);\r\n    }\r\n\r\n    function verifyTradeParams(VerifyParams memory verifyParams) internal view returns (bool) {\r\n        require(validAddressInNonce(verifyParams.nonce));\r\n        require(isValidNonce(verifyParams.user, verifyParams.concatenatedTokenAddresses, verifyParams.nonce));\r\n        require(verifySignature(\r\n            verifyParams.hashedParams,\r\n            verifyParams.v,\r\n            verifyParams.r,\r\n            verifyParams.s,\r\n            verifyParams.user\r\n            ));\r\n        return true;\r\n    }\r\n\r\n    function trade(TradeInput memory tradeInput, VerifyParams memory verifyParams) internal {\r\n        tradeInput.srcToken.safeTransferFrom(verifyParams.user, address(this), tradeInput.srcQty);\r\n        uint256 actualSrcQty;\r\n        uint256 feeInSrcTokenWei;\r\n        (actualSrcQty, feeInSrcTokenWei) = deductFee(tradeInput.srcQty, tradeInput.feeInPrecision);\r\n\r\n        updateNonce(verifyParams.user, verifyParams.concatenatedTokenAddresses, verifyParams.nonce);\r\n        uint256 destAmount = kyberNetworkProxy.tradeWithHint(\r\n            tradeInput.srcToken,\r\n            actualSrcQty,\r\n            tradeInput.destToken,\r\n            tradeInput.destAddress,\r\n            MAX_DEST_AMOUNT,\r\n            tradeInput.minConversionRate,\r\n            address(this), //walletId\r\n            \"PERM\" //hint: only Permissioned reserves to be used\r\n        );\r\n\r\n        emit LimitOrderExecute(\r\n            verifyParams.user,\r\n            verifyParams.nonce,\r\n            address(tradeInput.srcToken),\r\n            actualSrcQty,\r\n            destAmount,\r\n            address(tradeInput.destToken),\r\n            tradeInput.destAddress,\r\n            feeInSrcTokenWei\r\n        );\r\n    }\r\n}\r\n\r\n\r\ncontract MonitorHelper is Utils2, PermissionGroups, Withdrawable {\r\n    KyberSwapLimitOrder public ksContract;\r\n    KyberNetworkProxyInterface public kyberProxy;\r\n    uint public slippageRate = 300; // 3%\r\n\r\n    constructor(KyberSwapLimitOrder _ksContract, KyberNetworkProxyInterface _kyberProxy) public Withdrawable(msg.sender) {\r\n        ksContract = _ksContract;\r\n        kyberProxy = _kyberProxy;\r\n    }\r\n\r\n    function setKSContract(KyberSwapLimitOrder _ksContract) public onlyAdmin {\r\n        ksContract = _ksContract;\r\n    }\r\n\r\n    function setKyberProxy(KyberNetworkProxyInterface _kyberProxy) public onlyAdmin {\r\n        kyberProxy = _kyberProxy;\r\n    }\r\n\r\n    function setSlippageRate(uint _slippageRate) public onlyAdmin {\r\n        slippageRate = _slippageRate;\r\n    }\r\n\r\n    function getNonces(address []memory users, uint256[] memory concatenatedTokenAddresses)\r\n    public view\r\n    returns (uint256[] memory nonces) {\r\n        require(users.length == concatenatedTokenAddresses.length);\r\n        nonces = new uint256[](users.length);\r\n        for(uint i=0; i< users.length; i ++) {\r\n            nonces[i]= ksContract.nonces(users[i],concatenatedTokenAddresses[i]);\r\n        }\r\n        return (nonces);\r\n    }\r\n\r\n    function getNonceFromKS(address user, uint256 concatenatedTokenAddress)\r\n    public view\r\n    returns (uint256 nonces) {\r\n        nonces = ksContract.nonces(user, concatenatedTokenAddress);\r\n        return nonces;\r\n    }\r\n\r\n    function getBalancesAndAllowances(address[] memory wallets, ERC20[] memory tokens)\r\n    public view\r\n    returns (uint[] memory balances, uint[] memory allowances) {\r\n        require(wallets.length == tokens.length);\r\n        balances = new uint[](wallets.length);\r\n        allowances = new uint[](wallets.length);\r\n        for(uint i = 0; i < wallets.length; i++) {\r\n            balances[i] = tokens[i].balanceOf(wallets[i]);\r\n            allowances[i] = tokens[i].allowance(wallets[i], address(ksContract));\r\n        }\r\n        return (balances, allowances);\r\n    }\r\n\r\n    function getBalances(address[] memory wallets, ERC20[] memory tokens)\r\n    public view\r\n    returns (uint[] memory balances) {\r\n        require(wallets.length == tokens.length);\r\n        balances = new uint[](wallets.length);\r\n        for(uint i = 0; i < wallets.length; i++) {\r\n            balances[i] = tokens[i].balanceOf(wallets[i]);\r\n        }\r\n        return balances;\r\n    }\r\n\r\n    function getBalancesSingleWallet(address wallet, ERC20[] memory tokens)\r\n    public view\r\n    returns (uint[] memory balances) {\r\n        balances = new uint[](tokens.length);\r\n        for(uint i = 0; i < tokens.length; i++) {\r\n            balances[i] = tokens[i].balanceOf(wallet);\r\n        }\r\n        return balances;\r\n    }\r\n\r\n    function getAllowances(address[] memory wallets, ERC20[] memory tokens)\r\n    public view\r\n    returns (uint[] memory allowances) {\r\n        require(wallets.length == tokens.length);\r\n        allowances = new uint[](wallets.length);\r\n        for(uint i = 0; i < wallets.length; i++) {\r\n            allowances[i] = tokens[i].allowance(wallets[i], address(ksContract));\r\n        }\r\n        return allowances;\r\n    }\r\n\r\n    function getAllowancesSingleWallet(address wallet, ERC20[] memory tokens)\r\n    public view\r\n    returns (uint[] memory allowances) {\r\n        allowances = new uint[](tokens.length);\r\n        for(uint i = 0; i < tokens.length; i++) {\r\n            allowances[i] = tokens[i].allowance(wallet, address(ksContract));\r\n        }\r\n        return allowances;\r\n    }\r\n\r\n    function checkOrdersExecutable(\r\n        address[] memory senders, ERC20[] memory srcs,\r\n        uint[] memory srcAmounts, ERC20[] memory dests,\r\n        uint[] memory rates, uint[] memory nonces\r\n    )\r\n    public view\r\n    returns (bool[] memory executables) {\r\n        require(senders.length == srcs.length);\r\n        require(senders.length == dests.length);\r\n        require(senders.length == srcAmounts.length);\r\n        require(senders.length == rates.length);\r\n        require(senders.length == nonces.length);\r\n        executables = new bool[](senders.length);\r\n        bool isOK = true;\r\n        uint curRate = 0;\r\n        uint allowance = 0;\r\n        uint balance = 0;\r\n        for(uint i = 0; i < senders.length; i++) {\r\n            isOK = true;\r\n            balance = srcs[i].balanceOf(senders[i]);\r\n            if (balance < srcAmounts[i]) { isOK = false; }\r\n            if (isOK) {\r\n                allowance = srcs[i].allowance(senders[i], address(ksContract));\r\n                if (allowance < srcAmounts[i]) { isOK = false; }\r\n            }\r\n            if (isOK && address(ksContract) != address(0)) {\r\n                isOK = ksContract.validAddressInNonce(nonces[i]);\r\n                if (isOK) {\r\n                    uint concatTokenAddresses = ksContract.concatTokenAddresses(address(srcs[i]), address(dests[i]));\r\n                    isOK = ksContract.isValidNonce(senders[i], concatTokenAddresses, nonces[i]);\r\n                }\r\n            }\r\n            if (isOK) {\r\n                (curRate, ) = kyberProxy.getExpectedRate(srcs[i], dests[i], srcAmounts[i]);\r\n                if (curRate * 10000 < rates[i] * (10000 + slippageRate)) { isOK = false; }\r\n            }\r\n            executables[i] = isOK;\r\n        }\r\n        return executables;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"alerter\",\"type\":\"address\"}],\"name\":\"removeAlerter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"wallets\",\"type\":\"address[]\"},{\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"getAllowances\",\"outputs\":[{\"name\":\"allowances\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"operators\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"wallets\",\"type\":\"address[]\"},{\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"getBalancesAndAllowances\",\"outputs\":[{\"name\":\"balances\",\"type\":\"uint256[]\"},{\"name\":\"allowances\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"sendTo\",\"type\":\"address\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAlerter\",\"type\":\"address\"}],\"name\":\"addAlerter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ksContract\",\"type\":\"address\"}],\"name\":\"setKSContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"users\",\"type\":\"address[]\"},{\"name\":\"concatenatedTokenAddresses\",\"type\":\"uint256[]\"}],\"name\":\"getNonces\",\"outputs\":[{\"name\":\"nonces\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"wallet\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"getBalancesSingleWallet\",\"outputs\":[{\"name\":\"balances\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"senders\",\"type\":\"address[]\"},{\"name\":\"srcs\",\"type\":\"address[]\"},{\"name\":\"srcAmounts\",\"type\":\"uint256[]\"},{\"name\":\"dests\",\"type\":\"address[]\"},{\"name\":\"rates\",\"type\":\"uint256[]\"},{\"name\":\"nonces\",\"type\":\"uint256[]\"}],\"name\":\"checkOrdersExecutable\",\"outputs\":[{\"name\":\"executables\",\"type\":\"bool[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"wallet\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"getAllowancesSingleWallet\",\"outputs\":[{\"name\":\"allowances\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"concatenatedTokenAddress\",\"type\":\"uint256\"}],\"name\":\"getNonceFromKS\",\"outputs\":[{\"name\":\"nonces\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"transferAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_slippageRate\",\"type\":\"uint256\"}],\"name\":\"setSlippageRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"transferAdminQuickly\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"slippageRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ksContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOperator\",\"type\":\"address\"}],\"name\":\"addOperator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"removeOperator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_kyberProxy\",\"type\":\"address\"}],\"name\":\"setKyberProxy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"sendTo\",\"type\":\"address\"}],\"name\":\"withdrawEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"alerters\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"wallets\",\"type\":\"address[]\"},{\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"getBalances\",\"outputs\":[{\"name\":\"balances\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kyberProxy\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_ksContract\",\"type\":\"address\"},{\"name\":\"_kyberProxy\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"sendTo\",\"type\":\"address\"}],\"name\":\"TokenWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"sendTo\",\"type\":\"address\"}],\"name\":\"EtherWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"pendingAdmin\",\"type\":\"address\"}],\"name\":\"TransferAdminPending\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newAdmin\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"previousAdmin\",\"type\":\"address\"}],\"name\":\"AdminClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newAlerter\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"isAdd\",\"type\":\"bool\"}],\"name\":\"AlerterAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newOperator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"isAdd\",\"type\":\"bool\"}],\"name\":\"OperatorAdded\",\"type\":\"event\"}]","ContractName":"MonitorHelper","CompilerVersion":"v0.5.9+commit.e560f70d","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000052d35e8f0ffa18337b093aec3dfff40445d8f4f4000000000000000000000000818e6fecd516ecc3849daf6845e3ec868087b755","Library":"","SwarmSource":"bzzr://85aa763189286fef3692f885436867559baf4115dfb8d8438acb5cbd87900efb"}]}