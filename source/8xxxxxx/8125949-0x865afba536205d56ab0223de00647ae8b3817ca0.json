{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.0;\r\npragma experimental ABIEncoderV2;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n    function getOwner() public view returns (address) {\r\n        return owner;\r\n    }\r\n\r\n    function getOwnerStatic(address ownableContract) internal view returns (address) {\r\n        bytes memory callcodeOwner = abi.encodeWithSignature(\"getOwner()\");\r\n        (bool success, bytes memory returnData) = address(ownableContract).staticcall(callcodeOwner);\r\n        require(success, \"input address has to be a valid ownable contract\");\r\n        return parseAddr(returnData);\r\n    }\r\n\r\n    function getTokenVestingStatic(address tokenFactoryContract) internal view returns (address) {\r\n        bytes memory callcodeTokenVesting = abi.encodeWithSignature(\"getTokenVesting()\");\r\n        (bool success, bytes memory returnData) = address(tokenFactoryContract).staticcall(callcodeTokenVesting);\r\n        require(success, \"input address has to be a valid TokenFactory contract\");\r\n        return parseAddr(returnData);\r\n    }\r\n\r\n\r\n    function parseAddr(bytes memory data) public pure returns (address parsed){\r\n        assembly {parsed := mload(add(data, 32))}\r\n    }\r\n\r\n\r\n\r\n\r\n}\r\n\r\n/**\r\n * @title Registry contract for storing token proposals\r\n * @dev For storing token proposals. This can be understood as a state contract with minimal CRUD logic.\r\n * @author Jake Goh Si Yuan @ jakegsy, jake@jakegsy.com\r\n */\r\ncontract Registry is Ownable {\r\n\r\n    struct Creator {\r\n        address token;\r\n        string name;\r\n        string symbol;\r\n        uint8 decimals;\r\n        uint256 totalSupply;\r\n        address proposer;\r\n        address vestingBeneficiary;\r\n        uint8 initialPercentage;\r\n        uint256 vestingPeriodInWeeks;\r\n        bool approved;\r\n    }\r\n\r\n    mapping(bytes32 => Creator) public rolodex;\r\n    mapping(string => bytes32)  nameToIndex;\r\n    mapping(string => bytes32)  symbolToIndex;\r\n\r\n    event LogProposalSubmit(string name, string symbol, address proposer, bytes32 indexed hashIndex);\r\n    event LogProposalApprove(string name, address indexed tokenAddress);\r\n\r\n    /**\r\n     * @dev Submit token proposal to be stored, only called by Owner, which is set to be the Manager contract\r\n     * @param _name string Name of token\r\n     * @param _symbol string Symbol of token\r\n     * @param _decimals uint8 Decimals of token\r\n     * @param _totalSupply uint256 Total Supply of token\r\n     * @param _initialPercentage uint8 Initial Percentage of total supply to Vesting Beneficiary\r\n     * @param _vestingPeriodInWeeks uint256 Number of weeks that the remaining of total supply will be linearly vested for\r\n     * @param _vestingBeneficiary address Address of Vesting Beneficiary\r\n     * @param _proposer address Address of Proposer of Token, also the msg.sender of function call in Manager contract\r\n     * @return bytes32 It will return a hash index which is calculated as keccak256(_name, _symbol, _proposer)\r\n     */\r\n    function submitProposal(\r\n        string memory _name,\r\n        string memory _symbol,\r\n        uint8 _decimals,\r\n        uint256 _totalSupply,\r\n        uint8 _initialPercentage,\r\n        uint256 _vestingPeriodInWeeks,\r\n        address _vestingBeneficiary,\r\n        address _proposer\r\n    )\r\n    public\r\n    onlyOwner\r\n    returns (bytes32 hashIndex)\r\n    {\r\n        nameDoesNotExist(_name);\r\n        symbolDoesNotExist(_symbol);\r\n        hashIndex = keccak256(abi.encodePacked(_name, _symbol, _proposer));\r\n        rolodex[hashIndex] = Creator({\r\n            token : address(0),\r\n            name : _name,\r\n            symbol : _symbol,\r\n            decimals : _decimals,\r\n            totalSupply : _totalSupply,\r\n            proposer : _proposer,\r\n            vestingBeneficiary : _vestingBeneficiary,\r\n            initialPercentage : _initialPercentage,\r\n            vestingPeriodInWeeks : _vestingPeriodInWeeks,\r\n            approved : false\r\n        });\r\n        emit LogProposalSubmit(_name, _symbol, msg.sender, hashIndex);\r\n    }\r\n\r\n    /**\r\n     * @dev Approve token proposal, only called by Owner, which is set to be the Manager contract\r\n     * @param _hashIndex bytes32 Hash Index of Token proposal\r\n     * @param _token address Address of Token which has already been launched\r\n     * @return bool Whether it has completed the function\r\n     * @dev Notice that the only things that have changed from an approved proposal to one that is not\r\n     * is simply the .token and .approved object variables.\r\n     */\r\n    function approveProposal(\r\n        bytes32 _hashIndex,\r\n        address _token\r\n    )\r\n    external\r\n    onlyOwner\r\n    returns (bool)\r\n    {\r\n        Creator memory c = rolodex[_hashIndex];\r\n        nameDoesNotExist(c.name);\r\n        symbolDoesNotExist(c.symbol);\r\n        rolodex[_hashIndex].token = _token;\r\n        rolodex[_hashIndex].approved = true;\r\n        nameToIndex[c.name] = _hashIndex;\r\n        symbolToIndex[c.symbol] = _hashIndex;\r\n        emit LogProposalApprove(c.name, _token);\r\n        return true;\r\n    }\r\n\r\n    //Getters\r\n\r\n    function getIndexByName(\r\n        string memory _name\r\n        )\r\n    public\r\n    view\r\n    returns (bytes32)\r\n    {\r\n        return nameToIndex[_name];\r\n    }\r\n\r\n    function getIndexSymbol(\r\n        string memory _symbol\r\n        )\r\n    public\r\n    view\r\n    returns (bytes32)\r\n    {\r\n        return symbolToIndex[_symbol];\r\n    }\r\n\r\n    function getCreatorByIndex(\r\n        bytes32 _hashIndex\r\n    )\r\n    external\r\n    view\r\n    returns (Creator memory)\r\n    {\r\n        return rolodex[_hashIndex];\r\n    }\r\n\r\n\r\n\r\n    //Assertive functions\r\n\r\n    function nameDoesNotExist(string memory _name) internal view {\r\n        require(nameToIndex[_name] == 0x0, \"Name already exists\");\r\n    }\r\n\r\n    function symbolDoesNotExist(string memory _name) internal view {\r\n        require(symbolToIndex[_name] == 0x0, \"Symbol already exists\");\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n    }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return a / b;\r\n    }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ninterface IERC20 {\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  function balanceOf(address who) external view returns (uint256);\r\n\r\n  function allowance(address owner, address spender)\r\n    external view returns (uint256);\r\n\r\n  function transfer(address to, uint256 value) external returns (bool);\r\n\r\n  function approve(address spender, uint256 value)\r\n    external returns (bool);\r\n\r\n  function transferFrom(address from, address to, uint256 value)\r\n    external returns (bool);\r\n\r\n  event Transfer(\r\n    address indexed from,\r\n    address indexed to,\r\n    uint256 value\r\n  );\r\n\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\n    /**\r\n    * @title Standard ERC20 token\r\n    *\r\n    * @dev Implementation of the basic standard token.\r\n    * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\r\n    * Originally based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n    */\r\ncontract ERC20 is IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowed;\r\n\r\n    uint256 private _totalSupply;\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals;\r\n\r\n    /**\r\n    * @dev Total number of tokens in existence\r\n    */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the balance of the specified address.\r\n    * @param owner The address to query the the balance of.\r\n    * @return An uint256 representing the amount owned by the passed address.\r\n    */\r\n    function balanceOf(address owner) public view returns (uint256) {\r\n        return _balances[owner];\r\n    }\r\n\r\n    /**\r\n    * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n    * @param owner address The address which owns the funds.\r\n    * @param spender address The address which will spend the funds.\r\n    * @return A uint256 specifying the amount of tokens still available for the spender.\r\n    */\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    )\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return _allowed[owner][spender];\r\n    }\r\n\r\n\r\n    /**\r\n    * @dev Transfer token for a specified address\r\n    * @param to The address to transfer to.\r\n    * @param value The amount to be transferred.\r\n    */\r\n    function transfer(address to, uint256 value) public returns (bool) {\r\n        require(value <= _balances[msg.sender]);\r\n        require(to != address(0));\r\n\r\n        _balances[msg.sender] = _balances[msg.sender].sub(value);\r\n        _balances[to] = _balances[to].add(value);\r\n        emit Transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n    * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n    * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n    * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n    * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    * @param spender The address which will spend the funds.\r\n    * @param value The amount of tokens to be spent.\r\n    */\r\n    function approve(address spender, uint256 value) public returns (bool) {\r\n        require(spender != address(0));\r\n\r\n        _allowed[msg.sender][spender] = value;\r\n        emit Approval(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Transfer tokens from one address to another\r\n    * @param from address The address which you want to send tokens from\r\n    * @param to address The address which you want to transfer to\r\n    * @param value uint256 the amount of tokens to be transferred\r\n    */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    )\r\n        public\r\n        returns (bool)\r\n    {\r\n        require(value <= _balances[from]);\r\n        require(value <= _allowed[from][msg.sender]);\r\n        require(to != address(0));\r\n\r\n        _balances[from] = _balances[from].sub(value);\r\n        _balances[to] = _balances[to].add(value);\r\n        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\r\n        emit Transfer(from, to, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n    * approve should be called when allowed_[_spender] == 0. To increment\r\n    * allowed value is better to use this function to avoid 2 calls (and wait until\r\n    * the first transaction is mined)\r\n    * From MonolithDAO Token.sol\r\n    * @param spender The address which will spend the funds.\r\n    * @param addedValue The amount of tokens to increase the allowance by.\r\n    */\r\n    function increaseAllowance(\r\n        address spender,\r\n        uint256 addedValue\r\n    )\r\n        public\r\n        returns (bool)\r\n    {\r\n        require(spender != address(0));\r\n\r\n        _allowed[msg.sender][spender] = (\r\n        _allowed[msg.sender][spender].add(addedValue));\r\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n    * approve should be called when allowed_[_spender] == 0. To decrement\r\n    * allowed value is better to use this function to avoid 2 calls (and wait until\r\n    * the first transaction is mined)\r\n    * From MonolithDAO Token.sol\r\n    * @param spender The address which will spend the funds.\r\n    * @param subtractedValue The amount of tokens to decrease the allowance by.\r\n    */\r\n    function decreaseAllowance(\r\n        address spender,\r\n        uint256 subtractedValue\r\n    )\r\n        public\r\n        returns (bool)\r\n    {\r\n        require(spender != address(0));\r\n\r\n        _allowed[msg.sender][spender] = (\r\n        _allowed[msg.sender][spender].sub(subtractedValue));\r\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Internal function that mints an amount of the token and assigns it to\r\n    * an account. This encapsulates the modification of balances such that the\r\n    * proper events are emitted.\r\n    * @param account The account that will receive the created tokens.\r\n    * @param amount The amount that will be created.\r\n    */\r\n    function _mint(address account, uint256 amount) internal {\r\n        require(account != address(0));\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n    * @dev Internal function that burns an amount of the token of a given\r\n    * account.\r\n    * @param account The account whose tokens will be burnt.\r\n    * @param amount The amount that will be burnt.\r\n    */\r\n    function _burn(address account, uint256 amount) internal {\r\n        require(account != address(0));\r\n        require(amount <= _balances[account]);\r\n\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        _balances[account] = _balances[account].sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n    * @dev Internal function that burns an amount of the token of a given\r\n    * account, deducting from the sender's allowance for said account. Uses the\r\n    * internal burn function.\r\n    * @param account The account whose tokens will be burnt.\r\n    * @param amount The amount that will be burnt.\r\n    */\r\n    function _burnFrom(address account, uint256 amount) internal {\r\n        require(amount <= _allowed[account][msg.sender]);\r\n\r\n        // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,\r\n        // this function needs to emit an event with the updated approval.\r\n        _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(\r\n        amount);\r\n        _burn(account, amount);\r\n    }\r\n\r\n    function burnFrom(address account, uint256 amount) public {\r\n        _burnFrom(account, amount);\r\n    }\r\n}\r\n\r\n/**\r\n * @title Template contract for social money, to be used by TokenFactory\r\n * @author Jake Goh Si Yuan @ jakegsy, jake@jakegsy.com\r\n */\r\n\r\n\r\n\r\ncontract SocialMoney is ERC20 {\r\n\r\n    /**\r\n     * @dev Constructor on SocialMoney\r\n     * @param _name string Name parameter of Token\r\n     * @param _symbol string Symbol parameter of Token\r\n     * @param _decimals uint8 Decimals parameter of Token\r\n     * @param _proportions uint256[3] Parameter that dictates how totalSupply will be divvied up,\r\n                            _proportions[0] = Vesting Beneficiary Initial Supply\r\n                            _proportions[1] = Turing Supply\r\n                            _proportions[2] = Vesting Beneficiary Vesting Supply\r\n     * @param _vestingBeneficiary address Address of the Vesting Beneficiary\r\n     * @param _platformWallet Address of Turing platform wallet\r\n     * @param _tokenVestingInstance address Address of Token Vesting contract\r\n     */\r\n    constructor(\r\n        string memory _name,\r\n        string memory _symbol,\r\n        uint8 _decimals,\r\n        uint256[3] memory _proportions,\r\n        address _vestingBeneficiary,\r\n        address _platformWallet,\r\n        address _tokenVestingInstance\r\n    )\r\n    public\r\n    {\r\n        name = _name;\r\n        symbol = _symbol;\r\n        decimals = _decimals;\r\n\r\n        uint256 totalProportions = _proportions[0].add(_proportions[1]).add(_proportions[2]);\r\n\r\n        _mint(_vestingBeneficiary, _proportions[0]);\r\n        _mint(_platformWallet, _proportions[1]);\r\n        _mint(_tokenVestingInstance, _proportions[2]);\r\n\r\n        //Sanity check that the totalSupply is exactly where we want it to be\r\n        assert(totalProportions == totalSupply());\r\n    }\r\n}\r\n\r\n/**\r\n * @title TokenVesting contract for linearly vesting tokens to the respective vesting beneficiary\r\n * @dev This contract receives accepted proposals from the Manager contract, and holds in lieu\r\n * @dev all the tokens to be vested by the vesting beneficiary. It releases these tokens when called\r\n * @dev upon in a continuous-like linear fashion.\r\n * @notice This contract was written with reference to the TokenVesting contract from openZeppelin\r\n * @notice @ https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/drafts/TokenVesting.sol\r\n * @author Jake Goh Si Yuan @ jakegsy, jake@jakegsy.com\r\n */\r\ncontract TokenVesting is Ownable{\r\n\r\n    using SafeMath for uint256;\r\n\r\n    event Released(address indexed token, address vestingBeneficiary, uint256 amount);\r\n    event LogTokenAdded(address indexed token, address vestingBeneficiary, uint256 vestingPeriodInWeeks);\r\n\r\n    uint256 constant public WEEKS_IN_SECONDS = 1 * 7 * 24 * 60 * 60;\r\n\r\n    struct VestingInfo {\r\n        address vestingBeneficiary;\r\n        uint256 releasedSupply;\r\n        uint256 start;\r\n        uint256 duration;\r\n    }\r\n\r\n    mapping(address => VestingInfo) public vestingInfo;\r\n\r\n    /**\r\n     * @dev Method to add a token into TokenVesting\r\n     * @param _token address Address of token\r\n     * @param _vestingBeneficiary address Address of vesting beneficiary\r\n     * @param _vestingPeriodInWeeks uint256 Period of vesting, in units of Weeks, to be converted\r\n     * @notice This emits an Event LogTokenAdded which is indexed by the token address\r\n     */\r\n    function addToken\r\n    (\r\n        address _token,\r\n        address _vestingBeneficiary,\r\n        uint256 _vestingPeriodInWeeks\r\n    )\r\n    external\r\n    onlyOwner\r\n    {\r\n        vestingInfo[_token] = VestingInfo({\r\n            vestingBeneficiary : _vestingBeneficiary,\r\n            releasedSupply : 0,\r\n            start : now,\r\n            duration : uint256(_vestingPeriodInWeeks).mul(WEEKS_IN_SECONDS)\r\n        });\r\n        emit LogTokenAdded(_token, _vestingBeneficiary, _vestingPeriodInWeeks);\r\n    }\r\n\r\n    /**\r\n     * @dev Method to release any already vested but not yet received tokens\r\n     * @param _token address Address of Token\r\n     * @notice This emits an Event LogTokenAdded which is indexed by the token address\r\n     */\r\n\r\n    function release\r\n    (\r\n        address _token\r\n    )\r\n    external\r\n    {\r\n        uint256 unreleased = releaseableAmount(_token);\r\n        require(unreleased > 0);\r\n        vestingInfo[_token].releasedSupply = vestingInfo[_token].releasedSupply.add(unreleased);\r\n        bool success = ERC20(_token).transfer(vestingInfo[_token].vestingBeneficiary, unreleased);\r\n        require(success, \"transfer from vesting to beneficiary has to succeed\");\r\n        emit Released(_token, vestingInfo[_token].vestingBeneficiary, unreleased);\r\n    }\r\n\r\n    /**\r\n     * @dev Method to check the quantity of token that is already vested but not yet received\r\n     * @param _token address Address of Token\r\n     * @return uint256 Quantity of token that is already vested but not yet received\r\n     */\r\n    function releaseableAmount\r\n    (\r\n        address _token\r\n    )\r\n    public\r\n    view\r\n    returns(uint256)\r\n    {\r\n        return vestedAmount(_token).sub(vestingInfo[_token].releasedSupply);\r\n    }\r\n\r\n    /**\r\n     * @dev Method to check the quantity of token vested at current block\r\n     * @param _token address Address of Token\r\n     * @return uint256 Quantity of token that is vested at current block\r\n     */\r\n\r\n    function vestedAmount\r\n    (\r\n        address _token\r\n    )\r\n    public\r\n    view\r\n    returns(uint256)\r\n    {\r\n        VestingInfo memory info = vestingInfo[_token];\r\n        uint256 currentBalance = ERC20(_token).balanceOf(address(this));\r\n        uint256 totalBalance = currentBalance.add(info.releasedSupply);\r\n        if (now >= info.start.add(info.duration)) {\r\n            return totalBalance;\r\n        } else {\r\n            return totalBalance.mul(now.sub(info.start)).div(info.duration);\r\n        }\r\n\r\n    }\r\n\r\n\r\n    function getVestingInfo\r\n    (\r\n        address _token\r\n    )\r\n    external\r\n    view\r\n    returns(VestingInfo memory)\r\n    {\r\n        return vestingInfo[_token];\r\n    }\r\n\r\n\r\n}\r\n\r\n/**\r\n * @title TokenFactory contract for creating tokens from token proposals\r\n * @dev For creating tokens from pre-set parameters. This can be understood as a contract factory.\r\n * @author Jake Goh Si Yuan @ jakegsy, jake@jakegsy.com\r\n */\r\ncontract TokenFactory is Ownable{\r\n\r\n    using SafeMath for uint256;\r\n\r\n    uint8 public PLATFORM_PERCENTAGE;\r\n    address public PLATFORM_WALLET;\r\n    TokenVesting public TokenVestingInstance;\r\n\r\n    event LogTokenCreated(string name, string symbol, address indexed token, address vestingBeneficiary);\r\n    event LogPlatformPercentageChanged(uint8 oldP, uint8 newP);\r\n    event LogPlatformWalletChanged(address oldPW, address newPW);\r\n    event LogTokenVestingChanged(address oldTV, address newTV);\r\n    event LogTokenFactoryMigrated(address newTokenFactory);\r\n\r\n    /**\r\n     * @dev Constructor method\r\n     * @param _tokenVesting address Address of tokenVesting contract. If set to address(0), it will create one instead.\r\n     * @param _turingWallet address Turing Wallet address for sending out proportion of tokens alloted to it.\r\n     */\r\n    constructor(\r\n        address _tokenVesting,\r\n        address _turingWallet,\r\n        uint8 _platformPercentage\r\n    )\r\n    validatePercentage(_platformPercentage)\r\n    validateAddress(_turingWallet)\r\n    public\r\n    {\r\n\r\n        require(_turingWallet != address(0), \"Turing Wallet address must be non zero\");\r\n        PLATFORM_WALLET = _turingWallet;\r\n        PLATFORM_PERCENTAGE = _platformPercentage;\r\n        if (_tokenVesting == address(0)){\r\n            TokenVestingInstance = new TokenVesting();\r\n        }\r\n        else{\r\n            TokenVestingInstance = TokenVesting(_tokenVesting);\r\n        }\r\n\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Create token method\r\n     * @param _name string Name parameter of Token\r\n     * @param _symbol string Symbol parameter of Token\r\n     * @param _decimals uint8 Decimals parameter of Token, restricted to < 18\r\n     * @param _totalSupply uint256 Total Supply paramter of Token\r\n     * @param _initialPercentage uint8 Initial percentage of total supply that the Vesting Beneficiary will receive from launch, restricted to < 100\r\n     * @param _vestingPeriodInWeeks uint256 Number of weeks that the remaining of total supply will be linearly vested for, restricted to > 1\r\n     * @param _vestingBeneficiary address Address of the Vesting Beneficiary\r\n     * @return address Address of token that has been created by those parameters\r\n     */\r\n    function createToken(\r\n        string memory _name,\r\n        string memory _symbol,\r\n        uint8 _decimals,\r\n        uint256 _totalSupply,\r\n        uint8 _initialPercentage,\r\n        uint256 _vestingPeriodInWeeks,\r\n        address _vestingBeneficiary\r\n\r\n    )\r\n    public\r\n    onlyOwner\r\n    returns (address token)\r\n    {\r\n        uint256[3] memory proportions = calculateProportions(_totalSupply, _initialPercentage);\r\n        require(proportions[0].add(proportions[1]).add(proportions[2]) == _totalSupply,\r\n        \"The supply must be same as the proportion, sanity check.\");\r\n        SocialMoney sm = new SocialMoney(\r\n            _name,\r\n            _symbol,\r\n            _decimals,\r\n            proportions,\r\n            _vestingBeneficiary,\r\n            PLATFORM_WALLET,\r\n            address(TokenVestingInstance)\r\n        );\r\n        TokenVestingInstance.addToken(address(sm), _vestingBeneficiary, _vestingPeriodInWeeks);\r\n        token = address(sm);\r\n        emit LogTokenCreated(_name, _symbol, token, _vestingBeneficiary);\r\n    }\r\n\r\n    /**\r\n     * @dev Calculate proportions method\r\n     * @param _totalSupply uint256 Total Supply parameter of Token\r\n     * @param _initialPercentage uint8 Initial percentage of total supply that the Vesting Beneficiary will receive from launch, restricted to < 100\r\n     * @dev Calculates supply given to the Turing platform, the Creator and the vesting supply\r\n     * @return bytes32 Hash Index which is composed by the keccak256(name, symbol, msg.sender)\r\n     */\r\n    function calculateProportions(\r\n        uint256 _totalSupply,\r\n        uint8 _initialPercentage\r\n    )\r\n    private\r\n    view\r\n    validateTotalPercentage(_initialPercentage)\r\n    returns (uint256[3] memory proportions)\r\n    {\r\n        proportions[0] = (_totalSupply).mul(_initialPercentage).div(100); //Initial Supply to Creator\r\n        proportions[1] = (_totalSupply).mul(PLATFORM_PERCENTAGE).div(100); //Supply to Platform\r\n        proportions[2] = (_totalSupply).sub(proportions[0]).sub(proportions[1]); // Remaining Supply to vest on\r\n    }\r\n\r\n\r\n\r\n    function setPlatformPercentage(\r\n        uint8 _newPercentage\r\n    )\r\n    external\r\n    validatePercentage(_newPercentage)\r\n    onlyOwner\r\n    {\r\n        emit LogPlatformPercentageChanged(PLATFORM_PERCENTAGE, _newPercentage);\r\n        PLATFORM_PERCENTAGE = _newPercentage;\r\n    }\r\n\r\n    function setPlatformWallet(\r\n        address _newPlatformWallet\r\n    )\r\n    external\r\n    validateAddress(_newPlatformWallet)\r\n    onlyOwner\r\n    {\r\n        emit LogPlatformWalletChanged(PLATFORM_WALLET, _newPlatformWallet);\r\n        PLATFORM_WALLET = _newPlatformWallet;\r\n    }\r\n\r\n    function migrateTokenFactory(\r\n        address _newTokenFactory\r\n    )\r\n    external\r\n    onlyOwner\r\n    {\r\n        TokenVestingInstance.transferOwnership(_newTokenFactory);\r\n        emit LogTokenFactoryMigrated(_newTokenFactory);\r\n    }\r\n\r\n    function setTokenVesting(\r\n        address _newTokenVesting\r\n    )\r\n    external\r\n    onlyOwner\r\n    {\r\n        require(getOwnerStatic(_newTokenVesting) == address(this), \"new TokenVesting not owned by TokenFactory\");\r\n        emit LogTokenVestingChanged(address(TokenVestingInstance), address(_newTokenVesting));\r\n        TokenVestingInstance = TokenVesting(_newTokenVesting);\r\n    }\r\n\r\n\r\n\r\n    modifier validatePercentage(uint8 percentage){\r\n        require(percentage > 0 && percentage < 100);\r\n        _;\r\n    }\r\n\r\n    modifier validateAddress(address addr){\r\n        require(addr != address(0));\r\n        _;\r\n    }\r\n\r\n    modifier validateTotalPercentage(uint8 _x) {\r\n        require(PLATFORM_PERCENTAGE + _x < 100);\r\n        _;\r\n    }\r\n\r\n    function getTokenVesting() external view returns (address) {\r\n        return address(TokenVestingInstance);\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * FOR THE AUDITOR\r\n * This contract was designed with the idea that it would be owned by\r\n * another multi-party governance-like contract such as a multi-sig\r\n * or a yet-to-be researched governance protocol to be placed on top of\r\n */\r\n\r\n\r\n/**\r\n * @title Manager contract for receiving proposals and creating tokens\r\n * @dev For receiving token proposals and creating said tokens from such parameters.\r\n * @dev State is separated onto Registry contract\r\n * @dev To set up a working version of the entire platform, first create TokenFactory,\r\n * Registry, then transfer ownership to the Manager contract. Ensure as well that TokenVesting is\r\n * created for a valid TokenFactory. See the truffle\r\n * test, especially manager_test.js to understand how this would be done offline.\r\n * @author Jake Goh Si Yuan @jakegsy, jake@jakegsy.com\r\n */\r\ncontract Manager is Ownable {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    Registry public RegistryInstance;\r\n    TokenFactory public TokenFactoryInstance;\r\n\r\n    event LogTokenFactoryChanged(address oldTF, address newTF);\r\n    event LogRegistryChanged(address oldR, address newR);\r\n    event LogManagerMigrated(address indexed newManager);\r\n\r\n    /**\r\n     * @dev Constructor on Manager\r\n     * @param _registry address Address of Registry contract\r\n     * @param _tokenFactory address Address of TokenFactory contract\r\n     * @notice It is recommended that all the component contracts be launched before Manager\r\n     */\r\n    constructor(\r\n        address _registry,\r\n        address _tokenFactory\r\n    )\r\n    public\r\n    {\r\n        require(_registry != address(0) && _tokenFactory != address(0));\r\n        TokenFactoryInstance = TokenFactory(_tokenFactory);\r\n        RegistryInstance = Registry(_registry);\r\n    }\r\n\r\n    /**\r\n     * @dev Submit Token Proposal\r\n     * @param _name string Name parameter of Token\r\n     * @param _symbol string Symbol parameter of Token\r\n     * @param _decimals uint8 Decimals parameter of Token, restricted to < 18\r\n     * @param _totalSupply uint256 Total Supply paramter of Token\r\n     * @param _initialPercentage uint8 Initial percentage of total supply that the Vesting Beneficiary will receive from launch, restricted to < 100\r\n     * @param _vestingPeriodInWeeks uint256 Number of weeks that the remaining of total supply will be linearly vested for, restricted to > 1\r\n     * @param _vestingBeneficiary address Address of the Vesting Beneficiary\r\n     * @return bytes32 Hash Index which is composed by the keccak256(name, symbol, msg.sender)\r\n     */\r\n\r\n    function submitProposal(\r\n        string memory _name,\r\n        string memory _symbol,\r\n        uint8 _decimals,\r\n        uint256 _totalSupply,\r\n        uint8 _initialPercentage,\r\n        uint256 _vestingPeriodInWeeks,\r\n        address _vestingBeneficiary\r\n    )\r\n    validatePercentage(_initialPercentage)\r\n    validateDecimals(_decimals)\r\n    validateVestingPeriod(_vestingPeriodInWeeks)\r\n    isInitialized()\r\n    public\r\n    returns (bytes32 hashIndex)\r\n    {\r\n        hashIndex = RegistryInstance.submitProposal(_name,_symbol,_decimals,_totalSupply,\r\n        _initialPercentage, _vestingPeriodInWeeks, _vestingBeneficiary, msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev Approve Token Proposal\r\n     * @param _hashIndex bytes32 Hash Index of Token Proposal, given by keccak256(name, symbol, msg.sender)\r\n     */\r\n    function approveProposal(\r\n        bytes32 _hashIndex\r\n    )\r\n    isInitialized()\r\n    onlyOwner\r\n    external\r\n    {\r\n        //Registry.Creator memory approvedProposal = RegistryInstance.rolodex(_hashIndex);\r\n        Registry.Creator memory approvedProposal = RegistryInstance.getCreatorByIndex(_hashIndex);\r\n        address ac = TokenFactoryInstance.createToken(\r\n            approvedProposal.name,\r\n            approvedProposal.symbol,\r\n            approvedProposal.decimals,\r\n            approvedProposal.totalSupply,\r\n            approvedProposal.initialPercentage,\r\n            approvedProposal.vestingPeriodInWeeks,\r\n            approvedProposal.vestingBeneficiary\r\n            );\r\n        bool success = RegistryInstance.approveProposal(_hashIndex, ac);\r\n        require(success, \"Registry approve proposal has to succeed\");\r\n    }\r\n\r\n\r\n    /*\r\n     * CHANGE PLATFORM VARIABLES AND INSTANCES\r\n     */\r\n\r\n\r\n    function setPlatformWallet(\r\n        address _newPlatformWallet\r\n    )\r\n    onlyOwner\r\n    isInitialized()\r\n    external\r\n    {\r\n        TokenFactoryInstance.setPlatformWallet(_newPlatformWallet);\r\n    }\r\n\r\n    function setTokenFactoryPercentage(\r\n        uint8 _newPercentage\r\n    )\r\n    onlyOwner\r\n    validatePercentage(_newPercentage)\r\n    isInitialized()\r\n    external\r\n    {\r\n        TokenFactoryInstance.setPlatformPercentage(_newPercentage);\r\n    }\r\n\r\n    function setTokenFactory(\r\n        address _newTokenFactory\r\n    )\r\n    onlyOwner\r\n    external\r\n    {\r\n\r\n        require(getOwnerStatic(_newTokenFactory) == address(this), \"new TokenFactory has to be owned by Manager\");\r\n        require(getTokenVestingStatic(_newTokenFactory) == address(TokenFactoryInstance.TokenVestingInstance()), \"TokenVesting has to be the same\");\r\n        TokenFactoryInstance.migrateTokenFactory(_newTokenFactory);\r\n        require(getOwnerStatic(getTokenVestingStatic(_newTokenFactory))== address(_newTokenFactory), \"TokenFactory does not own TokenVesting\");\r\n        emit LogTokenFactoryChanged(address(TokenFactoryInstance), address(_newTokenFactory));\r\n        TokenFactoryInstance = TokenFactory(_newTokenFactory);\r\n    }\r\n\r\n    function setRegistry(\r\n        address _newRegistry\r\n    )\r\n\r\n    onlyOwner\r\n    external\r\n    {\r\n        require(getOwnerStatic(_newRegistry) == address(this), \"new Registry has to be owned by Manager\");\r\n        emit LogRegistryChanged(address(RegistryInstance), _newRegistry);\r\n        RegistryInstance = Registry(_newRegistry);\r\n    }\r\n\r\n    function setTokenVesting(\r\n        address _newTokenVesting\r\n    )\r\n    onlyOwner\r\n    external\r\n    {\r\n        TokenFactoryInstance.setTokenVesting(_newTokenVesting);\r\n    }\r\n\r\n    function migrateManager(\r\n        address _newManager\r\n    )\r\n    onlyOwner\r\n    isInitialized()\r\n    external\r\n    {\r\n        RegistryInstance.transferOwnership(_newManager);\r\n        TokenFactoryInstance.transferOwnership(_newManager);\r\n        emit LogManagerMigrated(_newManager);\r\n    }\r\n\r\n    modifier validatePercentage(uint8 percentage) {\r\n        require(percentage > 0 && percentage < 100, \"has to be above 0 and below 100\");\r\n        _;\r\n    }\r\n\r\n    modifier validateDecimals(uint8 decimals) {\r\n        require(decimals > 0 && decimals < 18, \"has to be above 0 and below 18\");\r\n        _;\r\n    }\r\n\r\n    modifier validateVestingPeriod(uint256 vestingPeriod) {\r\n        require(vestingPeriod > 1, \"has to be above 1\");\r\n        _;\r\n    }\r\n\r\n    modifier isInitialized() {\r\n        require(initialized(), \"manager not initialized\");\r\n        _;\r\n    }\r\n\r\n    function initialized() public view returns (bool){\r\n        return (RegistryInstance.owner() == address(this)) &&\r\n            (TokenFactoryInstance.owner() == address(this)) &&\r\n            (TokenFactoryInstance.TokenVestingInstance().owner() == address(TokenFactoryInstance));\r\n    }\r\n\r\n\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newTokenFactory\",\"type\":\"address\"}],\"name\":\"setTokenFactory\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newTokenVesting\",\"type\":\"address\"}],\"name\":\"setTokenVesting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newPlatformWallet\",\"type\":\"address\"}],\"name\":\"setPlatformWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_decimals\",\"type\":\"uint8\"},{\"name\":\"_totalSupply\",\"type\":\"uint256\"},{\"name\":\"_initialPercentage\",\"type\":\"uint8\"},{\"name\":\"_vestingPeriodInWeeks\",\"type\":\"uint256\"},{\"name\":\"_vestingBeneficiary\",\"type\":\"address\"}],\"name\":\"submitProposal\",\"outputs\":[{\"name\":\"hashIndex\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newRegistry\",\"type\":\"address\"}],\"name\":\"setRegistry\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"parseAddr\",\"outputs\":[{\"name\":\"parsed\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RegistryInstance\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newPercentage\",\"type\":\"uint8\"}],\"name\":\"setTokenFactoryPercentage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TokenFactoryInstance\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newManager\",\"type\":\"address\"}],\"name\":\"migrateManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_hashIndex\",\"type\":\"bytes32\"}],\"name\":\"approveProposal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_registry\",\"type\":\"address\"},{\"name\":\"_tokenFactory\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldTF\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newTF\",\"type\":\"address\"}],\"name\":\"LogTokenFactoryChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldR\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newR\",\"type\":\"address\"}],\"name\":\"LogRegistryChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"newManager\",\"type\":\"address\"}],\"name\":\"LogManagerMigrated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Manager","CompilerVersion":"v0.5.0+commit.1d4f565a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000002f16406a6dd13b25a3036d170b55442ac9e904af000000000000000000000000df65f4e6f2e9436bc1de1e00661c7108290e8bd3","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://c12bee5b5877b2234fab8c866f5df5fa77d714f2704c7db37ed8310b0f3b7b1c"}]}