{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n                              ______________                               \r\n                        ,===:'.,            `-._                           \r\n                             `:.`---.__         `-._                       \r\nwww.hyperwin.io                `:.     `--.         `.                     \r\n-= tiers: =-                     \\.        `.         `.                   \r\n1..10 ETH                (,,(,    \\.         `.   ____,-`.,                \r\n10..20 ETH                (,'     `/   \\.   ,--.___`.'                     \r\n20..30 ETH        ,  ,'  ,--.  `,   \\.;'         `                         \r\n                   `{D, {    \\  :    \\;                                    \r\n                     V,,'    /  /    //                                    \r\n                     j;;    /  ,' ,-//.    ,---.      ,                    \r\n                     \\;'   /  ,' /  _  \\  /  _  \\   ,'/                    \r\n                           \\   `'  / \\  `'  / \\  `.' /                     \r\n                            `.___,'   `.__,'   `.__,'    \r\n\r\n\r\n**/\r\n\r\npragma solidity ^0.4.26;\r\n\r\ncontract  HyperWinGame  {\r\n\r\n uint ethWei = 1 ether;\r\n    //getlevel\r\n    function getlevel(uint value) public view returns(uint){\r\n        if(value >= 1 * ethWei && value < 11 * ethWei){\r\n            \r\n            return 1;\r\n            \r\n        }if(value >= 11 * ethWei && value < 21 * ethWei){\r\n            \r\n            return 2;\r\n            \r\n        }if(value >= 21 * ethWei && value <= 30 * ethWei){\r\n            \r\n            return 3;\r\n            \r\n        }\r\n            return 0;\r\n    }\r\n    //getLinelevel\r\n    function getLineLevel(uint value) public view returns(uint){\r\n        if(value >= 1 * ethWei && value < 11 * ethWei){\r\n            \r\n            return 1;\r\n            \r\n        }if(value >= 11 * ethWei && value < 21 * ethWei){\r\n            \r\n            return 2;\r\n            \r\n        }if(value >= 21 * ethWei){\r\n            \r\n            return 3;\r\n        }\r\n    }\r\n    \r\n    //level-commend  /1000\r\n    function getScBylevel(uint level) public pure returns(uint){\r\n        if(level == 1){\r\n            \r\n            return 5;\r\n            \r\n        }if(level == 2){\r\n            \r\n            return 7;\r\n            \r\n        }if(level == 3) {\r\n            \r\n            return 10;\r\n        }\r\n        return 0;\r\n    }\r\n    \r\n    //level fire scale   /10\r\n    function getFireScBylevel(uint level) public pure returns(uint){\r\n        if(level == 1){\r\n            \r\n            return 3;\r\n            \r\n        }if(level == 2){\r\n            \r\n            return 6;\r\n            \r\n        }if(level == 3) {\r\n            \r\n            return 10;\r\n            \r\n        }return 0;\r\n    }\r\n    \r\n    //level and times => invite scale /100\r\n    function getRecommendScaleBylevelandTim(uint level,uint times) public pure returns(uint){\r\n        if(level == 1 && times == 1){ \r\n            \r\n            return 50;\r\n            \r\n        }if(level == 2 && times == 1){\r\n            \r\n            return 70;\r\n            \r\n        }if(level == 2 && times == 2){\r\n            \r\n            return 50;\r\n            \r\n        }if(level == 3) {\r\n            if(times == 1){\r\n                \r\n                return 100;\r\n                \r\n            }if(times == 2){\r\n                \r\n                return 80;\r\n                \r\n            }if(times == 3){\r\n                \r\n                return 60;\r\n                \r\n            }if(times >= 4 && times <= 10){\r\n                \r\n                return 10;\r\n                \r\n            }if(times >= 11 && times <= 20){\r\n                \r\n                return 5;\r\n                \r\n            }if(times >= 21){\r\n                \r\n                return 1;\r\n                \r\n            }\r\n        } return 0;\r\n    }\r\n    \r\n    \r\n     function compareStr(string memory _str, string memory str) public pure returns(bool) {\r\n        if (keccak256(abi.encodePacked(_str)) == keccak256(abi.encodePacked(str))) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n}\r\ncontract HyperWIN is HyperWinGame {\r\n    uint ethWei = 1 ether;\r\n    uint allCount = 0;\r\n    uint oneDayCount = 0;\r\n    uint totalMoney = 0;\r\n    uint totalCount = 0;\r\n    uint private beginTime = 1;\r\n    uint lineCountTimes = 1;\r\n    uint private currentIndex = 0;\r\n    address private owner;\r\n    uint private actStu = 0;\r\n\r\n    constructor () public {\r\n        owner = msg.sender;\r\n    }\r\n    struct User{\r\n\r\n        address ethAddress;\r\n        uint freeAmount;\r\n        uint freezeAmount;\r\n        uint rechargeAmount;\r\n        uint withdrawlsAmount;\r\n        uint inviteAmonut;\r\n        uint bonusAmount;\r\n        uint dayInviteAmonut;\r\n        uint dayBonusAmount;\r\n        uint level;\r\n        uint resTime;\r\n        uint lineAmount;\r\n        uint lineLevel;\r\n        string inviteCode;\r\n        string beInvitedCode;\r\n        uint isline;\r\n        uint status; \r\n        bool isVaild;\r\n    }\r\n\r\n    struct BonusGame{\r\n\r\n        address ethAddress;\r\n        uint inputAmount;\r\n        uint resTime;\r\n        string inviteCode;\r\n        string beInvitedCode;\r\n        uint isline;\r\n        uint status;\r\n        uint times;\r\n    }\r\n\r\n    mapping (address => User) userMapping;\r\n    mapping (string => address) addressMapping;\r\n    mapping (uint => address) indexMapping;\r\n\r\n    BonusGame[] game;\r\n\r\n\r\n    modifier onlyOwner {\r\n        require (msg.sender == owner, \"OnlyOwner methods called by non-owner.\");\r\n        _;\r\n    }\r\n\r\n     function invest(address ethAddress ,uint inputAmount,string  inviteCode,string  beInvitedCode) public payable{\r\n\r\n        ethAddress = msg.sender;\r\n        inputAmount = msg.value;\r\n        uint lineAmount = inputAmount;\r\n\r\n        if(!getUserByinviteCode(beInvitedCode)){\r\n          \r\n            require(getUserByinviteCode(beInvitedCode),\"Code must exit\");\r\n        }\r\n        if(inputAmount < 1 * ethWei || inputAmount > 15 * ethWei || compareStr(inviteCode,\"\")){\r\n          \r\n            require(inputAmount >= 1 * ethWei && inputAmount <= 15 * ethWei && !compareStr(inviteCode,\"\"), \"between 1 and 15\");\r\n        }\r\n        User storage userTest = userMapping[ethAddress];\r\n        if(userTest.isVaild && userTest.status != 2){\r\n            if((userTest.lineAmount + userTest.freezeAmount + lineAmount)> (15 * ethWei)){\r\n             \r\n                require((userTest.lineAmount + userTest.freezeAmount + lineAmount) <= 15 * ethWei,\"can not beyond 15 eth\");\r\n                return;\r\n            }\r\n        }\r\n       totalMoney = totalMoney + inputAmount;\r\n        totalCount = totalCount + 1;\r\n        bool isLine = false;\r\n\r\n        uint level =getlevel(inputAmount);\r\n        uint lineLevel = getLineLevel(lineAmount);\r\n        if(beginTime==1){\r\n            \r\n            lineAmount = 0;\r\n            oneDayCount = oneDayCount + inputAmount;\r\n            BonusGame memory invest = BonusGame(ethAddress,inputAmount,now, inviteCode, beInvitedCode ,1,1,0);\r\n            game.push(invest);\r\n            sendFeetoAdmin(inputAmount);\r\n            sendFeetoLuckdraw(inputAmount);\r\n            \r\n        }else{\r\n            \r\n            allCount = allCount + inputAmount;\r\n            isLine = true;\r\n            invest = BonusGame(ethAddress,inputAmount,now, inviteCode, beInvitedCode ,0,1,0);\r\n            inputAmount = 0;\r\n            game.push(invest);\r\n            \r\n        }\r\n          User memory user = userMapping[ethAddress];\r\n            if(user.isVaild && user.status == 1){\r\n                \r\n                user.freezeAmount = user.freezeAmount + inputAmount;\r\n                user.rechargeAmount = user.rechargeAmount + inputAmount;\r\n                user.lineAmount = user.lineAmount + lineAmount;\r\n                level =getlevel(user.freezeAmount);\r\n                lineLevel = getLineLevel(user.freezeAmount + user.freeAmount +user.lineAmount);\r\n                user.level = level;\r\n                user.lineLevel = lineLevel;\r\n                userMapping[ethAddress] = user;\r\n\r\n            }else{\r\n                if(isLine){\r\n                    level = 0;\r\n                }\r\n                if(user.isVaild){\r\n                    \r\n                   inviteCode = user.inviteCode;\r\n                   beInvitedCode = user.beInvitedCode;\r\n                   \r\n                }\r\n                user = User(ethAddress,0,inputAmount,inputAmount,0,0,0,0,0,level,now,lineAmount,lineLevel,inviteCode, beInvitedCode ,1,1,true);\r\n                userMapping[ethAddress] = user;\r\n\r\n                indexMapping[currentIndex] = ethAddress;\r\n                currentIndex = currentIndex + 1;\r\n            }\r\n            \r\n            address  ethAddressCode = addressMapping[inviteCode];\r\n            \r\n            if(ethAddressCode == 0x0000000000000000000000000000000000000000){\r\n                \r\n                addressMapping[inviteCode] = ethAddress;\r\n                \r\n            }\r\n\r\n    }\r\n\r\n      function registerUserInfo(address ethAddress ,uint freezeAmount,string  inviteCode,string  beInvitedCode ,uint freeAmount,uint times) public {\r\n          \r\n        require(actStu == 0,\"this action was closed\");\r\n        freezeAmount = freezeAmount * ethWei;\r\n        freeAmount = freeAmount * ethWei;\r\n        uint level =getlevel(freezeAmount);\r\n        uint lineLevel = getLineLevel(freezeAmount + freeAmount);\r\n        \r\n        if(beginTime==1 && freezeAmount > 0){\r\n            \r\n            BonusGame memory invest = BonusGame(ethAddress,freezeAmount,now, inviteCode, beInvitedCode ,1,1,times);\r\n            game.push(invest);\r\n            \r\n        }\r\n          User memory user = userMapping[ethAddress];\r\n            if(user.isVaild){\r\n                \r\n                user.freeAmount = user.freeAmount + freeAmount;\r\n                user.freezeAmount = user.freezeAmount +  freezeAmount;\r\n                user.rechargeAmount = user.rechargeAmount + freezeAmount +freezeAmount;\r\n                user.level =getlevel(user.freezeAmount);\r\n                user.lineLevel = getLineLevel(user.freezeAmount + user.freeAmount +user.lineAmount);\r\n                userMapping[ethAddress] = user;\r\n                \r\n            }else{\r\n                \r\n                user = User(ethAddress,freeAmount,freezeAmount,freeAmount+freezeAmount,0,0,0,0,0,level,now,0,lineLevel,inviteCode, beInvitedCode ,1,1,true);\r\n                userMapping[ethAddress] = user;\r\n\r\n                indexMapping[currentIndex] = ethAddress;\r\n                currentIndex = currentIndex + 1;\r\n            }\r\n            address  ethAddressCode = addressMapping[inviteCode];\r\n            \r\n            if(ethAddressCode == 0x0000000000000000000000000000000000000000){\r\n                \r\n                addressMapping[inviteCode] = ethAddress;\r\n            }\r\n\r\n    }\r\n\r\n    function ethWithDraw(address ethAddress) public{\r\n       \r\n        require (msg.sender == ethAddress, \"account diffrent\");\r\n\r\n         User memory user = userMapping[ethAddress];\r\n         uint sendMoney  = user.freeAmount;\r\n\r\n        bool isEnough = false ;\r\n        uint resultMoney = 0;\r\n        \r\n        (isEnough,resultMoney) = isEnoughBalance(sendMoney);\r\n\r\n            user.withdrawlsAmount =user.withdrawlsAmount + resultMoney;\r\n            user.freeAmount = user.freeAmount - resultMoney;\r\n            user.level = getlevel(user.freezeAmount);\r\n            user.lineLevel = getLineLevel(user.freezeAmount + user.freeAmount);\r\n            userMapping[ethAddress] = user;\r\n            \r\n            if(resultMoney > 0 ){\r\n                ethAddress.transfer(resultMoney);\r\n            }\r\n    }\r\n\r\n\r\n    function countShareAndRecommendedAward(uint startLength ,uint endLength) public {\r\n        \r\n         require ((msg.sender == owner || msg.sender == 0x7fe010e659c70afdbbd0e703c7e99a3d45358114\r\n         || msg.sender == 0x20f463183311c2ac63bc6786d3bcbc35b2a13539 || msg.sender == 0xf5549b177c5334ceb8647d940294181ecec763f5\r\n         || msg.sender == 0x2345e476e0e7bb1c6e03f987e454526a80a6e8be || msg.sender == 0xed886747a55f91f4c7b96aa750ae69f77e60e113\r\n         || msg.sender == 0x167efe4b0541331038561a5f949b7b3269fdb0ab), \"\");\r\n\r\n        for(uint i = startLength; i < endLength; i++) {\r\n            BonusGame memory invest = game[i];\r\n             address  ethAddressCode = addressMapping[invest.inviteCode];\r\n            User memory user = userMapping[ethAddressCode];\r\n            if(invest.isline==1 && invest.status == 1 && now < (invest.resTime + 5 days ) && invest.times <5){\r\n                \r\n                game[i].times = invest.times + 1;\r\n                uint scale = getScBylevel(user.level);\r\n                user.dayBonusAmount =user.dayBonusAmount + scale*invest.inputAmount/1000;\r\n                user.bonusAmount = user.bonusAmount + scale*invest.inputAmount/1000;\r\n                userMapping[ethAddressCode] = user;\r\n\r\n            }else if(invest.isline==1 && invest.status == 1 && ( now >= (invest.resTime + 5 days ) || invest.times >= 5 )){\r\n                \r\n                game[i].status = 2;\r\n                user.freezeAmount = user.freezeAmount - invest.inputAmount;\r\n                user.freeAmount = user.freeAmount + invest.inputAmount;\r\n                user.level = getlevel(user.freezeAmount);\r\n                userMapping[ethAddressCode] = user;\r\n                \r\n            }\r\n        }\r\n    }\r\n\r\n    function countRecommend(uint startLength ,uint endLength) public {\r\n        \r\n         require ((msg.sender == owner || msg.sender == 0x7fe010e659c70afdbbd0e703c7e99a3d45358114\r\n         || msg.sender == 0x20f463183311c2ac63bc6786d3bcbc35b2a13539 || msg.sender == 0xf5549b177c5334ceb8647d940294181ecec763f5\r\n         || msg.sender == 0x2345e476e0e7bb1c6e03f987e454526a80a6e8be || msg.sender == 0xed886747a55f91f4c7b96aa750ae69f77e60e113\r\n         || msg.sender == 0x167efe4b0541331038561a5f949b7b3269fdb0ab), \"\");\r\n         \r\n         for(uint i = startLength; i <= endLength; i++) {\r\n\r\n            address ethAddress = indexMapping[i];\r\n            if(ethAddress != 0x0000000000000000000000000000000000000000){\r\n\r\n                User memory user =  userMapping[ethAddress];\r\n                if(user.status == 1 && user.freezeAmount >= 1 * ethWei){\r\n                    \r\n                    uint scale = getScBylevel(user.level);\r\n                    implement(user.beInvitedCode,1,user.freezeAmount,scale);\r\n                    \r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    function implement(string inviteCode,uint runtimes,uint money,uint shareSc) private  returns(string,uint,uint,uint) {\r\n\r\n        string memory codeOne = \"null\";\r\n\r\n        address  ethAddressCode = addressMapping[inviteCode];\r\n        User memory user = userMapping[ethAddressCode];\r\n\r\n        if (user.isVaild && runtimes <= 25){\r\n            codeOne = user.beInvitedCode;\r\n              if(user.status == 1){\r\n                  \r\n                  uint fireSc = getFireScBylevel(user.lineLevel);\r\n                  uint recommendSc = getRecommendScaleBylevelandTim(user.lineLevel,runtimes);\r\n                  uint moneyResult = 0;\r\n\r\n                  if(money <= (user.freezeAmount+user.lineAmount+user.freeAmount)){\r\n                      \r\n                      moneyResult = money;\r\n                      \r\n                  }else{\r\n                      \r\n                      moneyResult = user.freezeAmount+user.lineAmount+user.freeAmount;\r\n                      \r\n                  }\r\n\r\n                  if(recommendSc != 0){\r\n                      \r\n                      user.dayInviteAmonut =user.dayInviteAmonut + (moneyResult*shareSc*fireSc*recommendSc/1000/10/100);\r\n                      user.inviteAmonut = user.inviteAmonut + (moneyResult*shareSc*fireSc*recommendSc/1000/10/100);\r\n                      userMapping[ethAddressCode] = user;\r\n                      \r\n                  }\r\n              }\r\n              \r\n              return implement(codeOne,runtimes+1,money,shareSc);\r\n        }\r\n        return (codeOne,0,0,0);\r\n\r\n    }\r\n\r\n    /**\r\n     * Automatically issue eth within the contract, prohibiting external calls\r\n    */\r\n    function sendMoneyToUser(address ethAddress, uint money) private {\r\n        \r\n        address send_to_address = ethAddress;\r\n        uint256 _eth = money;\r\n        send_to_address.transfer(_eth);\r\n\r\n    }\r\n\r\n    /**\r\n     * Dividends and sharing rewards are automatically issued.\r\n     * If the amount is greater than or equal to 0.1, \r\n     * the payment will be made. Otherwise, it will be accumulated in the account. \r\n     * If it is greater than or equal to 0.1, it will be automatically issued.\r\n    */\r\n    function sendAward(uint startLength ,uint endLength)  external onlyOwner  {\r\n\r\n         for(uint i = startLength; i <= endLength; i++) {\r\n\r\n            address ethAddress = indexMapping[i];\r\n            if(ethAddress != 0x0000000000000000000000000000000000000000){\r\n\r\n                User memory user =  userMapping[ethAddress];\r\n                if(user.status == 1){\r\n                    uint sendMoney =user.dayInviteAmonut + user.dayBonusAmount;\r\n\r\n                    if(sendMoney >= (ethWei/10)){\r\n                         sendMoney = sendMoney - (ethWei/1000);\r\n                        bool isEnough = false ;\r\n                        uint resultMoney = 0;\r\n                        (isEnough,resultMoney) = isEnoughBalance(sendMoney);\r\n                        if(isEnough){\r\n                            sendMoneyToUser(user.ethAddress,resultMoney);\r\n                            \r\n                            user.dayInviteAmonut = 0;\r\n                            user.dayBonusAmount = 0;\r\n                            userMapping[ethAddress] = user;\r\n                        }else{\r\n                            userMapping[ethAddress] = user;\r\n                            if(sendMoney > 0 ){\r\n                                sendMoneyToUser(user.ethAddress,resultMoney);\r\n                                user.dayInviteAmonut = 0;\r\n                                user.dayBonusAmount = 0;\r\n                                userMapping[ethAddress] = user;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function isEnoughBalance(uint sendMoney) private view returns (bool,uint){\r\n\r\n        if(address(this).balance > 0 ){\r\n             if(sendMoney >= address(this).balance){\r\n                if((address(this).balance ) > 0){\r\n                    return (false,address(this).balance);\r\n                }else{\r\n                    return (false,0);\r\n                }\r\n            }else{\r\n                 return (true,sendMoney);\r\n            }\r\n        }else{\r\n             return (false,0);\r\n        }\r\n    }\r\n\r\n    function getUserByAddress(address ethAddress) public view returns(uint,uint,uint,uint,uint,uint,uint,uint,uint,string,string,uint){\r\n\r\n            User memory user = userMapping[ethAddress];\r\n            return (user.lineAmount,user.freeAmount,user.freezeAmount,user.inviteAmonut,\r\n            user.bonusAmount,user.lineLevel,user.status,user.dayInviteAmonut,user.dayBonusAmount,user.inviteCode,user.beInvitedCode,user.level);\r\n    }\r\n    \r\n    function getUserByinviteCode(string inviteCode) public view returns (bool){\r\n\r\n        address  ethAddressCode = addressMapping[inviteCode];\r\n        User memory user = userMapping[ethAddressCode];\r\n      if (user.isVaild){\r\n          \r\n            return true;\r\n            \r\n      }\r\n        return false;\r\n    }\r\n    \r\n    function getSomeInfo() public view returns(uint,uint,uint){\r\n        \r\n        return(totalMoney,totalCount,beginTime);\r\n        \r\n    }\r\n    \r\n    function Gameinfo() public view returns(uint,uint,uint){\r\n        \r\n        return (game.length,currentIndex,actStu);\r\n        \r\n    }\r\n    \r\n    function getUseraddId(uint id)  public view returns(address) {\r\n         \r\n        BonusGame memory invest = game[id];\r\n        address  ethAddressCode = addressMapping[invest.inviteCode];\r\n        return ethAddressCode;\r\n     }\r\n     \r\n    function getUserById(uint id) public view returns(address){\r\n        \r\n        return indexMapping[id];\r\n        \r\n    }\r\n    \r\n   \r\n   \r\n    \r\n    function sendFeetoAdmin(uint amount) private {\r\n        \r\n        address adminAddress = 0x20f463183311c2ac63bc6786d3bcbc35b2a13539;\r\n        adminAddress.transfer(amount/25);\r\n        \r\n    }\r\n    \r\n\r\n    function sendFeetoLuckdraw(uint amount) private {\r\n        \r\n       address LuckdrawAddress = 0x167efe4b0541331038561a5f949b7b3269fdb0ab;\r\n       LuckdrawAddress.transfer(amount/100);\r\n       \r\n     }\r\n        \r\n    \r\n    function closeAct()  external onlyOwner {\r\n        \r\n        actStu = 1;\r\n        \r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"closeAct\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"getlevel\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Gameinfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ethAddress\",\"type\":\"address\"},{\"name\":\"inputAmount\",\"type\":\"uint256\"},{\"name\":\"inviteCode\",\"type\":\"string\"},{\"name\":\"beInvitedCode\",\"type\":\"string\"}],\"name\":\"invest\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSomeInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"getLineLevel\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"level\",\"type\":\"uint256\"}],\"name\":\"getFireScBylevel\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"startLength\",\"type\":\"uint256\"},{\"name\":\"endLength\",\"type\":\"uint256\"}],\"name\":\"countRecommend\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ethAddress\",\"type\":\"address\"}],\"name\":\"ethWithDraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"level\",\"type\":\"uint256\"},{\"name\":\"times\",\"type\":\"uint256\"}],\"name\":\"getRecommendScaleBylevelandTim\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ethAddress\",\"type\":\"address\"},{\"name\":\"freezeAmount\",\"type\":\"uint256\"},{\"name\":\"inviteCode\",\"type\":\"string\"},{\"name\":\"beInvitedCode\",\"type\":\"string\"},{\"name\":\"freeAmount\",\"type\":\"uint256\"},{\"name\":\"times\",\"type\":\"uint256\"}],\"name\":\"registerUserInfo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"ethAddress\",\"type\":\"address\"}],\"name\":\"getUserByAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getUserById\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"level\",\"type\":\"uint256\"}],\"name\":\"getScBylevel\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_str\",\"type\":\"string\"},{\"name\":\"str\",\"type\":\"string\"}],\"name\":\"compareStr\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"startLength\",\"type\":\"uint256\"},{\"name\":\"endLength\",\"type\":\"uint256\"}],\"name\":\"sendAward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"inviteCode\",\"type\":\"string\"}],\"name\":\"getUserByinviteCode\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getUseraddId\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"startLength\",\"type\":\"uint256\"},{\"name\":\"endLength\",\"type\":\"uint256\"}],\"name\":\"countShareAndRecommendedAward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"HyperWIN","CompilerVersion":"v0.4.26+commit.4563c3fc","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://e3f407bb792280feb58d0717069cc04c7c791b7638ccbf27c0a41d5ce5ffc160"}]}