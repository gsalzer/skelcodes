{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.2;\r\n\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see `ERC20Detailed`.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a `Transfer` event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through `transferFrom`. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when `approve` or `transferFrom` are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * > Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an `Approval` event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a `Transfer` event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to `approve`. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/utils/Address.sol\r\n\r\n\r\n/**\r\n * @dev Collection of functions related to the address type,\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * This test is non-exhaustive, and there may be false-negatives: during the\r\n     * execution of a contract's constructor, its address will be reported as\r\n     * not containing a contract.\r\n     *\r\n     * > It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n        // solhint-disable-next-line max-line-length\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/access/Roles.sol\r\n\r\n\r\n/**\r\n * @title Roles\r\n * @dev Library for managing addresses assigned to a Role.\r\n */\r\nlibrary Roles {\r\n    struct Role {\r\n        mapping (address => bool) bearer;\r\n    }\r\n\r\n    /**\r\n     * @dev Give an account access to this role.\r\n     */\r\n    function add(Role storage role, address account) internal {\r\n        require(!has(role, account), \"Roles: account already has role\");\r\n        role.bearer[account] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Remove an account's access to this role.\r\n     */\r\n    function remove(Role storage role, address account) internal {\r\n        require(has(role, account), \"Roles: account does not have role\");\r\n        role.bearer[account] = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Check if an account has this role.\r\n     * @return bool\r\n     */\r\n    function has(Role storage role, address account) internal view returns (bool) {\r\n        require(account != address(0), \"Roles: account is the zero address\");\r\n        return role.bearer[account];\r\n    }\r\n}\r\n\r\n// File: contracts/access/roles/OwnerRole.sol\r\n\r\n\r\n\r\ncontract OwnerRole {\r\n    using Roles for Roles.Role;\r\n\r\n    event OwnerAdded(address indexed account);\r\n    event OwnerRemoved(address indexed account);\r\n\r\n    Roles.Role private _owners;\r\n\r\n    constructor () internal {\r\n        _addOwner(msg.sender);\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(isOwner(msg.sender), \"OwnerRole: caller does not have the Owner role\");\r\n        _;\r\n    }\r\n\r\n    function isOwner(address account) public view returns (bool) {\r\n        return _owners.has(account);\r\n    }\r\n\r\n    function addOwner(address account) public onlyOwner {\r\n        //if (!isOwner(account)) {\r\n        _addOwner(account);\r\n        //}\r\n    }\r\n\r\n    function renounceOwner() public {\r\n        _removeOwner(msg.sender);\r\n    }\r\n\r\n    function _addOwner(address account) internal {\r\n        _owners.add(account);\r\n        emit OwnerAdded(account);\r\n    }\r\n\r\n    function _removeOwner(address account) internal {\r\n        _owners.remove(account);\r\n        emit OwnerRemoved(account);\r\n    }\r\n}\r\n\r\n// File: contracts/TokenVesting.sol\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title TokenVesting\r\n * @dev A token holder contract that can release its token balance gradually like a\r\n * typical vesting scheme, with a cliff and vesting period. Optionally revocable by the\r\n * owner.\r\n */\r\ncontract TokenVesting is OwnerRole {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    IERC20 private token;\r\n    uint256 private tokensToVest = 0;\r\n    uint256 private vestingId = 0;\r\n\r\n    string private constant INSUFFICIENT_BALANCE = \"Insufficient balance\";\r\n    string private constant INVALID_VESTING_ID = \"Invalid vesting id\";\r\n    string private constant VESTING_ALREADY_RELEASED = \"Vesting already released\";\r\n    string private constant INVALID_BENEFICIARY = \"Invalid beneficiary address\";\r\n    string private constant NOT_VESTED = \"Tokens have not vested yet\";\r\n\r\n    struct Vesting {\r\n        uint256 releaseTime;\r\n        uint256 amount;\r\n        address beneficiary;\r\n        bool released;\r\n    }\r\n    mapping(uint256 => Vesting) public vestings;\r\n\r\n    event TokenVestingReleased(uint256 indexed vestingId, address indexed beneficiary, uint256 amount);\r\n    event TokenVestingAdded(uint256 indexed vestingId, address indexed beneficiary, uint256 amount);\r\n    event TokenVestingRemoved(uint256 indexed vestingId, address indexed beneficiary, uint256 amount);\r\n\r\n    constructor(IERC20 _token, address _beneficiary, uint256 _day) public {\r\n        require(address(_token) != address(0x0), \"Token address is not valid\");\r\n        token = _token;\r\n        addVestingPlan(_beneficiary, _day);\r\n    }\r\n\r\n    function getToken() public view returns (IERC20) {\r\n        return token;\r\n    }\r\n\r\n    function beneficiary(uint256 _vestingId) public view returns (address) {\r\n        return vestings[_vestingId].beneficiary;\r\n    }\r\n\r\n    function releaseTime(uint256 _vestingId) public view returns (uint256) {\r\n        return vestings[_vestingId].releaseTime;\r\n    }\r\n\r\n    function vestingAmount(uint256 _vestingId) public view returns (uint256) {\r\n        return vestings[_vestingId].amount;\r\n    }\r\n\r\n    function removeVesting(uint256 _vestingId) public onlyOwner {\r\n        Vesting storage vesting = vestings[_vestingId];\r\n        require(vesting.beneficiary != address(0x0), INVALID_VESTING_ID);\r\n        require(!vesting.released, VESTING_ALREADY_RELEASED);\r\n        vesting.released = true;\r\n        tokensToVest = tokensToVest.sub(vesting.amount);\r\n        emit TokenVestingRemoved(_vestingId, vesting.beneficiary, vesting.amount);\r\n    }\r\n\r\n    function addVesting(address _beneficiary, uint256 _releaseTime, uint256 _amount) public onlyOwner {\r\n        require(_beneficiary != address(0x0), INVALID_BENEFICIARY);\r\n        tokensToVest = tokensToVest.add(_amount);\r\n        vestingId = vestingId.add(1);\r\n        vestings[vestingId] = Vesting({\r\n            beneficiary: _beneficiary,\r\n            releaseTime: _releaseTime,\r\n            amount: _amount,\r\n            released: false\r\n        });\r\n        emit TokenVestingAdded(vestingId, _beneficiary, _amount);\r\n    }\r\n\r\n    function release(uint256 _vestingId) public {\r\n        Vesting storage vesting = vestings[_vestingId];\r\n        require(vesting.beneficiary != address(0x0), INVALID_VESTING_ID);\r\n        require(!vesting.released, VESTING_ALREADY_RELEASED);\r\n        // solhint-disable-next-line not-rely-on-time\r\n        require(block.timestamp >= vesting.releaseTime, NOT_VESTED);\r\n\r\n        require(token.balanceOf(address(this)) >= vesting.amount, INSUFFICIENT_BALANCE);\r\n        vesting.released = true;\r\n        tokensToVest = tokensToVest.sub(vesting.amount);\r\n        token.safeTransfer(vesting.beneficiary, vesting.amount);\r\n        emit TokenVestingReleased(_vestingId, vesting.beneficiary, vesting.amount);\r\n    }\r\n\r\n    function retrieveExcessTokens(uint256 _amount) public onlyOwner {\r\n        require(_amount <= token.balanceOf(address(this)).sub(tokensToVest), INSUFFICIENT_BALANCE);\r\n        token.safeTransfer(msg.sender, _amount);\r\n    }\r\n\r\n    function addVestingPlan(address _beneficiary, uint256 _day) private onlyOwner {\r\n        uint256 SCALING_FACTOR = 10 ** 18;\r\n        uint256 day = _day;\r\n        addVesting(_beneficiary, now + 0, 3230085552 * SCALING_FACTOR);\r\n        addVesting(_beneficiary, now + 30 * day, 25000000 * SCALING_FACTOR);\r\n        addVesting(_beneficiary, now + 61 * day, 25000000 * SCALING_FACTOR);\r\n        addVesting(_beneficiary, now + 91 * day, 25000000 * SCALING_FACTOR);\r\n        addVesting(_beneficiary, now + 122 * day, 25000000 * SCALING_FACTOR);\r\n        addVesting(_beneficiary, now + 153 * day, 25000000 * SCALING_FACTOR);\r\n        addVesting(_beneficiary, now + 183 * day, 1088418885 * SCALING_FACTOR);\r\n        addVesting(_beneficiary, now + 214 * day, 25000000 * SCALING_FACTOR);\r\n        addVesting(_beneficiary, now + 244 * day, 25000000 * SCALING_FACTOR);\r\n        addVesting(_beneficiary, now + 275 * day, 25000000 * SCALING_FACTOR);\r\n        addVesting(_beneficiary, now + 306 * day, 25000000 * SCALING_FACTOR);\r\n        addVesting(_beneficiary, now + 335 * day, 25000000 * SCALING_FACTOR);\r\n        addVesting(_beneficiary, now + 366 * day, 1218304816 * SCALING_FACTOR);\r\n        addVesting(_beneficiary, now + 396 * day, 25000000 * SCALING_FACTOR);\r\n        addVesting(_beneficiary, now + 427 * day, 25000000 * SCALING_FACTOR);\r\n        addVesting(_beneficiary, now + 457 * day, 25000000 * SCALING_FACTOR);\r\n        addVesting(_beneficiary, now + 488 * day, 25000000 * SCALING_FACTOR);\r\n        addVesting(_beneficiary, now + 519 * day, 25000000 * SCALING_FACTOR);\r\n        addVesting(_beneficiary, now + 549 * day, 1218304816 * SCALING_FACTOR);\r\n        addVesting(_beneficiary, now + 580 * day, 25000000 * SCALING_FACTOR);\r\n        addVesting(_beneficiary, now + 610 * day, 25000000 * SCALING_FACTOR);\r\n        addVesting(_beneficiary, now + 641 * day, 25000000 * SCALING_FACTOR);\r\n        addVesting(_beneficiary, now + 672 * day, 25000000 * SCALING_FACTOR);\r\n        addVesting(_beneficiary, now + 700 * day, 25000000 * SCALING_FACTOR);\r\n        addVesting(_beneficiary, now + 731 * day, 1084971483 * SCALING_FACTOR);\r\n        addVesting(_beneficiary, now + 761 * day, 25000000 * SCALING_FACTOR);\r\n        addVesting(_beneficiary, now + 792 * day, 25000000 * SCALING_FACTOR);\r\n        addVesting(_beneficiary, now + 822 * day, 25000000 * SCALING_FACTOR);\r\n        addVesting(_beneficiary, now + 853 * day, 25000000 * SCALING_FACTOR);\r\n        addVesting(_beneficiary, now + 884 * day, 25000000 * SCALING_FACTOR);\r\n        addVesting(_beneficiary, now + 914 * day, 618304816 * SCALING_FACTOR);\r\n        addVesting(_beneficiary, now + 945 * day, 25000000 * SCALING_FACTOR);\r\n        addVesting(_beneficiary, now + 975 * day, 25000000 * SCALING_FACTOR);\r\n        addVesting(_beneficiary, now + 1096 * day, 593304816 * SCALING_FACTOR);\r\n        addVesting(_beneficiary, now + 1279 * day, 273304816 * SCALING_FACTOR);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vestingId\",\"type\":\"uint256\"}],\"name\":\"vestingAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vestingId\",\"type\":\"uint256\"}],\"name\":\"releaseTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vestingId\",\"type\":\"uint256\"}],\"name\":\"removeVesting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vestingId\",\"type\":\"uint256\"}],\"name\":\"release\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_releaseTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"addVesting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vestingId\",\"type\":\"uint256\"}],\"name\":\"beneficiary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"retrieveExcessTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"vestings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"releaseTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"released\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_day\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"vestingId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenVestingReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"vestingId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenVestingAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"vestingId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenVestingRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnerRemoved\",\"type\":\"event\"}]","ContractName":"TokenVesting","CompilerVersion":"v0.5.11+commit.c082d0b4","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000003a31c116a30a20cd1d406f30b873c35e53b689bf0000000000000000000000000c178653fce61677f4dffe143c2441b5e041b05d0000000000000000000000000000000000000000000000000000000000015180","Library":"","LicenseType":"GNU LGPLv3","SwarmSource":"bzzr://7793b5e3b1acc84381ec64d383241593c6ef5eb4f7adc1a61b4504b1b7de4672"}]}